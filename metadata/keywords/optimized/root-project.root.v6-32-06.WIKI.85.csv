quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Modifiability," Activate signal with single parameter. ;  ; template<typename... T> ; void EmitVA (const char *signal_name, Int_t, const T &... params);  Emit a signal with a varying number of arguments. ;  ; TList * GetListOfClassSignals () const;  Returns pointer to list of signals of this class. ;  ; TList * GetListOfConnections () const;  ; TList * GetListOfSignals () const;  ; virtual Bool_t HasConnection (const char *signal_name) const;  Return true if there is any object connected to this signal. ;  ; virtual void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttBBox2D; virtual ~TAttBBox2D ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TPad; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void DrawColorTable ();  Static function to Display Color Table in a pad. ;  ; static Int_t GetMaxPickDistance ();  Static function (see also TPad::SetMaxPickDistance) ;  ; static void SetMaxPickDistance (Int_t maxPick=5);  static function to set the maximum Pick Distance fgMaxPickDistance This parameter is used in TPad::Pick to select an object if its DistancetoPrimitive returns a value < fgMaxPickDistance The default value is 5 pixels. ;  ;  Static Public Member Functions inherited f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSlider.html:39461,inherit,inherited,39461,doc/master/classTSlider.html,https://root.cern,https://root.cern/doc/master/classTSlider.html,1,['inherit'],['inherited']
Modifiability," Add char c at position i. Check for out of bounds. ;  ; void Adopt (Int_t n, Char_t *array);  Adopt array arr into TArrayC, i.e. ;  ; Char_t At (Int_t i) const;  ; void Copy (TArrayC &array) const;  ; Char_t * GetArray ();  ; const Char_t * GetArray () const;  ; Double_t GetAt (Int_t i) const override;  ; Stat_t GetSum () const;  ; TClass * IsA () const override;  ; TArrayC & operator= (const TArrayC &rhs);  TArrayC assignment operator. ;  ; Char_t & operator[] (Int_t i);  ; Char_t operator[] (Int_t i) const;  ; void Reset (Char_t val=0);  ; void Set (Int_t n) override;  Set size of this array to n chars. ;  ; void Set (Int_t n, const Char_t *array);  Set size of this array to n chars and set the contents. ;  ; void SetAt (Double_t v, Int_t i) override;  ; void Streamer (TBuffer &) override;  Stream a TArrayC object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TArray;  TArray ();  ;  TArray (const TArray &a);  ;  TArray (Int_t n);  ; virtual ~TArray ();  ; Int_t GetSize () const;  ; TArray & operator= (const TArray &rhs);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Public Attributes; Char_t * fArray;  ;  Public Attributes inherited from TArray; Int_t fN;  . Additional Inherited Members;  Protected Member Functions inherited from TArray; Bool_t BoundsOk (const char *where, Int_t at) const;  ; Bool_t Out",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArrayC.html:1705,inherit,inherited,1705,doc/master/classTArrayC.html,https://root.cern,https://root.cern/doc/master/classTArrayC.html,1,['inherit'],['inherited']
Modifiability," Add font to static list of fonts supported by the canvas Name specifies name of the font, second is font file with .ttf or .woff2 extension Only True Type Fonts (ttf) are supported by PDF Returns font index which can be used in auto font_indx = TWebCanvas::AddFont(""test"", ""test.ttf"", 2); gStyle->SetStatFont(font_indx);. ;  ; static void BatchImageMode (UInt_t n=100);  Configure batch image mode for web graphics. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TString CreateCanvasJSON (TCanvas *c, Int_t json_compression=0, Bool_t batchmode=kFALSE);  Create JSON painting output for given canvas Produce JSON can be used for offline drawing with JSROOT. ;  ; static TString CreatePadJSON (TPad *pad, Int_t json_compression=0, Bool_t batchmode=kFALSE);  Create JSON painting output for given pad Produce JSON can be used for offline drawing with JSROOT. ;  ; static const char * DeclFileName ();  ; static const std::string & GetCustomScripts ();  Returns configured custom script. ;  ; static bool IsCustomClass (const TClass *cl);  Checks if class belongs to custom. ;  ; static TCanvasImp * NewCanvas (TCanvas *c, const char *name, Int_t x, Int_t y, UInt_t width, UInt_t height);  Static method to create TWebCanvas instance Used by plugin manager. ;  ; static bool ProduceImage (TPad *pad, const char *filename, Int_t width=0, Int_t height=0);  Create image using batch (headless) capability of Chrome or Firefox browsers Supported png, jpeg, svg, pdf formats. ;  ; static bool ProduceImages (std::vector< TPad * > pads, const char *filename, Int_t width=0, Int_t height=0);  Create images for several pads using batch (headless) capability of Chrome or Firefox browsers Supported png, jpeg, svg, pdf, webp formats One can include d qualifier which will be replaced by image index using printf functionality. ;  ; static void SetCustomScripts (const std::string &src);  Configures custom script for canvas. ;  ; s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebCanvas.html:7002,config,configured,7002,doc/master/classTWebCanvas.html,https://root.cern,https://root.cern/doc/master/classTWebCanvas.html,1,['config'],['configured']
Modifiability," AddRowWise (Matrix_t &output, const Matrix_t &biases);  Add the vectors biases row-wise to the matrix output. ;  ; static void AddRowWise (Tensor_t &output, const Matrix_t &biases);  ; Backward Propagation (Dense Layers); Low-level functions required for the forward propagation of activations through the network. . static void Backward (Tensor_t &activationGradientsBackward, Matrix_t &weightGradients, Matrix_t &biasGradients, const Tensor_t &df, const Tensor_t &activationGradients, const Matrix_t &weights, const Tensor_t &activationBackward);  Perform the complete backward propagation step. ;  ; static void ScaleAdd (Matrix_t &A, const Matrix_t &B, Scalar_t beta=1.0);  Adds a the elements in matrix B scaled by c to the elements in the matrix A. ;  ; static void Copy (Matrix_t &B, const Matrix_t &A);  ; template<typename AMatrix_t > ; static void CopyDiffArch (Matrix_t &B, const AMatrix_t &A);  ; static void ScaleAdd (Tensor_t &A, const Tensor_t &B, Scalar_t beta=1.0);  Above functions extended to vectors. ;  ; static void Copy (Tensor_t &A, const Tensor_t &B);  ; template<typename ATensor_t > ; static void CopyDiffArch (Tensor_t &A, const ATensor_t &B);  ; template<typename AMatrix_t > ; static void CopyDiffArch (std::vector< Matrix_t > &A, const std::vector< AMatrix_t > &B);  ; Activation Functions; For each activation function, the low-level interface contains two routines.; One that applies the activation function to a matrix and one that evaluate the derivatives of the activation function at the elements of a given matrix and writes the results into the result matrix. . static void ActivationFunctionForward (Tensor_t &X, EActivationFunction activFunct, const ActivationDescriptor_t activationDescr, const double coef=0.0, const AFloat alpha=1, const AFloat beta=0);  ; static void ActivationFunctionBackward (Tensor_t &dX, const Tensor_t &Y, const Tensor_t &dY, const Tensor_t &X, EActivationFunction activFunct, const ActivationDescriptor_t activationDescr, const AFl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCuda.html:8215,extend,extended,8215,doc/master/classTMVA_1_1DNN_1_1TCuda.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCuda.html,1,['extend'],['extended']
Modifiability," AddRowWise (Matrix_t &output, const Matrix_t &biases);  Add the vectors biases row-wise to the matrix output. ;  ; static void AddRowWise (Tensor_t &output, const Matrix_t &biases);  ; Backward Propagation (Dense Layers); Low-level functions required for the forward propagation of activations through the network. . static void Backward (Tensor_t &activationGradientsBackward, Matrix_t &weightGradients, Matrix_t &biasGradients, const Tensor_t &df, const Tensor_t &activationGradients, const Matrix_t &weights, const Tensor_t &activationBackward);  Perform the complete backward propagation step. ;  ; static void ScaleAdd (Matrix_t &A, const Matrix_t &B, Scalar_t beta=1.0);  Adds a the elements in matrix B scaled by c to the elements in the matrix A. ;  ; static void Copy (Matrix_t &B, const Matrix_t &A);  ; template<typename AMatrix_t > ; static void CopyDiffArch (Matrix_t &B, const AMatrix_t &A);  ; static void ScaleAdd (Tensor_t &A, const Tensor_t &B, Scalar_t beta=1.0);  Above functions extended to vectors. ;  ; static void Copy (Tensor_t &A, const Tensor_t &B);  ; template<typename ATensor_t > ; static void CopyDiffArch (Tensor_t &A, const ATensor_t &B);  ; template<typename AMatrix_t > ; static void CopyDiffArch (std::vector< Matrix_t > &A, const std::vector< AMatrix_t > &B);  ; Activation Functions; For each activation function, the low-level interface contains two routines.; One that applies the activation function to a matrix and one that evaluate the derivatives of the activation function at the elements of a given matrix and writes the results into the result matrix. . static void ActivationFunctionForward (Tensor_t &X, EActivationFunction activFunct, const ActivationDescriptor_t activationDescr, const double coef=0.0, const Scalar_t alpha=1, const Scalar_t beta=0);  ; static void ActivationFunctionBackward (Tensor_t &dX, const Tensor_t &Y, const Tensor_t &dY, const Tensor_t &X, EActivationFunction activFunct, const ActivationDescriptor_t activationDescr, const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpu.html:6534,extend,extended,6534,doc/master/classTMVA_1_1DNN_1_1TCpu.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpu.html,1,['extend'],['extended']
Modifiability," AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTExMap.html:3472,inherit,inheritance,3472,doc/master/classTExMap.html,https://root.cern,https://root.cern/doc/master/classTExMap.html,3,['inherit'],['inheritance']
Modifiability," Begin3D (TTree *t);  Initialization for 3D histogram. ;  ; void DefVar () override;  Define variables according to arguments. ;  ; void DoFill (Long64_t entry, Double_t w, const Double_t *v) override;  Fills the histgram with given values. ;  ;  Protected Member Functions inherited from TProofDraw; virtual void ClearFormula ();  Delete internal buffers. ;  ; virtual Bool_t CompileVariables ();  Compiles each variable from fTreeDrawArgsParser for the tree fTree. ;  ; void FillWeight ();  Get weight from input list, if any. ;  ; virtual Bool_t ProcessSingle (Long64_t, Int_t);  Processes a single variable from an entry. ;  ; void SetCanvas (const char *objname);  Move to a canvas named <name>_canvas; create the canvas if not existing. ;  ; void SetDrawAtt (TObject *o);  Set the drawing attributes from the input list. ;  ; void SetError (const char *sub, const char *mesg);  Sets the error status. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TH1 * fHistogram;  ;  Protected Attributes inherited from TProofDraw; Int_t fDimension;  ; TString fInitialExp;  ; TTreeFormulaManager * fManager;  ; Int_t fMultiplicity;  ; Bool_t fObjEval;  ; TTreeFormula * fSelect;  ; TString fSelection;  ; TStatus * fStatus;  ; TTree * fTree;  ; TTreeDrawArgsParser fTreeDrawArgsParser;  ; TTreeFormula * fVar [4];  ; Double_t fWeight;  ;  Protected Attributes inherited from TSelector; EAbort fAbort;  Abort status. ;  ; TList * fInput;  List of objects available during processing. ;  ; TObject * fObject;  ! Current object if processing object (vs. TTree) ;  ; TString fOption;  Option given to TTree::Process. ;  ; TSelectorList * fOutput;  ! List of objects created during processing ;  ; Long64_t fStatus;  Selector status. ;  . Private Member Functions; void DefVar1D ();  Define vars for 1D Histogram. ;  ; vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDrawHist.html:12688,inherit,inherited,12688,doc/master/classTProofDrawHist.html,https://root.cern,https://root.cern/doc/master/classTProofDrawHist.html,1,['inherit'],['inherited']
Modifiability," BranchingRatio () const;  ; TGeoElementRN * Daughter () const;  ; UInt_t Decay () const;  ; virtual void DecayShift (Int_t &dA, Int_t &dZ, Int_t &dI) const;  Returns variation in A, Z and Iso after decay. ;  ; Int_t DeltaIso () const;  ; Int_t GetIndex () const;  Get index of this channel in the list of decays of the parent nuclide. ;  ; const char * GetName () const override;  Returns name of decay. ;  ; TClass * IsA () const override;  ; TGeoDecayChannel & operator= (const TGeoDecayChannel &dc);  Assignment. ;  ; TGeoElementRN * Parent () const;  ; void Print (Option_t *opt="" "") const override;  Prints decay info. ;  ; Double_t Qvalue () const;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive for decays. ;  ; void SetDaughter (TGeoElementRN *daughter);  ; void SetParent (TGeoElementRN *parent);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoDecayChannel.html:2846,inherit,inherited,2846,doc/master/classTGeoDecayChannel.html,https://root.cern,https://root.cern/doc/master/classTGeoDecayChannel.html,1,['inherit'],['inherited']
Modifiability," Build ();  Build TGTextEditor widget. ;  ;  Protected Member Functions inherited from TGMainFrame; TString GetMWMfuncString () const;  used in SaveSource() ;  ; TString GetMWMinpString () const;  used in SaveSource() ;  ; TString GetMWMvalueString () const;  used in SaveSource() ;  ;  Protected Member Functions inherited from TGFrame; void DoRedraw () override;  Redraw the frame. ;  ; virtual void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Protected Attributes; TGComboBox * fComboCmd;  commands combobox ;  ; TGTextEntry * fCommand;  command text entry widget ;  ; TGTextBuffer * fCommandBuf;  command text buffer ;  ; Bool_t fExiting;  true if editor is closing ;  ; TString fFilename;  name of the opened file ;  ; TGLabel * fLabel;  ""command"" label ;  ; TMacro * fMacro;  pointer on the opened macro ;  ; TGMenuBar * fMenuBar;  editor's menu bar ;  ; TGLayoutHints * fMenuBarItemLayout;  used for for menubar items ;  ; TGLayoutHints * fMenuBarLayout;  used for the menubar ;  ; TGPopupMenu * fMenuEdit;  ""Edit"" menu entry ;  ; TGPopupMenu * fMenuFile;  ""File"" menu entry ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEditor.html:34537,inherit,inherited,34537,doc/master/classTGTextEditor.html,https://root.cern,https://root.cern/doc/master/classTGTextEditor.html,3,['inherit'],['inherited']
Modifiability," CAlgebraicSumType< vec, gen >;  CAlgebraicSumType< vec, sym >;  CAnalyticalGradientCalculator;  CBasicFunctionGradient;  ►CBasicFunctionMinimumResult of the minimization; both internal and external (MnUserParameterState) representation available For the parameters at the Minimum ;  CMnAboveMaxEdm;  CMnReachedCallLimit;  ►CBasicMinimumErrorInternal Class containing the error information on the estimated minimum : Error matrix + dcovar + additional flags for quality and validity checks ;  CMnHesseFailed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CBasicMinimumParameters;  CBasicMinimumSeed;  CBasicMinimumState;  CBFGSErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CBFGSMinimizerType;  CCombinedMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumiliErrorUpdatorIn the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives ;  CFumiliFCNAdapterTemplate wrapped class for adapting to FumiliFCNBase signature ;  CFumiliFCNBaseExtension of the FCNBase for the Fumili method ;  CFumiliGradientCalculator;  CFumiliMaximumLikelihoodFCNExtension of the FCNBase for the Fumili method ;  CFumiliMinimizerInstantiates the seed generator ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/annotated.html:62895,adapt,adapting,62895,doc/v614/annotated.html,https://root.cern,https://root.cern/doc/v614/annotated.html,3,['adapt'],['adapting']
Modifiability," CGaussIntegratorUser class for performing function integration ;  CGaussLegendreIntegratorUser class for performing function integration ;  CGenAlgoOptionsClass implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs ;  CGeneticMinimizerGeneticMinimizer ;  CGeneticMinimizerParameters;  CGenVector_exception;  CGlobalCoordinateSystemTagTag for identifying vectors based on a global coordinate system ;  CGoFTest;  CGradFunctorGradFunctor class for Multidimensional gradient functions ;  CGradFunctor1DGradFunctor1D class for one-dimensional gradient functions ;  CGSL1DMinimizerWrapperWrapper class for gsl_min_fminimizer structure ;  CGSLChebSeriesWrapper class for C struct gsl_cheb_series ;  CGSLDerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ) ;  CGSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL ;  CGSLFunctionDerivWrapperClass to wrap a gsl_function_fdf (with derivatives) ;  CGSLFunctionWrapperWrapper class to the gsl_function C structure ;  CGSLIntegrationWorkspace;  CGSLIntegratorClass for performing numerical integration of a function in one dimension ;  CGSLInterpolatorInterpolation class based on GSL interpolation functions ;  CGSLMCIntegrationWorkspace;  CGSLMCIntegrator;  CGSLMinimizerGSLMinimizer class ;  CGSLMinimizer1DMinimizer for arbitrary one dimensional functions ;  CGSLMiserIntegrationWorkspaceWorkspace for MISER ;  CGSLMonteFunctionAdapter;  CGSLMonteFunctionWrapperWrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm ;  CGSLMultiFitGSLMultiFit, internal class for implementing GSL non linear least square GSL fitting ;  CGSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:30766,adapt,adapting,30766,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,3,['adapt'],['adapting']
Modifiability," CObjBuildConfig;  CObjSplitRule;  CSimWSIFace;  CSplitRule;  CRooSpHarmonicImplementation of the so-called real spherical harmonics, using the orthonormal normalization, which are related to spherical harmonics as: ;  CRooStepFunctionThe Step Function is a binned function whose parameters are the heights of each bin ;  CRooStreamParser;  CRooStringVarRooStringVar implements a string values RooAbsArg ;  CRooStudyManagerRooStudyManager is a utility class to manage studies that consist of repeated applications of generate-and-fit operations on a workspace ;  CRooStudyPackageRooStudyPackage is a utility class to manage studies that consist of repeated applications of generate-and-fit operations on a workspace ;  CRooSuperCategoryRooSuperCategory consolidates several RooAbsCategoryLValue objects into a single category ;  CRooTableRooTable is the abstract interface for table objects ;  CROOTApplicationDelegate;  CRooTFnBinding;  CRooTFnPdfBinding;  CRooTFoamBindingLightweight interface adaptor that binds a RooAbsPdf to TFOAM ;  CRooThreshEntryClass RooThreshEntry is a utility class for RooThresholdCategory ;  CRooThresholdCategoryClass RooThresholdCategory provides a real-to-category mapping defined by a series of thresholds ;  CRooTMathReg;  CRooTObjWrapRooInt is a minimal implementation of a TNamed holding a TObject ;  CROOTOpenGLView;  CRooTraceClass RooTrace controls the memory tracing hooks in all RooFit objects ;  CRooTreeDataRooTreeData is the abstract base class for data collection that use a TTree as internal storage mechanism ;  CRooTreeDataStoreRooTreeDataStore is the abstract base class for data collection that use a TTree as internal storage mechanism ;  CRooTruthModelRooTruthModel is an implementation of RooResolution model that provides a delta-function resolution model The truth model supports all basis functions because it evaluates each basis function as ; as a RooFormulaVar ;  CRooUnblindCPAsymVarImplementation of BlindTools' CP asymmetry blinding meth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:129557,adapt,adaptor,129557,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,1,['adapt'],['adaptor']
Modifiability," CRooMapCatEntry;  ►CRooMappedCategory;  CEntry;  CRooMath;  CRooMathCoreReg;  CRooMathMoreReg;  CRooMCIntegratorRooMCIntegrator implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm originally described in G ;  CRooMCStudyRooMCStudy is a help class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets generated from the same PDF or another PDF ;  CRooMinimizerRooMinimizer is a wrapper class around ROOT::Fit:Fitter that provides a seamless interface between the minimizer functionality and the native RooFit interface ;  CRooMinimizerFcn;  CRooMinuitRooMinuit is a wrapper class around TFitter/TMinuit that provides a seamless interface between the MINUIT functionality and the native RooFit interface ;  CRooMomentRooMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  ►CRooMomentMorph;  CCacheElem;  ►CRooMomentMorphFunc;  CCacheElem;  ►CRooMomentMorphFuncND;  CCacheElem;  CDigits;  CGrid2;  ►CRooMomentMorphND;  CCacheElem;  CGrid;  CRooMPSentinelRooMPSentinel is a singleton class that keeps track of all parellel execution processes for goodness-of-fit calculations ;  ►CRooMsgServiceSingleton class that organizes informational, debugging, warning and errors messages generated by the RooFit core code ;  CStreamConfig;  CRooMultiBinomialRooMultiBinomial is an efficiency function which makes all combinations of efficiencies given as input different efficiency functions for different categories ;  CRooMultiCategoryRooMultiCategory consolidates several RooAbsCategory objects into a single category ;  CRooMultiCatIterRooMultiCatIter iterators over all state permutations of a list of categories ;  CRooMultiGenFunctionLightweight interface adaptor that exports a RooAbsReal as a ROOT::Math::IMultiGenFunction ;  ►CRooMultiVarGaussianMultivariate Gaussian p.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:112615,adapt,adaptor,112615,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,3,['adapt'],['adaptor']
Modifiability," CTNameMapNode;  CTSpinLockGuard;  CTClassDocInfo;  CTClassDocOutput;  CTClassGeneratorObjects following this interface can be passed onto the TROOT object to implement a user customized way to create the TClass objects ;  CTClassMenuItemDescribes one element of the context menu associated to a class The menu item may describe ;  CTClassRefTClassRef is used to implement a permanent reference to a TClass object ;  CTClassStreamer;  CTClassTableThis class registers for all classes their name, id and dictionary function in a hash table ;  CTClassTreeDraw inheritance tree and their relations for a list of classes ;  CTClonesArrayAn array of clone (identical) objects ;  CTCollectionCollection abstract base class ;  CTCollectionClassStreamerClass streamer object to implement TClassStreamer functionality for I/O emulation ;  CTCollectionMemberStreamerClass streamer object to implement TMemberStreamer functionality for I/O emulation ;  CTCollectionMethodBrowsableTCollectionMethodBrowsable extends TCollectionPropertyBrowsable by showing all methods of the collection itself ;  CTCollectionPropertyBrowsableA tiny browser helper object (and its generator) for adding a virtual (as in ""not actually part of the class"", not in C++ virtual) ""@size()"" method to a collection ;  CTCollectionProxyFactoryTCollectionProxyFactory Interface to collection proxy and streamer generator ;  CTCollectionStreamerClass streamer object to implement TClassStreamer functionality for I/O emulation ;  CTColorThe color creation and management class ;  ►CTColorGradientTColorGradient extends basic TColor ;  CPoint;  CTColorWheelDraw the ROOT Color Wheel ;  CTColumnView;  CTComplex;  CTCondition;  CTConditionImp;  CTCondor;  CTCondorSlave;  CTCONEA conical tube ;  CTConfidenceLevelClass to compute 95% CL limits ;  CTCONSA segment of a conical tube ;  CTContextMenuThis class provides an interface to context sensitive popup menus ;  CTContextMenuImpThis class provides an interface to GUI independent context s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:125051,extend,extends,125051,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,1,['extend'],['extends']
Modifiability," CVOptimizerGeneric Optimizer class ;  ►NExperimental;  CClassification;  CClassificationResult;  ►NkNN;  CEvent;  CModulekNN;  CNodeThis file contains binary tree and global function template that searches tree for k-nearest neigbors ;  NTMVAGlob;  CAbsoluteDeviationLossFunctionAbsolute Deviation Loss Function ;  CAbsoluteDeviationLossFunctionBDTAbsolute Deviation BDT Loss Function ;  CAbsValue;  CBDTEventWrapper;  CBinarySearchTreeA simple Binary search tree including a volume search method ;  CBinarySearchTreeNodeNode for the BinarySearch or Decision Trees ;  CBinaryTreeBase class for BinarySearch and Decision Trees ;  CCCPrunerA helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) ;  ►CCCTreeWrapper;  CCCTreeNode;  CClassifierFactoryThis is the MVA factory ;  CClassInfoClass that contains all the information of a class ;  Ccompose_binary_t;  Ccompose_unary_t;  ►CConfigSingleton class for global configuration settings used by TMVA ;  CIONames;  CVariablePlotting;  CConfigurable;  CConvergenceTestCheck for convergence ;  CCostComplexityPruneToolA class to prune a decision tree using the Cost Complexity method ;  CCrossEntropyImplementation of the CrossEntropy as separation criterion ;  CCrossValidationClass to perform cross validation, splitting the dataloader into folds ;  CCrossValidationFoldResult;  CCrossValidationResultClass to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation ;  CCvSplit;  CCvSplitKFolds;  CCvSplitKFoldsExpr;  CDataInputHandlerClass that contains all the data information ;  CDataLoader;  CDataSetClass that contains all the data information ;  ►CDataSetFactoryClass that contains all the data information ;  CEventStats;  CDataSetInfoClass that contains all the data information ;  CDataSetManagerClass that contains all the data information ;  CDecisionTreeImpl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/namespaces.html:87277,config,configuration,87277,doc/v616/namespaces.html,https://root.cern,https://root.cern/doc/v616/namespaces.html,1,['config'],['configuration']
Modifiability," Change the name and title of this tree. ;  ; virtual void SetParallelUnzip (bool opt=true, Float_t RelSize=-1);  Enable or disable parallel unzipping of Tree buffers. ;  ; virtual void SetPerfStats (TVirtualPerfStats *perf);  Set perf stats. ;  ; virtual void SetScanField (Int_t n=50);  ; void SetTargetMemoryRatio (Float_t ratio);  ; virtual void SetTimerInterval (Int_t msec=333);  ; virtual void SetTreeIndex (TVirtualIndex *index);  The current TreeIndex is replaced by the new index. ;  ; virtual void SetUpdate (Int_t freq=0);  ; virtual void Show (Long64_t entry=-1, Int_t lenmax=20);  Print values of all active leaves for entry. ;  ; virtual void StartViewer ();  Start the TTreeViewer on this tree. ;  ; virtual Int_t StopCacheLearningPhase ();  Stop the cache learning phase. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t UnbinnedFit (const char *funcname, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Unbinned fit of one or more variable(s) from a tree. ;  ; void UseCurrentStyle () override;  Replace current attributes by current style. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const override;  Write this object to the current directory. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) override;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTChain.html:28313,variab,variable,28313,doc/v632/classTChain.html,https://root.cern,https://root.cern/doc/v632/classTChain.html,1,['variab'],['variable']
Modifiability," Check if actual ROOT session is a remote one or a local one. ;  ; Bool_t GetHistAdd ();  ; void HandleArrows (Int_t keysym);  Handle the 'up' and 'down' arrow key events. ;  ; void HandleCommand ();  Handle command line from the ""command"" combo box. ;  ; void HandleTab ();  Handle the 'TAB' key events. ;  ; void HandleTextChanged (const char *);  Handle the text changed events. ;  ; Bool_t HandleTimer (TTimer *t) override;  Handle timer event. ;  ; TClass * IsA () const override;  ; void SetHistAdd (Bool_t add=kTRUE);  The function SetHistAdd() is needed for a standalone TApplication to log the TGCommandPlugin commands into a ROOT history file. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void ToggleTimer (Bool_t on);  Let user stop the internal timer when there is no need to check for remote. ;  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a top level main frame. ;  ;  ~TGMainFrame () override;  TGMainFrame destructor. ;  ; virtual Bool_t BindKey (const TGWindow *w, Int_t keycode, Int_t modifier) const;  Bind key to a window. ;  ; virtual void CloseWindow ();  Close and delete main frame. ;  ; void DontCallClose ();  Typically call this method in the slot connected to the CloseWindow() signal to prevent the calling of the default or any derived CloseWindow() methods to prevent premature or double deletion of this window. ;  ; TList * GetBindList () const;  ; void GetClassHints (const char *&className, const char *&resourceName) const;  ; const char * GetIconName () const override;  Returns mime type name of object. ;  ; const char * GetIconPixmap () const;  ; void GetMWMHints (UInt_t &value, UInt_t &funcs, UInt_t &input) const;  ; const char * GetWindowName () const;  ; void GetWMPosition (Int_t &x, Int_t &y) const;  ; void GetWMSize (UInt_t &w, UInt_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCommandPlugin.html:1557,inherit,inherited,1557,doc/master/classTGCommandPlugin.html,https://root.cern,https://root.cern/doc/master/classTGCommandPlugin.html,1,['inherit'],['inherited']
Modifiability," Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; Double_t fMatrix [9];  ; Int_t fNumber;  ; Double_t fPhi;  ; Double_t fPsi;  ; Double_t fTheta;  ; Int_t fType;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions; virtual void SetReflection ();  Checks whether the determinant of this matrix defines the reflection transformation and set the ""reflection"" flag if any. ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TRotMatrix.h>. Inheritance diagram for TRotMatrix:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkReflection . Definition at line 42 of file TRotMatrix.h. Constructor & Destructor Documentation. ◆ TRotMatrix() [1/4]. TRotMatrix::TRotMatrix ; (; ). RotMatrix default constructor. ; Definition at line 27 of file TRotMatrix.cxx. ◆ TRotMatrix() [2/4]. TRotMatrix::TRotMatrix ; (; const char * ; name, . const char * ; title, . Double_t * ; matrix . ). RotMatrix normal constructor. ; Definition at line 40 of file TRotMatrix.cxx. ◆ TRotMatrix() [3/4]. TRotMatrix::TRotMatrix ; (; const char * ; name, . const char * ; title, . Double_t ; theta, . Double_t ; phi, . Double_t ; psi . ). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRotMatrix.html:12551,inherit,inherited,12551,doc/master/classTRotMatrix.html,https://root.cern,https://root.cern/doc/master/classTRotMatrix.html,2,['inherit'],['inherited']
Modifiability," Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooWorkspaceHandle; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void DefineSetInWS (const char *name, const RooArgSet &set);  helper functions to define a set in the WS ;  ; void ImportDataInWS (RooAbsData &data);  internal function to import data in WS ;  ; void ImportPdfInWS (const RooAbsPdf &pdf);  internal function to import Pdf in WS ;  ; bool SetHasOnlyParameters (const RooArgSet &set, const char *errorMsgPrefix=nullptr);  helper function to check that content of a given set is exclusively parameters ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::string fConditionalObsName;  name for RooArgSet specifying conditional observables ;  ; std::string fConstrParamsName;  name for RooArgSet specifying constrained parameters ;  ; std::string fDataName;  name of data set in workspace ;  ; std::string fExtConstraintsName;  name for RooArgSet specifying external constraints ;  ; std::string fGlobalObsName;  name for RooArgSet specifying global observables ;  ; std::string fNuisParamsName;  name for RooArgSet specifying nuisance parameters ;  ; std::string fObservablesName;  name for RooArgSet specifying observable parameters. ;  ; std::string fPdfName;  name ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1ModelConfig.html:18519,inherit,inherited,18519,doc/master/classRooStats_1_1ModelConfig.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1ModelConfig.html,1,['inherit'],['inherited']
Modifiability," Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void Normalize (Double_t *vect);  Normalize a vector. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; Double_t fTranslation [3];  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TGeoMatrix; enum  EGeoTransfTypes { ;   kGeoIdentity = 0; , kGeoShared = (1ULL << ( 14 )); , kGeoTranslation = (1ULL << ( 17 )); , kGeoRotation = (1ULL << ( 18 )); , ;   kGeoScale = (1ULL << ( 19 )); , kGeoReflection = (1ULL << ( 20 )); , kGeoRegistered = (1ULL << ( 21 )); , kGeoSavePrimitive = (1ULL << ( 22 )); , ;   kGeoMatrixOwned = (1ULL << ( 23 )); , kGeoCombiTrans = kGeoTranslation | kGeoRotation; , kGeoGenTrans = kGeoTranslation | kGeoRotation | kGeoScale; , kGeoMatrixBits = kGeoShared | kGeoGenTrans | kGeoReflection | kGeoRegistered | kGeoSavePrimitive | kGeoMatrixOwned. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1U",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTranslation.html:15094,inherit,inherited,15094,doc/master/classTGeoTranslation.html,https://root.cern,https://root.cern/doc/master/classTGeoTranslation.html,1,['inherit'],['inherited']
Modifiability," Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Attributes; THbookFile * fFile;  ; Int_t fID;  ; Bool_t fInit;  ; Int_t fType;  ; char * fX;  ;  Protected Attributes inherited from TTree; TList * fAliases;  List of aliases for expressions based on the tree branches. ;  ; std::atomic< UInt_t > fAllocationCount {0};  indicates basket should be resized to exact memory usage, but causes significant ;  ; Long64_t fAutoFlush;  Auto-flush tree when fAutoFlush entries written or -fAutoFlush (compressed) bytes produced. ;  ; Long64_t fAutoSave;  Autosave tree when fAutoSave entries written or -fAutoSave (compressed) bytes produced. ;  ; TObjArray fBranches;  List of Branches. ;  ; TBranchRef * fBranchRef;  Branch supporting the TRefTable (if any) ;  ; bool fCacheDoAutoInit;  ! true if cache auto creation or resize check is needed ;  ; bool fCacheDoClusterPrefetch;  ! true if cache is prefetching whole clusters ;  ; Long64_t fCacheSize;  ! Maximum size of file buffers ;  ; bool fCacheUserSet;  ! true if the cache setting was explicitly given by user ;  ; Long64_t fChainOffset;  ! Offset of 1st entry of this Tree in a TChain ;  ; TList * fClones",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHbookTree.html:39073,inherit,inherited,39073,doc/master/classTHbookTree.html,https://root.cern,https://root.cern/doc/master/classTHbookTree.html,1,['inherit'],['inherited']
Modifiability," Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDocOutput; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; enum  ETraverse { kUp; , kDown; , kBoth; };  ;  Protected Types inherited from TDocOutput; enum  EGraphvizTool { kDot; , kNeato; , kFdp; , kCirco; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions; void ClassHtmlTree (std::ostream &out, TClass *classPtr, ETraverse dir=kBoth, int depth=1);  This function builds the class tree for one class in HTML (inherited and succeeding classes, called recursively) ;  ; void ClassTree (TVirtualPad *canvas, Bool_t force=kFALSE);  It makes a graphical class tree. ;  ; Bool_t CreateDotClassChartIncl (const char *filename);  Build the include dependency graph for one class in GraphViz/Dot format. ;  ; Bool_t CreateDotClassChartInh (const char *filename);  Build the class tree for one class in GraphViz/Dot format. ;  ; Bool_t CreateDotClassChartInhMem (const char *filename);  Build the class tree of inherited members for one class in GraphViz/Dot format. ;  ; Bool_t CreateDotClassChartLib (const char *filename);  Build the library dependency graph for one class in GraphViz/Dot format. ;  ; Bool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassDocOutput.html:14015,inherit,inherited,14015,doc/master/classTClassDocOutput.html,https://root.cern,https://root.cern/doc/master/classTClassDocOutput.html,2,['inherit'],['inherited']
Modifiability," Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; Int_t fCtype;  ; Int_t fSTLtype;  ;  Protected Attributes inherited from TStreamerElement; Int_t fArrayDim;  ; Int_t fArrayLength;  ; TClass * fClassObject;  ; Double_t fFactor;  Maximum of data member if a range is specified [xmin,xmax,nbits]. ;  ; Int_t fMaxIndex [5];  ; TClass * fNewClass;  pointer to class of object ;  ; Int_t fNewType;  base offset for TObject if the element inherits from it ;  ; Int_t fOffset;  ; Int_t fSize;  ; TMemberStreamer * fStreamer;  new element class when reading ;  ; Int_t fTObjectOffset;  element offset in class ;  ; Int_t fType;  ; TString fTypeName;  new element type when reading ;  ; Double_t fXmax;  Minimum of data member if a range is specified [xmin,xmax,nbits]. ;  ; Double_t fXmin;  pointer to element Streamer ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions;  TStreamerSTL (const TStreamerSTL &)=delete;  ; TStreamerSTL & operator= (const TStreamerSTL &)=delete;  . Additional Inherited Members;  Public Types inherited from TStreamerElement; enum  EStatusBits { ;   kHasRange = (1ULL << ( 6 )); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerSTL.html:14142,inherit,inherited,14142,doc/master/classTStreamerSTL.html,https://root.cern,https://root.cern/doc/master/classTStreamerSTL.html,1,['inherit'],['inherited']
Modifiability," Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TVirtualMonitoringWriter; TList * fTmpOpenPhases;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Inheritance diagram for ROOT::RTreeDrawMonitoring:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RTreeDrawMonitoring() [1/2]. ROOT::RTreeDrawMonitoring::RTreeDrawMonitoring ; (; const RTreeDrawMonitoring & ; ). privatedelete . ◆ RTreeDrawMonitoring() [2/2]. ROOT::RTreeDrawMonitoring::RTreeDrawMonitoring ; (; Int_t ; period, . RTreeViewer & ; viewer . ). inline . Definition at line 43 of file RTreeViewer.cxx. Member Function Documentation. ◆ operator=(). RTreeDrawMonitoring & ROOT::RTreeDrawMonitoring::operator= ; (; const RTreeDrawMonitoring & ; ). privatedelete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html:11852,inherit,inherited,11852,doc/v632/classROOT_1_1RTreeDrawMonitoring.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawMonitoring.html,4,['inherit'],['inherited']
Modifiability," Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t GetCounter ();  Return global window counter (total number of created windows). ;  ;  Static Public Member Functions inherited from TGObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullpt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAdvancedGraphicsDialog.html:27561,inherit,inherited,27561,doc/master/classTAdvancedGraphicsDialog.html,https://root.cern,https://root.cern/doc/master/classTAdvancedGraphicsDialog.html,178,['inherit'],['inherited']
Modifiability," Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; TString fText;  ; Bool_t fVerbatim;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TDocDirective;  TDocDirective ();  ;  TDocDirective (const char *name);  ;  ~TDocDirective () override;  ; virtual void AddParameter (const TString &, const char *=0);  ; virtual void DeleteOutputFiles (const char *ext) const;  Delete all output generated by the directive beginning with Name() and ending wi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocHtmlDirective.html:10734,inherit,inherited,10734,doc/master/classTDocHtmlDirective.html,https://root.cern,https://root.cern/doc/master/classTDocHtmlDirective.html,1,['inherit'],['inherited']
Modifiability," Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; void DeclareOptions ();  declare SA options. ;  . Private Attributes; Double_t fAdaptiveSpeed;  how fast temperature change in adaptive (in adaptive two variables describe the change of temperature, but fAdaptiveSpeed should be 1.0 and its not recommended to change it) ;  ; Double_t fEps;  relative required FCN accuracy at minimum ;  ; Double_t fInitialTemperature;  initial temperature (depends on FCN) ;  ; TString fKernelTemperatureS;  string just to set fKernelTemperature ;  ; Int_t fMaxCalls;  max number of FCN calls ;  ; Double_t fMinTemperature;  minimum temperature before SA quit ;  ; Double_t fTemperatureAdaptiveStep;  used to calculate InitialTemperature if fUseDefaultTemperature ;  ; Double_t fTemperatureScale;  how fast temperature change ;  ; Bool_t fUseDefaultScale;  if TRUE, SA calculates its own TemperatureScale ;  ; Bool_t fUseDefaultTemperature;  if TRUE, SA calculates its own InitialTemperature (MinTemperautre) ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1SimulatedAnnealingFitter.html:13701,adapt,adaptive,13701,doc/master/classTMVA_1_1SimulatedAnnealingFitter.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1SimulatedAnnealingFitter.html,3,"['adapt', 'variab']","['adaptive', 'variables']"
Modifiability," Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; void DoRedraw () override;  Draw horizontal progress bar. ;  ;  Protected Member Functions inherited from TGFrame; virtual void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Additional Inherited Members;  Public Types inherited from T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHProgressBar.html:24248,inherit,inherited,24248,doc/master/classTGHProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGHProgressBar.html,1,['inherit'],['inherited']
Modifiability," Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual void DrawMarker (Int_t marker, Long64_t eseek);  Draw marker. ;  ; virtual TObject * GetObject ();  Retrieve object at the mouse position in memory. ;  ; virtual bool GetObjectInfoDir (TDirectory *dir, Int_t px, Int_t py, TString &info) const;  Redefines TObject::GetObjectInfo. ;  ; virtual void PaintBox (TBox &box, Long64_t bseek, Int_t nbytes);  Paint the object at bseek with nbytes using the box object. ;  ; virtual void PaintDir (TDirectory *dir, const char *keys);  Paint keys in a directory. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TFile * fFile;  Pointer to the file. ;  ; TH1 * fFrame;  Histogram used to draw the map frame. ;  ; TString fKeys;  List of keys. ;  ; TString fOption;  Drawing options. ;  ; Int_t fXsize;  Size in bytes of X axis. ;  ; Int_t fYsize;  Size in K/Mbytes of Y axis. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileDrawMap.html:13140,inherit,inherited,13140,doc/master/classTFileDrawMap.html,https://root.cern,https://root.cern/doc/master/classTFileDrawMap.html,1,['inherit'],['inherited']
Modifiability," Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAtt3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttBBox; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void CopyIds (const TPointSet3D &t);  Copy id objects from point-set 't'. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TAttBBox;  TAttBBox (const TAttBBox &tab);  ; void AssertBBoxExtents (Float_t epsilon=0.005);  Assert extents of all sides of the bounding-box are at least epsilon. ;  ; void BBoxCheckPoint (const Float_t *p);  ; void BBoxCheckPoint (Float_t x, Float_t y, Float_t z);  ; void BBoxClear ();  Remove BBox information. ;  ; void BBoxInit (Float_t infinity=1e6);  Dynamic Float_t[6] X(min,max), Y(min,max), Z(min,max) ;  ; void BBoxZero (Float_t epsilon=0, Float_t x=0, Float_t y=0, Float_t z=0);  Create cube of volume (2*epsilon)^3 at (x,y,z). ;  . Protected Attributes; TRefArray fIds;  ; Bool_t fOwnIds;  ;  Protected Attributes inherited from TPolyMarker3D; Int_t fLastPoint {-1};  ; Int_t fN {0};  ; TString fName;  ; TString fOption;  ; Float_t * fP {nullptr};  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerCol",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPointSet3D.html:16110,inherit,inherited,16110,doc/master/classTPointSet3D.html,https://root.cern,https://root.cern/doc/master/classTPointSet3D.html,1,['inherit'],['inherited']
Modifiability," Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; enum  { kOwnData = (1ULL << ( 20 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Attributes; RooDataSet * fSData = nullptr;  ; RooArgList fSWeightVars;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <RooStats/SPlot.h>. Inheritance diagram for RooStats::SPlot:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SPlot.html:17318,inherit,inherited,17318,doc/master/classRooStats_1_1SPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SPlot.html,1,['inherit'],['inherited']
Modifiability," Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TParticle; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAtt3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Public Attributes; Bool_t fDecayed;  ; Int_t fEvaLabel;  ; Int_t fIndex;  ; Int_t fLabel;  ; TEveVector fPDecay;  ; Float_t fTDecay;  ; TEveVector fVDecay;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveMCTrack.html:14353,inherit,inherited,14353,doc/master/classTEveMCTrack.html,https://root.cern,https://root.cern/doc/master/classTEveMCTrack.html,2,['inherit'],['inherited']
Modifiability," Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TParticle; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAtt3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Public Attributes; float fEtaSize {0};  ; Double_t fPhi;  ; float fPhiSize {0};  ; Double_t fPt;  ; TRefArray fTracks;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classJet.html:14565,inherit,inherited,14565,doc/master/classJet.html,https://root.cern,https://root.cern/doc/master/classJet.html,2,['inherit'],['inherited']
Modifiability," Class_Version ();  ; static void cleanup ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsCollection; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; bool canBeAdded (const RooAbsArg &arg, bool silent) const override;  Determine whether it's possible to add a given RooAbsArg to the collection or not. ;  ; bool checkForDup (const RooAbsArg &arg, bool silent) const;  Check if element with var's name is already in set. ;  ;  Protected Member Functions inherited from RooAbsCollection; void clearStructureTags ();  ; void deleteList ();  Delete contents of the list. ;  ; void makeStructureTag ();  ; void makeTypedStructureTag ();  ; TNamed * structureTag ();  ; TNamed * typedStructureTag ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooArgSet.html:26511,inherit,inherited,26511,doc/master/classRooArgSet.html,https://root.cern,https://root.cern/doc/master/classRooArgSet.html,1,['inherit'],['inherited']
Modifiability," Class_Version(). static constexpr Version_t TSelectorDraw::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 121 of file TSelectorDraw.h. ◆ ClearFormula(). void TSelectorDraw::ClearFormula ; (; ). protectedvirtual . Delete internal buffers. ; Definition at line 941 of file TSelectorDraw.cxx. ◆ CompileVariables(). bool TSelectorDraw::CompileVariables ; (; const char * ; varexp = """", . const char * ; selection = """" . ). protectedvirtual . Compile input variables and selection expression. ; varexp is an expression of the general form e1:e2:e3 where e1,etc is a formula referencing a combination of the columns; Example: varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim distribution of y versus sqrt(x); selection is an expression with a combination of the columns; Example: selection = ""x<y && sqrt(z)>3.2""; in a selection all the C++ operators are authorized; Return false if any of the variable is not compilable. ; Definition at line 976 of file TSelectorDraw.cxx. ◆ DeclFileName(). static const char * TSelectorDraw::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 121 of file TSelectorDraw.h. ◆ GetAction(). virtual Int_t TSelectorDraw::GetAction ; (; ); const. inlinevirtual . Definition at line 80 of file TSelectorDraw.h. ◆ GetCleanElist(). virtual bool TSelectorDraw::GetCleanElist ; (; ); const. inlinevirtual . Definition at line 81 of file TSelectorDraw.h. ◆ GetDimension(). virtual Int_t TSelectorDraw::GetDimension ; (; ); const. inlinevirtual . Definition at line 82 of file TSelectorDraw.h. ◆ GetDrawFlag(). virtual Long64_t TSelectorDraw::GetDrawFlag ; (; ); const. inlinevirtual . Definition at line 83 of file TSelectorDraw.h. ◆ GetMultiplicity(). Int_t TSelectorDraw::GetMultiplicity ; (; ); const. inline . Definition at line 85 of file TSelectorDraw.h. ◆ GetNfill(). virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelectorDraw.html:19043,variab,variable,19043,doc/master/classTSelectorDraw.html,https://root.cern,https://root.cern/doc/master/classTSelectorDraw.html,1,['variab'],['variable']
Modifiability," Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Static Public Member Functions inherited from TAttBBox2D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions;  TGroupButton (const TGroupButton &)=delete;  ; TGroupButton & operator= (const TGroupButton &)=delete;  . Additional Inherited Members;  Public Types inherited from TPad; enum  { ;   kFraming = (1ULL << ( 6 )); , kHori = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kPrintingPS = (1ULL << ( 11 )); , ;   kCannotMove = (1ULL << ( 12 )); , kClearAfterCR = (1ULL << ( 14 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGroupButton.html:43065,inherit,inherited,43065,doc/master/classTGroupButton.html,https://root.cern,https://root.cern/doc/master/classTGroupButton.html,2,['inherit'],['inherited']
Modifiability," Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Static Public Member Functions inherited from TAttBBox2D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TButton * fBackward {nullptr};  Pointer to the Backward button. ;  ; TObject * fCurObject {nullptr};  Pointer to object being inspected. ;  ; TButton * fForward {nullptr};  Pointer to the Forward button. ;  ; TList * fObjects {nullptr};  List of objects inspected. ;  ;  Protected Attributes inherited from TCanvas; Bool_t fBatch;  ! True when in batchmode ;  ; Int_t fCanvasID;  ! Canvas identifier ;  ; TCanvasImp * fCanvasImp;  ! Window system specific canvas implementation ;  ; TAttCanvas fCatt;  Canvas attributes. ;  ; UInt_t fCh;  Height of the canvas along Y (pixels) ;  ; TObject * fClickSelected;  ! Currently click-selected object ;  ; TPad * fClickSelectedPad;  ! Pad containing currently click-selected object ;  ; TContextMenu * fContextMenu;  ! C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInspectCanvas.html:50688,inherit,inherited,50688,doc/master/classTInspectCanvas.html,https://root.cern,https://root.cern/doc/master/classTInspectCanvas.html,2,['inherit'],['inherited']
Modifiability," Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Static Public Member Functions inherited from TAttBBox2D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TObject * fRefObject {nullptr};  Pointer to object to set attributes. ;  ; TPad * fRefPad {nullptr};  Pad containing object. ;  ;  Protected Attributes inherited from TCanvas; Bool_t fBatch;  ! True when in batchmode ;  ; Int_t fCanvasID;  ! Canvas identifier ;  ; TCanvasImp * fCanvasImp;  ! Window system specific canvas implementation ;  ; TAttCanvas fCatt;  Canvas attributes. ;  ; UInt_t fCh;  Height of the canvas along Y (pixels) ;  ; TObject * fClickSelected;  ! Currently click-selected object ;  ; TPad * fClickSelectedPad;  ! Pad containing currently click-selected object ;  ; TContextMenu * fContextMenu;  ! Context menu pointer ;  ; UInt_t fCw;  Width of the canvas along X (pixels) ;  ; TString fDISPLAY;  Name of destination screen. ;  ; Int_t fD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDialogCanvas.html:50920,inherit,inherited,50920,doc/master/classTDialogCanvas.html,https://root.cern,https://root.cern/doc/master/classTDialogCanvas.html,2,['inherit'],['inherited']
Modifiability," Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Static Public Member Functions inherited from TAttBBox2D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TString fMethod;  Method to be executed by this button. ;  ;  Protected Attributes inherited from TPad; Bool_t fAbsCoord;  Use absolute coordinates. ;  ; Double_t fAbsHNDC;  Absolute Height of pad along Y in NDC. ;  ; Double_t fAbsPixeltoXk;  Conversion coefficient for absolute pixel to X World. ;  ; Double_t fAbsPixeltoYk;  Conversion coefficient for absolute pixel to Y World. ;  ; Double_t fAbsWNDC;  Absolute Width of pad along X in NDC. ;  ; Double_t fAbsXlowNDC;  Absolute X top left corner of pad in NDC [0,1]. ;  ; Double_t fAbsYlowNDC;  Absolute Y top left corner of pad in NDC [0,1]. ;  ; Double_t fAspectRatio;  ratio of w/h in case of fixed ratio ;  ; Short_t fBorderMode;  Bordermode (-1=down, 0 = no border, 1=up) ;  ; Short_t fBorderSize;  pad b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTButton.html:45150,inherit,inherited,45150,doc/master/classTButton.html,https://root.cern,https://root.cern/doc/master/classTButton.html,2,['inherit'],['inherited']
Modifiability," Connect to a Unix domain socket. Returns -1 in case of error. ;  ; static int UnixUnixConnect (int port);  Connect to a Unix domain socket. ;  ; static int UnixUnixService (const char *sockpath, int backlog);  Open a socket on path 'sockpath', bind to it and start listening for Unix domain connections to it. ;  ; static int UnixUnixService (int port, int backlog);  Open a socket, bind to it and start listening for Unix domain connections to it. ;  ; static int UnixWaitchild ();  Wait till child is finished. ;  ;  Static Protected Member Functions inherited from TSystem; static const char * StripOffProto (const char *path, const char *proto);  Strip off protocol string from specified path. ;  . Private Member Functions; void FillWithCwd (char *cwd) const;  Fill buffer with current working directory. ;  . Additional Inherited Members;  Public Types inherited from TSystem; enum  EAclicMode { kDefault; , kDebug; , kOpt; };  ; enum  EAclicProperties { kFlatBuildDir = (1ULL << ( 0 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TSystem; EAclicMode fAclicMode {kDefault};  ; Int_t fAclicProperties {0};  ; Int_t fBeepDuration {0};  ; Int_t fBeepFreq {0};  ; TString fBuildArch;  ; TString fBuildCompiler;  ; TString fBuildCompilerVersion;  ; TString fBuildCompilerV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnixSystem.html:35193,inherit,inherited,35193,doc/master/classTUnixSystem.html,https://root.cern,https://root.cern/doc/master/classTUnixSystem.html,2,['inherit'],['inherited']
Modifiability," Convert a '3D' viewport vertex to 3D world one. ;  ; TGLLine3 ViewportToWorld (const TPoint &viewport) const;  Convert a 2D viewport position to 3D world line - the projection of the viewport point into 3D space. ;  ; TGLLine3 ViewportToWorld (Double_t viewportX, Double_t viewportY) const;  Convert a 2D viewport position to 3D world line - the projection of the viewport point into 3D space. ;  ; void WindowToViewport (Int_t &, Int_t &y) const;  ; void WindowToViewport (TGLRect &rect) const;  ; void WindowToViewport (TGLVertex3 &vertex) const;  ; void WindowToViewport (TPoint &point) const;  ; TGLVector3 WorldDeltaToViewport (const TGLVertex3 &worldRef, const TGLVector3 &worldDelta) const;  Convert a 3D vector worldDelta (shift) about vertex worldRef to a viewport (screen) '3D' vector. ;  ; TGLVertex3 WorldToViewport (const TGLVertex3 &worldVertex, TGLMatrix *modviewMat=nullptr) const;  Convert a 3D world vertex to '3D' viewport (screen) one. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLOrthoCamera.html:10349,inherit,inherited,10349,doc/master/classTGLOrthoCamera.html,https://root.cern,https://root.cern/doc/master/classTGLOrthoCamera.html,2,['inherit'],['inherited']
Modifiability," Convert a local vector according view rotation matrix. ;  . Private Attributes; Double_t fBombR;  ; Double_t fBombX;  ; Double_t fBombY;  ; Double_t fBombZ;  ; TBuffer3D * fBuffer;  ; Double_t fCheckedBox [6];  ; TGeoNode * fCheckedNode;  ; TGeoChecker * fChecker;  ; TGeoShape * fClippingShape;  ; Int_t fExplodedView;  ; TGeoManager * fGeoManager;  ; TGeoHMatrix * fGlobal;  ; Bool_t fIsEditable;  ; Bool_t fIsPaintingShape;  ; Bool_t fIsRaytracing;  ; TGeoVolume * fLastVolume;  ; Double_t fMat [9];  ; Int_t fNsegments;  ; Int_t fNVisNodes;  ; TGeoOverlap * fOverlap;  ; Bool_t fPaintingOverlaps;  ; TGeoIteratorPlugin * fPlugin;  ; Bool_t fTopVisible;  ; TGeoVolume * fTopVolume;  ; TString fVisBranch;  ; Int_t fVisLevel;  ; Bool_t fVisLock;  ; Int_t fVisOption;  ; TObjArray * fVisVolumes;  ; TString fVolInfo;  . Additional Inherited Members;  Public Types inherited from TVirtualGeoPainter; enum  EGeoBombOption { kGeoNoBomb = 0; , kGeoBombXYZ = 1; , kGeoBombCyl = 2; , kGeoBombSph = 3; };  ; enum  EGeoVisLevel { kGeoVisLevel = 0; };  ; enum  EGeoVisOption { ;   kGeoVisDefault = 0; , kGeoVisLeaves = 1; , kGeoVisOnly = 2; , kGeoVisBranch = 3; , ;   kGeoVisChanged = 4. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TVirtualGeoPainter; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPainter.html:18985,inherit,inherited,18985,doc/master/classTGeoPainter.html,https://root.cern,https://root.cern/doc/master/classTGeoPainter.html,1,['inherit'],['inherited']
Modifiability," Copy constructor. ;  ;  RooArgProxy (RooArgProxy &&other)=delete;  ;  RooArgProxy (RooArgProxy const &other)=delete;  ;  ~RooArgProxy () override;  Destructor. ;  ; RooAbsArg * absArg () const;  Return pointer to contained argument. ;  ; TClass * IsA () const override;  ; bool isShapeServer () const;  Returns true if contents is shape server of owner. ;  ; bool isValueServer () const;  Returns true of contents is value server of owner. ;  ; const char * name () const override;  Return name of proxy. ;  ; RooArgProxy & operator= (RooArgProxy &&other)=delete;  ; RooArgProxy & operator= (RooArgProxy const &other)=delete;  ; RooAbsArg * owner () const;  Returns the owner of this proxy. ;  ; void print (std::ostream &os, bool addContents=false) const override;  Print the name of the proxy on ostream. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooArgProxy.html:2368,inherit,inherited,2368,doc/master/classRooArgProxy.html,https://root.cern,https://root.cern/doc/master/classRooArgProxy.html,1,['inherit'],['inherited']
Modifiability," Copy this crown to crown. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a crown. ;  ; virtual TCrown * DrawCrown (Double_t x1, Double_t y1, Double_t radin, Double_t radout, Double_t phimin=0, Double_t phimax=360, Option_t *option="""");  Draw this crown with new coordinates. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; TClass * IsA () const override;  ; Int_t IsInside (Double_t x, Double_t y) const;  Return 1 if the point (x,y) is inside the polygon defined by the crown 0 otherwise. ;  ; void Paint (Option_t *option="""") override;  Paint this crown with its current attributes. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEllipse;  TEllipse ();  Ellipse default constructor. ;  ;  TEllipse (const TEllipse &ellipse);  Copy constructor. ;  ;  TEllipse (Double_t x1, Double_t y1, Double_t r1, Double_t r2=0, Double_t phimin=0, Double_t phimax=360, Double_t theta=0);  Ellipse normal constructor. ;  ;  ~TEllipse () override;  Ellipse default destructor. ;  ; void Copy (TObject &ellipse) const override;  Copy this ellipse to ellipse. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to an ellipse. ;  ; void Draw (Option_t *option="""") override;  Draw this ellipse with its current attributes. ;  ; virtual TEllipse * DrawEllipse (Double_t x1, Double_t y1, Double_t r1, Double_t r2, Double_t phimin, Double_t phimax, Double_t theta, Option_t *option="""");  Draw this ellipse with new coordinates. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; Rectangle_t GetBBox () override;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCrown.html:2511,inherit,inherited,2511,doc/master/classTCrown.html,https://root.cern,https://root.cern/doc/master/classTCrown.html,1,['inherit'],['inherited']
Modifiability," Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ;  ; Int_t getBin (const char *rangeName=nullptr) const override;  ; virtual Int_t getBin (const RooAbsBinning &binning) const;  ; Int_t getBin (const RooAbsBinning *ptr) const override;  ; const RooAbsBinning * getBinningPtr (const char *rangeName) const override;  ; virtual Int_t getBins (const char *name=nullptr) const;  Get number of bins of currently defined range. ;  ; double getBinWidth (Int_t i, const char *rangeName=nullptr) const override;  ; virtual double getBinWidth (Int_t i, const RooAbsBinning &binning) const;  ; virtual double getMax (const char *name=nullptr) const;  Get maximum of currently defined range. ;  ; virtual double getMin (const char *name=nullptr) const;  Get minimum of currently defined range. ;  ; std::pair< double, double > getRange (const char *name=nullptr) const;  Get low and high bound of the variable. ;  ; bool hasMax (const char *name=nullptr) const;  Check if variable has an upper bound. ;  ; bool hasMin (const char *name=nullptr) const;  Check if variable has a lower bound. ;  ; bool hasRange (const char *name) const override;  Check if variable has a binning with given name. ;  ; bool inRange (const char *name) const override;  Check if current value is inside range with given name. ;  ; bool inRange (double value, const char *rangeName, double *clippedValue=nullptr) const;  Return true if the input value is within our fit range. ;  ; void inRange (std::span< const double > values, std::string const &rangeName, std::vector< bool > &out) const;  Vectorized version of RooAbsRealLValue::inRange(double, const char*, double*). ;  ; bool isLValue () const override;  Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ;  ; bool isValidReal (double value, bool printError=false) const overri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLinearVar.html:8038,variab,variable,8038,doc/master/classRooLinearVar.html,https://root.cern,https://root.cern/doc/master/classRooLinearVar.html,1,['variab'],['variable']
Modifiability," Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ;  ; Int_t getBin (const char *rangeName=nullptr) const override;  ; virtual Int_t getBin (const RooAbsBinning &binning) const;  ; Int_t getBin (const RooAbsBinning *ptr) const override;  ; const RooAbsBinning * getBinningPtr (const char *rangeName) const override;  ; virtual Int_t getBins (const char *name=nullptr) const;  Get number of bins of currently defined range. ;  ; double getBinWidth (Int_t i, const char *rangeName=nullptr) const override;  ; virtual double getBinWidth (Int_t i, const RooAbsBinning &binning) const;  ; virtual double getMax (const char *name=nullptr) const;  Get maximum of currently defined range. ;  ; virtual double getMin (const char *name=nullptr) const;  Get minimum of currently defined range. ;  ; std::pair< double, double > getRange (const char *name=nullptr) const;  Get low and high bound of the variable. ;  ; bool hasMax (const char *name=nullptr) const;  Check if variable has an upper bound. ;  ; bool hasMin (const char *name=nullptr) const;  Check if variable has a lower bound. ;  ; bool hasRange (const char *name) const override;  Check if variable has a binning with given name. ;  ; bool inRange (const char *name) const override;  Check if current value is inside range with given name. ;  ; bool inRange (double value, const char *rangeName, double *clippedValue=nullptr) const;  Return true if the input value is within our fit range. ;  ; void inRange (std::span< const double > values, std::string const &rangeName, std::vector< bool > &out) const;  Vectorized version of RooAbsRealLValue::inRange(double, const char*, double*). ;  ; virtual bool isJacobianOK (const RooArgSet &depList) const;  ; bool isLValue () const override;  Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ;  ; bool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooErrorVar.html:8776,variab,variable,8776,doc/master/classRooErrorVar.html,https://root.cern,https://root.cern/doc/master/classRooErrorVar.html,2,['variab'],['variable']
Modifiability," Create and fill a histogram with the efficiency N[1] / ( N[1] + N[0] ), where N(1/0) is the number of data points with effCat=1 and effCat=0 as function of the frames variable. ;  ; virtual RooPlot * plotOn (RooPlot *frame, PlotOpt o) const;  Create and fill a histogram of the frame's variable and append it to the frame. ;  ; virtual std::unique_ptr< RooAbsData > reduceEng (const RooArgSet &varSubset, const RooFormulaVar *cutVar, const char *cutRange=nullptr, std::size_t nStart=0, std::size_t=std::numeric_limits< std::size_t >::max()) const =0;  ; virtual void resetCache ();  Internal method – Remove cached function values. ;  ; virtual void setArgStatus (const RooArgSet &set, bool active);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooArgSet _cachedVars;  ! External variables cached with this data set ;  ; std::unique_ptr< RooAbsDataStore > _dstore;  Data storage implementation. ;  ; std::unique_ptr< RooArgSet > _globalObservables;  Snapshot of global observables. ;  ; const TNamed * _namePtr = nullptr;  ! De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; std::map< std::string, RooAbsData * > _ownedComponents;  Owned external components. ;  ; RooArgSet _vars;  Dimensions of this data set. ;  ; StorageType storageType;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static StorageType defaultStorageType =RooAbsData::Vector;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; void copyGlobalObservables (const RooAbsData &other);  ; void copyImpl (const RooAbsData &other, const char *newname);  . Private Attributes; const RooFit::UniqueId< RooAbsData > _uniqueId;  ! ;  . Friends; class RooAbsOptTestStatistic;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsData.html:30746,variab,variables,30746,doc/master/classRooAbsData.html,https://root.cern,https://root.cern/doc/master/classRooAbsData.html,1,['variab'],['variables']
Modifiability," DeclFileName ();  . Protected Attributes; Int_t fBorderSize;  window box bordersize in pixels ;  ; Double_t fCornerRadius;  Corner radius in case of option arc. ;  ; Int_t fInit;  (=0 if transformation to NDC not yet done) ;  ; TString fName;  Pave name. ;  ; TString fOption;  Pave style. ;  ; Int_t fShadowColor;  Color of the pave's shadow. ;  ; Double_t fX1NDC;  X1 point in NDC coordinates. ;  ; Double_t fX2NDC;  X2 point in NDC coordinates. ;  ; Double_t fY1NDC;  Y1 point in NDC coordinates. ;  ; Double_t fY2NDC;  Y2 point in NDC coordinates. ;  ;  Protected Attributes inherited from TBox; Bool_t fResizing;  ! True if box is being resized ;  ; Double_t fX1;  X of 1st point. ;  ; Double_t fX2;  X of 2nd point. ;  ; Double_t fY1;  Y of 1st point. ;  ; Double_t fY2;  Y of 2nd point. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TPave.h>. Inheritance diagram for TPave:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkNameIsAction double clicking on TPave will execute action . Definition at line 35 of file TPave.h. Constructor & Destructor Documentation. ◆ TPave() [1/3]. TPave::TPave ; (; ). Pave default constructor. ; Definition at line 36 of file TPave.cxx. ◆ TPave() [2/3]. TPave::TPave ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2, . I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPave.html:18335,inherit,inherited,18335,doc/master/classTPave.html,https://root.cern,https://root.cern/doc/master/classTPave.html,1,['inherit'],['inherited']
Modifiability," DeclFileName ();  . Protected Types; enum  { kSonsInvisible = (1ULL << ( 17 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions;  TNode (const TNode &);  copy constructor ;  ; TNode & operator= (const TNode &);  assignment operator ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TRotMatrix * fMatrix;  ; TList * fNodes;  ; TString fOption;  ; TNode * fParent;  ; TShape * fShape;  ; Int_t fVisibility;  ; Double_t fX;  ; Double_t fY;  ; Double_t fZ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . #include <TNode.h>. Inheritance diagram for TNode:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. protected . Enumerator",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNode.html:17189,inherit,inherited,17189,doc/master/classTNode.html,https://root.cern,https://root.cern/doc/master/classTNode.html,1,['inherit'],['inherited']
Modifiability," DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Float_t fA;  ; Float_t fDensity;  ; Float_t fInterLength;  ; Int_t fNumber;  ; Float_t fRadLength;  ; Float_t fZ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TMaterial.h>. Inheritance diagram for TMaterial:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera inst",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMaterial.html:12524,inherit,inherited,12524,doc/master/classTMaterial.html,https://root.cern,https://root.cern/doc/master/classTMaterial.html,1,['inherit'],['inherited']
Modifiability," DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH3;  TH3 ();  Default constructor. ;  ;  TH3 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins, Int_t nbinsz, const Double_t *zbins);  Constructor for variable bin size (along X, Y and Z axis) 3-D histograms using input arrays of type double. ;  ;  TH3 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins, Int_t nbinsz, const Float_t *zbins);  Constructor for variable bin size (along X, Y and Z axis) 3-D histograms using input arrays of type float. ;  ;  TH3 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup);  Constructor for fix bin size 3-D histograms. ;  ; virtual Int_t BufferFill (Double_t x, Double_t y, Double_t z, Double_t w);  Accumulate arguments in buffer. ;  ; Int_t BufferFill (Double_t, Double_t) override;  accumulate arguments in buffer. ;  ; virtual Int_t BufferFill (Double_t, Double_t, Double_t);  ; void DoFillProfileProjection (TProfile2D *p2, const TAxis &a1, const TAxis &a2, const TAxis &a3, Int_t bin1, Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3C.html:48830,variab,variable,48830,doc/master/classTH3C.html,https://root.cern,https://root.cern/doc/master/classTH3C.html,6,['variab'],['variable']
Modifiability," DeclFileName ();  ;  Static Public Member Functions inherited from TAttBBox2D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Float_t fAngle;  Arrow opening angle (degrees) ;  ; Float_t fArrowSize;  Arrow Size. ;  ; TString fOption;  Arrow shapes. ;  ;  Protected Attributes inherited from TLine; Double_t fX1 {0};  X of 1st point. ;  ; Double_t fX2 {0};  X of 2nd point. ;  ; Double_t fY1 {0};  Y of 1st point. ;  ; Double_t fY2 {0};  Y of 2nd point. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Static Protected Attributes; static Float_t fgDefaultAngle = 60;  Default Arrow opening angle (degrees) ;  ; static Float_t fgDefaultArrowSize = 0.05;  Default Arrow Size. ;  ; static TString fgDefaultOption = "">"";  Default Arrow shapes. ;  . Additional Inherited Members;  Public Types inherited from TLine; enum  { kLineNDC = (1ULL << ( 14 )); , kVertical = (1ULL << ( 15 )); , kHorizontal = (1ULL << ( 16 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArrow.html:18745,inherit,inherited,18745,doc/master/classTArrow.html,https://root.cern,https://root.cern/doc/master/classTArrow.html,1,['inherit'],['inherited']
Modifiability," DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; std::unique_ptr< RooDataSet > _data;  Summary dataset to store results. ;  ; std::unique_ptr< RooRealVar > _dll0h;  Container variable for delta NLL. ;  ; std::unique_ptr< RooRealVar > _nll0h;  Container variable for NLL result on null hypothesis. ;  ; double _nullValue;  Numeric value of Nsignal parameter representing the null hypothesis. ;  ; std::string _parName;  Name of Nsignal parameter. ;  ; std::unique_ptr< RooRealVar > _sig0h;  Container variable for NLL result with signal. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from RooAbsMCStudyModule; RooArgSet * allDependents ();  Return all observables. ;  ; bool binGenData ();  If true binning of data between generating and f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDLLSignificanceMCSModule.html:13299,variab,variable,13299,doc/master/classRooDLLSignificanceMCSModule.html,https://root.cern,https://root.cern/doc/master/classRooDLLSignificanceMCSModule.html,1,['variab'],['variable']
Modifiability," DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions;  TGeoMaterial (const TGeoMaterial &);  Transient framework-defined extension to materials. ;  ; TGeoMaterial & operator= (const TGeoMaterial &);  assignment operator ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fA;  ; TObject * fCerenkov;  ; TList fConstProperties;  ; Double_t fDensity;  ; TGeoElement * fElement;  ; TGeoExtension * fFWExtension;  Transient user-defined extension to materials. ;  ; Int_t fIndex;  ; Double_t fIntLen;  ; Double_t fPressure;  ; TList fProperties;  ; Double_t fRadLen;  ; TObject * fShader;  ; EGeoMaterialState fState;  ; Double_t fTemperature;  ; TGeoExtension * fUserExtension;  ; Double_t fZ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGeoMaterial.h>. Inheritance diagram for TGe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoMaterial.html:18461,inherit,inherited,18461,doc/master/classTGeoMaterial.html,https://root.cern,https://root.cern/doc/master/classTGeoMaterial.html,1,['inherit'],['inherited']
Modifiability," Default destructor. ;  ; UInt_t GetSeed () const override;  Returns one of the seeds of the generator. ;  ; TClass * IsA () const override;  ; Double_t Rndm () override;  TausWorth generator from L'Ecuyer, uses as seed 3x32bits integers Use a mask of 0xffffffffUL to make in work on 64 bit machines Periodicity of about 10**26 Generate number in interval (0,1) : 0 and 1 are not included in the interval. ;  ; Double_t Rndm () override;  Machine independent random number generator. ;  ; virtual Double_t Rndm (Int_t);  ; void RndmArray (Int_t n, Double_t *array) override;  Return an array of n random numbers uniformly distributed in ]0,1]. ;  ; void RndmArray (Int_t n, Float_t *array) override;  Return an array of n random numbers uniformly distributed in ]0,1]. ;  ; void SetSeed (ULong_t seed=0) override;  Set the generator seed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TRandom;  TRandom (UInt_t seed=65539);  Default constructor. For seed see SetSeed(). ;  ;  ~TRandom () override;  Default destructor. ;  ; virtual Int_t Binomial (Int_t ntot, Double_t prob);  Generates a random integer N according to the binomial law. ;  ; virtual Double_t BreitWigner (Double_t mean=0, Double_t gamma=1);  Return a number distributed following a BreitWigner function with mean and gamma. ;  ; virtual void Circle (Double_t &x, Double_t &y, Double_t r);  Generates random vectors, uniformly distributed over a circle of given radius. ;  ; virtual Double_t Exp (Double_t tau);  Returns an exponential deviate. ;  ; virtual Double_t Gaus (Double_t mean=0, Double_t sigma=1);  Samples a random number from the standard Normal (Gaussian) Distribution with the given mean and sigma. ;  ; virtual UInt_t Integer (UInt_t imax);  Returns a random integer uniformly distributed on the interval [ 0, imax-1 ]. ;  ; virtual Double_t Landau (Double_t mean=0, Double_t si",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRandom2.html:2006,inherit,inherited,2006,doc/master/classTRandom2.html,https://root.cern,https://root.cern/doc/master/classTRandom2.html,1,['inherit'],['inherited']
Modifiability," Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Private Member Functions;  TGViewFrame (const TGViewFrame &)=delete;  ; TGViewFrame & operator= (const TGViewFrame &)=delete;  . Private Attributes; TGView * fView;  . Additional Inherited Members;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TGFrame; enum  { kDeleteWindowCalled = (1ULL << ( 15 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGFrame; void DoRedraw () override;  Redraw the frame. ;  ; virtual void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGViewFrame.html:25018,inherit,inherited,25018,doc/master/classTGViewFrame.html,https://root.cern,https://root.cern/doc/master/classTGViewFrame.html,1,['inherit'],['inherited']
Modifiability," Display (const RWebDisplayArgs &args);  Create web display. ;  ; static bool DisplayUrl (const std::string &url);  Display provided url in configured web browser. ;  ; static bool NeedHttpServer (const RWebDisplayArgs &args);  Check if http server required for display. ;  ; static bool ProduceImage (const std::string &fname, const std::string &json, int width=800, int height=600, const char *batch_file=nullptr);  Produce image file using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ; static bool ProduceImages (const std::string &fname, const std::vector< std::string > &jsons, const std::vector< int > &widths, const std::vector< int > &heights, const char *batch_file=nullptr);  Produce image file(s) using JSON data as source Invokes JSROOT drawing functionality in headless browser - Google Chrome or Mozilla Firefox. ;  ;  Static Protected Member Functions inherited from ROOT::RWebDisplayHandle; static bool CheckIfCanProduceImages (RWebDisplayArgs &args);  Checks if configured browser can be used for image production. ;  ; static std::unique_ptr< Creator > & FindCreator (const std::string &name, const std::string &libname="""");  Search for specific browser creator If not found, try to add one. ;  ; static std::map< std::string, std::unique_ptr< Creator > > & GetMap ();  Static holder of registered creators of web displays. ;  . Inheritance diagram for ROOT::RWebBrowserHandle:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ browser_process_id. typedef pid_t ROOT::RWebBrowserHandle::browser_process_id. private . Definition at line 108 of file RWebDisplayHandle.cxx. Constructor & Destructor Documentation. ◆ RWebBrowserHandle() [1/2]. ROOT::RWebBrowserHandle::RWebBrowserHandle ; (; const std::string & ; url, . const std::string & ; tmpdir, . const std::string & ; tmpfile, . const std::string & ; dump . ). inline . Definitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebBrowserHandle.html:2858,inherit,inherited,2858,doc/v632/classROOT_1_1RWebBrowserHandle.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebBrowserHandle.html,2,"['config', 'inherit']","['configured', 'inherited']"
Modifiability," Distance to primitive. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Float_t fRmax2;  ; Float_t fRmin2;  ;  Protected Attributes inherited from TTUBS; Float_t fPhi1;  ; Float_t fPhi2;  ;  Protected Attributes inherited from TTUBE; Float_t fAspectRatio;  ; Double_t * fCoTab;  Table of sin(fPhi1) .... sin(fPhil+fDphi1) ;  ; Float_t fDz;  ; Int_t fNdiv;  ; Float_t fRmax;  ; Float_t fRmin;  ; Double_t * fSiTab;  ;  Protected Attributes inherited from TShape; TMaterial * fMaterial;  ; Int_t fNumber;  ; Int_t fVisibility;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TCONS.h>. Inheritance diagram for TCONS:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCONS.html:19521,inherit,inherited,19521,doc/master/classTCONS.html,https://root.cern,https://root.cern/doc/master/classTCONS.html,1,['inherit'],['inherited']
Modifiability," DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions; void ComputeCovariance (Bool_t, TMatrixD *);  compute covariance matrix ;  ; void DeclareOptions ();  MethodHMatrix options: none (apart from those implemented in MethodBase) ;  ; Double_t GetChi2 (Types::ESBType);  compute chi2-estimator for event according to type (signal/background) ;  ; void Init ();  default initialization called by all constructors ;  ; void ProcessOptions ();  process user options ;  . Private Attributes; TMatrixD * fInvHMatrixB;  inverse H-matrix (background) ;  ; TMatrixD * fInvHMatrixS;  inverse H-matrix (signal) ;  ; TVectorD * fVecMeanB;  vector of mean values (background) ;  ; TVectorD * fVecMeanS;  vector of mean values (signal) ;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TMVA::MethodBase; Bool_t fSetupCompleted;  ; TrainingHistory fTrainHistory;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodHMatrix.html:27323,inherit,inherited,27323,doc/master/classTMVA_1_1MethodHMatrix.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodHMatrix.html,2,['inherit'],['inherited']
Modifiability," Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TEveWindowManager (const TEveWindowManager &);  ; TEveWindowManager & operator= (const TEveWindowManager &);  . Additional Inherited Members;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator Pro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindowManager.html:36134,inherit,inherited,36134,doc/master/classTEveWindowManager.html,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html,2,['inherit'],['inherited']
Modifiability," Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTColor.html:28051,inherit,inherited,28051,doc/master/classTColor.html,https://root.cern,https://root.cern/doc/master/classTColor.html,6,['inherit'],['inherited']
Modifiability," Fill (Double_t x, const char *namey, Double_t w);  Increment cell defined by x,namey by a weight w. ;  ; Int_t Fill (Double_t x, Double_t y) override;  Increment cell defined by x,y by 1. ;  ; virtual Int_t Fill (Double_t x, Double_t y, Double_t w);  Increment cell defined by x,y by a weight w. ;  ; Int_t Fill (Double_t) override;  Invalid Fill method. ;  ; Int_t Fill (Double_t, Double_t) override;  Increment cell defined by x,y by 1. ;  ; Double_t GetBinErrorSqUnchecked (Int_t bin) const override;  ; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void SetBins (const Int_t *nbins, const Double_t *range);  ;  Protected Member Functions inherited from TH2D; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH2;  TH2 ();  2-D histogram default constructor. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size 2-D histograms. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor for variable bin size (along X axis) 2-D histograms using an input array of type double. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins);  Constructor for variable bin size (along X and Y axis) 2-D histograms using input arrays of type float. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor for Double_t variable bin size (along Y axis) 2-D histograms. ;  ;  TH2 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2D.html:55814,inherit,inherited,55814,doc/master/classTProfile2D.html,https://root.cern,https://root.cern/doc/master/classTProfile2D.html,1,['inherit'],['inherited']
Modifiability," FillTableOfCoSin (Double_t phi, Double_t angstep, Int_t n) const override;  Fill the table of cos and sin to prepare drawing. ;  ;  Protected Member Functions inherited from TPCON;  TPCON (const TPCON &);  copy constructor ;  ; virtual void MakeTableOfCoSin () const;  Make table of cosine and sine. ;  ; TPCON & operator= (const TPCON &);  assignment operator ;  ; void SetPoints (Double_t *points) const override;  Create PCON points. ;  ; virtual Bool_t SetSegsAndPols (TBuffer3D &buffer) const;  Set segments and polygons. ;  ;  Protected Member Functions inherited from TShape; virtual void FillBuffer3D (TBuffer3D &buffer, Int_t reqSections) const;  We have to set kRawSize (unless already done) to allocate buffer space before kRaw can be filled. ;  ; Int_t GetBasicColor () const;  Get basic color. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numPoints, Int_t px, Int_t py);  Distance to primitive. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TPCON; Double_t * fCoTab;  Table of sin(fPhi1) .... sin(fPhil+fDphi1) ;  ; Float_t f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPGON.html:17587,inherit,inherited,17587,doc/master/classTPGON.html,https://root.cern,https://root.cern/doc/master/classTPGON.html,1,['inherit'],['inherited']
Modifiability," FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against goo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassDocInfo.html:5261,inherit,inherits,5261,doc/master/classTClassDocInfo.html,https://root.cern,https://root.cern/doc/master/classTClassDocInfo.html,1,['inherit'],['inherits']
Modifiability," FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParameter.html:5901,inherit,inherits,5901,doc/master/classTParameter.html,https://root.cern,https://root.cern/doc/master/classTParameter.html,2,['inherit'],['inherits']
Modifiability," FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDrawFeedback.html:4701,inherit,inherits,4701,doc/master/classTDrawFeedback.html,https://root.cern,https://root.cern/doc/master/classTDrawFeedback.html,9,['inherit'],['inherits']
Modifiability," FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStatistic.html:5194,inherit,inherits,5194,doc/master/classTStatistic.html,https://root.cern,https://root.cern/doc/master/classTStatistic.html,1,['inherit'],['inherits']
Modifiability," FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t No",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObjString.html:4871,inherit,inherits,4871,doc/master/classTObjString.html,https://root.cern,https://root.cern/doc/master/classTObjString.html,1,['inherit'],['inherits']
Modifiability," FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTIconBoxThumb.html:4042,inherit,inherits,4042,doc/master/classTIconBoxThumb.html,https://root.cern,https://root.cern/doc/master/classTIconBoxThumb.html,1,['inherit'],['inherits']
Modifiability," Forward to TROOT::GetClass(). ;  ; static TClass * GetClass (const std::type_info &typeinfo);  Forward to TROOT::GetClass(). ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TMessage (void *buf, Int_t bufsize);  Create a TMessage object for reading objects. ;  ; void SetLength () const;  Set the message length at the beginning of the message buffer. ;  ;  Protected Member Functions inherited from TBufferFile;  TBufferFile ();  ;  TBufferFile (const TBufferFile &)=delete;  not implemented ;  ; Int_t CheckByteCount (UInt_t startpos, UInt_t bcnt, const TClass *clss, const char *classname);  Check byte count with current buffer position. ;  ; void CheckCount (UInt_t offset) override;  Check if offset is not too large (< kMaxMapCount) when writing. ;  ; UInt_t CheckObject (UInt_t offset, const TClass *cl, Bool_t readClass=kFALSE);  Check for object in the read map. ;  ; void operator= (const TBufferFile &)=delete;  not implemented ;  ; void WriteObjectClass (const void *actualObjStart, const TClass *actualClass, Bool_t cacheReuse) override;  Write object to I/O buffer. ;  ;  Protected Member Functions inherited from TBufferIO;  TBufferIO ();  ;  TBufferIO (TBuffer::EMode mode);  constructor ;  ;  TBufferIO (TBuffer::EMode mode, Int_t bufsiz);  constructor ;  ;  TBufferIO (TBuffer::EMode mode, Int_t bufsiz, void *buf, Bool_t adopt=kTRUE, ReAllocCharFun_t reallocfunc=nullptr);  constructor ;  ; Long64_t GetObjectTag (const void *obj);  Returns tag for specified object from objec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMessage.html:34727,inherit,inherited,34727,doc/master/classTMessage.html,https://root.cern,https://root.cern/doc/master/classTMessage.html,1,['inherit'],['inherited']
Modifiability," GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; Int_t fArrayDim;  ; Int_t fArrayLength;  ; TClass * fClassObject;  ; Double_t fFactor;  Maximum of data member if a range is specified [xmin,xmax,nbits]. ;  ; Int_t fMaxIndex [5];  ; TClass * fNewClass;  pointer to class of object ;  ; Int_t fNewType;  base offset for TObject if the element inherits from it ;  ; Int_t fOffset;  ; Int_t fSize;  ; TMemberStreamer * fStreamer;  new element class when reading ;  ; Int_t fTObjectOffset;  element offset in class ;  ; Int_t fType;  ; TString fTypeName;  new element type when reading ;  ; Double_t fXmax;  Minimum of data member if a range is specified [xmin,xmax,nbits]. ;  ; Double_t fXmin;  pointer to element Streamer ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions;  TStreamerElement (const TStreamerElement &)=delete;  ; TStreamerElement & operator= (const TStreamerElement &)=delete;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TStreamerElement.h>. Inheritance diagram for TStreamerElement:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EStatusBits. enum TStreamerElement::EStatusBits. EnumeratorkHasRange ; kCache ; kRepeat ; kRead ; kWrite ; kDoNotDelete ; kWholeObject ; kWarned . Definition at line 75 of file TStreamerElement.h. ◆ EStatusBitsDupExceptions. enum class TStreamerEl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerElement.html:15519,inherit,inherited,15519,doc/master/classTStreamerElement.html,https://root.cern,https://root.cern/doc/master/classTStreamerElement.html,1,['inherit'],['inherited']
Modifiability," GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TGeoBuilder ();  static pointer to singleton ;  ;  TGeoBuilder (const TGeoBuilder &)=delete;  ; TGeoBuilder & operator= (const TGeoBuilder &)=delete;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Attributes; static TGeoBuilder * fgInstance = nullptr;  . Private Member Functions; void SetGeometry (TGeoManager *geom);  current geometry ;  . Private Attributes; TGeoManager * fGeometry;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGeoBuilder.h>. Inheritance diagram for TGeoBuilder:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGeoBuilder() [1/2]. TGeoBuilder::TGeoBuilder ; (; ). protected . static pointer to singleton ; Default constructor. ; Definition at line 57 of file ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoBuilder.html:17046,inherit,inherited,17046,doc/master/classTGeoBuilder.html,https://root.cern,https://root.cern/doc/master/classTGeoBuilder.html,1,['inherit'],['inherited']
Modifiability," GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; double evaluate () const override;  Return 1 if x is in range, zero otherwise. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRangeBoolean.html:47675,inherit,inherited,47675,doc/master/classRooRangeBoolean.html,https://root.cern,https://root.cern/doc/master/classRooRangeBoolean.html,1,['inherit'],['inherited']
Modifiability," GetErrno ();  Static function returning system error number. ;  ; static void ResetErrno ();  Static function resetting system error number. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TUnixSystem; const char * GetLinkedLibraries () override;  Get list of shared libraries loaded at the start of the executable. ;  ;  Protected Member Functions inherited from TSystem; virtual Bool_t ConsistentWith (const char *path, void *dirptr=nullptr);  Check consistency of this helper with the one required by 'path' or 'dirptr'. ;  ; virtual void DoBeep (Int_t=-1, Int_t=-1) const;  ; virtual const char * ExpandFileName (const char *fname);  Expand a pathname getting rid of special shell characters like ~. ;  ; virtual Bool_t ExpandFileName (TString &fname);  Expand a pathname getting rid of special shell characters like ~. ;  ; TSystem * FindHelper (const char *path, void *dirptr=nullptr);  Create helper TSystem to handle file and directory operations that might be special for remote file access. ;  ; TString & GetLastErrorString ();  Return the thread local storage for the custom last error message. ;  ; const TString & GetLastErrorString () const;  Return the thread local st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMacOSXSystem.html:32031,inherit,inherited,32031,doc/master/classTMacOSXSystem.html,https://root.cern,https://root.cern/doc/master/classTMacOSXSystem.html,2,['inherit'],['inherited']
Modifiability," GetListOfClassSignals () const;  Returns pointer to list of signals of this class. ;  ; TList * GetListOfConnections () const;  ; TList * GetListOfSignals () const;  ; virtual Bool_t HasConnection (const char *signal_name) const;  Return true if there is any object connected to this signal. ;  ; virtual void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualProofPlayer; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TVirtualProofPlayer * Create (const char *player, TProof *p, TSocket *s=0);  Create a PROOF player. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayer.html:18333,inherit,inherited,18333,doc/master/classTProofPlayer.html,https://root.cern,https://root.cern/doc/master/classTProofPlayer.html,1,['inherit'],['inherited']
Modifiability," GetListOfEnvVars ();  Uses ""env"" (Unix) or ""set"" (Windows) to get list of environment variables. ;  ; const TSeqCollection * GetListOfFilesInPath (const char path[]);  ""path"" should be initialized with a colon separated list of system directories ;  ; TCollection * GetListOfGlobalFunctions ();  Return the list of global functions. ;  ; const TSeqCollection * GetListOfGlobals ();  Return the list of globals. ;  ; const TSeqCollection * GetListOfPragmas ();  Return the list of pragmas. ;  ; const TSeqCollection * GetListOfSysIncFiles ();  Return the list of system include files. ;  ; const TSeqCollection * GetListOfUsers ();  reads from ""/etc/passwd"" ;  ; Int_t Hook (char *buf, int *pLoc, std::ostream &out);  [private] ;  ; virtual TClass * IsA () const;  ; void RehashAll ();  clears and then rebuilds all lists except for user names and system include files. ;  ; void RehashClasses ();  Do the class rehash. ;  ; void RehashCppDirectives ();  Cpp rehashing. ;  ; void RehashEnvVars ();  Environemnt variables rehashing. ;  ; void RehashFiles ();  Close files. ;  ; void RehashGlobalFunctions ();  Reload global functions. ;  ; void RehashGlobals ();  Reload globals. ;  ; void RehashPragmas ();  Reload pragmas. ;  ; void RehashSysIncFiles ();  Reload system include files. ;  ; void RehashUsers ();  Reload users. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static Char_t AllAgreeOnChar (int i, const TSeqCollection *pList, Int_t &nGoodStrings);  [static utility function]/////////////////////////////////////////// ;  ; static void AppendListOfFilesInDirectory (const char dirName[], TSeqCollection *pList);  [static utility function]///////////////////////////// ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TString DetermineClass (const char varName[]);  [static uti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:2932,variab,variables,2932,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['variab'],['variables']
Modifiability," GetManager () const;  ; TEveProjectable * GetProjectable () const;  ; virtual TEveElement * GetProjectedAsElement ();  Returns this projected dynamic-casted to TEveElement. ;  ; virtual void SetDepth (Float_t d);  Set depth coordinate for the element. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UnRefProjectable (TEveProjectable *assumed_parent, bool notifyParent=true);  Remove reference to projectable. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveCaloViz; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAtt3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCalo2D.html:33694,inherit,inherited,33694,doc/master/classTEveCalo2D.html,https://root.cern,https://root.cern/doc/master/classTEveCalo2D.html,4,['inherit'],['inherited']
Modifiability," GetNodeName () const;  Returns the node's name. ;  ; EXMLElementType GetNodeType () const;  Returns the node's type. ;  ; TXMLNode * GetParent () const;  Returns the node's parent if any, returns 0 if no parent. ;  ; TXMLNode * GetPreviousNode () const;  Returns the previous sibling XMLNode in the DOM tree, if any return 0 if no previous node. ;  ; const char * GetText () const;  Returns the content of a Text node if node is a TextNode, 0 otherwise. ;  ; Bool_t HasAttributes () const;  Returns true if Element node has attribute. ;  ; Bool_t HasChildren () const;  Returns true if node has children. ;  ; Bool_t HasNextNode () const;  Returns true if has next node. ;  ; Bool_t HasParent () const;  Returns true if node has parent. ;  ; Bool_t HasPreviousNode () const;  Returns true if has previous node. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLNode.html:3304,inherit,inherited,3304,doc/master/classTXMLNode.html,https://root.cern,https://root.cern/doc/master/classTXMLNode.html,1,['inherit'],['inherited']
Modifiability," GetSender ();  ; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TDrawFeedback.h>. Inheritance diagram for TDrawFeedback:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TDrawFeedback(). TDrawFeedback::TDrawFeedback ; (; TProof * ; proof = 0, . TSeqCollection * ; names = 0 . ). Constructor. ; Definition at line 41 of file TDrawFeedback.cxx. ◆ ~TDrawFeedback(). TDrawFeedback::~TDrawFeedback ; (; ). override . Destructor. ; Definition at line 80 of file TDrawFeedback.cxx. Member Function Documentation. ◆ Class(). static TClass * TDrawFeedback::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TDrawFeedback::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TDrawFeedback::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 54 of file TDrawF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDrawFeedback.html:14812,inherit,inherited,14812,doc/master/classTDrawFeedback.html,https://root.cern,https://root.cern/doc/master/classTDrawFeedback.html,1,['inherit'],['inherited']
Modifiability," GetSender ();  ; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TGLOverlayButton.h>. Inheritance diagram for TGLOverlayButton:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGLOverlayButton() [1/2]. TGLOverlayButton::TGLOverlayButton ; (; const TGLOverlayButton & ; ). privatedelete . ◆ TGLOverlayButton() [2/2]. TGLOverlayButton::TGLOverlayButton ; (; TGLViewerBase * ; parent, . const char * ; text, . Float_t ; posx, . Float_t ; posy, . Float_t ; width, . Float_t ; height . ). Constructor. ; Definition at line 33 of file TGLOverlayButton.cxx. ◆ ~TGLOverlayButton(). TGLOverlayButton::~TGLOverlayButton ; (; ). inlineoverride . Definition at line 49 of file TGLOverlayButton.h. Member Function Documentation. ◆ Class(). static TClass * TGLOverlayButton::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGLOverlayButton::Class_Name ; (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLOverlayButton.html:7459,inherit,inherited,7459,doc/master/classTGLOverlayButton.html,https://root.cern,https://root.cern/doc/master/classTGLOverlayButton.html,1,['inherit'],['inherited']
Modifiability," GetSender ();  ; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TGTableContainer.h>. Inheritance diagram for TGTableFrame:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGTableFrame(). TGTableFrame::TGTableFrame ; (; const TGWindow * ; p, . UInt_t ; nrows, . UInt_t ; ncolumns . ). Create the container used to view TGTableCells. p. ; Definition at line 46 of file TGTableContainer.cxx. ◆ ~TGTableFrame(). TGTableFrame::~TGTableFrame ; (; ). inlineoverride . Definition at line 25 of file TGTableContainer.h. Member Function Documentation. ◆ Class(). static TClass * TGTableFrame::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGTableFrame::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGTableFrame::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; De",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTableFrame.html:5863,inherit,inherited,5863,doc/master/classTGTableFrame.html,https://root.cern,https://root.cern/doc/master/classTGTableFrame.html,1,['inherit'],['inherited']
Modifiability," GetSender ();  ; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TStatsFeedback.h>. Inheritance diagram for TStatsFeedback:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TStatsFeedback(). TStatsFeedback::TStatsFeedback ; (; TProof * ; proof = 0). Constructor. ; Definition at line 39 of file TStatsFeedback.cxx. ◆ ~TStatsFeedback(). TStatsFeedback::~TStatsFeedback ; (; ). override . Destructor. ; Definition at line 63 of file TStatsFeedback.cxx. Member Function Documentation. ◆ Class(). static TClass * TStatsFeedback::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TStatsFeedback::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TStatsFeedback::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 44 of file TStatsFeedback.h. ◆ DeclFile",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStatsFeedback.html:14455,inherit,inherited,14455,doc/master/classTStatsFeedback.html,https://root.cern,https://root.cern/doc/master/classTStatsFeedback.html,1,['inherit'],['inherited']
Modifiability," GetTypeName () const override;  ; Double_t GetValue (Int_t i=0) const override;  ; void * GetValuePointer () const override;  ; void Import (TClonesArray *list, Int_t n) override;  Import element from ClonesArray into local leaf buffer. ;  ; TClass * IsA () const override;  ; void PrintValue (Int_t i=0) const override;  Prints leaf value. ;  ; void ReadBasket (TBuffer &b) override;  Read leaf elements from Basket input buffer. ;  ; void ReadBasketExport (TBuffer &b, TClonesArray *list, Int_t n) override;  Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. ;  ; void ReadValue (std::istream &s, Char_t delim=' ') override;  Read a double from std::istream s and store it into the branch buffer. ;  ; void SetAddress (void *add=nullptr) override;  Set leaf buffer data address. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TLeafD32. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TLeaf;  TLeaf ();  ;  TLeaf (TBranch *parent, const char *name, const char *type);  Create a Leaf. ;  ;  ~TLeaf () override;  Destructor. ;  ; void Browse (TBrowser *b) override;  Browse the content of this leaf. ;  ; virtual bool CanGenerateOffsetArray ();  ; virtual Int_t * GenerateOffsetArray (Int_t base, Int_t events);  ; TBranch * GetBranch () const;  ; virtual TString GetFullName () const;  Return the full name (including the parent's branch names) of the leaf. ;  ; virtual TLeaf * GetLeafCount () const;  If this leaf stores a variable-sized array or a multi-dimensional array whose last dimension has variable size, return a pointer to the TLeaf that stores such size. ;  ; virtual TLeaf * GetLeafCounter (Int_t &countval) const;  Return a pointer to the counter of this leaf (if any) or store the number of elements that the leaf contains in countval. ;  ; virtual const Counts_t * GetLeafCountValues (Long64_t start, Long64_t len);  If this branch is a branch count, return the s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeafD32.html:1879,inherit,inherited,1879,doc/master/classTLeafD32.html,https://root.cern,https://root.cern/doc/master/classTLeafD32.html,1,['inherit'],['inherited']
Modifiability," Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Protected Member Functions inherited from TGWidget;  TGWidget (const TGWidget &tgw);  ; Int_t ClearFlags (Int_t flags);  ; TGWidget & operator= (const TGWidget &tgw);  ; Int_t SetFlags (Int_t flags);  . Static Protected Member Functions; static void FixBounds (Double_t &min, Double_t &max);  Avoid boundaries to be equal. ;  ;  Static Protected Member Functions inherited from TGFrame; static Time_t GetLastClick ();  Get time of last mouse click. ;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  . Protected Attributes; Bool_t fMarkEnds;  lines marking where stretch ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDoubleSlider.html:25674,inherit,inherited,25674,doc/master/classTGDoubleSlider.html,https://root.cern,https://root.cern/doc/master/classTGDoubleSlider.html,1,['inherit'],['inherited']
Modifiability," HandleTimer (TTimer *) override;  Execute action in response of a timer timing out. ;  ; virtual void IconifyWindow ();  iconify window ;  ; TClass * IsA () const override;  ; virtual Bool_t IsMapped ();  Returns kTRUE if window is mapped on screen, kFALSE otherwise. ;  ; virtual Bool_t IsMapSubwindows () const;  ; virtual void LowerWindow ();  lower window ;  ; virtual Int_t MustCleanup () const;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetMapSubwindows (Bool_t);  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTabElement.html:9744,inherit,inherited,9744,doc/master/classTGTabElement.html,https://root.cern,https://root.cern/doc/master/classTGTabElement.html,1,['inherit'],['inherited']
Modifiability," Helper function for the SavePrimitive functions from TH1 or classes derived from TH1, eg TProfile, TProfile2D. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TArray; Bool_t BoundsOk (const char *where, Int_t at) const;  ; Bool_t OutOfBoundsError (const char *where, Int_t i) const;  Generate an out-of-bounds error. Always returns false. ;  . Protected Attributes; TArrayD fBinEntries;  Number of entries per bin. ;  ; TArrayD fBinSumw2;  Array of sum of squares of weights per bin. ;  ; EErrorType fErrorMode;  Option to compute errors. ;  ; Bool_t fScaling;  ! True when TProfile2D::Scale is called ;  ; Double_t fTsumwz;  Total Sum of weight*Z. ;  ; Double_t fTsumwz2;  Total Sum of weight*Z*Z. ;  ; Double_t fZmax;  Upper limit in Z (if set) ;  ; Double_t fZmin;  Lower limit in Z (if set) ;  ;  Protected Attributes inherited from TH2; Double_t fScalefactor;  Scale factor. ;  ; Double_t fTsumwxy;  Total Sum of weight*X*Y. ;  ; Double_t fTsumwy;  Total Sum of weight*Y. ;  ; Double_t fTsumwy2;  Total Sum of weight*Y*Y. ;  ;  Protected Attributes inherited from TH1; Short_t fBarOffset;  (1000*offset) for bar charts or legos ;  ; Short_t fBarWidth;  (1000*width) for bar charts or legos ;  ; EBinErrorOpt fBinStatErrOpt;  Option for bin statistical errors. ;  ; Double_t * fBuffer;  [fBufferSize] entry buffer ;  ; Int_t fBufferSize;  fBuffer size ;  ; TArrayD fContour;  Array to display contour levels. ;  ; Int_t fDimension;  ! Histogram dimension (1, 2 or 3 dim) ;  ; TDirectory * fDirectory;  ! Pointer to directory holding this histogram ;  ; Double_t fEntries;  Number of entries. ;  ; TList * fFunctions;  ->Pointer to list of functions (fits and user) ;  ; Double_t * fIntegral;  ! Integral of bins used by GetRandom ;  ; Double_t fMaximum;  Maximum value for plotting. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2D.html:60527,inherit,inherited,60527,doc/master/classTProfile2D.html,https://root.cern,https://root.cern/doc/master/classTProfile2D.html,1,['inherit'],['inherited']
Modifiability," HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Private Attributes; Cursor_t fCursor;  Current cursor. ;  ; Cursor_t fDefaultCursor;  Default cursor. ;  ; TList * fExpressionList;  List of user defined expression widgets. ;  ; TGListView * fListView;  Associated list view. ;  ; TTreeViewer * fViewer;  Pointer to tree viewer. ;  . Friends; class TGClient;  . Additional Inherited Members;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TGLVContainer;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTVLVContainer.html:28654,inherit,inherited,28654,doc/master/classTTVLVContainer.html,https://root.cern,https://root.cern/doc/master/classTTVLVContainer.html,1,['inherit'],['inherited']
Modifiability," If a list for a tree with such name and filename exists, sets it as the current sublist If not, creates this list and sets it as the current sublist The name of the file, where the tree is, is taken as tree->GetTree()->GetCurrentFile()->GetName(), and then expanded either to the absolute path, or to full url. ;  ; void Streamer (TBuffer &) override;  Custom streamer for class TEntryList to handle the different interpretation of fFileName between version 1 and >1 . ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Subtract (const TEntryList *elist) override;  Remove all the entries (and subentries) of this entry list that are contained in elist. ;  ;  Public Member Functions inherited from TEntryList;  TEntryList ();  default c-tor ;  ;  TEntryList (const char *name, const char *title);  c-tor with name and title ;  ;  TEntryList (const char *name, const char *title, const char *treename, const char *filename);  c-tor with name and title, which also sets the treename and the filename ;  ;  TEntryList (const char *name, const char *title, const TTree *tree);  constructor with name and title, which also sets the tree ;  ;  TEntryList (const TEntryList &elist);  copy c-tor ;  ;  TEntryList (const TTree *tree);  c-tor, which sets the tree ;  ;  ~TEntryList () override;  Destructor. ;  ; void AddSubList (TEntryList *elist);  Add a sub entry list to the current list. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Called by TKey and others to automatically add us to a directory when we are read from a file. ;  ; void EnterRange (Long64_t start, Long64_t end, TTree *tree=nullptr, UInt_t step=1U);  Enter all entries in a range in the TEntryList. ;  ; virtual TEntryList * GetCurrentList () const;  ; virtual TDirectory * GetDirectory () const;  ; virtual Long64_t GetEntriesToProcess () const;  ; virtual Long64_t GetEntry (Long64_t index);  Return the number of the entry #index of this TEntryList in the TTree or TChain See also Next(). ;  ; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEntryListArray.html:5569,inherit,inherited,5569,doc/master/classTEntryListArray.html,https://root.cern,https://root.cern/doc/master/classTEntryListArray.html,1,['inherit'],['inherited']
Modifiability," In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/roofit/roofitcore/src/RooNormalizedPdf.h>. Inheritance diagram for RooNormalizedPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooNormalizedPdf() [1/2]. RooNormalizedPdf::RooNormalizedPdf ; (; RooAbsPdf & ; pdf, . RooArgSet const & ; normSet . ). inline . Definition at li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNormalizedPdf.html:72266,inherit,inherited,72266,doc/master/classRooNormalizedPdf.html,https://root.cern,https://root.cern/doc/master/classRooNormalizedPdf.html,3,['inherit'],['inherited']
Modifiability," In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <Roo2DKeysPdf.h>. Inheritance diagram for Roo2DKeysPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Roo2DKeysPdf() [1/2]. Roo2DKeysPdf::Roo2DKeysPdf ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; xx, . RooAbsReal & ; yy, . RooDataSet & ; data, . TString ; options = ""a"", . double ; widthScaleFactor = 1.0 . ). Constructor. ; Param",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRoo2DKeysPdf.html:75387,inherit,inherited,75387,doc/master/classRoo2DKeysPdf.html,https://root.cern,https://root.cern/doc/master/classRoo2DKeysPdf.html,3,['inherit'],['inherited']
Modifiability," In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooBernstein.h>. Inheritance diagram for RooBernstein:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooBernstein() [1/3]. RooBernstein::RooBernstein ; (; ). default . ◆ RooBernstein() [2/3]. RooBernstein::RooBernstein ; (; const char * ; name, . const char * ; title, . RooAbsRealLValue & ; _x, . const RooArgList & ; _coefList . ). Definition at lin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBernstein.html:73674,inherit,inherited,73674,doc/master/classRooBernstein.html,https://root.cern,https://root.cern/doc/master/classRooBernstein.html,3,['inherit'],['inherited']
Modifiability," In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooBinSamplingPdf.h>. Inheritance diagram for RooBinSamplingPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooBinSamplingPdf() [1/3]. RooBinSamplingPdf::RooBinSamplingPdf ; (; ). inline . Definition at line 31 of file RooBinSamplingPdf.h. ◆ RooBinSamplingPdf() [2/3]. RooBinSamplingPdf::RooBinSamplingPdf ; (; const char * ; name, . const char * ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinSamplingPdf.html:77044,inherit,inherited,77044,doc/master/classRooBinSamplingPdf.html,https://root.cern,https://root.cern/doc/master/classRooBinSamplingPdf.html,3,['inherit'],['inherited']
Modifiability," In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooChebychev.h>. Inheritance diagram for RooChebychev:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooChebychev() [1/3]. RooChebychev::RooChebychev ; (; ). default . ◆ RooChebychev() [2/3]. RooChebychev::RooChebychev ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _x, . const RooArgList & ; _coefList . ). Constructor. ; Definiti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChebychev.html:72863,inherit,inherited,72863,doc/master/classRooChebychev.html,https://root.cern,https://root.cern/doc/master/classRooChebychev.html,3,['inherit'],['inherited']
Modifiability," In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooChiSquarePdf.h>. Inheritance diagram for RooChiSquarePdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooChiSquarePdf() [1/3]. RooChiSquarePdf::RooChiSquarePdf ; (; ). Definition at line 31 of file RooChiSquarePdf.cxx. ◆ RooChiSquarePdf() [2/3]. RooChiSquarePdf::RooChiSquarePdf ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChiSquarePdf.html:72633,inherit,inherited,72633,doc/master/classRooChiSquarePdf.html,https://root.cern,https://root.cern/doc/master/classRooChiSquarePdf.html,3,['inherit'],['inherited']
Modifiability," In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooCrystalBall.h>. Inheritance diagram for RooCrystalBall:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooCrystalBall() [1/5]. RooCrystalBall::RooCrystalBall ; (; ). inline . Definition at line 16 of file RooCrystalBall.h. ◆ RooCrystalBall() [2/5]. RooCrystalBall::RooCrystalBall ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; x,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCrystalBall.html:74417,inherit,inherited,74417,doc/master/classRooCrystalBall.html,https://root.cern,https://root.cern/doc/master/classRooCrystalBall.html,3,['inherit'],['inherited']
Modifiability," In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooGExpModel.h>. Inheritance diagram for RooGExpModel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ Type. enum RooGExpModel::Type. EnumeratorNormal ; Flipped . Definition at line 28 of file RooGExpModel.h. Constructor & Destructor Documentation. ◆ RooGExpModel() [1/6]. RooGExpModel::RooGExpModel ; (; ). default . ◆ RooGExpModel() [2/6]. RooGExpModel::Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGExpModel.html:77249,inherit,inherited,77249,doc/master/classRooGExpModel.html,https://root.cern,https://root.cern/doc/master/classRooGExpModel.html,3,['inherit'],['inherited']
Modifiability," In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooGaussModel.h>. Inheritance diagram for RooGaussModel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooGaussModel() [1/5]. RooGaussModel::RooGaussModel ; (; ). default . ◆ RooGaussModel() [2/5]. RooGaussModel::RooGaussModel ; (; const char * ; name, . const char * ; title, . RooAbsRealLValue & ; x, . RooAbsReal & ; mean, . RooAbsReal & ; sigma . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGaussModel.html:75440,inherit,inherited,75440,doc/master/classRooGaussModel.html,https://root.cern,https://root.cern/doc/master/classRooGaussModel.html,3,['inherit'],['inherited']
Modifiability," In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooJohnson.h>. Inheritance diagram for RooJohnson:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ AnaInt_t. enum RooJohnson::AnaInt_t. private . EnumeratorkMass ; kMean ; kLambda ; kGamma ; kDelta . Definition at line 46 of file RooJohnson.h. Constructor & Destructor Documentation. ◆ RooJohnson() [1/3]. RooJohnson::RooJohnson ; (; ). inline . Definition at",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooJohnson.html:73568,inherit,inherited,73568,doc/master/classRooJohnson.html,https://root.cern,https://root.cern/doc/master/classRooJohnson.html,3,['inherit'],['inherited']
Modifiability," In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooNovosibirsk.h>. Inheritance diagram for RooNovosibirsk:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooNovosibirsk() [1/3]. RooNovosibirsk::RooNovosibirsk ; (; ). inline . Definition at line 31 of file RooNovosibirsk.h. ◆ RooNovosibirsk() [2/3]. RooNovosibirsk::RooNovosibirsk ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _x",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNovosibirsk.html:72661,inherit,inherited,72661,doc/master/classRooNovosibirsk.html,https://root.cern,https://root.cern/doc/master/classRooNovosibirsk.html,3,['inherit'],['inherited']
Modifiability," In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooProdPdf.h>. Inheritance diagram for RooProdPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooProdPdf() [1/7]. RooProdPdf::RooProdPdf ; (; ). Default constructor. ; Definition at line 82 of file RooProdPdf.cxx. ◆ RooProdPdf() [2/7]. RooProdPdf::RooProdPdf ; (; const char * ; name, . const char * ; title, . RooAbsPdf & ; pdf1, . RooAbsPdf & ; p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProdPdf.html:79625,inherit,inherited,79625,doc/master/classRooProdPdf.html,https://root.cern,https://root.cern/doc/master/classRooProdPdf.html,3,['inherit'],['inherited']
Modifiability," In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooTruthModel.h>. Inheritance diagram for RooTruthModel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooTruthModel() [1/3]. RooTruthModel::RooTruthModel ; (; ). default . ◆ RooTruthModel() [2/3]. RooTruthModel::RooTruthModel ; (; const char * ; name, . const char * ; title, . RooAbsRealLValue & ; x . ). Constructor of a truth resolution model, i.e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTruthModel.html:74707,inherit,inherited,74707,doc/master/classRooTruthModel.html,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html,3,['inherit'],['inherited']
Modifiability," In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooWrapperPdf.h>. Inheritance diagram for RooWrapperPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooWrapperPdf() [1/3]. RooWrapperPdf::RooWrapperPdf ; (; ). inline . Definition at line 27 of file RooWrapperPdf.h. ◆ RooWrapperPdf() [2/3]. RooWrapperPdf::RooWrapperPdf ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; inputFuncti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWrapperPdf.html:73033,inherit,inherited,73033,doc/master/classRooWrapperPdf.html,https://root.cern,https://root.cern/doc/master/classRooWrapperPdf.html,3,['inherit'],['inherited']
Modifiability," In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Inheritance diagram for PdfWrapper:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ PdfWrapper() [1/2]. PdfWrapper::PdfWrapper ; (; RooAbsReal & ; f, . RooAbsReal * ; coef, . bool ; expEvMode = false, . RooAbsPdf * ; expPdf = nullptr . ). inline . Definition at line 7165 of file xRooNode.cxx. ◆ ~PdfWrapper(). PdfWrapper::~PdfWrapper ; (; ). inlineoverride . Def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classPdfWrapper.html:72389,inherit,inherited,72389,doc/master/classPdfWrapper.html,https://root.cern,https://root.cern/doc/master/classPdfWrapper.html,3,['inherit'],['inherited']
Modifiability," In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Inheritance diagram for RooFixedProdPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooFixedProdPdf() [1/2]. RooFixedProdPdf::RooFixedProdPdf ; (; std::unique_ptr< RooProdPdf > && ; prodPdf, . RooArgSet const & ; normSet . ). inline . Definition at line 2320 of file RooProdPdf.cxx. ◆ RooFixedProdPdf() [2/2]. RooFixedProdPdf::RooFixedProdPdf ; (; const RooF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFixedProdPdf.html:72621,inherit,inherited,72621,doc/master/classRooFixedProdPdf.html,https://root.cern,https://root.cern/doc/master/classRooFixedProdPdf.html,3,['inherit'],['inherited']
Modifiability," In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Inheritance diagram for xRooProjectedPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Function Documentation. ◆ clone(). TObject * xRooProjectedPdf::clone ; (; const char * ; newname); const. inlineoverridevirtual . Reimplemented from RooProjectedPdf.; Definition at line 7152 of file xRooNode.cxx. ◆ evaluate(). double xRooProjectedPdf::evaluate ; (; ); const. inlineoverrideprotectedvirtual .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classxRooProjectedPdf.html:73464,inherit,inherited,73464,doc/master/classxRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html,3,['inherit'],['inherited']
Modifiability," Intercept server redirects. Throw away cache, as figuring out redirections on the cache is an unsolvable problem. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumConvolution.html:52318,parameteriz,parameterized,52318,doc/master/classRooNumConvolution.html,https://root.cern,https://root.cern/doc/master/classRooNumConvolution.html,1,['parameteriz'],['parameterized']
Modifiability," Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fFlags;  ; void * fIn;  ; void * fKind;  ; Int_t * fN;  ; Int_t fNdim;  ; void * fOut;  ; void * fPlan;  ; Int_t fTotalSize;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inherited from TVirtualFFT; static TString fgDefault = """";  ; static TVirtualFFT * fgFFT = nullptr;  . #include <TFFTReal.h>. Inheritance diagram for TFFTReal:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TFFTReal() [1/3]. TFFTReal::TFFTReal ; (; ). default ; Definition at line 69 of file TFFTReal.cxx. ◆ TFFTReal() [2/3]. TFFTReal::TFFTReal ; (; Int_t ; n, . Bool_t ; inPlace = kFALSE . ). For 1d transforms n here is the physical size of the transform (see FFTW manual for more details) ; Definition at line 84 of file TFFTReal.cxx. ◆ TFFTReal() [3/3]. TFFTReal::TFFTReal ; (; Int_t ; ndim, . Int_t * ; n, . Bool_t ; inPlace = kFALSE . ). For multidimensional transforms 1st parameter is the # of dimensions, 2nd is the sizes (physical) of the transform in each dimension. ; Definition at line 103 of file TFFTReal.cxx. ◆ ~TFFTReal(). TFFTReal::~TFFTReal ; (; ). override . clean-up ; Definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFFTReal.html:15273,inherit,inherited,15273,doc/master/classTFFTReal.html,https://root.cern,https://root.cern/doc/master/classTFFTReal.html,2,['inherit'],['inherited']
Modifiability," Intersection. ;  ; TEventList operator+ (const TEventList &list1, const TEventList &list2);  Addition. ;  ; TEventList operator- (const TEventList &list1, const TEventList &list2);  Subtraction. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TEventList.h>. Inheritance diagram for TEventList:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEventList() [1/3]. TEventList::TEventList ; (; ). Default constructor for a EventList. ; Definition at line 63 of file TEventList.cxx. ◆ TEventList() [2/3]. TEventList::TEventList ; (; const char * ; name, . const char * ; title = """", . Int_t ; initsize = 0, . Int_t ; delta = 0 . ). Create a EventList. ; This Eventlist is added to the list of objects in current directory. ; Definition at line 78 of file TEventList.cxx. ◆ TEventList() [3/3]. TEventList::TEventList ; (; const TEventList & ; list). Copy constructor. ; Definition at line 94 of file TEventList.cxx. ◆ ~TEventList(). TEventList::~TEventList ; (; ). override . Defau",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEventList.html:15264,inherit,inherited,15264,doc/master/classTEventList.html,https://root.cern,https://root.cern/doc/master/classTEventList.html,2,['inherit'],['inherited']
Modifiability," IsHexadecimal (const TString &formula, int ipos);  ; static Bool_t IsOperator (const char c);  ; static Bool_t IsScientificNotation (const TString &formula, int ipos);  . Protected Attributes; std::map< TString, Double_t > fConsts;  ! ;  ; TString fFormula;  String representing the formula expression. ;  ; std::list< TFormulaFunction > fFuncs;  ! ;  ; std::map< TString, TString > fFunctionsShortcuts;  ! ;  ; std::vector< TObject * > fLinearParts;  Vector of linear functions. ;  ; Int_t fNdim;  Dimension - needed for lambda expressions. ;  ; Int_t fNpar;  ! Number of parameter (transient since we save the vector) ;  ; Int_t fNumber;  Number used to identify pre-defined functions (gaus, expo,..) ;  ; std::map< TString, Int_t, TFormulaParamOrder > fParams;  || List of parameter names ;  ; std::map< TString, TFormulaVariable > fVars;  ! List of variable names ;  ; Bool_t fVectorized = false;  Whether we should use vectorized or regular variables. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Types; using CallFuncSignature = TInterpreter::CallFuncIFacePtr_t::Generic_t;  . Private Member Functions; void FillDefaults ();  Fill structures with default variables, constants and function shortcuts. ;  ; void FillParametrizedFunctions (std::map< std::pair< TString, Int_t >, std::pair< TString, TString > > &functions);  Fill map with parametrized functions. ;  ; void FillVecFunctionsShurtCuts ();  Fill the shortcuts for vectorized functions We will replace for example sin with vecCore::Mat::Sin. ;  ; std::string GetGradientFuncName () const;  ; std::string GetHessianFuncName () const;  ; void HandleExponentiation (TString &formula);  Handling exponentiation Can handle multiple carets, eg. ;  ; void HandleFunctionArguments (TString &formula);  Handling user functions (and parametrized functions) to take variables and optionally parameters as arguments. ;  ; void HandleLinear (TString &formula);  Handle linear functions defined with",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFormula.html:25326,inherit,inherited,25326,doc/master/classTFormula.html,https://root.cern,https://root.cern/doc/master/classTFormula.html,1,['inherit'],['inherited']
Modifiability," IsOn () const;  ; virtual Bool_t IsToggleButton () const;  ; virtual void Pressed ();  ; virtual void Released ();  ; virtual void SetDown (Bool_t on=kTRUE, Bool_t emit=kFALSE);  ; virtual void SetEnabled (Bool_t e=kTRUE);  Set enabled or disabled state of button. ;  ; virtual void SetGroup (TGButtonGroup *gr);  Sets new button-group for this button. ;  ; virtual void SetOn (Bool_t on=kTRUE, Bool_t emit=kFALSE);  ; virtual void SetState (EButtonState state, Bool_t emit=kFALSE);  Set button state. ;  ; virtual void SetStyle (const char *style);  Set the button style (modern or classic). ;  ; virtual void SetStyle (UInt_t newstyle);  Set the button style (modern or classic). ;  ; virtual void SetToolTipText (const char *text, Long_t delayms=400);  Set tool tip text associated with this button. ;  ; virtual void SetUserData (void *userData);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Toggle (Bool_t emit=kFALSE);  ; virtual void Toggled (Bool_t on);  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGFrame () override;  Destructor. ;  ; virtual void Activate (Bool_t);  ; void AddInput (UInt_t emask);  Add events specified in the emask to the events the frame should handle. ;  ; virtual void ChangeBackground (Pixel_t back);  Change frame background color. ;  ; virtual void ChangeOptions (UInt_t options);  Change frame options. Options is an OR of the EFrameTypes. ;  ; Bool_t Contains (Int_t x, Int_t y) const;  ; void Delete (Option_t *="""") override;  Delete this object. ;  ; virtual void DeleteWindow ();  Delete window. ;  ; virtual void DrawBorder ();  Draw frame border. ;  ; void DrawClass () const override;  Draw cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGPictureButton.html:4263,inherit,inherited,4263,doc/master/classTGPictureButton.html,https://root.cern,https://root.cern/doc/master/classTGPictureButton.html,3,['inherit'],['inherited']
Modifiability," IsRange () const;  ; virtual bool IsUnsigned () const;  ; virtual void PrintValue (Int_t i=0) const;  ; virtual void ReadBasket (TBuffer &);  ; virtual void ReadBasketExport (TBuffer &, TClonesArray *, Int_t);  ; virtual bool ReadBasketFast (TBuffer &, Long64_t);  ; virtual bool ReadBasketSerialized (TBuffer &, Long64_t);  ; virtual void ReadValue (std::istream &, Char_t=' ');  ; Int_t ResetAddress (void *add, bool calledFromDestructor=false);  Helper routine for TLeafX::SetAddress. ;  ; virtual void SetAddress (void *add=nullptr);  ; virtual void SetBranch (TBranch *branch);  ; virtual void SetLeafCount (TLeaf *leaf);  Set the leaf count of this leaf. ;  ; virtual void SetLen (Int_t len=1);  ; virtual void SetOffset (Int_t offset=0);  ; virtual void SetRange (bool range=true);  ; virtual void SetUnsigned ();  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeaf.html:5625,inherit,inherited,5625,doc/master/classTLeaf.html,https://root.cern,https://root.cern/doc/master/classTLeaf.html,1,['inherit'],['inherited']
Modifiability," Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TRInterface & Instance ();  static method to get an TRInterface instance reference ;  ; static TRInterface * InstancePtr ();  static method to get an TRInterface instance pointer ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; RInside * fR;  ; TThread * th;  . Private Member Functions;  TRInterface (const Int_t argc=0, const Char_t *argv[]=NULL, const Bool_t loadRcpp=true, const Bool_t verbose=false, const Bool_t interactive=true);  The command line arguments are by default argc=0 and argv=NULL, The verbose mode is by default disabled but you can enable it to show procedures information in stdout/stderr. ;  . Additional Inheri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:16219,inherit,inherited,16219,doc/master/classROOT_1_1R_1_1TRInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html,1,['inherit'],['inherited']
Modifiability, Issue warning message. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TBufferIO; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t GetGlobalReadParam ();  Get default read map size. ;  ; static Int_t GetGlobalWriteParam ();  Get default write map size. ;  ; static void SetGlobalReadParam (Int_t mapsize);  Set the initial size of the map used to store object and class references during reading. ;  ; static void SetGlobalWriteParam (Int_t mapsize);  Set the initial size of the map used to store object and class references during reading. ;  ;  Static Public Member Functions inherited from TBuffer; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TClass * GetClass (const char *className);  Forward to TROOT::GetClass(). ;  ; static TClass * GetClass (const std::type_info &typeinfo);  Forward to TROOT::GetClass(). ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; typedef std::vector< TStreamerInfo * > InfoList_t;  ;  Protected Types inherited from TBufferIO; enum  { kNullTag = 0; };  ;  Protected Types inherited from TBuffer; typedef std::vector< TVirtualArray * > CacheList_t,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferFile.html:33118,inherit,inherited,33118,doc/master/classTBufferFile.html,https://root.cern,https://root.cern/doc/master/classTBufferFile.html,1,['inherit'],['inherited']
Modifiability," Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Static Protected Attributes; static Bool_t fgApproximate = kFALSE;  Bin error approximation option. ;  ;  Static Protected Attributes inherited from TH1; static Bool_t fgAddDirectory = kTRUE;  ! Flag to add histograms to the directory ;  ; static Int_t fgBufferSize = 1000;  ! Default buffer size for automatic histograms ;  ; static Bool_t fgDefaultSumw2 = kFALSE;  ! Flag to call TH1::Sumw2 automatically at histogram creation time ;  ; static Bool_t fgStatOverflows = kFALSE;  ! Flag to use under/overflows in statistics ;  . Private Member Functions; Double_t * GetB ();  ; Double_t * GetB2 ();  ; Double_t * GetW ();  ; Double_t * GetW2 ();  ; void SetBins (Int_t, const Double_t *) override;  Redefine x axis parameters with variable bin sizes. ;  ; void SetBins (Int_t, const Double_t *, Int_t, const Double_t *) override;  Redefine x and y axis parameters with variable bin sizes. ;  ; void SetBins (Int_t, Double_t, Double_t) override;  Redefine x axis parameters. ;  ; void SetBins (Int_t, Double_t, Double_t, Int_t, Double_t, Double_t) override;  Redefine x and y axis parameters. ;  . Friends; class TH1Merger;  ; class TProfileHelper;  . Additional Inherited Members;  Public Types inherited from TH1; enum  { ;   kNoAxis = 0; , kXaxis = (1ULL << ( 0 )); , kYaxis = (1ULL << ( 1 )); , kZaxis = (1ULL << ( 2 )); , ;   kAllAxes = kXaxis | kYaxis | kZaxis. };  Enumeration specifying which axes can be extended. More...;  ; enum  { kNstat = 13; };  Size of statistics data (size of array used in GetStats()/ PutStats ) More...;  ; enum  EBinErrorOpt { kNormal = 0; , kPoisson = 1; , kPoisson2 = 2; };  Enumeration specifying type",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile3D.html:62682,variab,variable,62682,doc/master/classTProfile3D.html,https://root.cern,https://root.cern/doc/master/classTProfile3D.html,1,['variab'],['variable']
Modifiability," Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Static Protected Attributes; static Bool_t fgApproximate = kFALSE;  Bin error approximation option. ;  ;  Static Protected Attributes inherited from TH1; static Bool_t fgAddDirectory = kTRUE;  ! Flag to add histograms to the directory ;  ; static Int_t fgBufferSize = 1000;  ! Default buffer size for automatic histograms ;  ; static Bool_t fgDefaultSumw2 = kFALSE;  ! Flag to call TH1::Sumw2 automatically at histogram creation time ;  ; static Bool_t fgStatOverflows = kFALSE;  ! Flag to use under/overflows in statistics ;  . Private Member Functions; Double_t * GetB ();  ; Double_t * GetB2 ();  ; Double_t * GetW ();  ; Double_t * GetW2 ();  ; void SetBins (Int_t, const Double_t *) override;  Redefine x axis parameters with variable bin sizes. ;  ; void SetBins (Int_t, const Double_t *, Int_t, const Double_t *, Int_t, const Double_t *) override;  Redefine x, y and z axis parameters with variable bin sizes. ;  ; void SetBins (Int_t, Double_t, Double_t) override;  Redefine x axis parameters. ;  ; void SetBins (Int_t, Double_t, Double_t, Int_t, Double_t, Double_t, Int_t, Double_t, Double_t) override;  Redefine x, y and z axis parameters. ;  . Friends; class TH1Merger;  ; class TProfileHelper;  . Additional Inherited Members;  Public Types inherited from TH1; enum  { ;   kNoAxis = 0; , kXaxis = (1ULL << ( 0 )); , kYaxis = (1ULL << ( 1 )); , kZaxis = (1ULL << ( 2 )); , ;   kAllAxes = kXaxis | kYaxis | kZaxis. };  Enumeration specifying which axes can be extended. More...;  ; enum  { kNstat = 13; };  Size of statistics data (size of array used in GetStats()/ PutStats ) More...;  ; enum  EBinErrorOpt { kNormal = 0; , kPoi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2D.html:63521,variab,variable,63521,doc/master/classTProfile2D.html,https://root.cern,https://root.cern/doc/master/classTProfile2D.html,1,['variab'],['variable']
Modifiability," Load ();  Load all the DataMembers known to the interpreter for the scope 'fClass' and all its bases classes. ;  ; TIterator * MakeIterator (Bool_t dir=kIterForward) const override;  Return a list iterator. ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; TClass * IsA () const override;  ; Bool_t IsAscending ();  ; TObject * Remove (const TObjLinkPtr_t &lnk);  ; void RemoveLast () override;  Remove the last object of the list. ;  ; virtual void Sort (Bool_t order=kSortAscending);  Sort linked list. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSeqCollection; virtual ~TSeqCollection ();  ; void Add (TObject *obj) override;  ; virtual Int_t GetLast () const;  Returns index of last object in collection. ;  ; virtual Int_t IndexOf (const TObject *obj) const;  Return index of object in collection. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsSorted () const;  ; Int_t LastIndex () const;  ; Long64_t Merge (TCollection *list);  Merge this collection with all collections coming in the input list. ;  ; virtual void RemoveAfter (TObject *after);  ; virtual TObject * RemoveAt (Int_t idx);  ; virtual void RemoveBefore (TObject *before);  ; virtual void RemoveFirst ();  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UnSort ();  ;  Public Member Functions inherited from TCollection; virtual ~TCollection ();  TNamed destructor. ;  ; virtual void AddAll (const TCollection *col);  Add all objects from collection col to this ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTViewPubDataMembers.html:2377,inherit,inherited,2377,doc/master/classTViewPubDataMembers.html,https://root.cern,https://root.cern/doc/master/classTViewPubDataMembers.html,1,['inherit'],['inherited']
Modifiability," Log(). MsgLogger & TMVA::VarTransformHandler::Log ; (; ); const. inline . message logger ; Definition at line 49 of file VarTransformHandler.h. ◆ UpdateNorm(). void TMVA::VarTransformHandler::UpdateNorm ; (; Int_t ; ivar, . Double_t ; x . ). private . Updates maximum and minimum value of a variable or target. ; Definition at line 129 of file VarTransformHandler.cxx. ◆ VarianceThreshold(). TMVA::DataLoader * TMVA::VarTransformHandler::VarianceThreshold ; (; Double_t ; threshold). Computes variance of all the variables and returns a new DataLoader with the selected variables whose variance is above a specific threshold. ; Threshold can be provided by user otherwise default value is 0 i.e. remove the variables which have same value in all the events.; Parameters. [in]thresholdvalue (Double). Transformation Definition String Format: ""VT(optional float value)""; Usage examples:. String Description . ""VT"" Select variables whose variance is above threshold value = 0 (Default) . ""VT(1.5)"" Select variables whose variance is above threshold value = 1.5 . Definition at line 84 of file VarTransformHandler.cxx. Member Data Documentation. ◆ fDataLoader. DataLoader* TMVA::VarTransformHandler::fDataLoader. private . Definition at line 54 of file VarTransformHandler.h. ◆ fDataSetInfo. DataSetInfo& TMVA::VarTransformHandler::fDataSetInfo. private . Definition at line 53 of file VarTransformHandler.h. ◆ fEvents. const std::vector<Event*>& TMVA::VarTransformHandler::fEvents. private . Definition at line 55 of file VarTransformHandler.h. ◆ fLogger. MsgLogger* TMVA::VarTransformHandler::fLogger. mutable . Definition at line 48 of file VarTransformHandler.h. Libraries for TMVA::VarTransformHandler:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/VarTransformHandler.h; tmva/tmva/src/VarTransformHandler.cxx. TMVAVarTransformHandler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VarTransformHandler.html:3063,variab,variables,3063,doc/master/classTMVA_1_1VarTransformHandler.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VarTransformHandler.html,1,['variab'],['variables']
Modifiability," LogLikelihood flag. ;  ; Int_t fMaxParam;  ; Int_t fNED1;  Number of experimental vectors X=(x1,x2,...xK) ;  ; Int_t fNED12;  fNED1+fNED2 ;  ; Int_t fNED2;  K - Length of vector X plus 2 (for chi2) ;  ; Int_t fNfcn;  Number of FCN calls;. ;  ; Int_t fNlimMul;  fNlimMul - after fNlimMul successful iterations permits four-fold increasing of fPL ;  ; Int_t fNlog;  ; Int_t fNmaxIter;  fNmaxIter - maximum number of iterations ;  ; Int_t fNpar;  fNpar - number of parameters ;  ; Int_t fNstepDec;  fNstepDec - maximum number of step decreasing counter ;  ; Bool_t fNumericDerivatives;  ; Double_t * fParamError;  [fMaxParam] Parameter errors ;  ; Double_t * fPL;  [fMaxParam] Limits for parameters step. If <0, then parameter is fixed ;  ; Double_t * fPL0;  [fMaxParam] Step initial bounds ;  ; Double_t * fR;  [fMaxParam] Correlation factors ;  ; Double_t fRP;  Precision of fit ( machine zero on CDC 6000) quite old yeh? ;  ; Double_t fS;  fS - objective function value (return) ;  ; Double_t * fSumLog;  [fNlog] ;  ; Bool_t fWARN;  warnings ;  ; Double_t * fZ;  [fMaxParam2] Inverse fZ0 matrix - covariance matrix ;  ; Double_t * fZ0;  [fMaxParam2] Matrix of approximate second derivatives of objective function This matrix is diagonal and always contain only variable parameter's derivatives ;  . Additional Inherited Members;  Public Types inherited from TVirtualFitter; typedef void(* FCNFunc_t) (Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFumili.html:23009,variab,variable,23009,doc/master/classTFumili.html,https://root.cern,https://root.cern/doc/master/classTFumili.html,1,['variab'],['variable']
Modifiability," Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPackMgr.html:5906,inherit,inherited,5906,doc/master/classTPackMgr.html,https://root.cern,https://root.cern/doc/master/classTPackMgr.html,1,['inherit'],['inherited']
Modifiability," MakeZombie ();  . Protected Attributes; TProofVectorContainer< Point3D_t > * fPoints;  ;  Protected Attributes inherited from TProofDraw; Int_t fDimension;  ; TString fInitialExp;  ; TTreeFormulaManager * fManager;  ; Int_t fMultiplicity;  ; Bool_t fObjEval;  ; TTreeFormula * fSelect;  ; TString fSelection;  ; TStatus * fStatus;  ; TTree * fTree;  ; TTreeDrawArgsParser fTreeDrawArgsParser;  ; TTreeFormula * fVar [4];  ; Double_t fWeight;  ;  Protected Attributes inherited from TSelector; EAbort fAbort;  Abort status. ;  ; TList * fInput;  List of objects available during processing. ;  ; TObject * fObject;  ! Current object if processing object (vs. TTree) ;  ; TString fOption;  Option given to TTree::Process. ;  ; TSelectorList * fOutput;  ! List of objects created during processing ;  ; Long64_t fStatus;  Selector status. ;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TProofDraw; enum  { kWarn = (1ULL << ( 12 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TProofDraw.h>. Inheritance diagram for TProofDrawListOfGraphs:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TPr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDrawListOfGraphs.html:13532,inherit,inherited,13532,doc/master/classTProofDrawListOfGraphs.html,https://root.cern,https://root.cern/doc/master/classTProofDrawListOfGraphs.html,2,['inherit'],['inherited']
Modifiability," MakeZombie ();  . Protected Attributes; TProofVectorContainer< Point4D_t > * fPoints;  ;  Protected Attributes inherited from TProofDraw; Int_t fDimension;  ; TString fInitialExp;  ; TTreeFormulaManager * fManager;  ; Int_t fMultiplicity;  ; Bool_t fObjEval;  ; TTreeFormula * fSelect;  ; TString fSelection;  ; TStatus * fStatus;  ; TTree * fTree;  ; TTreeDrawArgsParser fTreeDrawArgsParser;  ; TTreeFormula * fVar [4];  ; Double_t fWeight;  ;  Protected Attributes inherited from TSelector; EAbort fAbort;  Abort status. ;  ; TList * fInput;  List of objects available during processing. ;  ; TObject * fObject;  ! Current object if processing object (vs. TTree) ;  ; TString fOption;  Option given to TTree::Process. ;  ; TSelectorList * fOutput;  ! List of objects created during processing ;  ; Long64_t fStatus;  Selector status. ;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TProofDraw; enum  { kWarn = (1ULL << ( 12 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TProofDraw.h>. Inheritance diagram for TProofDrawListOfPolyMarkers3D:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDrawListOfPolyMarkers3D.html:13553,inherit,inherited,13553,doc/master/classTProofDrawListOfPolyMarkers3D.html,https://root.cern,https://root.cern/doc/master/classTProofDrawListOfPolyMarkers3D.html,2,['inherit'],['inherited']
Modifiability," Maximum of data member if a range is specified [xmin,xmax,nbits]. ;  ; Int_t fMaxIndex [5];  ; TClass * fNewClass;  pointer to class of object ;  ; Int_t fNewType;  base offset for TObject if the element inherits from it ;  ; Int_t fOffset;  ; Int_t fSize;  ; TMemberStreamer * fStreamer;  new element class when reading ;  ; Int_t fTObjectOffset;  element offset in class ;  ; Int_t fType;  ; TString fTypeName;  new element type when reading ;  ; Double_t fXmax;  Minimum of data member if a range is specified [xmin,xmax,nbits]. ;  ; Double_t fXmin;  pointer to element Streamer ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions;  TStreamerBasicType (const TStreamerBasicType &)=delete;  ; TStreamerBasicType & operator= (const TStreamerBasicType &)=delete;  . Additional Inherited Members;  Public Types inherited from TStreamerElement; enum  EStatusBits { ;   kHasRange = (1ULL << ( 6 )); , kCache = (1ULL << ( 9 )); , kRepeat = (1ULL << ( 10 )); , kRead = (1ULL << ( 11 )); , ;   kWrite = (1ULL << ( 12 )); , kDoNotDelete = (1ULL << ( 13 )); , kWholeObject = (1ULL << ( 14 )); , kWarned = (1ULL << ( 21 )). };  ; enum class  EStatusBitsDupExceptions { kDoNotDelete = TStreamerElement::kDoNotDelete; , kHasRange = TStreamerElement::kHasRange; };  ; enum  ESTLtype { ;   kSTL = ROOT::kSTLany; , kSTLstring = ROOT::kSTLstring; , kSTLvector = ROOT::kSTLvector; , kSTLlist = ROOT::kSTLlist; , ;   kSTLforwardlist = ROOT::kSTLforwardlist; , kSTLdeque = ROOT::kSTLdeque; , kSTLmap = ROOT::kSTLmap; , kSTLmultimap = ROOT::kSTLmultimap; , ;   kSTLset = ROOT::kSTLset; , kSTLmultiset = ROOT::kSTLmultiset; , kSTLunorderedset = ROOT::kSTLunorderedset; , kSTLunorderedmultiset = ROOT::kSTLunorderedmultiset; , ;   kSTLunorderedmap = ROOT::kSTLunorderedmap; , kSTLunorderedmultimap = ROOT::kSTLunorderedmultimap; , kSTLbitset = ROOT::kSTLbitset. };  Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin) More...;  ;  Public T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerBasicType.html:14908,inherit,inherited,14908,doc/master/classTStreamerBasicType.html,https://root.cern,https://root.cern/doc/master/classTStreamerBasicType.html,1,['inherit'],['inherited']
Modifiability," ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ; bool ReleaseVariable (unsigned int ivar) override;  release an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  ac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:2865,variab,variable,2865,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,3,['variab'],['variable']
Modifiability," Object holding the polygon definition. ;  ; Double_t fXmax;  X maximum value. ;  ; Double_t fXmin;  X minimum value. ;  ; Double_t fYmax;  Y maximum value. ;  ; Double_t fYmin;  Y minimum value. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TH2Poly.h>. Inheritance diagram for TH2PolyBin:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TH2PolyBin() [1/2]. TH2PolyBin::TH2PolyBin ; (; ). Default constructor. ; Definition at line 1459 of file TH2Poly.cxx. ◆ TH2PolyBin() [2/2]. TH2PolyBin::TH2PolyBin ; (; TObject * ; poly, . Int_t ; bin_number . ). Normal constructor. ; Definition at line 1475 of file TH2Poly.cxx. ◆ ~TH2PolyBin(). TH2PolyBin::~TH2PolyBin ; (; ). override . Destructor. ; Definition at line 1491 of file TH2Poly.cxx. Member Function Documentation. ◆ Class(). static TClass * TH2PolyBin::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TH2PolyBin::Class_Name ; (; ). static . ReturnsName of this class . ◆ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2PolyBin.html:10892,inherit,inherited,10892,doc/master/classTH2PolyBin.html,https://root.cern,https://root.cern/doc/master/classTH2PolyBin.html,2,['inherit'],['inherited']
Modifiability," One of number entries was changed. ;  ; TClass * IsA () const override;  ; void ResetViewerClip ();  Reset transformation of the current clip. ;  ; void SetModel (TGLClipSet *m);  Set model object. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateViewerClip ();  Change clipping volume. ;  ;  Public Member Functions inherited from TGVerticalFrame;  TGVerticalFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a vertical frame widget as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame using the specified layout hints. ;  ; void ChangeOptions (UInt_t options) override;  Change composite frame options. Options is an OR of the EFrameTypes. ;  ; virtual void ChangeSubframesBackground (Pixel_t back);  Change background color for this frame and all subframes. ;  ; virtual void Cleanup ();  Cleanup and delete all objects contained in this composite frame. ;  ; virtual TGFrameElement * FindFrameElement (TGFrame *f) const;  Find frame-element holding frame f. ;  ; UInt_t GetDefaultHeight () const override;  ; TGDimension GetDefaultSize () ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLClipSetSubEditor.html:1678,inherit,inherited,1678,doc/master/classTGLClipSetSubEditor.html,https://root.cern,https://root.cern/doc/master/classTGLClipSetSubEditor.html,1,['inherit'],['inherited']
Modifiability, PdfProposal;  PdfProposal is a concrete implementation of the ProposalFunction interface. More...;  ; class  PointSetInterval;  PointSetInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  PosteriorCdfFunction;  ; class  PosteriorFunction;  ; class  PosteriorFunctionFromToyMC;  Posterior function obtaining sampling toy MC for the nuisance according to their pdf. More...;  ; class  ProfileInspector;  Utility class to plot conditional MLE of nuisance parameters vs. More...;  ; class  ProfileLikelihoodCalculator;  The ProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for tools which can produce both a RooStats HypoTestResult and ConfInterval). More...;  ; class  ProfileLikelihoodTestStat;  ProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset. More...;  ; class  ProofConfig;  Holds configuration options for proof and proof-lite. More...;  ; class  ProposalFunction;  ProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm. More...;  ; class  ProposalHelper;  ; class  RatioOfProfiledLikelihoodsTestStat;  TestStatistic that returns the ratio of profiled likelihoods. More...;  ; struct  RooStatsConfig;  ; class  SamplingDistPlot;  This class provides simple and straightforward utilities to plot SamplingDistribution objects. More...;  ; class  SamplingDistribution;  This class simply holds a sampling distribution of some test statistic. More...;  ; class  SamplingSummary;  ; class  SamplingSummaryLookup;  ; class  SequentialProposal;  Class implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step. More...;  ; class  SimpleInterval;  SimpleInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  SimpleLikelihoo,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceRooStats.html:6614,config,configuration,6614,doc/master/namespaceRooStats.html,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html,1,['config'],['configuration']
Modifiability," PreDeleteElement ();  Externally assigned and controlled user data. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TEveProjected; void SetDepthCommon (Float_t d, TEveElement *el, Float_t *bbox);  Utility function to update the z-values of the bounding-box. ;  ; virtual void SetDepthLocal (Float_t d);  Base-class implementation – just sets fDepth. ;  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEvePr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveElementListProjected.html:33145,inherit,inherited,33145,doc/master/classTEveElementListProjected.html,https://root.cern,https://root.cern/doc/master/classTEveElementListProjected.html,2,['inherit'],['inherited']
Modifiability," Print (Option_t *option, TPRegexp &regexp, Int_t recurse=1) const;  Print the collection header and its elements that match the regexp. ;  ; void Print (Option_t *option="""") const override;  Default print for collections, calls Print(option, 1). ;  ; void RemoveAll ();  ; virtual void RemoveAll (TCollection *col);  Remove all objects in collection col from this collection. ;  ; void SetCurrentCollection ();  Set this collection to be the globally accessible collection. ;  ; void SetName (const char *name);  ; virtual void SetOwner (Bool_t enable=kTRUE);  Set whether this collection is the owner (enable==true) of its content. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const override;  Write all objects in this collection. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) override;  Write all objects in this collection. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *optio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHashList.html:10687,inherit,inherited,10687,doc/master/classTHashList.html,https://root.cern,https://root.cern/doc/master/classTHashList.html,7,['inherit'],['inherited']
Modifiability," Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions;  TGraphSmooth (const TGraphSmooth &);  ; TGraphSmooth & operator= (const TGraphSmooth &);  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGraphSmooth.h>. Inheritance diagram for TGraphSmooth:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGraphSmooth() [1/3]. TGraphSmooth::TGraphSmooth ; (; const TGraphSmooth & ; ). private . ◆ TGraphSmooth() [2/3]. TGraphSmooth::TGraphSmooth ; (; ). Definition at line 36 of file TGraphSmooth.cxx. ◆ TGraphSmooth() [3/3]. TGraphSmooth::TGraphSmooth ; (; const char * ; name). GraphSmooth constructor. ; Definition at line 49 of file TGraphSmooth.cxx. ◆ ~TGraphSmooth(). TGraphSmooth::~TGraphSmooth ; (; ). override . GraphSmooth destructor. ; Definition at line 62 of file TGraphSmooth.cxx. Member Function Documentation. ◆ Approx(). TGraph * TGraphSmooth::Approx ; (; TGraph * ; grin, . Option_t * ; option = ""linear"", . Int_t ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphSmooth.html:13916,inherit,inherited,13916,doc/master/classTGraphSmooth.html,https://root.cern,https://root.cern/doc/master/classTGraphSmooth.html,2,['inherit'],['inherited']
Modifiability," Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Attributes; Double_t fB [3];  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TVirtualMagField.h>. Inheritance diagram for TGeoUniformMagField:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGeoUniformMagField() [1/3]. TGeoUniformMagField::TGeoUniformMagField ; (; const TGeoUniformMagField & ; ). protecteddelete . ◆ TGeoUniformMagField() [2/3]. TGeoUniformMagField::TGeoUniformMagField ; (; ). Default constructor;. ; Definition at line 62 of file TVirtualMagField.cxx. ◆ TGeoUniformMagField() [3/3]. TGeoUniformMagField::TGeoUniformMagField ; (; Double_t ; Bx, . Double_t ; By, . Double_t ; Bz . ). Default constructor;. ; Definition at line 72 of file TVirtualMagField.cxx. ◆ ~TGeoUniformMagField(). TGeoUniformMagField::~TGeoUniformMagField ; (; ). inlineoverride . Definition at line 44 of file TVirtualMagField.h. Member Function Documentation. ◆ Class(). static TClass * TGeoUni",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoUniformMagField.html:12007,inherit,inherited,12007,doc/master/classTGeoUniformMagField.html,https://root.cern,https://root.cern/doc/master/classTGeoUniformMagField.html,2,['inherit'],['inherited']
Modifiability," Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TGFrame; enum  { kDeleteWindowCalled = (1ULL << ( 15 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGedFrame; virtual void MakeTitle (const char *title);  Create attribute frame title. ;  ;  Protected Member Functions inherited from TGFrame; void DoRedraw () override;  Redraw the frame. ;  ; virtual void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGL5DDataSetEditor.html:31290,inherit,inherited,31290,doc/master/classTGL5DDataSetEditor.html,https://root.cern,https://root.cern/doc/master/classTGL5DDataSetEditor.html,3,['inherit'],['inherited']
Modifiability," ReadMap (int nElements, TBuffer &b, const TClass *onfileClass);  ; void ReadMapHelper (StreamHelper *i, Value *v, Bool_t vsn3, TBuffer &b);  ; void ReadObjects (int nElements, TBuffer &b, const TClass *onfileClass);  ; void ReadPairFromMap (int nElements, TBuffer &b);  ; void ReadPrimitives (int nElements, TBuffer &b, const TClass *onfileClass);  ; void WriteMap (int nElements, TBuffer &b);  ; void WriteObjects (int nElements, TBuffer &b);  ; void WritePrimitives (int nElements, TBuffer &b);  ;  Protected Member Functions inherited from TGenCollectionProxy; void CheckFunctions () const;  Check existence of function pointers. ;  ; virtual void DeleteItem (Bool_t force, void *ptr) const;  Call to delete/destruct individual item. ;  ; TGenCollectionProxy * Initialize (Bool_t silent) const;  Proxy initializer. ;  ; virtual TGenCollectionProxy * InitializeEx (Bool_t silent);  Proxy initializer. ;  . Protected Attributes; ReadBuffer_t fReadBufferFunc;  ;  Protected Attributes inherited from TGenCollectionProxy; Method fClear;  Method cache for container accessors: clear container. ;  ; Collectfunc_t fCollect;  Method to collect objects from container. ;  ; ArrIterfunc_t fConstruct;  Container accessors: block construct. ;  ; std::map< std::string, TObjArray * > * fConversionReadMemberWise;  Array of bundle of TStreamerInfoActions to stream out (read) derived from another class. ;  ; Method0 fCreateEnv;  Method to allocate an Environment holder. ;  ; Sizing_t fDestruct;  Container accessors: block destruct. ;  ; EnvironBase_t * fEnv;  Address of the currently proxied object. ;  ; Feedfunc_t fFeed;  Container accessors: block feed. ;  ; Method fFirst;  Container accessors: generic iteration: first. ;  ; CopyIterator_t fFunctionCopyIterator;  ; CreateIterators_t fFunctionCreateIterators;  ; DeleteIterator_t fFunctionDeleteIterator;  ; DeleteTwoIterators_t fFunctionDeleteTwoIterators;  ; Next_t fFunctionNextIterator;  ; Value * fKey;  Descriptor of the key_type. ;  ; std::st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenCollectionStreamer.html:9826,inherit,inherited,9826,doc/master/classTGenCollectionStreamer.html,https://root.cern,https://root.cern/doc/master/classTGenCollectionStreamer.html,1,['inherit'],['inherited']
Modifiability, ReadModelSum(). Bool_t TMVA::RuleFitAPI::ReadModelSum ; (; ). read model from rulefit.sum ; Definition at line 544 of file RuleFitAPI.cxx. ◆ ReadProgram(). Bool_t TMVA::RuleFitAPI::ReadProgram ; (; ). protected . ◆ ReadRealParms(). Bool_t TMVA::RuleFitAPI::ReadRealParms ; (; ). protected . ◆ ReadRealVarImp(). Bool_t TMVA::RuleFitAPI::ReadRealVarImp ; (; ). protected . ◆ ReadRfOut(). Bool_t TMVA::RuleFitAPI::ReadRfOut ; (; ). protected . ◆ ReadRfStatus(). Bool_t TMVA::RuleFitAPI::ReadRfStatus ; (; ). protected . ◆ ReadRuleFitMod(). Bool_t TMVA::RuleFitAPI::ReadRuleFitMod ; (; ). protected . ◆ ReadRuleFitSum(). Bool_t TMVA::RuleFitAPI::ReadRuleFitSum ; (; ). protected . ◆ ReadTrainW(). Bool_t TMVA::RuleFitAPI::ReadTrainW ; (; ). protected . ◆ ReadTrainX(). Bool_t TMVA::RuleFitAPI::ReadTrainX ; (; ). protected . ◆ ReadTrainY(). Bool_t TMVA::RuleFitAPI::ReadTrainY ; (; ). protected . ◆ ReadVarImp(). Bool_t TMVA::RuleFitAPI::ReadVarImp ; (; ). protected . read variable importance ; Definition at line 507 of file RuleFitAPI.cxx. ◆ ReadVarNames(). Bool_t TMVA::RuleFitAPI::ReadVarNames ; (; ). protected . ◆ ReadYhat(). Bool_t TMVA::RuleFitAPI::ReadYhat ; (; ). protected . read the score ; Definition at line 482 of file RuleFitAPI.cxx. ◆ RunRuleFit(). Int_t TMVA::RuleFitAPI::RunRuleFit ; (; ). protected . execute rf_go.exe ; Definition at line 771 of file RuleFitAPI.cxx. ◆ SetRFPredict(). void TMVA::RuleFitAPI::SetRFPredict ; (; ). inlineprotected . Definition at line 129 of file RuleFitAPI.h. ◆ SetRFTrain(). void TMVA::RuleFitAPI::SetRFTrain ; (; ). inlineprotected . Definition at line 128 of file RuleFitAPI.h. ◆ SetRFVarimp(). void TMVA::RuleFitAPI::SetRFVarimp ; (; ). inlineprotected . Definition at line 130 of file RuleFitAPI.h. ◆ SetRFWorkDir(). void TMVA::RuleFitAPI::SetRFWorkDir ; (; const char * ; wdir). set the directory containing rf_go.exe. ; Definition at line 155 of file RuleFitAPI.cxx. ◆ SetTestParms(). void TMVA::RuleFitAPI::SetTestParms ; (; ). protected . s,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleFitAPI.html:9338,variab,variable,9338,doc/master/classTMVA_1_1RuleFitAPI.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleFitAPI.html,1,['variab'],['variable']
Modifiability," Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooBlindTools _blindEngine;  ; RooRealProxy _value;  ;  Protected Attributes inherited from RooAbsHiddenReal; RooCategoryProxy _state;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooUnblindOffset.html:56835,inherit,inherited,56835,doc/master/classRooUnblindOffset.html,https://root.cern,https://root.cern/doc/master/classRooUnblindOffset.html,6,['inherit'],['inherited']
Modifiability," Reset current point/direction to initial values. ;  ; void SetCharge (Int_t charge);  Positive charge means left-handed helix. ;  ; void SetField (Double_t bx, Double_t by, Double_t bz, Bool_t is_normalized=kTRUE);  Initialize particle direction (tangent on the helix in initial point) ;  ; void SetHelixStep (Double_t hstep);  Set Z step of the helix on a complete turn. Positive or null. ;  ; void SetXYcurvature (Double_t curvature);  Set XY curvature: c = 1/Rxy. ;  ; void Step (Double_t step);  Make a step from current point along the helix and compute new point, direction and angle To reach a plane/ shape boundary, one has to: ;  ; Double_t StepToPlane (Double_t *point, Double_t *norm);  Propagate initial point up to a given Z position in MARS. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateHelix ();  Update the local helix matrix. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoHelix.html:4677,inherit,inherited,4677,doc/master/classTGeoHelix.html,https://root.cern,https://root.cern/doc/master/classTGeoHelix.html,1,['inherit'],['inherited']
Modifiability," ResetBBox ();  ; void SetupBBoxCube (Float_t extent, Float_t x, Float_t y, Float_t z);  Setup bounding box as cube with given extent and center position. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TEveTriangleSet * ReadTrivialFile (const char *file);  Read a simple ascii input file describing vertices and triangles. ;  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TEveProjectable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAtt3D; static TClass * Clas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTriangleSet.html:29174,inherit,inherited,29174,doc/master/classTEveTriangleSet.html,https://root.cern,https://root.cern/doc/master/classTEveTriangleSet.html,4,['inherit'],['inherited']
Modifiability," ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions; template<class T > ; void AssignOpt (const TString &name, T &valAssign) const;  ; void SplitOptions (const TString &theOpt, TList &loo) const;  splits the option string at ':' and fills the list 'loo' with the primitive strings ;  . Private Attributes; TString fConfigDescription;  description of this configurable ;  ; OptionBase * fLastDeclaredOption;  ! last declared option ;  ; TList fListOfOptions;  option list ;  ; Bool_t fLooseOptionCheckingEnabled;  checker for option string ;  ; TString fOptions;  options string ;  ; TString fReferenceFile;  reference file for options writing ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMVA/Configurable.h>. Inheritance diagram for TMVA::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Configurable.html:12725,config,configurable,12725,doc/master/classTMVA_1_1Configurable.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Configurable.html,1,['config'],['configurable']
Modifiability," Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; Long_t fMaximum;  Maximum value if leaf range is specified. ;  ; Long_t fMinimum;  Minimum value if leaf range is specified. ;  ; Long_t ** fPointer;  ! Address of pointer to data buffer ;  ; Long_t * fValue;  ! Pointer to data buffer ;  ;  Protected Attributes inherited from TLeaf; TBranch * fBranch;  ! Pointer to supporting branch (we do not own the branch) ;  ; bool fIsRange;  (=true if leaf has a range, false otherwise). This is equivalent to being a 'leafcount'. For a TLeafElement the range information is actually store in the TBranchElement. ;  ; bool fIsUnsigned;  (=true if unsigned, false otherwise) ;  ; TLeaf * fLeafCount;  Pointer to Leaf count if variable length (we do not own the counter) ;  ; LeafCountValues * fLeafCountValues;  ! Cache of collection/array sizes ;  ; Int_t fLen;  Number of fixed length elements in the leaf's data. ;  ; Int_t fLenType;  Number of bytes for this data type. ;  ; Int_t fNdata;  ! Number of elements in fAddress data buffer. ;  ; Int_t fOffset;  Offset in ClonesArray object (if one) ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TLeaf; enum class  DeserializeType { ;   kInvalid = 0; , kExternal; , kDestructive = kExternal; , kInPlace; , ;   kZeroCopy. };  ; enum  EStatusBits { kIndirectAddress = (1ULL << ( 11 )); , kNewValue = (1ULL << ( 12 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 ))",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeafG.html:14820,variab,variable,14820,doc/master/classTLeafG.html,https://root.cern,https://root.cern/doc/master/classTLeafG.html,1,['variab'],['variable']
Modifiability," Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual void FillBuffer3D (TBuffer3D &buffer, Int_t reqSections, Bool_t localFrame) const;  Fill the supplied buffer, with sections in desired frame See TBuffer3D.h for explanation of sections, frame etc. ;  ; Int_t GetBasicColor () const;  Get the basic color (0-7). ;  ; void SetOnBoundary (Bool_t);  ; void TransformPoints (Double_t *points, UInt_t NbPoints) const;  Tranform a set of points (LocalToMaster) ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; UInt_t fShapeBits;  ; Int_t fShapeId;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Private Attributes; static Double_t fgEpsMch = 2.220446049250313e-16;  ; static TGeoMatrix * fgTransform = nullptr;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGeoShape.h>. Inheritance diagram for TGeoShape:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EShapeType. enum TGeoShape::EShapeType. EnumeratorkBitMask32 ; kGeoNoShape ; kGeoBad ; kGeoRSeg ; kGeoPhiSeg ; kGeoThetaSeg ; kGeoVisX ; kGeoVisY ; kGeoVisZ ; kGeoRunTimeShape ; kGeoInvalidShape ; kGeoTorus ; kGeoBox ; kGeoPara ; kGeoSph ; kGeoTube ; kGeoTubeSeg ; kGeoCone ; kGeoConeSeg ; kGeoPcon ; kGeoPgon ; kGeoArb8 ; kGeoEltu ; kGeoTrap ; kGeoCtub ; kGeoTrd1 ; kGeoTrd2 ; kGeoComb ; kGeoClosedShape ; kGeoXtru ; kGeoParaboloid ; kGeoHalfSpace ; kGeoHype ; kGeoSavePrimitive . Definitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoShape.html:25477,inherit,inherited,25477,doc/master/classTGeoShape.html,https://root.cern,https://root.cern/doc/master/classTGeoShape.html,1,['inherit'],['inherited']
Modifiability," Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; typedef std::vector< TVirtualArray * > CacheList_t;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions;  TBuffer ();  ;  TBuffer (const TBuffer &)=delete;  ; void operator= (const TBuffer &)=delete;  ; Int_t Read (const char *name) override;  Read contents of object with specified name from the current directory. ;  ; Int_t Write (const char *name, Int_t opt, Int_t bufs) const override;  Write this object to the current directory. ;  ; Int_t Write (const char *name, Int_t opt, Int_t bufs) override;  Write this object to the current directory. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; char * fBufCur;  ; char * fBuffer;  ; char * fBufMax;  ; Int_t fBufSize;  ; CacheList_t fCacheStack;  Realloc function to be used when extending the buffer. ;  ; Bool_t fMode;  ; TObject * fParent;  ; ReAllocCharFun_t fReAllocFunc;  ; Int_t fVersion;  . #include <TBuffer.h>. Inheritance diagram for TBuffer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ CacheList_t. typedef std::vector<TVirtualArray*> TBuffer::CacheList_t. protected . Definition at line 46 of file TBuffer.h. Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkInitialSize ; kMinimalSize . Definition at line 78 of file TBuffer.h. ◆ EMode. enum TBuffer::EMode. EnumeratorkRead ; kWrite . Definition at line 73 of file TBuffer.h. ◆ EStatusBits. enum TBuffer::EStatusBits. Enum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBuffer.html:24626,inherit,inherited,24626,doc/master/classTBuffer.html,https://root.cern,https://root.cern/doc/master/classTBuffer.html,1,['inherit'],['inherited']
Modifiability," Return maximum index for array dimension ""dim"". ;  ; virtual const char * GetTypeName () const;  Get type of global variable, e,g.: ""class TDirectory*"" -> ""TDirectory"". ;  ; TClass * IsA () const override;  ; virtual Bool_t IsValid ();  Return true if this global object is pointing to a currently loaded global. ;  ; TGlobal & operator= (const TGlobal &);  Assignment operator. ;  ; Long_t Property () const override;  Get property description word. For meaning of bits see EProperty. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool Update (DataMemberInfo_t *info);  Update the TFunction to reflect the new info. ;  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttributeMap * GetAttributeMap () const;  ; TDictionary & operator= (const TDictionary &other);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGlobal.html:1912,inherit,inherited,1912,doc/master/classTGlobal.html,https://root.cern,https://root.cern/doc/master/classTGlobal.html,2,['inherit'],['inherited']
Modifiability, Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGWidget;  TGWidget ();  ;  TGWidget (Int_t id);  ; virtual ~TGWidget ();  ; virtual void Associate (const TGWindow *w);  ; const char * GetCommand () const;  ; Bool_t HasFocus () const;  ; Bool_t IsEnabled () const;  ; virtual void SetCommand (const char *command);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t WantFocus () const;  ; Int_t WidgetId () const;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGDoubleHSlider; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGDoubleSlider; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGFrame; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static const TGGC & GetBckgndGC ();  Get background color graphics context. ;  ; static const TGGC & GetBlackGC ();  Get black graphics context. ;  ; static Pixel_t GetBlackPixel ();  Get black pixel value. ;  ; static Pixel_t GetDefaultFrameBackground ();  Get default frame background. ;  ; static Pixel_t GetDefaultSelectedBackground ();  Get default selected frame background. ;  ; static const TGGC & GetHilightGC ();  Get highlight color graphics context. ;  ; static const TGGC & GetShadowGC ();  Get shadow color graphics context. ;  ; static const TGGC & GetWhiteGC ();  Get white graphics context. ;  ; static ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTripleHSlider.html:22764,inherit,inherited,22764,doc/master/classTGTripleHSlider.html,https://root.cern,https://root.cern/doc/master/classTGTripleHSlider.html,3,['inherit'],['inherited']
Modifiability, Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGWidget;  TGWidget ();  ;  TGWidget (Int_t id);  ; virtual ~TGWidget ();  ; virtual void Associate (const TGWindow *w);  ; const char * GetCommand () const;  ; Bool_t HasFocus () const;  ; Bool_t IsEnabled () const;  ; virtual void SetCommand (const char *command);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t WantFocus () const;  ; Int_t WidgetId () const;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGDoubleVSlider; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGDoubleSlider; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGFrame; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static const TGGC & GetBckgndGC ();  Get background color graphics context. ;  ; static const TGGC & GetBlackGC ();  Get black graphics context. ;  ; static Pixel_t GetBlackPixel ();  Get black pixel value. ;  ; static Pixel_t GetDefaultFrameBackground ();  Get default frame background. ;  ; static Pixel_t GetDefaultSelectedBackground ();  Get default selected frame background. ;  ; static const TGGC & GetHilightGC ();  Get highlight color graphics context. ;  ; static const TGGC & GetShadowGC ();  Get shadow color graphics context. ;  ; static const TGGC & GetWhiteGC ();  Get white graphics context. ;  ; static ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTripleVSlider.html:22735,inherit,inherited,22735,doc/master/classTGTripleVSlider.html,https://root.cern,https://root.cern/doc/master/classTGTripleVSlider.html,3,['inherit'],['inherited']
Modifiability," Returns pointer to list of signals of this class. ;  ; TList * GetListOfConnections () const;  ; TList * GetListOfSignals () const;  ; virtual Bool_t HasConnection (const char *signal_name) const;  Return true if there is any object connected to this signal. ;  ; virtual void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Private Member Functions;  TViewTimer (const TViewTimer &)=delete;  ; TViewTimer & operator= (const TViewTimer &)=delete;  . Private Attributes; TGView * fView;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TTimer; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SingleShot (Int_t milliSec, const char *receiver_class, void *receiver, const char *method);  This static function calls a slot after a given time interval. ;  ;  Static Public Member Functions inherited from TSysEvtH",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTViewTimer.html:12438,inherit,inherited,12438,doc/master/classTViewTimer.html,https://root.cern,https://root.cern/doc/master/classTViewTimer.html,1,['inherit'],['inherited']
Modifiability," RooAddGenContext (const RooAddModel &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ;  RooAddGenContext (const RooAddPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ; void attach (const RooArgSet &params) override;  Attach given set of variables to internal p.d.f. clone. ;  ; TClass * IsA () const override;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Print the details of the context. ;  ; void setProtoDataOrder (Int_t *lut) override;  Forward the setProtoDataOrder call to the component generator contexts. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsGenContext;  RooAbsGenContext (const RooAbsPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents when printing. ;  ; StyleOption defaultPrintStyle (Option_t *opt) const override;  Define default print style. ;  ; virtual RooDataSet * generate (double nEvents=0, bool skipInit=false, bool extendedMode=false);  Generate the specified number of events with nEvents>0 and and return a dataset containing the generated events. ;  ; bool isValid () const;  ; bool isVerbose () const;  ; void Print (Option_t *options=nullptr) const override;  This method must be overridden when a class wants to print itself. ;  ; void printArgs (std::ostream &os) const override;  Print arguments of context, i.e. the observables being generated in this context. ;  ; void printClassName (std::ostream &os) const override;  Print class name of context. ;  ; void printName (st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddGenContext.html:1697,inherit,inherited,1697,doc/master/classRooAddGenContext.html,https://root.cern,https://root.cern/doc/master/classRooAddGenContext.html,1,['inherit'],['inherited']
Modifiability," RooLinearVar (const char *name, const char *title, RooAbsRealLValue &variable, const RooAbsReal &slope, const RooAbsReal &offset, const char *unit="""");  Constructor with RooAbsRealLValue variable and RooAbsReal slope and offset. ;  ;  RooLinearVar (const RooLinearVar &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooLinearVar () override;  Destructor. ;  ; TObject * clone (const char *newname) const override;  ; const RooAbsBinning & getBinning (const char *name=nullptr, bool verbose=true, bool createOnTheFly=false) const override;  Const version of getBinning() ;  ; RooAbsBinning & getBinning (const char *name=nullptr, bool verbose=true, bool createOnTheFly=false) override;  Retrieve binning of this linear transformation. ;  ; std::list< std::string > getBinningNames () const override;  Get a list of all binning names. ;  ; bool hasBinning (const char *name) const override;  Returns true if binning with given name exists.If a given binning exists on the input variable, it will also exists on this linear transformation. ;  ; TClass * IsA () const override;  ; bool isJacobianOK (const RooArgSet &depList) const override;  Returns true if Jacobian term associated with current expression tree is indeed constant. ;  ; double jacobian () const override;  Return value of Jacobian associated with the transformation. ;  ; virtual RooAbsArg & operator= (double newValue);  Assignment operator from a double. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream. ;  ; void setVal (double value) override;  Assign given value to linear transformation: sets input variable to (value-offset)/slope If slope is zerom an error message is printed and no assignment is made. ;  ; virtual void setVal (double value)=0;  Set the current value of the object. Needs to be overridden by implementations. ;  ; virtual void setVal (double value, const char *);  Set the current value of the object. ;  ; void Streamer (T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLinearVar.html:2266,variab,variable,2266,doc/master/classRooLinearVar.html,https://root.cern,https://root.cern/doc/master/classRooLinearVar.html,1,['variab'],['variable']
Modifiability," RooSharedProperties ();  Default constructor. ;  ;  RooSharedProperties (const char *uuidstr);  Constructor with unique-id string. ;  ;  RooSharedProperties (const RooSharedProperties &)=delete;  ;  RooSharedProperties (RooSharedProperties &&)=delete;  ;  ~RooSharedProperties () override;  Destructor. ;  ; void decreaseRefCount ();  ; void increaseRefCount ();  ; bool inSharedList () const;  ; TClass * IsA () const override;  ; RooSharedProperties & operator= (const RooSharedProperties &)=delete;  ; RooSharedProperties & operator= (RooSharedProperties &&)=delete;  ; bool operator== (const RooSharedProperties &other) const;  Return true of unique id of this property is equal to that of other. ;  ; void Print (Option_t *opts=nullptr) const override;  Printing interface. ;  ; Int_t refCount () const;  ; void setInSharedList ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; UUID uuid () const;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealVarSharedProperties.html:2110,inherit,inherited,2110,doc/master/classRooRealVarSharedProperties.html,https://root.cern,https://root.cern/doc/master/classRooRealVarSharedProperties.html,2,['inherit'],['inherited']
Modifiability," Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ; virtual void SwapPoints (Int_t pos1, Int_t pos2);  Swap points. ;  ; virtual void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low);  Update the fX and fY arrays with the sorted values. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; bool _showProgress = false;  ! Show progress indication when adding points ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker colo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCurve.html:37965,inherit,inherited,37965,doc/master/classRooCurve.html,https://root.cern,https://root.cern/doc/master/classRooCurve.html,1,['inherit'],['inherited']
Modifiability," SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttBBox2D; static TClass * Class ();  ; static const ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMathText.html:20472,inherit,inherited,20472,doc/master/classTMathText.html,https://root.cern,https://root.cern/doc/master/classTMathText.html,3,['inherit'],['inherited']
Modifiability," SendMessage (const TGWindow *w, Longptr_t msg, Longptr_t parm1, Longptr_t parm2);  Send message (i.e. ;  ; void SetBackgroundColor (Pixel_t back) override;  Set background color (override from TGWindow base class). ;  ; virtual void SetCleanup (Int_t=kLocalCleanup);  ; void SetDNDSource (Bool_t onoff);  ; void SetDNDTarget (Bool_t onoff);  ; virtual void SetDragType (Int_t type);  SetDragType. ;  ; void SetDrawOption (Option_t *="""") override;  Set drawing option for object. ;  ; virtual void SetDropType (Int_t type);  SetDropType. ;  ; void SetEditable (Bool_t) override;  ; virtual void SetForegroundColor (Pixel_t);  ; void SetFrameElement (TGFrameElement *fe);  ; virtual void SetHeight (UInt_t h);  ; virtual void SetLayoutBroken (Bool_t=kTRUE);  ; virtual void SetMaxHeight (UInt_t h);  ; virtual void SetMaxWidth (UInt_t w);  ; virtual void SetMinHeight (UInt_t h);  ; virtual void SetMinWidth (UInt_t w);  ; virtual void SetSize (const TGDimension &s);  ; virtual void SetWidth (UInt_t w);  ; virtual void SetX (Int_t x);  ; virtual void SetY (Int_t y);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UnmapWindow () override;  unmap window ;  ;  Public Member Functions inherited from TGWindow;  TGWindow (const TGWindow *p=nullptr, Int_t x=0, Int_t y=0, UInt_t w=0, UInt_t h=0, UInt_t border=0, Int_t depth=0, UInt_t clss=0, void *visual=nullptr, SetWindowAttributes_t *attr=nullptr, UInt_t wtype=0);  Create a new window. ;  ;  TGWindow (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a copy of a window. ;  ;  ~TGWindow () override;  Window destructor. Unregisters the window. ;  ; virtual void DestroySubwindows ();  destroy sub windows ;  ; virtual void DestroyWindow ();  destroy window ;  ; virtual UInt_t GetEditDisabled () const;  ; virtual const TGWindow * GetMainFrame () const;  Returns top level main frame. ;  ; const char * GetName () const override;  Return unique name, used in SavePrimitive methods. ;  ; const TGWindow * ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFileItem.html:9958,inherit,inherited,9958,doc/master/classTGFileItem.html,https://root.cern,https://root.cern/doc/master/classTGFileItem.html,37,['inherit'],['inherited']
Modifiability," Set Y coordinate of the center of the BoundingBox. ;  ; void SetBBoxX1 (const Int_t x) override;  Set left hand side of BoundingBox to a value (resize in x direction on left) ;  ; void SetBBoxX2 (const Int_t x) override;  Set right hands ide of BoundingBox to a value (resize in x direction on right) ;  ; void SetBBoxY1 (const Int_t y) override;  Set top of BoundingBox to a value (resize in y direction on top) ;  ; void SetBBoxY2 (const Int_t y) override;  Set bottom of BoundingBox to a value (resize in y direction on bottom) ;  ; virtual void SetCurly ();  Set curly. ;  ; virtual void SetEndPoint (Double_t x2, Double_t y2);  Set end point. ;  ; virtual void SetStartPoint (Double_t x1, Double_t y1);  Set start point. ;  ; virtual void SetWaveLength (Double_t WaveLength);  Set wave length. ;  ; virtual void SetWavy ();  Set wavy. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TPolyLine;  TPolyLine ();  PolyLine default constructor. ;  ;  TPolyLine (const TPolyLine &polyline);  PolyLine copy constructor. ;  ;  TPolyLine (Int_t n, Double_t *x, Double_t *y, Option_t *option="""");  PolyLine normal constructor (double precision). ;  ;  TPolyLine (Int_t n, Float_t *x, Float_t *y, Option_t *option="""");  PolyLine normal constructor (single precision). ;  ;  TPolyLine (Int_t n, Option_t *option="""");  PolyLine normal constructor without initialisation. ;  ;  ~TPolyLine () override;  PolyLine default destructor. ;  ; void Copy (TObject &polyline) const override;  Copy this polyline to polyline. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Returns closest distance in pixels from point (px, py) to a polyline. ;  ; void Draw (Option_t *option="""") override;  Draw this polyline with its current attributes. ;  ; virtual TPolyLine * DrawPolyLine (Int_t n, Double_t *x, Double_t *y, Option_t *option="""");  Draw this polyline with new ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCurlyArc.html:8397,inherit,inherited,8397,doc/master/classTCurlyArc.html,https://root.cern,https://root.cern/doc/master/classTCurlyArc.html,2,['inherit'],['inherited']
Modifiability," Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void DecrNofKeys ();  ; Int_t IdxAdd (const TObject &obj);  Add object and return its index in the tree. ;  ; void IncrNofKeys ();  ;  Protected Member Functions inherited from TSeqCollection;  TSeqCollection ();  ; virtual void Changed ();  ;  Protected Member Functions inherited from TCollection;  TCollection ();  ; virtual const char * GetCollectionEntryName (TObject *entry) const;  For given collection entry return the string that is used to identify the object and, potentially, perform wildcard/regexp filtering on. ;  ; virtual void PrintCollectionEntry (TObject *entry, Option_t *option, Int_t recurse) const;  Print the collection entry. ;  ; virtual void PrintCollectionHeader (Option_t *option) const;  Print the collection header. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions; void Init (Int_t i);  Initialize a B-tree. ;  ; void RootIsEmpty ();  If root is empty clean up its space. ;  ; void RootIsFull ();  The root of the tree is full. ;  . Private Attributes; Int_t fInnerLowWaterMark;  ; Int_t fInnerMaxIndex;  ; Int_t fLeafLowWaterMark;  ; Int_t fLeafMaxIndex;  ; Int_t fOrder;  ; Int_t fOrder2;  ; TBtNode * fRoot;  . Friends; class TBtInnerNode;  ; class TBtLeafNode;  ; class TBtNode;  . Additional Inherited Members;  Protected Types inherited from TCollection; enum  EStatusBits { kIsOwner = (1ULL << ( 14 )); , kUseRWLock = (1ULL << ( 16 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TSeqCollection; Bool_t fSorted;  ;  Protected Attributes inherited from TCollection; TString fName;  ; Int_t fSize;  . #include <TBtree.h>. In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBtree.html:24578,inherit,inherited,24578,doc/master/classTBtree.html,https://root.cern,https://root.cern/doc/master/classTBtree.html,1,['inherit'],['inherited']
Modifiability," Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; enum  ESocketErrors { kInvalid = -1; , kInvalidStillInList = -2; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions;  TSocket ();  ; Bool_t Authenticate (const char *user);  Authenticated the socket with specified user. ;  ; void MarkBrokenConnection ();  Close the socket and mark as due to a broken connection. ;  ; Bool_t RecvProcessIDs (TMessage *mess);  Receive a message containing process ids. ;  ; Bool_t RecvStreamerInfos (TMessage *mess);  Receive a message containing streamer infos. ;  ; void SendProcessIDs (const TMessage &mess);  Check if TProcessIDs must be sent. ;  ; void SendStreamerInfos (const TMessage &mess);  Check if TStreamerInfo must be sent. ;  ; void SetDescriptor (Int_t desc);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TInetAddress fAddress;  ; TBits fBitsInfo;  ; UInt_t fBytesRecv;  ; UInt_t fBytesSent;  ; Int_t fCompress;  ; TTimeStamp fLastUsage;  ; TVirtualMutex * fLastUsageMtx;  ; TInetAddress fLocalAddress;  ; Int_t fRemoteProtocol;  ; TSecContext * fSecContext;  ; TString fService;  ; EServiceType fServType;  ; Int_t fSocket;  ; Int_t fTcpWindowSize;  ; TString fUrl;  ; TList * fUUIDs;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static ULong64_t fgBytesRecv = 0;  ; static ULong64_t fgBytesSent = 0;  ; static Int_t fgClientProtocol = 17;  . Private Member Functions; Option_t * GetOption () const override;  ; TSocket & operator= (const TSocket &)=delete;  . Friends; class TProofServ;  ; class TServerSocket;  ; class TSlave;  . #include <TSocket.h>. Inheritance diagra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSocket.html:16284,inherit,inherited,16284,doc/master/classTSocket.html,https://root.cern,https://root.cern/doc/master/classTSocket.html,1,['inherit'],['inherited']
Modifiability," Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; value_type evaluate () const override;  Calculate and return the value of the mapping function. ;  ; void recomputeShape () override;  No shape recomputation is necessary. This category does not depend on other categories. ;  ;  Protected Member Functions inherited from RooAbsCategory; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach the category index and label as branches to the given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  Attach the category index and label to as branches to the given vector store. ;  ; void clearTypes ();  Delete all currently defined states. ;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValueDirty=true) override;  Copy the cached value from given source and raise dirty flag. ;  ; virtual const std::map< std::string, RooAbsCategory::value_type >::value_type & defineState (const std::string &label);  Define a new state with given label. ;  ; virtual const std::map< std::string, RooAbsCategory::value_type >::value_type & defineState (const std::string &label, value_type index);  Define new state with given name and index number. ;  ; void defineStateUnchecked (const std::string &label, value_type index);  Internal version of defineState() that does not check if type already exists. ;  ; void fillTre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooThresholdCategory.html:34869,inherit,inherited,34869,doc/master/classRooThresholdCategory.html,https://root.cern,https://root.cern/doc/master/classRooThresholdCategory.html,1,['inherit'],['inherited']
Modifiability," Set object files extension, should be either .o, .obj, etc. ;  ; virtual void SetSoExt (const char *soExt);  Set shared library extension, should be either .so, .sl, .a, .dll, etc. ;  ; virtual void ShowOutput (RedirectHandle_t *h);  Display the content associated with the redirection described by the opaque handle 'h'. ;  ; virtual TString SplitAclicMode (const char *filename, TString &mode, TString &args, TString &io) const;  This method split a filename of the form: ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Syslog (ELogLevel level, const char *mess);  Send mess to syslog daemon. ;  ; virtual void Unload (const char *module);  Unload a shared library. ;  ; virtual void Unsetenv (const char *name);  Unset environment variable. ;  ; virtual char * Which (const char *search, const char *file, EAccessMode mode=kFileExists);  Find location of file in a search path. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWinNTSystem.html:21845,inherit,inherited,21845,doc/master/classTWinNTSystem.html,https://root.cern,https://root.cern/doc/master/classTWinNTSystem.html,1,['inherit'],['inherited']
Modifiability," Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static bool _doFloorGlobal = false;  Global flag for introducing floor at zero in pdf. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static Int_t _evalErrorCount = 0;  ; static std::map< const RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; void setExtended (bool extended);  . Static Private Member Functions; static double analyticalIntegralWN (RooAbsReal const &caller, RooObjCacheManager &normIntMgr, RooArgList const &funcList, RooArgList const &coefList, Int_t code, const RooArgSet *normSet, const char *rangeName, bool hasWarnedBefore);  ; static std::list< double > * binBoundaries (RooArgList const &funcList, RooAbsRealLValue &, double, double);  ; static bool checkObservables (RooAbsReal const &caller, RooArgSet const *nset, RooArgList const &funcList, RooArgList const &coefList);  ; static double evaluate (RooAbsReal const &caller, RooArgList const &funcList, RooArgList const &coefList, bool doFloor, bool &hasWarnedBefore);  ; static Int_t getAnalyticalIntegralWN (RooAbsReal const &caller, RooObjCacheManage",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooRealSumPdf.html:66226,inherit,inherited,66226,doc/v632/classRooRealSumPdf.html,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html,1,['inherit'],['inherited']
Modifiability," SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class signal lists from class cls and all its base-classes. ;  ; Bool_t Connect (const char *signal, const char *receiver_class, void *receiver, const char *slot);  Non-static method is used to connect from the signal of this object to the receiver slot. ;  ; virtual void Connected (const char *);  ; virtual void Destroyed ();  ; Bool_t Disconnect (const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal of this object from slot of receiver. ;  ; virtual void Disconnected (const char *);  ; void Emit (const char *signal);  Activate signal without args. ;  ; template<typename T > ; void Emit (const char *signal, const T &arg);  Activate signal with single paramet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLParser.html:9414,inherit,inherited,9414,doc/master/classTXMLParser.html,https://root.cern,https://root.cern/doc/master/classTXMLParser.html,96,['inherit'],['inherited']
Modifiability," SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; TCollection * fMap;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TOutputListSelectorDataMap.h>. Inheritance diagram for TOutputListSelectorDataMap:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TOutputListSelectorDataMap(). TOutputListSelectorDataMap::TOutputListSelectorDataMap ; (; TSelector * ; sel = 0). Create a mapper between output list items and TSelector data members. ; Definition at line 190 of file TOutputListSelectorDataMap.cxx. ◆ ~TOutputListSelectorDataMap(). TOutputListSelectorDataMap::~TOutputListSelectorDataMap ; (; ). inlineoverride . Definition at line 34 of file TOutputListSelectorDataMap.h. Member Function Documentation. ◆ Class(). static TClass * TOutputListSelectorDataMap::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTOutputListSelectorDataMap.html:10350,inherit,inherited,10350,doc/master/classTOutputListSelectorDataMap.html,https://root.cern,https://root.cern/doc/master/classTOutputListSelectorDataMap.html,2,['inherit'],['inherited']
Modifiability," SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; TGWindow * fWindow;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGIdleHandler.h>. Inheritance diagram for TGIdleHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGIdleHandler(). TGIdleHandler::TGIdleHandler ; (; TGWindow * ; w). Create idle handler. ; Definition at line 31 of file TGIdleHandler.cxx. ◆ ~TGIdleHandler(). TGIdleHandler::~TGIdleHandler ; (; ). override . Delete idle handler. ; Definition at line 44 of file TGIdleHandler.cxx. Member Function Documentation. ◆ Class(). static TClass * TGIdleHandler::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGIdleHandler::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGIdleHandler::Class_Version ; (; ). inlinestaticconstexpr ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGIdleHandler.html:9806,inherit,inherited,9806,doc/master/classTGIdleHandler.html,https://root.cern,https://root.cern/doc/master/classTGIdleHandler.html,2,['inherit'],['inherited']
Modifiability," SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; Bool_t fModified;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGLayout.h>. Inheritance diagram for TGLayoutManager:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGLayoutManager(). TGLayoutManager::TGLayoutManager ; (; ). inline . Definition at line 140 of file TGLayout.h. Member Function Documentation. ◆ Class(). static TClass * TGLayoutManager::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGLayoutManager::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGLayoutManager::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 149 of file TGLayout.h. ◆ DeclFileName(). static const char * TGLayoutManager::DeclFileName ; (; ). inlinestatic .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLayoutManager.html:9882,inherit,inherited,9882,doc/master/classTGLayoutManager.html,https://root.cern,https://root.cern/doc/master/classTGLayoutManager.html,2,['inherit'],['inherited']
Modifiability," SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TGeoPatternHoneycomb (const TGeoPatternHoneycomb &);  copy constructor ;  ; TGeoPatternHoneycomb & operator= (const TGeoPatternHoneycomb &);  assignment operator ;  ;  Protected Member Functions inherited from TGeoPatternFinder;  TGeoPatternFinder (const TGeoPatternFinder &);  Mutex for thread data. ;  ; TGeoPatternFinder & operator= (const TGeoPatternFinder &);  assignment operator ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Attributes; Int_t fAxisOnRows;  ; Int_t * fNdivisions;  ; Int_t fNrows;  ; Double_t * fStart;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TGeoPatternFinder; enum  EGeoPatternFlags { kPatternReflected = (1ULL << ( 14 )); , kPatternSpacedOut = (1ULL << ( 15 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TGeoPatternFinder; Int_t fDivIndex;  ; Double_t fEnd;  ; std::mutex fMutex;  Size of the thread vector. ;  ; Int_t fNdivisions;  ; Double_t fStart;  ; Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternHoneycomb.html:12028,inherit,inherited,12028,doc/master/classTGeoPatternHoneycomb.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternHoneycomb.html,1,['inherit'],['inherited']
Modifiability," SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Double_t fArrX;  Arrow X position. ;  ; Double_t fArrY;  Arrow Y position. ;  ; GVizAgedge_t * fGVEdge;  Graphviz edge. ;  ; Int_t * fN;  number of edge points (GV) fN[0] = number of splines fN[1...n] = number of points in each spline ;  ; TGraphNode * fNode1;  First node. ;  ; TGraphNode * fNode2;  Second node. ;  ; Double_t * fX;  X edge points (GV) ;  ; Double_t * fY;  X edge points (GV) ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphEdge.html:11041,inherit,inherited,11041,doc/master/classTGraphEdge.html,https://root.cern,https://root.cern/doc/master/classTGraphEdge.html,1,['inherit'],['inherited']
Modifiability," SetMapSubwindows (Bool_t on) override;  ; virtual void ShowFrame (TGFrame *f);  Show sub frame. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Bool_t TranslateCoordinates (TGFrame *child, Int_t x, Int_t y, Int_t &fx, Int_t &fy);  Translate coordinates to child frame. ;  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGFrame () override;  Destructor. ;  ; virtual void Activate (Bool_t);  ; void AddInput (UInt_t emask);  Add events specified in the emask to the events the frame should handle. ;  ; Bool_t Contains (Int_t x, Int_t y) const;  ; virtual void DeleteWindow ();  Delete window. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;  ; TObject * DrawClone (Option_t *="""") const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void DrawCopy (Handle_t, Int_t, Int_t);  ; void Dump () const override;  Dump contents of object on stdout. ;  ; virtual Pixel_t GetBackground () const;  ; Int_t GetBorderWidth () const;  ; virtual TDNDData * GetDNDData (Atom_t);  ; virtual Int_t GetDragType () const;  Returns drag source type. ;  ; virtual Int_t GetDropType () const;  Returns drop target type. ;  ; UInt_t GetEventMask () const;  ; virtual Pixel_t GetForeground () const;  Return frame foreground color. ;  ; TGFrameElement * GetFrameElement () const;  ; UInt_t GetHeight () const;  ; UInt_t GetMaxHeight () const;  ; UInt_t GetMaxWidth () const;  ; UInt_t GetMinHeight () const;  ; UInt_t GetMinWidth () const;  ; virtual UInt_t GetOptions () const;  ; TGDimension GetSize () const;  ; UInt_t GetWidth () const;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEdit.html:17665,inherit,inheritance,17665,doc/master/classTGTextEdit.html,https://root.cern,https://root.cern/doc/master/classTGTextEdit.html,1,['inherit'],['inheritance']
Modifiability," SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TMultiGraph (const TMultiGraph &)=delete;  ; TMultiGraph & operator= (const TMultiGraph &)=delete;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TList * fFunctions {nullptr};  Pointer to list of functions (fits and user) ;  ; TList * fGraphs {nullptr};  Pointer to list of TGraphs. ;  ; TH1F * fHistogram {nullptr};  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum {-1111};  Maximum value for plotting along y. ;  ; Double_t fMinimum {-1111};  Minimum value for plotting along y. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMultiGraph.h>. Inheritance diagram for TMultiGraph:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMultiGraph() [1/3]. TMultiGraph::TMultiGraph ; (; const TMultiGraph & ; ). protecteddelete . ◆ TMultiGraph() [2/3]. TMultiGraph::TMultiGraph ; (; ).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiGraph.html:24857,inherit,inherited,24857,doc/master/classTMultiGraph.html,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html,1,['inherit'],['inherited']
Modifiability," SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=fals",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFixedProdPdf.html:61244,inherit,inherited,61244,doc/master/classRooFixedProdPdf.html,https://root.cern,https://root.cern/doc/master/classRooFixedProdPdf.html,4,['inherit'],['inherited']
Modifiability," SetText (TGText *text);  Adopt a new text buffer. The text will be deleted by this object. ;  ; virtual void SetVsbPosition (Long_t newPos);  Set position of vertical scrollbar. ;  ; virtual void ShowBottom ();  Show bottom of the page. ;  ; virtual void ShowTop ();  Show top of the page. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Long_t ToObjXCoord (Long_t xCoord, Long_t line);  Convert x screen coordinate to column in specified line. ;  ; virtual Long_t ToObjYCoord (Long_t yCoord);  Convert y screen coordinate to line number. ;  ; virtual Long_t ToScrXCoord (Long_t xCoord, Long_t line);  Convert column number in specified line to screen coordinate. ;  ; virtual Long_t ToScrYCoord (Long_t yCoord);  Convert line number to screen coordinate. ;  ; virtual void Update ();  update the whole window of text view ;  ;  Public Member Functions inherited from TGView;  TGView (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, Int_t id=-1, UInt_t xMargin=0, UInt_t yMargin=0, UInt_t options=kSunkenFrame|kDoubleBorder, UInt_t sboptions=0, Pixel_t back=GetWhitePixel());  Create an editor view, containing an TGEditorFrame and (optionally) a horizontal and vertical scrollbar. ;  ;  ~TGView () override;  Delete view. ;  ; void ChangeBackground (Pixel_t) override;  Change background color of the canvas frame. ;  ; void Clear (Option_t *="""") override;  Clear view. ;  ; void DrawBorder () override;  Draw the border of the text edit widget. ;  ; TGViewFrame * GetCanvas () const;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; TGLongPosition GetScrollPosition () const;  ; TGLongPosition GetScrollValue () const;  ; const TGGC & GetViewWhiteGC ();  ; TGDimension GetVirtualSize () const;  ; Bool_t HandleButton (Event_t *event) override;  handle button ;  ; Bool_t HandleExpose (Event_t *event) override;  Handle expose events. ;  ; TClass * IsA () const override;  ; void Layout () override;  layout ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextViewostream.html:5870,inherit,inherited,5870,doc/master/classTGTextViewostream.html,https://root.cern,https://root.cern/doc/master/classTGTextViewostream.html,1,['inherit'],['inherited']
Modifiability," SetTitle (const char *title="""") override;  Set canvas title. ;  ; void SetWindowPosition (Int_t x, Int_t y);  Set canvas window position. ;  ; void SetWindowSize (UInt_t ww, UInt_t wh);  Set canvas window size. ;  ; void Show ();  Show canvas. ;  ; virtual void Size (Float_t xsizeuser=0, Float_t ysizeuser=0);  Set the canvas scale in centimeters. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void ToggleAutoExec ();  Toggle pad auto execution of list of TExecs. ;  ; virtual void ToggleEditor ();  Toggle editor. ;  ; virtual void ToggleEventStatus ();  Toggle event statusbar. ;  ; virtual void ToggleToolBar ();  Toggle toolbar. ;  ; virtual void ToggleToolTips ();  Toggle tooltip display. ;  ; void Update () override;  Update canvas pad buffers. ;  ; void UpdateAsync () override;  Asynchronous pad update. ;  ; void UseCurrentStyle () override;  Force a copy of current style for all objects in canvas. ;  ; Bool_t UseGL () const;  ;  Public Member Functions inherited from TPad;  TPad ();  Pad default constructor. ;  ;  TPad (const char *name, const char *title, Double_t xlow, Double_t ylow, Double_t xup, Double_t yup, Color_t color=-1, Short_t bordersize=-1, Short_t bordermode=-2);  Pad constructor. ;  ;  ~TPad () override;  Pad destructor. ;  ; void AbsCoordinates (Bool_t set) override;  ; Double_t AbsPixeltoX (Int_t px) override;  ; virtual void AbsPixeltoXY (Int_t xpixel, Int_t ypixel, Double_t &x, Double_t &y);  Convert absolute pixel into X/Y coordinates. ;  ; Double_t AbsPixeltoY (Int_t py) override;  ; void Add (TObject *obj, Option_t *opt="""", Bool_t modified=kTRUE) override;  Add an object to list of primitives with speicified draw option When. ;  ; void AddExec (const char *name, const char *command) override;  Add a new TExec object to the list of Execs. ;  ; void AddFirst (TObject *obj, Option_t *opt="""", Bool_t modified=kTRUE) override;  Add an object as first in list of primitives with speicified draw option When. ;  ; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDialogCanvas.html:10755,inherit,inherited,10755,doc/master/classTDialogCanvas.html,https://root.cern,https://root.cern/doc/master/classTDialogCanvas.html,2,['inherit'],['inherited']
Modifiability," SetTitleSize (Float_t size=0.02, Option_t *axis=""X"");  Set the axis' title size. ;  ; virtual void SetXTitle (const char *title);  ; virtual void SetYTitle (const char *title);  ; virtual void SetZTitle (const char *title);  ; virtual TH1 * ShowBackground (Int_t niter=20, Option_t *option=""same"");  This function calculates the background spectrum in this histogram. ;  ; virtual Int_t ShowPeaks (Double_t sigma=2, Option_t *option="""", Double_t threshold=0.05);  Interface to TSpectrum::Search. ;  ; virtual void Smooth (Int_t ntimes=1, Option_t *option="""");  Smooth bin contents of this histogram. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Sumw2 (Bool_t flag=kTRUE);  Create structure to store sum of squares of weights. ;  ; void UseCurrentStyle () override;  Copy current attributes from/to current style. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:48532,inherit,inherited,48532,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['inherit'],['inherited']
Modifiability," SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Member Functions; void GetHelpMessage () const;  ;  Protected Member Functions inherited from TMVA::PyMethodBase; void PyRunString (TString code, TString errorMessage=""Failed to run python code"", int start=256);  Execute Python code from string. ;  ;  Protected Member Functions inherited from TMVA::MethodBase; virtual std::vector< Double_t > GetDataMvaValues (DataSet *data=nullptr, Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the given Data type ;  ; const TString & GetInternalVarName (Int_t ivar) const;  ; const TString & GetOriginalVarName (Int_t ivar) const;  ; const TString & GetWeightFileDir () const;  ; Bool_t HasTrainingTree () const;  ; Bool_t Help () const;  ; Bool_t IgnoreEventsWithNegWeightsInTraining () const;  ; Bool_t IsConstructedFromWeightFile () const;  ; Bool_t IsNormalised () const;  ; virtual void MakeClassSpecific (std::ostream &, const TString &="""") const;  ; virtual void MakeClassSpecificHeader (std::ostream &, const TString &="""") const;  ; void NoErrorCalc (Double_t *const err, Double_t *const errUpper);  ; void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPyGTB.html:21917,inherit,inherited,21917,doc/master/classTMVA_1_1MethodPyGTB.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPyGTB.html,2,['inherit'],['inherited']
Modifiability," SetVisDaughters (Bool_t vis=kTRUE);  Set visibility for the daughters. ;  ; virtual void SetVisLeaves (Bool_t flag=kTRUE);  Set branch type visibility. ;  ; virtual void SetVisOnly (Bool_t flag=kTRUE);  Set branch type visibility. ;  ; void SetVisRaytrace (Bool_t flag=kTRUE);  ; void SetVisStreamed (Bool_t vis=kTRUE);  Mark attributes as ""streamed to file"". ;  ; void SetVisTouched (Bool_t vis=kTRUE);  Mark visualization attributes as ""modified"". ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestAttBit (UInt_t f) const;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGeoNode; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TGeoAtt; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions;  TGeoNodeMatrix (const TGeoNodeMatrix &gnm)=delete;  ; TGeoNodeMatrix & opera",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNodeMatrix.html:15543,inherit,inherited,15543,doc/master/classTGeoNodeMatrix.html,https://root.cern,https://root.cern/doc/master/classTGeoNodeMatrix.html,3,['inherit'],['inherited']
Modifiability," SetVisDaughters (Bool_t vis=kTRUE);  Set visibility for the daughters. ;  ; virtual void SetVisLeaves (Bool_t flag=kTRUE);  Set branch type visibility. ;  ; virtual void SetVisOnly (Bool_t flag=kTRUE);  Set branch type visibility. ;  ; void SetVisRaytrace (Bool_t flag=kTRUE);  ; void SetVisStreamed (Bool_t vis=kTRUE);  Mark attributes as ""streamed to file"". ;  ; void SetVisTouched (Bool_t vis=kTRUE);  Mark visualization attributes as ""modified"". ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestAttBit (UInt_t f) const;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGeoNode; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TGeoAtt; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions;  TGeoNodeOffset (const TGeoNodeOffset &)=delete;  ; TGeoNodeOffset & operator",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNodeOffset.html:15535,inherit,inherited,15535,doc/master/classTGeoNodeOffset.html,https://root.cern,https://root.cern/doc/master/classTGeoNodeOffset.html,3,['inherit'],['inherited']
Modifiability," ShowPeaks(). Int_t TH2::ShowPeaks ; (; Double_t ; sigma = 2, . Option_t * ; option = """", . Double_t ; threshold = 0.05 . ). overridevirtual . Interface to TSpectrum2::Search the function finds peaks in this histogram where the width is > sigma and the peak maximum greater than threshold*maximum bin content of this. ; for more details see TSpectrum::Search. note the difference in the default value for option compared to TSpectrum2::Search option="""" by default (instead of ""goff"") ; Reimplemented from TH1.; Definition at line 2695 of file TH2.cxx. ◆ Smooth(). void TH2::Smooth ; (; Int_t ; ntimes = 1, . Option_t * ; option = """" . ). overridevirtual . Smooth bin contents of this 2-d histogram using kernel algorithms similar to the ones used in the raster graphics community. ; Bin contents in the active range are replaced by their smooth values. The algorithm retains the input dimension by using Kernel Crop at the input boundaries. Kernel Crop sets any pixel in the kernel that extends past the input to zero and adjusts the normalization accordingly. If Errors are defined via Sumw2, they are also scaled and computed. However, note the resulting errors will be correlated between different-bins, so the errors should not be used blindly to perform any calculation involving several bins, like fitting the histogram. One would need to compute also the bin by bin correlation matrix.; 3 kernels are proposed k5a, k5b and k3a. k5a and k5b act on 5x5 cells (i-2,i-1,i,i+1,i+2, and same for j) k5b is a bit more stronger in smoothing k3a acts only on 3x3 cells (i-1,i,i+1, and same for j). By default the kernel ""k5a"" is used. You can select the kernels ""k5b"" or ""k3a"" via the option argument. If TAxis::SetRange has been called on the x or/and y axis, only the bins in the specified range are smoothed. In the current implementation if the first argument is not used (default value=1).; implementation by David McKee (dmcke.nosp@m.e@ba.nosp@m.ma.ua.nosp@m..edu). Extended by Rene Brun ; Reimpl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2.html:108514,extend,extends,108514,doc/master/classTH2.html,https://root.cern,https://root.cern/doc/master/classTH2.html,1,['extend'],['extends']
Modifiability," Sort (Bool_t order=kSortAscending);  Sort linked list. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSeqCollection; virtual ~TSeqCollection ();  ; void Add (TObject *obj) override;  ; virtual Int_t GetLast () const;  Returns index of last object in collection. ;  ; virtual Int_t IndexOf (const TObject *obj) const;  Return index of object in collection. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsSorted () const;  ; Int_t LastIndex () const;  ; Long64_t Merge (TCollection *list);  Merge this collection with all collections coming in the input list. ;  ; virtual void RemoveAfter (TObject *after);  ; virtual TObject * RemoveAt (Int_t idx);  ; virtual void RemoveBefore (TObject *before);  ; virtual void RemoveFirst ();  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UnSort ();  ;  Public Member Functions inherited from TCollection; virtual ~TCollection ();  TNamed destructor. ;  ; virtual void AddAll (const TCollection *col);  Add all objects from collection col to this collection. ;  ; void AddVector (TObject *obj1,...);  Add all arguments to the collection. ;  ; Bool_t AssertClass (TClass *cl) const;  Make sure all objects in this collection inherit from class cl. ;  ; TIter begin () const;  ; void Browse (TBrowser *b) override;  Browse this collection (called by TBrowser). ;  ; Int_t Capacity () const;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an collection using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TCollection objects. ;  ; Bool_t Contains (const char *name) const;  ; Bool_t Contains (const TObject *obj) const;  ; void Draw (Option_t *option="""") override;  Draw all objects in this collection. ;  ; void Dump () const override;  Dump all objects in this collection. ;  ; TIte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfDataMembers.html:8093,inherit,inherited,8093,doc/master/classTListOfDataMembers.html,https://root.cern,https://root.cern/doc/master/classTListOfDataMembers.html,7,['inherit'],['inherited']
Modifiability," Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  . #include <TEveJetCone.h>. Inheritance diagram for TEveJetCone:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveJetCone() [1/2]. TEveJetCone::TEveJetCone ; (; const TEveJetCone & ; ). private . ◆ TEveJetCone() [2/2]. TEveJetCone::TEveJetCone ; (; const Text_t * ; n = ""TEveJetCone"", . const Text_t * ; t = """" . ). Constructor. ; Definition at line 51 of file TEveJetCone.cxx. ◆ ~TEveJetCone(). TEveJetCone::~TEveJetCone ; (; ). inlineoverride . Definition at line 49 of file TEveJetCone.h. Member Function Documentation. ◆ AddCone(). Int_t TEveJetCone::AddCone ; (; Float_t ; eta, . Float_t ; phi, . Float_t ; cone_r, . Float_t ; length = 0 . ). Add jet cone. ; parameters are :; (eta,phi) : of the center/leading particle; cone_r : cone radius in eta-phi space; length : length of the cone; if cylinder is set and length is adapted to cylinder.; if length is given, it will be used as scalar factor. if cylinder is not set, length is used as length of the cone Return 0 on success. . Definition at line 92 of file TEveJetCone.cxx. ◆ AddEllipticCone(). Int_t TEveJetCone::AddEllipticCone ; (; Float_t ; eta, . Float_t ; phi, . Float_t ; reta, . Float_t ; rphi, . Float_t ; length = 0 . ). Add jet cone. ; parameters are :; (eta,phi) : of the center/leading particle; (reta, rphi) : radius of cone in eta-phi space; length : length of the cone; if cylinder is set and length is adapted to cylinder.; if length is given, it will be used as scalar factor. if cylinder is not set, length is used as length of the cone Returns 0 on success. . Definition at line 108 of file TEveJetCone.cxx. ◆ CalcBaseVec() [1/2]. TEveVector TEveJetCone::CalcBaseVec ; (; Float_t ; alpha); const. protected . Returns point on the base of the cone with internal angle alpha: ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveJetCone.html:40583,adapt,adapted,40583,doc/master/classTEveJetCone.html,https://root.cern,https://root.cern/doc/master/classTEveJetCone.html,1,['adapt'],['adapted']
Modifiability," Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  . Protected Attributes; Float_t fDefCoord;  ; Float_t fDefHeight;  ; Float_t fDefWidth;  ; EQuadType_e fQuadType;  ;  Protected Attributes inherited from TEveDigitSet; Bool_t fAntiFlick;  ; Callback_foo fCallbackFoo;  ; Color_t fColor;  The last / current idx added to collection. ;  ; Int_t fDefaultValue;  ; TRefArray * fDigitIds;  ; Bool_t fDisableLighting;  ; Bool_t fEmitSignals;  ; TEveFrameBox * fFrame;  ; Bool_t fHighlightFrame;  ; Bool_t fHistoButtons;  ; DigitBase_t * fLastDigit;  ; Int_t fLastIdx;  The last / current digit added to collection. ;  ; Bool_t fOwnIds;  ; TEveRGBAPalette * fPalette;  ; TEveChunkManager fPlex;  ; ERenderMode_e fRenderMode;  ; Bool_t fSelectViaFrame;  ; Bool_t fSingleColor;  ; TooltipCB_foo fTooltipCBFoo;  Additional function to call on secondary-select. ;  ; Bool_t fValueIsColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveQuadSet.html:40240,inherit,inherited,40240,doc/master/classTEveQuadSet.html,https://root.cern,https://root.cern/doc/master/classTEveQuadSet.html,1,['inherit'],['inherited']
Modifiability," Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TBufferSQL (const TBufferSQL &);  ; void operator= (const TBufferSQL &);  . Private Attributes; std::vector< Int_t > * fColumnVec {nullptr};  ; TString * fInsertQuery {nullptr};  ; std::vector< Int_t >::const_iterator fIter;  ; TSQLRow ** fRowPtr {nullptr};  . Additional Inherited Members;  Public Types inherited from TBufferFile; enum  { kStreamedMemberWise = (1ULL << ( 14 )); };  ;  Public Types inherited from TBufferIO; enum  { kMapSize = 503; };  ; enum  EStatusBits { ;   kNotDecompressed = (1ULL << ( 15 )); , kTextBasedStreaming = (1ULL << ( 18 )); , kUser1 = (1ULL << ( 21 )); , kUser2 = (1ULL << ( 22 )); , ;   kUser3 = (1ULL << ( 23 )). };  ;  Public Types inherited from TBuffer; enum  { kInitialSize = 1024; , kMinimalSize = 128; };  ; enum  EMode { kRead = 0; , kWrite = 1; };  ; enum  EStatusBits { kIsOwner = (1ULL << ( 16 )); , kCannotHandleMemberWiseStreaming = (1ULL << ( 17 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferSQL.html:33478,inherit,inherited,33478,doc/master/classTBufferSQL.html,https://root.cern,https://root.cern/doc/master/classTBufferSQL.html,2,['inherit'],['inherited']
Modifiability," Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; Int_t fCounter;  ;  Protected Attributes inherited from TStreamerElement; Int_t fArrayDim;  ; Int_t fArrayLength;  ; TClass * fClassObject;  ; Double_t fFactor;  Maximum of data member if a range is specified [xmin,xmax,nbits]. ;  ; Int_t fMaxIndex [5];  ; TClass * fNewClass;  pointer to class of object ;  ; Int_t fNewType;  base offset for TObject if the element inherits from it ;  ; Int_t fOffset;  ; Int_t fSize;  ; TMemberStreamer * fStreamer;  new element class when reading ;  ; Int_t fTObjectOffset;  element offset in class ;  ; Int_t fType;  ; TString fTypeName;  new element type when reading ;  ; Double_t fXmax;  Minimum of data member if a range is specified [xmin,xmax,nbits]. ;  ; Double_t fXmin;  pointer to element Streamer ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions;  TStreamerBasicType (const TStreamerBasicType &)=delete;  ; TStreamerBasicType & operator= (const TStreamerBasicType &)=delete;  . Additional Inherited Members;  Public Types inherited from TStreamerElement; enum  EStatusBits { ;   kHasRange = (1ULL << ( 6 )); , kCache = (1ULL << ( 9 )); , kRepeat = (1ULL << ( 10 )); , kRead = (1ULL << ( 11 )); , ;   kWrite = (1ULL << ( 12 )); , kDoNotDelete = (1ULL << ( 13 )); , kWholeObject = (1ULL << ( 14 )); , kWarned = (1ULL << ( 21 )). };  ; enum class  EStatusBitsDupExceptions { kDoNotDelete = TStreamerElement::kDoNotDelete; , kHasRange = TStreamerElement:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerBasicType.html:14242,inherit,inherits,14242,doc/master/classTStreamerBasicType.html,https://root.cern,https://root.cern/doc/master/classTStreamerBasicType.html,1,['inherit'],['inherits']
Modifiability," Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual void Begin1D (TTree *t);  Initialization for 1D Histogram. ;  ; virtual void Begin2D (TTree *t);  Initialization for 2D histogram. ;  ; virtual void Begin3D (TTree *t);  Initialization for 3D histogram. ;  ; void DefVar () override;  Define variables according to arguments. ;  ; void DoFill (Long64_t entry, Double_t w, const Double_t *v) override;  Fills the histgram with given values. ;  ;  Protected Member Functions inherited from TProofDraw; virtual void ClearFormula ();  Delete internal buffers. ;  ; virtual Bool_t CompileVariables ();  Compiles each variable from fTreeDrawArgsParser for the tree fTree. ;  ; void FillWeight ();  Get weight from input list, if any. ;  ; virtual Bool_t ProcessSingle (Long64_t, Int_t);  Processes a single variable from an entry. ;  ; void SetCanvas (const char *objname);  Move to a canvas named <name>_canvas; create the canvas if not existing. ;  ; void SetDrawAtt (TObject *o);  Set the drawing attributes from the input list. ;  ; void SetError (const char *sub, const char *mesg);  Sets the error status. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TH1 * fHistogram;  ;  Protected Attributes inherited from TProofDraw; Int_t fDimension;  ; TString fInitialExp;  ; TTreeFormulaManager * fManager;  ; Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDrawHist.html:12022,inherit,inherited,12022,doc/master/classTProofDrawHist.html,https://root.cern,https://root.cern/doc/master/classTProofDrawHist.html,1,['inherit'],['inherited']
Modifiability," Static Public Member Functions inherited from TRootSnifferStore; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TString & fBuf;  ! output buffer ;  ; Bool_t fCompact {kFALSE};  ! produce compact json code ;  ;  Protected Attributes inherited from TRootSnifferStore; TClass * fResClass {nullptr};  ! class of found item ;  ; TDataMember * fResMember {nullptr};  ! datamember pointer of found item ;  ; Int_t fResNumChilds {-1};  ! count of found childs, -1 by default ;  ; void * fResPtr {nullptr};  ! pointer on found item ;  ; Int_t fResRestrict {0};  ! restriction for result, 0-default, 1-readonly, 2-full ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1UL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootSnifferStoreJson.html:10417,inherit,inherited,10417,doc/master/classTRootSnifferStoreJson.html,https://root.cern,https://root.cern/doc/master/classTRootSnifferStoreJson.html,1,['inherit'],['inherited']
Modifiability," Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void TabPressed ();  Handle Tab keyboard navigation in this dialog. ;  ;  Public Member Functions inherited from TGTransientFrame;  TGTransientFrame (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a transient window. ;  ; virtual void CenterOnParent (Bool_t croot=kTRUE, EPlacement pos=kCenter);  Position transient frame centered relative to the parent frame. ;  ; const TGWindow * GetMain () const;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a transient frame widget as a C++ statement(s) on output stream out. ;  ; void SaveSource (const char *filename=""Rootdlog.C"", Option_t *option="""") override;  Save the GUI transient frame widget in a C++ macro file. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a top level main frame. ;  ;  ~TGMainFrame () override;  TGMainFrame destructor. ;  ; virtual Bool_t BindKey (const TGWindow *w, Int_t keycode, Int_t modifier) const;  Bind key to a window. ;  ; void DontCallClose ();  Typically call this method in the slot connected to the CloseWindow() signal to prevent the calling of the default or any derived CloseWindow() methods to prevent premature or double deletion of this window. ;  ; TList * GetBindList () const;  ; void GetClassHints (const char *&className, const char *&resourceName) const;  ; const char * GetIconName () const override;  Returns mime type name of object. ;  ; const char * GetIconPixmap () const;  ; void GetMWMHints (UInt_t &value, UInt_t &funcs, UInt_t &input) const;  ; const char * GetWindowName () const;  ; void GetWMPosition (Int_t &x, Int_t &y) const;  ; void GetWMSize (UInt_t &w, UInt_t &h) const;  ; void GetWMSizeHi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootDialog.html:2354,inherit,inherited,2354,doc/master/classTRootDialog.html,https://root.cern,https://root.cern/doc/master/classTRootDialog.html,1,['inherit'],['inherited']
Modifiability," Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; TVectorD TransSolve (const TVectorD &b, Bool_t &ok) override;  ; Bool_t TransSolve (TMatrixDColumn &) override;  ; Bool_t TransSolve (TVectorD &b) override;  ;  Public Member Functions inherited from TDecompBase;  TDecompBase ();  Default constructor. ;  ;  TDecompBase (const TDecompBase &another);  Copy constructor. ;  ;  ~TDecompBase () override;  ; virtual Double_t Condition ();  Matrix condition number. ;  ; Int_t GetColLwb () const;  ; Double_t GetCondition () const;  ; Double_t GetDet1 () const;  ; Double_t GetDet2 () const;  ; Int_t GetRowLwb () const;  ; Double_t GetTol () const;  ; virtual Bool_t MultiSolve (TMatrixD &B);  Solve set of equations with RHS in columns of B. ;  ; TDecompBase & operator= (const TDecompBase &source);  Assignment operator. ;  ; Double_t SetTol (Double_t tol);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompSparse.html:2989,inherit,inherited,2989,doc/master/classTDecompSparse.html,https://root.cern,https://root.cern/doc/master/classTDecompSparse.html,1,['inherit'],['inherited']
Modifiability," StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classAxis2.html:10394,inherit,inheritance,10394,doc/master/classAxis2.html,https://root.cern,https://root.cern/doc/master/classAxis2.html,2,['inherit'],['inheritance']
Modifiability," SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDictionary; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TDictionary * GetDictionary (const char *name);  Retrieve the type (class, fundamental type, typedef etc) named ""name"". ;  ; static TDictionary * GetDictionary (const std::type_info &typeinfo);  ; static bool WantsRegularMembers (EMemberSelection sel);  ; static bool WantsUsingDecls (EMemberSelection sel);  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBaseClass.html:10698,inherit,inherited,10698,doc/master/classTBaseClass.html,https://root.cern,https://root.cern/doc/master/classTBaseClass.html,6,['inherit'],['inherited']
Modifiability," SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualFitter; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualFitter * Fitter (TObject *obj, Int_t maxpar=25);  Static function returning a pointer to the current fitter. ;  ; static const char * GetDefaultFitter ();  static: return the name of the default fitter ;  ; static Double_t GetErrorDef ();  static: Return the Error Definition ;  ; static TVirtualFitter * GetFitter ();  static: return the current Fitter ;  ; static Int_t GetMaxIterations ();  static: Return the maximum number of iterations actually max number of function calls ;  ; static Double_t GetPrecision ();  static: Return the fit relative precision ;  ; static void SetDefaultFitter (const char *name="""");  static: set name of default fitter ;  ; static void SetErrorDef (Double_t errdef=1);  static: Set the Error Definition (default=1) For Minuit this is the value passed with the ""SET ERR"" command (see https://cern-tex.web.cern.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBackCompFitter.html:18418,inherit,inherited,18418,doc/master/classTBackCompFitter.html,https://root.cern,https://root.cern/doc/master/classTBackCompFitter.html,4,['inherit'],['inherited']
Modifiability," SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualViewer3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualViewer3D * Viewer3D (TVirtualPad *pad=nullptr, Option_t *type="""");  Create a Viewer 3D of specified type. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TViewer3DPad (const TViewer3DPad &)=delete;  ; TViewer3DPad & operator= (const TViewer3DPad &)=delete;  . Private Attributes; Bool_t fBuilding;  is scene being built? ;  ; TVirtualPad &",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTViewer3DPad.html:9972,inherit,inherited,9972,doc/master/classTViewer3DPad.html,https://root.cern,https://root.cern/doc/master/classTViewer3DPad.html,1,['inherit'],['inherited']
Modifiability," TRInterface(). TRInterface::TRInterface ; (; const Int_t ; argc = 0, . const Char_t * ; argv[] = NULL, . const Bool_t ; loadRcpp = true, . const Bool_t ; verbose = false, . const Bool_t ; interactive = true . ). private . The command line arguments are by default argc=0 and argv=NULL, The verbose mode is by default disabled but you can enable it to show procedures information in stdout/stderr. ; Notesome time can produce so much noise in the output ; Parameters. argcdefault 0 ; argvdefault null ; loadRcppdefault true ; verbosedefault false ; interactivedefault true . Definition at line 33 of file TRInterface.cxx. ◆ ~TRInterface(). TRInterface::~TRInterface ; (; ). Definition at line 71 of file TRInterface.cxx. Member Function Documentation. ◆ Assign() [1/3]. template<typename T > . void ROOT::R::TRInterface::Assign ; (; const T & ; var, . const TString & ; name . ). inline . Template method to assign C++ variables into R environment. ; Parameters. varany R wrappable datatype ; namename of the variable in R's environment . Definition at line 258 of file TRInterface.h. ◆ Assign() [2/3]. void TRInterface::Assign ; (; const TRDataFrame & ; df, . const TString & ; name . ). Method to assign TRDataFrame in R's environment. ; Parameters. dfTRDataFrame ; namename of the variable in R's environment . Definition at line 154 of file TRInterface.cxx. ◆ Assign() [3/3]. void TRInterface::Assign ; (; const TRFunctionExport & ; fun, . const TString & ; name . ). Method to assign TRFunctionExport in R's environment. ; Parameters. funTRFunctionExport ; namename of the variable in R's environment . Definition at line 148 of file TRInterface.cxx. ◆ Class(). static TClass * ROOT::R::TRInterface::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::R::TRInterface::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::R::TRInterface::Class_Version ; (; ). inlinestaticconstexpr . Return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:19303,variab,variable,19303,doc/master/classROOT_1_1R_1_1TRInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html,1,['variab'],['variable']
Modifiability," TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  Map containing matrices defined in the GDML file. ;  ; static const char * DeclFileName ();  ; static TGeoVolume * StartGDML (const char *filename);  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; const char * fCurrentFile;  ; std::string fDefault_aunit = ""rad"";  ; std::string fDefault_lunit = ""mm"";  ; TXMLEngine * fFileEngine [20];  ; int fFILENO;  ; int fNunitless {0};  ; const char * fStartFile;  ; int fVolID;  ; TGeoVolume * fWorld;  ; TString fWorldName;  . Private Types; typedef std::map< std::string, double > ConstMap;  ; typedef TGDMMapHelper< TGeoElement > EleMap;  ; typedef TGDMMapHelper< const char > FileMap;  ; typedef std::map< std::string, double > FracMap;  ; typedef TGDMMapHelper< TGeoIsotope > IsoMap;  ; typedef TGDMMa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDMLParse.html:10460,inherit,inherited,10460,doc/master/classTGDMLParse.html,https://root.cern,https://root.cern/doc/master/classTGDMLParse.html,1,['inherit'],['inherited']
Modifiability," TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TRefCnt;  TRefCnt (EReferenceFlag);  Leave fRefs alone. ;  ;  TRefCnt (Int_t initRef=0);  ; virtual ~TRefCnt ();  ; void AddReference ();  ; UInt_t References () const;  ; UInt_t RemoveReference ();  ; void SetRefCount (UInt_t r);  . Protected Attributes; ClassInfo_t * fClass;  ; Int_t fExecuting;  ; CallFunc_t * fFunc;  ; TFunction * fMethod;  ; TString fName;  ; Longptr_t fOffset;  ;  Protected Attributes inherited from TRefCnt; UInt_t fRefs;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TRefCnt; enum  EReferenceFlag { kStaticInit; };  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Ve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQSlot.html:10006,inherit,inherited,10006,doc/master/classTQSlot.html,https://root.cern,https://root.cern/doc/master/classTQSlot.html,1,['inherit'],['inherited']
Modifiability," TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TObjArray * fCmds;  ; TClass * fCurrentObjClass;  ; Long64_t fCurrentObjId;  ; TSQLFile * fFile;  ; Long64_t fFirstObjId;  ; Long64_t fKeyId;  ; Int_t fLastLongStrId;  ; Long64_t fLastObjId;  ; TObjArray fLongStrValues;  ; TMap fPool;  ; TSQLStatement * fRegStmt;  ; TObjArray fRegValues;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSqlRegistry.html:8874,inherit,inherited,8874,doc/master/classTSqlRegistry.html,https://root.cern,https://root.cern/doc/master/classTSqlRegistry.html,1,['inherit'],['inherited']
Modifiability," Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  . Additional Inherited Members;  Public Types inherited from TPave; enum  { kNameIsAction = (1ULL << ( 11 )); };  ;  Public Types inherited from TBox; enum  { kCannotMove = (1ULL << ( 12 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TLegend.h>. Inheritance diagram for TLegend:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TLegend() [1/4]. TLegend::TLegend ; (; ). Default constructor. ; This constructor allows to place automatically the legend with a default width(0.3) and a default height (0.15) in normalize coordinates. ; Definition at line 200 of file TLegend.cxx. ◆ TLegend() [2/4]. TLegend::TLegend ; (; Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2, . const char * ; header = """", . Option_t * ; option = ""brNDC"" . ). Normal constructor. ; A TLegend is a Pave with several TLegendEntry(s).; x1,y1,x2,y2 are the coordinates of the Legend in the current pad (in normalised coordinates by default); header is the title displayed at the top of the legend it is a TLatex string treated like a regular entry. The default is no header (header = 0).; The option",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLegend.html:33716,inherit,inherited,33716,doc/master/classTLegend.html,https://root.cern,https://root.cern/doc/master/classTLegend.html,1,['inherit'],['inherited']
Modifiability," UnixUnixService (const char *sockpath, int backlog);  Open a socket on path 'sockpath', bind to it and start listening for Unix domain connections to it. ;  ; static int UnixUnixService (int port, int backlog);  Open a socket, bind to it and start listening for Unix domain connections to it. ;  ; static int UnixWaitchild ();  Wait till child is finished. ;  ;  Static Protected Member Functions inherited from TSystem; static const char * StripOffProto (const char *path, const char *proto);  Strip off protocol string from specified path. ;  ;  Protected Attributes inherited from TSystem; EAclicMode fAclicMode {kDefault};  ; Int_t fAclicProperties {0};  ; Int_t fBeepDuration {0};  ; Int_t fBeepFreq {0};  ; TString fBuildArch;  ; TString fBuildCompiler;  ; TString fBuildCompilerVersion;  ; TString fBuildCompilerVersionStr;  ; TString fBuildDir;  ; TString fBuildNode;  ; TSeqCollection * fCompiled {nullptr};  ; Bool_t fDone {kFALSE};  ; TSeqCollection * fFileHandler {nullptr};  ; TString fFlagsDebug;  ; TString fFlagsOpt;  ; TSeqCollection * fHelpers {nullptr};  ; TString fHostname;  ; TString fIncludePath;  ; Bool_t fInControl {kFALSE};  ; std::atomic< Bool_t > fInsideNotify {kFALSE};  ; Int_t fLevel {0};  ; TString fLinkdefSuffix;  ; TString fLinkedLibs;  ; TString fListLibs;  ; TString fListPaths;  ; TString fMakeExe;  ; TString fMakeSharedLib;  ; Int_t fMaxrfd {-1};  ; Int_t fMaxwfd {-1};  ; Int_t fNfd {0};  Signals that were trapped. ;  ; TString fObjExt;  ; TSeqCollection * fOnExitList {nullptr};  ; TFdSet * fReadmask {nullptr};  ; TFdSet * fReadready {nullptr};  Files that should be checked for write events. ;  ; Int_t fSigcnt {0};  ; TSeqCollection * fSignalHandler {nullptr};  ; TFdSet * fSignals {nullptr};  Files with writes waiting. ;  ; TString fSoExt;  ; TSeqCollection * fStdExceptionHandler {nullptr};  ; TList * fTimers {nullptr};  ; TString fWdpath;  ; TFdSet * fWritemask {nullptr};  Files that should be checked for read events. ;  ; TFdSet * fWriteready {",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMacOSXSystem.html:36892,inherit,inherited,36892,doc/master/classTMacOSXSystem.html,https://root.cern,https://root.cern/doc/master/classTMacOSXSystem.html,1,['inherit'],['inherited']
Modifiability," UpdateSchema (const RNTupleModelChangeset &changeset, NTupleSize_t firstEntry)=0;  Incorporate incremental changes to the model into the ntuple descriptor. ;  ;  Public Member Functions inherited from ROOT::Experimental::Internal::RPageStorage;  RPageStorage (const RPageStorage &other)=delete;  ;  RPageStorage (RPageStorage &&other)=default;  ;  RPageStorage (std::string_view name);  ; virtual ~RPageStorage ();  ; virtual ColumnHandle_t AddColumn (DescriptorId_t fieldId, RColumn &column)=0;  Register a new column. ;  ; ColumnId_t GetColumnId (ColumnHandle_t columnHandle) const;  ; virtual Detail::RNTupleMetrics & GetMetrics ();  Returns the default metrics object. ;  ; const std::string & GetNTupleName () const;  Returns the NTuple name. ;  ; RPageStorage & operator= (const RPageStorage &other)=delete;  ; RPageStorage & operator= (RPageStorage &&other)=default;  ; void SetTaskScheduler (RTaskScheduler *taskScheduler);  . Static Public Member Functions; static RSealedPage SealPage (const RSealPageConfig &config);  Seal a page using the provided info. ;  . Protected Member Functions; virtual void CommitDatasetImpl ()=0;  ; virtual void InitImpl (RNTupleModel &model)=0;  ; RSealedPage SealPage (const RPage &page, const RColumnElementBase &element);  Helper for streaming a page. ;  ;  Protected Member Functions inherited from ROOT::Experimental::Internal::RPageStorage; void WaitForAllTasks ();  . Protected Attributes; std::unique_ptr< RNTupleCompressor > fCompressor;  Helper to zip pages and header/footer; includes a 16MB (kMAXZIPBUF) zip buffer. ;  ; std::unique_ptr< RNTupleWriteOptions > fOptions;  ;  Protected Attributes inherited from ROOT::Experimental::Internal::RPageStorage; Detail::RNTupleMetrics fMetrics;  ; std::string fNTupleName;  ; std::unique_ptr< RPageAllocator > fPageAllocator;  For the time being, we will use the heap allocator for all sources and sinks. This may change in the future. ;  ; RTaskScheduler * fTaskScheduler = nullptr;  . Private Attributes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html:5477,config,config,5477,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html,1,['config'],['config']
Modifiability," UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNotifyLink< RNoCleanupNotifierHelper >; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNotifyLinkBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; RNoCleanupNotifierHelper fNoCleanupNotifierHelper;  . Additional Inherited Members;  Public Types inherited from TNotifyLinkBase; enum  EStatusBits { kLinked = (1ULL << ( 11 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html:9267,inherit,inherited,9267,doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TreeUtils_1_1RNoCleanupNotifier.html,3,['inherit'],['inherited']
Modifiability," UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  indicates that key contains subdirectory ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TKey; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TKeyXML ();  ; Int_t Read (const char *name) final;  Read contents of object with specified name from the current directory. ;  ; void StoreKeyAttributes ();  Stores keys attributes in key node. ;  ; void StoreObject (const void *obj, const TClass *cl, Bool_t check",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKeyXML.html:13473,inherit,inherited,13473,doc/master/classTKeyXML.html,https://root.cern,https://root.cern/doc/master/classTKeyXML.html,3,['inherit'],['inherited']
Modifiability," Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Member Functions;  TMacOSXSystem (const TMacOSXSystem &rhs);  ; void AddFileHandler (TFileHandler *fh);  Add a file handler to the list of system file handlers. ;  ;  ClassDef (TMacOSXSystem, 0);  ; void InitializeCocoa ();  ; TMacOSXSystem & operator= (const TMacOSXSystem &rhs);  ; void ProcessApplicationDefinedEvent (void *event);  ; bool ProcessPendingEvents ();  ; TFileHandler * RemoveFileHandler (TFileHandler *fh);  Remove a file handler from the list of file handlers. ;  ; void WaitEvents (Long_t nextto);  . Private Attributes; bool fCocoaInitialized;  ; bool fFirstDispatch;  ; std::unique_ptr< ROOT::MacOSX::Details::MacOSXSystem > fPimpl;  . Friends; class TGCocoa;  . Additional Inherited Members;  Public Types inherited from TSystem; enum  EAclicMode { kDefault; , kDebug; , kOpt; };  ; enum  EAclicProperties { kFlatBuildDir = (1ULL << ( 0 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TUnixSystem; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSystem; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Versio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMacOSXSystem.html:29922,inherit,inherited,29922,doc/master/classTMacOSXSystem.html,https://root.cern,https://root.cern/doc/master/classTMacOSXSystem.html,2,['inherit'],['inherited']
Modifiability," Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Double_t IGetVolumeContentForRoot (Double_t);  Interface to RootFinder. ;  ; static MethodPDERS * ThisPDERS (void);  static pointer to this object ;  ;  Static Public Member Functions inherited from TMVA::MethodBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IMethod; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Configurable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; Double_t ApplyKernelFunction (Double_t normalized_distance);  from the normalized euclidean distance calculate the d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPDERS.html:23742,inherit,inherited,23742,doc/master/classTMVA_1_1MethodPDERS.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPDERS.html,5,['inherit'],['inherited']
Modifiability," Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TSecContext (const TSecContext &);  copy constructor ;  ; TSecContext & operator= (const TSecContext &);  assignement operator ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions; void Cleanup ();  Cleanup what is still active. ;  ; virtual Bool_t CleanupSecContext (Bool_t all);  Ask remote client to cleanup security context 'ctx' If 'all', all sec context with the same host as ctx are cleaned. ;  . Private Attributes; TList * fCleanup;  ; void * fContext;  ; TDatime fExpDate;  ; TString fHost;  ; TString fID;  ; Int_t fMethod;  ; TString fMethodName;  ; Int_t fOffSet;  ; TString fToken;  ; TString fUser;  . Friends; class TRootSecContext;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSecContext.html:10671,inherit,inherited,10671,doc/master/classTSecContext.html,https://root.cern,https://root.cern/doc/master/classTSecContext.html,1,['inherit'],['inherited']
Modifiability," X position where to draw the statistics. ;  ; Float_t fYfile;  Y position where to draw the file name. ;  ; Float_t fYstat;  Y position where to draw the statistics. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  . Private Member Functions;  TButton (const TButton &)=delete;  ; TButton & operator= (const TButton &)=delete;  . Private Attributes; Bool_t fFocused;  If cursor is in... ;  ; Bool_t fFraming;  True if you want a frame to be painted when pressed. ;  . Additional Inherited Members;  Public Types inherited from TPad; enum  { ;   kFraming = (1ULL << ( 6 )); , kHori = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kPrintingPS = (1ULL << ( 11 )); , ;   kCannotMove = (1ULL << ( 12 )); , kClearAfterCR = (1ULL << ( 14 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TPad; void DestroyExternalViewer3D ();  ; Int_t DistancetoPrimitive (Int_t px, Int_t py)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTButton.html:52317,inherit,inherited,52317,doc/master/classTButton.html,https://root.cern,https://root.cern/doc/master/classTButton.html,1,['inherit'],['inherited']
Modifiability," _compCSet;  ; RooListProxy _compRSet;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProduct.html:56582,inherit,inherited,56582,doc/master/classRooProduct.html,https://root.cern,https://root.cern/doc/master/classRooProduct.html,1,['inherit'],['inherited']
Modifiability," active type ;  ; EMsgType fMinType;  minimum type for output ;  ; const TObject * fObjSource;  the source TObject (used for name) ;  ; std::string fStrSource;  alternative string source ;  . Static Private Attributes; static std::atomic< const std::map< EMsgType, std::string > * > fgColorMap {0};  matches output types with terminal colors ;  ; static std::atomic< Bool_t > fgInhibitOutput {kFALSE};  flag to suppress all output ;  ; static const UInt_t fgMaxSourceSize = 25;  maximum length of source name ;  ; static std::atomic< Bool_t > fgOutputSupressed;  disable the output globally (used by generic booster) ;  ; static const std::string fgPrefix = """";  the prefix of the source name ;  ; static const std::string fgSuffix = "": "";  suffix following source name ;  ; static std::atomic< const std::map< EMsgType, std::string > * > fgTypeMap {0};  matches output types with strings ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TMVA/MsgLogger.h>. Inheritance diagram for TMVA::MsgLogger:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MsgLogger.html:11381,inherit,inherited,11381,doc/master/classTMVA_1_1MsgLogger.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MsgLogger.html,1,['inherit'],['inherited']
Modifiability," cached of the streaming method to use ;  ; TClassStreamer * fStreamer;  ; ClassStreamerFunc_t fStreamerFunc;  ; std::atomic< StreamerImpl_t > fStreamerImpl;  ; TObjArray * fStreamerInfo;  ; Int_t fStreamerType;  saved info to call Streamer ;  ; const std::type_info * fTypeInfo;  ; std::atomic< TListOfDataMembers * > fUsingData;  ; std::atomic< Bool_t > fVersionUsed;  saved remember if fOffsetStreamer has been set. ;  . Static Private Attributes; static std::atomic< Int_t > fgClassCount;  ; static THashTable * fgClassTypedefHash = nullptr;  ; static TDeclNameRegistry fNoInfoOrEmuOrFwdDeclNameRegistry;  . Friends; bool operator& (UChar_t l, ERuntimeProperties r);  ; class ROOT::Internal::TCheckHashRecursiveRemoveConsistency;  ; void ROOT::ResetClassVersion (TClass *, const char *, Short_t);  ; class ROOT::TGenericClassInfo;  ; class TCling;  ; class TProtoClass;  ; class TStreamerInfo;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TClass.h>. Inheritance diagram for TClass:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ ConvSIMap_t. typedef std::atomic<std::map<std::string, TObjArray*>*> TClass::ConvSIMap_t. private . Persistent address of pointer to this TClass object and its successors. ; Definition at line 196 of file TClass.h. ◆ RepoCont_t. typedef std::multimap<void*, Version_t> TClass::RepoCont_t. private . Definition at line 343 of file TClass.h. ◆ StreamerImpl_t. typedef void(* TClass::StreamerImpl_t) (const TClass *pThis, void *obj, TBuffer &b, const TClass *onfile_class). private . Schema evolution rules. ; Definition at line 283 of file TClass.h. Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. private . EnumeratorkLoading ; kUnloading . Definition at line 332 of file TClass.h. ◆ ECheckSum. enu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:46870,inherit,inherited,46870,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,4,['inherit'],['inherited']
Modifiability," changePointer (std::unordered_map< RooAbsArg *, RooAbsArg * > const &replacements) override;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from RooAbsProxy; virtual void changeNormSet (const RooArgSet *newNormSet);  Destructor. ;  ;  Protected Attributes inherited from RooArgProxy; RooAbsArg * _arg = nullptr;  Pointer to content of proxy. ;  ; bool _isFund = true;  If true proxy contains an lvalue. ;  ; bool _ownArg = false;  If true proxy owns contents. ;  ; RooAbsArg * _owner = nullptr;  Pointer to owner of proxy. ;  ; bool _shapeServer = false;  If true contents is shape server of owner. ;  ; bool _valueServer = false;  If true contents is value server of owner. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from RooAbsProxy; RooArgSet * _nset = nullptr;  ! Normalization set to be used for evaluation of RooAbsPdf contents ;  . #include <RooTemplateProxy.h>. Inheritance diagram for RooTemplateProxy< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooTemplateProxy() [1/2]. template<class T > . RooTemplateProxy< T >::RooTemplateProxy ; (; ). inline . Definition at line 155 of file RooTemplateProxy.h. ◆ RooTemplateProxy() [2/2]. template<class T > . template<typename Bool = bool, typename = std::enable_if_t<std::is_same<Bool,bool>::value>> . RooTemplateProxy< T >::RooTemplateProxy ; (; const char * ; theName, . const char * ; desc, . RooAbsArg * ; owner, . Bool ; valueServer = true, . bool ; shapeServer = false . ). inline . Constructor with owner. ; Parameters. [in]theNameName of this proxy (for printing). ; [in]descDescription what this proxy should act as. ; [in]ownerThe object that owns the prox",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTemplateProxy.html:20925,inherit,inherited,20925,doc/master/classRooTemplateProxy.html,https://root.cern,https://root.cern/doc/master/classRooTemplateProxy.html,2,['inherit'],['inherited']
Modifiability," constructor ;  ;  ~ResultsRegression ();  destructor ;  ; void Clear (Option_t *) override;  ; virtual void Clear (Option_t *="""");  ; void CreateDeviationHistograms (TString prefix);  ; TH2F * DeviationAsAFunctionOf (UInt_t varNum, UInt_t tgtNum);  ; Types::EAnalysisType GetAnalysisType () override;  ; Long64_t GetSize () const;  ; std::vector< std::vector< Float_t > > * GetValueVector ();  ; TClass * IsA () const override;  ; const std::vector< Float_t > & operator[] (Int_t ievt) const override;  ; TH1F * QuadraticDeviation (UInt_t tgtNum, Bool_t truncate=false, Double_t truncvalue=0.);  ; void Resize (Int_t entries);  ; void SetValue (std::vector< Float_t > &value, Int_t ievt);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Results;  Results ();  ;  Results (const DataSetInfo *dsi, TString resultsName);  constructor ;  ; virtual ~Results ();  destructor ;  ; void Delete (Option_t *option="""") override;  delete all stored histograms ;  ; Bool_t DoesExist (const TString &alias) const;  Returns true if there is an object stored in the result for a given alias, false otherwise. ;  ; DataSet * GetDataSet () const;  ; const DataSetInfo * GetDataSetInfo () const;  ; TGraph * GetGraph (const TString &alias) const;  ; TH1 * GetHist (const TString &alias) const;  ; TH2 * GetHist2D (const TString &alias) const;  ; TObject * GetObject (const TString &alias) const;  Returns a stored object if it exists. ;  ; TList * GetStorage () const;  ; Types::ETreeType GetTreeType () const;  ; void SetTreeType (Types::ETreeType type);  ; void Store (TObject *obj, const char *alias=nullptr);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ResultsRegression.html:1390,inherit,inherited,1390,doc/master/classTMVA_1_1ResultsRegression.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ResultsRegression.html,1,['inherit'],['inherited']
Modifiability," copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy cache of another RooAbsArg to our cache. ;  ; bool fitRangeOKForPlotting () const;  Check if fit range is usable as plot range, i.e. ;  ; virtual void setValFast (double value);  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooErrorVar.html:58632,parameteriz,parameterized,58632,doc/master/classRooErrorVar.html,https://root.cern,https://root.cern/doc/master/classRooErrorVar.html,2,['parameteriz'],['parameterized']
Modifiability," corner of rubber band box ;  ; Int_t fYDND;  ; Int_t fYf;  other corner of rubber band box ;  ; Int_t fYp;  previous pointer position ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Friends; class TGFSFrameElement;  . Additional Inherited Members;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFileContainer.html:38404,inherit,inherited,38404,doc/master/classTGFileContainer.html,https://root.cern,https://root.cern/doc/master/classTGFileContainer.html,1,['inherit'],['inherited']
Modifiability," corner of rubber band box ;  ; Int_t fYDND;  ; Int_t fYf;  other corner of rubber band box ;  ; Int_t fYp;  previous pointer position ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TGLBContainer (const TGLBContainer &)=delete;  ; TGLBContainer operator= (const TGLBContainer &)=delete;  . Friends; class TGListBox;  . Additional Inherited Members;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLBContainer.html:35122,inherit,inherited,35122,doc/master/classTGLBContainer.html,https://root.cern,https://root.cern/doc/master/classTGLBContainer.html,1,['inherit'],['inherited']
Modifiability," corner of rubber band box ;  ; Int_t fYDND;  ; Int_t fYf;  other corner of rubber band box ;  ; Int_t fYp;  previous pointer position ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TGLVContainer (const TGLVContainer &)=delete;  ; TGLVContainer & operator= (const TGLVContainer &)=delete;  . Additional Inherited Members;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL <",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLVContainer.html:35120,inherit,inherited,35120,doc/master/classTGLVContainer.html,https://root.cern,https://root.cern/doc/master/classTGLVContainer.html,1,['inherit'],['inherited']
Modifiability," corner of rubber band box ;  ; Int_t fYDND;  ; Int_t fYf;  other corner of rubber band box ;  ; Int_t fYp;  previous pointer position ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Static Protected Attributes; static TGGC * fgActiveGC = nullptr;  ; static const TGPicture * fgCheckedPic = nullptr;  icon for checked item ;  ; static const TGPicture * fgClosedPic = nullptr;  icon for closed item ;  ; static TGGC * fgColorGC = nullptr;  ; static cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGListTree.html:47093,inherit,inherited,47093,doc/master/classTGListTree.html,https://root.cern,https://root.cern/doc/master/classTGListTree.html,1,['inherit'],['inherited']
Modifiability," corner of rubber band box ;  ; Int_t fYDND;  ; Int_t fYf;  other corner of rubber band box ;  ; Int_t fYp;  previous pointer position ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Static Protected Attributes; static TGGC * fgLineGC = nullptr;  ;  Static Protected Attributes inherited from TGCompositeFrame; static TGLayoutHints * fgDefaultHints = nullptr;  ;  Static Protected Attributes inherited from TGFrame; static const TGGC * fgBckgndGC = nul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGContainer.html:34785,inherit,inherited,34785,doc/master/classTGContainer.html,https://root.cern,https://root.cern/doc/master/classTGContainer.html,1,['inherit'],['inherited']
Modifiability," corner of rubber band box ;  ; Int_t fYDND;  ; Int_t fYf;  other corner of rubber band box ;  ; Int_t fYp;  previous pointer position ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TGContainer; static TGGC * fgLineGC = nullptr;  ;  Static Protected Attributes inherited from TGCompositeFrame; static TGLayoutHints * fgDefaultHints = nullptr;  ;  Static Protected Attributes inherited from TGFrame; static c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTVLVContainer.html:39125,inherit,inherited,39125,doc/master/classTTVLVContainer.html,https://root.cern,https://root.cern/doc/master/classTTVLVContainer.html,1,['inherit'],['inherited']
Modifiability," destroy sub windows ;  ; virtual void DestroyWindow ();  destroy window ;  ; virtual UInt_t GetEditDisabled () const;  ; virtual const TGWindow * GetMainFrame () const;  Returns top level main frame. ;  ; const char * GetName () const override;  Return unique name, used in SavePrimitive methods. ;  ; const TGWindow * GetParent () const;  ; virtual Bool_t HandleExpose (Event_t *event);  ; virtual Bool_t HandleIdleEvent (TGIdleHandler *);  ; Bool_t HandleTimer (TTimer *) override;  Execute action in response of a timer timing out. ;  ; virtual void IconifyWindow ();  iconify window ;  ; virtual Bool_t IsMapped ();  Returns kTRUE if window is mapped on screen, kFALSE otherwise. ;  ; virtual void LowerWindow ();  lower window ;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetName (const char *name);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootCanvas.html:17603,inherit,inherited,17603,doc/master/classTRootCanvas.html,https://root.cern,https://root.cern/doc/master/classTRootCanvas.html,1,['inherit'],['inherited']
Modifiability," doEval (RooFit::EvalContext &) const override;  Base function for computing multiple values of a RooAbsReal. ;  ; void generateEvent (Int_t code) override;  Generate mix-state dependent. ;  ; Int_t getCoefAnalyticalIntegral (Int_t coef, RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  cout << ""RooBMixDecay::getCoefAI "" ; allVars.Print(""1"") ; ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const override;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; void initGenerator (Int_t code) override;  Interface for one-time initialization to setup the generator for the specified code. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsAnaConvPdf;  RooAbsAnaConvPdf ();  Default constructor, required for persistence. ;  ;  RooAbsAnaConvPdf (const char *name, const char *title, const RooResolutionModel &model, RooRealVar &convVar);  Constructor. ;  ;  RooAbsAnaConvPdf (const RooAbsAnaConvPdf &other, const char *name=nullptr);  ;  ~RooAbsAnaConvPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Return analytical integral defined by given code, which is returned by getAnalyticalIntegralWN() ;  ; virtual bool changeModel (const RooResolutionModel &newModel);  Change the current resolution model to newModel. ;  ; virtual RooFit::OwningPtr< RooArgSet > coefVars (Int_t coefIdx) const;  Return set of parameters with are used exclusively by the coefficient functions. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; RooAbsRealLV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBMixDecay.html:4194,inherit,inherited,4194,doc/master/classRooBMixDecay.html,https://root.cern,https://root.cern/doc/master/classRooBMixDecay.html,1,['inherit'],['inherited']
Modifiability," doEval (RooFit::EvalContext &) const override;  Base function for computing multiple values of a RooAbsReal. ;  ; void generateEvent (Int_t code) override;  Interface for generation of an event using the algorithm corresponding to the specified code. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const override;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooResolutionModel;  RooResolutionModel ()=default;  ;  RooResolutionModel (const char *name, const char *title, RooAbsRealLValue &x);  Constructor with convolution variable 'x'. ;  ;  RooResolutionModel (const RooResolutionModel &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooResolutionModel () override;  Destructor. ;  ; const RooFormulaVar & basis () const;  ; const RooRealVar & basisConvVar () const;  Return the convolution variable of the selection basis function. ;  ; virtual void changeBasis (RooFormulaVar *basis);  Change the basis function we convolute with. ;  ; virtual RooResolutionModel * convolution (RooFormulaVar *basis, RooAbsArg *owner) const;  Instantiate a clone of this resolution model representing a convolution with given basis function. ;  ; RooAbsRealLValue & convVar () const;  Return the convolution variable of the resolution model. ;  ; double getNorm (const RooArgSet *nset=nullptr) const override;  Return the integral of this PDF over all elements of 'nset'. ;  ; double getValV ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGaussModel.html:2538,inherit,inherited,2538,doc/master/classRooGaussModel.html,https://root.cern,https://root.cern/doc/master/classRooGaussModel.html,2,"['inherit', 'variab']","['inherited', 'variable']"
Modifiability," doEval(). void RooAddModel::doEval ; (; RooFit::EvalContext & ; ctx); const. overridevirtual . Base function for computing multiple values of a RooAbsReal. ; Parameters. ctxAn evaluation context object . Reimplemented from RooAbsReal.; Definition at line 378 of file RooAddModel.cxx. ◆ evaluate(). double RooAddModel::evaluate ; (; ); const. overridevirtual . Calculate the current value. ; Implements RooAbsReal.; Definition at line 347 of file RooAddModel.cxx. ◆ expectedEvents(). double RooAddModel::expectedEvents ; (; const RooArgSet * ; nset); const. overridevirtual . Return expected number of events for extended likelihood calculation, which is the sum of all coefficients. ; Return the number of expected events, which is either the sum of all coefficients or the sum of the components extended terms. ; Reimplemented from RooAbsPdf.; Definition at line 569 of file RooAddModel.cxx. ◆ extendMode(). ExtendMode RooAddModel::extendMode ; (; ); const. inlineoverridevirtual . Return extended mode capabilities. ; Reimplemented from RooAbsPdf.; Definition at line 57 of file RooAddModel.h. ◆ fixCoefNormalization(). void RooAddModel::fixCoefNormalization ; (; const RooArgSet & ; refCoefNorm). By default the interpretation of the fraction coefficients is performed in the contextual choice of observables. ; This makes the shape of the p.d.f explicitly dependent on the choice of observables. This method instructs RooAddModel to freeze the interpretation of the coefficients to be done in the given set of observables. If frozen, fractions are automatically transformed from the reference normalization set to the contextual normalization set by ratios of integrals ; Definition at line 185 of file RooAddModel.cxx. ◆ fixCoefRange(). void RooAddModel::fixCoefRange ; (; const char * ; rangeName). By default the interpretation of the fraction coefficients is performed in the default range. ; This make the shape of a RooAddModel explicitly dependent on the range of the observables. To allow",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddModel.html:83682,extend,extended,83682,doc/master/classRooAddModel.html,https://root.cern,https://root.cern/doc/master/classRooAddModel.html,1,['extend'],['extended']
Modifiability," evalCerfInt (double sign, double tau, double umin, double umax, double c) const;  ; std::complex< double > evalCerfInt (double sign, double wt, double tau, double umin, double umax, double c) const;  . Static Private Member Functions; static std::complex< double > evalCerfApprox (double swt, double u, double c);  . Private Attributes; bool _asympInt = false;  ; bool _flatSFInt = false;  ; bool _flip;  ; RooRealProxy _mean;  ; RooRealProxy _meanSF;  ; bool _nlo;  ; RooRealProxy rlife;  ; RooRealProxy rsf;  ; RooRealProxy sigma;  ; RooRealProxy ssf;  . Additional Inherited Members;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooResolutionModel; RooFormulaVar * _basis = nullptr;  Basis function convolved with this resolution model. ;  ; Int_t _basisCode;  Identifier code for selected basis function. ;  ; bool _ownBasis;  Flag indicating ownership of _basis. ;  ; RooTemplateProxy< RooAbsRealLValue > x;  Dependent/convolution variable. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGExpModel.html:73654,inherit,inherited,73654,doc/master/classRooGExpModel.html,https://root.cern,https://root.cern/doc/master/classRooGExpModel.html,2,['inherit'],['inherited']
Modifiability," fATreeEvent;  event variables ;  ; Int_t fATreeType = 0;  type of event (=classIndex) ;  ; Float_t fATreeWeight = 0.0;  weight of the event ;  ; DataAssignType fDataAssignType;  flags for data assigning ;  ; DataInputHandler * fDataInputHandler;  -> ;  ; DataSetManager * fDataSetManager;  ; std::vector< TMVA::VariableTransformBase * > fDefaultTrfs;  list of transformations on default DataSet ;  ; TString fOptions;  option string given by construction (presently only ""V"") ;  ; std::vector< TTree * > fTestAssignTree;  for each class: tmp tree if user wants to assign the events directly ;  ; std::vector< TTree * > fTrainAssignTree;  for each class: tmp tree if user wants to assign the events directly ;  ; TString fTransformations;  List of transformations to test. ;  ; Bool_t fVerbose;  verbose mode ;  . Friends; void DataLoaderCopy (TMVA::DataLoader *des, TMVA::DataLoader *src);  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataLoader.html:19728,inherit,inherited,19728,doc/master/classTMVA_1_1DataLoader.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataLoader.html,1,['inherit'],['inherited']
Modifiability," fAlreadyFound;  ; Double_t * fConst;  ; TString * fExpr;  ; TString * fExprOptimized;  Number of operators after optimization. ;  ; TObjArray fFunctions;  ; TObjArray fLinearParts;  ; TString * fNames;  ; Int_t fNconst;  ; Int_t fNdim;  ; Int_t fNoper;  ; Int_t fNOperOptimized;  cache for information ;  ; Int_t fNpar;  ; Int_t fNstring;  ; Int_t fNumber;  ; Int_t fNval;  ; TOperOffset * fOperOffset;  [fNOperOptimized] List of operators. (See documentation for changes made at version 7) ;  ; Int_t * fOperOptimized;  [fNOperOptimized] List of expressions ;  ; TFuncG fOptimal;  [fNPar] predefined function ;  ; Double_t * fParams;  ; TFormulaPrimitive ** fPredefined;  [fNOperOptimized] Offsets of operrands ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . #include <v5/TF1Data.h>. Inheritance diagram for ROOT::v5::TF1Data:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TF1Data(). ROOT::v5::TF1Data::TF1Data ; (; ). F1 default constructor. ; Definition at line 26 of file TF1Data_v5.cxx. ◆ ~TF1Data(). ROOT::v5::TF1Data::~TF1Data ; (; ). override . TF1 default destructor. ; Definition at line 48 of file TF1Data_v5.cxx. Member Function Documentation. ◆ Class(). static TClass * ROOT::v5::TF1Data::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::v5::TF1Data::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1v5_1_1TF1Data.html:26491,inherit,inherited,26491,doc/master/structROOT_1_1v5_1_1TF1Data.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1v5_1_1TF1Data.html,1,['inherit'],['inherited']
Modifiability," fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttBBox; Float_t * fBBox;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TEveProjected; Float_t fDepth;  ; TEveProjectionManager * fManager;  ; TEveProjectable * fProjectable;  . Private Member Functions;  TEveCalo2D (const TEveCalo2D &)=delete;  ; void CellSelectionChangedInternal (TEveCaloData::vCellId_t &cells, std::vector< TEveCaloData::vCellId_t * > &cellLists);  Sort selected cells in eta or phi bins. ;  ; TEveCalo2D & operator= (const TEveCalo2D &)=delete;  . Private Attributes; TEveProjection::EPType_e fOldProjectionType;  . Friends; class TEveCalo2DGL;  . Additional Inherited Members;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCalo2D.html:39220,inherit,inherited,39220,doc/master/classTEveCalo2D.html,https://root.cern,https://root.cern/doc/master/classTEveCalo2D.html,4,['inherit'],['inherited']
Modifiability," fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TAttBBox; Float_t * fBBox;  ;  Protected Attributes inherited from TEveProjected; Float_t fDepth;  ; TEveProjectionManager * fManager;  ; TEveProjectable * fProjectable;  . #include <TEveJetCone.h>. Inheritance diagram for TEveJetConeProjected:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveJetConeProjected() [1/2]. TEveJetConeProjected::TEveJetConeProjected ; (; const TEveJetConeProjected & ; ). private . ◆ TEveJetConeProjected() [2/2]. TEveJetConeProjected::TEveJetConeProjected ; (; const char * ; n = ""TEveJetConeProjected"", . const char * ; t = """" . ). Constructor. ; Definition at line 195 of file TEveJetCone.cxx. ◆ ~TEveJetConeProjected(). TEveJetConeProjected::~TEveJetConeProjected ; (; ). override . Destructor. ; Definition at line 203 of file TEveJetCone.cxx. Member Function Documentation. ◆ Class(). static TClass * TEveJetConeProjected::Class ; (; ). static . Return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveJetConeProjected.html:38217,inherit,inherited,38217,doc/master/classTEveJetConeProjected.html,https://root.cern,https://root.cern/doc/master/classTEveJetConeProjected.html,4,['inherit'],['inherited']
Modifiability," fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TAttBBox; Float_t * fBBox;  ;  Protected Attributes inherited from TEveProjected; Float_t fDepth;  ; TEveProjectionManager * fManager;  ; TEveProjectable * fProjectable;  . Private Member Functions;  TEveGeoShapeProjected (const TEveGeoShapeProjected &);  ; TEveGeoShapeProjected & operator= (const TEveGeoShapeProjected &);  . Additional Inherited Members;  Public Types inherited from TEveShape; typedef std::vector< TEveVector2 >::iterator vVector2_i;  ; typedef std::vector< TEveVector2 > vVector2_t;  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGeoShapeProjected.html:35513,inherit,inherited,35513,doc/master/classTEveGeoShapeProjected.html,https://root.cern,https://root.cern/doc/master/classTEveGeoShapeProjected.html,4,['inherit'],['inherited']
Modifiability," fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TAttBBox; Float_t * fBBox;  ;  Protected Attributes inherited from TEveProjected; Float_t fDepth;  ; TEveProjectionManager * fManager;  ; TEveProjectable * fProjectable;  . Private Member Functions;  TEvePolygonSetProjected (const TEvePolygonSetProjected &)=delete;  ; Float_t AddPolygon (std::list< Int_t, std::allocator< Int_t > > &pp, std::list< Polygon_t, std::allocator< Polygon_t > > &p);  Check if polygon has dimensions above TEveProjection::fgEps and add it to a list if it is not a duplicate. ;  ; Bool_t IsFirstIdxHead (Int_t s0, Int_t s1);  Compare the two segments and check if the first index of first segment is starting. ;  ; Float_t MakePolygonsFromBP (Int_t *idxMap);  Build polygons from list of buffer polygons. ;  ; Float_t MakePolygonsFromBS (Int_t *idxMap);  Build polygons from the set of buffer segments. ;  ; TEvePolygonSetProjected & operator= (const TEvePolygonSetProjected &)=delete;  ; Int_t * ProjectAndReducePoints ();  Project and reduce buffer poin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEvePolygonSetProjected.html:36949,inherit,inherited,36949,doc/master/classTEvePolygonSetProjected.html,https://root.cern,https://root.cern/doc/master/classTEvePolygonSetProjected.html,4,['inherit'],['inherited']
Modifiability," fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestroyOnZeroRefCnt;  Deny-destroy count. ;  ; Char_t fDestructing;  ; Bool_t fHighlighted;  ; Short_t fImpliedHighlighted;  ; Short_t fImpliedSelected;  ; sLTI_t fItems;  ; Color_t * fMainColorPtr;  ; TEveTrans * fMainTrans;  ; Char_t fMainTransparency;  ; Int_t fNumChildren;  ; Int_t fParentIgnoreCnt;  ; List_t fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TAttBBox; Float_t * fBBox;  ;  Protected Attributes inherited from TEveProjected; Float_t fDepth;  ; TEveProjectionManager * fManager;  ; TEveProjectable * fProjectable;  . Static Protected Attributes; static Bool_t fgDebugCornerPoints = kFALSE;  . Private Member Functions;  TEveBoxProjected (const TEveBoxProjected &);  ; TEveBoxProjected & operator= (const TEveBoxProjected &);  . Friends; class TEveBoxProjectedGL;  . Additional Inherited Members;  Public Types inherited from TEveShape; typedef std::vector< TEveVector2 >::iterator vVector2_i;  ; typedef std::vector< TEveVector2 > vVector2_t;  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveBoxProjected.html:35748,inherit,inherited,35748,doc/master/classTEveBoxProjected.html,https://root.cern,https://root.cern/doc/master/classTEveBoxProjected.html,4,['inherit'],['inherited']
Modifiability," fFormat;  format used to show position not in percent ;  ; Float_t fMax;  logical maximum value (default 100) ;  ; Float_t fMin;  logical minimum value (default 0) ;  ; GContext_t fNormGC;  text drawing graphics context ;  ; Bool_t fPercent;  show position in percent (default true) ;  ; Float_t fPos;  logical position [fMin,fMax] ;  ; Int_t fPosPix;  position of progress bar in pixel coordinates ;  ; Bool_t fShowPos;  show position value (default false) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Static Protected Attributes; static const TGFont * fgDefaultFont = nullptr;  ; static TGGC * fgDefaultGC = nullptr;  ;  Static Protected Attributes inherited from TGFrame; static const TGGC * fgBckgndGC = nullptr;  ; static const TGGC * fgBlackGC = nullptr;  ; static P",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGProgressBar.html:27210,inherit,inherited,27210,doc/master/classTGProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGProgressBar.html,1,['inherit'],['inherited']
Modifiability," fFormat;  format used to show position not in percent ;  ; Float_t fMax;  logical maximum value (default 100) ;  ; Float_t fMin;  logical minimum value (default 0) ;  ; GContext_t fNormGC;  text drawing graphics context ;  ; Bool_t fPercent;  show position in percent (default true) ;  ; Float_t fPos;  logical position [fMin,fMax] ;  ; Int_t fPosPix;  position of progress bar in pixel coordinates ;  ; Bool_t fShowPos;  show position value (default false) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TGProgressBar; static const TGFont * fgDefaultFont = nullptr;  ; static TGGC * fgDefaultGC = nullptr;  ;  Static Protected Attributes inherited from TGFrame; static const TGGC * fgBckgndGC = nullptr;  ; static const TGGC * fg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHProgressBar.html:29489,inherit,inherited,29489,doc/master/classTGHProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGHProgressBar.html,2,['inherit'],['inherited']
Modifiability," fFrameFillColor;  Pad frame fill color. ;  ; Style_t fFrameFillStyle;  Pad frame fill style. ;  ; Color_t fFrameLineColor;  Pad frame line color. ;  ; Style_t fFrameLineStyle;  Pad frame line style. ;  ; Width_t fFrameLineWidth;  Pad frame line width. ;  ; Float_t fLeftMargin;  LeftMargin. ;  ; Float_t fRightMargin;  RightMargin. ;  ; Float_t fTopMargin;  TopMargin. ;  ; Float_t fXfile;  X position where to draw the file name. ;  ; Float_t fXstat;  X position where to draw the statistics. ;  ; Float_t fYfile;  Y position where to draw the file name. ;  ; Float_t fYstat;  Y position where to draw the statistics. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Static Protected Attributes; static Bool_t fgIsFolder = kFALSE;  Indicates if canvas can be browsed as a folder. ;  ;  Static Protected Attributes inherited from TPad; static Int_t fgMaxPickDistance = 5;  Maximum Pick Distance. ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Private Member Functions;  TCanvas (const TCanvas &canvas)=delete;  ; void Build ();  Build a canvas. Called by all constructors. ;  ; void CopyPixmaps () override;  Copy the canvas pixmap of the pad to the canvas. ;  ; void CreatePainter ();  Probably, TPadPainter must be placed in a separate ROOT module - ""padpainter"" (the same as ""histpainter""). ;  ; void DrawEventStatus (Int_t event, Int_t x, Int_t y, TObject *selected);  Report name and title of primitive below the cursor. ;  ; TCanvas & operator= (const TCanvas &rhs)=delete;  ; void RunAutoExec ();  Execute the list of TExecs in the current pad. ;  . Friends; class TCanvasImp;  ; class TInterpreter;  ; class TThread;  ; class TWebCanvas;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepSt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCanvas.html:60590,inherit,inherited,60590,doc/v632/classTCanvas.html,https://root.cern,https://root.cern/doc/v632/classTCanvas.html,2,['inherit'],['inherited']
Modifiability," fGet;  get variables/targets/spectators ;  ; MsgLogger * fLogger;  ! message logger ;  ; VectorOfCharAndInt fPut;  put variables/targets/spectators ;  ; TMVAVersion_t fTMVAVersion;  ; Event * fTransformedEvent;  holds the current transformed event ;  . Private Member Functions; void UpdateNorm (Int_t ivar, Double_t x);  TODO --> adapt to variable,target,spectator selection update min and max of a given variable (target) and a given transformation method. ;  . Private Attributes; Bool_t fCreated;  has been created ;  ; Bool_t fEnabled;  has been enabled ;  ; Bool_t fNormalise;  normalise input variables ;  ; UInt_t fNSpectators;  number of spectators to be transformed ;  ; UInt_t fNTargets;  number of targets to be transformed ;  ; UInt_t fNVariables;  number of variables to be transformed ;  ; UInt_t fNVars;  number of variables ;  ; Bool_t fSortGet;  if true, sort the variables into the order as defined by the user at the var definition if false, sort the variables according to the order given for the var transformation ;  ; std::vector< TMVA::VariableInfo > fSpectators;  event spectators [saved to weight file --> TODO ] ;  ; std::vector< TMVA::VariableInfo > fTargets;  event targets [saved to weight file --> TODO ] ;  ; TString fTransformName;  name of transformation ;  ; Bool_t fUseSignalTransform;  true if transformation bases on signal data ;  ; std::vector< TMVA::VariableInfo > fVariables;  event variables [saved to weight file] ;  ; Types::EVariableTransform fVariableTransform;  Decorrelation, PCA, etc. ;  ; Bool_t fVariableTypesAreCounted;  true if variable types have been counted already ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMVA/VariableTransformBase.h>. Inheritance diagram for TMVA::VariableTransformBase:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ ItVarTypeIdx. typedef VectorO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableTransformBase.html:14071,variab,variables,14071,doc/master/classTMVA_1_1VariableTransformBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableTransformBase.html,6,['variab'],['variables']
Modifiability," fGridLength;  Length of the grid in NDC. ;  ; Int_t fLabelColor;  Color for labels. ;  ; Int_t fLabelFont;  Font for labels. ;  ; Float_t fLabelOffset;  Offset of label wrt axis. ;  ; Float_t fLabelSize;  Size of labels in NDC. ;  ; TList * fModLabs;  List of modified labels. ;  ; TString fName;  Axis name. ;  ; Int_t fNdiv;  Number of divisions. ;  ; Int_t fNModLabs;  Number of modified labels. ;  ; Float_t fTickSize;  Size of primary tick mark in NDC. ;  ; TString fTimeFormat;  Time format, ex: 09/12/99 12:34:00. ;  ; TString fTitle;  Axis title. ;  ; Float_t fTitleOffset;  Offset of title wrt axis. ;  ; Float_t fTitleSize;  Size of title in NDC. ;  ; Double_t fWmax;  Highest value on the axis. ;  ; Double_t fWmin;  Lowest value on the axis. ;  ;  Protected Attributes inherited from TLine; Double_t fX1 {0};  X of 1st point. ;  ; Double_t fX2 {0};  X of 2nd point. ;  ; Double_t fY1 {0};  Y of 1st point. ;  ; Double_t fY2 {0};  Y of 2nd point. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  . Additional Inherited Members;  Public Types inherited from TLine; enum  { kLineNDC = (1ULL << ( 14 )); , kVertical = (1ULL << ( 15 )); , kHorizontal = (1ULL << ( 16 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsRef",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGaxis.html:57771,inherit,inherited,57771,doc/master/classTGaxis.html,https://root.cern,https://root.cern/doc/master/classTGaxis.html,1,['inherit'],['inherited']
Modifiability," fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TGScrollBarElement (const TGScrollBarElement &)=delete;  ; TGScrollBarElement & operator= (const TGScrollBarElement &)=delete;  . Additional Inherited Members;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TGFrame; enum  { kDeleteWindowCalled = (1ULL << ( 15 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGFrame; void DoRedraw () override;  Redraw the frame. ;  ; virtual void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGScrollBarElement.html:24009,inherit,inherited,24009,doc/master/classTGScrollBarElement.html,https://root.cern,https://root.cern/doc/master/classTGScrollBarElement.html,1,['inherit'],['inherited']
Modifiability," fIds;  Packed IDs for the different error sources. ;  . TObjArray fDummyTA;  Dummy objects the class will use and delete. ;  ; TObjArray fDummyIds;  Array of dummy object (used for bookeeping) ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TLimitDataSource.h>. Inheritance diagram for TLimitDataSource:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TLimitDataSource() [1/3]. TLimitDataSource::TLimitDataSource ; (; ). Default constructor. ; Definition a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLimitDataSource.html:10538,inherit,inherited,10538,doc/master/classTLimitDataSource.html,https://root.cern,https://root.cern/doc/master/classTLimitDataSource.html,1,['inherit'],['inherited']
Modifiability," fIsyswr;  ; Int_t fItaur;  ; Int_t fKe1cr;  ; Int_t fKe2cr;  ; Bool_t fLimset;  ; Bool_t fLnewmn;  ; Bool_t fLnolim;  ; Bool_t fLphead;  ; Bool_t fLrepor;  ; Bool_t fLwarn;  ; Double_t * fMATUvline;  ; Int_t fMaxcpt;  ; Int_t fMaxext;  ; Int_t fMaxint;  ; Int_t fMaxIterations;  ; Int_t fMaxpar;  ; Int_t fMaxpar1;  ; Int_t fMaxpar2;  ; Int_t fMaxpar5;  ; TMethodCall * fMethodCall;  ; Double_t * fMIGRflnu;  ; Double_t * fMIGRgs;  ; Double_t * fMIGRstep;  ; Double_t * fMIGRvg;  ; Double_t * fMIGRxxs;  ; Double_t * fMNOTgcc;  ; Double_t * fMNOTw;  ; Double_t * fMNOTxdev;  ; Int_t fNblock;  ; Int_t fNewpag;  ; Int_t * fNexofi;  ; Int_t fNfcn;  ; Int_t fNfcnfr;  ; Int_t fNfcnlc;  ; Int_t fNfcnmx;  ; Int_t fNfcwar [20];  ; Int_t * fNiofex;  ; Int_t fNpagln;  ; Int_t fNpagwd;  ; Int_t fNpar;  ; Int_t fNpfix;  ; Int_t fNstkrd;  ; Int_t fNstkwr;  ; Int_t fNu;  ; Int_t * fNvarl;  ; Int_t fNwrmes [2];  ; TObject * fObjectFit;  ; TString fOrigin [kMAXWARN];  ; Double_t * fP;  ; Double_t * fPARSplist;  ; Double_t * fPbar;  ; TObject * fPlot;  ; Double_t * fPrho;  ; Double_t * fPSDFs;  ; Double_t * fPstar;  ; Double_t * fPstst;  ; Double_t * fSEEKxbest;  ; Double_t * fSEEKxmid;  ; Double_t * fSIMPy;  ; Int_t fStatus;  ; Double_t * fU;  ; Double_t fUndefi;  ; Double_t fUp;  ; Double_t fUpdflt;  ; Double_t * fVERTpp;  ; Double_t * fVERTq;  ; Double_t * fVERTs;  ; Double_t * fVhmat;  ; Double_t fVlimhi;  ; Double_t fVlimlo;  ; Double_t * fVthmat;  ; TString fWarmes [kMAXWARN];  ; Double_t * fWerr;  ; Double_t * fWord7;  ; Double_t * fX;  ; Double_t fXdircr;  ; Double_t fXmidcr;  ; Double_t * fXpt;  ; Double_t * fXs;  ; Double_t * fXt;  ; Double_t * fXts;  ; Double_t fYdircr;  ; Double_t fYmidcr;  ; Double_t * fYpt;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MinuitWrapper.html:23699,inherit,inherited,23699,doc/master/classTMVA_1_1MinuitWrapper.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MinuitWrapper.html,2,['inherit'],['inherited']
Modifiability," fKeylen;  Number of bytes for the key itself. ;  ; Int_t fLeft;  Number of bytes left in current segment. ;  ; TDirectory * fMotherDir;  !pointer to mother directory ;  ; Int_t fNbytes;  Number of bytes for the object on file. ;  ; Int_t fObjlen;  Length of uncompressed object in bytes. ;  ; UShort_t fPidOffset;  !Offset to be added to the pid index in this key/buffer. This is actually saved in the high bits of fSeekPdir ;  ; Long64_t fSeekKey;  Location of object on file. ;  ; Long64_t fSeekPdir;  Location of parent directory on file. ;  ; Int_t fVersion;  Key version identifier. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions;  TBasketSQL (const TBasketSQL &);  ; TBasketSQL & operator= (const TBasketSQL &);  . Additional Inherited Members;  Public Types inherited from TBasket; enum class  EIOBits : Char_t { kGenerateOffsetMap = (1ULL << ( 0 )); , kSupported = kGenerateOffsetMap; };  ; enum class  EUnsupportedIOBits : Char_t { kUnsupported = 0; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Attributes inherited from TBasket; static constexpr int kIOBitCount = 1;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TBasket; virtual void ReadResetBuffer (Int_t basketnumber);  Reset the read basket TBuffer memory allocation i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBasketSQL.html:19158,inherit,inherited,19158,doc/master/classTBasketSQL.html,https://root.cern,https://root.cern/doc/master/classTBasketSQL.html,2,['inherit'],['inherited']
Modifiability," fKeys {nullptr};  Pointer to keys list in memory. ;  ; Bool_t fModified {kFALSE};  True if directory has been modified. ;  ; Int_t fNbytesKeys {0};  Number of bytes for the keys. ;  ; Int_t fNbytesName {0};  Number of bytes in TNamed at creation time. ;  ; Long64_t fSeekDir {0};  Location of directory on file. ;  ; Long64_t fSeekKeys {0};  Location of Keys record on file. ;  ; Long64_t fSeekParent {0};  Location of parent directory on file. ;  ; Bool_t fWritable {kFALSE};  True if directory is writable. ;  ;  Protected Attributes inherited from TDirectory; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TFile; enum  { kStartBigFile = 2000000000; };  ; enum  EAsyncOpenStatus { kAOSNotAsync = -1; , kAOSFailure = 0; , kAOSInProgress = 1; , kAOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur = 1; , kEnd = 2; };  ; enum  EStatusBits { ;   k630forwardCompatibility = (1ULL << ( 2 )); , kRecovered = (1ULL << ( 10 )); , kHasReferences = (1ULL << ( 11 )); , kDevNull = (1ULL << ( 12 )); , ;   kWriteError = (1ULL << ( 14 )); , kBinaryFile = (1ULL << ( 15 )); , kRedirected = (1ULL << ( 16 )",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetFile.html:39043,inherit,inherited,39043,doc/master/classTNetFile.html,https://root.cern,https://root.cern/doc/master/classTNetFile.html,1,['inherit'],['inherited']
Modifiability," fKeys {nullptr};  Pointer to keys list in memory. ;  ; Bool_t fModified {kFALSE};  True if directory has been modified. ;  ; Int_t fNbytesKeys {0};  Number of bytes for the keys. ;  ; Int_t fNbytesName {0};  Number of bytes in TNamed at creation time. ;  ; Long64_t fSeekDir {0};  Location of directory on file. ;  ; Long64_t fSeekKeys {0};  Location of Keys record on file. ;  ; Long64_t fSeekParent {0};  Location of parent directory on file. ;  ; Bool_t fWritable {kFALSE};  True if directory is writable. ;  ;  Protected Attributes inherited from TDirectory; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Friends; class RooWorkspace;  . Additional Inherited Members;  Public Types inherited from TDirectoryFile; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TDirectory; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWorkspace_1_1WSDir.html:22120,inherit,inherited,22120,doc/master/classRooWorkspace_1_1WSDir.html,https://root.cern,https://root.cern/doc/master/classRooWorkspace_1_1WSDir.html,1,['inherit'],['inherited']
Modifiability," fKeys {nullptr};  Pointer to keys list in memory. ;  ; Bool_t fModified {kFALSE};  True if directory has been modified. ;  ; Int_t fNbytesKeys {0};  Number of bytes for the keys. ;  ; Int_t fNbytesName {0};  Number of bytes in TNamed at creation time. ;  ; Long64_t fSeekDir {0};  Location of directory on file. ;  ; Long64_t fSeekKeys {0};  Location of Keys record on file. ;  ; Long64_t fSeekParent {0};  Location of parent directory on file. ;  ; Bool_t fWritable {kFALSE};  True if directory is writable. ;  ;  Protected Attributes inherited from TDirectory; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions;  TDirectoryFile (const TDirectoryFile &directory)=delete;  ; void operator= (const TDirectoryFile &)=delete;  . Additional Inherited Members;  Protected Types inherited from TDirectory; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TDirectory; static Bool_t Cd1 (const char *path);  Change current directory to ""path"". ;  ; static SharedGDirectory_t & GetSharedLocalCurrentDirectory ();  Return the (address of) a shared pointer to the struct holding the actual thread local gDirectory pointer and the atomic_flag for its lock. ;  ;  Static Protected Attributes inherited from TDirectory; static Bool_t fgAddDirectory = kTRUE;  MSVC doesn't support = ATOMIC_FLAG_INIT;. ;  . #include",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDirectoryFile.html:23478,inherit,inherited,23478,doc/master/classTDirectoryFile.html,https://root.cern,https://root.cern/doc/master/classTDirectoryFile.html,1,['inherit'],['inherited']
Modifiability," fKeys {nullptr};  Pointer to keys list in memory. ;  ; Bool_t fModified {kFALSE};  True if directory has been modified. ;  ; Int_t fNbytesKeys {0};  Number of bytes for the keys. ;  ; Int_t fNbytesName {0};  Number of bytes in TNamed at creation time. ;  ; Long64_t fSeekDir {0};  Location of directory on file. ;  ; Long64_t fSeekKeys {0};  Location of Keys record on file. ;  ; Long64_t fSeekParent {0};  Location of parent directory on file. ;  ; Bool_t fWritable {kFALSE};  True if directory is writable. ;  ;  Protected Attributes inherited from TDirectory; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions;  TS3WebFile ();  ; Bool_t GetCredentialsFromEnv (const char *accessKeyEnv, const char *secretKeyEnv, const char *tokenEnv, TString &outAccessKey, TString &outSecretKey, TString &outToken);  Sets the access and secret keys from the environmental variables, if they are both set. ;  ; Bool_t ParseOptions (Option_t *options, TString &accessKey, TString &secretKey, TString &token);  Extracts the S3 authentication key pair (access key and secret key) from the options. ;  . Additional Inherited Members;  Public Types inherited from TFile; enum  { kStartBigFile = 2000000000; };  ; enum  EAsyncOpenStatus { kAOSNotAsync = -1; , kAOSFailure = 0; , kAOSInProgress = 1; , kAOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTS3WebFile.html:42543,inherit,inherited,42543,doc/master/classTS3WebFile.html,https://root.cern,https://root.cern/doc/master/classTS3WebFile.html,1,['inherit'],['inherited']
Modifiability," fKeys {nullptr};  Pointer to keys list in memory. ;  ; Bool_t fModified {kFALSE};  True if directory has been modified. ;  ; Int_t fNbytesKeys {0};  Number of bytes for the keys. ;  ; Int_t fNbytesName {0};  Number of bytes in TNamed at creation time. ;  ; Long64_t fSeekDir {0};  Location of directory on file. ;  ; Long64_t fSeekKeys {0};  Location of Keys record on file. ;  ; Long64_t fSeekParent {0};  Location of parent directory on file. ;  ; Bool_t fWritable {kFALSE};  True if directory is writable. ;  ;  Protected Attributes inherited from TDirectory; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions;  TSQLFile (const TSQLFile &)=delete;  ; void operator= (const TSQLFile &)=delete;  . Friends; class TBufferSQL2;  ; class TKeySQL;  ; class TSqlCmdsBuffer;  ; class TSqlRawBuffer;  ; class TSqlRegistry;  ; class TSQLStructure;  ; class TSQLTableData;  . Additional Inherited Members;  Static Protected Member Functions inherited from TDirectory; static Bool_t Cd1 (const char *path);  Change current directory to ""path"". ;  ; static SharedGDirectory_t & GetSharedLocalCurrentDirectory ();  Return the (address of) a shared pointer to the struct holding the actual thread local gDirectory pointer and the atomic_flag for its lock. ;  ;  Static Protected Attributes inherited from TFile; static TList * fgAsyncOpenRequests = nullptr;  ; static std::atomic< Long64_t > fgBytesRead {0};  Number of bytes read by all TFile objects. ;  ; static std::atomic< Long64_t > fgBytesWrite {0};  Number of bytes written by all TFile obj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLFile.html:57386,inherit,inherited,57386,doc/master/classTSQLFile.html,https://root.cern,https://root.cern/doc/master/classTSQLFile.html,1,['inherit'],['inherited']
Modifiability," fKeys {nullptr};  Pointer to keys list in memory. ;  ; Bool_t fModified {kFALSE};  True if directory has been modified. ;  ; Int_t fNbytesKeys {0};  Number of bytes for the keys. ;  ; Int_t fNbytesName {0};  Number of bytes in TNamed at creation time. ;  ; Long64_t fSeekDir {0};  Location of directory on file. ;  ; Long64_t fSeekKeys {0};  Location of Keys record on file. ;  ; Long64_t fSeekParent {0};  Location of parent directory on file. ;  ; Bool_t fWritable {kFALSE};  True if directory is writable. ;  ;  Protected Attributes inherited from TDirectory; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static Long64_t fgMaxFullCacheSize = 500000000;  ; static TUrl fgProxy;  size of the cached content ;  ;  Static Protected Attributes inherited from TFile; static TList * fgAsyncOpenRequests = nullptr;  ; static std::atomic< Long64_t > fgBytesRead {0};  Number of bytes read by all TFile objects. ;  ; static std::atomic< Long64_t > fgBytesWrite {0};  Number of bytes written by all TFile objects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRUE;  Indicates, we trust in the files in the cache dir without stat on the cached file. ;  ; static Bool_t fgCacheFileForce = kFALSE;  Indicates, to force all READ to CACHEREAD. ;  ; static std::atomic< Long64_t > fgFileCounter {0};  Counter for all opened files. ;  ; static Bool_t fgOnlyStaged = kFALSE;  Before the file is opened, it is checked, that the file is staged, if not, the open fails",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebFile.html:39190,inherit,inherited,39190,doc/master/classTWebFile.html,https://root.cern,https://root.cern/doc/master/classTWebFile.html,1,['inherit'],['inherited']
Modifiability," fKeys {nullptr};  Pointer to keys list in memory. ;  ; Bool_t fModified {kFALSE};  True if directory has been modified. ;  ; Int_t fNbytesKeys {0};  Number of bytes for the keys. ;  ; Int_t fNbytesName {0};  Number of bytes in TNamed at creation time. ;  ; Long64_t fSeekDir {0};  Location of directory on file. ;  ; Long64_t fSeekKeys {0};  Location of Keys record on file. ;  ; Long64_t fSeekParent {0};  Location of parent directory on file. ;  ; Bool_t fWritable {kFALSE};  True if directory is writable. ;  ;  Protected Attributes inherited from TDirectory; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static TList * fgAsyncOpenRequests = nullptr;  ; static std::atomic< Long64_t > fgBytesRead {0};  Number of bytes read by all TFile objects. ;  ; static std::atomic< Long64_t > fgBytesWrite {0};  Number of bytes written by all TFile objects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRUE;  Indicates, we trust in the files in the cache dir without stat on the cached file. ;  ; static Bool_t fgCacheFileForce = kFALSE;  Indicates, to force all READ to CACHEREAD. ;  ; static std::atomic< Long64_t > fgFileCounter {0};  Counter for all opened files. ;  ; static Bool_t fgOnlyStaged = kFALSE;  Before the file is opened, it is checked, that the file is staged, if not, the open fails. ;  ; static UInt_t fgOpenTimeout = TFile::kEternalTimeout;  Timeout for open operations in ms - 0 corresponds to blocking i/o. ;  ; static Int_t fgReadahe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:42958,inherit,inherited,42958,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,2,['inherit'],['inherited']
Modifiability," fKeys {nullptr};  Pointer to keys list in memory. ;  ; Bool_t fModified {kFALSE};  True if directory has been modified. ;  ; Int_t fNbytesKeys {0};  Number of bytes for the keys. ;  ; Int_t fNbytesName {0};  Number of bytes in TNamed at creation time. ;  ; Long64_t fSeekDir {0};  Location of directory on file. ;  ; Long64_t fSeekKeys {0};  Location of Keys record on file. ;  ; Long64_t fSeekParent {0};  Location of parent directory on file. ;  ; Bool_t fWritable {kFALSE};  True if directory is writable. ;  ;  Protected Attributes inherited from TDirectory; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static constexpr Long64_t fgDefaultBlockSize = 2 * 1024 * 1024;  ;  Static Protected Attributes inherited from TFile; static TList * fgAsyncOpenRequests = nullptr;  ; static std::atomic< Long64_t > fgBytesRead {0};  Number of bytes read by all TFile objects. ;  ; static std::atomic< Long64_t > fgBytesWrite {0};  Number of bytes written by all TFile objects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRUE;  Indicates, we trust in the files in the cache dir without stat on the cached file. ;  ; static Bool_t fgCacheFileForce = kFALSE;  Indicates, to force all READ to CACHEREAD. ;  ; static std::atomic< Long64_t > fgFileCounter {0};  Counter for all opened files. ;  ; static Bool_t fgOnlyStaged = kFALSE;  Before the file is opened, it is checked, that the file is staged, if not, the open fails. ;  ; static UInt_t fgOpenTimeout = T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTMemFile.html:41490,inherit,inherited,41490,doc/v632/classTMemFile.html,https://root.cern,https://root.cern/doc/v632/classTMemFile.html,2,['inherit'],['inherited']
Modifiability," fLeftMargin;  LeftMargin. ;  ; Float_t fRightMargin;  RightMargin. ;  ; Float_t fTopMargin;  TopMargin. ;  ; Float_t fXfile;  X position where to draw the file name. ;  ; Float_t fXstat;  X position where to draw the statistics. ;  ; Float_t fYfile;  Y position where to draw the file name. ;  ; Float_t fYstat;  Y position where to draw the statistics. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  . Additional Inherited Members;  Public Types inherited from TCanvas; enum  { ;   kShowEventStatus = (1ULL << ( 15 )); , kAutoExec = (1ULL << ( 16 )); , kMenuBar = (1ULL << ( 17 )); , kShowToolBar = (1ULL << ( 18 )); , ;   kShowEditor = (1ULL << ( 19 )); , kMoveOpaque = (1ULL << ( 20 )); , kResizeOpaque = (1ULL << ( 21 )); , kIsGrayscale = (1ULL << ( 22 )); , ;   kShowToolTips = (1ULL << ( 23 )). };  ;  Public Types inherited from TPad; enum  { ;   kFraming = (1ULL << ( 6 )); , kHori = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kPrintingPS = (1ULL << ( 11 )); , ;   kCannotMove = (1ULL << ( 12 )); , kClearAfterCR = (1ULL << ( 14 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1U",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInspectCanvas.html:59963,inherit,inherited,59963,doc/master/classTInspectCanvas.html,https://root.cern,https://root.cern/doc/master/classTInspectCanvas.html,1,['inherit'],['inherited']
Modifiability," fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Member Functions; TLegendEntry & operator= (const TLegendEntry &)=delete;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TLegendEntry.h>. Inheritance diagram for TLegendEntry:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TLegendEntry() [1/3]. TLegendEntry::TLegendEntry ; (; ). TLegendEntry do-nothing default constructor. ; Definition at line 30 of file TLegendEntry.cxx. ◆ TLegendEntry() [2/3]. TLegendEntry::TLegendEntry ; (; const TObject * ; obj, . const char * ; label = nullptr, . Option_t * ; option = ""lpf"" . ). TLegendEntry normal constructor for one entry in a TLegend. ; obj is the object this entry will represent. If obj has line/fill/marker attributes, then the TLegendEntry will display these attributes.; label is the text that will describe the entry, it is displayed using TLatex, so may have a complex format.; option may have val",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLegendEntry.html:18720,inherit,inherited,18720,doc/master/classTLegendEntry.html,https://root.cern,https://root.cern/doc/master/classTLegendEntry.html,2,['inherit'],['inherited']
Modifiability," fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Member Functions;  TChain (const TChain &);  ; TChain & operator= (const TChain &);  ; void ParseTreeFilename (const char *name, TString &filename, TString &treename, TString &query, TString &suffix) const;  Get the tree url or filename and other information from the name. ;  . Additional Inherited Members;  Protected Types inherited from TTree; enum  ELockStatusBits { ;   kFindBranch = (1ULL << ( 0 )); , kFindLeaf = (1ULL << ( 1 )); , kGetAlias = (1ULL << ( 2 )); , kGetBranch = (1ULL << ( 3 )); , ;   kGetEntry = (1ULL << ( 4 )); , kGetEntryWithIndex = (1ULL << ( 5 )); , kGetFriend = (1ULL << ( 6 )); , kGetFriendAlias = (1ULL << ( 7 )); , ;   kGetLeaf = (1ULL << ( 8 )); , kLoadTree = (1ULL << ( 9 )); , kPrint = (1ULL << ( 10 )); , kRemoveFriend = (1ULL << ( 11 )); , ;   kSetBranchStatus = (1ULL << ( 12 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inherited from TTree; static Int_t fgBranchStyle = 1;  Old/New branch style. ;  ; static Long64_t fgMaxTreeSize = 100000000000LL;  Maximum size of a file containing a Tree. ;  . #include <TChain.h>. Inheritance diagram for TChain:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EStatusBits. enum TChain::EStatusBits. EnumeratorkGlobalWeight ; kAutoDelete ; kProofUptodate ; kProofLite . Definition at line 60 of file TChain.h. ◆ Mode. enum TChain::Mode. EnumeratorkWithoutGlobalRegistration ; kWithGlobalRegistration . Definition at line 71 of file TChain.h. Constructor & Destructor Documentation. ◆ TChain() [1/3]. TChain::TChain ; (; const TChain & ; ). private . ◆ TChain() [2/3]. TChain::TChain ; (; Mode ; mode = kWithGlobalRegistration). Default constructor. ; Definition at line 72 of file TChain.cxx. ◆ TChain() [3/3]. TChain::TChain ; (; const char * ; name, . const char * ; titl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTChain.html:52479,inherit,inherited,52479,doc/v632/classTChain.html,https://root.cern,https://root.cern/doc/v632/classTChain.html,4,['inherit'],['inherited']
Modifiability," fMask;  picture mask pixmap ;  ; TString fName;  name of picture ;  ; Pixmap_t fPic;  picture pixmap ;  ; Bool_t fScaled;  kTRUE if picture is scaled ;  ;  Protected Attributes inherited from TRefCnt; UInt_t fRefs;  . Friends; class TGPicturePool;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TRefCnt; enum  EReferenceFlag { kStaticInit; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGPicture.h>. Inheritance diagram for TGPicture:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGPicture() [1/2]. TGPicture::TGPicture ; (; const char * ; name, . Bool_t ; scaled = kFALSE . ). inlineprotected . Definition at line 36 of file TGPicture.h. ◆ TGPicture() [2/2]. TGPicture::TGPicture ; (; const char * ; name, . Pixmap_t ; pxmap, . Pixmap_t ; mask = 0 . ). protected . ctor. Important: both pixmaps pxmap and mask must be unique (not shared) ; Definition at line 318 of file TGPicture.cxx. ◆ ~TGPicture(). TGPicture::~TGPicture ; (; ). override . Delete picture object. ; Definition at line 361 of file TGPicture.cxx. Member Function Documentation. ◆ Class(). static TClass * TGPicture::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGPicture::Cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGPicture.html:11202,inherit,inherited,11202,doc/master/classTGPicture.html,https://root.cern,https://root.cern/doc/master/classTGPicture.html,2,['inherit'],['inherited']
Modifiability," fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from RooPlotable; double _normValue = 0.0;  ; TString _yAxisLabel;  ; double _ymax = 0.0;  ; double _ymin = 0.0;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooEllipse.h>. Inheritance diagram for RooEllipse:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooEllipse() [1/2]. RooEllipse::RooEllipse ; (; ). default . ◆ RooEllipse() [2/2]. RooEllipse::RooEllipse ; (; const char * ; name, . double ; x1, . double ; x2, . double ; s1, . double ; s2, . double ; rho = 0, . Int_t ; points = 100 . ). Create a 2-dimensional ellipse centered at (x1,x2) that represents the confidence level contour for a measurement with errors (s1,s2) and correlation coefficient rho. ; The resulting curve is defined as the unique ellipse that passes through these points:; (x1+rho*s1,x2+s2) , (x1-rho*s1,x2-s2) , (x1+s1,x2+rho*s2) , (x1-s1,x2-rho*s2); and is described by the implicit equation:; x*x 2*rho*x*y y*y --— - ------— + --— = 1 - rho*rho s1*s1 s1*s2 s2*s2; The input parameters s1,s2 must be > 0 and also |rho| <= 1. Th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooEllipse.html:34407,inherit,inherited,34407,doc/master/classRooEllipse.html,https://root.cern,https://root.cern/doc/master/classRooEllipse.html,1,['inherit'],['inherited']
Modifiability," fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from RooPlotable; double _normValue = 0.0;  ; TString _yAxisLabel;  ; double _ymax = 0.0;  ; double _ymin = 0.0;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooHist.h>. Inheritance diagram for RooHist:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooHist() [1/6]. RooHist::RooHist ; (; ). inline . Definition at line 31 of file RooHist.h. ◆ RooHist() [2/6]. RooHist::RooHist ; (; double ; nominalBinWidth, . double ; nSigma = 1, . double ; xErrorFrac = 1.0, . double ; scaleFactor = 1.0 . ). Create an empty histogram that can be filled with the addBin() and addAsymmetryBin() methods. ; Use the optional parameter to specify the confidence level in units of sigma to use for calculating error bars. The nominal bin width specifies the default used by addBin(), and is used to set the relative normalization of bins with different widths. ; Definition at line 52 of file RooHist.cxx. ◆ RooHist() [3/6]. RooHist::RooHist ; (; const TH1 & ; data, . double ; nominalBinWidth = 0, . double ; nSigma = 1, . RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHist.html:43175,inherit,inherited,43175,doc/master/classRooHist.html,https://root.cern,https://root.cern/doc/master/classRooHist.html,1,['inherit'],['inherited']
Modifiability," fNTargets;  number of targets to be transformed ;  ; UInt_t fNVariables;  number of variables to be transformed ;  ; UInt_t fNVars;  number of variables ;  ; Bool_t fSortGet;  if true, sort the variables into the order as defined by the user at the var definition if false, sort the variables according to the order given for the var transformation ;  ; std::vector< TMVA::VariableInfo > fSpectators;  event spectators [saved to weight file --> TODO ] ;  ; std::vector< TMVA::VariableInfo > fTargets;  event targets [saved to weight file --> TODO ] ;  ; TString fTransformName;  name of transformation ;  ; Bool_t fUseSignalTransform;  true if transformation bases on signal data ;  ; std::vector< TMVA::VariableInfo > fVariables;  event variables [saved to weight file] ;  ; Types::EVariableTransform fVariableTransform;  Decorrelation, PCA, etc. ;  ; Bool_t fVariableTypesAreCounted;  true if variable types have been counted already ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMVA/VariableTransformBase.h>. Inheritance diagram for TMVA::VariableTransformBase:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ ItVarTypeIdx. typedef VectorOfCharAndInt::iterator TMVA::VariableTransformBase::ItVarTypeIdx. Definition at line 59 of file VariableTransformBase.h. ◆ ItVarTypeIdxConst. typedef VectorOfCharAndInt::const_iterator TMVA::VariableTransformBase::ItVarTypeIdxConst. Definition at line 60 of file VariableTransformBase.h. ◆ VectorOfCharAndInt. typedef std::vector<std::pair<Char_t,UInt_t> > TMVA::VariableTransformBase::VectorOfCharAndInt. Definition at line 58 of file VariableTransformBase.h. Constructor & Destructor Documentation. ◆ VariableTransformBase(). TMVA::VariableTransformBase::VariableTransformBase ; (; DataSetInfo & ; dsi, . Types::EVariableTransform ; tf, . const TString & ; trfName . ). standard construc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableTransformBase.html:15147,inherit,inherited,15147,doc/master/classTMVA_1_1VariableTransformBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableTransformBase.html,1,['inherit'],['inherited']
Modifiability," fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Types; enum  EKernelEstimator { ;   kBox = 0; , kSphere; , kTeepee; , kGauss; , ;   kSinc3; , kSinc5; , kSinc7; , kSinc9; , ;   kSinc11; , kLanczos2; , kLanczos3; , kLanczos5; , ;   kLanczos8; , kTrim. };  ; enum  EVolumeRangeMode { ;   kUnsupported = 0; , kMinMax; , kRMS; , kAdaptive; , ;   kUnscaled; , kkNN. };  . Private Member Functions; void CalcAverages ();  compute also average RMS values required for adaptive Gaussian ;  ; void CreateBinarySearchTree (Types::ETreeType type);  create binary search trees for signal and background ;  ; Double_t CRScalc (const Event &);  ; void DeclareOptions ();  define the options (their key words) that can be set in the option string. ;  ; Float_t GetError (Float_t countS, Float_t countB, Float_t sumW2S, Float_t sumW2B) const;  statistical error estimate for RS estimator ;  ; void GetSample (const Event &e, std::vector< const BinarySearchTreeNode * > &events, Volume *volume);  ; void Init (void);  default initialisation routine called by all constructors ;  ; void ProcessOptions ();  process the options specified by the user ;  ; void RRScalc (const Event &, std::vector< Float_t > *count);  ; void SetVolumeElement (void);  defines volume dimensions ;  ; void UpdateThis ();  update static this pointer ;  . Static Private Member Functions; static MethodPDERS *& GetMethodPDERSThreadLocal ();  . Private Attributes; std::vector< Float_t > fAverageRMS;  average RMS of signal and background ;  ; BinarySearchTree * fBinaryTree;  binary tree ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPDERS.html:29964,adapt,adaptive,29964,doc/master/classTMVA_1_1MethodPDERS.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPDERS.html,1,['adapt'],['adaptive']
Modifiability," fNumStyle;  Number style. ;  ; Bool_t fStepLog;  Logarithmic steps for increase? ;  ;  Protected Attributes inherited from TGTextEntry; ETextJustification fAlignment;  OPTION={GetMethod=""GetAlignment"";SetMethod=""SetAlignment"";Items=(kTextLeft=""Left"",kTextCenterX=""Center"",kTextRight=""Right"")} ;  ; Atom_t fClipboard;  clipboard property ;  ; TBlinkTimer * fCurBlink;  cursor blink timer ;  ; Int_t fCursorIX;  cursor position in characters ;  ; Bool_t fCursorOn;  cursor status (on/off) ;  ; Int_t fCursorX;  cursor position in pixels ;  ; UInt_t fDefHeight;  default height ;  ; UInt_t fDefWidth;  default width ;  ; EEchoMode fEchoMode;  OPTION={GetMethod=""GetEchoMode"";SetMethod=""SetEchoMode"";Items=(kNormal=""Normal"",kNoEcho=""No Echo"",kPassword=""Password"")} ;  ; Bool_t fEdited;  kFALSE, if the line edit's contents have not been changed since the construction ;  ; Int_t fEndIX;  selection end in characters ;  ; Int_t fEndX;  selection end in pixels ;  ; FontStruct_t fFontStruct;  text font ;  ; Bool_t fFrameDrawn;  kTRUE draw itself inside a two-pixel frame, kFALSE draw without any frame ;  ; Bool_t fHasOwnFont;  kTRUE - font defined locally, kFALSE - globally ;  ; EInsertMode fInsertMode;  OPTION={GetMethod=""GetInsertMode"";SetMethod=""SetInsertMode"";Items=(kInsert=""Insert"",kReplace=""Replace"")} ;  ; Int_t fMaxLen;  maximum length of text ;  ; TGGC fNormGC;  normal drawing context ;  ; Int_t fOffset;  start position of text (in pixels) ;  ; GContext_t fSelbackGC;  selected background drawing context ;  ; Bool_t fSelectionOn;  selection status (on/off) ;  ; TGGC fSelGC;  selected text drawing context ;  ; Int_t fStartIX;  selection begin in characters ;  ; Int_t fStartX;  selection begin in pixels ;  ; TGTextBuffer * fText;  text buffer ;  ; TGToolTip * fTip;  associated tooltip ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGNumberEntryField.html:32162,inherit,inherited,32162,doc/master/classTGNumberEntryField.html,https://root.cern,https://root.cern/doc/master/classTGNumberEntryField.html,2,['inherit'],['inherited']
Modifiability," fNvert = 0;  ; std::vector< Vertex_t > fVertices;  ; std::multimap< long, int > fVerticesMap;  . Additional Inherited Members;  Public Attributes inherited from TGeoBBox; static Bool_t DO NOT USE !The overlap detection does not work for all cases;  ; static Bool_t DEPRECATED;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGeoBBox;  TGeoBBox (const TGeoBBox &)=delete;  ; void FillBuffer3D (TBuffer3D &buffer, Int_t reqSections, Bool_t localFrame) const override;  Fill the supplied buffer, with sections in desired frame See TBuffer3D.h for explanation of sections, frame etc. ;  ; TGeoBBox & operator= (const TGeoBBox &)=delete;  ;  Protected Member Functions inherited from TGeoShape; Int_t GetBasicColor () const;  Get the basic color (0-7). ;  ; void SetOnBoundary (Bool_t);  ; void TransformPoints (Double_t *points, UInt_t NbPoints) const;  Tranform a set of points (LocalToMaster) ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TGeoBBox; Double_t fDX;  ; Double_t fDY;  ; Double_t fDZ;  ; Double_t fOrigin [3];  ;  Protected Attributes inherited from TGeoShape; UInt_t fShapeBits;  ; Int_t fShapeId;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TGeoTessellated.h>. Inheritance diagram for TGeoTessellated:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Vertex_t. using TGeoTessellated::Vertex_t = Tessellated::Vertex_t. Definition at line 59 of file TGeoTessellated.h. Constructor & Destructor Documentation. ◆ TGeoTessellated() [1/4]. TGeoTessellated::TGeoTessellated ; (; const TGeoTessellated & ; ). privatedelete . Temporary map used to deduplicate vertices. . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTessellated.html:23817,inherit,inherited,23817,doc/master/classTGeoTessellated.html,https://root.cern,https://root.cern/doc/master/classTGeoTessellated.html,1,['inherit'],['inherited']
Modifiability," fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Additional Inherited Members;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TGFrame; enum  { kDeleteWindo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManagerEditor.html:36186,inherit,inherited,36186,doc/master/classTGeoManagerEditor.html,https://root.cern,https://root.cern/doc/master/classTGeoManagerEditor.html,6,['inherit'],['inherited']
Modifiability," fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Additional Inherited Members;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TGMainFrame; enum  { kDontCal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASPaletteEditor.html:34087,inherit,inherited,34087,doc/master/classTASPaletteEditor.html,https://root.cern,https://root.cern/doc/master/classTASPaletteEditor.html,3,['inherit'],['inherited']
Modifiability," fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Additional Inherited Members;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TGLVEntry; sta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTVLVEntry.html:24724,inherit,inherited,24724,doc/master/classTTVLVEntry.html,https://root.cern,https://root.cern/doc/master/classTTVLVEntry.html,1,['inherit'],['inherited']
Modifiability, fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Static Protected Attributes; static TEveContextMenu * fgCtxMenu = nullptr;  ; static TList * fgFrameList = new THashList;  ; static const TString fgkEmptyFrameName;  ;  Static Protected Attributes inherited from TGCompositeFrame; static TGLayoutHints * fgDefaultHints = nullptr;  ;  Static Protected Attributes inherited from TGFrame; static const TGGC * fgBckgndGC = nullptr;  ; static const TGGC * fgBlackGC = nullptr;  ; static Pixel_t fgBlackPixel = 0;  ; static Window_t fgDbw = 0;  ; static Int_t fgDbx = 0;  ; static Int_t fgDby = 0;  ; static Pixel_t fgDefaultFrameBackground = 0;  ; static Pixel_t fgDefaultSelectedBackground = 0;  ; static const TGGC * fgHilightGC = nullptr;  ; static Bool_t fgInit = kFALSE;  ; static UInt_t fgLastButton = 0;  ; static Time_t fgLastClick = 0;  ; static const TGGC * fgShadowGC = nullptr;  ; static UInt_t fgUserColor = 0;  ; static const TGGC * fgWhiteGC = nullptr;  ; static Pixel_t fgWhitePixel = 0;  ;  Static Protected Attributes inherited from TGWindow; static Int_t fgCounter = 0;  counter of created windows in SavePrimitive ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Private Member Functions;  TEveCompositeFrame (const TEveCompositeFrame &);  ; TEveCompositeFrame & operator= (const TEveCompositeFrame &);  . Static Private Attributes; static Bool_t fgAllowTopFrameCollapse = kTRUE;  ; static IconBarCreator_foo fgIconBarCreator = nullptr;  ; static UInt_t fgMiniBarHeight = 4;  ; static UInt_t fgTopFrameHeight = 14;  . Friends; class TEveWindow;  ; cl,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCompositeFrame.html:30171,inherit,inherited,30171,doc/master/classTEveCompositeFrame.html,https://root.cern,https://root.cern/doc/master/classTEveCompositeFrame.html,4,['inherit'],['inherited']
Modifiability," fParents;  ; Bool_t fPickable;  ; Bool_t fRnrChildren;  ; Bool_t fRnrSelf;  ; Bool_t fSelected;  ; TRef fSource;  Set of list-tree-items. ;  ; Int_t fTopItemCnt;  Counter for parents that are ignored in ref-counting. ;  ; void * fUserData;  ; TEveElement * fVizModel;  ; TString fVizTag;  Element used as model from VizDB. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TEveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TEveSelection (const TEveSelection &);  ; TEveSelection & operator= (const TEveSelection &);  . Additional Inherited Members;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveSelection.html:38606,inherit,inherited,38606,doc/master/classTEveSelection.html,https://root.cern,https://root.cern/doc/master/classTEveSelection.html,2,['inherit'],['inherited']
Modifiability," fSemChangeFile;  semaphore used when changing a file in TChain ;  ; Bool_t fThreadJoined;  mark if async thread was joined ;  ; TStopwatch fWaitTime;  time waiting to prefetch a buffer (in usec) ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TFilePrefetch.h>. Inheritance diagram for TFilePrefetch:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TFilePrefetch(). TFilePrefetch::TFilePrefetch ; (; TFile * ; file). Constructor. ; Definition at line 54 of file TFilePrefetch.cxx. ◆ ~TFilePrefetch(). TFilePrefetch::~TFilePrefetch ; (; ). override . Destructor. ; Definition at line 72 of file TFilePrefetch.cxx. Member Function Documentation. ◆ AddPendingBlock(). void TFilePrefetch::AddPendingBlock ; (; TFPBlock * ; block). Safe method to add a block to the pendingList. ; Definition at line 223 of file TFilePrefetch.cxx. ◆ AddReadBlock(). void TFilePrefetch::AddReadBlock ; (; TFPBlock * ; block). Safe method to add a block to the readList. ; Definition at line 259 of f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFilePrefetch.html:12951,inherit,inherited,12951,doc/master/classTFilePrefetch.html,https://root.cern,https://root.cern/doc/master/classTFilePrefetch.html,2,['inherit'],['inherited']
Modifiability," fSplitterPic;  picture to draw splitter ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TGHSplitter (const TGHSplitter &)=delete;  ; TGHSplitter & operator= (const TGHSplitter &)=delete;  . Additional Inherited Members;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherite",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHSplitter.html:24189,inherit,inherited,24189,doc/master/classTGHSplitter.html,https://root.cern,https://root.cern/doc/master/classTGHSplitter.html,1,['inherit'],['inherited']
Modifiability," fSplitterPic;  picture to draw splitter ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TGSplitter (const TGSplitter &)=delete;  ; TGSplitter & operator= (const TGSplitter &)=delete;  . Additional Inherited Members;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSplitter.html:22875,inherit,inherited,22875,doc/master/classTGSplitter.html,https://root.cern,https://root.cern/doc/master/classTGSplitter.html,1,['inherit'],['inherited']
Modifiability," fSplitterPic;  picture to draw splitter ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TGVSplitter (const TGVSplitter &)=delete;  ; TGVSplitter & operator= (const TGVSplitter &)=delete;  . Additional Inherited Members;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherite",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGVSplitter.html:24064,inherit,inherited,24064,doc/master/classTGVSplitter.html,https://root.cern,https://root.cern/doc/master/classTGVSplitter.html,1,['inherit'],['inherited']
Modifiability," fSplitterPic;  picture to draw splitter ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TGFrame; static const TGGC * fgBckgndGC = nullptr;  ; static const TGGC * fgBlackGC = nullptr;  ; static Pixel_t fgBlackPixel = 0;  ; static Window_t fgDbw = 0;  ; static Int_t fgDbx = 0;  ; static Int_t fgDby = 0;  ; static Pixel_t fgDefaultFrameBackground = 0;  ; static Pixel_t fgDefaultSelectedBackground = 0;  ; static const TGGC * fgHilightGC = nullptr;  ; static Bool_t fgInit = kFALSE;  ; static UInt_t fgLastButton = 0;  ; static Time_t fgLastClick = 0;  ; static const TGGC * fgShadowGC = nullptr;  ; static UInt_t fgUserColor = 0;  ; static const TGGC * fgWhiteGC = nullptr;  ; static Pixel_t fgWhitePixel = 0;  ;  Static Protected A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGVFileSplitter.html:29100,inherit,inherited,29100,doc/master/classTGVFileSplitter.html,https://root.cern,https://root.cern/doc/master/classTGVFileSplitter.html,1,['inherit'],['inherited']
Modifiability," fTitle;  . Private Member Functions; void UpdatePValue (const SamplingDistribution *distr, double &pvalue, double &perror, bool pIsRightTail);  updates the pvalue if sufficient data is available ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <RooStats/HypoTestResult.h>. Inheritance diagram for RooStats::HypoTestResult:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ HypoTestResult() [1/3]. HypoTestResult::HypoTestResult ; (; const char * ; name = nullptr). explicit . default constructor ; Default constructor. ; Definition at line 79 of file HypoTestResult.cxx. ◆ HypoTestResult() [2/3]. HypoTestResult::HypoTestResult ; (; const HypoTestResult & ; other). copy constructor ; Definition at line 111 of file HypoTestResult.cxx. ◆ HypoTestResult() [3/3]. HypoTestResult::HypoTestResult ; (; const char * ; name, . double ; nullp, . double ; altp . ). constructor from name, null and alternate p values ; Alternate constructor. ; Definition at line 95 of file HypoTestResul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html:16508,inherit,inherited,16508,doc/master/classRooStats_1_1HypoTestResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html,2,['inherit'],['inherited']
Modifiability," fWMWidth;  WM width. ;  ; UInt_t fWMWidthInc;  WM width increments. ;  ; Int_t fWMX;  WM x position. ;  ; Int_t fWMY;  WM y position. ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . #include <TTVLVContainer.h>. Inheritance diagram for TGSelectBox:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGSelectBox(). TGSelectBox::TGSelectBox ; (; const TGWindow * ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSelectBox.html:36466,inherit,inherited,36466,doc/master/classTGSelectBox.html,https://root.cern,https://root.cern/doc/master/classTGSelectBox.html,1,['inherit'],['inherited']
Modifiability," fWMWidth;  WM width. ;  ; UInt_t fWMWidthInc;  WM width increments. ;  ; Int_t fWMX;  WM x position. ;  ; Int_t fWMY;  WM y position. ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Additional Inherited Members;  Public Types inherited from TGTransientFrame; enum  EPlacement { ;   kCenter; , kLeft; , kRight; , kTop; , ;   kBottom; , kTopLeft; , kTopRight; , kBottomLeft; , ;   kBottomRight. };  ;  Public Types inherited from TGWindow; enum  EEditMo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFontDialog.html:33664,inherit,inherited,33664,doc/master/classTGFontDialog.html,https://root.cern,https://root.cern/doc/master/classTGFontDialog.html,4,['inherit'],['inherited']
Modifiability," fWMWidth;  WM width. ;  ; UInt_t fWMWidthInc;  WM width increments. ;  ; Int_t fWMX;  WM x position. ;  ; Int_t fWMY;  WM y position. ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Additional Inherited Members;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASPaletteEditor.html:33430,inherit,inherited,33430,doc/master/classTASPaletteEditor.html,https://root.cern,https://root.cern/doc/master/classTASPaletteEditor.html,3,['inherit'],['inherited']
Modifiability," fWMWidth;  WM width. ;  ; UInt_t fWMWidthInc;  WM width increments. ;  ; Int_t fWMX;  WM x position. ;  ; Int_t fWMY;  WM y position. ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TGColorDialog (const TGColorDialog &)=delete;  ; TGColorDialog & operator= (const TGColorDialog &)=delete;  . Additional Inherited Members;  Public Types inherited from TGTransientFrame; enum  EPlacement { ;   kCenter; , kLeft; , kRight; , kT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGColorDialog.html:34062,inherit,inherited,34062,doc/master/classTGColorDialog.html,https://root.cern,https://root.cern/doc/master/classTGColorDialog.html,1,['inherit'],['inherited']
Modifiability," fWMWidth;  WM width. ;  ; UInt_t fWMWidthInc;  WM width increments. ;  ; Int_t fWMX;  WM x position. ;  ; Int_t fWMY;  WM y position. ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TGFileDialog (const TGFileDialog &)=delete;  ; TGFileDialog & operator= (const TGFileDialog &)=delete;  . Additional Inherited Members;  Public Types inherited from TGTransientFrame; enum  EPlacement { ;   kCenter; , kLeft; , kRight; , kTop; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFileDialog.html:32212,inherit,inherited,32212,doc/master/classTGFileDialog.html,https://root.cern,https://root.cern/doc/master/classTGFileDialog.html,1,['inherit'],['inherited']
Modifiability," fWMWidth;  WM width. ;  ; UInt_t fWMWidthInc;  WM width increments. ;  ; Int_t fWMX;  WM x position. ;  ; Int_t fWMY;  WM y position. ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TGMainFrame (const TGMainFrame &)=delete;  ; TGMainFrame & operator= (const TGMainFrame &)=delete;  . Additional Inherited Members;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 ))",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMainFrame.html:30592,inherit,inherited,30592,doc/master/classTGMainFrame.html,https://root.cern,https://root.cern/doc/master/classTGMainFrame.html,1,['inherit'],['inherited']
Modifiability," fWMWidth;  WM width. ;  ; UInt_t fWMWidthInc;  WM width increments. ;  ; Int_t fWMX;  WM x position. ;  ; Int_t fWMY;  WM y position. ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TGMsgBox (const TGMsgBox &)=delete;  ; TGMsgBox & operator= (const TGMsgBox &)=delete;  . Additional Inherited Members;  Public Types inherited from TGTransientFrame; enum  EPlacement { ;   kCenter; , kLeft; , kRight; , kTop; , ;   kBottom; ,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMsgBox.html:33286,inherit,inherited,33286,doc/master/classTGMsgBox.html,https://root.cern,https://root.cern/doc/master/classTGMsgBox.html,1,['inherit'],['inherited']
Modifiability," fWMWidth;  WM width. ;  ; UInt_t fWMWidthInc;  WM width increments. ;  ; Int_t fWMX;  WM x position. ;  ; Int_t fWMY;  WM y position. ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TGTransientFrame (const TGTransientFrame &)=delete;  ; TGTransientFrame & operator= (const TGTransientFrame &)=delete;  . Additional Inherited Members;  Protected Types inherited from TGMainFrame; enum  { kDontCallClose = (1ULL << ( 14 )); };",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTransientFrame.html:31057,inherit,inherited,31057,doc/master/classTGTransientFrame.html,https://root.cern,https://root.cern/doc/master/classTGTransientFrame.html,1,['inherit'],['inherited']
Modifiability," fWMWidth;  WM width. ;  ; UInt_t fWMWidthInc;  WM width increments. ;  ; Int_t fWMX;  WM x position. ;  ; Int_t fWMY;  WM y position. ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TGUndockedFrame (const TGUndockedFrame &)=delete;  ; TGUndockedFrame & operator= (const TGUndockedFrame &)=delete;  . Additional Inherited Members;  Public Types inherited from TGTransientFrame; enum  EPlacement { ;   kCenter; , kLeft; , kRig",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGUndockedFrame.html:30458,inherit,inherited,30458,doc/master/classTGUndockedFrame.html,https://root.cern,https://root.cern/doc/master/classTGUndockedFrame.html,1,['inherit'],['inherited']
Modifiability," fWMWidth;  WM width. ;  ; UInt_t fWMWidthInc;  WM width increments. ;  ; Int_t fWMX;  WM x position. ;  ; Int_t fWMY;  WM y position. ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Static Protected Attributes; static TFitEditor * fgFitDialog = 0;  ;  Static Protected Attributes inherited from TGCompositeFrame; static TGLayoutHints * fgDefaultHints = nullptr;  ;  Static Protected Attributes inherited from TGFrame; static const TGGC * fgBckgndGC = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFitEditor.html:45471,inherit,inherited,45471,doc/master/classTFitEditor.html,https://root.cern,https://root.cern/doc/master/classTFitEditor.html,1,['inherit'],['inherited']
Modifiability," fWMWidth;  WM width. ;  ; UInt_t fWMWidthInc;  WM width increments. ;  ; Int_t fWMX;  WM x position. ;  ; Int_t fWMY;  WM y position. ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Static Protected Attributes; static TGSearchDialog * fgSearchDialog = nullptr;  global singleton ;  ;  Static Protected Attributes inherited from TGCompositeFrame; static TGLayoutHints * fgDefaultHints = nullptr;  ;  Static Protected Attributes inherited from TGFrame; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSearchDialog.html:31681,inherit,inherited,31681,doc/master/classTGSearchDialog.html,https://root.cern,https://root.cern/doc/master/classTGSearchDialog.html,1,['inherit'],['inherited']
Modifiability," fWMWidth;  WM width. ;  ; UInt_t fWMWidthInc;  WM width increments. ;  ; Int_t fWMX;  WM x position. ;  ; Int_t fWMY;  WM y position. ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Static Protected Attributes; static TGedEditor * fgFrameCreator = 0;  ;  Static Protected Attributes inherited from TVirtualPadEditor; static TString fgEditorName = """";  ; static TVirtualPadEditor * fgPadEditor = nullptr;  ;  Static Protected Attributes inherited from ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGedEditor.html:36074,inherit,inherited,36074,doc/master/classTGedEditor.html,https://root.cern,https://root.cern/doc/master/classTGedEditor.html,1,['inherit'],['inherited']
Modifiability," fWMWidth;  WM width. ;  ; UInt_t fWMWidthInc;  WM width increments. ;  ; Int_t fWMX;  WM x position. ;  ; Int_t fWMY;  WM y position. ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Static Protected Attributes; static TString fgEditorClass;  ;  Static Protected Attributes inherited from TGCompositeFrame; static TGLayoutHints * fgDefaultHints = nullptr;  ;  Static Protected Attributes inherited from TGFrame; static const TGGC * fgBckgndGC = nullptr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGListTreeEditorFrame.html:30880,inherit,inherited,30880,doc/master/classTEveGListTreeEditorFrame.html,https://root.cern,https://root.cern/doc/master/classTEveGListTreeEditorFrame.html,1,['inherit'],['inherited']
Modifiability," fWMWidth;  WM width. ;  ; UInt_t fWMWidthInc;  WM width increments. ;  ; Int_t fWMX;  WM x position. ;  ; Int_t fWMY;  WM y position. ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Protected Attributes inherited from TBrowserImp; TBrowser * fBrowser {nullptr};  TBrowser associated with this implementation. ;  ; Bool_t fShowCycles {kFALSE};  Show object cycle numbers in browser. ;  . Additional Inherited Members;  Protected Types inherited from T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFileBrowser.html:38724,inherit,inherited,38724,doc/master/classTGFileBrowser.html,https://root.cern,https://root.cern/doc/master/classTGFileBrowser.html,1,['inherit'],['inherited']
Modifiability," fWMWidth;  WM width. ;  ; UInt_t fWMWidthInc;  WM width increments. ;  ; Int_t fWMX;  WM x position. ;  ; Int_t fWMY;  WM y position. ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Protected Attributes inherited from TBrowserImp; TBrowser * fBrowser {nullptr};  TBrowser associated with this implementation. ;  ; Bool_t fShowCycles {kFALSE};  Show object cycle numbers in browser. ;  . Private Member Functions;  TEveBrowser (const TEveBrowser &);  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveBrowser.html:39738,inherit,inherited,39738,doc/master/classTEveBrowser.html,https://root.cern,https://root.cern/doc/master/classTEveBrowser.html,1,['inherit'],['inherited']
Modifiability," fWMWidth;  WM width. ;  ; UInt_t fWMWidthInc;  WM width increments. ;  ; Int_t fWMX;  WM x position. ;  ; Int_t fWMY;  WM y position. ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Protected Attributes inherited from TBrowserImp; TBrowser * fBrowser {nullptr};  TBrowser associated with this implementation. ;  ; Bool_t fShowCycles {kFALSE};  Show object cycle numbers in browser. ;  . Private Member Functions;  TRootBrowser (const TRootBrowser &)=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootBrowser.html:39397,inherit,inherited,39397,doc/master/classTRootBrowser.html,https://root.cern,https://root.cern/doc/master/classTRootBrowser.html,1,['inherit'],['inherited']
Modifiability," fWMWidth;  WM width. ;  ; UInt_t fWMWidthInc;  WM width increments. ;  ; Int_t fWMX;  WM x position. ;  ; Int_t fWMY;  WM y position. ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Protected Attributes inherited from TBrowserImp; TBrowser * fBrowser {nullptr};  TBrowser associated with this implementation. ;  ; Bool_t fShowCycles {kFALSE};  Show object cycle numbers in browser. ;  . Private Member Functions;  TRootBrowserLite (const TRootBrowser",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootBrowserLite.html:34220,inherit,inherited,34220,doc/master/classTRootBrowserLite.html,https://root.cern,https://root.cern/doc/master/classTRootBrowserLite.html,1,['inherit'],['inherited']
Modifiability," fWMWidth;  WM width. ;  ; UInt_t fWMWidthInc;  WM width increments. ;  ; Int_t fWMX;  WM x position. ;  ; Int_t fWMY;  WM y position. ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Protected Attributes inherited from TCanvasImp; TCanvas * fCanvas {nullptr};  ;  Static Protected Attributes inherited from TGCompositeFrame; static TGLayoutHints * fgDefaultHints = nullptr;  ;  Static Protected Attributes inherited from TGFrame; static const TGGC * f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootCanvas.html:40479,inherit,inherited,40479,doc/master/classTRootCanvas.html,https://root.cern,https://root.cern/doc/master/classTRootCanvas.html,1,['inherit'],['inherited']
Modifiability," fWMWidth;  WM width. ;  ; UInt_t fWMWidthInc;  WM width increments. ;  ; Int_t fWMX;  WM x position. ;  ; Int_t fWMY;  WM y position. ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Protected Attributes inherited from TControlBarImp; TControlBarButton * fClicked;  ; TControlBar * fControlBar;  ; Int_t fXpos;  ; Int_t fYpos;  ;  Static Protected Attributes inherited from TGCompositeFrame; static TGLayoutHints * fgDefaultHints = nullptr;  ;  Static",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootControlBar.html:34839,inherit,inherited,34839,doc/master/classTRootControlBar.html,https://root.cern,https://root.cern/doc/master/classTRootControlBar.html,1,['inherit'],['inherited']
Modifiability," fWMWidth;  WM width. ;  ; UInt_t fWMWidthInc;  WM width increments. ;  ; Int_t fWMX;  WM x position. ;  ; Int_t fWMY;  WM y position. ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TGCompositeFrame; static TGLayoutHints * fgDefaultHints = nullptr;  ;  Static Protected Attributes inherited from TGFrame; static const TGGC * fgBckgndGC = nullptr;  ; static const TGGC * fgBlackGC = nullptr;  ; static Pixel_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAdvancedGraphicsDialog.html:36674,inherit,inherited,36674,doc/master/classTAdvancedGraphicsDialog.html,https://root.cern,https://root.cern/doc/master/classTAdvancedGraphicsDialog.html,13,['inherit'],['inherited']
Modifiability," fX;  ; Double_t * fX0;  ; Double_t * fY;  ; Double_t * fY0;  ; Double_t * fZ;  ; Double_t fZcurrent;  ;  Protected Attributes inherited from TGeoBBox; Double_t fDX;  ; Double_t fDY;  ; Double_t fDZ;  ; Double_t fOrigin [3];  ;  Protected Attributes inherited from TGeoShape; UInt_t fShapeBits;  ; Int_t fShapeId;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TGeoShape; enum  EShapeType { ;   kBitMask32 = 0xffffffff; , kGeoNoShape = 0; , kGeoBad = (1ULL << ( 0 )); , kGeoRSeg = (1ULL << ( 1 )); , ;   kGeoPhiSeg = (1ULL << ( 2 )); , kGeoThetaSeg = (1ULL << ( 3 )); , kGeoVisX = (1ULL << ( 4 )); , kGeoVisY = (1ULL << ( 5 )); , ;   kGeoVisZ = (1ULL << ( 6 )); , kGeoRunTimeShape = (1ULL << ( 7 )); , kGeoInvalidShape = (1ULL << ( 8 )); , kGeoTorus = (1ULL << ( 9 )); , ;   kGeoBox = (1ULL << ( 10 )); , kGeoPara = (1ULL << ( 11 )); , kGeoSph = (1ULL << ( 12 )); , kGeoTube = (1ULL << ( 13 )); , ;   kGeoTubeSeg = (1ULL << ( 14 )); , kGeoCone = (1ULL << ( 15 )); , kGeoConeSeg = (1ULL << ( 16 )); , kGeoPcon = (1ULL << ( 17 )); , ;   kGeoPgon = (1ULL << ( 18 )); , kGeoArb8 = (1ULL << ( 19 )); , kGeoEltu = (1ULL << ( 20 )); , kGeoTrap = (1ULL << ( 21 )); , ;   kGeoCtub = (1ULL << ( 22 )); , kGeoTrd1 = (1ULL << ( 23 )); , kGeoTrd2 = (1ULL << ( 24 )); , kGeoComb = (1ULL << ( 25 )); , ;   kGeoClosedShape = (1ULL << ( 26 )); , kGeoXtru = (1ULL << ( 27 )); , kGeoParaboloid = (1ULL << ( 28 )); , kGeoHalfSpace = (1ULL << ( 29 )); , ;   kGeoHype = (1ULL << ( 30 )); , kGeoSavePrimitive = (1ULL << ( 20 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoXtru.html:21116,inherit,inherited,21116,doc/master/classTGeoXtru.html,https://root.cern,https://root.cern/doc/master/classTGeoXtru.html,1,['inherit'],['inherited']
Modifiability," fgInit = kFALSE;  ; static UInt_t fgLastButton = 0;  ; static Time_t fgLastClick = 0;  ; static const TGGC * fgShadowGC = nullptr;  ; static UInt_t fgUserColor = 0;  ; static const TGGC * fgWhiteGC = nullptr;  ; static Pixel_t fgWhitePixel = 0;  ;  Static Protected Attributes inherited from TGWindow; static Int_t fgCounter = 0;  counter of created windows in SavePrimitive ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Private Member Functions;  TGListView (const TGListView &)=delete;  ; TGListView & operator= (const TGListView &)=delete;  . Additional Inherited Members;  Public Types inherited from TGCanvas; enum  { kCanvasNoScroll = 0; , kCanvasScrollHorizontal = (1ULL << ( 0 )); , kCanvasScrollVertical = (1ULL << ( 1 )); , kCanvasScrollBoth = (kCanvasScrollHorizontal | kCanvasScrollVertical); };  ;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1U",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGListView.html:29945,inherit,inherited,29945,doc/master/classTGListView.html,https://root.cern,https://root.cern/doc/master/classTGListView.html,2,['inherit'],['inherited']
Modifiability," fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TEveViewer.h>. Inheritance diagram for TEveViewer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveViewer() [1/2]. TEveViewer::TEveViewer ; (; const TEveViewer & ; ). private . ◆ TEveViewer() [2/2]. TEveViewer::TEveViewer ; (; const char * ; n = ""TEveViewer"", . const char * ; t = """" . ). Constructor. ; The base-class TEveWindowFrame is constructed without a frame so a default composite-frame is instantiated and stored in fGUIFrame. Cleanup is set to no-cleanup as viewers need to be zapped with some more care. ; Definition ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveViewer.html:38960,inherit,inherited,38960,doc/master/classTEveViewer.html,https://root.cern,https://root.cern/doc/master/classTEveViewer.html,1,['inherit'],['inherited']
Modifiability," fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Attributes inherited from TEveWindow; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t fgMainFrameDefHeight = 480;  ; static UInt_t fgMainFrameDefWidth = 640;  ; static Pixel_t fgMiniBarBackgroundColor = 0x80C0A0;  . #include <TEveWindow.h>. Inheritance diagram for TEveWindowFrame:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveWindowFrame() [",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindowFrame.html:36368,inherit,inherited,36368,doc/master/classTEveWindowFrame.html,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html,1,['inherit'],['inherited']
Modifiability," fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Attributes inherited from TEveWindow; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t fgMainFrameDefHeight = 480;  ; static UInt_t fgMainFrameDefWidth = 640;  ; static Pixel_t fgMiniBarBackgroundColor = 0x80C0A0;  . #include <TEveWindow.h>. Inheritance diagram for TEveWindowPack:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveWindowPack() [1/",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindowPack.html:36773,inherit,inherited,36773,doc/master/classTEveWindowPack.html,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html,1,['inherit'],['inherited']
Modifiability," fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveWindow; void PreDeleteElement () override;  Called before the element is deleted, thus offering the last chance to detach from acquired resources and from the framework itself. ;  ; virtual void SetCurrent (Bool_t curr);  Set current state of this eve-window. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TEveElement; static const char * ToString (Bool_t b);  Convert Bool_t to string - kTRUE or kFALSE. ;  ;  Static Protected Attributes inherited from TEveWindow; static Pixel_t fgCurrentBackgroundColor = 0x80A0C0;  ; static UInt_t fgMainFrameDefHeight = 480;  ; static UInt_t fgMainFrameDefWidth = 640;  ; static Pixel_t fgMiniBarBackgroundColor = 0x80C0A0;  . #include <TEveWindow.h>. Inheritance diagram for TEveWindowTab:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveWindowTab() [1/2]",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindowTab.html:36316,inherit,inherited,36316,doc/master/classTEveWindowTab.html,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html,1,['inherit'],['inherited']
Modifiability," flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Additional Inherited Members;  Public Types inherited from TGTransientFrame; enum  EPlacement { ;   kCenter; , kLeft; , kRight; , kTop; , ;   kBottom; , kTopLeft; , kTopRight; , kBottomLeft; , ;   kBottomRight. };  ;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TGMainFrame; enum  { kDontCallClose = (1U",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFontDialog.html:34508,inherit,inherited,34508,doc/master/classTGFontDialog.html,https://root.cern,https://root.cern/doc/master/classTGFontDialog.html,3,['inherit'],['inherited']
Modifiability," flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Additional Inherited Members;  Public Types inherited from TGTransientFrame; enum  EPlacement { ;   kCenter; , kLeft; , kRight; , kTop; , ;   kBottom; , kTopLeft; , kTopRight; , kBottomLeft; , ;   kBottomRight. };  ;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TGTransientFrame; static T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofProgressMemoryPlot.html:29738,inherit,inherited,29738,doc/master/classTProofProgressMemoryPlot.html,https://root.cern,https://root.cern/doc/master/classTProofProgressMemoryPlot.html,1,['inherit'],['inherited']
Modifiability," genParams ();  Return current value of generator model parameters. ;  ; const RooDataSet * genProtoData ();  Return generator prototype data provided by user. ;  ; RooAbsData * genSample ();  Return generate sample. ;  ; RooRealVar * nllVar ();  Return pointer to RooRealVar holding minimized -log(L) value. ;  ; double numExpGen ();  Return expected number of events from generator model. ;  ; RooArgSet * projDeps ();  Return projected observables. ;  ; bool randProto ();  If true randomization of prototype data order is requested. ;  ; RooFit::OwningPtr< RooFitResult > refit (RooAbsData *inGenSample=nullptr);  Refit model using original or specified data sample. ;  ; bool verboseGen ();  If true verbose message in the generation step is requested. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooChi2MCSModule.h>. Inheritance diagram for RooChi2MCSModule:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooChi2MCSModule() [1/2]. RooChi2MCSModule::RooChi2MCSModule ; (; ). Definition at line 43 of file RooChi2MCSModule.cxx. ◆ RooChi2MCSModule() [2/2]. RooChi2MCSModule::RooChi2MCSModule ; (; const RooChi2MCSModule & ; other). Copy constructor. ; Definition at line 48 of file RooChi2MCSModule.cxx. ◆ ~RooChi2MCSModule(). RooChi2MCSModule::~RooChi2MCSModule ; (; ). override . Destructor. ; Definition at line 53 of file RooChi2MCSModule.cxx. Member Function Documentation. ◆ Class(). static TClass * RooChi2MCSModule::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooChi2MCSModule::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChi2MCSModule.html:14769,inherit,inherited,14769,doc/master/classRooChi2MCSModule.html,https://root.cern,https://root.cern/doc/master/classRooChi2MCSModule.html,1,['inherit'],['inherited']
Modifiability," genParams ();  Return current value of generator model parameters. ;  ; const RooDataSet * genProtoData ();  Return generator prototype data provided by user. ;  ; RooAbsData * genSample ();  Return generate sample. ;  ; RooRealVar * nllVar ();  Return pointer to RooRealVar holding minimized -log(L) value. ;  ; double numExpGen ();  Return expected number of events from generator model. ;  ; RooArgSet * projDeps ();  Return projected observables. ;  ; bool randProto ();  If true randomization of prototype data order is requested. ;  ; RooFit::OwningPtr< RooFitResult > refit (RooAbsData *inGenSample=nullptr);  Refit model using original or specified data sample. ;  ; bool verboseGen ();  If true verbose message in the generation step is requested. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooDLLSignificanceMCSModule.h>. Inheritance diagram for RooDLLSignificanceMCSModule:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooDLLSignificanceMCSModule() [1/3]. RooDLLSignificanceMCSModule::RooDLLSignificanceMCSModule ; (; const RooRealVar & ; param, . double ; nullHypoValue = 0.0 . ). Constructor of module with parameter to be interpreted as nSignal and the value of the null hypothesis for nSignal (usually zero) ; Definition at line 53 of file RooDLLSignificanceMCSModule.cxx. ◆ RooDLLSignificanceMCSModule() [2/3]. RooDLLSignificanceMCSModule::RooDLLSignificanceMCSModule ; (; const char * ; parName, . double ; nullHypoValue = 0.0 . ). Constructor of module with parameter name to be interpreted as nSignal and the value of the null hypothesis for nSignal (usually zero) ; Definition at line 66 of file RooDLLSignificanceMCSMod",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDLLSignificanceMCSModule.html:15935,inherit,inherited,15935,doc/master/classRooDLLSignificanceMCSModule.html,https://root.cern,https://root.cern/doc/master/classRooDLLSignificanceMCSModule.html,1,['inherit'],['inherited']
Modifiability," genParams ();  Return current value of generator model parameters. ;  ; const RooDataSet * genProtoData ();  Return generator prototype data provided by user. ;  ; RooAbsData * genSample ();  Return generate sample. ;  ; RooRealVar * nllVar ();  Return pointer to RooRealVar holding minimized -log(L) value. ;  ; double numExpGen ();  Return expected number of events from generator model. ;  ; RooArgSet * projDeps ();  Return projected observables. ;  ; bool randProto ();  If true randomization of prototype data order is requested. ;  ; RooFit::OwningPtr< RooFitResult > refit (RooAbsData *inGenSample=nullptr);  Refit model using original or specified data sample. ;  ; bool verboseGen ();  If true verbose message in the generation step is requested. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooRandomizeParamMCSModule.h>. Inheritance diagram for RooRandomizeParamMCSModule:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooRandomizeParamMCSModule() [1/2]. RooRandomizeParamMCSModule::RooRandomizeParamMCSModule ; (; ). Constructor. ; Definition at line 55 of file RooRandomizeParamMCSModule.cxx. ◆ RooRandomizeParamMCSModule() [2/2]. RooRandomizeParamMCSModule::RooRandomizeParamMCSModule ; (; const RooRandomizeParamMCSModule & ; other). Copy constructor. ; Definition at line 65 of file RooRandomizeParamMCSModule.cxx. ◆ ~RooRandomizeParamMCSModule(). RooRandomizeParamMCSModule::~RooRandomizeParamMCSModule ; (; ). overridedefault . Member Function Documentation. ◆ Class(). static TClass * RooRandomizeParamMCSModule::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooRandomizeP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRandomizeParamMCSModule.html:15992,inherit,inherited,15992,doc/master/classRooRandomizeParamMCSModule.html,https://root.cern,https://root.cern/doc/master/classRooRandomizeParamMCSModule.html,1,['inherit'],['inherited']
Modifiability," genParams ();  Return current value of generator model parameters. ;  ; const RooDataSet * genProtoData ();  Return generator prototype data provided by user. ;  ; RooAbsData * genSample ();  Return generate sample. ;  ; RooRealVar * nllVar ();  Return pointer to RooRealVar holding minimized -log(L) value. ;  ; double numExpGen ();  Return expected number of events from generator model. ;  ; RooArgSet * projDeps ();  Return projected observables. ;  ; bool randProto ();  If true randomization of prototype data order is requested. ;  ; RooFit::OwningPtr< RooFitResult > refit (RooAbsData *inGenSample=nullptr);  Refit model using original or specified data sample. ;  ; bool verboseGen ();  If true verbose message in the generation step is requested. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooStats/UpperLimitMCSModule.h>. Inheritance diagram for RooStats::UpperLimitMCSModule:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ UpperLimitMCSModule() [1/2]. UpperLimitMCSModule::UpperLimitMCSModule ; (; const RooArgSet * ; poi, . double ; CL = 0.95 . ). Definition at line 38 of file UpperLimitMCSModule.cxx. ◆ UpperLimitMCSModule() [2/2]. UpperLimitMCSModule::UpperLimitMCSModule ; (; const UpperLimitMCSModule & ; other). Copy constructor. ; Definition at line 54 of file UpperLimitMCSModule.cxx. ◆ ~UpperLimitMCSModule(). UpperLimitMCSModule::~UpperLimitMCSModule ; (; ). override . Destructor. ; Definition at line 64 of file UpperLimitMCSModule.cxx. Member Function Documentation. ◆ Class(). static TClass * RooStats::UpperLimitMCSModule::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1UpperLimitMCSModule.html:14645,inherit,inherited,14645,doc/master/classRooStats_1_1UpperLimitMCSModule.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1UpperLimitMCSModule.html,1,['inherit'],['inherited']
Modifiability," genSample ();  Return generate sample. ;  ; RooRealVar * nllVar ();  Return pointer to RooRealVar holding minimized -log(L) value. ;  ; double numExpGen ();  Return expected number of events from generator model. ;  ; RooArgSet * projDeps ();  Return projected observables. ;  ; bool randProto ();  If true randomization of prototype data order is requested. ;  ; RooFit::OwningPtr< RooFitResult > refit (RooAbsData *inGenSample=nullptr);  Refit model using original or specified data sample. ;  ; bool verboseGen ();  If true verbose message in the generation step is requested. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Attributes; RooMCStudy * _mcs;  Pointer to RooMCStudy object module is attached to. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooAbsMCStudyModule.h>. Inheritance diagram for RooAbsMCStudyModule:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAbsMCStudyModule() [1/2]. RooAbsMCStudyModule::R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsMCStudyModule.html:13576,inherit,inherited,13576,doc/master/classRooAbsMCStudyModule.html,https://root.cern,https://root.cern/doc/master/classRooAbsMCStudyModule.html,1,['inherit'],['inherited']
Modifiability," generateEvent (Int_t code) override;  Implement internal generator for observable x, x=0 for all events following definition of delta function. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Advertise analytical integrals for compiled basis functions and when used as p.d.f without basis function. ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const override;  Advertise internal generator for observable x. ;  ; TClass * IsA () const override;  ; RooAbsGenContext * modelGenContext (const RooAbsAnaConvPdf &convPdf, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooResolutionModel;  RooResolutionModel ()=default;  ;  RooResolutionModel (const char *name, const char *title, RooAbsRealLValue &x);  Constructor with convolution variable 'x'. ;  ;  RooResolutionModel (const RooResolutionModel &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooResolutionModel () override;  Destructor. ;  ; const RooFormulaVar & basis () const;  ; const RooRealVar & basisConvVar () const;  Return the convolution variable of the selection basis function. ;  ; virtual RooResolutionModel * convolution (RooFormulaVar *basis, RooAbsArg *owner) const;  Instantiate a clone of this resolution model representing a convolution with given basis function. ;  ; RooAbsRealLValue & convVar () const;  Return the convolution variable of the resolution model. ;  ; double getNorm (const RooArgSet *nset=nullptr) const override;  Return the integral of this PDF over all elements of 'nset'. ;  ; double getValV (const RooArgSet *nset=nullptr) const override;  Modified version of RooAbsPdf::getValF(). ;  ; bool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTruthModel.html:2443,inherit,inherited,2443,doc/master/classRooTruthModel.html,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html,2,"['inherit', 'variab']","['inherited', 'variable']"
Modifiability," getObject (const std::string &name) const;  ; std::shared_ptr< TObject > getObject (const std::string &name, const std::string &type="""") const;  ; std::string GetPath () const;  ; TGListTreeItem * GetTreeItem (TBrowser *b) const;  ; xRooNode histo (const xRooNode &vars=""x"", const xRooNode &fr="""", bool content=true, bool errors=true) const;  ; bool IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ;  operator bool () const;  ; xRooNode shallowCopy (const std::string &name, std::shared_ptr< xRooNode > parent=nullptr);  ; void sterilize () const;  ; TObject * xget () const;  . Static Private Member Functions; static bool isNull (const std::shared_ptr< xRooNode > &x);  ; static void SetAuxFunction (const char *title, const std::function< double(double, double, double)> &func, bool symmetrize=false);  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <RooFit/xRooFit/xRooNode.h>. Inheritance diagram ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:21262,inherit,inherited,21262,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,1,['inherit'],['inherited']
Modifiability," getVal () const;  ; TClass * IsA () const override;  ; RooCatType & operator= (const RooCatType &other);  ; bool operator== (const char *label) const;  ; bool operator== (const RooCatType &other) const;  ; bool operator== (Int_t index) const;  ; void Print (Option_t *options=nullptr) const override;  This method must be overridden when a class wants to print itself. ;  ; void printClassName (std::ostream &os) const override;  Print the class name of the state. ;  ; void printName (std::ostream &os) const override;  Print the name of the state. ;  ; void printTitle (std::ostream &os) const override;  Print the title of the state. ;  ; void printValue (std::ostream &os) const override;  Print the value (index integer) of the state. ;  ; void SetName (const Text_t *name);  Constructor with name argument. ;  ; void setVal (Int_t newValue);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCatType.html:1989,inherit,inherited,1989,doc/master/classRooCatType.html,https://root.cern,https://root.cern/doc/master/classRooCatType.html,1,['inherit'],['inherited']
Modifiability," graphics context used for scrolling generates GraphicsExposure events ;  ; UInt_t fXMargin;  x margin ;  ; UInt_t fYMargin;  y margin ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Protected Attributes inherited from TGWidget; TString fCommand;  command to be executed ;  ; const TGWindow * fMsgWindow;  window which handles widget events ;  ; Int_t fWidgetFlags;  widget status flags (OR of EWidgetStatus) ;  ; Int_t fWidgetId;  the widget id (used",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtml.html:43373,inherit,inherited,43373,doc/master/classTGHtml.html,https://root.cern,https://root.cern/doc/master/classTGHtml.html,5,['inherit'],['inherited']
Modifiability," hsimpleReader.C;   TTreeReader simplest example. ;  ; file  htest.C;   Save histograms in Tree branches ;  ; file  hvector.C;   Write and read STL vectors in a tree. ;  ; file  jets.C;  Usage of a Tree using the JetEvent class. ;  ; file  ntuple1.C;   Simple tree analysis. ;  ; file  parallelcoord.C;   Script illustrating the use of the TParallelCoord class ;  ; file  parallelcoordtrans.C;   Use of transparency with ||-Coord. ;  ; file  printSizes.C;   This macro can be used to get aggregate information on the size take on disk or in memory by the various branches in a TTree. ;  ; file  run_h1analysis.C;   Macro driving the analysis can specify file name and type ;  ; file  spider.C;   TSpider example. ;  ; file  staff.C;   Create a plot of the data in cernstaff.root To create cernstaff.root, execute tutorial $ROOTSYS/tutorials/tree/cernbuild.C ;  ; file  tcl.C;   How to write a TClonesArray to a TTree ;  ; file  temperature.C;  This tutorial illustrates how to use the highlight mode with trees. ;  ; file  tree.C;   Display the Tree data structures ;  ; file  tree0.C;   Simple Event class example ;  ; file  tree1.C;   This example is a variant of hsimple.C but using a TTree instead of a TNtuple. ;  ; file  tree2.C;   This example illustrates how to make a Tree from variables or arrays in a C struct - without a dictionary, by creating the branches for builtin types (int, float, double) and arrays explicitly. ;  ; file  tree2a.C;   This example is the same as tree2.C, but uses a class instead of a C-struct. ;  ; file  tree3.C;   Example of a Tree where branches are variable length arrays A second Tree is created and filled in parallel. ;  ; file  tree4.C;   This example writes a tree with objects of the class Event. ;  ; file  treefriend.C;   Illustrates how to use Tree friends: ;  ; file  treegetval.C;   Illustrates how to retrieve TTree variables in arrays. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__tree.html:3129,variab,variables,3129,doc/master/group__tutorial__tree.html,https://root.cern,https://root.cern/doc/master/group__tutorial__tree.html,3,['variab'],"['variable', 'variables']"
Modifiability," kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStringVar.html:36042,inherit,inherited,36042,doc/master/classRooStringVar.html,https://root.cern,https://root.cern/doc/master/classRooStringVar.html,2,['inherit'],['inherited']
Modifiability," list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TGButtonGroup (const TGButtonGroup &)=delete;  ; TGButtonGroup & operator= (const TGButtonGroup &)=delete;  . Friends; class TGButton;  . Additional Inherited Members;  Public Types inherited from TGGroupFrame; enum  ETitlePos { kLeft = -1; , kCenter = 0; , kRight = 1; };  ;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TGFrame; enum  { kDeleteWindowCalled = (1ULL << ( 15 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TGFrame; static Time_t GetLastClick ();  Get time of last mouse click. ;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TCla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGButtonGroup.html:35748,inherit,inherited,35748,doc/master/classTGButtonGroup.html,https://root.cern,https://root.cern/doc/master/classTGButtonGroup.html,1,['inherit'],['inherited']
Modifiability," makeFPName (const char *pfx, const RooArgSet &terms) const;  Construct automatic name for internal product terms. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProduct.html:49987,parameteriz,parameterized,49987,doc/master/classRooProduct.html,https://root.cern,https://root.cern/doc/master/classRooProduct.html,1,['parameteriz'],['parameterized']
Modifiability, name of 1D integrator ;  ; IntegrationOneDim::Type IntegratorType () const;  type of the integrator (return the enumeration type) ;  ; unsigned int NPoints () const;  Number of points used by current integration rule. ;  ; IntegratorOneDimOptions & operator= (const IntegratorOneDimOptions &rhs);  assignment operator ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; void SetIntegrator (const char *name);  set 1D integrator name ;  ; void SetNPoints (unsigned int n);  Set number of points for active integration rule. ;  ;  Public Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetRelTolerance (double tol);  set the relative tolerance ;  ; void SetWKSize (unsigned int size);  set workspace size ;  ; unsigned int WKSize () const;  size of the workspace ;  . Static Public Member Functions; static ROOT::Math::IOptions & Default (const char *name);  retrieve specific options - if not existing create a IOptions ;  ; static double DefaultAbsTolerance ();  ; static std::string DefaultIntegrator ();  ; static IntegrationOneDim::Type DefaultIntegratorType ();  ; static unsigned int DefaultNPoints ();  ; static double DefaultRelTolerance ();  ; static unsigned int DefaultWKSize ();  ; static ROOT::Math::IOptions * FindDefault (const char *name);  find specific options - return 0 if not existing ;  ; static,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:1403,inherit,inherited,1403,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,1,['inherit'],['inherited']
Modifiability," read attributes from XML ;  ; void SetDepth (UInt_t d);  ; virtual void SetParentTree (TMVA::BinaryTree *t);  ; void SetPos (char s);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static UInt_t GetTmvaVersionCode ();  ; static bool IsTraining ();  ; static void SetIsTraining (bool on);  ; static void SetTmvaVersionCode (UInt_t code);  ;  Static Public Member Functions inherited from TMVA::Node; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Static Protected Member Functions; static MsgLogger & Log ();  . Protected Attributes; Bool_t fCutType;  true: if event variable > cutValue ==> signal , false otherwise ;  ; Float_t fCutValue;  cut value applied on this node to discriminate bkg against sig ;  ; std::vector< Double_t > fFisherCoeff;  the fisher coeff (offset at the last element) ;  ; Bool_t fIsTerminalNode;  ! flag to set node as terminal (i.e., without deleting its descendants) ;  ; Int_t fNodeType;  Type of node: -1 == Bkg-leaf, 1 == Signal-leaf, 0 = internal. ;  ; Float_t fPurity;  the node purity ;  ; Float_t fResponse;  response value in case of regression ;  ; Float_t fRMS;  response RMS of the regression node ;  ; Short_t fSelector;  index of variable used in node selection (decision tree) ;  ; DTNodeTrainingInfo * fTrainInfo;  ;  Protected Attributes inherited from TMVA::Node; UInt_t fDepth;  depth of the node within the tree (seen from root node) ;  ; Node * fLeft;  pointers to the two ""daughter"" nodes ;  ; Node * fParent;  the previous (parent) node ;  ; BinaryTree * fParentTree;  pointer to the parent tree to which the Node belongs ;  ; char fPos;  position, i.e. it is a left (l) or right (r) daughter ;  ; Node * fRight;  pointers to the two ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DecisionTreeNode.html:12915,variab,variable,12915,doc/master/classTMVA_1_1DecisionTreeNode.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DecisionTreeNode.html,1,['variab'],['variable']
Modifiability," registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooTemplateProxy< RooRealVar > _meas;  ; RooRealProxy _true;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPullVar.html:54898,inherit,inherited,54898,doc/master/classRooPullVar.html,https://root.cern,https://root.cern/doc/master/classRooPullVar.html,1,['inherit'],['inherited']
Modifiability," registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; bool _negateCoefficient = false;  ; RooRealProxy c;  ; RooRealProxy x;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExponential.html:67601,inherit,inherited,67601,doc/master/classRooExponential.html,https://root.cern,https://root.cern/doc/master/classRooExponential.html,1,['inherit'],['inherited']
Modifiability," return true if a cache object is present, false otherwise ;  ; void init ();  initialise inputs required for the morphing function ;  ; void setup (bool ownParams=true);  setup this instance with the given set of operators and vertices if own=true, the class will own the operators template <class Base> ;  ; RooRealVar * setupObservable (const char *obsname, TClass *mode, TObject *inputExample);  setup observable, recycle existing observable if defined ;  ; void updateSampleWeights ();  update sample weight (-?-) ;  . Private Attributes; RooListProxy _binWidths;  ; RooObjCacheManager _cacheMgr;  ; Config _config;  ; std::vector< std::vector< RooListProxy * > > _diagrams;  ; RooListProxy _flags;  ; std::vector< std::vector< std::string > > _nonInterfering;  ; RooListProxy _observables;  ; RooSetProxy _operators;  ; RooListProxy _physics;  ; std::map< std::string, int > _sampleMap;  ; double _scale = 1.0;  The cache manager. ;  . Additional Inherited Members;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLagrangianMorphFunc.html:60287,inherit,inherited,60287,doc/master/classRooLagrangianMorphFunc.html,https://root.cern,https://root.cern/doc/master/classRooLagrangianMorphFunc.html,1,['inherit'],['inherited']
Modifiability," sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEvePointSelectorConsumer; enum  ETreeVarType_e { kTVT_XYZ; , kTVT_RPhiZ; };  ;  Static Public Attributes inherited from TEveElement; static const TGPicture * fgListTreeIcons [9] = { nullptr };  ; static const TGPicture * fgRnrIcons [4] = { nullptr };  ;  Protected Types inherited from TEveElement; enum  ECompoundSelectionColorBits { ;   kCSCBImplySelectAllChildren = (1ULL << ( 0 )); , kCSCBTakeAnyParentAsMaster = (1ULL << ( 1 )); , kCSCBApplyMainColorToAllChildren = (1ULL << ( 2 )); , kCSCBApplyMainColorToMatchingChildren = (1ULL << ( 3 )); , ;   kCSCBApplyMainTransparencyToAllChildren = (1ULL << ( 4 )); , kCSCBApplyMainTransparencyToMatchingChildren = (1ULL << ( 5 )). };  ; enum  EDestruct { kNone; , kStandard; , kAnnihilate; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void PreDeleteElement ();  Externally assigned and controlled user data. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEvePointSetArray.html:33870,inherit,inherited,33870,doc/master/classTEvePointSetArray.html,https://root.cern,https://root.cern/doc/master/classTEvePointSetArray.html,3,['inherit'],['inherited']
Modifiability," unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:75705,inherit,inherited,75705,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['inherit'],['inherited']
Modifiability," unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooListProxy _coefList;  ; RooListProxy _expList;  ; std::vector< double > _wksp;  ; RooRealProxy _x;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPowerSum.html:68107,config,configuration,68107,doc/master/classRooPowerSum.html,https://root.cern,https://root.cern/doc/master/classRooPowerSum.html,1,['config'],['configuration']
Modifiability," { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TGeoBBox; static Bool_t DO NOT USE !The overlap detection does not work for all cases;  ; static Bool_t DEPRECATED;  ;  Protected Types inherited from TGeoArb8; enum  EGeoArb8Type { kArb8Trap = (1ULL << ( 27 )); , kArb8Tra = (1ULL << ( 28 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGeoArb8;  TGeoArb8 (const TGeoArb8 &)=delete;  ; void CopyTwist (Double_t *twist=nullptr);  ; TGeoArb8 & operator= (const TGeoArb8 &)=delete;  ;  Protected Member Functions inherited from TGeoBBox;  TGeoBBox (const TGeoBBox &)=delete;  ; void FillBuffer3D (TBuffer3D &buffer, Int_t reqSections, Bool_t localFrame) const override;  Fill the supplied buffer, with sections in desired frame See TBuffer3D.h for explanation of sections, frame etc. ;  ; TGeoBBox & operator= (const TGeoBBox &)=delete;  ;  Protected Member Functions inherited from TGeoShape; Int_t GetBasicColor () const;  Get the basic color (0-7). ;  ; void SetOnBoundary (Bool_t);  ; void TransformPoints (Double_t *points, UInt_t NbPoints) const;  Tranform a set of points (LocalToMaster) ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGeoArb8.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoGtra.html:25656,inherit,inherited,25656,doc/master/classTGeoGtra.html,https://root.cern,https://root.cern/doc/master/classTGeoGtra.html,10,['inherit'],['inherited']
Modifiability," { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGeoBBox;  TGeoBBox (const TGeoBBox &)=delete;  ; void FillBuffer3D (TBuffer3D &buffer, Int_t reqSections, Bool_t localFrame) const override;  Fill the supplied buffer, with sections in desired frame See TBuffer3D.h for explanation of sections, frame etc. ;  ; TGeoBBox & operator= (const TGeoBBox &)=delete;  ;  Protected Member Functions inherited from TGeoShape; Int_t GetBasicColor () const;  Get the basic color (0-7). ;  ; void SetOnBoundary (Bool_t);  ; void TransformPoints (Double_t *points, UInt_t NbPoints) const;  Tranform a set of points (LocalToMaster) ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TGeoBBox; Double_t fDX;  ; Double_t fDY;  ; Double_t fDZ;  ; Double_t fOrigin [3];  ;  Protected Attributes inherited from TGeoShape; UInt_t fShapeBits;  ; Int_t fShapeId;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TGeoHalfSpace.h>. Inheritance diagram for TGeoHalfSpace:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGeoHalfSpace() [1/4]. TGeoHalfSpace::TGeoHalfSpace ; (; const TGeoHalfSpace & ; ). privatedelete . ◆ TGeoHalfSpace() [2/4]. TGeoHalfSpace::TGeoHalfSpace ; (; ). Dummy constructor. ; Definition at line 38 of file TGeoHalfSpace.cxx. ◆ TGeoHalfSpace() [3/4]. TGeoHalfSpace::TGeoHalfSpace ; (; const char * ; name, . Double_t * ; p, . Double_t * ; n . ). Constructor with name, point on the plane and normal. ; Definition at line 49 of file TGeoHalfSpace.cxx. ◆ TGeoHalfSpace() [4/4]. TGeoHalfSpace::TGeoHalfSpace ; (; Double_t * ; params). Default constructor specifying minimum and maximum radius. ; Definition at line 62 of file TGe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoHalfSpace.html:23337,inherit,inherited,23337,doc/master/classTGeoHalfSpace.html,https://root.cern,https://root.cern/doc/master/classTGeoHalfSpace.html,3,['inherit'],['inherited']
Modifiability," { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGeoBBox;  TGeoBBox (const TGeoBBox &)=delete;  ; void FillBuffer3D (TBuffer3D &buffer, Int_t reqSections, Bool_t localFrame) const override;  Fill the supplied buffer, with sections in desired frame See TBuffer3D.h for explanation of sections, frame etc. ;  ; TGeoBBox & operator= (const TGeoBBox &)=delete;  ;  Protected Member Functions inherited from TGeoShape; Int_t GetBasicColor () const;  Get the basic color (0-7). ;  ; void SetOnBoundary (Bool_t);  ; void TransformPoints (Double_t *points, UInt_t NbPoints) const;  Tranform a set of points (LocalToMaster) ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TGeoBBox; Double_t fDX;  ; Double_t fDY;  ; Double_t fDZ;  ; Double_t fOrigin [3];  ;  Protected Attributes inherited from TGeoShape; UInt_t fShapeBits;  ; Int_t fShapeId;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TGeoParaboloid.h>. Inheritance diagram for TGeoParaboloid:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGeoParaboloid() [1/5]. TGeoParaboloid::TGeoParaboloid ; (; const TGeoParaboloid & ; ). privatedelete . ◆ TGeoParaboloid() [2/5]. TGeoParaboloid::TGeoParaboloid ; (; ). ◆ TGeoParaboloid() [3/5]. TGeoParaboloid::TGeoParaboloid ; (; Double_t ; rlo, . Double_t ; rhi, . Double_t ; dz . ). ◆ TGeoParaboloid() [4/5]. TGeoParaboloid::TGeoParaboloid ; (; const char * ; name, . Double_t ; rlo, . Double_t ; rhi, . Double_t ; dz . ). ◆ TGeoParaboloid() [5/5]. TGeoParaboloid::TGeoParaboloid ; (; Double_t * ; params). ◆ ~TGeoParaboloid(). TGeoParaboloid::~TGeoParaboloid ; (; ). override . Member Function Documentation. ◆ Capacity(). Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoParaboloid.html:21877,inherit,inherited,21877,doc/master/classTGeoParaboloid.html,https://root.cern,https://root.cern/doc/master/classTGeoParaboloid.html,3,['inherit'],['inherited']
Modifiability," { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGeoBBox;  TGeoBBox (const TGeoBBox &)=delete;  ; void FillBuffer3D (TBuffer3D &buffer, Int_t reqSections, Bool_t localFrame) const override;  Fill the supplied buffer, with sections in desired frame See TBuffer3D.h for explanation of sections, frame etc. ;  ; TGeoBBox & operator= (const TGeoBBox &)=delete;  ;  Protected Member Functions inherited from TGeoShape; Int_t GetBasicColor () const;  Get the basic color (0-7). ;  ; void SetOnBoundary (Bool_t);  ; void TransformPoints (Double_t *points, UInt_t NbPoints) const;  Tranform a set of points (LocalToMaster) ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TGeoBBox; Double_t fDX;  ; Double_t fDY;  ; Double_t fDZ;  ; Double_t fOrigin [3];  ;  Protected Attributes inherited from TGeoShape; UInt_t fShapeBits;  ; Int_t fShapeId;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TGeoTessellated.h>. Inheritance diagram for TGeoTessellated:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Vertex_t. using TGeoTessellated::Vertex_t = Tessellated::Vertex_t. Definition at line 59 of file TGeoTessellated.h. Constructor & Destructor Documentation. ◆ TGeoTessellated() [1/4]. TGeoTessellated::TGeoTessellated ; (; const TGeoTessellated & ; ). privatedelete . Temporary map used to deduplicate vertices. . ◆ TGeoTessellated() [2/4]. TGeoTessellated::TGeoTessellated ; (; ). inline . Definition at line 76 of file TGeoTessellated.h. ◆ TGeoTessellated() [3/4]. TGeoTessellated::TGeoTessellated ; (; const char * ; name, . int ; nfacets = 0 . ). Constructor. ; In case nfacets is zero, it is user's responsibility to call CloseShape on",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTessellated.html:24022,inherit,inherited,24022,doc/master/classTGeoTessellated.html,https://root.cern,https://root.cern/doc/master/classTGeoTessellated.html,3,['inherit'],['inherited']
Modifiability," { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGeoBBox;  TGeoBBox (const TGeoBBox &)=delete;  ; void FillBuffer3D (TBuffer3D &buffer, Int_t reqSections, Bool_t localFrame) const override;  Fill the supplied buffer, with sections in desired frame See TBuffer3D.h for explanation of sections, frame etc. ;  ; TGeoBBox & operator= (const TGeoBBox &)=delete;  ;  Protected Member Functions inherited from TGeoShape; Int_t GetBasicColor () const;  Get the basic color (0-7). ;  ; void SetOnBoundary (Bool_t);  ; void TransformPoints (Double_t *points, UInt_t NbPoints) const;  Tranform a set of points (LocalToMaster) ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TGeoBBox; Double_t fDX;  ; Double_t fDY;  ; Double_t fDZ;  ; Double_t fOrigin [3];  ;  Protected Attributes inherited from TGeoShape; UInt_t fShapeBits;  ; Int_t fShapeId;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TGeoVGShape.h>. Inheritance diagram for TGeoVGShape:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGeoVGShape() [1/2]. TGeoVGShape::TGeoVGShape ; (; TGeoShape * ; shape, . vecgeom::cxx::VPlacedVolume * ; vgshape . ). private . Default constructor. ; Definition at line 71 of file TGeoVGShape.cxx. ◆ TGeoVGShape() [2/2]. TGeoVGShape::TGeoVGShape ; (; ). inline . Definition at line 39 of file TGeoVGShape.h. ◆ ~TGeoVGShape(). TGeoVGShape::~TGeoVGShape ; (; ). override . Destructor. ; Definition at line 83 of file TGeoVGShape.cxx. Member Function Documentation. ◆ Capacity(). Double_t TGeoVGShape::Capacity ; (; ); const. overridevirtual . Returns analytic capacity of the solid. ; Reimplemented from TGeoBBox.; Definition at line 422",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVGShape.html:22158,inherit,inherited,22158,doc/master/classTGeoVGShape.html,https://root.cern,https://root.cern/doc/master/classTGeoVGShape.html,3,['inherit'],['inherited']
Modifiability," { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions; void Clear (Option_t *="""") override;  ; TObject * GetNext () const;  ; TClass * IsA () const override;  ; Bool_t IsLinked ();  ; template<class Chain > ; void PrependLink (Chain &chain);  Set this link as the head of the chain's list of notify subscribers. ;  ; template<class Chain > ; void RemoveLink (Chain &chain);  Remove this link from a chain's list of notify subscribers. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNotifyLinkBase.html:1650,inherit,inherited,1650,doc/master/classTNotifyLinkBase.html,https://root.cern,https://root.cern/doc/master/classTNotifyLinkBase.html,1,['inherit'],['inherited']
Modifiability," { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TGFrame; enum  { kDeleteWindowCalled = (1ULL << ( 15 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inherited from TGFrame; static const TGGC * fgBckgndGC = nullptr;  ; static const TGGC * fgBlackGC = nullptr;  ; static Pixel_t fgBlackPixel = 0;  ; static Window_t fgDbw = 0;  ; static Int_t fgDbx = 0;  ; static Int_t fgDby = 0;  ; static Pixel_t fgDefaultFrameBackground = 0;  ; static Pixel_t fgDefaultSelectedBackground = 0;  ; static const TGGC * fgHilightGC = nullptr;  ; static Bool_t fgInit = kFALSE;  ; static UInt_t fgLastButton = 0;  ; static Time_t fgLastClick = 0;  ; static const TGGC * fgShadowGC = nullptr;  ; static UInt_t fgUserColor = 0;  ; static const TGGC * fgWhiteGC = nullptr;  ; static Pixel_t fgWhitePixel = 0;  ;  Static Protected Attributes inherited from TGWindow; static Int_t fgCounter = 0;  counter of created windows in SavePrimitive ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TGDoubleSlider.h>. Inheritance diagram for TGDoubleSlider:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGDoubleSlider() [1/2]. TGDoubleSlider::TGDoubleSlider ; (; const TGDoubleSlider & ; ). privatedelete . ◆ TGDoubleSlider() [2/2]. TGDoubleSlider::TGDoubleSlider ; (; const TGWindow * ; p = nullptr, . UInt_t ; w = 1, . UInt_t ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDoubleSlider.html:30494,inherit,inherited,30494,doc/master/classTGDoubleSlider.html,https://root.cern,https://root.cern/doc/master/classTGDoubleSlider.html,5,['inherit'],['inherited']
Modifiability," { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <ROOT/REveTrans.hxx>. Inheritance diagram for ROOT::Experimental::REveTrans:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REveTrans() [1/4]. REveTrans::REveTrans ; (; ). Default constructor. ; Definition at line 72 of file REveTrans.cxx. ◆ REveTrans() [2/4]. REveTrans::REveTrans ; (; const REveTrans & ; t). Constructor. ; Definition at line 86 of file REveTrans.cxx. ◆ REveTrans() [3/4]. REveTrans::REveTrans ; (; const Double_t ; arr[16]). Constructor. ; Definition at line 100 of file REveTrans.cxx. ◆ REveTrans() [4/4]. REveTrans::REveTrans ; (; const Float_t ; arr[16]). Constructor. ; Definition at line 114 of file REveTrans.cxx. ◆ ~REveTrans(). ROOT::Experimental::REveTrans::~REveTrans ; (; ). inlineoverride . Definition at line 53 of file REveTrans.hxx. Member Function Documentation. ◆ Array() [1/2]. Double_t * ROOT::Experimental::REveT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html:16030,inherit,inherited,16030,doc/master/classROOT_1_1Experimental_1_1REveTrans.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html,1,['inherit'],['inherited']
Modifiability," { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGHtml.h>. Inheritance diagram for TGHtmlLayoutContext:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGHtmlLayoutContext(). TGHtmlLayoutContext::TGHtmlLayoutContext ; (; ). Html Layout Context constructor. ; Definition at line 38 of file TGHtmlLayout.cxx. Member Function Documentation. ◆ ClearMarginStack(). void TGHtmlLayoutContext::ClearMarginStack ; (; SHtmlMargin_t ** ; ppMargin). protected . Clear a margin stack to reclaim memory. ; This routine just blindly pops everything off the stack. Typically used when the screen is cleared or the widget is deleted, etc. ; Definition at line 165 of file TGHtmlLayout.cxx. ◆ ClearObstacle(). void TGHtmlLayoutContext::ClearObstacle ; (; int ; mode). protected . Clear a wrap-around obstacle. ; The second option determines the precise behavior.; CLEAR_Left Clear all obstacles on the left.; CLEAR_Rig",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlLayoutContext.html:11947,inherit,inherited,11947,doc/master/classTGHtmlLayoutContext.html,https://root.cern,https://root.cern/doc/master/classTGHtmlLayoutContext.html,1,['inherit'],['inherited']
Modifiability," { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TRobustEstimator.h>. Inheritance diagram for TRobustEstimator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TRobustEstimator() [1/2]. TRobustEstimator::TRobustEstimator ; (; ). this constructor should be used in a univariate case: first call this constructor, then - the EvaluateUni(..) function ; Definition at line 125 of file TRobustEstimator.cxx. ◆ TRobustEstimator() [2/2]. TRobustEstimator::TRobustEstimator ; (; Int_t ; nvectors, . Int_t ; nvariables, . Int_t ; hh = 0 . ). constructor ; Definition at line 131 of file TRobustEstimator.cxx. ◆ ~TRobustEstimator(). TRobustEstimator::~TRobustEstimator ; (; ). inlineoverride . Definition at line 78 of file TRobustEstimator.h. Member Function Documentation. ◆ AddColumn(). void TRobustEstimator::AddColumn ; (; Double_t * ; col). adds a column to the data matrix it is assumed that the column h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRobustEstimator.html:19343,inherit,inherited,19343,doc/master/classTRobustEstimator.html,https://root.cern,https://root.cern/doc/master/classTRobustEstimator.html,1,['inherit'],['inherited']
Modifiability," { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TSQLStructure.h>. Inheritance diagram for TSQLTableData:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSQLTableData(). TSQLTableData::TSQLTableData ; (; TSQLFile * ; f = nullptr, . TSQLClassInfo * ; info = nullptr . ). normal constructor ; Definition at line 180 of file TSQLStructure.cxx. ◆ ~TSQLTableData(). TSQLTableData::~TSQLTableData ; (; ). override . destructor ; Definition at line 190 of file TSQLStructure.cxx. Member Function Documentation. ◆ AddColumn() [1/2]. void TSQLTableData::AddColumn ; (; const char * ; name, . const char * ; sqltype, . const char * ; value, . Bool_t ; numeric . ). Add normal column to list of columns. ; Definition at line 218 of file TSQLStructure.cxx. ◆ AddColumn() [2/2]. void TSQLTableData::AddColumn ; (; const char * ; name, . Long64_t ; value . ). Add INT column to list of columns. ; Definition at lin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLTableData.html:10601,inherit,inherited,10601,doc/master/classTSQLTableData.html,https://root.cern,https://root.cern/doc/master/classTSQLTableData.html,1,['inherit'],['inherited']
Modifiability," ~RooGenContext () override;  ; void attach (const RooArgSet &params) override;  Attach the cloned model to the event buffer we will be filling. ;  ; TClass * IsA () const override;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Printing interface. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsGenContext;  RooAbsGenContext (const RooAbsPdf &model, const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool _verbose=false);  Constructor. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents when printing. ;  ; StyleOption defaultPrintStyle (Option_t *opt) const override;  Define default print style. ;  ; virtual RooDataSet * generate (double nEvents=0, bool skipInit=false, bool extendedMode=false);  Generate the specified number of events with nEvents>0 and and return a dataset containing the generated events. ;  ; bool isValid () const;  ; bool isVerbose () const;  ; void Print (Option_t *options=nullptr) const override;  This method must be overridden when a class wants to print itself. ;  ; void printArgs (std::ostream &os) const override;  Print arguments of context, i.e. the observables being generated in this context. ;  ; void printClassName (std::ostream &os) const override;  Print class name of context. ;  ; void printName (std::ostream &os) const override;  Print name of context. ;  ; void printTitle (std::ostream &os) const override;  Print title of context. ;  ; virtual void setExpectedData (bool);  ; virtual void setProtoDataOrder (Int_t *lut);  Set the traversal order of prototype data to that in the lookup tables passed as argument. ;  ; void setVerbose (bool verbose=true);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inher",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGenContext.html:2068,extend,extendedMode,2068,doc/master/classRooGenContext.html,https://root.cern,https://root.cern/doc/master/classRooGenContext.html,1,['extend'],['extendedMode']
Modifiability,"  ::ROOT::TReadLockGuard _R__UNIQUE_(R__readguard)(R__COLL_COND_MUTEX(mutex));  ; #define R__COLLECTION_READ_LOCKGUARD_NAMED(name, mutex)   ::ROOT::TReadLockGuard _NAME2_(R__readguard,name)(R__COLL_COND_MUTEX(mutex));  ; #define R__COLLECTION_WRITE_GUARD();  ; #define R__COLLECTION_WRITE_LOCKGUARD(mutex)   ::ROOT::TWriteLockGuard _R__UNIQUE_(R__readguard)(R__COLL_COND_MUTEX(mutex));  ; #define R__COLLECTION_WRITE_LOCKGUARD_NAMED(name, mutex)   ::ROOT::TWriteLockGuard _NAME2_(R__readguard,name)(R__COLL_COND_MUTEX(mutex));  ; #define R__FOR_EACH(type, proc);  . Typedefs; template<typename T > ; using TRangeDynCast = ROOT::Detail::TRangeCast< T, true >;  TRangeDynCast is an adapter class that allows the typed iteration through a TCollection. ;  ; template<typename T > ; using ROOT::Detail::TRangeStaticCast = TRangeCast< T, false >;  TRangeStaticCast is an adapter class that allows the typed iteration through a TCollection. ;  . Functions; bool ROOT::Internal::ContaineeInheritsFrom (TClass *cl, TClass *base);  Return true if 'cl' inherits from 'base'. ;  ; const TCollection & ROOT::Internal::EmptyCollection ();  Return an empty collection for use with nullptr TRangeCast. ;  . Variables; R__EXTERN TVirtualMutex * gCollectionMutex;  ; const Bool_t kIterBackward = !kIterForward;  ; const Bool_t kIterForward = kTRUE;  . Macro Definition Documentation. ◆ R__COLL_COND_MUTEX. #define R__COLL_COND_MUTEX; (;  ; mutex);    this->IsUsingRWLock() ? mutex : nullptr. Definition at line 360 of file TCollection.h. ◆ R__COLLECTION_ITER_GUARD. #define R__COLLECTION_ITER_GUARD; (;  ; collection). Definition at line 129 of file TCollection.h. ◆ R__COLLECTION_READ_GUARD. #define R__COLLECTION_READ_GUARD; (; ). Definition at line 128 of file TCollection.h. ◆ R__COLLECTION_READ_LOCKGUARD. #define R__COLLECTION_READ_LOCKGUARD; (;  ; mutex);    ::ROOT::TReadLockGuard _R__UNIQUE_(R__readguard)(R__COLL_COND_MUTEX(mutex)). Definition at line 362 of file TCollection.h. ◆ R__COLLECTION_READ_LOCKGUARD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollection_8h.html:2547,inherit,inherits,2547,doc/master/TCollection_8h.html,https://root.cern,https://root.cern/doc/master/TCollection_8h.html,1,['inherit'],['inherits']
Modifiability,"  kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGDMLWrite ();  Default constructor. ;  ;  ~TGDMLWrite () override;  Destructor. ;  ; void SetG4Compatibility (Bool_t G4Compatible);  ; void SetIgnoreDummyMaterial (bool value);  Ignore dummy material instance, which causes trouble reading GDML in Geant4. ;  ; void SetNamingSpeed (ENamingType naming);  Set convention of naming solids and volumes. ;  ; void WriteGDMLfile (TGeoManager *geomanager, const char *filename=""test.gdml"", TString option="""");  ; void WriteGDMLfile (TGeoManager *geomanager, TGeoNode *top_node, const char *filename=""test.gdml"", TString option="""");  ; void WriteGDMLfile (TGeoManager *geomanager, TGeoVolume *top_vol, const char *filename=""test.gdml"", TString option="""");  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDMLWrite.html:8509,inherit,inherited,8509,doc/master/classTGDMLWrite.html,https://root.cern,https://root.cern/doc/master/classTGDMLWrite.html,1,['inherit'],['inherited']
Modifiability,"  kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSpectrumTransform ();  default constructor ;  ;  TSpectrumTransform (Int_t size);  the constructor creates TSpectrumTransform object. ;  ;  ~TSpectrumTransform () override;  Destructor. ;  ; void Enhance (const Double_t *source, Double_t *destVector);  This function transforms the source spectrum. ;  ; void FilterZonal (const Double_t *source, Double_t *destVector);  This function transforms the source spectrum. ;  ; TClass * IsA () const override;  ; void SetDirection (Int_t direction);  This function sets the direction of the transform: ;  ; void SetEnhanceCoeff (Double_t enhanceCoeff);  This function sets the enhancement coefficient: ;  ; void SetFilterCoeff (Double_t filterCoeff);  This function sets the filter coefficient: ;  ; void SetRegion (Int_t xmin, Int_t xmax);  This function sets the filtering or enhancement region: ;  ; void SetTransformType (Int_t transType, Int_t degree);  This function sets the following parameters for transform: ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Transform (const Double_t *source, Double_t *destVector);  This function transforms the source spectrum. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrumTransform.html:3566,enhance,enhanceCoeff,3566,doc/master/classTSpectrumTransform.html,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html,3,['enhance'],"['enhanceCoeff', 'enhancement']"
Modifiability,"» Advanced spectra processing classes. ; Advanced 2-dimensional orthogonal transform functions. ; AuthorMiroslav Morhac; Legacy Code TSpectrum2Transform is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrum2Transform might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class to carry out transforms of 2D spectra, its filtering and enhancement. It allows to calculate classic Fourier, Cosine, Sin, Hartley, Walsh, Haar transforms as well as mixed transforms (Fourier- Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sin-Walsh and Sin-Haar). All the transforms are fast.; The algorithms in this class have been published in the following references:. C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy.NIM A353 (1994) 280-284.; Morhac M., Matousek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; Morhac M., Matousek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; Morhac M., Matousek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. . Definition at line 16 of file TSpectrum2Transform.h. Public Types; enum  { ;   kTransformHaar =0; , kTransformWalsh =1; , kTransformCos =2; , kTransformSin =3; , ;   kTransformFourier =4; , kTransformHartley =5; , kTransformFourierWalsh =6; , kTransformFourierHaar =7; , ;   kTransformWalshHaar =8; , kTransformCosWalsh =9; , kTransformCosHaar =10; , kTransformSinWalsh =11; , ;   kTransformSinHaar =12; , kTransformForward =0; , kTransformInverse =1. };  ;  Public Types inherited from T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Transform.html:1352,enhance,enhancement,1352,doc/master/classTSpectrum2Transform.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html,1,['enhance'],['enhancement']
Modifiability,"◆ FixVariable(). bool TMinuitMinimizer::FixVariable ; (; unsigned int ; ivar). overridevirtual . fix an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 388 of file TMinuitMinimizer.cxx. ◆ GetCovMatrix(). bool TMinuitMinimizer::GetCovMatrix ; (; double * ; cov); const. overridevirtual . Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ; The array will be filled as cov[i *ndim + j] The ordering of the variables is the same as in errors and parameter value. This is different from the direct interface of Minuit2 or TMinuit where the values were obtained only to variable parameters ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 670 of file TMinuitMinimizer.cxx. ◆ GetHessianMatrix(). bool TMinuitMinimizer::GetHessianMatrix ; (; double * ; h); const. overridevirtual . Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ; The array will be filled as h[i *ndim + j] ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 682 of file TMinuitMinimizer.cxx. ◆ GetMinosError(). bool TMinuitMinimizer::GetMinosError ; (; unsigned int ; i, . double & ; errLow, . double & ; errUp, . int ; = 0 . ). overridevirtual . minos error for variable i, return false if Minos failed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 746 of file TMinuitMinimizer.cxx. ◆ GetVariableSettings(). bool TMinuitMinimizer::GetVariableSettings ; (; unsigned int ; ivar, . ROOT::Fit::ParameterSettings & ; var . ); const. overridevirtual . get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 411 of file TMinuitMinimizer.cxx. ◆ GlobalCC(). double TMinuitMinimizer::GlobalCC ; (; unsigned int ; i); const. overridevirtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuitMinimizer.html:17123,variab,variable,17123,doc/master/classTMinuitMinimizer.html,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html,2,['variab'],"['variable', 'variables']"
Modifiability,"◆ GetParLimits(). void TF1::GetParLimits ; (; Int_t ; ipar, . Double_t & ; parmin, . Double_t & ; parmax . ); const. virtual . Return limits for parameter ipar. ; Definition at line 1940 of file TF1.cxx. ◆ GetParName(). virtual const char * TF1::GetParName ; (; Int_t ; ipar); const. inlinevirtual . Definition at line 557 of file TF1.h. ◆ GetParNumber(). virtual Int_t TF1::GetParNumber ; (; const char * ; name); const. inlinevirtual . Definition at line 561 of file TF1.h. ◆ GetProb(). Double_t TF1::GetProb ; (; ); const. virtual . Return the fit probability. ; Definition at line 1955 of file TF1.cxx. ◆ GetQuantiles(). Int_t TF1::GetQuantiles ; (; Int_t ; n, . Double_t * ; xp, . const Double_t * ; p . ). virtual . Compute Quantiles for density distribution of this function. ; Quantile x_p of a probability distribution Function F is defined as ; \[; F(x_{p}) = \int_{xmin}^{x_{p}} f dx = p with 0 <= p <= 1.; \]. For instance the median \( x_{\frac{1}{2}} \) of a distribution is defined as that value of the random variable for which the distribution function equals 0.5: ; \[; F(x_{\frac{1}{2}}) = \prod(x < x_{\frac{1}{2}}) = \frac{1}{2}; \]. Parameters. [in]nmaximum size of array xp and size of array p ; [out]xparray filled with n quantiles evaluated at p. Memory has to be preallocated by caller. ; [in]parray of cumulative probabilities where quantiles should be evaluated. It is assumed to contain at least n values. . Returnsn, the number of quantiles computed (same as input argument n); Getting quantiles from two histograms and storing results in a TGraph, a so-called QQ-plot TGraph *gr = new TGraph(nprob);; f1->GetQuantiles(nprob,gr->GetX(),p);; f2->GetQuantiles(nprob,gr->GetY(),p);; gr->Draw(""alp"");; AuthorEddy Offermann ; WarningFunction leads to undefined behavior if xp or p are null or their size does not match with n ; Definition at line 1994 of file TF1.cxx. ◆ GetRandom() [1/2]. Double_t TF1::GetRandom ; (; Double_t ; xmin, . Double_t ; xmax, . TRandom * ; rng = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:82846,variab,variable,82846,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,1,['variab'],['variable']
Modifiability,"◆ RooDataHist() [3/9]. RooDataHist::RooDataHist ; (; RooStringView ; name, . RooStringView ; title, . const RooArgSet & ; vars, . const RooAbsData & ; data, . double ; wgt = 1.0 . ). Constructor of a data hist from an existing data collection (binned or unbinned) The RooArgSet 'vars' defines the dimensions of the histogram. ; The range and number of bins in each dimensions are taken from getMin(), getMax(), getBins() of each argument passed.; For real dimensions, the fit range and number of bins can be set independently of the plot range and number of bins, but it is advisable to keep the ratio of the plot bin width and the fit bin width an integer value. For category dimensions, the fit ranges always comprises all defined states and each state is always has its individual bin; To effectively bin real dimensions with variable bin sizes, construct a RooThresholdCategory of the real dimension to be binned variably. Set the thresholds at the desired bin boundaries, and construct the data hist as a function of the threshold category instead of the real variable.; If the constructed data hist has less dimensions that in source data collection, all missing dimensions will be projected. ; Definition at line 154 of file RooDataHist.cxx. ◆ RooDataHist() [4/9]. RooDataHist::RooDataHist ; (; RooStringView ; name, . RooStringView ; title, . const RooArgList & ; vars, . const TH1 * ; hist, . double ; wgt = 1.0 . ). Constructor of a data hist from an TH1,TH2 or TH3 The RooArgSet 'vars' defines the dimensions of the histogram. ; The ranges and number of bins are taken from the input histogram, and the corresponding values are set accordingly on the arguments in 'vars' ; Definition at line 216 of file RooDataHist.cxx. ◆ RooDataHist() [5/9]. RooDataHist::RooDataHist ; (; RooStringView ; name, . RooStringView ; title, . const RooArgList & ; vars, . RooCategory & ; indexCat, . std::map< std::string, TH1 * > ; histMap, . double ; wgt = 1.0 . ). Constructor of a data hist from a map of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataHist.html:45869,variab,variable,45869,doc/master/classRooDataHist.html,https://root.cern,https://root.cern/doc/master/classRooDataHist.html,1,['variab'],['variable']
Modifiability,"◆ TQpResidual() [2/3]. TQpResidual::TQpResidual ; (; Int_t ; nx, . Int_t ; my, . Int_t ; mz, . TVectorD & ; ixlow, . TVectorD & ; ixupp, . TVectorD & ; iclow, . TVectorD & ; icupp . ). Constructor. ; Definition at line 81 of file TQpResidual.cxx. ◆ TQpResidual() [3/3]. TQpResidual::TQpResidual ; (; const TQpResidual & ; another). Copy constructor. ; Definition at line 127 of file TQpResidual.cxx. ◆ ~TQpResidual(). TQpResidual::~TQpResidual ; (; ). inlineoverride . Definition at line 106 of file TQpResidual.h. Member Function Documentation. ◆ Add_r3_xz_alpha(). void TQpResidual::Add_r3_xz_alpha ; (; TQpVar * ; vars, . Double_t ; alpha . ). Modify the ""complementarity"" component of the residuals, by adding the pairwise products of the complementary variables plus a constant alpha to this term. ; Definition at line 237 of file TQpResidual.cxx. ◆ CalcResids(). void TQpResidual::CalcResids ; (; TQpDataBase * ; problem, . TQpVar * ; vars . ). Calculate residuals, their norms, and duality complementarity gap, given a problem and variable set. ; Definition at line 137 of file TQpResidual.cxx. ◆ Clear_r1r2(). void TQpResidual::Clear_r1r2 ; (; ). set the noncomplementarity components of the residual (the terms arising from the linear equalities in the KKT conditions) to 0. ; Definition at line 280 of file TQpResidual.cxx. ◆ Clear_r3(). void TQpResidual::Clear_r3 ; (; ). set the complementarity component of the residuals to 0. ; Definition at line 267 of file TQpResidual.cxx. ◆ GetDualityGap(). Double_t TQpResidual::GetDualityGap ; (; ). inline . Definition at line 109 of file TQpResidual.h. ◆ GetResidualNorm(). Double_t TQpResidual::GetResidualNorm ; (; ). inline . Definition at line 108 of file TQpResidual.h. ◆ GondzioProjection(). void TQpResidual::GondzioProjection ; (; TVectorD & ; v, . Double_t ; rmin, . Double_t ; rmax . ). staticprotected . Replace each component r3_i of the complementarity component of the residuals by r3p_i-r3_i, where r3p_i is the projection of r3_i ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpResidual.html:13633,variab,variable,13633,doc/master/classTQpResidual.html,https://root.cern,https://root.cern/doc/master/classTQpResidual.html,1,['variab'],['variable']
Modifiability,"� kTransformCos. ����������������������� kTransformSin. ����������������������� kTransformFourier. ����������������������� kTransformHartley. ����������� Mixed transforms:; ����������������������� kTransformFourierWalsh. ����������������������� kTransformFourierHaar. ����������������������� kTransformWalshHaar. ����������������������� kTransformCosWalsh. ����������������������� kTransformCosHaar. ����������������������� kTransformSinWalsh. ����������������������� kTransformSinHaar. fDirection-direction-transform; direction (forward, inverse); ����������������������� kTransformForward. ����������������������� kTransformInverse. fDegree-applies; only for mixed transforms [2], [3], [4]. ; ����������������; �Allowed range� . ; References:; [1] C.V. Hampton, B. Lian, Wm. C.; McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray; spectroscopy. NIM A353 (1994) 280-284. ; [2] Morh�č M., Matou�ek V.,; New adaptive Cosine-Walsh� transform and its application to nuclear data; compression, IEEE Transactions on Signal Processing 48 (2000) 2693.� ; [3] Morh�č M., Matou�ek V.,; Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal; Processing 8 (1998) 63. ; [4] Morh�č M., Matou�ek V.:; Multidimensional nuclear data compression using fast adaptive Walsh-Haar; transform. Acta Physica Slovaca 51 (2001) 307. ;  ; Example 1 � script Transform2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Transformed spectrum; from Fig. 1 using Cosine transform. Energy of the trasnsformed data is; concentrated around the beginning of the coordinate system;  ; Script:; // Example to illustrate; Transform function (class TSpectrumTransform2).; // To execute this example,; do; // root > .x Transform2.C; void Transform2() {; �� Int_t i, j;; �� Int_t nbinsx =; 256;; �� Int_t nbinsy =; 256;�� ; �� Int_t xmin� = 0;; �� Int_t xmax� =; nbinsx;; �� Int_t ymin� = 0;; �� Int_t ymax� = nbinsy;; �� Double_t ** source = new Double_t *[nbinsx];�� ; �� Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrum2Transform.html:17416,adapt,adaptive,17416,root/html602/TSpectrum2Transform.html,https://root.cern,https://root.cern/root/html602/TSpectrum2Transform.html,2,['adapt'],['adaptive']
Modifiability,"� kTransformCos. ����������������������� kTransformSin. ����������������������� kTransformFourier. ����������������������� kTransformHartley. ����������� Mixed transforms:; ����������������������� kTransformFourierWalsh. ����������������������� kTransformFourierHaar. ����������������������� kTransformWalshHaar. ����������������������� kTransformCosWalsh. ����������������������� kTransformCosHaar. ����������������������� kTransformSinWalsh. ����������������������� kTransformSinHaar. fDirection-direction-transform; direction (forward, inverse); ����������������������� kTransformForward. ����������������������� kTransformInverse. fDegree-applies; only for mixed transforms [2], [3], [4]. ; ����������������; �Allowed range� . ; References:; [1] C.V. Hampton, B. Lian, Wm. C.; McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray; spectroscopy. NIM A353 (1994) 280-284. ; [2] Morh�č M., Matou�ek V.,; New adaptive Cosine-Walsh� transform and its application to nuclear data; compression, IEEE Transactions on Signal Processing 48 (2000) 2693.� ; [3] Morh�č M., Matou�ek V.,; Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal; Processing 8 (1998) 63. ; [4] Morh�č M., Matou�ek V.:; Multidimensional nuclear data compression using fast adaptive Walsh-Haar; transform. Acta Physica Slovaca 51 (2001) 307. ;  ; Example 1 � script Transform2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Transformed spectrum; from Fig. 1 using Cosine transform. Energy of the trasnsformed data is; concentrated around the beginning of the coordinate system;  ; Script:; // Example to illustrate; Transform function (class TSpectrumTransform2).; // To execute this example,; do; // root > .x Transform2.C; void Transform2() {; �� Int_t i, j;; �� Int_t nbinsx =; 256;; �� Int_t nbinsy =; 256;�� ; �� Int_t xmin� = 0;; �� Int_t xmax� =; nbinsx;; �� Int_t ymin� = 0;; �� Int_t ymax� = nbinsy;; �� Float_t ** source = new float *[nbinsx];�� ; �� Float_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Transform.html:16231,adapt,adaptive,16231,root/html528/TSpectrum2Transform.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Transform.html,4,['adapt'],['adaptive']
Modifiability,"�� for (i = 0; i < nbinsx;; i++){; ���� for (j = 0; j <; nbinsy; j++){; �� ������������ ����source[i][j] = trans->GetBinContent(i + 1,j; + 1); ; �� ������������ �}; �� }���������� ; ��; TSpectrumTransform2 *t = new TSpectrumTransform2(256,256);�� ; ��; t->SetTransformType(t->kTransformCos,0);�� ; ��; t->SetRegion(0,63,0,63);�� ; ��; t->SetEnhanceCoeff(5);; ��; t->Enhance(source,dest);�� ; �� trans->Draw(""SURF"");���� ; }. void SetTransformType(Int_t transType, Int_t degree). SETTER FUNCION. This function sets the following parameters for transform:; -transType - type of transform (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); -degree - degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms. void SetRegion(Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax). SETTER FUNCION. This function sets the filtering or enhancement region:; -xmin, xmax, ymin, ymax. void SetDirection(Int_t direction). SETTER FUNCION. This function sets the direction of the transform:; -direction (forward or inverse). void SetFilterCoeff(Double_t filterCoeff). SETTER FUNCION. This function sets the filter coefficient:; -filterCoeff - after the transform the filtered region (xmin, xmax, ymin, ymax) is replaced by this coefficient. Applies only for filtereng operation. void SetEnhanceCoeff(Double_t enhanceCoeff). SETTER FUNCION. This function sets the enhancement coefficient:; -enhanceCoeff - after the transform the enhanced region (xmin, xmax, ymin, ymax) is multiplied by this coefficient. Applies only for enhancement operation. TSpectrum2Transform(). » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TSpectrum2Transform.html:25772,enhance,enhancement,25772,root/html604/TSpectrum2Transform.html,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html,1,['enhance'],['enhancement']
Modifiability,"�� for (i = 0; i < nbinsx;; i++){; ���� for (j = 0; j <; nbinsy; j++){; �� ������������ ����source[i][j] = trans->GetBinContent(i + 1,j; + 1); ; �� ������������ �}; �� }���������� ; ��; TSpectrumTransform2 *t = new TSpectrumTransform2(256,256);�� ; ��; t->SetTransformType(t->kTransformCos,0);�� ; ��; t->SetRegion(0,63,0,63);�� ; ��; t->SetEnhanceCoeff(5);; ��; t->Enhance(source,dest);�� ; �� trans->Draw(""SURF"");���� ; }. void SetTransformType(Int_t transType, Int_t degree). SETTER FUNCION. This function sets the following parameters for transform:; -transType - type of transform (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); -degree - degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms. void SetRegion(Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax). SETTER FUNCION. This function sets the filtering or enhancement region:; -xmin, xmax, ymin, ymax. void SetDirection(Int_t direction). SETTER FUNCION. This function sets the direction of the transform:; -direction (forward or inverse). void SetFilterCoeff(Double_t filterCoeff). SETTER FUNCION. This function sets the filter coefficient:; -filterCoeff - after the transform the filtered region (xmin, xmax, ymin, ymax) is replaced by this coefficient. Applies only for filtereng operation. void SetEnhanceCoeff(Double_t enhanceCoeff). SETTER FUNCION. This function sets the enhancement coefficient:; -enhanceCoeff - after the transform the enhanced region (xmin, xmax, ymin, ymax) is multiplied by this coefficient. Applies only for enhancement operation. TSpectrum2Transform(). » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrum2Transform.html:25772,enhance,enhancement,25772,root/html602/TSpectrum2Transform.html,https://root.cern,https://root.cern/root/html602/TSpectrum2Transform.html,1,['enhance'],['enhancement']
Modifiability,"�� for (i = 0; i < nbinsx;; i++){; ���� for (j = 0; j <; nbinsy; j++){; �� ������������ ����source[i][j] = trans->GetBinContent(i + 1,j; + 1); ; �� ������������ �}; �� }���������� ; ��; TSpectrumTransform2 *t = new TSpectrumTransform2(256,256);�� ; ��; t->SetTransformType(t->kTransformCos,0);�� ; ��; t->SetRegion(0,63,0,63);�� ; ��; t->SetEnhanceCoeff(5);; ��; t->Enhance(source,dest);�� ; �� trans->Draw(""SURF"");���� ; }. void SetTransformType(Int_t transType, Int_t degree). SETTER FUNCION. This function sets the following parameters for transform:; -transType - type of transform (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); -degree - degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms. void SetRegion(Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax). SETTER FUNCION. This function sets the filtering or enhancement region:; -xmin, xmax, ymin, ymax. void SetDirection(Int_t direction). SETTER FUNCION. This function sets the direction of the transform:; -direction (forward or inverse). void SetFilterCoeff(Float_t filterCoeff). SETTER FUNCION. This function sets the filter coefficient:; -filterCoeff - after the transform the filtered region (xmin, xmax, ymin, ymax) is replaced by this coefficient. Applies only for filtereng operation. void SetEnhanceCoeff(Float_t enhanceCoeff). SETTER FUNCION. This function sets the enhancement coefficient:; -enhanceCoeff - after the transform the enhanced region (xmin, xmax, ymin, ymax) is multiplied by this coefficient. Applies only for enhancement operation. TSpectrum2Transform(). » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-03-14 16:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSpectrum2Transform.html:24625,enhance,enhancement,24625,root/html534/TSpectrum2Transform.html,https://root.cern,https://root.cern/root/html534/TSpectrum2Transform.html,1,['enhance'],['enhancement']
Modifiability,"�� for (i = 0; i < nbinsx;; i++){; ���� for (j = 0; j <; nbinsy; j++){; �� ������������ ����source[i][j] = trans->GetBinContent(i + 1,j; + 1); ; �� ������������ �}; �� }���������� ; ��; TSpectrumTransform2 *t = new TSpectrumTransform2(256,256);�� ; ��; t->SetTransformType(t->kTransformCos,0);�� ; ��; t->SetRegion(0,63,0,63);�� ; ��; t->SetEnhanceCoeff(5);; ��; t->Enhance(source,dest);�� ; �� trans->Draw(""SURF"");���� ; }. void SetTransformType(Int_t transType, Int_t degree). SETTER FUNCION. This function sets the following parameters for transform:; -transType - type of transform (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); -degree - degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms. void SetRegion(Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax). SETTER FUNCION. This function sets the filtering or enhancement region:; -xmin, xmax, ymin, ymax. void SetDirection(Int_t direction). SETTER FUNCION. This function sets the direction of the transform:; -direction (forward or inverse). void SetFilterCoeff(Float_t filterCoeff). SETTER FUNCION. This function sets the filter coefficient:; -filterCoeff - after the transform the filtered region (xmin, xmax, ymin, ymax) is replaced by this coefficient. Applies only for filtereng operation. void SetEnhanceCoeff(Float_t enhanceCoeff). SETTER FUNCION. This function sets the enhancement coefficient:; -enhanceCoeff - after the transform the enhanced region (xmin, xmax, ymin, ymax) is multiplied by this coefficient. Applies only for enhancement operation. TSpectrum2Transform(). » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id: TSpectrum2Transform.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-10-01 15:52; This page has been automatically generated. For comments o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Transform.html:24537,enhance,enhancement,24537,root/html528/TSpectrum2Transform.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Transform.html,1,['enhance'],['enhancement']
Modifiability,"�� for (i = 0; i < nbinsx;; i++){; ���� for (j = 0; j <; nbinsy; j++){; �� ������������ ����source[i][j] = trans->GetBinContent(i + 1,j; + 1); ; �� ������������ �}; �� }���������� ; ��; TSpectrumTransform2 *t = new TSpectrumTransform2(256,256);�� ; ��; t->SetTransformType(t->kTransformCos,0);�� ; ��; t->SetRegion(0,63,0,63);�� ; ��; t->SetEnhanceCoeff(5);; ��; t->Enhance(source,dest);�� ; �� trans->Draw(""SURF"");���� ; }. void SetTransformType(Int_t transType, Int_t degree). SETTER FUNCION. This function sets the following parameters for transform:; -transType - type of transform (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); -degree - degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms. void SetRegion(Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax). SETTER FUNCION. This function sets the filtering or enhancement region:; -xmin, xmax, ymin, ymax. void SetDirection(Int_t direction). SETTER FUNCION. This function sets the direction of the transform:; -direction (forward or inverse). void SetFilterCoeff(Float_t filterCoeff). SETTER FUNCION. This function sets the filter coefficient:; -filterCoeff - after the transform the filtered region (xmin, xmax, ymin, ymax) is replaced by this coefficient. Applies only for filtereng operation. void SetEnhanceCoeff(Float_t enhanceCoeff). SETTER FUNCION. This function sets the enhancement coefficient:; -enhanceCoeff - after the transform the enhanced region (xmin, xmax, ymin, ymax) is multiplied by this coefficient. Applies only for enhancement operation. TSpectrum2Transform(). » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id: TSpectrum2Transform.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:37; This page has been automatically generated. For comments o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSpectrum2Transform.html:24606,enhance,enhancement,24606,root/html530/TSpectrum2Transform.html,https://root.cern,https://root.cern/root/html530/TSpectrum2Transform.html,1,['enhance'],['enhancement']
Modifiability,"�� for (i = 0; i < nbinsx;; i++){; ���� for (j = 0; j <; nbinsy; j++){; �� ������������ ����source[i][j] = trans->GetBinContent(i + 1,j; + 1); ; �� ������������ �}; �� }���������� ; ��; TSpectrumTransform2 *t = new TSpectrumTransform2(256,256);�� ; ��; t->SetTransformType(t->kTransformCos,0);�� ; ��; t->SetRegion(0,63,0,63);�� ; ��; t->SetEnhanceCoeff(5);; ��; t->Enhance(source,dest);�� ; �� trans->Draw(""SURF"");���� ; }. void SetTransformType(Int_t transType, Int_t degree). SETTER FUNCION. This function sets the following parameters for transform:; -transType - type of transform (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); -degree - degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms. void SetRegion(Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax). SETTER FUNCION. This function sets the filtering or enhancement region:; -xmin, xmax, ymin, ymax. void SetDirection(Int_t direction). SETTER FUNCION. This function sets the direction of the transform:; -direction (forward or inverse). void SetFilterCoeff(Float_t filterCoeff). SETTER FUNCION. This function sets the filter coefficient:; -filterCoeff - after the transform the filtered region (xmin, xmax, ymin, ymax) is replaced by this coefficient. Applies only for filtereng operation. void SetEnhanceCoeff(Float_t enhanceCoeff). SETTER FUNCION. This function sets the enhancement coefficient:; -enhanceCoeff - after the transform the enhanced region (xmin, xmax, ymin, ymax) is multiplied by this coefficient. Applies only for enhancement operation. TSpectrum2Transform(). » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id: TSpectrum2Transform.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TSpectrum2Transform.html:24606,enhance,enhancement,24606,root/html532/TSpectrum2Transform.html,https://root.cern,https://root.cern/root/html532/TSpectrum2Transform.html,1,['enhance'],['enhancement']
Modifiability,"�� kTransformCos. ����������������������� kTransformSin. ����������������������� kTransformFourier. ����������������������� kTransformHartey. ����������� Mixed transforms:; ����������������������� kTransformFourierWalsh. ����������������������� kTransformFourierHaar. ����������������������� kTransformWalshHaar. ����������������������� kTransformCosWalsh. ����������������������� kTransformCosHaar. ����������������������� kTransformSinWalsh. ����������������������� kTransformSinHaar. fDirection-direction-transform; direction (forward, inverse); ����������������������� kTransformForward. ����������������������� kTransformInverse. fDegree-applies; only for mixed transforms [2], [3], [4]. ; ����������������; �Allowed range� . ; References:; [1] C.V. Hampton, B. Lian, Wm. C.; McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray; spectroscopy. NIM A353 (1994) 280-284. ; [2] Morh�č M., Matou�ek V.,; New adaptive Cosine-Walsh� transform and its application to nuclear data; compression, IEEE Transactions on Signal Processing 48 (2000) 2693.� ; [3] Morh�č M., Matou�ek V.,; Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal; Processing 8 (1998) 63. ; [4] Morh�č M., Matou�ek V.:; Multidimensional nuclear data compression using fast adaptive Walsh-Haar; transform. Acta Physica Slovaca 51 (2001) 307. ;  ; Example �� script Transform.c:. Fig. 1 Original gamma-ray spectrum.  ; Fig. 2 Transformed spectrum from Fig. 1 using Cosine; transform;  ; Script:; // Example to illustrate; Transform function (class TSpectrumTransform).; // To execute this example,; do; // root > .x Transform.C; �� ; #include <TSpectrum>; #include; <TSpectrumTransform>;  ; void Transform() {; �� Int_t i;; �� Double_t nbins =; 4096;; �� Double_t xmin� =; 0;; �� Double_t xmax� =; (Double_t)nbins;; �� Double_t * source = new Double_t[nbins];; �� Double_t * dest = new; Double_t[nbins];�� ; �� TH1F *h = new TH1F(""h"",""Transformed; spectrum using Cosine transform"",",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrumTransform.html:15581,adapt,adaptive,15581,root/html602/TSpectrumTransform.html,https://root.cern,https://root.cern/root/html602/TSpectrumTransform.html,2,['adapt'],['adaptive']
Modifiability,"�� kTransformCos. ����������������������� kTransformSin. ����������������������� kTransformFourier. ����������������������� kTransformHartey. ����������� Mixed transforms:; ����������������������� kTransformFourierWalsh. ����������������������� kTransformFourierHaar. ����������������������� kTransformWalshHaar. ����������������������� kTransformCosWalsh. ����������������������� kTransformCosHaar. ����������������������� kTransformSinWalsh. ����������������������� kTransformSinHaar. fDirection-direction-transform; direction (forward, inverse); ����������������������� kTransformForward. ����������������������� kTransformInverse. fDegree-applies; only for mixed transforms [2], [3], [4]. ; ����������������; �Allowed range� . ; References:; [1] C.V. Hampton, B. Lian, Wm. C.; McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray; spectroscopy. NIM A353 (1994) 280-284. ; [2] Morh�č M., Matou�ek V.,; New adaptive Cosine-Walsh� transform and its application to nuclear data; compression, IEEE Transactions on Signal Processing 48 (2000) 2693.� ; [3] Morh�č M., Matou�ek V.,; Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal; Processing 8 (1998) 63. ; [4] Morh�č M., Matou�ek V.:; Multidimensional nuclear data compression using fast adaptive Walsh-Haar; transform. Acta Physica Slovaca 51 (2001) 307. ;  ; Example �� script Transform.c:. Fig. 1 Original gamma-ray spectrum.  ; Fig. 2 Transformed spectrum from Fig. 1 using Cosine; transform;  ; Script:; // Example to illustrate; Transform function (class TSpectrumTransform).; // To execute this example,; do; // root > .x Transform.C; �� ; #include <TSpectrum>; #include; <TSpectrumTransform>;  ; void Transform() {; �� Int_t i;; �� Double_t nbins =; 4096;; �� Double_t xmin� =; 0;; �� Double_t xmax� =; (Double_t)nbins;; �� Float_t * source = new float[nbins];; �� Float_t * dest = new; float[nbins];�� ; �� TH1F *h = new TH1F(""h"",""Transformed; spectrum using Cosine transform"",nbins,xm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrumTransform.html:14367,adapt,adaptive,14367,root/html528/TSpectrumTransform.html,https://root.cern,https://root.cern/root/html528/TSpectrumTransform.html,4,['adapt'],['adaptive']
Modifiability,"����; of 2.; fType-type of transform; ����������� Classic transforms:; ����������������������� kTransformHaar. ����������������������� kTransformWalsh. ����������������������� kTransformCos. ����������������������� kTransformSin. ����������������������� kTransformFourier. ����������������������� kTransformHartley. ����������� Mixed transforms:; ����������������������� kTransformFourierWalsh. ����������������������� kTransformFourierHaar. ����������������������� kTransformWalshHaar. ����������������������� kTransformCosWalsh. ����������������������� kTransformCosHaar. ����������������������� kTransformSinWalsh. ����������������������� kTransformSinHaar. fDirection-direction-transform; direction (forward, inverse); ����������������������� kTransformForward. ����������������������� kTransformInverse. fDegree-applies; only for mixed transforms [2], [3], [4]. ; ����������������; �Allowed range� . ; References:; [1] C.V. Hampton, B. Lian, Wm. C.; McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray; spectroscopy. NIM A353 (1994) 280-284. ; [2] Morh�č M., Matou�ek V.,; New adaptive Cosine-Walsh� transform and its application to nuclear data; compression, IEEE Transactions on Signal Processing 48 (2000) 2693.� ; [3] Morh�č M., Matou�ek V.,; Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal; Processing 8 (1998) 63. ; [4] Morh�č M., Matou�ek V.:; Multidimensional nuclear data compression using fast adaptive Walsh-Haar; transform. Acta Physica Slovaca 51 (2001) 307. ;  ; Example 1 � script Transform2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Transformed spectrum; from Fig. 1 using Cosine transform. Energy of the trasnsformed data is; concentrated around the beginning of the coordinate system;  ; Script:; // Example to illustrate; Transform function (class TSpectrumTransform2).; // To execute this example,; do; // root > .x Transform2.C; void Transform2() {; �� Int_t i, j;; �� Int_t nbinsx =; 256;; �� Int_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Transform.html:16119,enhance,enhancement,16119,root/html528/TSpectrum2Transform.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Transform.html,6,['enhance'],['enhancement']
Modifiability,"���������� kTransformWalshHaar. ����������������������� kTransformCosWalsh. ����������������������� kTransformCosHaar. ����������������������� kTransformSinWalsh. ����������������������� kTransformSinHaar. fDirection-direction-transform; direction (forward, inverse); ����������������������� kTransformForward. ����������������������� kTransformInverse. fDegree-applies; only for mixed transforms [2], [3], [4]. ; ����������������; �Allowed range� . ; References:; [1] C.V. Hampton, B. Lian, Wm. C.; McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray; spectroscopy. NIM A353 (1994) 280-284. ; [2] Morh�č M., Matou�ek V.,; New adaptive Cosine-Walsh� transform and its application to nuclear data; compression, IEEE Transactions on Signal Processing 48 (2000) 2693.� ; [3] Morh�č M., Matou�ek V.,; Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal; Processing 8 (1998) 63. ; [4] Morh�č M., Matou�ek V.:; Multidimensional nuclear data compression using fast adaptive Walsh-Haar; transform. Acta Physica Slovaca 51 (2001) 307. ;  ; Example 1 � script Transform2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Transformed spectrum; from Fig. 1 using Cosine transform. Energy of the trasnsformed data is; concentrated around the beginning of the coordinate system;  ; Script:; // Example to illustrate; Transform function (class TSpectrumTransform2).; // To execute this example,; do; // root > .x Transform2.C; void Transform2() {; �� Int_t i, j;; �� Int_t nbinsx =; 256;; �� Int_t nbinsy =; 256;�� ; �� Int_t xmin� = 0;; �� Int_t xmax� =; nbinsx;; �� Int_t ymin� = 0;; �� Int_t ymax� = nbinsy;; �� Double_t ** source = new Double_t *[nbinsx];�� ; �� Double_t ** dest = new; Double_t *[nbinsx];����� ; �� for (i=0;i<nbinsx;i++); ����������������������������������������������� source[i]=new; Double_t[nbinsy];; �� for (i=0;i<nbinsx;i++); ����������������������������������������������� dest[i]=new; Double_t[nbinsy];�� ; �� TH2F *trans ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrum2Transform.html:17775,adapt,adaptive,17775,root/html602/TSpectrum2Transform.html,https://root.cern,https://root.cern/root/html602/TSpectrum2Transform.html,2,['adapt'],['adaptive']
Modifiability,"���������� kTransformWalshHaar. ����������������������� kTransformCosWalsh. ����������������������� kTransformCosHaar. ����������������������� kTransformSinWalsh. ����������������������� kTransformSinHaar. fDirection-direction-transform; direction (forward, inverse); ����������������������� kTransformForward. ����������������������� kTransformInverse. fDegree-applies; only for mixed transforms [2], [3], [4]. ; ����������������; �Allowed range� . ; References:; [1] C.V. Hampton, B. Lian, Wm. C.; McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray; spectroscopy. NIM A353 (1994) 280-284. ; [2] Morh�č M., Matou�ek V.,; New adaptive Cosine-Walsh� transform and its application to nuclear data; compression, IEEE Transactions on Signal Processing 48 (2000) 2693.� ; [3] Morh�č M., Matou�ek V.,; Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal; Processing 8 (1998) 63. ; [4] Morh�č M., Matou�ek V.:; Multidimensional nuclear data compression using fast adaptive Walsh-Haar; transform. Acta Physica Slovaca 51 (2001) 307. ;  ; Example 1 � script Transform2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Transformed spectrum; from Fig. 1 using Cosine transform. Energy of the trasnsformed data is; concentrated around the beginning of the coordinate system;  ; Script:; // Example to illustrate; Transform function (class TSpectrumTransform2).; // To execute this example,; do; // root > .x Transform2.C; void Transform2() {; �� Int_t i, j;; �� Int_t nbinsx =; 256;; �� Int_t nbinsy =; 256;�� ; �� Int_t xmin� = 0;; �� Int_t xmax� =; nbinsx;; �� Int_t ymin� = 0;; �� Int_t ymax� = nbinsy;; �� Float_t ** source = new float *[nbinsx];�� ; �� Float_t ** dest = new; float *[nbinsx];����� ; �� for (i=0;i<nbinsx;i++); ����������������������������������������������� source[i]=new; float[nbinsy];; �� for (i=0;i<nbinsx;i++); ����������������������������������������������� dest[i]=new; float[nbinsy];�� ; �� TH2F *trans = new; TH2F(""t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Transform.html:16590,adapt,adaptive,16590,root/html528/TSpectrum2Transform.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Transform.html,4,['adapt'],['adaptive']
Modifiability,"���������� kTransformWalshHaar. ����������������������� kTransformCosWalsh. ����������������������� kTransformCosHaar. ����������������������� kTransformSinWalsh. ����������������������� kTransformSinHaar. fDirection-direction-transform; direction (forward, inverse); ����������������������� kTransformForward. ����������������������� kTransformInverse. fDegree-applies; only for mixed transforms [2], [3], [4]. ; ����������������; �Allowed range� . ; References:; [1] C.V. Hampton, B. Lian, Wm. C.; McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray; spectroscopy. NIM A353 (1994) 280-284. ; [2] Morh�č M., Matou�ek V.,; New adaptive Cosine-Walsh� transform and its application to nuclear data; compression, IEEE Transactions on Signal Processing 48 (2000) 2693.� ; [3] Morh�č M., Matou�ek V.,; Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal; Processing 8 (1998) 63. ; [4] Morh�č M., Matou�ek V.:; Multidimensional nuclear data compression using fast adaptive Walsh-Haar; transform. Acta Physica Slovaca 51 (2001) 307. ;  ; Example �� script Transform.c:. Fig. 1 Original gamma-ray spectrum.  ; Fig. 2 Transformed spectrum from Fig. 1 using Cosine; transform;  ; Script:; // Example to illustrate; Transform function (class TSpectrumTransform).; // To execute this example,; do; // root > .x Transform.C; �� ; #include <TSpectrum>; #include; <TSpectrumTransform>;  ; void Transform() {; �� Int_t i;; �� Double_t nbins =; 4096;; �� Double_t xmin� =; 0;; �� Double_t xmax� =; (Double_t)nbins;; �� Double_t * source = new Double_t[nbins];; �� Double_t * dest = new; Double_t[nbins];�� ; �� TH1F *h = new TH1F(""h"",""Transformed; spectrum using Cosine transform"",nbins,xmin,xmax);; �� TFile *f = new; TFile(""spectra\\TSpectrum.root"");; �� h=(TH1F*); f->Get(""transform1;1"");�� ; �� for (i = 0; i < nbins;; i++) source[i]=h->GetBinContent(i + 1);�������� ; �� TCanvas *Transform1 =; gROOT->GetListOfCanvases()->FindObject(""Transform1"");; �� if (!T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrumTransform.html:15940,adapt,adaptive,15940,root/html602/TSpectrumTransform.html,https://root.cern,https://root.cern/root/html602/TSpectrumTransform.html,2,['adapt'],['adaptive']
Modifiability,"���������� kTransformWalshHaar. ����������������������� kTransformCosWalsh. ����������������������� kTransformCosHaar. ����������������������� kTransformSinWalsh. ����������������������� kTransformSinHaar. fDirection-direction-transform; direction (forward, inverse); ����������������������� kTransformForward. ����������������������� kTransformInverse. fDegree-applies; only for mixed transforms [2], [3], [4]. ; ����������������; �Allowed range� . ; References:; [1] C.V. Hampton, B. Lian, Wm. C.; McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray; spectroscopy. NIM A353 (1994) 280-284. ; [2] Morh�č M., Matou�ek V.,; New adaptive Cosine-Walsh� transform and its application to nuclear data; compression, IEEE Transactions on Signal Processing 48 (2000) 2693.� ; [3] Morh�č M., Matou�ek V.,; Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal; Processing 8 (1998) 63. ; [4] Morh�č M., Matou�ek V.:; Multidimensional nuclear data compression using fast adaptive Walsh-Haar; transform. Acta Physica Slovaca 51 (2001) 307. ;  ; Example �� script Transform.c:. Fig. 1 Original gamma-ray spectrum.  ; Fig. 2 Transformed spectrum from Fig. 1 using Cosine; transform;  ; Script:; // Example to illustrate; Transform function (class TSpectrumTransform).; // To execute this example,; do; // root > .x Transform.C; �� ; #include <TSpectrum>; #include; <TSpectrumTransform>;  ; void Transform() {; �� Int_t i;; �� Double_t nbins =; 4096;; �� Double_t xmin� =; 0;; �� Double_t xmax� =; (Double_t)nbins;; �� Float_t * source = new float[nbins];; �� Float_t * dest = new; float[nbins];�� ; �� TH1F *h = new TH1F(""h"",""Transformed; spectrum using Cosine transform"",nbins,xmin,xmax);; �� TFile *f = new; TFile(""spectra\\TSpectrum.root"");; �� h=(TH1F*); f->Get(""transform1;1"");�� ; �� for (i = 0; i < nbins;; i++) source[i]=h->GetBinContent(i + 1);�������� ; �� TCanvas *Transform1 =; gROOT->GetListOfCanvases()->FindObject(""Transform1"");; �� if (!Transform",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrumTransform.html:14726,adapt,adaptive,14726,root/html528/TSpectrumTransform.html,https://root.cern,https://root.cern/root/html528/TSpectrumTransform.html,4,['adapt'],['adaptive']
Performance," ! 68; ==(string) 76 & 78; !=(string) 77 | 79; <<(shift) 80 >>(shift) 81; ? : 82. * constants (kConstants) :. c0 141 1 c1 141 2 etc.. * strings (kStringConst):. sX 143 x. * variables (kFormulaVar) :. x 144 0 y 144 1 z 144 2 t 144 3. * parameters :. [1] 140 1; [2] 140 2; etc. Special cases for normalized gaussian or landau distributions. the expression ""gaus"" is a substitute for; [0]*exp(-0.5*((x-[1])/[2])**2); to obtain a standard normalized gaussian, use ""gausn"" instead of ""gaus""; the expression ""gausn"" is a substitute for; [0]*exp(-0.5*((x-[1])/[2])**2)/(sqrt(2*pi)*[2])); WARNING: gaus and gausn are mutually exclusive in the same expression. In the same way the expression ""landau"" is a substitute for; [0]*TMath::Landau(x,[1],[2],kFALSE); to obtain a standard normalized landau, use ""landaun"" instead of ""landau""; the expression ""landaun"" is a substitute for; [0]*TMath::Landau(x,[1],[2],kTRUE); WARNING: landau and landaun are mutually exclusive in the same expression. Boolean optimization (kBoolOptmize) :. Those pseudo operation are used to implement lazy evaluation of; && and ||. When the left hand of the expression if false; (respectively true), the evaluation of the right is entirely skipped; (since it would not change the value of the expreession). && 142 11 (one operation on right) 142 21 (2 operations on right); || 142 12 (one operation on right) 142 22 (2 operations on right). * functions calls (kFunctionCall) :. f0 145 0 f1 145 1 etc.. Errors :. 1 : Division By Zero; 2 : Invalid Floating Point Operation; 4 : Empty String; 5 : invalid syntax; 6 : Too many operators; 7 : Too many parameters; 10 : z specified but not x and y; 11 : z and y specified but not x; 12 : y specified but not x; 13 : z and x specified but not y; 20 : non integer value for parameter number; 21 : atan2 requires two arguments; 22 : pow requires two arguments; 23 : degree of polynomial not specified; 24 : Degree of polynomial must be positive; 25 : Degree of polynomial must be less than 20; 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFormula.html:17166,optimiz,optimization,17166,root/html534/TFormula.html,https://root.cern,https://root.cern/root/html534/TFormula.html,3,['optimiz'],['optimization']
Performance," """"); virtual Bool_tRooAbsCachedPdf::selfNormalized() const; TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidsetBufferFraction(Double_t frac); voidsetBufferStrategy(RooFFTConvPdf::BufStrat bs); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); voidsetCacheObservables(const RooArgSet& obs); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); voidRooAbsPdf::setGeneratorConfig(); voidRooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidRooAbsCachedPdf::setInterpolationOrder(Int_t order); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); voidRooAbsPdf::setNormRange(const char* rangeName); voidRooAbsPdf::setNormRangeOverride(const char* rangeName); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidsetShift(Double_t val1, Double_t val",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooFFTConvPdf.html:34015,cache,cache,34015,root/html534/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html534/RooFFTConvPdf.html,3,['cache'],['cache']
Performance," """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Bool_tRooAbsPdf::selfNormalized() const; TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetErrorTolerance(Double_t t); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); voidSetForceSum(Bool_t flag); voidRooAbsPdf::setGeneratorConfig(); voidRooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; voidSetMaxIters(Int_t mi); virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); voidRooAbsPdf::setNormRange(const char* rangeName); voidRooAbsPdf::setNormRangeOverride(const char* rangeName); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNonCentralChiSquare.html:30170,cache,cache,30170,root/html534/RooNonCentralChiSquare.html,https://root.cern,https://root.cern/root/html534/RooNonCentralChiSquare.html,3,['cache'],['cache']
Performance," ""0"" . ). Get value of environment variable 'env' on node 'ord'. ; Definition at line 6644 of file TProof.cxx. ◆ GetEnvVars(). const TList * TProof::GetEnvVars ; (; ). static . Get environemnt variables. ; Definition at line 11751 of file TProof.cxx. ◆ GetFeedbackList(). TList * TProof::GetFeedbackList ; (; ); const. Return feedback list. ; Definition at line 10033 of file TProof.cxx. ◆ GetFileInCmd(). Bool_t TProof::GetFileInCmd ; (; const char * ; cmd, . TString & ; fn . ). staticprotected . Static method to extract the filename (if any) form a CINT command. ; Returns kTRUE and the filename in 'fn'; returns kFALSE if not found or not appliable. ; Definition at line 6495 of file TProof.cxx. ◆ GetGroup(). const char * TProof::GetGroup ; (; ); const. inline . Definition at line 907 of file TProof.h. ◆ GetImage(). const char * TProof::GetImage ; (; ); const. inline . Definition at line 910 of file TProof.h. ◆ GetInputData(). Int_t TProof::GetInputData ; (; TList * ; input, . const char * ; cachedir, . TString & ; emsg . ). staticprotected . Get the input data from the file defined in the input list. ; Definition at line 12413 of file TProof.cxx. ◆ GetInputList(). TList * TProof::GetInputList ; (; ). Get input list. ; Definition at line 9753 of file TProof.cxx. ◆ GetLastLog(). TMacro * TProof::GetLastLog ; (; ). Fill a TMacro with the log lines since the last reading (fLogFileR) Return (TMacro *)0 if no line was logged. ; The returned TMacro must be deleted by the caller. ; Definition at line 10257 of file TProof.cxx. ◆ GetListOfActiveSlaves(). TList * TProof::GetListOfActiveSlaves ; (; ); const. inlineprotected . Definition at line 723 of file TProof.h. ◆ GetListOfBadSlaves(). TList * TProof::GetListOfBadSlaves ; (; ); const. inlineprivate . Definition at line 657 of file TProof.h. ◆ GetListOfEnabledPackages(). TList * TProof::GetListOfEnabledPackages ; (; ). Get from the master the list of names of the packages enabled. ; Definition at line 9124 of file TProof.cxx. ◆ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:95359,cache,cachedir,95359,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['cache'],['cachedir']
Performance," ""DNN_GPU""; else:; arch = ""CPU""; ; factory.BookMethod(; loader,; TMVA.Types.kDL,; dnnMethodName,; H=False,; V=True,; ErrorStrategy=""CROSSENTROPY"",; VarTransform=""G"",; WeightInitialization=""XAVIER"",; InputLayout=""1|1|7"",; BatchLayout=""1|128|7"",; Layout=""DENSE|64|TANH,DENSE|64|TANH,DENSE|64|TANH,DENSE|64|TANH,DENSE|1|LINEAR"",; TrainingStrategy=training1,; Architecture=arch,; ); ; # Keras DL; if useKeras:; ROOT.Info(""TMVA_Higgs_Classification"", ""Building Deep Learning keras model""); # create Keras model with 4 layers of 64 units and relu activations; import tensorflow; from tensorflow.keras.models import Sequential; from tensorflow.keras.optimizers import Adam; from tensorflow.keras.layers import Input, Dense; ; model = Sequential(); model.add(Dense(64, activation=""relu"", input_dim=7)); model.add(Dense(64, activation=""relu"")); model.add(Dense(64, activation=""relu"")); model.add(Dense(64, activation=""relu"")); model.add(Dense(2, activation=""sigmoid"")); model.compile(loss=""binary_crossentropy"", optimizer=Adam(learning_rate=0.001), weighted_metrics=[""accuracy""]); model.save(""model_higgs.h5""); model.summary(); ; if not os.path.exists(""model_higgs.h5""):; raise FileNotFoundError(""Error creating Keras model file - skip using Keras""); else:; # book PyKeras method only if Keras model could be created; ROOT.Info(""TMVA_Higgs_Classification"", ""Booking Deep Learning keras model""); factory.BookMethod(; loader,; TMVA.Types.kPyKeras,; ""PyKeras"",; H=True,; V=False,; VarTransform=None,; FilenameModel=""model_higgs.h5"",; FilenameTrainedModel=""trained_model_higgs.h5"",; NumEpochs=20,; BatchSize=100,; ); # GpuOptions=""allow_growth=True"",; # ) # needed for RTX NVidia card and to avoid TF allocates all GPU memory; ; ; ## Train Methods; ; # Here we train all the previously booked methods.; ; factory.TrainAllMethods(); ## Test all methods; ; # Now we test and evaluate all methods using the test data set; factory.TestAllMethods(); ; factory.EvaluateAllMethods(); ; # after we get the ROC curve and we",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:66971,optimiz,optimizer,66971,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,1,['optimiz'],['optimizer']
Performance," ""wyoming""; };; Double_t pop[nx] = {; 4708708, 6595778, 2889450, 36961664, 5024748, 3518288, 885122, 18537969,; 9829211, 1545801, 12910409, 6423113, 3007856, 2818747, 4314113, 4492076,; 1318301, 5699478, 6593587, 9969727, 5266214, 2951996, 5987580, 974989,; 1796619, 2643085, 1324575, 8707739, 2009671, 19541453, 9380884, 646844,; 11542645, 3687050, 3825657, 12604767, 1053209, 4561242, 812383, 6296254,; 24782302, 2784572, 621760, 7882590, 6664195, 1819777, 5654774, 544270; };; ; Double_t lon1 = -130;; Double_t lon2 = -65;; Double_t lat1 = 24;; Double_t lat2 = 50;; auto p = new TH2Poly(""USA"",""USA Population"",lon1,lon2,lat1,lat2);; ; TFile::SetCacheFileDir(""."");; auto f = TFile::Open(""http://root.cern/files/usa.root"", ""CACHEREAD"");; ; TMultiGraph *mg;; TKey *key;; TIter nextkey(gDirectory->GetListOfKeys());; while ((key = (TKey*)nextkey())) {; TObject *obj = key->ReadObj();; if (obj->InheritsFrom(""TMultiGraph"")) {; mg = (TMultiGraph*)obj;; bin = p->AddBin(mg);; }; }; ; for (i=0; i<nx; i++) p->Fill(states[i], pop[i]);; ; gStyle->SetOptStat(11);; p->Draw(""COLZ L"");; }; TFile::SetCacheFileDirstatic Bool_t SetCacheFileDir(std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE)Sets the directory where to locally stage/cache remote files.Definition TFile.cxx:4626; TIterDefinition TCollection.h:235; TKeyBook space in a file, create I/O buffers, to fill them, (un)compress them.Definition TKey.h:28; TKey::ReadObjvirtual TObject * ReadObj()To read a TObject* from the file.Definition TKey.cxx:759; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280. TH2Poly histograms ca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:106820,cache,cacheDir,106820,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,2,['cache'],"['cache', 'cacheDir']"
Performance," & >;  . Enumerations; enum class  EActivationFunction { ;   kIdentity = 0; , kRelu = 1; , kSigmoid = 2; , kTanh = 3; , ;   kSymmRelu = 4; , kSoftSign = 5; , kGauss = 6; , kFastTanh = 7. };  Enum that represents layer activation functions. More...;  ; enum class  EInitialization { ;   kGauss = 'G'; , kUniform = 'U'; , kIdentity = 'I'; , kZero = 'Z'; , ;   kGlorotNormal = 'X'; , kGlorotUniform = 'F'. };  ; enum class  ELossFunction { kCrossEntropy = 'C'; , kMeanSquaredError = 'R'; , kSoftmaxCrossEntropy = 'S'; };  Enum that represents objective functions for the net, i.e. More...;  ; enum class  EnumFunction { ;   ZERO = '0'; , LINEAR = 'L'; , TANH = 'T'; , RELU = 'R'; , ;   SYMMRELU = 'r'; , TANHSHIFT = 't'; , SIGMOID = 's'; , SOFTSIGN = 'S'; , ;   GAUSS = 'G'; , GAUSSCOMPLEMENT = 'C'. };  ; enum class  EnumRegularization { NONE; , L1; , L2; , L1MAX; };  ; enum class  EOptimizer { ;   kSGD = 0; , kAdam = 1; , kAdagrad = 2; , kRMSProp = 3; , ;   kAdadelta = 4. };  Enum representing the optimizer used for training. More...;  ; enum class  EOutputFunction { kIdentity = 'I'; , kSigmoid = 'S'; , kSoftmax = 'M'; };  Enum that represents output functions. More...;  ; enum class  ERegularization { kNone = '0'; , kL1 = '1'; , kL2 = '2'; };  Enum representing the regularization type applied for a given layer. More...;  ; enum  MinimizerType { fSteepest; };  < list all the minimizer types More...;  ; enum class  ModeErrorFunction { SUMOFSQUARES = 'S'; , CROSSENTROPY = 'C'; , CROSSENTROPY_MUTUALEXCLUSIVE = 'M'; };  error functions to be chosen from More...;  ; enum class  ModeOutput { FETCH; };  ; enum class  ModeOutputValues : int { DIRECT = 0x01; , SIGMOID = 0x02; , SOFTMAX = 0x04; , BATCHNORMALIZATION = 0x08; };  ; enum class  WeightInitializationStrategy { XAVIER; , TEST; , LAYERSIZE; , XAVIERUNIFORM; };  weight initialization strategies to be chosen from More...;  . Functions; template<typename Architecture_t > ; void addRegularizationGradients (typename Architecture_t::Mat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:5205,optimiz,optimizer,5205,doc/master/namespaceTMVA_1_1DNN.html,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html,2,['optimiz'],['optimizer']
Performance," && (option < 3)); 2429 fVisOption = option;; 2430 if (fPainter); 2431 fPainter->SetVisOption(option);; 2432}; 2433 ; 2434////////////////////////////////////////////////////////////////////////////////; 2435/// Set visualization option (leaves only OR all volumes); 2436 ; 2437void TGeoManager::ViewLeaves(Bool_t flag); 2438{; 2439 if (flag); 2440 SetVisOption(1);; 2441 else; 2442 SetVisOption(0);; 2443}; 2444 ; 2445////////////////////////////////////////////////////////////////////////////////; 2446/// Set density threshold. Volumes with densities lower than this become; 2447/// transparent.; 2448 ; 2449void TGeoManager::SetVisDensity(Double_t density); 2450{; 2451 fVisDensity = density;; 2452 if (fPainter); 2453 fPainter->ModifiedPad();; 2454}; 2455 ; 2456////////////////////////////////////////////////////////////////////////////////; 2457/// set default level down to which visualization is performed; 2458 ; 2459void TGeoManager::SetVisLevel(Int_t level); 2460{; 2461 if (level > 0) {; 2462 fVisLevel = level;; 2463 fMaxVisNodes = 0;; 2464 if (fgVerboseLevel > 0); 2465 Info(""SetVisLevel"", ""Automatic visible depth disabled"");; 2466 if (fPainter); 2467 fPainter->CountVisibleNodes();; 2468 } else {; 2469 SetMaxVisNodes();; 2470 }; 2471}; 2472 ; 2473////////////////////////////////////////////////////////////////////////////////; 2474/// Sort overlaps by decreasing overlap distance. Extrusions comes first.; 2475 ; 2476void TGeoManager::SortOverlaps(); 2477{; 2478 fOverlaps->Sort();; 2479}; 2480 ; 2481////////////////////////////////////////////////////////////////////////////////; 2482/// Optimize voxelization type for all volumes. Save best choice in a macro.; 2483 ; 2484void TGeoManager::OptimizeVoxels(const char *filename); 2485{; 2486 if (!fTopNode) {; 2487 Error(""OptimizeVoxels"", ""Geometry must be closed first"");; 2488 return;; 2489 }; 2490 std::ofstream out;; 2491 TString fname = filename;; 2492 if (fname.IsNull()); 2493 fname = ""tgeovox.C"";; 2494 out.open(fname, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:87913,perform,performed,87913,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['perform'],['performed']
Performance," &, bool, int)>;  ; using RGeomSignalFunc_t = std::function< void(const std::string &)>;  ; using RVecB = ROOT::VecOps::RVec< bool >;  ; using RVecC = ROOT::VecOps::RVec< char >;  ; using RVecD = ROOT::VecOps::RVec< double >;  ; using RVecF = ROOT::VecOps::RVec< float >;  ; using RVecI = ROOT::VecOps::RVec< int >;  ; using RVecL = ROOT::VecOps::RVec< long int >;  ; using RVecLL = ROOT::VecOps::RVec< long long int >;  ; using RVecU = ROOT::VecOps::RVec< unsigned int >;  ; using RVecUL = ROOT::VecOps::RVec< unsigned long int >;  ; using RVecULL = ROOT::VecOps::RVec< unsigned long long int >;  ; typedef std::map< std::string, std::list< SchemaRuleMap_t > > SchemaRuleClassMap_t;  ; typedef std::map< std::string, std::string > SchemaRuleMap_t;  ; typedef std::list< std::pair< ROOT::Internal::TSchemaType, std::string > > SourceTypeList_t;  ; using TDataFrame = ROOT::RDataFrame;  ; using TSeqI = TSeq< int >;  ; using TSeqL = TSeq< long >;  ; using TSeqU = TSeq< unsigned int >;  ; using TSeqUL = TSeq< unsigned long >;  ; using UInt32_v = UInt_t;  ; using UInt_v = UInt_t;  ; using WebWindowConnectCallback_t = std::function< void(unsigned)>;  function signature for connect/disconnect call-backs argument is connection id ;  ; using WebWindowDataCallback_t = std::function< void(unsigned, const std::string &)>;  function signature for call-backs from the window clients first argument is connection id, second is received data ;  ; using WebWindowShowCallback_t = std::function< bool(RWebWindow &, const RWebDisplayArgs &)>;  function signature for catching show calls of arbitrary RWebWindow if returns true, normal show procedure will not be invoked ;  ; using WebWindowWaitFunc_t = std::function< int(double)>;  function signature for waiting call-backs Such callback used when calling thread need to waits for some special data, but wants to run application event loop As argument, spent time in second will be provided Waiting will be performed until function returns non-zero value ;  .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v630/namespaceROOT.html:10154,perform,performed,10154,doc/v630/namespaceROOT.html,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html,2,['perform'],['performed']
Performance," &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &pars) const;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual bool IsFixedVariable (unsigned int ivar) const;  query if an existing variable is fixed (i.e. ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual bool Minimize ()=0;  method to perform the minimization ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual double MinValue () const =0;  return minimum function value ;  ; virtual unsigned int NCalls () const;  number of function calls to reach the minimum ;  ; virtual unsigned int NDim () const =0;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; virtual unsigned int NFree () const;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total (re-implement if minimizer supports bounded parameter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html:7177,perform,performed,7177,doc/master/classROOT_1_1Math_1_1Minimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html,1,['perform'],['performed']
Performance," &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &pars) const;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual bool IsFixedVariable (unsigned int ivar) const;  query if an existing variable is fixed (i.e. ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool ReleaseVariable (unsigned int ivar);  release an existing variable ;  ; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:5677,perform,performed,5677,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,1,['perform'],['performed']
Performance," &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &pars) const;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual bool IsFixedVariable (unsigned int ivar) const;  query if an existing variable is fixed (i.e. ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Fu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFumiliMinimizer.html:5381,perform,performed,5381,doc/master/classTFumiliMinimizer.html,https://root.cern,https://root.cern/doc/master/classTFumiliMinimizer.html,2,['perform'],['performed']
Performance," &observables, const char *name=nullptr);  remove constraints from pdf and return the unconstrained pdf ;  ; void PrintListContent (const RooArgList &l, std::ostream &os=std::cout);  useful function to print in one line the content of a set with their values ;  ; double PValueToSignificance (double pvalue);  returns one-sided significance corresponding to a p-value ;  ; void RandomizeCollection (RooAbsCollection &set, bool randomizeConstants=true);  assuming all values in set are RooRealVars, randomize their values ;  ; void RemoveConstantParameters (RooArgList &set);  ; void RemoveConstantParameters (RooArgSet *set);  ; bool SetAllConstant (const RooAbsCollection &coll, bool constant=true);  utility function to set all variable constant in a collection (from G. ;  ; void SetParameters (const RooArgSet *desiredVals, RooArgSet *paramsToChange);  ; double SignificanceToPValue (double Z);  returns p-value corresponding to a 1-sided significance ;  ; RooAbsPdf * StripConstraints (RooAbsPdf &pdf, const RooArgSet &observables);  ; void UseNLLOffset (bool on);  function to set a global flag in RooStats to use NLL offset when performing nll computations Note that not all ROoStats tools implement this capabilities ;  . Variables; const ROOT::Math::RootFinder::EType kRootFinderType = ROOT::Math::RootFinder::kBRENT;  . Detailed Description; Namespace for the RooStats classes. ; All the classes of the RooStats package are in the RooStats namespace. In addition the namespace contain a set of utility functions. ; Enumeration Type Documentation. ◆ toysStrategies. enum RooStats::toysStrategies. EnumeratorEQUALTOYSPERDENSITY ; EXPONENTIALTOYDISTRIBUTION . Definition at line 20 of file ToyMCImportanceSampler.h. Function Documentation. ◆ AsimovSignificance(). double RooStats::AsimovSignificance ; (; double ; s, . double ; b, . double ; sigma_b = 0.0 . ). Compute the Asimov Median significance for a Poisson process with s = expected number of signal events, b = expected number of backgr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceRooStats.html:11871,perform,performing,11871,doc/master/namespaceRooStats.html,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html,1,['perform'],['performing']
Performance," &out, const std::vector< TMatrixT< AReal > > &in);  Rearrage data according to time fill B x T x D out with T x B x D matrix in. ;  . Static Private Attributes; static TRandom * fgRandomGen = nullptr;  . #include <TMVA/DNN/Architectures/Reference.h>; Member Typedef Documentation. ◆ Matrix_t. template<typename AReal > . using TMVA::DNN::TReference< AReal >::Matrix_t = TMatrixT<AReal>. Definition at line 58 of file Reference.h. ◆ Scalar_t. template<typename AReal > . using TMVA::DNN::TReference< AReal >::Scalar_t = AReal. Definition at line 57 of file Reference.h. ◆ Tensor_t. template<typename AReal > . using TMVA::DNN::TReference< AReal >::Tensor_t = TMatrixT<AReal>. Definition at line 59 of file Reference.h. Member Function Documentation. ◆ AdamUpdate(). template<typename AReal > . void TMVA::DNN::TReference< AReal >::AdamUpdate ; (; TMatrixT< AReal > & ; A, . const TMatrixT< AReal > & ; M, . const TMatrixT< AReal > & ; V, . AReal ; alpha, . AReal ; eps . ). static . Update functions for ADAM optimizer. ; Adam updates. ; Definition at line 103 of file Arithmetic.hxx. ◆ AdamUpdateFirstMom(). template<typename AReal > . void TMVA::DNN::TReference< AReal >::AdamUpdateFirstMom ; (; TMatrixT< AReal > & ; A, . const TMatrixT< AReal > & ; B, . AReal ; beta . ). static . Definition at line 117 of file Arithmetic.hxx. ◆ AdamUpdateSecondMom(). template<typename AReal > . void TMVA::DNN::TReference< AReal >::AdamUpdateSecondMom ; (; TMatrixT< AReal > & ; A, . const TMatrixT< AReal > & ; B, . AReal ; beta . ). static . Definition at line 129 of file Arithmetic.hxx. ◆ AddBiases(). template<typename AReal > . void TMVA::DNN::TReference< Real_t >::AddBiases ; (; TMatrixT< AReal > & ; A, . const TMatrixT< AReal > & ; biases . ). static . Definition at line 30 of file DenoisePropagation.hxx. ◆ AddConvBiases(). template<typename AReal > . void TMVA::DNN::TReference< AReal >::AddConvBiases ; (; TMatrixT< AReal > & ; output, . const TMatrixT< AReal > & ; biases . ). static . Add the bi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TReference.html:18179,optimiz,optimizer,18179,doc/master/classTMVA_1_1DNN_1_1TReference.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TReference.html,1,['optimiz'],['optimizer']
Performance," &s) override;  Write TString to TBuffer. ;  ; void WriteUChar (UChar_t c) override;  ; void WriteUInt (UInt_t i) override;  ; void WriteULong (ULong_t l) override;  ; void WriteULong64 (ULong64_t l) override;  ; void WriteUShort (UShort_t s) override;  ; UInt_t WriteVersion (const TClass *cl, Bool_t useBcnt=kFALSE) override;  Write class version to I/O buffer. ;  ; UInt_t WriteVersionMemberWise (const TClass *cl, Bool_t useBcnt=kFALSE) override;  Write class version to I/O buffer after setting the kStreamedMemberWise bit in the version number. ;  ;  Public Member Functions inherited from TBufferIO;  ~TBufferIO () override;  destructor ;  ; Bool_t CheckObject (const TObject *obj) override;  Check if the specified object is already in the buffer. ;  ; Bool_t CheckObject (const void *obj, const TClass *ptrClass) override;  Check if the specified object of the specified class is already in the buffer. ;  ; void ForceWriteInfoClones (TClonesArray *a) override;  Make sure TStreamerInfo is not optimized, otherwise it will not be possible to support schema evolution in read mode. ;  ; Int_t GetBufferDisplacement () const override;  ; TProcessID * GetLastProcessID (TRefTable *reftable) const override;  Return the last TProcessID in the file. ;  ; Int_t GetMapCount () const override;  ; void GetMappedObject (UInt_t tag, void *&ptr, TClass *&ClassPtr) const override;  Retrieve the object stored in the buffer's object map at 'tag' Set ptr and ClassPtr respectively to the address of the object and a pointer to its TClass. ;  ; UShort_t GetPidOffset () const override;  ; UInt_t GetTRefExecId () override;  Return the exec id stored in the current TStreamerInfo element. ;  ; Int_t GetVersionOwner () const override;  Return the version number of the owner file. ;  ; void InitMap () override;  Create the fMap container and initialize them with the null object. ;  ; void MapObject (const TObject *obj, UInt_t offset=1) override;  Add object to the fMap container. ;  ; void MapObject (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMessage.html:20339,optimiz,optimized,20339,doc/master/classTMessage.html,https://root.cern,https://root.cern/doc/master/classTMessage.html,1,['optimiz'],['optimized']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooAbsAnaConvPdf.h>. Inheritance diagram for RooAbsAnaConvPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAbsAnaConvPdf() [1/3]. RooAbsAnaConvPdf::RooAbsAnaConvPdf ; (; ). Default constructor, required for persistence. ; Definition at line 85 of file RooAbsAnaConvPdf.cxx. ◆ RooAbsAnaConvPdf() [2/3]. RooAbsAnaConvPdf::RooAbsAnaConvPdf ; (; const char * ; name, . const char * ; title, . const RooResolutionModel & ; model, . RooRealVar & ; cVar . ). Constructor. ; The supplied resolution model must be constructed with the same convoluted variable as this physics model ('convVar') ; Definition at line 97 of file RooAbsAnaConvPdf.cxx. ◆ RooAbsAnaConvPdf() [3/3]. RooAbsAnaConvPdf::RooAbsAnaConvPdf ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsAnaConvPdf.html:78614,cache,cache,78614,doc/master/classRooAbsAnaConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsAnaConvPdf.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooAbsCachedPdf.h>. Inheritance diagram for RooAbsCachedPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ CacheElem. using RooAbsCachedPdf::CacheElem = PdfCacheElem. Definition at line 86 of file RooAbsCachedPdf.h. Constructor & Destructor Documentation. ◆ RooAbsCachedPdf() [1/3]. RooAbsCachedPdf::RooAbsCachedPdf ; (; ). inline . Definition at line 29 of file RooAbsCachedPdf.h. ◆ RooAbsCachedPdf() [2/3]. RooAbsCachedPdf::RooAbsCachedPdf ; (; const char * ; name, . const char * ; title, . int ; ipOrder = 0 . ). Constructor. ; Definition at line 45 of file RooAbsCachedPdf.cxx. ◆ RooAbsCachedPdf() [3/3]. RooAbsCachedPdf::RooAbsCachedPdf ; (; const RooAbsCachedPdf & ; other, . const char * ; name = nullptr . ). C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCachedPdf.html:76476,cache,cache,76476,doc/master/classRooAbsCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsCachedPdf.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooAddPdf.h>. Inheritance diagram for RooAddPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAddPdf() [1/6]. RooAddPdf::RooAddPdf ; (; ). inline . Definition at line 36 of file RooAddPdf.h. ◆ RooAddPdf() [2/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title = nullptr . ). Dummy constructor. ; Definition at line 99 of file RooAddPdf.cxx. ◆ RooAddPdf() [3/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title, . RooAbsPdf & ; pdf1, . RooAbsPdf & ; pdf2, . RooAbsReal & ; coef1 . ). Constructor with two PDFs and one coefficient. ; Definition at line 136 of file RooAddPdf.cxx. ◆ RooAddPdf() [4/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddPdf.html:77994,cache,cache,77994,doc/master/classRooAddPdf.html,https://root.cern,https://root.cern/doc/master/classRooAddPdf.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooArgusBG.h>. Inheritance diagram for RooArgusBG:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooArgusBG() [1/5]. RooArgusBG::RooArgusBG ; (; ). inline . Definition at line 24 of file RooArgusBG.h. ◆ RooArgusBG() [2/5]. RooArgusBG::RooArgusBG ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _m, . RooAbsReal & ; _m0, . RooAbsReal & ; _c, . RooAbsReal & ; _p . ). inline . Definition at line 26 of file RooArgusBG.h. ◆ RooArgusBG() [3/5]. RooArgusBG::RooArgusBG ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _m, . RooAbsReal & ; _m0, . RooAbsReal & ; _c . ). inline . Definition at line 30 of file RooArgusBG.h. ◆ RooArgusBG() [4/5]. RooArgusBG::RooArgusBG ; (; const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooArgusBG.html:73533,cache,cache,73533,doc/master/classRooArgusBG.html,https://root.cern,https://root.cern/doc/master/classRooArgusBG.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooBifurGauss.h>. Inheritance diagram for RooBifurGauss:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooBifurGauss() [1/3]. RooBifurGauss::RooBifurGauss ; (; ). inline . Definition at line 24 of file RooBifurGauss.h. ◆ RooBifurGauss() [2/3]. RooBifurGauss::RooBifurGauss ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _x, . RooAbsReal & ; _mean, . RooAbsReal & ; _sigmaL, . RooAbsReal & ; _sigmaR . ). Definition at line 34 of file RooBifurGauss.cxx. ◆ RooBifurGauss() [3/3]. RooBifurGauss::RooBifurGauss ; (; const RooBifurGauss & ; other, . const char * ; name = nullptr . ). Definition at line 47 of file RooBifurGauss.cxx. Member Function Documentation. ◆ analyticalIntegral(). doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBifurGauss.html:73107,cache,cache,73107,doc/master/classRooBifurGauss.html,https://root.cern,https://root.cern/doc/master/classRooBifurGauss.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooBreitWigner.h>. Inheritance diagram for RooBreitWigner:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooBreitWigner() [1/3]. RooBreitWigner::RooBreitWigner ; (; ). inline . Definition at line 27 of file RooBreitWigner.h. ◆ RooBreitWigner() [2/3]. RooBreitWigner::RooBreitWigner ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _x, . RooAbsReal & ; _mean, . RooAbsReal & ; _width . ). Definition at line 36 of file RooBreitWigner.cxx. ◆ RooBreitWigner() [3/3]. RooBreitWigner::RooBreitWigner ; (; const RooBreitWigner & ; other, . const char * ; name = nullptr . ). Definition at line 48 of file RooBreitWigner.cxx. Member Function Documentation. ◆ analyticalIntegral(). double RooBreitWi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBreitWigner.html:73079,cache,cache,73079,doc/master/classRooBreitWigner.html,https://root.cern,https://root.cern/doc/master/classRooBreitWigner.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooBukinPdf.h>. Inheritance diagram for RooBukinPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooBukinPdf() [1/3]. RooBukinPdf::RooBukinPdf ; (; ). inline . Definition at line 32 of file RooBukinPdf.h. ◆ RooBukinPdf() [2/3]. RooBukinPdf::RooBukinPdf ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _x, . RooAbsReal & ; _Xp, . RooAbsReal & ; _sigp, . RooAbsReal & ; _xi, . RooAbsReal & ; _rho1, . RooAbsReal & ; _rho2 . ). Construct a Bukin PDF. ; Parameters. nameThe name of the PDF for RooFit's bookkeeping. ; titleThe title for e.g. plotting it. ; _xThe variable. ; _XpThe peak position. ; _sigpThe peak width as FWHM divided by 2*sqrt(2*log(2))=2.35 ; _xiPeak asymmetry. Use values ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBukinPdf.html:73286,cache,cache,73286,doc/master/classRooBukinPdf.html,https://root.cern,https://root.cern/doc/master/classRooBukinPdf.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooCBShape.h>. Inheritance diagram for RooCBShape:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooCBShape() [1/3]. RooCBShape::RooCBShape ; (; ). inline . Definition at line 26 of file RooCBShape.h. ◆ RooCBShape() [2/3]. RooCBShape::RooCBShape ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _m, . RooAbsReal & ; _m0, . RooAbsReal & ; _sigma, . RooAbsReal & ; _alpha, . RooAbsReal & ; _n . ). Definition at line 39 of file RooCBShape.cxx. ◆ RooCBShape() [3/3]. RooCBShape::RooCBShape ; (; const RooCBShape & ; other, . const char * ; name = nullptr . ). Definition at line 53 of file RooCBShape.cxx. Member Function Documentation. ◆ analyticalIntegral(). double RooCBShape::analyticalInte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCBShape.html:73097,cache,cache,73097,doc/master/classRooCBShape.html,https://root.cern,https://root.cern/doc/master/classRooCBShape.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooCFunction1Binding.h>. Inheritance diagram for RooCFunction1PdfBinding< VO, VI >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooCFunction1PdfBinding() [1/3]. template<class VO , class VI > . RooCFunction1PdfBinding< VO, VI >::RooCFunction1PdfBinding ; (; ). inline . Definition at line 283 of file RooCFunction1Binding.h. ◆ RooCFunction1PdfBinding() [2/3]. template<class VO , class VI > . RooCFunction1PdfBinding< VO, VI >::RooCFunction1PdfBinding ; (; const char * ; name, . const char * ; title, . VO(*)(VI) ; _func, . RooAbsReal & ; _x . ). Definition at line 320 of file RooCFunction1Binding.h. ◆ RooCFunction1PdfBinding() [3/3]. template<class VO , class VI > . RooCFunction1PdfBinding< VO, VI >::R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction1PdfBinding.html:73102,cache,cache,73102,doc/master/classRooCFunction1PdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction1PdfBinding.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooCFunction2Binding.h>. Inheritance diagram for RooCFunction2PdfBinding< VO, VI1, VI2 >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooCFunction2PdfBinding() [1/3]. template<class VO , class VI1 , class VI2 > . RooCFunction2PdfBinding< VO, VI1, VI2 >::RooCFunction2PdfBinding ; (; ). inline . Definition at line 297 of file RooCFunction2Binding.h. ◆ RooCFunction2PdfBinding() [2/3]. template<class VO , class VI1 , class VI2 > . RooCFunction2PdfBinding< VO, VI1, VI2 >::RooCFunction2PdfBinding ; (; const char * ; name, . const char * ; title, . VO(*)(VI1, VI2) ; _func, . RooAbsReal & ; _x, . RooAbsReal & ; _y . ). Definition at line 334 of file RooCFunction2Binding.h. ◆ RooCFunction2PdfBinding() [3/3]",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction2PdfBinding.html:73179,cache,cache,73179,doc/master/classRooCFunction2PdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction2PdfBinding.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooCFunction3Binding.h>. Inheritance diagram for RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooCFunction3PdfBinding() [1/3]. template<class VO , class VI1 , class VI2 , class VI3 > . RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >::RooCFunction3PdfBinding ; (; ). inline . Definition at line 310 of file RooCFunction3Binding.h. ◆ RooCFunction3PdfBinding() [2/3]. template<class VO , class VI1 , class VI2 , class VI3 > . RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >::RooCFunction3PdfBinding ; (; const char * ; name, . const char * ; title, . VO(*)(VI1, VI2, VI3) ; _func, . RooAbsReal & ; _x, . RooAbsReal & ; _y, . RooAbsReal & ; _z . ). Definition at line 350 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction3PdfBinding.html:73250,cache,cache,73250,doc/master/classRooCFunction3PdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction3PdfBinding.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooCFunction4Binding.h>. Inheritance diagram for RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooCFunction4PdfBinding() [1/3]. template<class VO , class VI1 , class VI2 , class VI3 , class VI4 > . RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >::RooCFunction4PdfBinding ; (; ). inline . Definition at line 299 of file RooCFunction4Binding.h. ◆ RooCFunction4PdfBinding() [2/3]. template<class VO , class VI1 , class VI2 , class VI3 , class VI4 > . RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >::RooCFunction4PdfBinding ; (; const char * ; name, . const char * ; title, . VO(*)(VI1, VI2, VI3, VI4) ; _func, . RooAbsReal & ; _x, . RooAbsReal & ; _y, . Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction4PdfBinding.html:73321,cache,cache,73321,doc/master/classRooCFunction4PdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction4PdfBinding.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooCachedPdf.h>. Inheritance diagram for RooCachedPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooCachedPdf() [1/4]. RooCachedPdf::RooCachedPdf ; (; ). inline . Definition at line 22 of file RooCachedPdf.h. ◆ RooCachedPdf() [2/4]. RooCachedPdf::RooCachedPdf ; (; const char * ; name, . const char * ; title, . RooAbsPdf & ; _pdf, . const RooArgSet & ; cacheObs . ). Constructor taking name, title and function to be cached and fixed choice of variable to cache. ; To control granularity of the binning of the cache histogram set the desired properties in the binning named ""cache"" in the observables of the function. If the fixed set of cache observables does not match the observables defined in the us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCachedPdf.html:76727,cache,cache,76727,doc/master/classRooCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooCachedPdf.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooDstD0BG.h>. Inheritance diagram for RooDstD0BG:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooDstD0BG() [1/3]. RooDstD0BG::RooDstD0BG ; (; ). inline . Definition at line 28 of file RooDstD0BG.h. ◆ RooDstD0BG() [2/3]. RooDstD0BG::RooDstD0BG ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _dm, . RooAbsReal & ; _dm0, . RooAbsReal & ; _c, . RooAbsReal & ; _a, . RooAbsReal & ; _b . ). Definition at line 45 of file RooDstD0BG.cxx. ◆ RooDstD0BG() [3/3]. RooDstD0BG::RooDstD0BG ; (; const RooDstD0BG & ; other, . const char * ; name = nullptr . ). Definition at line 58 of file RooDstD0BG.cxx. Member Function Documentation. ◆ analyticalIntegral(). double RooDstD0BG::analyticalIntegral ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDstD0BG.html:73271,cache,cache,73271,doc/master/classRooDstD0BG.html,https://root.cern,https://root.cern/doc/master/classRooDstD0BG.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooEffProd.h>. Inheritance diagram for RooEffProd:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooEffProd() [1/3]. RooEffProd::RooEffProd ; (; ). inline . Definition at line 22 of file RooEffProd.h. ◆ RooEffProd() [2/3]. RooEffProd::RooEffProd ; (; const char * ; name, . const char * ; title, . RooAbsPdf & ; pdf, . RooAbsReal & ; efficiency . ). Constructs the product of the PDF inPdf with the efficiency function inEff. ; Definition at line 33 of file RooEffProd.cxx. ◆ RooEffProd() [3/3]. RooEffProd::RooEffProd ; (; const RooEffProd & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 45 of file RooEffProd.cxx. Member Function Documentation. ◆ Class(). static TClas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooEffProd.html:73466,cache,cache,73466,doc/master/classRooEffProd.html,https://root.cern,https://root.cern/doc/master/classRooEffProd.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooEfficiency.h>. Inheritance diagram for RooEfficiency:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooEfficiency() [1/3]. RooEfficiency::RooEfficiency ; (; ). inline . Default constructor. ; Definition at line 28 of file RooEfficiency.h. ◆ RooEfficiency() [2/3]. RooEfficiency::RooEfficiency ; (; const char * ; name, . const char * ; title, . const RooAbsReal & ; effFunc, . const RooAbsCategory & ; cat, . const char * ; sigCatName . ). Construct an N+1 dimensional efficiency p.d.f from an N-dimensional efficiency function and a category cat with two states (0,1) that indicate if a given event should be counted as rejected or accepted respectively. ; Definition at line 49 of file RooEfficiency.cxx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooEfficiency.html:73799,cache,cache,73799,doc/master/classRooEfficiency.html,https://root.cern,https://root.cern/doc/master/classRooEfficiency.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooExponential.h>. Inheritance diagram for RooExponential:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooExponential() [1/3]. RooExponential::RooExponential ; (; ). inline . Definition at line 24 of file RooExponential.h. ◆ RooExponential() [2/3]. RooExponential::RooExponential ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; variable, . RooAbsReal & ; coefficient, . bool ; negateCoefficient = false . ). Definition at line 42 of file RooExponential.cxx. ◆ RooExponential() [3/3]. RooExponential::RooExponential ; (; const RooExponential & ; other, . const char * ; name = nullptr . ). Definition at line 53 of file RooExponential.cxx. Member Function Documentation. ◆ analyticalIntegr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExponential.html:73398,cache,cache,73398,doc/master/classRooExponential.html,https://root.cern,https://root.cern/doc/master/classRooExponential.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooFFTConvPdf.h>. Inheritance diagram for RooFFTConvPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ BufStrat. enum RooFFTConvPdf::BufStrat. EnumeratorExtend ; Mirror ; Flat . Definition at line 47 of file RooFFTConvPdf.h. Constructor & Destructor Documentation. ◆ RooFFTConvPdf() [1/4]. RooFFTConvPdf::RooFFTConvPdf ; (; ). inline . Definition at line 28 of file RooFFTConvPdf.h. ◆ RooFFTConvPdf() [2/4]. RooFFTConvPdf::RooFFTConvPdf ; (; const char * ; name, . const char * ; title, . RooRealVar & ; convVar, . RooAbsPdf & ; pdf1, . RooAbsPdf & ; pdf2, . Int_t ; ipOrder = 2 . ). Constructor for numerical (FFT) convolution of PDFs. ; Parameters. [in]nameName of this PDF ; [in]titleTitle for plotting this PDF ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFFTConvPdf.html:83938,cache,cache,83938,doc/master/classRooFFTConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooFFTConvPdf.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooFunctor1DBinding.h>. Inheritance diagram for RooFunctor1DPdfBinding:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooFunctor1DPdfBinding() [1/3]. RooFunctor1DPdfBinding::RooFunctor1DPdfBinding ; (; ). inline . Definition at line 60 of file RooFunctor1DBinding.h. ◆ RooFunctor1DPdfBinding() [2/3]. RooFunctor1DPdfBinding::RooFunctor1DPdfBinding ; (; const char * ; name, . const char * ; title, . const ROOT::Math::IBaseFunctionOneDim & ; ftor, . RooAbsReal & ; vars . ). Definition at line 80 of file RooFunctor1DBinding.cxx. ◆ RooFunctor1DPdfBinding() [3/3]. RooFunctor1DPdfBinding::RooFunctor1DPdfBinding ; (; const RooFunctor1DPdfBinding & ; other, . const char * ; name = nullptr . ). Definition at li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFunctor1DPdfBinding.html:73046,cache,cache,73046,doc/master/classRooFunctor1DPdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooFunctor1DPdfBinding.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooFunctorBinding.h>. Inheritance diagram for RooFunctorPdfBinding:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooFunctorPdfBinding() [1/3]. RooFunctorPdfBinding::RooFunctorPdfBinding ; (; ). default . ◆ RooFunctorPdfBinding() [2/3]. RooFunctorPdfBinding::RooFunctorPdfBinding ; (; const char * ; name, . const char * ; title, . const ROOT::Math::IBaseFunctionMultiDim & ; ftor, . const RooArgList & ; v . ). Create a RooFit PDF that makes ftor usable as a PDF in RooFit. ; Parameters. nameName of the object. ; titleTitle (e.g. for plotting) ; ftorFunctor instance to be evaluated and normalised. ; vRooFit variables to be passed to the function. . Definition at line 108 of file RooFunctorBinding.cxx. ◆ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFunctorPdfBinding.html:73876,cache,cache,73876,doc/master/classRooFunctorPdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooFunctorPdfBinding.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooGamma.h>. Inheritance diagram for RooGamma:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooGamma() [1/3]. RooGamma::RooGamma ; (; ). inline . Definition at line 22 of file RooGamma.h. ◆ RooGamma() [2/3]. RooGamma::RooGamma ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _x, . RooAbsReal & ; _gamma, . RooAbsReal & ; _beta, . RooAbsReal & ; _mu . ). Definition at line 61 of file RooGamma.cxx. ◆ RooGamma() [3/3]. RooGamma::RooGamma ; (; const RooGamma & ; other, . const char * ; name = nullptr . ). Definition at line 75 of file RooGamma.cxx. Member Function Documentation. ◆ analyticalIntegral(). double RooGamma::analyticalIntegral ; (; Int_t ; code, . const char * ; rangeName = n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGamma.html:73821,cache,cache,73821,doc/master/classRooGamma.html,https://root.cern,https://root.cern/doc/master/classRooGamma.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooGaussian.h>. Inheritance diagram for RooGaussian:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooGaussian() [1/4]. RooGaussian::RooGaussian ; (; ). inline . Definition at line 26 of file RooGaussian.h. ◆ RooGaussian() [2/4]. RooGaussian::RooGaussian ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _x, . RooAbsReal & ; _mean, . RooAbsReal & ; _sigma . ). inline . Definition at line 28 of file RooGaussian.h. ◆ RooGaussian() [3/4]. RooGaussian::RooGaussian ; (; const char * ; name, . const char * ; title, . RooAbsReal::Ref ; _x, . RooAbsReal::Ref ; _mean, . RooAbsReal::Ref ; _sigma . ). Definition at line 36 of file RooGaussian.cxx. ◆ RooGaussian() [4/4]. RooGaussian::RooGaussian ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGaussian.html:73297,cache,cache,73297,doc/master/classRooGaussian.html,https://root.cern,https://root.cern/doc/master/classRooGaussian.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooGenericPdf.h>. Inheritance diagram for RooGenericPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooGenericPdf() [1/4]. RooGenericPdf::RooGenericPdf ; (; ). Definition at line 56 of file RooGenericPdf.cxx. ◆ ~RooGenericPdf(). RooGenericPdf::~RooGenericPdf ; (; ). override . Definition at line 58 of file RooGenericPdf.cxx. ◆ RooGenericPdf() [2/4]. RooGenericPdf::RooGenericPdf ; (; const char * ; name, . const char * ; title, . const char * ; formula, . const RooArgList & ; dependents . ). Constructor with a name, title, formula expression and a list of variables. ; Definition at line 86 of file RooGenericPdf.cxx. ◆ RooGenericPdf() [3/4]. RooGenericPdf::RooGenericPdf ; (; const char * ; name, . c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGenericPdf.html:74938,cache,cache,74938,doc/master/classRooGenericPdf.html,https://root.cern,https://root.cern/doc/master/classRooGenericPdf.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooHistConstraint.h>. Inheritance diagram for RooHistConstraint:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooHistConstraint() [1/3]. RooHistConstraint::RooHistConstraint ; (; ). inline . Definition at line 19 of file RooHistConstraint.h. ◆ RooHistConstraint() [2/3]. RooHistConstraint::RooHistConstraint ; (; const char * ; name, . const char * ; title, . const RooArgSet & ; phfSet, . int ; threshold = 1000000 . ). Create a new RooHistConstraint. ; Parameters. [in]nameName of the PDF. This is used to identify it in a likelihood model. ; [in]titleTitle for plotting etc. ; [in]phfSetSet of parametrised histogram functions (RooParamHistFunc). ; [in]thresholdThreshold (bin content) up to which statist",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistConstraint.html:73494,cache,cache,73494,doc/master/classRooHistConstraint.html,https://root.cern,https://root.cern/doc/master/classRooHistConstraint.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooHistPdf.h>. Inheritance diagram for RooHistPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooHistPdf() [1/6]. RooHistPdf::RooHistPdf ; (; ). inline . Definition at line 32 of file RooHistPdf.h. ◆ RooHistPdf() [2/6]. RooHistPdf::RooHistPdf ; (; const char * ; name, . const char * ; title, . const RooArgSet & ; vars, . const RooDataHist & ; dhist, . Int_t ; intOrder = 0 . ). Constructor from a RooDataHist. ; RooDataHist dimensions can be either real or discrete. See RooDataHist::RooDataHist for details on the binning. RooHistPdf neither owns or clone 'dhist' and the user must ensure the input histogram exists for the entire life span of this PDF. ; Definition at line 54 of file RooHistPdf.cxx. ◆",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistPdf.html:76510,cache,cache,76510,doc/master/classRooHistPdf.html,https://root.cern,https://root.cern/doc/master/classRooHistPdf.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooIntegralMorph.h>. Inheritance diagram for RooIntegralMorph:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooIntegralMorph() [1/3]. RooIntegralMorph::RooIntegralMorph ; (; ). default . ◆ RooIntegralMorph() [2/3]. RooIntegralMorph::RooIntegralMorph ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _pdf1, . RooAbsReal & ; _pdf2, . RooAbsReal & ; _x, . RooAbsReal & ; _alpha, . bool ; cacheAlpha = false . ). Constructor with observables x, pdf shapes pdf1 and pdf2 which represent the shapes at the end points of the interpolation parameter alpha If doCacheAlpha is true, a two-dimensional cache is constructed in both alpha and x. ; Definition at line 101 of file RooIntegralMorph.cxx. ◆ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooIntegralMorph.html:80606,cache,cache,80606,doc/master/classRooIntegralMorph.html,https://root.cern,https://root.cern/doc/master/classRooIntegralMorph.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooJeffreysPrior.h>. Inheritance diagram for RooJeffreysPrior:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooJeffreysPrior() [1/3]. RooJeffreysPrior::RooJeffreysPrior ; (; ). inline . Definition at line 20 of file RooJeffreysPrior.h. ◆ RooJeffreysPrior() [2/3]. RooJeffreysPrior::RooJeffreysPrior ; (; const char * ; name, . const char * ; title, . RooAbsPdf & ; nominal, . const RooArgList & ; paramSet, . const RooArgList & ; obsSet . ). Construct a new JeffreysPrior. ; Parameters. [in]nameName of this object. ; [in]titleTitle (for plotting) ; [in]nominalThe PDF to base Jeffrey's prior on. ; [in]paramSetParameters of the PDF. ; [in]obsSetObservables of the PDF. . Definition at line 38 of file RooJef",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooJeffreysPrior.html:73755,cache,cache,73755,doc/master/classRooJeffreysPrior.html,https://root.cern,https://root.cern/doc/master/classRooJeffreysPrior.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooKeysPdf.h>. Inheritance diagram for RooKeysPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ Mirror. enum RooKeysPdf::Mirror. EnumeratorNoMirror ; MirrorLeft ; MirrorRight ; MirrorBoth ; MirrorAsymLeft ; MirrorAsymLeftRight ; MirrorAsymRight ; MirrorLeftAsymRight ; MirrorAsymBoth . Definition at line 26 of file RooKeysPdf.h. Constructor & Destructor Documentation. ◆ RooKeysPdf() [1/4]. RooKeysPdf::RooKeysPdf ; (; ). coverity[UNINIT_CTOR] ; Definition at line 55 of file RooKeysPdf.cxx. ◆ RooKeysPdf() [2/4]. RooKeysPdf::RooKeysPdf ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; x, . RooDataSet & ; data, . Mirror ; mirror = NoMirror, . double ; rho = 1 . ). cache stuff about x ; Definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooKeysPdf.html:74808,cache,cache,74808,doc/master/classRooKeysPdf.html,https://root.cern,https://root.cern/doc/master/classRooKeysPdf.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooLandau.h>. Inheritance diagram for RooLandau:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooLandau() [1/4]. RooLandau::RooLandau ; (; ). inline . Definition at line 26 of file RooLandau.h. ◆ RooLandau() [2/4]. RooLandau::RooLandau ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _x, . RooAbsReal & ; _mean, . RooAbsReal & ; _sigma . ). inline . Definition at line 28 of file RooLandau.h. ◆ RooLandau() [3/4]. RooLandau::RooLandau ; (; const char * ; name, . const char * ; title, . RooAbsReal::Ref ; _x, . RooAbsReal::Ref ; _mean, . RooAbsReal::Ref ; _sigma . ). Definition at line 38 of file RooLandau.cxx. ◆ RooLandau() [4/4]. RooLandau::RooLandau ; (; const RooLandau & ; other, . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLandau.html:73113,cache,cache,73113,doc/master/classRooLandau.html,https://root.cern,https://root.cern/doc/master/classRooLandau.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooLegacyExpPoly.h>. Inheritance diagram for RooLegacyExpPoly:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooLegacyExpPoly() [1/3]. RooLegacyExpPoly::RooLegacyExpPoly ; (; ). inline . Definition at line 20 of file RooLegacyExpPoly.h. ◆ RooLegacyExpPoly() [2/3]. RooLegacyExpPoly::RooLegacyExpPoly ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; x, . const RooArgList & ; coefList, . int ; lowestOrder = 1 . ). Create a polynomial in the variable x. ; Parameters. [in]nameName of the PDF ; [in]titleTitle for plotting the PDF ; [in]xThe variable of the polynomial ; [in]coefListThe coefficients \( a_i \) ; [in]lowestOrder[optional] Truncate the sum such that it skips the lower orders: ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLegacyExpPoly.html:73715,cache,cache,73715,doc/master/classRooLegacyExpPoly.html,https://root.cern,https://root.cern/doc/master/classRooLegacyExpPoly.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooLognormal.h>. Inheritance diagram for RooLognormal:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooLognormal() [1/3]. RooLognormal::RooLognormal ; (; ). inline . Definition at line 19 of file RooLognormal.h. ◆ RooLognormal() [2/3]. RooLognormal::RooLognormal ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _x, . RooAbsReal & ; _m0, . RooAbsReal & ; _k, . bool ; useStandardParametrization = false . ). Definition at line 40 of file RooLognormal.cxx. ◆ RooLognormal() [3/3]. RooLognormal::RooLognormal ; (; const RooLognormal & ; other, . const char * ; name = nullptr . ). Definition at line 62 of file RooLognormal.cxx. Member Function Documentation. ◆ analyticalIntegral(). double R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLognormal.html:73949,cache,cache,73949,doc/master/classRooLognormal.html,https://root.cern,https://root.cern/doc/master/classRooLognormal.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooMomentMorph.h>. Inheritance diagram for RooMomentMorph:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ Setting. enum RooMomentMorph::Setting. EnumeratorLinear ; NonLinear ; NonLinearPosFractions ; NonLinearLinFractions ; SineLinear . Definition at line 31 of file RooMomentMorph.h. Constructor & Destructor Documentation. ◆ RooMomentMorph() [1/4]. RooMomentMorph::RooMomentMorph ; (; ). coverity[UNINIT_CTOR] ; Definition at line 38 of file RooMomentMorph.cxx. ◆ RooMomentMorph() [2/4]. RooMomentMorph::RooMomentMorph ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _m, . const RooArgList & ; varList, . const RooArgList & ; pdfList, . const RooArgList & ; mrefList, . Setting ; setting = NonLi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMomentMorph.html:74163,cache,cache,74163,doc/master/classRooMomentMorph.html,https://root.cern,https://root.cern/doc/master/classRooMomentMorph.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooMultiVarGaussian.h>. Inheritance diagram for RooMultiVarGaussian:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooMultiVarGaussian() [1/6]. RooMultiVarGaussian::RooMultiVarGaussian ; (; ). inline . Definition at line 34 of file RooMultiVarGaussian.h. ◆ RooMultiVarGaussian() [2/6]. RooMultiVarGaussian::RooMultiVarGaussian ; (; const char * ; name, . const char * ; title, . const RooArgList & ; xvec, . const RooArgList & ; mu, . const TMatrixDBase & ; covMatrix . ). Definition at line 44 of file RooMultiVarGaussian.cxx. ◆ RooMultiVarGaussian() [3/6]. RooMultiVarGaussian::RooMultiVarGaussian ; (; const char * ; name, . const char * ; title, . const RooArgList & ; xvec, . const RooFitResult & ; fr, .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMultiVarGaussian.html:74365,cache,cache,74365,doc/master/classRooMultiVarGaussian.html,https://root.cern,https://root.cern/doc/master/classRooMultiVarGaussian.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooNDKeysPdf.h>. Inheritance diagram for RooNDKeysPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ Mirror. enum RooNDKeysPdf::Mirror. EnumeratorNoMirror ; MirrorLeft ; MirrorRight ; MirrorBoth ; MirrorAsymLeft ; MirrorAsymLeftRight ; MirrorAsymRight ; MirrorLeftAsymRight ; MirrorAsymBoth . Definition at line 48 of file RooNDKeysPdf.h. Constructor & Destructor Documentation. ◆ RooNDKeysPdf() [1/9]. RooNDKeysPdf::RooNDKeysPdf ; (; ). default . ◆ RooNDKeysPdf() [2/9]. RooNDKeysPdf::RooNDKeysPdf ; (; const char * ; name, . const char * ; title, . const RooArgList & ; varList, . const RooDataSet & ; data, . TString ; options = ""ma"", . double ; rho = 1, . double ; nSigma = 3, . bool ; rotate = true, . bool ; s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNDKeysPdf.html:79127,cache,cache,79127,doc/master/classRooNDKeysPdf.html,https://root.cern,https://root.cern/doc/master/classRooNDKeysPdf.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooNonCentralChiSquare.h>. Inheritance diagram for RooNonCentralChiSquare:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooNonCentralChiSquare() [1/3]. RooNonCentralChiSquare::RooNonCentralChiSquare ; (; ). inline . Definition at line 22 of file RooNonCentralChiSquare.h. ◆ RooNonCentralChiSquare() [2/3]. RooNonCentralChiSquare::RooNonCentralChiSquare ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _x, . RooAbsReal & ; _k, . RooAbsReal & ; _lambda . ). Definition at line 62 of file RooNonCentralChiSquare.cxx. ◆ RooNonCentralChiSquare() [3/3]. RooNonCentralChiSquare::RooNonCentralChiSquare ; (; const RooNonCentralChiSquare & ; other, . const char * ; name = nullptr . ). Definition a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNonCentralChiSquare.html:74451,cache,cache,74451,doc/master/classRooNonCentralChiSquare.html,https://root.cern,https://root.cern/doc/master/classRooNonCentralChiSquare.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooNumConvPdf.h>. Inheritance diagram for RooNumConvPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooNumConvPdf() [1/3]. RooNumConvPdf::RooNumConvPdf ; (; ). Definition at line 83 of file RooNumConvPdf.cxx. ◆ RooNumConvPdf() [2/3]. RooNumConvPdf::RooNumConvPdf ; (; const char * ; name, . const char * ; title, . RooRealVar & ; convVar, . RooAbsPdf & ; pdf, . RooAbsPdf & ; resmodel . ). Definition at line 89 of file RooNumConvPdf.cxx. ◆ RooNumConvPdf() [3/3]. RooNumConvPdf::RooNumConvPdf ; (; const RooNumConvPdf & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 110 of file RooNumConvPdf.cxx. ◆ ~RooNumConvPdf(). RooNumConvPdf::~RooNumConvPdf ; (; ). override . D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumConvPdf.html:76221,cache,cache,76221,doc/master/classRooNumConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooNumConvPdf.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooParametricStepFunction.h>. Inheritance diagram for RooParametricStepFunction:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooParametricStepFunction() [1/3]. RooParametricStepFunction::RooParametricStepFunction ; (; ). inline . Definition at line 29 of file RooParametricStepFunction.h. ◆ RooParametricStepFunction() [2/3]. RooParametricStepFunction::RooParametricStepFunction ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; x, . const RooArgList & ; coefList, . TArrayD const & ; limits, . Int_t ; nBins = 1 . ). Constructor. ; Definition at line 91 of file RooParametricStepFunction.cxx. ◆ RooParametricStepFunction() [3/3]. RooParametricStepFunction::RooParametricStepFunction ; (; c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooParametricStepFunction.html:77209,cache,cache,77209,doc/master/classRooParametricStepFunction.html,https://root.cern,https://root.cern/doc/master/classRooParametricStepFunction.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooPoisson.h>. Inheritance diagram for RooPoisson:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooPoisson() [1/4]. RooPoisson::RooPoisson ; (; ). inline . Definition at line 21 of file RooPoisson.h. ◆ RooPoisson() [2/4]. RooPoisson::RooPoisson ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _x, . RooAbsReal & ; _mean, . bool ; noRounding = false . ). inline . Definition at line 23 of file RooPoisson.h. ◆ RooPoisson() [3/4]. RooPoisson::RooPoisson ; (; const char * ; name, . const char * ; title, . RooAbsReal::Ref ; _x, . RooAbsReal::Ref ; _mean, . bool ; noRounding = false . ). Constructor. ; Definition at line 30 of file RooPoisson.cxx. ◆ RooPoisson() [4/4]. RooPoisson::RooPoiss",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPoisson.html:73322,cache,cache,73322,doc/master/classRooPoisson.html,https://root.cern,https://root.cern/doc/master/classRooPoisson.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooPolynomial.h>. Inheritance diagram for RooPolynomial:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooPolynomial() [1/4]. RooPolynomial::RooPolynomial ; (; ). inline . Definition at line 27 of file RooPolynomial.h. ◆ RooPolynomial() [2/4]. RooPolynomial::RooPolynomial ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; x . ). Definition at line 83 of file RooPolynomial.cxx. ◆ RooPolynomial() [3/4]. RooPolynomial::RooPolynomial ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; x, . const RooArgList & ; coefList, . Int_t ; lowestOrder = 1 . ). Create a polynomial in the variable x. ; Parameters. [in]nameName of the PDF ; [in]titleTitle for plotting the PDF ; [in]xThe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPolynomial.html:73867,cache,cache,73867,doc/master/classRooPolynomial.html,https://root.cern,https://root.cern/doc/master/classRooPolynomial.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooPowerSum.h>. Inheritance diagram for RooPowerSum:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooPowerSum() [1/3]. RooPowerSum::RooPowerSum ; (; ). inline . Definition at line 22 of file RooPowerSum.h. ◆ RooPowerSum() [2/3]. RooPowerSum::RooPowerSum ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; x, . const RooArgList & ; coefList, . const RooArgList & ; expList . ). Create a power law in the variable x. ; Parameters. [in]nameName of the PDF ; [in]titleTitle for plotting the PDF ; [in]xThe variable of the polynomial ; [in]coefListThe coefficients \( a_i \) ; [in]expListThe exponentials \( b_i \) ; \[; \sum_{i=0}^{n} a_{i} * x^{b_{i}}; \]. This means that RooPowerSum powl(""pow""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPowerSum.html:73351,cache,cache,73351,doc/master/classRooPowerSum.html,https://root.cern,https://root.cern/doc/master/classRooPowerSum.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooProjectedPdf.h>. Inheritance diagram for RooProjectedPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooProjectedPdf() [1/3]. RooProjectedPdf::RooProjectedPdf ; (; ). Default constructor. ; Definition at line 44 of file RooProjectedPdf.cxx. ◆ RooProjectedPdf() [2/3]. RooProjectedPdf::RooProjectedPdf ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _intpdf, . const RooArgSet & ; intObs . ). Construct projection of input pdf '_intpdf' over observables 'intObs'. ; Definition at line 53 of file RooProjectedPdf.cxx. ◆ RooProjectedPdf() [3/3]. RooProjectedPdf::RooProjectedPdf ; (; const RooProjectedPdf & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProjectedPdf.html:74259,cache,cache,74259,doc/master/classRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classRooProjectedPdf.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooResolutionModel.h>. Inheritance diagram for RooResolutionModel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooResolutionModel() [1/3]. RooResolutionModel::RooResolutionModel ; (; ). inlinedefault . ◆ RooResolutionModel() [2/3]. RooResolutionModel::RooResolutionModel ; (; const char * ; name, . const char * ; title, . RooAbsRealLValue & ; _x . ). Constructor with convolution variable 'x'. ; The convolution variable needs to be convertible to real values, and be able to give information about its range. This is supported by e.g. RooRealVar or RooLinearVar, which accepts offsetting and scaling an observable. ; Definition at line 81 of file RooResolutionModel.cxx. ◆ RooResolutionModel() [3/3]. RooR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooResolutionModel.html:76305,cache,cache,76305,doc/master/classRooResolutionModel.html,https://root.cern,https://root.cern/doc/master/classRooResolutionModel.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooSimultaneous.h>. Inheritance diagram for RooSimultaneous:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooSimultaneous() [1/7]. RooSimultaneous::RooSimultaneous ; (; ). inline . Definition at line 58 of file RooSimultaneous.h. ◆ RooSimultaneous() [2/7]. RooSimultaneous::RooSimultaneous ; (; const char * ; name, . const char * ; title, . RooAbsCategoryLValue & ; inIndexCat . ). Constructor with index category. ; PDFs associated with indexCat states can be added after construction with the addPdf() function.; RooSimultaneous can function without having a PDF associated with every single state. The normalization in such cases is taken from the number of registered PDFs, but getVal() will assert if w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimultaneous.html:78288,cache,cache,78288,doc/master/classRooSimultaneous.html,https://root.cern,https://root.cern/doc/master/classRooSimultaneous.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooTFnPdfBinding.h>. Inheritance diagram for RooTFnPdfBinding:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooTFnPdfBinding() [1/3]. RooTFnPdfBinding::RooTFnPdfBinding ; (; ). default . ◆ RooTFnPdfBinding() [2/3]. RooTFnPdfBinding::RooTFnPdfBinding ; (; const char * ; name, . const char * ; title, . TF1 * ; func, . const RooArgList & ; list . ). Definition at line 28 of file RooTFnPdfBinding.cxx. ◆ RooTFnPdfBinding() [3/3]. RooTFnPdfBinding::RooTFnPdfBinding ; (; const RooTFnPdfBinding & ; other, . const char * ; name = nullptr . ). Definition at line 38 of file RooTFnPdfBinding.cxx. Member Function Documentation. ◆ Class(). static TClass * RooTFnPdfBinding::Class ; (; ). static . ReturnsTClass des",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTFnPdfBinding.html:72966,cache,cache,72966,doc/master/classRooTFnPdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooTFnPdfBinding.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooUniform.h>. Inheritance diagram for RooUniform:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooUniform() [1/3]. RooUniform::RooUniform ; (; ). inline . Definition at line 26 of file RooUniform.h. ◆ RooUniform() [2/3]. RooUniform::RooUniform ; (; const char * ; name, . const char * ; title, . const RooArgSet & ; _x . ). Definition at line 32 of file RooUniform.cxx. ◆ RooUniform() [3/3]. RooUniform::RooUniform ; (; const RooUniform & ; other, . const char * ; name = nullptr . ). Definition at line 41 of file RooUniform.cxx. Member Function Documentation. ◆ analyticalIntegral(). double RooUniform::analyticalIntegral ; (; Int_t ; code, . const char * ; rangeName = nullptr . ); const. overridevirtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooUniform.html:72606,cache,cache,72606,doc/master/classRooUniform.html,https://root.cern,https://root.cern/doc/master/classRooUniform.html,1,['cache'],['cache']
Performance," &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooVoigtian.h>. Inheritance diagram for RooVoigtian:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooVoigtian() [1/3]. RooVoigtian::RooVoigtian ; (; ). inline . Definition at line 24 of file RooVoigtian.h. ◆ RooVoigtian() [2/3]. RooVoigtian::RooVoigtian ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _x, . RooAbsReal & ; _mean, . RooAbsReal & ; _width, . RooAbsReal & ; _sigma, . bool ; doFast = false . ). Construct a RooVoigtian PDF, which represents the convolution of a Breit-Wigner with a Gaussian. ; Parameters. nameName that identifies the PDF in computations. ; titleTitle for plotting. ; _xThe observable for the PDF. ; _meanThe mean of the distribution. ; _widthThe full width ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooVoigtian.html:74148,cache,cache,74148,doc/master/classRooVoigtian.html,https://root.cern,https://root.cern/doc/master/classRooVoigtian.html,1,['cache'],['cache']
Performance," & ; obs, . RooArgSet & ; optNodes, . RooLinkedList & ; processedNodes . ). overridevirtual . Intercept calls to perform automatic optimization of cache mode operation. ; Forward calls to existing cache elements and save configuration of cache mode optimization so that it can be applied on new cache elements upon insertion ; Reimplemented from RooAbsCache.; Definition at line 129 of file RooObjCacheManager.cxx. ◆ printCompactTreeHook(). void RooObjCacheManager::printCompactTreeHook ; (; std::ostream & ; os, . const char * ; indent . ). overridevirtual . Add details on cache contents when printing in tree mode. ; Reimplemented from RooCacheManager< RooAbsCacheElement >.; Definition at line 194 of file RooObjCacheManager.cxx. ◆ redirectServersHook(). bool RooObjCacheManager::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursive . ). overridevirtual . Intercept server redirect calls. ; If clearOnRedirect was set, sterilize the cache (i.e. keep the structure but delete all contents). If not forward serverRedirect to cache elements ; Reimplemented from RooCacheManager< RooAbsCacheElement >.; Definition at line 84 of file RooObjCacheManager.cxx. ◆ setClearOnRedirect(). void RooObjCacheManager::setClearOnRedirect ; (; bool ; flag). inline . Definition at line 50 of file RooObjCacheManager.h. ◆ sterilize(). void RooObjCacheManager::sterilize ; (; ). overridevirtual . Clear the cache payload but retain slot mapping w.r.t to normalization and integration sets. ; Reimplemented from RooCacheManager< RooAbsCacheElement >.; Definition at line 152 of file RooObjCacheManager.cxx. ◆ Streamer(). void RooObjCacheManager::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from RooCacheManager< RooAbsCacheElement >. ◆ StreamerNVirtual(). void RooObjCacheManager::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 62 of file RooObjCacheManager.h. Member Data D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooObjCacheManager.html:11236,cache,cache,11236,doc/master/classRooObjCacheManager.html,https://root.cern,https://root.cern/doc/master/classRooObjCacheManager.html,1,['cache'],['cache']
Performance," 'maxSize' different normalization/ projection; configurations can be cached. ; . Function Members (Methods); public:. virtual~RooCacheManager<vector<double> >(); Int_tcacheSize() const; static TClass*Class(); virtual voidRooAbsCache::findConstantNodes(const RooArgSet&, RooArgSet&, RooLinkedList&); vector<double>*getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); vector<double>*getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx, const char* isetRangeName); vector<double>*getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); vector<double>*getObjByIndex(Int_t index) const; virtual voidinsertObjectHook(vector<double>&); virtual TClass*IsA() const; Int_tlastIndex() const; const RooNameSet*nameSet1ByIndex(Int_t index) const; const RooNameSet*nameSet2ByIndex(Int_t index) const; RooCacheManager<vector<double> >&operator=(const RooCacheManager<vector<double> >&); virtual voidoperModeHook(); virtual voidRooAbsCache::optimizeCacheMode(const RooArgSet&, RooArgSet&, RooLinkedList&); virtual voidprintCompactTreeHook(ostream&, const char*); virtual Bool_tredirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); voidreset(); RooCacheManager<vector<double> >(Int_t maxSize = 2); RooCacheManager<vector<double> >(RooAbsArg* owner, Int_t maxSize = 2); RooCacheManager<vector<double> >(const RooCacheManager<vector<double> >& other, RooAbsArg* owner = 0); Int_tsetObj(const RooArgSet* nset, vector<double>* obj, const TNamed* isetRangeName = 0); Int_tsetObj(const RooArgSet* nset, const RooArgSet* iset, vector<double>* obj, const TNamed* isetRangeName = 0); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidsterilize(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidwireCache(). Data Members; protected:. Int_t_lastIndex! Last slot accessed; Int_t_maxSize! Maximum size; vector<RooNormSetCache>_n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCacheManager_vector_double___.html:2120,optimiz,optimizeCacheMode,2120,root/html602/RooCacheManager_vector_double___.html,https://root.cern,https://root.cern/root/html602/RooCacheManager_vector_double___.html,2,['optimiz'],['optimizeCacheMode']
Performance," 'mod2' - sensitivity modifiers - see TGLCamera::AdjustAndClampVal(). Returns kTRUE is redraw required (camera change), kFALSE otherwise. ; Reimplemented in TGLOrthoCamera.; Definition at line 1046 of file TGLCamera.cxx. ◆ DrawDebugAids(). void TGLCamera::DrawDebugAids ; (; ); const. Draw out some debugging aids for the camera: . The frustum used to create the current interest box (RED); The same frustum as a squared off box (ORANGE); The axis aligned version of the frustum used as interest box basis (YELLOW); The current interest box (BLUE) . Definition at line 793 of file TGLCamera.cxx. ◆ EyeDirection(). TGLVector3 TGLCamera::EyeDirection ; (; ); const. Extract the camera eye direction (vector), running from EyePoint() Camera must have valid frustum cache - call Apply() after last modification, before using. ; Definition at line 236 of file TGLCamera.cxx. ◆ EyePoint(). TGLVertex3 TGLCamera::EyePoint ; (; ); const. Return the camera eye point (vertex) in world space Camera must have valid frustum cache - call Apply() after last modification, before using. ; Definition at line 219 of file TGLCamera.cxx. ◆ Frustum(). TGLBoundingBox TGLCamera::Frustum ; (; Bool_t ; asBox = kTRUE); const. private . expansion c.f. aligned current frustum box ; Return the current camera frustum.; If asBox == kFALSE return a true frustum (truncated square based pyramid). If asBox == kTRUE return a true box, using the far clipping plane intersection projected back to the near plane.; Camera must have valid frustum cache - call Apply() after last modification, before using; Note: TGLBoundingBox is not really valid when filled with truncated pyramid; this is used as a visual debug aid only so ok. . Definition at line 171 of file TGLCamera.cxx. ◆ FrustumCenter(). TGLVertex3 TGLCamera::FrustumCenter ; (; ); const. Find the center of the camera frustum from intersection of planes This method will work even with parallel left/right & top/bottom and infinite eye point of ortho cameras Camera must ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLCamera.html:23930,cache,cache,23930,doc/master/classTGLCamera.html,https://root.cern,https://root.cern/doc/master/classTGLCamera.html,1,['cache'],['cache']
Performance," ( fEnv && fEnv->fObject ) {; 151 switch( idx ) {; 152 case 0:; 153 fEnv->fStart = fFirst.invoke(fEnv);; 154 fEnv->fIdx = idx;; 155 break;; 156 default:; 157 fEnv->fIdx = idx - fEnv->fIdx;; 158 if (! fEnv->fStart ) fEnv->fStart = fFirst.invoke(fEnv);; 159 fNext.invoke(fEnv);; 160 fEnv->fIdx = idx;; 161 break;; 162 }; 163 typedef ROOT::TCollectionProxyInfo::Environ<std::pair<size_t,Bool_t> > EnvType_t;; 164 EnvType_t *e = (EnvType_t*)fEnv;; 165 return &(e->fIterator.second);; 166 }; 167 Fatal(""TGenVectorProxy"",""At> Logic error - no proxy object set."");; 168 return 0;; 169 }; 170 ; 171 void DeleteItem(Bool_t force, void* ptr) const override; 172 {; 173 // Call to delete/destruct individual item; 174 if ( force && ptr ) {; 175 fVal->DeleteItem(ptr);; 176 }; 177 }; 178};; 179 ; 180/*; 181\class TGenListProxy; 182\ingroup IO; 183Local optimization class.; 184 ; 185Collection proxies get copied. On copy we switch the type of the; 186proxy to the concrete STL type. The concrete types are optimized; 187for element access.; 188**/; 189 ; 190class TGenListProxy : public TGenVectorProxy {; 191public:; 192 // Standard Destructor; 193 TGenListProxy(const TGenCollectionProxy& c) : TGenVectorProxy(c); 194 {; 195 }; 196 // Standard Destructor; 197 ~TGenListProxy() override; 198 {; 199 }; 200 // Return the address of the value at index 'idx'; 201 void* At(UInt_t idx) override; 202 {; 203 if ( fEnv && fEnv->fObject ) {; 204 switch( idx ) {; 205 case 0:; 206 fEnv->fIdx = idx;; 207 return fEnv->fStart = fFirst.invoke(fEnv);; 208 default: {; 209 fEnv->fIdx = idx - fEnv->fIdx;; 210 if (! fEnv->fStart ) fEnv->fStart = fFirst.invoke(fEnv);; 211 void* result = fNext.invoke(fEnv);; 212 fEnv->fIdx = idx;; 213 return result;; 214 }; 215 }; 216 }; 217 Fatal(""TGenListProxy"",""At> Logic error - no proxy object set."");; 218 return nullptr;; 219 }; 220};; 221 ; 222/**; 223\class TGenSetProxy; 224\ingroup IO; 225Localoptimization class.; 226 ; 227Collection proxies get copied. On copy we switch the ty",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:5456,optimiz,optimized,5456,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['optimiz'],['optimized']
Performance," (!HasInterpreterInfo() && !fCollectionProxy) {; 5559 // There is no dictionary at all and we do not have; 5560 // the services of a collection proxy available, so; 5561 // use the streamer info to approximate calling the; 5562 // array destructor.; 5563 ; 5564 Bool_t inRepo = kTRUE;; 5565 Bool_t currentVersion = kFALSE;; 5566 ; 5567 // Was this array object allocated through TClass?; 5568 Version_t objVer = -1;; 5569 {; 5570 R__LOCKGUARD2(fOVRMutex);; 5571 RepoCont_t::iterator iter = fObjectVersionRepository.find(p);; 5572 if (iter == fObjectVersionRepository.end()) {; 5573 // No, it wasn't, we cannot know what to do.; 5574 //Error(""DeleteArray"", ""Attempt to delete unregistered array object, element type '%s', at address %p!"", GetName(), p);; 5575 inRepo = kFALSE;; 5576 } else {; 5577 for (; (iter != fObjectVersionRepository.end()) && (iter->first == p); ++iter) {; 5578 objVer = iter->second;; 5579 if (objVer == fClassVersion) {; 5580 currentVersion = kTRUE;; 5581 break;; 5582 }; 5583 }; 5584 }; 5585 }; 5586 ; 5587 if (!inRepo || currentVersion) {; 5588 // The object was allocated using code for the same class version; 5589 // as is loaded now. We may proceed without worry.; 5590 TVirtualStreamerInfo* si = GetStreamerInfo();; 5591 if (si) {; 5592 si->DeleteArray(ary, dtorOnly);; 5593 } else {; 5594 Error(""DeleteArray"", ""No streamer info available for class '%s' version %d at address %p, cannot destruct object!"", GetName(), fClassVersion, ary);; 5595 Error(""DeleteArray"", ""length of fStreamerInfo is %d"", fStreamerInfo->GetSize());; 5596 Int_t i = fStreamerInfo->LowerBound();; 5597 for (Int_t v = 0; v < fStreamerInfo->GetSize(); ++v, ++i) {; 5598 Error(""DeleteArray"", ""fStreamerInfo->At(%d): %p"", v, fStreamerInfo->At(i));; 5599 if (fStreamerInfo->At(i)) {; 5600 Error(""DeleteArray"", ""Doing Dump() ..."");; 5601 ((TVirtualStreamerInfo*)fStreamerInfo->At(i))->Dump();; 5602 }; 5603 }; 5604 }; 5605 } else {; 5606 // The loaded class version is not the same as the version of th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:213841,load,loaded,213841,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['load'],['loaded']
Performance," (!HasInterpreterInfo() && !fCollectionProxy) {; 5626 // There is no dictionary at all and we do not have; 5627 // the services of a collection proxy available, so; 5628 // use the streamer info to approximate calling the; 5629 // array destructor.; 5630 ; 5631 Bool_t inRepo = kTRUE;; 5632 Bool_t currentVersion = kFALSE;; 5633 ; 5634 // Was this array object allocated through TClass?; 5635 Version_t objVer = -1;; 5636 {; 5637 R__LOCKGUARD2(fOVRMutex);; 5638 RepoCont_t::iterator iter = fObjectVersionRepository.find(p);; 5639 if (iter == fObjectVersionRepository.end()) {; 5640 // No, it wasn't, we cannot know what to do.; 5641 //Error(""DeleteArray"", ""Attempt to delete unregistered array object, element type '%s', at address %p!"", GetName(), p);; 5642 inRepo = kFALSE;; 5643 } else {; 5644 for (; (iter != fObjectVersionRepository.end()) && (iter->first == p); ++iter) {; 5645 objVer = iter->second;; 5646 if (objVer == fClassVersion) {; 5647 currentVersion = kTRUE;; 5648 break;; 5649 }; 5650 }; 5651 }; 5652 }; 5653 ; 5654 if (!inRepo || currentVersion) {; 5655 // The object was allocated using code for the same class version; 5656 // as is loaded now. We may proceed without worry.; 5657 TVirtualStreamerInfo* si = GetStreamerInfo();; 5658 if (si) {; 5659 si->DeleteArray(ary, dtorOnly);; 5660 } else {; 5661 Error(""DeleteArray"", ""No streamer info available for class '%s' version %d at address %p, cannot destruct object!"", GetName(), fClassVersion, ary);; 5662 Error(""DeleteArray"", ""length of fStreamerInfo is %d"", fStreamerInfo->GetSize());; 5663 Int_t i = fStreamerInfo->LowerBound();; 5664 for (Int_t v = 0; v < fStreamerInfo->GetSize(); ++v, ++i) {; 5665 Error(""DeleteArray"", ""fStreamerInfo->At(%d): %p"", v, fStreamerInfo->At(i));; 5666 if (fStreamerInfo->At(i)) {; 5667 Error(""DeleteArray"", ""Doing Dump() ..."");; 5668 ((TVirtualStreamerInfo*)fStreamerInfo->At(i))->Dump();; 5669 }; 5670 }; 5671 }; 5672 } else {; 5673 // The loaded class version is not the same as the version of th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:216592,load,loaded,216592,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['load'],['loaded']
Performance," (!cached.EndsWith(""/"")); 4632 cached += ""/"";; 4633 ; 4634 if (gSystem->AccessPathName(cached, kFileExists)) {; 4635 // try to create it; 4636 gSystem->mkdir(cached, kTRUE);; 4637 if (gSystem->AccessPathName(cached, kFileExists)) {; 4638 ::Error(""TFile::SetCacheFileDir"", ""no sufficient permissions on cache directory %s or cannot create it"", TString(cachedir).Data());; 4639 fgCacheFileDir = """";; 4640 return kFALSE;; 4641 }; 4642 gSystem->Chmod(cached, 0700);; 4643 }; 4644 if (gSystem->AccessPathName(cached, kWritePermission)); 4645 gSystem->Chmod(cached, 0700);; 4646 fgCacheFileDir = cached;; 4647 fgCacheFileDisconnected = operatedisconnected;; 4648 fgCacheFileForce = forcecacheread;; 4649 return kTRUE;; 4650}; 4651 ; 4652////////////////////////////////////////////////////////////////////////////////; 4653/// Get the directory where to locally stage/cache remote files.; 4654 ; 4655const char *TFile::GetCacheFileDir(); 4656{; 4657 return fgCacheFileDir;; 4658}; 4659 ; 4660////////////////////////////////////////////////////////////////////////////////; 4661/// Try to shrink the cache to the desired size.; 4662///; 4663/// With the clenupinterval you can specify the minimum amount of time after; 4664/// the previous cleanup before the cleanup operation is repeated in; 4665/// the cache directory; 4666 ; 4667Bool_t TFile::ShrinkCacheFileDir(Long64_t shrinksize, Long_t cleanupinterval); 4668{; 4669 if (fgCacheFileDir == """") {; 4670 return kFALSE;; 4671 }; 4672 ; 4673 // check the last clean-up in the cache; 4674 Long_t id;; 4675 Long64_t size;; 4676 Long_t flags;; 4677 Long_t modtime;; 4678 ; 4679 TString cachetagfile = fgCacheFileDir;; 4680 cachetagfile += "".tag.ROOT.cache"";; 4681 if (!gSystem->GetPathInfo(cachetagfile, &id, &size, &flags, &modtime)) {; 4682 // check the time passed since last cache cleanup; 4683 Long_t lastcleanuptime = ((Long_t)time(0) - modtime);; 4684 if (lastcleanuptime < cleanupinterval) {; 4685 ::Info(""TFile::ShrinkCacheFileDir"", ""clean-up is ski",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:170408,cache,cache,170408,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['cache'],['cache']
Performance," (%d)."",; 7306 GetName(),slot);; 7307 }; 7308 fStreamerInfo->AddAtAndExpand(info, slot);; 7309 if (fState <= kForwardDeclared) {; 7310 fState = kEmulated;; 7311 if (fCheckSum==0 && slot==fClassVersion) fCheckSum = info->GetCheckSum();; 7312 }; 7313 }; 7314}; 7315 ; 7316////////////////////////////////////////////////////////////////////////////////; 7317/// Remove and delete the StreamerInfo in the given slot.; 7318/// Update the slot accordingly.; 7319 ; 7320void TClass::RemoveStreamerInfo(Int_t slot); 7321{; 7322 if (fStreamerInfo->GetSize() >= slot) {; 7323 R__LOCKGUARD(gInterpreterMutex);; 7324 TVirtualStreamerInfo *info = (TVirtualStreamerInfo*)fStreamerInfo->At(slot);; 7325 fStreamerInfo->RemoveAt(fClassVersion);; 7326 if (fLastReadInfo.load() == info); 7327 fLastReadInfo = nullptr;; 7328 if (fCurrentInfo.load() == info); 7329 fCurrentInfo = nullptr;; 7330 delete info;; 7331 if (fState == kEmulated && fStreamerInfo->GetEntries() == 0) {; 7332 fState = kForwardDeclared;; 7333 }; 7334 }; 7335}; 7336 ; 7337////////////////////////////////////////////////////////////////////////////////; 7338/// Return true is the Hash/RecursiveRemove setup is consistent, i.e. when all; 7339/// classes in the class hierarchy that overload TObject::Hash do call; 7340/// ROOT::CallRecursiveRemoveIfNeeded in their destructor.; 7341/// i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation.; 7342/// This routines is used for a small subset of the class for which we need; 7343/// the answer before gROOT is properly initialized.; 7344 ; 7345Bool_t ROOT::Internal::HasConsistentHashMember(const char *cname); 7346{; 7347 // Hand selection of correct classes, those classes should be; 7348 // cross-checked in testHashRecursiveRemove.cxx; 7349 static const char *handVerified[] = {; 7350 ""TEnvRec"", ""TDataType"", ""TObjArray"", ""TList"", ""THashList"",; 7351 ""TClass"", ""TCling"", ""TInterpreter"", ""TMethod"", ""ROOT::Internal::TCheckHashRecursiveRemoveConsistency"",; 7352 ""TCh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:281181,load,load,281181,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['load'],['load']
Performance," (%d)."",; 7373 GetName(),slot);; 7374 }; 7375 fStreamerInfo->AddAtAndExpand(info, slot);; 7376 if (fState <= kForwardDeclared) {; 7377 fState = kEmulated;; 7378 if (fCheckSum==0 && slot==fClassVersion) fCheckSum = info->GetCheckSum();; 7379 }; 7380 }; 7381}; 7382 ; 7383////////////////////////////////////////////////////////////////////////////////; 7384/// Remove and delete the StreamerInfo in the given slot.; 7385/// Update the slot accordingly.; 7386 ; 7387void TClass::RemoveStreamerInfo(Int_t slot); 7388{; 7389 if (fStreamerInfo->GetSize() >= slot) {; 7390 R__LOCKGUARD(gInterpreterMutex);; 7391 TVirtualStreamerInfo *info = (TVirtualStreamerInfo*)fStreamerInfo->At(slot);; 7392 fStreamerInfo->RemoveAt(fClassVersion);; 7393 if (fLastReadInfo.load() == info); 7394 fLastReadInfo = nullptr;; 7395 if (fCurrentInfo.load() == info); 7396 fCurrentInfo = nullptr;; 7397 delete info;; 7398 if (fState == kEmulated && fStreamerInfo->GetEntries() == 0) {; 7399 fState = kForwardDeclared;; 7400 }; 7401 }; 7402}; 7403 ; 7404////////////////////////////////////////////////////////////////////////////////; 7405/// Return true is the Hash/RecursiveRemove setup is consistent, i.e. when all; 7406/// classes in the class hierarchy that overload TObject::Hash do call; 7407/// ROOT::CallRecursiveRemoveIfNeeded in their destructor.; 7408/// i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation.; 7409/// This routines is used for a small subset of the class for which we need; 7410/// the answer before gROOT is properly initialized.; 7411 ; 7412Bool_t ROOT::Internal::HasConsistentHashMember(const char *cname); 7413{; 7414 // Hand selection of correct classes, those classes should be; 7415 // cross-checked in testHashRecursiveRemove.cxx; 7416 static const char *handVerified[] = {; 7417 ""TEnvRec"", ""TDataType"", ""TObjArray"", ""TList"", ""THashList"",; 7418 ""TClass"", ""TCling"", ""TInterpreter"", ""TMethod"", ""ROOT::Internal::TCheckHashRecursiveRemoveConsistency"",; 7419 ""TCh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:283932,load,load,283932,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['load'],['load']
Performance," ((TF2*)f1)->Integral(cache[2] - 0.5*cache[3],cache[2] + 0.5*cache[3],cache[4] - 0.5*cache[5],cache[4] + 0.5*cache[5])/(cache[3]*cache[5]);; 1841 } else {; 1842 fu = ((TF3*)f1)->Integral(cache[2] - 0.5*cache[3],cache[2] + 0.5*cache[3],cache[4] - 0.5*cache[5],cache[4] + 0.5*cache[5],cache[6] - 0.5*cache[7],cache[6] + 0.5*cache[7])/(cache[3]*cache[5]*cache[7]);; 1843 }; 1844 if (TF1::RejectedPoint()) {cache += fPointSize; continue;}; 1845 eu = cache[1];; 1846 Derivatives(df,x);; 1847 Int_t n = 0;; 1848 fsum = (fu-cu)/eu;; 1849 if (flag!=1) {; 1850 for (j=0;j<npar;j++) {; 1851 if (pl0[j]>0){; 1852 df[n] = df[j]/eu;; 1853 // left only non-fixed param derivatives / by Sigma; 1854 gin[j] += df[n]*fsum;; 1855 n++;; 1856 }; 1857 }; 1858 Int_t l = 0;; 1859 for (j=0;j<n;j++); 1860 for (Int_t k=0;k<=j;k++); 1861 zik[l++] += df[j]*df[k];; 1862 }; 1863 f += .5*fsum*fsum;; 1864 npfit++;; 1865 cache += fPointSize;; 1866 }; 1867 f1->SetNumberFitPoints(npfit);; 1868 delete[] df;; 1869}; 1870 ; 1871////////////////////////////////////////////////////////////////////////////////; 1872/// Minimization function for H1s using a Likelihood method.; 1873/// Basically, it forms the likelihood by determining the Poisson; 1874/// probability that given a number of entries in a particular bin,; 1875/// the fit would predict it's value. This is then done for each bin,; 1876/// and the sum of the logs is taken as the likelihood.; 1877///; 1878/// Default method (function evaluated at center of bin); 1879/// for each point the cache contains the following info; 1880/// - 1D : bc,e,xc (bin content, error, x of center of bin); 1881/// - 2D : bc,e,xc,yc; 1882/// - 3D : bc,e,xc,yc,zc; 1883 ; 1884void TFumili::FitLikelihood(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag); 1885{; 1886 Foption_t fitOption = GetFitOption();; 1887 if (fitOption.Integral) {; 1888 FitLikelihoodI(npar,gin,f,u,flag);; 1889 return;; 1890 }; 1891 Double_t cu,fu,fobs,fsub;; 1892 Double_t dersum[100];; 1893 Doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8cxx_source.html:53565,cache,cache,53565,doc/master/TFumili_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8cxx_source.html,1,['cache'],['cache']
Performance," () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; virtual void setCachedValue (double, bool=true);  Overwrite the current value stored in this object, making it look like this object computed that value. ;  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooAbsData *dset;  ;  R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooArgSet *depList;  ;  R__DEPRECATED (6, 36, ""Use checkObservables()."") inline bool checkDependents(const RooArgSet *nset) const;  ;  R__DEPRECATED (6, 36, ""Use recursiveCheckObservables()."") inline bool recursiveCheckDependents(const RooArgSet *nset) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStringVar.html:19480,cache,cacheUniqueSuffix,19480,doc/master/classRooStringVar.html,https://root.cern,https://root.cern/doc/master/classRooStringVar.html,2,['cache'],"['cache', 'cacheUniqueSuffix']"
Performance," () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; virtual void setCachedValue (double, bool=true);  Overwrite the current value stored in this object, making it look like this object computed that value. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:22999,cache,cacheUniqueSuffix,22999,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,2,['cache'],"['cache', 'cacheUniqueSuffix']"
Performance," () const;  Get the canvas's title. ;  ; std::string GetUID () const;  Return unique identifier for the canvas Used in iPython display. ;  ; int GetWidth () const;  Get canvas width. ;  ; std::string GetWindowAddr () const;  Returns window name used to display canvas. ;  ; std::string GetWindowUrl (bool remote);  Returns window URL which can be used for connection. ;  ; void Hide ();  Hide all canvas displays. ;  ; bool IsModified () const;  Returns true is canvas was modified since last painting. ;  ; bool IsShown () const;  returns true if Show() method was called ;  ; bool IsUpdated () const;  returns true if Update() method was called ;  ; void Modified ();  ; void Modified (std::shared_ptr< RDrawable > drawable);  Set newest version to specified drawable. ;  ; void Remove ();  Remove canvas from global canvas lists, will be destroyed when shared_ptr will be removed. ;  ; void ResolveSharedPtrs ();  To resolve problem with storing of shared pointers Call this method when reading canvas from the file Can be called many times - after reinitialization of shared pointers no changes will be performed. ;  ; void Run (double tm=0.);  Run canvas functionality for given time (in seconds) ;  ; bool SaveAs (const std::string &filename);  Save canvas in image file. ;  ; void SetHeight (int height);  Set canvas height. ;  ; void SetSize (int width, int height);  Set canvas pixel size - width and height. ;  ; RCanvas & SetTitle (const std::string &title);  Set the canvas's title. ;  ; void SetWidth (int width);  Set canvas width. ;  ; void Show (const std::string &where="""");  Display the canvas. ;  ; void Update (bool async=false, CanvasCallback_t callback=nullptr);  update drawing ;  ;  Public Member Functions inherited from ROOT::Experimental::RPadBase;  ~RPadBase () override;  ; template<class T , class... ARGS> ; std::shared_ptr< T > Add (ARGS... args);  Add drawable of specified class T. ;  ; std::shared_ptr< RFrame > AddFrame ();  Add a frame object for the pad. ;  ; st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html:2716,perform,performed,2716,doc/master/classROOT_1_1Experimental_1_1RCanvas.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas.html,1,['perform'],['performed']
Performance," () override;  ; Int_t fill () override;  Interface function to TTree::Fill. ;  ; virtual const RooArgSet * get () const;  ; const RooArgSet * get (Int_t index) const override;  Load the n-th data point (n='index') into the variables of this dataset, and return a pointer to the RooArgSet that holds them. ;  ; virtual const RooArgSet * get (Int_t index) const=0;  ; RooAbsData::RealSpans getBatches (std::size_t first, std::size_t len) const override;  Return batches of the data columns for the requested events. ;  ; RooAbsData::CategorySpans getCategoryBatches (std::size_t, std::size_t len) const override;  ; std::span< const double > getWeightBatch (std::size_t first, std::size_t len) const override;  Return the weights of all events in the range [first, first+len). ;  ; TClass * IsA () const override;  ; bool isWeighted () const override;  ; void loadValues (const RooAbsDataStore *tds, const RooFormulaVar *select=nullptr, const char *rangeName=nullptr, std::size_t nStart=0, std::size_t nStop=std::numeric_limits< std::size_t >::max()) override;  ; RooAbsDataStore * merge (const RooArgSet &allvars, std::list< RooAbsDataStore * > dstoreList) override;  Merge columns of supplied data set(s) with this data set. ;  ; Int_t numEntries () const override;  ; std::vector< RealFullVector * > & realfStoreList ();  ; std::vector< RealVector * > & realStoreList ();  ; void recalculateCache (const RooArgSet *, Int_t firstEvent, Int_t lastEvent, Int_t stepSize, bool skipZeroWeights) override;  ; std::unique_ptr< RooAbsDataStore > reduce (RooStringView name, RooStringView title, const RooArgSet &vars, const RooFormulaVar *cutVar, const char *cutRange, std::size_t nStart, std::size_t nStop) override;  ; void reset () override;  ; void resetBuffers () override;  ; void resetCache () override;  ; const RooArgSet & row ();  ; void setArgStatus (const RooArgSet &set, bool active) override;  Disabling of branches is (intentionally) not implemented in vector data stores (as the doesn't res",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooVectorDataStore.html:4156,load,loadValues,4156,doc/master/classRooVectorDataStore.html,https://root.cern,https://root.cern/doc/master/classRooVectorDataStore.html,1,['load'],['loadValues']
Performance, ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; void fillCacheObject (FuncCacheElem &cacheFunc) const override;  Fill cache using running integral cache elements calculate() method with specification of cdf-specific boundary conditions. ;  ;  Protected Member Functions inherited from RooNumRunningInt; RooFit::OwningPtr< RooArgSet > actualObservables (const RooArgSet &nset) const override;  Return observable in nset to be cached by RooAbsCachedPdf this is always the x observable that is integrated. ;  ; RooFit::OwningPtr< RooArgSet > actualParameters (const RooArgSet &nset) const override;  Return the parameters of the cache created by RooAbsCachedPdf. ;  ; const char * binningName () const override;  ; FuncCacheElem * createCache (const RooArgSet *nset) const override;  Create custom cache element for running integral calculations. ;  ; double evaluate () const override;  Dummy function that is never called. ;  ; void fillCacheObject (FuncCacheElem &cacheFunc) const override;  Fill the cache object by calling its calculate() method. ;  ; const char * inputBaseName () const override;  Return unique name for RooAbsCachedPdf cache components constructed from input function name. ;  ; const char * payloadUniqueSuffix () const override;  ;  Protected Member Functions inherited from RooAbsCachedReal; TString cacheNameSuffix (const RooArgSet &nset) const;  Construct unique suffix name for cache p.d.f object. ;  ; FuncCacheElem * getCache (const RooArgSet *nset) const;  Retrieve cache corresponding to observables in nset. ;  ;  Protected Member Functions inherite,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumCdf.html:50265,cache,cache,50265,doc/master/classRooNumCdf.html,https://root.cern,https://root.cern/doc/master/classRooNumCdf.html,1,['cache'],['cache']
Performance," ();  ; static const char * DeclFileName ();  ; static TSelector * GetSelector (const char *filename);  The code in filename is loaded (interpreted or compiled, see below), filename must contain a valid class implementation derived from TSelector. ;  ; static bool IsStandardDraw (const char *selec);  Find out if this is a standard selection used for Draw actions (either TSelectorDraw, TProofDraw or deriving from them). ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; void CheckCache (const char *fn);  Check the memory cache associated with file 'fn'. ;  ; void CopyFile (const char *fn);  Copy file 'fn' to fDestDir. ;  ; void ReleaseCache (const char *fn);  Release the memory cache associated with file 'fn'. ;  ; void RemoveFile (const char *fn);  Physically remove the file 'fn'. ;  . Private Attributes; TString fDestDir;  ; TPBHandleDSType * fType;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelHandleDataSet.html:11146,cache,cache,11146,doc/master/classTSelHandleDataSet.html,https://root.cern,https://root.cern/doc/master/classTSelHandleDataSet.html,1,['cache'],['cache']
Performance," ();  ; virtual InfoListRet GetStreamerInfoListImpl (bool lookupSICache);  See documentation of GetStreamerInfoList for more details. ;  ; Int_t MakeProjectParMake (const char *packname, const char *filename);  Create makefile at 'filemake' for PAR package 'pack'. ;  ; Int_t MakeProjectParProofInf (const char *packname, const char *proofinfdir);  Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'. ;  ; Int_t ReadBufferViaCache (char *buf, Int_t len);  Read buffer via cache. ;  ; virtual Int_t SysRead (Int_t fd, void *buf, Int_t len);  Interface to system read. All arguments like in POSIX read(). ;  ; virtual Long64_t SysSeek (Int_t fd, Long64_t offset, Int_t whence);  Interface to system lseek. ;  ; virtual Int_t SysSync (Int_t fd);  Interface to system fsync. All arguments like in POSIX fsync(). ;  ; virtual Int_t SysWrite (Int_t fd, const void *buf, Int_t len);  Interface to system write. All arguments like in POSIX write(). ;  ; Int_t WriteBufferViaCache (const char *buf, Int_t len);  Write buffer via cache. ;  ;  Protected Member Functions inherited from TDirectoryFile; void BuildDirectoryFile (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.) ;  ; void InitDirectoryFile (TClass *cl=nullptr);  Initialize the key associated with this directory (and the related data members. ;  ;  Protected Member Functions inherited from TDirectory;  TDirectory (const TDirectory &directory)=delete;  ; void BuildDirectory (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; Bool_t cd1 (const char *path);  flag to add histograms, graphs,etc to the directory ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.). ;  ; void FillFullPath (TString &buf) const;  Recursive method to fill full path for directory. ;  ; void operator= (const TDirectory &)=delete;  ; void RegisterContext (TCo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetFile.html:33046,cache,cache,33046,doc/master/classTNetFile.html,https://root.cern,https://root.cern/doc/master/classTNetFile.html,1,['cache'],['cache']
Performance," ();  Perform test evaluation in all booked methods. ;  ; virtual void TestMethod (TString methodname, TString methodtitle);  Lets perform test an specific ml method. ;  ; virtual void TestMethod (Types::EMVA method, TString methodtitle);  Lets perform test an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ; virtual void Train ();  Method to train all booked ml methods. ;  ; virtual void TrainMethod (TString methodname, TString methodtitle);  Lets train an specific ml method. ;  ; virtual void TrainMethod (Types::EMVA method, TString methodtitle);  Lets train an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; std::vector< OptionMap > & GetMethods ();  Method get the Booked methods in a option map object. ;  ; Bool_t HasMethod (TString methodname, TString methodtitle);  function to check methods booked ;  ; Bool_t IsModelPersistence ();  Method to see if the algorithm model is saved in xml or serialized files. ;  ; Bool_t IsSilentFile ();  Method to see if a file is available to save results. ;  ; Bool_t IsVerbose ();  Method to see if the algorithm should print extra information. ;  ; virtual void ParseOptions ();  Method to parse the internal option string. ;  ; void SetDataLoader (DataLoader *dalaloader);  Method to set the pointer to TMVA::DataLoader object. ;  ; void SetFile (TFile *file);  Method to set the pointer to TFile object, with a writ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:2271,perform,perform,2271,doc/master/classTMVA_1_1Experimental_1_1Classification.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html,1,['perform'],['perform']
Performance," (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoParallelWorld ();  ;  TGeoParallelWorld (const char *name, TGeoManager *mgr);  Default constructor. ;  ;  ~TGeoParallelWorld () override;  Destructor. ;  ; void AddNode (const char *path);  Add a node normally to this world. Overlapping nodes not allowed. ;  ; void AddOverlap (const char *volname, Bool_t activate=kTRUE);  To use this optimization, the user should declare the full list of volumes which may overlap with any of the physical nodes of the parallel world. ;  ; void AddOverlap (TGeoVolume *vol, Bool_t activate=kTRUE);  To use this optimization, the user should declare the full list of volumes which may overlap with any of the physical nodes of the parallel world. ;  ; void BuildBVH ();  Build the BVH acceleration structure. ;  ; bool CheckBVH (void *, size_t) const;  Check/validate the BVH acceleration structure. ;  ; void CheckOverlaps (Double_t ovlp=0.001);  Check overlaps within a tolerance value. ;  ; Bool_t CloseGeometry ();  The main geometry must be closed. ;  ; void Draw (Option_t *option) override;  Draw the parallel world. ;  ; TGeoPhysicalNode * FindNextBoundary (Double_t point[3], Double_t dir[3], Double_t &step, Double_t stepmax=1.E30);  ; TGeoPhysicalNode * FindNode (Double_t point[3]);  ; AccelerationMode const & GetAccelerationMode () const;  ; TGeoManager * GetGeometry () const;  ; TGeoVolume * GetVolume () const;  ; TClass * IsA () const override;  ; Bool_t IsClosed () const;  ; Bool_t IsUsingOverlaps () const;  ; void PrintBVH () const;  Prints the BVH. ;  ; Int_t PrintDetectedOverlaps () const;  Print the overlaps which ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoParallelWorld.html:2295,optimiz,optimization,2295,doc/master/classTGeoParallelWorld.html,https://root.cern,https://root.cern/doc/master/classTGeoParallelWorld.html,1,['optimiz'],['optimization']
Performance," (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 88 of file TAdvancedGraphicsDialog.h. ◆ DoChangedScanPar(). void TAdvancedGraphicsDialog::DoChangedScanPar ; (; Int_t ; selected). Changes the Min and Max default values of the scan method, depending on the selected parameter. ; Definition at line 326 of file TAdvancedGraphicsDialog.cxx. ◆ DoDraw(). void TAdvancedGraphicsDialog::DoDraw ; (; ). Calls the corresponding method, depending on the selected tab. ; Definition at line 337 of file TAdvancedGraphicsDialog.cxx. ◆ DrawConfidenceLevels(). void TAdvancedGraphicsDialog::DrawConfidenceLevels ; (; ). private . Generates all necessary data for the Scan method from its tab. ; Then it call Virtual Fitter to perform it. ; Definition at line 405 of file TAdvancedGraphicsDialog.cxx. ◆ DrawContour(). void TAdvancedGraphicsDialog::DrawContour ; (; ). private . Generates all necessary data for the Contour method from its tab. ; Then it call Virtual Fitter to perform it. ; Definition at line 352 of file TAdvancedGraphicsDialog.cxx. ◆ DrawScan(). void TAdvancedGraphicsDialog::DrawScan ; (; ). private . Generates all necessary data for the Scan method from its tab. ; Then it call Virtual Fitter to perform it. ; Definition at line 383 of file TAdvancedGraphicsDialog.cxx. ◆ IsA(). TClass * TAdvancedGraphicsDialog::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 88 of file TAdvancedGraphicsDialog.h. ◆ operator=(). TAdvancedGraphicsDialog & TAdvancedGraphicsDialog::operator= ; (; const TAdvancedGraphicsDialog & ; ). private . ◆ Streamer(). void TAdvancedGraphicsDialog::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TAdvancedGraphicsDialog::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 88 of file TAdvancedGraphics",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAdvancedGraphicsDialog.html:41703,perform,perform,41703,doc/master/classTAdvancedGraphicsDialog.html,https://root.cern,https://root.cern/doc/master/classTAdvancedGraphicsDialog.html,1,['perform'],['perform']
Performance," (; ); const. inlinevirtual . Definition at line 38 of file TFileCacheWrite.h. ◆ IsA(). TClass * TFileCacheWrite::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 44 of file TFileCacheWrite.h. ◆ operator=(). TFileCacheWrite & TFileCacheWrite::operator= ; (; const TFileCacheWrite & ; ). privatedelete . ◆ Print(). void TFileCacheWrite::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print class internal structure. ; Reimplemented from TObject.; Definition at line 94 of file TFileCacheWrite.cxx. ◆ ReadBuffer(). Int_t TFileCacheWrite::ReadBuffer ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Called by the read cache to check if the requested data is not in the write cache buffer. ; Returns -1 if data not in write cache, 0 otherwise. ; Definition at line 108 of file TFileCacheWrite.cxx. ◆ SetFile(). void TFileCacheWrite::SetFile ; (; TFile * ; file). virtual . Set the file using this cache. ; Any write not yet flushed will be lost. ; Definition at line 153 of file TFileCacheWrite.cxx. ◆ Streamer(). void TFileCacheWrite::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TFileCacheWrite::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 44 of file TFileCacheWrite.h. ◆ WriteBuffer(). Int_t TFileCacheWrite::WriteBuffer ; (; const char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Write buffer at position pos in the write buffer. ; The function returns 1 if the buffer has been successfully entered into the write buffer. The function returns 0 in case WriteBuffer() was recusively called via Flush(). The function returns -1 in case of error. ; Definition at line 121 of file TFileCacheWrite.cxx. Member Data Documentation. ◆ fBuffer. char* TFileCacheWrite::fBuffer. protected . [fBufferSize] buffer of contiguous prefetched ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileCacheWrite.html:14316,cache,cache,14316,doc/master/classTFileCacheWrite.html,https://root.cern,https://root.cern/doc/master/classTFileCacheWrite.html,1,['cache'],['cache']
Performance," (; TList * ; active, . Long_t ; timeout . ). virtual . Select on active file descriptors (called by TMonitor). ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 445 of file TSystem.cxx. ◆ SendBuf(). int TSystem::SendBuf ; (; int ; sock, . const void * ; buffer, . int ; length . ). virtual . Send a buffer headed by a length indicator. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 2427 of file TSystem.cxx. ◆ SendRaw(). int TSystem::SendRaw ; (; int ; sock, . const void * ; buffer, . int ; length, . int ; flag . ). virtual . Send exactly length bytes from buffer. ; Use opt to send out-of-band data (see TSocket). ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 2409 of file TSystem.cxx. ◆ SetAclicMode(). void TSystem::SetAclicMode ; (; EAclicMode ; mode). virtual . AclicMode indicates whether the library should be built in debug mode or optimized. ; The values are:; TSystem::kDefault : compile the same as the current ROOT; TSystem::kDebug : compiled in debug mode; TSystem::kOpt : optimized the library . Definition at line 4077 of file TSystem.cxx. ◆ SetBuildDir(). void TSystem::SetBuildDir ; (; const char * ; build_dir, . Bool_t ; isflat = kFALSE . ). virtual . Set the location where ACLiC will create libraries and use as a scratch area. ; If unset, libraries will be created at the same location than the script.; Parameters. build_dirthe name of the build directory ; isflatIf false (default), then the libraries are actually stored in sub-directories of 'build_dir' including the full pathname of the script. If the script is located at /full/path/name/macro.C the library will be located at build_dir+/full/path/name/macro_C.so If 'isflat' is true, then no subdirectory is created and the library is created directly in the directory 'build_dir'. Note that in this mode there is a risk than 2 script of the same in different source directory will over-write each other. . NoteThis build_dir can also be controlled v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystem.html:82878,optimiz,optimized,82878,doc/master/classTSystem.html,https://root.cern,https://root.cern/doc/master/classTSystem.html,1,['optimiz'],['optimized']
Performance," (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursive . ). overrideprotectedvirtual . Intercept a server redirection all and update list of dependents if necessary Specifically update the set proxy 'deps' which introduces the dependency on server value dirty flags of ourselves. ; Reimplemented from RooAbsPdf.; Definition at line 211 of file RooProjectedPdf.cxx. ◆ selfNormalized(). bool RooProjectedPdf::selfNormalized ; (; ); const. inlineoverridevirtual . Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ; Always returns false, unless a PDF overrides this function. ; Reimplemented from RooAbsPdf.; Definition at line 36 of file RooProjectedPdf.h. ◆ Streamer(). void RooProjectedPdf::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooProjectedPdf::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 73 of file RooProjectedPdf.h. Member Data Documentation. ◆ _cacheMgr. RooObjCacheManager RooProjectedPdf::_cacheMgr. mutableprotected . ! The cache manager ; Definition at line 64 of file RooProjectedPdf.h. ◆ deps. RooSetProxy RooProjectedPdf::deps. protected . dependents of this p.d.f ; Definition at line 54 of file RooProjectedPdf.h. ◆ intobs. RooSetProxy RooProjectedPdf::intobs. protected . observables that p.d.f is integrated over ; Definition at line 53 of file RooProjectedPdf.h. ◆ intpdf. RooRealProxy RooProjectedPdf::intpdf. protected . p.d.f that is integrated ; Definition at line 52 of file RooProjectedPdf.h. Libraries for RooProjectedPdf:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooProjectedPdf.h; roofit/roofitcore/src/RooProjectedPdf.cxx. RooProjectedPdf. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:06 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProjectedPdf.html:81436,cache,cache,81436,doc/master/classRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classRooProjectedPdf.html,1,['cache'],['cache']
Performance," (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; double evaluate () const override;  Optimized implementation of createProfile for profile likelihoods. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1RooBarlowBeestonLL.html:48636,cache,cached,48636,doc/master/classRooStats_1_1HistFactory_1_1RooBarlowBeestonLL.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1RooBarlowBeestonLL.html,2,['cache'],"['cache', 'cached']"
Performance," (Double_t d)=0;  ; virtual void WriteFastArray (const Bool_t *b, Long64_t n)=0;  ; virtual void WriteFastArray (const Char_t *c, Long64_t n)=0;  ; virtual void WriteFastArray (const Double_t *d, Long64_t n)=0;  ; virtual void WriteFastArray (const Float_t *f, Long64_t n)=0;  ; virtual void WriteFastArray (const Int_t *i, Long64_t n)=0;  ; virtual void WriteFastArray (const Long64_t *l, Long64_t n)=0;  ; virtual void WriteFastArray (const Long_t *l, Long64_t n)=0;  ; virtual void WriteFastArray (const Short_t *h, Long64_t n)=0;  ; virtual void WriteFastArray (const UChar_t *c, Long64_t n)=0;  ; virtual void WriteFastArray (const UInt_t *i, Long64_t n)=0;  ; virtual void WriteFastArray (const ULong64_t *l, Long64_t n)=0;  ; virtual void WriteFastArray (const ULong_t *l, Long64_t n)=0;  ; virtual void WriteFastArray (const UShort_t *h, Long64_t n)=0;  ; virtual Int_t WriteFastArray (void **startp, const TClass *cl, Long64_t n=1, Bool_t isPreAlloc=kFALSE, TMemberStreamer *s=nullptr)=0;  ; virtual void WriteFastArray (void *start, const TClass *cl, Long64_t n=1, TMemberStreamer *s=nullptr)=0;  ; virtual void WriteFastArrayString (const Char_t *c, Long64_t n)=0;  ; virtual void WriteFloat (Float_t f)=0;  ; virtual void WriteInt (Int_t i)=0;  ; virtual void WriteLong (Long_t l)=0;  ; virtual void WriteLong64 (Long64_t l)=0;  ; template<class T > ; Int_t WriteObject (const T *objptr, Bool_t cacheReuse=kTRUE);  ; virtual void WriteShort (Short_t s)=0;  ; virtual void WriteStdString (const std::string *s)=0;  ; virtual void WriteStdString (std::string &s);  ; virtual void WriteTString (const TString &s)=0;  ; virtual void WriteUChar (UChar_t c)=0;  ; virtual void WriteUInt (UInt_t i)=0;  ; virtual void WriteULong (ULong_t l)=0;  ; virtual void WriteULong64 (ULong64_t l)=0;  ; virtual void WriteUShort (UShort_t s)=0;  ; virtual UInt_t WriteVersion (const TClass *cl, Bool_t useBcnt=kFALSE)=0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferText.html:18554,cache,cacheReuse,18554,doc/master/classTBufferText.html,https://root.cern,https://root.cern/doc/master/classTBufferText.html,1,['cache'],['cacheReuse']
Performance," (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  The cache manager. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization observables. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createInt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimultaneous.html:65078,cache,cached,65078,doc/master/classRooSimultaneous.html,https://root.cern,https://root.cern/doc/master/classRooSimultaneous.html,1,['cache'],['cached']
Performance," (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooSetProxy _cacheObs;  Observable to be cached. ;  ; RooRealProxy pdf;  Proxy to p.d.f being cached. ;  ;  Protected Attributes inherited from RooAbsCachedPdf; std::map< Int_t, AnaIntConfig > _anaIntMap;  ! Map for analytical integration codes ;  ; RooAICRegistry _anaReg;  ! Registry for analytical integration codes ;  ; RooObjCacheManager _cacheMgr;  ; Int_t _ipOrder;  The cache manager. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCachedPdf.html:70523,cache,cached,70523,doc/master/classRooCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooCachedPdf.html,1,['cache'],['cached']
Performance," (TConfigurationUseCache*)conf;; 1585 ; 1586 Int_t bufpos = b.Length();; 1587 TVirtualArray *cached = b.PeekDataCache();; 1588 if (cached==0) {; 1589 TStreamerElement *aElement = conf->fCompInfo->fElem;; 1590 TStreamerInfo *info = (TStreamerInfo*)conf->fInfo;; 1591 Warning(""ReadBuffer"",""Skipping %s::%s because the cache is missing."",info->GetName(),aElement->GetName());; 1592 char *ptr = (char*)addr;; 1593 info->ReadBufferSkip(b,&ptr,config->fCompInfo,config->fCompInfo->fType+TStreamerInfo::kSkip,aElement,1,0);; 1594 } else {; 1595 config->fAction(b, (*cached)[0]);; 1596 }; 1597 // Idea: Factor out this 'if' to a UseCacheRepeat function; 1598 if (config->fNeedRepeat) {; 1599 b.SetBufferOffset(bufpos);; 1600 }; 1601 return 0;; 1602 }; 1603 ; 1604 INLINE_TEMPLATE_ARGS Int_t UseCacheVectorPtrLoop(TBuffer &b, void *start, const void *end, const TConfiguration *conf); 1605 {; 1606 TConfigurationUseCache *config = (TConfigurationUseCache*)conf;; 1607 Int_t bufpos = b.Length();; 1608 ; 1609 TVirtualArray *cached = b.PeekDataCache();; 1610 if (cached==0) {; 1611 TStreamerElement *aElement = config->fCompInfo->fElem;; 1612 TStreamerInfo *info = (TStreamerInfo*)config->fInfo;; 1613 Warning(""ReadBuffer"",""Skipping %s::%s because the cache is missing."",info->GetName(),aElement->GetName());; 1614 char *ptr = (char*)start;; 1615 UInt_t n = (((void**)end)-((void**)start));; 1616 info->ReadBufferSkip(b,&ptr,config->fCompInfo,conf->fCompInfo->fType+TStreamerInfo::kSkip,aElement,n,0);; 1617 } else {; 1618 TVectorLoopConfig cached_config( nullptr, cached->fClass->Size(), /* read */ kTRUE );; 1619 void *cached_start = (*cached)[0];; 1620 void *cached_end = ((char*)cached_start) + cached->fSize * cached_config.fIncrement;; 1621 config->fAction(b,cached_start,cached_end,&cached_config);; 1622 }; 1623 // Idea: Factor out this 'if' to a UseCacheRepeat function; 1624 if (config->fNeedRepeat) {; 1625 b.SetBufferOffset(bufpos);; 1626 }; 1627 return 0;; 1628 }; 1629 ; 1630 INLINE_TEMPLATE_ARGS I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:66386,cache,cached,66386,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['cache'],['cached']
Performance," (TMessage *mess, TString *slb=0);  Handle file checking request. ;  ; virtual Int_t HandleDataSets (TMessage *mess, TString *slb=0);  Handle here requests about datasets. ;  ; virtual Int_t HandleLibIncPath (TMessage *mess);  Handle lib, inc search paths modification request. ;  ; virtual void HandleProcess (TMessage *mess, TString *slb=0);  Handle processing request. ;  ; virtual void HandleQueryList (TMessage *mess);  Handle request for list of queries. ;  ; virtual void HandleRemove (TMessage *mess, TString *slb=0);  Handle remove request. ;  ; virtual void HandleRetrieve (TMessage *mess, TString *slb=0);  Handle retrieve request. ;  ; virtual void HandleSubmerger (TMessage *mess);  Handle a message of type kPROOF_SUBMERGER. ;  ; virtual Int_t HandleWorkerLists (TMessage *mess);  Handle here all requests to modify worker lists. ;  ; Bool_t IsIdle ();  Return the idle status. ;  ; virtual void MakePlayer ();  Make player instance. ;  ; virtual void ProcessNext (TString *slb=0);  process the next query from the queue of submitted jobs. ;  ; Int_t SetupCommon ();  Common part (between TProofServ and TXProofServ) of the setup phase. ;  ; Bool_t UnlinkDataDir (const char *path);  Scan recursively the datadir and unlink it if empty Return kTRUE if it can be unlinked, kFALSE otherwise. ;  ;  Protected Member Functions inherited from TApplication;  TApplication ();  Default ctor. Can be used by classes deriving from TApplication. ;  ; virtual void Forum (const char *line);  The function ("".forum <type>"") submits a new post on the ROOT forum via web browser. ;  ; virtual void GitHub (const char *line);  The function ("".gh <type>"") submits a new issue on GitHub via web browser. ;  ; virtual void Help (const char *line);  The function lists useful commands ("".help"") or opens the online reference guide, generated with Doxygen ("".help scope"" or "".help scope::member""). ;  ; virtual void LoadGraphicsLibs ();  Load shared libs necessary for graphics. ;  ; virtual void MakeBatch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServLite.html:25395,queue,queue,25395,doc/master/classTProofServLite.html,https://root.cern,https://root.cern/doc/master/classTProofServLite.html,1,['queue'],['queue']
Performance," (const RooAbsArg &dep) const override;  Force internal handling of integration of given observable if any of the product terms depend on it. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Declare that we handle all integrations internally. ;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &, double, double) const override;  Forward the plot sampling hint from the p.d.f. that defines the observable obs. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooProduct to more intuitively reflect the contents of the product operator construction. ;  ; const RooArgList & realComponents () const;  ; void setCacheAndTrackHints (RooArgSet &) override;  Label OK'ed components of a RooProduct with cache-and-track. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegralWN (Int_t code, const Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProduct.html:2622,cache,cache-and-track,2622,doc/master/classRooProduct.html,https://root.cern,https://root.cern/doc/master/classRooProduct.html,1,['cache'],['cache-and-track']
Performance," (default on) ; In read-only server is not allowed to change any ROOT object, registered to the server Server also cannot execute objects method via exe.json request ; Definition at line 296 of file THttpServer.cxx. ◆ SetSniffer(). void THttpServer::SetSniffer ; (; TRootSniffer * ; sniff). Set TRootSniffer to the server. ; Server takes ownership over sniffer ; Definition at line 267 of file THttpServer.cxx. ◆ SetTerminate(). void THttpServer::SetTerminate ; (; ). set termination flag, no any further requests will be processed ; Set termination flag,.; No any further requests will be processed, server only can be destroyed afterwards ; Definition at line 277 of file THttpServer.cxx. ◆ SetTimer(). void THttpServer::SetTimer ; (; Long_t ; milliSec = 100, . Bool_t ; mode = kTRUE . ). Create timer which will invoke ProcessRequests() function periodically. ; Timer is required to perform all actions in main ROOT thread Method arguments are the same as for TTimer constructor By default, sync timer with 100 ms period is created; It is recommended to always use sync timer mode and only change period to adjust server reaction time. Use of async timer requires, that application regularly calls gSystem->ProcessEvents(). It happens automatically in ROOT interactive shell. If milliSec == 0, no timer will be created. In this case application should regularly call ProcessRequests() method.; Async timer allows to use THttpServer in applications, which does not have explicit gSystem->ProcessEvents() calls. But be aware, that such timer can interrupt any system call (like malloc) and can lead to dead locks, especially in multi-threaded applications. ; Definition at line 490 of file THttpServer.cxx. ◆ SetTopName(). void THttpServer::SetTopName ; (; const char * ; top). inline . set name of top item in objects hierarchy ; Definition at line 127 of file THttpServer.h. ◆ SetWSOnly(). void THttpServer::SetWSOnly ; (; Bool_t ; on = kTRUE). Set websocket-only mode. ; If true, server will only",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHttpServer.html:36106,perform,perform,36106,doc/master/classTHttpServer.html,https://root.cern,https://root.cern/doc/master/classTHttpServer.html,1,['perform'],['perform']
Performance," (fMaxEntries / 10);; 6420 for (Int_t i = 0; i < nb; ++i) {; 6421 TBranch* branch = (TBranch*) fBranches.UncheckedAt(i);; 6422 branch->KeepCircular(maxEntries);; 6423 }; 6424 if (fNClusterRange) {; 6425 Long64_t entriesOffset = fEntries - maxEntries;; 6426 Int_t oldsize = fNClusterRange;; 6427 for(Int_t i = 0, j = 0; j < oldsize; ++j) {; 6428 if (fClusterRangeEnd[j] > entriesOffset) {; 6429 fClusterRangeEnd[i] = fClusterRangeEnd[j] - entriesOffset;; 6430 ++i;; 6431 } else {; 6432 --fNClusterRange;; 6433 }; 6434 }; 6435 }; 6436 fEntries = maxEntries;; 6437 fReadEntry = -1;; 6438}; 6439 ; 6440////////////////////////////////////////////////////////////////////////////////; 6441/// Read in memory all baskets from all branches up to the limit of maxmemory bytes.; 6442///; 6443/// If maxmemory is non null and positive SetMaxVirtualSize is called; 6444/// with this value. Default for maxmemory is 2000000000 (2 Gigabytes).; 6445/// The function returns the total number of baskets read into memory; 6446/// if negative an error occurred while loading the branches.; 6447/// This method may be called to force branch baskets in memory; 6448/// when random access to branch entries is required.; 6449/// If random access to only a few branches is required, you should; 6450/// call directly TBranch::LoadBaskets.; 6451 ; 6452Int_t TTree::LoadBaskets(Long64_t maxmemory); 6453{; 6454 if (maxmemory > 0) SetMaxVirtualSize(maxmemory);; 6455 ; 6456 TIter next(GetListOfLeaves());; 6457 TLeaf *leaf;; 6458 Int_t nimported = 0;; 6459 while ((leaf=(TLeaf*)next())) {; 6460 nimported += leaf->GetBranch()->LoadBaskets();//break;; 6461 }; 6462 return nimported;; 6463}; 6464 ; 6465////////////////////////////////////////////////////////////////////////////////; 6466/// Set current entry.; 6467///; 6468/// Returns -2 if entry does not exist (just as TChain::LoadTree()).; 6469/// Returns -6 if an error occurs in the notification callback (just as TChain::LoadTree()).; 6470///; 6471/// Calls fNotify->",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:252017,load,loading,252017,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['load'],['loading']
Performance," (in general called by the TFile destructor) ;  ; Int_t AddBranch (const char *branch, bool subbranches=false) override;  Add a branch to the list of branches to be stored in the cache this function is called by TBranch::GetBasket Returns: ;  ; Int_t AddBranch (TBranch *b, bool subbranches=false) override;  Add a branch to the list of branches to be stored in the cache this function is called by TBranch::GetBasket Returns: ;  ; Int_t CreateTasks ();  We create a TTaskGroup and asynchronously maps each group of baskets(> 100 kB in total) to a task. ;  ; bool FillBuffer () override;  Fill the cache buffer with the branches in the cache. ;  ; Int_t GetNFound ();  ; Int_t GetNMissed ();  ; Int_t GetNUnzip ();  ; Int_t GetRecordHeader (char *buf, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header from the buffer buf. ;  ; Int_t GetUnzipBuffer (char **buf, Long64_t pos, Int_t len, bool *free) override;  We try to read a buffer that has already been unzipped Returns -1 in case of read failure, 0 in case it's not in the cache and n>0 in case read from cache (number of bytes copied). ;  ; Int_t GetUnzipGroupSize ();  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print cache statistics. ;  ; Int_t ReadBufferExt (char *buf, Long64_t pos, Int_t len, Int_t &loc) override;  ; void ResetCache () override;  This will delete the list of buffers that are in the unzipping cache and will reset certain values in the cache. ;  ; Int_t SetBufferSize (Int_t buffersize) override;  Change the underlying buffer size of the cache. ;  ; void SetEntryRange (Long64_t emin, Long64_t emax) override;  Set the minimum and maximum entry number to be processed this information helps to optimize the number of baskets to read when prefetching the branch buffers. ;  ; void SetUnzipBufferSize (Long64_t bufferSize);  Sets the size for the unzipping cache... by default it should be two times the size of the prefetching cache.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCacheUnzip.html:2688,cache,cache,2688,doc/v632/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/v632/classTTreeCacheUnzip.html,2,['cache'],['cache']
Performance," (in general called by the TFile destructor) ;  ; Int_t AddBranch (const char *branch, bool subbranches=false) override;  Add a branch to the list of branches to be stored in the cache this function is called by TBranch::GetBasket Returns: ;  ; Int_t AddBranch (TBranch *b, bool subbranches=false) override;  Add a branch to the list of branches to be stored in the cache this function is called by TBranch::GetBasket Returns: ;  ; Int_t CreateTasks ();  We create a TTaskGroup and asynchronously maps each group of baskets(> 100 kB in total) to a task. ;  ; bool FillBuffer () override;  Fill the cache buffer with the branches in the cache. ;  ; Int_t GetNFound ();  ; Int_t GetNMissed ();  ; Int_t GetNUnzip ();  ; Int_t GetRecordHeader (char *buf, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header from the buffer buf. ;  ; Int_t GetUnzipBuffer (char **buf, Long64_t pos, Int_t len, bool *free) override;  We try to read a buffer that has already been unzipped Returns -1 in case of read failure, 0 in case it's not in the cache and n>0 in case read from cache (number of bytes copied). ;  ; Int_t GetUnzipGroupSize ();  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print cache statistics. ;  ; Int_t ReadBufferExt (char *buf, Long64_t pos, Int_t len, Int_t &loc) override;  ; void ResetCache () override;  This will delete the list of buffers that are in the unzipping cache and will reset certain values in the cache. ;  ; Int_t SetBufferSize (Long64_t buffersize) override;  Change the underlying buffer size of the cache. ;  ; void SetEntryRange (Long64_t emin, Long64_t emax) override;  Set the minimum and maximum entry number to be processed this information helps to optimize the number of baskets to read when prefetching the branch buffers. ;  ; void SetUnzipBufferSize (Long64_t bufferSize);  Sets the size for the unzipping cache... by default it should be two times the size of the prefetching cac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCacheUnzip.html:2689,cache,cache,2689,doc/master/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/master/classTTreeCacheUnzip.html,2,['cache'],['cache']
Performance," (in global frame). void InitColor(const Float_t[4] rgba); Initialise the colors, using basic RGBA diffuse material color supplied. void SetColor(const Float_t[17] rgba); Set full color attributes - see OpenGL material documentation; for full description.; 0->3 diffuse, 4->7 ambient, 8->11 specular, 12->15 emission, 16 shininess. void SetColorOnFamily(const Float_t[17] rgba); Set full color attributes to all physicals sharing the same; logical with this object. void SetDiffuseColor(const Float_t rgba[4]); Set color from ROOT color index and transparency [0,100]. void SetDiffuseColor(const UChar_t rgba[4]); Set color from RGBA quadruplet. void SetDiffuseColor(Color_t ci, UChar_t transparency); Set color from standard ROOT representation, that is color index; + transparency in range [0, 100]. void SetupGLColors(TGLRnrCtx& rnrCtx, const Float_t* color = 0) const; Setup colors - avoid setting things not required; for current draw flags. void Draw(TGLRnrCtx& rnrCtx) const; Draw physical shape, using LOD flags, potential from display list cache. void CalculateShapeLOD(TGLRnrCtx& rnrCtx, Float_t& pixSize, Short_t& shapeLOD) const; Calculate shape-lod, suitible for use under; projection defined by 'rnrCtx', taking account of which local; axes of the shape support LOD adjustment, and the global; 'sceneFlags' passed. Returned shapeLOD component is from 0 (kLODPixel - lowest; quality) to 100 (kLODHigh - highest quality). Scene flags are not used. LOD quantization is not done. RnrCtx; is not modified as this is called via lodification stage of; rendering. void QuantizeShapeLOD(Short_t shapeLOD, Short_t combiLOD, Short_t& quantLOD) const; Factor in scene/vierer LOD and Quantize ... forward to; logical shape. void InvokeContextMenu(TContextMenu& menu, UInt_t x, UInt_t y) const; Request creation of context menu on shape, attached to 'menu' at screen position; 'x' 'y'. TGLVector3 GetScale() const. TGLVertex3 GetTranslation() const. void SetTransform(const TGLMatrix& transform). void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLPhysicalShape.html:7080,cache,cache,7080,root/html602/TGLPhysicalShape.html,https://root.cern,https://root.cern/root/html602/TGLPhysicalShape.html,2,['cache'],['cache']
Performance," (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgr! The cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooArgSet*_curNormSet!; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooProjectedPdf.html:40819,cache,cache,40819,root/html534/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html534/RooProjectedPdf.html,2,['cache'],['cache']
Performance," (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; TString_formExprFormula expression string; RooFormula*_formula! Formula engine; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooGenericPdf.html:42569,cache,cache,42569,root/html602/RooGenericPdf.html,https://root.cern,https://root.cern/root/html602/RooGenericPdf.html,4,['cache'],['cache']
Performance," (std::shared_ptr< THttpWSEngine > &engine);  Complete current send operation. ;  ; std::shared_ptr< THttpWSEngine > FindEngine (UInt_t id, Bool_t book_send=kFALSE);  Find websocket connection handle with given id If book_send parameter specified, have to book send operation under the mutex. ;  ; Bool_t HandleWS (std::shared_ptr< THttpCallArg > &arg);  Process request to websocket Different kind of requests coded into THttpCallArg::Method: ;  ; Int_t PerformSend (std::shared_ptr< THttpWSEngine > engine);  Perform send operation, stored in buffer. ;  ; void RemoveEngine (std::shared_ptr< THttpWSEngine > &engine, Bool_t terminate=kFALSE);  Remove and destroy WS connection. ;  ; Int_t RunSendingThrd (std::shared_ptr< THttpWSEngine > engine);  Send data stored in the buffer. ;  . Private Attributes; Bool_t fDisabled {kFALSE};  ! when true, all further operations will be ignored ;  ; std::vector< std::shared_ptr< THttpWSEngine > > fEngines;  ! list of active WS engines (connections) ;  ; std::mutex fMutex;  ! protect list of engines ;  ; Int_t fSendCnt {0};  ! counter for completed send operations ;  ; Bool_t fSyncMode {kTRUE};  ! is handler runs in synchronous mode (default, no multi-threading) ;  . Friends; class THttpServer;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHttpWSHandler.html:15627,multi-thread,multi-threading,15627,doc/master/classTHttpWSHandler.html,https://root.cern,https://root.cern/doc/master/classTHttpWSHandler.html,1,['multi-thread'],['multi-threading']
Performance," (tau in eq 26, ref 1) ;  ; Double_t fGDTauMin;  min threshold parameter (tau in eq 26, ref 1) ;  ; Double_t fGDTauPrec;  precision in tau ;  ; UInt_t fGDTauScan;  number scan for tau-paths ;  ; std::vector< Double_t > fGDTauVec;  the tau's ;  ; std::vector< Double_t > fGradVec;  gradient vector - dimension = number of rules in ensemble ;  ; std::vector< Double_t > fGradVecLin;  gradient vector - dimension = number of variables ;  ; std::vector< std::vector< Double_t > > fGradVecLinTst;  gradient vector, linear terms - one per tau ;  ; std::vector< std::vector< Double_t > > fGradVecTst;  gradient vector - one per tau ;  ; Double_t fNEveEffPath;  sum of weights for Path events ;  ; Double_t fNEveEffPerf;  idem for Perf events ;  ; UInt_t fNLinear;  number of linear terms ;  ; UInt_t fNRules;  number of rules ;  ; Double_t * fNTCoeff;  GD path: rule coefficients. ;  ; Double_t fNTCoefRad;  GD path: 'radius' of all rulecoeffs. ;  ; Double_t fNTErrorRate;  GD path: error rate (or performance) ;  ; Double_t * fNTLinCoeff;  GD path: linear coefficients. ;  ; Double_t fNTNuval;  GD path: value of nu. ;  ; Double_t fNTOffset;  GD path: model offset. ;  ; Double_t fNTRisk;  GD path: risk. ;  ; UInt_t fPathIdx1;  first event index for path search ;  ; UInt_t fPathIdx2;  last event index for path search ;  ; UInt_t fPerfIdx1;  first event index for performance evaluation ;  ; UInt_t fPerfIdx2;  last event index for performance evaluation ;  ; RuleEnsemble * fRuleEnsemble;  rule ensemble ;  ; RuleFit * fRuleFit;  rule fit ;  ; Double_t fsigave;  Sigma of current signal score function F(sig) ;  ; Double_t fsigrms;  Rms of F(sig) ;  . Private Member Functions; MsgLogger & Log () const;  . Private Attributes; MsgLogger * fLogger;  ! message logger ;  . #include <TMVA/RuleFitParams.h>; Member Typedef Documentation. ◆ EventItr. typedef std::vector<constTMVA::Event*>::const_iterator TMVA::RuleFitParams::EventItr. protected . Definition at line 130 of file RuleFitParams.h. Constructor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html:7284,perform,performance,7284,doc/master/classTMVA_1_1RuleFitParams.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html,1,['perform'],['performance']
Performance," (via Streamer) the class identifier; 725/// of the object is known.; 726/// Using the class identifier we find the TClass object for this class.; 727/// A TClass object contains a full description (i.e. dictionary) of the; 728/// associated class. In particular the TClass object can create a new; 729/// object of the class type it describes. This new object now calls its; 730/// Streamer function to rebuilt itself.; 731///; 732/// Use TKey::ReadObjectAny to read any object non-derived from TObject; 733///; 734/// ### Note; 735/// A C style cast can only be used in the case where the final class; 736/// of this object derives from TObject as a first inheritance, otherwise; 737/// one must use a dynamic_cast.; 738///; 739/// #### Example1: simplified case; 740/// ~~~{.cpp}; 741/// class MyClass : public TObject, public AnotherClass; 742/// ~~~; 743/// then on return, one get away with using:; 744/// ~~~{.cpp}; 745/// MyClass *obj = (MyClass*)key->ReadObj();; 746/// ~~~; 747///; 748/// #### Example2: Usual case (recommended unless performance is critical); 749/// ~~~{.cpp}; 750/// MyClass *obj = dynamic_cast<MyClass*>(key->ReadObj());; 751/// ~~~; 752/// which support also the more complex inheritance like:; 753/// ~~~{.cpp}; 754/// class MyClass : public AnotherClass, public TObject; 755/// ~~~; 756///; 757/// Of course, `dynamic_cast<>` can also be used in the example 1.; 758 ; 759TObject *TKey::ReadObj(); 760{; 761 TClass *cl = TClass::GetClass(fClassName.Data());; 762 if (!cl) {; 763 Error(""ReadObj"", ""Unknown class %s"", fClassName.Data());; 764 return 0;; 765 }; 766 if (!cl->IsTObject()) {; 767 // in principle user should call TKey::ReadObjectAny!; 768 return (TObject*)ReadObjectAny(0);; 769 }; 770 ; 771 TBufferFile bufferRef(TBuffer::kRead, fObjlen+fKeylen);; 772 if (!bufferRef.Buffer()) {; 773 Error(""ReadObj"", ""Cannot allocate buffer: fObjlen = %d"", fObjlen);; 774 return 0;; 775 }; 776 if (GetFile()==0) return 0;; 777 bufferRef.SetParent(GetFile());; 778 bufferR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TKey_8cxx_source.html:26967,perform,performance,26967,doc/master/TKey_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TKey_8cxx_source.html,1,['perform'],['performance']
Performance," ). inlineprotected . Populate a single value with data from the field. ; The memory location pointed to by to needs to be of the fitting type. The fast path is conditioned by the field qualifying as simple, i.e. maps as-is to a single column and has no read callback. ; Definition at line 378 of file RFieldBase.hxx. ◆ ReadBulk(). std::size_t ROOT::Experimental::RFieldBase::ReadBulk ; (; const RBulkSpec & ; bulkSpec). protected . Returns the number of newly available values, that is the number of bools in bulkSpec.fMaskAvail that flipped from false to true. ; As a special return value, kAllSet can be used if all values are read independent from the masks. ; Definition at line 1086 of file RField.cxx. ◆ ReadBulkImpl(). std::size_t ROOT::Experimental::RFieldBase::ReadBulkImpl ; (; const RBulkSpec & ; bulkSpec). protectedvirtual . General implementation of bulk read. ; Loop over the required range and read values that are required and not already present. Derived classes may implement more optimized versions of this method. See ReadBulk() for the return value. ; Reimplemented in ROOT::Experimental::RField< RNTupleCardinality< SizeT > >, and ROOT::Experimental::RRVecField.; Definition at line 941 of file RField.cxx. ◆ ReadGlobalImpl(). void ROOT::Experimental::RFieldBase::ReadGlobalImpl ; (; NTupleSize_t ; globalIndex, . void * ; to . ). protectedvirtual . Reimplemented in ROOT::Experimental::RClassField, ROOT::Experimental::RStreamerField, ROOT::Experimental::REnumField, ROOT::Experimental::RField< RNTupleCardinality< SizeT > >, ROOT::Experimental::RField< TObject >, ROOT::Experimental::RProxiedCollectionField, ROOT::Experimental::RRecordField, ROOT::Experimental::RArrayField, ROOT::Experimental::RRVecField, ROOT::Experimental::RVectorField, ROOT::Experimental::RArrayAsRVecField, ROOT::Experimental::RAtomicField, ROOT::Experimental::RBitsetField, ROOT::Experimental::ROptionalField, ROOT::Experimental::RUniquePtrField, ROOT::Experimental::RVariantField, ROOT::Experimenta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:48593,optimiz,optimized,48593,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,1,['optimiz'],['optimized']
Performance," ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSelHist::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 60 of file TSelHist.h. ◆ DeclFileName(). static const char * TSelHist::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 60 of file TSelHist.h. ◆ GetOutputList(). TList * TSelHist::GetOutputList ; (; ); const. inlineoverridevirtual . Reimplemented from TSelector.; Definition at line 56 of file TSelHist.h. ◆ IsA(). TClass * TSelHist::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TSelector.; Definition at line 60 of file TSelHist.h. ◆ Process(). Bool_t TSelHist::Process ; (; Long64_t ; entry). overridevirtual . The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ; The entry argument specifies which entry in the currently loaded tree is to be processed. It can be passed to either TSelHist::GetEntry() or TBranch::GetEntry() to read either all or the required parts of the data. When processing keyed objects with PROOF, the object is already loaded and is available via the fObject pointer.; This function should contain the ""body"" of the analysis. It can contain simple or elaborate selection criteria, run algorithms on the data of the event and typically fill histograms.; The processing can be stopped by calling Abort().; Use fStatus to set the return value of TTree::Process().; The return value is currently not used. ; Reimplemented from TSelector.; Definition at line 267 of file TSelHist.cxx. ◆ SetInputList(). void TSelHist::SetInputList ; (; TList * ; input). inlineoverridevirtual . Reimplemented from TSelector.; Definition at line 55 of file TSelHist.h. ◆ SetObject(). void TSelHist::SetObject ; (; TObject * ; obj). inlineoverridevirtual . Reimplemented from TSelector.; Definition at line ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelHist.html:14937,load,loaded,14937,doc/master/classTSelHist.html,https://root.cern,https://root.cern/doc/master/classTSelHist.html,1,['load'],['loaded']
Performance," ); If return value is true variables can be deleted. RooAbsData(); Default constructor. RooAbsData(const char* name, const char* title, const RooArgSet& vars, RooAbsDataStore* store = 0); Constructor from a set of variables. Only fundamental elements of vars; (RooRealVar,RooCategory etc) are stored as part of the dataset. RooAbsData(const RooAbsData& other, const char* newname = 0); Copy constructor. ~RooAbsData(); Destructor. void convertToVectorStore(); Convert tree-based storage to vector-based storage. Bool_t changeObservableName(const char* from, const char* to). void fill(). Int_t numEntries() const. void reset(). const RooArgSet* get(Int_t index) const. void cacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0, Bool_t skipZeroWeights = kFALSE); Internal method -- Cache given set of functions with data. void resetCache(); Internal method -- Remove cached function values. void attachCache(const RooAbsArg* newOwner, const RooArgSet& cachedVars); Internal method -- Attach dataset copied with cache contents to copied instances of functions. void setArgStatus(const RooArgSet& set, Bool_t active). void setDirtyProp(Bool_t flag); Control propagation of dirty flags from observables in dataset. RooAbsData* reduce(const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); Create a reduced copy of this dataset. The caller takes ownership of the returned dataset. The following optional named arguments are accepted. SelectVars(const RooArgSet& vars) -- Only retain the listed observables in the output dataset; Cut(const char* expression) -- Only retain event surviving the given cut expression; Cut(const RooFormulaVar& expr) -- Only retain event surviving the given cut formula; CutRange(const char* name) -- Only retain events ins",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsData.html:17244,cache,cachedVars,17244,root/html602/RooAbsData.html,https://root.cern,https://root.cern/root/html602/RooAbsData.html,4,['cache'],"['cache', 'cachedVars']"
Performance," ); const. inlineoverridevirtual . Implements TGeoMatrix.; Definition at line 303 of file TGeoMatrix.h. ◆ Inverse(). TGeoHMatrix TGeoScale::Inverse ; (; ); const. overridevirtual . Return a temporary inverse of this. ; Implements TGeoMatrix.; Definition at line 1556 of file TGeoMatrix.cxx. ◆ IsA(). TClass * TGeoScale::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGeoMatrix.; Definition at line 307 of file TGeoMatrix.h. ◆ LocalToMaster() [1/2]. void TGeoScale::LocalToMaster ; (; const Double_t * ; local, . Double_t * ; master . ); const. overridevirtual . Convert a local point to the master frame. ; Reimplemented from TGeoMatrix.; Definition at line 1600 of file TGeoMatrix.cxx. ◆ LocalToMaster() [2/2]. Double_t TGeoScale::LocalToMaster ; (; Double_t ; dist, . const Double_t * ; dir = nullptr . ); const. Convert the local distance along unit vector DIR to master frame. ; If DIR is not specified perform a conversion such as the returned distance is the the minimum for all possible directions. ; Definition at line 1612 of file TGeoMatrix.cxx. ◆ LocalToMasterVect(). void TGeoScale::LocalToMasterVect ; (; const Double_t * ; local, . Double_t * ; master . ); const. inlineoverridevirtual . convert a vector by multiplying its column vector (x, y, z, 1) to matrix inverse ; Reimplemented from TGeoMatrix.; Definition at line 276 of file TGeoMatrix.h. ◆ MakeClone(). TGeoMatrix * TGeoScale::MakeClone ; (; ); const. overridevirtual . Make a clone of this matrix. ; Implements TGeoMatrix.; Definition at line 1632 of file TGeoMatrix.cxx. ◆ MasterToLocal() [1/2]. void TGeoScale::MasterToLocal ; (; const Double_t * ; master, . Double_t * ; local . ); const. overridevirtual . Convert a global point to local frame. ; Reimplemented from TGeoMatrix.; Definition at line 1641 of file TGeoMatrix.cxx. ◆ MasterToLocal() [2/2]. Double_t TGeoScale::MasterToLocal ; (; Double_t ; dist, . const Double_t * ; dir = nullptr . ); const. Convert t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoScale.html:19592,perform,perform,19592,doc/master/classTGeoScale.html,https://root.cern,https://root.cern/doc/master/classTGeoScale.html,1,['perform'],['perform']
Performance," ); const. inlineoverridevirtual . Reimplemented from RooAbsReal.; Definition at line 46 of file RooNormalizedPdf.h. ◆ getAnalyticalIntegralWN(). Int_t RooNormalizedPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const RooArgSet * ; , . const char * ; rangeName = nullptr . ); const. inlineoverridevirtual . Forward determination of analytical integration capabilities to input p.d.f. ; Reimplemented from RooAbsReal.; Definition at line 48 of file RooNormalizedPdf.h. ◆ getValV(). double RooNormalizedPdf::getValV ; (; const RooArgSet * ; nset); const. inlineoverrideprotectedvirtual . Return current value, normalized by integrating over the observables in nset. ; If nset is 0, the unnormalized value is returned. All elements of nset must be lvalues.; Unnormalized values are not cached. Doing so would be complicated as _norm->getVal() could spoil the cache and interfere with returning the cached return value. Since unnormalized calls are typically done in integration calls, there is no performance hit. ; Reimplemented from RooAbsPdf.; Definition at line 79 of file RooNormalizedPdf.h. ◆ selfNormalized(). bool RooNormalizedPdf::selfNormalized ; (; ); const. inlineoverridevirtual . Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ; Always returns false, unless a PDF overrides this function. ; Reimplemented from RooAbsPdf.; Definition at line 44 of file RooNormalizedPdf.h. ◆ translate(). void RooNormalizedPdf::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNormalizedPdf.html:77248,perform,performance,77248,doc/master/classRooNormalizedPdf.html,https://root.cern,https://root.cern/doc/master/classRooNormalizedPdf.html,1,['perform'],['performance']
Performance," );; 102 MethodBase* BookMethod( DataLoader *, TMVA::Types::EMVA /*theMethod*/,; 103 TString /*methodTitle*/,; 104 TString /*methodOption*/,; 105 TMVA::Types::EMVA /*theComposite*/,; 106 TString /*compositeOption = """"*/ ) { return nullptr; }; 107 ; 108 // optimize all booked methods (well, if desired by the method); 109 std::map<TString,Double_t> OptimizeAllMethods (TString fomType=""ROCIntegral"", TString fitType=""FitGA"");; 110 void OptimizeAllMethodsForClassification(TString fomType=""ROCIntegral"", TString fitType=""FitGA"") { OptimizeAllMethods(fomType,fitType); }; 111 void OptimizeAllMethodsForRegression (TString fomType=""ROCIntegral"", TString fitType=""FitGA"") { OptimizeAllMethods(fomType,fitType); }; 112 ; 113 // training for all booked methods; 114 void TrainAllMethods ();; 115 void TrainAllMethodsForClassification( void ) { TrainAllMethods(); }; 116 void TrainAllMethodsForRegression ( void ) { TrainAllMethods(); }; 117 ; 118 // testing; 119 void TestAllMethods();; 120 ; 121 // performance evaluation; 122 void EvaluateAllMethods( void );; 123 void EvaluateAllVariables(DataLoader *loader, TString options = """" );; 124 ; 125 TH1F* EvaluateImportance( DataLoader *loader,VIType vitype, Types::EMVA theMethod, TString methodTitle, const char *theOption = """" );; 126 ; 127 // delete all methods and reset the method vector; 128 void DeleteAllMethods( void );; 129 ; 130 // accessors; 131 IMethod* GetMethod( const TString& datasetname, const TString& title ) const;; 132 Bool_t HasMethod( const TString& datasetname, const TString& title ) const;; 133 ; 134 Bool_t Verbose( void ) const { return fVerbose; }; 135 void SetVerbose( Bool_t v=kTRUE );; 136 ; 137 // make ROOT-independent C++ class for classifier response; 138 // (classifier-specific implementation); 139 // If no classifier name is given, help messages for all booked; 140 // classifiers are printed; 141 virtual void MakeClass(const TString& datasetname , const TString& methodTitle = """" ) const;; 142 ; 143 // prints clas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2inc_2TMVA_2Factory_8h_source.html:4802,perform,performance,4802,doc/master/tmva_2tmva_2inc_2TMVA_2Factory_8h_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2inc_2TMVA_2Factory_8h_source.html,1,['perform'],['performance']
Performance," * GetListOfGlobalFunctions(Bool_t load = kFALSE); Return list containing the TFunctions currently defined.; Since functions are created and deleted during execution of the; program, we need to update the list of functions every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfTypes(Bool_t load = kFALSE); Return list containing all TDataTypes (typedefs) currently defined.; Since types can be added and removed during execution of the; program, we need to update the list of types every time we; execute this method. However, when calling this function in; a (tight) loop where no new types will be created; you can set load=kFALSE (default). void Idle(UInt_t idleTimeInSec, const char* command = 0); Execute command when system has been idle for idleTimeInSec seconds. Int_t IgnoreInclude(const char* fname, const char* expandedfname); Return 1 if the given include file correspond to a class that has; been loaded through a compiled dictionnary. void InitSystem(); Initialize operating system interface. void InitThreads(); Load and initialize thread library. TClass * LoadClass(const char* name, Bool_t silent = kFALSE) const; Helper function used by TClass::GetClass().; This function attempts to load the dictionary for 'classname'; either from the TClassTable or from the list of generator.; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used only for transient members). Int_t LoadClass(const char* classname, const char* libname, Bool_t check = kFALSE); Check if class ""classname"" is known to the interpreter (in fact,; this check is not needed anymore, so classname is ignored). If; not it will load library ""libname"". If the library name does; not start with ""lib"", ""lib"" will be prepended and a search will; be made in the DynamicPath (see .rootrc). If not found a search; will be mad",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TROOT.html:26017,load,loaded,26017,root/html528/TROOT.html,https://root.cern,https://root.cern/root/html528/TROOT.html,1,['load'],['loaded']
Performance," * GetListOfTypes(Bool_t load = kFALSE); Return list containing all TDataTypes (typedefs) currently defined.; Since types can be added and removed during execution of the; program, we need to update the list of types every time we; execute this method. However, when calling this function in; a (tight) loop where no new types will be created; you can set load=kFALSE (default). void Idle(UInt_t idleTimeInSec, const char* command = 0); Execute command when system has been idle for idleTimeInSec seconds. Int_t IgnoreInclude(const char* fname, const char* expandedfname); Return 1 if the name of the given include file corresponds to a class that; is known to ROOT, e.g. ""TLorentzVector.h"" versus TLorentzVector. void InitSystem(); Initialize operating system interface. void InitThreads(); Load and initialize thread library. TClass * LoadClass(const char* name, Bool_t silent = kFALSE) const; Helper function used by TClass::GetClass().; This function attempts to load the dictionary for 'classname'; either from the TClassTable or from the list of generator.; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used only for transient members). Int_t LoadClass(const char* classname, const char* libname, Bool_t check = kFALSE); Check if class ""classname"" is known to the interpreter (in fact,; this check is not needed anymore, so classname is ignored). If; not it will load library ""libname"". If the library name does; not start with ""lib"", ""lib"" will be prepended and a search will; be made in the DynamicPath (see .rootrc). If not found a search; will be made on libname (without ""lib"" prepended) and if not found; a direct try of libname will be made (in case it contained an; absolute path).; If check is true it will only check if libname exists and is; readable.; Returns 0 on successful loading, -1 in case libname does not; exist or in case of error and -2 in case of version mismatch. void ls(Option_t* option = """") const; To li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TROOT.html:26875,load,load,26875,root/html530/TROOT.html,https://root.cern,https://root.cern/root/html530/TROOT.html,3,['load'],['load']
Performance," * InitRint(Bool_t prompt = kFALSE, const char* appClassName = ""QtRint"", int* argc = 0, char** argv = 0, void* options = 0, int numOptions = 0, Bool_t noLogo = kTRUE). Instantiate ROOT from within Qt application if needed; Return the TRint pointer; Most parametrs are passed to TRint class ctor. Bool_t prompt = kTRUE; Instantiate ROOT with ROOT command prompt; kFALSE; No ROOT prompt. The default for Qt GUI applications. The prompt option can be defined via ROOT parameter file "".rootrc""; .rootrc:; . . .; Gui.Prompt yes. void Erase(); Erases the entire widget and its double buffer. void cd(); [slot] to make this embedded canvas the current one. void cd(int subpadnumber); [slot] to make this embedded canvas / pad the current one. void Disconnect(); [slot] Disconnect the Qt widget from TCanvas object before deleting; to avoid the dead lock; one has to set CanvasID = 0 to disconnect things properly. void Refresh(); [slot] to allow Qt signal refreshing the ROOT TCanvas if needed; use the permanent single shot timer to eliminate; the redundand refreshing for the sake of the performance. void RefreshCB(); [slot] to allow Qt signal refreshing the ROOT TCanvas if needed. void SetCanvas(TCanvas* c); remember my host TCanvas and adopt its name. customEvent(QEvent* ); The custom response to the special WIN32 events; These events are not present with X11 systems. void contextMenuEvent(QContextMenuEvent* ); The custom response to the Qt QContextMenuEvent; Map QContextMenuEvent to the ROOT kButton3Down = 3 event. void focusInEvent(QFocusEvent* ); The custom response to the Qt QFocusEvent ""in""; this imposes an extra protection to avoid TObject interaction with; mouse event accidently. void focusOutEvent(QFocusEvent* ); The custom response to the Qt QFocusEvent ""out""; this imposes an extra protection to avoid TObject interaction with; mouse event accidently. void mousePressEvent(QMouseEvent* ); Map the Qt mouse press button event to the ROOT TCanvas events; Mouse events occur when a mo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQtWidget.html:25189,perform,performance,25189,root/html602/TQtWidget.html,https://root.cern,https://root.cern/root/html602/TQtWidget.html,2,['perform'],['performance']
Performance," * InitRint(Bool_t prompt = kFALSE, const char* appClassName = ""QtRint"", int* argc = 0, char** argv = 0, void* options = 0, int numOptions = 0, Bool_t noLogo = kTRUE). Instantiate ROOT from within Qt application if needed; Return the TRint pointer; Most parametrs are passed to TRint class ctor. Bool_t prompt = kTRUE; Instantiate ROOT with ROOT command prompt; kFALSE; No ROOT prompt. The default for Qt GUI applications. The prompt option can be defined via ROOT parameter file "".rootrc""; .rootrc:; . . .; Gui.Prompt yes. void Erase(); Erases the entire widget and its double buffer. void cd(); [slot] to make this embedded canvas the current one. void cd(int subpadnumber); [slot] to make this embedded canvas / pad the current one. void Disconnect(); [slot] Disconnect the Qt widget from TCanvas object before deleting; to avoid the dead lock; one has to set CanvasID = 0 to disconnect things properly. void Refresh(); [slot] to allow Qt signal refreshing the ROOT TCanvas if needed; use the permanent single shot timer to eliminate; the redundand refreshing for the sake of the performance. void SetCanvas(TCanvas* c); remember my host TCanvas and adopt its name. customEvent(QEvent* ); The custom response to the special WIN32 events; These events are not present with X11 systems. void contextMenuEvent(QContextMenuEvent* ); The custom response to the Qt QContextMenuEvent; Map QContextMenuEvent to the ROOT kButton3Down = 3 event. void focusInEvent(QFocusEvent* ); The custom response to the Qt QFocusEvent ""in""; this imposes an extra protection to avoid TObject interaction with; mouse event accidently. void focusOutEvent(QFocusEvent* ); The custom response to the Qt QFocusEvent ""out""; this imposes an extra protection to avoid TObject interaction with; mouse event accidently. void mousePressEvent(QMouseEvent* ); Map the Qt mouse press button event to the ROOT TCanvas events; Mouse events occur when a mouse button is pressed or released inside; a widget or when the mouse cursor is move",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQtWidget.html:8580,perform,performance,8580,root/html528/TQtWidget.html,https://root.cern,https://root.cern/root/html528/TQtWidget.html,3,['perform'],['performance']
Performance," *)0 and an error message in emsg. void HandleProcess(TMessage* mess, TString* slb = 0); Handle processing request. Int_t SendResults(TSocket* sock, TList* outlist = 0, TQueryResult* pq = 0); Sends all objects from the given list to the specified socket. void ProcessNext(TString* slb = 0); process the next query from the queue of submitted jobs.; to be called on the top master only. Int_t RegisterDataSets(TList* in, TList* out, TDataSetManager* dsm, TString& e); Register TFileCollections in 'out' as datasets according to the rules in 'in'. void HandleQueryList(TMessage* mess); Handle request for list of queries. void HandleRemove(TMessage* mess, TString* slb = 0); Handle remove request. void HandleRetrieve(TMessage* mess, TString* slb = 0); Handle retrieve request. Int_t HandleLibIncPath(TMessage* mess); Handle lib, inc search paths modification request. void HandleCheckFile(TMessage* mess, TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle here all cache and package requests. Int_t HandleWorkerLists(TMessage* mess); Handle here all requests to modify worker lists. FILE * SetErrorHandlerFile(FILE* ferr); Set the file stream where to log (default stderr).; If ferr == 0 the default is restored.; Returns current setting. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The PROOF error handler function. It prints the message on fgErrorHandlerFile and; if abort is set it aborts the application. Int_t CopyFromCache(const char* name, Bool_t cpbin); Retrieve any files related to 'macro' from the cache directory.; If 'cpbin' is true, the associated binaries are retrieved as well.; Returns 0 on success, -1 otherwise. Int_t CopyToCache(const char* name, Int_t opt = 0); Copy files related to 'macro' to the cache directory.; Action depends on 'opt':. opt = 0 copy 'macro' to cache and delete from cache any binary; related to name; e.g. if macro = bla.C, the binaries are; bla_C.so, bla_C.r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofServ.html:27515,cache,cache,27515,root/html534/TProofServ.html,https://root.cern,https://root.cern/root/html534/TProofServ.html,2,['cache'],['cache']
Performance," *branchDescriptor="""", char delimiter=' ') override;  Read from filename as many columns as variables in the ntuple the function returns the number of rows found in the file The second argument ""branchDescriptor"" is currently not used. ;  ; void ResetBranchAddress (TBranch *) override;  Reset the branch addresses to the internal fArgs array. ;  ; void ResetBranchAddresses () override;  Reset the branch addresses to the internal fArgs array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TTree;  TTree ();  Default constructor and I/O constructor. ;  ;  TTree (const char *name, const char *title, Int_t splitlevel=99, TDirectory *dir=(::ROOT::Internal::TDirectoryAtomicAdapter{}));  Normal tree constructor. ;  ;  TTree (const TTree &tt)=delete;  ;  ~TTree () override;  Destructor. ;  ; void AddAllocationCount (UInt_t count);  ; virtual Int_t AddBranchToCache (const char *bname, bool subbranches=false);  Add branch with name bname to the Tree cache. ;  ; virtual Int_t AddBranchToCache (TBranch *branch, bool subbranches=false);  Add branch b to the Tree cache. ;  ; void AddClone (TTree *);  Add a cloned tree to our list of trees to be notified whenever we change our branch addresses or when we are deleted. ;  ; virtual TFriendElement * AddFriend (const char *treename, const char *filename="""");  Add a TFriendElement to the list of friends. ;  ; virtual TFriendElement * AddFriend (const char *treename, TFile *file);  Add a TFriendElement to the list of friends. ;  ; virtual TFriendElement * AddFriend (TTree *tree, const char *alias="""", bool warn=false);  Add a TFriendElement to the list of friends. ;  ; virtual void AddTotBytes (Int_t tot);  ; virtual void AddZipBytes (Int_t zip);  ; virtual Long64_t AutoSave (Option_t *option="""");  AutoSave tree header every fAutoSave bytes. ;  ; virtual Int_t Branch (const char *folder, Int_t bufsize=32000, Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNtuple.html:3130,cache,cache,3130,doc/master/classTNtuple.html,https://root.cern,https://root.cern/doc/master/classTNtuple.html,2,['cache'],['cache']
Performance," *branchname) constReturn status of branch with name branchname.Definition TTree.cxx:5380; TTree::fFriendLockStatusUInt_t fFriendLockStatus! Record which method is locking the friend recursionDefinition TTree.h:137; TTree::fEventListTEventList * fEventList! Pointer to event selection list (if one)Definition TTree.h:125; TTree::GetEntryvirtual Int_t GetEntry(Long64_t entry, Int_t getall=0)Read all branches of entry and return total number of bytes read.Definition TTree.cxx:5638; TTree::SetCircularvirtual void SetCircular(Long64_t maxEntries)Enable/Disable circularity for this tree.Definition TTree.cxx:8892; TTree::GetClusterIteratorvirtual TClusterIterator GetClusterIterator(Long64_t firstentry)Return an iterator over the cluster of baskets starting at firstentry.Definition TTree.cxx:5467; TTree::ResetBranchAddressvirtual void ResetBranchAddress(TBranch *)Tell all of our branches to set their addresses to zero.Definition TTree.cxx:8065; TTree::fCacheUserSetbool fCacheUserSet! true if the cache setting was explicitly given by userDefinition TTree.h:141; TTree::GetEntryNumberWithIndexvirtual Long64_t GetEntryNumberWithIndex(Long64_t major, Long64_t minor=0) constReturn entry number corresponding to major and minor number.Definition TTree.cxx:5910; TTree::GetListOfLeavesvirtual TObjArray * GetListOfLeaves()Definition TTree.h:529; TTree::GetCurrentFileTFile * GetCurrentFile() constReturn pointer to the current file.Definition TTree.cxx:5479; TTree::Streamervoid Streamer(TBuffer &) overrideStream a class object.Definition TTree.cxx:9545; TTree::GetPlayerTVirtualTreePlayer * GetPlayer()Load the TTreePlayer (if not already done).Definition TTree.cxx:6305; TTree::GetWeightvirtual Double_t GetWeight() constDefinition TTree.h:584; TTree::Drawvoid Draw(Option_t *opt) overrideDefault Draw method for all objects.Definition TTree.h:431; TTree::GetMaximumvirtual Double_t GetMaximum(const char *columname)Return maximum of column with name columname.Definition TTree.cxx:6235; TTree::f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:145951,cache,cache,145951,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,1,['cache'],['cache']
Performance," *bre = T.GetBranch(""e"");; brc->GetEntry(i);; bre->GetEntry(i);. If found is not 0, the number of branch(es) found matching the regular; expression is returned in *found AND the error message 'unknown branch'; is suppressed. void SetBranchStyle(Int_t style = 1); Set the current branch style. (static function). style = 0 old Branch; style = 1 new Bronch. void SetCacheSize(Long64_t cachesize = -1); Set maximum size of the file cache .; if cachesize = 0 the existing cache (if any) is deleted.; if cachesize = -1 (default) it is set to the AutoFlush value when writing; the Tree (default is 30 MBytes). void SetCacheSizeAux(Bool_t autocache = kTRUE, Long64_t cacheSize = 0); Set the size of the file cache and create it if needed. If autocache is true:; this will be an automatically create cache, possibly replacing an; existing autocreated cache with a larger one. The size is calculated,; cacheSize is unused. If autocache is false:; cacheSize is used to size the cache. This cache should never be; automatically adjusted. void SetCacheEntryRange(Long64_t first, Long64_t last); interface to TTreeCache to set the cache entry range. void SetCacheLearnEntries(Int_t n = 10); interface to TTreeCache to set the number of entries for the learning phase. void SetCircular(Long64_t maxEntries); Enable/Disable circularity for this tree. if maxEntries > 0 a maximum of maxEntries is kept in one buffer/basket; per branch in memory.; Note that when this function is called (maxEntries>0) the Tree; must be empty or having only one basket per branch.; if maxEntries <= 0 the tree circularity is disabled. NOTE 1:; Circular Trees are interesting in online real time environments; to store the results of the last maxEntries events.; NOTE 2:; Calling SetCircular with maxEntries <= 0 is necessary before; merging circular Trees that have been saved on files.; NOTE 3:; SetCircular with maxEntries <= 0 is automatically called; by TChain::Merge; NOTE 4:; A circular Tree can still be saved in a file. When r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:132197,cache,cache,132197,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,2,['cache'],['cache']
Performance," *countries[nx] = {; ""france"", ""spain"", ""sweden"", ""germany"", ""finland"",; ""norway"", ""poland"", ""italy"", ""yugoslavia"", ""united_kingdom"",; ""romania"", ""belarus"",""greece"", ""czechoslovakia"",""bulgaria"",; ""iceland"", ""hungary"",""portugal"",""austria"", ""ireland"",; ""lithuania"", ""latvia"", ""estonia"", ""denmark"", ""netherlands"",; ""switzerland"",""moldova"",""belgium"", ""albania"", ""cyprus"",; ""luxembourg"", ""andorra"",""malta"", ""liechtenstein"", ""san_marino"", ""monaco"" };; Float_t surfaces[nx] = {; 547030, 505580, 449964, 357021, 338145,; 324220, 312685, 301230, 255438, 244820,; 237500, 207600, 131940, 127711, 110910,; 103000, 93030, 89242, 83870, 70280,; 65200, 64589, 45226, 43094, 41526,; 41290, 33843, 30528, 28748, 9250,; 2586, 468, 316, 160, 61, 2};; ; TH1F *h = new TH1F(""h"",""Countries surfaces (in km^{2})"",3,0,3);; for (i=0; i<nx; i++) h->Fill(countries[i], surfaces[i]);; h->LabelsDeflate();; ; TFile::SetCacheFileDir(""."");; TFile *f;; f = TFile::Open(""http://root.cern/files/europe.root"",""cacheread"");; ; if (!f) {; printf(""Cannot access europe.root. Is internet working ?\n"");; return;; }; ; TH2Poly *p = new TH2Poly(; ""Europe"",; ""Europe (bin contents are normalized to the surfaces in km^{2})"",; lon1,lon2,lat1,lat2);; p->GetXaxis()->SetNdivisions(520);; p->GetXaxis()->SetTitle(""longitude"");; p->GetYaxis()->SetTitle(""latitude"");; ; p->SetContour(100);; ; TMultiGraph *mg;; TKey *key;; TIter nextkey(gDirectory->GetListOfKeys());; while ((key = (TKey*)nextkey())) {; TObject *obj = key->ReadObj();; if (obj->InheritsFrom(""TMultiGraph"")) {; mg = (TMultiGraph*)obj;; p->AddBin(mg);; }; }; ; TRandom r;; Double_t longitude, latitude;; Double_t x, y, pi4 = TMath::Pi()/4, alpha = TMath::Pi()/360;; ; gBenchmark->Start(""Partitioning"");; p->ChangePartition(100, 100);; gBenchmark->Show(""Partitioning"");; ; // Fill TH2Poly according to a Mercator projection.; gBenchmark->Start(""Filling"");; for (i=0; i<npoints; i++) {; longitude = r.Uniform(lon1,lon2);; latitude = r.Uniform(lat1,lat2);; x = longitude;; y = 38*TMath:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/th2polyEurope_8C.html:2800,cache,cacheread,2800,doc/master/th2polyEurope_8C.html,https://root.cern,https://root.cern/doc/master/th2polyEurope_8C.html,1,['cache'],['cacheread']
Performance," *h2 = hDivFR->DrawCopy(""bar2,same"");. TLegend *legend = new TLegend(0.55,0.65,0.76,0.82);; legend->AddEntry(h1,""All nations"",""f"");; legend->AddEntry(h2,""French only"",""f"");; legend->Draw();. c1->cd();; delete f;; }; To control the bar width (default is the bin width) TH1::SetBarWidth(); should be used. To control the bar offset (default is 0) TH1::SetBarOffset() should; be used. These two parameters are useful when several histograms are plotted using; the option SAME. They allow to plot the histograms next to each other.; The SCATter plot option (default for 2D histograms); For each cell (i,j) a number of points proportional to the cell content is; drawn. A maximum of kNMAX points per cell is drawn. If the maximum is above; kNMAX contents are normalized to kNMAX (kNMAX=2000).; If option is of the form ""scat=ff"", (eg scat=1.8,; scat=1e-3), then ff is used as a scale factor to compute the; number of dots. ""scat=1"" is the default. By default the scatter plot is painted with a ""dot marker"" which not scalable; (see the TAttMarker; documentation). To change the marker size, a scalable marker type should be; used. For instance a circle (marker style 20). Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",600,400);; TH2F *hscat = new TH2F(""hscat"",""Option SCATter example (default for 2D histograms) "",40,-4,4,40,-20,20);; Float_t px, py;; for (Int_t i = 0; i < 25000; i++) {; gRandom->Rannor(px,py);; hscat->Fill(px,5*py);; hscat->Fill(3+0.5*px,2*py-10.);; }; hscat->Draw(""scat=0.5"");; return c1;; }; The ARRow option; Shows gradient between adjacent cells. For each cell (i,j) an arrow is drawn; The orientation of the arrow follows the cell gradient. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",600,400);; TH2F *harr = new TH2F(""harr"",""Option ARRow example"",20,-4,4,20,-20,20);; Float_t px, py;; for (Int_t i = 0; i < 25000; i++) {; gRandom->Rannor(px,py);; harr->Fill(px,5*py);; harr->Fill(3+0.5*px,2*py-10.,0.1);; }; harr->Draw(""ARR"");; return c1;; }; The BOX option",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THistPainter.html:26177,scalab,scalable,26177,root/html602/THistPainter.html,https://root.cern,https://root.cern/root/html602/THistPainter.html,1,['scalab'],['scalable']
Performance," *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fA0Calc;  calculated value of background a0 parameter ;  ; Double_t fA0Err;  error value of background a0 parameter ;  ; Double_t fA0Init;  initial value of background a0 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ;  ; Double_t fA1Calc;  calculated value of background a1 parameter ;  ; Double_t fA1Err;  error value of background a1 parameter ;  ; Double_t fA1Init;  initial value of background a1 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ;  ; Double_t fA2Calc;  calculated value of background a2 parameter ;  ; Double_t fA2Err;  error value of background a2 parameter ;  ; Double_t fA2Init;  initial value of background a2 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ;  ; Double_t fAlpha;  convergence coefficient, input parameter, it should be positive number and <=1, for details see references ;  ; Int_t fAlphaOptim;  optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal ;  ; Double_t * fAmpCalc;  [fNPeaks] array of calculated values of fitted amplitudes, output parameters ;  ; Double_t * fAmpErr;  [fNPeaks] array of amplitude errors ;  ; Double_t * fAmpInit;  [fNPeaks] array of initial values of peaks amplitudes, input parameters ;  ; Double_t * fArea;  [fNPeaks] array of calculated areas of peaks ;  ; Double_t * fAreaErr;  [fNPeaks] array of errors of peak areas ;  ; Double_t fBCalc;  calculated value of b parameter ;  ; Double_t fBErr;  error value of b parameter ;  ; Double_t fBInit;  initial value of b parameter (slope), for details see html manual and references ;  ; Double_t fChi;  here the fitting functions return resulting chi square ;  ; Int_t fFitTaylor;  order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ;  ; Bool_t fFixA0;  logical value of a0 parameter, which allows to fix",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrumFit.html:18397,optimiz,optimization,18397,doc/master/classTSpectrumFit.html,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html,1,['optimiz'],['optimization']
Performance," *option="""")Static function merging the trees in the TList into a new tree.Definition TTree.cxx:6851; TTree::MemoryFullbool MemoryFull(Int_t nbytes)Check if adding nbytes to memory we are still below MaxVirtualsize.Definition TTree.cxx:6837; TTree::GetVar4TTreeFormula * GetVar4()Definition TTree.h:572; TTree::GetReadEntryvirtual Long64_t GetReadEntry() constDefinition TTree.h:549; TTree::GetListOfBranchesvirtual TObjArray * GetListOfBranches()Definition TTree.h:528; TTree::fZipBytesLong64_t fZipBytesTotal number of bytes in all branches after compression.Definition TTree.h:87; TTree::GetTreevirtual TTree * GetTree() constDefinition TTree.h:557; TTree::fTransientBufferTBuffer * fTransientBuffer! Pointer to the current transient buffer.Definition TTree.h:138; TTree::GetValvirtual Double_t * GetVal(Int_t i)Definition TTree.h:574; TTree::SetEntryListvirtual void SetEntryList(TEntryList *list, Option_t *opt="""")Set an EntryList.Definition TTree.cxx:9046; TTree::Notifybool Notify() overrideFunction called when loading a new class library.Definition TTree.cxx:7033; TTree::AddZipBytesvirtual void AddZipBytes(Int_t zip)Definition TTree.h:332; TTree::LoadTreevirtual Long64_t LoadTree(Long64_t entry)Set current entry.Definition TTree.cxx:6473; TTree::ReadFilevirtual Long64_t ReadFile(const char *filename, const char *branchDescriptor="""", char delimiter=' ')Create or simply read branches from filename.Definition TTree.cxx:7564; TTree::GetAliasvirtual const char * GetAlias(const char *aliasName) constReturns the expanded value of the alias. Search in the friends if any.Definition TTree.cxx:5226; TTree::SetIOFeaturesROOT::TIOFeatures SetIOFeatures(const ROOT::TIOFeatures &)Provide the end-user with the ability to enable/disable various experimental IO features for this TTr...Definition TTree.cxx:9130; TTree::CreateBasketvirtual TBasket * CreateBasket(TBranch *)Create a basket for this tree and given branch.Definition TTree.cxx:3731; TTree::fUserInfoTList * fUserInfopointer to a li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8h_source.html:76126,load,loading,76126,doc/master/TTree_8h_source.html,https://root.cern,https://root.cern/doc/master/TTree_8h_source.html,1,['load'],['loading']
Performance," *why, EAbort what); 117{; 118 fAbort = what;; 119 TString mess = ""Abort"";; 120 if (fAbort == kAbortProcess); 121 mess = ""AbortProcess"";; 122 else if (fAbort == kAbortFile); 123 mess = ""AbortFile"";; 124 ; 125 Info(mess, ""%s"", why);; 126}; 127 ; 128////////////////////////////////////////////////////////////////////////////////; 129/// The code in filename is loaded (interpreted or compiled, see below),; 130/// filename must contain a valid class implementation derived from TSelector.; 131///; 132/// If filename is of the form file.C, the file will be interpreted.; 133/// If filename is of the form file.C++, the file file.C will be compiled; 134/// and dynamically loaded. The corresponding binary file and shared; 135/// library will be deleted at the end of the function.; 136/// If filename is of the form file.C+, the file file.C will be compiled; 137/// and dynamically loaded. At next call, if file.C is older than file.o; 138/// and file.so, the file.C is not compiled, only file.so is loaded.; 139///; 140/// The static function returns a pointer to a TSelector object; 141 ; 142TSelector *TSelector::GetSelector(const char *filename); 143{; 144 // If the filename does not contain ""."" assume class is compiled in; 145 TString localname;; 146 bool fromFile = false;; 147 if (strchr(filename, '.') != nullptr) {; 148 //Interpret/compile filename via CINT; 149 localname = "".L "";; 150 localname += filename;; 151 gROOT->ProcessLine(localname);; 152 fromFile = true;; 153 }; 154 ; 155 //loop on all classes known to CINT to find the class on filename; 156 //that derives from TSelector; 157 const char *basename = gSystem->BaseName(filename);; 158 if (!basename) {; 159 ::Error(""TSelector::GetSelector"",""unable to determine the classname for file %s"", filename);; 160 return nullptr;; 161 }; 162 TString aclicmode,args,io;; 163 localname = gSystem->SplitAclicMode(basename,aclicmode,args,io);; 164 if (localname.Last('.') != kNPOS); 165 localname.Remove(localname.Last('.'));; 166 ; 167 //",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSelector_8cxx_source.html:5887,load,loaded,5887,doc/master/TSelector_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSelector_8cxx_source.html,1,['load'],['loaded']
Performance," * ; file = nullptr, . Bool_t ; load = kTRUE . ). pure virtual . Implemented in TStreamerInfo. ◆ BuildEmulated(). virtual void TVirtualStreamerInfo::BuildEmulated ; (; TFile * ; file). pure virtual . Implemented in TStreamerInfo. ◆ BuildFor(). virtual Bool_t TVirtualStreamerInfo::BuildFor ; (; const TClass * ; cl). pure virtual . Implemented in TStreamerInfo. ◆ BuildOld(). virtual void TVirtualStreamerInfo::BuildOld ; (; ). pure virtual . Implemented in TStreamerInfo. ◆ CallShowMembers(). virtual void TVirtualStreamerInfo::CallShowMembers ; (; const void * ; obj, . TMemberInspector & ; insp, . Bool_t ; isTransient . ); const. pure virtual . Implemented in TStreamerInfo. ◆ CanDelete(). Bool_t TVirtualStreamerInfo::CanDelete ; (; ). static . static function returning true if ReadBuffer can delete object ; Definition at line 78 of file TVirtualStreamerInfo.cxx. ◆ CanOptimize(). Bool_t TVirtualStreamerInfo::CanOptimize ; (; ). static . static function returning true if optimization can be on ; Definition at line 86 of file TVirtualStreamerInfo.cxx. ◆ Class(). static TClass * TVirtualStreamerInfo::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TVirtualStreamerInfo::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TVirtualStreamerInfo::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 216 of file TVirtualStreamerInfo.h. ◆ Clear(). virtual void TVirtualStreamerInfo::Clear ; (; Option_t * ; option = """"). overridepure virtual . Set name and title to empty strings (""""). ; Reimplemented from TNamed.; Implemented in TStreamerInfo. ◆ CompareContent(). virtual Bool_t TVirtualStreamerInfo::CompareContent ; (; TClass * ; cl, . TVirtualStreamerInfo * ; info, . Bool_t ; warn, . Bool_t ; complete, . TFile * ; file . ). pure virtual . Implemented in TStreamerInfo. ◆ Compile(). virtual void TVirtualStreamerInfo::Compile ; (; ). pure virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualStreamerInfo.html:22332,optimiz,optimization,22332,doc/master/classTVirtualStreamerInfo.html,https://root.cern,https://root.cern/doc/master/classTVirtualStreamerInfo.html,1,['optimiz'],['optimization']
Performance," * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 194 of file RooMultiVarGaussian.cxx. ◆ getGenerator(). Int_t RooMultiVarGaussian::getGenerator ; (; const RooArgSet & ; directVars, . RooArgSet & ; generateVars, . bool ; staticInitOK = true . ); const. overridevirtual . Special case: generate all observables. ; Reimplemented from RooAbsPdf.; Definition at line 374 of file RooMultiVarGaussian.cxx. ◆ initGenerator(). void RooMultiVarGaussian::initGenerator ; (; Int_t ; code). overridevirtual . Clear the GenData cache as its content is not invariant under changes in the mu vector. ; Reimplemented from RooAbsPdf.; Definition at line 422 of file RooMultiVarGaussian.cxx. ◆ IsA(). TClass * RooMultiVarGaussian::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 112 of file RooMultiVarGaussian.h. ◆ muVec(). const RooArgList & RooMultiVarGaussian::muVec ; (; ); const. inline . Definition at line 53 of file RooMultiVarGaussian.h. ◆ setAnaIntZ(). void RooMultiVarGaussian::setAnaIntZ ; (; double ; z). inline . Definition at line 39 of file RooMultiVarGaussian.h. ◆ Streamer(). void RooMultiVarGaussian::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooMultiVarGaussian::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 112 of file RooMultiVarGaussian.h. ◆ syncMuVec(). void RooMultiVarGaussian::syncMuVec ; (; )",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMultiVarGaussian.html:80186,cache,cache,80186,doc/master/classRooMultiVarGaussian.html,https://root.cern,https://root.cern/doc/master/classRooMultiVarGaussian.html,1,['cache'],['cache']
Performance," * ; treename . ). overridevirtual . Set/Change the name of the default tree. ; The tree name may contain subdir specification in the form ""subdir/name"". Returns 0 on success, -1 otherwise. ; Reimplemented from TProof.; Definition at line 2002 of file TProofLite.cxx. ◆ SetProofServEnv(). Int_t TProofLite::SetProofServEnv ; (; const char * ; ord). private . Create environment files for worker 'ord'. ; Definition at line 684 of file TProofLite.cxx. ◆ SetQueryRunning(). void TProofLite::SetQueryRunning ; (; TProofQueryResult * ; pq). protected . Set query in running state. ; Definition at line 1025 of file TProofLite.cxx. ◆ SetupWorkers(). Int_t TProofLite::SetupWorkers ; (; Int_t ; opt = 0, . TList * ; wrks = 0 . ). protected . Start up PROOF workers. ; Definition at line 489 of file TProofLite.cxx. ◆ ShowCache(). void TProofLite::ShowCache ; (; Bool_t ; all = kFALSE). overridevirtual . List contents of file cache. ; If all is true show all caches also on slaves. If everything is ok all caches are to be the same. ; Reimplemented from TProof.; Definition at line 1508 of file TProofLite.cxx. ◆ ShowData(). void TProofLite::ShowData ; (; ). overridevirtual . List contents of the data directory in the sandbox. ; This is the place where files produced by the client queries are kept ; Reimplemented from TProof.; Definition at line 2479 of file TProofLite.cxx. ◆ ShowDataDir(). void TProofLite::ShowDataDir ; (; const char * ; dirname). private . List contents of the data directory 'dirname'. ; Definition at line 2495 of file TProofLite.cxx. ◆ ShowDataSetCache(). void TProofLite::ShowDataSetCache ; (; const char * ; dataset = 0). overridevirtual . Display the content of the dataset cache, if any (matching 'dataset', if defined). ; Reimplemented from TProof.; Definition at line 2292 of file TProofLite.cxx. ◆ ShowDataSets(). void TProofLite::ShowDataSets ; (; const char * ; uri = """", . const char * ; opt = 0 . ). overridevirtual . Shows datasets in locations that match the uri By ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:66422,cache,caches,66422,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['cache'],['caches']
Performance," * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TVirtualStreamerInfo (const TVirtualStreamerInfo &info);  copy constructor ;  ; TVirtualStreamerInfo & operator= (const TVirtualStreamerInfo &);  assignment operator ;  ; void ResetIsCompiled ();  ; void SetIsCompiled ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Bool_t fIsBuilt: 1;  true if the StreamerInfo has been optimized ;  ; std::atomic< Bool_t > fIsCompiled;  true if the StreamerInfo has been 'built' (i.e. has all the StreamerElements it should have) ;  ; Bool_t fOptimized: 1;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static Bool_t fgCanDelete = kTRUE;  true if the StreamerInfo has been compiled (i.e. fully built, ready to use for streaming). ;  ; static TVirtualStreamerInfo * fgInfoFactory = nullptr;  ; static Bool_t fgOptimize = kTRUE;  ; static Bool_t fgStreamMemberWise = kTRUE;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TVirtualStreamerInfo.h>. Inheritance diagram for TVirtualStreamerInfo:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EReadWrite. enum TVirtualStreamerInfo::EReadWrite. EReadWrite Enumerator. . Enum Constant Description . kBase Base class",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualStreamerInfo.html:16988,optimiz,optimized,16988,doc/master/classTVirtualStreamerInfo.html,https://root.cern,https://root.cern/doc/master/classTVirtualStreamerInfo.html,1,['optimiz'],['optimized']
Performance," * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGFrameElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; TGFrameElementPack * fSplitFE;  ! cached variable for optimisation ;  ; Float_t fWeight;  relative weight ;  ;  Public Attributes inherited from TGFrameElement; TGFrame * fFrame;  ; TGLayoutHints * fLayout;  ; Int_t fState;  . Private Member Functions;  TGFrameElementPack (const TGFrameElementPack &)=delete;  ; TGFrameElementPack & operator= (const TGFrameElementPack &)=delete;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFrameElementPack.html:9426,cache,cached,9426,doc/master/classTGFrameElementPack.html,https://root.cern,https://root.cern/doc/master/classTGFrameElementPack.html,1,['cache'],['cached']
Performance," + dataSB.Size(), True); result = fitter.Result(); result.Print(ROOT.std.cout); ; c1 = ROOT.TCanvas(""Simfit"", ""Simultaneous fit of two histograms"", 10, 10, 700, 700); c1.Divide(1, 2); c1.cd(1); ROOT.gStyle.SetOptFit(1111); ; fB.SetFitResult(result, iparB); fB.SetRange(rangeB().first, rangeB().second); fB.SetLineColor(ROOT.kBlue); hB.GetListOfFunctions().Add(fB); hB.Draw(); ; c1.cd(2); fSB.SetFitResult(result, iparSB); fSB.SetRange(rangeSB().first, rangeSB().second); fSB.SetLineColor(ROOT.kRed); hSB.GetListOfFunctions().Add(fSB); hSB.Draw(); ; c1.SaveAs(""combinedFit.png""); ROOT::Fit::BinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y ...Definition BinData.h:52; ROOT::Fit::Chi2FCNChi2FCN class for binned fits using the least square methods.Definition Chi2FCN.h:46; ROOT::Fit::DataRangeclass describing the range in the coordinates it supports multiple range in a coordinate.Definition DataRange.h:35; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Math::FunctorDocumentation for class Functor class.Definition Functor.h:47; ROOT::Math::WrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions...Definition WrappedMultiTF1.h:48; object; ROOT::Fit::FillDatavoid FillData(BinData &dv, const TH1 *hist, TF1 *func=nullptr)fill the data vector from a TH1.Definition HFitInterface.cxx:107; TMatrixTAutoloadOps::AddTMatrixT< Element > & Add(TMatrixT< Element > &target, Element scalar, const TMatrixT< Element > &source)Modify addition: target += scalar * source.Definition TMatrixT.cxx:2936; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28; AuthorJonas Rembser, Lorenzo Moneta (C++ version) ; Definition in file combinedFit.py. tutorialsfitcombinedFit.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/combinedFit_8py.html:4326,perform,performing,4326,doc/master/combinedFit_8py.html,https://root.cern,https://root.cern/doc/master/combinedFit_8py.html,1,['perform'],['performing']
Performance," += loader->GetName();; 401 fileDir += ""/"" + gConfig().GetIONames().fWeightFileDir;; 402 }; 403 // initialize methods; 404 IMethod *im;; 405 if (!boostNum) {; 406 im = ClassifierFactory::Instance().Create(theMethodName.Data(), fJobName, methodTitle, loader->GetDataSetInfo(),; 407 theOption);; 408 } else {; 409 // boosted classifier, requires a specific definition, making it transparent for the user; 410 Log() << kDEBUG << ""Boost Number is "" << boostNum << "" > 0: train boosted classifier"" << Endl;; 411 im = ClassifierFactory::Instance().Create(""Boost"", fJobName, methodTitle, loader->GetDataSetInfo(), theOption);; 412 MethodBoost *methBoost = dynamic_cast<MethodBoost *>(im); // DSMTEST divided into two lines; 413 if (!methBoost) { // DSMTEST; 414 Log() << kFATAL << ""Method with type kBoost cannot be casted to MethodCategory. /Factory"" << Endl; // DSMTEST; 415 return nullptr;; 416 }; 417 if (fModelPersistence); 418 methBoost->SetWeightFileDir(fileDir);; 419 methBoost->SetModelPersistence(fModelPersistence);; 420 methBoost->SetBoostedMethodName(theMethodName); // DSMTEST divided into two lines; 421 methBoost->fDataSetManager = loader->GetDataSetInfo().GetDataSetManager(); // DSMTEST; 422 methBoost->SetFile(fgTargetFile);; 423 methBoost->SetSilentFile(IsSilentFile());; 424 }; 425 ; 426 MethodBase *method = dynamic_cast<MethodBase *>(im);; 427 if (method == 0); 428 return 0; // could not create method; 429 ; 430 // set fDataSetManager if MethodCategory (to enable Category to create datasetinfo objects) // DSMTEST; 431 if (method->GetMethodType() == Types::kCategory) { // DSMTEST; 432 MethodCategory *methCat = (dynamic_cast<MethodCategory *>(im)); // DSMTEST; 433 if (!methCat) { // DSMTEST; 434 Log() << kFATAL << ""Method with type kCategory cannot be casted to MethodCategory. /Factory""; 435 << Endl; // DSMTEST; 436 return nullptr;; 437 }; 438 if (fModelPersistence); 439 methCat->SetWeightFileDir(fileDir);; 440 methCat->SetModelPersistence(fModelPersistence);; 441 methCat->",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:17204,load,loader,17204,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['load'],['loader']
Performance," - unique inside window manager. ; Definition at line 251 of file RWebWindow.hxx. ◆ GetManager(). std::shared_ptr< RWebWindowsManager > ROOT::RWebWindow::GetManager ; (; ); const. inline . Returns window manager. ; Definition at line 254 of file RWebWindow.hxx. ◆ GetMasterConnections(). std::vector< RWebWindow::MasterConn > RWebWindow::GetMasterConnections ; (; unsigned ; connid = 0); const. private . Get list of master connections. ; Definition at line 326 of file RWebWindow.cxx. ◆ GetMaxQueueLength(). unsigned ROOT::RWebWindow::GetMaxQueueLength ; (; ); const. inline . Return maximal queue length of data which can be held by window. ; Definition at line 307 of file RWebWindow.hxx. ◆ GetOperationTmout(). float ROOT::RWebWindow::GetOperationTmout ; (; ); const. inline . Returns timeout for synchronous WebWindow operations. ; Definition at line 354 of file RWebWindow.hxx. ◆ GetSendQueueLength(). int RWebWindow::GetSendQueueLength ; (; unsigned ; connid); const. Returns send queue length for specified connection. ; Parameters. connidconnection id, 0 - maximal value for all connections is returned If wrong connection id specified, -1 is return . Definition at line 1551 of file RWebWindow.cxx. ◆ GetServer(). THttpServer * RWebWindow::GetServer ; (; ). Return THttpServer instance serving requests to the window. ; Definition at line 181 of file RWebWindow.cxx. ◆ GetUrl(). std::string RWebWindow::GetUrl ; (; bool ; remote = true). Return URL string to connect web window URL typically includes extra parameters required for connection with the window like http://localhost:9635/win1/?key=<connection_key>#<session_key> When. ; Parameters. remoteis true, real HTTP server will be started automatically and widget can be connected from the web browser. If; remoteis false, HTTP server will not be started and window can be connected only from ROOT application itself. !!! WARNING - do not invoke this method without real need, each URL consumes resources in widget and in http server .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebWindow.html:32179,queue,queue,32179,doc/master/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html,1,['queue'],['queue']
Performance," -- Debugging tool; const RooArgSet*_projDepsPointer to set with projected observables; TListRooAbsArg::_proxyListlist of proxies; string_rangeNameName of range in which to calculate test statistic; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; Int_t_simCountTotal number of component p.d.f.s in RooSimultaneous (if any); RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; Bool_t_splitRangeSplit rangeName in RooSimultaneous index labels if true; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; Bool_t_verboseVerbose messaging if true; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. RooAbsTestStatistic**_gofArray! Array of sub-contexts representing part of the combined test statistic; RooAbsTestStatistic::GOFOpMode_gofOpModeOperation mode of test statistic instance ; Bool_t_init! Is object initialized ; RooRealMPFE**_mpfeArray! Array of parallel execution frond ends; Bool_t_mpinterlUse interleaving strategy rather than N-wise split for partioning of dataset for multiprocessor-split; Int_t_nCPUNumber of processors to use in parallel calculation mode; Int_t_nEventsTotal number of events in test statistic calculation; Int_t_nGofNumber of sub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsTestStatistic.html:34596,cache,cache,34596,root/html528/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html528/RooAbsTestStatistic.html,2,['cache'],['cache']
Performance," -- RooAbsCachedPdf::getCache(lmorph) creating new cache 0x8bddf40 with pdf g1_MORPH_g2_CACHE_Obs[x]_NORM_x for nset (x) with code 0; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(lmorph) creating new cache 0x8bddf40 with pdf g1_MORPH_g2_CACHE_Obs[x]_NORM_x for nset (x) with code 0; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(lmorph) creating new cache 0x8bddf40 with pdf g1_MORPH_g2_CACHE_Obs[x]_NORM_x for nset (x) with code 0; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(lmorph) creating new cache 0x8c083e0 with pdf g1_MORPH_g2_CACHE_Obs[x]_NORM_x_alpha for nset (x,alpha) with code 0 from preexisting content.; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(lmorph) creating new cache 0x91bacc0 with pdf g1_MORPH_g2_CACHE_Obs[x]_NORM_x for nset (x) with code 0; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(lmorph) creating new cache 0x90b1580 with pdf g1_MORPH_g2_CACHE_Obs[x]_NORM_x for nset (x) with code 0 from preexisting content.; [#0] PROGRESS:Eval -- RooIntegralMorph::fillCacheObject(lmorph) filling multi-dimensional cache..................................................; ; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(lmorph) creating new cache 0x937f4b0 with pdf g1_MORPH_g2_CACHE_Obs[alpha,x]_NORM_x for nset (x) with code 0; [#1] INFO:Fitting -- RooAbsPdf::fitTo(lmorph_over_lmorph_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_lmorph_over_lmorph_Int[x]_lmorphData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for alpha: using 0.1; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(lmorph) creating new cache 0x937e260 with pdf g1_MORPH_g2_CACHE_Obs[alpha,x] for nset () with code 1 fro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf705__linearmorph_8py.html:5240,cache,cache,5240,doc/master/rf705__linearmorph_8py.html,https://root.cern,https://root.cern/doc/master/rf705__linearmorph_8py.html,1,['cache'],['cache']
Performance," -1 in case ""cl"" is not a base class.; Takes care of multiple inheritance. TClass * GetBaseDataMember(const char* datamember); Return pointer to (base) class that contains datamember. ROOT::ESTLType GetCollectionType() const; Return the 'type' of the STL the TClass is representing.; and return ROOT::kNotSTL if it is not representing an STL collection. TVirtualCollectionProxy * GetCollectionProxy() const; Return the proxy describing the collection (if any). TClassStreamer * GetStreamer() const; Return the Streamer Class allowing streaming (if any). ClassStreamerFunc_t GetStreamerFunc() const; Get a wrapper/accessor function around this class custom streamer (member function). ClassConvStreamerFunc_t GetConvStreamerFunc() const; Get a wrapper/accessor function around this class custom conversion streamer (member function). TVirtualIsAProxy* GetIsAProxy() const; Return the proxy implementing the IsA functionality. TClass * GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE); Static method returning pointer to TClass of the specified class name.; If load is true an attempt is made to obtain the class by loading; the appropriate shared library (directed by the rootmap file).; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used only for transient members); Returns 0 in case class is not found. TClass * GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE); Return pointer to class with name. TClass * GetClass(ClassInfo_t* info, Bool_t load = kTRUE, Bool_t silent = kFALSE); Static method returning pointer to TClass of the specified ClassInfo.; If load is true an attempt is made to obtain the class by loading; the appropriate shared library (directed by the rootmap file).; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used only for transient members); Returns 0 in case class is not found. Bool_t HasNoInfoOr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TClass.html:36183,load,load,36183,root/html604/TClass.html,https://root.cern,https://root.cern/root/html604/TClass.html,1,['load'],['load']
Performance," -1 in case of error and TSelector::GetStatus() in in case of success.; The code in filename is loaded (interpreted or compiled, see below), filename must contain a valid class implementation derived from TSelector, where TSelector has the following member functions:. Begin(): called every time a loop on the tree starts, a convenient place to create your histograms.; SlaveBegin(): called after Begin(), when on PROOF called only on the slave servers.; Process(): called for each event, in this function you decide what to read and fill your histograms.; SlaveTerminate: called at the end of the loop on the tree, when on PROOF called only on the slave servers.; Terminate(): called at the end of the loop on the tree, a convenient place to draw/fit your histograms. If filename is of the form file.C, the file will be interpreted. If filename is of the form file.C++, the file file.C will be compiled and dynamically loaded.; If filename is of the form file.C+, the file file.C will be compiled and dynamically loaded. At next call, if file.C is older than file.o and file.so, the file.C is not compiled, only file.so is loaded. NOTE 1; It may be more interesting to invoke directly the other Process function accepting a TSelector* as argument.eg MySelector *selector = (MySelector*)TSelector::GetSelector(filename);; selector->CallSomeFunction(..);; mytree.Process(selector,..);; filenameOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreePlayer.html:40461,load,loaded,40461,doc/master/classTTreePlayer.html,https://root.cern,https://root.cern/doc/master/classTTreePlayer.html,1,['load'],['loaded']
Performance," -1 on error . Definition at line 8831 of file TTree.cxx. ◆ SetCacheLearnEntries(). void TTree::SetCacheLearnEntries ; (; Int_t ; n = 10). virtual . Interface to TTreeCache to set the number of entries for the learning phase. ; Definition at line 8865 of file TTree.cxx. ◆ SetCacheSize(). Int_t TTree::SetCacheSize ; (; Long64_t ; cacheSize = -1). virtual . Set maximum size of the file cache . . if cachesize = 0 the existing cache (if any) is deleted.; if cachesize = -1 (default) it is set to the AutoFlush value when writing the Tree (default is 30 MBytes). The cacheSize might be clamped, see TFileCacheRead::SetBufferSize; Returns:; 0 size set, cache was created if possible; -1 on error . Reimplemented in TChain.; Definition at line 8683 of file TTree.cxx. ◆ SetCacheSizeAux(). Int_t TTree::SetCacheSizeAux ; (; bool ; autocache = true, . Long64_t ; cacheSize = 0 . ). protected . Set the size of the file cache and create it if possible. ; If autocache is true: this may be an autocreated cache, possibly enlarging an existing autocreated cache. The size is calculated. The value passed in cacheSize:; cacheSize = 0 make cache if default cache creation is enabled; cacheSize = -1 make a default sized cache in any case. If autocache is false: this is a user requested cache. cacheSize is used to size the cache. This cache should never be automatically adjusted.; The cacheSize might be clamped, see TFileCacheRead::SetBufferSize; Returns:; 0 size set, or existing autosized cache almost large enough. (cache was created if possible); -1 on error . Definition at line 8711 of file TTree.cxx. ◆ SetChainOffset(). virtual void TTree::SetChainOffset ; (; Long64_t ; offset = 0). inlinevirtual . Definition at line 649 of file TTree.h. ◆ SetCircular(). void TTree::SetCircular ; (; Long64_t ; maxEntries). virtual . Enable/Disable circularity for this tree. ; if maxEntries > 0 a maximum of maxEntries is kept in one buffer/basket per branch in memory. Note that when this function is called (ma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:210762,cache,cache,210762,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,2,['cache'],['cache']
Performance," -1 . ). private . calculate the estimator that training is attempting to minimize ; Definition at line 292 of file MethodMLP.cxx. ◆ CalculateNeuronDeltas(). void TMVA::MethodMLP::CalculateNeuronDeltas ; (; ). private . have each neuron calculate its delta by back propagation ; Definition at line 1328 of file MethodMLP.cxx. ◆ Class(). static TClass * TMVA::MethodMLP::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::MethodMLP::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::MethodMLP::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 219 of file MethodMLP.h. ◆ ComputeDEDw(). void TMVA::MethodMLP::ComputeDEDw ; (; ). private . Definition at line 697 of file MethodMLP.cxx. ◆ ComputeEstimator(). Double_t TMVA::MethodMLP::ComputeEstimator ; (; std::vector< Double_t > & ; parameters). this function is called by GeneticANN for GA optimization ; Definition at line 1393 of file MethodMLP.cxx. ◆ DecaySynapseWeights(). void TMVA::MethodMLP::DecaySynapseWeights ; (; Bool_t ; lateEpoch). private . decay synapse weights in last 10 epochs, lower learning rate even more to find a good minimum ; Definition at line 1208 of file MethodMLP.cxx. ◆ DeclareOptions(). void TMVA::MethodMLP::DeclareOptions ; (; ). privatevirtual . define the options (their key words) that can be set in the option string ; know options:. TrainingMethod <string> Training method available values are:; BP Back-Propagation <default>; GA Genetic Algorithm (takes a LONG time). LearningRate <float> NN learning rate parameter; DecayRate <float> Decay rate for learning parameter; TestRate <int> Test for overtraining performed at each #th epochs; BPMode <string> Back-propagation learning mode available values are:; sequential <default>; batch. BatchSize <int> Batch size: number of events/batch, only set if in Batch Mode,; -1 for BatchSize=number_of_events . Reimp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html:41136,optimiz,optimization,41136,doc/master/classTMVA_1_1MethodMLP.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html,1,['optimiz'],['optimization']
Performance," -Q|V is its inverse quaternion.; ; One verifies that :; Q.Q-1 = Q-1.Q = Q|r*Q|r + Q|V*Q|V + Q|r*Q|V -Q|r*Q|V + Q|VXQ|V; = Q�|r + Q�|V = 1; . The rotation of a vector V by the rotation described by a unit quaternion Q is obtained by the following operation : V' = Q*V*Q-1, considering V as a quaternion whose real part is null.; ; Numeric computation considerations :. Numerically, the quaternion multiplication involves 12 additions and 16 multiplications.; It is therefore faster than 3x3 matrixes multiplication involving 18 additions and 27 multiplications.; ; On the contrary, rotation of a vector by the above formula ( Q*V*Q-1 ) involves 18 additions and 24 multiplications, whereas multiplication of a 3-vector by a 3x3 matrix involves only 6 additions and 9 multiplications.; ; When dealing with numerous composition of space rotation, it is therefore faster to use quaternion product. On the other hand if a huge set of vectors must be rotated by a given quaternion, it is more optimized to convert the quaternion into a rotation matrix once, and then use that later to rotate the set of vectors.; ; More information :. en.wikipedia.org/wiki/Quaternions_and_spatial_rotation .; . en.wikipedia.org/wiki/Quaternion .; ; _______________________________________________; ; This Class represents all quaternions (unit or non-unit); It possesses a Normalize() method to make a given quaternion unit; The Rotate(TVector3&) and Rotation(TVector3&) methods can be used even for a non-unit quaternion, in that case, the proper normalization is applied to perform the rotation.; ; A TRotation constructor exists than takes a quaternion for parameter (even non-unit), in that cas the proper normalisation is applied.; . Function Members (Methods); public:. TQuaternion(const Double_t*); TQuaternion(const Float_t*); TQuaternion(const TQuaternion&); TQuaternion(const TVector3& vector, Double_t real = 0); TQuaternion(Double_t real = 0, Double_t X = 0, Double_t Y = 0, Double_t Z = 0); virtual~TQuaterni",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQuaternion.html:3763,optimiz,optimized,3763,root/html528/TQuaternion.html,https://root.cern,https://root.cern/root/html528/TQuaternion.html,4,['optimiz'],['optimized']
Performance," -Q|V is its inverse quaternion.; ; One verifies that :; Q.Q-1 = Q-1.Q = Q|r*Q|r + Q|V*Q|V + Q|r*Q|V -Q|r*Q|V + Q|VXQ|V; = Q�|r + Q�|V = 1; . The rotation of a vector V by the rotation described by a unit quaternion Q is obtained by the following operation : V' = Q*V*Q-1, considering V as a quaternion whose real part is null.; ; Numeric computation considerations :. Numerically, the quaternion multiplication involves 12 additions and 16 multiplications.; It is therefore faster than 3x3 matrixes multiplication involving 18 additions and 27 multiplications.; ; On the contrary, rotation of a vector by the above formula ( Q*V*Q-1 ) involves 18 additions and 24 multiplications, whereas multiplication of a 3-vector by a 3x3 matrix involves only 6 additions and 9 multiplications.; ; When dealing with numerous composition of space rotation, it is therefore faster to use quaternion product. On the other hand if a huge set of vectors must be rotated by a given quaternion, it is more optimized to convert the quaternion into a rotation matrix once, and then use that later to rotate the set of vectors.; ; More information :. en.wikipedia.org/wiki/Quaternions_and_spatial_rotation .; . en.wikipedia.org/wiki/Quaternion .; ; _______________________________________________; ; This Class represents all quaternions (unit or non-unit); It possesses a Normalize() method to make a given quaternion unit; The Rotate(TVector3&) and Rotation(TVector3&) methods can be used even for a non-unit quaternion, in that case, the proper normalization is applied to perform the rotation.; ; A TRotation constructor exists than takes a quaternion for parameter (even non-unit), in that cas the proper normalisation is applied.; . Function Members (Methods); public:. virtual~TQuaternion(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQuaternion.html:3780,optimiz,optimized,3780,root/html602/TQuaternion.html,https://root.cern,https://root.cern/root/html602/TQuaternion.html,2,['optimiz'],['optimized']
Performance," . Definition at line 1142 of file TTree.cxx. ◆ DropBranchFromCache() [2/2]. Int_t TTree::DropBranchFromCache ; (; TBranch * ; b, . bool ; subbranches = false . ). virtual . Remove the branch b from the Tree cache. ; if subbranches is true all the branches of the subbranches are also removed from the cache.; Returns:; 0 branch dropped or not in cache; -1 on error . Definition at line 1181 of file TTree.cxx. ◆ DropBuffers(). void TTree::DropBuffers ; (; Int_t ; nbytes). virtual . Drop branch buffers to accommodate nbytes below MaxVirtualsize. ; Definition at line 4531 of file TTree.cxx. ◆ EnableCache(). bool TTree::EnableCache ; (; ). Enable the TTreeCache unless explicitly disabled for this TTree by a prior call to SetCacheSize(0). ; If the environment variable ROOT_TTREECACHE_SIZE or the rootrc config TTreeCache.Size has been set to zero, this call will over-ride them with a value of 1.0 (i.e. use a cache size to hold 1 cluster); Return true if there is a cache attached to the TTree (either pre-exisiting or created as part of this call) ; Definition at line 2685 of file TTree.cxx. ◆ Fill(). Int_t TTree::Fill ; (; ). virtual . Fill all branches. ; This function loops on all the branches of this tree. For each branch, it copies to the branch buffer (basket) the current values of the leaves data types. If a leaf is a simple data type, a simple conversion to a machine independent format has to be done.; This machine independent version of the data is copied into a basket (each branch has its own basket). When a basket is full (32k worth of data by default), it is then optionally compressed and written to disk (this operation is also called committing or 'flushing' the basket). The committed baskets are then immediately removed from memory.; The function returns the number of bytes committed to the individual branches.; If a write error occurs, the number of bytes returned is -1.; If no data are written, because, e.g., the branch is disabled, the number of bytes returned",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:138404,cache,cache,138404,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,4,['cache'],['cache']
Performance," . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TRint, TGApplication, TApplicationRemote, TApplicationServer, TProofServ, and TProofServLite.; Definition at line 167 of file TApplication.h. ◆ IsCmdThread(). virtual Bool_t TApplication::IsCmdThread ; (; ). inlinevirtual . Definition at line 135 of file TApplication.h. ◆ IsRunning(). Bool_t TApplication::IsRunning ; (; ); const. inline . Definition at line 152 of file TApplication.h. ◆ KeyPressed(). void TApplication::KeyPressed ; (; Int_t ; key). virtual . Emit signal when console keyboard key was pressed. ; Definition at line 1949 of file TApplication.cxx. ◆ LineProcessed(). void TApplication::LineProcessed ; (; const char * ; line). virtual . Emit signal when a line has been processed. ; Definition at line 1941 of file TApplication.cxx. ◆ LoadGraphicsLibs(). void TApplication::LoadGraphicsLibs ; (; ). protectedvirtual . Load shared libs necessary for graphics. ; These libraries are only loaded when gROOT->IsBatch() is kFALSE. ; Reimplemented in TGApplication.; Definition at line 1333 of file TApplication.cxx. ◆ Lower(). virtual void TApplication::Lower ; (; ). inlinevirtual . Definition at line 134 of file TApplication.h. ◆ ls(). void TApplication::ls ; (; Option_t * ; option = """"); const. overridevirtual . Show available sessions. ; Reimplemented from TObject.; Definition at line 2087 of file TApplication.cxx. ◆ MakeBatch(). void TApplication::MakeBatch ; (; ). protectedvirtual . Switch to batch mode. ; Definition at line 1395 of file TApplication.cxx. ◆ NeedGraphicsLibs(). void TApplication::NeedGraphicsLibs ; (; ). static . Static method. ; This method should be called from static library initializers if the library needs the low level graphics system. ; Definition at line 235 of file TApplication.cxx. ◆ NoLogoOpt(). Bool_t TApplication::NoLogoOpt ; (; ); const. inline . Definition at line 144 of file TApplication.h. ◆ NoLogOpt(). Bool_t TApplication::NoLogOpt ; (; ); co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplication.html:31067,load,loaded,31067,doc/master/classTApplication.html,https://root.cern,https://root.cern/doc/master/classTApplication.html,1,['load'],['loaded']
Performance," . const char * ; fwdDeclsCode, . void(*)() ; triggerFunc, . const FwdDeclArgsToKeepCollection_t & ; fwdDeclsArgToSkip, . const char ** ; classesHeaders, . Bool_t ; lateRegistration = false, . Bool_t ; hasCxxModule = false . ). finalvirtual . Inject the module named ""modulename"" into cling; load all headers. ; headers is a 0-terminated array of header files to #include after loading the module. The module is searched for in all $LD_LIBRARY_PATH entries (or PATH% on Windows). This function gets called by the static initialization of dictionary libraries. The payload code is injected ""as is"" in the interpreter. The value of 'triggerFunc' is used to find the shared library location. ; Implements TInterpreter.; Definition at line 2010 of file TCling.cxx. ◆ RegisterPrebuiltModulePath(). bool TCling::RegisterPrebuiltModulePath ; (; const std::string & ; FullPath, . const std::string & ; ModuleMapName = ""module.modulemap"" . ); const. finalvirtual . Returnstrue if the module map was loaded, false on error or if the map was already loaded. ; Implements TInterpreter.; Definition at line 1906 of file TCling.cxx. ◆ RegisterRdictForLoadPCM(). void TCling::RegisterRdictForLoadPCM ; (; const std::string & ; pcmFileNameFullPath, . llvm::StringRef * ; pcmContent . ). private . Register Rdict data for future loading by LoadPCM;. ; Definition at line 1678 of file TCling.cxx. ◆ RegisterTClassUpdate(). void TCling::RegisterTClassUpdate ; (; TClass * ; oldcl, . DictFuncPtr_t ; dict . ). finalvirtual . Register classes that already existed prior to their dictionary loading and that already had a ClassInfo (and thus would not be refresh via UpdateClassInfo. ; Implements TInterpreter.; Definition at line 2384 of file TCling.cxx. ◆ RegisterTemporary() [1/2]. void TCling::RegisterTemporary ; (; const cling::Value & ; value). Register value as a temporary, extending its lifetime to that of the interpreter. ; This is needed for TCling's compatibility interfaces returning long - the address of th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:125601,load,loaded,125601,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,2,['load'],['loaded']
Performance," . int ; m, . int ; n . ). Definition at line 800 of file Kernels.cuh. ◆ CrossEntropyGradients(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::CrossEntropyGradients ; (; AFloat * ; dY, . const AFloat * ; Y, . const AFloat * ; output, . const AFloat * ; weights, . int ; m, . int ; n . ). Definition at line 831 of file Kernels.cuh. ◆ Deflatten(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::Deflatten ; (; AFloat * ; A, . const AFloat * ; B, . int ; size, . int ; nRows, . int ; nCols . ). Deflatten a 2D-array into an array of 2D-arrays. ; Parameters. [out]AOutput array of 2D-arrays, each of which is column-major. ; [in]BInput 2D-array to be split into size parts. ; [in]sizeNumber of 2D-arrays in the output. ; [in]nRowsNumber of rows in each matrix of the output. ; [in]nColsNumber of columns on each matrix of the output. A is a pointer to size raw TCudaMatrix pointers. Each of those will contain elements saved on column major order. However the concatenation is performed row wise. Each thread writes a single output element by locating the appropriate input index. ; Definition at line 1225 of file Kernels.cuh. ◆ DeflattenRM(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::DeflattenRM ; (; AFloat * ; A, . const AFloat * ; B, . int ; size, . int ; nRows, . int ; nCols . ). Definition at line 1243 of file Kernels.cuh. ◆ Downsample(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::Downsample ; (; AFloat * ; output, . AFloat * ; indexMatrix, . const AFloat * ; input, . int ; depth, . int ; imgHeight, . int ; imgWidth, . int ; fltHeight, . int ; fltWidth, . int ; strideRows, . int ; strideCols . ). Downsampling kernel used as the forward propagation step of a Max-Pooling layer. ; Parameters. [out]AThe output matrix. Each row corresponds to a slice and each element is the max within a receptive field. ; [out]BThe winning indices matrix. Each element is the index of the max element. ; [in]CThe input matrix. Each row",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html:12486,perform,performed,12486,doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html,1,['perform'],['performed']
Performance," . std::string_view ; name, . std::string_view ; expression, . const ColumnNames_t & ; branches, . const RColumnRegister & ; colRegister, . TTree * ; tree, . RDataSource * ; ds . ). Book the jitting of a Filter call. ; Definition at line 658 of file RDFInterfaceUtils.cxx. ◆ BookVariationJit(). std::shared_ptr< RJittedVariation > ROOT::Internal::RDF::BookVariationJit ; (; const std::vector< std::string > & ; colNames, . std::string_view ; variationName, . const std::vector< std::string > & ; variationTags, . std::string_view ; expression, . RLoopManager & ; lm, . RDataSource * ; ds, . const RColumnRegister & ; colRegister, . const ColumnNames_t & ; branches, . std::shared_ptr< RNodeBase > * ; upcastNodeOnHeap, . bool ; isSingleColumn . ). Book the jitting of a Vary call. ; Definition at line 782 of file RDFInterfaceUtils.cxx. ◆ CacheLineStep(). template<typename T > . constexpr std::size_t ROOT::Internal::RDF::CacheLineStep ; (; ). constexpr . Stepping through CacheLineStep<T> values in a vector<T> brings you to a new cache line. ; Useful to avoid false sharing. ; Definition at line 222 of file Utils.hxx. ◆ ChangeEmptyEntryRange(). void ROOT::Internal::RDF::ChangeEmptyEntryRange ; (; const ROOT::RDF::RNode & ; node, . std::pair< ULong64_t, ULong64_t > && ; newRange . ). Definition at line 13 of file RInterface.cxx. ◆ ChangeSpec(). void ROOT::Internal::RDF::ChangeSpec ; (; const ROOT::RDF::RNode & ; node, . ROOT::RDF::Experimental::RDatasetSpec && ; spec . ). Changes the input dataset specification of an RDataFrame. ; Parameters. nodeAny node of the computation graph. ; specThe new specification. . Definition at line 26 of file RInterface.cxx. ◆ CheckForDefinition(). void ROOT::Internal::RDF::CheckForDefinition ; (; const std::string & ; where, . std::string_view ; definedColView, . const RColumnRegister & ; colRegister, . const ColumnNames_t & ; treeColumns, . const ColumnNames_t & ; dataSourceColumns . ). Throw if column definedColView is not already there. ; Defini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html:22859,cache,cache,22859,doc/master/namespaceROOT_1_1Internal_1_1RDF.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html,1,['cache'],['cache']
Performance," . ◆ Class_Name(). static const char * TClassGenerator::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TClassGenerator::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 40 of file TClassGenerator.h. ◆ DeclFileName(). static const char * TClassGenerator::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 40 of file TClassGenerator.h. ◆ GetClass() [1/4]. virtual TClass * TClassGenerator::GetClass ; (; const char * ; classname, . Bool_t ; load . ). pure virtual . Implemented in TPyClassGenerator. ◆ GetClass() [2/4]. TClass * TClassGenerator::GetClass ; (; const char * ; classname, . Bool_t ; load, . Bool_t ; silent . ). virtual . Reimplemented in TPyClassGenerator.; Definition at line 25 of file TClassGenerator.cxx. ◆ GetClass() [3/4]. virtual TClass * TClassGenerator::GetClass ; (; const std::type_info & ; typeinfo, . Bool_t ; load . ). pure virtual . Implemented in TPyClassGenerator. ◆ GetClass() [4/4]. TClass * TClassGenerator::GetClass ; (; const std::type_info & ; typeinfo, . Bool_t ; load, . Bool_t ; silent . ). virtual . Reimplemented in TPyClassGenerator.; Definition at line 32 of file TClassGenerator.cxx. ◆ IsA(). TClass * TClassGenerator::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 40 of file TClassGenerator.h. ◆ Streamer(). void TClassGenerator::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TClassGenerator::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 40 of file TClassGenerator.h. Libraries for TClassGenerator:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TClassGenerator.h; core/meta/src/TClassGenerator.cxx. TClass",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassGenerator.html:11998,load,load,11998,doc/master/classTClassGenerator.html,https://root.cern,https://root.cern/doc/master/classTClassGenerator.html,1,['load'],['load']
Performance," .PAR should be just unpacked; in the existing dir (opt = kUntar, default) or a remove of the existing; directory should be executed (opt = kRemoveOld), thereby triggering a full; re-build. This option if effective only for PROOF protocol > 8.; Returns 0 in case of success and -1 in case of error. Int_t Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); Load the specified macro on master, workers and, if notOnClient is; kFALSE, on the client. The macro file is uploaded if new or updated.; Additional files to be uploaded (or updated, if needed) can be specified; after a comma, e.g. ""mymacro.C+,thisheader.h,thatheader.h"".; If existing in the same directory, a header basename(macro).h or .hh, is also; uploaded.; The default is to load the macro also on the client; notOnClient can be used; to avoid loading on the client.; On masters, if uniqueWorkers is kTRUE, the macro is loaded on unique workers; only, and collection is not done; if uniqueWorkers is kFALSE, collection; from the previous request is done, and broadcasting + collection from the; other workers is done.; The wrks arg can be used on the master to limit the set of workers.; Returns 0 in case of success and -1 in case of error. Int_t AddDynamicPath(const char* libpath, Bool_t onClient = kFALSE, TList* wrks = 0); Add 'libpath' to the lib path search.; Multiple paths can be specified at once separating them with a comma or; a blank.; Return 0 on success, -1 otherwise. Int_t AddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0); Add 'incpath' to the inc path search.; Multiple paths can be specified at once separating them with a comma or; a blank.; Return 0 on success, -1 otherwise. Int_t RemoveDynamicPath(const char* libpath, Bool_t onClient = kFALSE); Remove 'libpath' from the lib path search.; Multiple paths can be specified at once separating them with a comma or; a blank.; Return 0 on success, -1 otherwise. Int_t RemoveIncludePath(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProof.html:68828,load,loaded,68828,root/html530/TProof.html,https://root.cern,https://root.cern/root/html530/TProof.html,2,['load'],['loaded']
Performance," .PAR should be just unpacked; in the existing dir (opt = kUntar, default) or a remove of the existing; directory should be executed (opt = kRemoveOld), thereby triggering a full; re-build. This option if effective only for PROOF protocol > 8.; Returns 0 in case of success and -1 in case of error. Int_t Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); Load the specified macro on master, workers and, if notOnClient is; kFALSE, on the client. The macro file is uploaded if new or updated.; Additional files to be uploaded (or updated, if needed) can be specified; after a comma, e.g. ""mymacro.C+,thisheader.h,thatheader.h"".; If existing in the same directory, a header basename(macro).h or .hh, is also; uploaded.; The default is to load the macro also on the client; notOnClient can be used; to avoid loading on the client.; On masters, if uniqueWorkers is kTRUE, the macro is loaded on unique workers; only, and collection is not done; if uniqueWorkers is kFALSE, collection; from the previous request is done, and broadcasting + collection from the; other workers is done.; The wrks arg can be used on the master to limit the set of workers.; Returns 0 in case of success and -1 in case of error. Int_t AddDynamicPath(const char* libpath, Bool_t onClient = kFALSE, TList* wrks = 0, Bool_t doCollect = kTRUE); Add 'libpath' to the lib path search.; Multiple paths can be specified at once separating them with a comma or; a blank.; Return 0 on success, -1 otherwise. Int_t AddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0, Bool_t doCollect = kTRUE); Add 'incpath' to the inc path search.; Multiple paths can be specified at once separating them with a comma or; a blank.; Return 0 on success, -1 otherwise. Int_t RemoveDynamicPath(const char* libpath, Bool_t onClient = kFALSE); Remove 'libpath' from the lib path search.; Multiple paths can be specified at once separating them with a comma or; a blank.; Return 0 on s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:78693,load,loaded,78693,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,3,['load'],['loaded']
Performance," .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; RooFit::PrintLevelRooCmdArg PrintLevel(Int_t code)Definition RooGlobalFunc.cxx:657; RooFit::VerboseRooCmdArg Verbose(bool flag=true)Definition RooGlobalFunc.cxx:645; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf903_numintcacheDefinition rf903_numintcache.py:1; xmlio::Titleconst char * TitleDefinition TXMLSetup.cxx:68; TimerDefinition histspeedtest.cxx:54; ; [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[x,y,z]) using numeric integrator RooAdaptiveIntegratorND to calculate Int(x,y,z); [#1] INFO:Fitting -- RooAbsPdf::fitTo(model_over_model_Int[x,y,z]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_over_model_Int[x,y,z]_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for a: using 1; ; prevFCN = 1659.930708 a=0.02833, [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[x,y,z]) using numeric integrator RooAdaptiveIntegratorND to calculate Int(x,y,z); ; prevFCN = 1675.611563 a=-0.02833, ; prevFCN = 1673.217894 a=0.002833, ; prevFCN = 1660.205177 a=-0.002833, ; prevFCN = 1659.94939 a=0.0002833, ; prevFCN = 1659.944972 a=-0.0002833, ; prevFCN = 1659.919376 a=-0.001237, ; prevFCN = 1659.902781 a=-0.001089, ; prevFCN = 1659.903175 a=-0.001384, ; prevFCN = 1659.90318 a=-0.001237, ; prevFCN = 1659.902781 a=-0.001089, ; prevFCN = 1659.903175 a=-0.001384, ; prevFCN = 1659.90318 a=-0.001207, ; prevFCN = 1659",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf903__numintcache_8C.html:9238,optimiz,optimization,9238,doc/master/rf903__numintcache_8C.html,https://root.cern,https://root.cern/doc/master/rf903__numintcache_8C.html,1,['optimiz'],['optimization']
Performance," .rootrc file:; Unix.*.Root.UseTTFonts: false. List of the currently supported fonts; Font number TTF Names PostScript/PDF Names; 1 : ""Free Serif Italic"" ""Times-Italic""; 2 : ""Free Serif Bold"" ""Times-Bold""; 3 : ""Free Serif Bold Italic"" ""Times-BoldItalic""; 4 : ""Tex Gyre Regular"" ""Helvetica""; 5 : ""Tex Gyre Italic"" ""Helvetica-Oblique""; 6 : ""Tex Gyre Bold"" ""Helvetica-Bold""; 7 : ""Tex Gyre Bold Italic"" ""Helvetica-BoldOblique""; 8 : ""Free Mono"" ""Courier""; 9 : ""Free Mono Oblique"" ""Courier-Oblique""; 10 : ""Free Mono Bold"" ""Courier-Bold""; 11 : ""Free Mono Bold Oblique"" ""Courier-BoldOblique""; 12 : ""Symbol"" ""Symbol""; 13 : ""Free Serif"" ""Times-Roman""; 14 : ""Wingdings"" ""ZapfDingbats""; TTFInterface to the freetype 2 library.Definition TTF.h:53; The PostScript and PDF backends use the original PostScript-defined 13 fonts' styles forming four type families (Courier, Helvetica, Times, Symbol) as listed in the ""Core Font Set"" section of this page. These fonts are always available and do not need to be loaded in the PS or PDF files allowing to keep the files' sizes small.; On screen, text is rendered using free TTF fonts similar to the PDF ones. The corresponding font files are coming with the ROOT distribution in $ROOTSYS/fonts/Free*. Definition at line 18 of file TAttText.h. Public Member Functions;  TAttText ();  AttText default constructor. ;  ;  TAttText (Int_t align, Float_t angle, Color_t color, Style_t font, Float_t tsize);  AttText normal constructor. ;  ; virtual ~TAttText ();  AttText destructor. ;  ; void Copy (TAttText &atttext) const;  Copy this text attributes to a new TAttText. ;  ; virtual Short_t GetTextAlign () const;  Return the text alignment. ;  ; virtual Float_t GetTextAngle () const;  Return the text angle. ;  ; virtual Color_t GetTextColor () const;  Return the text color. ;  ; virtual Font_t GetTextFont () const;  Return the text font. ;  ; virtual Float_t GetTextSize () const;  Return the text size. ;  ; virtual Float_t GetTextSizePercent (Float_t size);  Return t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAttText.html:10064,load,loaded,10064,doc/master/classTAttText.html,https://root.cern,https://root.cern/doc/master/classTAttText.html,1,['load'],['loaded']
Performance," / 100); TMap*TVirtualPacketizer::fSlaveStatsslave status, keyed by correspondig TSlave; TTimeTVirtualPacketizer::fStartTimetime offset; Bool_tTVirtualPacketizer::fStopTermination of Process() requested?; Float_tTVirtualPacketizer::fTimeUpdttime between updates; Long64_tTVirtualPacketizer::fTotalEntriestotal number of entries to be distributed;; TVirtualPacketizer::EUseEstOptTVirtualPacketizer::fUseEstOptControl usage of estimated values for the progress info; Bool_tTVirtualPacketizer::fValidConstructed properly?. private:. TList*fActivenodes with unfinished files; Float_tfBaseLocalPreferenceindicates how much more likely the nodes will be; Bool_tfCachePacketSynccontrol synchronization of cache and packet sizes; TList*fFileNodesnodes with files; TSortedList*fFilesToProcessGlobal list of files (TFileStat) to be processed; Bool_tfForceLocalif 1 - eliminate the remote processing; Float_tfFractionOfRemoteFilesfraction of TDSetElements that are on non-workers; Double_tfMaxEntriesRatiomax file entries to avg allowed ratio for cache-to-packet sync; Int_tfMaxPerfIdxmaximum of our slaves' performance index; Long_tfMaxSlaveCntmaximum number of workers per filenode (Long_t to avoid; Long64_tfNEventsOnRemLocnumber of events in currently; Int_tfPacketAsAFractionused to calculate the packet size; TList*fPartitionslist of partitions on nodes; Int_tfStrategy0 means the classic and 1 (default) - the adaptive strategy; TList*fUnAllocatednodes with unallocated files. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPacketizerAdaptive(TDSet* dset, TList* slaves, Long64_t first, Long64_t num, TList* input, TProofProgressStatus* st); Constructor. ~TPacketizerAdaptive(); Destructor. void InitStats(); (re)initialise the statistics; called at the begining or after a worker dies. void RemoveUnAllocNode(TPacketizerAdaptive::TFileNode* ); Remove unallocated node. void RemoveActive(TPacketizerAdaptive::TFileStat* file); Remove file from the list of acti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPacketizerAdaptive.html:10681,cache,cache,10681,root/html528/TPacketizerAdaptive.html,https://root.cern,https://root.cern/root/html528/TPacketizerAdaptive.html,3,"['cache', 'perform']","['cache', 'cache-to-packet', 'performance']"
Performance," / touch the ""host"" table itself; For any TTable object one can create as many different ""sorter""; as one finds useful for one's code; - Any instance of this class is meaningful as long as the ""host"" object; ""TTable"" does exist and is not changed; - Any attempt to access this TTableSorter after the ""host"" object deleted; causes the program abnormal termination; - Any attempt to access this TTableSorter after the ""host"" object been changed; causes an unpredictable result; - Any instance (object) of this class is NOT deleted ""by automatic"" just; the ""host object ""TTable"" deleted. It is the responsibility of the user's code; keeping TTableSorter and the the ""host"" TTable objects consistent. ""To do"" list. 1. A separate method to provide lexicographical sort if the ""sorted"" column is a kind of array. Usage:; 1. Create an instance of the sorter for the selected column of your table. new TTableSorter(TTable &table, TString &colName,Int_t firstRow,Int_t numberRows). All sort actions are performed within TTableSorter ctor.; This means one needs no extra effort to SORT table. ""Sorter"" contains; the ""sorted index array"" as soon as you create the sorter. TTableSorter sorter(MyTable,""id"",20, 34);; - Creates a sorter for MyTable column ""id"" ordering; its 34 rows from 20 row with standard ""C"" qsort subroutine. 2. You may use this instance to search any ""id"" value with operator []; to get the table row index as follows:. Int_t id = 5;; Int_t index = sorter[id]; // Look for the row index with id = 5; // using the standard ""C"" ""bsearch"" binary search; // subroutine; Int_t index = sorter(id); // Look for the row index with id ""nearest"" to 5; // using the internal ""BinarySearch"" method. 3. Some useful methods of this class:. 3.1. CountKeys(); 3.2 CountKey(const void *key, Int_t firstIndx=0,Bool_t bSearch=kTRUE,Int_t *firstRow=0); 3.3. FindFirstKey(const void *key); 3.4. GetIndex(UInt_t sortedIndex). Function Members (Methods); public:. virtual~TTableSorter(); voidTObject::AbstractMethod",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTableSorter.html:1563,perform,performed,1563,root/html602/TTableSorter.html,https://root.cern,https://root.cern/root/html602/TTableSorter.html,2,['perform'],['performed']
Performance," // Making a volume with a given shape in one step; TGeoVolume *vol = gGeoManager->MakeBox(""VNAME"",ptrMed,dx,dy,dz);; TGeoVolume *vol = gGeoManager->MakeTubs(""VNAME"",ptrMed,rmin,rmax,; dz,phi1,phi2);. // See class TGeoManager for the rest of shapes.; // Making a volume with a given shape with a unique prototype; TGeoVolume *vol = gGeoManager->Volume(""VNAME"",""XXXX"",nmed,upar,; npar);. // Where XXXX stands for the first 4 letters of the specific shape; // classes, nmed is the medium number, upar is an Double_t * array; // of the shape parameters and npar is the number of parameters.; // This prototype allows (npar = 0) to define volumes with shape; // defined only at positioning time (volumes defined in this way; // need to be positioned using TGeoManager::Node() method); 18.4.2.3 Positioned Volumes (Nodes); Geometrical modeling is a difficult task when the number of different geometrical objects is 106-108. This is more or less the case for detector geometries of complex experiments, where a ‘flat’ CSG model description cannot scale with the current CPU performances. This is the reason why models like GEANT [1] introduced an additional dimension (depth) in order to reduce the complexity of the problem. This concept is also preserved by the ROOT modeller and introduces a pure geometrical constraint between objects (volumes in our case) - containment. This means in fact that any positioned volume has to be contained by another. Now what means contained and positioned?. We will say that a volume contains a point if this is inside the shape associated to the volume. For instance, a volume having a box shape will contain all points P=(X,Y,Z) verifying the conditions: Abs(Pi)dXi. The points on the shape boundaries are considered as inside the volume. The volume contains a daughter if it contains all the points contained by the daughter.; The definition of containment works of course only with points defined in the local coordinate system of the considered volume. Positionin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:936863,perform,performances,936863,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['perform'],['performances']
Performance," // Never load any library from rootcling/genreflex.; 6276 if (gDebug > 2) {; 6277 Info(""TCling::AutoLoad"", ""Explicitly disabled (the class name is %s)"", cls);; 6278 }; 6279 return 0;; 6280 }; 6281 ; 6282 assert(IsClassAutoLoadingEnabled() && ""Calling when AutoLoading is off!"");; 6283 ; 6284 R__WRITE_LOCKGUARD(ROOT::gCoreMutex);; 6285 ; 6286 if (!knowDictNotLoaded && gClassTable->GetDictNorm(cls)) {; 6287 // The library is already loaded as the class's dictionary is known.; 6288 // Return success.; 6289 // Note: the name (cls) is expected to be normalized as it comes either; 6290 // from a callbacks (that can/should calculate the normalized name from the; 6291 // decl) or from TClass::GetClass (which does also calculate the normalized; 6292 // name).; 6293 return 1;; 6294 }; 6295 ; 6296 if (gDebug > 2) {; 6297 Info(""TCling::AutoLoad"",; 6298 ""Trying to autoload for %s"", cls);; 6299 }; 6300 ; 6301 if (!gROOT || !gInterpreter || gROOT->TestBit(TObject::kInvalidObject)) {; 6302 if (gDebug > 2) {; 6303 Info(""TCling::AutoLoad"",; 6304 ""Disabled due to gROOT or gInterpreter being invalid/not ready (the class name is %s)"", cls);; 6305 }; 6306 return 0;; 6307 }; 6308 // Prevent the recursion when the library dictionary are loaded.; 6309 SuspendAutoLoadingRAII autoLoadOff(this);; 6310 // Try using externally provided callback first.; 6311 if (fAutoLoadCallBack) {; 6312 int success = (*(AutoLoadCallBack_t)fAutoLoadCallBack)(cls);; 6313 if (success); 6314 return success;; 6315 }; 6316 ; 6317 // During the 'Deep' part of the search we will call GetClassSharedLibsForModule; 6318 // (when module are enabled) which might end up calling AutoParsing but; 6319 // that should only be for the cases where the library has no generated pcm; 6320 // and in that case a rootmap should be available.; 6321 // This avoids a very costly operation (for generally no gain) but reduce the; 6322 // quality of the search (i.e. bad in case of library with no pcm and no rootmap; 6323 // file).; 6324 TInte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:244907,load,loaded,244907,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['load'],['loaded']
Performance," ///<! data for given connection; 130 QueueEntry() = default;; 131 QueueEntry(unsigned connid, EQueueEntryKind kind, std::string &&data) : fConnId(connid), fKind(kind), fData(data) {}; 132 };; 133 ; 134 using ConnectionsList_t = std::vector<std::shared_ptr<WebConn>>;; 135 ; 136 std::shared_ptr<RWebWindowsManager> fMgr; ///<! display manager; 137 std::shared_ptr<RWebWindow> fMaster; ///<! master window where this window is embedded; 138 std::vector<MasterConn> fMasterConns; ///<! master connections; 139 std::string fDefaultPage; ///<! HTML page (or file name) returned when window URL is opened; 140 std::string fPanelName; ///<! panel name which should be shown in the window; 141 unsigned fId{0}; ///<! unique identifier; 142 bool fUseServerThreads{false}; ///<! indicates that server thread is using, no special window thread; 143 bool fUseProcessEvents{false}; ///<! all window functionality will run through process events; 144 bool fProcessMT{false}; ///<! if window event processing performed in dedicated thread; 145 bool fSendMT{false}; ///<! true is special threads should be used for sending data; 146 bool fRequireAuthKey{true}; ///<! defines if authentication key always required when connect to the widget; 147 std::shared_ptr<RWebWindowWSHandler> fWSHandler; ///<! specialize websocket handler for all incoming connections; 148 unsigned fConnCnt{0}; ///<! counter of new connections to assign ids; 149 ConnectionsList_t fPendingConn; ///<! list of pending connection with pre-assigned keys; 150 ConnectionsList_t fConn; ///<! list of all accepted connections; 151 mutable std::mutex fConnMutex; ///<! mutex used to protect connection list; 152 unsigned fConnLimit{1}; ///<! number of allowed active connections; 153 std::string fConnToken; ///<! value of ""token"" URL parameter which should be provided for connecting window; 154 bool fNativeOnlyConn{false}; ///<! only native connection are allowed, created by Show() method; 155 bool fUseCurrentDir{false}; ///<! if window can ac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RWebWindow_8hxx_source.html:6326,perform,performed,6326,doc/v632/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RWebWindow_8hxx_source.html,1,['perform'],['performed']
Performance," ///<! data for given connection; 133 QueueEntry() = default;; 134 QueueEntry(unsigned connid, EQueueEntryKind kind, std::string &&data) : fConnId(connid), fKind(kind), fData(data) {}; 135 };; 136 ; 137 using ConnectionsList_t = std::vector<std::shared_ptr<WebConn>>;; 138 ; 139 std::shared_ptr<RWebWindowsManager> fMgr; ///<! display manager; 140 std::shared_ptr<RWebWindow> fMaster; ///<! master window where this window is embedded; 141 std::vector<MasterConn> fMasterConns; ///<! master connections; 142 std::string fDefaultPage; ///<! HTML page (or file name) returned when window URL is opened; 143 std::string fPanelName; ///<! panel name which should be shown in the window; 144 unsigned fId{0}; ///<! unique identifier; 145 bool fUseServerThreads{false}; ///<! indicates that server thread is using, no special window thread; 146 bool fUseProcessEvents{false}; ///<! all window functionality will run through process events; 147 bool fProcessMT{false}; ///<! if window event processing performed in dedicated thread; 148 bool fSendMT{false}; ///<! true is special threads should be used for sending data; 149 bool fRequireAuthKey{true}; ///<! defines if authentication key always required when connect to the widget; 150 std::shared_ptr<RWebWindowWSHandler> fWSHandler; ///<! specialize websocket handler for all incoming connections; 151 unsigned fConnCnt{0}; ///<! counter of new connections to assign ids; 152 ConnectionsList_t fPendingConn; ///<! list of pending connection with pre-assigned keys; 153 ConnectionsList_t fConn; ///<! list of all accepted connections; 154 mutable std::mutex fConnMutex; ///<! mutex used to protect connection list; 155 unsigned fConnLimit{1}; ///<! number of allowed active connections; 156 std::string fConnToken; ///<! value of ""token"" URL parameter which should be provided for connecting window; 157 bool fNativeOnlyConn{false}; ///<! only native connection are allowed, created by Show() method; 158 bool fUseCurrentDir{false}; ///<! if window can ac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RWebWindow_8hxx_source.html:6477,perform,performed,6477,doc/master/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RWebWindow_8hxx_source.html,1,['perform'],['performed']
Performance," 0 in case of success and -1 in case of error. Int_t UnloadPackage(const char* package); Unload specified package.; Returns 0 in case of success and -1 in case of error. Int_t UnloadPackageOnClient(const char* package); Unload a specific package on the client.; Returns 0 in case of success and -1 in case of error.; The code is equivalent to the one in TProofServ.cxx (TProof::UnloadPackage; case). Keep in sync in case of changes. Int_t UnloadPackages(); Unload all packages.; Returns 0 in case of success and -1 in case of error. Int_t EnablePackage(const char* package, Bool_t notOnClient = kFALSE); Enable specified package. Executes the PROOF-INF/BUILD.sh; script if it exists followed by the PROOF-INF/SETUP.C script.; In case notOnClient = true, don't enable the package on the client.; The default is to enable packages also on the client.; Returns 0 in case of success and -1 in case of error.; Provided for backward compatibility. Int_t EnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE); Enable specified package. Executes the PROOF-INF/BUILD.sh; script if it exists followed by the PROOF-INF/SETUP.C script.; In case notOnClient = true, don't enable the package on the client.; The default is to enable packages also on the client.; It is is possible to specify options for the loading step via 'loadopts';; the string will be passed passed as argument to SETUP.; Returns 0 in case of success and -1 in case of error. Int_t EnablePackage(const char* package, TList* loadopts, Bool_t notOnClient = kFALSE); Enable specified package. Executes the PROOF-INF/BUILD.sh; script if it exists followed by the PROOF-INF/SETUP.C script.; In case notOnClient = true, don't enable the package on the client.; The default is to enable packages also on the client.; It is is possible to specify a list of objects to be passed to the SETUP; functions via 'loadopts'; the objects must be streamable.; Returns 0 in case of success and -1 in case of error. Int_t Download",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:64447,load,loadopts,64447,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,3,['load'],['loadopts']
Performance," 0) const; Bool_tdependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); RooExpensiveObjectCache&expensiveObjectCache() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); Bool_tfindConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tfindConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; RooAbsArg*findServer(const char* name) const; RooAbsArg*findServer(const RooAbsArg& arg) const; RooAbsArg*findServer(Int_t index) const; Bool_tgetAttribute(const Text_t* name) const; RooAbsCache*getCache(Int_t index) const; RooLinkedListgetCloningAncestors() const; RooArgSet*getComponents() const; RooArgSet*getDependents(const RooArgSet& set) const; RooArgSet*getDependents(const RooAbsData* set) const; RooArgSet*getDependents(const RooArgSet* depList) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); RooArgSet*ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsArg.html:4640,cache,cacheList,4640,root/html526/RooAbsArg.html,https://root.cern,https://root.cern/root/html526/RooAbsArg.html,4,['cache'],['cacheList']
Performance," 0) const; Bool_tdependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); RooExpensiveObjectCache&expensiveObjectCache() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); Bool_tfindConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tfindConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; RooAbsArg*findServer(const char* name) const; RooAbsArg*findServer(const RooAbsArg& arg) const; RooAbsArg*findServer(Int_t index) const; static UInt_tfnv1a32(const char* data); static UInt_tfnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tfnv1a64(const char* data); static ULong64_tfnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); Bool_tgetAttribute(const Text_t* name) const; RooAbsCache*getCache(Int_t index) const; RooLinkedListgetCloningAncestors() const; RooArgSet*getComponents() const; RooArgSet*getDependents(const RooArgSet& set) const; RooArgSet*getDependents(const RooAbsData* set) const; RooArgSet*getDependents(const RooArgSet* depList) const; virtual Option_t*TObject::GetDrawOption() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsArg.html:4872,cache,cacheList,4872,root/html534/RooAbsArg.html,https://root.cern,https://root.cern/root/html534/RooAbsArg.html,3,['cache'],['cacheList']
Performance," 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Double_texpectedEvents(const RooArgSet* nset) const; virtual Double_texpectedEvents(const RooArgSet& nset) const; RooExpensiveObjectCache&RooAbsArg::expensiveObjectCache() const; virtual Double_tRooAbsPdf::extendedTerm(UInt_t observedEvents, const RooArgSet* nset = 0) const; virtual RooAbsPdf::ExtendModeextendMode() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); RooDataHist*RooAbsReal::fillDataHist(RooDataHist* hist, const RooArgSet* nset, Double_t scaleFactor, Bool_t correctForBinVolume = kFALSE, Bool_t showProgress = kFALSE) const; TH1*RooAbsReal::fillHistogram(TH1* hist, const RooArgList& plotVars, Double_t scaleFactor = 1, const RooArgSet* projectedVars = 0, Bool_t scaling = kTRUE, const RooArgSet* condObs = 0, Bool_t setError = kTRUE) const; Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*RooAbsArg::findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tRooAbsReal::findRoot(RooRealVar& x, Double_t xmin, Double_t xmax, Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddModel.html:11848,cache,cacheList,11848,root/html526/RooAddModel.html,https://root.cern,https://root.cern/root/html526/RooAddModel.html,9,['cache'],['cacheList']
Performance," 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Double_texpectedEvents(const RooArgSet* nset) const; virtual Double_texpectedEvents(const RooArgSet& nset) const; RooExpensiveObjectCache&RooAbsArg::expensiveObjectCache() const; virtual Double_tRooAbsPdf::extendedTerm(UInt_t observedEvents, const RooArgSet* nset = 0) const; virtual RooAbsPdf::ExtendModeextendMode() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); RooDataHist*RooAbsReal::fillDataHist(RooDataHist* hist, const RooArgSet* nset, Double_t scaleFactor, Bool_t correctForBinVolume = kFALSE, Bool_t showProgress = kFALSE) const; TH1*RooAbsReal::fillHistogram(TH1* hist, const RooArgList& plotVars, Double_t scaleFactor = 1, const RooArgSet* projectedVars = 0, Bool_t scaling = kTRUE, const RooArgSet* condObs = 0, Bool_t setError = kTRUE) const; Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*RooAbsArg::findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tRooAbsReal::findRoot(RooRealVar& x, Double_t xmin, Double_t xmax, Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAddModel.html:12058,cache,cacheList,12058,root/html528/RooAddModel.html,https://root.cern,https://root.cern/root/html528/RooAddModel.html,12,['cache'],['cacheList']
Performance," 0.0, 1.0); model = ROOT.RooAddPdf(""model"", ""model"", [g1, g2], [frac]); ; # Generate 1000 events; data = model.generate({x}, 1000); ; # Fit model to data; # ----------------------------------; ; r = model.fitTo(data, Save=True, PrintLevel=-1); ; # Create MV Gaussian pdf of fitted parameters; # ------------------------------------------------------------------------------------; ; parabPdf = r.createHessePdf({frac, mean, sigma_g2}); ; # Some exercises with the parameter pdf; # -----------------------------------------------------------------------------; ; # Generate 100K points in the parameter space, from the MVGaussian pdf; d = parabPdf.generate({mean, sigma_g2, frac}, 100000); ; # Sample a 3-D histogram of the pdf to be visualized as an error; # ellipsoid using the GLISO draw option; hh_3d = parabPdf.createHistogram(""mean,sigma_g2,frac"", 25, 25, 25); hh_3d.SetFillColor(ROOT.kBlue); ; # Project 3D parameter pdf down to 3 permutations of two-dimensional pdfs; # The integrations corresponding to these projections are performed analytically; # by the MV Gaussian pdf; pdf_sigmag2_frac = parabPdf.createProjection({mean}); pdf_mean_frac = parabPdf.createProjection({sigma_g2}); pdf_mean_sigmag2 = parabPdf.createProjection({frac}); ; # Make 2D plots of the 3 two-dimensional pdf projections; hh_sigmag2_frac = pdf_sigmag2_frac.createHistogram(""sigma_g2,frac"", 50, 50); hh_mean_frac = pdf_mean_frac.createHistogram(""mean,frac"", 50, 50); hh_mean_sigmag2 = pdf_mean_sigmag2.createHistogram(""mean,sigma_g2"", 50, 50); hh_mean_frac.SetLineColor(ROOT.kBlue); hh_sigmag2_frac.SetLineColor(ROOT.kBlue); hh_mean_sigmag2.SetLineColor(ROOT.kBlue); ; # Draw the 'sigar'; ROOT.gStyle.SetCanvasPreferGL(True); ROOT.gStyle.SetPalette(1); c1 = ROOT.TCanvas(""rf608_fitresultaspdf_1"", ""rf608_fitresultaspdf_1"", 600, 600); hh_3d.Draw(""gliso""); ; c1.SaveAs(""rf608_fitresultaspdf_1.png""); ; # Draw the 2D projections of the 3D pdf; c2 = ROOT.TCanvas(""rf608_fitresultaspdf_2"", ""rf608_fitresultaspdf_2"", 900, 60",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf608__fitresultaspdf_8py.html:1972,perform,performed,1972,doc/master/rf608__fitresultaspdf_8py.html,https://root.cern,https://root.cern/doc/master/rf608__fitresultaspdf_8py.html,1,['perform'],['performed']
Performance," 0;; 117 virtual void Finish(std::uint64_t nbytesWritten, std::uint64_t neventsWritten) = 0;; 118 };; 119 ; 120private:; 121 struct RImportBranch {; 122 RImportBranch() = default;; 123 RImportBranch(const RImportBranch &other) = delete;; 124 RImportBranch(RImportBranch &&other) = default;; 125 RImportBranch &operator=(const RImportBranch &other) = delete;; 126 RImportBranch &operator=(RImportBranch &&other) = default;; 127 std::string fBranchName; ///< Top-level branch name from the input TTree; 128 std::unique_ptr<unsigned char[]> fBranchBuffer; ///< The destination of SetBranchAddress() for `fBranchName`; 129 };; 130 ; 131 struct RImportField {; 132 RImportField() = default;; 133 ~RImportField() = default;; 134 RImportField(const RImportField &other) = delete;; 135 RImportField(RImportField &&other) = default;; 136 RImportField &operator=(const RImportField &other) = delete;; 137 RImportField &operator=(RImportField &&other) = default;; 138 ; 139 /// The field is kept during schema preparation and transferred to the fModel before the writing starts; 140 RFieldBase *fField = nullptr;; 141 std::unique_ptr<RFieldBase::RValue> fValue; ///< Set if a value is generated, only for transformed fields; 142 void *fFieldBuffer = nullptr; ///< Usually points to the corresponding RImportBranch::fBranchBuffer but not always; 143 };; 144 ; 145 /// Base class to perform data transformations from TTree branches to RNTuple fields if necessary; 146 struct RImportTransformation {; 147 std::size_t fImportBranchIdx = 0;; 148 std::size_t fImportFieldIdx = 0;; 149 ; 150 RImportTransformation(std::size_t branchIdx, std::size_t fieldIdx); 151 : fImportBranchIdx(branchIdx), fImportFieldIdx(fieldIdx); 152 {; 153 }; 154 virtual ~RImportTransformation() = default;; 155 virtual RResult<void> Transform(const RImportBranch &branch, RImportField &field) = 0;; 156 };; 157 ; 158 /// When the schema is set up and the import started, it needs to be reset before the next Import() call; 159 /// can start.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RNTupleImporter_8hxx_source.html:6209,perform,perform,6209,doc/master/RNTupleImporter_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8hxx_source.html,1,['perform'],['perform']
Performance," 1 in case of error. void MoveEntries(Int_t dentries); Remove the first dentries of this basket, moving entries at; dentries to the start of the buffer. Int_t ReadBasketBuffersUncompressedCase(); By-passing buffer unzipping has been requested and is; possible (only 1 entry in this basket). Int_t ReadBasketBuffersUnzip(char* , Int_t , Bool_t , TFile* ); We always create the TBuffer for the basket but it hold the buffer from the cache. void inline InitializeCompressedBuffer(Int_t len, TFile* file); Initialize the compressed buffer; either from the TTree or create a local one. Int_t ReadBasketBuffers(Long64_t pos, Int_t len, TFile* file); Read basket buffers in memory and cleanup. Read a basket buffer. Check if buffers of previous ReadBasket; should not be dropped. Remember, we keep buffers in memory up to; fMaxVirtualSize.; The function returns 0 in case of success, 1 in case of error; This function was modified with the addition of the parallel; unzipping, it will try to get the unzipped file from the cache; receiving only a pointer to that buffer (so we shall not; delete that pointer), although we get a new buffer in case; it's not found in the cache.; There is a lot of code duplication but it was necesary to assure; the expected behavior when there is no cache. Int_t ReadBasketBytes(Long64_t pos, TFile* file); Read basket buffers in memory and cleanup. Read first bytes of a logical record starting at position pos; return record length (first 4 bytes of record). void Reset(); Reset the basket to the starting state. i.e. as it was after calling; the constructor (and potentially attaching a TBuffer.); Reduce memory used by fEntryOffset and the TBuffer if needed .. void SetReadMode(); Set read mode of basket. void SetWriteMode(); Set write mode of basket. void Streamer(TBuffer& ); Stream a class object. void Update(Int_t newlast, Int_t skipped); Update basket header and EntryOffset table. Int_t WriteBuffer(); Write buffer of this basket on the current file. The function",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TBasket.html:11262,cache,cache,11262,root/html534/TBasket.html,https://root.cern,https://root.cern/root/html534/TBasket.html,6,['cache'],['cache']
Performance," 1 in case of error. void MoveEntries(Int_t dentries); Remove the first dentries of this basket, moving entries at; dentries to the start of the buffer. Int_t ReadBasketBuffersUncompressedCase(); By-passing buffer unzipping has been requested and is; possible (only 1 entry in this basket). Int_t ReadBasketBuffersUnzip(char* , Int_t , Bool_t , TFile* ); We always create the TBuffer for the basket but it hold the buffer from the cache. void inline InitializeCompressedBuffer(Int_t len, TFile* file); Initialize the compressed buffer; either from the TTree or create a local one. Int_t ReadBasketBuffers(Long64_t pos, Int_t len, TFile* file); Read basket buffers in memory and cleanup. Read a basket buffer. Check if buffers of previous ReadBasket; should not be dropped. Remember, we keep buffers in memory up to; fMaxVirtualSize.; The function returns 0 in case of success, 1 in case of error; This function was modified with the addition of the parallel; unzipping, it will try to get the unzipped file from the cache; receiving only a pointer to that buffer (so we shall not; delete that pointer), although we get a new buffer in case; it's not found in the cache.; There is a lot of code duplication but it was necesary to assure; the expected behavior when there is no cache. Int_t ReadBasketBytes(Long64_t pos, TFile* file); Read basket buffers in memory and cleanup. Read first bytes of a logical record starting at position pos; return record length (first 4 bytes of record). void Reset(); Reset the basket to the starting state. i.e. as it was after calling; the constructor (and potentially attaching a TBuffer.); Reduce memory used by fEntryOffset and the TBuffer if needed .. void SetReadMode(); Set read mode of basket. void SetWriteMode(); Set write mode of basket. void Streamer(TBuffer& b); Stream a class object. void Update(Int_t newlast, Int_t skipped); Update basket header and EntryOffset table. Int_t WriteBuffer(); Write buffer of this basket on the current file. The functio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TBasket.html:11209,cache,cache,11209,root/html532/TBasket.html,https://root.cern,https://root.cern/root/html532/TBasket.html,2,['cache'],['cache']
Performance," 10);; root[] ROOT::TThreadExecutor pool(2); auto squares = pool.Map([](int a) { return a*a; }, {1,2,3});; a#define a(i)Definition RSha256.hxx:99; ROOT::TThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel threads,...Definition TThreadExecutor.hxx:41; ROOT::TThreadExecutor::Mapauto Map(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> std::vector< InvokeResult_t< F > >Execute a function nTimes in parallel, dividing the execution in nChunks and providing a result per c...Definition TThreadExecutor.hxx:289. ROOT::TThreadExecutor::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third argument. This function is applied to the set of objects returned by the corresponding Map execution to ""squash"" them into a single object. This function should be independent of the size of the vector returned by Map due to optimization of the number of chunks.; If this function is a binary operator, the ""squashing"" will be performed in parallel. This is exclusive to ROOT::TThreadExecutor and not any other ROOT::TExecutorCRTP-derived classes.; An integer can be passed as the fourth argument indicating the number of chunks we want to divide our work in. This may be useful to avoid the overhead introduced when running really short tasks.; Examples:; root[] ROOT::TThreadExecutor pool; auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }); root[] ROOT::TThreadExecutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::TThreadExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TThreadExecutor.hxx:482; v@ vDefinition rootcling_impl.cxx:36",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:3320,perform,performed,3320,doc/v632/classROOT_1_1TThreadExecutor.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html,2,['perform'],['performed']
Performance," 1053/// if subbranches is true all the branches of the subbranches are; 1054/// also put to the cache.; 1055///; 1056/// Returns:; 1057/// - 0 branch added or already included; 1058/// - -1 on error; 1059 ; 1060Int_t TTree::AddBranchToCache(const char*bname, bool subbranches); 1061{; 1062 if (!GetTree()) {; 1063 if (LoadTree(0)<0) {; 1064 Error(""AddBranchToCache"",""Could not load a tree"");; 1065 return -1;; 1066 }; 1067 }; 1068 if (GetTree()) {; 1069 if (GetTree() != this) {; 1070 return GetTree()->AddBranchToCache(bname, subbranches);; 1071 }; 1072 } else {; 1073 Error(""AddBranchToCache"", ""No tree is available. Branch was not added to the cache"");; 1074 return -1;; 1075 }; 1076 ; 1077 TFile *f = GetCurrentFile();; 1078 if (!f) {; 1079 Error(""AddBranchToCache"", ""No file is available. Branch was not added to the cache"");; 1080 return -1;; 1081 }; 1082 TTreeCache *tc = GetReadCache(f,true);; 1083 if (!tc) {; 1084 Error(""AddBranchToCache"", ""No cache is available, branch not added"");; 1085 return -1;; 1086 }; 1087 return tc->AddBranch(bname,subbranches);; 1088}; 1089 ; 1090////////////////////////////////////////////////////////////////////////////////; 1091/// Add branch b to the Tree cache.; 1092/// if subbranches is true all the branches of the subbranches are; 1093/// also put to the cache.; 1094///; 1095/// Returns:; 1096/// - 0 branch added or already included; 1097/// - -1 on error; 1098 ; 1099Int_t TTree::AddBranchToCache(TBranch *b, bool subbranches); 1100{; 1101 if (!GetTree()) {; 1102 if (LoadTree(0)<0) {; 1103 Error(""AddBranchToCache"",""Could not load a tree"");; 1104 return -1;; 1105 }; 1106 }; 1107 if (GetTree()) {; 1108 if (GetTree() != this) {; 1109 Int_t res = GetTree()->AddBranchToCache(b, subbranches);; 1110 if (res<0) {; 1111 Error(""AddBranchToCache"", ""Error adding branch"");; 1112 }; 1113 return res;; 1114 }; 1115 } else {; 1116 Error(""AddBranchToCache"", ""No tree is available. Branch was not added to the cache"");; 1117 return -1;; 1118 }; 1119 ; 1120 TF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:38667,cache,cache,38667,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,3,['cache'],['cache']
Performance," 12395 if (conn->request_info.acceptedWebSocketSubprotocol) {; 12396 mg_printf(conn,; 12397 ""Sec-WebSocket-Protocol: %s\r\n\r\n"",; 12398 conn->request_info.acceptedWebSocketSubprotocol);; 12399 } else {; 12400 mg_printf(conn, ""%s"", ""\r\n"");; 12401 }; 12402 ; 12403 return 1;; 12404}; 12405 ; 12406 ; 12407#if !defined(MG_MAX_UNANSWERED_PING); 12408/* Configuration of the maximum number of websocket PINGs that might; 12409 * stay unanswered before the connection is considered broken.; 12410 * Note: The name of this define may still change (until it is; 12411 * defined as a compile parameter in a documentation).; 12412 */; 12413#define MG_MAX_UNANSWERED_PING (5); 12414#endif; 12415 ; 12416 ; 12417static void; 12418read_websocket(struct mg_connection *conn,; 12419 mg_websocket_data_handler ws_data_handler,; 12420 void *callback_data); 12421{; 12422 /* Pointer to the beginning of the portion of the incoming websocket; 12423 * message queue.; 12424 * The original websocket upgrade request is never removed, so the queue; 12425 * begins after it. */; 12426 unsigned char *buf = (unsigned char *)conn->buf + conn->request_len;; 12427 int n, error, exit_by_callback;; 12428 int ret;; 12429 ; 12430 /* body_len is the length of the entire queue in bytes; 12431 * len is the length of the current message; 12432 * data_len is the length of the current message's data payload; 12433 * header_len is the length of the current message's header */; 12434 size_t i, len, mask_len = 0, header_len, body_len;; 12435 uint64_t data_len = 0;; 12436 ; 12437 /* ""The masking key is a 32-bit value chosen at random by the client.""; 12438 * http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-17#section-5; 12439 */; 12440 unsigned char mask[4];; 12441 ; 12442 /* data points to the place where the message is stored when passed to; 12443 * the websocket_data callback. This is either mem on the stack, or a; 12444 * dynamically allocated buffer if it is too large. */; 12445 unsigned char mem[4096];",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:359849,queue,queue,359849,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['queue'],['queue']
Performance," 12396 if (conn->request_info.acceptedWebSocketSubprotocol) {; 12397 mg_printf(conn,; 12398 ""Sec-WebSocket-Protocol: %s\r\n\r\n"",; 12399 conn->request_info.acceptedWebSocketSubprotocol);; 12400 } else {; 12401 mg_printf(conn, ""%s"", ""\r\n"");; 12402 }; 12403 ; 12404 return 1;; 12405}; 12406 ; 12407 ; 12408#if !defined(MG_MAX_UNANSWERED_PING); 12409/* Configuration of the maximum number of websocket PINGs that might; 12410 * stay unanswered before the connection is considered broken.; 12411 * Note: The name of this define may still change (until it is; 12412 * defined as a compile parameter in a documentation).; 12413 */; 12414#define MG_MAX_UNANSWERED_PING (5); 12415#endif; 12416 ; 12417 ; 12418static void; 12419read_websocket(struct mg_connection *conn,; 12420 mg_websocket_data_handler ws_data_handler,; 12421 void *callback_data); 12422{; 12423 /* Pointer to the beginning of the portion of the incoming websocket; 12424 * message queue.; 12425 * The original websocket upgrade request is never removed, so the queue; 12426 * begins after it. */; 12427 unsigned char *buf = (unsigned char *)conn->buf + conn->request_len;; 12428 int n, error, exit_by_callback;; 12429 int ret;; 12430 ; 12431 /* body_len is the length of the entire queue in bytes; 12432 * len is the length of the current message; 12433 * data_len is the length of the current message's data payload; 12434 * header_len is the length of the current message's header */; 12435 size_t i, len, mask_len = 0, header_len, body_len;; 12436 uint64_t data_len = 0;; 12437 ; 12438 /* ""The masking key is a 32-bit value chosen at random by the client.""; 12439 * http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-17#section-5; 12440 */; 12441 unsigned char mask[4];; 12442 ; 12443 /* data points to the place where the message is stored when passed to; 12444 * the websocket_data callback. This is either mem on the stack, or a; 12445 * dynamically allocated buffer if it is too large. */; 12446 unsigned char mem[4096];",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:359882,queue,queue,359882,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['queue'],['queue']
Performance," 1243 ; 1244 llvm::StringSet<> KnownModuleFileNames;; 1245 if (GlobalIndex); 1246 GlobalIndex->getKnownModuleFileNames(KnownModuleFileNames);; 1247 ; 1248 std::vector<std::string> PendingModules;; 1249 PendingModules.reserve(256);; 1250 for (auto I = MMap.module_begin(), E = MMap.module_end(); I != E; ++I) {; 1251 clang::Module *M = I->second;; 1252 assert(M);; 1253 ; 1254 // We want to load only already created modules.; 1255 std::string FullASTFilePath;; 1256 if (!HasASTFileOnDisk(M, PP, &FullASTFilePath)); 1257 continue;; 1258 ; 1259 if (GlobalIndex && KnownModuleFileNames.count(FullASTFilePath)); 1260 continue;; 1261 ; 1262 if (M->IsUnimportable); 1263 continue;; 1264 ; 1265 if (GlobalIndex); 1266 LoadModule(M->Name, clingInterp);; 1267 else {; 1268 // FIXME: We may be able to remove those checks as cling::loadModule; 1269 // checks if a module was alredy loaded.; 1270 if (std::find(CoreModules.begin(), CoreModules.end(), M->Name) != CoreModules.end()); 1271 continue; // This is a core module which was already loaded.; 1272 ; 1273 // Load system modules now and delay the other modules after we have; 1274 // loaded all system ones.; 1275 if (M->IsSystem); 1276 LoadModule(M->Name, clingInterp);; 1277 else; 1278 PendingModules.push_back(M->Name);; 1279 }; 1280 }; 1281 LoadModules(PendingModules, clingInterp);; 1282 }; 1283 ; 1284 // Check that the gROOT macro was exported by any core module.; 1285 assert(clingInterp.getMacro(""gROOT"") && ""Couldn't load gROOT macro?"");; 1286 ; 1287 // `ERROR` and `PI` are from loading R related modules, which conflict with; 1288 // user's code.; 1289 clingInterp.declare(R""CODE(; 1290#ifdef PI; 1291# undef PI; 1292#endif; 1293#ifdef ERROR; 1294# undef ERROR; 1295#endif; 1296 )CODE"");; 1297}; 1298 ; 1299static void RegisterPreIncludedHeaders(cling::Interpreter &clingInterp); 1300{; 1301 std::string PreIncludes;; 1302 bool hasCxxModules = clingInterp.getCI()->getLangOpts().Modules;; 1303 ; 1304 // For the list to also include string, we ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:46081,load,loaded,46081,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['load'],['loaded']
Performance," 13.2125; TH1.Print Name = TrainingHistory_PyKeras_'val_loss', Entries= 0, Total sum= 12.2158; Factory : === Destroy and recreate all methods via weight files for testing ===; : ; : Reading weight file: ␛[0;36mdataset/weights/TMVA_Higgs_Classification_Likelihood.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVA_Higgs_Classification_Fisher.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVA_Higgs_Classification_BDT.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVA_Higgs_Classification_DNN_CPU.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVA_Higgs_Classification_PyKeras.weights.xml␛[0m; Factory : ␛[1mTest all methods␛[0m; Factory : Test method: Likelihood for Classification performance; : ; Likelihood : [dataset] : Evaluation of Likelihood on testing sample (6000 events); : Elapsed time for evaluation of 6000 events: 0.0107 sec ; Factory : Test method: Fisher for Classification performance; : ; Fisher : [dataset] : Evaluation of Fisher on testing sample (6000 events); : Elapsed time for evaluation of 6000 events: 0.00276 sec ; : Dataset[dataset] : Evaluation of Fisher on testing sample; Factory : Test method: BDT for Classification performance; : ; BDT : [dataset] : Evaluation of BDT on testing sample (6000 events); : Elapsed time for evaluation of 6000 events: 0.0472 sec ; Factory : Test method: DNN_CPU for Classification performance; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; TFHandler_DNN_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : m_jj: 0.017919 1.0069 [ -3.3498 3.4247 ]; : m_jjj: 0.020352 1.0044 [ -3.2831 3.3699 ]; : m_lv: 0.016356 0.99266 [ -3.2339 3.3958 ]; : m_jlv: -0.018431 0.98242 [ -3.0632 5.7307 ]; : m_bb: 0.0069564 0.98851 [ -2.9734 3.3513 ]; : m_wbb: -0.010633 0.99340 [ -3.2442 3.2244 ]; : m_wwbb: -0.012669 0.99259 [ -3.1871 5.7307 ]; : ---------------------------------------------------------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:49490,perform,performance,49490,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,1,['perform'],['performance']
Performance," 132 // using given weight file; 133 MethodBase( Types::EMVA methodType,; 134 DataSetInfo& dsi,; 135 const TString& weightFile );; 136 ; 137 // default destructor; 138 virtual ~MethodBase();; 139 ; 140 // declaration, processing and checking of configuration options; 141 void SetupMethod();; 142 void ProcessSetup();; 143 virtual void CheckSetup(); // may be overwritten by derived classes; 144 ; 145 // ---------- main training and testing methods ------------------------------; 146 ; 147 // prepare tree branch with the method's discriminating variable; 148 void AddOutput( Types::ETreeType type, Types::EAnalysisType analysisType );; 149 ; 150 // performs classifier training; 151 // calls methods Train() implemented by derived classes; 152 void TrainMethod();; 153 ; 154 // optimize tuning parameters; 155 virtual std::map<TString,Double_t> OptimizeTuningParameters(TString fomType=""ROCIntegral"", TString fitType=""FitGA"");; 156 virtual void SetTuneParameters(std::map<TString,Double_t> tuneParameters);; 157 ; 158 virtual void Train() = 0;; 159 ; 160 // store and retrieve time used for training; 161 void SetTrainTime( Double_t trainTime ) { fTrainTime = trainTime; }; 162 Double_t GetTrainTime() const { return fTrainTime; }; 163 ; 164 // store and retrieve time used for testing; 165 void SetTestTime ( Double_t testTime ) { fTestTime = testTime; }; 166 Double_t GetTestTime () const { return fTestTime; }; 167 ; 168 // performs classifier testing; 169 virtual void TestClassification();; 170 virtual Double_t GetKSTrainingVsTest(Char_t SorB, TString opt=""X"");; 171 ; 172 // performs multiclass classifier testing; 173 virtual void TestMulticlass();; 174 ; 175 // performs regression testing; 176 virtual void TestRegression( Double_t& bias, Double_t& biasT,; 177 Double_t& dev, Double_t& devT,; 178 Double_t& rms, Double_t& rmsT,; 179 Double_t& mInf, Double_t& mInfT, // mutual information; 180 Double_t& corr,; 181 Types::ETreeType type );; 182 ; 183 // options treatment; 184 virtual void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodBase_8h_source.html:5362,tune,tuneParameters,5362,doc/master/MethodBase_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html,1,['tune'],['tuneParameters']
Performance," 1332main.AddFriend(&friend, ""myFriend"");; 1333 ; 1334RDataFrame df(main);; 1335auto df2 = df.Filter(""myFriend.MyCol == 42"");; 1336~~~; 1337 ; 1338The same applies for TChains. Columns coming from the friend trees can be referred to by their full name, like in the example above,; 1339or the friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" could be used instead of; 1340""myFriend.MyCol"" in the example above if there is no column ""MyCol"" in the main tree).; 1341 ; 1342\note A common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their; 1343 entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original; 1344 one: rows will be mismatched.; 1345 ; 1346Indexed friend trees provide a way to perform simple joins of multiple trees over a common column.; 1347When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the; 1348""index"" columns have a value identical to the one in the main one. For example, in Python:; 1349 ; 1350~~~{.py}; 1351main_tree = ...; 1352aux_tree = ...; 1353 ; 1354# If a friend tree has an index on `commonColumn`, when the main tree loads; 1355# a given row, it also loads the row of the friend tree that has the same; 1356# value of `commonColumn`; 1357aux_tree.BuildIndex(""commonColumn""); 1358 ; 1359mainTree.AddFriend(aux_tree); 1360 ; 1361df = ROOT.RDataFrame(mainTree); 1362~~~; 1363 ; 1364RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode.; 1365 ; 1366\anchor other-file-formats; 1367### Reading data formats other than ROOT trees; 1368RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an API that RDataFrame can use to read arbitrary columnar data formats.; 1369 ; 1370RDataFrame calls into concrete RDataSource implementations to retrieve infor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:78265,load,loaded,78265,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,2,['load'],"['load', 'loaded']"
Performance," 13389 ; 13390 while ((spec = next_option(spec, &vec, &val)) != NULL) {; 13391 mult = ',';; 13392 if ((val.ptr == NULL); 13393 || (sscanf(val.ptr, ""%lf%c"", &v, &mult); 13394 < 1) // NOLINT(cert-err34-c) 'sscanf' used to convert a string; 13395 // to an integer value, but function will not report; 13396 // conversion errors; consider using 'strtol' instead; 13397 || (v < 0); 13398 || ((lowercase(&mult) != 'k') && (lowercase(&mult) != 'm'); 13399 && (mult != ','))) {; 13400 continue;; 13401 }; 13402 v *= (lowercase(&mult) == 'k'); 13403 ? 1024; 13404 : ((lowercase(&mult) == 'm') ? 1048576 : 1);; 13405 if (vec.len == 1 && vec.ptr[0] == '*') {; 13406 throttle = (int)v;; 13407 } else {; 13408 int matched = parse_match_net(&vec, rsa, 0);; 13409 if (matched >= 0) {; 13410 /* a valid IP subnet */; 13411 if (matched) {; 13412 throttle = (int)v;; 13413 }; 13414 } else if (match_prefix(vec.ptr, vec.len, uri) > 0) {; 13415 throttle = (int)v;; 13416 }; 13417 }; 13418 }; 13419 ; 13420 return throttle;; 13421}; 13422 ; 13423 ; 13424/* The mg_upload function is superseeded by mg_handle_form_request. */; 13425#include ""handle_form.inl""; 13426 ; 13427 ; 13428static int; 13429get_first_ssl_listener_index(const struct mg_context *ctx); 13430{; 13431 unsigned int i;; 13432 int idx = -1;; 13433 if (ctx) {; 13434 for (i = 0; ((idx == -1) && (i < ctx->num_listening_sockets)); i++) {; 13435 idx = ctx->listening_sockets[i].is_ssl ? ((int)(i)) : -1;; 13436 }; 13437 }; 13438 return idx;; 13439}; 13440 ; 13441 ; 13442/* Return host (without port) */; 13443static void; 13444get_host_from_request_info(struct vec *host, const struct mg_request_info *ri); 13445{; 13446 const char *host_header =; 13447 get_header(ri->http_headers, ri->num_headers, ""Host"");; 13448 ; 13449 host->ptr = NULL;; 13450 host->len = 0;; 13451 ; 13452 if (host_header != NULL) {; 13453 const char *pos;; 13454 ; 13455 /* If the ""Host"" is an IPv6 address, like [::1], parse until ]; 13456 * is found. */; 13457 if (*host_header == ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:392168,throttle,throttle,392168,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,2,['throttle'],['throttle']
Performance," 13390 ; 13391 while ((spec = next_option(spec, &vec, &val)) != NULL) {; 13392 mult = ',';; 13393 if ((val.ptr == NULL); 13394 || (sscanf(val.ptr, ""%lf%c"", &v, &mult); 13395 < 1) // NOLINT(cert-err34-c) 'sscanf' used to convert a string; 13396 // to an integer value, but function will not report; 13397 // conversion errors; consider using 'strtol' instead; 13398 || (v < 0); 13399 || ((lowercase(&mult) != 'k') && (lowercase(&mult) != 'm'); 13400 && (mult != ','))) {; 13401 continue;; 13402 }; 13403 v *= (lowercase(&mult) == 'k'); 13404 ? 1024; 13405 : ((lowercase(&mult) == 'm') ? 1048576 : 1);; 13406 if (vec.len == 1 && vec.ptr[0] == '*') {; 13407 throttle = (int)v;; 13408 } else {; 13409 int matched = parse_match_net(&vec, rsa, 0);; 13410 if (matched >= 0) {; 13411 /* a valid IP subnet */; 13412 if (matched) {; 13413 throttle = (int)v;; 13414 }; 13415 } else if (match_prefix(vec.ptr, vec.len, uri) > 0) {; 13416 throttle = (int)v;; 13417 }; 13418 }; 13419 }; 13420 ; 13421 return throttle;; 13422}; 13423 ; 13424 ; 13425/* The mg_upload function is superseeded by mg_handle_form_request. */; 13426#include ""handle_form.inl""; 13427 ; 13428 ; 13429static int; 13430get_first_ssl_listener_index(const struct mg_context *ctx); 13431{; 13432 unsigned int i;; 13433 int idx = -1;; 13434 if (ctx) {; 13435 for (i = 0; ((idx == -1) && (i < ctx->num_listening_sockets)); i++) {; 13436 idx = ctx->listening_sockets[i].is_ssl ? ((int)(i)) : -1;; 13437 }; 13438 }; 13439 return idx;; 13440}; 13441 ; 13442 ; 13443/* Return host (without port) */; 13444static void; 13445get_host_from_request_info(struct vec *host, const struct mg_request_info *ri); 13446{; 13447 const char *host_header =; 13448 get_header(ri->http_headers, ri->num_headers, ""Host"");; 13449 ; 13450 host->ptr = NULL;; 13451 host->len = 0;; 13452 ; 13453 if (host_header != NULL) {; 13454 const char *pos;; 13455 ; 13456 /* If the ""Host"" is an IPv6 address, like [::1], parse until ]; 13457 * is found. */; 13458 if (*host_header == ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:392201,throttle,throttle,392201,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,2,['throttle'],['throttle']
Performance," 1372main.AddFriend(&friend, ""myFriend"");; 1373 ; 1374RDataFrame df(main);; 1375auto df2 = df.Filter(""myFriend.MyCol == 42"");; 1376~~~; 1377 ; 1378The same applies for TChains. Columns coming from the friend trees can be referred to by their full name, like in the example above,; 1379or the friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" could be used instead of; 1380""myFriend.MyCol"" in the example above if there is no column ""MyCol"" in the main tree).; 1381 ; 1382\note A common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their; 1383 entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original; 1384 one: rows will be mismatched.; 1385 ; 1386Indexed friend trees provide a way to perform simple joins of multiple trees over a common column.; 1387When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the; 1388""index"" columns have a value identical to the one in the main one. For example, in Python:; 1389 ; 1390~~~{.py}; 1391main_tree = ...; 1392aux_tree = ...; 1393 ; 1394# If a friend tree has an index on `commonColumn`, when the main tree loads; 1395# a given row, it also loads the row of the friend tree that has the same; 1396# value of `commonColumn`; 1397aux_tree.BuildIndex(""commonColumn""); 1398 ; 1399mainTree.AddFriend(aux_tree); 1400 ; 1401df = ROOT.RDataFrame(mainTree); 1402~~~; 1403 ; 1404RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode.; 1405 ; 1406\anchor other-file-formats; 1407### Reading data formats other than ROOT trees; 1408RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an API that RDataFrame can use to read arbitrary columnar data formats.; 1409 ; 1410RDataFrame calls into concrete RDataSource implementations to retrieve infor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:79945,load,loaded,79945,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,2,['load'],"['load', 'loaded']"
Performance," 143 TString fShell; // user preferred shell; 144 UserGroup_t() : fUid(0), fGid(0), fUser(), fGroup(), fPasswd(),; 145 fRealName (), fShell() { }; 146};; 147 ; 148struct SysInfo_t {; 149 TString fOS; // OS; 150 TString fModel; // computer model; 151 TString fCpuType; // type of cpu; 152 Int_t fCpus; // number of cpus; 153 Int_t fCpuSpeed; // cpu speed in MHz; 154 Int_t fBusSpeed; // bus speed in MHz; 155 Int_t fL2Cache; // level 2 cache size in KB; 156 Int_t fPhysRam; // physical RAM in MB; 157 SysInfo_t() : fOS(), fModel(), fCpuType(), fCpus(0), fCpuSpeed(0),; 158 fBusSpeed(0), fL2Cache(0), fPhysRam(0) { }; 159 virtual ~SysInfo_t() { }; 160 ClassDef(SysInfo_t, 1); // System information - OS, CPU, RAM.; 161};; 162 ; 163struct CpuInfo_t {; 164 Float_t fLoad1m; // cpu load average over 1 m; 165 Float_t fLoad5m; // cpu load average over 5 m; 166 Float_t fLoad15m; // cpu load average over 15 m; 167 Float_t fUser; // cpu user load in percentage; 168 Float_t fSys; // cpu sys load in percentage; 169 Float_t fTotal; // cpu user+sys load in percentage; 170 Float_t fIdle; // cpu idle percentage; 171 CpuInfo_t() : fLoad1m(0), fLoad5m(0), fLoad15m(0),; 172 fUser(0), fSys(0), fTotal(0), fIdle(0) { }; 173 virtual ~CpuInfo_t() { }; 174 ClassDef(CpuInfo_t, 1); // CPU load information.; 175};; 176 ; 177struct MemInfo_t {; 178 Int_t fMemTotal; // total RAM in MB; 179 Int_t fMemUsed; // used RAM in MB; 180 Int_t fMemFree; // free RAM in MB; 181 Int_t fMemAvailable; // available RAM in MB; 182 Int_t fMemCached; // cached RAM in MB; 183 Int_t fMemBuffer; // buffer RAM in MB; 184 Int_t fMemShared; // shared RAM in MB; 185 Int_t fSwapTotal; // total swap in MB; 186 Int_t fSwapUsed; // used swap in MB; 187 Int_t fSwapFree; // free swap in MB; 188 Int_t fSwapCached; // cached swap in MB; 189 Int_t fSReclaimable; // slab that might be reclaimed; 190 MemInfo_t() : fMemTotal(0), fMemUsed(0), fMemFree(0), fMemAvailable(0), fMemCached(0), fMemBuffer(0), fMemShared(0),; 191 fSwapTotal(0), fSwapUs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8h_source.html:5483,load,load,5483,doc/master/TSystem_8h_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8h_source.html,7,['load'],['load']
Performance," 144 3; ; * parameters :; ; [1] 140 1; [2] 140 2; etc.; ROOT::v5::TFormula::kStringConst@ kStringConstDefinition TFormula.h:185; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17. Special cases for normalized gaussian or landau distributions; the expression ""gaus"" is a substitute for [0]*exp(-0.5*((x-[1])/[2])**2); to obtain a standard normalized gaussian, use ""gausn"" instead of ""gaus"" the expression ""gausn"" is a substitute for [0]*exp(-0.5*((x-[1])/[2])**2)/(sqrt(2*pi)*[2])); WARNING: gaus and gausn are mutually exclusive in the same expression.; In the same way the expression ""landau"" is a substitute for [0]*TMath::Landau(x,[1],[2],kFALSE); to obtain a standard normalized landau, use ""landaun"" instead of ""landau"" the expression ""landaun"" is a substitute for [0]*TMath::Landau(x,[1],[2],kTRUE); WARNING: landau and landaun are mutually exclusive in the same expression. Boolean optimization (kBoolOptmize) :; Those pseudo operation are used to implement lazy evaluation of && and ||. When the left hand of the expression if false (respectively true), the evaluation of the right is entirely skipped (since it would not change the value of the expression).; && 142 11 (one operation on right) 142 21 (2 operations on right) || 142 12 (one operation on right) 142 22 (2 operations on right). functions calls (kFunctionCall) :; f0 145 0 f1 145 1 etc.. Errors :; 1 : Division By Zero; 2 : Invalid Floating Point Operation; 4 : Empty String; 5 : invalid syntax; 6 : Too many operators; 7 : Too many parameters; 10 : z specified but not x and y; 11 : z and y specified but not x; 12 : y specified but not x; 13 : z and x specified but not y; 20 : non integer value for parameter number; 21 : atan2 requires two arguments; 22 : pow requires two arguments; 23 : degree of polynomial not specified; 24 : Degree of polynomial must be positive; 25 : Degree of polynomial must be less than 20; 26 : Unknown name; 27 : Too many constants i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormula.html:27884,optimiz,optimization,27884,doc/master/classROOT_1_1v5_1_1TFormula.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormula.html,1,['optimiz'],['optimization']
Performance," 1489 auto outputMatrix = my_batch.GetOutput();; 1490 auto weights = my_batch.GetWeights();; 1491 trainingError += deepNet.Loss(outputMatrix, weights, false);; 1492 }; 1493 ; 1494 if (debugFirstEpoch); 1495 std::cout << ""- doing backward \n"";; 1496 ; 1497#ifdef DEBUG; 1498 size_t nlayers = deepNet.GetLayers().size();; 1499 for (size_t l = 0; l < nlayers; ++l) {; 1500 if (deepNet.GetLayerAt(l)->GetWeights().size() > 0); 1501 Architecture_t::PrintTensor(deepNet.GetLayerAt(l)->GetWeightsAt(0),; 1502 TString::Format(""initial weights layer %d"", l).Data());; 1503 ; 1504 Architecture_t::PrintTensor(deepNet.GetLayerAt(l)->GetOutput(),; 1505 TString::Format(""output tensor layer %d"", l).Data());; 1506 }; 1507#endif; 1508 ; 1509 //Architecture_t::PrintTensor(deepNet.GetLayerAt(nlayers-1)->GetOutput(),""output tensor last layer"" );; 1510 ; 1511 deepNet.Backward(my_batch.GetInput(), my_batch.GetOutput(), my_batch.GetWeights());; 1512 ; 1513 if (debugFirstEpoch); 1514 std::cout << ""- doing optimizer update \n"";; 1515 ; 1516 // increment optimizer step that is used in some algorithms (e.g. ADAM); 1517 optimizer->IncrementGlobalStep();; 1518 optimizer->Step();; 1519 ; 1520#ifdef DEBUG; 1521 std::cout << ""minmimizer step - momentum "" << settings.momentum << "" learning rate "" << optimizer->GetLearningRate() << std::endl;; 1522 for (size_t l = 0; l < nlayers; ++l) {; 1523 if (deepNet.GetLayerAt(l)->GetWeights().size() > 0) {; 1524 Architecture_t::PrintTensor(deepNet.GetLayerAt(l)->GetWeightsAt(0),TString::Format(""weights after step layer %d"",l).Data());; 1525 Architecture_t::PrintTensor(deepNet.GetLayerAt(l)->GetWeightGradientsAt(0),""weight gradients"");; 1526 }; 1527 }; 1528#endif; 1529 ; 1530 }; 1531 ; 1532 if (debugFirstEpoch) std::cout << ""\n End batch loop - compute validation loss \n"";; 1533 //}; 1534 debugFirstEpoch = false;; 1535 if ((nTrainEpochs % settings.testInterval) == 0) {; 1536 ; 1537 std::chrono::time_point<std::chrono::system_clock> t1,t2;; 1538 ; 1539 t1 = std::chrono:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:60119,optimiz,optimizer,60119,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,2,['optimiz'],['optimizer']
Performance," 152 of file TTreeCache.h. ◆ LearnBranch(). Int_t TTreeCache::LearnBranch ; (; TBranch * ; b, . bool ; subbranches = false . ). overridevirtual . Add a branch discovered by actual usage to the list of branches to be stored in the cache this function is called by TBranch::GetBasket If we are not longer in the training phase this is an error. ; Returns:; 0 branch added or already included; -1 on error . Reimplemented from TFileCacheRead.; Definition at line 350 of file TTreeCache.cxx. ◆ LearnPrefill(). void TTreeCache::LearnPrefill ; (; ). virtual . Perform an initial prefetch, attempting to read as much of the learning phase baskets for all branches at once. ; Definition at line 2250 of file TTreeCache.cxx. ◆ operator=(). TTreeCache & TTreeCache::operator= ; (; const TTreeCache & ; ). privatedelete . ◆ Print(). void TTreeCache::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print cache statistics. ; Like:; ******TreeCache statistics for file: cms2.root ******; Number of branches in the cache ...: 1093; Cache Efficiency ..................: 0.997372; Cache Efficiency Rel...............: 1.000000; Learn entries......................: 100; Reading............................: 72761843 bytes in 7 transactions; Readahead..........................: 256000 bytes with overhead = 0 bytes; Average transaction................: 10394.549000 Kbytes; Number of blocks in current cache..: 210, total size: 6280352; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; totalstatic unsigned int totalDefinition TGWin32ProxyDefs.h:40; bytesOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid win",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCache.html:44053,cache,cache,44053,doc/v632/classTTreeCache.html,https://root.cern,https://root.cern/doc/v632/classTTreeCache.html,1,['cache'],['cache']
Performance," 152 of file TTreeCache.h. ◆ LearnBranch(). Int_t TTreeCache::LearnBranch ; (; TBranch * ; b, . bool ; subbranches = false . ). overridevirtual . Add a branch discovered by actual usage to the list of branches to be stored in the cache this function is called by TBranch::GetBasket If we are not longer in the training phase this is an error. ; Returns:; 0 branch added or already included; -1 on error . Reimplemented from TFileCacheRead.; Definition at line 350 of file TTreeCache.cxx. ◆ LearnPrefill(). void TTreeCache::LearnPrefill ; (; ). virtual . Perform an initial prefetch, attempting to read as much of the learning phase baskets for all branches at once. ; Definition at line 2251 of file TTreeCache.cxx. ◆ operator=(). TTreeCache & TTreeCache::operator= ; (; const TTreeCache & ; ). privatedelete . ◆ Print(). void TTreeCache::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print cache statistics. ; Like:; ******TreeCache statistics for file: cms2.root ******; Number of branches in the cache ...: 1093; Cache Efficiency ..................: 0.997372; Cache Efficiency Rel...............: 1.000000; Learn entries......................: 100; Reading............................: 72761843 bytes in 7 transactions; Readahead..........................: 256000 bytes with overhead = 0 bytes; Average transaction................: 10394.549000 Kbytes; Number of blocks in current cache..: 210, total size: 6280352; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; totalstatic unsigned int totalDefinition TGWin32ProxyDefs.h:40; bytesOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid win",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:44057,cache,cache,44057,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,1,['cache'],['cache']
Performance," 162 ; 163struct CpuInfo_t {; 164 Float_t fLoad1m; // cpu load average over 1 m; 165 Float_t fLoad5m; // cpu load average over 5 m; 166 Float_t fLoad15m; // cpu load average over 15 m; 167 Float_t fUser; // cpu user load in percentage; 168 Float_t fSys; // cpu sys load in percentage; 169 Float_t fTotal; // cpu user+sys load in percentage; 170 Float_t fIdle; // cpu idle percentage; 171 CpuInfo_t() : fLoad1m(0), fLoad5m(0), fLoad15m(0),; 172 fUser(0), fSys(0), fTotal(0), fIdle(0) { }; 173 virtual ~CpuInfo_t() { }; 174 ClassDef(CpuInfo_t, 1); // CPU load information.; 175};; 176 ; 177struct MemInfo_t {; 178 Int_t fMemTotal; // total RAM in MB; 179 Int_t fMemUsed; // used RAM in MB; 180 Int_t fMemFree; // free RAM in MB; 181 Int_t fMemAvailable; // available RAM in MB; 182 Int_t fMemCached; // cached RAM in MB; 183 Int_t fMemBuffer; // buffer RAM in MB; 184 Int_t fMemShared; // shared RAM in MB; 185 Int_t fSwapTotal; // total swap in MB; 186 Int_t fSwapUsed; // used swap in MB; 187 Int_t fSwapFree; // free swap in MB; 188 Int_t fSwapCached; // cached swap in MB; 189 Int_t fSReclaimable; // slab that might be reclaimed; 190 MemInfo_t() : fMemTotal(0), fMemUsed(0), fMemFree(0), fMemAvailable(0), fMemCached(0), fMemBuffer(0), fMemShared(0),; 191 fSwapTotal(0), fSwapUsed(0), fSwapFree(0), fSwapCached(0), fSReclaimable(0){ }; 192 virtual ~MemInfo_t() { }; 193 ClassDef(MemInfo_t, 2); // Memory utilization information.; 194};; 195 ; 196struct ProcInfo_t {; 197 Float_t fCpuUser; // user time used by this process in seconds; 198 Float_t fCpuSys; // system time used by this process in seconds; 199 Long_t fMemResident; // resident memory used by this process in KB; 200 Long_t fMemVirtual; // virtual memory used by this process in KB; 201 ProcInfo_t() : fCpuUser(0), fCpuSys(0), fMemResident(0),; 202 fMemVirtual(0) { }; 203 virtual ~ProcInfo_t();; 204 ClassDef(ProcInfo_t, 1);// System resource usage of given process.; 205};; 206 ; 207struct RedirectHandle_t {; 208 TString fFile; // F",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8h_source.html:6226,cache,cached,6226,doc/master/TSystem_8h_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8h_source.html,2,['cache'],['cached']
Performance," 1668 while ( TNameMapNode* htmp = static_cast<TNameMapNode*> (next()) ) {; 1669 if (resolvedThis == htmp->String() && htmp->fOrigName == GetName()) {; 1670 fgClassTypedefHash->Remove (htmp);; 1671 delete htmp;; 1672 break;; 1673 }; 1674 }; 1675 }; 1676 ; 1677 // Not owning lists, don't call Delete(); 1678 // But this still need to be done first because the TList destructor; 1679 // does access the object contained (via GetObject()->TestBit(kCanDelete)); 1680 delete fStreamer; fStreamer =nullptr;; 1681 delete fAllPubData; fAllPubData =nullptr;; 1682 delete fAllPubMethod; fAllPubMethod=nullptr;; 1683 ; 1684 delete fPersistentRef.load();; 1685 ; 1686 if (fBase.load()); 1687 (*fBase).Delete();; 1688 delete fBase.load(); fBase = nullptr;; 1689 ; 1690 if (fData.load()); 1691 (*fData).Delete();; 1692 delete fData.load(); fData = nullptr;; 1693 ; 1694 if (fUsingData.load()); 1695 (*fUsingData).Delete();; 1696 delete fUsingData.load(); fUsingData = nullptr;; 1697 ; 1698 if (fEnums.load()); 1699 (*fEnums).Delete();; 1700 delete fEnums.load(); fEnums = nullptr;; 1701 ; 1702 if (fFuncTemplate); 1703 fFuncTemplate->Delete();; 1704 delete fFuncTemplate; fFuncTemplate = nullptr;; 1705 ; 1706 if (fMethod.load()); 1707 (*fMethod).Delete();; 1708 delete fMethod.load(); fMethod=nullptr;; 1709 ; 1710 if (fRealData); 1711 fRealData->Delete();; 1712 delete fRealData; fRealData=nullptr;; 1713 ; 1714 if (fStreamerInfo); 1715 fStreamerInfo->Delete();; 1716 delete fStreamerInfo; fStreamerInfo = nullptr;; 1717 ; 1718 if (fDeclFileLine >= -1); 1719 TClass::RemoveClass(this);; 1720 ; 1721 gCling->ClassInfo_Delete(fClassInfo);; 1722 fClassInfo=nullptr;; 1723 ; 1724 if (fClassMenuList); 1725 fClassMenuList->Delete();; 1726 delete fClassMenuList; fClassMenuList=nullptr;; 1727 ; 1728 fIsOffsetStreamerSet=kFALSE;; 1729 ; 1730 if ( fIsA ) delete fIsA;; 1731 ; 1732 if ( fRefProxy ) fRefProxy->Release();; 1733 fRefProxy = nullptr;; 1734 ; 1735 delete fStreamer;; 1736 delete fCollectionProxy;; 1737 del",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:65318,load,load,65318,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['load'],['load']
Performance," 1723 ; 1724 if (fClassMenuList); 1725 fClassMenuList->Delete();; 1726 delete fClassMenuList; fClassMenuList=nullptr;; 1727 ; 1728 fIsOffsetStreamerSet=kFALSE;; 1729 ; 1730 if ( fIsA ) delete fIsA;; 1731 ; 1732 if ( fRefProxy ) fRefProxy->Release();; 1733 fRefProxy = nullptr;; 1734 ; 1735 delete fStreamer;; 1736 delete fCollectionProxy;; 1737 delete fIsAMethod.load();; 1738 delete fSchemaRules;; 1739 if (fConversionStreamerInfo.load()) {; 1740 std::map<std::string, TObjArray*>::iterator it;; 1741 std::map<std::string, TObjArray*>::iterator end = (*fConversionStreamerInfo).end();; 1742 for( it = (*fConversionStreamerInfo).begin(); it != end; ++it ) {; 1743 delete it->second;; 1744 }; 1745 delete fConversionStreamerInfo.load();; 1746 }; 1747}; 1748 ; 1749////////////////////////////////////////////////////////////////////////////////; 1750 ; 1751namespace {; 1752 Int_t ReadRulesContent(FILE *f); 1753 {; 1754 // Read a class.rules file which contains one rule per line with comment; 1755 // starting with a #; 1756 // Returns the number of rules loaded.; 1757 // Returns -1 in case of error.; 1758 ; 1759 R__ASSERT(f!=nullptr);; 1760 TString rule(1024);; 1761 int c, state = 0;; 1762 Int_t count = 0;; 1763 ; 1764 while ((c = fgetc(f)) != EOF) {; 1765 if (c == 13) // ignore CR; 1766 continue;; 1767 if (c == '\n') {; 1768 if (state != 3) {; 1769 state = 0;; 1770 if (rule.Length() > 0) {; 1771 if (TClass::AddRule(rule)) {; 1772 ++count;; 1773 }; 1774 rule.Clear();; 1775 }; 1776 }; 1777 continue;; 1778 }; 1779 switch (state) {; 1780 case 0: // start of line; 1781 switch (c) {; 1782 case ' ':; 1783 case '\t':; 1784 break;; 1785 case '#':; 1786 state = 1;; 1787 break;; 1788 default:; 1789 state = 2;; 1790 break;; 1791 }; 1792 break;; 1793 ; 1794 case 1: // comment; 1795 break;; 1796 ; 1797 case 2: // rule; 1798 switch (c) {; 1799 case '\\':; 1800 state = 3; // Continuation request; 1801 default:; 1802 break;; 1803 }; 1804 break;; 1805 }; 1806 switch (state) {; 1807 case 2:; 1808 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:67039,load,loaded,67039,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['load'],['loaded']
Performance," 1735 while ( TNameMapNode* htmp = static_cast<TNameMapNode*> (next()) ) {; 1736 if (resolvedThis == htmp->String() && htmp->fOrigName == GetName()) {; 1737 fgClassTypedefHash->Remove (htmp);; 1738 delete htmp;; 1739 break;; 1740 }; 1741 }; 1742 }; 1743 ; 1744 // Not owning lists, don't call Delete(); 1745 // But this still need to be done first because the TList destructor; 1746 // does access the object contained (via GetObject()->TestBit(kCanDelete)); 1747 delete fStreamer; fStreamer =nullptr;; 1748 delete fAllPubData; fAllPubData =nullptr;; 1749 delete fAllPubMethod; fAllPubMethod=nullptr;; 1750 ; 1751 delete fPersistentRef.load();; 1752 ; 1753 if (fBase.load()); 1754 (*fBase).Delete();; 1755 delete fBase.load(); fBase = nullptr;; 1756 ; 1757 if (fData.load()); 1758 (*fData).Delete();; 1759 delete fData.load(); fData = nullptr;; 1760 ; 1761 if (fUsingData.load()); 1762 (*fUsingData).Delete();; 1763 delete fUsingData.load(); fUsingData = nullptr;; 1764 ; 1765 if (fEnums.load()); 1766 (*fEnums).Delete();; 1767 delete fEnums.load(); fEnums = nullptr;; 1768 ; 1769 if (fFuncTemplate); 1770 fFuncTemplate->Delete();; 1771 delete fFuncTemplate; fFuncTemplate = nullptr;; 1772 ; 1773 if (fMethod.load()); 1774 (*fMethod).Delete();; 1775 delete fMethod.load(); fMethod=nullptr;; 1776 ; 1777 if (fRealData); 1778 fRealData->Delete();; 1779 delete fRealData; fRealData=nullptr;; 1780 ; 1781 if (fStreamerInfo); 1782 fStreamerInfo->Delete();; 1783 delete fStreamerInfo; fStreamerInfo = nullptr;; 1784 ; 1785 if (fDeclFileLine >= -1); 1786 TClass::RemoveClass(this);; 1787 ; 1788 gCling->ClassInfo_Delete(fClassInfo);; 1789 fClassInfo=nullptr;; 1790 ; 1791 if (fClassMenuList); 1792 fClassMenuList->Delete();; 1793 delete fClassMenuList; fClassMenuList=nullptr;; 1794 ; 1795 fIsOffsetStreamerSet=kFALSE;; 1796 ; 1797 if ( fIsA ) delete fIsA;; 1798 ; 1799 if ( fRefProxy ) fRefProxy->Release();; 1800 fRefProxy = nullptr;; 1801 ; 1802 delete fStreamer;; 1803 delete fCollectionProxy;; 1804 del",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:68069,load,load,68069,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['load'],['load']
Performance," 1790 ; 1791 if (fClassMenuList); 1792 fClassMenuList->Delete();; 1793 delete fClassMenuList; fClassMenuList=nullptr;; 1794 ; 1795 fIsOffsetStreamerSet=kFALSE;; 1796 ; 1797 if ( fIsA ) delete fIsA;; 1798 ; 1799 if ( fRefProxy ) fRefProxy->Release();; 1800 fRefProxy = nullptr;; 1801 ; 1802 delete fStreamer;; 1803 delete fCollectionProxy;; 1804 delete fIsAMethod.load();; 1805 delete fSchemaRules;; 1806 if (fConversionStreamerInfo.load()) {; 1807 std::map<std::string, TObjArray*>::iterator it;; 1808 std::map<std::string, TObjArray*>::iterator end = (*fConversionStreamerInfo).end();; 1809 for( it = (*fConversionStreamerInfo).begin(); it != end; ++it ) {; 1810 delete it->second;; 1811 }; 1812 delete fConversionStreamerInfo.load();; 1813 }; 1814}; 1815 ; 1816////////////////////////////////////////////////////////////////////////////////; 1817 ; 1818namespace {; 1819 Int_t ReadRulesContent(FILE *f); 1820 {; 1821 // Read a class.rules file which contains one rule per line with comment; 1822 // starting with a #; 1823 // Returns the number of rules loaded.; 1824 // Returns -1 in case of error.; 1825 ; 1826 R__ASSERT(f!=nullptr);; 1827 TString rule(1024);; 1828 int c, state = 0;; 1829 Int_t count = 0;; 1830 ; 1831 while ((c = fgetc(f)) != EOF) {; 1832 if (c == 13) // ignore CR; 1833 continue;; 1834 if (c == '\n') {; 1835 if (state != 3) {; 1836 state = 0;; 1837 if (rule.Length() > 0) {; 1838 if (TClass::AddRule(rule)) {; 1839 ++count;; 1840 }; 1841 rule.Clear();; 1842 }; 1843 }; 1844 continue;; 1845 }; 1846 switch (state) {; 1847 case 0: // start of line; 1848 switch (c) {; 1849 case ' ':; 1850 case '\t':; 1851 break;; 1852 case '#':; 1853 state = 1;; 1854 break;; 1855 default:; 1856 state = 2;; 1857 break;; 1858 }; 1859 break;; 1860 ; 1861 case 1: // comment; 1862 break;; 1863 ; 1864 case 2: // rule; 1865 switch (c) {; 1866 case '\\':; 1867 state = 3; // Continuation request; 1868 default:; 1869 break;; 1870 }; 1871 break;; 1872 }; 1873 switch (state) {; 1874 case 2:; 1875 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:69790,load,loaded,69790,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['load'],['loaded']
Performance," 1821/// program, we need to update the list of functions every time we; 1822/// execute this method. However, when calling this function in; 1823/// a (tight) loop where no interpreter symbols will be created; 1824/// you can set load=kFALSE (default).; 1825 ; 1826TCollection *TROOT::GetListOfGlobalFunctions(Bool_t load); 1827{; 1828 R__LOCKGUARD(gROOTMutex);; 1829 ; 1830 if (!fGlobalFunctions) {; 1831 fGlobalFunctions = new TListOfFunctions(nullptr);; 1832 }; 1833 ; 1834 if (!fInterpreter); 1835 Fatal(""GetListOfGlobalFunctions"", ""fInterpreter not initialized"");; 1836 ; 1837 // A thread that calls with load==true and a thread that calls with load==false; 1838 // will conflict here (the load==true will be updating the list while the; 1839 // other is reading it). To solve the problem, we could use a read-write lock; 1840 // inside the list itself.; 1841 if (load) fGlobalFunctions->Load();; 1842 ; 1843 return fGlobalFunctions;; 1844}; 1845 ; 1846////////////////////////////////////////////////////////////////////////////////; 1847/// Return a dynamic list giving access to all TDataTypes (typedefs); 1848/// currently defined.; 1849///; 1850/// The list is populated on demand. Calling; 1851/// ~~~ {.cpp}; 1852/// gROOT->GetListOfTypes()->FindObject(nameoftype);; 1853/// ~~~; 1854/// will return the TDataType corresponding to 'nameoftype'. If the; 1855/// TDataType is not already in the list itself and the type does exist,; 1856/// a new TDataType will be created and added to the list.; 1857///; 1858/// Calling; 1859/// ~~~ {.cpp}; 1860/// gROOT->GetListOfTypes()->ls(); // or Print(); 1861/// ~~~; 1862/// list only the typedefs that have been previously accessed through the; 1863/// list (plus the builtins types).; 1864 ; 1865TCollection *TROOT::GetListOfTypes(Bool_t /* load */); 1866{; 1867 if (!fInterpreter); 1868 Fatal(""GetListOfTypes"", ""fInterpreter not initialized"");; 1869 ; 1870 return fTypes;; 1871}; 1872 ; 1873////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:71038,load,load,71038,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,2,['load'],['load']
Performance," 183 ; 184The precision can be:; 185 ; 186 - `precision = 0` fast hardware fonts (steps in the size); 187 - `precision = 1` scalable and rotatable hardware fonts (see below); 188 - `precision = 2` scalable and rotatable hardware fonts; 189 - `precision = 3` scalable and rotatable hardware fonts. Text size; 190 is given in pixels.; 191 ; 192The text font and precision of any class inheriting from `TAttText` can; 193be changed using the method `SetTextFont` and retrieved using the; 194method `GetTextFont`.; 195 ; 196\anchor ATTTEXT51; 197### Font quality and speed; 198 ; 199When precision 0 is used, only the original non-scaled X11 system fonts are; 200used. The fonts have a minimum (4) and maximum (37) size in pixels. These; 201fonts are fast and are of good quality. Their size varies with large steps; 202and they cannot be rotated.; 203Precision 1 and 2 fonts have a different behaviour depending if the; 204True Type Fonts (TTF) are used or not. If TTF are used, you always get very good; 205quality scalable and rotatable fonts.; 206These days TTF fonts are rendered fast enough and can be used in all cases.; 207 ; 208\anchor ATTTEXT52; 209### How to use True Type Fonts; 210 ; 211TTF fonts are used by default. They can be deactivated via the following line; 212in the `.rootrc` file:; 213 ; 214~~~ {.cpp}; 215 Unix.*.Root.UseTTFonts: false; 216~~~; 217 ; 218\anchor ATTTEXT53; 219### List of the currently supported fonts; 220 ; 221~~~ {.cpp}; 222 Font number TTF Names PostScript/PDF Names; 223 1 : ""Free Serif Italic"" ""Times-Italic""; 224 2 : ""Free Serif Bold"" ""Times-Bold""; 225 3 : ""Free Serif Bold Italic"" ""Times-BoldItalic""; 226 4 : ""Tex Gyre Regular"" ""Helvetica""; 227 5 : ""Tex Gyre Italic"" ""Helvetica-Oblique""; 228 6 : ""Tex Gyre Bold"" ""Helvetica-Bold""; 229 7 : ""Tex Gyre Bold Italic"" ""Helvetica-BoldOblique""; 230 8 : ""Free Mono"" ""Courier""; 231 9 : ""Free Mono Oblique"" ""Courier-Oblique""; 232 10 : ""Free Mono Bold"" ""Courier-Bold""; 233 11 : ""Free Mono Bold Oblique"" ""Courier-BoldOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAttText_8cxx_source.html:6963,scalab,scalable,6963,doc/master/TAttText_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TAttText_8cxx_source.html,1,['scalab'],['scalable']
Performance," 1877///; 1878/// Default method (function evaluated at center of bin); 1879/// for each point the cache contains the following info; 1880/// - 1D : bc,e,xc (bin content, error, x of center of bin); 1881/// - 2D : bc,e,xc,yc; 1882/// - 3D : bc,e,xc,yc,zc; 1883 ; 1884void TFumili::FitLikelihood(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag); 1885{; 1886 Foption_t fitOption = GetFitOption();; 1887 if (fitOption.Integral) {; 1888 FitLikelihoodI(npar,gin,f,u,flag);; 1889 return;; 1890 }; 1891 Double_t cu,fu,fobs,fsub;; 1892 Double_t dersum[100];; 1893 Double_t x[3];; 1894 Int_t icu;; 1895 ; 1896 TH1 *hfit = (TH1*)GetObjectFit();; 1897 TF1 *f1 = (TF1*)GetUserFunc();; 1898 Int_t nd = hfit->GetDimension();; 1899 Int_t j;; 1900 Double_t *zik = GetZ();; 1901 Double_t *pl0 = GetPL0();; 1902 ; 1903 npar = f1->GetNpar();; 1904 SetParNumber(npar);; 1905 if(flag == 9) return;; 1906 Double_t *df=new Double_t[npar];; 1907 if (flag == 2) for (j=0;j<npar;j++) dersum[j] = gin[j] = 0;; 1908 f1->InitArgs(x,u);; 1909 f = 0;; 1910 ; 1911 Int_t npfit = 0;; 1912 Double_t *cache = fCache;; 1913 for (Int_t i=0;i<fNpoints;i++) {; 1914 if (nd > 2) x[2] = cache[4];; 1915 if (nd > 1) x[1] = cache[3];; 1916 x[0] = cache[2];; 1917 cu = cache[0];; 1918 TF1::RejectPoint(kFALSE);; 1919 fu = f1->EvalPar(x,u);; 1920 if (TF1::RejectedPoint()) {cache += fPointSize; continue;}; 1921 if (flag == 2) {; 1922 for (j=0;j<npar;j++) {; 1923 dersum[j] += 1; //should be the derivative; 1924 //grad[j] += dersum[j]*(fu-cu)/eu; dersum[j] = 0;; 1925 }; 1926 }; 1927 if (fu < 1.e-9) fu = 1.e-9;; 1928 icu = Int_t(cu);; 1929 fsub = -fu +icu*TMath::Log(fu);; 1930 fobs = GetSumLog(icu);; 1931 fsub -= fobs;; 1932 Derivatives(df,x);; 1933 int n=0;; 1934 // Here we need gradients of Log likelihood function; 1935 //; 1936 for (j=0;j<npar;j++) {; 1937 if (pl0[j]>0){; 1938 df[n] = df[j]*(icu/fu-1);; 1939 gin[j] -= df[n];; 1940 n++;; 1941 }; 1942 }; 1943 Int_t l = 0;; 1944 // Z-matrix here - production of first d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8cxx_source.html:55179,cache,cache,55179,doc/master/TFumili_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8cxx_source.html,6,['cache'],['cache']
Performance," 19855 /* Document root */; 19856#if defined(NO_FILES); 19857 if (ctx->dd.config[DOCUMENT_ROOT] != NULL) {; 19858 mg_cry_ctx_internal(ctx, ""%s"", ""Document root must not be set"");; 19859 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19860 mg_snprintf(NULL,; 19861 NULL, /* No truncation check for error buffers */; 19862 error->text,; 19863 error->text_buffer_size,; 19864 ""Invalid configuration option value: %s"",; 19865 config_options[DOCUMENT_ROOT].name);; 19866 }; 19867 free_context(ctx);; 19868 pthread_setspecific(sTlsKey, NULL);; 19869 return NULL;; 19870 }; 19871#endif; 19872 ; 19873 get_system_name(&ctx->systemName);; 19874 ; 19875#if defined(USE_LUA); 19876 /* If a Lua background script has been configured, start it. */; 19877 ctx->lua_bg_log_available = 0;; 19878 if (ctx->dd.config[LUA_BACKGROUND_SCRIPT] != NULL) {; 19879 char ebuf[256];; 19880 struct vec opt_vec;; 19881 struct vec eq_vec;; 19882 const char *sparams;; 19883 ; 19884 memset(ebuf, 0, sizeof(ebuf));; 19885 pthread_mutex_lock(&ctx->lua_bg_mutex);; 19886 ; 19887 /* Create a Lua state, load all standard libraries and the mg table */; 19888 lua_State *state = mg_lua_context_script_prepare(; 19889 ctx->dd.config[LUA_BACKGROUND_SCRIPT], ctx, ebuf, sizeof(ebuf));; 19890 if (!state) {; 19891 mg_cry_ctx_internal(ctx,; 19892 ""lua_background_script load error: %s"",; 19893 ebuf);; 19894 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19895 mg_snprintf(NULL,; 19896 NULL, /* No truncation check for error buffers */; 19897 error->text,; 19898 error->text_buffer_size,; 19899 ""Error in script %s: %s"",; 19900 config_options[LUA_BACKGROUND_SCRIPT].name,; 19901 ebuf);; 19902 }; 19903 pthread_mutex_unlock(&ctx->lua_bg_mutex);; 19904 ; 19905 free_context(ctx);; 19906 pthread_setspecific(sTlsKey, NULL);; 19907 return NULL;; 19908 }; 19909 ; 19910 /* Add a table with parameters into mg.params */; 19911 sparams = ctx->dd.config[LUA_BACKGROUND_SCRIPT_PARAMS];; 19912 if (sparams && sparams[0]) {; 19913 lu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:594133,load,load,594133,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['load'],['load']
Performance," 19856 /* Document root */; 19857#if defined(NO_FILES); 19858 if (ctx->dd.config[DOCUMENT_ROOT] != NULL) {; 19859 mg_cry_ctx_internal(ctx, ""%s"", ""Document root must not be set"");; 19860 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19861 mg_snprintf(NULL,; 19862 NULL, /* No truncation check for error buffers */; 19863 error->text,; 19864 error->text_buffer_size,; 19865 ""Invalid configuration option value: %s"",; 19866 config_options[DOCUMENT_ROOT].name);; 19867 }; 19868 free_context(ctx);; 19869 pthread_setspecific(sTlsKey, NULL);; 19870 return NULL;; 19871 }; 19872#endif; 19873 ; 19874 get_system_name(&ctx->systemName);; 19875 ; 19876#if defined(USE_LUA); 19877 /* If a Lua background script has been configured, start it. */; 19878 ctx->lua_bg_log_available = 0;; 19879 if (ctx->dd.config[LUA_BACKGROUND_SCRIPT] != NULL) {; 19880 char ebuf[256];; 19881 struct vec opt_vec;; 19882 struct vec eq_vec;; 19883 const char *sparams;; 19884 ; 19885 memset(ebuf, 0, sizeof(ebuf));; 19886 pthread_mutex_lock(&ctx->lua_bg_mutex);; 19887 ; 19888 /* Create a Lua state, load all standard libraries and the mg table */; 19889 lua_State *state = mg_lua_context_script_prepare(; 19890 ctx->dd.config[LUA_BACKGROUND_SCRIPT], ctx, ebuf, sizeof(ebuf));; 19891 if (!state) {; 19892 mg_cry_ctx_internal(ctx,; 19893 ""lua_background_script load error: %s"",; 19894 ebuf);; 19895 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19896 mg_snprintf(NULL,; 19897 NULL, /* No truncation check for error buffers */; 19898 error->text,; 19899 error->text_buffer_size,; 19900 ""Error in script %s: %s"",; 19901 config_options[LUA_BACKGROUND_SCRIPT].name,; 19902 ebuf);; 19903 }; 19904 pthread_mutex_unlock(&ctx->lua_bg_mutex);; 19905 ; 19906 free_context(ctx);; 19907 pthread_setspecific(sTlsKey, NULL);; 19908 return NULL;; 19909 }; 19910 ; 19911 /* Add a table with parameters into mg.params */; 19912 sparams = ctx->dd.config[LUA_BACKGROUND_SCRIPT_PARAMS];; 19913 if (sparams && sparams[0]) {; 19914 lu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:594166,load,load,594166,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['load'],['load']
Performance," 2000 values; : <Fill> Class 1 has 1000 events; : <Fill> Class 2 has 1000 events; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_LD.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_FDA_GA.weights.xml␛[0m; : User-defined formula string : ""(0)+(1)*x0+(2)*x1+(3)*x2+(4)*x3""; : TFormula-compatible formula string: ""[0]+[1]*[5]+[2]*[6]+[3]*[7]+[4]*[8]""; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_MLPBNN.weights.xml␛[0m; MLPBNN : Building Network. ; : Initializing weights; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_DNN_CPU.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_SVM.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_BDT.weights.xml␛[0m; : Reading weight file: ␛[0;36mdataset/weights/TMVAClassification_RuleFit.weights.xml␛[0m; Factory : ␛[1mTest all methods␛[0m; Factory : Test method: Cuts for Classification performance; : ; Cuts : [dataset] : Evaluation of Cuts on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.00226 sec ; Factory : Test method: CutsD for Classification performance; : ; CutsD : [dataset] : Evaluation of CutsD on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.00756 sec ; Factory : Test method: Likelihood for Classification performance; : ; Likelihood : [dataset] : Evaluation of Likelihood on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.0108 sec ; Factory : Test method: LikelihoodPCA for Classification performance; : ; LikelihoodPCA : [dataset] : Evaluation of LikelihoodPCA on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.0197 sec ; Factory : Test method: PDERS for Classification performance; : ; PDERS : [dataset] : Evaluation of PDERS on testing sample (10000 events); : Elapsed time for evaluation of 10000 events: 0.937 sec ; Factory : Test method: PDEFoam for Cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:65316,perform,performance,65316,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['perform'],['performance']
Performance," 259/// canvas->Draw(hist)->SetLineColor(RColor::kBlue);; 260/// canvas->Show();; 261/// while (run_loop) {; 262/// pHist->Fill(1);; 263/// canvas->Modified();; 264/// canvas->Update();; 265/// canvas->Run(0.1); // process canvas events; 266/// }; 267///; 268/// canvas->Remove();; 269/// }; 270///; 271/// int main(); 272/// {; 273/// RAxisConfig xaxis(100, -10., 10.);; 274/// auto pHist = std::make_shared<RH1D>(xaxis);; 275/// bool run_loop = true;; 276///; 277/// std::thread thrd(draw_canvas, run_loop, pHist);; 278/// std::this_thread::sleep_for(std::chrono::seconds(100));; 279/// run_loop = false;; 280/// thrd.join();; 281/// return 0;; 282/// }; 283/// ~~~; 284 ; 285void ROOT::Experimental::RCanvas::Run(double tm); 286{; 287 if (fPainter) {; 288 fPainter->Run(tm);; 289 } else if (tm>0) {; 290 std::this_thread::sleep_for(std::chrono::milliseconds(int(tm*1000)));; 291 }; 292}; 293 ; 294//////////////////////////////////////////////////////////////////////////; 295/// To resolve problem with storing of shared pointers; 296/// Call this method when reading canvas from the file; 297/// Can be called many times - after reinitialization of shared pointers no changes will be performed; 298 ; 299void ROOT::Experimental::RCanvas::ResolveSharedPtrs(); 300{; 301 Internal::RIOSharedVector_t vect;; 302 ; 303 CollectShared(vect);; 304 ; 305 for (unsigned n = 0; n < vect.size(); ++n) {; 306 if (vect[n]->HasShared() || !vect[n]->GetIOPtr()) continue;; 307 ; 308 auto shrd_ptr = vect[n]->MakeShared();; 309 ; 310 for (auto n2 = n+1; n2 < vect.size(); ++n2) {; 311 if (vect[n2]->GetIOPtr() == vect[n]->GetIOPtr()) {; 312 if (vect[n2]->HasShared()); 313 R__LOG_ERROR(GPadLog()) << ""FATAL Shared pointer for same IO ptr already exists"";; 314 else; 315 vect[n2]->SetShared(shrd_ptr);; 316 }; 317 }; 318 ; 319 }; 320}; 321 ; 322 ; 323/////////////////////////////////////////////////////////////////////////////////////////////////; 324/// Apply attributes changes to the drawable; 325/// Return m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RCanvas_8cxx_source.html:9867,perform,performed,9867,doc/master/RCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RCanvas_8cxx_source.html,1,['perform'],['performed']
Performance," 275{; 276 return (Window_t)gdk_window_get_parent((GdkWindow *) id);; 277}; 278 ; 279////////////////////////////////////////////////////////////////////////////////; 280/// Convert the keycode from the event structure to a key symbol (according; 281/// to the modifiers specified in the event structure and the current; 282/// keyboard mapping). In buf a null terminated ASCII string is returned; 283/// representing the string that is currently mapped to the key code.; 284 ; 285void TGWin32VirtualXProxy::LookupString(Event_t * event, char *buf, Int_t buflen,; 286 UInt_t & keysym); 287{; 288 DEBUG_PROFILE_PROXY_START(LookupString); 289 fgRealObject->LookupString(event,buf,buflen,keysym);; 290 DEBUG_PROFILE_PROXY_STOP(LookupString); 291}; 292 ; 293////////////////////////////////////////////////////////////////////////////////; 294/// Return number of pending events.; 295 ; 296Int_t TGWin32VirtualXProxy::EventsPending(); 297{ ; 298 return fgRealObject->EventsPending();; 299}; 300 ; 301////////////////////////////////////////////////////////////////////////////////; 302/// Process next event in the queue - if any.; 303 ; 304void TGWin32VirtualXProxy::NextEvent(Event_t & event); 305{; 306 fgRealObject->NextEvent(event);; 307}; 308 ; 309////////////////////////////////////////////////////////////////////////////////; 310/// Check if there is for window ""id"" an event of type ""type"".; 311 ; 312Bool_t TGWin32VirtualXProxy::CheckEvent(Window_t id, EGEventType type, Event_t &ev); 313{; 314 return fgRealObject->CheckEvent(id,type,ev);; 315}; 316 ; 317////////////////////////////////////////////////////////////////////////////////; 318/// Send event ev to window id.; 319 ; 320void TGWin32VirtualXProxy::SendEvent(Window_t id, Event_t *ev); 321{; 322 fgRealObject->SendEvent(id,ev);; 323}; 324 ; 325////////////////////////////////////////////////////////////////////////////////; 326/// Return kTRUE if we are inside cmd/server thread.; 327 ; 328Bool_t TGWin32VirtualXProxy::IsCmdThread",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx_source.html:20379,queue,queue,20379,doc/master/TGWin32VirtualXProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx_source.html,1,['queue'],['queue']
Performance," 292 SetSamples(std::vector<const Double_t*>(1, sample), std::vector<size_t>(1, sampleSize));; 293 }; 294 ; 295 Double_t GoFTest::GaussianCDF(Double_t x) const {; 296 return ROOT::Math::normal_cdf(x, fParams[1], fParams[0]);; 297 }; 298 ; 299 Double_t GoFTest::ExponentialCDF(Double_t x) const {; 300 return ROOT::Math::exponential_cdf(x, fParams[0]);; 301 }; 302 ; 303 void GoFTest::LogSample() {; 304 transform(fSamples[0].begin(), fSamples[0].end(), fSamples[0].begin(),; 305 std::function<Double_t(Double_t)>(TMath::Log));; 306 }; 307 ; 308/* ; 309 Taken from (1); 310*/ ; 311 Double_t GoFTest::GetSigmaN(const std::vector<size_t> & ns, size_t N) {; 312 // compute moments of AD distribution (from Scholz-Stephen paper, paragraph 3); 313 ; 314 Double_t sigmaN = 0.0, h = 0.0, H = 0.0, g = 0.0, a, b, c, d, k = ns.size();; 315 ; 316 for (size_t i = 0; i < ns.size(); ++i) {; 317 H += 1.0 / double( ns[i] );; 318 }; 319 ; 320 // use approximate formulas for large N; 321 // cache Sum( 1 / i); 322 if (N < 2000) { ; 323 std::vector<double> invI(N); ; 324 for (size_t i = 1; i <= N - 1; ++i) {; 325 invI[i] = 1.0 / i; ; 326 h += invI[i]; ; 327 }; 328 for (size_t i = 1; i <= N - 2; ++i) {; 329 double tmp = invI[N-i];; 330 for (size_t j = i + 1; j <= N - 1; ++j) {; 331 g += tmp * invI[j];; 332 }; 333 }; 334 }; 335 else {; 336 // for N larger than 2000 error difference in g is ~ 5 10^-3 while in h is at the level of 10^-5; 337 const double emc = 0.5772156649015328606065120900824024; // Euler-Mascheroni constant; 338 h = std::log(double(N-1) ) + emc;; 339 g = (M_PI)*(M_PI)/6.0;; 340 }; 341 double k2 = std::pow(k,2);; 342 a = (4 * g - 6) * k + (10 - 6 * g) * H - 4 * g + 6;; 343 b = (2 * g - 4) * k2 + 8 * h * k + (2 * g - 14 * h - 4) * H - 8 * h + 4 * g - 6;; 344 c = (6 * h + 2 * g - 2) * k2 + (4 * h - 4 *g + 6) * k + (2 * h - 6) * H + 4 * h;; 345 d = (2 * h + 6) * k2 - 4 * h * k;; 346 sigmaN += a * std::pow(double(N),3) + b * std::pow(double(N),2) + c * N + d;; 347 sigmaN /= ( double(N - ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:10825,cache,cache,10825,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,1,['cache'],['cache']
Performance," 3) option allowing to choose between the global fgFFT and a new TVirtualFFT object; """" - default, changes and returns the global fgFFT variable; ""K"" (from ""keep"")- without touching the global fgFFT,; creates and returns a new TVirtualFFT*. User is then responsible for deleting it.; Examples of valid options: ""R2C ES K"", ""C2CF M"", ""DHT P K"", etc. TVirtualFFT* SineCosine(Int_t ndim, Int_t* n, Int_t* r2rkind, Option_t* option); Returns a pointer to a sine or cosine transform of requested size and kind. Parameters:; -ndim : number of transform dimensions; -n : sizes of each dimension (an array at least ndim long); -r2rkind : transform kind for each dimension; 4 different kinds of sine and cosine transforms are available; DCT-I - kind=0; DCT-II - kind=1; DCT-III - kind=2; DCT-IV - kind=3; DST-I - kind=4; DST-II - kind=5; DST-III - kind=6; DST-IV - kind=7; -option : consists of 2 parts - flag option and an option to create a new TVirtualFFT; - flag option: choosing how much time should be spent in planning the transform:; Possible options:; ""ES"" (from ""estimate"") - no time in preparing the transform,; but probably sub-optimal performance; ""M"" (from ""measure"") - some time spend in finding the optimal way; to do the transform; ""P"" (from ""patient"") - more time spend in finding the optimal way; to do the transform; ""EX"" (from ""exhaustive"") - the most optimal way is found; This option should be chosen depending on how many transforms of the; same size and type are going to be done.; Planning is only done once, for the first transform of this size and type.; - option allowing to choose between the global fgFFT and a new TVirtualFFT object; """" - default, changes and returns the global fgFFT variable; ""K"" (from ""keep"")- without touching the global fgFFT,; creates and returns a new TVirtualFFT*. User is then responsible for deleting it.; Examples of valid options: ""ES K"", ""EX"", etc. TVirtualFFT* GetCurrentTransform(); static: return current fgFFT. void SetTransform(TVirtualFFT* ff",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualFFT.html:11804,perform,performance,11804,root/html528/TVirtualFFT.html,https://root.cern,https://root.cern/root/html528/TVirtualFFT.html,6,['perform'],['performance']
Performance," 30 // combination with a RotationX; 31 Quaternion q(rx);; 32 return Quaternion (; 33 U()*q.U() - I()*q.I(); 34 , I()*q.U() + U()*q.I(); 35 , J()*q.U() + K()*q.I(); 36 , K()*q.U() - J()*q.I(); 37 );; 38}; 39 ; 40Quaternion Quaternion::operator * (const RotationY & ry) const {; 41 // combination with a RotationY; 42 Quaternion q(ry);; 43 return Quaternion (; 44 U()*q.U() - J()*q.J(); 45 , I()*q.U() - K()*q.J(); 46 , J()*q.U() + U()*q.J(); 47 , K()*q.U() + I()*q.J(); 48 );; 49}; 50 ; 51Quaternion Quaternion::operator * (const RotationZ & rz) const {; 52 // combination with a RotationZ; 53 Quaternion q(rz);; 54 return Quaternion (; 55 U()*q.U() - K()*q.K(); 56 , I()*q.U() + J()*q.K(); 57 , J()*q.U() - I()*q.K(); 58 , K()*q.U() + U()*q.K(); 59 );; 60}; 61 ; 62Quaternion; 63operator * ( RotationX const & r, Quaternion const & q ) {; 64 return Quaternion(r) * q; // TODO: improve performance; 65}; 66 ; 67Quaternion; 68operator * ( RotationY const & r, Quaternion const & q ) {; 69 return Quaternion(r) * q; // TODO: improve performance; 70}; 71 ; 72Quaternion; 73operator * ( RotationZ const & r, Quaternion const & q ) {; 74 return Quaternion(r) * q; // TODO: improve performance; 75}; 76 ; 77 ; 78} //namespace Math; 79} //namespace ROOT; Quaternion.h; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; qfloat * qDefinition THbookFile.cxx:89; ROOT::Math::QuaternionRotation class with the (3D) rotation represented by a unit quaternion (u, i, j, k).Definition Quaternion.h:49; ROOT::Math::Quaternion::QuaternionQuaternion()Default constructor (identity rotation)Definition Quaternion.h:60; ROOT::Math::Quaternion::UScalar U() constAccess to the four quaternion components: U() is the coefficient of the identity Pauli matrix,...Definition Quaternion.h:167; ROOT::Math::Quaternion::operator*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/QuaternionXaxial_8cxx_source.html:1973,perform,performance,1973,doc/master/QuaternionXaxial_8cxx_source.html,https://root.cern,https://root.cern/doc/master/QuaternionXaxial_8cxx_source.html,3,['perform'],['performance']
Performance," 304 // Re-compute bounding box of mother(s) if needed; 305 for (i = fLevel - 1; i > 0; i--) {; 306 Bool_t dassm = vd->IsAssembly(); // is daughter assembly ?; 307 vd = GetVolume(i);; 308 if (!vd); 309 break;; 310 Bool_t cassm = vd->IsAssembly(); // is current assembly ?; 311 if (cassm); 312 ((TGeoShapeAssembly *)vd->GetShape())->NeedsBBoxRecompute();; 313 if ((cassm || dassm) && vd->GetVoxels()); 314 vd->GetVoxels()->SetNeedRebuild();; 315 if (!cassm); 316 break;; 317 }; 318 ; 319 // Now we have to re-voxelize the mother volume; 320 TGeoVoxelFinder *voxels = vm->GetVoxels();; 321 if (voxels); 322 voxels->SetNeedRebuild();; 323 // Eventually check for overlaps; 324 if (check) {; 325 if (voxels) {; 326 voxels->Voxelize();; 327 vm->FindOverlaps();; 328 }; 329 // Set aligned node to be checked; 330 i = fLevel;; 331 node = GetNode(i);; 332 if (!node); 333 return kTRUE;; 334 if (node->IsOverlapping()) {; 335 Info(""Align"",; 336 ""The check for overlaps for node: \n%s\n cannot be performed since the node is declared possibly ""; 337 ""overlapping"",; 338 GetName());; 339 } else {; 340 gGeoManager->SetCheckedNode(node);; 341 // Check overlaps for the first non-assembly parent node; 342 while ((node = GetNode(--i))) {; 343 if (!node->GetVolume()->IsAssembly()); 344 break;; 345 }; 346 if (node && node->IsOverlapping()) {; 347 Info(""Align"",; 348 ""The check for overlaps for assembly node: \n%s\n cannot be performed since the parent %s is declared ""; 349 ""possibly overlapping"",; 350 GetName(), node->GetName());; 351 node = nullptr;; 352 }; 353 if (node); 354 node->CheckOverlaps(ovlp);; 355 gGeoManager->SetCheckedNode(nullptr);; 356 }; 357 }; 358 // Clean current matrices from cache; 359 gGeoManager->CdTop();; 360 SetAligned(kTRUE);; 361 return kTRUE;; 362}; 363 ; 364////////////////////////////////////////////////////////////////////////////////; 365 ; 366void TGeoPhysicalNode::cd() const; 367{; 368 if (GetNode(0) != gGeoManager->GetTopNode()); 369 return;; 370 gGeoManager->cd(fName.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPhysicalNode_8cxx_source.html:12145,perform,performed,12145,doc/master/TGeoPhysicalNode_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPhysicalNode_8cxx_source.html,2,"['cache', 'perform']","['cache', 'performed']"
Performance," 3115 }; 3116 loadedcl = LoadClassDefault(normalizedName.c_str(),silent);; 3117 }; 3118 auto e = TEnum::GetEnum(normalizedName.c_str(), TEnum::kNone);; 3119 if (e); 3120 return nullptr;; 3121 // Maybe this was a typedef: let's try to see if this is the case; 3122 if (!loadedcl && !ispair && !ispairbase) {; 3123 if (TDataType* theDataType = gROOT->GetType(normalizedName.c_str())){; 3124 // We have a typedef: we get the name of the underlying type; 3125 auto underlyingTypeName = theDataType->GetTypeName();; 3126 // We see if we can bootstrap a class with it; 3127 auto underlyingTypeDict = TClassTable::GetDictNorm(underlyingTypeName.Data());; 3128 if (underlyingTypeDict){; 3129 loadedcl = underlyingTypeDict();; 3130 }; 3131 ; 3132 }; 3133 }; 3134 }; 3135 if (loadedcl) return loadedcl;; 3136 ; 3137 // See if the TClassGenerator can produce the TClass we need.; 3138 loadedcl = LoadClassCustom(normalizedName.c_str(),silent);; 3139 if (loadedcl) return loadedcl;; 3140 ; 3141 // We have not been able to find a loaded TClass, return the Emulated; 3142 // TClass if we have one.; 3143 if (cl) return cl;; 3144 ; 3145 if (ispair) {; 3146 if (hint_pair_offset && hint_pair_size) {; 3147 auto pairinfo = TVirtualStreamerInfo::Factory()->GenerateInfoForPair(normalizedName, silent, hint_pair_offset, hint_pair_size);; 3148 // Fall-through to allow TClass to be created when known by the interpreter; 3149 // This is used in the case where TStreamerInfo can not handle them.; 3150 if (pairinfo); 3151 return pairinfo->GetClass();; 3152 } else {; 3153 // Check if we have an STL container that might provide it.; 3154 static const size_t slen = strlen(""pair"");; 3155 static const char *associativeContainer[] = { ""map"", ""unordered_map"", ""multimap"",; 3156 ""unordered_multimap"", ""set"", ""unordered_set"", ""multiset"", ""unordered_multiset"" };; 3157 for(auto contname : associativeContainer) {; 3158 std::string collname = contname;; 3159 collname.append( normalizedName.c_str() + slen );; 3160 TClass *coll",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:119051,load,loadedcl,119051,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,3,['load'],"['loaded', 'loadedcl']"
Performance," 3182 }; 3183 loadedcl = LoadClassDefault(normalizedName.c_str(),silent);; 3184 }; 3185 auto e = TEnum::GetEnum(normalizedName.c_str(), TEnum::kNone);; 3186 if (e); 3187 return nullptr;; 3188 // Maybe this was a typedef: let's try to see if this is the case; 3189 if (!loadedcl && !ispair && !ispairbase) {; 3190 if (TDataType* theDataType = gROOT->GetType(normalizedName.c_str())){; 3191 // We have a typedef: we get the name of the underlying type; 3192 auto underlyingTypeName = theDataType->GetTypeName();; 3193 // We see if we can bootstrap a class with it; 3194 auto underlyingTypeDict = TClassTable::GetDictNorm(underlyingTypeName.Data());; 3195 if (underlyingTypeDict){; 3196 loadedcl = underlyingTypeDict();; 3197 }; 3198 ; 3199 }; 3200 }; 3201 }; 3202 if (loadedcl) return loadedcl;; 3203 ; 3204 // See if the TClassGenerator can produce the TClass we need.; 3205 loadedcl = LoadClassCustom(normalizedName.c_str(),silent);; 3206 if (loadedcl) return loadedcl;; 3207 ; 3208 // We have not been able to find a loaded TClass, return the Emulated; 3209 // TClass if we have one.; 3210 if (cl) return cl;; 3211 ; 3212 if (ispair) {; 3213 if (hint_pair_offset && hint_pair_size) {; 3214 auto pairinfo = TVirtualStreamerInfo::Factory()->GenerateInfoForPair(normalizedName, silent, hint_pair_offset, hint_pair_size);; 3215 // Fall-through to allow TClass to be created when known by the interpreter; 3216 // This is used in the case where TStreamerInfo can not handle them.; 3217 if (pairinfo); 3218 return pairinfo->GetClass();; 3219 } else {; 3220 // Check if we have an STL container that might provide it.; 3221 static const size_t slen = strlen(""pair"");; 3222 static const char *associativeContainer[] = { ""map"", ""unordered_map"", ""multimap"",; 3223 ""unordered_multimap"", ""set"", ""unordered_set"", ""multiset"", ""unordered_multiset"" };; 3224 for(auto contname : associativeContainer) {; 3225 std::string collname = contname;; 3226 collname.append( normalizedName.c_str() + slen );; 3227 TClass *coll",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:121802,load,loadedcl,121802,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,3,['load'],"['loaded', 'loadedcl']"
Performance," 333 ; 334 ; 335 // check if Error option (run Hesse and Minos) then; 336 if (fitOption.Errors) {; 337 // run Hesse and Minos; 338 fitConfig.SetParabErrors(true);; 339 fitConfig.SetMinosErrors(true);; 340 }; 341 ; 342 ; 343 // do fitting; 344 ; 345#ifdef DEBUG; 346 if (fitOption.Like) printf(""do likelihood fit...\n"");; 347 if (linear) printf(""do linear fit...\n"");; 348 printf(""do now fit...\n"");; 349#endif; 350 ; 351 bool fitok = false;; 352 ; 353 ; 354 // check if can use option user; 355 TVirtualFitter::FCNFunc_t userFcn = nullptr;; 356 // option user is enabled only when running in serial mode; 357 if (fitOption.User && TVirtualFitter::GetFitter() ) {; 358 userFcn = (TVirtualFitter::GetFitter())->GetFCN();; 359 (TVirtualFitter::GetFitter())->SetUserFunc(f1);; 360 }; 361 ; 362 ; 363 if (fitOption.User && userFcn) // user provided fit objective function; 364 fitok = fitter->FitFCN( userFcn );; 365 else if (fitOption.Like) {// likelihood fit; 366 // perform a weighted likelihood fit by applying weight correction to errors; 367 bool weight = ((fitOption.Like & 2) == 2);; 368 fitConfig.SetWeightCorrection(weight);; 369 bool extended = ((fitOption.Like & 4 ) != 4 );; 370 //if (!extended) Info(""HFitImpl"",""Do a not -extended binned fit"");; 371 ; 372 // pass fitdata as a shared pointer so ownership is shared with Fitter and FitResult class; 373 fitok = fitter->LikelihoodFit(fitdata, extended, fitOption.ExecPolicy);; 374 }; 375 else{ // standard least square fit; 376 fitok = fitter->Fit(fitdata, fitOption.ExecPolicy);; 377 }; 378 if ( !fitok && !fitOption.Quiet ); 379 Warning(""Fit"",""Abnormal termination of minimization."");; 380 iret |= !fitok;; 381 ; 382 ; 383 const ROOT::Fit::FitResult & fitResult = fitter->Result();; 384 // one could set directly the fit result in TF1; 385 iret = fitResult.Status();; 386 if (!fitResult.IsEmpty() ) {; 387 // set in f1 the result of the fit; 388 f1->SetChisquare(fitResult.Chi2() );; 389 f1->SetNDF(fitResult.Ndf() );; 390 f1->SetNumberFitPo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitImpl_8cxx_source.html:13844,perform,perform,13844,doc/master/HFitImpl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html,1,['perform'],['perform']
Performance," 363 } else if (loader->GetDataSetInfo().GetNClasses() >= 2) {; 364 fAnalysisType = Types::kMulticlass; // if two classes, but not named ""Signal"" and ""Background""; 365 } else; 366 Log() << kFATAL << ""No analysis type for "" << loader->GetDataSetInfo().GetNClasses() << "" classes and ""; 367 << loader->GetDataSetInfo().GetNTargets() << "" regression targets."" << Endl;; 368 }; 369 ; 370 // booking via name; the names are translated into enums and the; 371 // corresponding overloaded BookMethod is called; 372 ; 373 if (fMethodsMap.find(datasetname) != fMethodsMap.end()) {; 374 if (GetMethod(datasetname, methodTitle) != 0) {; 375 Log() << kFATAL << ""Booking failed since method with title <"" << methodTitle << ""> already exists ""; 376 << ""in with DataSet Name <"" << loader->GetName() << ""> "" << Endl;; 377 }; 378 }; 379 ; 380 Log() << kHEADER << ""Booking method: "" << gTools().Color(""bold""); 381 << methodTitle; 382 // << gTools().Color(""reset"")<<"" DataSet Name: ""<<gTools().Color(""bold"")<<loader->GetName(); 383 << gTools().Color(""reset"") << Endl << Endl;; 384 ; 385 // interpret option string with respect to a request for boosting (i.e., BostNum > 0); 386 Int_t boostNum = 0;; 387 TMVA::Configurable *conf = new TMVA::Configurable(theOption);; 388 conf->DeclareOptionRef(boostNum = 0, ""Boost_num"", ""Number of times the classifier will be boosted"");; 389 conf->ParseOptions();; 390 delete conf;; 391 // this is name of weight file directory; 392 TString fileDir;; 393 if (fModelPersistence) {; 394 // find prefix in fWeightFileDir;; 395 TString prefix = gConfig().GetIONames().fWeightFileDirPrefix;; 396 fileDir = prefix;; 397 if (!prefix.IsNull()); 398 if (fileDir[fileDir.Length() - 1] != '/'); 399 fileDir += ""/"";; 400 fileDir += loader->GetName();; 401 fileDir += ""/"" + gConfig().GetIONames().fWeightFileDir;; 402 }; 403 // initialize methods; 404 IMethod *im;; 405 if (!boostNum) {; 406 im = ClassifierFactory::Instance().Create(theMethodName.Data(), fJobName, methodTitle, loader->GetDataSetI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:15322,load,loader,15322,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['load'],['loader']
Performance," 366 ; 367/////////////////////////////////////////////////////////////////////////; 368/// Clear internal objects cache; 369 ; 370void RBrowserData::ClearCache(); 371{; 372 fCache.clear();; 373}; 374 ; 375/////////////////////////////////////////////////////////////////////////; 376/// Remove object from cache; 377/// If nullptr specified - removes no-longer-valid elements; 378/// Returns true if any element was removed; 379 ; 380bool RBrowserData::RemoveFromCache(void *obj); 381{; 382 unsigned pos = 0;; 383 ; 384 bool isany = false;; 385 ; 386 while (pos < fCache.size()) {; 387 if (obj ? !fCache[pos].second->IsObject(obj) : fCache[pos].second->CheckValid()) {; 388 pos++;; 389 continue;; 390 }; 391 ; 392 isany = true;; 393 auto path = fCache[pos].first;; 394 fCache.erase(fCache.begin() + pos);; 395 if (RemoveFromCache(path)); 396 pos = 0; // start scan from the beginning; 397 }; 398 ; 399 return isany;; 400}; 401 ; 402/////////////////////////////////////////////////////////////////////////; 403/// Remove path (and all sub-paths) from cache; 404/// Returns true if any element was removed; 405 ; 406bool RBrowserData::RemoveFromCache(const Browsable::RElementPath_t &path); 407{; 408 if (path.size() == 0); 409 return false;; 410 ; 411 bool isany = false;; 412 unsigned pos = 0;; 413 while (pos < fCache.size()) {; 414 if (Browsable::RElement::ComparePaths(path, fCache[pos].first) == (int) path.size()) {; 415 fCache.erase(fCache.begin() + pos);; 416 isany = true;; 417 } else {; 418 pos++;; 419 }; 420 }; 421 return isany;; 422}; RBrowserData.hxx; RGroup.hxx; RLevelIter.hxx; RLogger.hxx; RProvider.hxx; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; RSysFile.hxx; RWrapper.hxx; _dataRooAbsData * _dataPointer to original input dataset.Definition RooAbsTestStatistic.h:84; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:101; TBufferJSON.h; TEnv.h; gEnvR__EXTERN TEnv * gEnvDefinition TEnv.h:170; TFolder.h; idOption_t Option_t TPoint TPoint ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RBrowserData_8cxx_source.html:12315,cache,cache,12315,doc/v632/RBrowserData_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RBrowserData_8cxx_source.html,1,['cache'],['cache']
Performance," 366 ; 367/////////////////////////////////////////////////////////////////////////; 368/// Clear internal objects cache; 369 ; 370void RBrowserData::ClearCache(); 371{; 372 fCache.clear();; 373}; 374 ; 375/////////////////////////////////////////////////////////////////////////; 376/// Remove object from cache; 377/// If nullptr specified - removes no-longer-valid elements; 378/// Returns true if any element was removed; 379 ; 380bool RBrowserData::RemoveFromCache(void *obj); 381{; 382 unsigned pos = 0;; 383 ; 384 bool isany = false;; 385 ; 386 while (pos < fCache.size()) {; 387 if (obj ? !fCache[pos].second->IsObject(obj) : fCache[pos].second->CheckValid()) {; 388 pos++;; 389 continue;; 390 }; 391 ; 392 isany = true;; 393 auto path = fCache[pos].first;; 394 fCache.erase(fCache.begin() + pos);; 395 if (RemoveFromCache(path)); 396 pos = 0; // start scan from the beginning; 397 }; 398 ; 399 return isany;; 400}; 401 ; 402/////////////////////////////////////////////////////////////////////////; 403/// Remove path (and all sub-paths) from cache; 404/// Returns true if any element was removed; 405 ; 406bool RBrowserData::RemoveFromCache(const Browsable::RElementPath_t &path); 407{; 408 if (path.size() == 0); 409 return false;; 410 ; 411 bool isany = false;; 412 unsigned pos = 0;; 413 while (pos < fCache.size()) {; 414 if (Browsable::RElement::ComparePaths(path, fCache[pos].first) == (int) path.size()) {; 415 fCache.erase(fCache.begin() + pos);; 416 isany = true;; 417 } else {; 418 pos++;; 419 }; 420 }; 421 return isany;; 422}; RBrowserData.hxx; RGroup.hxx; RLevelIter.hxx; RLogger.hxx; RProvider.hxx; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; RSysFile.hxx; RWrapper.hxx; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; TBufferJSON.h; TEnv.h; gEnvR__EXTERN TEnv * gEnvDefinition TEnv.h:170; TFolder.h; idOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RBrowserData_8cxx_source.html:12316,cache,cache,12316,doc/master/RBrowserData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RBrowserData_8cxx_source.html,1,['cache'],['cache']
Performance," 3779 ; 3780 return CreateListOfDataMembers(fData, TDictionary::EMemberSelection::kNoUsingDecls, load);; 3781}; 3782 ; 3783////////////////////////////////////////////////////////////////////////////////; 3784/// Return list containing the TDataMembers of using declarations of a class.; 3785 ; 3786TList *TClass::GetListOfUsingDataMembers(Bool_t load /* = kTRUE */); 3787{; 3788 // Fast path, no lock? Classes load at creation time.; 3789 if ((!load || IsClassStructOrUnion()) && fUsingData); 3790 return fUsingData;; 3791 ; 3792 return CreateListOfDataMembers(fUsingData, TDictionary::EMemberSelection::kOnlyUsingDecls, load);; 3793}; 3794 ; 3795////////////////////////////////////////////////////////////////////////////////; 3796/// Return TListOfFunctionTemplates for a class.; 3797 ; 3798TList *TClass::GetListOfFunctionTemplates(Bool_t load /* = kTRUE */); 3799{; 3800 R__LOCKGUARD(gInterpreterMutex);; 3801 ; 3802 if (!fFuncTemplate) fFuncTemplate = new TListOfFunctionTemplates(this);; 3803 if (load) fFuncTemplate->Load();; 3804 return fFuncTemplate;; 3805}; 3806 ; 3807////////////////////////////////////////////////////////////////////////////////; 3808/// Return list containing the TMethods of a class.; 3809/// If load is true, the list is populated with all the defined function; 3810/// and currently instantiated function template.; 3811 ; 3812TList *TClass::GetListOfMethods(Bool_t load /* = kTRUE */); 3813{; 3814 R__LOCKGUARD(gInterpreterMutex);; 3815 ; 3816 if (!fMethod.load()) GetMethodList();; 3817 if (load) {; 3818 if (gDebug>0) Info(""GetListOfMethods"",""Header Parsing - Asking for all the methods of class %s: this can involve parsing."",GetName());; 3819 (*fMethod).Load();; 3820 }; 3821 return fMethod;; 3822}; 3823 ; 3824////////////////////////////////////////////////////////////////////////////////; 3825/// Return the collection of functions named ""name"".; 3826 ; 3827TCollection *TClass::GetListOfMethodOverloads(const char* name) const; 3828{; 3829 return const_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:143650,load,load,143650,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,2,['load'],['load']
Performance," 3846 ; 3847 return CreateListOfDataMembers(fData, TDictionary::EMemberSelection::kNoUsingDecls, load);; 3848}; 3849 ; 3850////////////////////////////////////////////////////////////////////////////////; 3851/// Return list containing the TDataMembers of using declarations of a class.; 3852 ; 3853TList *TClass::GetListOfUsingDataMembers(Bool_t load /* = kTRUE */); 3854{; 3855 // Fast path, no lock? Classes load at creation time.; 3856 if ((!load || IsClassStructOrUnion()) && fUsingData); 3857 return fUsingData;; 3858 ; 3859 return CreateListOfDataMembers(fUsingData, TDictionary::EMemberSelection::kOnlyUsingDecls, load);; 3860}; 3861 ; 3862////////////////////////////////////////////////////////////////////////////////; 3863/// Return TListOfFunctionTemplates for a class.; 3864 ; 3865TList *TClass::GetListOfFunctionTemplates(Bool_t load /* = kTRUE */); 3866{; 3867 R__LOCKGUARD(gInterpreterMutex);; 3868 ; 3869 if (!fFuncTemplate) fFuncTemplate = new TListOfFunctionTemplates(this);; 3870 if (load) fFuncTemplate->Load();; 3871 return fFuncTemplate;; 3872}; 3873 ; 3874////////////////////////////////////////////////////////////////////////////////; 3875/// Return list containing the TMethods of a class.; 3876/// If load is true, the list is populated with all the defined function; 3877/// and currently instantiated function template.; 3878 ; 3879TList *TClass::GetListOfMethods(Bool_t load /* = kTRUE */); 3880{; 3881 R__LOCKGUARD(gInterpreterMutex);; 3882 ; 3883 if (!fMethod.load()) GetMethodList();; 3884 if (load) {; 3885 if (gDebug>0) Info(""GetListOfMethods"",""Header Parsing - Asking for all the methods of class %s: this can involve parsing."",GetName());; 3886 (*fMethod).Load();; 3887 }; 3888 return fMethod;; 3889}; 3890 ; 3891////////////////////////////////////////////////////////////////////////////////; 3892/// Return the collection of functions named ""name"".; 3893 ; 3894TCollection *TClass::GetListOfMethodOverloads(const char* name) const; 3895{; 3896 return const_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:146401,load,load,146401,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,2,['load'],['load']
Performance," 4 )); , kVisStreamed = (1ULL << ( 5 )); , kVisTouched = (1ULL << ( 6 )); , kVisOnScreen = (1ULL << ( 7 )); , ;   kVisContainers = (1ULL << ( 12 )); , kVisOnly = (1ULL << ( 13 )); , kVisBranch = (1ULL << ( 14 )); , kVisRaytrace = (1ULL << ( 15 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Attributes inherited from TGeoVolume; static TGeoMedium * fgDummyMedium = nullptr;  . #include <TGeoVolume.h>. Inheritance diagram for TGeoVolumeAssembly:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGeoVolumeAssembly() [1/3]. TGeoVolumeAssembly::TGeoVolumeAssembly ; (; const TGeoVolumeAssembly & ; ). privatedelete . Mutex for concurrent operations. . ◆ TGeoVolumeAssembly() [2/3]. TGeoVolumeAssembly::TGeoVolumeAssembly ; (; ). Default constructor. ; Definition at line 2944 of file TGeoVolume.cxx. ◆ TGeoVolumeAssembly() [3/3]. TGeoVolumeAssembly::TGeoVolumeAssembly ; (; const char * ; name). Constructor. ; Just the name has to be provided. Assemblies does not have their own shape or medium. ; Definition at line 2954 of file TGeoVolume.cxx. ◆ ~TGeoVolumeAssembly(). TGeoVolumeAssembly::~TGeoVolumeAssembly ; (; ). override . Destructor. The assembly is owner of its ""shape"". ; Definition at line 2968 of file TGeoVolume.cxx. Member Function Documentation. ◆ AddNode(). TGeoNode * TGeoVolumeAssembly::AddNode ; (; TGeoVolume * ; vol, . Int_t ; copy_no, . TGeoMatrix * ; mat = nullptr, . Option_t * ; option = """" . ). overridevirtual . Add a component to the assembly. ; Reimplemented from TGeoVolume.; Definition at line 2978 of file TGeoVolume.cxx. ◆ AddNodeOverlap(). void TGeoVolumeAssembly::AddNodeOverlap ; (; TGeoVolume * ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolumeAssembly.html:30909,concurren,concurrent,30909,doc/master/classTGeoVolumeAssembly.html,https://root.cern,https://root.cern/doc/master/classTGeoVolumeAssembly.html,1,['concurren'],['concurrent']
Performance," 4.8. Original spectrum before unfolding. Contents of the responses in the original spectrum. Another example where we have used the unfolding method is the decomposition of continuum of gamma-ray spectra. Using simulation and interpolation techniques, we have synthesized the response matrix (size 3400x3400 channels) of Gammasphere spectrometer (Figure 4.9). Its details are presented in Figure 4.10. The original spectrum of Co^56 before and after continuum decomposition are presented in Figures 4.11, 4.12, respectively. Response matrix (size 3400x3400 channels) of Gammasphere spectrometer. Detail of Figure 4.9. Original spectrum of Co56 before continuum decomposition. Original spectrum of Co56 after continuum decomposition. 4.3 2-DIMENSIONAL SPECTRA; We have extended the method of Gold deconvolution also for 2-dimensional data. Again, the goal of the deconvolution methods is to improve the resolution in the spectrum and to decompose multiplets. The method of optimized 2-dimensional deconvolution is described in details in [8].; Mathematical formulation of 2-dimensional convolution system is as follows:; \[ y(i_1,i_2) = \sum_{k_1=0}^{N_1-1}\sum_{k_2=0}^{N_2-1}h(i_1-k_1,i_2-k_2)x(k_1,k_2), i_1=0,1,2,...,N_1-1, i_2=0,1,2,...,N_2-1 \]; Assuming we know the output spectrum y and the response spectrum h, the task is to calculate the matrix x.; The basic function has the form of; char *Deconvolution2(float **source,; const float **resp,; int sizex,; int sizey,; int niter);; This function calculates deconvolution from the source spectrum according to the response spectrum. The result is placed in the matrix pointed by the source pointer.; Function parameters:. source: pointer to the matrix of the source spectrum; resp: pointer to the matrix of the response spectrum; sizex: x length of source and the response spectra; sizey: y length of source and the response spectra; number_of_iterations: see [8] for details. The example of 2-dimensional spectrum before deconvolution is pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html:30909,optimiz,optimized,30909,root/htmldoc/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html,1,['optimiz'],['optimized']
Performance," 406 if (!gClassTable); 407 new TClassTable;; 408 ; 409 std::unique_lock<std::mutex> lock(GetClassTableMutex());; 410 ; 411 // check if already in table, if so return; 412 TClassRec *r = FindElement(cname, kTRUE);; 413 if (r->fName && r->fInfo) {; 414 if ( strcmp(r->fInfo->name(), typeid(ROOT::TForNamespace).name()) ==0; 415 && strcmp(info.name(), typeid(ROOT::TForNamespace).name()) ==0 ) {; 416 // We have a namespace being reloaded.; 417 // This okay we just keep the old one.; 418 return;; 419 }; 420 if (!TClassEdit::IsStdClass(cname)) {; 421 lock.unlock(); // Warning might recursively call TClassTable during gROOT init; 422 // Warn only for class that are not STD classes; 423 ::Warning(""TClassTable::Add"", ""class %s already in TClassTable"", cname);; 424 }; 425 return;; 426 } else if (ROOT::Internal::gROOTLocal && gCling) {; 427 TClass *oldcl = (TClass*)gROOT->GetListOfClasses()->FindObject(cname);; 428 if (oldcl) { // && oldcl->GetClassInfo()) {; 429 // As a work-around to ROOT-6012, we need to register the class even if; 430 // it is not a template instance, because a forward declaration in the header; 431 // files loaded by the current dictionary wil also de-activate the update; 432 // class info mechanism!; 433 ; 434 // The TClass exist and already has a class info, so it must; 435 // correspond to a class template instantiation which the interpreter; 436 // was able to make with the library containing the TClass Init.; 437 // Because it is already known to the interpreter, the update class info; 438 // will not be triggered, we need to force it.; 439 gCling->RegisterTClassUpdate(oldcl, dict);; 440 }; 441 }; 442 ; 443 if (!r->fName); 444 r->fName = StrDup(cname);; 445 r->fId = id;; 446 r->fBits = pragmabits;; 447 r->fDict = dict;; 448 r->fInfo = &info;; 449 ; 450 fgIdMap->Add(info.name(),r);; 451 ; 452 fgSorted = kFALSE;; 453}; 454 ; 455////////////////////////////////////////////////////////////////////////////////; 456/// Add a class to the class table (this is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClassTable_8cxx_source.html:14116,load,loaded,14116,doc/master/TClassTable_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClassTable_8cxx_source.html,2,['load'],['loaded']
Performance," 418 methBoost->SetWeightFileDir(fileDir);; 419 methBoost->SetModelPersistence(fModelPersistence);; 420 methBoost->SetBoostedMethodName(theMethodName); // DSMTEST divided into two lines; 421 methBoost->fDataSetManager = loader->GetDataSetInfo().GetDataSetManager(); // DSMTEST; 422 methBoost->SetFile(fgTargetFile);; 423 methBoost->SetSilentFile(IsSilentFile());; 424 }; 425 ; 426 MethodBase *method = dynamic_cast<MethodBase *>(im);; 427 if (method == 0); 428 return 0; // could not create method; 429 ; 430 // set fDataSetManager if MethodCategory (to enable Category to create datasetinfo objects) // DSMTEST; 431 if (method->GetMethodType() == Types::kCategory) { // DSMTEST; 432 MethodCategory *methCat = (dynamic_cast<MethodCategory *>(im)); // DSMTEST; 433 if (!methCat) { // DSMTEST; 434 Log() << kFATAL << ""Method with type kCategory cannot be casted to MethodCategory. /Factory""; 435 << Endl; // DSMTEST; 436 return nullptr;; 437 }; 438 if (fModelPersistence); 439 methCat->SetWeightFileDir(fileDir);; 440 methCat->SetModelPersistence(fModelPersistence);; 441 methCat->fDataSetManager = loader->GetDataSetInfo().GetDataSetManager(); // DSMTEST; 442 methCat->SetFile(fgTargetFile);; 443 methCat->SetSilentFile(IsSilentFile());; 444 } // DSMTEST; 445 ; 446 if (!method->HasAnalysisType(fAnalysisType, loader->GetDataSetInfo().GetNClasses(),; 447 loader->GetDataSetInfo().GetNTargets())) {; 448 Log() << kWARNING << ""Method "" << method->GetMethodTypeName() << "" is not capable of handling "";; 449 if (fAnalysisType == Types::kRegression) {; 450 Log() << ""regression with "" << loader->GetDataSetInfo().GetNTargets() << "" targets."" << Endl;; 451 } else if (fAnalysisType == Types::kMulticlass) {; 452 Log() << ""multiclass classification with "" << loader->GetDataSetInfo().GetNClasses() << "" classes."" << Endl;; 453 } else {; 454 Log() << ""classification with "" << loader->GetDataSetInfo().GetNClasses() << "" classes."" << Endl;; 455 }; 456 return 0;; 457 }; 458 ; 459 if (fModelPersistence); 460 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:18081,load,loader,18081,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['load'],['loader']
Performance," 425 ; 426//---- ClassDefT macros for templates with two template arguments --------------; 427// ClassDef2T2 goes in the same header as ClassDefT but must be; 428// outside the class scope; 429// ClassImp2T corresponds to ClassImpT; 430 ; 431#define ClassDef2T2(name,Tmpl1,Tmpl2); 432#define ClassImp2T(name,Tmpl1,Tmpl2) templateClassImp(name); 433 ; 434 ; 435//---- ClassDefT macros for templates with three template arguments ------------; 436// ClassDef3T2 goes in the same header as ClassDefT but must be; 437// outside the class scope; 438// ClassImp3T corresponds to ClassImpT; 439 ; 440#define ClassDef3T2(name,Tmpl1,Tmpl2,Tmpl3); 441#define ClassImp3T(name,Tmpl1,Tmpl2,Tmpl3) templateClassImp(name); 442 ; 443 ; 444//---- Macro to set the class version of non instrumented classes --------------; 445 ; 446#define RootClassVersion(name,VersionNumber) \; 447namespace ROOT { /** \cond HIDDEN_SYMBOLS */ \; 448 TGenericClassInfo *GenerateInitInstance(const name*); /** \endcond */ \; 449 /** \cond HIDDEN_SYMBOLS */ \; 450 static Short_t _R__UNIQUE_(R__dummyVersionNumber) = \; 451 GenerateInitInstance((name*)0x0)->SetVersion(VersionNumber); \; 452 /** \endcond */ \; 453 R__UseDummy(_R__UNIQUE_(R__dummyVersionNumber)); \; 454}; 455 ; 456#define RootStreamer(name,STREAMER) \; 457namespace ROOT { \; 458 /** \cond HIDDEN_SYMBOLS */ \; 459 TGenericClassInfo *GenerateInitInstance(const name*); /** \endcond */ \; 460 /** \cond HIDDEN_SYMBOLS */ \; 461 static Short_t _R__UNIQUE_(R__dummyStreamer) = \; 462 GenerateInitInstance((name*)0x0)->SetStreamer(STREAMER); \; 463 /** \endcond */ \; 464 R__UseDummy(_R__UNIQUE_(R__dummyStreamer)); \; 465}; 466 ; 467//---- Macro to load a library into the interpreter --------------; 468// Call as R__LOAD_LIBRARY(libEvent); 469// This macro intentionally does not take string as argument, to; 470// prevent compilation errors with complex diagnostics due to; 471// TString BAD_DO_NOT_TRY = ""lib"";; 472// R__LOAD_LIBRARY(BAD_DO_NOT_TRY + ""BAD_DO_NOT_TRY.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/Rtypes_8h_source.html:19802,load,load,19802,doc/v632/Rtypes_8h_source.html,https://root.cern,https://root.cern/doc/v632/Rtypes_8h_source.html,1,['load'],['load']
Performance," 430 ; 431//---- ClassDefT macros for templates with two template arguments --------------; 432// ClassDef2T2 goes in the same header as ClassDefT but must be; 433// outside the class scope; 434// ClassImp2T corresponds to ClassImpT; 435 ; 436#define ClassDef2T2(name,Tmpl1,Tmpl2); 437#define ClassImp2T(name,Tmpl1,Tmpl2) templateClassImp(name); 438 ; 439 ; 440//---- ClassDefT macros for templates with three template arguments ------------; 441// ClassDef3T2 goes in the same header as ClassDefT but must be; 442// outside the class scope; 443// ClassImp3T corresponds to ClassImpT; 444 ; 445#define ClassDef3T2(name,Tmpl1,Tmpl2,Tmpl3); 446#define ClassImp3T(name,Tmpl1,Tmpl2,Tmpl3) templateClassImp(name); 447 ; 448 ; 449//---- Macro to set the class version of non instrumented classes --------------; 450 ; 451#define RootClassVersion(name,VersionNumber) \; 452namespace ROOT { /** \cond HIDDEN_SYMBOLS */ \; 453 TGenericClassInfo *GenerateInitInstance(const name*); /** \endcond */ \; 454 /** \cond HIDDEN_SYMBOLS */ \; 455 static Short_t _R__UNIQUE_(R__dummyVersionNumber) = \; 456 GenerateInitInstance((name*)0x0)->SetVersion(VersionNumber); \; 457 /** \endcond */ \; 458 R__UseDummy(_R__UNIQUE_(R__dummyVersionNumber)); \; 459}; 460 ; 461#define RootStreamer(name,STREAMER) \; 462namespace ROOT { \; 463 /** \cond HIDDEN_SYMBOLS */ \; 464 TGenericClassInfo *GenerateInitInstance(const name*); /** \endcond */ \; 465 /** \cond HIDDEN_SYMBOLS */ \; 466 static Short_t _R__UNIQUE_(R__dummyStreamer) = \; 467 GenerateInitInstance((name*)0x0)->SetStreamer(STREAMER); \; 468 /** \endcond */ \; 469 R__UseDummy(_R__UNIQUE_(R__dummyStreamer)); \; 470}; 471 ; 472//---- Macro to load a library into the interpreter --------------; 473// Call as R__LOAD_LIBRARY(libEvent); 474// This macro intentionally does not take string as argument, to; 475// prevent compilation errors with complex diagnostics due to; 476// TString BAD_DO_NOT_TRY = ""lib"";; 477// R__LOAD_LIBRARY(BAD_DO_NOT_TRY + ""BAD_DO_NOT_TRY.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Rtypes_8h_source.html:20223,load,load,20223,doc/master/Rtypes_8h_source.html,https://root.cern,https://root.cern/doc/master/Rtypes_8h_source.html,1,['load'],['load']
Performance," 4382/// tree.Draw("">>+yplus"",""y>0""); 4383/// ~~~; 4384/// will not reset yplus, but will enter the selected entries at the end; 4385/// of the existing list.; 4386///; 4387/// ### Using a TEventList, TEntryList or TEntryListArray as Input; 4388///; 4389/// Once a TEventList or a TEntryList object has been generated, it can be used as input; 4390/// for TTree::Draw. Use TTree::SetEventList or TTree::SetEntryList to set the; 4391/// current event list; 4392///; 4393/// Example 1:; 4394/// ~~~ {.cpp}; 4395/// TEventList *elist = (TEventList*)gDirectory->Get(""yplus"");; 4396/// tree->SetEventList(elist);; 4397/// tree->Draw(""py"");; 4398/// ~~~; 4399/// Example 2:; 4400/// ~~~ {.cpp}; 4401/// TEntryList *elist = (TEntryList*)gDirectory->Get(""yplus"");; 4402/// tree->SetEntryList(elist);; 4403/// tree->Draw(""py"");; 4404/// ~~~; 4405/// If a TEventList object is used as input, a new TEntryList object is created; 4406/// inside the SetEventList function. In case of a TChain, all tree headers are loaded; 4407/// for this transformation. This new object is owned by the chain and is deleted; 4408/// with it, unless the user extracts it by calling GetEntryList() function.; 4409/// See also comments to SetEventList() function of TTree and TChain.; 4410///; 4411/// If arrays are used in the selection criteria and TEntryListArray is not used,; 4412/// all the entries that have at least one element of the array that satisfy the selection; 4413/// are entered in the list.; 4414///; 4415/// Example:; 4416/// ~~~ {.cpp}; 4417/// tree.Draw("">>pyplus"",""fTracks.fPy>0"");; 4418/// tree->SetEventList(pyplus);; 4419/// tree->Draw(""fTracks.fPy"");; 4420/// ~~~; 4421/// will draw the fPy of ALL tracks in event with at least one track with; 4422/// a positive fPy.; 4423///; 4424/// To select only the elements that did match the original selection; 4425/// use TEventList::SetReapplyCut or TEntryList::SetReapplyCut.; 4426///; 4427/// Example:; 4428/// ~~~ {.cpp}; 4429/// tree.Draw("">>pyplus"",""fTrack",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:178034,load,loaded,178034,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['load'],['loaded']
Performance," 4649 Int_t loc = -1;; 4650 while( TObjString *s = (TObjString*)s_iter() ) {; 4651 for(Int_t i = fElements->GetLast(); i >= 0 && (i+1) >= loc; --i) {; 4652 if (s->String() == fElements->UncheckedAt(i)->GetName()) {; 4653 if (loc == -1 || (i+1)>loc) {; 4654 loc = i+1;; 4655 }; 4656 }; 4657 }; 4658 }; 4659 if (loc == -1) {; 4660 // Verify if the last one is not 'skipped'.; 4661 for(Int_t i = fElements->GetLast(); i >= 0 && (i+1) >= loc; --i) {; 4662 if (((TStreamerElement *)fElements->UncheckedAt(i))->GetNewType() !=; 4663 TVirtualStreamerInfo::kUnsupportedConversion) {; 4664 break;; 4665 }; 4666 loc = i;; 4667 }; 4668 }; 4669 if (loc == -1) {; 4670 for(auto &el : toAdd) {; 4671 fElements->Add(el);; 4672 }; 4673 } else {; 4674 R__TObjArray_InsertAt(fElements, toAdd, loc);; 4675 }; 4676 } // None of the target of the rule are on file.; 4677}; 4678 ; 4679////////////////////////////////////////////////////////////////////////////////; 4680/// List the TStreamerElement list and also the precomputed tables; 4681/// if option contains the string ""incOrig"", also prints the original; 4682/// (non-optimized elements in the list of compiled elements.; 4683 ; 4684void TStreamerInfo::ls(Option_t *option) const; 4685{; 4686 if (fClass && (fName != fClass->GetName())) {; 4687 if (fClass->IsVersioned()) {; 4688 Printf(""\nStreamerInfo for conversion to %s from: %s, version=%d, checksum=0x%x"",fClass->GetName(),GetName(),fClassVersion,GetCheckSum());; 4689 } else {; 4690 Printf(""\nStreamerInfo for conversion to %s from: %s, checksum=0x%x"",fClass->GetName(),GetName(),GetCheckSum());; 4691 }; 4692 } else {; 4693 if (!fClass || fClass->IsVersioned()) {; 4694 Printf(""\nStreamerInfo for class: %s, version=%d, checksum=0x%x"",GetName(),fClassVersion,GetCheckSum());; 4695 } else {; 4696 Printf(""\nStreamerInfo for class: %s, checksum=0x%x"",GetName(),GetCheckSum());; 4697 }; 4698 }; 4699 ; 4700 if (fElements) {; 4701 TIter next(fElements);; 4702 TObject *obj;; 4703 while ((obj = next())); 4704 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:188905,optimiz,optimized,188905,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['optimiz'],['optimized']
Performance," 4705#elif defined(R__MACOSX); 4706 cmd.Form(""perl -e 'my $cachepath = \""%s\""; my $cachesize = %lld;my $findcommand=\""find $cachepath -type f -exec stat -f \\\""\\%%a::\\%%N::\\%%z\\\"" \\{\\} \\\\\\;\"";my $totalsize=0;open FIND, \""$findcommand | sort -k 1 |\"";while (<FIND>) { my ($accesstime, $filename, $filesize) = split \""::\"",$_; $totalsize += $filesize;if ($totalsize > $cachesize) {if ( ( -e \""${filename}.ROOT.cachefile\"" ) || ( -e \""${filename}\"" ) ) {unlink \""$filename.ROOT.cachefile\"";unlink \""$filename\"";}}}close FIND;' "", fgCacheFileDir.Data(),shrinksize);; 4707#else; 4708 cmd.Form(""perl -e 'my $cachepath = \""%s\""; my $cachesize = %lld;my $findcommand=\""find $cachepath -type f -exec stat -c \\\""\\%%x::\\%%n::\\%%s\\\"" \\{\\} \\\\\\;\"";my $totalsize=0;open FIND, \""$findcommand | sort -k 1 |\"";while (<FIND>) { my ($accesstime, $filename, $filesize) = split \""::\"",$_; $totalsize += $filesize;if ($totalsize > $cachesize) {if ( ( -e \""${filename}.ROOT.cachefile\"" ) || ( -e \""${filename}\"" ) ) {unlink \""$filename.ROOT.cachefile\"";unlink \""$filename\"";}}}close FIND;' "", fgCacheFileDir.Data(),shrinksize);; 4709#endif; 4710 ; 4711 tagfile->WriteBuffer(cmd, 4096);; 4712 delete tagfile;; 4713 ; 4714 if ((gSystem->Exec(cmd)) != 0) {; 4715 ::Error(""TFile::ShrinkCacheFileDir"", ""error executing clean-up script"");; 4716 return kFALSE;; 4717 }; 4718 ; 4719 return kTRUE;; 4720}; 4721 ; 4722////////////////////////////////////////////////////////////////////////////////; 4723/// Sets open timeout time (in ms). Returns previous timeout value.; 4724 ; 4725UInt_t TFile::SetOpenTimeout(UInt_t timeout); 4726{; 4727 UInt_t to = fgOpenTimeout;; 4728 fgOpenTimeout = timeout;; 4729 return to;; 4730}; 4731 ; 4732////////////////////////////////////////////////////////////////////////////////; 4733/// Returns open timeout (in ms).; 4734 ; 4735UInt_t TFile::GetOpenTimeout(); 4736{; 4737 return fgOpenTimeout;; 4738}; 4739 ; 4740//////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:173044,cache,cachefile,173044,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['cache'],['cachefile']
Performance," 480 case kLong_t: return 'G';; 481 case kULong_t: return 'g';; 482 case kchar: return 0; // unsupported; 483 case kLong64_t: return 'L';; 484 case kULong64_t: return 'l';; 485 ; 486 case kCharStar: return 'C';; 487 case kBits: return 0; //unsupported; 488 ; 489 case kOther_t:; 490 case kNoType_t:; 491 default:; 492 return 0;; 493 }; 494 return 0;; 495}; 496 ; 497////////////////////////////////////////////////////////////////////////////////; 498/// \class TTree::TFriendLock; 499/// Helper class to prevent infinite recursion in the usage of TTree Friends.; 500 ; 501////////////////////////////////////////////////////////////////////////////////; 502/// Record in tree that it has been used while recursively looks through the friends.; 503 ; 504TTree::TFriendLock::TFriendLock(TTree* tree, UInt_t methodbit); 505: fTree(tree); 506{; 507 // We could also add some code to acquire an actual; 508 // lock to prevent multi-thread issues; 509 fMethodBit = methodbit;; 510 if (fTree) {; 511 fPrevious = fTree->fFriendLockStatus & fMethodBit;; 512 fTree->fFriendLockStatus |= fMethodBit;; 513 } else {; 514 fPrevious = false;; 515 }; 516}; 517 ; 518////////////////////////////////////////////////////////////////////////////////; 519/// Copy constructor.; 520 ; 521TTree::TFriendLock::TFriendLock(const TFriendLock& tfl) :; 522 fTree(tfl.fTree),; 523 fMethodBit(tfl.fMethodBit),; 524 fPrevious(tfl.fPrevious); 525{; 526}; 527 ; 528////////////////////////////////////////////////////////////////////////////////; 529/// Assignment operator.; 530 ; 531TTree::TFriendLock& TTree::TFriendLock::operator=(const TTree::TFriendLock& tfl); 532{; 533 if(this!=&tfl) {; 534 fTree=tfl.fTree;; 535 fMethodBit=tfl.fMethodBit;; 536 fPrevious=tfl.fPrevious;; 537 }; 538 return *this;; 539}; 540 ; 541////////////////////////////////////////////////////////////////////////////////; 542/// Restore the state of tree the same as before we set the lock.; 543 ; 544TTree::TFriendLock::~TFriendLock(); 545{; 546 if (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:20202,multi-thread,multi-thread,20202,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['multi-thread'],['multi-thread']
Performance," 481/// Books MVA method. The option configuration string is custom for each MVA; 482/// the TString field ""theNameAppendix"" serves to define (and distinguish); 483/// several instances of a given MVA, eg, when one wants to compare the; 484/// performance of various configurations; 485 ; 486TMVA::MethodBase *; 487TMVA::Factory::BookMethod(TMVA::DataLoader *loader, Types::EMVA theMethod, TString methodTitle, TString theOption); 488{; 489 return BookMethod(loader, Types::Instance().GetMethodName(theMethod), methodTitle, theOption);; 490}; 491 ; 492////////////////////////////////////////////////////////////////////////////////; 493/// Adds an already constructed method to be managed by this factory.; 494///; 495/// \note Private.; 496/// \note Know what you are doing when using this method. The method that you; 497/// are loading could be trained already.; 498///; 499 ; 500TMVA::MethodBase *; 501TMVA::Factory::BookMethodWeightfile(DataLoader *loader, TMVA::Types::EMVA methodType, const TString &weightfile); 502{; 503 TString datasetname = loader->GetName();; 504 std::string methodTypeName = std::string(Types::Instance().GetMethodName(methodType).Data());; 505 DataSetInfo &dsi = loader->GetDataSetInfo();; 506 ; 507 IMethod *im = ClassifierFactory::Instance().Create(methodTypeName, dsi, weightfile);; 508 MethodBase *method = (dynamic_cast<MethodBase *>(im));; 509 ; 510 if (method == nullptr); 511 return nullptr;; 512 ; 513 if (method->GetMethodType() == Types::kCategory) {; 514 Log() << kERROR << ""Cannot handle category methods for now."" << Endl;; 515 }; 516 ; 517 TString fileDir;; 518 if (fModelPersistence) {; 519 // find prefix in fWeightFileDir;; 520 TString prefix = gConfig().GetIONames().fWeightFileDirPrefix;; 521 fileDir = prefix;; 522 if (!prefix.IsNull()); 523 if (fileDir[fileDir.Length() - 1] != '/'); 524 fileDir += ""/"";; 525 fileDir = loader->GetName();; 526 fileDir += ""/"" + gConfig().GetIONames().fWeightFileDir;; 527 }; 528 ; 529 if (fModelPersistence); 530 me",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:20676,load,loader,20676,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,2,['load'],['loader']
Performance," 5152 sURL.SetOptions(opt);; 5153 ; 5154 TFile *sfile = nullptr;; 5155 ; 5156 Bool_t success = kFALSE;; 5157 ; 5158 // Open source file; 5159 if (!(sfile = TFile::Open(sURL.GetUrl(), ""READ""))) {; 5160 ::Error(""TFile::Cp"", ""cannot open source file %s"", src);; 5161 } else {; 5162 success = sfile->Cp(dst, progressbar, buffersize);; 5163 }; 5164 ; 5165 if (sfile) {; 5166 sfile->Close();; 5167 delete sfile;; 5168 }; 5169 ; 5170 return success;; 5171}; 5172 ; 5173//______________________________________________________________________________; 5174//The next statement is not active anymore on Linux.; 5175//Using posix_fadvise introduces a performance penalty (10 %) on optimized files; 5176//and in addition it destroys the information of TTreePerfStats; 5177#if defined(R__neverLINUX) && !defined(R__WINGCC); 5178Bool_t TFile::ReadBufferAsync(Long64_t offset, Int_t len); 5179{; 5180 // Read specified byte range asynchronously. Actually we tell the kernel; 5181 // which blocks we are going to read so it can start loading these blocks; 5182 // in the buffer cache.; 5183 ; 5184 // Shortcut to avoid having to implement dummy ReadBufferAsync() in all; 5185 // I/O plugins. Override ReadBufferAsync() in plugins if async is supported.; 5186 if (IsA() != TFile::Class()); 5187 return kTRUE;; 5188 ; 5189 int advice = POSIX_FADV_WILLNEED;; 5190 if (len == 0) {; 5191 // according POSIX spec if len is zero, all data following offset; 5192 // is specified. Nevertheless ROOT uses zero to probe readahead; 5193 // capabilities.; 5194 advice = POSIX_FADV_NORMAL;; 5195 }; 5196 Double_t start = 0;; 5197 if (gPerfStats) start = TTimeStamp();; 5198#if defined(R__SEEK64); 5199 Int_t result = posix_fadvise64(fD, offset, len, advice);; 5200#else; 5201 Int_t result = posix_fadvise(fD, offset, len, advice);; 5202#endif; 5203 if (gPerfStats) {; 5204 gPerfStats->FileReadEvent(this, len, start);; 5205 }; 5206 return (result != 0);; 5207}; 5208#else; 5209Bool_t TFile::ReadBufferAsync(Long64_t, Int_t); 5210",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:188450,load,loading,188450,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,2,"['cache', 'load']","['cache', 'loading']"
Performance," 530 /// scenario allows it. For example, if ROOT is configured to use an external; 531 /// scheduler, setting a value for 'numthreads' might not have any effect.; 532 /// The maximum number of threads can be influenced by the environment; 533 /// variable `ROOT_MAX_THREADS`: `export ROOT_MAX_THREADS=2` will try to set; 534 /// the maximum number of active threads to 2, if the scheduling library; 535 /// (such as tbb) ""permits"".; 536 ///; 537 /// \note Use `DisableImplicitMT()` to disable multi-threading (some locks will remain in place as; 538 /// described in EnableThreadSafety()). `EnableImplicitMT(1)` creates a thread-pool of size 1.; 539 void EnableImplicitMT(UInt_t numthreads); 540 {; 541#ifdef R__USE_IMT; 542 if (ROOT::Internal::IsImplicitMTEnabledImpl()); 543 return;; 544 EnableThreadSafety();; 545 static void (*sym)(UInt_t) = (void(*)(UInt_t))Internal::GetSymInLibImt(""ROOT_TImplicitMT_EnableImplicitMT"");; 546 if (sym); 547 sym(numthreads);; 548 ROOT::Internal::IsImplicitMTEnabledImpl() = true;; 549#else; 550 ::Warning(""EnableImplicitMT"", ""Cannot enable implicit multi-threading with %d threads, please build ROOT with -Dimt=ON"", numthreads);; 551#endif; 552 }; 553 ; 554 ////////////////////////////////////////////////////////////////////////////////; 555 /// Disables the implicit multi-threading in ROOT (see EnableImplicitMT).; 556 void DisableImplicitMT(); 557 {; 558#ifdef R__USE_IMT; 559 static void (*sym)() = (void(*)())Internal::GetSymInLibImt(""ROOT_TImplicitMT_DisableImplicitMT"");; 560 if (sym); 561 sym();; 562 ROOT::Internal::IsImplicitMTEnabledImpl() = kFALSE;; 563#else; 564 ::Warning(""DisableImplicitMT"", ""Cannot disable implicit multi-threading, please build ROOT with -Dimt=ON"");; 565#endif; 566 }; 567 ; 568 ////////////////////////////////////////////////////////////////////////////////; 569 /// Returns true if the implicit multi-threading in ROOT is enabled.; 570 Bool_t IsImplicitMTEnabled(); 571 {; 572 return ROOT::Internal::IsImplicitMTEnabledImpl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:20925,multi-thread,multi-threading,20925,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,4,['multi-thread'],['multi-threading']
Performance," 5400 ; 5401////////////////////////////////////////////////////////////////////////////////; 5402/// Used for automatic sizing of the cache.; 5403///; 5404/// Estimates a suitable size for the tree cache based on AutoFlush.; 5405/// A cache sizing factor is taken from the configuration. If this yields zero; 5406/// and withDefault is true the historical algorithm for default size is used.; 5407 ; 5408Long64_t TTree::GetCacheAutoSize(bool withDefault /* = false */ ); 5409{; 5410 auto calculateCacheSize = [this](Double_t cacheFactor); 5411 {; 5412 Long64_t cacheSize = 0;; 5413 if (fAutoFlush < 0) {; 5414 cacheSize = Long64_t(-cacheFactor * fAutoFlush);; 5415 } else if (fAutoFlush == 0) {; 5416 const auto medianClusterSize = GetMedianClusterSize();; 5417 if (medianClusterSize > 0); 5418 cacheSize = Long64_t(cacheFactor * 1.5 * medianClusterSize * GetZipBytes() / (fEntries + 1));; 5419 else; 5420 cacheSize = Long64_t(cacheFactor * 1.5 * 30000000); // use the default value of fAutoFlush; 5421 } else {; 5422 cacheSize = Long64_t(cacheFactor * 1.5 * fAutoFlush * GetZipBytes() / (fEntries + 1));; 5423 }; 5424 if (cacheSize >= (INT_MAX / 4)) {; 5425 cacheSize = INT_MAX / 4;; 5426 }; 5427 return cacheSize;; 5428 };; 5429 ; 5430 const char *stcs;; 5431 Double_t cacheFactor = 0.0;; 5432 if (!(stcs = gSystem->Getenv(""ROOT_TTREECACHE_SIZE"")) || !*stcs) {; 5433 cacheFactor = gEnv->GetValue(""TTreeCache.Size"", 1.0);; 5434 } else {; 5435 cacheFactor = TString(stcs).Atof();; 5436 }; 5437 ; 5438 if (cacheFactor < 0.0) {; 5439 // ignore negative factors; 5440 cacheFactor = 0.0;; 5441 }; 5442 ; 5443 Long64_t cacheSize = calculateCacheSize(cacheFactor);; 5444 ; 5445 if (cacheSize < 0) {; 5446 cacheSize = 0;; 5447 }; 5448 ; 5449 if (cacheSize == 0 && withDefault) {; 5450 cacheSize = calculateCacheSize(1.0);; 5451 }; 5452 ; 5453 return cacheSize;; 5454}; 5455 ; 5456////////////////////////////////////////////////////////////////////////////////; 5457/// Return an iterator over the cluster ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:214992,cache,cacheSize,214992,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,2,['cache'],"['cacheFactor', 'cacheSize']"
Performance," 58class TCudaDeviceReference; 59{; 60private:; 61 ; 62 AFloat * fDevicePointer;; 63 ; 64public:; 65 ; 66 TCudaDeviceReference(AFloat * devicePointer);; 67 ; 68 operator AFloat();; 69 ; 70 void operator=(const TCudaDeviceReference &other);; 71 void operator=(AFloat value);; 72 void operator+=(AFloat value);; 73 void operator-=(AFloat value);; 74};; 75 ; 76//____________________________________________________________________________; 77//; 78// Cuda Matrix; 79//____________________________________________________________________________; 80 ; 81/** TCudaMatrix Class; 82 *; 83 * The TCudaMatrix class represents matrices on a CUDA device. The elements; 84 * of the matrix are stored in a TCudaDeviceBuffer object which takes care of; 85 * the allocation and freeing of the device memory. TCudaMatrices are lightweight; 86 * object, that means on assignment and copy creation only a shallow copy is; 87 * performed and no new element buffer allocated. To perform a deep copy use; 88 * the static Copy method of the TCuda architecture class.; 89 *; 90 * The TCudaDeviceBuffer has an associated cuda stream, on which the data is; 91 * transferred to the device. This stream can be accessed through the; 92 * GetComputeStream member function and used to synchronize computations.; 93 *; 94 * The TCudaMatrix class also holds static references to CUDA resources.; 95 * Those are the cublas handle, a buffer of curand states for the generation; 96 * of random numbers as well as a vector containing ones, which is used for; 97 * summing column matrices using matrix-vector multiplication. The class also; 98 * has a static buffer for returning results from the device.; 99 *; 100 */; 101template<typename AFloat>; 102class TCudaMatrix; 103{; 104public:; 105 ; 106private:; 107 ; 108 static size_t fInstances; ///< Current number of matrix instances.; 109 static cublasHandle_t fCublasHandle;; 110 static AFloat * fDeviceReturn; ///< Buffer for kernel return values.; 111 static AFloat * fOnes; ///< Ve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/CudaMatrix_8h_source.html:3380,perform,perform,3380,doc/master/CudaMatrix_8h_source.html,https://root.cern,https://root.cern/doc/master/CudaMatrix_8h_source.html,1,['perform'],['perform']
Performance," 7112 UInt_t newBsize = UInt_t(bsize);; 7113 if (pass) { // only on the second pass so that it doesn't interfere with scaling; 7114 // If there is an entry offset, it will be stored in the same buffer as the object data; hence,; 7115 // we must bump up the size of the branch to account for this extra footprint.; 7116 // If fAutoFlush is not set yet, let's assume that it is 'in the process of being set' to; 7117 // the value of GetEntries().; 7118 Long64_t clusterSize = (fAutoFlush > 0) ? fAutoFlush : branch->GetEntries();; 7119 if (branch->GetEntryOffsetLen()) {; 7120 newBsize = newBsize + (clusterSize * sizeof(Int_t) * 2);; 7121 }; 7122 // We used ATLAS fully-split xAOD for testing, which is a rather unbalanced TTree, 10K branches,; 7123 // with 8K having baskets smaller than 512 bytes. To achieve good I/O performance ATLAS uses auto-flush 100,; 7124 // resulting in the smallest baskets being ~300-400 bytes, so this change increases their memory by about 8k*150B =~ 1MB,; 7125 // at the same time it significantly reduces the number of total baskets because it ensures that all 100 entries can be; 7126 // stored in a single basket (the old optimization tended to make baskets too small). In a toy example with fixed sized; 7127 // structures we found a factor of 2 fewer baskets needed in the new scheme.; 7128 // rounds up, increases basket size to ensure all entries fit into single basket as intended; 7129 newBsize = newBsize - newBsize%512 + 512;; 7130 }; 7131 if (newBsize < sizeOfOneEntry) newBsize = sizeOfOneEntry;; 7132 if (newBsize < bmin) newBsize = bmin;; 7133 if (newBsize > 10000000) newBsize = bmax;; 7134 if (pass) {; 7135 if (pDebug) Info(""OptimizeBaskets"", ""Changing buffer size from %6d to %6d bytes for %s\n"",oldBsize,newBsize,branch->GetName());; 7136 branch->SetBasketSize(newBsize);; 7137 }; 7138 newMemsize += newBsize;; 7139 // For this number to be somewhat accurate when newBsize is 'low'; 7140 // we do not include any space for meta data in the requested ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:279155,perform,performance,279155,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,2,"['optimiz', 'perform']","['optimization', 'performance']"
Performance," 72761843 bytes in 7 transactions; Readahead..........................: 256000 bytes with overhead = 0 bytes; Average transaction................: 10394.549000 Kbytes; Number of blocks in current cache..: 210, total size: 6280352. if option = ""a"" the list of blocks in the cache is printed; see also class TTreePerfStats. Int_t ReadBufferNormal(char* buf, Long64_t pos, Int_t len). Int_t ReadBufferPrefetch(char* buf, Long64_t pos, Int_t len). Int_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read buffer at position pos.; If pos is in the list of prefetched blocks read from fBuffer.; Otherwise try to fill the cache from the list of selected branches,; and recheck if pos is now in the list.; Returns; -1 in case of read failure,; 0 in case not in cache,; 1 in case read from cache.; This function overloads TFileCacheRead::ReadBuffer. void ResetCache(); This will simply clear the cache. void SetEntryRange(Long64_t emin, Long64_t emax); Set the minimum and maximum entry number to be processed; this information helps to optimize the number of baskets to read; when prefetching the branch buffers. void SetLearnEntries(Int_t n = 10); Static function to set the number of entries to be used in learning mode; The default value for n is 10. n must be >= 1. void StartLearningPhase(); The name should be enough to explain the method.; The only additional comments is that the cache is cleaned before; the new learning phase. void StopLearningPhase(); This is the counterpart of StartLearningPhase() and can be used to stop; the learning phase. It's useful when the user knows exactly what branches; he is going to use.; For the moment it's just a call to FillBuffer() since that method; will create the buffer lists from the specified branches. void UpdateBranches(TTree* tree, Bool_t owner = kFALSE); Update pointer to current Tree and recompute pointers to the branches in the cache. TTreeCache(const TTreeCache& ). TTreeCache& operator=(const TTreeCache& ). Bool_t IsLearning() const; {return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTreeCache.html:22119,optimiz,optimize,22119,root/html530/TTreeCache.html,https://root.cern,https://root.cern/root/html530/TTreeCache.html,1,['optimiz'],['optimize']
Performance," 7347 if (fBranchRef) fBranchRef->Print(option);; 7348 ; 7349 //print friends if option ""all""; 7350 if (!fFriends || !strstr(option,""all"")) return;; 7351 TIter nextf(fFriends);; 7352 TFriendLock lock(const_cast<TTree*>(this),kPrint);; 7353 TFriendElement *fr;; 7354 while ((fr = (TFriendElement*)nextf())) {; 7355 TTree * t = fr->GetTree();; 7356 if (t) t->Print(option);; 7357 }; 7358}; 7359 ; 7360////////////////////////////////////////////////////////////////////////////////; 7361/// Print statistics about the TreeCache for this tree.; 7362/// Like:; 7363/// ~~~ {.cpp}; 7364/// ******TreeCache statistics for file: cms2.root ******; 7365/// Reading 73921562 bytes in 716 transactions; 7366/// Average transaction = 103.242405 Kbytes; 7367/// Number of blocks in current cache: 202, total size : 6001193; 7368/// ~~~; 7369/// if option = ""a"" the list of blocks in the cache is printed; 7370 ; 7371void TTree::PrintCacheStats(Option_t* option) const; 7372{; 7373 TFile *f = GetCurrentFile();; 7374 if (!f) return;; 7375 TTreeCache *tc = GetReadCache(f);; 7376 if (tc) tc->Print(option);; 7377}; 7378 ; 7379////////////////////////////////////////////////////////////////////////////////; 7380/// Process this tree executing the TSelector code in the specified filename.; 7381/// The return value is -1 in case of error and TSelector::GetStatus() in; 7382/// in case of success.; 7383///; 7384/// The code in filename is loaded (interpreted or compiled, see below),; 7385/// filename must contain a valid class implementation derived from TSelector,; 7386/// where TSelector has the following member functions:; 7387///; 7388/// - `Begin()`: called every time a loop on the tree starts,; 7389/// a convenient place to create your histograms.; 7390/// - `SlaveBegin()`: called after Begin(), when on PROOF called only on the; 7391/// slave servers.; 7392/// - `Process()`: called for each event, in this function you decide what; 7393/// to read and fill your histograms.; 7394/// - `SlaveTerminat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:289471,cache,cache,289471,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,2,['cache'],['cache']
Performance," 8 pixels.; 175That is, a square marker with size 1 will be drawn with a side equal to 8; 176pixels on the screen.; 177 ; 178The marker size of any class inheriting from `TAttMarker` can; 179be changed using the method `SetMarkerSize` and retrieved using the; 180method `GetMarkerSize`.; 181 ; 182Begin_Macro; 183{; 184 auto c = new TCanvas(""c"",""Marker sizes"",0,0,500,200);; 185 TMarker marker;; 186 marker.SetMarkerStyle(3);; 187 Double_t x = 0;; 188 Double_t dx = 1/6.0;; 189 for (Int_t i=1; i<6; i++) {; 190 x += dx;; 191 marker.SetMarkerSize(i*0.2); marker.DrawMarker(x,.165);; 192 marker.SetMarkerSize(i*0.8); marker.DrawMarker(x,.495);; 193 marker.SetMarkerSize(i*1.0); marker.DrawMarker(x,.835);; 194 }; 195}; 196End_Macro; 197 ; 198Note that the marker styles number 1 6 and 7 (the dots), cannot be scaled. They; 199are meant to be very fast to draw and are always drawn with the same number of; 200pixels; therefore `SetMarkerSize` does not apply on them. To have a; 201""scalable dot"" a filled circle should be used instead, i.e. the marker style; 202number 20. By default (if `SetMarkerStyle` is not specified), the marker; 203style used is 1. That's the most common one to draw scatter plots.; 204*/; 205 ; 206////////////////////////////////////////////////////////////////////////////////; 207/// TAttMarker default constructor.; 208///; 209/// Default text attributes are taking from the current style.; 210 ; 211TAttMarker::TAttMarker(); 212{; 213 if (!gStyle) {fMarkerColor=1; fMarkerStyle=1; fMarkerSize=1; return;}; 214 fMarkerColor = gStyle->GetMarkerColor();; 215 fMarkerStyle = gStyle->GetMarkerStyle();; 216 fMarkerSize = gStyle->GetMarkerSize();; 217}; 218 ; 219////////////////////////////////////////////////////////////////////////////////; 220/// TAttMarker normal constructor.; 221///; 222/// Text attributes are taking from the argument list; 223/// - color : Marker Color Index; 224/// - style : Marker style (from 1 to 30); 225/// - size : marker size (float); 226 ; 22",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAttMarker_8cxx_source.html:6937,scalab,scalable,6937,doc/master/TAttMarker_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TAttMarker_8cxx_source.html,1,['scalab'],['scalable']
Performance," 8672 ; 8673////////////////////////////////////////////////////////////////////////////////; 8674/// Return location of bin with minimum value in the range.; 8675 ; 8676Int_t TH1::GetMinimumBin(Int_t &locmix, Int_t &locmiy, Int_t &locmiz) const; 8677{; 8678 // empty the buffer; 8679 if (fBuffer) ((TH1*)this)->BufferEmpty();; 8680 ; 8681 Int_t bin, binx, biny, binz;; 8682 Int_t locm;; 8683 Int_t xfirst = fXaxis.GetFirst();; 8684 Int_t xlast = fXaxis.GetLast();; 8685 Int_t yfirst = fYaxis.GetFirst();; 8686 Int_t ylast = fYaxis.GetLast();; 8687 Int_t zfirst = fZaxis.GetFirst();; 8688 Int_t zlast = fZaxis.GetLast();; 8689 Double_t minimum = FLT_MAX, value;; 8690 locm = locmix = locmiy = locmiz = 0;; 8691 for (binz=zfirst;binz<=zlast;binz++) {; 8692 for (biny=yfirst;biny<=ylast;biny++) {; 8693 for (binx=xfirst;binx<=xlast;binx++) {; 8694 bin = GetBin(binx,biny,binz);; 8695 value = RetrieveBinContent(bin);; 8696 if (value < minimum) {; 8697 minimum = value;; 8698 locm = bin;; 8699 locmix = binx;; 8700 locmiy = biny;; 8701 locmiz = binz;; 8702 }; 8703 }; 8704 }; 8705 }; 8706 return locm;; 8707}; 8708 ; 8709///////////////////////////////////////////////////////////////////////////////; 8710/// Retrieve the minimum and maximum values in the histogram; 8711///; 8712/// This will not return a cached value and will always search the; 8713/// histogram for the min and max values. The user can condition whether; 8714/// or not to call this with the GetMinimumStored() and GetMaximumStored(); 8715/// methods. If the cache is empty, then the value will be -1111. Users; 8716/// can then use the SetMinimum() or SetMaximum() methods to cache the results.; 8717/// For example, the following recipe will make efficient use of this method; 8718/// and the cached minimum and maximum values.; 8719//; 8720/// \code{.cpp}; 8721/// Double_t currentMin = pHist->GetMinimumStored();; 8722/// Double_t currentMax = pHist->GetMaximumStored();; 8723/// if ((currentMin == -1111) || (currentMax == -111",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:340810,cache,cached,340810,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['cache'],['cached']
Performance," 942#ifdef R__COMPLETE_MEM_TERMINATION; 943 SafeDelete(fCanvases);; 944 SafeDelete(fTasks);; 945 SafeDelete(fProofs);; 946 SafeDelete(fDataSets);; 947 SafeDelete(fClipboard);; 948 ; 949 fCleanups->Clear();; 950 delete fPluginManager; gPluginMgr = fPluginManager = 0;; 951 delete gClassTable; gClassTable = 0;; 952 delete gEnv; gEnv = 0;; 953 ; 954 if (fTypes) fTypes->Delete();; 955 SafeDelete(fTypes);; 956 if (fGlobals) fGlobals->Delete();; 957 SafeDelete(fGlobals);; 958 if (fGlobalFunctions) fGlobalFunctions->Delete();; 959 SafeDelete(fGlobalFunctions);; 960 fEnums.load()->Delete();; 961 ; 962 // FIXME: Causes segfault in rootcling, debug and uncomment; 963 // fClasses->Delete(); SafeDelete(fClasses); // TClass'es must be deleted last; 964#endif; 965 ; 966 // Remove shared libraries produced by the TSystem::CompileMacro() call; 967 gSystem->CleanCompiledMacros();; 968 ; 969 // Cleanup system class; 970 ROOT::Internal::SetErrorSystemMsgHandler(ROOT::Internal::ErrorSystemMsgHandlerFunc_t());; 971 SetErrorHandler(ROOT::Internal::MinimalErrorHandler);; 972 ROOT::Internal::ReleaseDefaultErrorHandler();; 973 delete gSystem;; 974 ; 975 // ROOT-6022:; 976 // if (gInterpreterLib) dlclose(gInterpreterLib);; 977#ifdef R__COMPLETE_MEM_TERMINATION; 978 // On some 'newer' platform (Fedora Core 17+, Ubuntu 12), the; 979 // initialization order is (by default?) is 'wrong' and so we can't; 980 // delete the interpreter now .. because any of the static in the; 981 // interpreter's library have already been deleted.; 982 // On the link line, we must list the most dependent .o file; 983 // and end with the least dependent (LLVM libraries), unfortunately,; 984 // Fedora Core 17+ or Ubuntu 12 will also execute the initialization; 985 // in the same order (hence doing libCore's before LLVM's and; 986 // vice et versa for both the destructor. We worked around the; 987 // initialization order by delay the TROOT creation until first use.; 988 // We can not do the same for destruction as we hav",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:37824,load,load,37824,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,2,['load'],['load']
Performance," 9461{; 9462 GetPlayer();; 9463 if (fPlayer) {; 9464 fPlayer->StartViewer(600, 400);; 9465 }; 9466}; 9467 ; 9468////////////////////////////////////////////////////////////////////////////////; 9469/// Stop the cache learning phase; 9470///; 9471/// Returns:; 9472/// - 0 learning phase stopped or not active; 9473/// - -1 on error; 9474 ; 9475Int_t TTree::StopCacheLearningPhase(); 9476{; 9477 if (!GetTree()) {; 9478 if (LoadTree(0)<0) {; 9479 Error(""StopCacheLearningPhase"",""Could not load a tree"");; 9480 return -1;; 9481 }; 9482 }; 9483 if (GetTree()) {; 9484 if (GetTree() != this) {; 9485 return GetTree()->StopCacheLearningPhase();; 9486 }; 9487 } else {; 9488 Error(""StopCacheLearningPhase"", ""No tree is available. Could not stop cache learning phase"");; 9489 return -1;; 9490 }; 9491 ; 9492 TFile *f = GetCurrentFile();; 9493 if (!f) {; 9494 Error(""StopCacheLearningPhase"", ""No file is available. Could not stop cache learning phase"");; 9495 return -1;; 9496 }; 9497 TTreeCache *tc = GetReadCache(f,true);; 9498 if (!tc) {; 9499 Error(""StopCacheLearningPhase"", ""No cache is available. Could not stop learning phase"");; 9500 return -1;; 9501 }; 9502 tc->StopLearningPhase();; 9503 return 0;; 9504}; 9505 ; 9506////////////////////////////////////////////////////////////////////////////////; 9507/// Set the fTree member for all branches and sub branches.; 9508 ; 9509static void TBranch__SetTree(TTree *tree, TObjArray &branches); 9510{; 9511 Int_t nb = branches.GetEntriesFast();; 9512 for (Int_t i = 0; i < nb; ++i) {; 9513 TBranch* br = (TBranch*) branches.UncheckedAt(i);; 9514 br->SetTree(tree);; 9515 ; 9516 Int_t writeBasket = br->GetWriteBasket();; 9517 for (Int_t j = writeBasket; j >= 0; --j) {; 9518 TBasket *bk = (TBasket*)br->GetListOfBaskets()->UncheckedAt(j);; 9519 if (bk) {; 9520 tree->IncrementTotalBuffers(bk->GetBufferSize());; 9521 }; 9522 }; 9523 ; 9524 TBranch__SetTree(tree,*br->GetListOfBranches());; 9525 }; 9526}; 9527 ; 9528//////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:365204,cache,cache,365204,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,2,['cache'],['cache']
Performance," : """"), fObj(obj), fClass(cl); 85 {; 86 if (!cl); 87 Fatal(""Constructor"", ""Class parameter should not be null"");; 88 SetBit(kCanDelete);; 89 }; 90 ; 91 ~TBrowserObject() {}; 92 ; 93 void Browse(TBrowser *b) override { fClass->Browse(fObj, b); }; 94 Bool_t IsFolder() const override { return fClass->IsFolder(fObj); }; 95 TClass *IsA() const override { return fClass; }; 96 ; 97private:; 98 void *fObj; ///<! pointer to the foreign object; 99 TClass *fClass; ///<! pointer to class of the foreign object; 100};; 101 ; 102ClassImp(TBrowser);; 103 ; 104////////////////////////////////////////////////////////////////////////////////; 105// Make sure the application environment exists and the GUI libs are loaded; 106 ; 107Bool_t TBrowser::InitGraphics(); 108{; 109 // Make sure the application environment exists. It is need for graphics; 110 // (colors are initialized in the TApplication ctor).; 111 if (!gApplication); 112 TApplication::CreateApplication();; 113 // make sure that the Gpad and GUI libs are loaded; 114 TApplication::NeedGraphicsLibs();; 115 ; 116 TString hname = gEnv->GetValue(""Browser.Name"", ""TRootBrowserLite"");; 117 ; 118 Bool_t isweb = gROOT->IsWebDisplay() || (hname == ""ROOT::RWebBrowserImp"");; 119 ; 120 if (gApplication); 121 gApplication->InitializeGraphics(isweb);; 122 ; 123 if (!gROOT->IsBatch() || (isweb && !gROOT->IsWebDisplayBatch())); 124 return kTRUE;; 125 ; 126 Warning(""TBrowser"", ""The ROOT browser cannot run in batch mode"");; 127 return kFALSE;; 128}; 129 ; 130////////////////////////////////////////////////////////////////////////////////; 131/// Create a new browser with a name, title. Width and height are by; 132/// default set to 640x400 and (optionally) adjusted by the screen factor; 133/// (depending on Rint.Canvas.UseScreenFactor to be true or false, default; 134/// is true).; 135 ; 136TBrowser::TBrowser(const char *name, const char *title, TBrowserImp *extimp, Option_t *opt); 137 : TNamed(name, title), fImp(extimp); 138{; 139 if (!InitGraphi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBrowser_8cxx_source.html:3673,load,loaded,3673,doc/master/TBrowser_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBrowser_8cxx_source.html,1,['load'],['loaded']
Performance," : Creating multiclass response histograms...; : Creating multiclass performance histograms...; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAMulticlass_MLP.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVAMulticlass_MLP.class.C␛[0m; : Write special histos to file: TMVAMulticlass.root:/dataset/Method_MLP/MLP; Factory : Training finished; : ; Factory : Train method: PDEFoam for Multiclass classification; : ; : Build up multiclass foam 0; : Elapsed time: 0.659 sec ; : Build up multiclass foam 1; : Elapsed time: 0.667 sec ; : Build up multiclass foam 2; : Elapsed time: 0.671 sec ; : Build up multiclass foam 3; : Elapsed time: 0.469 sec ; : Elapsed time for training with 4000 events: 2.63 sec ; : Dataset[dataset] : Create results for training; : Dataset[dataset] : Multiclass evaluation of PDEFoam on training sample; : Dataset[dataset] : Elapsed time for evaluation of 4000 events: 0.12 sec ; : Creating multiclass response histograms...; : Creating multiclass performance histograms...; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAMulticlass_PDEFoam.weights.xml␛[0m; : writing foam MultiClassFoam0 to file; : writing foam MultiClassFoam1 to file; : writing foam MultiClassFoam2 to file; : writing foam MultiClassFoam3 to file; : Foams written to file: ␛[0;36mdataset/weights/TMVAMulticlass_PDEFoam.weights_foams.root␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVAMulticlass_PDEFoam.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: DL_CPU for Multiclass classification; : ; TFHandler_DL_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 0.070769 0.28960 [ -1.0000 1.0000 ]; : var2: 0.074130 0.28477 [ -1.0000 1.0000 ]; : var3: 0.026106 0.24582 [ -1.0000 1.0000 ]; : var4: -0.034951 0.25587 [ -1.0000 1.0000 ]; : -----------------------------------------------------------; : Start of deep neural network training on CPU using MT, nthreads = 1; : ; TFHandle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:12431,perform,performance,12431,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['perform'],['performance']
Performance, : Dataset[dataset] : Create results for testing; : Dataset[dataset] : Multiclass evaluation of BDTG on testing sample; : Dataset[dataset] : Elapsed time for evaluation of 4000 events: 1.01 sec ; : Creating multiclass response histograms...; : Creating multiclass performance histograms...; Factory : Test method: MLP for Multiclass classification performance; : ; : Dataset[dataset] : Create results for testing; : Dataset[dataset] : Multiclass evaluation of MLP on testing sample; : Dataset[dataset] : Elapsed time for evaluation of 4000 events: 0.0114 sec ; : Creating multiclass response histograms...; : Creating multiclass performance histograms...; Factory : Test method: PDEFoam for Multiclass classification performance; : ; : Dataset[dataset] : Create results for testing; : Dataset[dataset] : Multiclass evaluation of PDEFoam on testing sample; : Dataset[dataset] : Elapsed time for evaluation of 4000 events: 0.122 sec ; : Creating multiclass response histograms...; : Creating multiclass performance histograms...; Factory : Test method: DL_CPU for Multiclass classification performance; : ; : Dataset[dataset] : Create results for testing; : Dataset[dataset] : Multiclass evaluation of DL_CPU on testing sample; : Dataset[dataset] : Elapsed time for evaluation of 4000 events: 0.105 sec ; : Creating multiclass response histograms...; : Creating multiclass performance histograms...; Factory : ␛[1mEvaluate all methods␛[0m; : Evaluate multiclass classification method: BDTG; : Creating multiclass response histograms...; : Creating multiclass performance histograms...; : Creating multiclass response histograms...; : Creating multiclass performance histograms...; TFHandler_BDTG : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 0.070153 1.0224 [ -4.0592 3.5808 ]; : var2: 0.30372 1.0460 [ -3.6952 3.7877 ]; : var3: 0.12152 1.1222 [ -3.6800 3.9200 ]; : var4: -0.072602 1.2766 [ -4.8486 4.2221 ]; : ----------------------------------,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:20415,perform,performance,20415,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['perform'],['performance']
Performance," : ␛[1mH e l p f o r M V A m e t h o d [ FDA_GA ] :␛[0m; : ; : ␛[1m--- Short description:␛[0m; : ; : The function discriminant analysis (FDA) is a classifier suitable ; : to solve linear or simple nonlinear discrimination problems.; : ; : The user provides the desired function with adjustable parameters; : via the configuration option string, and FDA fits the parameters to; : it, requiring the signal (background) function value to be as close; : as possible to 1 (0). Its advantage over the more involved and; : automatic nonlinear discriminators is the simplicity and transparency ; : of the discrimination expression. A shortcoming is that FDA will; : underperform for involved problems with complicated, phase space; : dependent nonlinear correlations.; : ; : Please consult the Users Guide for the format of the formula string; : and the allowed parameter ranges:; : documentation/tmva/UsersGuide/TMVAUsersGuide.pdf; : ; : ␛[1m--- Performance optimisation:␛[0m; : ; : The FDA performance depends on the complexity and fidelity of the; : user-defined discriminator function. As a general rule, it should; : be able to reproduce the discrimination power of any linear; : discriminant analysis. To reach into the nonlinear domain, it is; : useful to inspect the correlation profiles of the input variables,; : and add quadratic and higher polynomial terms between variables as; : necessary. Comparison with more involved nonlinear classifiers can; : be used as a guide.; : ; : ␛[1m--- Performance tuning via configuration options:␛[0m; : ; : Depending on the function used, the choice of ""FitMethod"" is; : crucial for getting valuable solutions with FDA. As a guideline it; : is recommended to start with ""FitMethod=MINUIT"". When more complex; : functions are used where MINUIT does not converge to reasonable; : results, the user should switch to non-gradient FitMethods such; : as GeneticAlgorithm (GA) or Monte Carlo (MC). It might prove to be; : useful to combine GA (or MC) with MINUIT by se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:39242,perform,performance,39242,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['perform'],['performance']
Performance," ; # w.pdf(""model"").setNormValueCaching(3); model = w[""model""]; model.setStringAttribute(""CACHEPARMINT"", ""x:y:z""); ; # Evaluate pdf once to trigger filling of cache; normSet = {w[""x""], w[""y""], w[""z""]}; model.getVal(normSet); w.writeToFile(""rf903_numintcache.root""); ; if mode == 2:; # Load preexisting workspace from file in mode==2; f = ROOT.TFile(""rf903_numintcache.root""); w = f.Get(""w""); ; # Return created or loaded workspace; return w; ; ; mode = 0; # Mode = 0 : Run plain fit (slow); # Mode = 1 : Generate workspace with precalculated integral and store it on file (prepare for accelerated running); # Mode = 2 : Run fit from previously stored workspace including cached; # integrals (fast, run in mode=1 first); ; # Create, save or load workspace with pdf; # -----------------------------------------------------------------------------------; ; # Make/load workspace, here in mode 1; w = getWorkspace(mode); if mode == 1:; # Show workspace that was created; w.Print(); ; # Show plot of cached integral values; hhcache = w.expensiveObjectCache().getObj(1); if hhcache:; ROOT.TCanvas(""rf903_numintcache"", ""rf903_numintcache"", 600, 600); hhcache.createHistogram(""a"").Draw(); else:; ROOT.RooFit.Error(""rf903_numintcache"", ""Cached histogram is not existing in workspace""); sys.exit(); ; # Use pdf from workspace for generation and fitting; # -----------------------------------------------------------------------------------; ; # ROOT.This is always slow (need to find maximum function value; # empirically in 3D space); model = w[""model""]; d = model.generate({w[""x""], w[""y""], w[""z""]}, 1000); ; # ROOT.This is slow in mode 0, fast in mode 1; model.fitTo(d, Verbose=True, Timer=True, PrintLevel=-1); ; # Projection on x (always slow as 2D integral over Y, at fitted value of a; # is not cached); framex = w[""x""].frame(Title=""Projection of 3D model on X""); d.plotOn(framex); model.plotOn(framex); ; # Draw x projection on canvas; c = ROOT.TCanvas(""rf903_numintcache"", ""rf903_numintcache"", 600, 600",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf903__numintcache_8py.html:2407,cache,cached,2407,doc/master/rf903__numintcache_8py.html,https://root.cern,https://root.cern/doc/master/rf903__numintcache_8py.html,1,['cache'],['cached']
Performance," ; (; ); const. inline . De-duplicated pointer to this object's name. ; This can be used for fast name comparisons. like if (namePtr() == other.namePtr()). NoteTNamed::GetName() will return a pointer that's different for each object, but namePtr() always points to a unique instance. ; Definition at line 297 of file RooAbsData.h. ◆ numEntries(). Int_t RooAbsData::numEntries ; (; ); const. virtual . Return number of entries in dataset, i.e., count unweighted entries. ; Definition at line 323 of file RooAbsData.cxx. ◆ operator=(). RooAbsData & RooAbsData::operator= ; (; const RooAbsData & ; other). Definition at line 255 of file RooAbsData.cxx. ◆ optimizeReadingWithCaching(). void RooAbsData::optimizeReadingWithCaching ; (; RooAbsArg & ; arg, . const RooArgSet & ; cacheList, . const RooArgSet & ; keepObsList . ). protectedvirtual . Prepare dataset for use with cached constant terms listed in 'cacheList' of expression 'arg'. ; Deactivate tree branches for any dataset observable that is either not used at all, or is used exclusively by cached branch nodes. ; Definition at line 2262 of file RooAbsData.cxx. ◆ plotAsymOn(). RooPlot * RooAbsData::plotAsymOn ; (; RooPlot * ; frame, . const RooAbsCategoryLValue & ; asymCat, . PlotOpt ; o . ); const. protectedvirtual . Create and fill a histogram with the asymmetry N[+] - N[-] / ( N[+] + N[-] ), where N(+/-) is the number of data points with asymCat=+1 and asymCat=-1 as function of the frames variable. ; The asymmetry category 'asymCat' must have exactly 2 (or 3) states defined with index values +1,-1 (and 0); The plot range and the number of plot bins is determined by the parameters of the plot variable of the frame (RooAbsReal::setPlotRange(), RooAbsReal::setPlotBins()); The optional cut string expression can be used to select the events to be plotted. The cut specification may refer to any variable contained in the data set; The drawOptions are passed to the TH1::Draw() method ; Definition at line 1963 of file RooAbsData.cxx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsData.html:52995,cache,cached,52995,doc/master/classRooAbsData.html,https://root.cern,https://root.cern/doc/master/classRooAbsData.html,1,['cache'],['cached']
Performance," ; (; const RooArgSet * ; nset, . const RooArgSet * ; iset, . pRooArgList & ; compIntList, . Int_t & ; code, . const char * ; isetRangeName . ); const. protected . Check if this configuration was created before. ; Definition at line 477 of file RooAddModel.cxx. ◆ getGenerator(). Int_t RooAddModel::getGenerator ; (; const RooArgSet & ; directVars, . RooArgSet & ; generateVars, . bool ; staticInitOK = true . ); const. overridevirtual . Return pseud-code that indicates if all components can do internal generation (1) or not (0) ; Reimplemented from RooAbsPdf.; Definition at line 663 of file RooAddModel.cxx. ◆ getProjCache(). AddCacheElem * RooAddModel::getProjCache ; (; const RooArgSet * ; nset, . const RooArgSet * ; iset = nullptr . ); const. protected . Retrieve cache element with for calculation of p.d.f value with normalization set nset and integrated over iset in range 'rangeName'. ; If cache element does not exist, create and fill it on the fly. The cache contains suplemental normalization terms (in case not all added p.d.f.s have the same observables), projection integrals to calculated transformed fraction coefficients when a frozen reference frame is provided and projection integrals for similar transformations when a frozen reference range is provided. ; Definition at line 308 of file RooAddModel.cxx. ◆ IsA(). TClass * RooAddModel::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 131 of file RooAddModel.h. ◆ isDirectGenSafe(). bool RooAddModel::isDirectGenSafe ; (; const RooAbsArg & ; arg); const. overridevirtual . Direct generation is safe if all components say so. ; Reimplemented from RooAbsPdf.; Definition at line 646 of file RooAddModel.cxx. ◆ pdfList(). const RooArgList & RooAddModel::pdfList ; (; ); const. inline . Return list of component p.d.fs. ; Definition at line 66 of file RooAddModel.h. ◆ printMetaArgs(). void RooAddModel::printMetaArgs ; (; std::ostream & ; os);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddModel.html:87648,cache,cache,87648,doc/master/classRooAddModel.html,https://root.cern,https://root.cern/doc/master/classRooAddModel.html,1,['cache'],['cache']
Performance," ; (; const TGeoParallelWorld & ; ). protecteddelete . switch between different algorithm implementations . ◆ TGeoParallelWorld() [2/3]. TGeoParallelWorld::TGeoParallelWorld ; (; ). inline . Definition at line 62 of file TGeoParallelWorld.h. ◆ TGeoParallelWorld() [3/3]. TGeoParallelWorld::TGeoParallelWorld ; (; const char * ; name, . TGeoManager * ; mgr . ). Default constructor. ; Definition at line 61 of file TGeoParallelWorld.cxx. ◆ ~TGeoParallelWorld(). TGeoParallelWorld::~TGeoParallelWorld ; (; ). override . Destructor. ; Definition at line 76 of file TGeoParallelWorld.cxx. Member Function Documentation. ◆ AddNode(). void TGeoParallelWorld::AddNode ; (; const char * ; path). Add a node normally to this world. Overlapping nodes not allowed. ; Definition at line 92 of file TGeoParallelWorld.cxx. ◆ AddOverlap() [1/2]. void TGeoParallelWorld::AddOverlap ; (; const char * ; volname, . Bool_t ; activate = kTRUE . ). To use this optimization, the user should declare the full list of volumes which may overlap with any of the physical nodes of the parallel world. ; Better be done before misalignment ; Definition at line 120 of file TGeoParallelWorld.cxx. ◆ AddOverlap() [2/2]. void TGeoParallelWorld::AddOverlap ; (; TGeoVolume * ; vol, . Bool_t ; activate = kTRUE . ). To use this optimization, the user should declare the full list of volumes which may overlap with any of the physical nodes of the parallel world. ; Better be done before misalignment ; Definition at line 108 of file TGeoParallelWorld.cxx. ◆ BuildBVH(). void TGeoParallelWorld::BuildBVH ; (; ). Build the BVH acceleration structure. ; Definition at line 1315 of file TGeoParallelWorld.cxx. ◆ CheckBVH(). bool TGeoParallelWorld::CheckBVH ; (; void * ; bvh, . size_t ; expected_leaf_count . ); const. Check/validate the BVH acceleration structure. ; Definition at line 1261 of file TGeoParallelWorld.cxx. ◆ CheckOverlaps(). void TGeoParallelWorld::CheckOverlaps ; (; Double_t ; ovlp = 0.001). Check overlaps within a tol",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoParallelWorld.html:18436,optimiz,optimization,18436,doc/master/classTGeoParallelWorld.html,https://root.cern,https://root.cern/doc/master/classTGeoParallelWorld.html,1,['optimiz'],['optimization']
Performance," ; (; std::ostream & ; os, . const char * ; indent . ). overridevirtual . Add details on cache contents when printing in tree mode. ; Reimplemented from RooCacheManager< RooAbsCacheElement >.; Definition at line 194 of file RooObjCacheManager.cxx. ◆ redirectServersHook(). bool RooObjCacheManager::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursive . ). overridevirtual . Intercept server redirect calls. ; If clearOnRedirect was set, sterilize the cache (i.e. keep the structure but delete all contents). If not forward serverRedirect to cache elements ; Reimplemented from RooCacheManager< RooAbsCacheElement >.; Definition at line 84 of file RooObjCacheManager.cxx. ◆ setClearOnRedirect(). void RooObjCacheManager::setClearOnRedirect ; (; bool ; flag). inline . Definition at line 50 of file RooObjCacheManager.h. ◆ sterilize(). void RooObjCacheManager::sterilize ; (; ). overridevirtual . Clear the cache payload but retain slot mapping w.r.t to normalization and integration sets. ; Reimplemented from RooCacheManager< RooAbsCacheElement >.; Definition at line 152 of file RooObjCacheManager.cxx. ◆ Streamer(). void RooObjCacheManager::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from RooCacheManager< RooAbsCacheElement >. ◆ StreamerNVirtual(). void RooObjCacheManager::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 62 of file RooObjCacheManager.h. Member Data Documentation. ◆ _allowOptimize. bool RooObjCacheManager::_allowOptimize. protected . Definition at line 55 of file RooObjCacheManager.h. ◆ _clearObsList. bool RooObjCacheManager::_clearObsList. staticprotected . Clear obslist on sterilize? ; Definition at line 60 of file RooObjCacheManager.h. ◆ _clearOnRedirect. bool RooObjCacheManager::_clearOnRedirect. protected . Definition at line 54 of file RooObjCacheManager.h. ◆ _optCacheModeSeen. bool RooObjCacheManager::_optCacheModeSeen. p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooObjCacheManager.html:11690,cache,cache,11690,doc/master/classRooObjCacheManager.html,https://root.cern,https://root.cern/doc/master/classRooObjCacheManager.html,1,['cache'],['cache']
Performance," ; 160If the text precision is equal to 3, the text size doesn't depend on the pad's; 161dimensions. A given `textsize` value always generates the same absolute; 162size. The text size (`charheight`) is given in pixels:; 163 ; 164~~~ {.cpp}; 165 charheight = textsize;; 166~~~; 167 ; 168Note that to scale fonts to the same size as the old True Type package a; 169scale factor of `0.93376068` is apply to the text size before drawing.; 170 ; 171The text size of any class inheriting from `TAttText` can; 172be changed using the method `SetTextSize` and retrieved using the; 173method `GetTextSize`.; 174 ; 175\anchor ATTTEXT5; 176## Text Font and Precision; 177 ; 178The text font code is combination of the font number and the precision.; 179~~~ {.cpp}; 180 Text font code = 10*fontnumber + precision; 181~~~; 182Font numbers must be between 1 and 14.; 183 ; 184The precision can be:; 185 ; 186 - `precision = 0` fast hardware fonts (steps in the size); 187 - `precision = 1` scalable and rotatable hardware fonts (see below); 188 - `precision = 2` scalable and rotatable hardware fonts; 189 - `precision = 3` scalable and rotatable hardware fonts. Text size; 190 is given in pixels.; 191 ; 192The text font and precision of any class inheriting from `TAttText` can; 193be changed using the method `SetTextFont` and retrieved using the; 194method `GetTextFont`.; 195 ; 196\anchor ATTTEXT51; 197### Font quality and speed; 198 ; 199When precision 0 is used, only the original non-scaled X11 system fonts are; 200used. The fonts have a minimum (4) and maximum (37) size in pixels. These; 201fonts are fast and are of good quality. Their size varies with large steps; 202and they cannot be rotated.; 203Precision 1 and 2 fonts have a different behaviour depending if the; 204True Type Fonts (TTF) are used or not. If TTF are used, you always get very good; 205quality scalable and rotatable fonts.; 206These days TTF fonts are rendered fast enough and can be used in all cases.; 207 ; 208\anchor ATTTEXT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAttText_8cxx_source.html:6074,scalab,scalable,6074,doc/master/TAttText_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TAttText_8cxx_source.html,3,['scalab'],['scalable']
Performance," ; 1702 TFunction *f = GetGlobalFunctions()->Get(decl);; 1703 if (f) return f;; 1704 ; 1705 Error(""GetGlobalFunction"",; 1706 ""\nDid not find matching TFunction <%s> with \""%s\""."",; 1707 function,params);; 1708 return nullptr;; 1709 }; 1710}; 1711 ; 1712////////////////////////////////////////////////////////////////////////////////; 1713/// Return pointer to global function by name. If proto != 0; 1714/// it will also resolve overloading. If load is true force reading; 1715/// of all currently defined global functions from CINT (more expensive).; 1716/// The proto string must be of the form: ""int, char*, float"".; 1717 ; 1718TFunction *TROOT::GetGlobalFunctionWithPrototype(const char *function,; 1719 const char *proto, Bool_t load); 1720{; 1721 if (!proto) {; 1722 R__LOCKGUARD(gROOTMutex);; 1723 return (TFunction *)GetListOfGlobalFunctions(load)->FindObject(function);; 1724 } else {; 1725 if (!fInterpreter); 1726 Fatal(""GetGlobalFunctionWithPrototype"", ""fInterpreter not initialized"");; 1727 ; 1728 R__LOCKGUARD(gROOTMutex);; 1729 TInterpreter::DeclId_t decl = gInterpreter->GetFunctionWithPrototype(nullptr,; 1730 function, proto);; 1731 ; 1732 if (!decl) return nullptr;; 1733 ; 1734 TFunction *f = GetGlobalFunctions()->Get(decl);; 1735 if (f) return f;; 1736 ; 1737 Error(""GetGlobalFunctionWithPrototype"",; 1738 ""\nDid not find matching TFunction <%s> with \""%s\""."",; 1739 function,proto);; 1740 return nullptr;; 1741 }; 1742}; 1743 ; 1744////////////////////////////////////////////////////////////////////////////////; 1745/// Return pointer to Geometry with name; 1746 ; 1747TObject *TROOT::GetGeometry(const char *name) const; 1748{; 1749 return GetListOfGeometries()->FindObject(name);; 1750}; 1751 ; 1752////////////////////////////////////////////////////////////////////////////////; 1753 ; 1754TCollection *TROOT::GetListOfEnums(Bool_t load /* = kTRUE */); 1755{; 1756 if(!fEnums.load()) {; 1757 R__LOCKGUARD(gROOTMutex);; 1758 // Test again just in case, another thread did",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:66319,load,load,66319,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,4,['load'],['load']
Performance," ; 193 if (!noLogo && !NoLogoOpt()) {; 194 Bool_t lite = (Bool_t) gEnv->GetValue(""Rint.WelcomeLite"", 0);; 195 PrintLogo(lite);; 196 }; 197 ; 198 // Explicitly load libMathCore it cannot be auto-loaded it when using one; 199 // of its freestanding functions. Once functions can trigger autoloading we; 200 // can get rid of this.; 201 if (!gClassTable->GetDict(""TRandom"")); 202 gSystem->Load(""libMathCore"");; 203 ; 204 if (!gInterpreter->HasPCMForLibrary(""std"")) {; 205 // Load some frequently used includes; 206 Int_t includes = gEnv->GetValue(""Rint.Includes"", 1);; 207 // When the interactive ROOT starts, it can automatically load some frequently; 208 // used includes. However, this introduces several overheads; 209 // -The initialisation takes more time; 210 // -Memory overhead when including <vector>; 211 // In $ROOTSYS/etc/system.rootrc, you can set the variable Rint.Includes to 0; 212 // to disable the loading of these includes at startup.; 213 // You can set the variable to 1 (default) to load only <iostream>, <string> and <DllImport.h>; 214 // You can set it to 2 to load in addition <vector> and <utility>; 215 // We strongly recommend setting the variable to 2 if your scripts include <vector>; 216 // and you execute your scripts multiple times.; 217 if (includes > 0) {; 218 TString code;; 219 code = ""#include <iostream>\n""; 220 ""#include <string>\n"" // for std::string std::iostream.; 221 ""#include <DllImport.h>\n"";// Defined R__EXTERN; 222 if (includes > 1) {; 223 code += ""#include <vector>\n""; 224 ""#include <utility>"";; 225 }; 226 ProcessLine(code, kTRUE);; 227 }; 228 }; 229 ; 230 // Load user functions; 231 const char *logon;; 232 logon = gEnv->GetValue(""Rint.Load"", (char*)nullptr);; 233 if (logon) {; 234 char *mac = gSystem->Which(TROOT::GetMacroPath(), logon, kReadPermission);; 235 if (mac); 236 ProcessLine(Form("".L %s"",logon), kTRUE);; 237 delete [] mac;; 238 }; 239 ; 240 // Execute logon macro; 241 ExecLogon();; 242 ; 243 // Save current interpreter context; 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRint_8cxx_source.html:7064,load,load,7064,doc/master/TRint_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TRint_8cxx_source.html,1,['load'],['load']
Performance," ; 2190 if (projDataNeededVars) delete projDataNeededVars ;; 2191 delete projectionCompList ;; 2192 plotVar->setVal(oldPlotVarVal); // reset the plot variable value to not disturb the original state; 2193 return frame;; 2194}; 2195 ; 2196 ; 2197//_____________________________________________________________________________; 2198// coverity[PASS_BY_VALUE]; 2199RooPlot* RooAbsReal::plotAsymOn(RooPlot *frame, const RooAbsCategoryLValue& asymCat, PlotOpt o) const; 2200 ; 2201{; 2202 // Plotting engine for asymmetries. Implements the functionality if plotOn(frame,Asymmetry(...))); 2203 //; 2204 // Plot asymmetry of ourselves, defined as; 2205 //; 2206 // asym = f(asymCat=-1) - f(asymCat=+1) / ( f(asymCat=-1) + f(asymCat=+1) ); 2207 //; 2208 // on frame. If frame contains a histogram, all dimensions of the plotted; 2209 // asymmetry function that occur in the previously plotted dataset are projected via partial integration.; 2210 // Otherwise no projections are performed,; 2211 //; 2212 // The asymmetry function can be multiplied with an optional scale factor. The default projection; 2213 // behaviour can be overridden by supplying an optional set of dependents to project.; 2214 ; 2215 // Sanity checks; 2216 if (plotSanityChecks(frame)) return frame ;; 2217 ; 2218 // ProjDataVars is either all projData observables, or the user indicated subset of it; 2219 RooArgSet projDataVars ;; 2220 if (o.projData) {; 2221 if (o.projDataSet) {; 2222 std::unique_ptr<RooArgSet> tmp{o.projData->get()->selectCommon(*o.projDataSet)};; 2223 projDataVars.add(*tmp) ;; 2224 } else {; 2225 projDataVars.add(*o.projData->get()) ;; 2226 }; 2227 }; 2228 ; 2229 // Must depend on asymCat; 2230 if (!dependsOn(asymCat)) {; 2231 coutE(Plotting) << ""RooAbsReal::plotAsymOn("" << GetName(); 2232 << "") function doesn't depend on asymmetry category "" << asymCat.GetName() << std::endl ;; 2233 return frame ;; 2234 }; 2235 ; 2236 // asymCat must be a signCat; 2237 if (!asymCat.isSignType()) {; 2238 coutE(Plotting)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:97335,perform,performed,97335,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['perform'],['performed']
Performance," ; 2344////////////////////////////////////////////////////////////////////////////////; 2345/// Set a pointer to the read cache.; 2346///; 2347/// <b>This relinquishes ownership</b> of the previous cache, so if you do not; 2348/// already have a pointer to the previous cache (and there was a previous; 2349/// cache), you ought to retrieve (and delete it if needed) using:; 2350///; 2351/// TFileCacheRead *older = myfile->GetCacheRead();; 2352///; 2353/// The action specifies how to behave when detaching a cache from the; 2354/// the TFile. If set to (default) kDisconnect, the contents of the cache; 2355/// will be flushed when it is removed from the file, and it will disconnect; 2356/// the cache object from the file. In almost all cases, this is what you want.; 2357/// If you want to disconnect the cache temporarily from this tree and re-attach; 2358/// later to the same fil, you can set action to kDoNotDisconnect. This will allow; 2359/// things like prefetching to continue in the background while it is no longer the; 2360/// default cache for the TTree. Except for a few expert use cases, kDisconnect is; 2361/// likely the correct setting.; 2362///; 2363/// WARNING: if action=kDoNotDisconnect, you MUST delete the cache before TFile.; 2364///; 2365 ; 2366void TFile::SetCacheRead(TFileCacheRead *cache, TObject* tree, ECacheAction action); 2367{; 2368 if (tree) {; 2369 if (cache) fCacheReadMap->Add(tree, cache);; 2370 else {; 2371 // The only addition to fCacheReadMap is via an interface that takes; 2372 // a TFileCacheRead* so the C-cast is safe.; 2373 TFileCacheRead* tpf = (TFileCacheRead *)fCacheReadMap->GetValue(tree);; 2374 fCacheReadMap->Remove(tree);; 2375 if (tpf && (tpf->GetFile() == this) && (action != kDoNotDisconnect)) tpf->SetFile(0, action);; 2376 }; 2377 }; 2378 if (cache) cache->SetFile(this, action);; 2379 else if (!tree && fCacheRead && (action != kDoNotDisconnect)) fCacheRead->SetFile(0, action);; 2380 // For backward compatibility the last Cache se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:83625,cache,cache,83625,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['cache'],['cache']
Performance," ; 982////////////////////////////////////////////////////////////////////////////////; 983/// Return a pointer to the TClass representing the container; 984 ; 985TClass *TGenCollectionProxy::GetCollectionClass() const; 986{; 987 return fClass ? fClass : Initialize(kFALSE)->fClass;; 988}; 989 ; 990////////////////////////////////////////////////////////////////////////////////; 991/// Return the type of collection see TClassEdit::ESTLType; 992 ; 993Int_t TGenCollectionProxy::GetCollectionType() const; 994{; 995 if (!fValue.load(std::memory_order_relaxed)) {; 996 Initialize(kFALSE);; 997 }; 998 return fSTL_type;; 999}; 1000 ; 1001////////////////////////////////////////////////////////////////////////////////; 1002/// Return the offset between two consecutive value_types (memory layout).; 1003 ; 1004ULong_t TGenCollectionProxy::GetIncrement() const {; 1005 if (!fValue.load(std::memory_order_relaxed)) {; 1006 Initialize(kFALSE);; 1007 }; 1008 return fValDiff;; 1009}; 1010 ; 1011////////////////////////////////////////////////////////////////////////////////; 1012/// Return the sizeof the collection object.; 1013 ; 1014UInt_t TGenCollectionProxy::Sizeof() const; 1015{; 1016 return fClass->Size();; 1017}; 1018 ; 1019////////////////////////////////////////////////////////////////////////////////; 1020/// Return true if the content is of type 'pointer to'; 1021 ; 1022Bool_t TGenCollectionProxy::HasPointers() const; 1023{; 1024 // Initialize proxy in case it hasn't been initialized yet; 1025 if( !fValue.load(std::memory_order_relaxed) ); 1026 Initialize(kFALSE);; 1027 ; 1028 // The content of a map and multimap is always a 'pair' and hence; 1029 // fPointers means ""Flag to indicate if containee has pointers (key or value)""; 1030 // so we need to ignore its value for map and multimap;; 1031 return fPointers && !(fSTL_type == ROOT::kSTLmap || fSTL_type == ROOT::kSTLmultimap ||; 1032 fSTL_type == ROOT::kSTLunorderedmap || fSTL_type == ROOT::kSTLunorderedmultimap);; 1033}; 103",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:32505,load,load,32505,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['load'],['load']
Performance," ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; RooCategoryProxyRooAbsHiddenReal::_stateProxy to hiding state category; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooUnblindCPAsymVar.html:33829,cache,cache,33829,root/html532/RooUnblindCPAsymVar.html,https://root.cern,https://root.cern/root/html532/RooUnblindCPAsymVar.html,1,['cache'],['cache']
Performance," ; Definition at line 105 of file TTreeCache.h. ◆ fNbranches. Int_t TTreeCache::fNbranches {0}. protected . ! Number of branches in the cache ; Definition at line 44 of file TTreeCache.h. ◆ fNextClusterStart. Long64_t TTreeCache::fNextClusterStart {-1}. protected . ! End+1 of the cluster(s) where the current content was picked out ; Definition at line 43 of file TTreeCache.h. ◆ fNMissReadMiss. Int_t TTreeCache::fNMissReadMiss {0}. protected . Number of blocks read and not found in either cache. ; Definition at line 48 of file TTreeCache.h. ◆ fNMissReadOk. Int_t TTreeCache::fNMissReadOk {0}. protected . Number of blocks read, not found in the primary cache, and found in the secondary cache. ; Definition at line 46 of file TTreeCache.h. ◆ fNMissReadPref. Int_t TTreeCache::fNMissReadPref {0}. protected . Number of blocks read into the secondary (""miss"") cache. ; Definition at line 50 of file TTreeCache.h. ◆ fNReadMiss. Int_t TTreeCache::fNReadMiss {0}. protected . Number of blocks read and not found in the cache. ; Definition at line 47 of file TTreeCache.h. ◆ fNReadOk. Int_t TTreeCache::fNReadOk {0}. protected . Number of blocks read and found in the cache. ; Definition at line 45 of file TTreeCache.h. ◆ fNReadPref. Int_t TTreeCache::fNReadPref {0}. protected . Number of blocks that were prefetched. ; Definition at line 49 of file TTreeCache.h. ◆ fOneTime. bool TTreeCache::fOneTime {false}. protected . ! used in the learning phase ; Definition at line 57 of file TTreeCache.h. ◆ fOptimizeMisses. bool TTreeCache::fOptimizeMisses {false}. protected . ! true if we should optimize cache misses. ; Definition at line 72 of file TTreeCache.h. ◆ fPrefillType. EPrefillType TTreeCache::fPrefillType. protected . Whether a pre-filling is enabled (and if applicable which type) ; Definition at line 64 of file TTreeCache.h. ◆ fReadDirectionSet. bool TTreeCache::fReadDirectionSet {false}. protected . ! read direction established ; Definition at line 62 of file TTreeCache.h. ◆ fReverse",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCache.html:55889,cache,cache,55889,doc/v632/classTTreeCache.html,https://root.cern,https://root.cern/doc/v632/classTTreeCache.html,2,['cache'],['cache']
Performance," ; Definition at line 170 of file TProofLite.h. ◆ CleanupSandbox(). Int_t TProofLite::CleanupSandbox ; (; ). private . Remove old sessions dirs keep at most 'Proof.MaxOldSessions' (default 10) ; Definition at line 1821 of file TProofLite.cxx. ◆ ClearCache(). void TProofLite::ClearCache ; (; const char * ; file = 0). overridevirtual . Remove files from all file caches. ; Reimplemented from TProof.; Definition at line 1519 of file TProofLite.cxx. ◆ ClearDataSetCache(). void TProofLite::ClearDataSetCache ; (; const char * ; dataset = 0). overridevirtual . Clear the content of the dataset cache, if any (matching 'dataset', if defined). ; Reimplemented from TProof.; Definition at line 2282 of file TProofLite.cxx. ◆ CopyMacroToCache(). Int_t TProofLite::CopyMacroToCache ; (; const char * ; macro, . Int_t ; headerRequired = 0, . TSelector ** ; selector = 0, . Int_t ; opt = 0, . TList * ; wrks = 0 . ). protected . Copy a macro, and its possible associated .h[h] file, to the cache directory, from where the workers can get the file. ; If headerRequired is 1, return -1 in case the header is not found. If headerRequired is 0, try to copy header too. If headerRequired is -1, don't look for header, only copy macro. If the selector pionter is not 0, consider the macro to be a selector and try to load the selector and set it to the pointer. The mask 'opt' is an or of ESendFileOpt: kCpBin (0x8) Retrieve from the cache the binaries associated with the file kCp (0x10) Retrieve the files from the cache Return -1 in case of error, 0 otherwise. ; Definition at line 1593 of file TProofLite.cxx. ◆ CreateSandbox(). Int_t TProofLite::CreateSandbox ; (; ). private . Create the sandbox for this session. ; Definition at line 880 of file TProofLite.cxx. ◆ DeclFileName(). static const char * TProofLite::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 170 of file TProofLite.h. ◆ DrawSelect(). Long64_t TProofLite::DrawSelect ; (; TDSe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:49522,cache,cache,49522,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['cache'],['cache']
Performance," ; Definition at line 81 of file TEnum.h. ◆ DeclFileName(). static const char * TEnum::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 81 of file TEnum.h. ◆ GetClass(). TClass * TEnum::GetClass ; (; ); const. inline . Definition at line 62 of file TEnum.h. ◆ GetConstant(). const TEnumConstant * TEnum::GetConstant ; (; const char * ; name); const. inline . Definition at line 64 of file TEnum.h. ◆ GetConstants(). const TSeqCollection * TEnum::GetConstants ; (; ); const. inline . Definition at line 63 of file TEnum.h. ◆ GetDeclId(). TDictionary::DeclId_t TEnum::GetDeclId ; (; ); const. Definition at line 146 of file TEnum.cxx. ◆ GetEnum() [1/2]. TEnum * TEnum::GetEnum ; (; const char * ; enumName, . ESearchAction ; sa = kALoadAndInterpLookup . ). static . Static function to retrieve enumerator from the ROOT's typesystem. ; It has no side effect, except when the load flag is true. In this case, the load of the library containing the scope of the enumerator is attempted. There are two top level code paths: the enumerator is scoped or isn't. If it is not, a lookup in the list of global enums is performed. If it is, two lookups are carried out for its scope: one in the list of classes and one in the list of protoclasses. If a scope with the desired name is found, the enum is searched. If the scope is not found, and the load flag is true, the aforementioned two steps are performed again after an autoload attempt with the name of the scope as key is tried out. If the interpreter lookup flag is false, the ListOfEnums objects are not treated as such, but rather as THashList objects. This prevents any flow of information from the interpreter into the ROOT's typesystem: a snapshot of the typesystem status is taken. ; Definition at line 209 of file TEnum.cxx. ◆ GetEnum() [2/2]. TEnum * TEnum::GetEnum ; (; const std::type_info & ; ti, . ESearchAction ; sa = kALoadAndInterpLookup . ). static . Definition at line 175 o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTEnum.html:17304,load,load,17304,doc/v632/classTEnum.html,https://root.cern,https://root.cern/doc/v632/classTEnum.html,2,['load'],['load']
Performance," ; Example: ClassDef(UserClassName, 1) // class comments *SNIFF* _field1=value _field2=""string value""; Here SNIFF mark is important. After it all expressions like field=value are parsed One could use double quotes to code string values with spaces. Fields separated from each other with spaces ; Reimplemented in TRootSnifferFull.; Definition at line 700 of file TRootSniffer.cxx. ◆ ScanRoot(). void TRootSniffer::ScanRoot ; (; TRootSnifferScanRec & ; rec). protectedvirtual . scan complete ROOT objects hierarchy For the moment it includes objects in gROOT directory and list of canvases and files Also all registered objects are included. ; One could re-implement this method to provide alternative scan methods or to extend some collection kinds ; Definition at line 965 of file TRootSniffer.cxx. ◆ SetAutoLoad(). void TRootSniffer::SetAutoLoad ; (; const char * ; scripts = """"). When specified, _autoload attribute will be always add to top element of h.json/h.hml requests Used to instruct browser automatically load special code. ; Definition at line 482 of file TRootSniffer.cxx. ◆ SetCurrentCallArg(). THttpCallArg * TRootSniffer::SetCurrentCallArg ; (; THttpCallArg * ; arg). set current http arguments, which then used in different process methods For instance, if user authorized with some user name, depending from restrictions some objects will be invisible or user get full access to the element Returns previous argument which was set before ; Definition at line 435 of file TRootSniffer.cxx. ◆ SetItemField(). Bool_t TRootSniffer::SetItemField ; (; const char * ; fullname, . const char * ; name, . const char * ; value . ). Set field for specified item. ; Definition at line 1795 of file TRootSniffer.cxx. ◆ SetReadOnly(). void TRootSniffer::SetReadOnly ; (; Bool_t ; on = kTRUE). inline . When readonly on (default), sniffer is not allowed to change ROOT structures For instance, it is not allowed to read new objects from files. ; Definition at line 190 of file TRootSniffer.h. ◆ S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootSniffer.html:38941,load,load,38941,doc/master/classTRootSniffer.html,https://root.cern,https://root.cern/doc/master/classTRootSniffer.html,1,['load'],['load']
Performance," ; Implements TVirtualGeoPainter.; Definition at line 2007 of file TGeoPainter.cxx. ◆ SetNsegments(). void TGeoPainter::SetNsegments ; (; Int_t ; nseg = 20). overridevirtual . Set number of segments to approximate circles. ; Implements TVirtualGeoPainter.; Definition at line 1992 of file TGeoPainter.cxx. ◆ SetRaytracing(). void TGeoPainter::SetRaytracing ; (; Bool_t ; flag = kTRUE). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 171 of file TGeoPainter.h. ◆ SetTopVisible(). void TGeoPainter::SetTopVisible ; (; Bool_t ; vis = kTRUE). overridevirtual . Set top geometry volume as visible. ; Implements TVirtualGeoPainter.; Definition at line 2050 of file TGeoPainter.cxx. ◆ SetTopVolume(). void TGeoPainter::SetTopVolume ; (; TGeoVolume * ; vol). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 173 of file TGeoPainter.h. ◆ SetVisLevel(). void TGeoPainter::SetVisLevel ; (; Int_t ; level = 3). overridevirtual . Set default level down to which visualization is performed. ; Implements TVirtualGeoPainter.; Definition at line 2024 of file TGeoPainter.cxx. ◆ SetVisOption(). void TGeoPainter::SetVisOption ; (; Int_t ; option = 0). overridevirtual . Set drawing mode : . option=0 (default) all nodes drawn down to vislevel; option=1 leaves and nodes at vislevel drawn; option=2 path is drawn . Implements TVirtualGeoPainter.; Definition at line 2064 of file TGeoPainter.cxx. ◆ ShapeDistancetoPrimitive(). Int_t TGeoPainter::ShapeDistancetoPrimitive ; (; const TGeoShape * ; shape, . Int_t ; numpoints, . Int_t ; px, . Int_t ; py . ); const. overridevirtual . Returns distance between point px,py on the pad an a shape. ; Implements TVirtualGeoPainter.; Definition at line 2105 of file TGeoPainter.cxx. ◆ Test(). void TGeoPainter::Test ; (; Int_t ; npoints, . Option_t * ; option . ). overridevirtual . Check time of finding ""Where am I"" for n points. ; Implements TVirtualGeoPainter.; Definition at line 2170 of file TGeoPainter.cxx. ◆ TestOve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPainter.html:41183,perform,performed,41183,doc/master/classTGeoPainter.html,https://root.cern,https://root.cern/doc/master/classTGeoPainter.html,1,['perform'],['performed']
Performance," ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Fit Panel. As you can see, the fit (solid line) doesn't really describe the data: a polynomial is nowhere close to most data points. So from the Canvas, start the fit panel and use a gaussian (""gaus"") instead of a ""pol2"" to perform the fit. (You don't know what a Gaussian is? see http://en.wikipedia.org/wiki/Gaussian_function). Figure 7: How to open the fit panel from the Canvas ""Tools"" menu; Here is what the fit panel looks like:. Figure 8: Fit Panel. Using this fit panel allows you to change the fit function and see the result after pressing ""Fit"". Now you should see the difference:. Figure 9: Distribution of ""fPosX"" leaf values, fitted with a Gaussian; The solid line is now passing through every data point. It fits (almost) perfectly the data!; . ‹ Histogramming; up; Compiling Your Code (also known as ACLiC) ›. Navigate through this book; Meet a TTree; Accessing a TTree With a TBrowser; Using TTree::Draw() to access a TTree; TTree and Its Data; Using a Macro to Read a TTree; Histogramming; Fit Panel; Compiling Your Code (also known as ACLiC); Accessing a TTree With a TSelector; Histogramming in a Selector; Using a TSelector with PROOF; The End. Sitemap. DownloadDow",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/fit-panel.html:2119,perform,perform,2119,d/fit-panel.html,https://root.cern,https://root.cern/d/fit-panel.html,1,['perform'],['perform']
Performance," ; ROOT::TImpProxy<unsigned short> ; ROOT::TNamedBranchProxy branch proxy with a name; ROOT::TSchemaMatch ; ROOT::TSchemaRule ; ROOT::TSchemaRule::TSources ; ROOT::TSchemaRuleSet ; ROOT::TTreeReaderArrayBase ; ROOT::TTreeReaderValueBase ; ROOT::v5::TF1Data The Parametric 1-D function data structure of v5::TF1; ROOT::v5::TFormula The formula base class f(x,y,z,par); ROOT::v5::TFormulaPrimitive The primitive formula; Rectangle_t ; RedirectHandle_t ; Rgl ; Roo1DMomentMorphFunction Your description goes here...; Roo1DTable 1-dimensional table; Roo2DKeysPdf Two-dimensional kernel estimation p.d.f.; Roo2DMomentMorphFunction ; RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsMoment Abstract representation of moment in a RooAbsReal in a given RooRealVar; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ClassIndex.html:25046,cache,cached,25046,root/html604/ClassIndex.html,https://root.cern,https://root.cern/root/html604/ClassIndex.html,1,['cache'],['cached']
Performance, ; Reflex::NewDelFunctions ; Reflex::NullType ; Reflex::Object ; Reflex::PrivateClass ; Reflex::PrivateEnum ; Reflex::PrivateStruct ; Reflex::PrivateUnion ; Reflex::ProtectedClass ; Reflex::ProtectedEnum ; Reflex::ProtectedStruct ; Reflex::ProtectedUnion ; Reflex::RuntimeError ; Reflex::Scope ; Reflex::Selection::AUTOSELECT ; Reflex::Selection::NODEFAULT ; Reflex::Selection::NO_SELF_AUTOSELECT ; Reflex::Selection::TRANSIENT ; Reflex::Tools ; Reflex::Type ; Reflex::TypeTemplate ; Reflex::TypedefBuilderImpl ; Reflex::UnionBuilderImpl ; Reflex::UnknownType ; Reflex::UnnamedClass ; Reflex::UnnamedEnum ; Reflex::UnnamedNamespace ; Reflex::UnnamedStruct ; Reflex::UnnamedUnion ; Reflex::VariableBuilder ; Reflex::VariableBuilderImpl ; Rgl ; Roo1DTable 1-dimensional table; Roo2DKeysPdf Two-dimensional kernel estimation p.d.f.; RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers ; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable ; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with norma,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:23426,cache,cache,23426,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,12,['cache'],"['cache', 'cached']"
Performance, ; Reflex::ProtectedStruct ; Reflex::ProtectedUnion ; Reflex::RuntimeError ; Reflex::Scope ; Reflex::Selection::AUTOSELECT ; Reflex::Selection::NODEFAULT ; Reflex::Selection::NO_SELF_AUTOSELECT ; Reflex::Selection::TRANSIENT ; Reflex::Tools ; Reflex::Type ; Reflex::TypeTemplate ; Reflex::TypedefBuilderImpl ; Reflex::UnionBuilderImpl ; Reflex::UnknownType ; Reflex::UnnamedClass ; Reflex::UnnamedEnum ; Reflex::UnnamedNamespace ; Reflex::UnnamedStruct ; Reflex::UnnamedUnion ; Reflex::VariableBuilder ; Reflex::VariableBuilderImpl ; Rgl ; Roo1DTable 1-dimensional table; Roo2DKeysPdf Two-dimensional kernel estimation p.d.f.; RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers ; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable ; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec ; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract i,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassIndex.html:23619,cache,cached,23619,root/html526/ClassIndex.html,https://root.cern,https://root.cern/root/html526/ClassIndex.html,2,['cache'],['cached']
Performance, ; Reflex::ProtectedStruct ; Reflex::ProtectedUnion ; Reflex::RuntimeError ; Reflex::Scope ; Reflex::Selection::AUTOSELECT ; Reflex::Selection::NODEFAULT ; Reflex::Selection::NO_SELF_AUTOSELECT ; Reflex::Selection::TRANSIENT ; Reflex::Tools ; Reflex::Type ; Reflex::TypeTemplate ; Reflex::TypedefBuilderImpl ; Reflex::UnionBuilderImpl ; Reflex::UnknownType ; Reflex::UnnamedClass ; Reflex::UnnamedEnum ; Reflex::UnnamedNamespace ; Reflex::UnnamedStruct ; Reflex::UnnamedUnion ; Reflex::VariableBuilder ; Reflex::VariableBuilderImpl ; Rgl ; Roo1DTable 1-dimensional table; Roo2DKeysPdf Two-dimensional kernel estimation p.d.f.; RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers ; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable ; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; Roo,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:24663,cache,cached,24663,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,1,['cache'],['cached']
Performance, ; Reflex::ProtectedStruct ; Reflex::ProtectedUnion ; Reflex::RuntimeError ; Reflex::Scope ; Reflex::Selection::AUTOSELECT ; Reflex::Selection::NODEFAULT ; Reflex::Selection::NO_SELF_AUTOSELECT ; Reflex::Selection::TRANSIENT ; Reflex::Tools ; Reflex::Type ; Reflex::TypeTemplate ; Reflex::TypedefBuilderImpl ; Reflex::UnionBuilderImpl ; Reflex::UnknownType ; Reflex::UnnamedClass ; Reflex::UnnamedEnum ; Reflex::UnnamedNamespace ; Reflex::UnnamedStruct ; Reflex::UnnamedUnion ; Reflex::VariableBuilder ; Reflex::VariableBuilderImpl ; Rgl ; Roo1DTable 1-dimensional table; Roo2DKeysPdf Two-dimensional kernel estimation p.d.f.; RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers ; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable ; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim re,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:23590,cache,cached,23590,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,1,['cache'],['cached']
Performance," ; Reimplemented from RooAbsMCStudyModule.; Definition at line 128 of file UpperLimitMCSModule.cxx. ◆ initializeInstance(). bool UpperLimitMCSModule::initializeInstance ; (; ). overridevirtual . Initialize module after attachment to RooMCStudy object. ; Reimplemented from RooAbsMCStudyModule.; Definition at line 87 of file UpperLimitMCSModule.cxx. ◆ initializeRun(). bool UpperLimitMCSModule::initializeRun ; (; Int_t ; ). overridevirtual . Initialize module at beginning of RooCMStudy run. ; Reimplemented from RooAbsMCStudyModule.; Definition at line 117 of file UpperLimitMCSModule.cxx. ◆ IsA(). TClass * RooStats::UpperLimitMCSModule::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsMCStudyModule.; Definition at line 54 of file UpperLimitMCSModule.h. ◆ processBetweenGenAndFit(). bool UpperLimitMCSModule::processBetweenGenAndFit ; (; Int_t ; ). overridevirtual . Method called after generation of toy data sample and resetting of fit parameters to initial values and before actual fit is performed. ; Any modifications to fit parameters will apply to next fit operation. Note that setConstant flag of fit parameters are not explicitly reset by RooMCStudy, so any changes made to these flags here will persist ; Reimplemented from RooAbsMCStudyModule.; Definition at line 164 of file UpperLimitMCSModule.cxx. ◆ Streamer(). void RooStats::UpperLimitMCSModule::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsMCStudyModule. ◆ StreamerNVirtual(). void RooStats::UpperLimitMCSModule::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 54 of file UpperLimitMCSModule.h. Member Data Documentation. ◆ _cl. double RooStats::UpperLimitMCSModule::_cl. private . Definition at line 51 of file UpperLimitMCSModule.h. ◆ _data. RooDataSet* RooStats::UpperLimitMCSModule::_data. private . Summary dataset to store results. ; Definition at l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1UpperLimitMCSModule.html:17465,perform,performed,17465,doc/master/classRooStats_1_1UpperLimitMCSModule.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1UpperLimitMCSModule.html,1,['perform'],['performed']
Performance," ; Reimplemented from TObject.; Definition at line 3683 of file TCling.cxx. ◆ RefreshClassInfo(). void TCling::RefreshClassInfo ; (; TClass * ; cl, . const clang::NamedDecl * ; def, . bool ; alias . ). Internal function. Actually do the update of the ClassInfo when seeing. ; Definition at line 6635 of file TCling.cxx. ◆ RegisterLoadedSharedLibrary(). void TCling::RegisterLoadedSharedLibrary ; (; const char * ; name). private . Register a new shared library name with the interpreter; add it to fSharedLibs. ; Definition at line 3415 of file TCling.cxx. ◆ RegisterModule(). void TCling::RegisterModule ; (; const char * ; modulename, . const char ** ; headers, . const char ** ; includePaths, . const char * ; payloadCode, . const char * ; fwdDeclsCode, . void(*)() ; triggerFunc, . const FwdDeclArgsToKeepCollection_t & ; fwdDeclsArgToSkip, . const char ** ; classesHeaders, . Bool_t ; lateRegistration = false, . Bool_t ; hasCxxModule = false . ). finalvirtual . Inject the module named ""modulename"" into cling; load all headers. ; headers is a 0-terminated array of header files to #include after loading the module. The module is searched for in all $LD_LIBRARY_PATH entries (or PATH% on Windows). This function gets called by the static initialization of dictionary libraries. The payload code is injected ""as is"" in the interpreter. The value of 'triggerFunc' is used to find the shared library location. ; Implements TInterpreter.; Definition at line 2010 of file TCling.cxx. ◆ RegisterPrebuiltModulePath(). bool TCling::RegisterPrebuiltModulePath ; (; const std::string & ; FullPath, . const std::string & ; ModuleMapName = ""module.modulemap"" . ); const. finalvirtual . Returnstrue if the module map was loaded, false on error or if the map was already loaded. ; Implements TInterpreter.; Definition at line 1906 of file TCling.cxx. ◆ RegisterRdictForLoadPCM(). void TCling::RegisterRdictForLoadPCM ; (; const std::string & ; pcmFileNameFullPath, . llvm::StringRef * ; pcmContent . ). priva",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:124903,load,load,124903,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['load'],['load']
Performance, ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooRealProxy_effEfficiency function; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; RooArgSet*_fixedNset! Fixed normalization set overriding default normalization set (if provided); static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; const RooArgSet*_nset! Normalization set to be used in evaluation; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooRealProxy_pdfProbability Density function; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooEffProd.html:37304,cache,cache,37304,root/html526/RooEffProd.html,https://root.cern,https://root.cern/root/html526/RooEffProd.html,1,['cache'],['cache']
Performance, ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooRealProxy_effEfficiency function; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; RooArgSet*_fixedNset! Fixed normalization set overriding default normalization set (if provided); static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; const RooArgSet*_nset! Normalization set to be used in evaluation; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooRealProxy_pdfProbability Density function; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaxim,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooEffProd.html:37686,cache,cache,37686,root/html528/RooEffProd.html,https://root.cern,https://root.cern/root/html528/RooEffProd.html,2,['cache'],['cache']
Performance," ; TMVA_LSTM : [dataset] : Evaluation of TMVA_LSTM on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.0494 sec ; Factory : Test method: TMVA_DNN for Classification performance; : ; : Evaluate deep neural network on CPU using batches with size = 800; : ; TMVA_DNN : [dataset] : Evaluation of TMVA_DNN on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.0212 sec ; Factory : Test method: PyKeras_LSTM for Classification performance; : ; : Setting up tf.keras; : Using TensorFlow version 2; : Use Keras version from TensorFlow : tf.keras; : Applying GPU option: gpu_options.allow_growth=True; : Disabled TF eager execution when evaluating model ; : Loading Keras Model ; : Loaded model from file: trained_model_LSTM.h5; PyKeras_LSTM : [dataset] : Evaluation of PyKeras_LSTM on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.202 sec ; Factory : Test method: BDTG for Classification performance; : ; BDTG : [dataset] : Evaluation of BDTG on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.00597 sec ; Factory : ␛[1mEvaluate all methods␛[0m; Factory : Evaluate classifier: TMVA_LSTM; : ; TMVA_LSTM : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 300 , it is larger than 200; Factory : Evaluate classifier: TMVA_DNN; : ; TMVA_DNN : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 300 , it is larger than 200; Factory : Evaluate classifier: PyKeras_LSTM; : ; PyKeras_LSTM : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Dataset[dataset] : variable plots are not ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html:46112,perform,performance,46112,doc/master/TMVA__RNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html,1,['perform'],['performance']
Performance," ; TMVA_LSTM : [dataset] : Evaluation of TMVA_LSTM on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.0529 sec ; Factory : Test method: TMVA_DNN for Classification performance; : ; : Evaluate deep neural network on CPU using batches with size = 800; : ; TMVA_DNN : [dataset] : Evaluation of TMVA_DNN on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.0218 sec ; Factory : Test method: PyKeras_LSTM for Classification performance; : ; : Setting up tf.keras; : Using TensorFlow version 2; : Use Keras version from TensorFlow : tf.keras; : Applying GPU option: gpu_options.allow_growth=True; : Disabled TF eager execution when evaluating model ; : Loading Keras Model ; : Loaded model from file: trained_model_LSTM.h5; PyKeras_LSTM : [dataset] : Evaluation of PyKeras_LSTM on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.249 sec ; Factory : Test method: BDTG for Classification performance; : ; BDTG : [dataset] : Evaluation of BDTG on testing sample (800 events); : Elapsed time for evaluation of 800 events: 0.00679 sec ; Factory : ␛[1mEvaluate all methods␛[0m; Factory : Evaluate classifier: TMVA_LSTM; : ; TMVA_LSTM : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 300 , it is larger than 200; Factory : Evaluate classifier: TMVA_DNN; : ; TMVA_DNN : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 300 , it is larger than 200; Factory : Evaluate classifier: PyKeras_LSTM; : ; PyKeras_LSTM : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Dataset[dataset] : variable plots are not ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:53719,perform,performance,53719,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['perform'],['performance']
Performance," ; argsinitializer_list for a vector to apply func on. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with const std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 259 of file TExecutor.hxx. ◆ MapReduce() [4/5]. template<class F , class T , class R , class Cond > . auto ROOT::Internal::TExecutor::MapReduce ; (; F ; func, . std::vector< T > & ; args, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F, T>. Execute a function over the elements of a vector (Map) and accumulate the results into a single value (Reduce). ; Benefits from partial reduction into nChunks intermediate results if the execution policy is multithreaded. Otherwise, it ignores the nChunks argument and performs a normal MapReduce operation.; Parameters. funcFunction to be executed. Must take an element of the sequence passed assecond argument as a parameter. ; argsVector of elements passed as an argument to func. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with const std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 282 of file TExecutor.hxx. ◆ MapReduce() [5/5]. template<class F , class R , class Cond > . auto ROOT::Internal::TExecutor::MapReduce ; (; F ; func, . unsigned ; nTimes, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F>. Execute a function nTimes (Map) and accumulate the results into a single value (Reduce). ; Benefits from partial reducti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html:18595,perform,performs,18595,doc/v632/classROOT_1_1Internal_1_1TExecutor.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1Internal_1_1TExecutor.html,2,['perform'],['performs']
Performance," ;  . Protected Member Functions; void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients);  Update the biases, given the current bias gradients. ;  ; void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, const std::vector< Matrix_t > &weightGradients);  Update the weights, given the current weight gradients. ;  . Protected Attributes; std::vector< std::vector< Matrix_t > > fBiasUpdates;  The accumulation of the past Biases for performing updates. ;  ; Scalar_t fEpsilon;  The Smoothing term used to avoid division by zero. ;  ; Scalar_t fMomentum;  The momentum used for training. ;  ; std::vector< std::vector< Matrix_t > > fPastSquaredBiasGradients;  The sum of the square of the past bias gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fPastSquaredWeightGradients;  The sum of the square of the past weight gradients associated with the deep net. ;  ; Scalar_t fRho;  The Rho constant used by the optimizer. ;  ; std::vector< std::vector< Matrix_t > > fWeightUpdates;  The accumulation of the past Weights for performing updates. ;  ; std::vector< std::vector< Matrix_t > > fWorkBiasTensor1;  working tensor used to keep a temporary copy of bias or bias gradients ;  ; std::vector< std::vector< Matrix_t > > fWorkBiasTensor2;  working tensor used to keep a temporary copy of bias or bias gradients ;  ; std::vector< std::vector< Matrix_t > > fWorkWeightTensor1;  working tensor used to keep a temporary copy of weights or weight gradients ;  ; std::vector< std::vector< Matrix_t > > fWorkWeightTensor2;  working tensor used to keep a temporary copy of weights or weight gradients ;  ;  Protected Attributes inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; DeepNet_t & fDeepNet;  The reference to the deep net. ;  ; size_t fGlobalStep;  The current global step count during training. ;  ; Scalar_t fLearningRate;  The learning rate used for training. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TRMSProp.html:3532,optimiz,optimizer,3532,doc/master/classTMVA_1_1DNN_1_1TRMSProp.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TRMSProp.html,1,['optimiz'],['optimizer']
Performance," ;  . Protected Member Functions;  TGeoParallelWorld (const TGeoParallelWorld &)=delete;  switch between different algorithm implementations ;  ; TGeoParallelWorld & operator= (const TGeoParallelWorld &)=delete;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; AccelerationMode fAccMode = AccelerationMode::kVoxelFinder;  to keep the vector of primitive axis aligned bounding boxes ;  ; void * fBoundingBoxes = nullptr;  stores bounding boxes serving a quick safety candidates (to be used with the VoxelGrid and SafetyVoxelInfo) ;  ; void * fBVH = nullptr;  array of physical nodes ;  ; TGeoManager * fGeoManager;  ; Bool_t fIsClosed;  ; TGeoPhysicalNode * fLastState;  helper volume ;  ; TObjArray * fPaths;  ; TObjArray * fPhysical;  Last PN touched. ;  ; std::vector< unsigned int > fSafetyCandidateStore {};  A regular 3D cache layer for fast point-based safety lookups. ;  ; TGeoVoxelGrid< SafetyVoxelInfo > * fSafetyVoxelCache;  BVH helper structure for safety and navigation. ;  ; Bool_t fUseOverlaps;  ; TGeoVolume * fVolume;  Closed flag. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions; TGeoPhysicalNode * FindNextBoundaryBVH (Double_t point[3], Double_t dir[3], Double_t &step, Double_t stepmax=1.E30);  Same functionality as TGeoNavigator::FindNextDaughterBoundary for the parallel world. ;  ; TGeoPhysicalNode * FindNextBoundaryLoop (Double_t point[3], Double_t dir[3], Double_t &step, Double_t stepmax=1.E30);  Same functionality as TGeoNavigator::FindNextDaughterBoundary for the parallel world in a trivial loop version (for debugging) ;  ; TGeoPhysicalNode * FindNextBoundaryOrig (Double_t point[3], Double_t dir[3], Double_t &step, Double_t stepmax=1.E30);  Same functionality as TGeoNavigator::FindNextDaughterBoundary for the par",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoParallelWorld.html:14175,cache,cache,14175,doc/master/classTGeoParallelWorld.html,https://root.cern,https://root.cern/doc/master/classTGeoParallelWorld.html,1,['cache'],['cache']
Performance," ;  ; Bool_t cd (const char *path);  ; virtual void CleanCompiledMacros ();  Remove the shared libs produced by the CompileMacro() function, together with their rootmaps, linkdefs, and pcms (and some more on Windows). ;  ; virtual void Closelog ();  Close connection to system log daemon. ;  ; virtual int CompileMacro (const char *filename, Option_t *opt="""", const char *library_name="""", const char *build_dir="""", UInt_t dirmode=0);  This method compiles and loads a shared library containing the code from the file ""filename"". ;  ; virtual char * ConcatFileName (const char *dir, const char *name);  Concatenate a directory and a file name. User must delete returned string. ;  ; char * DynamicPathName (const char *lib, Bool_t quiet=kFALSE);  Find a dynamic library called lib using the system search paths. ;  ; virtual Func_t DynFindSymbol (const char *module, const char *entry);  Find specific entry point in specified library. ;  ; virtual EAclicMode GetAclicMode () const;  AclicMode indicates whether the library should be built in debug mode or optimized. ;  ; virtual Int_t GetAclicProperties () const;  Return the ACLiC properties field. ;  ; void GetBeepDefaults (Int_t &freq, Int_t &duration) const;  ; virtual const char * GetBuildArch () const;  Return the build architecture. ;  ; virtual const char * GetBuildCompiler () const;  Return the build compiler. ;  ; virtual const char * GetBuildCompilerVersion () const;  Return the build compiler version. ;  ; virtual const char * GetBuildCompilerVersionStr () const;  Return the build compiler version identifier string. ;  ; virtual const char * GetBuildDir () const;  Return the path of the build directory. ;  ; virtual const char * GetBuildNode () const;  Return the build node name. ;  ; virtual void * GetDirPtr () const;  ; const char * GetErrorStr () const;  ; virtual const char * GetFlagsDebug () const;  Return the debug flags. ;  ; virtual const char * GetFlagsOpt () const;  Return the optimization flags. ;  ; virtual T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWinNTSystem.html:15596,optimiz,optimized,15596,doc/master/classTWinNTSystem.html,https://root.cern,https://root.cern/doc/master/classTWinNTSystem.html,1,['optimiz'],['optimized']
Performance," ;  ; Long64_t DrawSelect (const char *dsetname, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0, TObject *enl=0);  Execute the specified drawing action on a data set which is stored on the master with name 'dsetname'. ;  ; virtual Long64_t DrawSelect (TDSet *dset, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0);  Execute the specified drawing action on a data set (TDSet). ;  ; virtual Int_t Echo (const char *str);  Sends a string to master and workers and expect them to echo it back to the client via a message. ;  ; virtual Int_t Echo (const TObject *obj);  Sends an object to master and workers and expect them to send back a message with the output of its TObject::Print(). ;  ; Int_t EnablePackage (const char *package, Bool_t notOnClient=kFALSE, TList *workers=0);  Enable specified package. ;  ; Int_t EnablePackage (const char *package, const char *loadopts, Bool_t notOnClient=kFALSE, TList *workers=0);  Enable specified package. ;  ; Int_t EnablePackage (const char *package, TList *loadopts, Bool_t notOnClient=kFALSE, TList *workers=0);  Enable specified package. ;  ; Int_t Exec (const char *cmd, Bool_t plusMaster=kFALSE);  Send command to be executed on the PROOF master and/or slaves. ;  ; Int_t Exec (const char *cmd, const char *ord, Bool_t logtomacro=kFALSE);  Send command to be executed on node of ordinal 'ord' (use ""0"" for master). ;  ; virtual Bool_t ExistsDataSet (const char *dataset);  Returns kTRUE if 'dataset' exists, kFALSE otherwise. ;  ; void Feedback (TList *objs);  Get list of feedback objects. ;  ; Long64_t Finalize (const char *queryref, Bool_t force=kFALSE);  Finalize query with reference ref. ;  ; Long64_t Finalize (Int_t query=-1, Bool_t force=kFALSE);  Finalize the qry-th query in fQueries. ;  ; TList * FindDataSets (const char *searchString, const char *optStr="""");  Find datasets, returns in a TList all found datasets",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:6935,load,loadopts,6935,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,3,['load'],['loadopts']
Performance," ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; Optimisation interface; These functions allow RooFit to optimise a computation graph, to keep track of cached values, and to invalidate caches. . virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:21571,cache,cacheList,21571,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,2,['cache'],"['cacheList', 'cached']"
Performance, ;  ; bool Minimize () override;  method to perform the minimization ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::Math::IMultiGenFunction * ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:1490,perform,perform,1490,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,1,['perform'],['perform']
Performance," ;  ; const TQObjectInitBehavior * DefineBehavior (TQObject *, TQObject *);  ; const TInitBehavior * DefineBehavior (void *, void *);  ; bool DeleteChangesMemory ();  ; bool DeleteChangesMemoryImpl ();  ; void DisableParBranchProcessing ();  Globally disables the IMT use case of parallel branch processing, deactivating the corresponding locks. ;  ; const TCollection & EmptyCollection ();  Return an empty collection for use with nullptr TRangeCast. ;  ; void EnableParBranchProcessing ();  Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in ROOT, activating the required locks. ;  ; void GenericShowMembers (const char *topClassName, void *obj, TMemberInspector &R__insp, bool transientMember);  ; TString GetArrayType (TStreamerElement *element, const char *subtype, TTreeProxyGenerator::EContainer container);  ; template<typename T > ; TClass * GetClassHelper (Bool_t load, Bool_t silent, std::false_type);  ; template<typename T > ; TClass * GetClassHelper (Bool_t, Bool_t, std::true_type);  ; std::string GetDemangledTypeName (const std::type_info &t);  ; ErrorSystemMsgHandlerFunc_t GetErrorSystemMsgHandler ();  ; std::shared_ptr< ROOT::Internal::RTaskArenaWrapper > GetGlobalTaskArena (unsigned maxConcurrency=0);  Factory function returning a shared pointer to the instance of the global RTaskArenaWrapper. ;  ; TROOT * GetROOT1 ();  ; TROOT * GetROOT2 ();  ; static Func_t GetSymInLibImt (const char *funcname);  ; template<typename T , typename F > ; auto GetTheRightOp (T(F::*opPtr)(const T *, const double *)) -> decltype(opPtr);  Internal class used by TF1 to get the right operator() signature from a Functor with several ones. ;  ; template<typename T , typename F > ; auto GetTheRightOp (T(F::*opPtr)(T *, double *)) -> decltype(opPtr);  ; static TVersionCheck gVersionCheck (ROOT_VERSION_CODE);  ; template<typename > ; constexpr bool hasBeginEnd (...);  ; template<typename T > ; constexpr auto hasBeginEnd (int) -> decltype(st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:13692,load,load,13692,doc/v632/namespaceROOT_1_1Internal.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html,1,['load'],['load']
Performance," ;  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredBiasGradients ();  ; std::vector< Matrix_t > & GetPastSquaredBiasGradientsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredWeightGradients ();  ; std::vector< Matrix_t > & GetPastSquaredWeightGradientsAt (size_t i);  ; Scalar_t GetRho () const;  ; std::vector< std::vector< Matrix_t > > & GetWeightUpdates ();  ; std::vector< Matrix_t > & GetWeightUpdatesAt (size_t i);  ;  Public Member Functions inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected Member Functions; void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients);  Update the biases, given the current bias gradients. ;  ; void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, const std::vector< Matrix_t > &weightGradients);  Update the weights, given the current weight gradients. ;  . Protected Attributes; std::vector< std::vector< Matrix_t > > fBiasUpdates;  The accumulation of the past Biases for performing updates. ;  ; Scalar_t fEpsilon;  The Smoothing term used to avoid division by zero. ;  ; Scalar_t fMomentum;  The momentum used for training. ;  ; std::vector< std::vector< Matrix_t > > fPastSquaredBiasGradients;  The sum of the square of the past bias gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fPastSquaredWeightGradients;  The sum of the square of the past weight gradients associated with the deep net. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TRMSProp.html:2498,optimiz,optimization,2498,doc/master/classTMVA_1_1DNN_1_1TRMSProp.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TRMSProp.html,1,['optimiz'],['optimization']
Performance," ;  ; virtual TClass * IsA () const;  ; void MakeClass (const TString &classFileName=TString("""")) const;  create reader class for classifier -> overwrites base class function create specific class for TMultiLayerPerceptron ;  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; void ReadWeightsFromStream (std::istream &istr);  read weights from stream since the MLP can not read from the stream, we 1st: write the weights to temporary file ;  ; virtual void ReadWeightsFromStream (TFile &);  ; void ReadWeightsFromXML (void *wghtnode);  rebuild temporary textfile from xml weightfile and load this file into MLP ;  ; void SetHiddenLayer (TString hiddenlayer="""");  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Train (void);  performs TMlpANN training available learning methods: ;  ;  Public Member Functions inherited from TMVA::MethodBase;  MethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  standard constructor ;  ;  MethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  constructor used for Testing + Application of the MVA, only (no training), using given WeightFiles ;  ; virtual ~MethodBase ();  destructor ;  ; void AddOutput (Types::ETreeType type, Types::EAnalysisType analysisType);  ; TDirectory * BaseDir () const;  returns the ROOT directory where info/histograms etc of the corresponding MVA method instance are stored ;  ; virtual void CheckSetup ();  check may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; DataSet * Data () const;  ; DataSetInfo & DataInfo () const;  ; virtual void DeclareCompatibilityOptions ();  options that are used ONLY for the READER to ensure backward compatibility they are hence without any effect (the reader is only reading the training options that HAD been used at the training of the .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodTMlpANN.html:2064,load,load,2064,doc/master/classTMVA_1_1MethodTMlpANN.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodTMlpANN.html,2,"['load', 'perform']","['load', 'performs']"
Performance," ;  ; virtual TVirtualProofPlayer * MakePlayer (const char *player=0, TSocket *s=0);  Construct a TProofPlayer object. ;  ; void PrepareInputDataFile (TString &dataFile);  Prepare the file with the input data objects to be sent the master; the objects are taken from the dedicated list and / or the specified file. ;  ; Int_t RemoveWorkers (TList *wrks);  Used for shuting down the workres after a query is finished. ;  ; virtual void SaveWorkerInfo ();  Save information about the worker set in the file .workers in the working dir. ;  ; Int_t SendFile (const char *file, Int_t opt=(kBinary|kForward|kCp|kCpBin), const char *rfile=0, TSlave *sl=0);  Send a file to master or slave servers. ;  ; void SetDSet (TDSet *dset);  ; void SetFeedback (TString &opt, TString &optfb, Int_t action);  Extract from opt in optfb information about wanted feedback settings. ;  ; void SetPlayer (TVirtualProofPlayer *player);  Set a new PROOF player. ;  ; void SetupWorkersEnv (TList *wrks, Bool_t increasingpool=kFALSE);  Set up packages, loaded macros, include and lib paths ... ;  ; virtual Bool_t StartSlaves (Bool_t attach=kFALSE);  Start up PROOF slaves. ;  ; void UpdateDialog ();  Final update of the progress dialog. ;  ; virtual void ValidateDSet (TDSet *dset);  Validate a TDSet. ;  ; Int_t VerifyDataSetParallel (const char *uri, const char *optStr);  Internal function for parallel dataset verification used TProof::VerifyDataSet and TProofLite::VerifyDataSet. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  . Private Member Functions;  TProofLite (const TProofLite &);  ; Int_t CleanupSandbox ();  Remove old sessions dirs keep at most 'Proof.MaxOldSessions' (default 10) ;  ; Int_t CreateSandbo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:38816,load,loaded,38816,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['load'],['loaded']
Performance," ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooCachedPdf.h>. Inheritance diagram for RooCachedPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooCachedPdf() [1/4]. RooCachedPdf::RooCachedPdf ; (; ). inline . Definition at line 22 of file RooCachedPdf.h. ◆ RooCachedPdf() [2/4]. RooCachedPdf::RooCachedPdf ; (; const char * ; name, . const char * ; title, . RooAbsPdf & ; _pdf, . const RooArgSet & ; cacheObs . ). Constructor taking name, title and function to be cached and fixed choice of variable to cache. ; To control granularity of the binning of the cache histogram set the desired properties in the binning named ""cache"" in the observables of the function. If the fixed set of cache observables does not match the observables defined in the use context of the p.d.f the cache is still filled completely. Ee.g. when it is specified to cache x and p and only x is a observable in the given use context the cache histogram will store sampled values for all values of observable x and parameter p. In such a mode of operation the cache will also not be recalculated if the observable p changes ; Definition at line 66 of file RooCachedPdf.cxx. ◆ RooCachedPdf() [3/4]. RooCachedPdf::RooCachedPdf ; (; const char * ; name, . const char * ; title, . RooAbsPdf & ; _pdf . ). Constructor taking name, title and function to be cached. ; To control granularity of the binning of the cache histogram",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCachedPdf.html:77331,cache,cacheObs,77331,doc/master/classRooCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooCachedPdf.html,1,['cache'],['cacheObs']
Performance," ;  ;  ~TGeoPainter () override;  Default destructor. ;  ; void AddSize3D (Int_t numpoints, Int_t numsegs, Int_t numpolys) override;  Add numpoints, numsegs, numpolys to the global 3D size. ;  ; TVirtualGeoTrack * AddTrack (Int_t id, Int_t pdgcode, TObject *part) override;  Create a primary TGeoTrack. ;  ; void AddTrackPoint (Double_t *point, Double_t *box, Bool_t reset=kFALSE) override;  Average center of view of all painted tracklets and compute view box. ;  ; void BombTranslation (const Double_t *tr, Double_t *bombtr) override;  Get the new 'bombed' translation vector according current exploded view mode. ;  ; void CheckBoundaryErrors (Int_t ntracks=1000000, Double_t radius=-1.) override;  Check pushes and pulls needed to cross the next boundary with respect to the position given by FindNextBoundary. ;  ; void CheckBoundaryReference (Int_t icheck=-1) override;  Check the boundary errors reference file created by CheckBoundaryErrors method. ;  ; void CheckEdit ();  Check if Ged library is loaded and load geometry editor classe. ;  ; void CheckGeometry (Int_t nrays, Double_t startx, Double_t starty, Double_t startz) const override;  Geometry checking method (see TGeoChecker). ;  ; void CheckGeometryFull (Bool_t checkoverlaps=kTRUE, Bool_t checkcrossings=kTRUE, Int_t nrays=10000, const Double_t *vertex=nullptr) override;  Geometry checking method (see: TGeoManager::CheckGeometry()) ;  ; void CheckOverlaps (const TGeoVolume *vol, Double_t ovlp=0.1, Option_t *option="""") const override;  Check overlaps for the top volume of the geometry, within a limit OVLP. ;  ; void CheckPoint (Double_t x=0, Double_t y=0, Double_t z=0, Option_t *option="""", Double_t safety=0.) override;  Check current point in the geometry. ;  ; void CheckShape (TGeoShape *shape, Int_t testNo, Int_t nsamples, Option_t *option) override;  Test for shape navigation methods. ;  ; Int_t CountNodes (TGeoVolume *vol, Int_t level) const;  Count number of visible nodes down to a given level. ;  ; Int_t CountVi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPainter.html:1566,load,loaded,1566,doc/master/classTGeoPainter.html,https://root.cern,https://root.cern/doc/master/classTGeoPainter.html,2,['load'],"['load', 'loaded']"
Performance," ;  CCacheElemNormalization set with for above integral ;  CGenSpec;  CRooAbsProxyRooAbsProxy is the abstact interface for proxy classes ;  ►CRooAbsRealRooAbsReal is the common abstract base class for objects that represent a real value and implements functionality common to all real-valued objects such as the ability to plot them, to construct integrals of them, the ability to advertise (partial) analytical integrals etc ;  CEvalError;  CPlotOpt;  CRooAbsRealLValueRooAbsRealLValue is the common abstract base class for objects that represent a real value that may appear on the left hand side of an equation ('lvalue') Each implementation must provide a setVal() member to allow direct modification of the value ;  CRooAbsRootFinderRooAbsRootFinder is the abstract interface for finding roots of real-valued 1-dimensional function that implements the RooAbsFunc interface ;  CRooAbsSelfCachedPdfRooAbsSelfCachedPdf is an abstract base class for probability density functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsSelfCachedRealRooAbsSelfCachedReal is an abstract base class for functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate() ;  CRooAbsStringRooAbsString is the common abstract base class for objects that represent a string value ;  CRooAbsStudyRooAbsStudy is an abstract base class for RooStudyManager modules ;  CRooAbsTestStatisticRooAbsTestStatistic is the abstract base class for all test statistics ;  CRooAcceptRejectClass RooAcceptReject is a generic toy monte carlo generator implement the accept/reject sampling technique on any positively valued function ;  CRooAdaptiveGaussKronrodIntegrator1DRooAdaptiveGaussKronrodIntegrator1D implements the Gauss-Kronrod integration algorithm ;  CRooAdaptiveIntegratorNDRooAdaptiveIntegratorND implements an adaptive one-dimensional numerical integration algorithm ;  CRooAddGenContextRooAddGenContext is an efficie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:79347,cache,cached,79347,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,4,['cache'],['cached']
Performance," ;  CTTensorBatchTTensorBatch ;  CTTensorBatchIteratorTTensorBatchIterator ;  CTTensorDataLoaderTTensorDataLoader ;  CTTensorDataLoader< AData, TReference< AReal > >;  CVGeneralLayerGeneric General Layer class ;  ►NExperimental;  CClassification;  CClassificationResult;  ►NkNN;  CEvent;  CModulekNN;  CNodeThis file contains binary tree and global function template that searches tree for k-nearest neigbors ;  CAbsoluteDeviationLossFunctionAbsolute Deviation Loss Function ;  CAbsoluteDeviationLossFunctionBDTAbsolute Deviation BDT Loss Function ;  CAbsValue;  CBDTEventWrapper;  CBinarySearchTreeA simple Binary search tree including a volume search method ;  CBinarySearchTreeNodeNode for the BinarySearch or Decision Trees ;  CBinaryTreeBase class for BinarySearch and Decision Trees ;  CCCPrunerA helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) ;  ►CCCTreeWrapper;  CCCTreeNode;  CClassificationClass to perform two class classification ;  CClassificationResultClass to save the results of the classifier ;  CClassifierFactoryThis is the MVA factory ;  CClassInfoClass that contains all the information of a class ;  Ccompose_binary_t;  Ccompose_unary_t;  ►CConfigSingleton class for global configuration settings used by TMVA ;  CIONames;  CVariablePlotting;  CConfigurable;  CConvergenceTestCheck for convergence ;  CCostComplexityPruneToolA class to prune a decision tree using the Cost Complexity method ;  CCrossEntropyImplementation of the CrossEntropy as separation criterion ;  CCrossValidationClass to perform cross validation, splitting the dataloader into folds ;  CCrossValidationFoldResult;  CCrossValidationResultClass to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation ;  CCvSplit;  CCvSplitKFolds;  CCvSplitKFoldsExpr;  CDataInputHandlerClass that contains all the data information ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/annotated.html:79674,perform,perform,79674,doc/v614/annotated.html,https://root.cern,https://root.cern/doc/v614/annotated.html,1,['perform'],['perform']
Performance," << ""fitness. In such a case, it is recommended to broaden the search "" << Endl;; 1767 Log() << ""by increasing the population size (\""popSize\"") and to give the GA "" << Endl;; 1768 Log() << ""more time to find improvements by increasing the number of steps"" << Endl;; 1769 Log() << ""(\""nsteps\"")"" << Endl;; 1770 Log() << "" -> increase \""popSize\"" (at least >10 * number of variables)"" << Endl;; 1771 Log() << "" -> increase \""nsteps\"""" << Endl;; 1772 Log() << """" << Endl;; 1773 Log() << bold << ""Simulated Annealing (SA) algorithm:"" << resbold << Endl;; 1774 Log() << """" << Endl;; 1775 Log() << ""\""Increasing Adaptive\"" approach:"" << Endl;; 1776 Log() << """" << Endl;; 1777 Log() << ""The algorithm seeks local minima and explores their neighborhoods, while"" << Endl;; 1778 Log() << ""changing the ambient temperature depending on the number of failures"" << Endl;; 1779 Log() << ""in the previous steps. The performance can be improved by increasing"" << Endl;; 1780 Log() << ""the number of iteration steps (\""MaxCalls\""), or by adjusting the"" << Endl;; 1781 Log() << ""minimal temperature (\""MinTemperature\""). Manual adjustments of the"" << Endl;; 1782 Log() << ""speed of the temperature increase (\""TemperatureScale\"" and \""AdaptiveSpeed\"")"" << Endl;; 1783 Log() << ""to individual data sets should also help. Summary:"" << brk << Endl;; 1784 Log() << "" -> increase \""MaxCalls\"""" << brk << Endl;; 1785 Log() << "" -> adjust \""MinTemperature\"""" << brk << Endl;; 1786 Log() << "" -> adjust \""TemperatureScale\"""" << brk << Endl;; 1787 Log() << "" -> adjust \""AdaptiveSpeed\"""" << Endl;; 1788 Log() << """" << Endl;; 1789 Log() << ""\""Decreasing Adaptive\"" approach:"" << Endl;; 1790 Log() << """" << Endl;; 1791 Log() << ""The algorithm calculates the initial temperature (based on the effect-"" << Endl;; 1792 Log() << ""iveness of large steps) and the multiplier that ensures to reach the"" << Endl;; 1793 Log() << ""minimal temperature with the requested number of iteration steps."" << Endl;; 1794 Log() << ""The performance",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:70902,perform,performance,70902,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,1,['perform'],['performance']
Performance," << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  . Public Member Functions;  TEveTrackPropagator (const char *n=""TEveTrackPropagator"", const char *t="""", TEveMagField *field=nullptr, Bool_t own_field=kTRUE);  Default constructor. ;  ;  ~TEveTrackPropagator () override;  Destructor. ;  ; void CheckReferenceCount (const TEveException &eh=""TEveElement::CheckReferenceCount "") override;  Check reference count - virtual from TEveElement. ;  ; void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE) override;  Element-change notification. ;  ; void FillPointSet (TEvePointSet *ps) const;  Reset ps and populate it with points in propagation cache. ;  ; Int_t GetCurrentPoint () const;  Get index of current point on track. ;  ; Double_t GetDelta () const;  ; Bool_t GetEditPathMarks () const;  ; Bool_t GetFitCluster2Ds () const;  ; Bool_t GetFitDaughters () const;  ; Bool_t GetFitDecay () const;  ; Bool_t GetFitLineSegments () const;  ; Bool_t GetFitReferences () const;  ; const std::vector< TEveVector4D > & GetLastPoints () const;  ; TEveVectorD GetMagField (Double_t x, Double_t y, Double_t z);  ; Double_t GetMaxAng () const;  ; Double_t GetMaxOrbs () const;  ; Double_t GetMaxR () const;  ; Double_t GetMaxStep () const;  ; Double_t GetMaxZ () const;  ; Double_t GetMinAng () const;  Get maximum step angle. ;  ; UChar_t GetProjTrackBreaking () const;  ; Bool_t GetRnrCluster2Ds () const;  ; Bool_t GetRnrDaughters () const;  ; Bool_t GetRnrDecay () const;  ; Bool_t GetRnrFV () const;  ; Bool_t GetRnrPTBMarkers () const;  ; Bool_t GetRnrReferences () const;  ; EStepper_e GetStepper",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTrackPropagator.html:3497,cache,cache,3497,doc/master/classTEveTrackPropagator.html,https://root.cern,https://root.cern/doc/master/classTEveTrackPropagator.html,1,['cache'],['cache']
Performance," << ( 3 )); };  ;  Protected Member Functions inherited from TVirtualFitter;  TVirtualFitter (const TVirtualFitter &tvf);  copy constructor ;  ; TVirtualFitter & operator= (const TVirtualFitter &tvf);  assignment operator ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TVirtualFitter; Double_t * fCache;  [fCacheSize] Array of points data (fNpoints*fPointSize < fCacheSize words) ;  ; Int_t fCacheSize;  Size of the fCache array. ;  ; void(* fFCN )(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);  ; TMethodCall * fMethodCall;  Pointer to MethodCall in case of interpreted function. ;  ; Int_t fNpoints;  Number of points to fit. ;  ; TObject * fObjectFit;  Pointer to object being fitted. ;  ; Foption_t fOption;  Struct with the fit options. ;  ; Int_t fPointSize;  Number of words per point in the cache. ;  ; TObject * fUserFunc;  Pointer to user theoretical function (a TF1*) ;  ; Int_t fXfirst;  First bin on X axis. ;  ; Int_t fXlast;  Last bin on X axis. ;  ; Int_t fYfirst;  First bin on Y axis. ;  ; Int_t fYlast;  Last bin on Y axis. ;  ; Int_t fZfirst;  First bin on Z axis. ;  ; Int_t fZlast;  Last bin on Z axis. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TFitter.h>. Inheritance diagram for TFitter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TFitter() [1/2]. TFitter::TFitter ; (; const TFitter & ; ). private . ◆ TFitter() [2/2]. TFitter::TFitter ; (; Int_t ; maxpar = 25). Default constructor. ; Definition at line 39 of file TFitter.cxx. ◆ ~TFitter(). TFitter::~TFitter ; (; ). override . Default destructor. ; Definition at line 51 of file TFitter.cxx. Member Function Documentation. ◆ Chisquare(). Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFitter.html:18223,cache,cache,18223,doc/master/classTFitter.html,https://root.cern,https://root.cern/doc/master/classTFitter.html,1,['cache'],['cache']
Performance," << ( 3 )); };  ;  Protected Member Functions inherited from TVirtualFitter;  TVirtualFitter (const TVirtualFitter &tvf);  copy constructor ;  ; TVirtualFitter & operator= (const TVirtualFitter &tvf);  assignment operator ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TVirtualFitter; Double_t * fCache;  [fCacheSize] Array of points data (fNpoints*fPointSize < fCacheSize words) ;  ; Int_t fCacheSize;  Size of the fCache array. ;  ; void(* fFCN )(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);  ; TMethodCall * fMethodCall;  Pointer to MethodCall in case of interpreted function. ;  ; Int_t fNpoints;  Number of points to fit. ;  ; TObject * fObjectFit;  Pointer to object being fitted. ;  ; Foption_t fOption;  Struct with the fit options. ;  ; Int_t fPointSize;  Number of words per point in the cache. ;  ; TObject * fUserFunc;  Pointer to user theoretical function (a TF1*) ;  ; Int_t fXfirst;  First bin on X axis. ;  ; Int_t fXlast;  Last bin on X axis. ;  ; Int_t fYfirst;  First bin on Y axis. ;  ; Int_t fYlast;  Last bin on Y axis. ;  ; Int_t fZfirst;  First bin on Z axis. ;  ; Int_t fZlast;  Last bin on Z axis. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TFumili.h>. Inheritance diagram for TFumili:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TFumili(). TFumili::TFumili ; (; Int_t ; maxpar = 25). Definition at line 129 of file TFumili.cxx. ◆ ~TFumili(). TFumili::~TFumili ; (; ). override . TFumili destructor. ; Definition at line 217 of file TFumili.cxx. Member Function Documentation. ◆ BuildArrays(). void TFumili::BuildArrays ; (; ). Allocates memory for internal arrays. ; Called by TFumili::TFumili ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFumili.html:24953,cache,cache,24953,doc/master/classTFumili.html,https://root.cern,https://root.cern/doc/master/classTFumili.html,1,['cache'],['cache']
Performance," << ( 3 )); };  ;  Protected Member Functions inherited from TVirtualFitter;  TVirtualFitter (const TVirtualFitter &tvf);  copy constructor ;  ; TVirtualFitter & operator= (const TVirtualFitter &tvf);  assignment operator ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TVirtualFitter; Double_t * fCache;  [fCacheSize] Array of points data (fNpoints*fPointSize < fCacheSize words) ;  ; Int_t fCacheSize;  Size of the fCache array. ;  ; void(* fFCN )(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);  ; TMethodCall * fMethodCall;  Pointer to MethodCall in case of interpreted function. ;  ; Int_t fNpoints;  Number of points to fit. ;  ; TObject * fObjectFit;  Pointer to object being fitted. ;  ; Foption_t fOption;  Struct with the fit options. ;  ; Int_t fPointSize;  Number of words per point in the cache. ;  ; TObject * fUserFunc;  Pointer to user theoretical function (a TF1*) ;  ; Int_t fXfirst;  First bin on X axis. ;  ; Int_t fXlast;  Last bin on X axis. ;  ; Int_t fYfirst;  First bin on Y axis. ;  ; Int_t fYlast;  Last bin on Y axis. ;  ; Int_t fZfirst;  First bin on Z axis. ;  ; Int_t fZlast;  Last bin on Z axis. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TLinearFitter.h>. Inheritance diagram for TLinearFitter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TLinearFitter() [1/5]. TLinearFitter::TLinearFitter ; (; ). default c-tor, input data is stored If you don't want to store the input data, run the function StoreData(kFALSE) after constructor ; Definition at line 228 of file TLinearFitter.cxx. ◆ TLinearFitter() [2/5]. TLinearFitter::TLinearFitter ; (; Int_t ; ndim, . const char * ; formula, . Option_t *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLinearFitter.html:30882,cache,cache,30882,doc/master/classTLinearFitter.html,https://root.cern,https://root.cern/doc/master/classTLinearFitter.html,1,['cache'],['cache']
Performance," = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual Bool_tSetAlias(const char* aliasName, const char* aliasFormula); virtual voidSetAutoFlush(Long64_t autof = -30000000); virtual voidSetAutoSave(Long64_t autos = -300000000); virtual voidSetBasketSize(const char* bname, Int_t buffsize = 16000); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual Int_tSetBranchAddress(const char* bname, void* add, TBranch** ptr = 0); virtual Int_tSetBranchAddress(const char* bname, void* add, TClass* realClass, EDataType datatype, Bool_t isptr); virtual Int_tSetBranchAddress(const char* bname, void* add, TBranch** ptr, TClass* realClass, EDataType datatype, Bool_t isptr); virtual voidSetBranchStatus(const char* bname, Bool_t status = 1, UInt_t* found = 0); static voidSetBranchStyle(Int_t style = 1); virtual Int_tSetCacheEntryRange(Long64_t first, Long64_t last); virtual voidSetCacheLearnEntries(Int_t n = 10); virtual Int_tSetCacheSize(Long64_t cachesize = -1); virtual voidSetChainOffset(Long64_t offset = 0); virtual voidSetCircular(Long64_t maxEntries); virtual voidSetDebug(Int_t level = 1, Long64_t min = 0, Long64_t max = 9999999)MENU ; virtual voidSetDefaultEntryOffsetLen(Int_t newdefault, Bool_t updateExisting = kFALSE); virtual voidSetDirectory(TDirectory* dir); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Long64_tSetEntries(Long64_t n = -1); virtual voidSetEntryList(TEntryList* list, Option_t* opt = """"); virtual voidSetEstimate(Long64_t nentries = 1000000); virtual voidSetEventList(TEventList* list); virtual voidSetFileNumber(Int_t number = 0); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTree.html:26095,cache,cachesize,26095,root/html604/TTree.html,https://root.cern,https://root.cern/root/html604/TTree.html,1,['cache'],['cachesize']
Performance," = """". UnsolRespProcResult ProcessUnsolicitedMsg(XrdClientUnsolMsgSender* s, XrdClientMessage* msg); We are here if an unsolicited response comes from a logical conn; The response comes in the form of an XrdClientMessage *, that must NOT be; destroyed after processing. It is destroyed by the first sender.; Remember that we are in a separate thread, since unsolicited; responses are asynchronous by nature. void PostMsg(Int_t type, const char* msg = 0); Post a message of type 'type' into the read messages queue.; If 'msg' is defined it is also added as TString.; This is used, for example, with kPROOF_FATAL to force the main thread; to mark this socket as bad, avoiding race condition when a worker; dies while in processing state. Bool_t IsServProofd(); Return kTRUE if the remote server is a 'proofd'. Int_t GetInterrupt(Bool_t& forward); Get latest interrupt level and reset it; if the interrupt has to be; propagated to lower stages forward will be kTRUE after the call. Int_t Flush(); Flush the asynchronous queue.; Typically called when a kHardInterrupt is received.; Returns number of bytes in flushed buffers. Bool_t Create(Bool_t attach = kFALSE); This method sends a request for creation of (or attachment to) a remote; server application. Int_t SendRaw(const void* buf, Int_t len, ESendRecvOptions opt = kDontBlock); Send a raw buffer of specified length.; Use opt = kDontBlock to ask xproofd to push the message into the proofsrv.; (by default is appended to a queue waiting for a request from proofsrv).; Returns the number of bytes sent or -1 in case of error. Bool_t Ping(const char* ord = 0); Ping functionality: contact the server to check its vitality.; If external, the server waits for a reply from the server; Returns kTRUE if OK or kFALSE in case of error. void RemoteTouch(); Remote touch functionality: contact the server to proof our vitality.; No reply from server is expected. void CtrlC(); Interrupt the remote protocol instance. Used to propagate Ctrl-C.; No reply fro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXSocket.html:15921,queue,queue,15921,root/html602/TXSocket.html,https://root.cern,https://root.cern/root/html602/TXSocket.html,2,['queue'],['queue']
Performance," = (1ULL << ( 13 )). };  ;  Protected Types inherited from TBufferFile; typedef std::vector< TStreamerInfo * > InfoList_t;  ;  Protected Types inherited from TBufferIO; enum  { kNullTag = 0; };  ;  Protected Types inherited from TBuffer; typedef std::vector< TVirtualArray * > CacheList_t;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TBufferFile;  TBufferFile ();  ;  TBufferFile (const TBufferFile &)=delete;  not implemented ;  ; Int_t CheckByteCount (UInt_t startpos, UInt_t bcnt, const TClass *clss, const char *classname);  Check byte count with current buffer position. ;  ; void CheckCount (UInt_t offset) override;  Check if offset is not too large (< kMaxMapCount) when writing. ;  ; UInt_t CheckObject (UInt_t offset, const TClass *cl, Bool_t readClass=kFALSE);  Check for object in the read map. ;  ; void operator= (const TBufferFile &)=delete;  not implemented ;  ; void WriteObjectClass (const void *actualObjStart, const TClass *actualClass, Bool_t cacheReuse) override;  Write object to I/O buffer. ;  ;  Protected Member Functions inherited from TBufferIO;  TBufferIO ();  ;  TBufferIO (TBuffer::EMode mode);  constructor ;  ;  TBufferIO (TBuffer::EMode mode, Int_t bufsiz);  constructor ;  ;  TBufferIO (TBuffer::EMode mode, Int_t bufsiz, void *buf, Bool_t adopt=kTRUE, ReAllocCharFun_t reallocfunc=nullptr);  constructor ;  ; Long64_t GetObjectTag (const void *obj);  Returns tag for specified object from objects map (if exists) Returns 0 if object not included into objects map. ;  ;  Protected Member Functions inherited from TBuffer;  TBuffer ();  ;  TBuffer (const TBuffer &)=delete;  ; void operator= (const TBuffer &)=delete;  ; Int_t Read (const char *name) override;  Read contents of object with specified name from the current directory. ;  ; Int_t Write (const char *name, Int_t opt, Int_t bufs) const override;  Write this object to the current directory. ;  ; Int_t Write (cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferSQL.html:35745,cache,cacheReuse,35745,doc/master/classTBufferSQL.html,https://root.cern,https://root.cern/doc/master/classTBufferSQL.html,1,['cache'],['cacheReuse']
Performance," = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TUnfold (const TH2 *hist_A, EHistMap histmap, ERegMode regmode=kRegModeSize, EConstraint constraint=kEConstraintArea);  Set up response matrix and regularisation scheme. ;  ;  TUnfold (void);  only for use by root streamer or derived classes ;  ;  ~TUnfold (void) override;  ; virtual Double_t DoUnfold (Double_t tau);  perform the unfolding for a given regularisation parameter tau ;  ; Double_t DoUnfold (Double_t tau, const TH1 *hist_y, Double_t scaleBias=0.0);  perform the unfolding for a given input and regularisation ;  ; void GetBias (TH1 *bias, const Int_t *binMap=nullptr) const;  get bias vector including bias scale ;  ; Double_t GetChi2A (void) const;  get χ2A contribution determined in recent unfolding ;  ; Double_t GetChi2L (void) const;  get χ2L contribution determined in recent unfolding ;  ; double GetDF (void) const;  return the effecive number of degrees of freedom See e.g. ;  ; void GetDXDY (TH2 *dxdy) const;  get matrix connecting input and output changes ;  ; void GetEmatrix (TH2 *ematrix, const Int_t *binMap=nullptr) const;  get output covariance matrix, possibly cumulated over several bins ;  ; Double_t GetEpsMatrix (void) const;  get numerical accuracy for Eigenvalue analysis when inverting matrices with rank problems ;  ; void GetFoldedOutput (TH1 *folded, const Int_t *binMap=nullptr) const;  get unfolding result on detector level ;  ; void GetInput (TH1 *inputData, const Int_t *binMap=nullptr) const;  Input vector of measurements. ;  ; void GetInputInverseEmatrix (TH2 *ematrix);  get inverse of the measurement's covariance matrix ;  ; void GetL (TH2 *l) const;  get matrix of regularisation conditions ;  ; virtual Double_t GetLcurv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfold.html:4147,perform,perform,4147,doc/master/classTUnfold.html,https://root.cern,https://root.cern/doc/master/classTUnfold.html,1,['perform'],['perform']
Performance," = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TProof; enum  ESlaves { kAll; , kActive; , kUnique; , kAllUnique; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TProof; static Int_t AssertDataSet (TDSet *dset, TList *input, TDataSetManager *mgr, TString &emsg);  Make sure that dataset is in the form to be processed. ;  ; static void AssertMacroPath (const char *macro);  Make sure that the directory path contained by macro is in the macro path. ;  ; static Bool_t GetFileInCmd (const char *cmd, TString &fn);  Static method to extract the filename (if any) form a CINT command. ;  ; static Int_t GetInputData (TList *input, const char *cachedir, TString &emsg);  Get the input data from the file defined in the input list. ;  ; static Int_t SaveInputData (TQueryResult *qr, const char *cachedir, TString &emsg);  Save input data file from 'cachedir' into the sandbox or create a the file with input data objects. ;  ; static Int_t SendInputData (TQueryResult *qr, TProof *p, TString &emsg);  Send the input data file to the workers. ;  ; static void * SlaveStartupThread (void *arg);  ; static void SystemCmd (const char *cmd, Int_t fdout);  Exec system command 'cmd'. If fdout > -1, append the output to fdout. ;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofCondor.html:41584,cache,cachedir,41584,doc/master/classTProofCondor.html,https://root.cern,https://root.cern/doc/master/classTProofCondor.html,6,['cache'],['cachedir']
Performance," = -1). virtual . Set maximum size of the file cache . . if cachesize = 0 the existing cache (if any) is deleted.; if cachesize = -1 (default) it is set to the AutoFlush value when writing the Tree (default is 30 MBytes). Returns:; 0 size set, cache was created if possible; -1 on error . Reimplemented in TChain.; Definition at line 8676 of file TTree.cxx. ◆ SetCacheSizeAux(). Int_t TTree::SetCacheSizeAux ; (; bool ; autocache = true, . Long64_t ; cacheSize = 0 . ). protected . Set the size of the file cache and create it if possible. ; If autocache is true: this may be an autocreated cache, possibly enlarging an existing autocreated cache. The size is calculated. The value passed in cacheSize:; cacheSize = 0 make cache if default cache creation is enabled; cacheSize = -1 make a default sized cache in any case. If autocache is false: this is a user requested cache. cacheSize is used to size the cache. This cache should never be automatically adjusted.; Returns:; 0 size set, or existing autosized cache almost large enough. (cache was created if possible); -1 on error . Definition at line 8702 of file TTree.cxx. ◆ SetChainOffset(). virtual void TTree::SetChainOffset ; (; Long64_t ; offset = 0). inlinevirtual . Definition at line 609 of file TTree.h. ◆ SetCircular(). void TTree::SetCircular ; (; Long64_t ; maxEntries). virtual . Enable/Disable circularity for this tree. ; if maxEntries > 0 a maximum of maxEntries is kept in one buffer/basket per branch in memory. Note that when this function is called (maxEntries>0) the Tree must be empty or having only one basket per branch. if maxEntries <= 0 the tree circularity is disabled.; NOTE 1:; Circular Trees are interesting in online real time environments to store the results of the last maxEntries events. NOTE 2:; Calling SetCircular with maxEntries <= 0 is necessary before merging circular Trees that have been saved on files. NOTE 3:; SetCircular with maxEntries <= 0 is automatically called by TChain::Merge NOTE 4:; A circ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:208623,cache,cache,208623,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,1,['cache'],['cache']
Performance," = -4.0, Double_t reMax = 4.0, Int_t imBins = 1000, Double_t imMin = -4.0, Double_t imMax = 6.0); Allocate and initialize lookup table for interpolated complex error function; for given grid parameters. void cleanup(). RooComplex ITPComplexErrFunc(const RooComplex& z, Int_t nOrder); Return complex error function interpolated from lookup tabel created; by initFastCERF(). Interpolation is performed in Im and Re plane; to specified order. Double_t ITPComplexErrFuncRe(const RooComplex& z, Int_t nOrder); Return real component of complex error function interpolated from; lookup table created by initFastCERF(). Interpolation is performed in; Im and Re plane to specified order. This functions is noticably faster; than ITPComplexErrrFunc().re() because only the real lookup table; is interpolated. Double_t ITPComplexErrFuncIm(const RooComplex& z, Int_t nOrder); Return real component of complex error function interpolated from; lookup table created by initFastCERF(). Interpolation is performed in; Im and Re plane to specified order. This functions is noticably faster; than ITPComplexErrrFunc().im() because only the imaginary lookup table; is interpolated. Double_t interpolate(Double_t* yArr, Int_t nOrder, Double_t x); Interpolate array 'ya' with 'n' elements for 'x' (between 0 and 'n'-1). Double_t interpolate(Double_t* xa, Double_t* ya, Int_t n, Double_t x); Interpolate array 'ya' with 'n' elements for 'xa'. Bool_t loadCache(); Load the complex error function lookup table from the cache file. void storeCache(); Store the complex error function lookup table in the cache file. const char* cacheFileName(); Construct and return the name of the complex error function cache file. Double_t erf(Double_t x). Double_t erfc(Double_t x). virtual ~RooMath(); {}. » Last changed: Mon Dec 7 13:48:13 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMath.html:4206,perform,performed,4206,root/html526/RooMath.html,https://root.cern,https://root.cern/root/html526/RooMath.html,6,"['cache', 'load', 'perform']","['cache', 'cacheFileName', 'loadCache', 'performed']"
Performance," = -4.0, Double_t reMax = 4.0, Int_t imBins = 1000, Double_t imMin = -4.0, Double_t imMax = 6.0); Allocate and initialize lookup table for interpolated complex error function; for given grid parameters. void cleanup(). RooComplex ITPComplexErrFunc(const RooComplex& z, Int_t nOrder); Return complex error function interpolated from lookup tabel created; by initFastCERF(). Interpolation is performed in Im and Re plane; to specified order. Double_t ITPComplexErrFuncRe(const RooComplex& z, Int_t nOrder); Return real component of complex error function interpolated from; lookup table created by initFastCERF(). Interpolation is performed in; Im and Re plane to specified order. This functions is noticably faster; than ITPComplexErrrFunc().re() because only the real lookup table; is interpolated. Double_t ITPComplexErrFuncIm(const RooComplex& z, Int_t nOrder); Return real component of complex error function interpolated from; lookup table created by initFastCERF(). Interpolation is performed in; Im and Re plane to specified order. This functions is noticably faster; than ITPComplexErrrFunc().im() because only the imaginary lookup table; is interpolated. Double_t interpolate(Double_t* yArr, Int_t nOrder, Double_t x); Interpolate array 'ya' with 'n' elements for 'x' (between 0 and 'n'-1). Double_t interpolate(Double_t* xa, Double_t* ya, Int_t n, Double_t x); Interpolate array 'ya' with 'n' elements for 'xa'. Bool_t loadCache(); Load the complex error function lookup table from the cache file. void storeCache(); Store the complex error function lookup table in the cache file. const char* cacheFileName(); Construct and return the name of the complex error function cache file. Double_t erf(Double_t x). Double_t erfc(Double_t x). virtual ~RooMath(); {}. » Last changed: Mon Jul 4 15:23:19 2011 » Last generated: 2011-07-04 15:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooMath.html:4192,perform,performed,4192,root/html530/RooMath.html,https://root.cern,https://root.cern/root/html530/RooMath.html,6,"['cache', 'load', 'perform']","['cache', 'cacheFileName', 'loadCache', 'performed']"
Performance," = -4.0, Double_t reMax = 4.0, Int_t imBins = 1000, Double_t imMin = -4.0, Double_t imMax = 6.0); Allocate and initialize lookup table for interpolated complex error function; for given grid parameters. void cleanup(). RooComplex ITPComplexErrFunc(const RooComplex& z, Int_t nOrder); Return complex error function interpolated from lookup tabel created; by initFastCERF(). Interpolation is performed in Im and Re plane; to specified order. Double_t ITPComplexErrFuncRe(const RooComplex& z, Int_t nOrder); Return real component of complex error function interpolated from; lookup table created by initFastCERF(). Interpolation is performed in; Im and Re plane to specified order. This functions is noticably faster; than ITPComplexErrrFunc().re() because only the real lookup table; is interpolated. Double_t ITPComplexErrFuncIm(const RooComplex& z, Int_t nOrder); Return real component of complex error function interpolated from; lookup table created by initFastCERF(). Interpolation is performed in; Im and Re plane to specified order. This functions is noticably faster; than ITPComplexErrrFunc().im() because only the imaginary lookup table; is interpolated. Double_t interpolate(Double_t* yArr, Int_t nOrder, Double_t x); Interpolate array 'ya' with 'n' elements for 'x' (between 0 and 'n'-1). Double_t interpolate(Double_t* xa, Double_t* ya, Int_t n, Double_t x); Interpolate array 'ya' with 'n' elements for 'xa'. Bool_t loadCache(); Load the complex error function lookup table from the cache file. void storeCache(); Store the complex error function lookup table in the cache file. const char* cacheFileName(); Construct and return the name of the complex error function cache file. Double_t erf(Double_t x). Double_t erfc(Double_t x). virtual ~RooMath(); {}. » Last changed: Sat Oct 9 22:38:43 2010 » Last generated: 2010-10-09 22:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMath.html:4192,perform,performed,4192,root/html528/RooMath.html,https://root.cern,https://root.cern/root/html528/RooMath.html,6,"['cache', 'load', 'perform']","['cache', 'cacheFileName', 'loadCache', 'performed']"
Performance," = -4.0, Double_t reMax = 4.0, Int_t imBins = 1000, Double_t imMin = -4.0, Double_t imMax = 6.0); Allocate and initialize lookup table for interpolated complex error function; for given grid parameters. void cleanup(). RooComplex ITPComplexErrFunc(const RooComplex& z, Int_t nOrder); Return complex error function interpolated from lookup tabel created; by initFastCERF(). Interpolation is performed in Im and Re plane; to specified order. Double_t ITPComplexErrFuncRe(const RooComplex& z, Int_t nOrder); Return real component of complex error function interpolated from; lookup table created by initFastCERF(). Interpolation is performed in; Im and Re plane to specified order. This functions is noticably faster; than ITPComplexErrrFunc().re() because only the real lookup table; is interpolated. Double_t ITPComplexErrFuncIm(const RooComplex& z, Int_t nOrder); Return real component of complex error function interpolated from; lookup table created by initFastCERF(). Interpolation is performed in; Im and Re plane to specified order. This functions is noticably faster; than ITPComplexErrrFunc().im() because only the imaginary lookup table; is interpolated. Double_t interpolate(Double_t* yArr, Int_t nOrder, Double_t x); Interpolate array 'ya' with 'n' elements for 'x' (between 0 and 'n'-1). Double_t interpolate(Double_t* xa, Double_t* ya, Int_t n, Double_t x); Interpolate array 'ya' with 'n' elements for 'xa'. Bool_t loadCache(); Load the complex error function lookup table from the cache file. void storeCache(); Store the complex error function lookup table in the cache file. const char* cacheFileName(); Construct and return the name of the complex error function cache file. Double_t erf(Double_t x). Double_t erfc(Double_t x). virtual ~RooMath(); {}. » Last changed: Thu Nov 3 20:08:36 2011 » Last generated: 2011-11-03 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMath.html:4192,perform,performed,4192,root/html532/RooMath.html,https://root.cern,https://root.cern/root/html532/RooMath.html,6,"['cache', 'load', 'perform']","['cache', 'cacheFileName', 'loadCache', 'performed']"
Performance," = 0) const. protected:. voidTTree::AddClone(TTree*); virtual TBranch*BranchImp(const char* branchname, TClass* ptrClass, void* addobj, Int_t bufsize, Int_t splitlevel); virtual TBranch*BranchImp(const char* branchname, const char* classname, TClass* ptrClass, void* addobj, Int_t bufsize, Int_t splitlevel); virtual TBranch*TTree::BranchImpRef(const char* branchname, const char* classname, TClass* ptrClass, void* addobj, Int_t bufsize, Int_t splitlevel); virtual TBranch*TTree::BranchImpRef(const char* branchname, TClass* ptrClass, EDataType datatype, void* addobj, Int_t bufsize, Int_t splitlevel); virtual TBranch*TTree::BronchExec(const char* name, const char* classname, void* addobj, Bool_t isptrptr, Int_t bufsize, Int_t splitlevel); voidCheckBasket(TBranch* tb); Bool_tCheckBranch(TBranch* tb); virtual Int_tTTree::CheckBranchAddressType(TBranch* branch, TClass* ptrClass, EDataType datatype, Bool_t ptr); Bool_tCheckTable(const TString& table) const; TStringConvertTypeName(const TString& typeName); virtual TBasket*CreateBasket(TBranch* br); virtual voidCreateBranch(const TString& branchName, const TString& typeName); TStringCreateBranches(TSQLResult* rs); Bool_tCreateTable(const TString& table); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Long64_tTTree::GetCacheAutoSize(Bool_t withDefault = kFALSE) const; vector<Int_t>*GetColumnIndice(TBranch* branch); virtual TLeaf*TTree::GetLeafImpl(const char* branchname, const char* leafname); charTTree::GetNewlineValue(istream& inputStream); TTreeCache*TTree::GetReadCache(TFile* file, Bool_t create = kFALSE); voidTTree::ImportClusterRanges(TTree* fromtree); voidInit(); virtual voidTTree::KeepCircular(); voidTObject::MakeZombie(); voidTTree::MoveReadCache(TFile* src, TDirectory* dir); voidResetQuery(); Int_tTTree::SetBranchAddressImp(TBranch* branch, void* addr, TBranch** ptr); Int_tTTree::SetCacheSizeAux(Bool_t autocache = kTRUE, Long64_t cacheSize = 0). Data Members; public:. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeSQL.html:21047,cache,cacheSize,21047,root/html604/TTreeSQL.html,https://root.cern,https://root.cern/root/html604/TTreeSQL.html,1,['cache'],['cacheSize']
Performance," = 0) const. protected:. voidTTree::AddClone(TTree*); virtual TBranch*BranchImp(const char* branchname, TClass* ptrClass, void* addobj, Int_t bufsize, Int_t splitlevel); virtual TBranch*BranchImp(const char* branchname, const char* classname, TClass* ptrClass, void* addobj, Int_t bufsize, Int_t splitlevel); virtual TBranch*TTree::BranchImpRef(const char* branchname, const char* classname, TClass* ptrClass, void* addobj, Int_t bufsize, Int_t splitlevel); virtual TBranch*TTree::BranchImpRef(const char* branchname, TClass* ptrClass, EDataType datatype, void* addobj, Int_t bufsize, Int_t splitlevel); virtual TBranch*TTree::BronchExec(const char* name, const char* classname, void* addobj, Bool_t isptrptr, Int_t bufsize, Int_t splitlevel); voidCheckBasket(TBranch* tb); Bool_tCheckBranch(TBranch* tb); virtual Int_tTTree::CheckBranchAddressType(TBranch* branch, TClass* ptrClass, EDataType datatype, Bool_t ptr); Bool_tCheckTable(const TString& table) const; TStringConvertTypeName(const TString& typeName); virtual TBasket*CreateBasket(TBranch* br); virtual voidCreateBranch(const TString& branchName, const TString& typeName); TStringCreateBranches(TSQLResult* rs); Bool_tCreateTable(const TString& table); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Long64_tTTree::GetCacheAutoSize(Bool_t withDefault = kFALSE) const; vector<Int_t>*GetColumnIndice(TBranch* branch); virtual TLeaf*TTree::GetLeafImpl(const char* branchname, const char* leafname); charTTree::GetNewlineValue(istream& inputStream); TTreeCache*TTree::GetReadCache(TFile* file, Bool_t create = kFALSE); voidTTree::ImportClusterRanges(TTree* fromtree); voidInit(); virtual voidTTree::KeepCircular(); voidTObject::MakeZombie(); voidTTree::MoveReadCache(TFile* src, TDirectory* dir); voidResetQuery(); Int_tTTree::SetBranchAddressImp(TBranch* branch, void* addr, TBranch** ptr); voidTTree::SetCacheSizeAux(Bool_t autocache = kTRUE, Long64_t cacheSize = 0). Data Members; public:. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeSQL.html:20556,cache,cacheSize,20556,root/html534/TTreeSQL.html,https://root.cern,https://root.cern/root/html534/TTreeSQL.html,2,['cache'],['cacheSize']
Performance," = 0); Execute the specified drawing action on a data set (TDSet).; Event- or Entry-lists should be set in the data set object using; TDSet::SetEntryList.; Returns -1 in case of error or number of selected events otherwise. Long64_t Process(TDSet* dset, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0); Process a data set (TDSet) using the specified selector (.C) file.; Entry- or event-lists should be set in the data set object using; TDSet::SetEntryList.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. Int_t CreateSymLinks(TList* files); Create in each worker sandbox symlinks to the files in the list; Used to make the caceh information available to workers. Int_t InitDataSetManager(); Initialize the dataset manager from directives or from defaults; Return 0 on success, -1 on failure. void ShowCache(Bool_t all = kFALSE); List contents of file cache. If all is true show all caches also on; slaves. If everything is ok all caches are to be the same. void ClearCache(const char* file = 0); Remove files from all file caches. Int_t Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); Copy the specified macro in the cache directory. The macro file is; uploaded if new or updated. If existing, the corresponding header; basename(macro).h or .hh, is also uploaded. For the other arguments; see TProof::Load().; Returns 0 in case of success and -1 in case of error. Int_t CopyMacroToCache(const char* macro, Int_t headerRequired = 0, TSelector** selector = 0, Int_t opt = 0); Copy a macro, and its possible associated .h[h] file,; to the cache directory, from where the workers can get the file.; If headerRequired is 1, return -1 in case the header is not found.; If headerRequired is 0, try to copy header too.; If headerRequired is -1, don't look for header, only copy macro.; If the selector pionter is not 0, consider the macro to be a selector; and try to load the selector and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofLite.html:28277,cache,caches,28277,root/html528/TProofLite.html,https://root.cern,https://root.cern/root/html528/TProofLite.html,3,['cache'],['caches']
Performance," = 0); Execute the specified drawing action on a data set (TDSet).; Event- or Entry-lists should be set in the data set object using; TDSet::SetEntryList.; Returns -1 in case of error or number of selected events otherwise. Long64_t Process(TDSet* dset, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0); Process a data set (TDSet) using the specified selector (.C) file.; Entry- or event-lists should be set in the data set object using; TDSet::SetEntryList.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. Int_t CreateSymLinks(TList* files); Create in each worker sandbox symlinks to the files in the list; Used to make the cache information available to workers. Int_t InitDataSetManager(); Initialize the dataset manager from directives or from defaults; Return 0 on success, -1 on failure. void ShowCache(Bool_t all = kFALSE); List contents of file cache. If all is true show all caches also on; slaves. If everything is ok all caches are to be the same. void ClearCache(const char* file = 0); Remove files from all file caches. Int_t Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); Copy the specified macro in the cache directory. The macro file is; uploaded if new or updated. If existing, the corresponding header; basename(macro).h or .hh, is also uploaded. For the other arguments; see TProof::Load().; Returns 0 in case of success and -1 in case of error. Int_t CopyMacroToCache(const char* macro, Int_t headerRequired = 0, TSelector** selector = 0, Int_t opt = 0); Copy a macro, and its possible associated .h[h] file,; to the cache directory, from where the workers can get the file.; If headerRequired is 1, return -1 in case the header is not found.; If headerRequired is 0, try to copy header too.; If headerRequired is -1, don't look for header, only copy macro.; If the selector pionter is not 0, consider the macro to be a selector; and try to load the selector and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofLite.html:32274,cache,caches,32274,root/html602/TProofLite.html,https://root.cern,https://root.cern/root/html602/TProofLite.html,1,['cache'],['caches']
Performance," = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Double_texpectedEvents(const RooArgSet* nset) const; virtual Double_texpectedEvents(const RooArgSet& nset) const; RooExpensiveObjectCache&RooAbsArg::expensiveObjectCache() const; virtual Double_tRooAbsPdf::extendedTerm(Double_t observedEvents, const RooArgSet* nset = 0) const; virtual RooAbsPdf::ExtendModeextendMode() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual RooDataHist*fillDataHist(RooDataHist* hist, const RooArgSet* nset, Double_t scaleFactor, Bool_t correctForBinVolume = kFALSE, Bool_t showProgress = kFALSE) const; TH1*RooAbsReal::fillHistogram(TH1* hist, const RooArgList& plotVars, Double_t scaleFactor = 1, const RooArgSet* projectedVars = 0, Bool_t scaling = kTRUE, const RooArgSet* condObs = 0, Bool_t setError = kTRUE) const; Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*RooAbsArg::findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tRooAbsReal::findRoot(RooRealVar& x, Double_t xmin, Double_t xmax, Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooSimultaneous.html:11781,cache,cacheList,11781,root/html532/RooSimultaneous.html,https://root.cern,https://root.cern/root/html532/RooSimultaneous.html,4,['cache'],['cacheList']
Performance," = 0)MENU ; virtual Bool_tTTree::SetAlias(const char* aliasName, const char* aliasFormula); virtual voidTChain::SetAutoDelete(Bool_t autodel = kTRUE); virtual voidTTree::SetAutoFlush(Long64_t autof = -30000000); virtual voidTTree::SetAutoSave(Long64_t autos = -300000000); virtual voidTTree::SetBasketSize(const char* bname, Int_t buffsize = 16000); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual Int_tTChain::SetBranchAddress(const char* bname, void* add, TClass* realClass, EDataType datatype, Bool_t isptr); virtual Int_tTChain::SetBranchAddress(const char* bname, void* add, TBranch** ptr, TClass* realClass, EDataType datatype, Bool_t isptr); virtual voidTChain::SetBranchStatus(const char* bname, Bool_t status = 1, UInt_t* found = 0); static voidTTree::SetBranchStyle(Int_t style = 1); virtual voidTTree::SetCacheEntryRange(Long64_t first, Long64_t last); virtual voidTTree::SetCacheLearnEntries(Int_t n = 10); virtual voidTChain::SetCacheSize(Long64_t cacheSize); virtual voidTTree::SetChainOffset(Long64_t offset = 0); virtual voidTTree::SetCircular(Long64_t maxEntries); virtual voidSetDebug(Int_t level = 1, Long64_t min = 0, Long64_t max = 9999999)MENU ; virtual voidTTree::SetDefaultEntryOffsetLen(Int_t newdefault, Bool_t updateExisting = kFALSE); virtual voidTChain::SetDirectory(TDirectory* dir); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Long64_tTTree::SetEntries(Long64_t n = -1); virtual voidSetEntryList(TEntryList* enlist, Option_t*); virtual voidTChain::SetEntryListFile(const char* filename = """", Option_t* opt = """"); virtual voidTTree::SetEstimate(Long64_t nentries = 1000000); virtual voidSetEventList(TEventList* evlist); virtual voidTTree::SetFileNumber(Int_t number = 0); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofChain.html:16689,cache,cacheSize,16689,root/html534/TProofChain.html,https://root.cern,https://root.cern/root/html534/TProofChain.html,1,['cache'],['cacheSize']
Performance," = 0, Int_t nStop = 2000000000, Bool_t copyCache = kTRUE); virtual voidresetCache(); virtual voidsetArgStatus(const RooArgSet& set, Bool_t active). Data Members; public:. enum ErrorType { Poisson; SumW2; None; Auto; Expected; };; enum StorageType { Tree; Vector; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. TIterator*_cacheIter! Iterator over cached variables; RooArgSet_cachedVars! External variables cached with this data set; RooAbsDataStore*_dstoreData storage implementation; TIterator*_iterator! Iterator over dimension variables; static Int_tRooPrintable::_nameLength; map<std::string,RooAbsData*>_ownedComponentsOwned external components; RooArgSet_varsDimensions of this data set; static RooAbsData::StorageTypedefaultStorageType; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void setDefaultStorageType(RooAbsData::StorageType s). void claimVars(RooAbsData* ). Bool_t releaseVars(RooAbsData* ); If return value is true variables can be deleted. ~RooAbsData(); Destructor. void convertToVectorStore(); Convert tree-based storage to vector-based storage. Bool_t changeObservableName(const char* from, const char* to). void fill(). Int_t numEntries() const. void reset(). const RooArgSet* get(Int_t index) const. void cacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0, Bool_t skipZeroWeights = kFALSE); Internal method -- Cache given set of functions with data. void resetCache(); Internal method -- Remov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsData.html:14211,cache,cached,14211,root/html534/RooAbsData.html,https://root.cern,https://root.cern/root/html534/RooAbsData.html,2,['cache'],['cached']
Performance," = 0; ev <100; ev++) {; Float_t sigmat, sigmas;; gRandom->Rannor(sigmat,sigmas);; Int_t ntrack = Int_t(600 + 600 *sigmat/120.);; Float_t random = gRandom->Rndm(1);; sprintf(etype,""type%d"",ev%5);; event->SetType(etype);; event->SetHeader(ev, 200, 960312, random);; event->SetNseg(Int_t(10*ntrack+20*sigmas));; event->SetNvertex(Int_t(1+20*gRandom->Rndm()));; event->SetFlag(UInt_t(random+0.5));; event->SetTemperature(random+20.);; for(UChar_t m = 0; m < 10; m++) {; event->SetMeasure(m, Int_t(gRandom->Gaus(m,m+1)));; }; // continued...; // fill the matrix; for(UChar_t i0 = 0; i0 < 4; i0++) {; for(UChar_t i1 = 0; i1 < 4; i1++) {; event->SetMatrix(i0,i1,gRandom->Gaus(i0*i1,1));; }; }; // create and fill the Track objects; for (Int_t t = 0; t < ntrack; t++) event->AddTrack(random);; t4.Fill(); // Fill the tree; event->Clear(); // Clear before reloading event; }; f.Write(); // Write the file header; t4.Print(); // Print the tree contents; }; 12.17.5 Reading the Tree; First, we check if the shared library with the class definitions is loaded. If not we load it. Then we read two branches, one for the number of tracks and one for the entire event. We check the number of tracks first, and if it meets our condition, we read the entire event. We show the fist entry that meets the condition.; void tree4r() {; // check if the event class is in the dictionary; // if it is not load the definition in libEvent.so; if (!TClassTable::GetDict(""Event"")) {; gSystem->Load(""$ROOTSYS/test/libEvent.so"");; }; // read the tree generated with tree4w. // note that we use ""new"" to create the TFile and TTree objects, because we; // want to keep these objects alive when we leave this function.; TFile *f = new TFile(""tree4.root"");; TTree *t4 = (TTree*)f->Get(""t4"");. // create a pointer to an event object for reading the branch values.; Event *event = new Event();; // get two branches and set the branch address; TBranch *bntrack = t4->GetBranch(""fNtrack"");; TBranch *branch = t4->GetBranch(""event_split"");;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:580411,load,loaded,580411,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['load'],['loaded']
Performance," = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TArrayL64; Long64_t * fArray;  ;  Public Attributes inherited from TArray; Int_t fN;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TH3; static TH1D * DoProject1D (const TH3 &h, const char *name, const char *title, const TAxis *projX, bool computeErrors, bool originalRange, bool useUF, bool useOF);  static methdod performing the projection to 1D histogram ;  ; static TH2D * DoProject2D (const TH3 &h, const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool computeErrors, bool originalRange, bool useUF, bool useOF);  static methdod performing the projection to 2D histogram ;  ;  Static Protected Member Functions inherited from TH1; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ;  ; static bool CheckAxisLimits (const TAxis *a1, const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3L.html:56939,perform,performing,56939,doc/master/classTH3L.html,https://root.cern,https://root.cern/doc/master/classTH3L.html,2,['perform'],['performing']
Performance," = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from RooAbsDataStore; RooArgSet _cachedVars;  ; bool _doDirtyProp = true;  Switch do (de)activate dirty state propagation when loading a data point. ;  ; RooArgSet _vars;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooVectorDataStore.h>. Inheritance diagram for RooVectorDataStore:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooVectorDataStore() [1/6]. RooVectorDataStore::RooVectorDataStore ; (; ). Definition at line 59 of file RooVectorDataStore.cxx. ◆ RooVectorDataStore() [2/6]. RooVectorDataStore::RooVectorDataStore ; (; RooStringView ; name, . RooStringView ; title, . const RooArgSet & ; vars, . const char * ; wgtVarName = nullptr . ). Definition at line 68 of file RooVectorDataStore.cxx. ◆ RooVectorDataStore() [3/6]. RooVectorDataStore::RooVectorDataStore ; (; con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooVectorDataStore.html:22390,load,loading,22390,doc/master/classRooVectorDataStore.html,https://root.cern,https://root.cern/doc/master/classRooVectorDataStore.html,1,['load'],['loading']
Performance," = 10); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Bool_tRooAbsPdf::selfNormalized() const; TIterator*RooAbsArg::serverIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); static voidRooAbsArg::setACleanADirty(Bool_t flag); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetErrorTolerance(Double_t t); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); voidSetForceSum(Bool_t flag); voidRooAbsPdf::setGeneratorConfig(); voidRooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidSetMaxIters(Int_t mi); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidRooAbsPdf::setNormRange(const char* rangeName); voidRooAbsPdf::setNormRangeOverride(const char* rangeName); voidRooAbsPdf::setNormValueCaching(Int_t minNumIntDim, Int_t ipOrder = 2); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooNonCentralChiSquare.html:28572,cache,cache,28572,root/html530/RooNonCentralChiSquare.html,https://root.cern,https://root.cern/root/html530/RooNonCentralChiSquare.html,1,['cache'],['cache']
Performance," = HistFactory ; [#1] INFO:Integration -- RooRealIntegral::ctor(g_Int[x]) Constructing integral of function g over observables(x) with normalization () with range identifier <none>; [#1] INFO:Integration -- g: Observable x is suitable for analytical integration (if supported by p.d.f); [#1] INFO:Integration -- g: Function integrated observables (x) internally with code 1; [#1] INFO:Integration -- g: Observables (x) are analytically integrated with code 1; RooRealIntegral::g_Int[x][ Int gd[Ana](x) ] = 2.50663; Active Message streams; [0] MinLevel = PROGRESS Topic = Generation Minimization Plotting Fitting Integration LinkStateMgmt Eval Caching Optimization ObjectHandling InputArguments Tracing Contents DataHandling NumericIntegration FastEvaluations ; [1] MinLevel = INFO Topic = Minimization Plotting Fitting Integration Eval Caching ObjectHandling InputArguments DataHandling NumericIntegration ; [2] MinLevel = INFO Topic = HistFactory ; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for f: using 0.1; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for m: using 2; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for p0: using 0.005; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for s: using 2; Minuit2Minimizer: Minimize with max-calls 2000 convergence for edm < 1 strategy 1; p0=0.01, ; prevFCN = 31.75882326 f=0.501, ; prev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf506__msgservice_8py.html:5535,optimiz,optimization,5535,doc/master/rf506__msgservice_8py.html,https://root.cern,https://root.cern/doc/master/rf506__msgservice_8py.html,1,['optimiz'],['optimization']
Performance," = ROOT.RooDataSet(""ds4"", ""ds4"", {icat, x}, Import=tree); ds4.Print(); ; # Import multiple RooDataSets into a RooDataSet; # ----------------------------------------------------------------------------------------; ; # Create three ROOT.RooDataSets in (y,z); dsA = ds2.reduce({x, y}, ""z<-5""); dsB = ds2.reduce({x, y}, ""abs(z)<5""); dsC = ds2.reduce({x, y}, ""z>5""); ; # Create a dataset that imports contents of all the above datasets mapped; # by index category c; dsABC = ROOT.RooDataSet(""dsABC"", ""dsABC"", {x, y}, Index=c, Import={""SampleA"": dsA, ""SampleB"": dsB, ""SampleC"": dsC}); ; dsABC.Print(); RooDataHist::dh[c,x] = 300 bins (2964 weights); RooDataHist::dh[c,x] = 300 bins (2964 weights); [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds) Skipping event #7 because y cannot accommodate the value 13.3845; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds) Skipping event #8 because y cannot accommodate the value 11.1861; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds) Skipping event #12 because y cannot accommodate the value 13.7009; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds) Skipping event #14 because y cannot accommodate the value -10.6852; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds) Skipping ...; [#0] WARNING:DataHandling -- RooTreeDataStore::loadValues(ds) Ignored 35 out-of-range events; RooDataSet::ds[x,y] = 65 entries; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds2) Skipping event #7 because y cannot accommodate the value 13.3845; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds2) Skipping event #8 because z cannot accommodate the value 10; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds2) Skipping event #12 because y cannot accommodate the value 13.7009; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds2) Skipping event #14 because y cannot accommodate the value -10.6852; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds2) Skipping ...; [#0] WARNING:DataHandling -",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf401__importttreethx_8py.html:4174,load,loadValues,4174,doc/master/rf401__importttreethx_8py.html,https://root.cern,https://root.cern/doc/master/rf401__importttreethx_8py.html,1,['load'],['loadValues']
Performance," = ROOT::TMetaUtils::GetFileName(*cl, interp);; 1308 for (unsigned int i = 0; i < filename.length(); i++) {; 1309 if (filename[i] == '\\') filename[i] = '/';; 1310 }; 1311 dictStream << ""\"""" << filename << ""\"", "" << ROOT::TMetaUtils::GetLineNumber(cl) << "","" << std::endl; 1312 << "" ::ROOT::Internal::DefineBehavior((void*)nullptr,(void*)nullptr),"" << std::endl; 1313 << "" "";; 1314 ; 1315 if (Namespace__HasMethod(cl, ""Dictionary"", interp)) {; 1316 dictStream << ""&::"" << classname.c_str() << ""::Dictionary, "";; 1317 } else {; 1318 dictStream << ""&"" << mappedname.c_str() << ""_Dictionary, "";; 1319 }; 1320 ; 1321 dictStream << 0 << "");"" << std::endl; 1322 ; 1323 << "" return &instance;"" << std::endl; 1324 << "" }"" << std::endl; 1325 << "" // Insure that the inline function is _not_ optimized away by the compiler\n""; 1326 << "" ::ROOT::TGenericClassInfo *(*_R__UNIQUE_DICT_(InitFunctionKeeper))() = &GenerateInitInstance; "" << std::endl; 1327 << "" // Static variable to force the class initialization"" << std::endl; 1328 // must be one long line otherwise R__UseDummy does not work; 1329 << "" static ::ROOT::TGenericClassInfo *_R__UNIQUE_DICT_(Init) = GenerateInitInstance();""; 1330 << "" R__UseDummy(_R__UNIQUE_DICT_(Init));"" << std::endl;; 1331 ; 1332 if (!Namespace__HasMethod(cl, ""Dictionary"", interp)) {; 1333 dictStream << std::endl << "" // Dictionary for non-ClassDef classes"" << std::endl; 1334 << "" static TClass *"" << mappedname.c_str() << ""_Dictionary() {"" << std::endl; 1335 << "" return GenerateInitInstance()->GetClass();"" << std::endl; 1336 << "" }"" << std::endl << std::endl;; 1337 }; 1338 ; 1339 dictStream << "" }"" << std::endl;; 1340 while (nesting--) {; 1341 dictStream << ""}"" << std::endl;; 1342 }; 1343 dictStream << std::endl;; 1344}; 1345 ; 1346////////////////////////////////////////////////////////////////////////////////; 1347/// GrabIndex returns a static string (so use it or copy it immediately, do not; 1348/// call GrabIndex twice in the same expression) containing the si",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:49646,optimiz,optimized,49646,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['optimiz'],['optimized']
Performance, = fBranchCount->GetCollectionProxy();; 2593 }; 2594 return fCollProxy;; 2595}; 2596 ; 2597////////////////////////////////////////////////////////////////////////////////; 2598/// Return a pointer to the current type of the data member corresponding to branch element.; 2599 ; 2600TClass* TBranchElement::GetCurrentClass(); 2601{; 2602 TClass* cl = fCurrentClass;; 2603 if (cl) {; 2604 return cl;; 2605 }; 2606 ; 2607 TStreamerInfo* brInfo = (TStreamerInfo*)GetInfoImp();; 2608 if (!brInfo) {; 2609 cl = TClass::GetClass(GetClassName());; 2610 R__ASSERT(cl && cl->GetCollectionProxy());; 2611 fCurrentClass = cl;; 2612 return cl;; 2613 }; 2614 TClass* motherCl = brInfo->GetClass();; 2615 if (motherCl->GetCollectionProxy()) {; 2616 cl = motherCl->GetCollectionProxy()->GetCollectionClass();; 2617 if (cl) {; 2618 fCurrentClass = cl;; 2619 }; 2620 return cl;; 2621 }; 2622 if (GetID() < 0 || GetID()>=brInfo->GetNelement()) {; 2623 return nullptr;; 2624 }; 2625 TStreamerElement* currentStreamerElement = brInfo->GetElement(GetID());; 2626 TDataMember* dm = (TDataMember*) motherCl->GetListOfDataMembers()->FindObject(currentStreamerElement->GetName());; 2627 ; 2628 TString newType;; 2629 if (!dm) {; 2630 // Either the class is not loaded or the data member is gone; 2631 if (!motherCl->IsLoaded()) {; 2632 TVirtualStreamerInfo* newInfo = motherCl->GetStreamerInfo();; 2633 if (newInfo != brInfo) {; 2634 TStreamerElement* newElems = (TStreamerElement*) newInfo->GetElements()->FindObject(currentStreamerElement->GetName());; 2635 if (newElems) {; 2636 if (newElems->GetClassPointer()); 2637 newType = newElems->GetClassPointer()->GetName();; 2638 else; 2639 newType = newElems->GetTypeName();; 2640 }; 2641 }; 2642 if (newType.Length()==0) {; 2643 if (currentStreamerElement->GetClassPointer()); 2644 newType = currentStreamerElement->GetClassPointer()->GetName();; 2645 else; 2646 newType = currentStreamerElement->GetTypeName();; 2647 }; 2648 }; 2649 } else {; 2650 newType = dm->GetTypeName();,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:93901,load,loaded,93901,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['load'],['loaded']
Performance," = fInfo;; 5673 if (fType == 41) {; 5674 if( fSplitLevel >= TTree::kSplitCollectionOfPointers && fBranchCount->fSTLtype == ROOT::kSTLvector) {; 5675 create = TStreamerInfoActions::TActionSequence::ReadMemberWiseActionsCollectionGetter;; 5676 } else {; 5677 TVirtualStreamerInfo *info = GetInfoImp();; 5678 if (GetParentClass() == info->GetClass()) {; 5679 if( fTargetClass.GetClassName()[0] && fBranchClass != fTargetClass ) {; 5680 originalClass = fBranchClass;; 5681 create = TStreamerInfoActions::TActionSequence::ConversionReadMemberWiseActionsViaProxyGetter;; 5682 } else {; 5683 create = TStreamerInfoActions::TActionSequence::ReadMemberWiseActionsViaProxyGetter;; 5684 }; 5685 } else if (GetCollectionProxy()) {; 5686 // Base class and embedded objects.; 5687 create = TStreamerInfoActions::TActionSequence::ReadMemberWiseActionsCollectionCreator;; 5688 }; 5689 }; 5690 } else if (fType == 31) {; 5691 create = TStreamerInfoActions::TActionSequence::ReadMemberWiseActionsCollectionGetter;; 5692 } else if (0<=fType && fType<=2) {; 5693 // Note: this still requires the ObjectWise sequence to not be optimized!; 5694 create = TStreamerInfoActions::TActionSequence::ReadMemberWiseActionsGetter;; 5695 } else if ( fType == 4 && !fNewIDs.empty()) {; 5696 localInfo = FindOnfileInfo(fClonesClass, fBranches);; 5697 create = TStreamerInfoActions::TActionSequence::ReadMemberWiseActionsCollectionCreator;; 5698 } else if ( fType == 3 && !fNewIDs.empty()) {; 5699 localInfo = FindOnfileInfo(fClonesClass, fBranches);; 5700 create = TStreamerInfoActions::TActionSequence::ReadMemberWiseActionsCollectionGetter;; 5701 }; 5702 ; 5703 if (create) {; 5704 SetActionSequence(originalClass, localInfo, create, fReadActionSequence);; 5705 }; 5706}; 5707 ; 5708////////////////////////////////////////////////////////////////////////////////; 5709/// Set the ReadLeaves pointer to execute the expected operations.; 5710 ; 5711void TBranchElement::SetReadLeavesPtr(); 5712{; 5713 if (TestBit(kDecomposedObj)) {; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:211874,optimiz,optimized,211874,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['optimiz'],['optimized']
Performance," = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; std::unique_ptr< RooDataSet > generate (RooAbsGenContext &context, const RooArgSet &whatVars, const RooDataSet *prototype, double nEvents, bool verbose, bool randProtoOrder, bool resampleProto, bool skipInit=false, bool extended=false) const;  Internal method. ;  ; void logBatchComputationErrors (std::span< const double > &outputs, std::size_t begin) const;  Scan through outputs and fix+log all nans and negative values. ;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooArgSet &params, bool showConstants=false, const char *label="""", double xmin=0.65, double xmax=0.99, double ymax=0.95, const RooCmdArg *formatCmd=nullptr);  Add a text box with the current parameter values and their errors to the frame. ;  ; void setActiveNormSet (RooArgSet const *normSet) const;  Setter ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:78178,cache,cache,78178,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['cache'],['cache']
Performance," = gPad->XtoPixel(gPad->GetX2());; pad_height = gPad->YtoPixel(gPad->GetY1());; if (pad_width < pad_height) charheight = textsize*pad_width;; else charheight = textsize*pad_height;. If the text precision is equal to 3, the text size doesn't depend on the pad's; dimensions. A given textsize value always generates the same absolute; size. The text size (charheight) is given in pixels:. charheight = textsize;. Note that to scale fonts to the same size as the old True Type package a; scale factor of 0.93376068 is apply to the text size before drawing. The text size of any class inheriting from TAttText can; be changed using the method SetTextSize and retrieved using the; method GetTextSize.; Text Font and Precision; The text font code is combination of the font number and the precision. Text font code = 10*fontnumber + precision. Font numbers must be between 1 and 14. The precision can be:; precision = 0 fast hardware fonts (steps in the size); precision = 1 scalable and rotatable hardware fonts (see below); precision = 2 scalable and rotatable hardware fonts; precision = 3 scalable and rotatable hardware fonts. Text size; is given in pixels. The text font and precision of any class inheriting from TAttText can; be changed using the method SetTextFont and retrieved using the; method GetTextFont.; Font quality and speed; When precision 0 is used, only the original non-scaled system fonts are; used. The fonts have a minimum (4) and maximum (37) size in pixels. These; fonts are fast and are of good quality. Their size varies with large steps; and they cannot be rotated.; Precision 1 and 2 fonts have a different behaviour depending if the; True Type Fonts (TTF) are used or not. If TTF are used, you always get very good; quality scalable and rotatable fonts. However TTF are slow.; How to use True Type Fonts; One can activate the TTF by adding (or activating) the following line; in the .rootrc file:. Unix.*.Root.UseTTFonts: true. It is possible to check the TTF are in use in a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TAttText.html:5002,scalab,scalable,5002,root/html528/TAttText.html,https://root.cern,https://root.cern/root/html528/TAttText.html,18,['scalab'],['scalable']
Performance," = kFALSE); Add branch with name bname to the Tree cache.; If bname=""*"" all branches are added to the cache.; if subbranches is true all the branches of the subbranches are; also put to the cache.; Returns 0 branch added or already included; -1 on error. Int_t AddBranchToCache(TBranch* branch, Bool_t subbranches = kFALSE); Add branch b to the Tree cache.; if subbranches is true all the branches of the subbranches are; also put to the cache.; Returns 0 branch added or already included; -1 on error. Int_t DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); Remove the branch with name 'bname' from the Tree cache.; If bname=""*"" all branches are removed from the cache.; if subbranches is true all the branches of the subbranches are; also removed from the cache.; Returns 0 branch dropped or not in cache; -1 on error. Int_t DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); Remove the branch b from the Tree cache.; if subbranches is true all the branches of the subbranches are; also removed from the cache.; Returns 0 branch dropped or not in cache; -1 on error. void AddClone(TTree* ); Add a cloned tree to our list of trees to be notified whenever we change; our branch addresses or when we are deleted. TFriendElement* AddFriend(const char* treename, const char* filename = """"); Add a TFriendElement to the list of friends. This function:; -opens a file if filename is specified; -reads a Tree with name treename from the file (current directory); -adds the Tree to the list of friends; see other AddFriend functions. A TFriendElement TF describes a TTree object TF in a file.; When a TFriendElement TF is added to the the list of friends of an; existing TTree T, any variable from TF can be referenced in a query; to T. A tree keeps a list of friends. In the context of a tree (or a chain),; friendship means unrestricted access to the friends data. In this way; it is much like adding another branch to the tree without taking the risk; of damaging it. T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTree.html:38678,cache,cache,38678,root/html604/TTree.html,https://root.cern,https://root.cern/root/html604/TTree.html,1,['cache'],['cache']
Performance," = kFALSE, Bool_t extended = kFALSE) const; virtual voidRooAbsArg::getObservablesHook(const RooArgSet*, RooArgSet*) const; virtual voidRooAbsArg::getParametersHook(const RooArgSet*, RooArgSet*, Bool_t) const; RooAbsProxy*RooAbsArg::getProxy(Int_t index) const; static voidRooAbsReal::globalSelectComp(Bool_t flag); voidRooAbsArg::graphVizAddConnections(set<std::pair<RooAbsArg*,RooAbsArg*> >&); Bool_tRooAbsArg::inhibitDirty() const; voidRooSimultaneous::initialize(RooAbsCategoryLValue& inIndexCat, map<std::string,RooAbsPdf*> pdfMap); TStringRooAbsReal::integralNameSuffix(const RooArgSet& iset, const RooArgSet* nset = 0, const char* rangeName = 0, Bool_t omitEmpty = kFALSE) const; Bool_tRooAbsReal::isSelectedComp() const; virtual Bool_tRooAbsReal::isValid() const; virtual Bool_tRooAbsReal::isValidReal(Double_t value, Bool_t printError = kFALSE) const; voidRooAbsReal::makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars, RooArgSet& projectedVars, Bool_t silent) const; voidTObject::MakeZombie(); Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgSet& set) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c, const RooArgProxy& d) const; Int_tRooAbsArg::numProxies() const; virtual voidRooAbsArg::operModeHook(); virtual voidRooAbsArg::optimizeDirtyHook(const RooArgSet*); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooArgSet& params, Bool_t showConstants = kFALSE, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__HistFactorySimultaneous.html:37396,optimiz,optimizeDirtyHook,37396,root/html534/RooStats__HistFactory__HistFactorySimultaneous.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__HistFactorySimultaneous.html,1,['optimiz'],['optimizeDirtyHook']
Performance," = kTRUE); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); const map<std::string,std::string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const set<std::string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; TIterator*RooAbsCategory::typeIterator() const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); virtual Double_tRooAbsCategoryLValue::volume(const char* rangeName) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidwriteToStream(ostream& os, Bool_t compact) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSuperCategory.html:16628,cache,cache,16628,root/html526/RooSuperCategory.html,https://root.cern,https://root.cern/root/html526/RooSuperCategory.html,1,['cache'],['cache']
Performance," = selNodes->find(arg->GetName()) != nullptr;; 1488 static_cast<RooAbsReal*>(arg)->selectComp(select);; 1489 }; 1490}; 1491 ; 1492 ; 1493 ; 1494////////////////////////////////////////////////////////////////////////////////; 1495/// Plot (project) PDF on specified frame. If a PDF is plotted in an empty frame, it; 1496/// will show a unit normalized curve in the frame variable, taken at the present value; 1497/// of other observables defined for this PDF.; 1498///; 1499/// \param[in] frame pointer to RooPlot; 1500/// \param[in] arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10 Ordered arguments; 1501///; 1502/// If a PDF is plotted in a frame in which a dataset has already been plotted, it will; 1503/// show a projected curve integrated over all variables that were present in the shown; 1504/// dataset except for the one on the x-axis. The normalization of the curve will also; 1505/// be adjusted to the event count of the plotted dataset. An informational message; 1506/// will be printed for each projection step that is performed.; 1507///; 1508/// This function takes the following named arguments; 1509/// <table>; 1510/// <tr><th><th> Projection control; 1511/// <tr><td> `Slice(const RooArgSet& set)` <td> Override default projection behaviour by omitting observables listed; 1512/// in set from the projection, i.e. by not integrating over these.; 1513/// Slicing is usually only sensible in discrete observables, by e.g. creating a slice; 1514/// of the PDF at the current value of the category observable.; 1515///; 1516/// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by omitting the specified category; 1517/// observable from the projection, i.e., by not integrating over all states of this category.; 1518/// The slice is positioned at the given label value. To pass multiple Slice() commands, please use the; 1519/// Slice(std::map<RooCategory*, std::string> const&) argument explained below.; 1520///; 1521/// <tr><td>",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:61878,perform,performed,61878,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['perform'],['performed']
Performance," >, RooCacheManager<vector<Double_t> >. Function Members (Methods); public:. RooCacheManager<vector<double,allocator<double> > >(Int_t maxSize = 10); RooCacheManager<vector<double,allocator<double> > >(RooAbsArg* owner, Int_t maxSize = 10); RooCacheManager<vector<double,allocator<double> > >(const RooCacheManager<vector<double,allocator<double> > >& other, RooAbsArg* owner = 0); virtual~RooCacheManager<vector<double,allocator<double> > >(); Int_tcacheSize() const; static TClass*Class(); virtual voidRooAbsCache::findConstantNodes(const RooArgSet&, RooArgSet&, RooLinkedList&); vector<double,allocator<double> >*getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); vector<double,allocator<double> >*getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0); vector<double,allocator<double> >*getObjByIndex(Int_t index) const; virtual voidinsertObjectHook(vector<double,allocator<double> >&); virtual TClass*IsA() const; Int_tlastIndex() const; const RooNameSet*nameSet1ByIndex(Int_t index) const; const RooNameSet*nameSet2ByIndex(Int_t index) const; RooCacheManager<vector<double,allocator<double> > >&operator=(const RooCacheManager<vector<double,allocator<double> > >&); virtual voidoperModeHook(); virtual voidRooAbsCache::optimizeCacheMode(const RooArgSet&, RooArgSet&, RooLinkedList&); virtual voidprintCompactTreeHook(ostream&, const char*); virtual Bool_tredirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); voidreset(); Int_tsetObj(const RooArgSet* nset, vector<double,allocator<double> >* obj, const TNamed* isetRangeName = 0); Int_tsetObj(const RooArgSet* nset, const RooArgSet* iset, vector<double,allocator<double> >* obj, const TNamed* isetRangeName = 0); virtual voidShowMembers(TMemberInspector& insp, char* parent); voidsterilize(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. Int_t_lastIndexLast slot accessed; Int_t_maxSizeM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCacheManager_vector_double___.html:2627,optimiz,optimizeCacheMode,2627,root/html526/RooCacheManager_vector_double___.html,https://root.cern,https://root.cern/root/html526/RooCacheManager_vector_double___.html,1,['optimiz'],['optimizeCacheMode']
Performance," A ROOT file’s StreamerInfolist contains the description of all versions of all classes in the file. When a file is opened the StreamerInfois read into memory and it provides enough information to make the file browsable. The TStreamerInfoenables us to recreate a header file for the class in case the compiled class is not available. This is done with the TFile::MakeProject method. It creates a directory with the header files for the named classes and a makefile to compile a shared library with the class definitions.; 11.5.9 Example: MakeProject; To explain the details, we use the example of the ATLFast project that is a fast simulation for the ATLAS experiment. The complete source for ATLFast can be down loaded at ftp://root.cern.ch/root/atlfast.tar.gz. Once we compile and run ATLFast we get a ROOT file called atlfast.root, containing the ATLFast objects. When we open the file, we get a warning that the file contains classes that are not in the dictionary. This is correct since we did not load the class definitions.; root[] TFile f(""atlfast.root""); Warning in <TClass::TClass>: no dictionary for class TMCParticle is available; Warning in <TClass::TClass>: no dictionary for class ATLFMuon available; We can see the StreamerInfofor the classes:; root[] f.ShowStreamerInfo(); ...; StreamerInfo for class: ATLFMuon, version=1; BASE TObject offset= 0 type=66 Basic ROOT object; BASE TAtt3D offset= 0 type= 0 3D attributes; Int_t m_KFcode offset= 0 type= 3 Muon KF-code; Int_t m_MCParticle offset= 0 type= 3 Muon position in MCParticles list; Int_t m_KFmother offset= 0 type= 3 Muon mother KF-code; Int_t m_UseFlag offset= 0 type= 3 Muon energy usage flag; Int_t m_Isolated offset= 0 type= 3 Muon isolation (1 for isolated); Float_t m_Eta offset= 0 type= 5 Eta coordinate; Float_t m_Phi offset= 0 type= 5 Phi coordinate; Float_t m_PT offset= 0 type= 5 Transverse energy; Int_t m_Trigger offset= 0 type= 3 Result of trigger...; However, when we try to use a specific class we get a warning ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:506634,load,load,506634,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['load'],['load']
Performance," AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; TF1*func; RooListProxyolist; RooListProxyplist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooTFnBinding.html:31742,cache,cache,31742,root/html526/RooTFnBinding.html,https://root.cern,https://root.cern/root/html526/RooTFnBinding.html,2,['cache'],['cache']
Performance," ADirtyDefinition RooAbsArg.h:362; RooAbsArg::getStringAttributeconst Text_t * getStringAttribute(const Text_t *key) constGet string attribute mapped under key 'key'.Definition RooAbsArg.cxx:275; RooAbsArg::compileForNormSetvirtual std::unique_ptr< RooAbsArg > compileForNormSet(RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) constDefinition RooAbsArg.cxx:2528; RooAbsArg::getComponentsRooFit::OwningPtr< RooArgSet > getComponents() constCreate a RooArgSet with all components (branch nodes) of the expression tree headed by this object.Definition RooAbsArg.cxx:802; RooAbsArg::getAttributebool getAttribute(const Text_t *name) constCheck if a named attribute is set. By default, all attributes are unset.Definition RooAbsArg.cxx:245; RooAbsArg::getVariablesRooFit::OwningPtr< RooArgSet > getVariables(bool stripDisconnected=true) constReturn RooArgSet with all variables (tree leaf nodes of expression tree)Definition RooAbsArg.cxx:2154; RooAbsArg::getCacheRooAbsCache * getCache(Int_t index) constReturn registered cache object by index.Definition RooAbsArg.cxx:2145; RooAbsArg::clientsconst RefCountList_t & clients() constList of all clients of this object.Definition RooAbsArg.h:166; RooAbsArg::isValueDirtybool isValueDirty() constDefinition RooAbsArg.h:393; RooAbsArg::setProxyNormSetvoid setProxyNormSet(const RooArgSet *nset)Forward a change in the cached normalization argset to all the registered proxies.Definition RooAbsArg.cxx:1468; RooAbsArg::branchNodeServerListvoid branchNodeServerList(RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) constFill supplied list with all branch nodes of the arg tree starting with ourself as top node.Definition RooAbsArg.cxx:483; RooAbsArg::CloneTObject * Clone(const char *newname=nullptr) const overrideMake a clone of an object using the Streamer facility.Definition RooAbsArg.h:91; RooAbsArg::_serverListRefCountList_t _serverListDefinition RooAbsArg.h:606; RooAbsArg::numCachesInt_t numCaches() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:137904,cache,cache,137904,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['cache'],['cache']
Performance," About Previous Developers. The following people have been working on ROOT for some time in their career and ROOT would not be what it is without their contributions:; Andrei Gheata; Andrei works since 2001 in the offline group of the ALICE experiment. He is an experimental nuclear physicist who worked before ALICE on data analysis for heavy-ion experiments in emulsions. In 2000 he started collaborating with the ROOT project and implemented the TreeViewer interface. Andrei is the main developer of the ROOT geometry package. He integrated the geometry in the Virtual Monte Carlo framework by developing interfaces for the GEANT3, GEANT4 and FLUKA particle transport engines.; Anna Kreshuk; Anna was a project associate and contributed to different parts of ROOT, most notably to the fitting machinery, the interface to FFTW, numerous math-related functions, TEntryList container and PROOF GUI.; David Gonzalez Maline; David has been working on improving the performance and correctness of various mathematical algorithms as well as on integrating AI methods for data analysis inside the framework. He has also worked on extending and improving the FitPanel interface.; Diego Marcos Segura; Diego worked as technical student on CINT dictionary optimizations.; Eddy Offermann; Eddy joined the ROOT team during a sabbatical to work on making the ROOT matrix package the fastest and most versatile in the industry.; Ilka Antcheva; Ilka has been working from 2002 to 2008 in the ROOT team. She was responsible for the GUI system and designed many high level user interfaces and widgets, like found in many modern graphics applications: ROOT graphics editor (GED) and various object editors, Fit Panel, Style manager, a tool for automatic C++ code generation of any widget and the capability for widgets to save themselves. In addition Ilka took care of the ROOT Users Guide and contributed the chapter ‘Writing a Graphical User Interface’.; Gerardo Ganis; Gerri was a team member for more than ten ye",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/previous-developers.html:2818,perform,performance,2818,d/previous-developers.html,https://root.cern,https://root.cern/d/previous-developers.html,1,['perform'],['performance']
Performance," AbstractMethod(const char *method) constTObject; AddOptionsXMLTo(void *parent) constTMVA::Configurable; AddPreDefVal(const T &)TMVA::Configurable; AddPreDefVal(const TString &optname, const T &)TMVA::Configurable; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; AssignOpt(const TString &name, T &valAssign) constTMVA::Configurableprivate; BookMethod(DataLoader *loader, TString theMethodName, TString methodTitle, TString theOption="""")TMVA::Factory; BookMethod(DataLoader *loader, Types::EMVA theMethod, TString methodTitle, TString theOption="""")TMVA::Factory; BookMethod(DataLoader *, TMVA::Types::EMVA, TString, TString, TMVA::Types::EMVA, TString)TMVA::Factoryinline; BookMethodWeightfile(DataLoader *dataloader, TMVA::Types::EMVA methodType, const TString &weightfile)TMVA::Factoryprivate; Browse(TBrowser *b)TObjectvirtual; CheckedHash()TObjectinline; CheckForUnusedOptions() constTMVA::Configurable; Class()TMVA::Factorystatic; Class_Name()TMVA::Factorystatic; Class_Version()TMVA::Factoryinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Configurable(const TString &theOption="""")TMVA::Configurable; Copy(TObject &named) const overrideTNamedvirtual; CrossValidationTMVA::Factoryfriend; DeclareOptionRef(T &ref, const TString &name, const TString &desc="""")TMVA::Configurable; DeclareOptionRef(T *&ref, Int_t size, const TString &name, const TString &desc="""")TMVA::Configurable; DeclareOptionRef(T &ref, const TString &name, const TString &desc)TMVA::Configurable; DeclareOptionRef(T *&ref, Int_t size, const TString &name, const TString &desc)TMVA::Configurable; Decl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Factory-members.html:628,load,loader,628,doc/master/classTMVA_1_1Factory-members.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory-members.html,2,['load'],['loader']
Performance," Activate memory statistics; Rint.Load: rootalias.C; Rint.Logon: rootlogon.C; Rint.Logoff: rootlogoff.C; ...; Rint.Canvas.MoveOpaque: false; Rint.Canvas.HighLightColor: 5; The various options are explained in $ROOTSYS/etc/system.rootrc. The .rootrc file contents are combined. For example, if the flag to use true type fonts is set to true in the system.rootrc file, you have to set explicitly it false in your local .rootrc file if you do not want to use true type fonts. Removing the UseTTFontsstatement in the local .rootrc file will not disable true fonts. The value of the environment variable ROOTDEBUG overrides the value in the .rootrc file at startup. Its value is used to set gDebug and helps for quick turn on debug mode in TROOT startup.; ROOT looks for scripts in the path specified in the .rootrc file in the Root.Macro.Path variable. You can expand this path to hold your own directories.; 2.7.1 Logon and Logoff Scripts; The rootlogon.C and rootlogoff.C files are scripts loaded and executed at start-up and shutdown. The rootalias.C file is loaded but not executed. It typically contains small utility functions. For example, the rootalias.C script that comes with the ROOT distributions (located in $ROOTSYS/tutorials) defines the function edit(char *file). This allows the user to call the editor from the command line. This particular function will start the VI editor if the environment variable EDITOR is not set.; root[0] edit(""c1.C""); For more details, see $ROOTSYS/tutorials/rootalias.C.; 2.7.2 History File; You can use the up and down arrow at the command line, to access the previous and next command. The commands are recorded in the history file $HOME/.root_hist. It is a text file, and you can edit, cut, and paste from it. You can specify the history file in the system.rootrc file, by setting the Rint.Historyoption. You can also turn off the command logging in the system.rootrc file with the option: Rint.History: -; The number of history lines to be kept can be set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:64828,load,loaded,64828,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['load'],['loaded']
Performance," AddCut(const TCut& cut, const TString& className = """"). void PrepareTrainingAndTestTree(const TCut& cut, Int_t NsigTrain, Int_t NbkgTrain, Int_t NsigTest, Int_t NbkgTest, const TString& otherOpt = ""SplitMode=Random:!V""); prepare the training and test trees. void PrepareTrainingAndTestTree(const TCut& cut, Int_t Ntrain, Int_t Ntest = -1); prepare the training and test trees; kept for backward compatibility. void PrepareTrainingAndTestTree(const TCut& cut, const TString& splitOpt); prepare the training and test trees; -> same cuts for signal and background. void PrepareTrainingAndTestTree(TCut sigcut, TCut bkgcut, const TString& splitOpt); prepare the training and test trees. TMVA::MethodBase* BookMethod(TString theMethodName, TString methodTitle, TString theOption = """"); Book a classifier or regression method. TMVA::MethodBase* BookMethod(TMVA::Types::EMVA theMethod, TString methodTitle, TString theOption = """"); books MVA method; the option configuration string is custom for each MVA; the TString field ""theNameAppendix"" serves to define (and distinguish); several instances of a given MVA, eg, when one wants to compare the; performance of various configurations. TMVA::IMethod* GetMethod(const TString& title) const; returns pointer to MVA that corresponds to given method title. void WriteDataInformation(); put correlations of input data and a few (default + user; selected) transformations into the root file. void OptimizeAllMethods(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); iterates through all booked methods and sees if they use parameter tuning and if so..; does just that i.e. calls ""Method::Train()"" for different parameter setttings and; keeps in mind the ""optimal one""... and that's the one that will later on be used; in the main training loop. void TrainAllMethods(); iterates through all booked methods and calls training. void TestAllMethods(). void MakeClass(const TString& methodTitle = """") const; Print predefined help message of classifier; ite",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__Factory.html:18825,perform,performance,18825,root/html530/TMVA__Factory.html,https://root.cern,https://root.cern/root/html530/TMVA__Factory.html,3,['perform'],['performance']
Performance," AddCut(const TCut& cut, const TString& className = """"). void PrepareTrainingAndTestTree(const TCut& cut, Int_t NsigTrain, Int_t NbkgTrain, Int_t NsigTest, Int_t NbkgTest, const TString& otherOpt = ""SplitMode=Random:!V""); prepare the training and test trees. void PrepareTrainingAndTestTree(const TCut& cut, Int_t Ntrain, Int_t Ntest = -1); prepare the training and test trees; kept for backward compatibility. void PrepareTrainingAndTestTree(const TCut& cut, const TString& splitOpt); prepare the training and test trees; -> same cuts for signal and background. void PrepareTrainingAndTestTree(TCut sigcut, TCut bkgcut, const TString& splitOpt); prepare the training and test trees. TMVA::MethodBase* BookMethod(TString theMethodName, TString methodTitle, TString theOption = """"); Book a classifier or regression method. TMVA::MethodBase* BookMethod(TMVA::Types::EMVA theMethod, TString methodTitle, TString theOption = """"); books MVA method; the option configuration string is custom for each MVA; the TString field ""theNameAppendix"" serves to define (and distinguish); several instances of a given MVA, eg, when one wants to compare the; performance of various configurations. TMVA::IMethod* GetMethod(const TString& title) const; returns pointer to MVA that corresponds to given method title. void WriteDataInformation(); put correlations of input data and a few (default + user; selected) transformations into the root file. void OptimizeAllMethods(TString fomType = ""ROCIntegral"", TString fitType = ""Scan""); iterates through all booked methods and sees if they use parameter tuning and if so..; does just that i.e. calls ""Method::Train()"" for different parameter setttings and; keeps in mind the ""optimal one""... and that's the one that will later on be used; in the main training loop. void TrainAllMethods(); iterates through all booked methods and calls training. void TestAllMethods(). void MakeClass(const TString& methodTitle = """") const; Print predefined help message of classifier; iter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Factory.html:18957,perform,performance,18957,root/html528/TMVA__Factory.html,https://root.cern,https://root.cern/root/html528/TMVA__Factory.html,1,['perform'],['performance']
Performance," Analysis (PCA) example ;  principal.py Principal Components Analysis (PCA) example ;  quantiles.C Demo for quantiles ;  quasirandom.C Example of generating quasi-random numbers ;  Rolke.C Example of the usage of the TRolke class The TRolke class computes the profile likelihood confidence limits for 7 different model assumptions on systematic/statistical uncertainties ;  testrandom.C Performance test of all the ROOT random generator (TRandom, TRandom1, TRandom2 and TRandom3) Tests the generator TRandom3 against some ref values and creates a timing table against TRandom, TRandom1 and TRandom2 ;  tStudent.C Example macro describing the student t distribution ;  tStudent.py Example macro describing the student t distribution ;  TSVDUnfoldExample.C Data unfolding using Singular Value Decomposition ;  vavilov.C Test of the TMath::Vavilov distribution ;  ► matrix;  invertMatrix.C This macro shows several ways to invert a matrix ;  solveLinear.C This macro shows several ways to perform a linear least-squares analysis ;  ► mc;  CompareMasses.CMacro to compare masses in ROOT data base to the values from pdg pdg ;  ► memstat;  memstatExample.CScript post-processing the file generated by TMemStat (default memstat.root) ;  ► mlp;  mlpHiggs.C Example of a Multi Layer Perceptron For a LEP search for invisible Higgs boson, a neural network was used to separate the signal from the background passing some selection cuts ;  mlpRegression.CThis macro shows the use of an ANN for regression analysis: given a set {i} of input vectors i and a set {o} of output vectors o, one looks for the unknown function f(i)=o ;  ► multicore;  imt001_parBranchProcessing.C Demonstrate how to activate and use the implicit parallelisation of TTree::GetEntry ;  imt101_parTreeProcessing.C Illustrate the usage of the TTreeProcessorMT::Process method ;  mp001_fillHistos.C Fill histograms in parallel and write them on file ;  mp101_fillNtuples.C Fill n-tuples in distinct workers ;  mp102_readNtuplesFillHistosAnd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:135731,perform,perform,135731,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,2,['perform'],['perform']
Performance," Any other named argument is passed to the RooAbsData::plotOn() call. See that function for allowed options. RooPlot* makeFrameAndPlotCmd(const RooRealVar& param, RooLinkedList& cmdList, Bool_t symRange = kFALSE) const; Internal function. Construct RooPlot from given parameter and modify the list of named; arguments 'cmdList' to only contain the plot arguments that should be forwarded to; RooAbsData::plotOn(). RooPlot* plotNLL(Double_t lo, Double_t hi, Int_t nBins = 100); Create a RooPlot of the -log(L) distribution in the range lo-hi; with 'nBins' bins. RooPlot* plotError(const RooRealVar& param, Double_t lo, Double_t hi, Int_t nbins = 100); Create a RooPlot of the distribution of the fitted errors of the given parameter.; The frame is created with a range [lo,hi] and plotted data will be binned in 'nbins' bins. RooPlot* plotPull(const RooRealVar& param, Double_t lo = -3.0, Double_t hi = 3.0, Int_t nbins = 25, Bool_t fitGauss = kFALSE); Create a RooPlot of the pull distribution for the given; parameter. The range lo-hi is plotted in nbins. If fitGauss is; set, an unbinned ML fit of the distribution to a Gaussian p.d.f; is performed. The fit result is overlaid on the returned RooPlot; and a box with the fitted mean and sigma is added. RooMCStudy(const RooAbsPdf& model, const RooArgSet& observables, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()). const RooDataSet* genParDataSet() const; Return dataset with generator parameters for each toy. When constraints are used these; may generally not be the same. » Last changed: Tue Dec 8 17:03:16 2009 » Last generated: 2009-12-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMCStudy.html:26325,perform,performed,26325,root/html526/RooMCStudy.html,https://root.cern,https://root.cern/root/html526/RooMCStudy.html,1,['perform'],['performed']
Performance," Assignment operator. ~TClonesArray(); Delete a clones array. void BypassStreamer(Bool_t bypass = kTRUE); When the kBypassStreamer bit is set, the automatically; generated Streamer can call directly TClass::WriteBuffer.; Bypassing the Streamer improves the performance when writing/reading; the objects in the TClonesArray. However there is a drawback:; When a TClonesArray is written with split=0 bypassing the Streamer,; the StreamerInfo of the class in the array being optimized,; one cannot use later the TClonesArray with split>0. For example,; there is a problem with the following scenario:; 1- A class Foo has a TClonesArray of Bar objects; 2- The Foo object is written with split=0 to Tree T1.; In this case the StreamerInfo for the class Bar is created; in optimized mode in such a way that data members of the same type; are written as an array improving the I/O performance.; 3- In a new program, T1 is read and a new Tree T2 is created; with the object Foo in split>1; 4- When the T2 branch is created, the StreamerInfo for the class Bar; is created with no optimization (mandatory for the split mode).; The optimized Bar StreamerInfo is going to be used to read; the TClonesArray in T1. The result will be Bar objects with; data member values not in the right sequence.; The solution to this problem is to call BypassStreamer(kFALSE); for the TClonesArray. In this case, the normal Bar::Streamer function; will be called. The Bar::Streamer function works OK independently; if the Bar StreamerInfo had been generated in optimized mode or not. void Compress(); Remove empty slots from array. TObject * ConstructedAt(Int_t idx); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, it is the callers; responsability to insure that the object is returned to a known state,; usually by calling the Clear method on the TClonesArray. Tests to s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TClonesArray.html:17257,optimiz,optimization,17257,root/html532/TClonesArray.html,https://root.cern,https://root.cern/root/html532/TClonesArray.html,4,['optimiz'],['optimization']
Performance," Assignment operator. ~TClonesArray(); Delete a clones array. void BypassStreamer(Bool_t bypass = kTRUE); When the kBypassStreamer bit is set, the automatically; generated Streamer can call directly TClass::WriteBuffer.; Bypassing the Streamer improves the performance when writing/reading; the objects in the TClonesArray. However there is a drawback:; When a TClonesArray is written with split=0 bypassing the Streamer,; the StreamerInfo of the class in the array being optimized,; one cannot use later the TClonesArray with split>0. For example,; there is a problem with the following scenario:; 1- A class Foo has a TClonesArray of Bar objects; 2- The Foo object is written with split=0 to Tree T1.; In this case the StreamerInfo for the class Bar is created; in optimized mode in such a way that data members of the same type; are written as an array improving the I/O performance.; 3- In a new program, T1 is read and a new Tree T2 is created; with the object Foo in split>1; 4- When the T2 branch is created, the StreamerInfo for the class Bar; is created with no optimization (mandatory for the split mode).; The optimized Bar StreamerInfo is going to be used to read; the TClonesArray in T1. The result will be Bar objects with; data member values not in the right sequence.; The solution to this problem is to call BypassStreamer(kFALSE); for the TClonesArray. In this case, the normal Bar::Streamer function; will be called. The Bar::Streamer function works OK independently; if the Bar StreamerInfo had been generated in optimized mode or not. void Compress(); Remove empty slots from array. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClonesArray.html:13764,optimiz,optimization,13764,root/html526/TClonesArray.html,https://root.cern,https://root.cern/root/html526/TClonesArray.html,3,['optimiz'],['optimization']
Performance," Assume no class library loaded (emulated class).; 4702///; 4703/// Warning: If we create a new streamer info, whether or not the build; 4704/// optimizes is controlled externally to us by a global variable!; 4705/// Don't call us unless you have set that variable properly; 4706/// with TStreamer::Optimize()!; 4707///; 4708 ; 4709TVirtualStreamerInfo* TClass::GetStreamerInfoAbstractEmulated(Int_t version /* = 0 */) const; 4710{; 4711 TVirtualStreamerInfo *sinfo = nullptr;; 4712 ; 4713 TString newname(GetName());; 4714 newname += ""@@emulated"";; 4715 ; 4716 R__LOCKGUARD(gInterpreterMutex);; 4717 ; 4718 TClass *emulated = TClass::GetClass(newname);; 4719 ; 4720 if (emulated); 4721 sinfo = emulated->GetStreamerInfo(version);; 4722 ; 4723 if (!sinfo) {; 4724 // The emulated version of the streamerInfo is explicitly requested and has; 4725 // not been built yet.; 4726 ; 4727 sinfo = (TVirtualStreamerInfo*) fStreamerInfo->At(version);; 4728 ; 4729 if (!sinfo && (version != fClassVersion)) {; 4730 // When the requested version does not exist we return; 4731 // the TVirtualStreamerInfo for the currently loaded class version.; 4732 // FIXME: This arguably makes no sense, we should warn and return nothing instead.; 4733 sinfo = (TVirtualStreamerInfo*) fStreamerInfo->At(fClassVersion);; 4734 }; 4735 ; 4736 if (!sinfo) {; 4737 // Let's take the first available StreamerInfo as a start; 4738 Int_t ninfos = fStreamerInfo->GetEntriesFast() - 1;; 4739 for (Int_t i = -1; sinfo == nullptr && i < ninfos; ++i); 4740 sinfo = (TVirtualStreamerInfo *)fStreamerInfo->UncheckedAt(i);; 4741 }; 4742 ; 4743 if (sinfo) {; 4744 sinfo = dynamic_cast<TVirtualStreamerInfo *>(sinfo->Clone());; 4745 if (sinfo) {; 4746 sinfo->SetClass(nullptr);; 4747 sinfo->SetName(newname);; 4748 sinfo->BuildCheck();; 4749 sinfo->BuildOld();; 4750 sinfo->GetClass()->AddRule(TString::Format(""sourceClass=%s targetClass=%s"",GetName(),newname.Data()));; 4751 } else {; 4752 Error(""GetStreamerInfoAbstractEmulated"", ""could not ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:179651,load,loaded,179651,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['load'],['loaded']
Performance," Assume no class library loaded (emulated class).; 4769///; 4770/// Warning: If we create a new streamer info, whether or not the build; 4771/// optimizes is controlled externally to us by a global variable!; 4772/// Don't call us unless you have set that variable properly; 4773/// with TStreamer::Optimize()!; 4774///; 4775 ; 4776TVirtualStreamerInfo* TClass::GetStreamerInfoAbstractEmulated(Int_t version /* = 0 */) const; 4777{; 4778 TVirtualStreamerInfo *sinfo = nullptr;; 4779 ; 4780 TString newname(GetName());; 4781 newname += ""@@emulated"";; 4782 ; 4783 R__LOCKGUARD(gInterpreterMutex);; 4784 ; 4785 TClass *emulated = TClass::GetClass(newname);; 4786 ; 4787 if (emulated); 4788 sinfo = emulated->GetStreamerInfo(version);; 4789 ; 4790 if (!sinfo) {; 4791 // The emulated version of the streamerInfo is explicitly requested and has; 4792 // not been built yet.; 4793 ; 4794 sinfo = (TVirtualStreamerInfo*) fStreamerInfo->At(version);; 4795 ; 4796 if (!sinfo && (version != fClassVersion)) {; 4797 // When the requested version does not exist we return; 4798 // the TVirtualStreamerInfo for the currently loaded class version.; 4799 // FIXME: This arguably makes no sense, we should warn and return nothing instead.; 4800 sinfo = (TVirtualStreamerInfo*) fStreamerInfo->At(fClassVersion);; 4801 }; 4802 ; 4803 if (!sinfo) {; 4804 // Let's take the first available StreamerInfo as a start; 4805 Int_t ninfos = fStreamerInfo->GetEntriesFast() - 1;; 4806 for (Int_t i = -1; sinfo == nullptr && i < ninfos; ++i); 4807 sinfo = (TVirtualStreamerInfo *)fStreamerInfo->UncheckedAt(i);; 4808 }; 4809 ; 4810 if (sinfo) {; 4811 sinfo = dynamic_cast<TVirtualStreamerInfo *>(sinfo->Clone());; 4812 if (sinfo) {; 4813 sinfo->SetClass(nullptr);; 4814 sinfo->SetName(newname);; 4815 sinfo->BuildCheck();; 4816 sinfo->BuildOld();; 4817 sinfo->GetClass()->AddRule(TString::Format(""sourceClass=%s targetClass=%s"",GetName(),newname.Data()));; 4818 } else {; 4819 Error(""GetStreamerInfoAbstractEmulated"", ""could not ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:182402,load,loaded,182402,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['load'],['loaded']
Performance," Assume no class library loaded (emulated class).; Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4599 of file TClass.cxx. ◆ GetStreamerInfoAbstractEmulated(). TVirtualStreamerInfo * TClass::GetStreamerInfoAbstractEmulated ; (; Int_t ; version = 0); const. For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ; If the object does not exist, it is created; Note: There are two special version numbers:. 0: Use the class version from the currently loaded class library.; -1: Assume no class library loaded (emulated class). Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4709 of file TClass.cxx. ◆ GetStreamerInfoImpl(). TVirtualStreamerInfo * TClass::GetStreamerInfoImpl ; (; Int_t ; version, . Bool_t ; silent . ); const. private . Definition at line 4634 of file TClass.cxx. ◆ GetStreamerInfos(). const TObjArray * TClass::GetStreamerInfos ; (; ); const. inline . Definition at line 492 of file TClass.h. ◆ GetTypeInfo(). const std::type_info * TClass::GetTypeInfo ; (; ); const. inline . Definition at line 496 of file TClass.h. ◆ HasConsistentHashMember(). Bool_t TClass::HasConsistentHashMember ; (; ). inline . Return 'true' if we can guarantee that if this class (or any class in this class inheritance hierarchy) overload TObject::Hash it also starts the RecursiveRemove process from its own destructor. ; Definition at line 501 of file TClass.h. ◆ HasCustomStreamerMember(). Bool_t TClass::HasCustomStreamerMember ; (; ); const. inline . The class has ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:92623,optimiz,optimizes,92623,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,1,['optimiz'],['optimizes']
Performance," Assume no class library loaded (emulated class).; Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4666 of file TClass.cxx. ◆ GetStreamerInfoAbstractEmulated(). TVirtualStreamerInfo * TClass::GetStreamerInfoAbstractEmulated ; (; Int_t ; version = 0); const. For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ; If the object does not exist, it is created; Note: There are two special version numbers:. 0: Use the class version from the currently loaded class library.; -1: Assume no class library loaded (emulated class). Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4776 of file TClass.cxx. ◆ GetStreamerInfoImpl(). TVirtualStreamerInfo * TClass::GetStreamerInfoImpl ; (; Int_t ; version, . Bool_t ; silent . ); const. private . Definition at line 4701 of file TClass.cxx. ◆ GetStreamerInfos(). const TObjArray * TClass::GetStreamerInfos ; (; ); const. inline . Definition at line 492 of file TClass.h. ◆ GetTypeInfo(). const std::type_info * TClass::GetTypeInfo ; (; ); const. inline . Definition at line 496 of file TClass.h. ◆ HasConsistentHashMember(). Bool_t TClass::HasConsistentHashMember ; (; ). inline . Return 'true' if we can guarantee that if this class (or any class in this class inheritance hierarchy) overload TObject::Hash it also starts the RecursiveRemove process from its own destructor. ; Definition at line 501 of file TClass.h. ◆ HasCustomStreamerMember(). Bool_t TClass::HasCustomStreamerMember ; (; ); const. inline . The class has ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClass.html:92624,optimiz,optimizes,92624,doc/master/classTClass.html,https://root.cern,https://root.cern/doc/master/classTClass.html,1,['optimiz'],['optimizes']
Performance," Bool_t extended = kFALSE) const; virtual voidRooAbsArg::getObservablesHook(const RooArgSet*, RooArgSet*) const; virtual voidRooAbsArg::getParametersHook(const RooArgSet*, RooArgSet*, Bool_t) const; RooAddPdf::CacheElem*getProjCache(const RooArgSet* nset, const RooArgSet* iset = 0, const char* rangeName = 0) const; RooAbsProxy*RooAbsArg::getProxy(Int_t index) const; static voidRooAbsReal::globalSelectComp(Bool_t flag); voidRooAbsArg::graphVizAddConnections(set<pair<RooAbsArg*,RooAbsArg*> >&); Bool_tRooAbsArg::inhibitDirty() const; TStringRooAbsReal::integralNameSuffix(const RooArgSet& iset, const RooArgSet* nset = 0, const char* rangeName = 0, Bool_t omitEmpty = kFALSE) const; Bool_tRooAbsReal::isSelectedComp() const; virtual Bool_tRooAbsReal::isValid() const; virtual Bool_tRooAbsReal::isValidReal(Double_t value, Bool_t printError = kFALSE) const; voidRooAbsReal::makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars, RooArgSet& projectedVars, Bool_t silent) const; voidTObject::MakeZombie(); Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgSet& set) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c, const RooArgProxy& d) const; Int_tRooAbsArg::numProxies() const; virtual voidRooAbsArg::operModeHook(); virtual voidRooAbsArg::optimizeDirtyHook(const RooArgSet*); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooArgSet& params, Bool_t showConstants = kFALSE, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAddPdf.html:36892,optimiz,optimizeDirtyHook,36892,root/html602/RooAddPdf.html,https://root.cern,https://root.cern/root/html602/RooAddPdf.html,2,['optimiz'],['optimizeDirtyHook']
Performance," Bool_t extended = kFALSE) const; virtual voidRooAbsArg::getObservablesHook(const RooArgSet*, RooArgSet*) const; virtual voidRooAbsArg::getParametersHook(const RooArgSet*, RooArgSet*, Bool_t) const; const RooAbsReal*getProjection(const RooArgSet* iset, const RooArgSet* nset, const char* rangeName, int& code) const; RooAbsProxy*RooAbsArg::getProxy(Int_t index) const; static voidRooAbsReal::globalSelectComp(Bool_t flag); voidRooAbsArg::graphVizAddConnections(set<pair<RooAbsArg*,RooAbsArg*> >&); Bool_tRooAbsArg::inhibitDirty() const; TStringRooAbsReal::integralNameSuffix(const RooArgSet& iset, const RooArgSet* nset = 0, const char* rangeName = 0, Bool_t omitEmpty = kFALSE) const; Bool_tRooAbsReal::isSelectedComp() const; virtual Bool_tRooAbsReal::isValid() const; virtual Bool_tRooAbsReal::isValidReal(Double_t value, Bool_t printError = kFALSE) const; voidRooAbsReal::makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars, RooArgSet& projectedVars, Bool_t silent) const; voidTObject::MakeZombie(); Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgSet& set) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c, const RooArgProxy& d) const; Int_tRooAbsArg::numProxies() const; virtual voidRooAbsArg::operModeHook(); virtual voidRooAbsArg::optimizeDirtyHook(const RooArgSet*); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooArgSet& params, Bool_t showConstants = kFALSE, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooProjectedPdf.html:36109,optimiz,optimizeDirtyHook,36109,root/html602/RooProjectedPdf.html,https://root.cern,https://root.cern/root/html602/RooProjectedPdf.html,2,['optimiz'],['optimizeDirtyHook']
Performance," Bool_t isConstant() const; Returns true if 'Constant' attribute is set. Bool_t IsSortable() const; Object is sortable in ROOT container class. Bool_t operator==(const RooAbsArg& other). Bool_t inRange(const char* ) const; Range management. Bool_t hasRange(const char* ) const; Has this argument a defined range (dummy interface always returns flase). Bool_t isShapeDirty() const; Dirty state accessor. Bool_t isValueDirty() const; Returns true of value has been invalidated by server value change. Bool_t isValueDirtyAndClear() const; Returns true of value has been invalidated by server value change. Bool_t isValueOrShapeDirtyAndClear() const; Returns true of value has been invalidated by server value change. OperMode operMode() const; { return _operMode ; }. const RooArgSet* ownedComponents() const; { return _ownedComponents ; }. void setProhibitServerRedirect(Bool_t flag); { _prohibitServerRedirect = flag ; }. void operModeHook(); friend class RooSimCloneTool ;. {}. void optimizeDirtyHook(const RooArgSet* ); {}. void getParametersHook(const RooArgSet* , RooArgSet* , Bool_t ) const; {}. void getObservablesHook(const RooArgSet* , RooArgSet* ) const; {}. void setValueDirty() const; Dirty state modifiers. { if (_operMode==Auto && !inhibitDirty()) setValueDirty(0) ; }. void setShapeDirty() const; { setShapeDirty(0) ; }. void clearValueAndShapeDirty() const. void clearValueDirty() const. void clearShapeDirty() const. const char* cacheUniqueSuffix() const; { return 0 ; }. const TNamed* namePtr() const. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); { return kFALSE ; }. void serverNameChangeHook(const RooAbsArg* , const RooAbsArg* ); { }. void setExpensiveObjectCache(RooExpensiveObjectCache& cache); { _eocache = &cache ; }. Bool_t importWorkspaceHook(RooWorkspace& ); { return kFALSE ; }. void syncCache(const RooArgSet* nset = 0). void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE, Bool_t setValDirty = kTRUE). void attachToVStore(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsArg.html:41168,optimiz,optimizeDirtyHook,41168,root/html532/RooAbsArg.html,https://root.cern,https://root.cern/root/html532/RooAbsArg.html,1,['optimiz'],['optimizeDirtyHook']
Performance," Bool_t isRecursive); Intercept server redirects and reconfigure internal object accordingly. const RooArgSet& parameters() const. void operModeHook(); Dummy. Bool_t isValidReal(Double_t value, Bool_t printError = kFALSE) const; Check if current value is valid. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the; integration operation. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print the state of this object to the specified output stream. void setCacheAllNumeric(Int_t ndim); Global switch to cache all integral values that integrate at least ndim dimensions numerically. Int_t getCacheAllNumeric(); Return minimum dimensions of numeric integration for which values are cached. TObject* clone(const char* newname) const; { return new RooRealIntegral(*this,newname); }. Bool_t isValid() const; { return _valid; }. const RooArgSet& numIntCatVars() const; { return _sumList ; }. const RooArgSet& numIntRealVars() const; { return _intList ; }. const RooArgSet& anaIntVars() const; { return _anaList ; }. RooArgSet intVars() const; { RooArgSet tmp(_sumList) ; tmp.add(_intList) ; tmp.add(_anaList) ; tmp.add(_facList) ; return tmp ; }. const char* intRange(); { return _rangeName ? _rangeName->GetName() : 0 ; }. const RooAbsReal& integrand() const; { return _function.arg() ; }. void setCacheNumeric(Bool_t flag); If true, value of this interal is cached if it is (partially numeric). Bool_t getCacheNumeric(); If true, value of this interal is cached if it is (partially numeric). std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; Forward plot sampling hint of integrand. » Last changed: Tue Jun 30 14:35:18 2015 » Last generated: 2015-06-30 14:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooRealIntegral.html:42459,cache,cached,42459,root/html602/RooRealIntegral.html,https://root.cern,https://root.cern/root/html602/RooRealIntegral.html,2,['cache'],['cached']
Performance," Bool_t isRecursive); Intercept server redirects and reconfigure internal object accordingly. const RooArgSet& parameters() const. void operModeHook(); Dummy. Bool_t isValidReal(Double_t value, Bool_t printError = kFALSE) const; Check if current value is valid. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealIntegral to more intuitively reflect the contents of the; integration operation. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print the state of this object to the specified output stream. void setCacheAllNumeric(Int_t ndim); Global switch to cache all integral values that integrate at least ndim dimensions numerically. Int_t getCacheAllNumeric(); Return minimum dimensions of numeric integration for which values are cached. TObject* clone(const char* newname) const; { return new RooRealIntegral(*this,newname); }. Bool_t isValid() const; { return _valid; }. const RooArgSet& numIntCatVars() const; { return _sumList ; }. const RooArgSet& numIntRealVars() const; { return _intList ; }. const RooArgSet& anaIntVars() const; { return _anaList ; }. RooArgSet intVars() const; { RooArgSet tmp(_sumList) ; tmp.add(_intList) ; tmp.add(_anaList) ; tmp.add(_facList) ; return tmp ; }. const char* intRange(); { return _rangeName ? _rangeName->GetName() : 0 ; }. const RooAbsReal& integrand() const; { return _function.arg() ; }. void setCacheNumeric(Bool_t flag); If true, value of this interal is cached if it is (partially numeric). Bool_t getCacheNumeric(); If true, value of this interal is cached if it is (partially numeric). std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; Forward plot sampling hint of integrand. » Last changed: Tue Mar 10 17:18:47 2015 » Last generated: 2015-03-10 17:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRealIntegral.html:40871,cache,cached,40871,root/html534/RooRealIntegral.html,https://root.cern,https://root.cern/root/html534/RooRealIntegral.html,2,['cache'],['cached']
Performance," Bool_t isValueDirtyAndClear() const; Returns true of value has been invalidated by server value change. Bool_t isValueOrShapeDirtyAndClear() const; Returns true of value has been invalidated by server value change. OperMode operMode() const; { return _operMode ; }. const RooArgSet* ownedComponents() const; { return _ownedComponents ; }. void setProhibitServerRedirect(Bool_t flag); { _prohibitServerRedirect = flag ; }. void operModeHook(); friend class RooSimCloneTool ;. {}. void optimizeDirtyHook(const RooArgSet* ); {}. void getParametersHook(const RooArgSet* , RooArgSet* , Bool_t ) const; {}. void getObservablesHook(const RooArgSet* , RooArgSet* ) const; {}. void setValueDirty() const; Dirty state modifiers. { if (_operMode==Auto && !inhibitDirty()) setValueDirty(0) ; }. void setShapeDirty() const; { setShapeDirty(0) ; }. void clearValueAndShapeDirty() const. void clearValueDirty() const. void clearShapeDirty() const. const char* cacheUniqueSuffix() const; { return 0 ; }. const TNamed* namePtr() const. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); { return kFALSE ; }. void serverNameChangeHook(const RooAbsArg* , const RooAbsArg* ); { }. void setExpensiveObjectCache(RooExpensiveObjectCache& cache); { _eocache = &cache ; }. Bool_t importWorkspaceHook(RooWorkspace& ); { return kFALSE ; }. void syncCache(const RooArgSet* nset = 0). void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE, Bool_t setValDirty = kTRUE). void attachToVStore(RooVectorDataStore& vstore). void setTreeBranchStatus(TTree& t, Bool_t active). void fillTreeBranch(TTree& t). void setLocalNoDirtyInhibit(Bool_t flag) const; { _localNoInhibitDirty = flag ; }. Bool_t localNoDirtyInhibit() const; { return _localNoInhibitDirty ; }. » Last changed: Sat Jun 20 17:29:22 2015 » Last generated: 2015-06-20 17:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooAbsArg.html:46321,cache,cache,46321,root/html604/RooAbsArg.html,https://root.cern,https://root.cern/root/html604/RooAbsArg.html,2,['cache'],['cache']
Performance," Bool_t isValueDirtyAndClear() const; Returns true of value has been invalidated by server value change. Bool_t isValueOrShapeDirtyAndClear() const; Returns true of value has been invalidated by server value change. OperMode operMode() const; { return _operMode ; }. const RooArgSet* ownedComponents() const; { return _ownedComponents ; }. void setProhibitServerRedirect(Bool_t flag); { _prohibitServerRedirect = flag ; }. void operModeHook(); friend class RooSimCloneTool ;. {}. void optimizeDirtyHook(const RooArgSet* ); {}. void getParametersHook(const RooArgSet* , RooArgSet* , Bool_t ) const; {}. void getObservablesHook(const RooArgSet* , RooArgSet* ) const; {}. void setValueDirty() const; Dirty state modifiers. { if (_operMode==Auto && !inhibitDirty()) setValueDirty(0) ; }. void setShapeDirty() const; { setShapeDirty(0) ; }. void clearValueAndShapeDirty() const. void clearValueDirty() const. void clearShapeDirty() const. const char* cacheUniqueSuffix() const; { return 0 ; }. const TNamed* namePtr() const. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); { return kFALSE ; }. void serverNameChangeHook(const RooAbsArg* , const RooAbsArg* ); { }. void setExpensiveObjectCache(RooExpensiveObjectCache& cache); { _eocache = &cache ; }. Bool_t importWorkspaceHook(RooWorkspace& ); { return kFALSE ; }. void syncCache(const RooArgSet* nset = 0). void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE, Bool_t setValDirty = kTRUE). void attachToVStore(RooVectorDataStore& vstore). void setTreeBranchStatus(TTree& t, Bool_t active). void fillTreeBranch(TTree& t). void setLocalNoDirtyInhibit(Bool_t flag) const; { _localNoInhibitDirty = flag ; }. Bool_t localNoDirtyInhibit() const; { return _localNoInhibitDirty ; }. » Last changed: Sun Jun 28 16:37:40 2015 » Last generated: 2015-06-28 16:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsArg.html:44625,cache,cache,44625,root/html534/RooAbsArg.html,https://root.cern,https://root.cern/root/html534/RooAbsArg.html,2,['cache'],['cache']
Performance," Bool_t isValueDirtyAndClear() const; Returns true of value has been invalidated by server value change. Bool_t isValueOrShapeDirtyAndClear() const; Returns true of value has been invalidated by server value change. OperMode operMode() const; { return _operMode ; }. const RooArgSet* ownedComponents() const; { return _ownedComponents ; }. void setProhibitServerRedirect(Bool_t flag); { _prohibitServerRedirect = flag ; }. void operModeHook(); friend class RooSimCloneTool ;. {}. void optimizeDirtyHook(const RooArgSet* ); {}. void getParametersHook(const RooArgSet* , RooArgSet* , Bool_t ) const; {}. void getObservablesHook(const RooArgSet* , RooArgSet* ) const; {}. void setValueDirty() const; Dirty state modifiers. { if (_operMode==Auto && !inhibitDirty()) setValueDirty(0) ; }. void setShapeDirty() const; { setShapeDirty(0) ; }. void clearValueAndShapeDirty() const. void clearValueDirty() const. void clearShapeDirty() const. const char* cacheUniqueSuffix() const; { return 0 ; }. const TNamed* namePtr() const. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); { return kFALSE ; }. void serverNameChangeHook(const RooAbsArg* , const RooAbsArg* ); { }. void setExpensiveObjectCache(RooExpensiveObjectCache& cache); { _eocache = &cache ; }. Bool_t importWorkspaceHook(RooWorkspace& ); { return kFALSE ; }. void syncCache(const RooArgSet* nset = 0). void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE, Bool_t setValDirty = kTRUE). void attachToVStore(RooVectorDataStore& vstore). void setTreeBranchStatus(TTree& t, Bool_t active). void fillTreeBranch(TTree& t). void setLocalNoDirtyInhibit(Bool_t flag) const; { _localNoInhibitDirty = flag ; }. Bool_t localNoDirtyInhibit() const; { return _localNoInhibitDirty ; }. » Last changed: Tue Jun 30 14:29:52 2015 » Last generated: 2015-06-30 14:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsArg.html:46321,cache,cache,46321,root/html602/RooAbsArg.html,https://root.cern,https://root.cern/root/html602/RooAbsArg.html,2,['cache'],['cache']
Performance," Bool_t nodeid = kFALSE); Builds the cache for physical nodes and global matrices. Bool_t cd(const char* path = """"); Browse the tree of nodes starting from top node according to pathname.; Changes the path accordingly. Bool_t CheckPath(const char* path) const; Check if a geometry path is valid without changing the state of the navigator. void CdNode(Int_t nodeid); Change current path to point to the node having this id.; Node id has to be in range : 0 to fNNodes-1 (no check for performance reasons). void CdDown(Int_t index); Make a daughter of current node current. Can be called only with a valid; daughter index (no check). Updates cache accordingly. void CdDown(TGeoNode* node); Make a daughter of current node current. Can be called only with a valid; daughter node (no check). Updates cache accordingly. void CdUp(); Go one level up in geometry. Updates cache accordingly.; Determine the overlapping state of current node. void CdTop(); Make top level node the current node. Updates the cache accordingly.; Determine the overlapping state of current node. void CdNext(); Do a cd to the node found next by FindNextBoundary. void GetBranchNames(Int_t* names) const; Fill volume names of current branch into an array. void GetBranchNumbers(Int_t* copyNumbers, Int_t* volumeNumbers) const; Fill node copy numbers of current branch into an array. void GetBranchOnlys(Int_t* isonly) const; Fill node copy numbers of current branch into an array. TGeoNode * CrossDivisionCell(); Cross a division cell. Distance to exit contained in fStep, current node; points to the cell node. TGeoNode * CrossBoundaryAndLocate(Bool_t downwards, TGeoNode* skipnode); Cross next boundary and locate within current node; The current point must be on the boundary of fCurrentNode. TGeoNode * FindNextBoundary(Double_t stepmax = TGeoShape::Big(), const char* path = """", Bool_t frombdr = kFALSE); Find distance to next boundary and store it in fStep. Returns node to which this; boundary belongs. If PATH is specified,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoNavigator.html:14130,cache,cache,14130,root/html602/TGeoNavigator.html,https://root.cern,https://root.cern/root/html602/TGeoNavigator.html,1,['cache'],['cache']
Performance," Bool_t skipInit = kFALSE, Bool_t extended = kFALSE) const; virtual voidRooAbsArg::getObservablesHook(const RooArgSet*, RooArgSet*) const; virtual voidRooAbsArg::getParametersHook(const RooArgSet*, RooArgSet*, Bool_t) const; RooAbsProxy*RooAbsArg::getProxy(Int_t index) const; static voidRooAbsReal::globalSelectComp(Bool_t flag); voidRooAbsArg::graphVizAddConnections(set<std::pair<RooAbsArg*,RooAbsArg*> >&); static Bool_tRooAbsArg::inhibitDirty(); voidinitialize(RooAbsCategoryLValue& inIndexCat, map<std::string,RooAbsPdf*> pdfMap); TStringRooAbsReal::integralNameSuffix(const RooArgSet& iset, const RooArgSet* nset = 0, const char* rangeName = 0, Bool_t omitEmpty = kFALSE) const; Bool_tRooAbsReal::isSelectedComp() const; virtual Bool_tRooAbsReal::isValid() const; virtual Bool_tRooAbsReal::isValidReal(Double_t value, Bool_t printError = kFALSE) const; voidRooAbsReal::makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars, RooArgSet& projectedVars, Bool_t silent) const; voidTObject::MakeZombie(); Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgSet& set) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c, const RooArgProxy& d) const; Int_tRooAbsArg::numProxies() const; virtual voidRooAbsArg::operModeHook(); virtual voidRooAbsArg::optimizeDirtyHook(const RooArgSet*); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooArgSet& params, Bool_t showConstants = kFALSE, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooSimultaneous.html:35391,optimiz,optimizeDirtyHook,35391,root/html532/RooSimultaneous.html,https://root.cern,https://root.cern/root/html532/RooSimultaneous.html,1,['optimiz'],['optimizeDirtyHook']
Performance," Bool_t verbose, Bool_t randProtoOrder, Bool_t resampleProto, Bool_t skipInit = kFALSE, Bool_t extended = kFALSE) const; virtual voidRooAbsArg::getObservablesHook(const RooArgSet*, RooArgSet*) const; virtual voidRooAbsArg::getParametersHook(const RooArgSet*, RooArgSet*, Bool_t) const; RooAbsProxy*RooAbsArg::getProxy(Int_t index) const; static voidRooAbsReal::globalSelectComp(Bool_t flag); voidRooAbsArg::graphVizAddConnections(set<pair<RooAbsArg*,RooAbsArg*> >&); Bool_tRooAbsArg::inhibitDirty() const; TStringRooAbsReal::integralNameSuffix(const RooArgSet& iset, const RooArgSet* nset = 0, const char* rangeName = 0, Bool_t omitEmpty = kFALSE) const; Bool_tRooAbsReal::isSelectedComp() const; virtual Bool_tRooAbsReal::isValid() const; virtual Bool_tRooAbsReal::isValidReal(Double_t value, Bool_t printError = kFALSE) const; Double_tlogSum(Int_t i) const; voidRooAbsReal::makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars, RooArgSet& projectedVars, Bool_t silent) const; voidTObject::MakeZombie(); Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgSet& set) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c, const RooArgProxy& d) const; Int_tRooAbsArg::numProxies() const; virtual voidRooAbsArg::operModeHook(); virtual voidRooAbsArg::optimizeDirtyHook(const RooArgSet*); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooArgSet& params, Bool_t showConstants = kFALSE, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooHistConstraint.html:35379,optimiz,optimizeDirtyHook,35379,root/html602/RooHistConstraint.html,https://root.cern,https://root.cern/root/html602/RooHistConstraint.html,2,['optimiz'],['optimizeDirtyHook']
Performance, Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigN,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/Roo2DKeysPdf.html:38404,cache,cache,38404,root/html526/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html526/Roo2DKeysPdf.html,38,['cache'],['cache']
Performance, Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; TString_sigCatNameName of accept state of accept/reject category; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific f,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooEfficiency.html:37803,cache,cache,37803,root/html526/RooEfficiency.html,https://root.cern,https://root.cern/root/html526/RooEfficiency.html,1,['cache'],['cache']
Performance, Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; const RooArgSet*_nset! Normalization set to be used in evaluation; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooRealProxy_pdfProbability Density function; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGenerat,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooEffProd.html:37799,cache,cache,37799,root/html526/RooEffProd.html,https://root.cern,https://root.cern/root/html526/RooEffProd.html,1,['cache'],['cache']
Performance, Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC genera,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/Roo2DKeysPdf.html:38786,cache,cache,38786,root/html528/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html528/Roo2DKeysPdf.html,38,['cache'],['cache']
Performance, Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; TString_sigCatNameName of accept state of accept/reject ca,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooEfficiency.html:38185,cache,cache,38185,root/html528/RooEfficiency.html,https://root.cern,https://root.cern/root/html528/RooEfficiency.html,1,['cache'],['cache']
Performance, Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculatin,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooKeysPdf.html:38982,cache,cache,38982,root/html528/RooKeysPdf.html,https://root.cern,https://root.cern/root/html528/RooKeysPdf.html,43,['cache'],['cache']
Performance, Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalcul,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/Roo2DKeysPdf.html:39658,cache,cache,39658,root/html532/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html532/Roo2DKeysPdf.html,40,['cache'],['cache']
Performance, Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; const RooArgSet*_nset! Normalization set to be used in evaluation; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooRealProxy_pdfProbability Density function; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if va,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooEffProd.html:38181,cache,cache,38181,root/html528/RooEffProd.html,https://root.cern,https://root.cern/root/html528/RooEffProd.html,1,['cache'],['cache']
Performance, Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; const RooArgSet*_nset! Normalization set to be used in evaluation; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooRealProxy_pdfProbability Density function; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountL,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooEffProd.html:38650,cache,cache,38650,root/html530/RooEffProd.html,https://root.cern,https://root.cern/root/html530/RooEffProd.html,1,['cache'],['cache']
Performance," Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,double,int,int>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCFunction3Ref<VO,VI1,VI2,VI3> Streamer(TBuffer& ); Custom stream",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3Binding_double_double_int_int_.html:36760,cache,cache,36760,root/html602/RooCFunction3Binding_double_double_int_int_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3Binding_double_double_int_int_.html,4,['cache'],['cache']
Performance," Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Bool_t_disableCacheFlag to run object in passthrough (= non-caching mode). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsCachedReal(); Destructor. Double_t getValV(const RooArgSet* set = 0) const; Implementation of getVal() overriding default implementation; of RooAbsReal. Return value stored in cache p.d.f; rather than return value of evaluate() which is undefined; for RooAbsCachedReal. void clearCacheObject(RooAbsCachedReal::FuncCacheElem& cache) const; Mark all bins as unitialized (value -1). TString cacheNameSuffix(const RooArgSet& nset) const; Construct unique suffix name for cache p.d.f object. void setInterpolationOrder(Int_t order); Set interpolation order of RooHistFunct representing cache histogram. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integration capabilities of the RooHistFunc that corresponds to the set of observables in allVars. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Forward call to implementation in relevant RooHistFunc instance. Bool_t selfNormalized() const; Declares function self normalized. Int_t getInterpolationOrder() const; Set interpolation order in RooHistFuncs that represent cache histograms. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Force all observables to be offered for internal integration. FuncCacheElem* getCache(const RooArgSet* nset) const. const char* payloadUniqueSuffix() const; { return 0 ; }. const char* binningName() const; Returns name of binning to be used for cache histogram creation. FuncCacheElem* createCache(con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsCachedReal.html:35956,cache,cache,35956,root/html532/RooAbsCachedReal.html,https://root.cern,https://root.cern/root/html532/RooAbsCachedReal.html,1,['cache'],['cache']
Performance," Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Bool_t_disableCacheFlag to run object in passthrough (= non-caching mode). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsCachedReal(); Destructor. Double_t getValV(const RooArgSet* set = 0) const; Implementation of getVal() overriding default implementation; of RooAbsReal. Return value stored in cache p.d.f; rather than return value of evaluate() which is undefined; for RooAbsCachedReal. void clearCacheObject(RooAbsCachedReal::FuncCacheElem& cache) const; Mark all bins as unitialized (value -1). TString cacheNameSuffix(const RooArgSet& nset) const; Construct unique suffix name for cache p.d.f object. void setInterpolationOrder(Int_t order); Set interpolation order of RooHistFunct representing cache histogram. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integration capabilities of the RooHistFunc that corresponds to the set of observables in allVars. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Forward call to implementation in relevant RooHistFunc instance. Bool_t selfNormalized() const; Declares function self normalized. Int_t getInterpolationOrder() const; Set interpolation order in RooHistFuncs that represent cache histograms. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Force all observables to be offered for internal integration. void disableCache(Bool_t flag); Switch to disable caching mechanism. FuncCacheElem* getCache(const RooArgSet* nset) const. const char* payloadUniqueSuffix() const; { return 0 ; }. const char* binningName() const; Returns name of binning to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsCachedReal.html:37811,cache,cache,37811,root/html534/RooAbsCachedReal.html,https://root.cern,https://root.cern/root/html534/RooAbsCachedReal.html,1,['cache'],['cache']
Performance," Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction2Binding<double,double,double>&operator=(const RooCFunction2Binding<double,double,double>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction2Binding_double_double_double_.html:19808,optimiz,optimizeCacheMode,19808,root/html602/RooCFunction2Binding_double_double_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction2Binding_double_double_double_.html,2,['optimiz'],['optimizeCacheMode']
Performance," Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooCategoryProxy_catAccept/reject categort; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooRealProxy_effFuncEfficiency modeling function; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooEfficiency.html:40470,cache,cache,40470,root/html534/RooEfficiency.html,https://root.cern,https://root.cern/root/html534/RooEfficiency.html,2,['cache'],['cache']
Performance," Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_tRooAbsCachedReal::_ipOrderInterpolation order for cache histograms ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsSelfCachedReal.html:34005,cache,cache,34005,root/html532/RooAbsSelfCachedReal.html,https://root.cern,https://root.cern/root/html532/RooAbsSelfCachedReal.html,2,['cache'],['cache']
Performance," Bool_talwaysStartFromMin() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; const RooArgSet&bestFitObs() const; const RooArgSet&bestFitParams() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProfileLL.html:2488,cache,cacheUniqueSuffix,2488,root/html528/RooProfileLL.html,https://root.cern,https://root.cern/root/html528/RooProfileLL.html,3,['cache'],['cacheUniqueSuffix']
Performance," Bool_tfgIgnoreSizeForCameraInterest. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLLogicalShape(); Constructor. TGLLogicalShape(TObject* obj); Constructor with external object. TGLLogicalShape(const TBuffer3D& buffer); Constructor from TBuffer3D. ~TGLLogicalShape(); Destroy logical shape. void AddRef(TGLPhysicalShape* phys) const; Add reference to given physical shape. void SubRef(TGLPhysicalShape* phys) const; Remove reference to given physical shape, potentially deleting; *this* object when hitting zero ref-count (if fRefStrong is; true). void DestroyPhysicals(); Destroy all physicals attached to this logical. UInt_t UnrefFirstPhysical(); Unreference first physical in the list, returning its id and; making it fit for destruction somewhere else.; Returns 0 if there are no replicas attached. void UpdateBoundingBoxesOfPhysicals(); Update bounding-boxed of all dependent physicals. Bool_t SetDLCache(Bool_t cached); Modify capture of draws into display list cache kTRUE - capture,; kFALSE direct draw. Return kTRUE is state changed, kFALSE if not. Bool_t ShouldDLCache(const TGLRnrCtx& rnrCtx) const; Returns kTRUE if draws should be display list cached; kFALSE otherwise. Here we check that:; a) fScene is set (Scene manages link to GL-context);; b) secondary selection is not in progress as different; render-path is usually taken in this case. Otherwise we return internal bool. Override this in sub-class if different behaviour is required. void DLCacheClear(); Clear all entries for all LODs for this drawable from the; display list cache but keeping the reserved ids from GL context. void DLCacheDrop(); Drop all entries for all LODs for this drawable from the display; list cache, WITHOUT returning the reserved ids to GL context. This is called by scene if it realized that the GL context was; destroyed. void DLCachePurge(); Purge all entries for all LODs for this drawable from the; display list cache, returning the reserved ids t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLLogicalShape.html:5877,cache,cached,5877,root/html602/TGLLogicalShape.html,https://root.cern,https://root.cern/root/html602/TGLLogicalShape.html,4,['cache'],"['cache', 'cached']"
Performance," CL limits using the Likelihood ratio semi-bayesian method. ; Implemented by C. Delaere from the mclimit code written by Tom Junk [HEP-EX/9902006]. See http://cern.ch/thomasj/searchlimits/ecl.html for more details.; It takes signal, background and data histograms wrapped in a TLimitDataSource as input and runs a set of Monte Carlo experiments in order to compute the limits. If needed, inputs are fluctuated according to systematics. The output is a TConfidenceLevel.; The class TLimitDataSource takes the signal, background and data histograms as well as different systematics sources to form the TLimit input.; The class TConfidenceLevel represents the final result of the TLimit algorithm. It is created just after the time-consuming part and can be stored in a TFile for further processing. It contains light methods to return CLs, CLb and other interesting quantities.; The actual algorithm...; From an input (TLimitDataSource) it produces an output TConfidenceLevel. For this, nmc Monte Carlo experiments are performed. As usual, the larger this number, the longer the compute time, but the better the result.; Supposing that there is a plotfile.root file containing 3 histograms (signal, background and data), you can imagine doing things like:; TFile* infile=new TFile(""plotfile.root"",""READ"");; infile->cd();; TH1* sh=(TH1*)infile->Get(""signal"");; TH1* bh=(TH1*)infile->Get(""background"");; TH1* dh=(TH1*)infile->Get(""data"");; TLimitDataSource* mydatasource = new TLimitDataSource(sh,bh,dh);; TConfidenceLevel *myconfidence = TLimit::ComputeLimit(mydatasource,50000);; std::cout << "" CLs : "" << myconfidence->CLs() << std::endl;; std::cout << "" CLsb : "" << myconfidence->CLsb() << std::endl;; std::cout << "" CLb : "" << myconfidence->CLb() << std::endl;; std::cout << ""< CLs > : "" << myconfidence->GetExpectedCLs_b() << std::endl;; std::cout << ""< CLsb > : "" << myconfidence->GetExpectedCLsb_b() << std::endl;; std::cout << ""< CLb > : "" << myconfidence->GetExpectedCLb_b() << std::endl;; delet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLimit.html:1646,perform,performed,1646,doc/master/classTLimit.html,https://root.cern,https://root.cern/doc/master/classTLimit.html,1,['perform'],['performed']
Performance," Cheat sheet; Introduction; Crash course; Working with collections; Transformations: manipulating data; Actions: getting results; Distributed execution in Python; Performance tips and parallel execution; More features; Systematic variations; RDataFrame objects as function arguments and return values; Storing RDataFrame objects in collections; Executing callbacks every N events; Default column lists; Special helper columns: `rdfentry_` and `rdfslot_`; Just-in-time compilation: column type inference and explicit declaration of column types; User-defined custom actions; Dataset joins with friend trees; Reading data formats other than ROOT trees; Computation graphs (storing and reusing sets of transformations); Visualizing the computation graph; Activating RDataFrame execution logs; Creating an RDataFrame from a dataset specification file; Adding a progress bar; Working with missing values in the dataset. Efficient analysis in Python; Class reference. Cheat sheet; These are the operations which can be performed with RDataFrame. Transformations; Transformations are a way to manipulate the data. Transformation Description . Alias() Introduce an alias for a particular column name. . DefaultValueFor() If the value of the input column is missing, provide a default value instead. . Define() Create a new column in the dataset. Example usages include adding a column that contains the invariant mass of a particle, or a selection of elements of an array (e.g. only the pts of ""good"" muons). . DefinePerSample() Define a new column that is updated when the input sample changes, e.g. when switching tree being processed in a chain. . DefineSlot() Same as Define(), but the user-defined function must take an extra unsigned int slot as its first parameter. slot will take a different value, 0 to nThreads - 1, for each thread of execution. This is meant as a helper in writing thread-safe Define() transformation when using RDataFrame after ROOT::EnableImplicitMT(). DefineSlot() works just a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDataFrame.html:2725,perform,performed,2725,doc/master/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html,1,['perform'],['performed']
Performance," Check the table exist in the database. TString ConvertTypeName(const TString& typeName); Convert from ROOT typename to SQL typename. TBasket * CreateBasket(TBranch* br); Create a TBasketSQL. void CreateBranch(const TString& branchName, const TString& typeName); Create the column(s) in the database that correspond to the branch. TString CreateBranches(TSQLResult* rs); determine leaf description string. Bool_t CreateTable(const TString& table); Create the database table corresponding to this TTree. void Init(); Initializeation routine. Int_t Fill(); Copy the information from the user object to the TTree. vector<Int_t> * GetColumnIndice(TBranch* branch); Return a vector of columns index corresponding to the; current SQL table and the branch given as argument; Returns 0 if no columns indices is found; Otherwise returns a pointer to a vector to be deleted by the caller. Long64_t GetEntries() const; Get the number of rows in the database. Long64_t GetEntriesFast() const; Return the number of entries as of the last check.; Use GetEntries for a more accurate count. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0); Load the data for the entry from the database. Long64_t LoadTree(Long64_t entry); Setup the tree to the load the specified entry. Long64_t PrepEntry(Long64_t entry); Make sure the server and result set are setup for the requested entry. void Refresh(); Refresh contents of this Tree and his branches from the current; Tree status in the database; One can call this function in case the Tree on its file is being; updated by another process. void ResetQuery(); Reset the internal query. Long64_t GetEntries() const. TString GetTableName(); { return fTable; }. » Author: Rene Brun 12/01/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-03-15 16:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeSQL.html:28197,load,load,28197,root/html534/TTreeSQL.html,https://root.cern,https://root.cern/root/html534/TTreeSQL.html,1,['load'],['load']
Performance, Coefficient error counter; TIterator*_coefIter! Iterator over coefficient list; RooListProxy_coefListList of coefficients; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; Bool_t_haveLastCoefFlag indicating if last PDFs coefficient was supplied in the ctor; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; TIterator*_pdfIter! Iterator over PDF list; RooListProxy_pdfListList of component PDFs; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddPdf.html:38854,cache,cache,38854,root/html526/RooAddPdf.html,https://root.cern,https://root.cern/root/html526/RooAddPdf.html,1,['cache'],['cache']
Performance, Coefficient error counter; TIterator*_coefIter! Iterator over coefficient list; RooListProxy_coefListList of coefficients; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; Bool_t_haveLastCoefFlag indicating if last PDFs coefficient was supplied in the ctor; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; TIterator*_pdfIter! Iterator over PDF list; RooListProxy_pdfListList of component PDFs; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAddPdf.html:39507,cache,cache,39507,root/html528/RooAddPdf.html,https://root.cern,https://root.cern/root/html528/RooAddPdf.html,2,['cache'],['cache']
Performance, Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Int_tTTree::fMakeClass! not zero when processing code generated by MakeClass; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTTree::fMaxClusterRange! Memory allocated for the cluster range.; Long64_tTTree::fMaxEntriesMaximum number of entries in case of circular buffers; Long64_tTTree::fMaxEntryLoopMaximum number of entries to process; Long64_tTTree::fMaxVirtualSizeMaximum total size of buffers kept in memory; Int_tTTree::fNClusterRangeNumber of Cluster range in addition to the one defined by 'AutoFlush'; TStringTNamed::fNameobject identifier; Int_tTTree::fNfill! Local for EntryLoop; TObject*TTree::fNotify! Object to be notified when loading a Tree; Int_tTTree::fPacketSize! Number of entries in one packet for parallel root; TVirtualTreePlayer*TTree::fPlayer! Pointer to current Tree player; TStringfQuery; Long64_tTTree::fReadEntry! Number of the entry being processed; TSQLResult*fResult; TSQLRow*fRow; Long64_tTTree::fSavedBytesNumber of autosaved bytes; Int_tTTree::fScanFieldNumber of runs before prompting in Scan; TSQLServer*fServer; TStringfTable; Int_tTTree::fTimerIntervalTimer interval in milliseconds; TStringTNamed::fTitleobject title; Long64_tTTree::fTotBytesTotal number of bytes in all branches before compression; Long64_tTTree::fTotalBuffers! Total number of bytes in branch buffers; TBuffer*TTree::fTransientBuffer! Pointer to the current transient buffer.; TVirtualIndex*TTree::fTreeIndexPointer to the tree Index (if any); Int_tTTree::fUpdateUpdate frequency for EntryLoop; TList*TTree::fUserInfopointer to a list of user objects associated to this Tree; Double_tTTree::fWeightTree weight (see TTree::SetWeight); Long64_tTTree::fZipBytesTotal number of bytes in all branches after compression; static Int_tTTree::fgBranchStyleOld/New branch style; static Lo,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTreeSQL.html:23064,load,loading,23064,root/html530/TTreeSQL.html,https://root.cern,https://root.cern/root/html530/TTreeSQL.html,2,['load'],['loading']
Performance," ConvertTypeName(const TString& typeName); Convert from ROOT typename to SQL typename. TBasket * CreateBasket(TBranch* br); Create a TBasketSQL. void CreateBranch(const TString& branchName, const TString& typeName); Create the column(s) in the database that correspond to the branch. TString CreateBranches(TSQLResult* rs); determine leaf description string. Bool_t CreateTable(const TString& table); Create the database table corresponding to this TTree. void Init(); Initializeation routine. Int_t Fill(); Copy the information from the user object to the TTree. vector<Int_t> * GetColumnIndice(TBranch* branch); Return a vector of columns index corresponding to the; current SQL table and the branch given as argument; Returns 0 if no columns indices is found; Otherwise returns a pointer to a vector to be deleted by the caller. Long64_t GetEntries() const; Get the number of rows in the database. Long64_t GetEntriesFast() const; Return the number of entries as of the last check.; Use GetEntries for a more accurate count. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0); Load the data for the entry from the database. Long64_t LoadTree(Long64_t entry); Setup the tree to the load the specified entry. Long64_t PrepEntry(Long64_t entry); Make sure the server and result set are setup for the requested entry. void Refresh(); Refresh contents of this Tree and his branches from the current; Tree status in the database; One can call this function in case the Tree on its file is being; updated by another process. void ResetQuery(); Reset the internal query. Long64_t GetEntries() const. TString GetTableName(); { return fTable; }. » Author: Rene Brun 12/01/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TTreeSQL.h 30663 2009-10-11 22:11:51Z pcanal $ » Last generated: 2010-09-30 18:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeSQL.html:25918,load,load,25918,root/html528/TTreeSQL.html,https://root.cern,https://root.cern/root/html528/TTreeSQL.html,1,['load'],['load']
Performance," ConvertTypeName(const TString& typeName); Convert from ROOT typename to SQL typename. TBasket * CreateBasket(TBranch* br); Create a TBasketSQL. void CreateBranch(const TString& branchName, const TString& typeName); Create the column(s) in the database that correspond to the branch. TString CreateBranches(TSQLResult* rs); determine leaf description string. Bool_t CreateTable(const TString& table); Create the database table corresponding to this TTree. void Init(); Initializeation routine. Int_t Fill(); Copy the information from the user object to the TTree. vector<Int_t> * GetColumnIndice(TBranch* branch); Return a vector of columns index corresponding to the; current SQL table and the branch given as argument; Returns 0 if no columns indices is found; Otherwise returns a pointer to a vector to be deleted by the caller. Long64_t GetEntries() const; Get the number of rows in the database. Long64_t GetEntriesFast() const; Return the number of entries as of the last check.; Use GetEntries for a more accurate count. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0); Load the data for the entry from the database. Long64_t LoadTree(Long64_t entry); Setup the tree to the load the specified entry. Long64_t PrepEntry(Long64_t entry); Make sure the server and result set are setup for the requested entry. void Refresh(); Refresh contents of this Tree and his branches from the current; Tree status in the database; One can call this function in case the Tree on its file is being; updated by another process. void ResetQuery(); Reset the internal query. Long64_t GetEntries() const. TString GetTableName(); { return fTable; }. » Author: Rene Brun 12/01/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TTreeSQL.h 30663 2009-10-11 22:11:51Z pcanal $ » Last generated: 2011-07-04 15:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTreeSQL.html:26924,load,load,26924,root/html530/TTreeSQL.html,https://root.cern,https://root.cern/root/html530/TTreeSQL.html,1,['load'],['load']
Performance," ConvertTypeName(const TString& typeName); Convert from ROOT typename to SQL typename. TBasket * CreateBasket(TBranch* br); Create a TBasketSQL. void CreateBranch(const TString& branchName, const TString& typeName); Create the column(s) in the database that correspond to the branch. TString CreateBranches(TSQLResult* rs); determine leaf description string. Bool_t CreateTable(const TString& table); Create the database table corresponding to this TTree. void Init(); Initializeation routine. Int_t Fill(); Copy the information from the user object to the TTree. vector<Int_t> * GetColumnIndice(TBranch* branch); Return a vector of columns index corresponding to the; current SQL table and the branch given as argument; Returns 0 if no columns indices is found; Otherwise returns a pointer to a vector to be deleted by the caller. Long64_t GetEntries() const; Get the number of rows in the database. Long64_t GetEntriesFast() const; Return the number of entries as of the last check.; Use GetEntries for a more accurate count. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0); Load the data for the entry from the database. Long64_t LoadTree(Long64_t entry); Setup the tree to the load the specified entry. Long64_t PrepEntry(Long64_t entry); Make sure the server and result set are setup for the requested entry. void Refresh(); Refresh contents of this Tree and his branches from the current; Tree status in the database; One can call this function in case the Tree on its file is being; updated by another process. void ResetQuery(); Reset the internal query. Long64_t GetEntries() const. TString GetTableName(); { return fTable; }. » Author: Rene Brun 12/01/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TTreeSQL.h 30663 2009-10-11 22:11:51Z pcanal $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTreeSQL.html:27307,load,load,27307,root/html532/TTreeSQL.html,https://root.cern,https://root.cern/root/html532/TTreeSQL.html,1,['load'],['load']
Performance," Created tree 'TestTree' with 1998 events; : ; <HEADER> Dataset:datasetcv : Created tree 'TrainTree' with 1998 events; : ; <HEADER> Factory : Thank you for using TMVA!; : For citation information, please visit: http://tmva.sf.net/citeTMVA.html; : Evaluation done.; Summary for method BDT; Fold 0: ROC int: 0.972504, BkgEff@SigEff=0.3: 0.981; Fold 1: ROC int: 0.96115, BkgEff@SigEff=0.3: 0.975; Summary for method Fisher; Fold 0: ROC int: 0.976137, BkgEff@SigEff=0.3: 0.986; Fold 1: ROC int: 0.96584, BkgEff@SigEff=0.3: 0.975; ==> Wrote root file: TMVACV.root; ==> TMVACrossValidation is done!; (int) 0; ; #include <cstdlib>; #include <iostream>; #include <map>; #include <string>; ; #include ""TChain.h""; #include ""TFile.h""; #include ""TTree.h""; #include ""TString.h""; #include ""TObjString.h""; #include ""TSystem.h""; #include ""TROOT.h""; ; #include ""TMVA/CrossValidation.h""; #include ""TMVA/DataLoader.h""; #include ""TMVA/Factory.h""; #include ""TMVA/Tools.h""; #include ""TMVA/TMVAGui.h""; ; // Helper function to load data into TTrees.; TTree *genTree(Int_t nPoints, Double_t offset, Double_t scale, UInt_t seed = 100); {; TRandom3 rng(seed);; Float_t x = 0;; Float_t y = 0;; UInt_t eventID = 0;; ; TTree *data = new TTree();; data->Branch(""x"", &x, ""x/F"");; data->Branch(""y"", &y, ""y/F"");; data->Branch(""eventID"", &eventID, ""eventID/I"");; ; for (Int_t n = 0; n < nPoints; ++n) {; x = rng.Gaus(offset, scale);; y = rng.Gaus(offset, scale);; ; // For our simple example it is enough that the id's are uniformly; // distributed and independent of the data.; ++eventID;; ; data->Fill();; }; ; // Important: Disconnects the tree from the memory locations of x and y.; data->ResetBranchAddresses();; return data;; }; ; int TMVACrossValidation(bool useRandomSplitting = false); {; // This loads the library; TMVA::Tools::Instance();; ; // --------------------------------------------------------------------------; ; // Load the data into TTrees. If you load data from file you can use a; // variant of; // ```; // TSt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVACrossValidation_8C.html:19051,load,load,19051,doc/master/TMVACrossValidation_8C.html,https://root.cern,https://root.cern/doc/master/TMVACrossValidation_8C.html,1,['load'],['load']
Performance," Deconstructor. ; Definition at line 326 of file TGondzioSolver.cxx. Member Function Documentation. ◆ Class(). static TClass * TGondzioSolver::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGondzioSolver::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGondzioSolver::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 103 of file TGondzioSolver.h. ◆ DeclFileName(). static const char * TGondzioSolver::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 103 of file TGondzioSolver.h. ◆ DefMonitor(). void TGondzioSolver::DefMonitor ; (; TQpDataBase * ; data, . TQpVar * ; vars, . TQpResidual * ; resids, . Double_t ; alpha, . Double_t ; sigma, . Int_t ; i, . Double_t ; mu, . Int_t ; status_code, . Int_t ; level . ). overridevirtual . Print information about the optimization process and monitor the convergence status of thye algorithm. ; Implements TQpSolverBase.; Definition at line 276 of file TGondzioSolver.cxx. ◆ IsA(). TClass * TGondzioSolver::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 103 of file TGondzioSolver.h. ◆ operator=(). TGondzioSolver & TGondzioSolver::operator= ; (; const TGondzioSolver & ; source). Assignment operator. ; Definition at line 337 of file TGondzioSolver.cxx. ◆ Reset_parameters(). virtual void TGondzioSolver::Reset_parameters ; (; ). inlinevirtual . Definition at line 95 of file TGondzioSolver.h. ◆ Solve(). Int_t TGondzioSolver::Solve ; (; TQpDataBase * ; prob, . TQpVar * ; iterate, . TQpResidual * ; resid . ). overridevirtual . Solve the quadratic programming problem as formulated through prob, store the final solution in iterate->fX . ; Monitor the residuals during the iterations through resid . The status is returned as defined in TQpSolverBase::E",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGondzioSolver.html:15670,optimiz,optimization,15670,doc/master/classTGondzioSolver.html,https://root.cern,https://root.cern/doc/master/classTGondzioSolver.html,1,['optimiz'],['optimization']
Performance," Definition at line 2027 of file TTreeCache.cxx. ◆ ReadBufferNormal(). Int_t TTreeCache::ReadBufferNormal ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Old method ReadBuffer before the addition of the prefetch mechanism. ; Definition at line 1927 of file TTreeCache.cxx. ◆ ReadBufferPrefetch(). Int_t TTreeCache::ReadBufferPrefetch ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Used to read a chunk from a block previously fetched. ; It will call FillBuffer even if the cache lookup succeeds, because it will try to prefetch the next block as soon as we start reading from the current block. ; Definition at line 1986 of file TTreeCache.cxx. ◆ ResetCache(). void TTreeCache::ResetCache ; (; ). virtual . This will simply clear the cache. ; Reimplemented in TTreeCacheUnzip.; Definition at line 2040 of file TTreeCache.cxx. ◆ ResetMissCache(). void TTreeCache::ResetMissCache ; (; ). Reset all the miss cache training. ; The contents of the miss cache will be emptied as well as the list of branches used. ; Definition at line 697 of file TTreeCache.cxx. ◆ SetAutoCreated(). void TTreeCache::SetAutoCreated ; (; bool ; val). inline . Definition at line 164 of file TTreeCache.h. ◆ SetBufferSize(). Int_t TTreeCache::SetBufferSize ; (; Int_t ; buffersize). overridevirtual . Change the underlying buffer size of the cache. ; If the change of size means some cache content is lost, or if the buffer is now larger, setup for a cache refill the next time there is a read Returns:; 0 if the buffer content is still available; 1 if some or all of the buffer content has been made unavailable; -1 on error . Reimplemented from TFileCacheRead.; Reimplemented in TTreeCacheUnzip.; Definition at line 2072 of file TTreeCache.cxx. ◆ SetEntryRange(). void TTreeCache::SetEntryRange ; (; Long64_t ; emin, . Long64_t ; emax . ). virtual . Set the minimum and maximum entry number to be processed this information helps to optimize the number of baskets to read when prefetchin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCache.html:47904,cache,cache,47904,doc/v632/classTTreeCache.html,https://root.cern,https://root.cern/doc/v632/classTTreeCache.html,1,['cache'],['cache']
Performance," Definition at line 2027 of file TTreeCache.cxx. ◆ ReadBufferNormal(). Int_t TTreeCache::ReadBufferNormal ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Old method ReadBuffer before the addition of the prefetch mechanism. ; Definition at line 1927 of file TTreeCache.cxx. ◆ ReadBufferPrefetch(). Int_t TTreeCache::ReadBufferPrefetch ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Used to read a chunk from a block previously fetched. ; It will call FillBuffer even if the cache lookup succeeds, because it will try to prefetch the next block as soon as we start reading from the current block. ; Definition at line 1986 of file TTreeCache.cxx. ◆ ResetCache(). void TTreeCache::ResetCache ; (; ). virtual . This will simply clear the cache. ; Reimplemented in TTreeCacheUnzip.; Definition at line 2040 of file TTreeCache.cxx. ◆ ResetMissCache(). void TTreeCache::ResetMissCache ; (; ). Reset all the miss cache training. ; The contents of the miss cache will be emptied as well as the list of branches used. ; Definition at line 697 of file TTreeCache.cxx. ◆ SetAutoCreated(). void TTreeCache::SetAutoCreated ; (; bool ; val). inline . Definition at line 164 of file TTreeCache.h. ◆ SetBufferSize(). Int_t TTreeCache::SetBufferSize ; (; Long64_t ; buffersize). overridevirtual . Change the underlying buffer size of the cache. ; If the change of size means some cache content is lost, or if the buffer is now larger, setup for a cache refill the next time there is a read Buffersize might be clamped, see TFileCacheRead::SetBufferSize Returns:; 0 if the buffer content is still available; 1 if some or all of the buffer content has been made unavailable; -1 on error . Reimplemented from TFileCacheRead.; Reimplemented in TTreeCacheUnzip.; Definition at line 2073 of file TTreeCache.cxx. ◆ SetEntryRange(). void TTreeCache::SetEntryRange ; (; Long64_t ; emin, . Long64_t ; emax . ). virtual . Set the minimum and maximum entry number to be processed this informati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:47908,cache,cache,47908,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,1,['cache'],['cache']
Performance," Definition at line 230 of file TF3.cxx. ◆ GetClippingBox(). virtual const Double_t * TF3::GetClippingBox ; (; ); const. inlinevirtual . Definition at line 110 of file TF3.h. ◆ GetClippingBoxOn(). virtual Bool_t TF3::GetClippingBoxOn ; (; ); const. inlinevirtual . Definition at line 108 of file TF3.h. ◆ GetMaximumXYZ(). Double_t TF3::GetMaximumXYZ ; (; Double_t & ; x, . Double_t & ; y, . Double_t & ; z . ). virtual . Compute the X, Y and Z values corresponding to the maximum value of the function on its range. ; Return the function value at the maximum. See TF3::GetMinimumXYZ ; Definition at line 314 of file TF3.cxx. ◆ GetMinimumXYZ(). Double_t TF3::GetMinimumXYZ ; (; Double_t & ; x, . Double_t & ; y, . Double_t & ; z . ). virtual . Compute the X, Y and Z values corresponding to the minimum value of the function on its range. ; Returns the function value at the minimum. To find the minimum on a subrange, use the SetRange() function first.; Method: First, a grid search is performed to find the initial estimate of the minimum location. The range of the function is divided into fNpx,fNpy and fNpz sub-ranges. If the function is ""good"" (or ""bad""), these values can be changed by SetNpx(), SetNpy() and SetNpz() functions. Then, Minuit minimization is used with starting values found by the grid search; Note that this method will always do first a grid search in contrast to GetMinimum ; Definition at line 298 of file TF3.cxx. ◆ GetNpz(). Int_t TF3::GetNpz ; (; ); const. inline . Definition at line 91 of file TF3.h. ◆ GetRandom3(). void TF3::GetRandom3 ; (; Double_t & ; xrandom, . Double_t & ; yrandom, . Double_t & ; zrandom, . TRandom * ; rng = nullptr . ). virtual . Return 3 random numbers following this function shape. ; The distribution contained in this TF3 function is integrated over the cell contents. It is normalized to 1. Getting the three random numbers implies:; Generating a random number between 0 and 1 (say r1); Look in which cell in the normalized integral r1 cor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF3.html:62357,perform,performed,62357,doc/master/classTF3.html,https://root.cern,https://root.cern/doc/master/classTF3.html,1,['perform'],['performed']
Performance," Definition at line 233 of file TWebCanvas.h. ◆ SetAsyncMode(). void TWebCanvas::SetAsyncMode ; (; Bool_t ; on = kTRUE). inline . Definition at line 253 of file TWebCanvas.h. ◆ SetCanCreateObjects(). void TWebCanvas::SetCanCreateObjects ; (; Bool_t ; on = kTRUE). inline . Definition at line 238 of file TWebCanvas.h. ◆ SetCanvasSize(). void TWebCanvas::SetCanvasSize ; (; UInt_t ; w, . UInt_t ; h . ). overridevirtual . Set canvas size of web canvas. ; Reimplemented from TCanvasImp.; Definition at line 1438 of file TWebCanvas.cxx. ◆ SetCustomScripts(). void TWebCanvas::SetCustomScripts ; (; const std::string & ; src). static . Configures custom script for canvas. ; If started with ""modules:"" prefix, module(s) will be imported with loadModules function of JSROOT. If custom path was configured in RWebWindowsManager::AddServerLocation, it can be used in module paths. If started with ""load:"" prefix, code will be loaded with loadScript function of JSROOT (old, deprecated way) Script also can be a plain JavaScript code which imports JSROOT and provides draw function for custom classes See tutorials/webgui/custom/custom.mjs demonstrating such example ; Definition at line 371 of file TWebCanvas.cxx. ◆ SetLongerPolling(). void TWebCanvas::SetLongerPolling ; (; Bool_t ; on). inline . Definition at line 250 of file TWebCanvas.h. ◆ SetObjSelectHandler(). void TWebCanvas::SetObjSelectHandler ; (; ObjectSelectSignal_t ; func). inline . Definition at line 236 of file TWebCanvas.h. ◆ SetPadClickedHandler(). void TWebCanvas::SetPadClickedHandler ; (; PadClickedSignal_t ; func). inline . Definition at line 234 of file TWebCanvas.h. ◆ SetPadDblClickedHandler(). void TWebCanvas::SetPadDblClickedHandler ; (; PadClickedSignal_t ; func). inline . Definition at line 235 of file TWebCanvas.h. ◆ SetPaletteDelivery(). void TWebCanvas::SetPaletteDelivery ; (; Int_t ; val). inline . Definition at line 244 of file TWebCanvas.h. ◆ SetPrimitivesMerge(). void TWebCanvas::SetPrimitivesMerge ; (; Int_t ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebCanvas.html:34840,load,load,34840,doc/master/classTWebCanvas.html,https://root.cern,https://root.cern/doc/master/classTWebCanvas.html,3,['load'],"['load', 'loadScript', 'loaded']"
Performance," Definition at line 6350 of file TPad.cxx. ◆ StartEditing(). virtual void TPad::StartEditing ; (; ). inlinevirtual . Definition at line 417 of file TPad.h. ◆ Streamer(). void TPad::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TObject.; Reimplemented in TSlider.; Definition at line 6713 of file TPad.cxx. ◆ StreamerNVirtual(). void TPad::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 419 of file TPad.h. ◆ Update(). void TPad::Update ; (; ). overridevirtual . Update pad. ; Implements TVirtualPad.; Definition at line 2935 of file TPad.cxx. ◆ UpdateAsync(). void TPad::UpdateAsync ; (; ). overridevirtual . Asynchronous pad update. ; In case of web-based canvas triggers update of the canvas on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical dead-locks. In case of normal canvas just canvas->Update() is performed. ; Implements TVirtualPad.; Definition at line 2947 of file TPad.cxx. ◆ UseCurrentStyle(). void TPad::UseCurrentStyle ; (; ). overridevirtual . Force a copy of current style for all objects in pad. ; Reimplemented from TObject.; Definition at line 6927 of file TPad.cxx. ◆ UtoAbsPixel(). Int_t TPad::UtoAbsPixel ; (; Double_t ; u); const. overridevirtual . Convert X NDC to absolute pixel. ; Implements TVirtualPad.; Definition at line 7459 of file TPad.cxx. ◆ UtoPixel(). Int_t TPad::UtoPixel ; (; Double_t ; u); const. overridevirtual . Convert X NDC to pixel. ; Implements TVirtualPad.; Definition at line 7433 of file TPad.cxx. ◆ VtoAbsPixel(). Int_t TPad::VtoAbsPixel ; (; Double_t ; v); const. overridevirtual . Convert Y NDC to absolute pixel. ; Implements TVirtualPad.; Definition at line 7467 of file TPad.cxx. ◆ VtoPixel(). Int_t TPad::VtoPixel ; (; Double_t ; v); const. overridevirtual . Convert Y NDC to pixel. ; Implements TVirtualPad.; Definition at line ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPad.html:127669,perform,performed,127669,doc/master/classTPad.html,https://root.cern,https://root.cern/doc/master/classTPad.html,1,['perform'],['performed']
Performance, Definition at line 99 of file TStreamerInfo.h. ◆ fClassVersion. Int_t TStreamerInfo::fClassVersion. private . Class version identifier. ; Definition at line 89 of file TStreamerInfo.h. ◆ fComp. TCompInfo* TStreamerInfo::fComp. private . ![fNslots with less than fElements->GetEntries()*1.5 used] Compiled info ; Definition at line 96 of file TStreamerInfo.h. ◆ fCompFull. TCompInfo** TStreamerInfo::fCompFull. private . ![fElements->GetEntries()] ; Definition at line 98 of file TStreamerInfo.h. ◆ fCompOpt. TCompInfo** TStreamerInfo::fCompOpt. private . ![fNdata] ; Definition at line 97 of file TStreamerInfo.h. ◆ fElements. TObjArray* TStreamerInfo::fElements. private . Array of TStreamerElements. ; Definition at line 100 of file TStreamerInfo.h. ◆ fgCount. std::atomic< Int_t > TStreamerInfo::fgCount {0}. staticprivate . Number of TStreamerInfo instances. ; Definition at line 113 of file TStreamerInfo.h. ◆ fNdata. Int_t TStreamerInfo::fNdata. private . !number of optimized elements ; Definition at line 93 of file TStreamerInfo.h. ◆ fNfulldata. Int_t TStreamerInfo::fNfulldata. private . !number of elements ; Definition at line 94 of file TStreamerInfo.h. ◆ fNslots. Int_t TStreamerInfo::fNslots. private . !total number of slots in fComp. ; Definition at line 95 of file TStreamerInfo.h. ◆ fNumber. Int_t TStreamerInfo::fNumber. private . !Unique identifier ; Definition at line 91 of file TStreamerInfo.h. ◆ fNVirtualInfoLoc. Int_t TStreamerInfo::fNVirtualInfoLoc. private . ! Number of virtual info location to update. ; Definition at line 102 of file TStreamerInfo.h. ◆ fOldVersion. Version_t TStreamerInfo::fOldVersion. private . ! Version of the TStreamerInfo object read from the file ; Definition at line 101 of file TStreamerInfo.h. ◆ fOnFileClassVersion. Int_t TStreamerInfo::fOnFileClassVersion. private . !Class version identifier as stored on file. ; Definition at line 90 of file TStreamerInfo.h. ◆ fReadMemberWise. TStreamerInfoActions::TActionSequence* TStreamerInfo::fRead,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerInfo.html:69742,optimiz,optimized,69742,doc/master/classTStreamerInfo.html,https://root.cern,https://root.cern/doc/master/classTStreamerInfo.html,1,['optimiz'],['optimized']
Performance," Density Estimation), a Fischer discriminant, a BDT; # and a shallow neural network; # Likelihood (""naive Bayes estimator""); if useLikelihood:; factory.BookMethod(; loader,; TMVA.Types.kLikelihood,; ""Likelihood"",; H=True,; V=False,; TransformOutput=True,; PDFInterpol=""Spline2:NSmoothSig[0]=20:NSmoothBkg[0]=20:NSmoothBkg[1]=10"",; NSmooth=1,; NAvEvtPerBin=50,; ); ; # Use a kernel density estimator to approximate the PDFs; if useLikelihoodKDE:; factory.BookMethod(; loader,; TMVA.Types.kLikelihood,; ""LikelihoodKDE"",; H=False,; V=False,; TransformOutput=False,; PDFInterpol=""KDE"",; KDEtype=""Gauss"",; KDEiter=""Adaptive"",; KDEFineFactor=0.3,; KDEborder=None,; NAvEvtPerBin=50,; ); ; # Fisher discriminant (same as LD); if useFischer:; factory.BookMethod(; loader,; TMVA.Types.kFisher,; ""Fisher"",; H=True,; V=False,; Fisher=True,; VarTransform=None,; CreateMVAPdfs=True,; PDFInterpolMVAPdf=""Spline2"",; NbinsMVAPdf=50,; NsmoothMVAPdf=10,; ); ; # Boosted Decision Trees; if useBDT:; factory.BookMethod(; loader,; TMVA.Types.kBDT,; ""BDT"",; V=False,; NTrees=200,; MinNodeSize=""2.5%"",; MaxDepth=2,; BoostType=""AdaBoost"",; AdaBoostBeta=0.5,; UseBaggedBoost=True,; BaggedSampleFraction=0.5,; SeparationType=""GiniIndex"",; nCuts=20,; ); ; # Multi-Layer Perceptron (Neural Network); if useMLP:; factory.BookMethod(; loader,; TMVA.Types.kMLP,; ""MLP"",; H=False,; V=False,; NeuronType=""tanh"",; VarTransform=""N"",; NCycles=100,; HiddenLayers=""N+5"",; TestRate=5,; UseRegulator=False,; ); ; ## Here we book the new DNN of TMVA if we have support in ROOT. We will use GPU version if ROOT is enabled with GPU; ; ; ## Booking Deep Neural Network; ; # Here we define the option string for building the Deep Neural network model.; ; #### 1. Define DNN layout; ; # The DNN configuration is defined using a string. Note that whitespaces between characters are not allowed.; ; # We define first the DNN layout:; ; # - **input layout** : this defines the input data format for the DNN as ``input depth | height | width``.; # In c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:62007,load,loader,62007,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,1,['load'],['loader']
Performance," Double32_t from the buffer when the factor and minimun value have been specified see comments about Double32_t encoding at TBufferFile::WriteDouble32(). ; Currently TBufferText does not optimize space in this case. ; Implements TBuffer.; Definition at line 510 of file TBufferText.cxx. ◆ ReadWithNbits() [1/2]. void TBufferText::ReadWithNbits ; (; Double_t * ; d, . Int_t ; nbits . ). finalvirtual . Read a Double32_t from the buffer when the number of bits is specified (explicitly or not) see comments about Double32_t encoding at TBufferFile::WriteDouble32(). ; Currently TBufferText does not optimize space in this case. ; Implements TBuffer.; Definition at line 543 of file TBufferText.cxx. ◆ ReadWithNbits() [2/2]. void TBufferText::ReadWithNbits ; (; Float_t * ; f, . Int_t ; nbits . ). finalvirtual . Read a Float16_t from the buffer when the number of bits is specified (explicitly or not) see comments about Float16_t encoding at TBufferFile::WriteFloat16(). ; Currently TBufferText does not optimize space in this case. ; Implements TBuffer.; Definition at line 521 of file TBufferText.cxx. ◆ SetByteCount(). void TBufferText::SetByteCount ; (; UInt_t ; , . Bool_t ; = kFALSE . ). inlinefinalvirtual . Implements TBuffer.; Definition at line 80 of file TBufferText.h. ◆ SetDoubleFormat(). void TBufferText::SetDoubleFormat ; (; const char * ; fmt = ""%.14e""). static . set printf format for double members, default ""%.14e"" use it after SetFloatFormat, which also overwrites format for doubles ; Definition at line 818 of file TBufferText.cxx. ◆ SetFloatFormat(). void TBufferText::SetFloatFormat ; (; const char * ; fmt = ""%e""). static . set printf format for float/double members, default ""%e"" to change format only for doubles, use SetDoubleFormat ; Definition at line 798 of file TBufferText.cxx. ◆ SkipVersion(). void TBufferText::SkipVersion ; (; const TClass * ; cl = nullptr). finalvirtual . Skip class version from I/O buffer. ; Implements TBuffer.; Definition at line 678 of file ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferText.html:44796,optimiz,optimize,44796,doc/master/classTBufferText.html,https://root.cern,https://root.cern/doc/master/classTBufferText.html,1,['optimiz'],['optimize']
Performance," Double_t > & ; pars). privatevirtual . return the estimator (from current FOM) for the fitting interface ; Implements TMVA::IFitterTarget.; Definition at line 307 of file OptimizeConfigParameters.cxx. ◆ GetBkgEffAtSigEff(). Double_t TMVA::OptimizeConfigParameters::GetBkgEffAtSigEff ; (; Double_t ; sigEff = 0.5). private . calculate the background efficiency for a given signal efficiency ; adapted by marc-.nosp@m.oliv.nosp@m.ier.b.nosp@m.ettl.nosp@m.er@ce.nosp@m.rn.c.nosp@m.h ; Definition at line 546 of file OptimizeConfigParameters.cxx. ◆ GetBkgRejAtSigEff(). Double_t TMVA::OptimizeConfigParameters::GetBkgRejAtSigEff ; (; Double_t ; sigEff = 0.5). private . calculate the background rejection for a given signal efficiency ; adapted by marc-.nosp@m.oliv.nosp@m.ier.b.nosp@m.ettl.nosp@m.er@ce.nosp@m.rn.c.nosp@m.h ; Definition at line 583 of file OptimizeConfigParameters.cxx. ◆ GetFOM(). Double_t TMVA::OptimizeConfigParameters::GetFOM ; (; ). private . Return the Figure of Merit (FOM) used in the parameter optimization process. ; Definition at line 350 of file OptimizeConfigParameters.cxx. ◆ GetMethod(). MethodBase * TMVA::OptimizeConfigParameters::GetMethod ; (; ). inlineprivate . Definition at line 72 of file OptimizeConfigParameters.h. ◆ GetMVADists(). void TMVA::OptimizeConfigParameters::GetMVADists ; (; ). private . fill the private histograms with the mva distributions for sig/bkg ; Definition at line 393 of file OptimizeConfigParameters.cxx. ◆ GetROCIntegral(). Double_t TMVA::OptimizeConfigParameters::GetROCIntegral ; (; ). private . calculate the area (integral) under the ROC curve as a overall quality measure of the classification ; making pdfs out of the MVA-output distributions doesn't work reliably for cases where the MVA-output isn't a smooth distribution. this happens ""frequently"" in BDTs for example when the number of trees is small resulting in only some discrete possible MVA output values. (I still leave the code here, but use this with care!!! The defau",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1OptimizeConfigParameters.html:6933,optimiz,optimization,6933,doc/master/classTMVA_1_1OptimizeConfigParameters.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1OptimizeConfigParameters.html,1,['optimiz'],['optimization']
Performance," Double_t im = 0); Return CERNlib complex error function for Z(re,im). RooComplex ComplexErrFunc(const RooComplex& z); Return CERNlib complex error function. This code is translated from the fortran version in the CERN mathlib.; (see ftp://asisftp.cern.ch/cernlib/share/pro/src/mathlib/gen/c/cwerf64.F). void initFastCERF(Int_t reBins = 800, Double_t reMin = -4.0, Double_t reMax = 4.0, Int_t imBins = 1000, Double_t imMin = -4.0, Double_t imMax = 6.0); Allocate and initialize lookup table for interpolated complex error function; for given grid parameters. void cleanup(). RooComplex ITPComplexErrFunc(const RooComplex& z, Int_t nOrder); Return complex error function interpolated from lookup tabel created; by initFastCERF(). Interpolation is performed in Im and Re plane; to specified order. Double_t ITPComplexErrFuncRe(const RooComplex& z, Int_t nOrder); Return real component of complex error function interpolated from; lookup table created by initFastCERF(). Interpolation is performed in; Im and Re plane to specified order. This functions is noticably faster; than ITPComplexErrrFunc().re() because only the real lookup table; is interpolated. Double_t ITPComplexErrFuncIm(const RooComplex& z, Int_t nOrder); Return real component of complex error function interpolated from; lookup table created by initFastCERF(). Interpolation is performed in; Im and Re plane to specified order. This functions is noticably faster; than ITPComplexErrrFunc().im() because only the imaginary lookup table; is interpolated. Double_t interpolate(Double_t* yArr, Int_t nOrder, Double_t x); Interpolate array 'ya' with 'n' elements for 'x' (between 0 and 'n'-1). Double_t interpolate(Double_t* xa, Double_t* ya, Int_t n, Double_t x); Interpolate array 'ya' with 'n' elements for 'xa'. Bool_t loadCache(); Load the complex error function lookup table from the cache file. void storeCache(); Store the complex error function lookup table in the cache file. const char* cacheFileName(); Construct and return the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMath.html:3847,perform,performed,3847,root/html526/RooMath.html,https://root.cern,https://root.cern/root/html526/RooMath.html,4,['perform'],['performed']
Performance," Double_t ymax = 0.95, const RooCmdArg* formatCmd = 0); virtual RooPlot*RooAbsReal::plotAsymOn(RooPlot* frame, const RooAbsCategoryLValue& asymCat, RooAbsReal::PlotOpt o) const; virtual RooPlot*RooAbsPdf::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsPdf::plotOn(RooPlot* frame, RooAbsReal::PlotOpt o) const; voidRooAbsPdf::plotOnCompSelect(RooArgSet* selNodes) const; RooPlot*RooAbsReal::plotOnWithErrorBand(RooPlot* frame, const RooFitResult& fr, Double_t Z, const RooArgSet* params, const RooLinkedList& argList, Bool_t method1) const; Bool_tRooAbsReal::plotSanityChecks(RooPlot* frame) const; voidRooAbsArg::printAttribList(ostream& os) const; static voidRooAbsPdf::raiseEvalError(); Int_t*RooAbsPdf::randomizeProtoOrder(Int_t nProto, Int_t nGen, Bool_t resample = kFALSE) const; virtual Bool_tRooAbsPdf::redirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); voidRooAbsArg::registerProxy(RooArgProxy& proxy); voidRooAbsArg::registerProxy(RooSetProxy& proxy); voidRooAbsArg::registerProxy(RooListProxy& proxy); voidRooAbsReal::selectComp(Bool_t flag); virtual voidselectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); virtual voidselectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); voidRooAbsArg::setProxyNormSet(const RooArgSet* nset); voidRooAbsArg::setShapeDirty(const RooAbsArg* source) const; virtual voidRooAbsReal::setTreeBranchStatus(TTree& t, Bool_t active); voidRooAbsArg::setValueDirty(const RooAbsArg* source) const; virtual voidRooAbsReal::syncCache(const RooArgSet* set = 0); virtual Bool_tRooAbsPdf::syncNormalization(const RooArgSet* dset, Bool_t adjustProxies = kTRUE) const; Double_tRooAbsReal::traceEval(const RooArgSet* set) const; voidRooAbsArg::unRegisterProxy(RooArgProxy& proxy); voidRooAbsArg::unRegisterProxy(RooSetProxy& proxy); voidRooAbsArg::unRegisterProxy(RooListProxy& proxy); voidupdateCoefficients(RooAddPdf::CacheElem& cache, const RooArgSet* nset) const. Data Members; publ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddPdf.html:35955,cache,cache,35955,root/html526/RooAddPdf.html,https://root.cern,https://root.cern/root/html526/RooAddPdf.html,4,['cache'],['cache']
Performance," Double_t* params); Evaluate primitive formula. Double_t EvalPrimitive2(const Double_t* x, const Double_t* params); Evaluate primitive formula. Double_t EvalPrimitive3(const Double_t* x, const Double_t* params); Evaluate primitive formula. Double_t EvalPrimitive4(const Double_t* x, const Double_t* params); Evaluate primitive formula. Double_t EvalParFast(const Double_t* x, const Double_t* params); Evaluate this formula. The current value of variables x,y,z,t is passed through the pointer x.; The parameters used will be the ones in the array params if params is given; otherwise parameters will be taken from the stored data members fParams. /*; ; */. Int_t PreCompile(); Pre compile function. void SetMaxima(Int_t maxop = 1000, Int_t maxpar = 1000, Int_t maxconst = 1000); static function to set the maximum value of 3 parameters; -maxop : maximum number of operations; -maxpar : maximum number of parameters; -maxconst : maximum number of constants; None of these parameters cannot be less than 10 (default is 1000); call this function to increase one or all maxima when processing; very complex formula, eg TFormula::SetMaxima(100000,1000,1000000);; If you process many functions with a small number of operations/parameters; you may gain some memory and performance by decreasing these values. Int_t * GetOper() const; { return fOper; }. Short_t GetAction(Int_t code) const; { return fOper[code] >> kTFOperShift; }. Int_t GetActionParam(Int_t code) const; { return fOper[code] & kTFOperMask; }. void SetAction(Int_t code, Int_t value, Int_t param = 0). Int_t * GetOperOptimized() const; { return fOperOptimized; }. Short_t GetActionOptimized(Int_t code) const; { return fOperOptimized[code] >> kTFOperShift; }. Int_t GetActionParamOptimized(Int_t code) const; { return fOperOptimized[code] & kTFOperMask; }. void SetActionOptimized(Int_t code, Int_t value, Int_t param = 0). Double_t EvalPar(const Double_t* x, const Double_t* params = 0); {return ((*this).*fOptimal)(x,params);}. Int_t GetN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFormula.html:29840,perform,performance,29840,root/html534/TFormula.html,https://root.cern,https://root.cern/root/html534/TFormula.html,1,['perform'],['performance']
Performance," Double_t* params); Evaluate primitive formula. Double_t EvalPrimitive2(const Double_t* x, const Double_t* params); Evaluate primitive formula. Double_t EvalPrimitive3(const Double_t* x, const Double_t* params); Evaluate primitive formula. Double_t EvalPrimitive4(const Double_t* x, const Double_t* params); Evaluate primitive formula. Double_t EvalParFast(const Double_t* x, const Double_t* params); Evaluate this formula. The current value of variables x,y,z,t is passed through the pointer x.; The parameters used will be the ones in the array params if params is given; otherwise parameters will be taken from the stored data members fParams. /*; ; */. Int_t PreCompile(); Pre compile function. void SetMaxima(Int_t maxop = 1000, Int_t maxpar = 1000, Int_t maxconst = 1000); static function to set the maximum value of 3 parameters; -maxop : maximum number of operations; -maxpar : maximum number of parameters; -maxconst : maximum number of constants; None of these parameters cannot be less than 10 (default is 1000); call this function to increase one or all maxima when processing; very complex formula, eg TFormula::SetMaxima(100000,1000,1000000);; If you process many functions with a small number of operations/parameters; you may gain some memory and performance by decreasing these values. void GetMaxima(Int_t& maxop, Int_t& maxpar, Int_t& maxconst); static function to get the maximum value of 3 parameters; -maxop : maximum number of operations; -maxpar : maximum number of parameters; -maxconst : maximum number of constants. Int_t * GetOper() const; { return fOper; }. Short_t GetAction(Int_t code) const; { return fOper[code] >> kTFOperShift; }. Int_t GetActionParam(Int_t code) const; { return fOper[code] & kTFOperMask; }. void SetAction(Int_t code, Int_t value, Int_t param = 0). Int_t * GetOperOptimized() const; { return fOperOptimized; }. Short_t GetActionOptimized(Int_t code) const; { return fOperOptimized[code] >> kTFOperShift; }. Int_t GetActionParamOptimized(Int_t code",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFormula.html:33235,perform,performance,33235,root/html602/TFormula.html,https://root.cern,https://root.cern/root/html602/TFormula.html,2,['perform'],['performance']
Performance," Double_tTQpSolverBase::fPhimerit function, defined as the sum of the complementarity gap; Double_t*TQpSolverBase::fPhi_history[fMaxit] history of values of phi obtained on all iterations to date; Double_t*TQpSolverBase::fPhi_min_history[fMaxit] the i-th entry of this array contains the minimum value of phi; Int_tfPrintlevelparameter in range [0,100] determines verbosity. (Higher value; Double_t*TQpSolverBase::fRnorm_history[fMaxit] history of values of residual norm obtained on all iterations to date; TQpVar*fStepstorage for step vectors; TQpLinSolverBase*TQpSolverBase::fSys; Double_tfTsigexponent in Mehrotra's centering parameter, which is usually. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMehrotraSolver(); Default constructor. TMehrotraSolver(TQpProbBase* of, TQpDataBase* prob, Int_t verbose = 0); Constructor. TMehrotraSolver(const TMehrotraSolver& another); Copy constructor. Int_t Solve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resid); Solve the quadratic programming problem as formulated through prob, store; the final solution in iterate->fX . Monitor the residuals during the iterations; through resid . The status is returned as defined in TQpSolverBase::ETerminationCode . void DefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t status_code, Int_t level); Print information about the optimization process and monitor the convergence; status of thye algorithm. ~TMehrotraSolver(); Deconstructor. TMehrotraSolver & operator=(const TMehrotraSolver& source); Assignment operator. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id: TMehrotraSolver.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMehrotraSolver.html:8705,optimiz,optimization,8705,root/html528/TMehrotraSolver.html,https://root.cern,https://root.cern/root/html528/TMehrotraSolver.html,1,['optimiz'],['optimization']
Performance," Double_tTQpSolverBase::fPhimerit function, defined as the sum of the complementarity gap; Double_t*TQpSolverBase::fPhi_history[fMaxit] history of values of phi obtained on all iterations to date; Double_t*TQpSolverBase::fPhi_min_history[fMaxit] the i-th entry of this array contains the minimum value of phi; Int_tfPrintlevelparameter in range [0,100] determines verbosity. (Higher value; Double_t*TQpSolverBase::fRnorm_history[fMaxit] history of values of residual norm obtained on all iterations to date; TQpVar*fStepstorage for step vectors; TQpLinSolverBase*TQpSolverBase::fSys; Double_tfTsigexponent in Mehrotra's centering parameter, which is usually. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMehrotraSolver(); Default constructor. TMehrotraSolver(TQpProbBase* of, TQpDataBase* prob, Int_t verbose = 0); Constructor. TMehrotraSolver(const TMehrotraSolver& another); Copy constructor. Int_t Solve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resid); Solve the quadratic programming problem as formulated through prob, store; the final solution in iterate->fX . Monitor the residuals during the iterations; through resid . The status is returned as defined in TQpSolverBase::ETerminationCode . void DefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t status_code, Int_t level); Print information about the optimization process and monitor the convergence; status of thye algorithm. ~TMehrotraSolver(); Deconstructor. TMehrotraSolver & operator=(const TMehrotraSolver& source); Assignment operator. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id: TMehrotraSolver.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMehrotraSolver.html:8774,optimiz,optimization,8774,root/html530/TMehrotraSolver.html,https://root.cern,https://root.cern/root/html530/TMehrotraSolver.html,1,['optimiz'],['optimization']
Performance," Double_tTQpSolverBase::fPhimerit function, defined as the sum of the complementarity gap; Double_t*TQpSolverBase::fPhi_history[fMaxit] history of values of phi obtained on all iterations to date; Double_t*TQpSolverBase::fPhi_min_history[fMaxit] the i-th entry of this array contains the minimum value of phi; Int_tfPrintlevelparameter in range [0,100] determines verbosity. (Higher value; Double_t*TQpSolverBase::fRnorm_history[fMaxit] history of values of residual norm obtained on all iterations to date; TQpVar*fStepstorage for step vectors; TQpLinSolverBase*TQpSolverBase::fSys; Double_tfTsigexponent in Mehrotra's centering parameter, which is usually. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMehrotraSolver(); Default constructor. TMehrotraSolver(TQpProbBase* of, TQpDataBase* prob, Int_t verbose = 0); Constructor. TMehrotraSolver(const TMehrotraSolver& another); Copy constructor. Int_t Solve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resid); Solve the quadratic programming problem as formulated through prob, store; the final solution in iterate->fX . Monitor the residuals during the iterations; through resid . The status is returned as defined in TQpSolverBase::ETerminationCode . void DefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t status_code, Int_t level); Print information about the optimization process and monitor the convergence; status of thye algorithm. ~TMehrotraSolver(); Deconstructor. TMehrotraSolver & operator=(const TMehrotraSolver& source); Assignment operator. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id: TMehrotraSolver.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMehrotraSolver.html:8774,optimiz,optimization,8774,root/html532/TMehrotraSolver.html,https://root.cern,https://root.cern/root/html532/TMehrotraSolver.html,1,['optimiz'],['optimization']
Performance, Double_t_genFlavFrac!; Double_t_genFlavFracMix!; Double_t_genFlavFracUnmix!; Double_t_genMixFrac! do not persist; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooRealProxy_mistag; RooCategoryProxy_mixState; RooResolutionModel*RooAbsAnaConvPdf::_model! Original resolution model; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigN,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooBMixDecay.html:39631,cache,cache,39631,root/html526/RooBMixDecay.html,https://root.cern,https://root.cern/root/html526/RooBMixDecay.html,1,['cache'],['cache']
Performance, Double_t_genFlavFrac!; Double_t_genFlavFracMix!; Double_t_genFlavFracUnmix!; Double_t_genMixFrac! do not persist; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooRealProxy_mistag; RooCategoryProxy_mixState; RooResolutionModel*RooAbsAnaConvPdf::_model! Original resolution model; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC genera,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooBMixDecay.html:40205,cache,cache,40205,root/html528/RooBMixDecay.html,https://root.cern,https://root.cern/root/html528/RooBMixDecay.html,1,['cache'],['cache']
Performance, Double_t_genFlavFrac!; Double_t_genFlavFracMix!; Double_t_genFlavFracUnmix!; Double_t_genMixFrac! do not persist; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooRealProxy_mistag; RooCategoryProxy_mixState; RooResolutionModel*RooAbsAnaConvPdf::_model! Original resolution model; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculatin,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooBMixDecay.html:40482,cache,cache,40482,root/html530/RooBMixDecay.html,https://root.cern,https://root.cern/root/html530/RooBMixDecay.html,1,['cache'],['cache']
Performance, Double_t_genFlavFrac!; Double_t_genFlavFracMix!; Double_t_genFlavFracUnmix!; Double_t_genMixFrac! do not persist; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooRealProxy_mistag; RooCategoryProxy_mixState; RooResolutionModel*RooAbsAnaConvPdf::_model! Original resolution model; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalcul,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBMixDecay.html:40885,cache,cache,40885,root/html532/RooBMixDecay.html,https://root.cern,https://root.cern/root/html532/RooBMixDecay.html,1,['cache'],['cache']
Performance," DynFindSymbol(module, entry);; 1962 if (f) return 0;; 1963 return -1;; 1964}; 1965 ; 1966///////////////////////////////////////////////////////////////////////////////; 1967/// Load all libraries known to ROOT via the rootmap system.; 1968/// Returns the number of top level libraries successfully loaded.; 1969 ; 1970UInt_t TSystem::LoadAllLibraries(); 1971{; 1972 UInt_t nlibs = 0;; 1973 ; 1974 TEnv* mapfile = gInterpreter->GetMapfile();; 1975 if (!mapfile || !mapfile->GetTable()) return 0;; 1976 ; 1977 std::set<std::string> loadedlibs;; 1978 std::set<std::string> failedlibs;; 1979 ; 1980 TEnvRec* rec = nullptr;; 1981 TIter iEnvRec(mapfile->GetTable());; 1982 while ((rec = (TEnvRec*) iEnvRec())) {; 1983 TString libs = rec->GetValue();; 1984 TString lib;; 1985 Ssiz_t pos = 0;; 1986 while (libs.Tokenize(lib, pos)) {; 1987 // check that none of the libs failed to load; 1988 if (failedlibs.find(lib.Data()) != failedlibs.end()) {; 1989 // don't load it or any of its dependencies; 1990 libs = """";; 1991 break;; 1992 }; 1993 }; 1994 pos = 0;; 1995 while (libs.Tokenize(lib, pos)) {; 1996 // ignore libCore - it's already loaded; 1997 if (lib.BeginsWith(""libCore"")); 1998 continue;; 1999 ; 2000 if (loadedlibs.find(lib.Data()) == loadedlibs.end()) {; 2001 // just load the first library - TSystem will do the rest.; 2002 auto res = gSystem->Load(lib);; 2003 if (res >=0) {; 2004 if (res == 0) ++nlibs;; 2005 loadedlibs.insert(lib.Data());; 2006 } else {; 2007 failedlibs.insert(lib.Data());; 2008 }; 2009 }; 2010 }; 2011 }; 2012 return nlibs;; 2013}; 2014 ; 2015////////////////////////////////////////////////////////////////////////////////; 2016/// Find a dynamic library called lib using the system search paths.; 2017/// Appends known extensions if needed. Returned string must be deleted; 2018/// by the user!; 2019 ; 2020char *TSystem::DynamicPathName(const char *lib, Bool_t quiet /*=kFALSE*/); 2021{; 2022 TString sLib(lib);; 2023 if (FindDynamicLibrary(sLib, quiet)); 2024 return St",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:64336,load,load,64336,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['load'],['load']
Performance," DynamicLibraryManager::loadLibrary; 6573 std::string mangled_name = std::string(errMsg.split(""undefined symbol: "").second);; 6574 void* res = ((TCling*)gCling)->LazyFunctionCreatorAutoload(mangled_name);; 6575 cling::DynamicLibraryManager* DLM = fInterpreter->getDynamicLibraryManager();; 6576 if (res && DLM && (DLM->loadLibrary(libStem, permanent, resolved) == cling::DynamicLibraryManager::kLoadLibSuccess)); 6577 // Return success when LazyFunctionCreatorAutoload could find mangled_name; 6578 return true;; 6579 } else {; 6580 // The callback is from IncrementalExecutor::diagnoseUnresolvedSymbols; 6581 if ( ((TCling*)gCling)->LazyFunctionCreatorAutoload(errmessage)); 6582 return true;; 6583 }; 6584 ; 6585 return false;; 6586}; 6587 ; 6588////////////////////////////////////////////////////////////////////////////////; 6589/// Autoload a library based on a missing symbol.; 6590 ; 6591void* TCling::LazyFunctionCreatorAutoload(const std::string& mangled_name) {; 6592 std::string dlsym_mangled_name = ROOT::TMetaUtils::DemangleNameForDlsym(mangled_name);; 6593 ; 6594 // We have already loaded the library.; 6595 if (void* Addr = llvm::sys::DynamicLibrary::SearchForAddressOfSymbol(dlsym_mangled_name)); 6596 return Addr;; 6597 ; 6598 const cling::DynamicLibraryManager &DLM = *GetInterpreterImpl()->getDynamicLibraryManager();; 6599 R__LOCKGUARD(gInterpreterMutex);; 6600 ; 6601 auto LibLoader = [](const std::string& LibName) -> bool {; 6602 if (gSystem->Load(LibName.c_str(), """", false) < 0) {; 6603 ::Error(""TCling__LazyFunctionCreatorAutoloadForModule"",; 6604 ""Failed to load library %s"", LibName.c_str());; 6605 return false;; 6606 }; 6607 return true; //success.; 6608 };; 6609 ; 6610 std::string libName = DLM.searchLibrariesForSymbol(mangled_name,; 6611 /*searchSystem=*/ true);; 6612 ; 6613 assert(!llvm::StringRef(libName).startswith(""libNew"") &&; 6614 ""We must not resolve symbols from libNew!"");; 6615 ; 6616 if (libName.empty()); 6617 return nullptr;; 6618 ; 6619 if (!LibLoa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:256698,load,loaded,256698,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['load'],['loaded']
Performance," ETupleOrderingETupleOrderingCheck in what order the member of a tuple are layout.Definition TCling.cxx:3905; ETupleOrdering::kAscending@ kAscending; ETupleOrdering::kDescending@ kDescending; ETupleOrdering::kUnexpected@ kUnexpected; TCling__LibraryLoadingFailedbool TCling__LibraryLoadingFailed(const std::string &errmessage, const std::string &libStem, bool permanent, bool resolved)Lookup libraries in LD_LIBRARY_PATH and DYLD_LIBRARY_PATH with mangled_name, which is extracted by er...Definition TCling.cxx:351; gIgnoredPCMNamesstatic const std::unordered_set< std::string > gIgnoredPCMNamesList of dicts that have the PCM information already in the PCH.Definition TCling.cxx:1939; s_IsLibraryLoadedstatic Bool_t s_IsLibraryLoaded(const char *libname, cling::Interpreter *fInterpreter)Definition TCling.cxx:3129; TCling__GetClassSharedLibsconst char * TCling__GetClassSharedLibs(const char *className, bool skipCore)Definition TCling.cxx:633; loadGlobalModuleIndexstatic GlobalModuleIndex * loadGlobalModuleIndex(cling::Interpreter &interp)Definition TCling.cxx:1080; TClingLookupHelper__ExistingTypeCheckbool TClingLookupHelper__ExistingTypeCheck(const std::string &tname, std::string &result)Try hard to avoid looking up in the Cling database as this could enduce an unwanted autoparsing.Definition TCling.cxx:903; HasASTFileOnDiskstatic bool HasASTFileOnDisk(clang::Module *M, const clang::Preprocessor &PP, std::string *FullFileName=nullptr)Checks if there is an ASTFile on disk for the given module M.Definition TCling.cxx:1065; TCling__UnlockCompilationDuringUserCodeExecutionvoid TCling__UnlockCompilationDuringUserCodeExecution(void *)Unlock the interpreter.Definition TCling.cxx:379; AlternateTuplestatic std::string AlternateTuple(const char *classname, const cling::LookupHelper &lh, Bool_t silent)Definition TCling.cxx:3947; R__InitStreamerInfoFactorystatic bool R__InitStreamerInfoFactory()Helper to initialize TVirtualStreamerInfo's factor early.Definition TCling.cxx:1664; TCling__",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:378675,load,loadGlobalModuleIndexstatic,378675,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,2,['load'],"['loadGlobalModuleIndex', 'loadGlobalModuleIndexstatic']"
Performance," Error bars per bin are given by Eq. (6). . The ; reproduce the true distributions of the species in the control variable , within the above defined statistical uncertainties. Illustrations. To illustrate the technique, one considers an example derived from the analysis where . have been first used (charmless B decays). One is dealing with a data; sample in which two species are present: the first is termed signal and; the second background. A maximum Likelihood fit is performed to obtain; the two yields and . The fit relies on two discriminating variables collectively denoted  which are chosen within three possible variables denoted , and .; The variable which is not incorporated in  is used as the control variable . The six distributions of the three variables are assumed to be the ones depicted in Fig. 1. Figure 1:; Distributions of the three discriminating variables available to perform the Likelihood fit: ; , , .; Among the three variables, two are used to perform the fit while one is; kept out of the fit to serve the purpose of a control variable. The; three distributions on the top (resp. bottom) of the figure correspond; to the signal (resp. background). The unit of the vertical axis is; chosen such that it indicates the number of entries per bin, if one; slices the histograms in 25 bins. A data sample being built through a Monte Carlo simulation based on the distributions shown in Fig. 1, one obtains the three distributions of Fig. 2. Whereas the distribution of  clearly indicates the presence of the signal, the distribution of and are less obviously populated by signal. Figure 2:; Distributions of the three discriminating variables for signal plus; background. The three distributions are the ones obtained from a data; sample obtained through a Monte Carlo simulation based on the; distributions shown in Fig. 1. The data sample consists of 500 signal events and 5000 background events. Chosing and as discriminating variables to determine and through a maximum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSPlot.html:5710,perform,perform,5710,root/html528/TSPlot.html,https://root.cern,https://root.cern/root/html528/TSPlot.html,4,['perform'],['perform']
Performance," Evaluate deep neural network on CPU using batches with size = 128; : ; DNN_CPU : [dataset] : Evaluation of DNN_CPU on training sample (14000 events); : Elapsed time for evaluation of 14000 events: 0.247 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVA_Higgs_Classification_DNN_CPU.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVA_Higgs_Classification_DNN_CPU.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: PyKeras for Classification; : ; : ; : ␛[1m================================================================␛[0m; : ␛[1mH e l p f o r M V A m e t h o d [ PyKeras ] :␛[0m; : ; : Keras is a high-level API for the Theano and Tensorflow packages.; : This method wraps the training and predictions steps of the Keras; : Python package for TMVA, so that dataloading, preprocessing and; : evaluation can be done within the TMVA system. To use this Keras; : interface, you have to generate a model with Keras first. Then,; : this model can be loaded and trained in TMVA.; : ; : ; : <Suppress this message by specifying ""!H"" in the booking option>; : ␛[1m================================================================␛[0m; : ; : Split TMVA training data in 11200 training events and 2800 validation events; : Training Model Summary; Model: ""sequential""; _________________________________________________________________; Layer (type) Output Shape Param # ; =================================================================; dense (Dense) (None, 64) 512 ; ; dense_1 (Dense) (None, 64) 4160 ; ; dense_2 (Dense) (None, 64) 4160 ; ; dense_3 (Dense) (None, 64) 4160 ; ; dense_4 (Dense) (None, 2) 130 ; ; =================================================================; Total params: 13122 (51.26 KB); Trainable params: 13122 (51.26 KB); Non-trainable params: 0 (0.00 Byte); _________________________________________________________________; : Option SaveBestOnly: Only model weights with smallest validation loss will be stored; Epoch 1/20; ; 1/",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:26780,load,loaded,26780,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,1,['load'],['loaded']
Performance," Evaluate deep neural network on CPU using batches with size = 128; : ; DNN_CPU : [dataset] : Evaluation of DNN_CPU on training sample (14000 events); : Elapsed time for evaluation of 14000 events: 0.253 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVA_Higgs_Classification_DNN_CPU.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVA_Higgs_Classification_DNN_CPU.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: PyKeras for Classification; : ; : ; : ␛[1m================================================================␛[0m; : ␛[1mH e l p f o r M V A m e t h o d [ PyKeras ] :␛[0m; : ; : Keras is a high-level API for the Theano and Tensorflow packages.; : This method wraps the training and predictions steps of the Keras; : Python package for TMVA, so that dataloading, preprocessing and; : evaluation can be done within the TMVA system. To use this Keras; : interface, you have to generate a model with Keras first. Then,; : this model can be loaded and trained in TMVA.; : ; : ; : <Suppress this message by specifying ""!H"" in the booking option>; : ␛[1m================================================================␛[0m; : ; : Split TMVA training data in 11200 training events and 2800 validation events; : Training Model Summary; Model: ""sequential""; _________________________________________________________________; Layer (type) Output Shape Param # ; =================================================================; dense (Dense) (None, 64) 512 ; ; dense_1 (Dense) (None, 64) 4160 ; ; dense_2 (Dense) (None, 64) 4160 ; ; dense_3 (Dense) (None, 64) 4160 ; ; dense_4 (Dense) (None, 2) 130 ; ; =================================================================; Total params: 13122 (51.26 KB); Trainable params: 13122 (51.26 KB); Non-trainable params: 0 (0.00 Byte); _________________________________________________________________; : Option SaveBestOnly: Only model weights with smallest validation loss will be stored; Epoch 1/20; ; 1/",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:27220,load,loaded,27220,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,1,['load'],['loaded']
Performance," Execute command when system has been idle for idleTimeInSec seconds. Int_t IgnoreInclude(const char* fname, const char* expandedfname); Return 1 if the name of the given include file corresponds to a class that; is known to ROOT, e.g. ""TLorentzVector.h"" versus TLorentzVector. void InitSystem(); Initialize operating system interface. void InitThreads(); Load and initialize thread library. TClass * LoadClass(const char* name, Bool_t silent = kFALSE) const; Helper function used by TClass::GetClass().; This function attempts to load the dictionary for 'classname'; either from the TClassTable or from the list of generator.; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used only for transient members). Int_t LoadClass(const char* classname, const char* libname, Bool_t check = kFALSE); Check if class ""classname"" is known to the interpreter (in fact,; this check is not needed anymore, so classname is ignored). If; not it will load library ""libname"". If the library name does; not start with ""lib"", ""lib"" will be prepended and a search will; be made in the DynamicPath (see .rootrc). If not found a search; will be made on libname (without ""lib"" prepended) and if not found; a direct try of libname will be made (in case it contained an; absolute path).; If check is true it will only check if libname exists and is; readable.; Returns 0 on successful loading, -1 in case libname does not; exist or in case of error and -2 in case of version mismatch. void ls(Option_t* option = """") const; To list all objects of the application.; Loop on all objects created in the ROOT linked lists.; Objects may be files and windows or any other object directly; attached to the ROOT linked list. Int_t LoadMacro(const char* filename, Int_t* error = 0, Bool_t check = kFALSE); Load a macro in the interpreter's memory. Equivalent to the command line; command "".L filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TROOT.html:27341,load,load,27341,root/html530/TROOT.html,https://root.cern,https://root.cern/root/html530/TROOT.html,3,['load'],['load']
Performance," Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_tRooAbsCachedReal::_ipOrderInterpolation order for cache histograms ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsSelfCachedReal.html:33355,cache,cache,33355,root/html526/RooAbsSelfCachedReal.html,https://root.cern,https://root.cern/root/html526/RooAbsSelfCachedReal.html,2,['cache'],['cache']
Performance," Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TClass; 13TClass instances represent classes, structs and namespaces in the ROOT type system.; 14 ; 15TClass instances are created starting from different sources of information:; 161. TStreamerInfo instances saved in a ROOT file which is opened. This is called in jargon an *emulated TClass*.; 172. From TProtoClass instances saved in a ROOT pcm file created by the dictionary generator and the dictionary itself.; 183. From a lookup in the AST built by cling.; 19 ; 20If a TClass instance is built through the mechanisms 1. and 2., it does not contain information about methods of the; 21class/struct/namespace it represents. Conversely, if built through 3. or 1., it does not carry the information which is necessary; 22to ROOT to perform I/O of instances of the class/struct it represents.; 23The mechanisms 1., 2. and 3. are not mutually exclusive: it can happen that during the execution of the program, all; 24the three are triggered, modifying the state of the TClass instance.; 25 ; 26In order to retrieve a TClass instance from the type system, a query can be executed as follows through the static; 27TClass::GetClass method:; 28 ; 29~~~ {.cpp}; 30auto myClassTClass_0 = TClass::GetClass(""myClass"");; 31auto myClassTClass_1 = TClass::GetClass<myClass>();; 32auto myClassTClass_2 = TClass::GetClass(myClassTypeInfo);; 33~~~; 34 ; 35The name of classes is crucial for ROOT. A careful procedure of *name normalization* is carried out for; 36each and every class. A *normalized name* is a valid C++ class name.; 37In order to access the name of a class within the ROOT type system, the method TClass::GetName() can be used.; 38*/; 39 ; 40//*-*x7.5 macros/layout_class; 41 ; 42#include ""TClass.h""; 43 ; 44#include ""strlcpy.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:1404,perform,perform,1404,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,2,['perform'],['perform']
Performance," For each event, the branch containing the number of tracks is read. In case the number of tracks is less than 585, the full event is read in memory. This test is obviously not possible in non-split mode. In non-split mode, the full event must be read in memory. The times reported in the table correspond to complete I/O operations necessary to deal with machine independent binary files. On Linux, this also includes byte-swapping operations. The ROOT file allows for direct access to any event in the file and direct access to any part of an event when split=1.; Note also that the uncompressed file generated with split=0 is 48.7 Mbytes and only 47.17 Mbytes for the option split=1. The difference in size is due to the object identification mechanism overhead when the event is written to a single buffer. This overhead does not exist in split mode because the branch buffers are optimized for homogeneous data types. You can run the test programs on your architecture. The program Event will report the write performance. You can measure the read performance by executing the scripts eventa and eventb. The performance depends not only of the processor type, but also of the disk devices (local, NFS, AFS, etc.).; 12.24 Chains. A TChain object is a list of ROOT files containing the same tree. As an example, assume we have three files called file1.root, file2.root, file3.root. Each file contains one tree called “T”. We can create a chain with the following statements:; TChain chain(""T""); // name of the tree is the argument; chain.Add(""file1.root"");; chain.Add(""file2.root"");; chain.Add(""file3.root"");; The name of the TChain will be the same as the name of the tree; in this case it will be ""T"". Note that twoobjects can have the same name as long as they are not histograms in the same directory, because there, the histogram names are used to build a hash table. The class TChain is derived from the class TTree. For example, to generate a histogram corresponding to the attribute “x” in ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:651060,perform,performance,651060,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['perform'],['performance']
Performance," For example the equivalent of chain.Draw(""x"",""w""); is chain.SetWeight(w,""global"");; chain.Draw(""x"");; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; By default the weight used will be the weight of each Tree in the TChain. However, one can force the individual weights to be ignored by specifying the option ""global"". In this case, the TChain global weight will be used for all Trees. ; Reimplemented from TTree.; Definition at line 3033 of file TChain.cxx. ◆ Streamer(). void TChain::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TObject.; Reimplemented in TProofChain.; Definition at line 3047 of file TChain.cxx. ◆ StreamerNVirtual(). void TChain::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 173 of file TChain.h. ◆ UseCache(). void TChain::UseCache ; (; Int_t ; maxCacheSize = 10, . Int_t ; pageSize = 0 . ). virtual . Dummy function kept for back compatibility. ; The cache is now activated automatically when processing TTrees/TChain. ; Definition at line 3089 of file TChain.cxx. Member Data Documentation. ◆ fCanDeleteRefs. bool TChain::fCanDeleteRefs. protected . ! If true, TProcessIDs are deleted when closing a file ; Definition at line 40 of file TChain.h. ◆ fFile. TFile* TChain::fFile. protected . ! Pointer to current file (We own the file). ; Definition at line 42 of file TChain.h. ◆ fFiles. TObjArray* TChain::fFiles. protected . -> List of file names containing the trees (TChainElement, owned) ; Definition at line 43 of file TChain.h. ◆ fGlobalRegistration. bool TChain::fGlobalRegistration. protected . ! if true, bypass use of global lists ; Definition at line 46 of file TChain.h. ◆ fNtrees. Int_t TChain::fNtrees. protected . Number of trees. ; Definition at line 37 of file TChain.h. ◆ fProofChain. TChain* TChain::fProofChain. protected . ! chain proxy when going to be processed by PROOF ; Definition at line 45 of file TChain.h. ◆ fStatus. TList* TChain::fStatus. protected",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTChain.html:103627,cache,cache,103627,doc/v632/classTChain.html,https://root.cern,https://root.cern/doc/v632/classTChain.html,1,['cache'],['cache']
Performance," For example the equivalent of chain.Draw(""x"",""w""); is chain.SetWeight(w,""global"");; chain.Draw(""x"");; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; By default the weight used will be the weight of each Tree in the TChain. However, one can force the individual weights to be ignored by specifying the option ""global"". In this case, the TChain global weight will be used for all Trees. ; Reimplemented from TTree.; Definition at line 3059 of file TChain.cxx. ◆ Streamer(). void TChain::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TObject.; Reimplemented in TProofChain.; Definition at line 3073 of file TChain.cxx. ◆ StreamerNVirtual(). void TChain::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 173 of file TChain.h. ◆ UseCache(). void TChain::UseCache ; (; Int_t ; maxCacheSize = 10, . Int_t ; pageSize = 0 . ). virtual . Dummy function kept for back compatibility. ; The cache is now activated automatically when processing TTrees/TChain. ; Definition at line 3115 of file TChain.cxx. Member Data Documentation. ◆ fCanDeleteRefs. bool TChain::fCanDeleteRefs. protected . ! If true, TProcessIDs are deleted when closing a file ; Definition at line 40 of file TChain.h. ◆ fFile. TFile* TChain::fFile. protected . ! Pointer to current file (We own the file). ; Definition at line 42 of file TChain.h. ◆ fFiles. TObjArray* TChain::fFiles. protected . -> List of file names containing the trees (TChainElement, owned) ; Definition at line 43 of file TChain.h. ◆ fGlobalRegistration. bool TChain::fGlobalRegistration. protected . ! if true, bypass use of global lists ; Definition at line 46 of file TChain.h. ◆ fNtrees. Int_t TChain::fNtrees. protected . Number of trees. ; Definition at line 37 of file TChain.h. ◆ fProofChain. TChain* TChain::fProofChain. protected . ! chain proxy when going to be processed by PROOF ; Definition at line 45 of file TChain.h. ◆ fStatus. TList* TChain::fStatus. protected",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTChain.html:104248,cache,cache,104248,doc/master/classTChain.html,https://root.cern,https://root.cern/doc/master/classTChain.html,1,['cache'],['cache']
Performance," FreeGC(GContext_t gc); Free a graphics context. TGFont * GetFont(const char* font, Bool_t fixedDefault = kTRUE); Get a font from the font pool. Fonts must be freed via; TGClient::FreeFont(). Returns 0 in case of error or if font; does not exist. If fixedDefault is false the ""fixed"" font; will not be substituted as fallback when the asked for font; does not exist. TGFont * GetFont(const TGFont* font); Get again specified font. Will increase its usage count. void FreeFont(const TGFont* font); Free a font. void NeedRedraw(TGWindow* w, Bool_t force = kFALSE); Set redraw flags. Bool_t GetColorByName(const char* name, Pixel_t& pixel) const; Get a color by name. If color is found return kTRUE and pixel is; set to the color's pixel value, kFALSE otherwise. FontStruct_t GetFontByName(const char* name, Bool_t fixedDefault = kTRUE) const; Get a font by name. If font is not found, fixed font is returned,; if fixed font also does not exist return 0 and print error.; The loaded font needs to be freed using TVirtualX::DeleteFont().; If fixedDefault is false the ""fixed"" font will not be substituted; as fallback when the asked for font does not exist. Pixel_t GetHilite(Pixel_t base_color) const; Return pixel value of hilite color based on base_color. Pixel_t GetShadow(Pixel_t base_color) const; Return pixel value of shadow color based on base_color.; Shadow is 60% of base_color intensity. void FreeColor(Pixel_t color) const; Free color. void RegisterWindow(TGWindow* w); Add a TGWindow to the clients list of windows. void UnregisterWindow(TGWindow* w); Remove a TGWindow from the list of windows. void RegisterPopup(TGWindow* w); Add a popup menu to the list of popups. This list is used to pass; events to popup menus that are popped up over a transient window which; is waited for (see WaitFor()). void UnregisterPopup(TGWindow* w); Remove a popup menu from the list of popups. void AddUnknownWindowHandler(TGUnknownWindowHandler* h); Add handler for unknown (i.e. unregistered) windows. v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGClient.html:15074,load,loaded,15074,root/html528/TGClient.html,https://root.cern,https://root.cern/root/html528/TGClient.html,3,['load'],['loaded']
Performance," Functions |; Private Types |; Private Attributes |; List of all members ; ROOT::Detail::RDF::RFilterWithMissingValues< PrevNodeRaw > Class Template Referencefinal. ; template<typename PrevNodeRaw>; class ROOT::Detail::RDF::RFilterWithMissingValues< PrevNodeRaw >implementation of FilterAvailable and FilterMissing operations ; The filter evaluates if the entry is missing a value for the input column. Depending on which function was called by the user, the entry with the missing value:; will be discarded in case the user called FilterAvailable; will be kept in case the user called FilterMissing . Definition at line 58 of file RFilterWithMissingValues.hxx. Public Member Functions;  RFilterWithMissingValues (bool discardEntry, std::shared_ptr< PrevNode_t > pd, const RDFInternal::RColumnRegister &colRegister, const ColumnNames_t &columns, std::string_view filterName="""", const std::string &variationName=""nominal"");  ;  RFilterWithMissingValues (const RFilterWithMissingValues &)=delete;  ;  RFilterWithMissingValues (RFilterWithMissingValues &&)=delete;  ;  ~RFilterWithMissingValues () final;  ; void AddFilterName (std::vector< std::string > &filters) final;  ; bool CheckFilters (unsigned int slot, Long64_t entry) final;  ; void FinalizeSlot (unsigned int slot) final;  Clean-up operations to be performed at the end of a task. ;  ; std::shared_ptr< RDFGraphDrawing::GraphNode > GetGraph (std::unordered_map< void *, std::shared_ptr< RDFGraphDrawing::GraphNode > > &visitedMap) final;  ; ROOT::Detail::RDF::RColumnReaderBase * GetOrCreateColumnReader (TTreeReader *r, unsigned int slot);  ; std::shared_ptr< RNodeBase > GetVariedFilter (const std::string &variationName) final;  Return a clone of this Filter that works with values in the variationName ""universe"". ;  ; void IncrChildrenCount () final;  ; void InitSlot (TTreeReader *r, unsigned int slot) final;  ; RFilterWithMissingValues & operator= (const RFilterWithMissingValues &)=delete;  ; RFilterWithMissingValues & operator= (R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterWithMissingValues.html:1518,perform,performed,1518,doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterWithMissingValues.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterWithMissingValues.html,1,['perform'],['performed']
Performance," Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooAddModel Class Reference. ; RooAddModel is an efficient implementation of a sum of PDFs of the form. . \[; c_1 \cdot \mathrm{PDF}_1 + c_2 \cdot \mathrm{PDF}_2 + ... + c_n \cdot \mathrm{PDF}_n; \]. or ; \[; c_1 \cdot \mathrm{PDF}_1 + c_2 \cdot \mathrm{PDF}_2 + ... + \left( 1-\sum_{i=1}^{n-1} c_i \right) \cdot \mathrm{PDF}_n; \]. The first form is for extended likelihood fits, where the expected number of events is \( \sum_i c_i \). The coefficients \( c_i \) can either be explicitly provided, or, if all components support extended likelihood fits, they can be calculated from the contribution of each PDF to the total number of expected events.; In the second form, the sum of the coefficients is enforced to be one, and the coefficient of the last PDF is calculated from that condition.; RooAddModel relies on each component PDF to be normalized, and will perform no normalization other than calculating the proper last coefficient \( c_n \), if requested. An (enforced) condition for this assumption is that each \( \mathrm{PDF}_i \) is independent of each coefficient \( i \). ; Definition at line 27 of file RooAddModel.h. Classes; class  IntCacheElem;  . Public Member Functions;  RooAddModel ();  ;  RooAddModel (const char *name, const char *title, const RooArgList &pdfList, const RooArgList &coefList, bool ownPdfList=false);  Generic constructor from list of PDFs and list of coefficients. ;  ;  RooAddModel (const RooAddModel &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Return analytical integral defined by given scenario code. ;  ; Int_t basisCode (const char *name) const override;  Return code for basis function representing by 'name' string. ;  ; bool canComputeBatchWithCuda () const override;  ; bool checkObservables (cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddModel.html:1184,perform,perform,1184,doc/master/classRooAddModel.html,https://root.cern,https://root.cern/doc/master/classRooAddModel.html,1,['perform'],['perform']
Performance," Get a wrapper/accessor function around this class custom streamer (member function).; 2938 ; 2939ClassStreamerFunc_t TClass::GetStreamerFunc() const; 2940{; 2941 return fStreamerFunc;; 2942}; 2943 ; 2944////////////////////////////////////////////////////////////////////////////////; 2945/// Get a wrapper/accessor function around this class custom conversion streamer (member function).; 2946 ; 2947ClassConvStreamerFunc_t TClass::GetConvStreamerFunc() const; 2948{; 2949 return fConvStreamerFunc;; 2950}; 2951 ; 2952////////////////////////////////////////////////////////////////////////////////; 2953/// Return the proxy implementing the IsA functionality.; 2954 ; 2955TVirtualIsAProxy* TClass::GetIsAProxy() const; 2956{; 2957 return fIsA;; 2958}; 2959 ; 2960////////////////////////////////////////////////////////////////////////////////; 2961/// Static method returning pointer to TClass of the specified class name.; 2962/// If load is true, an attempt is made to obtain the class by loading; 2963/// the appropriate shared library (directed by the rootmap file).; 2964/// If silent is 'true', do not warn about missing dictionary for the class.; 2965/// (typically used for classes that are used only for transient members); 2966/// Returns `nullptr` in case class is not found.; 2967 ; 2968TClass *TClass::GetClass(const char *name, Bool_t load, Bool_t silent); 2969{; 2970 return TClass::GetClass(name, load, silent, 0, 0);; 2971}; 2972 ; 2973TClass *TClass::GetClass(const char *name, Bool_t load, Bool_t silent, size_t hint_pair_offset, size_t hint_pair_size); 2974{; 2975 if (!name || !name[0]) return nullptr;; 2976 ; 2977 if (strstr(name, ""(anonymous)"")) return nullptr;; 2978 if (strstr(name, ""(unnamed)"")) return nullptr;; 2979 if (strncmp(name,""class "",6)==0) name += 6;; 2980 if (strncmp(name,""struct "",7)==0) name += 7;; 2981 ; 2982 if (!gROOT->GetListOfClasses()) return nullptr;; 2983 ; 2984 // FindObject will take the read lock before actually getting the; 2985 // TClass ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:110910,load,load,110910,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,2,['load'],"['load', 'loading']"
Performance," Get a wrapper/accessor function around this class custom streamer (member function).; 3005 ; 3006ClassStreamerFunc_t TClass::GetStreamerFunc() const; 3007{; 3008 return fStreamerFunc;; 3009}; 3010 ; 3011////////////////////////////////////////////////////////////////////////////////; 3012/// Get a wrapper/accessor function around this class custom conversion streamer (member function).; 3013 ; 3014ClassConvStreamerFunc_t TClass::GetConvStreamerFunc() const; 3015{; 3016 return fConvStreamerFunc;; 3017}; 3018 ; 3019////////////////////////////////////////////////////////////////////////////////; 3020/// Return the proxy implementing the IsA functionality.; 3021 ; 3022TVirtualIsAProxy* TClass::GetIsAProxy() const; 3023{; 3024 return fIsA;; 3025}; 3026 ; 3027////////////////////////////////////////////////////////////////////////////////; 3028/// Static method returning pointer to TClass of the specified class name.; 3029/// If load is true, an attempt is made to obtain the class by loading; 3030/// the appropriate shared library (directed by the rootmap file).; 3031/// If silent is 'true', do not warn about missing dictionary for the class.; 3032/// (typically used for classes that are used only for transient members); 3033/// Returns `nullptr` in case class is not found.; 3034 ; 3035TClass *TClass::GetClass(const char *name, Bool_t load, Bool_t silent); 3036{; 3037 return TClass::GetClass(name, load, silent, 0, 0);; 3038}; 3039 ; 3040TClass *TClass::GetClass(const char *name, Bool_t load, Bool_t silent, size_t hint_pair_offset, size_t hint_pair_size); 3041{; 3042 if (!name || !name[0]) return nullptr;; 3043 ; 3044 if (strstr(name, ""(anonymous)"")) return nullptr;; 3045 if (strstr(name, ""(unnamed)"")) return nullptr;; 3046 if (strncmp(name,""class "",6)==0) name += 6;; 3047 if (strncmp(name,""struct "",7)==0) name += 7;; 3048 ; 3049 if (!gROOT->GetListOfClasses()) return nullptr;; 3050 ; 3051 // FindObject will take the read lock before actually getting the; 3052 // TClass ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:113661,load,load,113661,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,2,['load'],"['load', 'loading']"
Performance," Get the names of all the available columns of the dataset. |; 159| GetColumnType() | Return the type of a given column as a string. |; 160| GetColumnTypeNamesList() | Return the list of type names of columns in the dataset. |; 161| GetDefinedColumnNames() | Get the names of all the defined columns. |; 162| GetFilterNames() | Return the names of all filters in the computation graph. |; 163| GetNRuns() | Return the number of event loops run by this RDataFrame instance so far. |; 164| GetNSlots() | Return the number of processing slots that RDataFrame will use during the event loop (i.e. the concurrency level). |; 165| SaveGraph() | Store the computation graph of an RDataFrame in [DOT format (graphviz)](https://en.wikipedia.org/wiki/DOT_(graph_description_language)) for easy inspection. See the [relevant section](\ref representgraph) for details. |; 166 ; 167\anchor introduction; 168## Introduction; 169Users define their analysis as a sequence of operations to be performed on the dataframe object; the framework; 170takes care of the management of the loop over entries as well as low-level details such as I/O and parallelization.; 171RDataFrame provides methods to perform most common operations required by ROOT analyses;; 172at the same time, users can just as easily specify custom code that will be executed in the event loop.; 173 ; 174RDataFrame is built with a *modular* and *flexible* workflow in mind, summarised as follows:; 175 ; 1761. Construct a dataframe object by specifying a dataset. RDataFrame supports TTree as well as TChain, [CSV files](https://root.cern/doc/master/df014__CSVDataSource_8C.html), [SQLite files](https://root.cern/doc/master/df027__SQliteDependencyOverVersion_8C.html), [RNTuples](https://root.cern/doc/master/structROOT_1_1Experimental_1_1RNTuple.html), and it can be extended to custom data formats. From Python, [NumPy arrays can be imported into RDataFrame](https://root.cern/doc/master/df032__MakeNumpyDataFrame_8py.html) as well.; 177 ; 1782.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:12775,perform,performed,12775,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['perform'],['performed']
Performance," Get the names of all the available columns of the dataset. |; 163| GetColumnType() | Return the type of a given column as a string. |; 164| GetColumnTypeNamesList() | Return the list of type names of columns in the dataset. |; 165| GetDefinedColumnNames() | Get the names of all the defined columns. |; 166| GetFilterNames() | Return the names of all filters in the computation graph. |; 167| GetNRuns() | Return the number of event loops run by this RDataFrame instance so far. |; 168| GetNSlots() | Return the number of processing slots that RDataFrame will use during the event loop (i.e. the concurrency level). |; 169| SaveGraph() | Store the computation graph of an RDataFrame in [DOT format (graphviz)](https://en.wikipedia.org/wiki/DOT_(graph_description_language)) for easy inspection. See the [relevant section](\ref representgraph) for details. |; 170 ; 171\anchor introduction; 172## Introduction; 173Users define their analysis as a sequence of operations to be performed on the dataframe object; the framework; 174takes care of the management of the loop over entries as well as low-level details such as I/O and parallelization.; 175RDataFrame provides methods to perform most common operations required by ROOT analyses;; 176at the same time, users can just as easily specify custom code that will be executed in the event loop.; 177 ; 178RDataFrame is built with a *modular* and *flexible* workflow in mind, summarised as follows:; 179 ; 1801. Construct a dataframe object by specifying a dataset. RDataFrame supports TTree as well as TChain, [CSV files](https://root.cern/doc/master/df014__CSVDataSource_8C.html), [SQLite files](https://root.cern/doc/master/df027__SQliteDependencyOverVersion_8C.html), [RNTuples](https://root.cern/doc/master/structROOT_1_1Experimental_1_1RNTuple.html), and it can be extended to custom data formats. From Python, [NumPy arrays can be imported into RDataFrame](https://root.cern/doc/master/df032__MakeNumpyDataFrame_8py.html) as well.; 181 ; 1822.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:13217,perform,performed,13217,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['perform'],['performed']
Performance," GetGitDate()TROOT; GetGlobal(const char *name, Bool_t load=kFALSE) constTROOT; GetGlobal(const TObject *obj, Bool_t load=kFALSE) constTROOT; GetGlobalFunction(const char *name, const char *params=nullptr, Bool_t load=kFALSE)TROOT; GetGlobalFunctions()TROOTprotected; GetGlobalFunctionWithPrototype(const char *name, const char *proto=nullptr, Bool_t load=kFALSE)TROOT; GetIconName() constTObjectvirtual; GetIconPath()TROOTstatic; GetIncludeDir()TROOTstatic; GetInterpreter() constTROOTinline; GetKey(const char *, Short_t=9999) constTDirectoryinlinevirtual; GetLibDir()TROOTstatic; GetList() constTDirectoryinlinevirtual; GetListOfBrowsables() constTROOTinline; GetListOfBrowsers() constTROOTinline; GetListOfCanvases() constTROOTinline; GetListOfClasses() constTROOTinline; GetListOfClassGenerators() constTROOTinline; GetListOfCleanups() constTROOTinline; GetListOfClosedObjects() constTROOTinline; GetListOfColors() constTROOTinline; GetListOfDataSets() constTROOTinline; GetListOfEnums(Bool_t load=kFALSE)TROOT; GetListOfFiles() constTROOTinline; GetListOfFunctionOverloads(const char *name) constTROOT; GetListOfFunctions() constTROOTinline; GetListOfFunctionTemplates()TROOT; GetListOfGeometries() constTROOTinline; GetListOfGlobalFunctions(Bool_t load=kFALSE)TROOT; GetListOfGlobals(Bool_t load=kFALSE)TROOT; GetListOfKeys() constTDirectoryinlinevirtual; GetListOfMappedFiles() constTROOTinline; GetListOfMessageHandlers() constTROOTinline; GetListOfProofs() constTROOTinline; GetListOfSecContexts() constTROOTinline; GetListOfSockets() constTROOTinline; GetListOfSpecials() constTROOTinline; GetListOfStreamerInfo() constTROOTinline; GetListOfStyles() constTROOTinline; GetListOfTasks() constTROOTinline; GetListOfTypes(Bool_t load=kFALSE)TROOT; GetMacroDir()TROOTstatic; GetMacroPath()TROOTstatic; GetMother() constTDirectoryinline; GetMotherDir() constTDirectoryinline; GetName() const overrideTNamedinlinevirtual; GetNbytesKeys() constTDirectoryinlinevirtual; GetNclasses() constTROOT; Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTROOT-members.html:8297,load,load,8297,doc/master/classTROOT-members.html,https://root.cern,https://root.cern/doc/master/classTROOT-members.html,1,['load'],['load']
Performance," GetListOfClasses() constTROOTinline; GetListOfClassGenerators() constTROOTinline; GetListOfCleanups() constTROOTinline; GetListOfClosedObjects() constTROOTinline; GetListOfColors() constTROOTinline; GetListOfDataSets() constTROOTinline; GetListOfEnums(Bool_t load=kFALSE)TROOT; GetListOfFiles() constTROOTinline; GetListOfFunctionOverloads(const char *name) constTROOT; GetListOfFunctions() constTROOTinline; GetListOfFunctionTemplates()TROOT; GetListOfGeometries() constTROOTinline; GetListOfGlobalFunctions(Bool_t load=kFALSE)TROOT; GetListOfGlobals(Bool_t load=kFALSE)TROOT; GetListOfKeys() constTDirectoryinlinevirtual; GetListOfMappedFiles() constTROOTinline; GetListOfMessageHandlers() constTROOTinline; GetListOfProofs() constTROOTinline; GetListOfSecContexts() constTROOTinline; GetListOfSockets() constTROOTinline; GetListOfSpecials() constTROOTinline; GetListOfStreamerInfo() constTROOTinline; GetListOfStyles() constTROOTinline; GetListOfTasks() constTROOTinline; GetListOfTypes(Bool_t load=kFALSE)TROOT; GetMacroDir()TROOTstatic; GetMacroPath()TROOTstatic; GetMother() constTDirectoryinline; GetMotherDir() constTDirectoryinline; GetName() const overrideTNamedinlinevirtual; GetNbytesKeys() constTDirectoryinlinevirtual; GetNclasses() constTROOT; GetNkeys() constTDirectoryinlinevirtual; GetNtypes() constTROOT; GetObject(const char *namecycle, T *&ptr)TDirectoryinline; GetObjectChecked(const char *namecycle, const char *classname)TDirectoryvirtual; GetObjectChecked(const char *namecycle, const TClass *cl)TDirectoryvirtual; GetObjectInfo(Int_t px, Int_t py) constTObjectvirtual; GetObjectStat()TObjectstatic; GetObjectUnchecked(const char *namecycle)TDirectoryvirtual; GetOption() constTObjectinlinevirtual; GetPath() constTDirectoryvirtual; GetPathStatic() constTDirectoryvirtual; GetPluginManager() constTROOTinline; GetRootFolder() constTROOTinline; GetRootSys()TROOTstatic; GetSeekDir() constTDirectoryinlinevirtual; GetSeekKeys() constTDirectoryinlinevirtual; GetSeekParent() con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTROOT-members.html:9035,load,load,9035,doc/master/classTROOT-members.html,https://root.cern,https://root.cern/doc/master/classTROOT-members.html,1,['load'],['load']
Performance," GetRootSys()Definition FoundationUtils.cxx:158; ROOT::FoundationUtils::GetEtcDirconst std::string & GetEtcDir()Definition FoundationUtils.cxx:195; ROOT::Internal::VecOps::voidvoid(off) SmallVectorTemplateBase< T; ROOT::InternalDefinition TErrorDefaultHandler.hxx:16; ROOT::Internal::GetSymInLibImtstatic Func_t GetSymInLibImt(const char *funcname)Definition TROOT.cxx:401; ROOT::Internal::gGetROOTstatic GetROOTFun_t gGetROOTDefinition TROOT.cxx:399; ROOT::Internal::gROOTLocalR__EXTERN TROOT * gROOTLocalDefinition TROOT.h:379; ROOT::Internal::DisableParBranchProcessingvoid DisableParBranchProcessing()Globally disables the IMT use case of parallel branch processing, deactivating the corresponding lock...Definition TROOT.cxx:434; ROOT::Internal::ErrorSystemMsgHandlerFunc_tstd::function< const char *()> ErrorSystemMsgHandlerFunc_tRetrieves the error string associated with the last system error.Definition TError.h:59; ROOT::Internal::IsImplicitMTEnabledImplstatic Bool_t & IsImplicitMTEnabledImpl()Keeps track of the status of ImplicitMT w/o resorting to the load of libImt.Definition TROOT.cxx:463; ROOT::Internal::MinimalErrorHandlervoid MinimalErrorHandler(int level, Bool_t abort, const char *location, const char *msg)A very simple error handler that is usually replaced by the TROOT default error handler.Definition TError.cxx:67; ROOT::Internal::GetROOTFun_tTROOT *(* GetROOTFun_t)()Definition TROOT.cxx:397; ROOT::Internal::SetErrorSystemMsgHandlerErrorSystemMsgHandlerFunc_t SetErrorSystemMsgHandler(ErrorSystemMsgHandlerFunc_t h)Returns the previous system error message handler.Definition TError.cxx:56; ROOT::Internal::EnableParBranchProcessingvoid EnableParBranchProcessing()Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in...Definition TROOT.cxx:420; ROOT::Internal::IsParBranchProcessingEnabledBool_t IsParBranchProcessingEnabled()Returns true if parallel branch processing is enabled.Definition TROOT.cxx:447; ROOT::Internal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8cxx_source.html:171241,load,load,171241,doc/v632/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8cxx_source.html,1,['load'],['load']
Performance," GetRootSys()Definition FoundationUtils.cxx:158; ROOT::FoundationUtils::GetEtcDirconst std::string & GetEtcDir()Definition FoundationUtils.cxx:195; ROOT::Internal::VecOps::voidvoid(off) SmallVectorTemplateBase< T; ROOT::InternalDefinition TErrorDefaultHandler.hxx:16; ROOT::Internal::GetSymInLibImtstatic Func_t GetSymInLibImt(const char *funcname)Definition TROOT.cxx:401; ROOT::Internal::gGetROOTstatic GetROOTFun_t gGetROOTDefinition TROOT.cxx:399; ROOT::Internal::gROOTLocalR__EXTERN TROOT * gROOTLocalDefinition TROOT.h:379; ROOT::Internal::DisableParBranchProcessingvoid DisableParBranchProcessing()Globally disables the IMT use case of parallel branch processing, deactivating the corresponding lock...Definition TROOT.cxx:434; ROOT::Internal::ErrorSystemMsgHandlerFunc_tstd::function< const char *()> ErrorSystemMsgHandlerFunc_tRetrieves the error string associated with the last system error.Definition TError.h:60; ROOT::Internal::IsImplicitMTEnabledImplstatic Bool_t & IsImplicitMTEnabledImpl()Keeps track of the status of ImplicitMT w/o resorting to the load of libImt.Definition TROOT.cxx:463; ROOT::Internal::MinimalErrorHandlervoid MinimalErrorHandler(int level, Bool_t abort, const char *location, const char *msg)A very simple error handler that is usually replaced by the TROOT default error handler.Definition TError.cxx:67; ROOT::Internal::GetROOTFun_tTROOT *(* GetROOTFun_t)()Definition TROOT.cxx:397; ROOT::Internal::SetErrorSystemMsgHandlerErrorSystemMsgHandlerFunc_t SetErrorSystemMsgHandler(ErrorSystemMsgHandlerFunc_t h)Returns the previous system error message handler.Definition TError.cxx:56; ROOT::Internal::EnableParBranchProcessingvoid EnableParBranchProcessing()Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in...Definition TROOT.cxx:420; ROOT::Internal::IsParBranchProcessingEnabledBool_t IsParBranchProcessingEnabled()Returns true if parallel branch processing is enabled.Definition TROOT.cxx:447; ROOT::Internal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:171417,load,load,171417,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,1,['load'],['load']
Performance," GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; x1Option_t Option_t TPoint TPoint const char x1Definition TGWin32VirtualXProxy.cxx:70; TGraph2D.h; TH1.h; TMath.h; TPolyLine3D.h; operator()TRObject operator()(const T1 &t1) constDefinition TRFunctionImport__oprtr.h:14; TRandom2.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TStyle.h; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; Vector3D.h; ROOT::Fit::FitConfig::ParSettingsconst ParameterSettings & ParSettings(unsigned int i) constget the parameter settings for the i-th parameter (const method)Definition FitConfig.h:76; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Fit::Fitter::Resultconst FitResult & Result() constget fit resultDefinition Fitter.h:394; ROOT::Fit::Fitter::FitFCNbool FitFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)Fit using the a generic FCN function as a C++ callable object implementing double () (const double *)...Definition Fitter.h:649; ROOT::Fit::Fitter::Configconst FitConfig & Config() constaccess to the fit configuration (const method)Definition Fitter.h:422; ROOT::Fit::Fitter::SetFCNbool SetFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)Set a generic FCN function as a C++ callable object implementing double () (const double *) Note that...Definition Fitter.h:656; ROOT::Fit::ParameterSettings::SetStepSizevoid SetStepSize(double err)set the step sizeDefinition ParameterSettings.h:122; ROOT::Math::DisplacementVector3D< Cartesian3D< doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/line3Dfit_8C.html:5952,perform,performing,5952,doc/master/line3Dfit_8C.html,https://root.cern,https://root.cern/doc/master/line3Dfit_8C.html,1,['perform'],['performing']
Performance," Given a file read not in the miss cache, handle (possibly) loading the data. ; Process a cache miss; (pos, len) isn't in the buffer.; The first time we have a miss, we buffer as many baskets we can (up to the maximum size of the TTreeCache) in memory from all branches that are not in the prefetch list.; Subsequent times, we fetch all the buffers corresponding to branches that had previously seen misses. If it turns out the (pos, len) isn't in the list of branches, we treat this as if it was the first miss.; Returns true if we were able to pull the data into the miss cache. ; Definition at line 863 of file TTreeCache.cxx. ◆ ReadBuffer(). Int_t TTreeCache::ReadBuffer ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). overridevirtual . Read buffer at position pos if the request is in the list of prefetched blocks read from fBuffer. ; Otherwise try to fill the cache from the list of selected branches, and recheck if pos is now in the list. Returns:; -1 in case of read failure,; 0 in case not in cache,; 1 in case read from cache. This function overloads TFileCacheRead::ReadBuffer. . Reimplemented from TFileCacheRead.; Definition at line 2027 of file TTreeCache.cxx. ◆ ReadBufferNormal(). Int_t TTreeCache::ReadBufferNormal ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Old method ReadBuffer before the addition of the prefetch mechanism. ; Definition at line 1927 of file TTreeCache.cxx. ◆ ReadBufferPrefetch(). Int_t TTreeCache::ReadBufferPrefetch ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Used to read a chunk from a block previously fetched. ; It will call FillBuffer even if the cache lookup succeeds, because it will try to prefetch the next block as soon as we start reading from the current block. ; Definition at line 1986 of file TTreeCache.cxx. ◆ ResetCache(). void TTreeCache::ResetCache ; (; ). virtual . This will simply clear the cache. ; Reimplemented in TTreeCacheUnzip.; Definition at line 2040 of file TTreeCache.cxx. ◆ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCache.html:46795,cache,cache,46795,doc/v632/classTTreeCache.html,https://root.cern,https://root.cern/doc/v632/classTTreeCache.html,4,['cache'],['cache']
Performance," HandleLibIncPath(TMessage* mess); Handle lib, inc search paths modification request. void HandleCheckFile(TMessage* mess, TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle here all cache and package requests. Int_t HandleWorkerLists(TMessage* mess); Handle here all requests to modify worker lists. FILE * SetErrorHandlerFile(FILE* ferr); Set the file stream where to log (default stderr).; If ferr == 0 the default is restored.; Returns current setting. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The PROOF error handler function. It prints the message on fgErrorHandlerFile and; if abort is set it aborts the application. Int_t CopyFromCache(const char* name, Bool_t cpbin); Retrieve any files related to 'macro' from the cache directory.; If 'cpbin' is true, the associated binaries are retrieved as well.; Returns 0 on success, -1 otherwise. Int_t CopyToCache(const char* name, Int_t opt = 0); Copy files related to 'macro' to the cache directory.; Action depends on 'opt':. opt = 0 copy 'macro' to cache and delete from cache any binary; related to name; e.g. if macro = bla.C, the binaries are; bla_C.so, bla_C.rootmap, ...; opt = 1 copy the binaries related to macro to the cache. Returns 0 on success, -1 otherwise. void MakePlayer(); Make player instance. void DeletePlayer(); Delete player instance. Int_t GetPriority(); Get the processing priority for the group the user belongs too. This; priority is a number (0 - 100) determined by a scheduler (third; party process) based on some basic priority the group has, e.g.; we might want to give users in a specific group (e.g. promptana); a higher priority than users in other groups, and on the analysis; of historical logging data (i.e. usage of CPU by the group in a; previous time slot, as recorded in TPerfStats::WriteQueryLog()). Currently the group priority is obtained by a query in a SQL DB; table proofpriority, which has the form",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofServ.html:27339,cache,cache,27339,root/html532/TProofServ.html,https://root.cern,https://root.cern/root/html532/TProofServ.html,4,['cache'],['cache']
Performance," HandleLibIncPath(TMessage* mess); Handle lib, inc search paths modification request. void HandleCheckFile(TMessage* mess, TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle here all cache and package requests. Int_t HandleWorkerLists(TMessage* mess); Handle here all requests to modify worker lists. FILE * SetErrorHandlerFile(FILE* ferr); Set the file stream where to log (default stderr).; If ferr == 0 the default is restored.; Returns current setting. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The PROOF error handler function. It prints the message on fgErrorHandlerFile and; if abort is set it aborts the application. Int_t CopyFromCache(const char* name, Bool_t cpbin); Retrieve any files related to 'macro' from the cache directory.; If 'cpbin' is true, the associated binaries are retrieved as well.; Returns 0 on success, -1 otherwise. Int_t CopyToCache(const char* name, Int_t opt = 0); Copy files related to 'macro' to the cache directory.; Action depends on 'opt':. opt = 0 copy 'macro' to cache and delete from cache any binary; related to name; e.g. if macro = bla.C, the binaries are; bla_C.so, bla_C.rootmap, ...; opt = 1 copy the binaries related to macro to the cache. Returns 0 on success, -1 otherwise. void MakePlayer(); Make player instance. void DeletePlayer(); Delete player instance. Int_t GetPriority(); Get the processing priority for the group the user belongs too. This; prioroty is a number (0 - 100) determined by a scheduler (third; party process) based on some basic priority the group has, e.g.; we might want to give users in a specific group (e.g. promptana); a higher priority than users in other groups, and on the analysis; of historical logging data (i.e. usage of CPU by the group in a; previous time slot, as recorded in TPerfStats::WriteQueryLog()). Currently the group priority is obtained by a query in a SQL DB; table proofpriority, which has the form",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofServ.html:27339,cache,cache,27339,root/html530/TProofServ.html,https://root.cern,https://root.cern/root/html530/TProofServ.html,1,['cache'],['cache']
Performance," Here we book the DNN of TMVA. See the example TMVA_Higgs_Classification.C for a detailed description of the; # options; ; if useTMVADNN:; layoutString = ROOT.TString(; ""DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,DENSE|1|LINEAR""; ); ; # Training strategies; # one can catenate several training strings with different parameters (e.g. learning rates or regularizations; # parameters) The training string must be concatenated with the `|` delimiter; trainingString1 = ROOT.TString(; ""LearningRate=1e-3,Momentum=0.9,Repetitions=1,""; ""ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,""; ""WeightDecay=1e-4,Regularization=None,""; ""Optimizer=ADAM,DropConfig=0.0+0.0+0.0+0.""; ) # + ""|"" + trainingString2 + ...; trainingString1 += "",MaxEpochs="" + str(max_epochs); ; # Build now the full DNN Option string; dnnMethodName = ""TMVA_DNN_CPU""; ; # use GPU if available; dnnOptions = ""CPU""; if hasGPU :; dnnOptions = ""GPU""; dnnMethodName = ""TMVA_DNN_GPU""; ; factory.BookMethod(; loader,; TMVA.Types.kDL,; dnnMethodName,; H=False,; V=True,; ErrorStrategy=""CROSSENTROPY"",; VarTransform=None,; WeightInitialization=""XAVIER"",; Layout=layoutString,; TrainingStrategy=trainingString1,; Architecture=dnnOptions; ); ; ; ### Book Convolutional Neural Network in TMVA; ; # For building a CNN one needs to define; ; # - Input Layout : number of channels (in this case = 1) | image height | image width; # - Batch Layout : batch size | number of channels | image size = (height*width); ; # Then one add Convolutional layers and MaxPool layers.; ; # - For Convolutional layer the option string has to be:; # - CONV | number of units | filter height | filter width | stride height | stride width | padding height | paddig; # width | activation function; ; # - note in this case we are using a filer 3x3 and padding=1 and stride=1 so we get the output dimension of the; # conv layer equal to the input; ; # - note we use after the first convolutional layer a batch normalization layer. This seem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8py.html:10710,load,loader,10710,doc/master/TMVA__CNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8py.html,1,['load'],['loader']
Performance," I/O buffer. ; Used only by TLeafC, just dummy implementation here ; Implements TBuffer.; Definition at line 1639 of file TBufferSQL2.cxx. ◆ WriteFloat(). void TBufferSQL2::WriteFloat ; (; Float_t ; f). finalvirtual . Writes Float_t value to buffer. ; Implements TBuffer.; Definition at line 2120 of file TBufferSQL2.cxx. ◆ WriteInt(). void TBufferSQL2::WriteInt ; (; Int_t ; i). finalvirtual . Writes Int_t value to buffer. ; Implements TBuffer.; Definition at line 2072 of file TBufferSQL2.cxx. ◆ WriteLong(). void TBufferSQL2::WriteLong ; (; Long_t ; l). finalvirtual . Writes Long_t value to buffer. ; Implements TBuffer.; Definition at line 2088 of file TBufferSQL2.cxx. ◆ WriteLong64(). void TBufferSQL2::WriteLong64 ; (; Long64_t ; l). finalvirtual . Writes Long64_t value to buffer. ; Implements TBuffer.; Definition at line 2104 of file TBufferSQL2.cxx. ◆ WriteObjectClass(). void TBufferSQL2::WriteObjectClass ; (; const void * ; actualObjStart, . const TClass * ; actualClass, . Bool_t ; cacheReuse . ). finalprotectedvirtual . Write object to buffer. Only used from TBuffer. ; Implements TBufferIO.; Definition at line 868 of file TBufferSQL2.cxx. ◆ WriteShort(). void TBufferSQL2::WriteShort ; (; Short_t ; s). finalvirtual . Writes Short_t value to buffer. ; Implements TBuffer.; Definition at line 2056 of file TBufferSQL2.cxx. ◆ WriteStdString() [1/3]. void TBufferSQL2::WriteStdString ; (; const std::string * ; s). finalvirtual . Write a std::string. ; Implements TBuffer.; Definition at line 1972 of file TBufferSQL2.cxx. ◆ WriteStdString() [2/3]. virtual void TBuffer::WriteStdString ; (; const std::string * ; s). virtual . Implements TBuffer. ◆ WriteStdString() [3/3]. virtual void TBuffer::WriteStdString ; (; std::string & ; s). inlinevirtual . Reimplemented from TBuffer.; Definition at line 312 of file TBuffer.h. ◆ WriteTString(). void TBufferSQL2::WriteTString ; (; const TString & ; s). finalvirtual . Write a TString. ; Implements TBuffer.; Definition at line 1914 of fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferSQL2.html:88915,cache,cacheReuse,88915,doc/master/classTBufferSQL2.html,https://root.cern,https://root.cern/doc/master/classTBufferSQL2.html,1,['cache'],['cacheReuse']
Performance," I/O is done with a (large) fixed length buffer thereby avoiding many small I/O's. Currently the write cache system is used by the classes TNetFile, TNetXNGFile and TWebFile (via TFile::WriteBuffers()).; The write cache is automatically created when writing a remote file (created in TFile::Open()). ; Definition at line 19 of file TFileCacheWrite.h. Public Member Functions;  TFileCacheWrite ();  Default Constructor. ;  ;  TFileCacheWrite (TFile *file, Int_t buffersize);  Creates a TFileCacheWrite data structure. ;  ;  ~TFileCacheWrite () override;  Destructor. ;  ; virtual Bool_t Flush ();  Flush the current write buffer to the file. ;  ; virtual Int_t GetBytesInCache () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print class internal structure. ;  ; virtual Int_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Called by the read cache to check if the requested data is not in the write cache buffer. ;  ; virtual void SetFile (TFile *file);  Set the file using this cache. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t WriteBuffer (const char *buf, Long64_t pos, Int_t len);  Write buffer at position pos in the write buffer. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileCacheWrite.html:1585,cache,cache,1585,doc/master/classTFileCacheWrite.html,https://root.cern,https://root.cern/doc/master/classTFileCacheWrite.html,1,['cache'],['cache']
Performance," IE. TTree Libraries; TTree Behavior change.; Merging.; Added fast cloning support to TTree::MergeTrees and TTree::Merge(TCollection,Option_t).; TTreeCache; The TTreeCache is now enabled by default. The default size of the TTreeCache is the estimated size of a cluster size for the TTree. The TTreeCache prefilling is also enabled by default; when in learning phase rather than reading each requested branch individually, the TTreeCache will read all the branches thus trading off the latencies inherent to multiple small reads for the potential of requesting more data than needed by read from the disk or server the baskets for too many branches.; The default behavior can be changed by either updating one of the rootrc files or by setting environment variables. The rootrc files, both the global and the local ones, now support the following the resource variable TTreeCache.Size which set the default size factor for auto sizing TTreeCache for TTrees. The estimated cluster size for the TTree and this factor is used to give the cache size. If option is set to zero auto cache creation is disabled and the default cache size is the historical one (equivalent to factor 1.0). If set to non zero auto cache creation is enabled and both auto created and default sized caches will use the configured factor: 0.0 no automatic cache and greater than 0.0 to enable cache. This value can be overridden by the environment variable ROOT_TTREECACHE_SIZE.; The resource variable TTreeCache.Prefill sets the default TTreeCache prefilling type. The prefill type may be: 0 for no prefilling and 1 to prefill all the branches. It can be overridden by the environment variable ROOT_TTREECACHE_PREFILL; In particular the default can be set back to the same as in version 5 by setting TTreeCache.Size (or ROOT_TTREECACHE_SIZE) and TTreeCache.Prefill (or ROOT_TTREECACHE_PREFILL) both to zero.; TTree methods which are expected to modify a cache, like AddBranchToCache, will attempt to setup a cache of default size ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:12685,cache,cache,12685,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,1,['cache'],['cache']
Performance," Idea: Factor out this 'if' to a UseCacheRepeat function; 1650 if (config->fNeedRepeat) {; 1651 b.SetBufferOffset(bufpos);; 1652 }; 1653 return 0;; 1654 }; 1655 ; 1656 INLINE_TEMPLATE_ARGS Int_t UseCacheGenericCollection(TBuffer &b, void *, const void *, const TLoopConfiguration *loopconfig, const TConfiguration *conf); 1657 {; 1658 TConfigurationUseCache *config = (TConfigurationUseCache*)conf;; 1659 ; 1660 Int_t bufpos = b.Length();; 1661 TVirtualArray *cached = b.PeekDataCache();; 1662 if (cached==0) {; 1663 TStreamerElement *aElement = config->fCompInfo->fElem;; 1664 TStreamerInfo *info = (TStreamerInfo*)config->fInfo;; 1665 ; 1666 TVirtualCollectionProxy *proxy = ((TGenericLoopConfig*)loopconfig)->fProxy;; 1667 Warning(""ReadBuffer"",""Skipping %s::%s because the cache is missing."",info->GetName(),aElement->GetName());; 1668 UInt_t n = proxy->Size();; 1669 info->ReadBufferSkip(b, *proxy,config->fCompInfo,config->fCompInfo->fType+TStreamerInfo::kSkip,aElement,n,0);; 1670 } else {; 1671 TVectorLoopConfig cached_config( nullptr, cached->fClass->Size(), /* read */ kTRUE );; 1672 void *cached_start = (*cached)[0];; 1673 void *cached_end = ((char*)cached_start) + cached->fSize * cached_config.fIncrement;; 1674 config->fAction(b,cached_start,cached_end,&cached_config);; 1675 }; 1676 // Idea: Factor out this 'if' to a UseCacheRepeat function; 1677 if (config->fNeedRepeat) {; 1678 b.SetBufferOffset(bufpos);; 1679 }; 1680 return 0;; 1681 }; 1682 ; 1683 // Support for collections.; 1684 ; 1685 Int_t ReadLoopInvalid(TBuffer &, void *, const void *, const TConfiguration *config); 1686 {; 1687 Fatal(""ApplySequence"",""The sequence of actions to read %s:%d member-wise was not initialized."",config->fInfo->GetName(),config->fInfo->GetClassVersion());; 1688 return 0;; 1689 }; 1690 ; 1691 Int_t WriteLoopInvalid(TBuffer &, void *, const void *, const TConfiguration *config); 1692 {; 1693 Fatal(""ApplySequence"",""The sequence of actions to write %s:%d member-wise was not initialized."",conf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:69526,cache,cached,69526,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,3,['cache'],['cached']
Performance," If download is kTRUE and the package is not found locally, then it is downloaded; from the master repository.; Returns 0 in case of success and -1 in case of error. Int_t UploadPackageOnClient(const char* package, TProof::EUploadPackageOpt opt, TMD5* md5); Upload a package on the client in ~/.proof/packages.; The 'opt' allows to specify whether the .PAR should be just unpacked; in the existing dir (opt = kUntar, default) or a remove of the existing; directory should be executed (opt = kRemoveOld), thereby triggering a full; re-build. This option if effective only for PROOF protocol > 8.; Returns 0 in case of success and -1 in case of error. Int_t Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); Load the specified macro on master, workers and, if notOnClient is; kFALSE, on the client. The macro file is uploaded if new or updated.; If existing, the corresponding header basename(macro).h or .hh, is also; uploaded. The default is to load the macro also on the client.; On masters, if uniqueWorkers is kTRUE, the macro is loaded on unique workers; only, and collection is not done; if uniqueWorkers is kFALSE, collection; from the previous request is done, and broadcasting + collection from the; other workers is done.; The wrks arg can be used on the master to limit the set of workers.; Returns 0 in case of success and -1 in case of error. Int_t AddDynamicPath(const char* libpath, Bool_t onClient = kFALSE, TList* wrks = 0); Add 'libpath' to the lib path search.; Multiple paths can be specified at once separating them with a comma or; a blank.; Return 0 on success, -1 otherwise. Int_t AddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0); Add 'incpath' to the inc path search.; Multiple paths can be specified at once separating them with a comma or; a blank.; Return 0 on success, -1 otherwise. Int_t RemoveDynamicPath(const char* libpath, Bool_t onClient = kFALSE); Remove 'libpath' from the lib path searc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:67992,load,load,67992,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,1,['load'],['load']
Performance," If the regularisation is strong, i.e. large parameter tau,; then the distribution x or its derivatives will look like the bias; distribution. If the parameter tau is small, the distribution x is; independent of the bias. Three basic types of regularisation are implemented in TUnfold. condition regularisation. kRegModeNone none; kRegModeSize minimize the size of (x-x0); kRegModeDerivative minimize the 1st derivative of (x-x0); kRegModeCurvature minimize the 2nd derivative of (x-x0). kRegModeSize is the regularisation scheme which often is found in; literature. The second derivative is often named curvature.; Sometimes the bias is not discussed, equivalent to a bias scale factor; of zero. The regularisation schemes kRegModeDerivative and; kRegModeCurvature have the nice feature that they create correlations; between x-bins, whereas the non-regularized unfolding tends to create; negative correlations between bins. For these regularisation schemes the; parameter tau could be tuned such that the correlations are smallest,; as an alternative to the L-curve method. If kRegModeSize is chosen or if x is a smooth function through all bins,; the regularisation condition can be set on all bins together by giving; the appropriate argument in the constructor (see examples above). If x is composed of independent groups of bins (for example,; signal and background binning in two variables), it may be necessary to; set regularisation conditions for the individual groups of bins.; In this case, give kRegModeNone in the constructor and specify; the bin grouping with calls to; RegularizeBins() specify a 1-dimensional group of bins; RegularizeBins2D() specify a 2-dimensional group of bins. Note, the class TUnfoldDensity provides an automatic setup of complex; regularisation schemes. For ultimate flexibility, the regularisation condition can be set on each; bin individually; -> give kRegModeNone in the constructor and use; RegularizeSize() regularize one bin; RegularizeDerivative() regu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfold.html:7209,tune,tuned,7209,root/html534/TUnfold.html,https://root.cern,https://root.cern/root/html534/TUnfold.html,3,['tune'],['tuned']
Performance," If the result of a comparison is TRUE, the result is 1, otherwise 0.; Already predefined names can be given. For example, if the formula; TFormula old(sin(x*(x<0.5 || x>1))) one can assign a name to the formula. By default the name of the object = title = formula itself. old.SetName(""old""). then, old can be reused in a new expression. TFormula new(""x*old"") is equivalent to: TFormula new(""x*sin(x*(x<0.5 || x>1))""); Up to 4 dimensions are supported (indicated by x, y, z, t) An expression may have 0 parameters or a list of parameters indicated by the sequence [par_number]; A graph showing the logic to compile and analyze a formula is shown in TFormula::Compile and TFormula::Analyze. Once a formula has been compiled, it can be evaluated for a given set of parameters. see graph in TFormula::EvalPar.; This class is the base class for the function classes TF1,TF2 and TF3. It is also used by the ntuple selection mechanism TNtupleFormula.; In version 7 of TFormula, the usage of fOper has been changed to improve the performance of TFormula::EvalPar. Conceptually, fOper was changed from a simple array of Int_t to an array of composite values. For example a 'ylandau(5)' operation used to be encoded as 4105; it is now encoded as (klandau >> kTFOperShift) + 5 Any class inheriting from TFormula and using directly fOper (which is now a private data member), needs to be updated to take this in consideration. The member functions recommended to set and access fOper are: SetAction, GetAction, GetActionParam For more performant access to the information, see the implementation TFormula::EvalPar. CHANGING DEFAULT SETTINGS; When creating complex formula , it may be necessary to increase some default parameters. see static function TFormula::SetMaxima. WHY TFormula CANNOT ACCEPT A CLASS MEMBER FUNCTION ?; This is a frequently asked question. C++ is a strongly typed language. There is no way for TFormula (without recompiling this class) to know about all possible user defined data types. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormula.html:2249,perform,performance,2249,doc/master/classROOT_1_1v5_1_1TFormula.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormula.html,1,['perform'],['performance']
Performance," Ignore declaration within a function.; 6697 return;; 6698 }; 6699 ; 6700 auto declName = tdDef->getNameAsString();; 6701 // Check if we have registered the unqualified name into the list; 6702 // of TClass that are in kNoInfo, kEmulated or kFwdDeclaredState.; 6703 // Since this is used as heureutistic to avoid spurrious calls to GetNormalizedName; 6704 // the unqualified name is sufficient (and the fully qualified name might be; 6705 // 'wrong' if there is difference in spelling in the template paramters (for example); 6706 if (!TClass::HasNoInfoOrEmuOrFwdDeclaredDecl(declName.c_str())){; 6707 // fprintf (stderr,""WARNING: Impossible to find a TClassEntry in kNoInfo or kEmulated the decl of which would be called %s. Skip w/o building the normalized name.\n"",declName.c_str() );; 6708 return;; 6709 }; 6710 ; 6711 clang::QualType type(tdDef->getTypeForDecl(), 0);; 6712 ROOT::TMetaUtils::GetNormalizedName(name, type, *fInterpreter, *fNormalizedCtxt);; 6713 } else if (ns) {; 6714 canon = ns->getCanonicalDecl();; 6715 name = ND->getQualifiedNameAsString();; 6716 } else {; 6717 name = ND->getQualifiedNameAsString();; 6718 }; 6719 ; 6720 // Supposedly we are being called while something is being; 6721 // loaded ... let's now tell the autoloader to do the work; 6722 // yet another time.; 6723 SuspendAutoLoadingRAII autoLoadOff(this);; 6724 // FIXME: There can be more than one TClass for a single decl.; 6725 // for example vector<double> and vector<Double32_t>; 6726 TClass* cl = (TClass*)gROOT->GetListOfClasses()->FindObject(name.c_str());; 6727 if (cl && GetModTClasses().find(cl) == GetModTClasses().end()) {; 6728 RefreshClassInfo(cl, canon, false);; 6729 }; 6730 // And here we should find the other 'aliases' (eg. vector<Double32_t>); 6731 // and update them too:; 6732 // foreach(aliascl in gROOT->GetListOfClasses()->FindAliasesOf(name.c_str())); 6733 // RefreshClassInfo(cl, tdDef, true);; 6734}; 6735 ; 6736/////////////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:262080,load,loaded,262080,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['load'],['loaded']
Performance," In case Book is called without specifying column types as template arguments, corresponding typed code will be just-in-time compiled by RDataFrame. In that case the Helper class needs to be known to the ROOT interpreter.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Examples; See this tutorial for an example implementation of an action helper.; It is also possible to inspect the code used by built-in RDataFrame actions at ActionHelpers.hxx. ; Definition at line 2984 of file RInterface.hxx. ◆ Cache() [1/4]. template<typename Proxied , typename DataSource = void> . template<typename... ColumnTypes> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; const ColumnNames_t & ; columnList). inline . Save selected columns in memory. ; Template Parameters. ColumnTypesvariadic list of branch/column types. . Parameters. [in]columnListcolumns to be cached in memory. . Returnsa RDataFrame that wraps the cached dataset.; This action returns a new RDataFrame object, completely detached from the originating RDataFrame. The new dataframe only contains the cached columns and stores their content in memory for fast, zero-copy subsequent access.; Use Cache if you know you will only need a subset of the (Filtered) data that fits in memory and that will be accessed many times.; NoteCache will refuse to process columns with names of the form #columnname. These are special columns made available by some data sources (e.g. RNTupleDS) that represent the size of column columnname, and are not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an Alias(): df.Alias(""nbar"", ""#bar"").Cache<std::size_t>(..., {""nbar""}). Example usage:; Types and columns specified: auto cache_some_cols_df = df.Cache<double, MyClass, int>({""col0"", ""col1"", ""col2""});; double; Types inferred and columns specified (this invocation relies on jitting): auto cache_some_co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:42153,cache,cached,42153,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['cache'],['cached']
Performance," Inheritance Chart:. TObject. ←; TSelector. ←. RooProofDriverSelector. TProofDraw; ←. TProofDrawEntryList. TProofDrawEventList. TProofDrawGraph. TProofDrawHist. TProofDrawListOfGraphs. TProofDrawListOfPolyMarkers3D. TProofDrawPolyMarker3D. TProofDrawProfile.  [more...]. Function documentation; TSelector(); Default selector ctor. ~TSelector(); Selector destructor. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Abort processing. If what = kAbortProcess, the Process() loop will be; aborted. If what = kAbortFile, the current file in a chain will be; aborted and the processing will continue with the next file, if there; is no next file then Process() will be aborted. Abort() can also be; called from Begin(), SlaveBegin(), Init() and Notify(). After abort; the SlaveTerminate() and Terminate() are always called. The abort flag; can be checked in these methods using GetAbort(). TSelector * GetSelector(const char* filename); The code in filename is loaded (interpreted or compiled, see below),; filename must contain a valid class implementation derived from TSelector. If filename is of the form file.C, the file will be interpreted.; If filename is of the form file.C++, the file file.C will be compiled; and dynamically loaded. The corresponding binary file and shared; library will be deleted at the end of the function.; If filename is of the form file.C+, the file file.C will be compiled; and dynamically loaded. At next call, if file.C is older than file.o; and file.so, the file.C is not compiled, only file.so is loaded. The static function returns a pointer to a TSelector object. Bool_t IsStandardDraw(const char* selec); Find out if this is a standard selection used for Draw actions; (either TSelectorDraw, TProofDraw or deriving from them). Bool_t ProcessCut(Long64_t ); This method is called before processing entry. It is the user's responsability to read; the corresponding entry in memory (may be just a partial read).; The function returns kTRUE if the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSelector.html:10441,load,loaded,10441,root/html602/TSelector.html,https://root.cern,https://root.cern/root/html602/TSelector.html,2,['load'],['loaded']
Performance," Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooObjCacheManager(RooAbsArg* owner = 0, Int_t maxSize = 10, Bool_t clearCacheOnServerRedirect = kTRUE); Constructor of object cache manager for given owner. If clearCacheOnServerRedirect is true; all cache elements will be cleared when a server redirect is intercepted by the cache manager.; This is the default strategy and should only be overridden when you really understand; what you're doing as properly implementing server redirect in cache elements can get very; complicated, especially if there are (cyclical) reference back to the owning object. RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); Copy constructor. ~RooObjCacheManager(); Destructor. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Intercept server redirect calls. If clearOnRedirect was set, sterilize; the cache (i.e. keep the structure but delete all contents). If not; forward serverRedirect to cache elements. void operModeHook(); Intercept changes to cache operation mode and forward to cache elements. void optimizeCacheMode(const RooArgSet& , RooArgSet& , RooLinkedList& ); Intercept calls to perform automatic optimization of cache mode operation.; Forward calls to existing cache elements and save configuration of; cache mode optimization so that it can be applied on new cache elements; upon insertion. void insertObjectHook(RooAbsCacheElement& ); Set owner link on all object inserted into cache.; Also if cache mode optimization was requested, apply; it now to cache element being inserted. void printCompactTreeHook(ostream& , const char* ); Add details on cache contents when printing in tree mode. void findConstantNodes(const RooArgSet& , RooArgSet& , RooLinkedList& ); If clearOnRedirect is false, forward constant term optimization calls to; cache elements. » Last changed: Mon Dec 7 13:48:35 2009 » Last generated: 2009-12-07 13:48; This page has been automatically ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooObjCacheManager.html:4495,cache,cache,4495,root/html526/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html526/RooObjCacheManager.html,1,['cache'],['cache']
Performance," Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooObjCacheManager(RooAbsArg* owner = 0, Int_t maxSize = 10, Bool_t clearCacheOnServerRedirect = kTRUE); Constructor of object cache manager for given owner. If clearCacheOnServerRedirect is true; all cache elements will be cleared when a server redirect is intercepted by the cache manager.; This is the default strategy and should only be overridden when you really understand; what you're doing as properly implementing server redirect in cache elements can get very; complicated, especially if there are (cyclical) reference back to the owning object. RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); Copy constructor. ~RooObjCacheManager(); Destructor. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Intercept server redirect calls. If clearOnRedirect was set, sterilize; the cache (i.e. keep the structure but delete all contents). If not; forward serverRedirect to cache elements. void operModeHook(); Intercept changes to cache operation mode and forward to cache elements. void optimizeCacheMode(const RooArgSet& , RooArgSet& , RooLinkedList& ); Intercept calls to perform automatic optimization of cache mode operation.; Forward calls to existing cache elements and save configuration of; cache mode optimization so that it can be applied on new cache elements; upon insertion. void insertObjectHook(RooAbsCacheElement& ); Set owner link on all object inserted into cache.; Also if cache mode optimization was requested, apply; it now to cache element being inserted. void printCompactTreeHook(ostream& , const char* ); Add details on cache contents when printing in tree mode. void findConstantNodes(const RooArgSet& , RooArgSet& , RooLinkedList& ); If clearOnRedirect is false, forward constant term optimization calls to; cache elements. » Last changed: Thu Sep 23 20:00:26 2010 » Last generated: 2010-09-23 20:00; This page has been automatically g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooObjCacheManager.html:4481,cache,cache,4481,root/html528/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html528/RooObjCacheManager.html,1,['cache'],['cache']
Performance," Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooObjCacheManager(RooAbsArg* owner = 0, Int_t maxSize = 10, Bool_t clearCacheOnServerRedirect = kTRUE); Constructor of object cache manager for given owner. If clearCacheOnServerRedirect is true; all cache elements will be cleared when a server redirect is intercepted by the cache manager.; This is the default strategy and should only be overridden when you really understand; what you're doing as properly implementing server redirect in cache elements can get very; complicated, especially if there are (cyclical) reference back to the owning object. RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); Copy constructor. ~RooObjCacheManager(); Destructor. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Intercept server redirect calls. If clearOnRedirect was set, sterilize; the cache (i.e. keep the structure but delete all contents). If not; forward serverRedirect to cache elements. void operModeHook(); Intercept changes to cache operation mode and forward to cache elements. void optimizeCacheMode(const RooArgSet& , RooArgSet& , RooLinkedList& ); Intercept calls to perform automatic optimization of cache mode operation.; Forward calls to existing cache elements and save configuration of; cache mode optimization so that it can be applied on new cache elements; upon insertion. void sterilize(). void insertObjectHook(RooAbsCacheElement& ); Set owner link on all object inserted into cache.; Also if cache mode optimization was requested, apply; it now to cache element being inserted. void printCompactTreeHook(ostream& , const char* ); Add details on cache contents when printing in tree mode. void findConstantNodes(const RooArgSet& , RooArgSet& , RooLinkedList& ); If clearOnRedirect is false, forward constant term optimization calls to; cache elements. void doClearObsList(Bool_t flag); { _clearObsList = flag ; }. Bool_t clearObsList(); { return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooObjCacheManager.html:4578,cache,cache,4578,root/html530/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html530/RooObjCacheManager.html,2,['cache'],['cache']
Performance," Inherited Members; Includes; Libraries. Function documentation; WrappedMultiTF1(TF1& f, unsigned int dim = 0). constructor from a function pointer to a TF1; If dim = 0 dimension is taken from TF1::GetNdim().; IN case of multi-dimensional function created using directly TF1 object the dimension; returned by TF1::GetNdim is always 1. The user must then pass the correct value of dim. virtual ~WrappedMultiTF1(). Destructor (no operations). Function pointer is not owned. { if (fOwnFunc && fFunc) delete fFunc; }. WrappedMultiTF1(const ROOT::Math::WrappedMultiTF1& rhs). Copy constructor. IMultiGenFunction * Clone() const; @name interface inherited from IFunction . Clone the wrapper but not the original function. unsigned int NDim() const; function dimension. const double * Parameters() const; @name interface inherited from IParamFunction ; get the parameter values (return values cached inside, those inside TF1 might be different). void SetParameters(const double* p); set parameter values (only the cached one in this class,leave unchanges those of TF1). unsigned int NPar() const; return number of parameters. std::string ParameterName(unsigned int i) const; return parameter name (from TF1). void ParameterGradient(const double* x, const double* par, double* grad) const; evaluate the derivative of the function with respect to the parameters. void SetDerivPrecision(double eps); precision value used for calculating the derivative step-size; h = eps * |x|. The default is 0.001, give a smaller in case function changes rapidly. double GetDerivPrecision(); get precision value used for calculating the derivative step-size. const TF1 * GetFunction() const; method to retrieve the internal function pointer. { return fFunc; }. void SetAndCopyFunction(const TF1* f = 0); method to set a new function pointer and copy it inside.; By calling this method the clas manages now the passed TF1 pointer. double DoEvalPar(const double* x, const double* p) const; evaluate function passing coordinates",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__WrappedMultiTF1.html:3081,cache,cached,3081,root/html534/ROOT__Math__WrappedMultiTF1.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__WrappedMultiTF1.html,2,['cache'],['cached']
Performance," Instead of having Cling interpret your script there is a way to have your scripts compiled, linked and dynamically loaded using the C++ compiler and linker. The advantage of this is that your scripts will run with the speed of compiled C++ and that you can use language constructs that are not fully supported by Cling. On the other hand, you cannot use any Cling shortcuts (see “C++ Extensions To Ease Scripting” above) and for small scripts, the overhead of the compile/link cycle might be larger than just executing the script in the interpreter.; ACLiC will build a dictionary and a shared library from your C++ script, using the compiler and the compiler options that were used to compile the ROOT executable. You do not have to write a Makefile remembering the correct compiler options, and you do not have to exit ROOT.; 7.4.1 Usage; Before you can compile your interpreted script you need to add include statements for the classes used in the script. Once you did that, you can build and load a shared library containing your script. To load it use the command .L and append the file name with a +.; root[] .L MyScript.C+; The + option generates the shared library and names it by taking the name of the file “filename” but replacing the dot before the extension by an underscore and by adding the shared library extension for the current platform. For example on most platforms, hsimple.cxx will generate hsimple_cxx.so.; The + command rebuild the library only if the script or any of the files it includes are newer than the library. When checking the timestamp, ACLiC generates a dependency file which name is the same as the library name, just replacing the ‘so’ extension by the extension ‘d’. For example on most platforms, hsimple.cxx will generate hsimple_cxx.d.; To ensure that the shared library is rebuilt you can use the ++ syntax:; root[] .L MyScript.C++; To build, load, and execute the function with the same name as the file you can use the .x command. This is the same as exe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:268979,load,load,268979,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['load'],['load']
Performance," Int_t GetDepth() const; Returns depth of screen (number of bit planes).; Equivalent to GetPlanes(). Colormap_t GetColormap() const; Returns handle to colormap. Might be usefull in some cases where direct X11 manipulation outside; of TVirtualX is needed, e.g. GL interface. Window_t GetDefaultRootWindow() const; Returns handle to the default root window created when calling; XOpenDisplay(). Atom_t InternAtom(const char* atom_name, Bool_t only_if_exist); Returns the atom identifier associated with the specified ""atom_name""; string. If ""only_if_exists"" is False, the atom is created if it does; not exist. If the atom name is not in the Host Portable Character; Encoding, the result is implementation dependent. Uppercase and; lowercase matter; the strings ""thing"", ""Thing"", and ""thinG"" all; designate different atoms. Window_t GetParent(Window_t id) const; Returns the parent of the window ""id"". FontStruct_t LoadQueryFont(const char* font_name); Provides the most common way for accessing a font: opens (loads) the; specified font and returns a pointer to the appropriate FontStruct_t; structure. If the font does not exist, it returns NULL. FontH_t GetFontHandle(FontStruct_t fs); Returns the font handle of the specified font structure ""fs"". void DeleteFont(FontStruct_t fs); Explicitely deletes the font structure ""fs"" obtained via LoadQueryFont(). GContext_t CreateGC(Drawable_t id, GCValues_t* gval); Creates a graphics context using the provided GCValues_t *gval structure.; The mask data member of gval specifies which components in the GC are; to be set using the information in the specified values structure.; It returns a graphics context handle GContext_t that can be used with any; destination drawable or O if the creation falls. void ChangeGC(GContext_t gc, GCValues_t* gval); Changes the components specified by the mask in gval for the specified GC. GContext_t gc - specifies the GC to be changed; GCValues_t gval - specifies the mask and the values to be set; (see also the GCV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualX.html:40159,load,loads,40159,root/html528/TVirtualX.html,https://root.cern,https://root.cern/root/html528/TVirtualX.html,6,['load'],['loads']
Performance," Int_t basketsize, Int_t splitlevel, Int_t btype); FIXME: What if the streamer info is optimized here?; -- Constructor when the branch object is not a TClonesArray nor an STL container. If splitlevel > 0 this branch in turn is split into sub-branches. TBranchElement(TBranch *parent, const char* bname, TStreamerInfo* sinfo, Int_t id, char* pointer, Int_t basketsize, Int_t splitlevel, Int_t btype); FIXME: What if the streamer info is optimized here?; -- Constructor when the branch object is not a TClonesArray nor an STL container. If splitlevel > 0 this branch in turn is split into sub-branches. void Init(TTree* tree, TBranch* parent, const char* name, TStreamerInfo* sinfo, Int_t id, char* pointer, Int_t basketsize = 32000, Int_t splitlevel = 0, Int_t btype = 0); -- Init when the branch object is not a TClonesArray nor an STL container. If splitlevel > 0 this branch in turn is split into sub-branches. TBranchElement(TTree *tree, const char* bname, TClonesArray* clones, Int_t basketsize, Int_t splitlevel, Int_t compress); FIXME: Bad, the streamer info will be optimized here.; -- Constructor when the branch object is a TClonesArray. If splitlevel > 0 this branch in turn is split into sub branches. TBranchElement(TBranch *parent, const char* bname, TClonesArray* clones, Int_t basketsize, Int_t splitlevel, Int_t compress); FIXME: Bad, the streamer info will be optimized here.; -- Constructor when the branch object is a TClonesArray. If splitlevel > 0 this branch in turn is split into sub branches. void Init(TTree *tree, TBranch *parent, const char* bname, TClonesArray* clones, Int_t basketsize, Int_t splitlevel, Int_t compress); -- Init when the branch object is a TClonesArray. If splitlevel > 0 this branch in turn is split into sub branches. TBranchElement(TTree *tree, const char* bname, TVirtualCollectionProxy* cont, Int_t basketsize, Int_t splitlevel, Int_t compress); -- Constructor when the branch object is an STL collection. If splitlevel > 0 this branch in turn is s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBranchElement.html:17239,optimiz,optimized,17239,root/html526/TBranchElement.html,https://root.cern,https://root.cern/root/html526/TBranchElement.html,1,['optimiz'],['optimized']
Performance," Int_t splitlevel = 99); Normal tree constructor. The tree is created in the current directory.; Use the various functions Branch below to add branches to this tree. If the first character of title is a ""/"", the function assumes a folder name.; In this case, it creates automatically branches following the folder hierarchy.; splitlevel may be used in this case to control the split level. ~TTree(); Destructor. TBuffer* GetTransientBuffer(Int_t size); Returns the transient buffer currently used by this TTree for reading/writing baskets. Int_t AddBranchToCache(const char* bname, Bool_t subbranches = kFALSE); Add branch with name bname to the Tree cache.; If bname=""*"" all branches are added to the cache.; if subbranches is true all the branches of the subbranches are; also put to the cache.; Returns 0 branch added or already included; -1 on error. Int_t AddBranchToCache(TBranch* branch, Bool_t subbranches = kFALSE); Add branch b to the Tree cache.; if subbranches is true all the branches of the subbranches are; also put to the cache.; Returns 0 branch added or already included; -1 on error. Int_t DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); Remove the branch with name 'bname' from the Tree cache.; If bname=""*"" all branches are removed from the cache.; if subbranches is true all the branches of the subbranches are; also removed from the cache.; Returns 0 branch dropped or not in cache; -1 on error. Int_t DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); Remove the branch b from the Tree cache.; if subbranches is true all the branches of the subbranches are; also removed from the cache.; Returns 0 branch dropped or not in cache; -1 on error. void AddClone(TTree* ); Add a cloned tree to our list of trees to be notified whenever we change; our branch addresses or when we are deleted. TFriendElement* AddFriend(const char* treename, const char* filename = """"); Add a TFriendElement to the list of friends. This function:; -opens a file if",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTree.html:38075,cache,cache,38075,root/html604/TTree.html,https://root.cern,https://root.cern/root/html604/TTree.html,1,['cache'],['cache']
Performance," Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooRealProxy_origModelOriginal resolution model; RooRealProxy_origPdfOriginal input PDF; RooRealProxy_origVarOriginal convolution variable; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooNumConvPdf.html:41795,cache,cache,41795,root/html530/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html530/RooNumConvPdf.html,1,['cache'],['cache']
Performance," Int_tTDirectoryFile::ReadTObject(TObject* obj, const char* keyname); virtual Int_tTFile::Recover(); virtual voidTDirectory::RecursiveRemove(TObject* obj); virtual TObject*TDirectory::Remove(TObject*); virtual Int_tTFile::ReOpen(Option_t* mode); voidTObject::ResetBit(UInt_t f); virtual voidResetErrno() const; virtual voidTDirectoryFile::rmdir(const char* name); virtual voidTDirectoryFile::Save(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual Int_tTDirectoryFile::SaveObjectAs(const TObject* obj, const char* filename = """", Option_t* option = """") const; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTDirectoryFile::SaveSelf(Bool_t force = kFALSE); virtual voidTFile::Seek(Long64_t offset, TFile::ERelativeTo pos = kBeg); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTDirectoryFile::SetBufferSize(Int_t bufsize); static Bool_tTFile::SetCacheFileDir(const char* cacheDir, Bool_t operateDisconnected = kTRUE, Bool_t forceCacheread = kFALSE); virtual voidTFile::SetCacheRead(TFileCacheRead* cache); virtual voidTFile::SetCacheWrite(TFileCacheWrite* cache); virtual voidTFile::SetCompressionAlgorithm(Int_t algorithm = 0); virtual voidTFile::SetCompressionLevel(Int_t level = 1); virtual voidTFile::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTFile::SetEND(Long64_t last); static voidTFile::SetFileBytesRead(Long64_t bytes = 0); static voidTFile::SetFileBytesWritten(Long64_t bytes = 0); static voidTFile::SetFileReadCalls(Int_t readcalls = 0); virtual voidTDirectoryFile::SetModified(); virtual voidTDirectory::SetMother(TObject* mother); virtual voidTDirectory::SetName(const char* newname); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTFile::SetOffset(Long64_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TDCacheFile.html:11848,cache,cacheDir,11848,root/html530/TDCacheFile.html,https://root.cern,https://root.cern/root/html530/TDCacheFile.html,2,['cache'],['cacheDir']
Performance, Int_tTFileCacheRead::fBNtot; Long64_t*TFileCacheRead::fBPos; Long64_t*TFileCacheRead::fBSeek; Int_t*TFileCacheRead::fBSeekIndex; Int_t*TFileCacheRead::fBSeekLen; Int_t*TFileCacheRead::fBSeekPos; Int_tTFileCacheRead::fBSeekSize; Long64_t*TFileCacheRead::fBSeekSort; Int_t*TFileCacheRead::fBSeekSortLen; TList*fBrNames! list of branch names in the cache; TObjArray*fBranches! List of branches to be stored in the cache; char*TFileCacheRead::fBuffer[fBufferSize] buffer of contiguous prefetched blocks; Int_tTFileCacheRead::fBufferLenCurrent buffer length (<= fBufferSize); Int_tTFileCacheRead::fBufferSizeAllocated size of fBuffer (at a given time); Int_tTFileCacheRead::fBufferSizeMinOriginal size of fBuffer; Long64_tTFileCacheRead::fBytesReadNumber of bytes read for this cache; Long64_tTFileCacheRead::fBytesReadExtraNumber of extra bytes (overhead) read by the readahead buffer; Bool_tTFileCacheRead::fEnablePrefetchingreading by prefetching asynchronously ; Bool_tfEnabled! cache enabled for cached reading; Long64_tfEntryCurrent! current lowest entry number in the cache; Long64_tfEntryMax! last entry in the cache; Long64_tfEntryMin! first entry in the cache; Long64_tfEntryNext! next entry number where cache must be filled; TFile*TFileCacheRead::fFilePointer to file; Int_tfFillTimes! how many times we can fill the current buffer; Bool_tfFirstBuffer! true if first buffer is used for prefetching; Long64_tfFirstEntry! save the value of the first entry; Bool_tfFirstTime! save the fact that we processes the first entry; Bool_tfIsLearning! true if cache is in learning mode; Bool_tfIsManual! true if cache is StopLearningPhase was used; Bool_tTFileCacheRead::fIsSortedTrue if fSeek array is sorted; Bool_tTFileCacheRead::fIsTransferredTrue when fBuffer contains something valid; Int_t*TFileCacheRead::fLen[fNb] Length of long buffers; Int_tfNReadMissNumber of blocks read and not found in the chache; Int_tfNReadOkNumber of blocks read and found in the cache; Int_tfNReadPrefNumber of blocks ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCache.html:18479,cache,cached,18479,root/html534/TTreeCache.html,https://root.cern,https://root.cern/root/html534/TTreeCache.html,1,['cache'],['cached']
Performance," Int_t ; label, . TEveTrackPropagator * ; prop = nullptr . ). Constructor from TParticle. ; Definition at line 68 of file TEveTrack.cxx. ◆ TEveTrack() [3/6]. TEveTrack::TEveTrack ; (; TEveMCTrack * ; t, . TEveTrackPropagator * ; prop = nullptr . ). Definition at line 100 of file TEveTrack.cxx. ◆ TEveTrack() [4/6]. TEveTrack::TEveTrack ; (; TEveRecTrack * ; t, . TEveTrackPropagator * ; prop = nullptr . ). Constructor from TEveRecTrack<float> reconstructed track. ; It is recommended to use constructor with TEveRecTrack<double> since TEveTrackPropagator operates with double type. ; Definition at line 163 of file TEveTrack.cxx. ◆ TEveTrack() [5/6]. TEveTrack::TEveTrack ; (; TEveRecTrackD * ; t, . TEveTrackPropagator * ; prop = nullptr . ). Constructor from TEveRecTrack<double> reconstructed track. ; Definition at line 134 of file TEveTrack.cxx. ◆ TEveTrack() [6/6]. TEveTrack::TEveTrack ; (; const TEveTrack & ; t). Copy constructor. ; Track parameters are copied but the extrapolation is not performed so you should still call MakeTrack() to do that. If points of 't' are locked, they are cloned. ; Definition at line 193 of file TEveTrack.cxx. ◆ ~TEveTrack(). TEveTrack::~TEveTrack ; (; ). override . Destructor. ; Definition at line 222 of file TEveTrack.cxx. Member Function Documentation. ◆ AddPathMark() [1/2]. void TEveTrack::AddPathMark ; (; const TEvePathMark & ; pm). inline . Definition at line 108 of file TEveTrack.h. ◆ AddPathMark() [2/2]. void TEveTrack::AddPathMark ; (; const TEvePathMarkD & ; pm). inline . Definition at line 107 of file TEveTrack.h. ◆ Class(). static TClass * TEveTrack::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TEveTrack::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TEveTrack::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 130 of file TEveTrack.h. ◆ ComputeBBox(). void TEveTrack::ComputeBBo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTrack.html:54821,perform,performed,54821,doc/master/classTEveTrack.html,https://root.cern,https://root.cern/doc/master/classTEveTrack.html,1,['perform'],['performed']
Performance," Int_t ReadBuffer (char *buf, Long64_t pos, Int_t len) override;  Read buffer at position pos if the request is in the list of prefetched blocks read from fBuffer. ;  ; virtual Int_t ReadBufferNormal (char *buf, Long64_t pos, Int_t len);  Old method ReadBuffer before the addition of the prefetch mechanism. ;  ; virtual Int_t ReadBufferPrefetch (char *buf, Long64_t pos, Int_t len);  Used to read a chunk from a block previously fetched. ;  ; virtual void ResetCache ();  This will simply clear the cache. ;  ; void ResetMissCache ();  Reset all the miss cache training. ;  ; void SetAutoCreated (bool val);  ; Int_t SetBufferSize (Long64_t buffersize) override;  Change the underlying buffer size of the cache. ;  ; virtual void SetEntryRange (Long64_t emin, Long64_t emax);  Set the minimum and maximum entry number to be processed this information helps to optimize the number of baskets to read when prefetching the branch buffers. ;  ; void SetFile (TFile *file, TFile::ECacheAction action=TFile::kDisconnect) override;  Change the file that is being cached. ;  ; virtual void SetLearnPrefill (EPrefillType type=kNoPrefill);  Set whether the learning period is started with a prefilling of the cache and which type of prefilling is used. ;  ; void SetOptimizeMisses (bool opt);  Start of methods for the miss cache. ;  ; void StartLearningPhase ();  The name should be enough to explain the method. ;  ; virtual void StopLearningPhase ();  This is the counterpart of StartLearningPhase() and can be used to stop the learning phase. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UpdateBranches (TTree *tree);  Update pointer to current Tree and recompute pointers to the branches in the cache. ;  ;  Public Member Functions inherited from TFileCacheRead;  TFileCacheRead ();  Default Constructor. ;  ;  TFileCacheRead (TFile *file, Int_t buffersize, TObject *tree=nullptr);  Create",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:15799,cache,cached,15799,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,1,['cache'],['cached']
Performance," Internal sub namespace; 470// back to ROOT namespace; 471 ; 472 TROOT *GetROOT() {; 473 return (*Internal::gGetROOT)();; 474 }; 475 ; 476 TString &GetMacroPath() {; 477 static TString macroPath;; 478 return macroPath;; 479 }; 480 ; 481 // clang-format off; 482 ////////////////////////////////////////////////////////////////////////////////; 483 /// Enables the global mutex to make ROOT thread safe/aware.; 484 ///; 485 /// The following becomes safe:; 486 /// - concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); 487 /// - concurrent usage of _different_ ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); 488 /// - concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; 489 /// - concurrent calls to the interpreter through gInterpreter; 490 /// - concurrent loading of ROOT plug-ins; 491 ///; 492 /// In addition, gDirectory, gFile and gPad become a thread-local variable.; 493 /// In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents.; 494 /// gFile and gPad default to nullptr, as it is for single-thread programs.; 495 ///; 496 /// The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different; 497 /// canvases from different threads (and analogous operations such as invoking `Draw` on a `TObject`) is not thread-safe.; 498 ///; 499 /// Note that there is no `DisableThreadSafety()`. ROOT's thread-safety features cannot be disabled once activated.; 500 // clang-format on; 501 void EnableThreadSafety(); 502 {; 503 static void (*sym)() = (void(*)())Internal::GetSymInLibImt(""ROOT_TThread_Initialize"");; 504 if (sym); 505 sym();; 506 }; 507 ; 508 ////////////////////////////////////////////////////////////////////////////////; 509 /// @p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:17377,concurren,concurrent,17377,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,6,"['concurren', 'load']","['concurrent', 'loading']"
Performance," KEYS linked list for each object. The list of keys is then saved on the file (via WriteKeys) as a single data record. For values of opt see TObject::Write(). The directory header info is rewritten on the directory header record. The linked list of FREE segments is written. The file header is written (bytes 1->fBEGIN). ; Reimplemented from TDirectoryFile.; Reimplemented in TSQLFile, TXMLFile, and TParallelMergingFile.; Definition at line 2436 of file TFile.cxx. ◆ WriteBuffer(). Bool_t TFile::WriteBuffer ; (; const char * ; buf, . Int_t ; len . ). virtual . Write a buffer to the file. ; This is the basic low level write operation. Returns kTRUE in case of failure. ; Reimplemented in TSQLFile, TXMLFile, TDCacheFile, TNetFile, TDavixFile, and TNetXNGFile.; Definition at line 2476 of file TFile.cxx. ◆ WriteBufferViaCache(). Int_t TFile::WriteBufferViaCache ; (; const char * ; buf, . Int_t ; len . ). protected . Write buffer via cache. ; Returns 0 if cache is not active, 1 in case write via cache was successful, 2 in case write via cache failed. ; Definition at line 2519 of file TFile.cxx. ◆ WriteFree(). void TFile::WriteFree ; (; ). virtual . Write FREE linked list on the file. ; The linked list of FREE segments (fFree) is written as a single data record. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2543 of file TFile.cxx. ◆ WriteHeader(). void TFile::WriteHeader ; (; ). virtual . Write File Header. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2615 of file TFile.cxx. ◆ WriteProcessID(). UShort_t TFile::WriteProcessID ; (; TProcessID * ; pid). virtual . Check if the ProcessID pidd is already in the file, if not, add it and return the index number in the local file list. ; Definition at line 3763 of file TFile.cxx. ◆ WriteStreamerInfo(). void TFile::WriteStreamerInfo ; (; ). virtual . Write the list of TStreamerInfo as a single object in this file The class Streamer description for all classes written to this file is saved. ; See class ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFile.html:101137,cache,cache,101137,doc/master/classTFile.html,https://root.cern,https://root.cern/doc/master/classTFile.html,3,['cache'],['cache']
Performance," Layer_t, DeepNet_t >;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected Member Functions; void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients);  Update the biases, given the current bias gradients. ;  ; void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, const std::vector< Matrix_t > &weightGradients);  Update the weights, given the current weight gradients. ;  . Protected Attributes; Scalar_t fBeta1;  The Beta1 constant used by the optimizer. ;  ; Scalar_t fBeta2;  The Beta2 constant used by the optimizer. ;  ; Scalar_t fEpsilon;  The Smoothing term used to avoid division by zero. ;  ; std::vector< std::vector< Matrix_t > > fFirstMomentBiases;  The decaying average of the first moment of the past bias gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fFirstMomentWeights;  The decaying average of the first moment of the past weight gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fSecondMomentBiases;  The decaying average of the second moment of the past bias gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fSecondMomentWeights;  The decaying average of the second moment of the past weight gradients associated with the deep net. ;  ;  Protected Attributes inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; DeepNet_t & fDeepNet;  The reference to the deep net. ;  ; size_t fGlobalStep;  The current global step count during training.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdam.html:2979,optimiz,optimizer,2979,doc/master/classTMVA_1_1DNN_1_1TAdam.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdam.html,1,['optimiz'],['optimizer']
Performance," List is owner if enum not on global scope (thus constants not; in TROOT::GetListOfGlobals). ~TEnum(); Destructor. void AddConstant(TEnumConstant* constant); Add a EnumConstant to the list of constants of the Enum Type. Bool_t IsValid(); Return true if this enum object is pointing to a currently; loaded enum. If a enum is unloaded after the TEnum; is created, the TEnum will be set to be invalid. Long_t Property() const; Get property description word. For meaning of bits see EProperty. void Update(TDictionary::DeclId_t id). TEnum * GetEnum(const std::type_info &ti, ESearchAction sa). TEnum * GetEnum(const char* enumName, TEnum::ESearchAction sa = kALoadAndInterpLookup); Static function to retrieve enumerator from the ROOT's typesystem.; It has no side effect, except when the load flag is true. In this case,; the load of the library containing the scope of the enumerator is attempted.; There are two top level code paths: the enumerator is scoped or isn't.; If it is not, a lookup in the list of global enums is performed.; If it is, two lookups are carried out for its scope: one in the list of; classes and one in the list of protoclasses. If a scope with the desired name; is found, the enum is searched. If the scope is not found, and the load flag is; true, the aforementioned two steps are performed again after an autoload attempt; with the name of the scope as key is tried out.; If the interpreter lookup flag is false, the ListOfEnums objects are not treated; as such, but rather as THashList objects. This prevents any flow of information; from the interpreter into the ROOT's typesystem: a snapshot of the typesystem; status is taken. TEnum(); {}. TEnum(const char* name, void* info, TClass* cls). TClass * GetClass() const. const TSeqCollection * GetConstants() const. const TEnumConstant * GetConstant(const char* name) const. DeclId_t GetDeclId() const. void SetClass(TClass* cl). const char* GetQualifiedName() const; { return fQualName.c_str(); }. » Author: Bianca-Cristin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEnum.html:8853,perform,performed,8853,root/html602/TEnum.html,https://root.cern,https://root.cern/root/html602/TEnum.html,2,['perform'],['performed']
Performance," Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Internal::TBranchCacheInfo Class Reference. . Definition at line 35 of file TBranchCacheInfo.h. Public Member Functions; bool AllUsed () const;  Return true if all the baskets that are marked loaded are also mark as used. ;  ; void GetUnused (std::vector< Int_t > &unused);  Return a set of unused basket, let's not re-read them. ;  ; bool HasBeenUsed (Int_t basketNumber) const;  Return true if the basket has been marked as 'used'. ;  ; bool IsInCache (Int_t basketNumber) const;  Return true if the basket is currently in the cache. ;  ; bool IsVetoed (Int_t basketNumber) const;  Return true if the basket is currently vetoed. ;  ; void Print (const char *owner, Long64_t *entries) const;  Print the info we have for the baskets. ;  ; void Reset ();  Reset all info. ;  ; void SetIsInCache (Int_t basketNumber);  Mark if the basket is currently in the cache. ;  ; void SetUsed (Int_t basketNumber);  Mark if the basket has been marked as 'used'. ;  ; void Veto (Int_t basketNumber);  Mark if the basket should be vetoed in the next round. ;  . Private Types; enum  EStates { kLoaded = 0; , kUsed = 1; , kVetoed = 2; , kSize = 3; };  . Private Member Functions; void SetState (Int_t basketNumber, EStates what);  Mark if the basket has been marked has the 'what' state. ;  ; bool TestState (Int_t basketNumber, EStates what) const;  Return true if the basket has been marked as having the 'what' state. ;  ; void UpdatePedestal (Int_t basketNumber);  Update the pedestal to be less or equal to basketNumber, shift the bits if needed. ;  . Private Attributes; Int_t fBasketPedestal {-1};  ; TBits fInfo;  . #include <TBranchCacheInfo.h>; Member Enumeration Documentation. ◆ EStates. enum ROOT::Internal::TBranchCacheInfo::EStates. private . EnumeratorkLoaded ; kUsed ; kVetoed ; kSize . Definition at line 37 of fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchCacheInfo.html:1140,cache,cache,1140,doc/master/classROOT_1_1Internal_1_1TBranchCacheInfo.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchCacheInfo.html,1,['cache'],['cache']
Performance," Long64_t cacheSize = 0;; 5413 if (fAutoFlush < 0) {; 5414 cacheSize = Long64_t(-cacheFactor * fAutoFlush);; 5415 } else if (fAutoFlush == 0) {; 5416 const auto medianClusterSize = GetMedianClusterSize();; 5417 if (medianClusterSize > 0); 5418 cacheSize = Long64_t(cacheFactor * 1.5 * medianClusterSize * GetZipBytes() / (fEntries + 1));; 5419 else; 5420 cacheSize = Long64_t(cacheFactor * 1.5 * 30000000); // use the default value of fAutoFlush; 5421 } else {; 5422 cacheSize = Long64_t(cacheFactor * 1.5 * fAutoFlush * GetZipBytes() / (fEntries + 1));; 5423 }; 5424 if (cacheSize >= (INT_MAX / 4)) {; 5425 cacheSize = INT_MAX / 4;; 5426 }; 5427 return cacheSize;; 5428 };; 5429 ; 5430 const char *stcs;; 5431 Double_t cacheFactor = 0.0;; 5432 if (!(stcs = gSystem->Getenv(""ROOT_TTREECACHE_SIZE"")) || !*stcs) {; 5433 cacheFactor = gEnv->GetValue(""TTreeCache.Size"", 1.0);; 5434 } else {; 5435 cacheFactor = TString(stcs).Atof();; 5436 }; 5437 ; 5438 if (cacheFactor < 0.0) {; 5439 // ignore negative factors; 5440 cacheFactor = 0.0;; 5441 }; 5442 ; 5443 Long64_t cacheSize = calculateCacheSize(cacheFactor);; 5444 ; 5445 if (cacheSize < 0) {; 5446 cacheSize = 0;; 5447 }; 5448 ; 5449 if (cacheSize == 0 && withDefault) {; 5450 cacheSize = calculateCacheSize(1.0);; 5451 }; 5452 ; 5453 return cacheSize;; 5454}; 5455 ; 5456////////////////////////////////////////////////////////////////////////////////; 5457/// Return an iterator over the cluster of baskets starting at firstentry.; 5458///; 5459/// This iterator is not yet supported for TChain object.; 5460/// ~~~ {.cpp}; 5461/// TTree::TClusterIterator clusterIter = tree->GetClusterIterator(entry);; 5462/// Long64_t clusterStart;; 5463/// while( (clusterStart = clusterIter()) < tree->GetEntries() ) {; 5464/// printf(""The cluster starts at %lld and ends at %lld (inclusive)\n"",clusterStart,clusterIter.GetNextEntry()-1);; 5465/// }; 5466/// ~~~; 5467 ; 5468TTree::TClusterIterator TTree::GetClusterIterator(Long64_t firstentry); 5469{; 5470 /",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:215539,cache,cacheFactor,215539,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['cache'],['cacheFactor']
Performance," Long64_t*TFileCacheRead::fSeek[fNseek] Position on file of buffers to be prefetched; Int_t*TFileCacheRead::fSeekIndex[fNseek] sorted index table of fSeek; Int_t*TFileCacheRead::fSeekLen[fNseek] Length of buffers to be prefetched; Int_t*TFileCacheRead::fSeekPos[fNseek] Position of sorted blocks in fBuffer; Int_tTFileCacheRead::fSeekSizeAllocated size of fSeek; Long64_t*TFileCacheRead::fSeekSort[fNseek] Position on file of buffers to be prefetched (sorted); Int_t*TFileCacheRead::fSeekSortLen[fNseek] Length of buffers to be prefetched (sorted); TTree*fTree! pointer to the current Tree; static Int_tfgLearnEntriesnumber of entries used for learning mode. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTreeCache(); Default Constructor. TTreeCache(TTree* tree, Int_t buffersize = 0); Constructor. ~TTreeCache(); destructor. (in general called by the TFile destructor). void AddBranch(TBranch* b, Bool_t subbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void AddBranch(const char* branch, Bool_t subbranches = kFALSE); Add a branch to the list of branches to be stored in the cache; this is to be used by user (thats why we pass the name of the branch).; It works in exactly the same way as TTree::SetBranchStatus so you; probably want to look over ther for details about the use of bname; with regular expresions.; The branches are taken with respect to the Owner of this TTreeCache; (i.e. the original Tree); NB: if bname=""*"" all branches are put in the cache and the learning phase stopped. void DropBranch(TBranch* b, Bool_t subbranches = kFALSE); Remove a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void DropBranch(const char* branch, Bool_t subbranches = kFALSE); Remove a branch to the list of branches to be stored in the cache; this is to be used by user (thats why we pass the name of the branch).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTreeCache.html:19481,cache,cache,19481,root/html532/TTreeCache.html,https://root.cern,https://root.cern/root/html532/TTreeCache.html,1,['cache'],['cache']
Performance," Long64_t*TFileCacheRead::fSeek[fNseek] Position on file of buffers to be prefetched; Int_t*TFileCacheRead::fSeekIndex[fNseek] sorted index table of fSeek; Int_t*TFileCacheRead::fSeekLen[fNseek] Length of buffers to be prefetched; Int_t*TFileCacheRead::fSeekPos[fNseek] Position of sorted blocks in fBuffer; Int_tTFileCacheRead::fSeekSizeAllocated size of fSeek; Long64_t*TFileCacheRead::fSeekSort[fNseek] Position on file of buffers to be prefetched (sorted); Int_t*TFileCacheRead::fSeekSortLen[fNseek] Length of buffers to be prefetched (sorted); TTree*fTree! pointer to the current Tree; static Int_tfgLearnEntriesnumber of entries used for learning mode. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTreeCache(); Default Constructor. TTreeCache(TTree* tree, Int_t buffersize = 0); Constructor. ~TTreeCache(); destructor. (in general called by the TFile destructor). void AddBranch(TBranch* b, Bool_t subgbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void AddBranch(const char* branch, Bool_t subbranches = kFALSE); Add a branch to the list of branches to be stored in the cache; this is to be used by user (thats why we pass the name of the branch).; It works in exactly the same way as TTree::SetBranchStatus so you; probably want to look over ther for details about the use of bname; with regular expressions.; The branches are taken with respect to the Owner of this TTreeCache; (i.e. the original Tree); NB: if bname=""*"" all branches are put in the cache and the learning phase stopped. void DropBranch(TBranch* b, Bool_t subbranches = kFALSE); Remove a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void DropBranch(const char* branch, Bool_t subbranches = kFALSE); Remove a branch to the list of branches to be stored in the cache; this is to be used by user (thats why we pass the name of the branch)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCache.html:21480,cache,cache,21480,root/html534/TTreeCache.html,https://root.cern,https://root.cern/root/html534/TTreeCache.html,1,['cache'],['cache']
Performance," Long64_t ; n . ). finalvirtual . Write array of Char_t to buffer. ; Implements TBuffer.; Definition at line 3336 of file TBufferJSON.cxx. ◆ WriteFloat(). void TBufferJSON::WriteFloat ; (; Float_t ; f). finalvirtual . Writes Float_t value to buffer. ; Implements TBuffer.; Definition at line 3828 of file TBufferJSON.cxx. ◆ WriteInt(). void TBufferJSON::WriteInt ; (; Int_t ; i). finalvirtual . Writes Int_t value to buffer. ; Implements TBuffer.; Definition at line 3774 of file TBufferJSON.cxx. ◆ WriteLong(). void TBufferJSON::WriteLong ; (; Long_t ; l). finalvirtual . Writes Long_t value to buffer. ; Implements TBuffer.; Definition at line 3792 of file TBufferJSON.cxx. ◆ WriteLong64(). void TBufferJSON::WriteLong64 ; (; Long64_t ; l). finalvirtual . Writes Long64_t value to buffer. ; Implements TBuffer.; Definition at line 3810 of file TBufferJSON.cxx. ◆ WriteObjectClass(). void TBufferJSON::WriteObjectClass ; (; const void * ; actualObjStart, . const TClass * ; actualClass, . Bool_t ; cacheReuse . ). finalprotectedvirtual . Write object to buffer. Only used from TBuffer. ; Implements TBufferIO.; Definition at line 2513 of file TBufferJSON.cxx. ◆ WriteShort(). void TBufferJSON::WriteShort ; (; Short_t ; s). finalvirtual . Writes Short_t value to buffer. ; Implements TBuffer.; Definition at line 3756 of file TBufferJSON.cxx. ◆ WriteStdString() [1/3]. void TBufferJSON::WriteStdString ; (; const std::string * ; s). finalvirtual . Writes a std::string. ; Implements TBuffer.; Definition at line 3866 of file TBufferJSON.cxx. ◆ WriteStdString() [2/3]. virtual void TBuffer::WriteStdString ; (; const std::string * ; s). virtual . Implements TBuffer. ◆ WriteStdString() [3/3]. virtual void TBuffer::WriteStdString ; (; std::string & ; s). inlinevirtual . Reimplemented from TBuffer.; Definition at line 312 of file TBuffer.h. ◆ WriteTString(). void TBufferJSON::WriteTString ; (; const TString & ; s). finalvirtual . Writes a TString. ; Implements TBuffer.; Definition at line 3856 of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferJSON.html:97968,cache,cacheReuse,97968,doc/master/classTBufferJSON.html,https://root.cern,https://root.cern/doc/master/classTBufferJSON.html,1,['cache'],['cacheReuse']
Performance, LorentzVector operator * ( const Scalar & a) const {; 469 LorentzVector tmp(*this);; 470 tmp *= a;; 471 return tmp;; 472 }; 473 ; 474 /**; 475 Divide a LorentzVector by a scalar quantity; 476 \param a scalar quantity of type a; 477 \return a new mathcoreLorentzVector q = v / a same type as v; 478 */; 479 LorentzVector<CoordSystem> operator / ( const Scalar & a) const {; 480 LorentzVector<CoordSystem> tmp(*this);; 481 tmp /= a;; 482 return tmp;; 483 }; 484 ; 485 /**; 486 Negative of a LorentzVector (q = - v ); 487 \return a new LorentzVector with opposite direction and time; 488 */; 489 LorentzVector operator - () const {; 490 //LorentzVector<CoordinateType> v(*this);; 491 //v.Negate();; 492 return operator*( Scalar(-1) );; 493 }; 494 LorentzVector operator + () const {; 495 return *this;; 496 }; 497 ; 498 // ---- Relativistic Properties ----; 499 ; 500 /**; 501 Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]; 502 */; 503 Scalar Rapidity() const {; 504 // TODO - It would be good to check that E > Pz and use the Throw(); 505 // mechanism or at least load a NAN if not.; 506 // We should then move the code to a .cpp file.; 507 const Scalar ee = E();; 508 const Scalar ppz = Pz();; 509 using std::log;; 510 return Scalar(0.5) * log((ee + ppz) / (ee - ppz));; 511 }; 512 ; 513 /**; 514 Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]; 515 */; 516 Scalar ColinearRapidity() const {; 517 // TODO - It would be good to check that E > P and use the Throw(); 518 // mechanism or at least load a NAN if not.; 519 const Scalar ee = E();; 520 const Scalar pp = P();; 521 using std::log;; 522 return Scalar(0.5) * log((ee + pp) / (ee - pp));; 523 }; 524 ; 525 /**; 526 Determine if momentum-energy can represent a physical massive particle; 527 */; 528 bool isTimelike( ) const {; 529 Scalar ee = E(); Scalar pp = P(); return ee*ee > pp*pp;; 530 }; 531 ; 532 /**; 533 Determine if momentum-energy can represent a massless particle; 534 */; 535 bool isLightlike( Sca,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html:16297,load,load,16297,doc/master/GenVector_2LorentzVector_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html,1,['load'],['load']
Performance," Loss Function ;  CAbsoluteDeviationLossFunctionBDTAbsolute Deviation BDT Loss Function ;  CAbsValue;  CBDTEventWrapper;  CBinarySearchTreeA simple Binary search tree including a volume search method ;  CBinarySearchTreeNodeNode for the BinarySearch or Decision Trees ;  CBinaryTreeBase class for BinarySearch and Decision Trees ;  CCCPrunerA helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) ;  ►CCCTreeWrapper;  CCCTreeNode;  CClassifierFactoryThis is the MVA factory ;  CClassInfoClass that contains all the information of a class ;  Ccompose_binary_t;  Ccompose_unary_t;  ►CConfigSingleton class for global configuration settings used by TMVA ;  CIONames;  CVariablePlotting;  CConfigurable;  CConvergenceTestCheck for convergence ;  CCostComplexityPruneToolA class to prune a decision tree using the Cost Complexity method ;  CCrossEntropyImplementation of the CrossEntropy as separation criterion ;  CCrossValidationClass to perform cross validation, splitting the dataloader into folds ;  CCrossValidationFoldResult;  CCrossValidationResultClass to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation ;  CCvSplit;  CCvSplitKFolds;  CCvSplitKFoldsExpr;  CDataInputHandlerClass that contains all the data information ;  CDataLoader;  CDataSetClass that contains all the data information ;  ►CDataSetFactoryClass that contains all the data information ;  CEventStats;  CDataSetInfoClass that contains all the data information ;  CDataSetManagerClass that contains all the data information ;  CDecisionTreeImplementation of a Decision Tree ;  CDecisionTreeNode;  CDeleteFunctor_t;  CDTNodeTrainingInfo;  CEnvelopeAbstract base class for all high level ml algorithms, you can book ml methods like BDT, MLP ;  CEvent;  CExpectedErrorPruneToolA helper class to prune a decision tree using the expected error (C4.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:83701,perform,perform,83701,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,2,['perform'],['perform']
Performance," Maximum size; vector<RooNormSetCache>_nsetCache! Normalization/Integration set manager; vector<vector<double,allocator<double> >*>_object! Payload; RooAbsArg*RooAbsCache::_ownerPointer to owning RooAbsArg; Int_t_size! Actual use; Bool_t_wired! In wired mode, there is a single payload which is returned always. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; T* getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); Getter function without integration set. return getObj(nset,0,sterileIndex,isetRangeName). Int_t setObj(const RooArgSet* nset, vector<double,allocator<double> >* obj, const TNamed* isetRangeName = 0); Setter function without integration set. return setObj(const RooArgSet* nset, const RooArgSet* iset, vector<double,allocator<double> >* obj, const TNamed* isetRangeName = 0). T* getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx, const char* isetRangeName). void reset(). void sterilize(). Int_t lastIndex() const; Return index of slot used in last get or set operation. Int_t cacheSize() const; Return size of cache. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Interface function to intercept server redirects. void operModeHook(); Interface function to intercept cache operation mode changes. void printCompactTreeHook(ostream& , const char* ); Interface function to cache add contents to output in tree printing mode. T* getObjByIndex(Int_t index) const. const RooNameSet* nameSet1ByIndex(Int_t index) const. const RooNameSet* nameSet2ByIndex(Int_t index) const. void insertObjectHook(vector<double,allocator<double> >& ); Interface function to perform post-insert operations on cached object. void wireCache(). » Last changed: Sat Jun 20 16:42:23 2015 » Last generated: 2015-06-20 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCacheManager_vector_double___.html:4389,cache,cacheSize,4389,root/html534/RooCacheManager_vector_double___.html,https://root.cern,https://root.cern/root/html534/RooCacheManager_vector_double___.html,6,"['cache', 'perform']","['cache', 'cacheSize', 'cached', 'perform']"
Performance," Member Function Documentation. ◆ actualObservables(). virtual RooFit::OwningPtr< RooArgSet > RooAbsCachedReal::actualObservables ; (; const RooArgSet & ; nset); const. protectedpure virtual . Implemented in RooCachedReal, and RooNumRunningInt. ◆ actualParameters(). virtual RooFit::OwningPtr< RooArgSet > RooAbsCachedReal::actualParameters ; (; const RooArgSet & ; nset); const. protectedpure virtual . Implemented in RooCachedReal, and RooNumRunningInt. ◆ analyticalIntegralWN(). double RooAbsCachedReal::analyticalIntegralWN ; (; Int_t ; code, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Forward call to implementation in relevant RooHistFunc instance. ; Reimplemented from RooAbsReal.; Definition at line 320 of file RooAbsCachedReal.cxx. ◆ binningName(). virtual const char * RooAbsCachedReal::binningName ; (; ); const. inlineprotectedvirtual . Reimplemented in RooNumRunningInt.; Definition at line 96 of file RooAbsCachedReal.h. ◆ cacheNameSuffix(). TString RooAbsCachedReal::cacheNameSuffix ; (; const RooArgSet & ; nset); const. protected . Construct unique suffix name for cache p.d.f object. ; Definition at line 225 of file RooAbsCachedReal.cxx. ◆ Class(). static TClass * RooAbsCachedReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsCachedReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsCachedReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 120 of file RooAbsCachedReal.h. ◆ createCache(). RooAbsCachedReal::FuncCacheElem * RooAbsCachedReal::createCache ; (; const RooArgSet * ; nset); const. protectedvirtual . Interface function to create an internal cache object that represent each cached function configuration. ; This interface allows to create and return a class derived from RooAbsCachedReal::FuncCacheElem so that a derived class fillCacheObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCachedReal.html:63822,cache,cacheNameSuffix,63822,doc/master/classRooAbsCachedReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsCachedReal.html,1,['cache'],['cacheNameSuffix']
Performance," Method can make proper use of independent; transformations of signal and background; fNbinsMVAPdf = 50 Number of bins used to create a PDF of MVA; fNsmoothMVAPdf = 2 Number of times a histogram is smoothed before creating the PDF; fHasMVAPdfs create PDFs for the MVA outputs; V for Verbose output (!V) for non verbos; H for Help message. void ProcessBaseOptions(); the option string is decoded, for availabel options see ""DeclareOptions"". void CreateVariableTransforms(const TString& trafoDefinition, TMVA::DataSetInfo& dataInfo, TMVA::TransformationHandler& transformationHandler, TMVA::MsgLogger& log); create variable transformations. void DeclareCompatibilityOptions(); options that are used ONLY for the READER to ensure backward compatibility; they are hence without any effect (the reader is only reading the training; options that HAD been used at the training of the .xml weightfile at hand. std::map<TString,Double_t> OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); call the Optimzier with the set of paremeters and ranges that; are meant to be tuned. void SetTuneParameters(map<TString,Double_t> tuneParameters); set the tuning parameters accoding to the argument; This is just a dummy .. have a look at the MethodBDT how you could; perhaps implment the same thing for the other Classifiers.. void TrainMethod(). void GetRegressionDeviation(UInt_t tgtNum, TMVA::Types::ETreeType type, Double_t& stddev, Double_t& stddev90Percent) const. void AddRegressionOutput(TMVA::Types::ETreeType type); prepare tree branch with the method's discriminating variable. void AddMulticlassOutput(TMVA::Types::ETreeType type); prepare tree branch with the method's discriminating variable. void NoErrorCalc(Double_t *const err, Double_t *const errUpper). Double_t GetMvaValue(const TMVA::Event *const ev, Double_t* err = 0, Double_t* errUpper = 0). Bool_t IsSignalLike(); uses a pre-set cut on the MVA output (SetSignalReferenceCut and SetSignalReferenceCutOrientation",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodBase.html:22266,tune,tuned,22266,root/html534/TMVA__MethodBase.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodBase.html,1,['tune'],['tuned']
Performance," Method can make proper use of independent; transformations of signal and background; fNbinsMVAPdf = 50 Number of bins used to create a PDF of MVA; fNsmoothMVAPdf = 2 Number of times a histogram is smoothed before creating the PDF; fHasMVAPdfs create PDFs for the MVA outputs; V for Verbose output (!V) for non verbos; H for Help message. void ProcessBaseOptions(); the option string is decoded, for availabel options see ""DeclareOptions"". void CreateVariableTransforms(const TString& trafoDefinition, TMVA::DataSetInfo& dataInfo, TMVA::TransformationHandler& transformationHandler, TMVA::MsgLogger& log); create variable transformations. void DeclareCompatibilityOptions(); options that are used ONLY for the READER to ensure backward compatibility; they are hence without any effect (the reader is only reading the training; options that HAD been used at the training of the .xml weightfile at hand. std::map<TString,Double_t> OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); call the Optimzier with the set of paremeters and ranges that; are meant to be tuned. void SetTuneParameters(map<TString,Double_t> tuneParameters); set the tuning parameters accoding to the argument; This is just a dummy .. have a look at the MethodBDT how you could; perhaps implment the same thing for the other Classifiers.. void TrainMethod(). void GetRegressionDeviation(UInt_t tgtNum, TMVA::Types::ETreeType type, Double_t& stddev, Double_t& stddev90Percent) const. void AddRegressionOutput(TMVA::Types::ETreeType type); prepare tree branch with the method's discriminating variable. void AddMulticlassOutput(TMVA::Types::ETreeType type); prepare tree branch with the method's discriminating variable. void NoErrorCalc(Double_t*const err, Double_t*const errUpper). Double_t GetMvaValue(const TMVA::Event*const ev, Double_t* err = 0, Double_t* errUpper = 0). Bool_t IsSignalLike(); uses a pre-set cut on the MVA output (SetSignalReferenceCut and SetSignalReferenceCutOrientation); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodBase.html:23779,tune,tuned,23779,root/html602/TMVA__MethodBase.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodBase.html,2,['tune'],['tuned']
Performance, MethodCuts.h. ◆ fCutRangeMax. Double_t* TMVA::MethodCuts::fCutRangeMax. private . maximum of allowed cut range ; Definition at line 176 of file MethodCuts.h. ◆ fCutRangeMin. Double_t* TMVA::MethodCuts::fCutRangeMin. private . minimum of allowed cut range ; Definition at line 175 of file MethodCuts.h. ◆ fEffBvsSLocal. TH1* TMVA::MethodCuts::fEffBvsSLocal. private . intermediate eff. background versus eff signal histo ; Definition at line 202 of file MethodCuts.h. ◆ fEffMethod. EEffMethod TMVA::MethodCuts::fEffMethod. private . chosen efficiency calculation method ; Definition at line 170 of file MethodCuts.h. ◆ fEffMethodS. TString TMVA::MethodCuts::fEffMethodS. private . chosen efficiency calculation method (string) ; Definition at line 169 of file MethodCuts.h. ◆ fEffRef. Double_t TMVA::MethodCuts::fEffRef. private . reference efficiency ; Definition at line 192 of file MethodCuts.h. ◆ fEffSMax. Double_t TMVA::MethodCuts::fEffSMax. private . used to test optimized signal efficiency ; Definition at line 174 of file MethodCuts.h. ◆ fEffSMin. Double_t TMVA::MethodCuts::fEffSMin. private . used to test optimized signal efficiency ; Definition at line 173 of file MethodCuts.h. ◆ fFitMethod. EFitMethodType TMVA::MethodCuts::fFitMethod. private . chosen fit method ; Definition at line 168 of file MethodCuts.h. ◆ fFitMethodS. TString TMVA::MethodCuts::fFitMethodS. private . chosen fit method (string) ; Definition at line 167 of file MethodCuts.h. ◆ fFitParams. std::vector<EFitParameters>* TMVA::MethodCuts::fFitParams. private . vector for series of fit methods ; Definition at line 171 of file MethodCuts.h. ◆ fgMaxAbsCutVal. const Double_t TMVA::MethodCuts::fgMaxAbsCutVal = 1.0e30. static . Definition at line 130 of file MethodCuts.h. ◆ fMeanB. std::vector<Double_t>* TMVA::MethodCuts::fMeanB. private . means of variables (background) ; Definition at line 198 of file MethodCuts.h. ◆ fMeanS. std::vector<Double_t>* TMVA::MethodCuts::fMeanS. private . means of variables (signa,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodCuts.html:49825,optimiz,optimized,49825,doc/master/classTMVA_1_1MethodCuts.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCuts.html,1,['optimiz'],['optimized']
Performance," MethodInfo_Next(MethodInfo_t *minfo) const finalDefinition TCling.cxx:9083; TCling::SetAutoLoadCallBackvoid * SetAutoLoadCallBack(void *cb) finalDefinition TCling.h:199; TCling::ClassInfo_ClassPropertyLong_t ClassInfo_ClassProperty(ClassInfo_t *info) const finalDefinition TCling.cxx:8176; TCling::MethodInfo_Deletevoid MethodInfo_Delete(MethodInfo_t *minfo) const finalInterface to cling function.Definition TCling.cxx:9002; TCling::fIsShuttingDownbool fIsShuttingDownDefinition TCling.h:187; TCling::MethodArgInfo_Deletevoid MethodArgInfo_Delete(MethodArgInfo_t *marginfo) const finalDefinition TCling.cxx:9241; TCling::DataMemberInfo_FactoryDataMemberInfo_t * DataMemberInfo_Factory(ClassInfo_t *clinfo, TDictionary::EMemberSelection selection) const finalDefinition TCling.cxx:8599; TCling::ClassInfo_Destructvoid ClassInfo_Destruct(ClassInfo_t *info, void *arena) const finalDefinition TCling.cxx:8207; TCling::GetClassTClass * GetClass(const std::type_info &typeinfo, Bool_t load) const finalDemangle the name (from the typeinfo) and then request the class via the usual name based interface (...Definition TCling.cxx:6110; TCling::UnloadAllSharedLibraryMapsInt_t UnloadAllSharedLibraryMaps() finalUnload the library map entries coming from all the loaded shared libraries.Definition TCling.cxx:5998; TCling::ClassInfo_Initvoid ClassInfo_Init(ClassInfo_t *info, const char *funcname) const finalDefinition TCling.cxx:8269; TCling::GetModTClassesstd::set< TClass * > & GetModTClasses()Definition TCling.h:579; TCling::BaseClassInfo_ClassInfoClassInfo_t * BaseClassInfo_ClassInfo(BaseClassInfo_t *) const finalDefinition TCling.cxx:8537; TCling::fClingCallbacksTClingCallbacks * fClingCallbacksDefinition TCling.h:139; TCling::CallFunc_ExecInt64Long64_t CallFunc_ExecInt64(CallFunc_t *func, void *address) const finalDefinition TCling.cxx:7893; TCling::ClassInfo_PropertyLong_t ClassInfo_Property(ClassInfo_t *info) const finalDefinition TCling.cxx:8392; TCling::ClassInfo_GetBaseOffsetLongptr_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8h_source.html:65740,load,load,65740,doc/master/TCling_8h_source.html,https://root.cern,https://root.cern/doc/master/TCling_8h_source.html,1,['load'],['load']
Performance," N(1/0) is the number of data points with effCat=1 and effCat=0 as function of the frames variable. ;  ; virtual void resetCache ();  Internal method – Remove cached function values. ;  ; virtual void setArgStatus (const RooArgSet &set, bool active);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from RooDirItem; void appendToDir (TObject *obj, bool forceMemoryResident=false);  Append object to directory. ;  ; void removeFromDir (TObject *obj);  Remove object from directory it was added to. ;  . Protected Attributes; Int_t _arrSize {0};  ; std::vector< std::vector< double > > _binbounds;  ! list of bin bounds per dimension ;  ; double * _binv {nullptr};  [_arrSize] Bin volume array ;  ; double _cache_sum {0.};  ! Cache for sum of entries ; ;  ; Int_t _cache_sum_valid {kInvalid};  ! Is cache sum valid? Needs to be Int_t instead of CacheSumState_t for subclasses. ;  ; ULong64_t _curIndex {std::numeric_limits<ULong64_t>::max()};  Current index. ;  ; double * _errHi {nullptr};  [_arrSize] High-side error on weight array ;  ; double * _errLo {nullptr};  [_arrSize] Low-side error on weight array ;  ; std::vector< Int_t > _idxMult;  ; std::vector< std::unique_ptr< const RooAbsBinning > > _lvbins;  ! List of used binnings associated with lvalues ;  ; std::vector< RooAbsLValue * > _lvvars;  ! List of observables casted as RooAbsLValue ;  ; std::unordered_map< int, std::vector< double > > _pbinvCache;  ! Cache for arrays of partial bin volumes ;  ; double * _sumw2 {nullptr};  [_arrSize] Sum of weights^2 ;  ; double * _wgt {nullptr};  [_arrSize] Weight array ;  ;  Protected Attributes inherited from RooAbsData; RooArgSet _cachedVars;  ! External variables cached with this data set ;  ; std::unique_ptr< RooAbsDataStore > _dstore;  Data storage implementation. ;  ; std::unique_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataHist.html:38528,cache,cache,38528,doc/master/classRooDataHist.html,https://root.cern,https://root.cern/doc/master/classRooDataHist.html,1,['cache'],['cache']
Performance," N-space to 1-dim array jump table,; and fill the internal tree with all bin center coordinates. void checkBinBounds() const. RooDataHist(const RooDataHist& other, const char* newname = 0); Copy constructor. RooDataHist(const char* name, const char* title, RooDataHist* h, const RooArgSet& varSubset, const RooFormulaVar* cutVar, const char* cutRange, Int_t nStart, Int_t nStop, Bool_t copyCache); Constructor of a data hist from (part of) an existing data hist. The dimensions; of the data set are defined by the 'vars' RooArgSet, which can be identical; to 'dset' dimensions, or a subset thereof. Reduced dimensions will be projected; in the output data hist. The optional 'cutVar' formula variable can used to; select the subset of bins to be copied. For most uses the RooAbsData::reduce() wrapper function, which uses this constructor,; is the most convenient way to create a subset of an existing data. RooAbsData* cacheClone(const RooAbsArg* newCacheOwner, const RooArgSet* newCacheVars, const char* newName = 0); Construct a clone of this dataset that contains only the cached variables. RooAbsData* reduceEng(const RooArgSet& varSubset, const RooFormulaVar* cutVar, const char* cutRange = 0, Int_t nStart = 0, Int_t nStop = 2000000000, Bool_t copyCache = kTRUE); Implementation of RooAbsData virtual method that drives the RooAbsData::reduce() methods. ~RooDataHist(); Destructor. Int_t getIndex(const RooArgSet& coord, Bool_t fast = kFALSE). Int_t calcTreeIndex() const; Calculate the index for the weights array corresponding to; to the bin enclosing the current coordinates of the internal argset. void dump2(); Debug stuff, should go... RooPlot * plotOn(RooPlot* frame, RooAbsData::PlotOpt o) const; Back end function to plotting functionality. Plot RooDataHist on given; frame in mode specified by plot options 'o'. The main purpose of; this function is to match the specified binning on 'o' to the; internal binning of the plot observable in this RooDataHist. Double_t weightSquared() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooDataHist.html:27830,cache,cacheClone,27830,root/html534/RooDataHist.html,https://root.cern,https://root.cern/root/html534/RooDataHist.html,6,['cache'],"['cacheClone', 'cached']"
Performance," NAME Volume name; SHAPE Volume type; NMED Tracking medium number; NPAR Number of shape parameters; UPAR Vector containing shape parameters. void SetAllIndex(); Assigns uid's for all materials,media and matrices. void ClearAttributes(); Reset all attributes to default ones. Default attributes for visualization; are those defined before closing the geometry. void CloseGeometry(Option_t* option = ""d""); Closing geometry implies checking the geometry validity, fixing shapes; with negative parameters (run-time shapes)building the cache manager,; voxelizing all volumes, counting the total number of physical nodes and; registring the manager class to the browser. void ClearOverlaps(); Clear the list of overlaps. void ClearShape(const TGeoShape* shape); Remove a shape from the list of shapes. void CleanGarbage(); Clean temporary volumes and shapes from garbage collection. void CdNode(Int_t nodeid); Change current path to point to the node having this id.; Node id has to be in range : 0 to fNNodes-1 (no check for performance reasons). Int_t GetCurrentNodeId() const; Get the unique ID of the current node. void CdTop(); Make top level node the current node. Updates the cache accordingly.; Determine the overlapping state of current node. void CdUp(); Go one level up in geometry. Updates cache accordingly.; Determine the overlapping state of current node. void CdDown(Int_t index); Make a daughter of current node current. Can be called only with a valid; daughter index (no check). Updates cache accordingly. void CdNext(); Do a cd to the node found next by FindNextBoundary. Bool_t cd(const char* path = """"); Browse the tree of nodes starting from fTopNode according to pathname.; Changes the path accordingly. Bool_t CheckPath(const char* path) const; Check if a geometry path is valid without changing the state of the current navigator. void ConvertReflections(); Convert all reflections in geometry to normal rotations + reflected shapes. Int_t CountNodes(const TGeoVolume* vol = 0, Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoManager.html:44157,perform,performance,44157,root/html528/TGeoManager.html,https://root.cern,https://root.cern/root/html528/TGeoManager.html,3,['perform'],['performance']
Performance," NAME Volume name; SHAPE Volume type; NMED Tracking medium number; NPAR Number of shape parameters; UPAR Vector containing shape parameters. void SetAllIndex(); Assigns uid's for all materials,media and matrices. void ClearAttributes(); Reset all attributes to default ones. Default attributes for visualization; are those defined before closing the geometry. void CloseGeometry(Option_t* option = ""d""); Closing geometry implies checking the geometry validity, fixing shapes; with negative parameters (run-time shapes)building the cache manager,; voxelizing all volumes, counting the total number of physical nodes and; registring the manager class to the browser. void ClearOverlaps(); Clear the list of overlaps. void ClearShape(const TGeoShape* shape); Remove a shape from the list of shapes. void CleanGarbage(); Clean temporary volumes and shapes from garbage collection. void CdNode(Int_t nodeid); Change current path to point to the node having this id.; Node id has to be in range : 0 to fNNodes-1 (no check for performance reasons). Int_t GetCurrentNodeId() const; Get the unique ID of the current node. void CdTop(); Make top level node the current node. Updates the cache accordingly.; Determine the overlapping state of current node. void CdUp(); Go one level up in geometry. Updates cache accordingly.; Determine the overlapping state of current node. void CdDown(Int_t index); Make a daughter of current node current. Can be called only with a valid; daughter index (no check). Updates cache accordingly. void CdNext(); Do a cd to the node found next by FindNextBoundary. Bool_t cd(const char* path = """"); Browse the tree of nodes starting from fTopNode according to pathname.; Changes the path accordingly. Bool_t CheckPath(const char* path) const; Check if a geometry path is valid without changing the state of the current navigator. void ConvertReflections(); Convert all reflections in geometry to normal rotations + reflected shapes. void CountLevels(); Count maximum number of nod",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoManager.html:46503,perform,performance,46503,root/html534/TGeoManager.html,https://root.cern,https://root.cern/root/html534/TGeoManager.html,3,['perform'],['performance']
Performance," No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TProofLite Class ReferencePROOF » PROOF kernel Libraries. ; This class starts a PROOF session on the local machine: no daemons, client and master merged, communications via UNIX-like sockets. ; By default the number of workers started is NumberOfCores+1; a different number can be forced on construction. ; Definition at line 40 of file TProofLite.h. Public Member Functions;  TProofLite (const char *masterurl, const char *conffile=kPROOF_ConfFile, const char *confdir=kPROOF_ConfDir, Int_t loglevel=0, const char *alias=0, TProofMgr *mgr=0);  Create a PROOF environment. ;  ;  ~TProofLite () override;  Destructor. ;  ; Bool_t CancelStagingDataSet (const char *dataset) override;  Cancels a dataset staging request. ;  ; void ClearCache (const char *file=0) override;  Remove files from all file caches. ;  ; void ClearDataSetCache (const char *dataset=0) override;  Clear the content of the dataset cache, if any (matching 'dataset', if defined). ;  ; Long64_t DrawSelect (TDSet *dset, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Execute the specified drawing action on a data set (TDSet). ;  ; Bool_t ExistsDataSet (const char *uri) override;  Returns kTRUE if 'dataset' described by 'uri' exists, kFALSE otherwise. ;  ; TFileCollection * GetDataSet (const char *uri, const char *=0) override;  Get a list of TFileInfo objects describing the files of the specified dataset. ;  ; TMap * GetDataSets (const char *uri="""", const char *=0) override;  lists all datasets that match given uri ;  ; TList * GetListOfQueries (Option_t *opt="""") override;  Get the list of queries. ;  ; TFileCollection * GetStagingStatusDataSet (const char *dataset) override;  Obtains a TFileCollection s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:1141,cache,caches,1141,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['cache'],['caches']
Performance," Normalization integral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; Int_t_numPdfNumber of registered PDFs; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooObjCacheManager_partIntMgrComponent normalization manager; TList_pdfProxyListList of PDF proxies (named after applicable category state); Int_tRooAbsReal::_plotBinsNumber of plot bins; const TNamed*_plotCoefNormRange; RooSetProxy_plotCoefNormSet; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooSimultaneous.html:41473,cache,cache,41473,root/html532/RooSimultaneous.html,https://root.cern,https://root.cern/root/html532/RooSimultaneous.html,1,['cache'],['cache']
Performance," NotCompileIfScalarBackend = std::enable_if<!(std::is_same<double, ROOT::Double_v>::value)>>; 374 void SetFunction(const IGradModelFunction_v &func, bool useGradient = true);; 375#endif; 376 /**; 377 Set the fitted function from a parametric 1D function interface; 378 */; 379 void SetFunction(const IModel1DFunction & func, bool useGradient = false);; 380 ; 381 /**; 382 Set the fitted function (model function) from a parametric gradient function interface; 383 */; 384 void SetFunction(const IGradModelFunction & func, bool useGradient = true);; 385 /**; 386 Set the fitted function from 1D gradient parametric function interface; 387 */; 388 void SetFunction(const IGradModel1DFunction & func, bool useGradient = true);; 389 ; 390 ; 391 /**; 392 get fit result; 393 */; 394 const FitResult & Result() const {; 395 assert( fResult.get() );; 396 return *fResult;; 397 }; 398 ; 399 ; 400 /**; 401 perform an error analysis on the result using the Hessian; 402 Errors are obtained from the inverse of the Hessian matrix; 403 To be called only after fitting and when a minimizer supporting the Hessian calculations is used; 404 otherwise an error (false) is returned.; 405 A new FitResult with the Hessian result will be produced; 406 */; 407 bool CalculateHessErrors();; 408 ; 409 /**; 410 perform an error analysis on the result using MINOS; 411 To be called only after fitting and when a minimizer supporting MINOS is used; 412 otherwise an error (false) is returned.; 413 The result will be appended in the fit result class; 414 Optionally a vector of parameter indices can be passed for selecting; 415 the parameters to analyse using FitConfig::SetMinosErrors; 416 */; 417 bool CalculateMinosErrors();; 418 ; 419 /**; 420 access to the fit configuration (const method); 421 */; 422 const FitConfig & Config() const { return fConfig; }; 423 ; 424 /**; 425 access to the configuration (non const method); 426 */; 427 FitConfig & Config() { return fConfig; }; 428 ; 429 /**; 430 query if fit is binn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Fitter_8h_source.html:16137,perform,perform,16137,doc/master/Fitter_8h_source.html,https://root.cern,https://root.cern/doc/master/Fitter_8h_source.html,1,['perform'],['perform']
Performance," Observable; RooRealVar mjjj(""mjjj"", ""m(3jet) (GeV)"", 100, 85., 350.);; ; // Signal component (Gaussian); RooRealVar mtop(""mtop"", ""m(top)"", 162);; RooRealVar wtop(""wtop"", ""m(top) resolution"", 15.2);; RooGaussian sig(""sig"", ""top signal"", mjjj, mtop, wtop);; ; // Background component (Chebychev); RooRealVar c0(""c0"", ""Chebychev coefficient 0"", -0.846, -1., 1.);; RooRealVar c1(""c1"", ""Chebychev coefficient 1"", 0.112, -1., 1.);; RooRealVar c2(""c2"", ""Chebychev coefficient 2"", 0.076, -1., 1.);; RooChebychev bkg(""bkg"", ""combinatorial background"", mjjj, RooArgList(c0, c1, c2));; ; // Composite model; RooRealVar nsig(""nsig"", ""number of signal events"", 53, 0, 1e3);; RooRealVar nbkg(""nbkg"", ""number of background events"", 103, 0, 5e3);; RooAddPdf model(""model"", ""model"", RooArgList(sig, bkg), RooArgList(nsig, nbkg));; ; // C r e a t e m a n a g e r; // ---------------------------; ; // Configure manager to perform binned extended likelihood fits (Binned(),Extended()) on data generated; // with a Poisson fluctuation on Nobs (Extended()); RooMCStudy *mcs = new RooMCStudy(model, mjjj, Binned(), Silence(), Extended(true),; FitOptions(Extended(true), PrintEvalErrors(-1)));; ; // C u s t o m i z e m a n a g e r; // ---------------------------------; ; // Add module that randomizes the summed value of nsig+nbkg; // sampling from a uniform distribution between 0 and 1000; //; // In general one can randomize a single parameter, or a; // sum of N parameters, using either a uniform or a Gaussian; // distribution. Multiple randomization can be executed; // by a single randomizer module; ; RooRandomizeParamMCSModule randModule;; randModule.sampleSumUniform(RooArgSet(nsig, nbkg), 50, 500);; mcs->addModule(randModule);; ; // Add profile likelihood calculation of significance. Redo each; // fit while keeping parameter nsig fixed to zero. For each toy,; // the difference in -log(L) of both fits is stored, as well; // a simple significance interpretation of the delta(-logL); // using Dnll = 0.5 sig",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf803__mcstudy__addons2_8C.html:1801,perform,perform,1801,doc/master/rf803__mcstudy__addons2_8C.html,https://root.cern,https://root.cern/doc/master/rf803__mcstudy__addons2_8C.html,1,['perform'],['perform']
Performance," Only keep the entries where ""col"" has values; df_filtered.Display({""twice""})->Print();; Further considerations; Note that working with missing values is currently supported with a TTree-based data source. Support of this functionality for other data sources may come in the future. Efficient analysis in Python; You can use RDataFrame in Python thanks to the dynamic Python/C++ translation of PyROOT. In general, the interface is the same as for C++, a simple example follows.; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""x > 10"").Sum(""y""); print(sum.GetValue()). User code in the RDataFrame workflow; C++ code; In the simple example that was shown above, a C++ expression is passed to the Filter() operation as a string (""x > 0""), even if we call the method from Python. Indeed, under the hood, the analysis computations run in C++, while Python is just the interface language.; To perform more complex operations that don't fit into a simple expression string, you can just-in-time compile C++ functions - via the C++ interpreter cling - and use those functions in an expression. See the following snippet for an example:; # JIT a C++ function from Python; ROOT.gInterpreter.Declare(""""""; bool myFilter(float x) {; return x > 10;; }; """"""); ; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); # Use the function in an RDF operation; sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); To increase the performance even further, you can also pre-compile a C++ library with full code optimizations and load the function into the RDataFrame computation as follows.; ROOT.gSystem.Load(""path/to/myLibrary.so"") # Library with the myFilter function; ROOT.gInterpreter.Declare('#include ""myLibrary.h""') # Header with the declaration of the myFilter function; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); A more thorough explanation of how to use C++ code from Python can be found in the PyROOT manual.; Python code",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDataFrame.html:87081,perform,perform,87081,doc/master/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html,1,['perform'],['perform']
Performance," Operations combining two vectors ------; -- need to have the specialized version in order to avoid. Return the scalar (dot) product of two displacement vectors.; It is possible to perform the product for any type of vector coordinates,; 	 but they must have the same coordinate system tag. Scalar Dot( const OtherVector & v). Return the scalar (dot) product of two vectors.; It is possible to perform the product for any classes; implementing x(), y() and z() member functions. DisplacementVector3D Cross( const DisplacementVector3D<OtherCoords,Tag> & v). Return vector (cross) product of two displacement vectors,; as a vector in the coordinate system of this class.; It is possible to perform the product for any type of vector coordinates,; 	 but they must have the same coordinate system tag. DisplacementVector3D Cross( const OtherVector & v). Return vector (cross) product of two vectors,; as a vector in the coordinate system of this class.; It is possible to perform the product for any classes; implementing X(), Y() and Z() member functions. DisplacementVector3D & operator*=(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a). multiply this vector by a scalar quantity. DisplacementVector3D & operator/=(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a). divide this vector by a scalar quantity. return operator*( Scalar(-1) ). DisplacementVector3D operator/(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a) const. Division of a vector with a real number. Scalar x() const; Methods providing limited backward name compatibility with CLHEP. { return fCoordinates.X(); }. Scalar y() const; { return fCoordinates.Y(); }. Scalar z() const; { return fCoordinates.Z(); }. Scalar theta() const; { return fCoordinates.Theta(); }. Scalar phi() const; { return fCoordinates.Phi(); }. Scalar eta() con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html:28622,perform,perform,28622,root/html528/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html,3,['perform'],['perform']
Performance," Operations combining two vectors ------; -- need to have the specialized version in order to avoid. Return the scalar (dot) product of two displacement vectors.; It is possible to perform the product for any type of vector coordinates,; 	 but they must have the same coordinate system tag. Scalar Dot( const OtherVector & v). Return the scalar (dot) product of two vectors.; It is possible to perform the product for any classes; implementing x(), y() and z() member functions. DisplacementVector3D Cross( const DisplacementVector3D<OtherCoords,Tag> & v). Return vector (cross) product of two displacement vectors,; as a vector in the coordinate system of this class.; It is possible to perform the product for any type of vector coordinates,; 	 but they must have the same coordinate system tag. DisplacementVector3D Cross( const OtherVector & v). Return vector (cross) product of two vectors,; as a vector in the coordinate system of this class.; It is possible to perform the product for any classes; implementing X(), Y() and Z() member functions. DisplacementVector3D & operator*=(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a). multiply this vector by a scalar quantity. DisplacementVector3D & operator/=(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a). divide this vector by a scalar quantity. return operator*(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a) const. DisplacementVector3D operator/(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a) const. Division of a vector with a real number. Scalar x() const; Methods providing limited backward name compatibility with CLHEP. { return fCoordinates.X(); }. Scalar y() const; { return fCoordinates.Y(); }. Scalar z() const; { return fCoordinates.Z(); }. Scalar theta() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html:28622,perform,perform,28622,root/html526/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html,1,['perform'],['perform']
Performance," Operations combining two vectors ------; -- need to have the specialized version in order to avoid. Return the scalar (dot) product of two displacement vectors.; It is possible to perform the product for any type of vector coordinates,; 	 but they must have the same coordinate system tag. Scalar Dot( const OtherVector & v). Return the scalar (dot) product of two vectors.; It is possible to perform the product for any classes; implementing x(), y() and z() member functions. DisplacementVector3D Cross( const DisplacementVector3D<OtherCoords,Tag> & v). Return vector (cross) product of two displacement vectors,; as a vector in the coordinate system of this class.; It is possible to perform the product for any type of vector coordinates,; 	 but they must have the same coordinate system tag. DisplacementVector3D Cross( const OtherVector & v). Return vector (cross) product of two vectors,; as a vector in the coordinate system of this class.; It is possible to perform the product for any classes; implementing X(), Y() and Z() member functions. DisplacementVector3D & operator*=(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a). multiply this vector by a scalar quantity. DisplacementVector3D & operator/=(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a). divide this vector by a scalar quantity. return operator*( Scalar(-1) ). DisplacementVector3D operator/(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a) const. Division of a vector with a real number. Scalar x() const; Methods providing limited backward name compatibility with CLHEP. { return fCoordinates.X(); }. Scalar y() const; { return fCoordinates.Y(); }. Scalar z() const; { return fCoordinates.Z(); }. Scalar theta() const; { return fCoordinates.Theta(); }. Scalar phi() const; { return fCoordinates.Phi(); }. S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html:23472,perform,perform,23472,root/html528/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html,3,['perform'],['perform']
Performance," Operations combining two vectors ------; -- need to have the specialized version in order to avoid. Return the scalar (dot) product of two displacement vectors.; It is possible to perform the product for any type of vector coordinates,; 	 but they must have the same coordinate system tag. Scalar Dot( const OtherVector & v). Return the scalar (dot) product of two vectors.; It is possible to perform the product for any classes; implementing x(), y() and z() member functions. DisplacementVector3D Cross( const DisplacementVector3D<OtherCoords,Tag> & v). Return vector (cross) product of two displacement vectors,; as a vector in the coordinate system of this class.; It is possible to perform the product for any type of vector coordinates,; 	 but they must have the same coordinate system tag. DisplacementVector3D Cross( const OtherVector & v). Return vector (cross) product of two vectors,; as a vector in the coordinate system of this class.; It is possible to perform the product for any classes; implementing X(), Y() and Z() member functions. DisplacementVector3D & operator*=(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a). multiply this vector by a scalar quantity. DisplacementVector3D & operator/=(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a). divide this vector by a scalar quantity. return operator*(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a) const. DisplacementVector3D operator/(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a) const. Division of a vector with a real number. Scalar x() const; Methods providing limited backward name compatibility with CLHEP. { return fCoordinates.X(); }. Scalar y() const; { return fCoordinates.Y(); }. Scalar z() const; { return fCoordinates.Z();",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html:23472,perform,perform,23472,root/html526/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html,1,['perform'],['perform']
Performance," Operations combining two vectors ------; -- need to have the specialized version in order to avoid. Return the scalar (dot) product of two displacement vectors.; It is possible to perform the product for any type of vector coordinates,; 	 but they must have the same coordinate system tag. Scalar Dot( const OtherVector & v). Return the scalar (dot) product of two vectors.; It is possible to perform the product for any classes; implementing x(), y() and z() member functions. DisplacementVector3D Cross( const DisplacementVector3D<OtherCoords,Tag> & v). Return vector (cross) product of two displacement vectors,; as a vector in the coordinate system of this class.; It is possible to perform the product for any type of vector coordinates,; 	 but they must have the same coordinate system tag. DisplacementVector3D Cross( const OtherVector & v). Return vector (cross) product of two vectors,; as a vector in the coordinate system of this class.; It is possible to perform the product for any classes; implementing X(), Y() and Z() member functions. DisplacementVector3D & operator*=(ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a). multiply this vector by a scalar quantity. DisplacementVector3D & operator/=(ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a). divide this vector by a scalar quantity. return operator*( Scalar(-1) ). DisplacementVector3D operator/(ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a) const. Division of a vector with a real number. Scalar x() const; Methods providing limited backward name compatibility with CLHEP. { return fCoordinates.X(); }. Scalar y() const; { return fCoordinates.Y(); }. Scalar z() const; { return fCoordinates.Z(); }. Scalar theta() const; { return fCoordinates.Theta(); }. Scalar phi() const; { return fCoordinates.Phi(); }. Scalar eta() const; { return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__DisplacementVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html:22062,perform,perform,22062,root/html528/ROOT__Math__DisplacementVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__DisplacementVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html,3,['perform'],['perform']
Performance," Operations combining two vectors ------; -- need to have the specialized version in order to avoid. Return the scalar (dot) product of two displacement vectors.; It is possible to perform the product for any type of vector coordinates,; 	 but they must have the same coordinate system tag. Scalar Dot( const OtherVector & v). Return the scalar (dot) product of two vectors.; It is possible to perform the product for any classes; implementing x(), y() and z() member functions. DisplacementVector3D Cross( const DisplacementVector3D<OtherCoords,Tag> & v). Return vector (cross) product of two displacement vectors,; as a vector in the coordinate system of this class.; It is possible to perform the product for any type of vector coordinates,; 	 but they must have the same coordinate system tag. DisplacementVector3D Cross( const OtherVector & v). Return vector (cross) product of two vectors,; as a vector in the coordinate system of this class.; It is possible to perform the product for any classes; implementing X(), Y() and Z() member functions. DisplacementVector3D & operator*=(ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a). multiply this vector by a scalar quantity. DisplacementVector3D & operator/=(ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a). divide this vector by a scalar quantity. return operator*(ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a) const. DisplacementVector3D operator/(ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a) const. Division of a vector with a real number. Scalar x() const; Methods providing limited backward name compatibility with CLHEP. { return fCoordinates.X(); }. Scalar y() const; { return fCoordinates.Y(); }. Scalar z() const; { return fCoordinates.Z(); }. Scalar theta() const; { return f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__DisplacementVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html:22062,perform,perform,22062,root/html526/ROOT__Math__DisplacementVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__DisplacementVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html,1,['perform'],['perform']
Performance," Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t indexDefinition TGWin32VirtualXProxy.cxx:168; forfor(Int_t i=0;i< n;i++)Definition legend1.C:18; Currently, order2 = 2*(order+1). Picture: (also see Knuth Vol 3 pg 478); ; +--+--+--+--+--+--...; | | | | | |; parent--->| | | |; | | | |; +*-+*-+*-+--+--+--...; | | |; +----+ | +-----+; | +-----+ |; V | V; +----------+ | +----------+; | | | | |; this->| | | | |<--sib; +----------+ | +----------+; V; data; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; PictureXID PictureDefinition render.h:33; It is conceptually VERY convenient to think of the data as being the very first element of the sib node. Any primitive that tells sib to perform some action on n nodes should include this 'hidden' element. For InnerNodes, the hidden element has (physical) index 0 in the array, and in LeafNodes, the hidden element has (virtual) index -1 in the array. Therefore, there are two 'size' primitives for nodes: Psize - the physical size: how many elements are contained in the; array in the node.; Vsize - the 'virtual' size; if the node is pointed to by; element 0 of the parent node, then Vsize == Psize;; otherwise the element in the parent item that points to this; node 'belongs' to this node, and Vsize == Psize+1;; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; pointsOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t pointsDefinition TGWin32VirtualXProxy.cxx:148; Parent nodes are always InnerNodes.; These are the primitive operations on Nodes: Append(elt) - adds an element to the end of the array of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBtree.html:6495,perform,perform,6495,doc/master/classTBtree.html,https://root.cern,https://root.cern/doc/master/classTBtree.html,1,['perform'],['perform']
Performance," Parameters. connidconnection id, when 0 - data will be send to all connections ; txtis text message that should be sent ; datadata to be std-moved to SubmitData function ; chidchannel id, 1 - normal communication, 0 - internal with highest priority . Definition at line 1529 of file RWebWindow.cxx. ◆ Sync(). void RWebWindow::Sync ; (; ). Special method to process all internal activity when window runs in separate thread. ; Definition at line 1236 of file RWebWindow.cxx. ◆ TerminateROOT(). void RWebWindow::TerminateROOT ; (; ). Terminate ROOT session Tries to correctly close THttpServer, associated with RWebWindowsManager After that exit from process. ; Definition at line 1893 of file RWebWindow.cxx. ◆ UseServerThreads(). void RWebWindow::UseServerThreads ; (; ). Let use THttpServer threads to process requests WARNING!!! only for expert use Should be only used when application provides proper locking and does not block. ; Such mode provides minimal possible latency Must be called before callbacks are assigned ; Definition at line 1667 of file RWebWindow.cxx. ◆ WaitFor(). int RWebWindow::WaitFor ; (; WebWindowWaitFunc_t ; check). Waits until provided check function or lambdas returns non-zero value Check function has following signature: int func(double spent_tm) Waiting will be continued, if function returns zero. ; Parameter spent_tm is time in seconds, which already spent inside the function First non-zero value breaks loop and result is returned. Runs application mainloop and short sleeps in-between ; Definition at line 1789 of file RWebWindow.cxx. ◆ WaitForTimed() [1/2]. int RWebWindow::WaitForTimed ; (; WebWindowWaitFunc_t ; check). Waits until provided check function or lambdas returns non-zero value Check function has following signature: int func(double spent_tm) Waiting will be continued, if function returns zero. ; Parameter spent_tm in lambda is time in seconds, which already spent inside the function First non-zero value breaks waiting loop and result is r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:50889,latency,latency,50889,doc/v632/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html,1,['latency'],['latency']
Performance," Parameters. connidconnection id, when 0 - data will be send to all connections ; txtis text message that should be sent ; datadata to be std-moved to SubmitData function ; chidchannel id, 1 - normal communication, 0 - internal with highest priority . Definition at line 1571 of file RWebWindow.cxx. ◆ Sync(). void RWebWindow::Sync ; (; ). Special method to process all internal activity when window runs in separate thread. ; Definition at line 1269 of file RWebWindow.cxx. ◆ TerminateROOT(). void RWebWindow::TerminateROOT ; (; ). Terminate ROOT session Tries to correctly close THttpServer, associated with RWebWindowsManager After that exit from process. ; Definition at line 1935 of file RWebWindow.cxx. ◆ UseServerThreads(). void RWebWindow::UseServerThreads ; (; ). Let use THttpServer threads to process requests WARNING!!! only for expert use Should be only used when application provides proper locking and does not block. ; Such mode provides minimal possible latency Must be called before callbacks are assigned ; Definition at line 1709 of file RWebWindow.cxx. ◆ WaitFor(). int RWebWindow::WaitFor ; (; WebWindowWaitFunc_t ; check). Waits until provided check function or lambdas returns non-zero value Check function has following signature: int func(double spent_tm) Waiting will be continued, if function returns zero. ; Parameter spent_tm is time in seconds, which already spent inside the function First non-zero value breaks loop and result is returned. Runs application mainloop and short sleeps in-between ; Definition at line 1831 of file RWebWindow.cxx. ◆ WaitForTimed() [1/2]. int RWebWindow::WaitForTimed ; (; WebWindowWaitFunc_t ; check). Waits until provided check function or lambdas returns non-zero value Check function has following signature: int func(double spent_tm) Waiting will be continued, if function returns zero. ; Parameter spent_tm in lambda is time in seconds, which already spent inside the function First non-zero value breaks waiting loop and result is r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebWindow.html:49773,latency,latency,49773,doc/master/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html,1,['latency'],['latency']
Performance," Printf("" .L <filename>[flags]: load the given file with optional flags like\n""; 1247 "" + to compile or ++ to force recompile.\n""; 1248 "" Type .? TSystem::CompileMacro for a list of all flags.\n""; 1249 "" <filename> can also be a shared library; skip flags."");; 1250 Printf("" .(x|X) <filename>[flags](args) :\n""; 1251 "" same as .L <filename>[flags] and runs then a function\n""; 1252 "" with signature: ret_type filename(args)."");; 1253 Printf("" .credits : show credits"");; 1254 Printf("" .demo : launch GUI demo"");; 1255 Printf("" .forum bug : ask for help with a bug or crash at the ROOT forum."");; 1256 Printf("" .gh [bug|feature|improvement]\n""; 1257 "" : submit a bug report, feature or improvement suggestion"");; 1258 Printf("" .help Class::Member : open reference guide for that class member (or .?).\n""; 1259 "" Specifying '::Member' is optional."");; 1260 Printf("" .help edit : show line editing shortcuts (or .?)"");; 1261 Printf("" .license : show license"");; 1262 Printf("" .libraries : show loaded libraries"");; 1263 Printf("" .ls : list contents of current TDirectory"");; 1264 Printf("" .pwd : show current TDirectory, pad and style"");; 1265 Printf("" .quit (or .exit) : quit ROOT (long form of .q)"");; 1266 Printf("" .R [user@]host[:dir] [-l user] [-d dbg] [script] :\n""; 1267 "" launch process in a remote host"");; 1268 Printf("" .qqq : quit ROOT - mandatory"");; 1269 Printf("" .qqqqq : exit process immediately"");; 1270 Printf("" .qqqqqqq : abort process"");; 1271 Printf("" .which [file] : show path of macro file"");; 1272 Printf("" .![OS_command] : execute OS-specific shell command"");; 1273 Printf("" .!root -? : print ROOT usage (CLI options)"");; 1274 return;; 1275 } else {; 1276 // If the user wants to use the extended "".help scopeName"" command to access; 1277 // the online reference guide, we first check if the command starts correctly.; 1278 if ((!strippedCommand.BeginsWith("".help "")) && (!strippedCommand.BeginsWith("".? ""))) {; 1279 Error(""Help"", ""Unknown command!"");; 1280 return;; 1281 }; 1282 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:50184,load,loaded,50184,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,1,['load'],['loaded']
Performance," Prohibit server redirects -- Debugging tool; RooObjCacheManager_projCacheMgrManager of cache with coefficient projections and transformations; Bool_t_projectCoefsIf true coefficients need to be projected for use in evaluate(); TRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; RooSetProxy_refCoefNorm! Reference observable set for coefficient interpretation; TNamed*_refCoefRangeName! Reference range name for coefficient interpreation; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooArgList*_snormList! List of supplemental normalization factors; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxyRooResolutionModel::xDependent/convolution variable.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAddModel.html:43336,cache,cache,43336,root/html532/RooAddModel.html,https://root.cern,https://root.cern/root/html532/RooAddModel.html,2,['cache'],['cache']
Performance," Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsSelfCachedReal(); Destructor. void fillCacheObject(RooAbsCachedReal::FuncCacheElem& cache) const; Fill cache with sampling of function as defined by the evaluate() implementation. RooArgSet* actualObservables(const RooArgSet& nset) const; Defines observables to be cached, given a set of user defined observables; Returns the subset of nset that are observables this p.d.f. RooArgSet* actualParameters(const RooArgSet& nset) const; Defines parameters on which cache contents depends. Returns; subset of variables of self that is not contained in the; supplied nset. const char* inputBaseName() const; Use own name as base name for caches. » Last changed: Thu Sep 23 19:58:19 2010 » Last generated: 2010-09-23 19:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsSelfCachedReal.html:34283,cache,cache,34283,root/html528/RooAbsSelfCachedReal.html,https://root.cern,https://root.cern/root/html528/RooAbsSelfCachedReal.html,5,['cache'],"['cache', 'cached', 'caches']"
Performance," Public Attributes |; List of all members ; RooAbsPdf::CacheElem Class Reference. ; Normalization set with for above integral. ; Definition at line 322 of file RooAbsPdf.h. Public Member Functions;  CacheElem (RooAbsReal &norm);  ;  ~CacheElem () override;  Destructor of normalization cache element. ;  ; RooArgList containedArgs (Action) override;  ;  Public Member Functions inherited from RooAbsCacheElement;  RooAbsCacheElement ();  ; virtual ~RooAbsCacheElement ();  ; virtual void findConstantNodes (const RooArgSet &obs, RooArgSet &cacheList, RooLinkedList &processedNodes);  Interface for constant term optimization calls. ;  ; virtual TClass * IsA () const;  ; virtual void operModeHook (RooAbsArg::OperMode);  Interface for changes of operation mode. ;  ; virtual void optimizeCacheMode (const RooArgSet &obs, RooArgSet &optNodes, RooLinkedList &processedNodes);  Interface for cache optimization calls. ;  ; virtual void printCompactTreeHook (std::ostream &, const char *, Int_t curElem, Int_t totElem);  Hook function to print cache guts in tree printing mode of RooAbsArgs. ;  ; virtual bool redirectServersHook (const RooAbsCollection &, bool, bool, bool);  Interface for server redirect calls. ;  ; void setOwner (RooAbsArg *owner);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Public Attributes; std::unique_ptr< RooAbsReal > _norm;  . Additional Inherited Members;  Public Types inherited from RooAbsCacheElement; enum  Action { OperModeChange; , OptimizeCaching; , FindConstantNodes; };  ;  Static Public Member Functions inherited from RooAbsCacheElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Protected Attributes inherited from RooAbsCacheElement; RooAbsArg * _owner;  ! Pointer to owning RooAbsArg ;  . #include <RooAbsPdf.h>. Inheritance diagram for RooAbsPdf::CacheElem:. This browser is not able ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html:1216,cache,cache,1216,doc/master/classRooAbsPdf_1_1CacheElem.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf_1_1CacheElem.html,1,['cache'],['cache']
Performance," Public Member Functions; static RTreeViewer * NewViewer (TTree *);  Create new viewer Method used for plugin. ;  . Private Member Functions; void AddBranches (TObjArray *branches);  Add branches to config. ;  ; std::string FormatItemName (const std::string &name);  Format item name used in draw expression. ;  ; void InvokeTreeDraw ();  Invoke tree drawing. ;  ; void SendCfg (unsigned connid);  Send data for initialize viewer. ;  ; void SendProgress (Double_t nevent=0.);  Send progress to the client. ;  ; void UpdateConfig ();  Update RConfig data. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  receive data from client ;  ; void WebWindowConnect (unsigned connid);  react on new connection ;  . Private Attributes; PerformDrawCallback_t fCallback;  ! callback invoked when tree draw performed ;  ; RConfig fCfg;  ! configuration, exchanged between client and server ;  ; std::string fLastSendProgress;  ! last send progress to client ;  ; bool fShowHierarchy {false};  ! show TTree hierarchy ;  ; std::unique_ptr< RTreeDrawInvokeTimer > fTimer;  ! timer to invoke tree draw ;  ; std::string fTitle;  ! title of tree viewer ;  ; TTree * fTree {nullptr};  ! TTree to show ;  ; std::shared_ptr< ROOT::RWebWindow > fWebWindow;  ! web window ;  . Friends; class RTreeDrawInvokeTimer;  ; class RTreeDrawMonitoring;  . #include <ROOT/RTreeViewer.hxx>; Member Typedef Documentation. ◆ PerformDrawCallback_t. using ROOT::RTreeViewer::PerformDrawCallback_t = std::function<void(const std::string &)>. Definition at line 41 of file RTreeViewer.hxx. Constructor & Destructor Documentation. ◆ RTreeViewer(). RTreeViewer::RTreeViewer ; (; TTree * ; tree = nullptr). constructor ; Definition at line 108 of file RTreeViewer.cxx. ◆ ~RTreeViewer(). RTreeViewer::~RTreeViewer ; (; ). virtual . destructor ; Definition at line 128 of file RTreeViewer.cxx. Member Function Documentation. ◆ AddBranches(). void RTreeViewer::AddBranches ; (; TObjArray * ; branches). private . Add branches ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html:2834,perform,performed,2834,doc/v632/classROOT_1_1RTreeViewer.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeViewer.html,1,['perform'],['performed']
Performance," Public Member Functions; static RTreeViewer * NewViewer (TTree *);  Create new viewer Method used for plugin. ;  . Private Member Functions; void AddBranches (TObjArray *branches);  Add branches to config. ;  ; std::string FormatItemName (const std::string &name);  Format item name used in draw expression. ;  ; void InvokeTreeDraw ();  Invoke tree drawing. ;  ; void SendCfg (unsigned connid);  Send data for initialize viewer. ;  ; void SendProgress (Double_t nevent=0.);  Send progress to the client. ;  ; void UpdateConfig ();  Update RConfig data. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  receive data from client ;  ; void WebWindowConnect (unsigned connid);  react on new connection ;  . Private Attributes; PerformDrawCallback_t fCallback;  ! callback invoked when tree draw performed ;  ; RConfig fCfg;  ! configuration, exchanged between client and server ;  ; std::string fLastSendProgress;  ! last send progress to client ;  ; bool fShowHierarchy {false};  ! show TTree hierarchy ;  ; std::unique_ptr< RTreeDrawInvokeTimer > fTimer;  ! timer to invoke tree draw ;  ; std::string fTitle;  ! title of tree viewer ;  ; TTree * fTree {nullptr};  ! TTree to show ;  ; std::shared_ptr< ROOT::RWebWindow > fWebWindow;  ! web window ;  . Friends; class RTreeDrawInvokeTimer;  ; class RTreeDrawMonitoring;  . #include <ROOT/RTreeViewer.hxx>; Member Typedef Documentation. ◆ PerformDrawCallback_t. using ROOT::RTreeViewer::PerformDrawCallback_t = std::function<void(const std::string &)>. Definition at line 41 of file RTreeViewer.hxx. Constructor & Destructor Documentation. ◆ RTreeViewer(). RTreeViewer::RTreeViewer ; (; TTree * ; tree = nullptr). constructor ; Definition at line 115 of file RTreeViewer.cxx. ◆ ~RTreeViewer(). RTreeViewer::~RTreeViewer ; (; ). virtual . destructor ; Definition at line 135 of file RTreeViewer.cxx. Member Function Documentation. ◆ AddBranches(). void RTreeViewer::AddBranches ; (; TObjArray * ; branches). private . Add branches ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RTreeViewer.html:2877,perform,performed,2877,doc/master/classROOT_1_1RTreeViewer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RTreeViewer.html,1,['perform'],['performed']
Performance," PushDataCache(TVirtualArray *)Push a new data cache area onto the list of area to be used for temporarily store 'missing' data memb...Definition TBuffer.cxx:362; TBuffer::SetReAllocFuncvoid SetReAllocFunc(ReAllocCharFun_t reallocfunc=nullptr)Set which memory reallocation method to use.Definition TBuffer.cxx:286; TBuffer::PopDataCachevirtual TVirtualArray * PopDataCache()Pop and Return the 'current' data cache area from the list of area to be used for temporarily store '...Definition TBuffer.cxx:381; TBuffer::EModeEModeDefinition TBuffer.h:73; TBuffer::kWrite@ kWriteDefinition TBuffer.h:73; TBuffer::kRead@ kReadDefinition TBuffer.h:73; TBuffer::fBufMaxchar * fBufMaxDefinition TBuffer.h:53; TBuffer::fBufCurchar * fBufCurDefinition TBuffer.h:52; TBuffer::AutoExpandvoid AutoExpand(Int_t size_needed)Automatically calculate a new size and expand the buffer to fit at least size_needed.Definition TBuffer.cxx:158; TBuffer::PeekDataCachevirtual TVirtualArray * PeekDataCache() constReturn the 'current' data cache area from the list of area to be used for temporarily store 'missing'...Definition TBuffer.cxx:371; TBuffer::ReadClassBuffervirtual Int_t ReadClassBuffer(const TClass *cl, void *pointer, const TClass *onfile_class=nullptr)=0; TBuffer::kMinimalSize@ kMinimalSizeDefinition TBuffer.h:78; TBuffer::kInitialSize@ kInitialSizeDefinition TBuffer.h:78; TBuffer::~TBuffervirtual ~TBuffer()Delete an I/O buffer object.Definition TBuffer.cxx:140; TBuffer::GetClassstatic TClass * GetClass(const std::type_info &typeinfo)Forward to TROOT::GetClass().Definition TBuffer.cxx:328; TBuffer::IsReadingBool_t IsReading() constDefinition TBuffer.h:86; TBuffer::fModeBool_t fModeDefinition TBuffer.h:48; TBuffer::GetReAllocFuncReAllocCharFun_t GetReAllocFunc() constReturn the reallocation method currently used.Definition TBuffer.cxx:277; TBuffer::fReAllocFuncReAllocCharFun_t fReAllocFuncDefinition TBuffer.h:55; TBuffer::fBufferchar * fBufferDefinition TBuffer.h:51; TBuffer::fParentTObject * fPar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBuffer_8cxx_source.html:19337,cache,cache,19337,doc/master/TBuffer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBuffer_8cxx_source.html,1,['cache'],['cache']
Performance," Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » XML; » TXMLPlayer. class TXMLPlayer: public TObject. Class for xml code generation; It should be used for generation of xml steramers, which could be used outside root; environment. This means, that with help of such streamers user can read and write; objects from/to xml file, which later can be accepted by ROOT. At the moment supported only classes, which are not inherited from TObject; and which not contains any TObject members. To generate xml code:. 1. ROOT library with required classes should be created.; In general, without such library non of user objects can be stored and; retrived from any ROOT file. 2. Generate xml streamers by root script like:. void generate() {; gSystem->Load(""libRXML.so""); // load ROOT xml library; gSystem->Load(""libuser.so""); // load user ROOT library. TList lst;; lst.Add(TClass::GetClass(""TUserClass1""));; lst.Add(TClass::GetClass(""TUserClass2""));. TXMLPlayer player;; player.ProduceCode(&lst, ""streamers""); // create xml streamers; }. 3. Copy ""streamers.h"", ""streamers.cxx"", ""TXmlFile.h"", ""TXmlFile.cxx"" files; to user project and compile them. TXmlFile class implementation can be taken; from http://www-linux.gsi.de/~linev/xmlfile.tar.gz. TXMLPlayer class generates one function per class, which called class streamer.; Name of such function for class TExample will be TExample_streamer. Following data members for streamed classes are supported:; - simple data types (int, double, float); - array of simple types (int[5], double[5][6]); - dynamic array of simple types (int* with comment field // [fSize]); - const char*; - object of any nonROOT class; - pointer on object; - array of objects; - array of pointers on objects; - stl string; - stl vector, list, deque, set, multiset, map, multimap; - allowed arguments for stl conta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXMLPlayer.html:1006,load,load,1006,root/html534/TXMLPlayer.html,https://root.cern,https://root.cern/root/html534/TXMLPlayer.html,1,['load'],['load']
Performance," Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAddModel. class RooAddModel: public RooResolutionModel. RooAddModel is an efficient implementation of a sum of PDFs of the form. c_1*PDF_1 + c_2*PDF_2 + ... c_n*PDF_n. or. c_1*PDF_1 + c_2*PDF_2 + ... (1-sum(c_1...c_n-1))*PDF_n. The first form is for extended likelihood fits, where the; expected number of events is Sum(i) c_i. The coefficients c_i; can either be explicitly provided, or, if all components support; extended likelihood fits, they can be calculated the contribution; of each PDF to the total number of expected events. In the second form, the sum of the coefficients is enforced to be one,; and the coefficient of the last PDF is calculated from that condition. RooAddPdf relies on each component PDF to be normalized and will perform; no normalization other than calculating the proper last coefficient c_n, if requested.; An (enforced) condition for this assuption is that each PDF_i is independent; of each coefficient_i. Function Members (Methods); public:. RooAddModel(); RooAddModel(const RooAddModel& other, const char* name = 0); RooAddModel(const char* name, const char* title, const RooArgList& pdfList, const RooArgList& coefList, Bool_t ownPdfList = kFALSE); virtual~RooAddModel(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAddModel.html:1000,perform,perform,1000,root/html528/RooAddModel.html,https://root.cern,https://root.cern/root/html528/RooAddModel.html,4,['perform'],['perform']
Performance," Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAddModel. class RooAddModel: public RooResolutionModel. RooAddModel is an efficient implementation of a sum of PDFs of the form. c_1*PDF_1 + c_2*PDF_2 + ... c_n*PDF_n. or. c_1*PDF_1 + c_2*PDF_2 + ... (1-sum(c_1...c_n-1))*PDF_n. The first form is for extended likelihood fits, where the; expected number of events is Sum(i) c_i. The coefficients c_i; can either be explicitly provided, or, if all components support; extended likelihood fits, they can be calculated the contribution; of each PDF to the total number of expected events. In the second form, the sum of the coefficients is enforced to be one,; and the coefficient of the last PDF is calculated from that condition. RooAddPdf relies on each component PDF to be normalized and will perform; no normalization other than calculating the proper last coefficient c_n, if requested.; An (enforced) condition for this assuption is that each PDF_i is independent; of each coefficient_i. Function Members (Methods); public:. RooAddModel(); RooAddModel(const RooAddModel& other, const char* name = 0); RooAddModel(const char* name, const char* title, const RooArgList& pdfList, const RooArgList& coefList, Bool_t ownPdfList = kFALSE); virtual~RooAddModel(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddModel.html:1000,perform,perform,1000,root/html526/RooAddModel.html,https://root.cern,https://root.cern/root/html526/RooAddModel.html,1,['perform'],['perform']
Performance," Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAddModel. class RooAddModel: public RooResolutionModel. RooAddModel is an efficient implementation of a sum of PDFs of the form. c_1*PDF_1 + c_2*PDF_2 + ... c_n*PDF_n. or. c_1*PDF_1 + c_2*PDF_2 + ... (1-sum(c_1...c_n-1))*PDF_n. The first form is for extended likelihood fits, where the; expected number of events is Sum(i) c_i. The coefficients c_i; can either be explicitly provided, or, if all components support; extended likelihood fits, they can be calculated the contribution; of each PDF to the total number of expected events. In the second form, the sum of the coefficients is enforced to be one,; and the coefficient of the last PDF is calculated from that condition. RooAddPdf relies on each component PDF to be normalized and will perform; no normalization other than calculating the proper last coefficient c_n, if requested.; An (enforced) condition for this assuption is that each PDF_i is independent; of each coefficient_i. Function Members (Methods); public:. virtual~RooAddModel(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tanalyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """");",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAddModel.html:1000,perform,perform,1000,root/html602/RooAddModel.html,https://root.cern,https://root.cern/root/html602/RooAddModel.html,2,['perform'],['perform']
Performance," RBrowserData.cxx. ◆ DecomposePath(). Browsable::RElementPath_t RBrowserData::DecomposePath ; (; const std::string & ; path, . bool ; relative_to_work_element . ). Decompose path to elements Returns array of names for each element in the path, first element either ""/"" or ""."" If returned array empty - it is error. ; Definition at line 155 of file RBrowserData.cxx. ◆ GetElement(). std::shared_ptr< Browsable::RElement > RBrowserData::GetElement ; (; const std::string & ; str). Returns element with path, specified as string. ; Definition at line 290 of file RBrowserData.cxx. ◆ GetElementFromTop(). std::shared_ptr< Browsable::RElement > RBrowserData::GetElementFromTop ; (; const Browsable::RElementPath_t & ; path). Returns element with path, specified as Browsable::RElementPath_t. ; Definition at line 300 of file RBrowserData.cxx. ◆ GetSubElement(). std::shared_ptr< Browsable::RElement > RBrowserData::GetSubElement ; (; const Browsable::RElementPath_t & ; path). Returns sub-element starting from top, using cached data. ; Definition at line 308 of file RBrowserData.cxx. ◆ GetWorkingPath(). const Browsable::RElementPath_t & ROOT::RBrowserData::GetWorkingPath ; (; ); const. inline . Definition at line 73 of file RBrowserData.hxx. ◆ ProcessBrowserRequest(). bool RBrowserData::ProcessBrowserRequest ; (; const RBrowserRequest & ; request, . RBrowserReply & ; reply . ). private . Process browser request. ; Definition at line 171 of file RBrowserData.cxx. ◆ ProcessRequest(). std::string RBrowserData::ProcessRequest ; (; const RBrowserRequest & ; request). Process browser request, returns string with JSON of RBrowserReply data. ; Definition at line 269 of file RBrowserData.cxx. ◆ RemoveFromCache() [1/2]. bool RBrowserData::RemoveFromCache ; (; const Browsable::RElementPath_t & ; path). Remove path (and all sub-paths) from cache Returns true if any element was removed. ; Definition at line 406 of file RBrowserData.cxx. ◆ RemoveFromCache() [2/2]. bool RBrowserData::RemoveFromCache ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RBrowserData.html:5247,cache,cached,5247,doc/v632/classROOT_1_1RBrowserData.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserData.html,2,['cache'],['cached']
Performance," RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 120 of file RDFHelpers.hxx. ◆ SaveGraph() [2/2]. template<typename NodeType > . void ROOT::RDF::SaveGraph ; (; NodeType ; node, . const std::string & ; outputFile . ). Create a graphviz representation of the dataframe computation graph, write it to the specified file. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. ; [in]outputFilefile where to save the representation. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 139 of file RDFHelpers.hxx. ◆ splitInEqualRanges(). void ROOT::RDF::splitInEqualRanges ; (; std::vector< std::pair< ULong64_t, ULong64_t > > & ; ranges, . int ; nRecords, . unsigned int ; nSlots . ). Definition at line 519 of file RArrowDS.cxx. ROOTRDF. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html:16205,optimiz,optimized,16205,doc/v632/namespaceROOT_1_1RDF.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1RDF.html,2,"['concurren', 'optimiz']","['concurrently', 'optimized']"
Performance," ROC[y];; 2336 importances[ny] += SROC - SSROC;; 2337 // cleaning information; 2338 }; 2339 }; 2340 }; 2341 std::cout << ""--- Variable Importance Results (All)"" << std::endl;; 2342 return GetImportance(nbits, importances, varNames);; 2343}; 2344 ; 2345static uint64_t sum(uint64_t i); 2346{; 2347 // add a limit for overflows; 2348 if (i > 62) return 0;; 2349 return static_cast<uint64_t>( std::pow(2, i + 1)) - 1;; 2350 // uint64_t _sum = 0;; 2351 // for (uint64_t n = 0; n < i; n++); 2352 // _sum += pow(2, n);; 2353 // return _sum;; 2354}; 2355 ; 2356////////////////////////////////////////////////////////////////////////////////; 2357 ; 2358TH1F *TMVA::Factory::EvaluateImportanceShort(DataLoader *loader, Types::EMVA theMethod, TString methodTitle,; 2359 const char *theOption); 2360{; 2361 uint64_t x = 0;; 2362 uint64_t y = 0;; 2363 ; 2364 // getting number of variables and variable names from loader; 2365 const int nbits = loader->GetDataSetInfo().GetNVariables();; 2366 std::vector<TString> varNames = loader->GetDataSetInfo().GetListOfVariables();; 2367 ; 2368 if (nbits > 60) {; 2369 Log() << kERROR << ""Number of combinations is too large , is 2^"" << nbits << Endl;; 2370 return nullptr;; 2371 }; 2372 long int range = sum(nbits);; 2373 // std::cout<<range<<std::endl;; 2374 // vector to save importances; 2375 std::vector<Double_t> importances(nbits);; 2376 for (int i = 0; i < nbits; i++); 2377 importances[i] = 0;; 2378 ; 2379 Double_t SROC, SSROC; // computed ROC value; 2380 ; 2381 x = range;; 2382 ; 2383 std::bitset<VIBITS> xbitset(x);; 2384 if (x == 0); 2385 Log() << kFATAL << ""Error: need at least one variable.""; // data loader need at least one variable; 2386 ; 2387 // creating loader for seed; 2388 TMVA::DataLoader *seedloader = new TMVA::DataLoader(xbitset.to_string());; 2389 ; 2390 // adding variables from seed; 2391 for (int index = 0; index < nbits; index++) {; 2392 if (xbitset[index]); 2393 seedloader->AddVariable(varNames[index], 'F');; 2394 }; 2395 ; 2396 //",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:98986,load,loader,98986,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['load'],['loader']
Performance," ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; ROOT::Experimental::Internal::RPageSource Class ReferenceabstractNTuple-related classes. ; Abstract interface to read data from an ntuple. ; The page source is initialized with the columns of interest. Alias columns from projected fields are mapped to the corresponding physical columns. Pages from the columns of interest can then be mapped into memory. The page source also gives access to the ntuple's meta-data. ; Definition at line 549 of file RPageStorage.hxx. Classes; class  RActivePhysicalColumns;  Keeps track of the requested physical column IDs. More...;  ; struct  RClusterInfo;  Summarizes cluster-level information that are necessary to load a certain page. More...;  ; struct  RCounters;  Default I/O performance counters that get registered in fMetrics More...;  ; struct  REntryRange;  Used in SetEntryRange / GetEntryRange. More...;  ; class  RExclDescriptorGuard;  An RAII wrapper used for the writable access to RPageSource::fDescriptor. See GetSharedDescriptorGuard(). More...;  ; class  RSharedDescriptorGuard;  An RAII wrapper used for the read-only access to RPageSource::fDescriptor. See GetExclDescriptorGuard()`. More...;  . Public Member Functions;  RPageSource (const RPageSource &)=delete;  ;  RPageSource (RPageSource &&)=delete;  ;  RPageSource (std::string_view ntupleName, const RNTupleReadOptions &fOptions);  ;  ~RPageSource () override;  ; ColumnHandle_t AddColumn (DescriptorId_t fieldId, RColumn &column) override;  Register a new column. ;  ; void Attach ();  Open the physical storage container and deserialize header and footer. ;  ; std::unique_ptr< RPageSource > Clone () const;  Open the same storage multiple time, e.g. ;  ; void DropColumn (ColumnHandle_t columnHandle) override; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:1058,perform,performance,1058,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,1,['perform'],['performance']
Performance," ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooAbsDataStore Class ReferenceabstractRooFit » RooFit Core. ; Abstract base class for a data collection. ; Definition at line 34 of file RooAbsDataStore.h. Public Member Functions;  RooAbsDataStore ();  ;  RooAbsDataStore (const RooAbsDataStore &other, const char *newname=nullptr);  ;  RooAbsDataStore (const RooAbsDataStore &other, const RooArgSet &vars, const char *newname=nullptr);  ;  RooAbsDataStore (RooStringView name, RooStringView title, const RooArgSet &vars);  ; virtual RooAbsArg * addColumn (RooAbsArg &var, bool adjustRange=true)=0;  ; RooArgSet * addColumns (const RooArgList &varList);  ; virtual void append (RooAbsDataStore &other)=0;  ; virtual void attachBuffers (const RooArgSet &extObs)=0;  ; virtual void attachCache (const RooAbsArg *newOwner, const RooArgSet &cachedVars)=0;  ; virtual void cacheArgs (const RooAbsArg *cacheOwner, RooArgSet &varSet, const RooArgSet *nset=nullptr, bool skipZeroWeights=false)=0;  ; const RooArgSet & cachedVars () const;  ; virtual const RooAbsArg * cacheOwner ()=0;  ; virtual bool changeObservableName (const char *from, const char *to)=0;  ; virtual void checkInit () const;  ; virtual RooAbsDataStore * clone (const char *newname=nullptr) const =0;  ; virtual RooAbsDataStore * clone (const RooArgSet &vars, const char *newname=nullptr) const =0;  ; int defaultPrintContents (Option_t *) const override;  Define default print options, for a given print style. ;  ; bool dirtyProp () const;  ; virtual void dump ();  ; virtual Int_t fill ()=0;  ; virtual void forceCacheUpdate ();  ; virtual const RooArgSet * get () const;  ; virtual const RooArgSet * get (Int_t index) const =0;  ; virtual RooAbsData::RealSpans getBatches (std::size_t first, std::size_t len) const =0;  Retrieve batches for all observables in this data sto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsDataStore.html:1040,cache,cachedVars,1040,doc/master/classRooAbsDataStore.html,https://root.cern,https://root.cern/doc/master/classRooAbsDataStore.html,5,['cache'],"['cacheArgs', 'cacheOwner', 'cachedVars']"
Performance," ROOT: RooAbsCache Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; RooAbsCache Class ReferenceRooFit » RooFit Core. ; Abstract base class for data members of RooAbsArgs that cache other (composite) RooAbsArg expressions. ; The RooAbsCache interface defines the interaction between the owning RooAbsArg object and the cache data member to communicate server redirects, operation mode changes and constant term optimization management calls. ; Definition at line 27 of file RooAbsCache.h. Public Member Functions;  RooAbsCache (const RooAbsCache &, RooAbsArg *owner=nullptr);  Copy constructor. Takes owner as argument and registers cache with owne. ;  ;  RooAbsCache (RooAbsArg *owner=nullptr);  Constructor. Takes owner as argument and register cache with owner. ;  ; virtual ~RooAbsCache ();  Destructor. Unregisters cache with owner. ;  ; virtual void findConstantNodes (const RooArgSet &, RooArgSet &, RooLinkedList &);  Interface for constant term node finding calls. ;  ; virtual TClass * IsA () const;  ; virtual void operModeHook ();  Interface for operation mode changes. ;  ; virtual void optimizeCacheMode (const RooArgSet &, RooArgSet &, RooLinkedList &);  Interface for processing of cache mode optimization calls. ;  ; virtual void printCompactTreeHook (std::ostream &, const char *);  Interface for printing of cache guts in tree mode printing. ;  ; virtual bool redirectServersHook (const RooAbsCollection &, bool, bool, bool);  Interface for server redirect calls. ;  ; void setOwner (RooAbsArg *owner);  Reset the owner, triggering the owner to register this cache in its list of caches. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void wireCache ();  . Static Public Member Functions; static TClass * Class ();  ; static const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCache.html:999,cache,cache,999,doc/master/classRooAbsCache.html,https://root.cern,https://root.cern/doc/master/classRooAbsCache.html,1,['cache'],['cache']
Performance," ROOT::DelArrFunc_tGetDeleteArray() const; ROOT::DesFunc_tGetDestructor() const; static DictFuncPtr_tGetDict(const char* cname); static DictFuncPtr_tGetDict(const type_info& info); static TDictionary*TDictionary::GetDictionary(const char* name); static TDictionary*TDictionary::GetDictionary(const type_info& typeinfo); ROOT::DirAutoAdd_tGetDirectoryAutoAdd() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TFunctionTemplate*GetFunctionTemplate(const char* name); UInt_tGetHeapInstanceCount() const; virtual const char*TObject::GetIconName() const; Short_tGetImplFileLine() const; const char*GetImplFileName() const; UInt_tGetInstanceCount() const; TVirtualIsAProxy*GetIsAProxy() const; TVirtualStreamerInfo*GetLastReadInfo() const; TList*GetListOfAllPublicDataMembers(Bool_t load = kTRUE); const TList*GetListOfAllPublicMethods(Bool_t load = kTRUE); TList*GetListOfBases(); TList*GetListOfDataMembers(Bool_t load = kTRUE); TList*GetListOfEnums(Bool_t load = kTRUE); TList*GetListOfFunctionTemplates(Bool_t load = kTRUE); TCollection*GetListOfMethodOverloads(const char* name) const; TList*GetListOfMethods(Bool_t load = kTRUE); TList*GetListOfRealData() const; voidGetMenuItems(TList* listitems); TList*GetMenuList() const; ROOT::MergeFunc_tGetMerge() const; TMethod*GetMethod(const char* method, const char* params, Bool_t objectIsConst = kFALSE); TMethod*GetMethodAllAny(const char* method); TMethod*GetMethodAny(const char* method); TMethod*GetMethodWithPrototype(const char* method, const char* proto, Bool_t objectIsConst = kFALSE, ROOT::EFunctionMatchMode mode = ROOT::kConversionMatch); voidGetMissingDictionaries(THashTable& result, bool recurse = false); virtual const char*TNamed::GetName() const; Int_tGetNdata(); ROOT::NewFunc_tGetNew() const; ROOT::NewArrFunc_tGetNewArray() const; Int_tGetNmethods(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClass.html:6615,load,load,6615,root/html602/TClass.html,https://root.cern,https://root.cern/root/html602/TClass.html,2,['load'],['load']
Performance," ROOT::GetDelayedAddClassAlternate ; (; ). Definition at line 251 of file TClassTable.cxx. ◆ GetMacroPath(). TString & ROOT::GetMacroPath ; (; ). Definition at line 468 of file TROOT.cxx. ◆ GetROOT(). TROOT * ROOT::GetROOT ; (; ). Definition at line 464 of file TROOT.cxx. ◆ GetRuleIncludes(). void ROOT::GetRuleIncludes ; (; std::list< std::string > & ; result). Get the list of includes specified in the shema rules. ; Definition at line 841 of file RConversionRuleParser.cxx. ◆ GetThreadPoolSize(). UInt_t ROOT::GetThreadPoolSize ; (; ). Returns the size of ROOT's thread pool. ; Definition at line 565 of file TROOT.cxx. ◆ HasValidDataMembers(). Bool_t ROOT::HasValidDataMembers ; (; SchemaRuleMap_t & ; rule, . MembersTypeMap_t & ; members, . std::string & ; error_string . ). Check if given rule contains references to valid data members. ; Definition at line 447 of file RConversionRuleParser.cxx. ◆ IsImplicitMTEnabled(). bool ROOT::IsImplicitMTEnabled ; (; ). Returns true if the implicit multi-threading in ROOT is enabled. ; Definition at line 558 of file TROOT.cxx. ◆ MakeSeq() [1/2]. template<class T > . TSeq< T > ROOT::MakeSeq ; (; T ; begin, . T ; end, . T ; step = 1 . ). Definition at line 215 of file TSeq.hxx. ◆ MakeSeq() [2/2]. template<class T > . TSeq< T > ROOT::MakeSeq ; (; T ; end). Definition at line 209 of file TSeq.hxx. ◆ ParseRule(). Bool_t ROOT::ParseRule ; (; std::string ; rule, . ROOT::Internal::MembersMap_t & ; result, . std::string & ; error_string . ). Parse the schema rule as specified in the LinkDef file. ; Definition at line 103 of file RConversionRuleParser.cxx. ◆ ProcessReadPragma(). void ROOT::ProcessReadPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called when a read pragma is encountered. ; Definition at line 885 of file RConversionRuleParser.cxx. ◆ ProcessReadRawPragma(). void ROOT::ProcessReadRawPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called then a readraw pragma is enc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v628/namespaceROOT.html:30569,multi-thread,multi-threading,30569,doc/v628/namespaceROOT.html,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html,1,['multi-thread'],['multi-threading']
Performance," ROOT::GetDelayedAddClassAlternate ; (; ). Definition at line 254 of file TClassTable.cxx. ◆ GetMacroPath(). TString & ROOT::GetMacroPath ; (; ). Definition at line 476 of file TROOT.cxx. ◆ GetROOT(). TROOT * ROOT::GetROOT ; (; ). Definition at line 472 of file TROOT.cxx. ◆ GetRuleIncludes(). void ROOT::GetRuleIncludes ; (; std::list< std::string > & ; result). Get the list of includes specified in the shema rules. ; Definition at line 841 of file RConversionRuleParser.cxx. ◆ GetThreadPoolSize(). UInt_t ROOT::GetThreadPoolSize ; (; ). Returns the size of ROOT's thread pool. ; Definition at line 577 of file TROOT.cxx. ◆ HasValidDataMembers(). Bool_t ROOT::HasValidDataMembers ; (; SchemaRuleMap_t & ; rule, . MembersTypeMap_t & ; members, . std::string & ; error_string . ). Check if given rule contains references to valid data members. ; Definition at line 447 of file RConversionRuleParser.cxx. ◆ IsImplicitMTEnabled(). bool ROOT::IsImplicitMTEnabled ; (; ). Returns true if the implicit multi-threading in ROOT is enabled. ; Definition at line 570 of file TROOT.cxx. ◆ MakeSeq() [1/2]. template<class T > . TSeq< T > ROOT::MakeSeq ; (; T ; begin, . T ; end, . T ; step = 1 . ). Definition at line 215 of file TSeq.hxx. ◆ MakeSeq() [2/2]. template<class T > . TSeq< T > ROOT::MakeSeq ; (; T ; end). Definition at line 209 of file TSeq.hxx. ◆ ParseRule(). Bool_t ROOT::ParseRule ; (; std::string ; rule, . ROOT::Internal::MembersMap_t & ; result, . std::string & ; error_string . ). Parse the schema rule as specified in the LinkDef file. ; Definition at line 103 of file RConversionRuleParser.cxx. ◆ ProcessReadPragma(). void ROOT::ProcessReadPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called when a read pragma is encountered. ; Definition at line 885 of file RConversionRuleParser.cxx. ◆ ProcessReadRawPragma(). void ROOT::ProcessReadRawPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called then a readraw pragma is enc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v630/namespaceROOT.html:37796,multi-thread,multi-threading,37796,doc/v630/namespaceROOT.html,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html,1,['multi-thread'],['multi-threading']
Performance," ROOT::GetDelayedAddClassAlternate ; (; ). Definition at line 254 of file TClassTable.cxx. ◆ GetMacroPath(). TString & ROOT::GetMacroPath ; (; ). Definition at line 476 of file TROOT.cxx. ◆ GetROOT(). TROOT * ROOT::GetROOT ; (; ). Definition at line 472 of file TROOT.cxx. ◆ GetRuleIncludes(). void ROOT::GetRuleIncludes ; (; std::list< std::string > & ; result). Get the list of includes specified in the shema rules. ; Definition at line 855 of file RConversionRuleParser.cxx. ◆ GetThreadPoolSize(). UInt_t ROOT::GetThreadPoolSize ; (; ). Returns the size of ROOT's thread pool. ; Definition at line 577 of file TROOT.cxx. ◆ HasValidDataMembers(). Bool_t ROOT::HasValidDataMembers ; (; SchemaRuleMap_t & ; rule, . MembersTypeMap_t & ; members, . std::string & ; error_string . ). Check if given rule contains references to valid data members. ; Definition at line 461 of file RConversionRuleParser.cxx. ◆ IsImplicitMTEnabled(). bool ROOT::IsImplicitMTEnabled ; (; ). Returns true if the implicit multi-threading in ROOT is enabled. ; Definition at line 570 of file TROOT.cxx. ◆ Join(). template<class StringCollection_t > . std::string ROOT::Join ; (; const std::string & ; sep, . StringCollection_t && ; strings . ). Concatenate a list of strings with a separator. ; Template Parameters. StringCollection_tAny container of strings (vector, initializer_list, ...) . Parameters. [in]sepSeparator inbetween the strings. ; [in]stringscontainer of strings . Returnsthe sep-delimited concatenation of strings ; Definition at line 35 of file StringUtils.hxx. ◆ MakeSeq() [1/2]. template<class T > . TSeq< T > ROOT::MakeSeq ; (; T ; begin, . T ; end, . T ; step = 1 . ). Definition at line 215 of file TSeq.hxx. ◆ MakeSeq() [2/2]. template<class T > . TSeq< T > ROOT::MakeSeq ; (; T ; end). Definition at line 209 of file TSeq.hxx. ◆ ParseRule(). Bool_t ROOT::ParseRule ; (; std::string ; rule, . ROOT::Internal::MembersMap_t & ; result, . std::string & ; error_string . ). Parse the schema rule as specifi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT.html:37364,multi-thread,multi-threading,37364,doc/master/namespaceROOT.html,https://root.cern,https://root.cern/doc/master/namespaceROOT.html,2,['multi-thread'],['multi-threading']
Performance, ROOT::Math::GSLSimAnMinimizer::GSLSimAnMinimizer ; (; int ; type = 0). Default constructor. ; Definition at line 33 of file GSLSimAnMinimizer.cxx. ◆ ~GSLSimAnMinimizer(). ROOT::Math::GSLSimAnMinimizer::~GSLSimAnMinimizer ; (; ). override . Destructor (no operations) ; Definition at line 52 of file GSLSimAnMinimizer.cxx. Member Function Documentation. ◆ DoSetMinimOptions(). void ROOT::Math::GSLSimAnMinimizer::DoSetMinimOptions ; (; const GSLSimAnParams & ; params). protected . Set the Minimizer options from the simulated annealing parameters. ; Definition at line 148 of file GSLSimAnMinimizer.cxx. ◆ DoSetSimAnParameters(). void ROOT::Math::GSLSimAnMinimizer::DoSetSimAnParameters ; (; const MinimizerOptions & ; opt). protected . set minimizer option parameters from stored ROOT::Math::MinimizerOptions (fOpt) ; Definition at line 164 of file GSLSimAnMinimizer.cxx. ◆ Minimize(). bool ROOT::Math::GSLSimAnMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Reimplemented from ROOT::Math::BasicMinimizer.; Definition at line 56 of file GSLSimAnMinimizer.cxx. ◆ MinimizerParameters(). const GSLSimAnParams & ROOT::Math::GSLSimAnMinimizer::MinimizerParameters ; (; ); const. inline . Get current minimizer option parameters. ; Definition at line 95 of file GSLSimAnMinimizer.h. ◆ NCalls(). unsigned int ROOT::Math::GSLSimAnMinimizer::NCalls ; (; ); const. overridevirtual . number of calls ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 138 of file GSLSimAnMinimizer.cxx. ◆ SetParameters(). void ROOT::Math::GSLSimAnMinimizer::SetParameters ; (; const GSLSimAnParams & ; params). inline . set new minimizer option parameters using directly the GSLSimAnParams structure ; Definition at line 98 of file GSLSimAnMinimizer.h. Member Data Documentation. ◆ fSolver. ROOT::Math::GSLSimAnnealing ROOT::Math::GSLSimAnMinimizer::fSolver. private . Definition at line 112 of file GSLSimAnMinimizer.h. Libraries for ROOT::Math::GSLSimAnMinimizer:. [legend]; T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:14041,perform,perform,14041,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,1,['perform'],['perform']
Performance," ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::TransformFunction() const; virtual intROOT::Math::BasicMinimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::BasicMinimizer::VariableName(unsigned int ivar) const; virtual const double*ROOT::Math::BasicMinimizer::X() const. protected:. boolROOT::Math::BasicMinimizer::CheckDimension() const; boolROOT::Math::BasicMinimizer::CheckObjFunction() const; ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::CreateTransformation(vector<double>& startValues, const ROOT::Math::IMultiGradFunction* func = 0); voidROOT::Math::BasicMinimizer::SetFinalValues(const double* x); voidROOT::Math::BasicMinimizer::SetMinValue(double val). private:. ROOT::Math::GSLSimAnMinimizerGSLSimAnMinimizer(const ROOT::Math::GSLSimAnMinimizer&); ROOT::Math::GSLSimAnMinimizer&operator=(const ROOT::Math::GSLSimAnMinimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. ROOT::Math::GSLSimAnnealingfSolver. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLSimAnMinimizer(int type = 0). Default constructor. virtual ~GSLSimAnMinimizer(). Destructor (no operations). GSLSimAnMinimizer(const ROOT::Math::GSLSimAnMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. bool Minimize(); method to perform the minimization. unsigned int NCalls() const; number of calls. » Author: L. Moneta Wed Dec 20 17:16:32 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GSLSimAnMinimizer.html:7365,perform,perform,7365,root/html602/ROOT__Math__GSLSimAnMinimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GSLSimAnMinimizer.html,1,['perform'],['perform']
Performance," ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::TransformFunction() const; virtual intROOT::Math::BasicMinimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::BasicMinimizer::VariableName(unsigned int ivar) const; virtual const double*ROOT::Math::BasicMinimizer::X() const. protected:. boolROOT::Math::BasicMinimizer::CheckDimension() const; boolROOT::Math::BasicMinimizer::CheckObjFunction() const; ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::CreateTransformation(vector<double>& startValues, const ROOT::Math::IMultiGradFunction* func = 0); voidROOT::Math::BasicMinimizer::SetFinalValues(const double* x); voidROOT::Math::BasicMinimizer::SetMinValue(double val). private:. ROOT::Math::GSLSimAnMinimizerGSLSimAnMinimizer(const ROOT::Math::GSLSimAnMinimizer&); ROOT::Math::GSLSimAnMinimizer&operator=(const ROOT::Math::GSLSimAnMinimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. ROOT::Math::GSLSimAnnealingfSolver. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLSimAnMinimizer(int type = 0). Default constructor. virtual ~GSLSimAnMinimizer(). Destructor (no operations). GSLSimAnMinimizer(const ROOT::Math::GSLSimAnMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. bool Minimize(); method to perform the minimization. unsigned int NCalls() const; number of calls. » Author: L. Moneta Wed Dec 20 17:16:32 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html:7365,perform,perform,7365,root/html604/ROOT__Math__GSLSimAnMinimizer.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html,1,['perform'],['perform']
Performance," RWebWindow associated with the channelfEmbed.Definition RWebWindow.cxx:1867; ROOT::RWebWindow::SetCallBacksvoid SetCallBacks(WebWindowConnectCallback_t conn, WebWindowDataCallback_t data, WebWindowConnectCallback_t disconn=nullptr)Set call-backs function for connect, data and disconnect events.Definition RWebWindow.cxx:1772; ROOT::RWebWindow::SetRequireAuthKeyvoid SetRequireAuthKey(bool on)Configure if authentication key in connection string is required.Definition RWebWindow.hxx:316; ROOT::RWebWindow::GenerateKeystd::string GenerateKey() constGenerate new unique key for the window.Definition RWebWindow.cxx:611; ROOT::RWebWindow::SetUseCurrentDirvoid SetUseCurrentDir(bool on=true)Configure if window can access local files via currentdir/ path of http server.Definition RWebWindow.hxx:324; ROOT::RWebWindow::fDisconnCallbackWebWindowConnectCallback_t fDisconnCallback! callback for disconnect eventDefinition RWebWindow.hxx:159; ROOT::RWebWindow::GetMaxQueueLengthunsigned GetMaxQueueLength() constReturn maximal queue length of data which can be held by window.Definition RWebWindow.hxx:304; ROOT::RWebWindow::EQueueEntryKindEQueueEntryKindDefinition RWebWindow.hxx:124; ROOT::RWebWindow::kind_Disconnect@ kind_DisconnectDefinition RWebWindow.hxx:124; ROOT::RWebWindow::kind_Connect@ kind_ConnectDefinition RWebWindow.hxx:124; ROOT::RWebWindow::kind_None@ kind_NoneDefinition RWebWindow.hxx:124; ROOT::RWebWindow::kind_Data@ kind_DataDefinition RWebWindow.hxx:124; ROOT::RWebWindow::IsFileDialogMessagestatic bool IsFileDialogMessage(const std::string &msg)Check if this could be the message send by client to start new file dialog If returns true,...Definition RWebWindow.cxx:1963; ROOT::RWebWindowsManagerCentral instance to create and show web-based windows like Canvas or FitPanel.Definition RWebWindowsManager.hxx:36; THttpCallArgContains arguments for single HTTP call.Definition THttpCallArg.h:27; THttpServerOnline http server for arbitrary ROOT application.Definition THttpServer.h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RWebWindow_8hxx_source.html:44373,queue,queue,44373,doc/v632/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RWebWindow_8hxx_source.html,1,['queue'],['queue']
Performance," RWebWindow.hxx:90; ROOT::RWebWindow::WebConn::fKeystd::string fKey! key value supplied to the window (when exists)Definition RWebWindow.hxx:72; ROOT::RWebWindow::WebConn::WebConnWebConn(unsigned connid, bool headless_mode, const std::string &key)Definition RWebWindow.hxx:94; ROOT::RWebWindow::WebConn::fSendSequnsigned long fSendSeq! sequence id of last send packetDefinition RWebWindow.hxx:88; ROOT::RWebWindow::WebConn::fKeyUsedint fKeyUsed! key value used to verify connectionDefinition RWebWindow.hxx:73; ROOT::RWebWindow::WebConn::~WebConn~WebConn()Destructor for WebConn Notify special HTTP request which blocks headless browser from exit.Definition RWebWindow.cxx:42; ROOT::RWebWindow::WebConn::fMutexstd::mutex fMutex! mutex must be used to protect all following dataDefinition RWebWindow.hxx:81; ROOT::RWebWindow::WebConn::fDoingSendbool fDoingSend! true when performing send operationDefinition RWebWindow.hxx:86; ROOT::RWebWindow::WebConn::fSendCreditsint fSendCredits! how many send operation can be performed without confirmation from other sideDefinition RWebWindow.hxx:84; ROOT::RWebWindow::WebConn::WebConnWebConn(unsigned connid, unsigned wsid)Definition RWebWindow.hxx:93; ROOT::RWebWindow::WebConn::fNewKeystd::string fNewKey! new key if connection request reloadDefinition RWebWindow.hxx:74; ROOT::RWebWindow::WebConn::fWSIdunsigned fWSId! websocket idDefinition RWebWindow.hxx:79; ROOT::RWebWindow::WebConn::fSendStamptimestamp_t fSendStamp! last server operation, always used from window threadDefinition RWebWindow.hxx:77; ROOT::RWebWindow::WebConn::fRecvStamptimestamp_t fRecvStamp! last receive operation, protected with connection mutexDefinition RWebWindow.hxx:82; ROOT::RWebWindow::WebConn::fRecvCountint fRecvCount! number of received packets, should return back with next sendingDefinition RWebWindow.hxx:83; ROOT::RWebWindow::WebConn::ResetStampsvoid ResetStamps()Definition RWebWindow.hxx:101; ROOT::RWebWindow::WebConn::fQueuestd::queue< QueueItem > fQueue! output ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RWebWindow_8hxx_source.html:49899,perform,performed,49899,doc/v632/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RWebWindow_8hxx_source.html,1,['perform'],['performed']
Performance," R__LOCKGUARD(gROOTMutex);; 1573 return (TFile*)GetListOfFiles()->FindObject(name);; 1574}; 1575 ; 1576////////////////////////////////////////////////////////////////////////////////; 1577/// Return pointer to style with name; 1578 ; 1579TStyle *TROOT::GetStyle(const char *name) const; 1580{; 1581 return (TStyle*)GetListOfStyles()->FindObject(name);; 1582}; 1583 ; 1584////////////////////////////////////////////////////////////////////////////////; 1585/// Return pointer to function with name.; 1586 ; 1587TObject *TROOT::GetFunction(const char *name) const; 1588{; 1589 if (!name || !*name); 1590 return nullptr;; 1591 ; 1592 static std::atomic<bool> isInited = false;; 1593 ; 1594 // Capture the state before calling FindObject as it could change; 1595 // between the end of FindObject and the if statement; 1596 bool wasInited = isInited.load();; 1597 ; 1598 auto f1 = fFunctions->FindObject(name);; 1599 if (f1 || wasInited); 1600 return f1;; 1601 ; 1602 // If 2 threads gets here at the same time, the static initialization ""lock""; 1603 // will stall one of them until ProcessLine is finished and both will return the; 1604 // correct answer.; 1605 // Note: if one (or more) thread(s) is suspended right after the 'isInited.load()`; 1606 // and restart after this thread has finished the initialization (i.e. a rare case),; 1607 // the only penalty we pay is a spurious 2nd lookup for an unknown function.; 1608 [[maybe_unused]] static const auto _res = []() {; 1609 gROOT->ProcessLine(""TF1::InitStandardFunctions();"");; 1610 isInited = true;; 1611 return true;; 1612 }();; 1613 return fFunctions->FindObject(name);; 1614}; 1615 ; 1616////////////////////////////////////////////////////////////////////////////////; 1617 ; 1618TFunctionTemplate *TROOT::GetFunctionTemplate(const char *name); 1619{; 1620 if (!gInterpreter) return nullptr;; 1621 ; 1622 if (!fFuncTemplate) fFuncTemplate = new TListOfFunctionTemplates(nullptr);; 1623 ; 1624 return (TFunctionTemplate*)fFuncTemplate->FindOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:61326,load,load,61326,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,2,['load'],['load']
Performance," Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Macros |; Functions |; Variables ; TROOT.h File Reference. #include ""TDirectory.h""; #include <atomic>; #include <string>; #include <vector>; #include <utility>. Include dependency graph for TROOT.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  ROOT::Internal::TParBranchProcessingRAII;  ; class  TROOT;  ROOT top level object description. More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Internal;  . Macros; #define gROOT   (ROOT::GetROOT());  . Functions; void ROOT::CallRecursiveRemoveIfNeeded (TObject &obj);  call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true. ;  ; void ROOT::DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ;  ; void ROOT::Internal::DisableParBranchProcessing ();  Globally disables the IMT use case of parallel branch processing, deactivating the corresponding locks. ;  ; void ROOT::EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ;  ; void ROOT::Internal::EnableParBranchProcessing ();  Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in ROOT, activating the required locks. ;  ; void ROOT::EnableThreadSafety ();  Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ;  ; TROOT * ROOT::GetROOT ();  ; TROOT * ROOT::Internal::GetROOT2 ();  ; UInt_t ROOT::GetThreadPoolSize ();  Returns the size of ROOT's thread pool. ;  ; Bool_t ROOT::IsImplicitMTEnabled ();  Returns true if the implicit multi-threading in RO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8h.html:1042,multi-thread,multi-threading,1042,doc/master/TROOT_8h.html,https://root.cern,https://root.cern/doc/master/TROOT_8h.html,1,['multi-thread'],['multi-threading']
Performance," Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TProofDrawHist Class Reference. . Definition at line 97 of file TProofDraw.h. Public Member Functions;  TProofDrawHist ();  ; void Begin (TTree *t) override;  See TProofDraw::Begin(). ;  ; void Init (TTree *) override;  See TProofDraw::Init(). ;  ; TClass * IsA () const override;  ; void SlaveBegin (TTree *) override;  See TProofDraw::SlaveBegin(). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Terminate () override;  See TProofDraw::Terminate(). ;  ;  Public Member Functions inherited from TProofDraw;  TProofDraw ();  Constructor. ;  ;  ~TProofDraw () override;  Destructor. ;  ; Bool_t Notify () override;  Called when a new tree is loaded. ;  ; Bool_t Process (Long64_t) override;  Executed for each entry. ;  ; void SlaveTerminate () override;  Executed by each slave after the processing has finished, before returning the results to the client. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; int Version () const override;  ;  Public Member Functions inherited from TSelector;  TSelector ();  Default selector ctor. ;  ;  ~TSelector () override;  Selector destructor. ;  ; virtual void Abort (const char *why, EAbort what=kAbortProcess);  Abort processing. ;  ; virtual EAbort GetAbort () const;  ; virtual Int_t GetEntry (Long64_t, Int_t=0);  ; virtual TList * GetInputList () const;  ; const char * GetOption () const override;  ; virtual TList * GetOutputList () const;  ; virtual Long64_t GetStatus () const;  ; virtual void ImportOutput (TList *output);  Imports the content of 'output' in the internal output list. ;  ; TClass * IsA () const override;  ; bool Notify () over",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDrawHist.html:1055,load,loaded,1055,doc/master/classTProofDrawHist.html,https://root.cern,https://root.cern/doc/master/classTProofDrawHist.html,1,['load'],['loaded']
Performance," ReferenceTMVA. ; Class to perform cross validation, splitting the dataloader into folds. ; Use html for explicit line breaking; Markdown links? class reference?; ce->BookMethod(dataloader, options);; ce->Evaluate();; Cross-evaluation will generate a new training and a test set dynamically from from K folds. These K folds are generated by splitting the input training set. The input test set is currently ignored.; This means that when you specify your DataSet you should include all events in your training set. One way of doing this would be the following:; dataloader->AddTree( signalTree, ""cls1"" );; dataloader->AddTree( background, ""cls2"" );; dataloader->PrepareTrainingAndTestTree( """", """", ""nTest_cls1=1:nTest_cls2=1"" );. Split Expression; See CVSplit documentation? ; Definition at line 124 of file CrossValidation.h. Public Member Functions;  CrossValidation (TString jobName, TMVA::DataLoader *dataloader, TFile *outputFile, TString options);  ;  CrossValidation (TString jobName, TMVA::DataLoader *dataloader, TString options);  ;  ~CrossValidation ();  ; void Evaluate ();  Does training, test set evaluation and performance evaluation of using cross-evalution. ;  ; Factory & GetFactory ();  ; UInt_t GetNumFolds ();  ; const std::vector< CrossValidationResult > & GetResults () const;  ; TString GetSplitExpr ();  ; void InitOptions ();  ; virtual TClass * IsA () const;  ; void ParseOptions ();  Method to parse the internal option string. ;  ; void SetNumFolds (UInt_t i);  ; void SetSplitExpr (TString splitExpr);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CrossValidation.html:1437,perform,performance,1437,doc/master/classTMVA_1_1CrossValidation.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CrossValidation.html,1,['perform'],['performance']
Performance," Reimplemented from RooAbsReal.; Definition at line 107 of file RooChebychev.cxx. ◆ evalAnaInt(). double RooChebychev::evalAnaInt ; (; const double ; a, . const double ; b . ); const. private . ◆ evaluate(). double RooChebychev::evaluate ; (; ); const. overrideprivatevirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 78 of file RooChebychev.cxx. ◆ getAnalyticalIntegral(). Int_t RooChebychev::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 122 of file RooChebychev.cxx. ◆ IsA(). TClass * RooChebychev::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 55 of file RooChebychev.h. ◆ selectNormalizationRange(). void RooChebychev::selectNormalizationRange ; (; const char * ; rangeName = nullptr, . bool ; force = false . ). overridevirtual . Interface function to force use of a given normalization range to interpret function value. ; Needed for functions or p.d.f.s whose shape depends on the choice of normalization such as RooAddPdf ; Reimplemented from RooAbsReal.; Definition at line 66 of file RooChebychev.cxx. ◆ Streamer(). void RooChebychev::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooChebychev::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChebychev.html:77283,perform,performed,77283,doc/master/classRooChebychev.html,https://root.cern,https://root.cern/doc/master/classRooChebychev.html,1,['perform'],['performed']
Performance," Reimplemented in TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TProfile2D, and TH2Poly.; Definition at line 380 of file TH2.cxx. ◆ DeclFileName(). static const char * TH2::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 133 of file TH2.h. ◆ DoFitSlices(). void TH2::DoFitSlices ; (; bool ; onX, . TF1 * ; f1, . Int_t ; firstbin, . Int_t ; lastbin, . Int_t ; cut, . Option_t * ; option, . TObjArray * ; arr . ). protectedvirtual . Definition at line 814 of file TH2.cxx. ◆ DoProfile(). TProfile * TH2::DoProfile ; (; bool ; onX, . const char * ; name, . Int_t ; firstbin, . Int_t ; lastbin, . Option_t * ; option . ); const. protectedvirtual . Reimplemented in TProfile2D.; Definition at line 1880 of file TH2.cxx. ◆ DoProjection(). TH1D * TH2::DoProjection ; (; bool ; onX, . const char * ; name, . Int_t ; firstbin, . Int_t ; lastbin, . Option_t * ; option . ); const. protectedvirtual . Internal (protected) method for performing projection on the X or Y axis called by ProjectionX or ProjectionY. ; Definition at line 2169 of file TH2.cxx. ◆ DoQuantiles(). TH1D * TH2::DoQuantiles ; (; bool ; onX, . const char * ; name, . Double_t ; prob . ); const. protectedvirtual . Implementation of quantiles for x or y. ; Definition at line 2527 of file TH2.cxx. ◆ Fill() [1/7]. Int_t TH2::Fill ; (; const char * ; namex, . Double_t ; w . ). inlineoverrideprotectedvirtual . Increment bin with namex with a weight w. ; if x is less than the low-edge of the first bin, the Underflow bin is incremented if x is equal to or greater than the upper edge of last bin, the Overflow bin is incremented; If the weight is not equal to 1, the storage of the sum of squares of weights is automatically triggered and the sum of the squares of weights is incremented by \( w^2 \) in the bin corresponding to x.; The function returns the corresponding bin number which has its content incremented by w. ; Reimplemented from TH1.; Reimplemented in TProfile2D, TH2Poly",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2.html:65651,perform,performing,65651,doc/master/classTH2.html,https://root.cern,https://root.cern/doc/master/classTH2.html,1,['perform'],['performing']
Performance," Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1698 of file TFile.cxx. ◆ Print(). void TFile::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, TXMLFile, TNetFile, TXNetFile, and TMemFile.; Definition at line 1706 of file TFile.cxx. ◆ ReadBuffer() [1/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Int_t ; len . ). virtual . Read a buffer from the file. ; This is the basic low level read operation. Returns kTRUE in case of failure. ; Reimplemented in TSQLFile, TXMLFile, TDavixFile, TXNetFile, TDCacheFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 1770 of file TFile.cxx. ◆ ReadBuffer() [2/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Read a buffer from the file at the offset 'pos' in the file. ; Returns kTRUE in case of failure. Compared to ReadBuffer(char*, Int_t), this routine does not change the cursor on the physical file representation (fD) if the data is in this TFile's cache. ; Reimplemented in TSQLFile, TXMLFile, TDavixFile, TXNetFile, TDCacheFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 1720 of file TFile.cxx. ◆ ReadBufferAsync(). Bool_t TFile::ReadBufferAsync ; (; Long64_t ; offs, . Int_t ; len . ). virtual . Reimplemented in TDavixFile, and TXNetFile.; Definition at line 5208 of file TFile.cxx. ◆ ReadBuffers(). Bool_t TFile::ReadBuffers ; (; char * ; buf, . Long64_t * ; pos, . Int_t * ; len, . Int_t ; nbuf . ). virtual . Read the nbuf blocks described in arrays pos and len. ; The value pos[i] is the seek position of block i of length len[i]. Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer. This function is overloaded by TNetFile, TWebFile, etc. Returns kTRUE in case of failure. ; Reimplemented in TDavixFile, TXNetFile, TDCacheFile, TNetFile, TS3WebFile, TWebFile, and TNetXNGFile.; Definition at line 1821 of file TFile.cxx. ◆ ReadBufferViaCa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:86537,cache,cache,86537,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,1,['cache'],['cache']
Performance," Return pointer to Geometry with name. TCollection * GetListOfEnums(Bool_t load = kFALSE). TCollection * GetListOfFunctionTemplates(). TCollection * GetListOfGlobals(Bool_t load = kFALSE); Return list containing the TGlobals currently defined.; Since globals are created and deleted during execution of the; program, we need to update the list of globals every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfGlobalFunctions(Bool_t load = kFALSE); Return list containing the TFunctions currently defined.; Since functions are created and deleted during execution of the; program, we need to update the list of functions every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfTypes(Bool_t load = kFALSE); Return a dynamic list giving access to all TDataTypes (typedefs); currently defined. The list is populated on demand. Calling; gROOT->GetListOfTypes()->FindObject(nameoftype);; will return the TDataType corresponding to 'nameoftype'. If the; TDataType is not already in the list itself and the type does exist,; a new TDataType will be created and added to the list. Calling; gROOT->GetListOfTypes()->ls(); // or Print(); list only the typedefs that have been previously accessed throught the; list (plus the builtins types). void Idle(UInt_t idleTimeInSec, const char* command = 0); Execute command when system has been idle for idleTimeInSec seconds. Int_t IgnoreInclude(const char* fname, const char* expandedfname); Return 1 if the name of the given include file corresponds to a class that; is known to ROOT, e.g. ""TLorentzVector.h"" versus TLorentzVector. void InitSystem(); Initialize operating system interface. void InitThreads(); Load and initialize thread library. void InitInterpreter(); Initialize the in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TROOT.html:29045,load,load,29045,root/html602/TROOT.html,https://root.cern,https://root.cern/root/html602/TROOT.html,2,['load'],['load']
Performance," Return status. The function returns the status of the histogram fit (see TH1::Fit); If no entries were selected, the function returns -1;; (i.e. fitResult is null is the fit is OK). Int_t FlushBaskets() const; Write to disk all the basket that have not yet been individually written. Return the number of bytes written or -1 in case of write error. const char* GetAlias(const char* aliasName) const; Returns the expanded value of the alias. Search in the friends if any. TBranch* GetBranch(const char* name); Return pointer to the branch with the given name in this tree or its friends. Bool_t GetBranchStatus(const char* branchname) const; Return status of branch with name branchname.; 0 if branch is not activated; 1 if branch is activated. Int_t GetBranchStyle(); Static function returning the current branch style.; style = 0 old Branch; style = 1 new Bronch. Long64_t GetCacheAutoSize(Bool_t withDefault = kFALSE) const; Used for automatic sizing of the cache.; Estimates a suitable size for the tree cache based on AutoFlush.; A cache sizing factor is taken from the configuration. If this yields zero; and withDefault is true the historical algoirthm for default size is used. TFile* GetCurrentFile() const; Return pointer to the current file. Long64_t GetEntries(const char* selection); Return the number of entries matching the selection.; Return -1 in case of errors. If the selection uses any arrays or containers, we return the number; of entries where at least one element match the selection.; GetEntries is implemented using the selector class TSelectorEntries,; which can be used directly (see code in TTreePlayer::GetEntries) for; additional option.; If SetEventList was used on the TTree or TChain, only that subset; of entries will be considered. Long64_t GetEntriesFriend() const; Return pointer to the 1st Leaf named name in any Branch of this Tree or; any branch in the list of friend trees. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0); Read all branches of entry and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:93801,cache,cache,93801,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,3,['cache'],['cache']
Performance," Returns 0 in case ""cl""; is not a base class. Takes care of multiple inheritance. Int_t GetBaseClassOffsetRecurse(const TClass* base); Return data member offset to the base class ""cl"".; Returns -1 in case ""cl"" is not a base class.; Returns -2 if cl is a base class, but we can't find the offset; because it's virtual.; Takes care of multiple inheritance. Int_t GetBaseClassOffset(const TClass* base); Return data member offset to the base class ""cl"".; Returns -1 in case ""cl"" is not a base class.; Takes care of multiple inheritance. TClass * GetBaseDataMember(const char* datamember); Return pointer to (base) class that contains datamember. TVirtualCollectionProxy * GetCollectionProxy() const; Return the proxy describinb the collection (if any). TClassStreamer * GetStreamer() const; Return the proxy describinb the collection (if any). TVirtualIsAProxy* GetIsAProxy() const; Return the proxy implementing the IsA functionality. TClass * GetClass(const char *name, Bool_t load, Bool_t silent); Static method returning pointer to TClass of the specified class name.; If load is true an attempt is made to obtain the class by loading; the appropriate shared library (directed by the rootmap file).; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used only for transient members); Returns 0 in case class is not found. THashTable * GetClassShortTypedefHash(); Return the class namesmassaged with TClassEdit::ShortType with kDropStlDefault. TClass * GetClass(const type_info& typeinfo, Bool_t load, Bool_t /* silent */); Return pointer to class with name. VoidFuncPtr_t GetDict(const char *cname); Return a pointer to the dictionary loading function generated by; rootcint. VoidFuncPtr_t GetDict(const type_info& info); Return a pointer to the dictionary loading function generated by; rootcint. TDataMember * GetDataMember(const char* datamember) const; Return pointer to datamember object with name ""datamember"". Long_t GetDataMemberOff",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClass.html:23266,load,load,23266,root/html526/TClass.html,https://root.cern,https://root.cern/root/html526/TClass.html,1,['load'],['load']
Performance," ReturnsName of the file containing the class declaration ; Definition at line 46 of file THLimitsFinder.h. ◆ FindGoodLimits() [1/3]. Int_t THLimitsFinder::FindGoodLimits ; (; TH1 * ; h, . Double_t ; xmin, . Double_t ; xmax . ). virtual . Compute the best axis limits for the X axis. ; If the bit kIsInteger is set, the number of channels is also recomputed. The axis parameters are replaced by the optimized parameters.; Example: With the input parameters xmin=-1.467 and xmax=2.344, the function will compute better limits -1.8 and 2.7 and store them in the axis. ; Reimplemented in TProofLimitsFinder.; Definition at line 53 of file THLimitsFinder.cxx. ◆ FindGoodLimits() [2/3]. Int_t THLimitsFinder::FindGoodLimits ; (; TH1 * ; h, . Double_t ; xmin, . Double_t ; xmax, . Double_t ; ymin, . Double_t ; ymax . ). virtual . Compute the best axis limits for the X and Y axis. ; If the bit kIsInteger is set, the number of channels is also recomputed. The axis parameters are replaced by the optimized parameters ; Reimplemented in TProofLimitsFinder.; Definition at line 78 of file THLimitsFinder.cxx. ◆ FindGoodLimits() [3/3]. Int_t THLimitsFinder::FindGoodLimits ; (; TH1 * ; h, . Double_t ; xmin, . Double_t ; xmax, . Double_t ; ymin, . Double_t ; ymax, . Double_t ; zmin, . Double_t ; zmax . ). virtual . Compute the best axis limits for the X, Y and Z axis. ; If the bit kIsInteger is set, the number of channels is also recomputed. The axis parameters are replaced by the optimized parameters ; Reimplemented in TProofLimitsFinder.; Definition at line 111 of file THLimitsFinder.cxx. ◆ GetLimitsFinder(). THLimitsFinder * THLimitsFinder::GetLimitsFinder ; (; ). static . Return pointer to the current finder. ; Create one if none exists Use SetLimitsFinder to set a user defined finder. ; Definition at line 153 of file THLimitsFinder.cxx. ◆ IsA(). TClass * THLimitsFinder::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimpl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHLimitsFinder.html:13221,optimiz,optimized,13221,doc/master/classTHLimitsFinder.html,https://root.cern,https://root.cern/doc/master/classTHLimitsFinder.html,1,['optimiz'],['optimized']
Performance, RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsMoment Abstract representation of moment in a RooAbsReal in a given RooRealVar; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical inte,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:25355,optimiz,optimized,25355,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,2,['optimiz'],['optimized']
Performance," RooAbsArg &dep) const override;  Force RooRealIntegral to offer all our actual observable for internal integration. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Advertises internal (analytical) integration capabilities. ;  ; RooDataHist * getCacheHist (const RooArgSet &nset) const;  ; RooDataHist * getCacheHist (const RooArgSet *nset=nullptr) const;  Return pointer to RooDataHist cache histogram for given choice of observables. ;  ; RooAbsPdf * getCachePdf (const RooArgSet &nset) const;  ; RooAbsPdf * getCachePdf (const RooArgSet *nset=nullptr) const;  Return pointer to RooHistPdf cache pdf for given choice of observables. ;  ; Int_t getInterpolationOrder () const;  ; double getValV (const RooArgSet *set=nullptr) const override;  Implementation of getVal() overriding default implementation of RooAbsPdf. ;  ; void setInterpolationOrder (int order);  Change the interpolation order that is used in RooHistPdf cache representation smoothing the RooDataHist shapes. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenCon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooIntegralMorph.html:7192,cache,cache,7192,doc/master/classRooIntegralMorph.html,https://root.cern,https://root.cern/doc/master/classRooIntegralMorph.html,1,['cache'],['cache']
Performance," RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual RooAbsArg&operator=(const RooAbsReal& other); virtual RooAbsArg&operator=(Double_t newValue); virtual RooAbsArg&operator=(Int_t ival); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsRealLValue.html:22908,optimiz,optimizeCacheMode,22908,root/html534/RooAbsRealLValue.html,https://root.cern,https://root.cern/root/html534/RooAbsRealLValue.html,1,['optimiz'],['optimizeCacheMode']
Performance," RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction2Binding<double,double,int>&operator=(const RooCFunction2Binding<double,double,int>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction2Binding_double_double_int_.html:19862,optimiz,optimizeCacheMode,19862,root/html602/RooCFunction2Binding_double_double_int_.html,https://root.cern,https://root.cern/root/html602/RooCFunction2Binding_double_double_int_.html,2,['optimiz'],['optimizeCacheMode']
Performance," RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction2Binding<double,int,double>&operator=(const RooCFunction2Binding<double,int,double>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction2Binding_double_int_double_.html:19862,optimiz,optimizeCacheMode,19862,root/html602/RooCFunction2Binding_double_int_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction2Binding_double_int_double_.html,2,['optimiz'],['optimizeCacheMode']
Performance," RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; void attachCache (const RooAbsArg *newOwner, const RooArgSet &cachedVars) override;  Initialize cache of dataset: attach variables of cache ArgSet to the corresponding TTree branches. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t _curIndex = 0;  ! Index associated with current event ;  ; RooAbsDataStore * _curStore = nullptr;  ! Datastore associated with current event ;  ; std::map< Int_t, RooAbsDataStore * > _dataMap;  ; RooCategory * _indexCat = nullptr;  ; bool _ownComps = false;  ! ;  ; std::unique_ptr< std::vector< double > > _weightBuffer;  ! Buffer for weights in case a batch of values is requested. ;  ;  Protected Attributes inherited from RooAbsDataStore; RooArgSet _cachedVars;  ; bool _doDirtyProp = true;  Switch do (de)activate dirty state propagation when loading a data point. ;  ; RooArgSet _vars;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kEx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCompositeDataStore.html:18462,load,loading,18462,doc/master/classRooCompositeDataStore.html,https://root.cern,https://root.cern/doc/master/classRooCompositeDataStore.html,1,['load'],['loading']
Performance," RooAbsBinning*_binning! Pointer to default binning definition; set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooErrorVar.html:34976,cache,cache,34976,root/html526/RooErrorVar.html,https://root.cern,https://root.cern/root/html526/RooErrorVar.html,3,['cache'],['cache']
Performance," RooAbsData::Poisson) const. void weightError(Double_t& lo, Double_t& hi, RooAbsData::ErrorType etype = RooAbsData::Poisson) const. Bool_t isWeighted() const. void loadValues(const RooAbsDataStore* tds, const RooFormulaVar* select = 0, const char* rangeName = 0, Int_t nStart = 0, Int_t nStop = 2000000000). Bool_t changeObservableName(const char* from, const char* to); Change name of internal observable named 'from' into 'to'. RooAbsArg* addColumn(RooAbsArg& var, Bool_t adjustRange = kTRUE); WVE ownership issue here!! Caller (a RooAbsData) should take ownership of all; arguments, but only does for the first one here... RooArgSet* addColumns(const RooArgList& varList); WVE ownership issue here!! Caller (a RooAbsData) should take ownership of all; arguments, but only does for the first one here... RooAbsDataStore* merge(const RooArgSet& allvars, list<RooAbsDataStore*> dstoreList). void append(RooAbsDataStore& other). Int_t numEntries() const. void reset(). void cacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0, Bool_t skipZeroWeights = kFALSE). void setArgStatus(const RooArgSet& set, Bool_t active). void attachCache(const RooAbsArg* newOwner, const RooArgSet& cachedVars); Initialize cache of dataset: attach variables of cache ArgSet; to the corresponding TTree branches. void resetCache(). void attachBuffers(const RooArgSet& extObs). void resetBuffers(). void dump(). RooAbsDataStore* clone(const char* newname = 0) const; Empty ctor. { return new RooCompositeDataStore(*this,newname) ; }. RooAbsDataStore* clone(const RooArgSet& vars, const char* newname = 0) const; { return new RooCompositeDataStore(*this,vars,newname) ; }. RooCategory* index(); { return _indexCat ; }. const RooAbsArg* cacheOwner(); { return 0 ; }. » Last changed: Tue Jun 30 14:32:14 2015 » Last generated: 2015-06-30 14:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCompositeDataStore.html:13229,cache,cacheArgs,13229,root/html602/RooCompositeDataStore.html,https://root.cern,https://root.cern/root/html602/RooCompositeDataStore.html,5,['cache'],"['cache', 'cacheArgs', 'cacheOwner', 'cachedVars']"
Performance," RooAbsData::Poisson) const. void weightError(Double_t& lo, Double_t& hi, RooAbsData::ErrorType etype = RooAbsData::Poisson) const. Bool_t isWeighted() const. void loadValues(const RooAbsDataStore* tds, const RooFormulaVar* select = 0, const char* rangeName = 0, Int_t nStart = 0, Int_t nStop = 2000000000). Bool_t changeObservableName(const char* from, const char* to); Change name of internal observable named 'from' into 'to'. RooAbsArg* addColumn(RooAbsArg& var, Bool_t adjustRange = kTRUE); WVE ownership issue here!! Caller (a RooAbsData) should take ownership of all; arguments, but only does for the first one here... RooArgSet* addColumns(const RooArgList& varList); WVE ownership issue here!! Caller (a RooAbsData) should take ownership of all; arguments, but only does for the first one here... RooAbsDataStore* merge(const RooArgSet& allvars, list<RooAbsDataStore*> dstoreList). void append(RooAbsDataStore& other). Int_t numEntries() const. void reset(). void cacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0, Bool_t skipZeroWeights = kFALSE). void setArgStatus(const RooArgSet& set, Bool_t active). void attachCache(const RooAbsArg* newOwner, const RooArgSet& cachedVars); Initialize cache of dataset: attach variables of cache ArgSet; to the corresponding TTree branches. void resetCache(). void attachBuffers(const RooArgSet& extObs). void resetBuffers(). void dump(). RooAbsDataStore* clone(const char* newname = 0) const; Empty ctor. { return new RooCompositeDataStore(*this,newname) ; }. RooAbsDataStore* clone(const RooArgSet& vars, const char* newname = 0) const; { return new RooCompositeDataStore(*this,vars,newname) ; }. RooCategory* index(); { return _indexCat ; }. const RooAbsArg* cacheOwner(); { return 0 ; }. » Last changed: Tue Mar 10 17:16:02 2015 » Last generated: 2015-03-10 17:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCompositeDataStore.html:12234,cache,cacheArgs,12234,root/html534/RooCompositeDataStore.html,https://root.cern,https://root.cern/root/html534/RooCompositeDataStore.html,5,['cache'],"['cache', 'cacheArgs', 'cacheOwner', 'cachedVars']"
Performance," RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction3PdfBinding<double,double,int,int>&operator=(const RooCFunction3PdfBinding<double,double,int,int>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3PdfBinding_double_double_int_int_.html:23548,optimiz,optimizeCacheMode,23548,root/html602/RooCFunction3PdfBinding_double_double_int_int_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3PdfBinding_double_double_int_int_.html,4,['optimiz'],['optimizeCacheMode']
Performance," RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::HistFactory::HistFactorySimultaneous&operator=(const RooStats::HistFactory::HistFactorySimultaneous&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HistFactory__HistFactorySimultaneous.html:24724,optimiz,optimizeCacheMode,24724,root/html602/RooStats__HistFactory__HistFactorySimultaneous.html,https://root.cern,https://root.cern/root/html602/RooStats__HistFactory__HistFactorySimultaneous.html,4,['optimiz'],['optimizeCacheMode']
Performance," RooAbsPdf.h:157; RooAbsPdf::generateRooFit::OwningPtr< RooDataSet > generate(const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={})See RooAbsPdf::generate(const RooArgSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,...Definition RooAbsPdf.h:57; RooAbsRealLValue::frameRooPlot * frame(const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) constCreate a new RooPlot on the heap with a drawing frame initialized for this object,...Definition RooAbsRealLValue.cxx:216; RooArgSetRooArgSet is a container object that can hold multiple RooAbsArg objects.Definition RooArgSet.h:24; RooDataHistContainer class to hold N-dimensional binned data.Definition RooDataHist.h:40; RooExpensiveObjectCache::getObjconst TObject * getObj(Int_t uniqueID)Retrieve payload object of cache element with given unique ID.Definition RooExpensiveObjectCache.cxx:115; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::Drawvoid Draw(Option_t *options=nullptr) overrideDraw this plot and all of the elements it contains.Definition RooPlot.cxx:637; RooWorkspacePersistable container for RooFit projects.Definition RooWorkspace.h:43; RooWorkspace::Printvoid Print(Option_t *opts=nullptr) const overridePrint contents of the workspace.Definition RooWorkspace.cxx:2095; RooWorkspace::pdfRooAbsPdf * pdf(RooStringView name) constRetrieve p.d.f (RooAbsPdf) with given name. A null pointer is returned if not found.Definition RooWorkspace.cxx:1214; RooWorkspace::expensiveObjectCacheRooExpensiveObjectCache & expensiveObjectCache()Definition RooWorkspace.h:166; RooWorkspace::varRooRealVar * var(RooStringView name) constRetrieve real-valued variable (RooRealVar) with given name. A null pointer is returned ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf903__numintcache_8C.html:6890,cache,cache,6890,doc/master/rf903__numintcache_8C.html,https://root.cern,https://root.cern/doc/master/rf903__numintcache_8C.html,1,['cache'],['cache']
Performance," RooAbsPdf::ExtendMode { CanNotBeExtended; CanBeExtended; MustBeExtended; };; enum RooAbsReal::ScaleType { Raw; Relative; NumEvent; RelativeExpected; };; enum RooAbsArg::ConstOpCode { Activate; DeActivate; ConfigChange; ValueChange; };; enum RooAbsArg::OperMode { Auto; AClean; ADirty; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; Bool_t_cdfBoundariesUse boundary conditions for CDFs.; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistry_codeReg! Auxiliary class keeping tracking of analytical integration code; RooDataHist*_dataHistUnowned pointer to underlying histogram; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooHistPdf.html:36024,cache,cache,36024,root/html526/RooHistPdf.html,https://root.cern,https://root.cern/root/html526/RooHistPdf.html,2,['cache'],"['cache', 'caches']"
Performance," RooAbsReal > RooAbsRealLValue::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. overridevirtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented from RooAbsReal.; Definition at line 1056 of file RooAbsRealLValue.cxx. ◆ DeclFileName(). static const char * RooAbsRealLValue::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 164 of file RooAbsRealLValue.h. ◆ fitRangeOKForPlotting(). bool RooAbsRealLValue::fitRangeOKForPlotting ; (; ); const. protected . Check if fit range is usable as plot range, i.e. ; it is neither open ended, nor empty ; Definition at line 493 of file RooAbsRealLValue.cxx. ◆ frame() [1/6]. RooPlot * RooAbsRealLValue::frame ; (; ); const. Create a new RooPlot on the heap with a drawing frame initialized for this object, but no plot contents. ; Use x.frame() as the first argument to a y.plotOn(...) method, for example. The caller is responsible for deleting the returned object.; The current fit range may not be open ended or empty. ; Definition at line 374 of file RooAbsRealLValue",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsRealLValue.html:76131,perform,performed,76131,doc/master/classRooAbsRealLValue.html,https://root.cern,https://root.cern/doc/master/classRooAbsRealLValue.html,1,['perform'],['performed']
Performance," RooAbsReal& _x, RooAbsReal& _y); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction2Binding_double_double_double_.html:24842,cache,cache,24842,root/html602/RooCFunction2Binding_double_double_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction2Binding_double_double_double_.html,10,['cache'],['cache']
Performance," RooAbsReal& _y, RooAbsReal& _z); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3Binding_double_double_double_bool_.html:24913,cache,cache,24913,root/html602/RooCFunction3Binding_double_double_double_bool_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3Binding_double_double_double_bool_.html,12,['cache'],['cache']
Performance," RooAbsReal& _z, RooAbsReal& _w); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction4Binding_double_double_double_double_bool_.html:25006,cache,cache,25006,root/html602/RooCFunction4Binding_double_double_double_double_bool_.html,https://root.cern,https://root.cern/root/html602/RooCFunction4Binding_double_double_double_double_bool_.html,6,['cache'],['cache']
Performance," RooAbsReal::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ; Parameters. [in]obsObservable to retrieve sampling hint for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented in RooLagrangianMorphFunc, RooAddition, RooFormulaVar, RooProduct, RooRealSumFunc, RooRealSumPdf, ParamHistFunc, PiecewiseInterpolation, RooMomentMorphFunc, RooParametricStepFunction, RooParamHistFunc, RooStepFunction, RooAddPdf, RooBinSamplingPdf, RooBinWidthFunction, RooHistFunc, RooHistPdf, RooLinearCombination, RooProdPdf, RooRangeBoolean, RooRealIntegral, and RooWrapperPdf.; Definition at line 3571 of file RooAbsReal.cxx. ◆ plotSanityChecks(). bool RooAbsReal::plotSanityChecks ; (; RooPlot * ; frame); const. protected . Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ; Definition at line 2860 of file RooAbsReal.cxx. ◆ preferredObservableScanOrder(). void RooAbsReal::preferredObservableScanOrder ; (; const RooArgSet & ; obs, . RooArgSet & ; orderedObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation indicates no preference and copies the original order of 'obs' into 'orderedObs' ; Reimplemented in RooIntegralMorph, and RooCachedPdf.; Definition at line 3694 of file RooAbsReal.cxx. ◆ printEvalErrors(). void RooAbsReal::printEvalErrors ; (; std::ostream & ; os = std::cout, . Int_t ; maxPerNode = 10000000 . ). static . Print all outstanding logged evaluation error on the given ostream. ; If maxPerNode is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:140360,perform,perform,140360,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['perform'],['perform']
Performance," RooAbsReal::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ; Parameters. [in]obsObservable to retrieve sampling hint for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented in RooLagrangianMorphFunc, RooAddition, RooFormulaVar, RooProduct, RooRealSumFunc, RooRealSumPdf, ParamHistFunc, PiecewiseInterpolation, RooMomentMorphFunc, RooParametricStepFunction, RooParamHistFunc, RooStepFunction, RooAddPdf, RooBinSamplingPdf, RooBinWidthFunction, RooHistFunc, RooHistPdf, RooLinearCombination, RooProdPdf, RooRangeBoolean, RooRealIntegral, and RooWrapperPdf.; Definition at line 3651 of file RooAbsReal.cxx. ◆ plotSanityChecks(). bool RooAbsReal::plotSanityChecks ; (; RooPlot * ; frame); const. protected . Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ; Definition at line 2945 of file RooAbsReal.cxx. ◆ plotSliceOn(). RooPlot * RooAbsReal::plotSliceOn ; (; RooPlot * ; frame, . const RooArgSet & ; sliceSet, . Option_t * ; drawOptions = ""L"", . double ; scaleFactor = 1.0, . ScaleType ; stype = Relative, . const RooAbsData * ; projData = nullptr . ); const. virtual . Deprecated:OBSOLETE – RETAINED FOR BACKWARD COMPATIBILITY. Use plotOn() with Slice() instead ; Definition at line 2253 of file RooAbsReal.cxx. ◆ preferredObservableScanOrder(). void RooAbsReal::preferredObservableScanOrder ; (; const RooArgSet & ; obs, . RooArgSet & ; orderedObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:141787,perform,perform,141787,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['perform'],['perform']
Performance," RooAddPdf, RooProdPdf, RooProduct, RooRealSumFunc, and RooRealSumPdf.; Definition at line 385 of file RooAbsArg.h. ◆ setCachedValue(). virtual void RooAbsArg::setCachedValue ; (; double ; , . bool ; = true . ). inlinevirtual . Overwrite the current value stored in this object, making it look like this object computed that value. ; recompute their values. ; Reimplemented in RooAbsCategory, and RooAbsReal.; Definition at line 481 of file RooAbsArg.h. ◆ setDataToken(). void RooAbsArg::setDataToken ; (; std::size_t ; index). Sets the token for retrieving results in the BatchMode. For internal use only. ; Definition at line 2555 of file RooAbsArg.cxx. ◆ setDirtyInhibit(). void RooAbsArg::setDirtyInhibit ; (; bool ; flag). static . Control global dirty inhibit mode. ; When set to true no value or shape dirty flags are propagated and cache is always considered to be dirty. ; Definition at line 204 of file RooAbsArg.cxx. ◆ setExpensiveObjectCache(). virtual void RooAbsArg::setExpensiveObjectCache ; (; RooExpensiveObjectCache & ; cache). inlinevirtual . Reimplemented in RooRealVar.; Definition at line 475 of file RooAbsArg.h. ◆ setLocalNoDirtyInhibit(). void RooAbsArg::setLocalNoDirtyInhibit ; (; bool ; flag); const. inline . Definition at line 674 of file RooAbsArg.h. ◆ SetName(). void RooAbsArg::SetName ; (; const char * ; name). overridevirtual . Set the name of the TNamed. ; WARNING: if the object is a member of a THashTable or THashList container the container must be Rehash()'ed after SetName(). For example the list of objects in the current directory is a THashList. ; Reimplemented from TNamed.; Definition at line 2367 of file RooAbsArg.cxx. ◆ SetNameTitle(). void RooAbsArg::SetNameTitle ; (; const char * ; name, . const char * ; title . ). overridevirtual . Set all the TNamed parameters (name and title). ; WARNING: if the name is changed and the object is a member of a THashTable or THashList container the container must be Rehash()'ed after SetName(). For example th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:97121,cache,cache,97121,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['cache'],['cache']
Performance," RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual RooAbsGenContext*RooAbsPdf::autoGenContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE, Bool_t autoBinned = kTRUE, const char* binnedTag = """") const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; virtual RooAbsGenContext*RooAbsPdf::binnedGenContext(const RooArgSet& vars, Bool_t verbose = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; virtual Bool_tchangeModel(const RooResolutionModel& newModel); voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsAnaConvPdf.html:3992,cache,cacheUniqueSuffix,3992,root/html534/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsAnaConvPdf.html,1,['cache'],['cacheUniqueSuffix']
Performance," RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual RooAbsGenContext*RooAbsPdf::autoGenContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE, Bool_t autoBinned = kTRUE, const char* binnedTag = """") const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; virtual RooAbsGenContext*RooAbsPdf::binnedGenContext(const RooArgSet& vars, Bool_t verbose = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCFunction1PdfBinding_double_double_.html:2625,cache,cacheUniqueSuffix,2625,root/html534/RooCFunction1PdfBinding_double_double_.html,https://root.cern,https://root.cern/root/html534/RooCFunction1PdfBinding_double_double_.html,16,['cache'],['cacheUniqueSuffix']
Performance," RooArgSet containing the objects that are both in the cached set 2 with a given index and an input argSet. ;  ; Int_t setObj (const RooArgSet *nset, const RooArgSet *iset, RooAbsCacheElement *obj, const TNamed *isetRangeName=nullptr);  Insert payload object 'obj' in cache indexed on nset,iset and isetRangeName. ;  ; Int_t setObj (const RooArgSet *nset, RooAbsCacheElement *obj, const TNamed *isetRangeName=nullptr);  Setter function without integration set. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void wireCache () override;  ;  Public Member Functions inherited from RooAbsCache;  RooAbsCache (const RooAbsCache &, RooAbsArg *owner=nullptr);  Copy constructor. Takes owner as argument and registers cache with owne. ;  ;  RooAbsCache (RooAbsArg *owner=nullptr);  Constructor. Takes owner as argument and register cache with owner. ;  ; virtual ~RooAbsCache ();  Destructor. Unregisters cache with owner. ;  ; void setOwner (RooAbsArg *owner);  Reset the owner, triggering the owner to register this cache in its list of caches. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static bool clearObsList ();  ; static const char * DeclFileName ();  ; static void doClearObsList (bool flag);  ;  Static Public Member Functions inherited from RooCacheManager< RooAbsCacheElement >; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsCache; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; bool _allowOptimize;  ; bool _clearOnRedirect;  ; bool _optCacheModeSeen;  ! ;  ; RooArgSet * _optCacheObservables = nullptr;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooObjCacheManager.html:5027,cache,cache,5027,doc/master/classRooObjCacheManager.html,https://root.cern,https://root.cern/doc/master/classRooObjCacheManager.html,2,['cache'],"['cache', 'caches']"
Performance," RooArgSet& obs, RooArgSet& orderedObs) const; 3695{; 3696 // Dummy implementation, do nothing; 3697 orderedObs.removeAll() ;; 3698 orderedObs.add(obs) ;; 3699}; 3700 ; 3701 ; 3702 ; 3703////////////////////////////////////////////////////////////////////////////////; 3704/// Calls createRunningIntegral(const RooArgSet&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&); 3705 ; 3706RooFit::OwningPtr<RooAbsReal> RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset); 3707{; 3708 return createRunningIntegral(iset,RooFit::SupNormSet(nset)) ;; 3709}; 3710 ; 3711 ; 3712 ; 3713////////////////////////////////////////////////////////////////////////////////; 3714/// Create an object that represents the running integral of the function over one or more observables listed in iset, i.e.; 3715/// \f[; 3716/// \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; 3717/// \f]; 3718///; 3719/// The actual integration calculation is only performed when the return object is evaluated. The name; 3720/// of the integral object is automatically constructed from the name of the input function, the variables; 3721/// it integrates and the range integrates over. The default strategy to calculate the running integrals is; 3722///; 3723/// - If the integrand (this object) supports analytical integration, construct an integral object; 3724/// that calculate the running integrals value by calculating the analytical integral each; 3725/// time the running integral object is evaluated; 3726///; 3727/// - If the integrand (this object) requires numeric integration to construct the running integral; 3728/// create an object of class RooNumRunningInt which first samples the entire function and integrates; 3729/// the sampled function numerically. This method has superior performance as there is no need to; 3730/// perform a full (numeric) integration for each evaluation of the running in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:158682,perform,performed,158682,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['perform'],['performed']
Performance," RooArgSet& projectedVars, Bool_t silent) const; voidTObject::MakeZombie(); Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgSet& set) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c, const RooArgProxy& d) const; Int_tRooAbsArg::numProxies() const; Int_tRooAbsTestStatistic::numSets() const; RooAbsTestStatistic::GOFOpModeRooAbsTestStatistic::operMode() const; virtual voidRooAbsArg::operModeHook(); voidoptimizeCaching(); voidoptimizeConstantTerms(Bool_t); virtual voidRooAbsArg::optimizeDirtyHook(const RooArgSet*); virtual RooPlot*RooAbsReal::plotAsymOn(RooPlot* frame, const RooAbsCategoryLValue& asymCat, RooAbsReal::PlotOpt o) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooAbsReal::PlotOpt o) const; RooPlot*RooAbsReal::plotOnWithErrorBand(RooPlot* frame, const RooFitResult& fr, Double_t Z, const RooArgSet* params, const RooLinkedList& argList, Bool_t method1) const; Bool_tRooAbsReal::plotSanityChecks(RooPlot* frame) const; voidRooAbsArg::printAttribList(ostream& os) const; virtual voidprintCompactTreeHook(ostream& os, const char* indent = """"); virtual Bool_tredirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); voidRooAbsArg::registerProxy(RooArgProxy& proxy); voidRooAbsArg::registerProxy(RooSetProxy& proxy); voidRooAbsArg::registerProxy(RooListProxy& proxy); virtual RooArgSetrequiredExtraObservables() const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsOptTestStatistic.html:28234,optimiz,optimizeDirtyHook,28234,root/html526/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html526/RooAbsOptTestStatistic.html,3,['optimiz'],['optimizeDirtyHook']
Performance," RooArgSet&, RooLinkedList&); virtual voidprintCompactTreeHook(ostream&, const char*); virtual Bool_tredirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); voidreset(); Int_tsetObj(const RooArgSet* nset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Int_tsetObj(const RooArgSet* nset, const RooArgSet* iset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); virtual voidShowMembers(TMemberInspector& insp, char* parent); voidsterilize(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. Int_t_lastIndexLast slot accessed; Int_t_maxSizeMaximum size; RooNormSetCache*_nsetCache! Normalization/Integration set manager; RooAbsCacheElement**_object! Payload; RooAbsArg*RooAbsCache::_ownerPointer to owning RooAbsArg; Int_t_sizeActual use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCacheManager<T> reset(); Clear the cache. void RooCacheManager<T> sterilize(); Clear the cache payload but retain slot mapping w.r.t to; normalization and integration sets. Int_t RooCacheManager<T> setObj(const RooArgSet* nset, const RooArgSet* iset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Insert payload object 'obj' in cache indexed on nset,iset and isetRangeName. T* RooCacheManager<T> getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0); Retrieve payload object indexed on nset,uset amd isetRangeName; If sterileIdx is not null, it is set to the index of the sterile; slot in cacse such a slot is recycled. T* RooCacheManager<T> getObjByIndex(Int_t index) const; Retrieve payload object by slot index. const RooNameSet* RooCacheManager<T> nameSet1ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. const RooNameSet* RooCacheManager<T> nameSet2ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. T* getObj(const RooArgSet* nset, Int_t* st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCacheManager_RooAbsCacheElement_.html:3317,cache,cache,3317,root/html526/RooCacheManager_RooAbsCacheElement_.html,https://root.cern,https://root.cern/root/html526/RooCacheManager_RooAbsCacheElement_.html,1,['cache'],['cache']
Performance," RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooCFunction3Ref<double,double,double,double>funcFunction pointer reference; RooRealProxyxArgument reference; RooRealProxyyArgument reference; RooRealProxyzArgument reference.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3PdfBinding_double_double_double_double_.html:45046,cache,cache,45046,root/html602/RooCFunction3PdfBinding_double_double_double_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3PdfBinding_double_double_double_double_.html,2,['cache'],['cache']
Performance," RooArgSet_cachedVars! External variables cached with this data set; RooAbsDataStore*_dstoreData storage implementation; TIterator*_iterator! Iterator over dimension variables; static Int_tRooPrintable::_nameLength; map<std::string,RooAbsData*>_ownedComponentsOwned external components; RooArgSet_varsDimensions of this data set; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void setDefaultStorageType(RooAbsData::StorageType s). void claimVars(RooAbsData* ). Bool_t releaseVars(RooAbsData* ); If return value is true variables can be deleted. ~RooAbsData(); Destructor. void convertToVectorStore(); Convert tree-based storage to vector-based storage. Bool_t changeObservableName(const char* from, const char* to). void fill(). Int_t numEntries() const. void reset(). const RooArgSet* get(Int_t index) const. void cacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0); Internal method -- Cache given set of functions with data. void resetCache(); Internal method -- Remove cached function values. void attachCache(const RooAbsArg* newOwner, const RooArgSet& cachedVars); Internal method -- Attach dataset copied with cache contents to copied instances of functions. void setArgStatus(const RooArgSet& set, Bool_t active). void setDirtyProp(Bool_t flag); Control propagation of dirty flags from observables in dataset. RooAbsData* reduce(const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); Create a reduced copy of this dataset. The caller takes ownership of the returned dataset. The following optional named arguments are accepted. SelectVars(const RooArgSet& vars) -- Only retain the listed observables in the output datas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsData.html:15037,cache,cacheArgs,15037,root/html532/RooAbsData.html,https://root.cern,https://root.cern/root/html532/RooAbsData.html,1,['cache'],['cacheArgs']
Performance," RooArgSet selectFromSet2 (RooArgSet const &argSet, int index) const;  Create RooArgSet containing the objects that are both in the cached set 2 with a given index and an input argSet. ;  ; Int_t setObj (const RooArgSet *nset, const RooArgSet *iset, RooAbsCacheElement *obj, const TNamed *isetRangeName=nullptr);  Insert payload object 'obj' in cache indexed on nset,iset and isetRangeName. ;  ; Int_t setObj (const RooArgSet *nset, RooAbsCacheElement *obj, const TNamed *isetRangeName=nullptr);  Setter function without integration set. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void wireCache () override;  ;  Public Member Functions inherited from RooAbsCache;  RooAbsCache (const RooAbsCache &, RooAbsArg *owner=nullptr);  Copy constructor. Takes owner as argument and registers cache with owne. ;  ;  RooAbsCache (RooAbsArg *owner=nullptr);  Constructor. Takes owner as argument and register cache with owner. ;  ; virtual ~RooAbsCache ();  Destructor. Unregisters cache with owner. ;  ; void setOwner (RooAbsArg *owner);  Reset the owner, triggering the owner to register this cache in its list of caches. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static bool clearObsList ();  ; static const char * DeclFileName ();  ; static void doClearObsList (bool flag);  ;  Static Public Member Functions inherited from RooCacheManager< RooAbsCacheElement >; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsCache; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; bool _allowOptimize;  ; bool _clearOnRedirect;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooObjCacheManager.html:4914,cache,cache,4914,doc/master/classRooObjCacheManager.html,https://root.cern,https://root.cern/doc/master/classRooObjCacheManager.html,1,['cache'],['cache']
Performance," RooCachedPdf(); RooCachedPdf(const RooCachedPdf& other, const char* name = 0); RooCachedPdf(const char* name, const char* title, RooAbsPdf& _pdf); RooCachedPdf(const char* name, const char* title, RooAbsPdf& _pdf, const RooArgSet& cacheObs); virtual~RooCachedPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsCachedPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooCachedPdf.html:721,cache,cacheObs,721,root/html528/RooCachedPdf.html,https://root.cern,https://root.cern/root/html528/RooCachedPdf.html,3,['cache'],['cacheObs']
Performance," RooCachedPdf(); RooCachedPdf(const RooCachedPdf& other, const char* name = 0); RooCachedPdf(const char* name, const char* title, RooAbsPdf& _pdf); RooCachedPdf(const char* name, const char* title, RooAbsPdf& _pdf, const RooArgSet& cacheObs); virtual~RooCachedPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsCachedPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCachedPdf.html:721,cache,cacheObs,721,root/html534/RooCachedPdf.html,https://root.cern,https://root.cern/root/html534/RooCachedPdf.html,1,['cache'],['cacheObs']
Performance," RooCachedPdf(); RooCachedPdf(const RooCachedPdf& other, const char* name = 0); RooCachedPdf(const char* name, const char* title, RooAbsPdf& _pdf); RooCachedPdf(const char* name, const char* title, RooAbsPdf& _pdf, const RooArgSet& cacheObs); virtual~RooCachedPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsCachedPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCachedPdf.html:721,cache,cacheObs,721,root/html526/RooCachedPdf.html,https://root.cern,https://root.cern/root/html526/RooCachedPdf.html,1,['cache'],['cacheObs']
Performance," RooCachedReal(); RooCachedReal(const RooCachedReal& other, const char* name = 0); RooCachedReal(const char* name, const char* title, RooAbsReal& _func); RooCachedReal(const char* name, const char* title, RooAbsReal& _func, const RooArgSet& cacheObs); virtual~RooCachedReal(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsCachedReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooCachedReal.html:737,cache,cacheObs,737,root/html528/RooCachedReal.html,https://root.cern,https://root.cern/root/html528/RooCachedReal.html,3,['cache'],['cacheObs']
Performance," RooCachedReal(); RooCachedReal(const RooCachedReal& other, const char* name = 0); RooCachedReal(const char* name, const char* title, RooAbsReal& _func); RooCachedReal(const char* name, const char* title, RooAbsReal& _func, const RooArgSet& cacheObs); virtual~RooCachedReal(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsCachedReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCachedReal.html:736,cache,cacheObs,736,root/html534/RooCachedReal.html,https://root.cern,https://root.cern/root/html534/RooCachedReal.html,1,['cache'],['cacheObs']
Performance," RooCachedReal(); RooCachedReal(const RooCachedReal& other, const char* name = 0); RooCachedReal(const char* name, const char* title, RooAbsReal& _func); RooCachedReal(const char* name, const char* title, RooAbsReal& _func, const RooArgSet& cacheObs); virtual~RooCachedReal(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsCachedReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCachedReal.html:737,cache,cacheObs,737,root/html526/RooCachedReal.html,https://root.cern,https://root.cern/root/html526/RooCachedReal.html,1,['cache'],['cacheObs']
Performance," RooCompositeDataStore(); RooCompositeDataStore(const RooCompositeDataStore& other, const char* newname = 0); RooCompositeDataStore(const RooCompositeDataStore& other, const RooArgSet& vars, const char* newname = 0); RooCompositeDataStore(const char* name, const char* title, const RooArgSet& vars, RooCategory& indexCat, map<std::string,RooAbsDataStore*> inputData); virtual~RooCompositeDataStore(); voidTObject::AbstractMethod(const char* method) const; virtual RooAbsArg*addColumn(RooAbsArg& var, Bool_t adjustRange = kTRUE); virtual RooArgSet*addColumns(const RooArgList& varList); virtual voidappend(RooAbsDataStore& other); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidcacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0); const RooArgSet&RooAbsDataStore::cachedVars() const; virtual const RooAbsArg*cacheOwner(); virtual Bool_tchangeObservableName(const char* from, const char* to); virtual voidRooAbsDataStore::checkInit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual RooAbsDataStore*clone(const RooArgSet& vars, const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooAbsDataStore::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCompositeDataStore.html:1349,cache,cachedVars,1349,root/html526/RooCompositeDataStore.html,https://root.cern,https://root.cern/root/html526/RooCompositeDataStore.html,6,['cache'],"['cacheOwner', 'cachedVars']"
Performance," RooCompositeDataStore(); RooCompositeDataStore(const RooCompositeDataStore& other, const char* newname = 0); RooCompositeDataStore(const RooCompositeDataStore& other, const RooArgSet& vars, const char* newname = 0); RooCompositeDataStore(const char* name, const char* title, const RooArgSet& vars, RooCategory& indexCat, map<std::string,RooAbsDataStore*> inputData); virtual~RooCompositeDataStore(); voidTObject::AbstractMethod(const char* method) const; virtual RooAbsArg*addColumn(RooAbsArg& var, Bool_t adjustRange = kTRUE); virtual RooArgSet*addColumns(const RooArgList& varList); virtual voidappend(RooAbsDataStore& other); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidattachBuffers(const RooArgSet& extObs); virtual voidTObject::Browse(TBrowser* b); virtual voidcacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0); const RooArgSet&RooAbsDataStore::cachedVars() const; virtual const RooAbsArg*cacheOwner(); virtual Bool_tchangeObservableName(const char* from, const char* to); virtual voidRooAbsDataStore::checkInit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual RooAbsDataStore*clone(const char* newname = 0) const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual RooAbsDataStore*clone(const RooArgSet& vars, const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& name",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCompositeDataStore.html:1401,cache,cachedVars,1401,root/html532/RooCompositeDataStore.html,https://root.cern,https://root.cern/root/html532/RooCompositeDataStore.html,2,['cache'],"['cacheOwner', 'cachedVars']"
Performance," RooCompositeDataStore(); RooCompositeDataStore(const RooCompositeDataStore& other, const char* newname = 0); RooCompositeDataStore(const RooCompositeDataStore& other, const RooArgSet& vars, const char* newname = 0); RooCompositeDataStore(const char* name, const char* title, const RooArgSet& vars, RooCategory& indexCat, map<std::string,RooAbsDataStore*> inputData); virtual~RooCompositeDataStore(); voidTObject::AbstractMethod(const char* method) const; virtual RooAbsArg*addColumn(RooAbsArg& var, Bool_t adjustRange = kTRUE); virtual RooArgSet*addColumns(const RooArgList& varList); virtual voidappend(RooAbsDataStore& other); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidattachBuffers(const RooArgSet& extObs); virtual voidTObject::Browse(TBrowser* b); virtual voidcacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0, Bool_t skipZeroWeights = kFALSE); const RooArgSet&RooAbsDataStore::cachedVars() const; virtual const RooAbsArg*cacheOwner(); virtual Bool_tchangeObservableName(const char* from, const char* to); virtual voidRooAbsDataStore::checkInit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual RooAbsDataStore*clone(const char* newname = 0) const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual RooAbsDataStore*clone(const RooArgSet& vars, const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCompositeDataStore.html:1434,cache,cachedVars,1434,root/html534/RooCompositeDataStore.html,https://root.cern,https://root.cern/root/html534/RooCompositeDataStore.html,2,['cache'],"['cacheOwner', 'cachedVars']"
Performance," RooIntegralMorph, RooFFTConvPdf, and RooCachedPdf. ◆ forceAnalyticalInt(). bool RooAbsCachedPdf::forceAnalyticalInt ; (; const RooAbsArg & ; dep); const. overridevirtual . Force RooRealIntegral to offer all our actual observable for internal integration. ; Reimplemented from RooAbsReal.; Definition at line 322 of file RooAbsCachedPdf.cxx. ◆ getAnalyticalIntegralWN(). int RooAbsCachedPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Advertises internal (analytical) integration capabilities. ; Call is forwarded to RooHistPdf cache p.d.f of cache that is used for given choice of observables ; Reimplemented from RooAbsReal.; Definition at line 334 of file RooAbsCachedPdf.cxx. ◆ getCache(). RooAbsCachedPdf::PdfCacheElem * RooAbsCachedPdf::getCache ; (; const RooArgSet * ; nset, . bool ; recalculate = true . ); const. protected . Retrieve cache object associated with given choice of observables. ; If cache object does not exist, create and fill and register it on the fly. If recalculate=false recalculation of cache contents of existing caches that are marked dirty due to dependent parameter changes is suppressed. ; Definition at line 113 of file RooAbsCachedPdf.cxx. ◆ getCacheHist() [1/2]. RooDataHist * RooAbsCachedPdf::getCacheHist ; (; const RooArgSet & ; nset); const. inline . Definition at line 43 of file RooAbsCachedPdf.h. ◆ getCacheHist() [2/2]. RooDataHist * RooAbsCachedPdf::getCacheHist ; (; const RooArgSet * ; nset = nullptr); const. Return pointer to RooDataHist cache histogram for given choice of observables. ; Definition at line 100 of file RooAbsCachedPdf.cxx. ◆ getCachePdf() [1/2]. RooAbsPdf * RooAbsCachedPdf::getCachePdf ; (; const RooArgSet & ; nset); const. inline . Definition at line 39 of file RooAbsCachedPdf.h. ◆ getCachePdf() [2/2]. RooAbsPdf * RooAbsCachedPdf::getCachePdf ; (; const RooArgSet * ; nset = nullptr); const. R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCachedPdf.html:81534,cache,cache,81534,doc/master/classRooAbsCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsCachedPdf.html,1,['cache'],['cache']
Performance," RooIntegralMorph::RooIntegralMorph ; (; ). default . ◆ RooIntegralMorph() [2/3]. RooIntegralMorph::RooIntegralMorph ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _pdf1, . RooAbsReal & ; _pdf2, . RooAbsReal & ; _x, . RooAbsReal & ; _alpha, . bool ; cacheAlpha = false . ). Constructor with observables x, pdf shapes pdf1 and pdf2 which represent the shapes at the end points of the interpolation parameter alpha If doCacheAlpha is true, a two-dimensional cache is constructed in both alpha and x. ; Definition at line 101 of file RooIntegralMorph.cxx. ◆ RooIntegralMorph() [3/3]. RooIntegralMorph::RooIntegralMorph ; (; const RooIntegralMorph & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 119 of file RooIntegralMorph.cxx. Member Function Documentation. ◆ actualObservables(). RooFit::OwningPtr< RooArgSet > RooIntegralMorph::actualObservables ; (; const RooArgSet & ; nset); const. overrideprotectedvirtual . Observable to be cached for given choice of normalization. ; Returns the 'x' observable unless doCacheAlpha is set in which case a set with both x and alpha ; Implements RooAbsCachedPdf.; Definition at line 134 of file RooIntegralMorph.cxx. ◆ actualParameters(). RooFit::OwningPtr< RooArgSet > RooIntegralMorph::actualParameters ; (; const RooArgSet & ; nset); const. overrideprotectedvirtual . Parameters of the cache. ; Returns parameters of both pdf1 and pdf2 and parameter cache, in case doCacheAlpha is not set. ; Implements RooAbsCachedPdf.; Definition at line 148 of file RooIntegralMorph.cxx. ◆ cacheAlpha(). bool RooIntegralMorph::cacheAlpha ; (; ); const. inline . Definition at line 45 of file RooIntegralMorph.h. ◆ Class(). static TClass * RooIntegralMorph::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooIntegralMorph::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooIntegralMorph::Class_Version ; (; ). in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooIntegralMorph.html:81975,cache,cached,81975,doc/master/classRooIntegralMorph.html,https://root.cern,https://root.cern/doc/master/classRooIntegralMorph.html,1,['cache'],['cached']
Performance," RooKeysPdf. If you are a new user,; please use the first constructor form. RooNDKeysPdf(const char* name, const char* title, RooAbsReal& x, RooAbsReal& y, RooDataSet& data, TString options = ""a"", Double_t rho = 1., Double_t nSigma = 3, Bool_t rotate = kTRUE); Backward compatibility constructor for Roo2DKeysPdf. If you are a new user,; please use the first constructor form. RooNDKeysPdf(const RooNDKeysPdf& other, const char* name = 0); Constructor. ~RooNDKeysPdf(). createPdf(Bool_t firstCall = kTRUE) const; evaluation order of constructor. setOptions() const; set the configuration. initialize() const; initialization. loadDataSet(Bool_t firstCall) const; copy the dataset and calculate some useful variables. mirrorDataSet() const; determine mirror dataset.; mirror points are added around the physical boundaries of the dataset; Two steps:; 1. For each entry, determine if it should be mirrored (the mirror configuration).; 2. For each mirror configuration, make the mirror points. loadWeightSet() const. calculateShell(RooNDKeysPdf::BoxInfo* bi) const; determine points in +/- nSigma shell around the box determined by the variable; ranges. These points are needed in the normalization, to determine probability; leakage in and out of the box. calculatePreNorm(RooNDKeysPdf::BoxInfo* bi) const; bi->nEventsBMSW=0.;; bi->nEventsBW=0.;. sortDataIndices(RooNDKeysPdf::BoxInfo* bi = 0) const; sort entries, as needed for loopRange(). calculateBandWidth() const. gauss(vector<Double_t>& x, vector<vector<Double_t> >& weights) const; loop over all closest point to x, as determined by loopRange(). loopRange(vector<Double_t>& x, map<Int_t,Bool_t>& ibMap) const; determine closest points to x, to loop over in evaluate(). boxInfoInit(RooNDKeysPdf::BoxInfo* bi, const char* rangeName, Int_t code) const. evaluate() const. getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const. analyticalIntegral(Int_t code, const char* rangeName = 0) const. TObject* clone(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNDKeysPdf.html:51218,load,loadWeightSet,51218,root/html602/RooNDKeysPdf.html,https://root.cern,https://root.cern/root/html602/RooNDKeysPdf.html,2,['load'],['loadWeightSet']
Performance," RooLinkedList& norms, const RooLinkedList& imps, const RooLinkedList& ints, const RooLinkedList& cross) const; static Bool_tRooAbsArg::inhibitDirty(); voidinitializeFromCmdArgList(const RooArgSet& fullPdfSet, const RooLinkedList& l); TStringRooAbsReal::integralNameSuffix(const RooArgSet& iset, const RooArgSet* nset = 0, const char* rangeName = 0, Bool_t omitEmpty = kFALSE) const; Bool_tRooAbsReal::isSelectedComp() const; virtual Bool_tRooAbsReal::isValid() const; virtual Bool_tRooAbsReal::isValidReal(Double_t value, Bool_t printError = kFALSE) const; RooAbsReal*makeCondPdfRatioCorr(RooAbsReal& term, const RooArgSet& termNset, const RooArgSet& termImpSet, const char* normRange, const char* refRange) const; voidRooAbsReal::makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars, RooArgSet& projectedVars, Bool_t silent) const; const char*makeRGPPName(const char* pfx, const RooArgSet& term, const RooArgSet& iset, const RooArgSet& nset, const char* isetRangeName) const; voidTObject::MakeZombie(); Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgSet& set) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c, const RooArgProxy& d) const; Int_tRooAbsArg::numProxies() const; virtual voidRooAbsArg::operModeHook(); virtual voidRooAbsArg::optimizeDirtyHook(const RooArgSet*); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooArgSet& params, Bool_t showConstants = kFALSE, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProdPdf.html:35849,optimiz,optimizeDirtyHook,35849,root/html528/RooProdPdf.html,https://root.cern,https://root.cern/root/html528/RooProdPdf.html,3,['optimiz'],['optimizeDirtyHook']
Performance," RooNumCdf(const RooNumCdf& other, const char* name = 0); RooNumCdf(const char* name, const char* title, RooAbsPdf& _pdf, RooRealVar& _x, const char* binningName = ""cache""); virtual~RooNumCdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsCachedReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNumCdf.html:1006,cache,cache,1006,root/html528/RooNumCdf.html,https://root.cern,https://root.cern/root/html528/RooNumCdf.html,4,['cache'],['cache']
Performance," RooNumCdf(const RooNumCdf& other, const char* name = 0); RooNumCdf(const char* name, const char* title, RooAbsPdf& _pdf, RooRealVar& _x, const char* binningName = ""cache""); virtual~RooNumCdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsCachedReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumCdf.html:1006,cache,cache,1006,root/html526/RooNumCdf.html,https://root.cern,https://root.cern/root/html526/RooNumCdf.html,1,['cache'],['cache']
Performance," RooNumRunningInt(const RooNumRunningInt& other, const char* name = 0); RooNumRunningInt(const char* name, const char* title, RooAbsReal& _func, RooRealVar& _x, const char* binningName = ""cache""); virtual~RooNumRunningInt(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsCachedReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNumRunningInt.html:1214,cache,cache,1214,root/html528/RooNumRunningInt.html,https://root.cern,https://root.cern/root/html528/RooNumRunningInt.html,4,['cache'],['cache']
Performance," RooNumRunningInt(const RooNumRunningInt& other, const char* name = 0); RooNumRunningInt(const char* name, const char* title, RooAbsReal& _func, RooRealVar& _x, const char* binningName = ""cache""); virtual~RooNumRunningInt(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsCachedReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumRunningInt.html:1214,cache,cache,1214,root/html526/RooNumRunningInt.html,https://root.cern,https://root.cern/root/html526/RooNumRunningInt.html,1,['cache'],['cache']
Performance," RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); RooObjCacheManager(RooAbsArg* owner = 0, Int_t maxSize = 10, Bool_t clearCacheOnServerRedirect = kTRUE); virtual~RooObjCacheManager(); Int_tRooCacheManager<RooAbsCacheElement>::cacheSize() const; static TClass*Class(); static Bool_tclearObsList(); static voiddoClearObsList(Bool_t flag); virtual voidfindConstantNodes(const RooArgSet&, RooArgSet&, RooLinkedList&); RooAbsCacheElement*RooCacheManager<RooAbsCacheElement>::getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); RooAbsCacheElement*RooCacheManager<RooAbsCacheElement>::getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx, const char* isetRangeName); RooAbsCacheElement*RooCacheManager<RooAbsCacheElement>::getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0); RooAbsCacheElement*RooCacheManager<RooAbsCacheElement>::getObjByIndex(Int_t index) const; virtual voidinsertObjectHook(RooAbsCacheElement&); virtual TClass*IsA() const; Int_tRooCa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooObjCacheManager.html:1167,cache,cacheSize,1167,root/html532/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html532/RooObjCacheManager.html,1,['cache'],['cacheSize']
Performance," RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); RooObjCacheManager(RooAbsArg* owner = 0, Int_t maxSize = 2, Bool_t clearCacheOnServerRedirect = kTRUE, Bool_t allowOptimize = kFALSE); virtual~RooObjCacheManager(); Int_tRooCacheManager<RooAbsCacheElement>::cacheSize() const; static TClass*Class(); static Bool_tclearObsList(); static voiddoClearObsList(Bool_t flag); virtual voidfindConstantNodes(const RooArgSet&, RooArgSet&, RooLinkedList&); RooAbsCacheElement*RooCacheManager<RooAbsCacheElement>::getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); RooAbsCacheElement*RooCacheManager<RooAbsCacheElement>::getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx, const char* isetRangeName); RooAbsCacheElement*RooCacheManager<RooAbsCacheElement>::getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0); RooAbsCacheElement*RooCacheManager<RooAbsCacheElement>::getObjByIndex(Int_t index) const; virtual voidinsertObjectHook(RooAbsCacheElement&); virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooObjCacheManager.html:1197,cache,cacheSize,1197,root/html534/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html534/RooObjCacheManager.html,1,['cache'],['cacheSize']
Performance," RooPolynomialRooPolynomial implements a polynomial p.d.f of the form.Definition RooPolynomial.h:25; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; TStringBasic string class.Definition TString.h:139; TString::AppendTString & Append(const char *cs)Definition TString.h:572; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf505_asciicfgDefinition rf505_asciicfg.py:1; mTMarker mDefinition textangle.C:8; ; [#0] WARNING:InputArguments -- The parameter 's' with range [-10, 10] of the RooGaussian 'g' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; 1) 0x7ffc52bb96d8 RooRealVar:: f = 0.50733 +/- 0.020971 L(0 - 1) ""f""; 2) 0x7ffc52bb8b20 RooRealVar:: m = 0.0064018 +/- 0.053686 L(-10 - 10) ""m""; 3) 0x7ffc52bb92f0 RooRealVar:: p0 = 0.0073509 +/- 0.0078312 L(0 - 1) ""p0""; 4) 0x7ffc52bb8f08 RooRealVar:: s = 0.96516 +/- 0.047052 L(-10 - 10) ""s""; [#1] INFO:InputArguments -- RooArgSet::readFromStream(parameters): processing include file rf505_asciicfg_example.txt; 1) 0x7ffc52bb96d8 RooRealVar:: f = 0.45 +/- 0.03 L(0 - 1) ""f""; 2) 0x7ffc52bb8b20 RooRealVar:: m = 0.025 +/- 0.02 L(-10 - 10) ""m""; 3) 0x7ffc52bb92f0 RooRealVar:: p0 = 0.0022 +/- 0.0001 L(0 - 1) ""p0""; 4) 0x7ffc52bb8f08 RooRealVar:: s = 0.98 +/- 0.03 L(-10 - 10) ""s""; [#1] INFO:InputArguments -- RooArgSet::readFromStream(parameters): processing incl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf505__asciicfg_8C.html:4198,optimiz,optimization,4198,doc/master/rf505__asciicfg_8C.html,https://root.cern,https://root.cern/doc/master/rf505__asciicfg_8C.html,2,['optimiz'],['optimization']
Performance," RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsArg::printTitle(ostream& os) const; virtual voidRooAbsArg::printTree(ostream& os, TString indent = """") const; virtual voidRooAbsReal::printValue(ostream& os) const; const TH2*profileData() const; virtual Int_tTObject::Read(const char* name); virtual Bool_tRooAbsReal::readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Bool_tRooAbsArg::recursiveCheckDependents(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveCheckObservables(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveRedirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t recurseInNewSet = kTRUE); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRooAbsArg::redirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); voidRooAbsArg::registerCache(RooAbsCache& cache); voidRooAbsArg::removeServer(RooAbsArg& server, Bool_t force = kFALSE); voidRooAbsArg::replaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); voidTObject::ResetBit(UInt_t f); RooNumConvolution(); RooNumConvolution(const RooNumConvolution& other, const char* name = 0); RooNumConvolution(const char* name, const char* title, RooRealVar& convVar, RooAbsReal& pdf, RooAbsReal& resmodel, const RooNumConvolution* proto = 0); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNumConvolution.html:24872,cache,cache,24872,root/html602/RooNumConvolution.html,https://root.cern,https://root.cern/root/html602/RooNumConvolution.html,2,['cache'],['cache']
Performance," RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsArg::printTitle(ostream& os) const; virtual voidRooAbsArg::printTree(ostream& os, TString indent = """") const; virtual voidRooAbsReal::printValue(ostream& os) const; const TH2*profileData() const; virtual Int_tTObject::Read(const char* name); virtual Bool_tRooAbsReal::readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Bool_tRooAbsArg::recursiveCheckDependents(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveCheckObservables(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveRedirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t recurseInNewSet = kTRUE); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRooAbsArg::redirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); voidRooAbsArg::registerCache(RooAbsCache& cache); voidRooAbsArg::removeServer(RooAbsArg& server, Bool_t force = kFALSE); voidRooAbsArg::replaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); static voidRooAbsArg::setACleanADirty(Bool_t flag); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); static voidRooAbsReal::setCacheCheck(Bool_t flag); voidsetCallProfiling(Bool_t flag, Int_t nbinX = 40, Int_t nbinCall = 40, Int_t nCallHigh = 1000); voidsetCallWarning(Int_t threshold = 2000); voidsetConvolutionWindow(RooAbsReal& centerParam, RooAbsReal& widthPara",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumConvolution.html:23286,cache,cache,23286,root/html526/RooNumConvolution.html,https://root.cern,https://root.cern/root/html526/RooNumConvolution.html,2,['cache'],['cache']
Performance," RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsArg::printTitle(ostream& os) const; virtual voidRooAbsArg::printTree(ostream& os, TString indent = """") const; virtual voidRooAbsReal::printValue(ostream& os) const; const TH2*profileData() const; virtual Int_tTObject::Read(const char* name); virtual Bool_tRooAbsReal::readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Bool_tRooAbsArg::recursiveCheckDependents(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveCheckObservables(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveRedirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t recurseInNewSet = kTRUE); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRooAbsArg::redirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); voidRooAbsArg::registerCache(RooAbsCache& cache); voidRooAbsArg::removeServer(RooAbsArg& server, Bool_t force = kFALSE); voidRooAbsArg::replaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); static voidRooAbsArg::setACleanADirty(Bool_t flag); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); static voidRooAbsReal::setCacheCheck(Bool_t flag); voidsetCallProfiling(Bool_t flag, Int_t nbinX = 40, Int_t nbinCall = 40, Int_t nCallHigh = 1000); voidsetCallWarning(Int_t threshold = 2000); voidsetConvolutionWindow(RooAbsReal& centerParam, RooAbsRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNumConvolution.html:23856,cache,cache,23856,root/html532/RooNumConvolution.html,https://root.cern,https://root.cern/root/html532/RooNumConvolution.html,1,['cache'],['cache']
Performance," RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsArg::printTitle(ostream& os) const; virtual voidRooAbsArg::printTree(ostream& os, TString indent = """") const; virtual voidRooAbsReal::printValue(ostream& os) const; const TH2*profileData() const; virtual Int_tTObject::Read(const char* name); virtual Bool_tRooAbsReal::readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Bool_tRooAbsArg::recursiveCheckDependents(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveCheckObservables(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveRedirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t recurseInNewSet = kTRUE); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRooAbsArg::redirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); voidRooAbsArg::registerCache(RooAbsCache& cache); voidRooAbsArg::removeServer(RooAbsArg& server, Bool_t force = kFALSE); voidRooAbsArg::replaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); voidsetCallProfiling(Bool_t flag, Int_t nbinX = 40, Int_t nbinCall = 40, Int_t nCallHigh = 1000); voidsetCallWarning(Int_t threshold = 2000); voidsetConvolutionWindow(RooAbsReal& centerParam, Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNumConvolution.html:25142,cache,cache,25142,root/html534/RooNumConvolution.html,https://root.cern,https://root.cern/root/html534/RooNumConvolution.html,1,['cache'],['cache']
Performance," RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsArg::printTitle(ostream& os) const; virtual voidRooAbsArg::printTree(ostream& os, TString indent = """") const; virtual voidRooAbsReal::printValue(ostream& os) const; const TH2*profileData() const; virtual Int_tTObject::Read(const char* name); virtual Bool_tRooAbsReal::readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Bool_tRooAbsArg::recursiveCheckDependents(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveCheckObservables(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveRedirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t recurseInNewSet = kTRUE); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRooAbsArg::redirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); voidRooAbsArg::registerCache(RooAbsCache& cache); voidRooAbsArg::removeServer(RooAbsArg& server, Bool_t force = kFALSE); voidRooAbsArg::replaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); static voidRooAbsArg::setACleanADirty(Bool_t flag); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); static voidRooAbsReal::setCacheCheck(Bool_t flag); voidsetCallProfiling(Bool_t flag, Int_t nbinX = 40, Int_t nbinCall = 40, Int_t nCallHigh = 1000); voidsetCallWarning(Int_t threshold = 2000); voidsetConvolutionWindow(RooAbsReal& centerParam, RooAbsReal& widthParam, Double_t widthScaleFactor = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooNumConvolution.html:23773,cache,cache,23773,root/html530/RooNumConvolution.html,https://root.cern,https://root.cern/root/html530/RooNumConvolution.html,1,['cache'],['cache']
Performance," RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; void doEval (RooFit::EvalContext &) const override;  Interpolate between input distributions for all values of the observable in evalData. ;  ; double evaluate () const override;  Calculate and return current value of self. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classPiecewiseInterpolation.html:49865,cache,cached,49865,doc/master/classPiecewiseInterpolation.html,https://root.cern,https://root.cern/doc/master/classPiecewiseInterpolation.html,2,['cache'],"['cache', 'cached']"
Performance, RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistryRooAbsAnaConvPdf::_codeReg! Registry of analytical integration codes; RooObjCacheManagerRooAbsAnaConvPdf::_coefNormMgrCoefficient normalization manager; RooArgSet*RooAbsAnaConvPdf::_convNormSet! Subset of last normalization that applies to convolutions; RooListProxyRooAbsAnaConvPdf::_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*RooAbsAnaConvPdf::_convSetIter! Iterator over _convNormSet; RooRealProxyRooAbsAnaConvPdf::_convVarConvolution variable; RooRealProxy_delMistag; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooRealProxy_dm; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; Double_t_genB0Frac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooBCPGenDecay.html:41876,cache,cache,41876,root/html534/RooBCPGenDecay.html,https://root.cern,https://root.cern/root/html534/RooBCPGenDecay.html,1,['cache'],['cache']
Performance, RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistryRooAbsAnaConvPdf::_codeReg! Registry of analytical integration codes; RooObjCacheManagerRooAbsAnaConvPdf::_coefNormMgrCoefficient normalization manager; RooArgSet*RooAbsAnaConvPdf::_convNormSet! Subset of last normalization that applies to convolutions; RooListProxyRooAbsAnaConvPdf::_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*RooAbsAnaConvPdf::_convSetIter! Iterator over _convNormSet; RooRealProxyRooAbsAnaConvPdf::_convVarConvolution variable; RooRealProxy_delMistag; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooRealProxy_dm; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; Double_t_genFlavFrac!; Double_t_genFlavFracMix!; Double_t_genFlavFracUnmix!; Double_t_genMixFrac! do not persist; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooAr,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooBMixDecay.html:41859,cache,cache,41859,root/html534/RooBMixDecay.html,https://root.cern,https://root.cern/root/html534/RooBMixDecay.html,1,['cache'],['cache']
Performance," RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TIterator*_coefIter! do not persist; RooListProxy_coefList; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_t_lowestOrder; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooPolyVar.html:30881,cache,cache,30881,root/html526/RooPolyVar.html,https://root.cern,https://root.cern/root/html526/RooPolyVar.html,2,['cache'],['cache']
Performance, RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TIterator*_coefIter! do not persist; RooListProxy_coefList; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_t_lowestOrder; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooPolyVar.html:31548,cache,cache,31548,root/html530/RooPolyVar.html,https://root.cern,https://root.cern/root/html530/RooPolyVar.html,1,['cache'],['cache']
Performance, RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TIterator*_coefIter! do not persist; RooListProxy_coefList; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_t_lowestOrder; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integr,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooPolyVar.html:31923,cache,cache,31923,root/html532/RooPolyVar.html,https://root.cern,https://root.cern/root/html532/RooPolyVar.html,1,['cache'],['cache']
Performance," RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxyRooNumRunningInt::funcProxy to functions whose running integral is calculated; RooRealProxyRooNumRunningInt::xIntergrated observable. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNumCdf(const char* name, const char* title, RooAbsPdf& _pdf, RooRealVar& _x, const char* binningName = ""cache""); Construct a cumulative distribution function from given input p.d.f over observable x.; using a numeric sampling algorithm. Use binning named 'bname' to control sampling; granularity. RooNumCdf(const RooNumCdf& other, const char* name = 0); Copy constructor. ~RooNumCdf(); Destructor. void fillCacheObject(RooAbsCachedReal::FuncCacheElem& cacheFunc) const; Fill cache using running integral cache elements calculate(); method with specification of cdf-specific boundary conditions. TObject* clone(const char* newname) const; { return new RooNumCdf(*this,newname); }. » Last changed: Tue Jun 2 15:32:38 2015 » Last generated: 2015-06-02 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooNumCdf.html:39048,cache,cache,39048,root/html604/RooNumCdf.html,https://root.cern,https://root.cern/root/html604/RooNumCdf.html,4,['cache'],"['cache', 'cacheFunc']"
Performance," RooSuperCategory(const char* name, const char* title, const RooArgSet& inputCatList); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidRooAbsCategoryLValue::setBin(Int_t ibin, const char* rangeName = 0); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); voidRooAbsCategoryLValue::setConstant(Bool_t value = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); virtual Bool_tsetIndex(Int_t index, Bool_t printError = kTRUE); virtual Bool_tsetLabel(const char* label, Bool_t printError = kTRUE); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::shapeClientMIterator() const; virtual voidShowMembers(TMemberInspector& insp) const; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooSuperCategory.html:16079,cache,cache,16079,root/html602/RooSuperCategory.html,https://root.cern,https://root.cern/root/html602/RooSuperCategory.html,2,['cache'],['cache']
Performance," RooTreeDataStore::loadValues(ds) Skipping event #14 because y cannot accommodate the value -10.6852; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds) Skipping ...; [#0] WARNING:DataHandling -- RooTreeDataStore::loadValues(ds) Ignored 35 out-of-range events; RooDataSet::ds[x,y] = 65 entries; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds2) Skipping event #7 because y cannot accommodate the value 13.3845; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds2) Skipping event #8 because z cannot accommodate the value 10; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds2) Skipping event #12 because y cannot accommodate the value 13.7009; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds2) Skipping event #14 because y cannot accommodate the value -10.6852; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds2) Skipping ...; [#0] WARNING:DataHandling -- RooTreeDataStore::loadValues(ds2) Ignored 36 out-of-range events; RooDataSet::ds2[x,z,y] = 26 entries; [#1] INFO:DataHandling -- RooAbsReal::attachToTree(i) TTree Int_t branch i will be converted to double precision.; RooDataSet::ds3[x,i] = 100 entries; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds4) Skipping event #2 because i cannot accommodate the value 0; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds4) Skipping event #5 because i cannot accommodate the value 0; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds4) Skipping event #8 because i cannot accommodate the value 0; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds4) Skipping event #11 because i cannot accommodate the value 0; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds4) Skipping ...; [#0] WARNING:DataHandling -- RooTreeDataStore::loadValues(ds4) Ignored 33 out-of-range events; RooDataSet::ds4[i,x] = 67 entries; RooDataSet::dsABC[x,y,c] = 26 entries; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C version) ; Definition in file rf401_importttreethx.py.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf401__importttreethx_8py.html:5207,load,loadValues,5207,doc/master/rf401__importttreethx_8py.html,https://root.cern,https://root.cern/doc/master/rf401__importttreethx_8py.html,1,['load'],['loadValues']
Performance," RtypesCore.h:94; Double_tdouble Double_tDefinition RtypesCore.h:59; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; ClassDefOverride#define ClassDefOverride(name, id)Definition Rtypes.h:346; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; indexOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t indexDefinition TGWin32VirtualXProxy.cxx:168; TGeoCache.h; TObjArray.h; TObject.h; TCollection::SetOwnervirtual void SetOwner(Bool_t enable=kTRUE)Set whether this collection is the owner (enable==true) of its content.Definition TCollection.cxx:746; TGeoCacheStateClass storing the state of the cache at a given moment.Definition TGeoCache.h:28; TGeoHMatrixMatrix class used for computing global transformations Should NOT be used for node definition.Definition TGeoMatrix.h:458; TGeoManagerThe manager class for any TGeo geometry.Definition TGeoManager.h:44; TGeoMatrixGeometrical transformation package.Definition TGeoMatrix.h:38; TGeoNavigatorArrayDefinition TGeoNavigator.h:294; TGeoNavigatorArray::TGeoNavigatorArrayTGeoNavigatorArray(const TGeoNavigatorArray &)=delete; TGeoNavigatorArray::TGeoNavigatorArrayTGeoNavigatorArray(TGeoManager *mgr)Definition TGeoNavigator.h:304; TGeoNavigatorArray::fCurrentNavigatorTGeoNavigator * fCurrentNavigatorDefinition TGeoNavigator.h:296; TGeoNavigatorArray::AddNavigatorTGeoNavigator * AddNavigator()Add a new navigator to the array.Definition TGeoNavigator.cxx:2745; TGeoNavigatorArray::TGeoNavigatorArrayTGeoNavigatorArray()Definition TGeoNavigator.h:303; TGeoNavigatorArray::GetCurrentNavigatorTGeoNavigator * GetCurrentNavigator()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoNavigator_8h_source.html:16439,cache,cache,16439,doc/master/TGeoNavigator_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoNavigator_8h_source.html,1,['cache'],['cache']
Performance," Safety(const Double_t *point[3], Bool_t inside); compute maximum shift of a point in any direction that does not change its INSIDE/OUTSIDE state (does not cross shape boundaries). The state of the point have to be properly supplied.; Double_t *Normal(Double_t *point[3], Double_t *dir[3], Bool_t inside); returns director cosines of normal to the crossed shape surface from a given point towards a direction. One has to specify if the point is inside or outside shape. According to this, the normal will be outwards or inwards shape respectively. Normal components are statically stored by shape class, so it has to be copied after retrieval in a different array. Dividing shapes; Shapes can generally be divided along a given axis. Supported axis are X, Y, Z, Rxy, Phi, Rxyz. A given shape cannot be divided however on any axis. The general rule is that that divisions are possible on whatever axis that produces still known shapes as slices. The division of shapes should not be performed by TGeoShape::Divide() calls, but rather by TGeoVolume::Divide(). The algorithm for dividing a specific shape is known by the shape object, but is always invoked in a generic way from the volume level. Details on how to do that can be found in TGeoVolume class. One can see how all division options are interpreted and which is their result inside specific shape classes. Definition at line 25 of file TGeoShape.h. Public Types; enum  EShapeType { ;   kBitMask32 = 0xffffffff; , kGeoNoShape = 0; , kGeoBad = (1ULL << ( 0 )); , kGeoRSeg = (1ULL << ( 1 )); , ;   kGeoPhiSeg = (1ULL << ( 2 )); , kGeoThetaSeg = (1ULL << ( 3 )); , kGeoVisX = (1ULL << ( 4 )); , kGeoVisY = (1ULL << ( 5 )); , ;   kGeoVisZ = (1ULL << ( 6 )); , kGeoRunTimeShape = (1ULL << ( 7 )); , kGeoInvalidShape = (1ULL << ( 8 )); , kGeoTorus = (1ULL << ( 9 )); , ;   kGeoBox = (1ULL << ( 10 )); , kGeoPara = (1ULL << ( 11 )); , kGeoSph = (1ULL << ( 12 )); , kGeoTube = (1ULL << ( 13 )); , ;   kGeoTubeSeg = (1ULL << ( 14 )); , kGeoCone = (1ULL ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoShape.html:6874,perform,performed,6874,doc/master/classTGeoShape.html,https://root.cern,https://root.cern/doc/master/classTGeoShape.html,1,['perform'],['performed']
Performance," Sample, fit and plot convoluted pdf; # ----------------------------------------------------------------------; ; # Sample 1000 events in x from gxlx; data = lxg.generate({t}, 10000); ; # Fit gxlx to data; lxg.fitTo(data, PrintLevel=-1); ; # Plot data, pdf, landau (X) gauss pdf; frame = t.frame(Title=""landau (x) gauss convolution""); data.plotOn(frame); lxg.plotOn(frame); landau.plotOn(frame, LineStyle=""--""); ; # Draw frame on canvas; c = ROOT.TCanvas(""rf208_convolution"", ""rf208_convolution"", 600, 600); ROOT.gPad.SetLeftMargin(0.15); frame.GetYaxis().SetTitleOffset(1.4); frame.Draw(); ; c.SaveAs(""rf208_convolution.png""); [#1] INFO:Eval -- RooRealVar::setRange(t) new range named 'refrange_fft_lxg' created with bounds [-10,30]; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(lxg) creating new cache 0x85ab260 with pdf lx_CONV_gauss_CACHE_Obs[t]_NORM_t for nset (t) with code 0; [#1] INFO:Fitting -- RooAbsPdf::fitTo(lxg_over_lxg_Int[t]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_lxg_over_lxg_Int[t]_lxgData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(lxg) creating new cache 0x88084e0 with pdf lx_CONV_gauss_CACHE_Obs[t] for nset () with code 1 from preexisting content.; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(lxg) creating new cache 0x82935f0 with pdf lx_CONV_gauss_CACHE_Obs[t]_NORM_t for nset (t) with code 0; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C version) ; Definition in file rf208_convolution.py. tutorialsroofitrf208_convolution.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf208__convolution_8py.html:1984,cache,cache,1984,doc/master/rf208__convolution_8py.html,https://root.cern,https://root.cern/doc/master/rf208__convolution_8py.html,5,"['cache', 'optimiz']","['cache', 'optimization']"
Performance," Send a file to master or slave servers. Returns number of slaves; the file was sent to, maybe 0 in case master and slaves have the same; file system image, -1 in case of error.; If defined, send to worker 'wrk' only.; If defined, the full path of the remote path will be rfile.; If rfile = ""cache"" the file is copied to the remote cache instead of the sandbox; (to copy to the cache on a different name use rfile = ""cache:newname"").; The mask 'opt' is an or of ESendFileOpt:. kAscii (0x0) if set true ascii file transfer is used; kBinary (0x1) if set true binary file transfer is used; kForce (0x2) if not set an attempt is done to find out; whether the file really needs to be downloaded; (a valid copy may already exist in the cache; from a previous run); the bit is set by; UploadPackage, since the check is done elsewhere.; kForward (0x4) if set, ask server to forward the file to slave; or submaster (meaningless for slave servers).; kCpBin (0x8) Retrieve from the cache the binaries associated; with the file; kCp (0x10) Retrieve the files from the cache. Int_t Echo(const TObject* obj); Sends an object to master and workers and expect them to send back a; message with the output of its TObject::Print(). Returns -1 on error, the; number of workers that received the objects on success. Int_t Echo(const char* str); Sends a string to master and workers and expect them to echo it back to; the client via a message. It is a special case of the generic Echo(); that works with TObjects. Returns -1 on error, the number of workers that; received the message on success. Int_t SendObject(const TObject* obj, TProof::ESlaves list = kActive); Send object to master or slave servers. Returns number of slaves object; was sent to, -1 in case of error. Int_t SendPrint(Option_t* option = """"); Send print command to master server. Returns number of slaves message; was sent to. Returns -1 in case of error. void SetLogLevel(Int_t level, UInt_t mask = TProofDebug::kAll); Set server logging level. void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:66079,cache,cache,66079,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,6,['cache'],['cache']
Performance," Send a file to master or slave servers. Returns number of slaves; the file was sent to, maybe 0 in case master and slaves have the same; file system image, -1 in case of error.; If defined, send to worker 'wrk' only.; If defined, the full path of the remote path will be rfile.; If rfile = ""cache"" the file is copied to the remote cache instead of the sandbox; (to copy to the cache on a different name use rfile = ""cache:newname"").; The mask 'opt' is an or of ESendFileOpt:. kAscii (0x0) if set true ascii file transfer is used; kBinary (0x1) if set true binary file transfer is used; kForce (0x2) if not set an attempt is done to find out; whether the file really needs to be downloaded; (a valid copy may already exist in the cache; from a previous run); the bit is set by; UploadPackage, since the check is done elsewhere.; kForward (0x4) if set, ask server to forward the file to slave; or submaster (meaningless for slave servers).; kCpBin (0x8) Retrieve from the cache the binaries associated; with the file; kCp (0x10) Retrieve the files from the cache. Int_t SendObject(const TObject* obj, TProof::ESlaves list = kActive); Send object to master or slave servers. Returns number of slaves object; was sent to, -1 in case of error. Int_t SendPrint(Option_t* option = """"); Send print command to master server. Returns number of slaves message; was sent to. Returns -1 in case of error. void SetLogLevel(Int_t level, UInt_t mask = TProofDebug::kAll); Set server logging level. void SetRealTimeLog(Bool_t on = kTRUE); Switch ON/OFF the real-time logging facility. When this option is; ON, log messages from processing are sent back as they come, instead of; being sent back at the end in one go. This may help debugging or monitoring; in some cases, but, depending on the amount of log, it may have significant; consequencies on the load over the network, so it must be used with care. Int_t SetParallelSilent(Int_t nodes, Bool_t random = kFALSE); Tell PROOF how many slaves to use in parallel. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:57112,cache,cache,57112,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,6,['cache'],['cache']
Performance," Set the current branch style. (static function). style = 0 old Branch; style = 1 new Bronch. Int_t SetCacheSize(Long64_t cachesize = -1); Set maximum size of the file cache .; if cachesize = 0 the existing cache (if any) is deleted.; if cachesize = -1 (default) it is set to the AutoFlush value when writing; the Tree (default is 30 MBytes).; Returns 0 size set, cache was created if possible; -1 on error. Int_t SetCacheSizeAux(Bool_t autocache = kTRUE, Long64_t cacheSize = 0); Set the size of the file cache and create it if possible. If autocache is true:; this may be an autocreated cache, possibly enlarging an existing; autocreated cache. The size is calculated. The value passed in cacheSize:; cacheSize = 0 make cache if default cache creation is enabled; cacheSize = -1 make a default sized cache in any case. If autocache is false:; this is a user requested cache. cacheSize is used to size the cache.; This cache should never be automatically adjusted.; Returns 0 size set, or existing autosized cache almost large enough.; (cache was created if possible); -1 on error. Int_t SetCacheEntryRange(Long64_t first, Long64_t last); interface to TTreeCache to set the cache entry range; Returns 0 entry range set; -1 on error. void SetCacheLearnEntries(Int_t n = 10); interface to TTreeCache to set the number of entries for the learning phase. void SetCircular(Long64_t maxEntries); Enable/Disable circularity for this tree. if maxEntries > 0 a maximum of maxEntries is kept in one buffer/basket; per branch in memory.; Note that when this function is called (maxEntries>0) the Tree; must be empty or having only one basket per branch.; if maxEntries <= 0 the tree circularity is disabled. NOTE 1:; Circular Trees are interesting in online real time environments; to store the results of the last maxEntries events.; NOTE 2:; Calling SetCircular with maxEntries <= 0 is necessary before; merging circular Trees that have been saved on files.; NOTE 3:; SetCircular with maxEntries <= 0 is auto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTree.html:134142,cache,cache,134142,root/html604/TTree.html,https://root.cern,https://root.cern/root/html604/TTree.html,1,['cache'],['cache']
Performance," Set the initial size of the map used to store object and class; references during reading. The default size is kMapSize=503.; Increasing the default has the benefit that when reading many; small objects the map does not need to be resized too often; (the system is always dynamic, even with the default everything; will work, only the initial resizing will cost some time).; This method can only be called directly after the creation of; the TBuffer, before any reading is done. Globally this option; can be changed using SetGlobalReadParam(). void SetWriteParam(Int_t mapsize); Set the initial size of the hashtable used to store object and class; references during writing. The default size is kMapSize=503.; Increasing the default has the benefit that when writing many; small objects the hashtable does not get too many collisions; (the system is always dynamic, even with the default everything; will work, only a large number of collisions will cost performance).; For optimal performance hashsize should always be a prime.; This method can only be called directly after the creation of; the TBuffer, before any writing is done. Globally this option; can be changed using SetGlobalWriteParam(). void InitMap(); Create the fMap container and initialize them; with the null object. void ResetMap(); Delete existing fMap and reset map counter. Int_t ReadBuf(void* buf, Int_t max); Read max bytes from the I/O buffer into buf. The function returns; the actual number of bytes read. void WriteBuf(const void* buf, Int_t max); Write max bytes from buf into the I/O buffer. char * ReadString(char* s, Int_t max); Read string from I/O buffer. String is read till 0 character is; found or till max-1 characters are read (i.e. string s has max; bytes allocated). If max = -1 no check on number of character is; made, reading continues till 0 character is found. void WriteString(const char* s); Write string to I/O buffer. Writes string upto and including the; terminating 0. TProcessID * GetLastProcess",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBufferFile.html:40372,perform,performance,40372,root/html526/TBufferFile.html,https://root.cern,https://root.cern/root/html526/TBufferFile.html,7,['perform'],['performance']
Performance," SetDebug(Int_t level = 1, Long64_t min = 0, Long64_t max = 9999999); See TTree::SetDebug. void SetName(const char* name); See TTree::GetName. Long64_t GetEntries() const; Returns the total number of entries in the TProofChain, which is; the number of entries in the TDSet that it holds. Long64_t GetEntries(const char* sel); See TTree::GetEntries(const char *selection); Not implemented in TProofChain. Shouldn't be used. void Progress(Long64_t total, Long64_t processed); Changes the number of processed entries. Long64_t GetReadEntry() const; Returns the number of processed entries. void ReleaseProof(); Releases PROOF. Disconnect the ""progress"" signal. void ConnectProof(); Connects the proof - creates a ""DrawFeedback"" and connects the; ""Progress"" signal. Int_t Debug() const; {return fDebug;}. Long64_t Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0). TList * GetListOfClones(); { return 0; }. TObjArray * GetListOfBranches(); {return (fTree ? fTree->GetListOfBranches() : (TObjArray *)0); }. TObjArray * GetListOfLeaves(); {return (fTree ? fTree->GetListOfLeaves() : (TObjArray *)0);}. TList * GetListOfFriends() const; {return 0;}. TList * GetListOfAliases() const; {return 0;}. Int_t GetMakeClass() const; GetMakeClass is left non-virtual for efficiency reason.; Making it virtual affects the performance of the I/O. {return fMakeClass;}. Bool_t HasTreeHeader() const; { return (fTree ? kTRUE : kFALSE); }. void SetEventList(TEventList* evlist); { fEventList = evlist; }. void SetEntryList(TEntryList* enlist, Option_t* ); { fEntryList = enlist; }. » Author: G. Ganis Nov 2006 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TProofChain.h 30069 2009-09-08 15:23:21Z ganis $ » Last generated: 2010-09-23 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofChain.html:29673,perform,performance,29673,root/html528/TProofChain.html,https://root.cern,https://root.cern/root/html528/TProofChain.html,1,['perform'],['performance']
Performance," SetDebug(Int_t level = 1, Long64_t min = 0, Long64_t max = 9999999); See TTree::SetDebug. void SetName(const char* name); See TTree::GetName. Long64_t GetEntries() const; Returns the total number of entries in the TProofChain, which is; the number of entries in the TDSet that it holds. Long64_t GetEntries(const char* sel); See TTree::GetEntries(const char *selection); Not implemented in TProofChain. Shouldn't be used. void Progress(Long64_t total, Long64_t processed); Changes the number of processed entries. Long64_t GetReadEntry() const; Returns the number of processed entries. void ReleaseProof(); Releases PROOF. Disconnect the ""progress"" signal. void ConnectProof(); Connects the proof - creates a ""DrawFeedback"" and connects the; ""Progress"" signal. Int_t Debug() const; {return fDebug;}. Long64_t Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0). TList * GetListOfClones(); { return 0; }. TObjArray * GetListOfBranches(); {return (fTree ? fTree->GetListOfBranches() : (TObjArray *)0); }. TObjArray * GetListOfLeaves(); {return (fTree ? fTree->GetListOfLeaves() : (TObjArray *)0);}. TList * GetListOfFriends() const; {return 0;}. TList * GetListOfAliases() const; {return 0;}. Int_t GetMakeClass() const; GetMakeClass is left non-virtual for efficiency reason.; Making it virtual affects the performance of the I/O. {return fMakeClass;}. Bool_t HasTreeHeader() const; { return (fTree ? kTRUE : kFALSE); }. void SetEventList(TEventList* evlist); { fEventList = evlist; }. void SetEntryList(TEntryList* enlist, Option_t* ); { fEntryList = enlist; }. » Author: G. Ganis Nov 2006 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TProofChain.h 30069 2009-09-08 15:23:21Z ganis $ » Last generated: 2011-07-04 15:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofChain.html:30676,perform,performance,30676,root/html530/TProofChain.html,https://root.cern,https://root.cern/root/html530/TProofChain.html,1,['perform'],['performance']
Performance," SetDebug(Int_t level = 1, Long64_t min = 0, Long64_t max = 9999999); See TTree::SetDebug. void SetName(const char* name); See TTree::GetName. Long64_t GetEntries() const; Returns the total number of entries in the TProofChain, which is; the number of entries in the TDSet that it holds. Long64_t GetEntries(const char* sel); See TTree::GetEntries(const char *selection); Not implemented in TProofChain. Shouldn't be used. void Progress(Long64_t total, Long64_t processed); Changes the number of processed entries. Long64_t GetReadEntry() const; Returns the number of processed entries. void ReleaseProof(); Releases PROOF. Disconnect the ""progress"" signal. void ConnectProof(); Connects the proof - creates a ""DrawFeedback"" and connects the; ""Progress"" signal. Int_t Debug() const; {return fDebug;}. Long64_t Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0). TList * GetListOfClones(); { return 0; }. TObjArray * GetListOfBranches(); {return (fTree ? fTree->GetListOfBranches() : (TObjArray *)0); }. TObjArray * GetListOfLeaves(); {return (fTree ? fTree->GetListOfLeaves() : (TObjArray *)0);}. TList * GetListOfFriends() const; {return 0;}. TList * GetListOfAliases() const; {return 0;}. Int_t GetMakeClass() const; GetMakeClass is left non-virtual for efficiency reason.; Making it virtual affects the performance of the I/O. {return fMakeClass;}. Bool_t HasTreeHeader() const; { return (fTree ? kTRUE : kFALSE); }. void SetEventList(TEventList* evlist); { fEventList = evlist; }. void SetEntryList(TEntryList* enlist, Option_t* ); { fEntryList = enlist; }. » Author: G. Ganis Nov 2006 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TProofChain.h 30069 2009-09-08 15:23:21Z ganis $ » Last generated: 2011-11-03 20:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofChain.html:31061,perform,performance,31061,root/html532/TProofChain.html,https://root.cern,https://root.cern/root/html532/TProofChain.html,1,['perform'],['performance']
Performance," SetSniffer(TRootSniffer* sniff); Set TRootSniffer to the server; Server takes ownership over sniffer. Bool_t IsReadOnly() const; returns read-only mode. void SetReadOnly(Bool_t readonly); Set read-only mode for the server (default on); In read-only server is not allowed to change any ROOT object, registered to the server; Server also cannot execute objects method via exe.json request. void AddLocation(const char* prefix, const char* path); add files location, which could be used in the server; one could map some system folder to the server like AddLocation(""mydir/"",""/home/user/specials"");; Than files from this directory could be addressed via server like; http://localhost:8080/mydir/myfile.root. void SetJSROOT(const char* location); Set location of JSROOT to use with the server; One could specify address like:; https://root.cern.ch/js/3.3; http://web-docs.gsi.de/~linev/js/3.3; This allows to get new JSROOT features with old server,; reduce load on THttpServer instance, also startup time can be improved; When empty string specified (default), local copy of JSROOT is used (distributed with ROOT). void SetDefaultPage(const char* filename); Set file name of HTML page, delivered by the server when; http address is opened in the browser.; By default, $ROOTSYS/etc/http/files/online.htm page is used; When empty filename is specified, default page will be used. void SetDrawPage(const char* filename); Set file name of HTML page, delivered by the server when; objects drawing page is requested from the browser; By default, $ROOTSYS/etc/http/files/draw.htm page is used; When empty filename is specified, default page will be used. Bool_t CreateEngine(const char* engine); factory method to create different http engines; At the moment two engine kinds are supported:; civetweb (default) and fastcgi; Examples:; ""civetweb:8080"" or ""http:8080"" or "":8080"" - creates civetweb web server with http port 8080; ""fastcgi:9000"" - creates fastcgi server with port 9000; ""dabc:1237"" - create DABC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THttpServer.html:10038,load,load,10038,root/html534/THttpServer.html,https://root.cern,https://root.cern/root/html534/THttpServer.html,2,['load'],['load']
Performance," Sets marker style. void SetOpacity(Int_t percent); Sets opacity of the current window. This image manipulation routine; works by adding to a percent amount of neutral to each pixels RGB.; Since it requires quite some additional color map entries is it; only supported on displays with more than > 8 color planes (> 256; colors). void SetRGB(Int_t cindex, Float_t r, Float_t g, Float_t b); Sets color intensities the specified color index ""cindex"". cindex - color index; r, g, b - the red, green, blue intensities between 0.0 and 1.0. void SetTextAlign(Short_t talign = 11); Sets the text alignment. talign = txalh horizontal text alignment; talign = txalv vertical text alignment. void SetTextColor(Color_t cindex); Sets the color index ""cindex"" for text. Int_t SetTextFont(char* fontname, TVirtualX::ETextSetMode mode); Sets text font to specified name ""fontname"".This function returns 0 if; the specified font is found, 1 if it is not. mode - loading flag; mode = 0 search if the font exist (kCheck); mode = 1 search the font and load it if it exists (kLoad). void SetTextFont(Font_t fontnumber); Sets the current text font number. void SetTextMagnitude(Float_t mgn); Sets the current text magnification factor to ""mgn"". void SetTextSize(Float_t textsize); Sets the current text size to ""textsize"". void Sync(Int_t mode); Set synchronisation on or off.; mode : synchronisation on/off; mode=1 on; mode<>0 off. void UpdateWindow(Int_t mode); Updates or synchronises client and server once (not permanent).; according to ""mode"".; mode = 1 update; mode = 0 sync. void Warp(Int_t ix, Int_t iy, Window_t id = 0); Sets the pointer position.; ix - new X coordinate of pointer; iy - new Y coordinate of pointer; Coordinates are relative to the origin of the window id; or to the origin of the current window if id == 0. Int_t WriteGIF(char* name); Writes the current window into GIF file.; Returns 1 in case of success, 0 otherwise. void WritePixmap(Int_t wid, UInt_t w, UInt_t h, char* pxname); Writes the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TVirtualX.html:32655,load,loading,32655,root/html530/TVirtualX.html,https://root.cern,https://root.cern/root/html530/TVirtualX.html,10,['load'],"['load', 'loading']"
Performance," Sets marker style. void SetOpacity(Int_t percent); Sets opacity of the current window. This image manipulation routine; works by adding to a percent amount of neutral to each pixels RGB.; Since it requires quite some additional color map entries is it; only supported on displays with more than > 8 color planes (> 256; colors). void SetRGB(Int_t cindex, Float_t r, Float_t g, Float_t b); Sets color intensities the specified color index ""cindex"". cindex - color index; r, g, b - the red, green, blue intensities between 0.0 and 1.0. void SetTextAlign(Short_t talign = 11); Sets the text alignment. talign = txalh horizontal text alignment; talign = txalv vertical text alignment. void SetTextColor(Color_t cindex); Sets the color index ""cindex"" for text. Int_t SetTextFont(char* fontname, TVirtualX::ETextSetMode mode); Sets text font to specified name ""fontname"".This function returns 0 if; the specified font is found, 1 if it is not. mode - loading flag; mode = 0 search if the font exist (kCheck); mode = 1 search the font and load it if it exists (kLoad). void SetTextFont(Font_t fontnumber); Sets the current text font number. void SetTextMagnitude(Float_t mgn); Sets the current text magnification factor to ""mgn"". void SetTextSize(Float_t textsize); Sets the current text size to ""textsize"". void UpdateWindow(Int_t mode); Updates or synchronises client and server once (not permanent).; according to ""mode"".; mode = 1 update; mode = 0 sync. void Warp(Int_t ix, Int_t iy, Window_t id = 0); Sets the pointer position.; ix - new X coordinate of pointer; iy - new Y coordinate of pointer; Coordinates are relative to the origin of the window id; or to the origin of the current window if id == 0. Int_t WriteGIF(char* name); Writes the current window into GIF file.; Returns 1 in case of success, 0 otherwise. void WritePixmap(Int_t wid, UInt_t w, UInt_t h, char* pxname); Writes the pixmap ""wid"" in the bitmap file ""pxname"". wid - the pixmap address; w, h - the width and height of the pixmap",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualX.html:32556,load,loading,32556,root/html528/TVirtualX.html,https://root.cern,https://root.cern/root/html528/TVirtualX.html,2,['load'],"['load', 'loading']"
Performance," Short_t cycle); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TKey*TDirectory::FindKey(const char*) const; virtual TKey*TDirectory::FindKeyAny(const char*) const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; virtual TObject*FindObjectAny(const char* name) const; virtual TObject*FindObjectAnyFile(const char* name) const; const char*FindObjectClassName(const char* name) const; const char*FindObjectPathName(const TObject* obj) const; TObject*FindSpecialObject(const char* name, void*& where); TClass*FindSTLClass(const char* name, Bool_t load, Bool_t silent = kFALSE) const; voidForceStyle(Bool_t force = kTRUE); Bool_tFromPopUp() const; virtual TObject*TDirectory::Get(const char* namecycle); TApplication*GetApplication() const; virtual Int_tTDirectory::GetBufferSize() const; Int_tGetBuiltDate() const; Int_tGetBuiltTime() const; TClass*GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE) const; TClass*GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE) const; TSeqCollection*GetClipboard() const; TColor*GetColor(Int_t color) const; const char*GetConfigFeatures() const; const char*GetConfigOptions() const; const char*GetCutClassName() const; const char*GetDefCanvasName() const; virtual TDirectory*TDirectory::GetDirectory(const char* namecycle, Bool_t printError = false, const char* funcname = ""GetDirectory""); static Int_tGetDirLevel(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tGetEditHistograms() const; Int_tGetEditorMode() const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TROOT.html:4576,load,load,4576,root/html530/TROOT.html,https://root.cern,https://root.cern/root/html530/TROOT.html,2,['load'],['load']
Performance," Starting PROOF involves either connecting to a master server, which in turn will start a set of slave servers, or directly starting as master server (if master = """"). For a description of the arguments see the TProof ctor. Returns the number of started master or slave servers, returns 0 in case of error, in which case fValid remains false. ; Definition at line 154 of file TProofLite.cxx. ◆ InitDataSetManager(). Int_t TProofLite::InitDataSetManager ; (; ). private . Initialize the dataset manager from directives or from defaults Return 0 on success, -1 on failure. ; Definition at line 1412 of file TProofLite.cxx. ◆ IsA(). TClass * TProofLite::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TProof.; Definition at line 170 of file TProofLite.h. ◆ Load(). Int_t TProofLite::Load ; (; const char * ; macro, . Bool_t ; notOnClient = kFALSE, . Bool_t ; uniqueOnly = kTRUE, . TList * ; wrks = 0 . ). overridevirtual . Copy the specified macro in the cache directory. ; The macro file is uploaded if new or updated. If existing, the corresponding header basename(macro).h or .hh, is also uploaded. For the other arguments see TProof::Load(). Returns 0 in case of success and -1 in case of error. ; Reimplemented from TProof.; Definition at line 1539 of file TProofLite.cxx. ◆ MakeQueryResult(). TProofQueryResult * TProofLite::MakeQueryResult ; (; Long64_t ; nent, . const char * ; opt, . Long64_t ; fst, . TDSet * ; dset, . const char * ; selec . ). protected . Create a TProofQueryResult instance for this query. ; Definition at line 1000 of file TProofLite.cxx. ◆ NotifyStartUp(). void TProofLite::NotifyStartUp ; (; const char * ; action, . Int_t ; done, . Int_t ; tot . ). private . Notify setting-up operation message. ; Definition at line 667 of file TProofLite.cxx. ◆ operator=(). void TProofLite::operator= ; (; const TProofLite & ; ). private . ◆ PollForNewWorkers(). Int_t TProofLite::PollForNewWorkers ; (; ). overrideprotectedvirt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:54826,cache,cache,54826,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['cache'],['cache']
Performance," Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fOptions.ErrorDef(); }. bool IsValidError() const; return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit). { return fValidError; }. void SetPrintLevel(int level); set print level. { fOptions.SetPrintLevel(level); }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { if (maxfcn > 0) fOptions.SetMaxFunctionCalls(maxfcn); }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { if (maxiter > 0) fOptions.SetMaxIterations(maxiter); }. void SetTolerance(double tol); set the tolerance. { fOptions.SetTolerance(tol); }. void SetPrecision(double prec); set in the minimizer the objective function evaluation precision; ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. default case). { fOptions.SetPrecision(prec); }. void SetStrategy(int strategyLevel); set the strategy. { fOptions.SetStrategy(strategyLevel); }. void SetErrorDef(double up); set scale for calculating the errors. { fOptions.SetErrorDef(up); }. void SetValidError(bool on); flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit). { fValidError = on; }. void SetOptions(const ROOT::Math::MinimizerOptions& opt); set all options in one go. void SetDefaultOptions(); reset the defaut options (defined in MinimizerOptions). » Author: L. Moneta Fri Sep 22 15:06:47 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__Minimizer.html:14154,perform,perform,14154,root/html602/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__Minimizer.html,1,['perform'],['perform']
Performance," Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fOptions.ErrorDef(); }. bool IsValidError() const; return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit). { return fValidError; }. void SetPrintLevel(int level); set print level. { fOptions.SetPrintLevel(level); }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { if (maxfcn > 0) fOptions.SetMaxFunctionCalls(maxfcn); }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { if (maxiter > 0) fOptions.SetMaxIterations(maxiter); }. void SetTolerance(double tol); set the tolerance. { fOptions.SetTolerance(tol); }. void SetPrecision(double prec); set in the minimizer the objective function evaluation precision; ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. default case). { fOptions.SetPrecision(prec); }. void SetStrategy(int strategyLevel); set the strategy. { fOptions.SetStrategy(strategyLevel); }. void SetErrorDef(double up); set scale for calculating the errors. { fOptions.SetErrorDef(up); }. void SetValidError(bool on); flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit). { fValidError = on; }. void SetOptions(const ROOT::Math::MinimizerOptions& opt); set all options in one go. void SetDefaultOptions(); reset the defaut options (defined in MinimizerOptions). » Author: L. Moneta Fri Sep 22 15:06:47 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__Minimizer.html:13886,perform,perform,13886,root/html534/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__Minimizer.html,1,['perform'],['perform']
Performance," Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fOptions.ErrorDef(); }. bool IsValidError() const; return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit). { return fValidError; }. void SetPrintLevel(int level); set print level. { fOptions.SetPrintLevel(level); }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { if (maxfcn > 0) fOptions.SetMaxFunctionCalls(maxfcn); }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { if (maxiter > 0) fOptions.SetMaxIterations(maxiter); }. void SetTolerance(double tol); set the tolerance. { fOptions.SetTolerance(tol); }. void SetPrecision(double prec); set in the minimizer the objective function evaluation precision; ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. default case). { fOptions.SetPrecision(prec); }. void SetStrategy(int strategyLevel); set the strategy. { fOptions.SetStrategy(strategyLevel); }. void SetErrorDef(double up); set scale for calculating the errors. { fOptions.SetErrorDef(up); }. void SetValidError(bool on); flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit). { fValidError = on; }. void SetOptions(const ROOT::Math::MinimizerOptions& opt); set all options in one go. void SetDefaultOptions(); reset the defaut options (defined in MinimizerOptions). » Author: L. Moneta Fri Sep 22 15:06:47 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__Minimizer.html:14154,perform,perform,14154,root/html604/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__Minimizer.html,1,['perform'],['perform']
Performance, T > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Attributes |; Static Private Attributes |; List of all members ; ROOT::Internal::VecOps::RVecInlineStorageSize< T > Struct Template Reference. ; template<typename T>; struct ROOT::Internal::VecOps::RVecInlineStorageSize< T >The size of the inline storage of an RVec. ; Our policy is to allocate at least 8 elements (or more if they all fit into one cacheline) unless the size of the buffer with 8 elements would be over a certain maximum size. ; Definition at line 512 of file RVec.hxx. Static Public Attributes; static constexpr unsigned value;  . Static Private Attributes; static constexpr std::size_t cacheLineSize = 64;  ; static constexpr unsigned elementsPerCacheLine = (cacheLineSize - sizeof(SmallVectorBase)) / sizeof(T);  ; static constexpr unsigned maxInlineByteSize = 1024;  . #include <ROOT/RVec.hxx>; Member Data Documentation. ◆ cacheLineSize. template<typename T > . constexpr std::size_t ROOT::Internal::VecOps::RVecInlineStorageSize< T >::cacheLineSize = 64. staticconstexprprivate . Definition at line 518 of file RVec.hxx. ◆ elementsPerCacheLine. template<typename T > . constexpr unsigned ROOT::Internal::VecOps::RVecInlineStorageSize< T >::elementsPerCacheLine = (cacheLineSize - sizeof(SmallVectorBase)) / sizeof(T). staticconstexprprivate . Definition at line 520 of file RVec.hxx. ◆ maxInlineByteSize. template<typename T > . constexpr unsigned ROOT::Internal::VecOps::RVecInlineStorageSize< T >::maxInlineByteSize = 1024. staticconstexprprivate . Definition at line 521 of file RVec.hxx. ◆ value. template<typename T > . constexpr unsigned ROOT::Internal::VecOps::RVecInlineStorageSize< T >::value. staticconstexpr . Initial value:=; elementsPerCacheLine >= 8 ? elementsPerCacheLine : (sizeof(T) * 8 > maxInlineByteSize ? 0 : 8); ROOT::Internal::VecOps::RVecInlineStorageSize::maxInlineByteSizestatic constexpr unsigned maxI,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Internal_1_1VecOps_1_1RVecInlineStorageSize.html:1049,cache,cacheLineSize,1049,doc/master/structROOT_1_1Internal_1_1VecOps_1_1RVecInlineStorageSize.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Internal_1_1VecOps_1_1RVecInlineStorageSize.html,1,['cache'],['cacheLineSize']
Performance," T.GetBranch(""e"");; brc->GetEntry(i);; bre->GetEntry(i);. If found is not 0, the number of branch(es) found matching the regular; expression is returned in *found AND the error message 'unknown branch'; is suppressed. void SetBranchStyle(Int_t style = 1); Set the current branch style. (static function). style = 0 old Branch; style = 1 new Bronch. Int_t SetCacheSize(Long64_t cachesize = -1); Set maximum size of the file cache .; if cachesize = 0 the existing cache (if any) is deleted.; if cachesize = -1 (default) it is set to the AutoFlush value when writing; the Tree (default is 30 MBytes).; Returns 0 size set, cache was created if possible; -1 on error. Int_t SetCacheSizeAux(Bool_t autocache = kTRUE, Long64_t cacheSize = 0); Set the size of the file cache and create it if possible. If autocache is true:; this may be an autocreated cache, possibly enlarging an existing; autocreated cache. The size is calculated. The value passed in cacheSize:; cacheSize = 0 make cache if default cache creation is enabled; cacheSize = -1 make a default sized cache in any case. If autocache is false:; this is a user requested cache. cacheSize is used to size the cache.; This cache should never be automatically adjusted.; Returns 0 size set, or existing autosized cache almost large enough.; (cache was created if possible); -1 on error. Int_t SetCacheEntryRange(Long64_t first, Long64_t last); interface to TTreeCache to set the cache entry range; Returns 0 entry range set; -1 on error. void SetCacheLearnEntries(Int_t n = 10); interface to TTreeCache to set the number of entries for the learning phase. void SetCircular(Long64_t maxEntries); Enable/Disable circularity for this tree. if maxEntries > 0 a maximum of maxEntries is kept in one buffer/basket; per branch in memory.; Note that when this function is called (maxEntries>0) the Tree; must be empty or having only one basket per branch.; if maxEntries <= 0 the tree circularity is disabled. NOTE 1:; Circular Trees are interesting in onli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTree.html:133824,cache,cacheSize,133824,root/html604/TTree.html,https://root.cern,https://root.cern/root/html604/TTree.html,6,['cache'],"['cache', 'cacheSize']"
Performance," TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TAttMarker::SetMarkerSizevirtual void SetMarkerSize(Size_t msize=1)Set the marker size.Definition TAttMarker.h:45; TBuffer3DTypes::kGeneric@ kGenericDefinition TBuffer3DTypes.h:24; TBuffer3DGeneric 3D primitive description class.Definition TBuffer3D.h:18; TBuffer3D::kBoundingBox@ kBoundingBoxDefinition TBuffer3D.h:51; TBuffer3D::kNone@ kNoneDefinition TBuffer3D.h:49; TBuffer3D::kShapeSpecific@ kShapeSpecificDefinition TBuffer3D.h:52; TBuffer3D::kCore@ kCoreDefinition TBuffer3D.h:50; TBuffer3D::SetRawSizesBool_t SetRawSizes(UInt_t reqPnts, UInt_t reqPntsCapacity, UInt_t reqSegs, UInt_t reqSegsCapacity, UInt_t reqPols, UInt_t reqPolsCapacity)Set kRaw tessellation section of buffer with supplied sizes.Definition TBuffer3D.cxx:360; TBuffer3D::fPntsDouble_t * fPntsDefinition TBuffer3D.h:113; TClass::GetClassstatic TClass * GetClass(const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE)Static method returning pointer to TClass of the specified class name.Definition TClass.cxx:3035; TColorThe color creation and management class.Definition TColor.h:21; TColor::HLS2RGBstatic void HLS2RGB(Float_t h, Float_t l, Float_t s, Float_t &r, Float_t &g, Float_t &b)Static method to compute RGB from HLS.Definition TColor.cxx:1576; TColor::GetRGBvirtual void GetRGB(Float_t &r, Float_t &g, Float_t &b) constDefinition TColor.h:54; TColor::GetColorstatic Int_t GetColor(const char *hexcolor)Static method returning color number for color specified by hex color string of form: ""#rrggbb"",...Definition TColor.cxx:1920; TColor::InitializeColorsstatic void InitializeColors()Initialize colors used by the TCanvas based graphics (via TColor objects).Definition TColor.cxx:1167; TColor::CreateGradientColorTablestatic Int_t CreateGradientColorTable(UInt_t Number, Double_t *Stops, Double_t *Red, Double_t *Green, Double_t *Blue, UInt_t NColors, Float_t alpha=1., Bool_t setPalette=kT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:78012,load,load,78012,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,1,['load'],['load']
Performance," TAuthenticate::SetGlobalPasswd ; (; const char * ; passwd). static . Set global passwd to be used for authentication to rootd or proofd. ; Definition at line 1309 of file TAuthenticate.cxx. ◆ SetGlobalPwHash(). void TAuthenticate::SetGlobalPwHash ; (; Bool_t ; pwhash). static . Set global passwd hash flag to be used for authentication to rootd or proofd. ; Definition at line 1323 of file TAuthenticate.cxx. ◆ SetGlobalSRPPwd(). void TAuthenticate::SetGlobalSRPPwd ; (; Bool_t ; srppwd). static . Set global SRP passwd flag to be used for authentication to rootd or proofd. ; Definition at line 1331 of file TAuthenticate.cxx. ◆ SetGlobalUser(). void TAuthenticate::SetGlobalUser ; (; const char * ; user). static . Set global user name to be used for authentication to rootd or proofd. ; Definition at line 1295 of file TAuthenticate.cxx. ◆ SetGlobusAuthHook(). void TAuthenticate::SetGlobusAuthHook ; (; GlobusAuth_t ; func). static . Set Globus authorization function. ; Automatically called when libGlobusAuth is loaded. ; Definition at line 1411 of file TAuthenticate.cxx. ◆ SetKrb5AuthHook(). void TAuthenticate::SetKrb5AuthHook ; (; Krb5Auth_t ; func). static . Set kerberos5 authorization function. ; Automatically called when libKrb5Auth is loaded. ; Definition at line 1402 of file TAuthenticate.cxx. ◆ SetPromptUser(). void TAuthenticate::SetPromptUser ; (; Bool_t ; promptuser). static . Set global PromptUser flag. ; Definition at line 1385 of file TAuthenticate.cxx. ◆ SetReadHomeAuthrc(). void TAuthenticate::SetReadHomeAuthrc ; (; Bool_t ; readhomeauthrc). static . Set flag controlling the reading of $HOME/.rootauthrc. ; In PROOF the administrator may want to switch off private settings. Always true, may only be set false via option to proofd. ; Definition at line 1341 of file TAuthenticate.cxx. ◆ SetRSAInit(). void TAuthenticate::SetRSAInit ; (; Int_t ; init = 1). static . Static method setting RSA initialization flag. ; Definition at line 1228 of file TAuthenticate.cxx. ◆",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAuthenticate.html:39360,load,loaded,39360,doc/master/classTAuthenticate.html,https://root.cern,https://root.cern/doc/master/classTAuthenticate.html,1,['load'],['loaded']
Performance," TAxis.cxx:469; TAxis::GetNbinsInt_t GetNbins() constDefinition TAxis.h:125; TAxis::SetRangevirtual void SetRange(Int_t first=0, Int_t last=0)Set the viewing range for the axis using bin numbers.Definition TAxis.cxx:1052; TAxis::GetFirstInt_t GetFirst() constReturn first bin on the axis i.e.Definition TAxis.cxx:458; TAxis::GetLabelsTHashList * GetLabels() constDefinition TAxis.h:121; TBrowserUsing a TBrowser one can browse all ROOT objects.Definition TBrowser.h:37; TClassRefTClassRef is used to implement a permanent reference to a TClass object.Definition TClassRef.h:28; TClass::DynamicCastvoid * DynamicCast(const TClass *base, void *obj, Bool_t up=kTRUE)Cast obj of this class type up to baseclass cl if up is true.Definition TClass.cxx:4982; TClass::InheritsFromBool_t InheritsFrom(const char *cl) const overrideReturn kTRUE if this class inherits from a class with name ""classname"".Definition TClass.cxx:4941; TClass::GetClassstatic TClass * GetClass(const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE)Static method returning pointer to TClass of the specified class name.Definition TClass.cxx:3035; TCollectionCollection abstract base class.Definition TCollection.h:65; TCollection::lsvoid ls(Option_t *option="""") const overrideList (ls) all objects in this collection.Definition TCollection.cxx:382; TCollection::GetEntriesvirtual Int_t GetEntries() constDefinition TCollection.h:179; TCollection::GetSizevirtual Int_t GetSize() constReturn the capacity of the collection, i.e.Definition TCollection.h:184; TFileMergeInfoDefinition TFileMergeInfo.h:42; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::SetBarOffsetvirtual void SetBarOffset(Float_t offset=0.25)Set the bar offset as fraction of the bin width for drawing mode ""B"".Definition TH1.h:364; TH1::GetZaxisTAxis * GetZaxis()Definition TH1.h:326; TH1::DistancetoPrimitiveInt_t DistancetoPrimitive(Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THStack_8cxx_source.html:40165,load,load,40165,doc/master/THStack_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THStack_8cxx_source.html,1,['load'],['load']
Performance, TBasket the TBranch buffers; TBasketSQL the TBranch buffers; TBenchmark ROOT utility to help benchmarking applications; TBinomialEfficiencyFitter Binomial Fitter for the division of two histograms; TBits Bit container; TBits::TReference ; TBox Box class; TBranch Branch descriptor; TBranchClones Branch in case of an array of clone objects; TBranchElement Branch in case of an object; TBranchObject Branch in case of an object; TBranchRef to support referenced objects on other branches; TBranchSTL Branch handling STL collection of pointers; TBrowser ROOT Object Browser; TBrowserImp ABC describing browser implementation protocol; TBrowserPlugin basic plugin description class; TBtree A B-tree; TBtreeIter B-tree iterator; TBuffer Buffer base class used for serializing objects; TBuffer3D 3D primitives description; TBufferFile concrete implementation of TBuffer for writing/reading to/from a ROOT file or socket.; TBufferSQL Implementation of TBuffer to load and write to a SQL database; TBufferXML a specialized TBuffer to read/write to XML files; TButton A user interface button.; TCL C++ replacement for CERNLIB matrix / triangle matrix packages: F110 and F112; TCONE CONE shape; TCONS CONS shape; TCTUB The Cut Tube shape; TCanvas Graphics canvas; TCanvasImp ABC describing main window protocol; TChain A chain of TTrees; TChainElement A chain element; TChainIndex A Tree Index with majorname and minorname.; TChainIndex::TChainIndexEntry ; TChair A base class to provide a user custom interface to TTable class objects; TCint Interface to CINT C/C++ interpreter; TClass Dictionary containing class information; TClassDocInfo info cache for class documentation; TClassDocOutput generates documentation web pages for a class; TClassEdit ; TClassGenerator interface for TClass generators; TClassMenuItem One element of the class context menu; TClassRef ; TClassStreamer ; TClassTable Table of known classes; TClassTree Manager class to draw classes inheritance tree and relations; TClonesArray A,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassIndex.html:50531,load,load,50531,root/html526/ClassIndex.html,https://root.cern,https://root.cern/root/html526/ClassIndex.html,2,['load'],['load']
Performance," TBuffer* GetTransientBuffer(Int_t size); Returns the transient buffer currently used by this TTree for reading/writing baskets. Int_t AddBranchToCache(const char* bname, Bool_t subbranches = kFALSE); Add branch with name bname to the Tree cache.; If bname=""*"" all branches are added to the cache.; if subbranches is true all the branches of the subbranches are; also put to the cache.; Returns 0 branch added or already included; -1 on error. Int_t AddBranchToCache(TBranch* branch, Bool_t subbranches = kFALSE); Add branch b to the Tree cache.; if subbranches is true all the branches of the subbranches are; also put to the cache.; Returns 0 branch added or already included; -1 on error. Int_t DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); Remove the branch with name 'bname' from the Tree cache.; If bname=""*"" all branches are removed from the cache.; if subbranches is true all the branches of the subbranches are; also removed from the cache.; Returns 0 branch dropped or not in cache; -1 on error. Int_t DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); Remove the branch b from the Tree cache.; if subbranches is true all the branches of the subbranches are; also removed from the cache.; Returns 0 branch dropped or not in cache; -1 on error. void AddClone(TTree* ); Add a cloned tree to our list of trees to be notified whenever we change; our branch addresses or when we are deleted. TFriendElement* AddFriend(const char* treename, const char* filename = """"); Add a TFriendElement to the list of friends. This function:; -opens a file if filename is specified; -reads a Tree with name treename from the file (current directory); -adds the Tree to the list of friends; see other AddFriend functions. A TFriendElement TF describes a TTree object TF in a file.; When a TFriendElement TF is added to the the list of friends of an; existing TTree T, any variable from TF can be referenced in a query; to T. A tree keeps a list of friends. In the context",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTree.html:38457,cache,cache,38457,root/html604/TTree.html,https://root.cern,https://root.cern/root/html604/TTree.html,1,['cache'],['cache']
Performance," TBuffer::WriteArrayvirtual void WriteArray(const ULong64_t *l, Int_t n)=0; TBuffer::ReadStaticArrayvirtual Int_t ReadStaticArray(Long_t *l)=0; TBuffer::WriteFastArrayvirtual void WriteFastArray(const Double_t *d, Long64_t n)=0; TBuffer::ReadStaticArrayvirtual Int_t ReadStaticArray(Float_t *f)=0; TBuffer::ReadFastArrayvirtual void ReadFastArray(Int_t *i, Int_t n)=0; TBuffer::ReadArrayvirtual Int_t ReadArray(Double_t *&d)=0; TBuffer::BufferSizeInt_t BufferSize() constDefinition TBuffer.h:98; TBuffer::ReadFastArrayvirtual void ReadFastArray(UChar_t *c, Int_t n)=0; TBuffer::EStatusBitsEStatusBitsDefinition TBuffer.h:74; TBuffer::kCannotHandleMemberWiseStreaming@ kCannotHandleMemberWiseStreamingDefinition TBuffer.h:76; TBuffer::kIsOwner@ kIsOwnerDefinition TBuffer.h:75; TBuffer::WriteFastArrayvirtual void WriteFastArray(const Short_t *h, Long64_t n)=0; TBuffer::WriteClonesvirtual Int_t WriteClones(TClonesArray *a, Int_t nobjects)=0; TBuffer::WriteObjectAnyvirtual Int_t WriteObjectAny(const void *obj, const TClass *ptrClass, Bool_t cacheReuse=kTRUE)=0; TBuffer::SetBuffervoid SetBuffer(void *buf, UInt_t bufsiz=0, Bool_t adopt=kTRUE, ReAllocCharFun_t reallocfunc=nullptr)Sets a new buffer in an existing TBuffer object.Definition TBuffer.cxx:187; TBuffer::SetStreamerElementNumbervirtual void SetStreamerElementNumber(TStreamerElement *elem, Int_t comp_type)=0; TBuffer::ReadFastArrayvirtual void ReadFastArray(Float_t *f, Int_t n)=0; TBuffer::WriteShortvirtual void WriteShort(Short_t s)=0; TBuffer::WriteFastArrayvirtual void WriteFastArray(const ULong64_t *l, Long64_t n)=0; TBuffer::PushDataCachevirtual void PushDataCache(TVirtualArray *)Push a new data cache area onto the list of area to be used for temporarily store 'missing' data memb...Definition TBuffer.cxx:362; TBuffer::ReadCharPvirtual void ReadCharP(Char_t *c)=0; TBuffer::ReadFastArrayDouble32virtual void ReadFastArrayDouble32(Double_t *d, Int_t n, TStreamerElement *ele=nullptr)=0; TBuffer::SetReAllocFuncvoid SetReAllocF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBuffer_8h_source.html:33719,cache,cacheReuse,33719,doc/master/TBuffer_8h_source.html,https://root.cern,https://root.cern/doc/master/TBuffer_8h_source.html,1,['cache'],['cacheReuse']
Performance," TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; double evaluate () const override;  Evaluate profile likelihood by minimizing likelihood w.r.t. ;  ; void initializeMinimizer () const;  ; void validateAbsMin () const;  Check that parameters and likelihood value for 'best fit' are still valid. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProfileLL.html:49017,cache,cached,49017,doc/master/classRooProfileLL.html,https://root.cern,https://root.cern/doc/master/classRooProfileLL.html,2,['cache'],"['cache', 'cached']"
Performance," TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); TSlave*TProof::CreateSlave(const char* url, const char* ord, Int_t perf, const char* image, const char* workdir); TSlave*TProof::CreateSubmaster(const char* url, const char* ord, const char* image, const char* msd); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; static Bool_tTProof::GetFileInCmd(const char* cmd, TString& fn); static Int_tTProof::GetInputData(TList* input, const char* cachedir, TString& emsg); TList*TProof::GetListOfActiveSlaves() const; TVirtualProofPlayer*TProof::GetPlayer() const; TPluginHandler*TProof::GetProgressDialog() const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTProof::HandleLibIncPath(const char* what, Bool_t add, const char* dirs); Int_tTProof::Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); voidTProof::InitMembers(); virtual TVirtualProofPlayer*MakePlayer(const char* player = 0, TSocket* s = 0); voidTObject::MakeZombie(); voidTProof::PrepareInputDataFile(TString& dataFile); Int_tTProof::RemoveWorkers(TList* wrks); static Int_tTProof::SaveInputData(TQueryResult* qr, const char* cachedir, TString& emsg); virtual voidTProof::SaveWorkerInfo(); Int_tTProof::SendFile(const char* file, Int_t opt = (kBinary|kForward|kCp|kCpBin), const char* rfile = 0, TSlave* sl = 0); static Int_tTProof::SendInputData(TQueryResult* qr, TProof* p, TString& emsg); virtual voidTProof::SendInputDataFile(); voidTProof::SetDSet(TDSet* dset); voidTProof::SetPlayer(TVirtualProofPlayer* player); static void*TProof::SlaveStartupThread(void* arg); virtual Bool_tStartSlaves(Bool_t); static voidTProof::SystemCmd(const char* cmd, Int_t fdout); voidTProof::UpdateDialog(); virtual voidValidateDSet(TDSet* dset).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofSuperMaster.html:20414,cache,cachedir,20414,root/html528/TProofSuperMaster.html,https://root.cern,https://root.cern/root/html528/TProofSuperMaster.html,1,['cache'],['cachedir']
Performance," TClass*IsA() const; RooAbsCacheElement&operator=(const RooAbsCacheElement&); virtual voidoperModeHook(RooAbsArg::OperMode); virtual voidoptimizeCacheMode(const RooArgSet& obs, RooArgSet& optNodes, RooLinkedList& processedNodes); virtual voidprintCompactTreeHook(ostream&, const char*, Int_t curElem, Int_t totElem); virtual Bool_tredirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); voidsetOwner(RooAbsArg* owner); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; public:. enum Action { OperModeChange; OptimizeCaching; FindConstantNodes; };. protected:. RooAbsArg*_owner! Pointer to owning RooAbsArg. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Interface for server redirect calls. void printCompactTreeHook(ostream& , const char* , Int_t curElem, Int_t totElem); Hook function to print cache guts in tree printing mode of RooAbsArgs. void operModeHook(RooAbsArg::OperMode ); Interface for operation mode change calls. void optimizeCacheMode(const RooArgSet& obs, RooArgSet& optNodes, RooLinkedList& processedNodes); Interface for cache optimization calls. The default implementation is to forward all these; calls to all contained RooAbsArg objects as publicized through containedArg(). void findConstantNodes(const RooArgSet& obs, RooArgSet& cacheList, RooLinkedList& processedNodes); Interface for constant term optimization calls. The default implementation is to forward all these; calls to all contained RooAbsArg objects as publicized through containedArg(). virtual ~RooAbsCacheElement(); Destructor. RooArgList containedArgs(RooAbsCacheElement::Action ). void setOwner(RooAbsArg* owner); Store pointer to owner. » Last changed: Mon Dec 7 13:45:32 2009 » Last generated: 2009-12-07 13:45; This page has been automatically generated. For comments or s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsCacheElement.html:2003,cache,cache,2003,root/html526/RooAbsCacheElement.html,https://root.cern,https://root.cern/root/html526/RooAbsCacheElement.html,1,['cache'],['cache']
Performance," TClass.cxx:4440; TClass::StreamerExternalstatic void StreamerExternal(const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class)There is special streamer for the class.Definition TClass.cxx:6788; TClass::operator&friend bool operator&(UChar_t l, ERuntimeProperties r)Definition TClass.h:270; TClass::fClassPropertyLong_t fClassPropertyProperty See TClass::Property() for details.Definition TClass.h:256; TClass::fContextMenuTitleTString fContextMenuTitleDefinition TClass.h:223; TClass::StreamerTObjectInitializedstatic void StreamerTObjectInitialized(const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class)Case of TObjects when fIsOffsetStreamerSet is known to have been set.Definition TClass.cxx:6814; TClass::ConvStreamerInstrumentedstatic void ConvStreamerInstrumented(const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class)Case of instrumented class with a library.Definition TClass.cxx:6845; TClass::fCanLoadClassInfostd::atomic< Bool_t > fCanLoadClassInfoWhether info was loaded from a root pcm.Definition TClass.h:260; TClass::SetConvStreamerFuncvoid SetConvStreamerFunc(ClassConvStreamerFunc_t strm)Set a wrapper/accessor function around this class custom conversion streamer.Definition TClass.cxx:6945; TClass::FindStreamerInfoTVirtualStreamerInfo * FindStreamerInfo(TObjArray *arr, UInt_t checksum) constFind the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum.Definition TClass.cxx:7066; TClass::GetMissingDictionariesvoid GetMissingDictionaries(THashTable &result, bool recurse=false)Get the classes that have a missing dictionary starting from this one.Definition TClass.cxx:4087; TClass::MakeCustomMenuListvoid MakeCustomMenuList()Makes a customizable version of the popup menu list, i.e.Definition TClass.cxx:4283; TClass::FindStreamerInfoAbstractEmulatedTVirtualStreamerInfo * FindStreamerInfoAbstractEmulated(UInt_t checksum) constFor the case where the requestor class is emulated and this class is abstrac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8h_source.html:74986,load,loaded,74986,doc/v632/TClass_8h_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8h_source.html,1,['load'],['loaded']
Performance," TClass.cxx:4507; TClass::StreamerExternalstatic void StreamerExternal(const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class)There is special streamer for the class.Definition TClass.cxx:6855; TClass::operator&friend bool operator&(UChar_t l, ERuntimeProperties r)Definition TClass.h:270; TClass::fClassPropertyLong_t fClassPropertyProperty See TClass::Property() for details.Definition TClass.h:256; TClass::fContextMenuTitleTString fContextMenuTitleDefinition TClass.h:223; TClass::StreamerTObjectInitializedstatic void StreamerTObjectInitialized(const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class)Case of TObjects when fIsOffsetStreamerSet is known to have been set.Definition TClass.cxx:6881; TClass::ConvStreamerInstrumentedstatic void ConvStreamerInstrumented(const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class)Case of instrumented class with a library.Definition TClass.cxx:6912; TClass::fCanLoadClassInfostd::atomic< Bool_t > fCanLoadClassInfoWhether info was loaded from a root pcm.Definition TClass.h:260; TClass::SetConvStreamerFuncvoid SetConvStreamerFunc(ClassConvStreamerFunc_t strm)Set a wrapper/accessor function around this class custom conversion streamer.Definition TClass.cxx:7012; TClass::FindStreamerInfoTVirtualStreamerInfo * FindStreamerInfo(TObjArray *arr, UInt_t checksum) constFind the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum.Definition TClass.cxx:7133; TClass::GetMissingDictionariesvoid GetMissingDictionaries(THashTable &result, bool recurse=false)Get the classes that have a missing dictionary starting from this one.Definition TClass.cxx:4154; TClass::MakeCustomMenuListvoid MakeCustomMenuList()Makes a customizable version of the popup menu list, i.e.Definition TClass.cxx:4350; TClass::FindStreamerInfoAbstractEmulatedTVirtualStreamerInfo * FindStreamerInfoAbstractEmulated(UInt_t checksum) constFor the case where the requestor class is emulated and this class is abstrac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8h_source.html:74814,load,loaded,74814,doc/master/TClass_8h_source.html,https://root.cern,https://root.cern/doc/master/TClass_8h_source.html,1,['load'],['loaded']
Performance," TClass::New is; 7381/// guarantee to succeed.; 7382/// To know if the class described by this TClass has a default constructor; 7383/// (public or not), use; 7384/// \code{.cpp}; 7385/// cl->GetProperty() & kClassHasDefaultCtor; 7386/// \endcode; 7387/// To know if the class described by this TClass has a public default; 7388/// constructor use:; 7389/// \code{.cpp}; 7390/// gInterpreter->ClassInfo_HasDefaultConstructor(aClass->GetClassInfo());; 7391/// \endcode; 7392 ; 7393Bool_t TClass::HasDefaultConstructor(Bool_t testio) const; 7394{; 7395 ; 7396 if (fNew) return kTRUE;; 7397 ; 7398 if (HasInterpreterInfo()) {; 7399 R__LOCKGUARD(gInterpreterMutex);; 7400 return gCling->ClassInfo_HasDefaultConstructor(GetClassInfo(), testio);; 7401 }; 7402 if (fCollectionProxy) {; 7403 return kTRUE;; 7404 }; 7405 if (fCurrentInfo.load()) {; 7406 // Emulated class, we know how to construct them via the TStreamerInfo; 7407 return kTRUE;; 7408 }; 7409 return kFALSE;; 7410}; 7411 ; 7412////////////////////////////////////////////////////////////////////////////////; 7413/// Returns true if this class has an definition and/or overload of the; 7414/// member function Hash.; 7415///; 7416/// For example to test if the class overload TObject::Hash use; 7417/// ~~~ {.cpp}; 7418/// if (cl->IsTObject() && cl->HasLocalHashMember()); 7419/// ~~~; 7420 ; 7421Bool_t TClass::HasLocalHashMember() const; 7422{; 7423 if (fProperty == (-1)); 7424 Property();; 7425 return TestBit(kHasLocalHashMember);; 7426}; 7427 ; 7428////////////////////////////////////////////////////////////////////////////////; 7429/// Return the wrapper around Merge.; 7430 ; 7431ROOT::MergeFunc_t TClass::GetMerge() const; 7432{; 7433 return fMerge;; 7434}; 7435 ; 7436////////////////////////////////////////////////////////////////////////////////; 7437/// Return the wrapper around Merge.; 7438 ; 7439ROOT::ResetAfterMergeFunc_t TClass::GetResetAfterMerge() const; 7440{; 7441 return fResetAfterMerge;; 7442}; 7443 ; 7444/////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:284452,load,load,284452,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['load'],['load']
Performance," TClass::New is; 7448/// guarantee to succeed.; 7449/// To know if the class described by this TClass has a default constructor; 7450/// (public or not), use; 7451/// \code{.cpp}; 7452/// cl->GetProperty() & kClassHasDefaultCtor; 7453/// \endcode; 7454/// To know if the class described by this TClass has a public default; 7455/// constructor use:; 7456/// \code{.cpp}; 7457/// gInterpreter->ClassInfo_HasDefaultConstructor(aClass->GetClassInfo());; 7458/// \endcode; 7459 ; 7460Bool_t TClass::HasDefaultConstructor(Bool_t testio) const; 7461{; 7462 ; 7463 if (fNew) return kTRUE;; 7464 ; 7465 if (HasInterpreterInfo()) {; 7466 R__LOCKGUARD(gInterpreterMutex);; 7467 return gCling->ClassInfo_HasDefaultConstructor(GetClassInfo(), testio);; 7468 }; 7469 if (fCollectionProxy) {; 7470 return kTRUE;; 7471 }; 7472 if (fCurrentInfo.load()) {; 7473 // Emulated class, we know how to construct them via the TStreamerInfo; 7474 return kTRUE;; 7475 }; 7476 return kFALSE;; 7477}; 7478 ; 7479////////////////////////////////////////////////////////////////////////////////; 7480/// Returns true if this class has an definition and/or overload of the; 7481/// member function Hash.; 7482///; 7483/// For example to test if the class overload TObject::Hash use; 7484/// ~~~ {.cpp}; 7485/// if (cl->IsTObject() && cl->HasLocalHashMember()); 7486/// ~~~; 7487 ; 7488Bool_t TClass::HasLocalHashMember() const; 7489{; 7490 if (fProperty == (-1)); 7491 Property();; 7492 return TestBit(kHasLocalHashMember);; 7493}; 7494 ; 7495////////////////////////////////////////////////////////////////////////////////; 7496/// Return the wrapper around Merge.; 7497 ; 7498ROOT::MergeFunc_t TClass::GetMerge() const; 7499{; 7500 return fMerge;; 7501}; 7502 ; 7503////////////////////////////////////////////////////////////////////////////////; 7504/// Return the wrapper around Merge.; 7505 ; 7506ROOT::ResetAfterMergeFunc_t TClass::GetResetAfterMerge() const; 7507{; 7508 return fResetAfterMerge;; 7509}; 7510 ; 7511/////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:287203,load,load,287203,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['load'],['load']
Performance," TDictionary::ESTLTypeTDictionary::kSet; static TObject::(anonymous)TObject::kSingleKey; static TDictionary::ESTLTypeTDictionary::kVector; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. DataMemberInfo_t*fInfo!pointer to CINT data member info. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGlobal(DataMemberInfo_t* info = 0); Default TGlobal ctor. TGlobal(const TGlobal& ); Copy constructor. TGlobal & operator=(const TGlobal& ); Assignment operator. ~TGlobal(); TGlobal dtor deletes adopted CINT DataMemberInfo object. void * GetAddress() const; Return address of global. Int_t GetArrayDim() const; Return number of array dimensions. TDictionary::DeclId_t GetDeclId() const. Int_t GetMaxIndex(Int_t dim) const; Return maximum index for array dimension ""dim"". const char * GetTypeName() const; Get type of global variable, e,g.: ""class TDirectory*"" -> ""TDirectory"".; Result needs to be used or copied immediately. const char * GetFullTypeName() const; Get full type description of global variable, e,g.: ""class TDirectory*"". Bool_t IsValid(); Return true if this global object is pointing to a currently; loaded global. If a global is unloaded after the TGlobal; is created, the TGlobal will be set to be invalid. Long_t Property() const; Get property description word. For meaning of bits see EProperty. Bool_t Update(DataMemberInfo_t* info); Update the TFunction to reflect the new info. This can be used to implement unloading (info == 0) and then reloading; (info being the 'new' decl address). » Author: Rene Brun 13/11/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id$ » Last generated: 2015-06-30 15:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGlobal.html:8174,load,loaded,8174,root/html602/TGlobal.html,https://root.cern,https://root.cern/root/html602/TGlobal.html,1,['load'],['loaded']
Performance," TFile.h. ◆ fIsRootFile. Bool_t TFile::fIsRootFile {kTRUE}. protected . !True is this is a ROOT file, raw file otherwise ; Definition at line 104 of file TFile.h. ◆ fMustFlush. Bool_t TFile::fMustFlush {kTRUE}. protected . !True if the file buffers must be flushed ; Definition at line 106 of file TFile.h. ◆ fNbytesFree. Int_t TFile::fNbytesFree {0}. protected . Number of bytes for free segments structure. ; Definition at line 85 of file TFile.h. ◆ fNbytesInfo. Int_t TFile::fNbytesInfo {0}. protected . Number of bytes for StreamerInfo record. ; Definition at line 86 of file TFile.h. ◆ fNoAnchorInName. Bool_t TFile::fNoAnchorInName {kFALSE}. protected . !True if we don't want to force the anchor to be appended to the file name ; Definition at line 103 of file TFile.h. ◆ fNProcessIDs. Int_t TFile::fNProcessIDs {0}. protected . Number of TProcessID written to this file. ; Definition at line 88 of file TFile.h. ◆ fOffset. Long64_t TFile::fOffset {0}. protected . !Seek offset cache ; Definition at line 96 of file TFile.h. ◆ fOpenPhases. TList* TFile::fOpenPhases {nullptr}. protected . !Time info about open phases ; Definition at line 113 of file TFile.h. ◆ fOption. TString TFile::fOption. protected . File options. ; Definition at line 91 of file TFile.h. ◆ fProcessIDs. TObjArray* TFile::fProcessIDs {nullptr}. protected . !Array of pointers to TProcessIDs ; Definition at line 95 of file TFile.h. ◆ fReadCalls. Int_t TFile::fReadCalls {0}. protected . Number of read calls ( not counting the cache calls ) ; Definition at line 89 of file TFile.h. ◆ fRealName. TString TFile::fRealName. protected . Effective real file name (not original url) ; Definition at line 90 of file TFile.h. ◆ fSeekFree. Long64_t TFile::fSeekFree {0}. protected . Location on disk of free segments structure. ; Definition at line 80 of file TFile.h. ◆ fSeekInfo. Long64_t TFile::fSeekInfo {0}. protected . Location on disk of StreamerInfo record. ; Definition at line 81 of file TFile.h. ◆ fSum2Buffer. Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:109013,cache,cache,109013,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,2,['cache'],['cache']
Performance," TFile.h:199; TFile::fCompressInt_t fCompressCompression level and algorithm.Definition TFile.h:84; TFile::CurrentFilestatic TFile *& CurrentFile()Return the current ROOT file if any.Definition TFile.cxx:1067; TFile::SetCompressionAlgorithmvirtual void SetCompressionAlgorithm(Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal)See comments for function SetCompressionSettings.Definition TFile.cxx:2305; TFile::GetEndpointUrlvirtual const TUrl * GetEndpointUrl() constDefinition TFile.h:235; TFile::fNbytesFreeInt_t fNbytesFreeNumber of bytes for free segments structure.Definition TFile.h:85; TFile::fDInt_t fDFile descriptor.Definition TFile.h:82; TFile::Class_Versionstatic constexpr Version_t Class_Version()Definition TFile.h:344; TFile::ResetErrnovirtual void ResetErrno() constMethod resetting the errno.Definition TFile.cxx:1254; TFile::SizeofInt_t Sizeof() const overrideReturn the size in bytes of the file header.Definition TFile.cxx:2397; TFile::FlushWriteCacheBool_t FlushWriteCache()Flush the write cache if active.Definition TFile.cxx:1158; TFile::IncrementProcessIDsvirtual void IncrementProcessIDs()Definition TFile.h:257; TFile::fIsPcmFileBool_t fIsPcmFile!True if the file is a ROOT pcm file.Definition TFile.h:107; TFile::fCacheReadTFileCacheRead * fCacheRead!Pointer to the read cache (if any)Definition TFile.h:98; TFile::SysClosevirtual Int_t SysClose(Int_t fd)Interface to system close. All arguments like in POSIX close().Definition TFile.cxx:4497; TFile::TFileTFile()File default Constructor.Definition TFile.cxx:201; TFile::fUnitsChar_t fUnitsNumber of bytes for file pointers.Definition TFile.h:92; TFile::fProcessIDsTObjArray * fProcessIDs!Array of pointers to TProcessIDsDefinition TFile.h:95; TFile::GetTypestatic EFileType GetType(const char *name, Option_t *option="""", TString *prefix=nullptr)Resolve the file type as a function of the protocol field in 'name'.Definition TFile.cxx:4821; TFile::EFileTypeEFileTypeFile type.Definition TFile.h:202; TFile",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:222842,cache,cache,222842,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['cache'],['cache']
Performance," TFile::EStatusBitsTFile::kWriteError; static TObject::(anonymous)TObject::kZombie. protected:. TArchiveFile*TFile::fArchive!Archive file from which we read this file; Long64_tTFile::fArchiveOffset!Offset at which file starts in archive; TFileOpenHandle*TFile::fAsyncHandle!For proper automatic cleanup; TFile::EAsyncOpenStatusTFile::fAsyncOpenStatus!Status of an asynchronous open request; Long64_tTFile::fBEGINFirst used byte in file; Int_tTDirectoryFile::fBufferSizeDefault buffer size to create new TKeys; Long64_tTFile::fBytesReadNumber of bytes read from this file; Long64_tTFile::fBytesReadExtraNumber of extra bytes (overhead) read by the readahead buffer; Long64_tTFile::fBytesWriteNumber of bytes written to this file; TFileCacheRead*TFile::fCacheRead!Pointer to the read cache (if any); TMap*TFile::fCacheReadMap!Pointer to the read cache (if any); TFileCacheWrite*TFile::fCacheWrite!Pointer to the write cache (if any); TArrayC*TFile::fClassIndex!Index of TStreamerInfo classes written to this file; Int_tTFile::fCompressCompression level and algorithm; TDirectory::TContext*TDirectory::fContext!Pointer to a list of TContext object pointing to this TDirectory; Int_tTFile::fDFile descriptor; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; Long64_tTFile::fENDLast used byte in file; TUrlTNetFile::fEndpointUrlURL of realfile (after possible redirection); Int_tTNetFile::fErrorCodeerror code returned by rootd (matching gRootdErrStr); TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TFile::fFreeFree segments linked list table; TList*TFile::fInfoCache!Cached list of the streamer infos in this file; Bool_tTFile::fInitDone!True if the file has been initialized; Bool_tTFile::fIsArchive!True if this is a pure archive file; Bool_tTFile::fIsPcmFile!True if the file is a ROOT pcm file.; Bool_tTFile::fIsRootFile!True is this is a ROOT file, raw file otherwise; TList*TDirectoryFil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXNetFile.html:20830,cache,cache,20830,root/html602/TXNetFile.html,https://root.cern,https://root.cern/root/html602/TXNetFile.html,6,['cache'],['cache']
Performance," TFile::GetBytesReadvirtual Long64_t GetBytesRead() constDefinition TFile.h:241; TFile::GetErrnovirtual Int_t GetErrno() constMethod returning errno.Definition TFile.cxx:1246; TFile::SetCompressionSettingsvirtual void SetCompressionSettings(Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault)Used to specify the compression level and algorithm.Definition TFile.cxx:2338; TFile::fgReadInfostatic Bool_t fgReadInfoif true (default) ReadStreamerInfo is called when opening a fileDefinition TFile.h:135; TFile::Initvirtual void Init(Bool_t create)Initialize a TFile object.Definition TFile.cxx:613; TFile::GetRelOffsetLong64_t GetRelOffset() constDefinition TFile.h:251; TFile::AsyncOpenstatic TFileOpenHandle * AsyncOpen(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Submit an asynchronous open request.Definition TFile.cxx:4351; TFile::SetCacheWritevirtual void SetCacheWrite(TFileCacheWrite *cache)Set a pointer to the write cache.Definition TFile.cxx:2388; TFile::fOptionTString fOptionFile options.Definition TFile.h:91; TFile::WriteBuffervirtual Bool_t WriteBuffer(const char *buf, Int_t len)Write a buffer to the file.Definition TFile.cxx:2476; TFile::SumBuffervoid SumBuffer(Int_t bufsize)Increment statistics for buffer sizes of objects in this file.Definition TFile.cxx:2417; TFile::GetCacheFileDirstatic const char * GetCacheFileDir()Get the directory where to locally stage/cache remote files.Definition TFile.cxx:4654; TFile::EAsyncOpenStatusEAsyncOpenStatusAsynchronous open request status.Definition TFile.h:64; TFile::kAOSSuccess@ kAOSSuccessDefinition TFile.h:65; TFile::kAOSNotAsync@ kAOSNotAsyncDefinition TFile.h:64; TFile::kAOSInProgress@ kAOSInProgressDefinition TFile.h:65; TFile::kAOSFailure@ kAOSFailureDefinition TFile.h:64; TFile::WriteStreamerInfovirtual void WriteStreamerInfo()Write the list of TStreamerInfo as a single object in this file The cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:220460,cache,cache,220460,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,2,['cache'],['cache']
Performance," TFileMergeInfo * ; info . ). virtual . Merge the trees in the TList into this tree. ; If info->fIsFirst is true, first we clone this TTree info the directory info->fOutputDirectory and then overlay the new TTree information onto this TTree object (so that this TTree object is now the appropriate to use for further merging).; Returns the total number of entries in the merged tree. ; Reimplemented in TChain.; Definition at line 6927 of file TTree.cxx. ◆ MergeTrees(). TTree * TTree::MergeTrees ; (; TList * ; li, . Option_t * ; options = """" . ). static . Static function merging the trees in the TList into a new tree. ; Trees in the list can be memory or disk-resident trees. The new tree is created in the current directory (memory if gROOT). ; Definition at line 6851 of file TTree.cxx. ◆ MoveReadCache(). void TTree::MoveReadCache ; (; TFile * ; src, . TDirectory * ; dir . ). protected . Move a cache from a file to the current file in dir. ; if src is null no operation is done, if dir is null or there is no current file the cache is deleted. ; Definition at line 6983 of file TTree.cxx. ◆ Notify(). bool TTree::Notify ; (; ). overridevirtual . Function called when loading a new class library. ; Reimplemented from TObject.; Definition at line 7033 of file TTree.cxx. ◆ operator=(). TTree & TTree::operator= ; (; const TTree & ; tt). delete . ◆ OptimizeBaskets(). void TTree::OptimizeBaskets ; (; ULong64_t ; maxMemory = 10000000, . Float_t ; minComp = 1.1, . Option_t * ; option = """" . ). virtual . This function may be called after having filled some entries in a Tree. ; Using the information in the existing branch buffers, it will reassign new branch buffer sizes to optimize time and memory.; The function computes the best values for branch buffer sizes such that the total buffer sizes is less than maxMemory and nearby entries written at the same time. In case the branch compression factor for the data written so far is less than compMin, the compression is disabled.; if option",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:182748,cache,cache,182748,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,2,['cache'],['cache']
Performance," TGLAxis::Init ; (; ). Default initialization. ; Definition at line 43 of file TGLAxis.cxx. ◆ IsA(). TClass * TGLAxis::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TAttLine.; Definition at line 71 of file TGLAxis.h. ◆ operator=(). TGLAxis & TGLAxis::operator= ; (; const TGLAxis & ; ). privatedelete . ◆ PaintGLAxis(). void TGLAxis::PaintGLAxis ; (; const Double_t ; p1[3], . const Double_t ; p2[3], . Double_t ; wmin, . Double_t ; wmax, . Int_t ; ndiv, . Option_t * ; opt = """" . ). Paint GL Axis. . p1, p2 : Axis position in the 3D space.; wmin, wmax : Minimum and maximum values along the axis. wmin < wmax.; ndiv : Number of axis divisions. It is an integer in the form ""ttsspp"" where ""tt"" is the number of tertiary divisions, ""ss"" is the number of secondary divisions and ""pp"" the number of primary divisions.; opt : Options. ""N"" - By default the number of divisions is optimized to get a nice labeling. When option ""N"" is given, the number of divisions is not optimized. . Definition at line 88 of file TGLAxis.cxx. ◆ PaintGLAxisBody(). void TGLAxis::PaintGLAxisBody ; (; ). Paint horizontal axis body at position (0,0,0) ; Definition at line 168 of file TGLAxis.cxx. ◆ PaintGLAxisLabels(). void TGLAxis::PaintGLAxisLabels ; (; ). Paint axis labels on the main tick marks. ; Definition at line 255 of file TGLAxis.cxx. ◆ PaintGLAxisTickMarks(). void TGLAxis::PaintGLAxisTickMarks ; (; ). Paint axis tick marks. ; Definition at line 185 of file TGLAxis.cxx. ◆ SetGridLength(). void TGLAxis::SetGridLength ; (; Double_t ; grid). inline . Definition at line 68 of file TGLAxis.h. ◆ SetLabelsAngles(). void TGLAxis::SetLabelsAngles ; (; Double_t ; a1, . Double_t ; a2, . Double_t ; a3 . ). Set labels' angles. ; Definition at line 446 of file TGLAxis.cxx. ◆ SetLabelsOffset(). void TGLAxis::SetLabelsOffset ; (; Double_t ; offset). inline . Definition at line 66 of file TGLAxis.h. ◆ SetLabelsSize(). void TGLAxis::SetLabelsSize ; (; Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLAxis.html:8891,optimiz,optimized,8891,doc/master/classTGLAxis.html,https://root.cern,https://root.cern/doc/master/classTGLAxis.html,1,['optimiz'],['optimized']
Performance," TGLPerspectiveCamerafPerspectiveCameraYOZ!; TStringfPictureFileName! default file-name for SavePicture(); Float_tfPointScale! size scale for points; TGLViewer::EPushActionfPushAction; TGLRedrawTimer*fRedrawTimer! timer for triggering redraws; Bool_tfReferenceOn! reference marker on?; TGLVertex3fReferencePos! reference position; Bool_tfResetCamerasOnNextUpdatereposition camera on next update; Bool_tfResetCamerasOnUpdatereposition camera on each update; Bool_tTGLViewerBase::fResetSceneInfosOnRenderRequest rebuild of view-specific scene data.; TGLRnrCtx*TGLViewerBase::fRnrCtx; TGLViewerBase::SceneInfoList_tTGLViewerBase::fScenesRegistered scenes.; TGLSelectRecordfSecSelRec! select record from last secondary select (should go to context); TGLSelectRecordfSelRec! select record from last select (should go to context); TGLManipSet*fSelectedPShapeRef!; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tfSmartRefresh! cache logicals during scene rebuilds; Bool_tfSmoothLines! smooth line edge rendering; Bool_tfSmoothPoints! smooth point edge rendering; Bool_tfStereo! use stereo rendering; Float_tfStereoEyeOffsetFac!; Float_tfStereoFrustumAsymFac!; Float_tfStereoZeroParallax! position of zero-parallax plane: 0 - near clipping plane, 1 - far clipping plane; Short_tTGLViewerBase::fStyleViewer-style for rendering.; TGLRectfViewport! viewport - drawn area; TGLViewerBase::SceneInfoVec_tTGLViewerBase::fVisScenesVisible scenes.; Float_tTGLViewerBase::fWFLineWOptional override of scene wire-frame line-width; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TGLColorSetfgDefaultColorSet! a shared, default color-set; static Bool_tfgUseDefaultColorSetForNewViewers! name says it all. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLViewer(TVirtualPad* pad, Int_t x, Int_t y, Int_t width, Int_t height); Construct the viewer object, with following arguments:; 'pad' - external pad ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLViewer.html:23426,cache,cache,23426,root/html602/TGLViewer.html,https://root.cern,https://root.cern/root/html602/TGLViewer.html,1,['cache'],['cache']
Performance," TGLVector3fAxes[3]! box axes in global frame - cached for speed; TGLVector3fAxesNorm[3]! normalised box axes in global frame - cached for speed; Double_tfDiagonal! max box diagonal - cached for speed; TGLVertex3fVertex[8]! the 8 bounding box vertices; Double_tfVolume! box volume - cached for speed. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLBoundingBox(); Construct an empty bounding box. TGLBoundingBox(const TGLVertex3 vertex[8]); Construct a bounding box from provided 8 vertices. TGLBoundingBox(const Double_t vertex[8][3]); Construct a bounding box from provided 8 vertices. TGLBoundingBox(const TGLVertex3& lowVertex, const TGLVertex3& highVertex); Construct an global axis ALIGNED bounding box from provided low/high vertex pair. TGLBoundingBox(const TGLBoundingBox& other); Construct a bounding box as copy of existing one. ~TGLBoundingBox(); Destroy bounding box. void UpdateCache(); Update the internally cached volume and axes vectors - these are retained; for efficiency - many more reads than modifications. void Set(const TGLVertex3 vertex[8]); Set a bounding box from provided 8 vertices. void Set(const Double_t vertex[8][3]); Set a bounding box from provided 8 vertices. void Set(const TGLBoundingBox& other); Set a bounding box from vertices of other. void SetEmpty(); Set bounding box empty - all vertices at (0,0,0). void SetAligned(const TGLVertex3& lowVertex, const TGLVertex3& highVertex); Set ALIGNED box from two low/high vertices. Box axes are aligned with; global frame axes that vertices are specified in. void SetAligned(UInt_t nbPnts, const Double_t* pnts); Set ALIGNED box from one or more points. Box axes are aligned with; global frame axes that points are specified in. void MergeAligned(const TGLBoundingBox& other); Expand current bbox so that it includes other's bbox.; This make the bbox axis-aligned. void ExpandAligned(const TGLVertex3& point); Expand current bbox so that it includes the point.; This make",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLBoundingBox.html:3694,cache,cached,3694,root/html528/TGLBoundingBox.html,https://root.cern,https://root.cern/root/html528/TGLBoundingBox.html,6,['cache'],['cached']
Performance," TGLVertex3 WorldToViewport(const TGLVertex3& worldVertex, TGLMatrix* modviewMat = 0) const; Convert a 3D world vertex to '3D' viewport (screen) one. The X()/Y(); components of the viewport vertex are the horizontal/vertical pixel; positions. The Z() component is the viewport depth value - for a; default depth range this is 0.0 (at near clip plane) to 1.0 (at far; clip plane). See OpenGL gluProject & glDepth documentation. Camera must have valid frustum cache - call Apply() after last modifcation, before using. TGLVector3 WorldDeltaToViewport(const TGLVertex3& worldRef, const TGLVector3& worldDelta) const; Convert a 3D vector worldDelta (shift) about vertex worldRef to a viewport; (screen) '3D' vector. The X()/Y() components of the vector are the horizontal; vertical pixel deltas. The Z() component is the viewport depth delta - for a; default depth range between 0.0 (at near clip plane) to 1.0 (at far clip plane); See OpenGL gluProject & glDepth documentation. Camera must have valid frustum cache - call Apply(). TGLVertex3 ViewportToWorld(const TGLVertex3& viewportVertex, TGLMatrix* modviewMat = 0) const; Convert a '3D' viewport vertex to 3D world one. The X()/Y() components; of viewportVertex are the horizontal/vertical pixel position. TGLLine3 ViewportToWorld(Double_t viewportX, Double_t viewportY) const; Convert a 2D viewport position to 3D world line - the projection of the; viewport point into 3D space. Line runs from near to far camera clip planes; (the minimum and maximum visible depth). See also; TGLVertex3 TGLCamera::ViewportToWorld(const TGLVertex3 & viewportVertex) const; for 3D viewport -> 3D world vertex conversions.; See also OpenGL gluUnProject & glDepth documentation. Camera must have valid frustum cache - call Apply() after last modifcation, before using. TGLLine3 ViewportToWorld(const TPoint& viewport) const; Convert a 2D viewport position to 3D world line - the projection of the; viewport point into 3D space. Line runs from near to far camera clip ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLCamera.html:10607,cache,cache,10607,root/html528/TGLCamera.html,https://root.cern,https://root.cern/root/html528/TGLCamera.html,6,['cache'],['cache']
Performance," TGenCollectionProxy.cxx:201; TGenListProxy::TGenListProxyTGenListProxy(const TGenCollectionProxy &c)Definition TGenCollectionProxy.cxx:193; TGenMapProxyLocaloptimization class.Definition TGenCollectionProxy.cxx:277; TGenMapProxy::TGenMapProxyTGenMapProxy(const TGenCollectionProxy &c)Definition TGenCollectionProxy.cxx:280; TGenMapProxy::~TGenMapProxy~TGenMapProxy() overrideDefinition TGenCollectionProxy.cxx:284; TGenMapProxy::DeleteItemvoid DeleteItem(Bool_t force, void *ptr) const overrideCall to delete/destruct individual item.Definition TGenCollectionProxy.cxx:288; TGenSetProxyLocaloptimization class.Definition TGenCollectionProxy.cxx:232; TGenSetProxy::Atvoid * At(UInt_t idx) overrideReturn the address of the value at index 'idx'.Definition TGenCollectionProxy.cxx:243; TGenSetProxy::~TGenSetProxy~TGenSetProxy() overrideDefinition TGenCollectionProxy.cxx:239; TGenSetProxy::TGenSetProxyTGenSetProxy(const TGenCollectionProxy &c)Definition TGenCollectionProxy.cxx:235; TGenVectorBoolProxyLocal optimization class.Definition TGenCollectionProxy.cxx:88; TGenVectorBoolProxy::fLastValueBool_t fLastValueDefinition TGenCollectionProxy.cxx:89; TGenVectorBoolProxy::Atvoid * At(UInt_t idx) overrideReturn the address of the value at index 'idx'.Definition TGenCollectionProxy.cxx:100; TGenVectorBoolProxy::TGenVectorBoolProxyTGenVectorBoolProxy(const TGenCollectionProxy &c)Definition TGenCollectionProxy.cxx:92; TGenVectorBoolProxy::~TGenVectorBoolProxy~TGenVectorBoolProxy() overrideDefinition TGenCollectionProxy.cxx:96; TGenVectorBoolProxy::DeleteItemvoid DeleteItem(Bool_t force, void *ptr) const overrideCall to delete/destruct individual item.Definition TGenCollectionProxy.cxx:115; TGenVectorProxyLocal optimization class.Definition TGenCollectionProxy.cxx:39; TGenVectorProxy::DeleteItemvoid DeleteItem(Bool_t force, void *ptr) const overrideCall to delete/destruct individual item.Definition TGenCollectionProxy.cxx:66; TGenVectorProxy::Atvoid * At(UInt_t idx) overrideReturn the add",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:87818,optimiz,optimization,87818,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['optimiz'],['optimization']
Performance," TGenVectorBoolProxy(*this);; 745 } else {; 746 return new TGenVectorProxy(*this);; 747 }; 748 }; 749 case ROOT::kSTLlist:; 750 case ROOT::kSTLforwardlist:; 751 return new TGenListProxy(*this);; 752 case ROOT::kSTLmap:; 753 case ROOT::kSTLunorderedmap:; 754 case ROOT::kSTLmultimap:; 755 case ROOT::kSTLunorderedmultimap:; 756 return new TGenMapProxy(*this);; 757 case ROOT::kSTLset:; 758 case ROOT::kSTLunorderedset:; 759 case ROOT::kSTLmultiset:; 760 case ROOT::kSTLunorderedmultiset:; 761 return new TGenSetProxy(*this);; 762 default:; 763 return new TGenCollectionProxy(*this);; 764 }; 765}; 766 ; 767////////////////////////////////////////////////////////////////////////////////; 768/// Proxy initializer; 769 ; 770TGenCollectionProxy *TGenCollectionProxy::Initialize(Bool_t silent) const; 771{; 772 TGenCollectionProxy* p = const_cast<TGenCollectionProxy*>(this);; 773 if ( fValue.load() ) return p;; 774 return p->InitializeEx(silent);; 775}; 776 ; 777////////////////////////////////////////////////////////////////////////////////; 778/// Reset the info gathered from StreamerInfos and value's TClass.; 779Bool_t TGenCollectionProxy::Reset(); 780{; 781 if (fReadMemberWise); 782 fReadMemberWise->Clear();; 783 delete fWriteMemberWise;; 784 fWriteMemberWise = nullptr;; 785 if (fConversionReadMemberWise); 786 fConversionReadMemberWise->clear();; 787 return kTRUE;; 788}; 789 ; 790////////////////////////////////////////////////////////////////////////////////; 791/// Check existence of function pointers; 792 ; 793void TGenCollectionProxy::CheckFunctions() const; 794{; 795 if ( 0 == fSize.call ) {; 796 Fatal(""TGenCollectionProxy"",""No 'size' function pointer for class %s present."",fName.c_str());; 797 }; 798 if ( 0 == fResize ) {; 799 Fatal(""TGenCollectionProxy"",""No 'resize' function for class %s present."",fName.c_str());; 800 }; 801 if ( 0 == fNext.call ) {; 802 Fatal(""TGenCollectionProxy"",""No 'next' function for class %s present."",fName.c_str());; 803 }; 804 if ( 0 == fFirst.cal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:23615,load,load,23615,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['load'],['load']
Performance," TGeoElementTable& ); assignment operator. ~TGeoElementTable(); destructor. void AddElement(const char* name, const char* title, Int_t z, Double_t a); Add an element to the table. Obsolete. void AddElement(const char* name, const char* title, Int_t z, Int_t n, Double_t a); Add an element to the table. void AddElement(TGeoElement* elem); Add a custom element to the table. void AddElementRN(TGeoElementRN* elem); Add a radionuclide to the table and map it. void AddIsotope(TGeoIsotope* isotope); Add isotope to the table. void BuildDefaultElements(); Creates the default element table. void ImportElementsRN(); Creates the list of radionuclides. Bool_t CheckTable() const; Checks status of element table. void ExportElementsRN(const char* filename = """"); Export radionuclides in a file. TGeoElement * FindElement(const char* name) const; Search an element by symbol or full name; Exact matching. TGeoIsotope * FindIsotope(const char* name) const; Find existing isotope by name. Not optimized for a big number of isotopes. TGeoElementRN * GetElementRN(Int_t ENDFcode) const; Retreive a radionuclide by ENDF code. TGeoElementRN * GetElementRN(Int_t a, Int_t z, Int_t iso = 0) const; Retreive a radionuclide by a, z, and isomeric state. void Print(Option_t* option = """") const; Print table of elements. The accepted options are:; """" - prints everything by default; ""D"" - prints default elements only; ""I"" - prints isotopes; ""R"" - prints radio-nuclides only if imported; ""U"" - prints user-defined elements only. TGeoElementRN * GetElement(); {return fElem;}. TObjArray * GetElementsRN() const; {return fListRN;}. Bool_t HasDefaultElements() const; {return TObject::TestBit(kETDefaultElements);}. Bool_t HasRNElements() const; {return TObject::TestBit(kETRNElements);}. Int_t GetNelements() const; {return fNelements;}. Int_t GetNelementsRN() const; {return fNelementsRN;}. » Author: Andrei Gheata 17/06/04 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Las",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoElementTable.html:7812,optimiz,optimized,7812,root/html534/TGeoElementTable.html,https://root.cern,https://root.cern/root/html534/TGeoElementTable.html,3,['optimiz'],['optimized']
Performance," TGeoHalfSpace (const char *name, Double_t *point[3],; Double_t *norm[3]);; 18.3.3 Composite Shapes; Composite shapes are Boolean combinations of two or more shape components. The supported Boolean operations are union (+), intersection (*) and subtraction(-). Composite shapes derive from the base TGeoShape class, therefore providing all shape features: computation of bounding box, finding if a given point is inside or outside the combination, as well as computing the distance to entering/exiting. They can be directly used for creating volumes or used in the definition of other composite shapes.; Composite shapes are provided in order to complement and extend the set of basic shape primitives. They have a binary tree internal structure, therefore all shape-related geometry queries are signals propagated from top level down to the final leaves, while the provided answers are assembled and interpreted back at top. This CSG (composite solid geometry) hierarchy is effective for small number of components, while performance drops dramatically for large structures. Building a complete geometry in this style is virtually possible but highly not recommended.; 18.3.3.1 The Structure of Composite Shapes; A composite shape can always be looked as the result of a Boolean operation between only two shape components. All information identifying these two components as well as their positions with respect to the frame of the composite is represented by an object called Boolean node. A composite shape has a pointer to such a Boolean node. Since the shape components may also be composites, they will also contain binary Boolean nodes branching out other two shapes in the hierarchy. Any such branch ends-up when the final leaves are no longer composite shapes, but basic primitives. The figure shows the composite shapes structure. The composite shapes structure. Suppose that A, B, C and D represent basic shapes, we will illustrate how the internal representation of few combinations look",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:915077,perform,performance,915077,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['perform'],['performance']
Performance," TGeoMatrix& mat); Set transformation matrix from TGeo's matrix. Bool_t AcceptElement(TEveElement* el); Check if el can be added to this element. In the base-class version we only make sure the new child is not; equal to this. void AddElement(TEveElement* el); Add el to the list of children. void RemoveElement(TEveElement* el); Remove el from the list of children. void RemoveElementLocal(TEveElement* el); Perform additional local removal of el.; Called from RemoveElement() which does whole untangling.; Put into special function as framework-related handling of; element removal should really be common to all classes and; clearing of local structures happens in between removal; of list-tree-items and final removal.; If you override this, you should also override; RemoveElementsLocal(). void RemoveElementsInternal(); Remove all elements. This assumes removing of all elements can; be done more efficiently then looping over them and removing one; by one. This protected function performs the removal on the; level of TEveElement. void RemoveElements(); Remove all elements. This assumes removing of all elements can; be done more efficiently then looping over them and removing; them one by one. void RemoveElementsLocal(); Perform additional local removal of all elements.; See comment to RemoveElementlocal(TEveElement*). void ProjectChild(TEveElement* el, Bool_t same_depth = kTRUE); If this is a projectable, loop over all projected replicas and; add the projected image of child 'el' there. This is supposed to; be called after you add a child to a projectable after it has; already been projected.; You might also want to call RecheckImpliedSelections() on this; element or 'el'. If 'same_depth' flag is true, the same depth as for parent object; is used in every projection. Otherwise current depth of each; relevant projection-manager is used. void ProjectAllChildren(Bool_t same_depth = kTRUE); If this is a projectable, loop over all projected replicas and; add the projected image ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveElement.html:24731,perform,performs,24731,root/html528/TEveElement.html,https://root.cern,https://root.cern/root/html528/TEveElement.html,6,['perform'],['performs']
Performance," TGeoShape *clip1, *clip2, ...; One might switch between several clipping shapes. Note that these shapes are considered defined in the current MARS. Composite shapes may be used.; 2. gGeoManager->SetClippingShape(clip1);; One can activate or deactivate clipping at any time: gGeoManager->SetClipping(flag);. Perform ray-tracing:gGeoManager->GetTopVolume()->Raytrace();. One can redo the steps 2-3 as many times as needed. Let us look how the rootgeom example looks clipped with a tube. Ray-tracing example with box-clipping. 18.8 Representing Misalignments of the Ideal Geometry; The ideal positioning of a detector does not match its position in the experimental hall. This generally happens not only for the detector modules, but also for their components. The accurate knowledge of the detector real misalignments can be extremely important for getting close to its designed resolution and the expected tracking efficiency. TGeo offers tools for representing positioning misalignments, applying them to the ideal geometry and performing navigation under these conditions. Detector tracking algorithms can then directly query the geometry for navigation purposes or for retrieving actual misalignment information.; 18.8.1 Physical Nodes; Physical nodes are the actual “touchable” objects in the geometry, representing actually a path of positioned volumes starting with the top node: path=/TOP/A_1/B_4/C_3 , where A, B, C represent names of volumes. The number of physical nodes is given by the total number of possible of branches in the geometry hierarchy. In case of detector geometries and specially for calorimeters this number can be of the order 106-109, therefore it is impossible to create all physical nodes as objects in memory. In TGeo, physical nodes are represented by the class TGeoPhysicalNode and can be created on demand for alignment purposes:; TGeoPhysicalNode(const char* path); The knowledge of the path to the objects that need to be misaligned is essential since there is no",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1013501,perform,performing,1013501,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['perform'],['performing']
Performance," TGlobal * GetGlobal(const TObject* obj, Bool_t load = kFALSE) const; Return pointer to global variable with address addr. TListOfFunctions * GetGlobalFunctions(); Internal routine returning, and creating if necessary, the list; of global function. TCollection * GetListOfFunctionOverloads(const char* name) const; Return the collection of functions named ""name"". TFunction * GetGlobalFunction(const char* name, const char* params = 0, Bool_t load = kFALSE); Return pointer to global function by name.; If params != 0 it will also resolve overloading other it returns the first; name match.; If params == 0 and load is true force reading of all currently defined; global functions from Cling.; The param string must be of the form: ""3189,\""aap\"",1.3"". TFunction * GetGlobalFunctionWithPrototype(const char* name, const char* proto = 0, Bool_t load = kFALSE); Return pointer to global function by name. If proto != 0; it will also resolve overloading. If load is true force reading; of all currently defined global functions from CINT (more expensive).; The proto string must be of the form: ""int, char*, float"". TObject * GetGeometry(const char* name) const; Return pointer to Geometry with name. TCollection * GetListOfEnums(Bool_t load = kFALSE). TCollection * GetListOfFunctionTemplates(). TCollection * GetListOfGlobals(Bool_t load = kFALSE); Return list containing the TGlobals currently defined.; Since globals are created and deleted during execution of the; program, we need to update the list of globals every time we; execute this method. However, when calling this function in; a (tight) loop where no interpreter symbols will be created; you can set load=kFALSE (default). TCollection * GetListOfGlobalFunctions(Bool_t load = kFALSE); Return list containing the TFunctions currently defined.; Since functions are created and deleted during execution of the; program, we need to update the list of functions every time we; execute this method. However, when calling this function in; a (tig",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TROOT.html:27872,load,load,27872,root/html602/TROOT.html,https://root.cern,https://root.cern/root/html602/TROOT.html,2,['load'],['load']
Performance," TH1D.; The projection is made from the cells along the Z axis; ranging from ixmin to ixmax and iymin to iymax included.; By default, bins 1 to nx and 1 to ny are included; By default, underflow and overflow are included in both the X and Y axis.; By Setting ixmin=1 and ixmax=NbinsX the underflow and/or overflow in X will be excluded; By setting iymin=1 and/or iymax=NbinsY the underflow and/or overflow in Y will be excluded. if option ""e"" is specified, the errors are computed.; if option ""d"" is specified, the projection is drawn in the current pad.; if option ""o"" original axis range of the target axes will be; kept, but only bins inside the selected range will be filled. NOTE that if a TH1D named ""name"" exists in the current directory or pad,; the histogram is reset and filled again with the projected contents of the TH3. implemented using Project3D. TH1D * DoProject1D(const char* name, const char* title, int imin1, int imax1, int imin2, int imax2, const TAxis* projAxis, const TAxis* axis1, const TAxis* axis2, Option_t* option) const; internal methdod performing the projection to 1D histogram; called from TH3::Project3D. TH1D * DoProject1D(const char* name, const char* title, const TAxis* projAxis, bool computeErrors, bool originalRange, bool useUF, bool useOF) const; internal methdod performing the projection to 1D histogram; called from other TH3::DoProject1D. TH2D * DoProject2D(const char* name, const char* title, const TAxis* projX, const TAxis* projY, bool computeErrors, bool originalRange, bool useUF, bool useOF) const; internal method performing the projection to a 2D histogram; called from TH3::Project3D. TH1 * Project3D(Option_t* option = ""x"") const; Project a 3-d histogram into 1 or 2-d histograms depending on the; option parameter; option may contain a combination of the characters x,y,z,e; option = ""x"" return the x projection into a TH1D histogram; option = ""y"" return the y projection into a TH1D histogram; option = ""z"" return the z projection into a TH1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH3.html:45820,perform,performing,45820,root/html602/TH3.html,https://root.cern,https://root.cern/root/html602/TH3.html,2,['perform'],['performing']
Performance," THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41. 6 - A member function with parameters of a general C++ class; A TF1 can be created in this case from any member function of a class which has the signature of (double * , double *) and returning a double.; Example:; class MyFunction {; public:; ...; double Evaluate() (double *x, double *p) {; // function implementation; }; };; {; ....; MyFunction *fptr = new MyFunction(....); // create the user function class; auto f = new TF1(""f"",fptr,&MyFunction::Evaluate,0,1,npar,""MyFunction"",""Evaluate""); // create TF1 class.; ; .....; }; See also the tutorial math/exampleFunctor.C for a running example. PyROOT; The TF1 class has several additions for its use from Python, which are also available in its subclasses TF2 and TF3.; First, TF1 instance can be initialized with user-defined Python functions. Given a generic Python callable, the following can performed:; def func(x: numpy.ndarray, pars: numpy.ndarray) -> float:; return pars[0] * x[0] * x[0] + x[1] * pars[0]; ; my_func = ROOT.TF1(""my_func"", func, -10, 10, npar=2, ndim=2); Second, after performing the initialisation with a Python functor, the TF1 instance can be evaluated using the Pythonized TF1::EvalPar function. The pythonization allows passing in 1D(single set of x variables) or 2D(a dataset) NumPy arrays.; The following example shows how we can create a TF1 instance with a Python function and evaluate it on a dataset:; import ROOT; import math; import numpy as np; ; def pyf_tf1_coulomb(x, p):; return p[1] * x[0] * x[1] / (p[0]**2) * math.exp(-p[2] / p[0]); ; rtf1_coulomb = ROOT.TF1(""my_func"", pyf_tf1_coulomb, -10, 10, ndims = 2, npars = 3); ; # x dataset: 5 pairs of particle charges; x = np.array([; [1.0, 10, 2.0],; [1.5, 10, 2.5],; [2.0, 10, 3.0],; [2.5, 10, 3.5],; [3.0, 10, 4.0]; ]); ; params = np.array([; [1.0], # Distance between charges r; [8.99e9], # Cou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:8259,perform,performed,8259,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,1,['perform'],['performed']
Performance," THttpServer(""http:8080"");; TNamed* n1 = new TNamed(""obj"", ""title"");; serv->Register(""subfolder"", n1);; One could request a JSON representation of such object with the command:; [shell] wget http://localhost:8080/Objects/subfolder/obj/root.json; Then, its representation will look like:; {; ""_typename"" : ""TNamed"",; ""fUniqueID"" : 0,; ""fBits"" : 0,; ""fName"" : ""obj"",; ""fTitle"" : ""title""; }; The following requests can be performed:. Name; Description. root.bin; binary data produced by object streaming with TBufferFile. root.json; ROOT JSON representation for object and objects members. file.root; Creates TMemFile with the only object, from ROOT 6.32. root.xml; ROOT XML representation. root.png; PNG image (if object drawing implemented). root.gif; GIF image. root.jpeg; JPEG image. exe.json; method execution in the object. exe.bin; method execution, return result in binary form. cmd.json; command execution. item.json; item (object) properties, specified on the server. multi.json; perform several requests at once. multi.bin; perform several requests at once, return result in binary form. All data will be automatically zipped if ‘.gz’ extension is appended. Like:; [shell] wget http://localhost:8080/Objects/subfolder/obj/root.json.gz; If the access to the server is restricted with htdigest, it is recommended to use the curl program since only curl correctly implements such authentication method. The command will look like:; [shell] curl --user ""accout:password"" http://localhost:8080/Objects/subfolder/obj/root.json --digest -o root.json; 1.9.1 Objects data access in JSON format; Request root.json implemented with TBufferJSON class. TBufferJSON generates such object representation, which could be directly used in JSROOT for drawing. root.json request returns either complete object or just object member like:; [shell] wget http://localhost:8080/Objects/subfolder/obj/fTitle/root.json; The result will be: ""title"".; For the root.json request one could specify the ‘compact’ parameter,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html:14663,perform,perform,14663,root/htmldoc/guides/HttpServer/HttpServer.html,https://root.cern,https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html,1,['perform'],['perform']
Performance," TInterpreter::EErrorCode { kNoError; kRecoverable; kDangerous; kFatal; kProcessing; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. G__dictpositionfDictPosCINT dictionary context after init; G__dictpositionfDictPosGlobalsCINT dictionary context after ResetGlobals(); Int_tfExitCodevalue passed to exit() in interpreter; Int_tfGlobalsListSerialIndicator of the last time we refresh the ROOT list of globals.; TStringfIncludePathlist of CINT include paths; Bool_tfLockProcessLinetrue if ProcessLine should lock gCINTMutex; TEnv*fMapfilemap of classes and libraries; Int_tfMore1 if more input is required; charfPrompt[64]proposed prompt string; TObjArray*fRootmapFileslist of non-default rootmap files loaded; TStringfRootmapLoadPathdynamic load path used for loading rootmap files; TStringfSharedLibslist of shared libraries loaded by G__loadfile; Int_tfSharedLibsSerialIndicator of the last time we set fSharedLibs; static void*fgSetOfSpecialsset of TObject*s used in CINT variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCint(const char* name, const char* title); Initialize the CINT interpreter interface. ~TCint(); Destroy the CINT interpreter interface. void ClearFileBusy(); Reset CINT internal state in case a previous action was not correctly; terminated by G__init_cint() and G__dlmod(). void ClearStack(); Delete existing temporary values. Int_t InitializeDictionaries(); Initialize all registered dictionaries. Normally this is already done; by G__init_cint() and G__dlmod(). void EnableAutoLoading(); Enable the automatic loading of shared libraries when a class; is used that is stored in a not yet loaded library. Uses the; info",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TCint.html:19327,load,loaded,19327,root/html532/TCint.html,https://root.cern,https://root.cern/root/html532/TCint.html,8,['load'],"['load', 'loaded', 'loading']"
Performance, TList::First for the intended behavior. ; Reimplemented from TList.; Definition at line 251 of file TViewPubFunctions.cxx. ◆ FirstLink(). TObjLink * TViewPubFunctions::FirstLink ; (; ); const. overrideprotectedvirtual . FirstLink is not allowed in this class. ; See TList::FirstLink for the intended behavior. ; Reimplemented from TList.; Definition at line 261 of file TViewPubFunctions.cxx. ◆ GetListOfClasses(). virtual const TList * TViewPubFunctions::GetListOfClasses ; (; ); const. inlinevirtual . Definition at line 45 of file TViewPubFunctions.h. ◆ GetObjectRef(). TObject ** TViewPubFunctions::GetObjectRef ; (; const TObject * ; obj); const. overrideprotectedvirtual . GetObjectRef is not allowed in this class. ; See TList::GetObjectRef for the intended behavior. ; Reimplemented from TList.; Definition at line 271 of file TViewPubFunctions.cxx. ◆ GetSize(). Int_t TViewPubFunctions::GetSize ; (; ); const. overridevirtual . Return the total number of public methods (currently loaded in the list of functions) in this class and all its base classes. ; Reimplemented from TCollection.; Definition at line 281 of file TViewPubFunctions.cxx. ◆ Last(). TObject * TViewPubFunctions::Last ; (; ); const. overrideprotectedvirtual . Last is not allowed in this class. ; See TList::Last for the intended behavior. ; Reimplemented from TList.; Definition at line 310 of file TViewPubFunctions.cxx. ◆ LastLink(). TObjLink * TViewPubFunctions::LastLink ; (; ); const. overrideprotectedvirtual . LastLink is not allowed in this class. ; See TList::LastLink for the intended behavior. ; Reimplemented from TList.; Definition at line 320 of file TViewPubFunctions.cxx. ◆ Load(). void TViewPubFunctions::Load ; (; ). Load all the functions known to the interpreter for the scope 'fClass' and all its bases classes. ; Definition at line 298 of file TViewPubFunctions.cxx. ◆ MakeIterator(). TIterator * TViewPubFunctions::MakeIterator ; (; Bool_t ; dir = kIterForward); const. overridevirtual . Return a ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTViewPubFunctions.html:26505,load,loaded,26505,doc/master/classTViewPubFunctions.html,https://root.cern,https://root.cern/doc/master/classTViewPubFunctions.html,1,['load'],['loaded']
Performance," TMVA ; TMVA::BDTEventWrapper ; TMVA::BinarySearchTree Binary search tree including volume search method ; TMVA::BinarySearchTreeNode Node for the BinarySearchTree; TMVA::BinaryTree Base class for BinarySearch and Decision Trees; TMVA::CCPruner ; TMVA::CCTreeWrapper ; TMVA::Config Singleton class for global configuration settings; TMVA::Config::IONames ; TMVA::Config::VariablePlotting ; TMVA::Configurable Virtual base class for all TMVA method; TMVA::CostComplexityPruneTool ; TMVA::CrossEntropy Implementation of the CrossEntropy as separation criterion; TMVA::DecisionTree implementation of a Decision Tree; TMVA::DecisionTreeNode Node for the Decision Tree ; TMVA::Event ; TMVA::Factory The factory creates all MVA methods, and performs their training and testing; TMVA::FitterBase Baseclass for fitters; TMVA::GeneticAlgorithm Genetic algorithm controller; TMVA::GeneticFitter Fitter using a Genetic Algorithm; TMVA::GeneticGenes Genes definition for genetic algorithm; TMVA::GeneticPopulation Population definition for genetic algorithm; TMVA::GeneticRange Range definition for genetic algorithm; TMVA::GiniIndex Implementation of the GiniIndex as separation criterion; TMVA::GiniIndexWithLaplace Implementation of the GiniIndexWithLaplace as separation criterion; TMVA::IFitterTarget base class for a fitter ""target""; TMVA::IMethod Method Interface; TMVA::IMetric calculates the ""distance"" between two points; TMVA::Interval Interval definition, continous and discrete; TMVA::KDEKernel Kernel density estimator for PDF smoothing; TMVA::MCFitter Fitter using Monte Carlo samp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TMVA_Index.html:1152,perform,performs,1152,root/html526/TMVA_Index.html,https://root.cern,https://root.cern/root/html526/TMVA_Index.html,1,['perform'],['performs']
Performance," TMVA ; TMVA::BDTEventWrapper ; TMVA::BinarySearchTree Binary search tree including volume search method ; TMVA::BinarySearchTreeNode Node for the BinarySearchTree; TMVA::BinaryTree Base class for BinarySearch and Decision Trees; TMVA::CCPruner ; TMVA::CCTreeWrapper ; TMVA::Config Singleton class for global configuration settings; TMVA::Config::IONames ; TMVA::Config::VariablePlotting ; TMVA::Configurable Virtual base class for all TMVA method; TMVA::CostComplexityPruneTool ; TMVA::CrossEntropy Implementation of the CrossEntropy as separation criterion; TMVA::DecisionTree implementation of a Decision Tree; TMVA::DecisionTreeNode Node for the Decision Tree ; TMVA::Factory The factory creates all MVA methods, and performs their training and testing; TMVA::FitterBase Baseclass for fitters; TMVA::GeneticAlgorithm Genetic algorithm controller; TMVA::GeneticFitter Fitter using a Genetic Algorithm; TMVA::GeneticGenes Genes definition for genetic algorithm; TMVA::GeneticPopulation Population definition for genetic algorithm; TMVA::GeneticRange Range definition for genetic algorithm; TMVA::GiniIndex Implementation of the GiniIndex as separation criterion; TMVA::GiniIndexWithLaplace Implementation of the GiniIndexWithLaplace as separation criterion; TMVA::IFitterTarget base class for a fitter ""target""; TMVA::IMethod Method Interface; TMVA::Interval Interval definition, continous and discrete; TMVA::KDEKernel Kernel density estimator for PDF smoothing; TMVA::LogInterval Interval definition, continous and discrete; TMVA::MCFitter Fitter using Monte Carlo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA_Index.html:1154,perform,performs,1154,root/html534/TMVA_Index.html,https://root.cern,https://root.cern/root/html534/TMVA_Index.html,1,['perform'],['performs']
Performance," TMVA ; TMVA::BDTEventWrapper ; TMVA::BinarySearchTree Binary search tree including volume search method ; TMVA::BinarySearchTreeNode Node for the BinarySearchTree; TMVA::BinaryTree Base class for BinarySearch and Decision Trees; TMVA::CCPruner ; TMVA::CCTreeWrapper ; TMVA::Config Singleton class for global configuration settings; TMVA::Config::IONames ; TMVA::Config::VariablePlotting ; TMVA::Configurable Virtual base class for all TMVA method; TMVA::CostComplexityPruneTool ; TMVA::CrossEntropy Implementation of the CrossEntropy as separation criterion; TMVA::DecisionTree implementation of a Decision Tree; TMVA::DecisionTreeNode Node for the Decision Tree ; TMVA::Factory The factory creates all MVA methods, and performs their training and testing; TMVA::FitterBase Baseclass for fitters; TMVA::GeneticAlgorithm Genetic algorithm controller; TMVA::GeneticFitter Fitter using a Genetic Algorithm; TMVA::GeneticGenes Genes definition for genetic algorithm; TMVA::GeneticPopulation Population definition for genetic algorithm; TMVA::GeneticRange Range definition for genetic algorithm; TMVA::GiniIndex Implementation of the GiniIndex as separation criterion; TMVA::GiniIndexWithLaplace Implementation of the GiniIndexWithLaplace as separation criterion; TMVA::IFitterTarget base class for a fitter ""target""; TMVA::IMethod Method Interface; TMVA::Interval Interval definition, continous and discrete; TMVA::KDEKernel Kernel density estimator for PDF smoothing; TMVA::MCFitter Fitter using Monte Carlo sampling of parameters ; TMVA::MethodANNBase Base class for TM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA_Index.html:1154,perform,performs,1154,root/html530/TMVA_Index.html,https://root.cern,https://root.cern/root/html530/TMVA_Index.html,2,['perform'],['performs']
Performance," TMVA ; TMVA::BDTEventWrapper ; TMVA::BinarySearchTree Binary search tree including volume search method ; TMVA::BinarySearchTreeNode Node for the BinarySearchTree; TMVA::BinaryTree Base class for BinarySearch and Decision Trees; TMVA::CCPruner ; TMVA::CCTreeWrapper ; TMVA::Config Singleton class for global configuration settings; TMVA::Config::IONames ; TMVA::Config::VariablePlotting ; TMVA::Configurable Virtual base class for all TMVA method; TMVA::CostComplexityPruneTool ; TMVA::CrossEntropy Implementation of the CrossEntropy as separation criterion; TMVA::DecisionTree implementation of a Decision Tree; TMVA::DecisionTreeNode Node for the Decision Tree ; TMVA::Factory The factory creates all MVA methods, and performs their training and testing; TMVA::FitterBase Baseclass for fitters; TMVA::GeneticAlgorithm Genetic algorithm controller; TMVA::GeneticFitter Fitter using a Genetic Algorithm; TMVA::GeneticGenes Genes definition for genetic algorithm; TMVA::GeneticPopulation Population definition for genetic algorithm; TMVA::GeneticRange Range definition for genetic algorithm; TMVA::GiniIndex Implementation of the GiniIndex as separation criterion; TMVA::GiniIndexWithLaplace Implementation of the GiniIndexWithLaplace as separation criterion; TMVA::IFitterTarget base class for a fitter ""target""; TMVA::IMethod Method Interface; TMVA::Interval Interval definition, continous and discrete; TMVA::KDEKernel Kernel density estimator for PDF smoothing; TMVA::MCFitter Fitter using Monte Carlo sampling of parameters ; TMVA::MethodANNBase Base class for TMVA ANNs; TMVA::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA_Index.html:1139,perform,performs,1139,root/html528/TMVA_Index.html,https://root.cern,https://root.cern/root/html528/TMVA_Index.html,1,['perform'],['performs']
Performance," TMVA::MethodMLP::ComputeDEDw ; (; ). private . Definition at line 697 of file MethodMLP.cxx. ◆ ComputeEstimator(). Double_t TMVA::MethodMLP::ComputeEstimator ; (; std::vector< Double_t > & ; parameters). this function is called by GeneticANN for GA optimization ; Definition at line 1393 of file MethodMLP.cxx. ◆ DecaySynapseWeights(). void TMVA::MethodMLP::DecaySynapseWeights ; (; Bool_t ; lateEpoch). private . decay synapse weights in last 10 epochs, lower learning rate even more to find a good minimum ; Definition at line 1208 of file MethodMLP.cxx. ◆ DeclareOptions(). void TMVA::MethodMLP::DeclareOptions ; (; ). privatevirtual . define the options (their key words) that can be set in the option string ; know options:. TrainingMethod <string> Training method available values are:; BP Back-Propagation <default>; GA Genetic Algorithm (takes a LONG time). LearningRate <float> NN learning rate parameter; DecayRate <float> Decay rate for learning parameter; TestRate <int> Test for overtraining performed at each #th epochs; BPMode <string> Back-propagation learning mode available values are:; sequential <default>; batch. BatchSize <int> Batch size: number of events/batch, only set if in Batch Mode,; -1 for BatchSize=number_of_events . Reimplemented from TMVA::MethodANNBase.; Definition at line 195 of file MethodMLP.cxx. ◆ DeclFileName(). static const char * TMVA::MethodMLP::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 219 of file MethodMLP.h. ◆ DerivDir(). Double_t TMVA::MethodMLP::DerivDir ; (; TMatrixD & ; Dir). private . Definition at line 825 of file MethodMLP.cxx. ◆ EstimatorFunction(). Double_t TMVA::MethodMLP::EstimatorFunction ; (; std::vector< Double_t > & ; parameters). virtual . interface to the estimate ; Implements TMVA::IFitterTarget.; Definition at line 1385 of file MethodMLP.cxx. ◆ GeneticMinimize(). void TMVA::MethodMLP::GeneticMinimize ; (; ). private . create genetics class similar t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html:41892,perform,performed,41892,doc/master/classTMVA_1_1MethodMLP.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html,1,['perform'],['performed']
Performance," TMap*TVirtualPacketizer::fSlaveStatsslave status, keyed by correspondig TSlave; TTimeTVirtualPacketizer::fStartTimetime offset; Bool_tTVirtualPacketizer::fStopTermination of Process() requested?; Float_tTVirtualPacketizer::fTimeUpdttime between updates; Long64_tTVirtualPacketizer::fTotalEntriestotal number of entries to be distributed;; TVirtualPacketizer::EUseEstOptTVirtualPacketizer::fUseEstOptControl usage of estimated values for the progress info; Bool_tTVirtualPacketizer::fValidConstructed properly?; static TVirtualPacketizer::EUseEstOptTVirtualPacketizer::kEstAverage; static TVirtualPacketizer::EUseEstOptTVirtualPacketizer::kEstCurrent; static TVirtualPacketizer::EUseEstOptTVirtualPacketizer::kEstOff. private:. TList*fActivenodes with unfinished files; Bool_tfDefMaxWrkNodeWhether the default is used for the max workers per node; TList*fFileNodesnodes with files; Bool_tfHeuristicPSizWhether the packet size is calculated heuristically; Int_tfMaxPerfIdxmaximum of our slaves' performance index; Long_tfMaxSlaveCntmaximum number of workers per filenode (Long_t to avoid; Int_tfPacketAsAFractionused to calculate the packet size; Long64_tfPacketSizeglobal base packet size; TList*fPacketsall processed packets; TList*fUnAllocatednodes with unallocated files. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPacketizer(TDSet* dset, TList* slaves, Long64_t first, Long64_t num, TList* input, TProofProgressStatus* st); Constructor. ~TPacketizer(); Destructor. Int_t AddWorkers(TList* workers); Adds new workers. Returns the number of workers added, or -1 on failure. void RemoveUnAllocNode(TPacketizer::TFileNode* ); Remove unallocated node. void RemoveActive(TPacketizer::TFileStat* file); Remove file from the list of actives. void RemoveActiveNode(TPacketizer::TFileNode* ); Remove node from the list of actives. void Reset(); Reset the internal datastructure for packet distribution. void ValidateFiles(TDSet* dset, TList* slaves, Long64_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TPacketizer.html:10983,perform,performance,10983,root/html604/TPacketizer.html,https://root.cern,https://root.cern/root/html604/TPacketizer.html,1,['perform'],['performance']
Performance," TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_toperator==(const char*) const; virtual Bool_toperator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidRooAbsArg::Print(Option_t* options = 0) const; virtual voidRooAbsArg::printAddress(ostream& os) const; virtual voidRooAbsArg::printArgs(ostream& os) const; virtual voidRooAbsArg::printClassName(ostream& os) const; voidRooAbsArg::printCompactTree(const char* indent = """", const char* fileName = 0, const char* namePat = 0, RooAbsArg* client = 0); voidRooAbsArg::printCompactTree(ostream& os, const char* indent = """", const char* namePat = 0, RooAbsArg* client = 0); virtual voidRooAbsArg::printCompactTreeHook(ostream& os, const char* ind = """"); voidRooAbsArg::printComponentTree(const char* indent = """", con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsString.html:10397,optimiz,optimizeCacheMode,10397,root/html534/RooAbsString.html,https://root.cern,https://root.cern/root/html534/RooAbsString.html,1,['optimiz'],['optimizeCacheMode']
Performance," TObjArray*TString::Tokenize(const TString& delim) const; Bool_tTString::Tokenize(TString& tok, Ssiz_t& from, const char* delim = "" "") const; voidTString::ToLower(); voidTString::ToUpper(); static TStringTString::UItoa(UInt_t value, Int_t base); static TStringTString::ULLtoa(ULong64_t value, Int_t base); static voidTString::WriteString(TBuffer& b, const TString* a). protected:. static Ssiz_tTString::AdjustCapacity(Ssiz_t oldCap, Ssiz_t newCap); static Ssiz_tTString::Align(Ssiz_t s); voidTString::AssertElement(Ssiz_t nc) const; voidTString::Clobber(Ssiz_t nc); voidDrawHotChar(Drawable_t id, GContext_t gc, Int_t x, Int_t y); voidTString::InitChar(char c); static Ssiz_tTString::Recommend(Ssiz_t s). Data Members; public:. enum TString::[unnamed] { kAlignment; };; enum TString::EStripType { kLeading; kTrailing; kBoth; };; enum TString::ECaseCompare { kExact; kIgnoreCase; };. protected:. charfHotCharhot character; Int_tfHotPosposition of hot character; GContext_tfLastGCcontext used during last drawing; Int_tfOff1variable used during drawing (cache); Int_tfOff2variable used during drawing (cache). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGHotString(const char* s); Create a hot string. void Draw(Drawable_t id, GContext_t gc, Int_t x, Int_t y); Draw a hot string and underline the hot character. void DrawWrapped(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, FontStruct_t font); Draw a hot string in a column with width w. If string is longer than; w wrap it to next line. void DrawHotChar(Drawable_t id, GContext_t gc, Int_t x, Int_t y); Draw the underline under the hot character. TGHotString(const char* s). Int_t GetHotChar() const; { return fHotChar; }. Int_t GetHotPos() const; { return fHotPos; }. » Author: Fons Rademakers 05/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-04-28 16:43; This page has been automatically generated. For comments or ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGHotString.html:8721,cache,cache,8721,root/html534/TGHotString.html,https://root.cern,https://root.cern/root/html534/TGHotString.html,2,['cache'],['cache']
Performance," TObjLink *lnk = LinkAt(idx);; 313 if (!lnk); 314 TList::AddLast(obj);; 315 else if (lnk == fFirst.get()); 316 TList::AddFirst(obj);; 317 else {; 318 NewLink(obj, lnk->fPrev.lock());; 319 fSize++;; 320 Changed();; 321 }; 322}; 323 ; 324////////////////////////////////////////////////////////////////////////////////; 325/// Returns the object after object obj. Obj is found using the; 326/// object's IsEqual() method. Returns 0 if obj is last in list.; 327 ; 328TObject *TList::After(const TObject *obj) const; 329{; 330 R__COLLECTION_WRITE_GUARD();; 331 ; 332 TObjLink *t;; 333 ; 334 R__COLLECTION_WRITE_LOCKGUARD(ROOT::gCoreMutex);; 335 ; 336 auto cached = fCache.lock();; 337 if (cached.get() && cached->GetObject() && cached->GetObject()->IsEqual(obj)) {; 338 t = cached.get();; 339 ((TList*)this)->fCache = cached->fNext; //cast const away, fCache should be mutable; 340 } else {; 341 Int_t idx;; 342 t = FindLink(obj, idx);; 343 if (t) ((TList*)this)->fCache = t->fNext;; 344 }; 345 ; 346 if (t && t->Next()); 347 return t->Next()->GetObject();; 348 else; 349 return nullptr;; 350}; 351 ; 352////////////////////////////////////////////////////////////////////////////////; 353/// Returns the object at position idx. Returns 0 if idx is out of range.; 354 ; 355TObject *TList::At(Int_t idx) const; 356{; 357 R__COLLECTION_WRITE_LOCKGUARD(ROOT::gCoreMutex);; 358 R__COLLECTION_WRITE_GUARD();; 359 ; 360 TObjLink *lnk = LinkAt(idx);; 361 if (lnk) return lnk->GetObject();; 362 return nullptr;; 363}; 364 ; 365////////////////////////////////////////////////////////////////////////////////; 366/// Returns the object before object obj. Obj is found using the; 367/// object's IsEqual() method. Returns 0 if obj is first in list.; 368 ; 369TObject *TList::Before(const TObject *obj) const; 370{; 371 R__COLLECTION_WRITE_LOCKGUARD(ROOT::gCoreMutex);; 372 R__COLLECTION_WRITE_GUARD();; 373 ; 374 TObjLink *t;; 375 ; 376 auto cached = fCache.lock();; 377 if (cached.get() && cached->GetObject() && c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TList_8cxx_source.html:9838,cache,cached,9838,doc/master/TList_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TList_8cxx_source.html,1,['cache'],['cached']
Performance," TObject*TDirectory::Remove(TObject*); virtual Int_tReOpen(Option_t* mode); virtual voidTDirectoryFile::ResetAfterMerge(TFileMergeInfo*); voidTObject::ResetBit(UInt_t f); virtual voidResetErrno() const; virtual voidTDirectoryFile::rmdir(const char* name); virtual voidTDirectoryFile::Save(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual Int_tTDirectoryFile::SaveObjectAs(const TObject* obj, const char* filename = """", Option_t* option = """") const; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTDirectoryFile::SaveSelf(Bool_t force = kFALSE); virtual voidSeek(Long64_t, TFile::ERelativeTo = kBeg); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTDirectoryFile::SetBufferSize(Int_t bufsize); static Bool_tTFile::SetCacheFileDir(const char* cacheDir, Bool_t operateDisconnected = kTRUE, Bool_t forceCacheread = kFALSE); virtual voidTFile::SetCacheRead(TFileCacheRead* cache); virtual voidTFile::SetCacheWrite(TFileCacheWrite* cache); virtual voidTFile::SetCompressionAlgorithm(Int_t algorithm = 0); virtual voidTFile::SetCompressionLevel(Int_t level = 1); virtual voidTFile::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEND(Long64_t); static voidTFile::SetFileBytesRead(Long64_t bytes = 0); static voidTFile::SetFileBytesWritten(Long64_t bytes = 0); static voidTFile::SetFileReadCalls(Int_t readcalls = 0); virtual voidTDirectoryFile::SetModified(); virtual voidTDirectory::SetMother(TObject* mother); virtual voidTDirectory::SetName(const char* newname); static voidTXMLSetup::SetNameSpaceBase(const char* namespacebase); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTFile::SetOffset(Long64_t offset, TFile::ERelativeTo pos = kBeg); static Bool_tTFile::SetOnlySt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TXMLFile.html:14296,cache,cache,14296,root/html532/TXMLFile.html,https://root.cern,https://root.cern/root/html532/TXMLFile.html,1,['cache'],['cache']
Performance," TObject*TDirectory::Remove(TObject*); virtual Int_tReOpen(Option_t* mode); virtual voidTDirectoryFile::ResetAfterMerge(TFileMergeInfo*); voidTObject::ResetBit(UInt_t f); virtual voidResetErrno() const; virtual voidTDirectoryFile::rmdir(const char* name); virtual voidTDirectoryFile::Save(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual Int_tTDirectoryFile::SaveObjectAs(const TObject* obj, const char* filename = """", Option_t* option = """") const; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTDirectoryFile::SaveSelf(Bool_t force = kFALSE); virtual voidSeek(Long64_t, TFile::ERelativeTo = kBeg); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTDirectoryFile::SetBufferSize(Int_t bufsize); static Bool_tTFile::SetCacheFileDir(const char* cacheDir, Bool_t operateDisconnected = kTRUE, Bool_t forceCacheread = kFALSE); virtual voidTFile::SetCacheRead(TFileCacheRead* cache, TObject* tree = 0, TFile::ECacheAction action = kDisconnect); virtual voidTFile::SetCacheWrite(TFileCacheWrite* cache); virtual voidTFile::SetCompressionAlgorithm(Int_t algorithm = 0); virtual voidTFile::SetCompressionLevel(Int_t level = 1); virtual voidTFile::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEND(Long64_t); static voidTFile::SetFileBytesRead(Long64_t bytes = 0); static voidTFile::SetFileBytesWritten(Long64_t bytes = 0); static voidTFile::SetFileReadCalls(Int_t readcalls = 0); virtual voidTDirectoryFile::SetModified(); virtual voidTDirectory::SetMother(TObject* mother); virtual voidTDirectory::SetName(const char* newname); static voidTXMLSetup::SetNameSpaceBase(const char* namespacebase); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTFile::SetOffset(Long64_t offset, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXMLFile.html:14375,cache,cache,14375,root/html534/TXMLFile.html,https://root.cern,https://root.cern/root/html534/TXMLFile.html,3,['cache'],['cache']
Performance," TObject. ←; TFileCacheRead. ←; TTreeCache. ←. TTreeCacheUnzip. Function documentation; TTreeCache(); Default Constructor. TTreeCache(TTree* tree, Int_t buffersize = 0); Constructor. ~TTreeCache(); destructor. (in general called by the TFile destructor). Int_t AddBranch(TBranch* b, Bool_t subgbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket; Returns 0 branch added or already included; -1 on error. Int_t AddBranch(const char* branch, Bool_t subbranches = kFALSE); Add a branch to the list of branches to be stored in the cache; this is to be used by user (thats why we pass the name of the branch).; It works in exactly the same way as TTree::SetBranchStatus so you; probably want to look over ther for details about the use of bname; with regular expressions.; The branches are taken with respect to the Owner of this TTreeCache; (i.e. the original Tree); NB: if bname=""*"" all branches are put in the cache and the learning phase stopped; Returns 0 branch added or already included; -1 on error. Int_t DropBranch(TBranch* b, Bool_t subbranches = kFALSE); Remove a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket.; Returns 0 branch dropped or not in cache; -1 on error. Int_t DropBranch(const char* branch, Bool_t subbranches = kFALSE); Remove a branch to the list of branches to be stored in the cache; this is to be used by user (thats why we pass the name of the branch).; It works in exactly the same way as TTree::SetBranchStatus so you; probably want to look over ther for details about the use of bname; with regular expresions.; The branches are taken with respect to the Owner of this TTreeCache; (i.e. the original Tree); NB: if bname=""*"" all branches are put in the cache and the learning phase stopped; Returns 0 branch dropped or not in cache; -1 on error. Bool_t FillBuffer(); Fill the cache buffer with the branches in the cache. Double_t GetEff",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeCache.html:22816,cache,cache,22816,root/html604/TTreeCache.html,https://root.cern,https://root.cern/root/html604/TTreeCache.html,1,['cache'],['cache']
Performance, TObject::EStatusBitsTObject::kMustCleanup; static TTree::ESetBranchAddressStatusTTree::kNoCheck; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TTree::(anonymous)TTree::kSplitCollectionOfPointers; static TTree::ESetBranchAddressStatusTTree::kVoidPtr; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TList*TTree::fAliasesList of aliases for expressions based on the tree branches.; Long64_tTTree::fAutoFlushAutoflush tree when fAutoFlush entries written; Long64_tTTree::fAutoSaveAutosave tree when fAutoSave bytes produced; TBranchRef*TTree::fBranchRefBranch supporting the TRefTable (if any); TObjArrayTTree::fBranchesList of Branches; Bool_tTTree::fCacheDoAutoInit! true if cache auto creation or resize check is needed; Long64_tTTree::fCacheSize! Maximum size of file buffers; Bool_tTTree::fCacheUserSet! true if the cache setting was explicitly given by user; Long64_tTTree::fChainOffset! Offset of 1st entry of this Tree in a TChain; TList*TTree::fClones! List of cloned trees which share our addresses; Long64_t*TTree::fClusterRangeEnd[fNClusterRange] Last entry of a cluster range.; Long64_t*TTree::fClusterSize[fNClusterRange] Number of entries in each cluster for a given range.; Int_tTTree::fDebug! Debug level; Long64_tTTree::fDebugMax! Last entry number to debug; Long64_tTTree::fDebugMin! First entry number to debug; Int_tTTree::fDefaultEntryOffsetLenInitial Length of fEntryOffset table in the basket buffers; TDirectory*TTree::fDirectory! Pointer to directory holding this tree; Long64_tTTree::fEntriesNumber of entries; TEntryList*TTree::fEntryList! Pointer to event selection list (if one); Long64_tTTree::fEstimateNumber of entries to estimate histogram limits; TEventList*TTree::fEventList! Pointer to event select,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THbookTree.html:23986,cache,cache,23986,root/html602/THbookTree.html,https://root.cern,https://root.cern/root/html602/THbookTree.html,2,['cache'],['cache']
Performance," TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. static RooExpensiveObjectCache*_instance!; map<TString,RooExpensiveObjectCache::ExpensiveObject*>_map; Int_t_nextUID. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooExpensiveObjectCache(); Constructor. RooExpensiveObjectCache(const RooExpensiveObjectCache& ); Copy constructor. ~RooExpensiveObjectCache(); Destructor. RooExpensiveObjectCache& instance(); Return reference to singleton instance. void cleanup(); Static function called by RooSentinel atexit() handler to cleanup at end of program. Bool_t registerObject(const char* ownerName, const char* objectName, TObject& cacheObject, const RooArgSet& params); Register object associated with given name and given associated parameters with given values in cache.; The cache will take _ownership_of_object_ and is indexed under the given name (which does not; need to be the name of cacheObject and with given set of dependent parameters with validity for the; current values of those parameters. It can be retrieved later by callin retrieveObject(). Bool_t registerObject(const char* ownerName, const char* objectName, TObject& cacheObject, TIterator* paramIter); Register object associated with given name and given associated parameters with given values in cache.; The cache will take _ownership_of_object_ and is indexed under the given name (which does not; need to be the name of cacheObject and with given set of dependent parameters with validity for the; current values of those parameters. It can be retrieved later by callin retrieveObject(). const TObject* retrieveObject(const char* name, TClass* tclass, const RooArgSet& params); Retrieve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooExpensiveObjectCache.html:7265,cache,cacheObject,7265,root/html602/RooExpensiveObjectCache.html,https://root.cern,https://root.cern/root/html602/RooExpensiveObjectCache.html,4,['cache'],"['cache', 'cacheObject']"
Performance," TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TBuffer::EModeTBuffer::kRead; static TObject::(anonymous)TObject::kSingleKey; static TBufferFile::(anonymous)kStreamedMemberWise; static TBufferFile::(anonymous)kTextBasedStreaming; static TBufferFile::(anonymous)kUser1; static TBufferFile::(anonymous)kUser2; static TBufferFile::(anonymous)kUser3; static TBuffer::EModeTBuffer::kWrite; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. char*TBuffer::fBufCurCurrent position in buffer; char*TBuffer::fBufMaxEnd of buffer; Int_tTBuffer::fBufSizeSize of buffer; char*TBuffer::fBufferBuffer used to store objects; TBuffer::CacheList_tTBuffer::fCacheStackStack of pointers to the cache where to temporarily store the value of 'missing' data members; TExMap*fClassMapMap containing object,class pairs for reading; Int_tfDisplacementValue to be added to the map offsets; TStreamerInfo*fInfoPointer to TStreamerInfo object writing/reading the buffer; TBufferFile::InfoList_tfInfoStackStack of pointers to the TStreamerInfos; TExMap*fMapMap containing object,offset pairs for reading/writing; Int_tfMapCountNumber of objects or classes in map; Int_tfMapSizeDefault size of map; Bool_tTBuffer::fModeRead or write mode; TObject*TBuffer::fParentPointer to parent object owning this buffer; UShort_tfPidOffsetOffset to be added to the pid index in this key/buffer.; ReAllocCharFun_tTBuffer::fReAllocFunc! Realloc function to be used when extending the buffer.; Int_tTBuffer::fVersionBuffer format version; static Int_tfgMapSizeDefault map size for all TBuffer objects. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBufferFile(TBuffer::EMode mode); Create an I/O buffer object. Mode should be either TBuffer::kRead or; TBuffer::kWrite. By default the I/O buffer has a size of; TBuffer::kInitialSize (1024) bytes. TBufferFile(TBuffer::EMode mode, Int_t bufsiz); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBufferFile.html:18390,cache,cache,18390,root/html602/TBufferFile.html,https://root.cern,https://root.cern/root/html602/TBufferFile.html,2,['cache'],['cache']
Performance," TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TObjArray fAliases;  ! List of TTreeFormula for each alias used. ;  ; std::vector< std::string > fAliasesUsed;  ! List of aliases used during the parsing of the expression. ;  ; TAxis * fAxis;  ! pointer to histogram axis if this is a string ;  ; TObjArray fBranches;  ! List of branches to read. Similar to fLeaves but duplicates are zeroed out. ;  ; Int_t fCodes [kMAXCODES];  List of leaf numbers referenced in formula. ;  ; LongDouble_t * fConstLD;  ! local version of fConsts able to store bigger numbers ;  ; Int_t fCumulSizes [kMAXCODES][kMAXFORMDIM];  Accumulated sizes of lower dimensions for each leaf after variable dimensions has been calculated. ;  ; TObjArray fDataMembers;  ! List of leaf data members ;  ; bool fDidBooleanOptimization;  ! True if we executed one boolean optimization since the last time instance number 0 was evaluated ;  ; TList * fDimensionSetup;  ! list of dimension setups, for delayed creation of the dimension information. ;  ; TObjArray fExternalCuts;  ! List of TCutG and TEntryList used in the formula ;  ; Int_t fFixedSizes [kMAXCODES][kMAXFORMDIM];  Physical sizes of lower dimensions for each leaf. ;  ; bool fHasCast;  Record whether the formula contain a cast operation or not. ;  ; UChar_t fHasMultipleVarDim [kMAXCODES];  True if the corresponding variable is an array with more than one variable dimension. ;  ; Int_t fIndexes [kMAXCODES][kMAXFORMDIM];  Index of array selected by user for each leaf. ;  ; TObjArray fLeafNames;  List of TNamed describing leaves. ;  ; TObjArray fLeaves;  ! List of leaf used in this formula. ;  ; Int_t * fLookupType;  [fNindex] Array indicating how each leaf should be looked-up ;  ; TTreeFormulaManager * fManager;  ! The dimension coordinator. ;  ; TObjArray fMethods;  ! List of leaf method calls ;  ; Int_t fMultiplicity; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeFormula.html:27994,optimiz,optimization,27994,doc/master/classTTreeFormula.html,https://root.cern,https://root.cern/doc/master/classTTreeFormula.html,1,['optimiz'],['optimization']
Performance," TPacketizerAdaptive(TDSet* dset, TList* slaves, Long64_t first, Long64_t num, TList* input, TProofProgressStatus* st); virtual~TPacketizerAdaptive(); voidTObject::AbstractMethod(const char* method) const; virtual Int_tAddProcessed(TSlave* sl, TProofProgressStatus* st, Double_t latency, TList** listOfMissingFiles = 0); virtual Int_tTVirtualPacketizer::AddWorkers(TList* workers); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Int_tCalculatePacketSize(TObject* slstat, Long64_t cachesz, Int_t learnent); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPacketizerAdaptive.html:1504,latency,latency,1504,root/html534/TPacketizerAdaptive.html,https://root.cern,https://root.cern/root/html534/TPacketizerAdaptive.html,2,"['cache', 'latency']","['cachesz', 'latency']"
Performance," TPacketizerAdaptive(TDSet* dset, TList* slaves, Long64_t first, Long64_t num, TList* input, TProofProgressStatus* st); virtual~TPacketizerAdaptive(); voidTObject::AbstractMethod(const char* method) const; virtual Int_tAddProcessed(TSlave* sl, TProofProgressStatus* st, Double_t latency, TList** listOfMissingFiles = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Int_tCalculatePacketSize(TObject* slstat, Long64_t cachesz, Int_t learnent); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPacketizerAdaptive.html:1504,latency,latency,1504,root/html528/TPacketizerAdaptive.html,https://root.cern,https://root.cern/root/html528/TPacketizerAdaptive.html,6,"['cache', 'latency']","['cachesz', 'latency']"
Performance," TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; namechar name[80]Definition TGX11.cxx:110; TObject.h; TPyReturn.h; TObjectMother of all ROOT objects.Definition TObject.h:41; TPyReturnDefinition TPyReturn.h:30; TPythonAccessing the Python interpreter from C++.Definition TPython.h:44; TPython::ExecScriptstatic void ExecScript(const char *name, int argc=0, const char **argv=nullptr)Execute a python stand-alone script, with argv CLI arguments.Definition TPython.cxx:381; TPython::Importstatic Bool_t Import(const char *name)Import the named python module and create Cling equivalents for its classes and methods.Definition TPython.cxx:237; TPython::LoadMacrostatic void LoadMacro(const char *name)Execute the give python script as if it were a macro (effectively an execfile in main),...Definition TPython.cxx:305; TPython::Execstatic Bool_t Exec(const char *cmd, std::any *result=nullptr, std::string const &resultName=""_anyresult"")Executes a Python command within the current Python environment.Definition TPython.cxx:425; TPython::Evalstatic const TPyReturn Eval(const char *expr) R__DEPRECATED(6Evaluate a python expression (e.g.Definition TPython.cxx:465; TPython::Initializestatic Bool_t Initialize()Initialization method: setup the python interpreter and load the ROOT module.Definition TPython.cxx:137; bool; ROOT::Internal::SwapWithObjAtAddrvoid SwapWithObjAtAddr(T &a, std::intptr_t b)Definition TPython.h:39; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. bindingstpythonincTPython.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPython_8h_source.html:5072,load,load,5072,doc/master/TPython_8h_source.html,https://root.cern,https://root.cern/doc/master/TPython_8h_source.html,1,['load'],['load']
Performance," TPrincipal object is filled with normalized variables.; If option ""p"" is specified, compute the principal components; If option ""p"" and ""d"" print results of analysis; If option ""p"" and ""h"" generate standard histograms; If option ""p"" and ""c"" generate code of conversion functions. return a pointer to the TPrincipal object. It is the user responsibility to delete this object.; The option default value is ""np""; See TTreePlayer::DrawSelect for explanation of the other parameters. ; Implements TVirtualTreePlayer.; Definition at line 2015 of file TTreePlayer.cxx. ◆ Process() [1/2]. Long64_t TTreePlayer::Process ; (; const char * ; filename, . Option_t * ; option, . Long64_t ; nentries, . Long64_t ; firstentry . ). overridevirtual . Process this tree executing the TSelector code in the specified filename. ; The return value is -1 in case of error and TSelector::GetStatus() in in case of success.; The code in filename is loaded (interpreted or compiled, see below), filename must contain a valid class implementation derived from TSelector, where TSelector has the following member functions:. Begin(): called every time a loop on the tree starts, a convenient place to create your histograms.; SlaveBegin(): called after Begin(), when on PROOF called only on the slave servers.; Process(): called for each event, in this function you decide what to read and fill your histograms.; SlaveTerminate: called at the end of the loop on the tree, when on PROOF called only on the slave servers.; Terminate(): called at the end of the loop on the tree, a convenient place to draw/fit your histograms. If filename is of the form file.C, the file will be interpreted. If filename is of the form file.C++, the file file.C will be compiled and dynamically loaded.; If filename is of the form file.C+, the file file.C will be compiled and dynamically loaded. At next call, if file.C is older than file.o and file.so, the file.C is not compiled, only file.so is loaded. NOTE 1; It may be more interesting to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreePlayer.html:39543,load,loaded,39543,doc/master/classTTreePlayer.html,https://root.cern,https://root.cern/doc/master/classTTreePlayer.html,1,['load'],['loaded']
Performance," TProof::RestoreActiveList ; (; ). private . Restore saved list of active workers. ; Definition at line 11557 of file TProof.cxx. ◆ Retrieve() [1/2]. Int_t TProof::Retrieve ; (; const char * ; ref, . const char * ; path = 0 . ). Send retrieve request for the query specified by ref. ; If path is defined save it to path. Generic method working for all queries known by the server. ; Definition at line 5967 of file TProof.cxx. ◆ Retrieve() [2/2]. Int_t TProof::Retrieve ; (; Int_t ; qry, . const char * ; path = 0 . ). Send retrieve request for the qry-th query in fQueries. ; If path is defined save it to path. ; Definition at line 5948 of file TProof.cxx. ◆ SaveActiveList(). void TProof::SaveActiveList ; (; ). private . Save current list of active workers. ; Definition at line 11542 of file TProof.cxx. ◆ SaveInputData(). Int_t TProof::SaveInputData ; (; TQueryResult * ; qr, . const char * ; cachedir, . TString & ; emsg . ). staticprotected . Save input data file from 'cachedir' into the sandbox or create a the file with input data objects. ; Definition at line 12311 of file TProof.cxx. ◆ SavePerfTree(). Int_t TProof::SavePerfTree ; (; const char * ; pf = 0, . const char * ; ref = 0 . ). Save performance information from TPerfStats to file 'pf'. ; If 'ref' is defined, do it for query 'ref'. Return 0 on sucecss, -1 in case of any error ; Definition at line 12646 of file TProof.cxx. ◆ SaveWorkerInfo(). void TProof::SaveWorkerInfo ; (; ). protectedvirtual . Save information about the worker set in the file .workers in the working dir. ; Called each time there is a change in the worker setup, e.g. by TProof::MarkBad(). ; Definition at line 11808 of file TProof.cxx. ◆ SendCommand(). Int_t TProof::SendCommand ; (; const char * ; cmd, . ESlaves ; list = kActive . ). private . Send command to be executed on the PROOF master and/or slaves. ; Command can be any legal command line command, however commands like "".x file.C"" or "".L file.C"" will not cause the file.C to be transfered to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:135728,cache,cachedir,135728,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['cache'],['cachedir']
Performance," TQObject *);  ; const TInitBehavior * DefineBehavior (void *, void *);  ; bool DeleteChangesMemory ();  ; bool DeleteChangesMemoryImpl ();  ; void DisableParBranchProcessing ();  Globally disables the IMT use case of parallel branch processing, deactivating the corresponding locks. ;  ; const TCollection & EmptyCollection ();  Return an empty collection for use with nullptr TRangeCast. ;  ; void EnableParBranchProcessing ();  Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in ROOT, activating the required locks. ;  ; void EvalParMultiDim (TF1 *func, Double_t *out, const Double_t *x, std::size_t size, std::size_t rows, Double_t *params);  ; void GenericShowMembers (const char *topClassName, void *obj, TMemberInspector &R__insp, bool transientMember);  ; TString GetArrayType (TStreamerElement *element, const char *subtype, TTreeProxyGenerator::EContainer container);  ; template<typename T > ; TClass * GetClassHelper (Bool_t load, Bool_t silent, std::false_type);  ; template<typename T > ; TClass * GetClassHelper (Bool_t, Bool_t, std::true_type);  ; std::string GetDemangledTypeName (const std::type_info &t);  ; ErrorSystemMsgHandlerFunc_t GetErrorSystemMsgHandler ();  ; std::shared_ptr< ROOT::Internal::RTaskArenaWrapper > GetGlobalTaskArena (unsigned maxConcurrency=0);  Factory function returning a shared pointer to the instance of the global RTaskArenaWrapper. ;  ; TROOT * GetROOT1 ();  ; TROOT * GetROOT2 ();  ; static Func_t GetSymInLibImt (const char *funcname);  ; template<typename T , typename F > ; auto GetTheRightOp (T(F::*opPtr)(const T *, const double *)) -> decltype(opPtr);  Internal class used by TF1 to get the right operator() signature from a Functor with several ones. ;  ; template<typename T , typename F > ; auto GetTheRightOp (T(F::*opPtr)(T *, double *)) -> decltype(opPtr);  ; static TVersionCheck gVersionCheck (ROOT_VERSION_CODE);  ; template<typename > ; constexpr bool hasBeginEnd (...);  ; template<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Internal.html:13955,load,load,13955,doc/master/namespaceROOT_1_1Internal.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html,1,['load'],['load']
Performance," TQpVar* step); Implements a version of Mehrotra starting point heuristic,; modified to ensure identical steps in the primal and dual variables. void DoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); Monitor progress / convergence aat each interior-point iteration. Int_t DoStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Tests for termination. Unless the user supplies a specific termination; routine, this method calls another method defaultStatus, which returns; a code indicating the current convergence status. Int_t DefStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Default status method. TQpSolverBase & operator=(const TQpSolverBase& source); Assignment operator. Int_t Solve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resids); alternative starting point heuristic: sets the; ""complementary"" variables to a large positive value; (based on the norm of the problem data) and the; remaining variables to zero. void DefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); perform monitor operation at each interior-point iteration. TQpLinSolverBase * GetLinearSystem(); default method for checking status. May be replaced; by a user-defined method. { return fSys; }. void SetMuTol(Double_t m); { fMutol = m; }. Double_t GetMuTol(); { return fMutol; }. void SetArTol(Double_t ar); { fArtol = ar; }. Double_t GetArTol(); { return fArtol; }. Double_t DataNorm(); { return fDnorm; }. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id$ » Last generated: 2015-03-14 16:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TQpSolverBase.html:9916,perform,perform,9916,root/html534/TQpSolverBase.html,https://root.cern,https://root.cern/root/html534/TQpSolverBase.html,1,['perform'],['perform']
Performance," TQpVar* step); Implements a version of Mehrotra starting point heuristic,; modified to ensure identical steps in the primal and dual variables. void DoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); Monitor progress / convergence aat each interior-point iteration. Int_t DoStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Tests for termination. Unless the user supplies a specific termination; routine, this method calls another method defaultStatus, which returns; a code indicating the current convergence status. Int_t DefStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Default status method. TQpSolverBase & operator=(const TQpSolverBase& source); Assignment operator. Int_t Solve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resids); alternative starting point heuristic: sets the; ""complementary"" variables to a large positive value; (based on the norm of the problem data) and the; remaining variables to zero. void DefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); perform monitor operation at each interior-point iteration. TQpLinSolverBase * GetLinearSystem(); default method for checking status. May be replaced; by a user-defined method. { return fSys; }. void SetMuTol(Double_t m); { fMutol = m; }. Double_t GetMuTol(); { return fMutol; }. void SetArTol(Double_t ar); { fArtol = ar; }. Double_t GetArTol(); { return fArtol; }. Double_t DataNorm(); { return fDnorm; }. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TQpSolverBase.html:10585,perform,perform,10585,root/html604/TQpSolverBase.html,https://root.cern,https://root.cern/root/html604/TQpSolverBase.html,1,['perform'],['perform']
Performance," TQpVar* step); Implements a version of Mehrotra starting point heuristic,; modified to ensure identical steps in the primal and dual variables. void DoMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); Monitor progress / convergence aat each interior-point iteration. Int_t DoStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Tests for termination. Unless the user supplies a specific termination; routine, this method calls another method defaultStatus, which returns; a code indicating the current convergence status. Int_t DefStatus(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Int_t i, Double_t mu, Int_t level); Default status method. TQpSolverBase & operator=(const TQpSolverBase& source); Assignment operator. Int_t Solve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resids); alternative starting point heuristic: sets the; ""complementary"" variables to a large positive value; (based on the norm of the problem data) and the; remaining variables to zero. void DefMonitor(TQpDataBase* data, TQpVar* vars, TQpResidual* resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level); perform monitor operation at each interior-point iteration. TQpLinSolverBase * GetLinearSystem(); default method for checking status. May be replaced; by a user-defined method. { return fSys; }. void SetMuTol(Double_t m); { fMutol = m; }. Double_t GetMuTol(); { return fMutol; }. void SetArTol(Double_t ar); { fArtol = ar; }. Double_t GetArTol(); { return fArtol; }. Double_t DataNorm(); { return fDnorm; }. » Author: Eddy Offermann May 2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/quadp:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQpSolverBase.html:10585,perform,perform,10585,root/html602/TQpSolverBase.html,https://root.cern,https://root.cern/root/html602/TQpSolverBase.html,1,['perform'],['perform']
Performance," TRFIOFile. TFileCacheRead * GetCacheRead() const; Return a pointer to the current read cache. TFileCacheWrite * GetCacheWrite() const; Return a pointer to the current write cache. Int_t GetRecordHeader(char* buf, Long64_t first, Int_t maxbytes, Int_t& nbytes, Int_t& objlen, Int_t& keylen); Read the logical record header starting at position first.; Maxbytes bytes are read into buf the function reads nread bytes; where nread is the minimum of maxbytes and the number of bytes; before the end of file. The function returns nread.; In output arguments:; nbytes : number of bytes in record; if negative, this is a deleted record; if 0, cannot read record, wrong value of argument first; objlen : uncompressed object size; keylen : length of logical record header; Note that the arguments objlen and keylen are returned only; if maxbytes >=16. Long64_t GetSize() const; Returns the current file size. Returns -1 in case the file could not; be stat'ed. const TList * GetStreamerInfoCache(); Returns the cached list of StreamerInfos used in this file. TList * GetStreamerInfoList(); Read the list of TStreamerInfo objects written to this file.; The function returns a TList. It is the user'responsability; to delete the list created by this function. Using the list, one can access additional information,eg:; TFile f(""myfile.root"");; TList *list = f.GetStreamerInfoList();; TStreamerInfo *info = (TStreamerInfo*)list->FindObject(""MyClass"");; Int_t classversionid = info->GetClassVersion();; delete list;. void ls(Option_t* option = """") const; List File contents.; Indentation is used to identify the file tree.; Subdirectories are listed first, then objects in memory,; then objects on the file. Bool_t IsOpen() const; Returns kTRUE in case file is open and kFALSE if file is not open. void MakeFree(Long64_t first, Long64_t last); Mark unused bytes on the file.; The list of free segments is in the fFree linked list.; When an object is deleted from the file, the freed space is added; into the FREE ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFile.html:30331,cache,cached,30331,root/html528/TFile.html,https://root.cern,https://root.cern/root/html528/TFile.html,3,['cache'],['cached']
Performance," TROOT * GetROOT1 ();  ; TROOT * GetROOT2 ();  ; static Func_t GetSymInLibImt (const char *funcname);  ; template<typename T , typename F > ; auto GetTheRightOp (T(F::*opPtr)(const T *, const double *)) -> decltype(opPtr);  Internal class used by TF1 to get the right operator() signature from a Functor with several ones. ;  ; template<typename T , typename F > ; auto GetTheRightOp (T(F::*opPtr)(T *, double *)) -> decltype(opPtr);  ; static TVersionCheck gVersionCheck (ROOT_VERSION_CODE);  ; template<typename > ; constexpr bool hasBeginEnd (...);  ; template<typename T > ; constexpr auto hasBeginEnd (int) -> decltype(std::begin(std::declval< T >()), std::end(std::declval< T >()), true);  ; Bool_t HasConsistentHashMember (const char *clName);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; Bool_t HasConsistentHashMember (TClass &clRef);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; static Bool_t & IsImplicitMTEnabledImpl ();  Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ;  ; Bool_t IsParBranchProcessingEnabled ();  Returns true if parallel branch processing is enabled. ;  ; int LogicalCPUBandwidthControl ();  Returns the available number of logical cores. ;  ; void MinimalErrorHandler (Int_t level, Bool_t abort_bool, const char *location, const char *msg);  A very simple error handler that is usually replaced by the TROOT default error handler. ;  ; void NotifyDirected (Detail::TBranchProxy *x);  ; std::ostream & operator<< (std::ostream &os, const RConcurrentHashColl::HashValue &h);  ; bool operator== (const RConcurrentHashColl::HashValue &lhs, const RConcurrentHashColl::HashValue &rhs);  ; template<typename T > ; static T ParallelReduceHelper (const std::vector< T > &objs, const std::function< T(T a, T b)> &redfunc);  A helper function to implement the TThreadExecutor::ParallelReduce methods. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, const char *classname);  Add t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Internal.html:15453,load,load,15453,doc/master/namespaceROOT_1_1Internal.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html,2,['load'],['load']
Performance," TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TFileStager; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TString GetPathName (TObject *o);  Return the path name contained in object 'o' allowing for TUrl, TObjString or TFileInfo. ;  ; static TFileStager * Open (const char *stager);  Open a stager, after having loaded the relevant plug-in. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Static Private Member Functions; static void GetPrefix (const char *url, TString &pfx);  Isolate prefix in url. ;  . Private Attributes; TString fPrefix;  ; TNetSystem * fSystem;  . Additional Inherited Members;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetFileStager.html:10751,load,loaded,10751,doc/master/classTNetFileStager.html,https://root.cern,https://root.cern/doc/master/classTNetFileStager.html,1,['load'],['loaded']
Performance," TSeqCollection*GetListOfBrowsers() const; TSeqCollection*GetListOfCanvases() const; TCollection*GetListOfClasses() const; TCollection*GetListOfClassGenerators() const; TSeqCollection*GetListOfCleanups() const; TSeqCollection*GetListOfColors() const; TSeqCollection*GetListOfDataSets() const; TSeqCollection*GetListOfFiles() const; TCollection*GetListOfFunctions() const; TSeqCollection*GetListOfGeometries() const; TCollection*GetListOfGlobalFunctions(Bool_t load = kFALSE); TCollection*GetListOfGlobals(Bool_t load = kFALSE); virtual TList*TDirectory::GetListOfKeys() const; TSeqCollection*GetListOfMappedFiles() const; TSeqCollection*GetListOfMessageHandlers() const; TSeqCollection*GetListOfProofs() const; TSeqCollection*GetListOfSecContexts() const; TSeqCollection*GetListOfSockets() const; TSeqCollection*GetListOfSpecials() const; TSeqCollection*GetListOfStreamerInfo() const; TSeqCollection*GetListOfStyles() const; TSeqCollection*GetListOfTasks() const; TCollection*GetListOfTypes(Bool_t load = kFALSE); static const char*GetMacroPath(); virtual TObject*TDirectory::GetMother() const; virtual TDirectory*TDirectory::GetMotherDir() const; virtual const char*TNamed::GetName() const; virtual Int_tTDirectory::GetNbytesKeys() const; Int_tGetNclasses() const; virtual Int_tTDirectory::GetNkeys() const; Int_tGetNtypes() const; voidTDirectory::GetObject(const char* namecycle, void*& ptr); virtual void*TDirectory::GetObjectChecked(const char* namecycle, const char* classname); virtual void*TDirectory::GetObjectChecked(const char* namecycle, const TClass* cl); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual void*TDirectory::GetObjectUnchecked(const char* namecycle); virtual Option_t*TObject::GetOption() const; virtual const char*TDirectory::GetPath() const; virtual const char*TDirectory::GetPathStatic() const; TPluginManager*GetPluginManager() const; TFolder*GetRootFolder() const; virtual Long64_tTDirectory::GetSeekDir() con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TROOT.html:7318,load,load,7318,root/html528/TROOT.html,https://root.cern,https://root.cern/root/html528/TROOT.html,1,['load'],['load']
Performance," TSlave*TProof::CreateSubmaster(const char* url, const char* ord, const char* image, const char* msd); Int_tCreateSymLinks(TList* files); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; static Bool_tTProof::GetFileInCmd(const char* cmd, TString& fn); static Int_tTProof::GetInputData(TList* input, const char* cachedir, TString& emsg); TList*TProof::GetListOfActiveSlaves() const; TVirtualProofPlayer*TProof::GetPlayer() const; TPluginHandler*TProof::GetProgressDialog() const; Int_tTProof::GetSandbox(TString& sb, Bool_t assert = kFALSE, const char* rc = 0); virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTProof::HandleLibIncPath(const char* what, Bool_t add, const char* dirs); Int_tInit(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); voidTProof::InitMembers(); virtual TVirtualProofPlayer*TProof::MakePlayer(const char* player = 0, TSocket* s = 0); TProofQueryResult*MakeQueryResult(Long64_t nent, const char* opt, Long64_t fst, TDSet* dset, const char* selec); voidTObject::MakeZombie(); voidTProof::PrepareInputDataFile(TString& dataFile); Int_tTProof::RemoveWorkers(TList* wrks); static Int_tTProof::SaveInputData(TQueryResult* qr, const char* cachedir, TString& emsg); virtual voidTProof::SaveWorkerInfo(); Int_tTProof::SendFile(const char* file, Int_t opt = (kBinary|kForward|kCp|kCpBin), const char* rfile = 0, TSlave* sl = 0); static Int_tTProof::SendInputData(TQueryResult* qr, TProof* p, TString& emsg); voidTProof::SetDSet(TDSet* dset); voidTProof::SetPlayer(TVirtualProofPlayer* player); voidSetQueryRunning(TProofQueryResult* pq); Int_tSetupWorkers(Int_t opt = 0, TList* wrks = 0); static void*TProof::SlaveStartupThread(void* arg); virtual Bool_tTProof::StartSlaves(Bool_t attach = kFALSE); static voidTProof::SystemCmd(const char* cmd, Int_t fdout); voidTProof::UpdateDialog(); virtual voidTProof::ValidateDSet(TDSet* dset).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofLite.html:20491,cache,cachedir,20491,root/html530/TProofLite.html,https://root.cern,https://root.cern/root/html530/TProofLite.html,2,['cache'],['cachedir']
Performance," TStreamerInfo* sinfo, Int_t id, char* pointer, Int_t basketsize, Int_t splitlevel, Int_t btype); FIXME: What if the streamer info is optimized here?; -- Constructor when the branch object is not a TClonesArray nor an STL container. If splitlevel > 0 this branch in turn is split into sub-branches. void Init(TTree* tree, TBranch* parent, const char* name, TStreamerInfo* sinfo, Int_t id, char* pointer, Int_t basketsize = 32000, Int_t splitlevel = 0, Int_t btype = 0); -- Init when the branch object is not a TClonesArray nor an STL container. If splitlevel > 0 this branch in turn is split into sub-branches. TBranchElement(TTree *tree, const char* bname, TClonesArray* clones, Int_t basketsize, Int_t splitlevel, Int_t compress); FIXME: Bad, the streamer info will be optimized here.; -- Constructor when the branch object is a TClonesArray. If splitlevel > 0 this branch in turn is split into sub branches. TBranchElement(TBranch *parent, const char* bname, TClonesArray* clones, Int_t basketsize, Int_t splitlevel, Int_t compress); FIXME: Bad, the streamer info will be optimized here.; -- Constructor when the branch object is a TClonesArray. If splitlevel > 0 this branch in turn is split into sub branches. void Init(TTree *tree, TBranch *parent, const char* bname, TClonesArray* clones, Int_t basketsize, Int_t splitlevel, Int_t compress); -- Init when the branch object is a TClonesArray. If splitlevel > 0 this branch in turn is split into sub branches. TBranchElement(TTree *tree, const char* bname, TVirtualCollectionProxy* cont, Int_t basketsize, Int_t splitlevel, Int_t compress); -- Constructor when the branch object is an STL collection. If splitlevel > 0 this branch in turn is split into sub branches. TBranchElement(TBranch *parent, const char* bname, TVirtualCollectionProxy* cont, Int_t basketsize, Int_t splitlevel, Int_t compress); -- Constructor when the branch object is an STL collection. If splitlevel > 0 this branch in turn is split into sub branches. void Init(TTree *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBranchElement.html:17543,optimiz,optimized,17543,root/html526/TBranchElement.html,https://root.cern,https://root.cern/root/html526/TBranchElement.html,1,['optimiz'],['optimized']
Performance," TString& typeName); Convert from ROOT typename to SQL typename. TBasket * CreateBasket(TBranch* br); Create a TBasketSQL. void CreateBranch(const TString& branchName, const TString& typeName); Create the column(s) in the database that correspond to the branch. TString CreateBranches(TSQLResult* rs); determine leaf description string. Bool_t CreateTable(const TString& table); Create the database table corresponding to this TTree. void Init(); Initializeation routine. Int_t Fill(); Copy the information from the user object to the TTree. std::vector<Int_t> * GetColumnIndice(TBranch* branch); Return a vector of columns index corresponding to the; current SQL table and the branch given as argument; Returns 0 if no columns indices is found; Otherwise returns a pointer to a vector to be deleted by the caller. Long64_t GetEntries() const; Get the number of rows in the database. Long64_t GetEntriesFast() const; Return the number of entries as of the last check.; Use GetEntries for a more accurate count. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0); Load the data for the entry from the database. Long64_t LoadTree(Long64_t entry); Setup the tree to the load the specified entry. Long64_t PrepEntry(Long64_t entry); Make sure the server and result set are setup for the requested entry. void Refresh(); Refresh contents of this Tree and its branches from the current; Tree status in the database; One can call this function in case the Tree on its file is being; updated by another process. void ResetQuery(); Reset the internal query. TTreeSQL(TSQLServer* server, TString DB, const TString& table). Long64_t GetEntries() const. TString GetTableName(); { return fTable; }. » Author: Rene Brun 12/01/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-06-02 16:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeSQL.html:30399,load,load,30399,root/html604/TTreeSQL.html,https://root.cern,https://root.cern/root/html604/TTreeSQL.html,1,['load'],['load']
Performance," TString& typeName); Convert from ROOT typename to SQL typename. TBasket * CreateBasket(TBranch* br); Create a TBasketSQL. void CreateBranch(const TString& branchName, const TString& typeName); Create the column(s) in the database that correspond to the branch. TString CreateBranches(TSQLResult* rs); determine leaf description string. Bool_t CreateTable(const TString& table); Create the database table corresponding to this TTree. void Init(); Initializeation routine. Int_t Fill(); Copy the information from the user object to the TTree. std::vector<Int_t> * GetColumnIndice(TBranch* branch); Return a vector of columns index corresponding to the; current SQL table and the branch given as argument; Returns 0 if no columns indices is found; Otherwise returns a pointer to a vector to be deleted by the caller. Long64_t GetEntries() const; Get the number of rows in the database. Long64_t GetEntriesFast() const; Return the number of entries as of the last check.; Use GetEntries for a more accurate count. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0); Load the data for the entry from the database. Long64_t LoadTree(Long64_t entry); Setup the tree to the load the specified entry. Long64_t PrepEntry(Long64_t entry); Make sure the server and result set are setup for the requested entry. void Refresh(); Refresh contents of this Tree and its branches from the current; Tree status in the database; One can call this function in case the Tree on its file is being; updated by another process. void ResetQuery(); Reset the internal query. TTreeSQL(TSQLServer* server, TString DB, const TString& table). Long64_t GetEntries() const. TString GetTableName(); { return fTable; }. » Author: Rene Brun 12/01/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeSQL.html:30304,load,load,30304,root/html602/TTreeSQL.html,https://root.cern,https://root.cern/root/html602/TTreeSQL.html,1,['load'],['load']
Performance," TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle here all cache and package requests. Int_t HandleWorkerLists(TMessage* mess); Handle here all requests to modify worker lists. FILE * SetErrorHandlerFile(FILE* ferr); Set the file stream where to log (default stderr).; If ferr == 0 the default is restored.; Returns current setting. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The PROOF error handler function. It prints the message on fgErrorHandlerFile and; if abort is set it aborts the application. Int_t CopyFromCache(const char* name, Bool_t cpbin); Retrieve any files related to 'macro' from the cache directory.; If 'cpbin' is true, the associated binaries are retrieved as well.; Returns 0 on success, -1 otherwise. Int_t CopyToCache(const char* name, Int_t opt = 0); Copy files related to 'macro' to the cache directory.; Action depends on 'opt':. opt = 0 copy 'macro' to cache and delete from cache any binary; related to name; e.g. if macro = bla.C, the binaries are; bla_C.so, bla_C.rootmap, ...; opt = 1 copy the binaries related to macro to the cache. Returns 0 on success, -1 otherwise. void MakePlayer(); Make player instance. void DeletePlayer(); Delete player instance. Int_t GetPriority(); Get the processing priority for the group the user belongs too. This; priority is a number (0 - 100) determined by a scheduler (third; party process) based on some basic priority the group has, e.g.; we might want to give users in a specific group (e.g. promptana); a higher priority than users in other groups, and on the analysis; of historical logging data (i.e. usage of CPU by the group in a; previous time slot, as recorded in TPerfStats::WriteQueryLog()). Currently the group priority is obtained by a query in a SQL DB; table proofpriority, which has the format:; CREATE TABLE proofpriority (; id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,; group VARCHAR(32) NOT NULL,; priority INT;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofServ.html:27407,cache,cache,27407,root/html532/TProofServ.html,https://root.cern,https://root.cern/root/html532/TProofServ.html,8,['cache'],['cache']
Performance," TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle here all cache and package requests. Int_t HandleWorkerLists(TMessage* mess); Handle here all requests to modify worker lists. FILE * SetErrorHandlerFile(FILE* ferr); Set the file stream where to log (default stderr).; If ferr == 0 the default is restored.; Returns current setting. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The PROOF error handler function. It prints the message on fgErrorHandlerFile and; if abort is set it aborts the application. Int_t CopyFromCache(const char* name, Bool_t cpbin); Retrieve any files related to 'macro' from the cache directory.; If 'cpbin' is true, the associated binaries are retrieved as well.; Returns 0 on success, -1 otherwise. Int_t CopyToCache(const char* name, Int_t opt = 0); Copy files related to 'macro' to the cache directory.; Action depends on 'opt':. opt = 0 copy 'macro' to cache and delete from cache any binary; related to name; e.g. if macro = bla.C, the binaries are; bla_C.so, bla_C.rootmap, ...; opt = 1 copy the binaries related to macro to the cache. Returns 0 on success, -1 otherwise. void MakePlayer(); Make player instance. void DeletePlayer(); Delete player instance. Int_t GetPriority(); Get the processing priority for the group the user belongs too. This; prioroty is a number (0 - 100) determined by a scheduler (third; party process) based on some basic priority the group has, e.g.; we might want to give users in a specific group (e.g. promptana); a higher priority than users in other groups, and on the analysis; of historical logging data (i.e. usage of CPU by the group in a; previous time slot, as recorded in TPerfStats::WriteQueryLog()). Currently the group priority is obtained by a query in a SQL DB; table proofpriority, which has the format:; CREATE TABLE proofpriority (; id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,; group VARCHAR(32) NOT NULL,; priority INT;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofServ.html:27407,cache,cache,27407,root/html530/TProofServ.html,https://root.cern,https://root.cern/root/html530/TProofServ.html,2,['cache'],['cache']
Performance," TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxypeak; RooRealProxytail; RooRealProxywidth; RooRealProxyx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNovosibirsk.html:42599,cache,cache,42599,root/html534/RooNovosibirsk.html,https://root.cern,https://root.cern/root/html534/RooNovosibirsk.html,1,['cache'],['cache']
Performance," TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; RooRealProxyalphaInterpolation parameter; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxypdf1First input shape; RooRealProxypdf2Second input shape; RooRealProxyxObservable.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooIntegralMorph.html:49814,cache,cache,49814,root/html602/RooIntegralMorph.html,https://root.cern,https://root.cern/root/html602/RooIntegralMorph.html,2,['cache'],['cache']
Performance," TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void setDefaultStorageType(RooAbsData::StorageType s). void claimVars(RooAbsData* ). Bool_t releaseVars(RooAbsData* ); If return value is true variables can be deleted. RooAbsData(); Default constructor. RooAbsData(const char* name, const char* title, const RooArgSet& vars, RooAbsDataStore* store = 0); Constructor from a set of variables. Only fundamental elements of vars; (RooRealVar,RooCategory etc) are stored as part of the dataset. RooAbsData(const RooAbsData& other, const char* newname = 0); Copy constructor. ~RooAbsData(); Destructor. void convertToVectorStore(); Convert tree-based storage to vector-based storage. Bool_t changeObservableName(const char* from, const char* to). void fill(). Int_t numEntries() const. void reset(). const RooArgSet* get(Int_t index) const. void cacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0, Bool_t skipZeroWeights = kFALSE); Internal method -- Cache given set of functions with data. void resetCache(); Internal method -- Remove cached function values. void attachCache(const RooAbsArg* newOwner, const RooArgSet& cachedVars); Internal method -- Attach dataset copied with cache contents to copied instances of functions. void setArgStatus(const RooArgSet& set, Bool_t active). void setDirtyProp(Bool_t flag); Control propagation of dirty flags from observables in dataset. RooAbsData* reduce(const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); Create a reduced copy of this dataset. The caller takes ownership of the returned dataset. The following optional named arguments are accepted. SelectVars(const RooArgSet& vars) -- Only retain the listed observables in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsData.html:16941,cache,cacheArgs,16941,root/html602/RooAbsData.html,https://root.cern,https://root.cern/root/html602/RooAbsData.html,2,['cache'],['cacheArgs']
Performance," TString ; theMethodName, . TString ; methodTitle, . TString ; theOption = """" . ). Book a classifier or regression method. ; Definition at line 352 of file Factory.cxx. ◆ BookMethod() [3/3]. TMVA::MethodBase * TMVA::Factory::BookMethod ; (; TMVA::DataLoader * ; loader, . Types::EMVA ; theMethod, . TString ; methodTitle, . TString ; theOption = """" . ). Books MVA method. ; The option configuration string is custom for each MVA the TString field ""theNameAppendix"" serves to define (and distinguish) several instances of a given MVA, eg, when one wants to compare the performance of various configurations ; Definition at line 487 of file Factory.cxx. ◆ BookMethodWeightfile(). TMVA::MethodBase * TMVA::Factory::BookMethodWeightfile ; (; DataLoader * ; loader, . TMVA::Types::EMVA ; methodType, . const TString & ; weightfile . ). private . Adds an already constructed method to be managed by this factory. ; NotePrivate. . Know what you are doing when using this method. The method that you are loading could be trained already. ; Definition at line 501 of file Factory.cxx. ◆ Class(). static TClass * TMVA::Factory::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::Factory::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::Factory::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 227 of file Factory.h. ◆ DeclFileName(). static const char * TMVA::Factory::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 227 of file Factory.h. ◆ DeleteAllMethods(). void TMVA::Factory::DeleteAllMethods ; (; void ; ). Delete methods. ; Definition at line 324 of file Factory.cxx. ◆ EvaluateAllMethods(). void TMVA::Factory::EvaluateAllMethods ; (; void ; ). Iterates over all MVAs that have been booked, and calls their evaluation methods. ; Definition at line 1376 of file Factory.cxx. ◆",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Factory.html:22772,load,loading,22772,doc/master/classTMVA_1_1Factory.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html,1,['load'],['loading']
Performance," TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooCachedPdf.h>. Inheritance diagram for RooCachedPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooCachedPdf() [1/4]. RooCachedPdf::RooCachedPdf ; (; ). inline . Definition at line 22 of file RooCachedPdf.h. ◆ RooCachedPdf() [2/4]. RooCachedPdf::RooCachedPdf ; (; const char * ; name, . const char * ; title, . RooAbsPdf & ; _pdf, . const RooArgSet & ; cacheObs . ). Constructor taking name, title and function to be cached and fixed choice of variable to cache. ; To control granularity of the binning of the cache histogram set the desired properties in the binning named ""cache"" in the observables of the function. If the fixed set of cache observables does not match the observables defined in the use context of the p.d.f the cache is still filled completely. Ee.g. when it is specified to cache x and p and only x is a observable in the given use context the cache histogram will store sampled values for all values of observable x and parameter p. In such a mode of operation the cache will also not be recalculated if the observable p changes ; Definition at line 66 of file RooCachedPdf.cxx. ◆ RooCachedPdf() [3/4]. RooCachedPdf::RooCachedPdf ; (; const char * ; name, . const char * ; title, . RooAbsPdf & ; _pdf . ). Constructor taking name, title and function to be cached. ; To control granularity of the binning of the cache histogram set the desired properties in the binning named ""cache"" in the ob",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCachedPdf.html:77395,cache,cached,77395,doc/master/classRooCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooCachedPdf.html,2,['cache'],"['cache', 'cached']"
Performance," TString fInsertQuery;  ; TString fQuery;  ; TSQLResult * fResult;  ; TSQLRow * fRow;  ; TSQLServer * fServer;  ; TString fTable;  ; TSQLTableInfo * fTableInfo;  ;  Protected Attributes inherited from TTree; TList * fAliases;  List of aliases for expressions based on the tree branches. ;  ; std::atomic< UInt_t > fAllocationCount {0};  indicates basket should be resized to exact memory usage, but causes significant ;  ; Long64_t fAutoFlush;  Auto-flush tree when fAutoFlush entries written or -fAutoFlush (compressed) bytes produced. ;  ; Long64_t fAutoSave;  Autosave tree when fAutoSave entries written or -fAutoSave (compressed) bytes produced. ;  ; TObjArray fBranches;  List of Branches. ;  ; TBranchRef * fBranchRef;  Branch supporting the TRefTable (if any) ;  ; bool fCacheDoAutoInit;  ! true if cache auto creation or resize check is needed ;  ; bool fCacheDoClusterPrefetch;  ! true if cache is prefetching whole clusters ;  ; Long64_t fCacheSize;  ! Maximum size of file buffers ;  ; bool fCacheUserSet;  ! true if the cache setting was explicitly given by user ;  ; Long64_t fChainOffset;  ! Offset of 1st entry of this Tree in a TChain ;  ; TList * fClones;  ! List of cloned trees which share our addresses ;  ; Long64_t * fClusterRangeEnd;  [fNClusterRange] Last entry of a cluster range. ;  ; Long64_t * fClusterSize;  [fNClusterRange] Number of entries in each cluster for a given range. ;  ; Int_t fDebug;  ! Debug level ;  ; Long64_t fDebugMax;  ! Last entry number to debug ;  ; Long64_t fDebugMin;  ! First entry number to debug ;  ; Int_t fDefaultEntryOffsetLen;  Initial Length of fEntryOffset table in the basket buffers. ;  ; TDirectory * fDirectory;  ! Pointer to directory holding this tree ;  ; Long64_t fEntries;  Number of entries. ;  ; TEntryList * fEntryList;  ! Pointer to event selection list (if one) ;  ; Long64_t fEstimate;  Number of entries to estimate histogram limits. ;  ; TEventList * fEventList;  ! Pointer to event selection list (if one) ;  ; TList * f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeSQL.html:42556,cache,cache,42556,doc/master/classTTreeSQL.html,https://root.cern,https://root.cern/doc/master/classTTreeSQL.html,3,['cache'],['cache']
Performance," TThread classes; libTMVA contains the multivariate analysis toolkit; libTree is the TTree object container system; libTreePlayer is the TTree drawing classes; libTreeViewer is the graphical TTree query interface. 1.6.2.1 Library Dependencies. ROOT libraries dependencies. The libraries are designed and organized to minimize dependencies, such that you can load just enough code for the task at hand rather than having to load all libraries or one monolithic chunk. The core library (libCore.so) contains the essentials; it is a part of all ROOT applications. In the Figure 1-2 you see that libCore.so is made up of base classes, container classes, meta information classes, operating system specific classes, and the ZIP algorithm used for compression of the ROOT files.; The Cling library (libCling.so) is also needed in all ROOT applications, and even by libCore. A program referencing only TObject only needs libCore; libCling will be opened automatically. To add the ability to read and write ROOT objects one also has to load libRIO. As one would expect, none of that depends on graphics or the GUI.; Library dependencies have different consequences; depending on whether you try to build a binary, or you just try to access a class that is defined in a library.; 1.6.2.2 Linktime Library Dependencies; When building your own executable you will have to link against the libraries that contain the classes you use. The ROOT reference guide states the library a class is reference guide defined in. Almost all relevant classes can be found in libraries returned by root-config -glibs; the graphics libraries are retuned by root-config --libs. These commands are commonly used in Makefiles. Using root-config instead of enumerating the libraries by hand allows you to link them in a platform independent way. Also, if ROOT library names change you will not need to change your Makefile.; A batch program that does not have a graphic display, which creates, fills, and saves histograms and trees, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:21242,load,load,21242,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['load'],['load']
Performance," TThread*fUnzipThread[10]; static Int_tTTreeCache::fgLearnEntriesnumber of entries used for learning mode; static TTreeCacheUnzip::EParUnzipModefgParallelIndicate if we want to activate the parallelism; static Double_tfgRelBuffSizeThis is the percentage of the TTreeCacheUnzip that will be used. private:. char*fCompBuffer; Int_tfCompBufferSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTreeCacheUnzip(); Default Constructor. TTreeCacheUnzip(TTree* tree, Int_t buffersize = 0); Constructor. void Init(); Initialization procedure common to all the constructors. ~TTreeCacheUnzip(); destructor. (in general called by the TFile destructor; destructor. (in general called by the TFile destructor). void AddBranch(TBranch* b, Bool_t subbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void AddBranch(const char* branch, Bool_t subbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. Bool_t FillBuffer(). void SetEntryRange(Long64_t emin, Long64_t emax); Set the minimum and maximum entry number to be processed; this information helps to optimize the number of baskets to read; when prefetching the branch buffers. void StopLearningPhase(); It's the same as TTreeCache::StopLearningPhase but we guarantee that; we start the unzipping just after getting the buffers. void UpdateBranches(TTree* tree); update pointer to current Tree and recompute pointers to the branches in the cache. Bool_t IsParallelUnzip(); Static function that tells wether the multithreading unzipping; is activated. Bool_t IsActiveThread(); This indicates if the thread is active in this moment...; this variable is very important because if we change it from true to; false the thread will stop... ( see StopThreadTreeCacheUnzip() ). Bool_t IsQueueEmpty(); It says if the queue is empty... useful to see if we have to pro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCacheUnzip.html:16684,cache,cache,16684,root/html534/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html534/TTreeCacheUnzip.html,1,['cache'],['cache']
Performance," TThread*fUnzipThread[10]; static Int_tTTreeCache::fgLearnEntriesnumber of entries used for learning mode; static TTreeCacheUnzip::EParUnzipModefgParallelIndicate if we want to activate the parallelism; static Double_tfgRelBuffSizeThis is the percentage of the TTreeCacheUnzip that will be used. private:. char*fCompBuffer; Int_tfCompBufferSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTreeCacheUnzip(); Default Constructor. TTreeCacheUnzip(TTree* tree, Int_t buffersize = 0); Constructor. void Init(); Initialization procedure common to all the constructors. ~TTreeCacheUnzip(); destructor. (in general called by the TFile destructor; destructor. (in general called by the TFile destructor). void AddBranch(TBranch* b, Bool_t subbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void AddBranch(const char* branch, Bool_t subbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. Bool_t FillBuffer(). void SetEntryRange(Long64_t emin, Long64_t emax); Set the minimum and maximum entry number to be processed; this information helps to optimize the number of baskets to read; when prefetching the branch buffers. void StopLearningPhase(); It's the same as TTreeCache::StopLearningPhase but we guarantee that; we start the unzipping just after getting the buffers. void UpdateBranches(TTree* tree, Bool_t owner = kFALSE); update pointer to current Tree and recompute pointers to the branches in the cache. Bool_t IsParallelUnzip(); Static function that tells wether the multithreading unzipping; is activated. Bool_t IsActiveThread(); This indicates if the thread is active in this moment...; this variable is very important because if we change it from true to; false the thread will stop... ( see StopThreadTreeCacheUnzip() ). Bool_t IsQueueEmpty(); It says if the queue is empty... useful t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTreeCacheUnzip.html:14740,cache,cache,14740,root/html532/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html532/TTreeCacheUnzip.html,1,['cache'],['cache']
Performance," TTree BranchObject.Definition TTree.cxx:2074; TTree::GetCacheAutoSizeLong64_t GetCacheAutoSize(bool withDefault=false)Used for automatic sizing of the cache.Definition TTree.cxx:5407; TTree::BranchRefvirtual TBranch * BranchRef()Build the optional branch supporting the TRefTable.Definition TTree.cxx:2328; TTree::GetCurrentFileTFile * GetCurrentFile() constReturn pointer to the current file.Definition TTree.cxx:5479; TTree::GetNotifyTObject * GetNotify() constDefinition TTree.h:543; TTree::fAliasesTList * fAliasesList of aliases for expressions based on the tree branches.Definition TTree.h:124; TTree::BranchTBranch * Branch(const char *name, Longptr_t address, const char *leaflist, Int_t bufsize=32000)Definition TTree.h:384; TTree::CopyTreevirtual TTree * CopyTree(const char *selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0)Copy a tree with selection.Definition TTree.cxx:3719; TTree::DropBranchFromCachevirtual Int_t DropBranchFromCache(const char *bname, bool subbranches=false)Remove the branch with name 'bname' from the Tree cache.Definition TTree.cxx:1142; TTree::Fitvirtual Int_t Fit(const char *funcname, const char *varexp, const char *selection="""", Option_t *option="""", Option_t *goption="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0)Fit a projected item(s) from a tree.Definition TTree.cxx:5079; TTree::fClusterRangeEndLong64_t * fClusterRangeEnd[fNClusterRange] Last entry of a cluster range.Definition TTree.h:103; TTree::fIMTZipBytesstd::atomic< Long64_t > fIMTZipBytes! Zip bytes for the IMT flush baskets.Definition TTree.h:161; TTree::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideMake sure that obj (which is being deleted or will soon be) is no longer referenced by this TTree.Definition TTree.cxx:7881; TTree::GetPlayerTVirtualTreePlayer * GetPlayer()Load the TTreePlayer (if not already done).Definition TTree.cxx:6305; TTree::MakeProxyvirtual Int_t MakeProxy(const char *classname, const char *macrofilename",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8h_source.html:60053,cache,cache,60053,doc/master/TTree_8h_source.html,https://root.cern,https://root.cern/doc/master/TTree_8h_source.html,1,['cache'],['cache']
Performance," TTree entry, the corresponding entry in the TTree's TBranchRef::fRefTable contains the index of the branch that needs to be loaded to bring the object into memory.; Persistency of a TRefTable is split into two parts:; entry specific information is stored (read) by FillBuffer (ReadBuffer). For each referenced object the object's fUniqueID and the referencing TRef::fPID is stored (to allow the TRefTable to autoload references created by different processes).; non-entry specific, i.e. global information is stored (read) by the Streamer function. This comprises all members marked as persistent. As TObject::fUniqueID is only unique for a given TProcessID, a table of unique IDs is kept for each used TProcessID. There is no natural order of TProcessIDs, so TRefTable stores a vector of the TGUID of all known TProcessIDs in fProcessGUIDs; the index of a TProcessID in this vector defines the index of the auto-loading info in fParentIDs for that TProcessID. The mapping of TProcessID* to index is cached for quick non-persistent lookup. ; Definition at line 35 of file TRefTable.h. Public Types; enum  EStatusBits { kHaveWarnedReadingOld = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TRefTable ();  Default constructor for I/O. ;  ;  TRefTable (const TRefTable &)=delete;  ;  TRefTable (TObject *owner, Int_t size);  Create a TRefTable with initial size",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRefTable.html:1591,cache,cached,1591,doc/master/classTRefTable.html,https://root.cern,https://root.cern/doc/master/classTRefTable.html,1,['cache'],['cached']
Performance," TTreeCache.cxx:2145; TTreeCache::GetTreeTTree * GetTree() constDefinition TTreeCache.h:149; TTreeCache::SetEntryRangevirtual void SetEntryRange(Long64_t emin, Long64_t emax)Set the minimum and maximum entry number to be processed this information helps to optimize the numbe...Definition TTreeCache.cxx:2106; TTreeCache::DropBranchvirtual Int_t DropBranch(TBranch *b, bool subbranches=false)Remove a branch to the list of branches to be stored in the cache this function is called by TBranch:...Definition TTreeCache.cxx:541; TTreeCache::SetAutoCreatedvoid SetAutoCreated(bool val)Definition TTreeCache.h:164; TTreeCache::StopLearningPhasevirtual void StopLearningPhase()This is the counterpart of StartLearningPhase() and can be used to stop the learning phase.Definition TTreeCache.cxx:2187; TTreeCache::Printvoid Print(Option_t *option="""") const overridePrint cache statistics.Definition TTreeCache.cxx:1899; TTreeCache::AddBranchInt_t AddBranch(TBranch *b, bool subgbranches=false) overrideAdd a branch to the list of branches to be stored in the cache this function is called by the user vi...Definition TTreeCache.cxx:376; TTreeClonerClass implementing or helping the various TTree cloning method.Definition TTreeCloner.h:31; TTreeCloner::kNoWarnings@ kNoWarningsDefinition TTreeCloner.h:100; TTreeCloner::GetWarningconst char * GetWarning() constDefinition TTreeCloner.h:117; TTreeCloner::Execbool Exec()Execute the cloning.Definition TTreeCloner.cxx:222; TTreeCloner::NeedConversionbool NeedConversion()Definition TTreeCloner.h:121; TTreeCloner::IsValidbool IsValid()Definition TTreeCloner.h:120; TTreeCloner::SetCacheSizevoid SetCacheSize(Long64_t size)Set the cache size used by the matching TFile.Definition TTreeCloner.cxx:656; TTreeFriendLeafIterIterator on all the leaves in a TTree and its friend.Definition TTree.h:716; TTreeFriendLeafIter::fTreeTTree * fTreetree being iteratedDefinition TTree.h:719; TTreeFriendLeafIter::operator=TIterator & operator=(const TIterator &rhs) overrid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:430661,cache,cache,430661,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['cache'],['cache']
Performance," TUnfoldSys. TUnfoldDensity adds features to TUnfoldSys, related to possible complex multidimensional arrangements of bins. For innocent users, the most notable improvement of TUnfoldDensity over TUnfoldSys are the getter functions. For TUnfoldSys, histograms have to be booked by the user and the getter functions fill the histogram bins. TUnfoldDensity simply returns a new, already filled histogram.; If you use this software, please consider the following citation; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201]; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Brief recipy to use TUnfoldSys: . a matrix (truth,reconstructed) is given as a two-dimensional histogram as argument to the constructor of TUnfold . a vector of measurements is given as one-dimensional histogram using the SetInput() method . repeated calls to SubtractBackground() to specify background sources . repeated calls to AddSysError() to specify systematic uncertainties . The unfolding is performed . either once with a fixed parameter tau, method DoUnfold(tau) . or multiple times in a scan to determine the best chouce of tau, method ScanLCurve() . Unfolding results are retrieved using various GetXXX() methods . Description of (systematic) uncertainties available in TUnfoldSys. There are covariance matrix contributions and there are systematic shifts. Systematic shifts correspond to the variation of a (buicance) parameter, for example a background normalisation or a one-sigma variation of a correlated systematic error. . Set by Access covariance matrix Access vector of shifts Description . (a)TUnfoldSys constructor GetEmatrixSysUncorr()n.a. uncorrelated errors on the input matrix histA, taken as the errors provided with the histogram. These are typically statistical errors from finite Monte Carlo samples. . (b)AddSysError()GetEmatrixSysSource() GetDeltaSysSource() correlated shifts of the input matrix histA. These shifts are taken as one-sigma effects when switchig on",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:2291,perform,performed,2291,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['perform'],['performed']
Performance," TVirtualIsAProxy * GetIsAProxy () const;  Return the proxy implementing the IsA functionality. ;  ; TVirtualStreamerInfo * GetLastReadInfo () const;  ; TList * GetListOfAllPublicDataMembers (Bool_t load=kTRUE);  Returns a list of all public data members of this class and its base classes. ;  ; const TList * GetListOfAllPublicMethods (Bool_t load=kTRUE);  Returns a list of all public methods of this class and its base classes. ;  ; TList * GetListOfBases ();  Return list containing the TBaseClass(es) of a class. ;  ; TList * GetListOfDataMembers (Bool_t load=kTRUE);  Return list containing the TDataMembers of a class. ;  ; TList * GetListOfEnums (Bool_t load=kTRUE);  Return a list containing the TEnums of a class. ;  ; TList * GetListOfFunctionTemplates (Bool_t load=kTRUE);  Return TListOfFunctionTemplates for a class. ;  ; TCollection * GetListOfMethodOverloads (const char *name) const;  Return the collection of functions named ""name"". ;  ; TList * GetListOfMethods (Bool_t load=kTRUE);  Return list containing the TMethods of a class. ;  ; TList * GetListOfRealData () const;  ; TList * GetListOfUsingDataMembers (Bool_t load=kTRUE);  Return list containing the TDataMembers of using declarations of a class. ;  ; void GetMenuItems (TList *listitems);  Returns list of methods accessible by context menu. ;  ; TList * GetMenuList () const;  Return the list of menu items associated with the class. ;  ; ROOT::MergeFunc_t GetMerge () const;  Return the wrapper around Merge. ;  ; TMethod * GetMethod (const char *method, const char *params, Bool_t objectIsConst=kFALSE);  Find the best method (if there is one) matching the parameters. ;  ; TMethod * GetMethodAllAny (const char *method);  Return pointer to method without looking at parameters. ;  ; TMethod * GetMethodAny (const char *method);  Return pointer to method without looking at parameters. ;  ; TMethod * GetMethodWithPrototype (const char *method, const char *proto, Bool_t objectIsConst=kFALSE, ROOT::EFunctionMatchMode ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:13732,load,load,13732,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,3,['load'],['load']
Performance," TVirtualPadEditor. class TVirtualPadEditor. TVirtualPadEditor. Abstract base class used by ROOT graphics editor. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TVirtualPadEditor(); virtual voidBuild(); static TClass*Class(); virtual voidDeleteEditors(); virtual voidDrawLine(Double_t, Double_t, Double_t, Double_t); virtual voidDrawLineNDC(Double_t, Double_t, Double_t, Double_t); virtual voidDrawText(Double_t, Double_t, const char*); virtual voidDrawTextNDC(Double_t, Double_t, const char*); virtual voidFillAttributes(Int_t, Int_t); virtual TCanvas*GetCanvas() const; static const char*GetEditorName(); static TVirtualPadEditor*GetPadEditor(Bool_t load = kTRUE); virtual voidHide(); static voidHideEditor(); virtual TClass*IsA() const; virtual Bool_tIsGlobal() const; virtual voidLineAttributes(Int_t, Int_t, Int_t); static TVirtualPadEditor*LoadEditor(); virtual voidMarkerAttributes(Int_t, Int_t, Float_t); TVirtualPadEditor&operator=(const TVirtualPadEditor&); virtual voidSetGlobal(Bool_t); static voidSetPadEditorName(const char* name); virtual voidShow(); static voidShowEditor(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); static voidTerminate(); virtual voidTextAttributes(Int_t, Float_t, Int_t, Int_t, Float_t); static voidUpdateFillAttributes(Int_t col, Int_t sty); static voidUpdateLineAttributes(Int_t col, Int_t sty, Int_t width); static voidUpdateMarkerAttributes(Int_t col, Int_t sty, Float_t msiz); static voidUpdateTextAttributes(Int_t align, Float_t angle, Int_t col, Int_t font, Float_t tsize). Data Members; protected:. static TStringfgEditorNamename of the default pad editor ""Ged""; static TVirtualPadEditor*fgPadEditorsingleton editor dialog. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TVirtualPadEditor(); Virtual editor d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualPadEditor.html:1032,load,load,1032,root/html528/TVirtualPadEditor.html,https://root.cern,https://root.cern/root/html528/TVirtualPadEditor.html,3,['load'],['load']
Performance," TWebCanvas::fWebConn. protected . ! connections ; Definition at line 83 of file TWebCanvas.h. ◆ fWindow. std::shared_ptr<ROOT::RWebWindow> TWebCanvas::fWindow. protected . Definition at line 88 of file TWebCanvas.h. ◆ fWindowGeometry. std::vector<int> TWebCanvas::fWindowGeometry. protected . ! last received window geometry ; Definition at line 108 of file TWebCanvas.h. ◆ gBatchFiles. std::vector< std::string > TWebCanvas::gBatchFiles. staticprotected . ! file names for batch job ; Definition at line 124 of file TWebCanvas.h. ◆ gBatchHeights. std::vector< int > TWebCanvas::gBatchHeights. staticprotected . ! batch job heights ; Definition at line 127 of file TWebCanvas.h. ◆ gBatchImageMode. UInt_t TWebCanvas::gBatchImageMode = 0. staticprotected . ! configured batch size ; Definition at line 122 of file TWebCanvas.h. ◆ gBatchJsons. std::vector< std::string > TWebCanvas::gBatchJsons. staticprotected . ! converted jsons batch job ; Definition at line 125 of file TWebCanvas.h. ◆ gBatchMultiPdf. std::string TWebCanvas::gBatchMultiPdf. staticprotected . ! name of current multi-page pdf file ; Definition at line 123 of file TWebCanvas.h. ◆ gBatchWidths. std::vector< int > TWebCanvas::gBatchWidths. staticprotected . ! batch job widths ; Definition at line 126 of file TWebCanvas.h. ◆ gCustomClasses. std::vector< std::string > TWebCanvas::gCustomClasses = {}. staticprotected . ! list of custom classes, which can be delivered as is to client ; Definition at line 120 of file TWebCanvas.h. ◆ gCustomScripts. std::string TWebCanvas::gCustomScripts = {}. staticprotected . ! custom JavaScript code or URL on JavaScript files to load before start drawing ; Definition at line 119 of file TWebCanvas.h. Libraries for TWebCanvas:. [legend]; The documentation for this class was generated from the following files:; gui/webgui6/inc/TWebCanvas.h; gui/webgui6/src/TWebCanvas.cxx. TWebCanvas. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:47 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebCanvas.html:46408,load,load,46408,doc/master/classTWebCanvas.html,https://root.cern,https://root.cern/doc/master/classTWebCanvas.html,1,['load'],['load']
Performance," TWebFile, etc.; Returns kTRUE in case of failure.; Note: This is the overloading made in TXNetFile. If ReadBuffers; is supported by xrootd it will try to get the whole list from one single; call avoiding the latency of multiple calls. Bool_t WriteBuffer(const char* buffer, Int_t BufferLength); Override TNetFile::WriteBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. void Init(Bool_t create); Initialize the file. Makes sure that the file is really open before; calling TFile::Init. It may block. Bool_t IsOpen() const; Return kTRUE if the file is open, kFALSE otherwise. TFile::EAsyncOpenStatus GetAsyncOpenStatus(); Return status of asynchronous request. Int_t ReOpen(const Option_t* mode); Re-open the file (see TNetFile::ReOpen() or TFile::ReOpen(); for more details). void Close(const Option_t* opt = """"); Close the file (see TNetFile::Close() or TFile::Close(); for more details). void Flush(); Flushes un-written data. Int_t SysStat(Int_t fd, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtime); Override TNetFile::SysStat (see parent's method for more details). Int_t SysClose(Int_t fd); Override TNetFile::SysClose (see parent's method for more details). Int_t SysOpen(const char* pathname, Int_t flags, UInt_t mode); Override TNetFile::SysOpen (see parent's method for more details). void SetEnv(); Set the relevant environment variables. void SynchronizeCacheSize(); Synchronize the cache size; Alternative purging policy. void ResetCache(); Reset the cache. Int_t GetBytesToPrefetch() const; Max number of bytes to prefetch. void Print(Option_t* option = """") const; Print the local statistics. TXNetFile(const TXNetFile& ); attempts to Init() for this object only; Methods. TXNetFile& operator=(const TXNetFile& ). TXNetFile(); {}. » Last changed: root/netx:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXNetFile.html:30744,cache,cache,30744,root/html602/TXNetFile.html,https://root.cern,https://root.cern/root/html602/TXNetFile.html,2,['cache'],['cache']
Performance," TWebFile, etc.; Returns kTRUE in case of failure.; Note: This is the overloading made in TXNetFile. If ReadBuffers; is supported by xrootd it will try to get the whole list from one single; call avoiding the latency of multiple calls. Bool_t WriteBuffer(const char* buffer, Int_t BufferLength); Override TNetFile::WriteBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. void Init(Bool_t create); Initialize the file. Makes sure that the file is really open before; calling TFile::Init. It may block. Bool_t IsOpen() const; Return kTRUE if the file is open, kFALSE otherwise. TFile::EAsyncOpenStatus GetAsyncOpenStatus(); Return status of asynchronous request. Int_t ReOpen(const Option_t* mode); Re-open the file (see TNetFile::ReOpen() or TFile::ReOpen(); for more details). void Close(const Option_t* opt = """"); Close the file (see TNetFile::Close() or TFile::Close(); for more details). void Flush(); Flushes un-written data. Int_t SysStat(Int_t fd, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtime); Override TNetFile::SysStat (see parent's method for more details). Int_t SysClose(Int_t fd); Override TNetFile::SysClose (see parent's method for more details). Int_t SysOpen(const char* pathname, Int_t flags, UInt_t mode); Override TNetFile::SysOpen (see parent's method for more details). void SetEnv(); Set the relevant environment variables. void SynchronizeCacheSize(); Synchronize the cache size; Alternative purging policy. void ResetCache(); Reset the cache. Int_t GetBytesToPrefetch() const; Max number of bytes to prefetch. void Print(Option_t* option = """") const; Print the local statistics. TXNetFile(const TXNetFile& ); attempts to Init() for this object only; Methods. TXNetFile& operator=(const TXNetFile& ). TXNetFile(); {}. » Last changed: root/netx:$Id$ » Last generated: 2015-07-10 18:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TXNetFile.html:30662,cache,cache,30662,root/html604/TXNetFile.html,https://root.cern,https://root.cern/root/html604/TXNetFile.html,2,['cache'],['cache']
Performance, Tex driver; TText Text; TTextEditor text editor; TThread Thread class; TThreadFactory Thread factory ABC; TThreadImp ThreadImp class; TTime Basic time type with milli second precision; TTimeStamp Encapsulates seconds and ns since EPOCH; TTimer Handle timer event; TToggle Facility for toggling datamembers on/off; TToggleGroup Group of contex-menu toggle objects; TTree Tree descriptor (the main ROOT I/O class); TTreeCache Specialization of TFileCacheRead for a TTree; TTreeCacheUnzip Specialization of TTreeCache for parallel unzipping; TTreeCloner helper used for the fast cloning of TTrees.; TTreeDrawArgsParser Helper class to parse the argument to TTree::Draw; TTreeFormula The Tree formula; TTreeFormulaManager A class coordinating several TTreeFormula objects.; TTreeFriendLeafIter Linked list iterator; TTreeIndex A Tree Index with majorname and minorname.; TTreeInput Simple input dialog; TTreePerfStats TTree I/O performance measurement; TTreePlayer Manager class to play with TTrees; TTreeResult TTree query result; TTreeRow One row of an TTree query result; TTreeSQL TTree Implementation read and write to a SQL database.; TTreeTableInterface Interface to data in a TTree; TTreeViewer A GUI oriented tree viewer; TUDPSocket This class implements UDP client sockets; TUUID Universally Unique IDentifier; TUnfold Unfolding with support for L-curve analysis; TUnfoldBinning Complex binning schemes for TUnfoldDensity; TUnfoldDensity Unfolding with densisty regularisation; TUnfoldSys Unfolding with support for systematic error propagation; TUnixSystem Interface to Unix OS services; TUnuran ; TUnuranBaseDist Base class for Unuran distribution wrappers; TUnuranContDist Wrapper class for one dimensional continuous distribution; TUnuranDiscrDist Wrapper class for one dimensional discrete distribution; TUnuranEmpDist Wrapper class for empirical distribution ; TUnuranMultiContDist Wrapper class for multi dimensional continuous distribution; TUnuranSampler ; TUploadDataSetDlg New query d,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:136992,perform,performance,136992,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,1,['perform'],['performance']
Performance," The error is calculated as ey=(f(x,y+ey)-f(x,y-ey))/2; This is the same as error(fy) = df/dy * ey for small errors. For generic functions the symmetric errors might become non-symmetric; and are averaged here. Use TGraphAsymmErrors if desired. error on x doesn't change; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. Int_t CalculateScanfFields(const char* fmt); Calculate scan fields. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Int_t Merge(TCollection* list); Adds all graphs with erro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraphErrors.html:19074,perform,perform,19074,root/html602/TGraphErrors.html,https://root.cern,https://root.cern/root/html602/TGraphErrors.html,2,['perform'],['perform']
Performance," The error is calculated as ey=(f(x,y+ey)-f(x,y-ey))/2; This is the same as error(fy) = df/dy * ey for small errors. For generic functions the symmetric errors might become non-symmetric; and are averaged here. Use TGraphAsymmErrors if desired. error on x doesn't change; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. Int_t CalculateScanfFields(const char* fmt); Calculate scan fields. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. void Print(Option_t* chopt = """") const; Print graph and e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphErrors.html:18585,perform,perform,18585,root/html534/TGraphErrors.html,https://root.cern,https://root.cern/root/html534/TGraphErrors.html,1,['perform'],['perform']
Performance," The file will be downloaded to the cache and opened from there.; 3872/// If the download fails, it will be opened remotely.; 3873/// The file will be downloaded to the directory specified by SetCacheFileDir().; 3874 ; 3875TFile *TFile::OpenFromCache(const char *name, Option_t *, const char *ftitle,; 3876 Int_t compress, Int_t netopt); 3877{; 3878 TFile *f = nullptr;; 3879 ; 3880 if (fgCacheFileDir == """") {; 3881 ::Warning(""TFile::OpenFromCache"",; 3882 ""you want to read through a cache, but you have no valid cache ""; 3883 ""directory set - reading remotely"");; 3884 ::Info(""TFile::OpenFromCache"", ""set cache directory using TFile::SetCacheFileDir()"");; 3885 } else {; 3886 TUrl fileurl(name);; 3887 ; 3888 if ((!strcmp(fileurl.GetProtocol(), ""file""))) {; 3889 // it makes no sense to read local files through a file cache; 3890 if (!fgCacheFileForce); 3891 ::Warning(""TFile::OpenFromCache"",; 3892 ""you want to read through a cache, but you are reading ""; 3893 ""local files - CACHEREAD disabled"");; 3894 } else {; 3895 // this is a remote file and worthwhile to be put into the local cache; 3896 // now create cachepath to put it; 3897 TString cachefilepath;; 3898 TString cachefilepathbasedir;; 3899 cachefilepath = fgCacheFileDir;; 3900 cachefilepath += fileurl.GetFile();; 3901 cachefilepathbasedir = gSystem->GetDirName(cachefilepath);; 3902 if ((gSystem->mkdir(cachefilepathbasedir, kTRUE) < 0) &&; 3903 (gSystem->AccessPathName(cachefilepathbasedir, kFileExists))) {; 3904 ::Warning(""TFile::OpenFromCache"",""you want to read through a cache, but I ""; 3905 ""cannot create the directory %s - CACHEREAD disabled"",; 3906 cachefilepathbasedir.Data());; 3907 } else {; 3908 // check if this should be a zip file; 3909 if (strlen(fileurl.GetAnchor())) {; 3910 // remove the anchor and change the target name; 3911 cachefilepath += ""__"";; 3912 cachefilepath += fileurl.GetAnchor();; 3913 fileurl.SetAnchor("""");; 3914 }; 3915 if (strstr(name,""zip="")) {; 3916 // filter out this option and change the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:141499,cache,cache,141499,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,8,['cache'],"['cache', 'cachefilepath', 'cachefilepathbasedir', 'cachepath']"
Performance," The function returns the first occurence of the object in the list of folders. The returned string points to a static char array in TROOT. If this function is called in a loop or recursively, it is the user's responsibility to copy this string in their area. ; Definition at line 1473 of file TROOT.cxx. ◆ FindSpecialObject(). TObject * TROOT::FindSpecialObject ; (; const char * ; name, . void *& ; where . ). Returns address and folder of a ROOT object if it exists. ; This function looks in the following order in the ROOT lists:; List of files; List of memory mapped files; List of functions; List of geometries; List of canvases; List of styles; List of specials; List of materials in current geometry; List of shapes in current geometry; List of matrices in current geometry; List of Nodes in current geometry; Current Directory in memory; Current Directory on file . Definition at line 1367 of file TROOT.cxx. ◆ FindSTLClass(). TClass * TROOT::FindSTLClass ; (; const char * ; name, . Bool_t ; load, . Bool_t ; silent = kFALSE . ); const. return a TClass object corresponding to 'name' assuming it is an STL container. ; In particular we looking for possible alternative name (default template parameter, typedefs template arguments, typedefed name). ; Definition at line 1484 of file TROOT.cxx. ◆ ForceStyle(). void TROOT::ForceStyle ; (; Bool_t ; force = kTRUE). inline . Definition at line 206 of file TROOT.h. ◆ FromPopUp(). Bool_t TROOT::FromPopUp ; (; ); const. inline . Definition at line 207 of file TROOT.h. ◆ GetApplication(). TApplication * TROOT::GetApplication ; (; ); const. inline . Definition at line 209 of file TROOT.h. ◆ GetBinDir(). const TString & TROOT::GetBinDir ; (; ). static . Get the binary directory in the installation. Static utility function. ; Definition at line 2989 of file TROOT.cxx. ◆ GetBuiltDate(). Int_t TROOT::GetBuiltDate ; (; ); const. inline . Definition at line 221 of file TROOT.h. ◆ GetBuiltTime(). Int_t TROOT::GetBuiltTime ; (; ); const. inline ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTROOT.html:47500,load,load,47500,doc/v632/classTROOT.html,https://root.cern,https://root.cern/doc/v632/classTROOT.html,1,['load'],['load']
Performance," The function returns the first occurence of the object in the list of folders. The returned string points to a static char array in TROOT. If this function is called in a loop or recursively, it is the user's responsibility to copy this string in their area. ; Definition at line 1473 of file TROOT.cxx. ◆ FindSpecialObject(). TObject * TROOT::FindSpecialObject ; (; const char * ; name, . void *& ; where . ). Returns address and folder of a ROOT object if it exists. ; This function looks in the following order in the ROOT lists:; List of files; List of memory mapped files; List of functions; List of geometries; List of canvases; List of styles; List of specials; List of materials in current geometry; List of shapes in current geometry; List of matrices in current geometry; List of Nodes in current geometry; Current Directory in memory; Current Directory on file . Definition at line 1367 of file TROOT.cxx. ◆ FindSTLClass(). TClass * TROOT::FindSTLClass ; (; const char * ; name, . Bool_t ; load, . Bool_t ; silent = kFALSE . ); const. return a TClass object corresponding to 'name' assuming it is an STL container. ; In particular we looking for possible alternative name (default template parameter, typedefs template arguments, typedefed name). ; Definition at line 1484 of file TROOT.cxx. ◆ ForceStyle(). void TROOT::ForceStyle ; (; Bool_t ; force = kTRUE). inline . Definition at line 206 of file TROOT.h. ◆ FromPopUp(). Bool_t TROOT::FromPopUp ; (; ); const. inline . Definition at line 207 of file TROOT.h. ◆ GetApplication(). TApplication * TROOT::GetApplication ; (; ); const. inline . Definition at line 209 of file TROOT.h. ◆ GetBinDir(). const TString & TROOT::GetBinDir ; (; ). static . Get the binary directory in the installation. Static utility function. ; Definition at line 2993 of file TROOT.cxx. ◆ GetBuiltDate(). Int_t TROOT::GetBuiltDate ; (; ); const. inline . Definition at line 221 of file TROOT.h. ◆ GetBuiltTime(). Int_t TROOT::GetBuiltTime ; (; ); const. inline ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTROOT.html:47469,load,load,47469,doc/master/classTROOT.html,https://root.cern,https://root.cern/doc/master/classTROOT.html,1,['load'],['load']
Performance," The object associated to this key is read from the file into memory; Once the key structure is read (via Streamer) the class identifier; of the object is known.; Using the class identifier we find the TClass object for this class.; A TClass object contains a full description (i.e. dictionary) of the; associated class. In particular the TClass object can create a new; object of the class type it describes. This new object now calls its; Streamer function to rebuilt itself. Use TKey::ReadObjectAny to read any object non-derived from TObject. Note:; A C style cast can only be used in the case where the final class; of this object derives from TObject as a first inheritance, otherwise; one must use a dynamic_cast. Example1: simplified case:; class MyClass : public TObject, public AnotherClass; then on return, one get away with using:; MyClass *obj = (MyClass*)key->ReadObj();. Example2: Usual case (recommended unless performance is critical); MyClass *obj = dynamic_cast<MyClass*>(key->ReadObj());; which support also the more complex inheritance like:; class MyClass : public AnotherClass, public TObject. Of course, dynamic_cast<> can also be used in the example 1. TObject * ReadObjWithBuffer(char* bufferRead); To read a TObject* from bufferRead.; This function is identical to TKey::ReadObj, but it reads directly; from bufferRead instead of reading from a file.; The object associated to this key is read from the buffer into memory; Using the class identifier we find the TClass object for this class.; A TClass object contains a full description (i.e. dictionary) of the; associated class. In particular the TClass object can create a new; object of the class type it describes. This new object now calls its; Streamer function to rebuilt itself. NOTE :; This function is called only internally by ROOT classes.; Although being public it is not supposed to be used outside ROOT.; If used, you must make sure that the bufferRead is large enough to; accomodate the object being read. v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TKey.html:13863,perform,performance,13863,root/html534/TKey.html,https://root.cern,https://root.cern/root/html534/TKey.html,3,['perform'],['performance']
Performance," The tree is created in the current directory.; Use the various functions Branch below to add branches to this tree. If the first character of title is a ""/"", the function assumes a folder name.; In this case, it creates automatically branches following the folder hierarchy.; splitlevel may be used in this case to control the split level. ~TTree(); Destructor. TBuffer* GetTransientBuffer(Int_t size); Returns the transient buffer currently used by this TTree for reading/writing baskets. void AddBranchToCache(const char* bname, Bool_t subbranches = kFALSE); Add branch with name bname to the Tree cache.; If bname=""*"" all branches are added to the cache.; if subbranches is true all the branches of the subbranches are; also put to the cache. void AddBranchToCache(TBranch* branch, Bool_t subbranches = kFALSE); Add branch b to the Tree cache.; if subbranches is true all the branches of the subbranches are; also put to the cache. void DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); Remove the branch with name 'bname' from the Tree cache.; If bname=""*"" all branches are removed from the cache.; if subbranches is true all the branches of the subbranches are; also removed from the cache. void DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); Remove the branch b from the Tree cache.; if subbranches is true all the branches of the subbranches are; also removed from the cache. void AddClone(TTree* ); Add a cloned tree to our list of trees to be notified whenever we change; our branch addresses or when we are deleted. TFriendElement* AddFriend(const char* treename, const char* filename = """"); Add a TFriendElement to the list of friends. This function:; -opens a file if filename is specified; -reads a Tree with name treename from the file (current directory); -adds the Tree to the list of friends; see other AddFriend functions. A TFriendElement TF describes a TTree object TF in a file.; When a TFriendElement TF is added to the the list of friends",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:36717,cache,cache,36717,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,2,['cache'],['cache']
Performance," The user must call Release() on; the copy pointer once this pointer is not needed anymore (equivalent to; delete() after calling new()). void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void UnmarkSaved(); Reset SavePrimitive bits. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute mouse actions on this volume. TGeoNode * FindNode(const char* name) const; search a daughter inside the list of nodes. Int_t GetNodeIndex(const TGeoNode* node, Int_t* check_list, Int_t ncheck) const; Get the index of a daugther within check_list by providing the node pointer. Int_t GetIndex(const TGeoNode* node) const; get index number for a given daughter. char * GetObjectInfo(Int_t px, Int_t py) const; Get volume info for the browser. Bool_t GetOptimalVoxels() const; --- Returns true if cylindrical voxelization is optimal. char * GetPointerName() const; Provide a pointer name containing uid. TGeoVoxelFinder * GetVoxels() const; Getter for optimization structure. void GrabFocus(); Move perspective view focus to this volume. Bool_t IsAssembly() const; Returns true if the volume is an assembly or a scaled assembly. TGeoVolume * CloneVolume() const; Clone this volume.; build a volume with same name, shape and medium. void CloneNodesAndConnect(TGeoVolume* newmother) const; Clone the array of nodes. void MakeCopyNodes(const TGeoVolume* other); make a new list of nodes and copy all nodes of other volume inside. TGeoVolume * MakeCopyVolume(TGeoShape* newshape); make a copy of this volume; build a volume with same name, shape and medium. TGeoVolume * MakeReflectedVolume(const char* newname = """") const; Make a copy of this volume which is reflected with respect to XY plane. void SetAsTopVolume(); Set this volume as the TOP one (the whole geometry starts from here). void SetCurrentPoint(Double_t x, Double_t y, Double_t z); Set the current tracking point. void SetShape(const TGeoShape* shape); set the shape associated ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoVolume.html:40478,optimiz,optimization,40478,root/html534/TGeoVolume.html,https://root.cern,https://root.cern/root/html534/TGeoVolume.html,3,['optimiz'],['optimization']
Performance," Therefore, the; user is asked to provide a minimum relative error ; (TMultiDimFit::SetMinRelativeError), and ; will be considered minimized when. Optionally, the user may impose a functional expression by specifying; the powers of each variable in specified functions ; (TMultiDimFit::SetPowers). In that case, only the; coefficients is calculated by the class. Limiting the Number of Terms. As always when dealing with fits, there's a real chance of; over fitting. As is well-known, it's always possible to fit an; polynomial in to points with ; , but; the polynomial is not likely to fit new data at all; [1]. Therefore, the user is asked to provide an upper; limit, to the number of terms in ; (TMultiDimFit::SetMaxTerms). However, since there's an infinite number of to choose from, the; user is asked to give the maximum power. , of each variable; to be considered in the minimization of ; (TMultiDimFit::SetMaxPowers). One way of obtaining values for the maximum power in variable , is; to perform a regular fit to the dependent quantity , using a; polynomial only in . The maximum power is is then the; power that does not significantly improve the one-dimensional; least-square fit over to [5]. There are still a huge amount of possible choices for ; in fact; there are ; possible; choices. Obviously we need to limit this. To this end, the user is; asked to set a power control limit, ; (TMultiDimFit::SetPowerLimit), and a function; is only accepted if. where is the leading power of variable in function; . (TMultiDimFit::MakeCandidates). So the number of; functions increase with (1, 2 is fine, 5 is way out). Gram-Schmidt Orthogonalisation. To further reduce the number of functions in the final expression,; only those functions that significantly reduce is chosen. What; `significant' means, is chosen by the user, and will be; discussed below (see 2.3). The functions are generally not orthogonal, which means one will; have to evaluate all possible 's over all data-points before; fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiDimFit.html:4020,perform,perform,4020,root/html528/TMultiDimFit.html,https://root.cern,https://root.cern/root/html528/TMultiDimFit.html,3,['perform'],['perform']
Performance," Toggle editor. ; Definition at line 2440 of file TCanvas.cxx. ◆ ToggleEventStatus(). void TCanvas::ToggleEventStatus ; (; ). virtual . Toggle event statusbar. ; Definition at line 2418 of file TCanvas.cxx. ◆ ToggleToolBar(). void TCanvas::ToggleToolBar ; (; ). virtual . Toggle toolbar. ; Definition at line 2429 of file TCanvas.cxx. ◆ ToggleToolTips(). void TCanvas::ToggleToolTips ; (; ). virtual . Toggle tooltip display. ; Definition at line 2451 of file TCanvas.cxx. ◆ Update(). void TCanvas::Update ; (; ). overridevirtual . Update canvas pad buffers. ; Implements TVirtualPad.; Definition at line 2476 of file TCanvas.cxx. ◆ UpdateAsync(). void TCanvas::UpdateAsync ; (; ). overridevirtual . Asynchronous pad update. ; In case of web-based canvas triggers update of the canvas on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical dead-locks. In case of normal canvas just canvas->Update() is performed. ; Implements TVirtualPad.; Definition at line 2532 of file TCanvas.cxx. ◆ UseCurrentStyle(). void TCanvas::UseCurrentStyle ; (; ). overridevirtual . Force a copy of current style for all objects in canvas. ; Reimplemented from TObject.; Definition at line 1183 of file TCanvas.cxx. ◆ UseGL(). Bool_t TCanvas::UseGL ; (; ); const. inline . Definition at line 228 of file TCanvas.h. Friends And Related Symbol Documentation. ◆ TCanvasImp. friend class TCanvasImp. friend . Definition at line 25 of file TCanvas.h. ◆ TInterpreter. friend class TInterpreter. friend . Definition at line 28 of file TCanvas.h. ◆ TThread. friend class TThread. friend . Definition at line 27 of file TCanvas.h. ◆ TWebCanvas. friend class TWebCanvas. friend . Definition at line 26 of file TCanvas.h. Member Data Documentation. ◆ fBatch. Bool_t TCanvas::fBatch. protected . ! True when in batchmode ; Definition at line 59 of file TCanvas.h. ◆ fCanvasID. Int_t TCanvas::fCanvasID. protected . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCanvas.html:93517,perform,performed,93517,doc/v632/classTCanvas.html,https://root.cern,https://root.cern/doc/v632/classTCanvas.html,1,['perform'],['performed']
Performance," Toggle editor. ; Definition at line 2453 of file TCanvas.cxx. ◆ ToggleEventStatus(). void TCanvas::ToggleEventStatus ; (; ). virtual . Toggle event statusbar. ; Definition at line 2431 of file TCanvas.cxx. ◆ ToggleToolBar(). void TCanvas::ToggleToolBar ; (; ). virtual . Toggle toolbar. ; Definition at line 2442 of file TCanvas.cxx. ◆ ToggleToolTips(). void TCanvas::ToggleToolTips ; (; ). virtual . Toggle tooltip display. ; Definition at line 2464 of file TCanvas.cxx. ◆ Update(). void TCanvas::Update ; (; ). overridevirtual . Update canvas pad buffers. ; Implements TVirtualPad.; Definition at line 2489 of file TCanvas.cxx. ◆ UpdateAsync(). void TCanvas::UpdateAsync ; (; ). overridevirtual . Asynchronous pad update. ; In case of web-based canvas triggers update of the canvas on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical dead-locks. In case of normal canvas just canvas->Update() is performed. ; Implements TVirtualPad.; Definition at line 2545 of file TCanvas.cxx. ◆ UseCurrentStyle(). void TCanvas::UseCurrentStyle ; (; ). overridevirtual . Force a copy of current style for all objects in canvas. ; Reimplemented from TObject.; Definition at line 1185 of file TCanvas.cxx. ◆ UseGL(). Bool_t TCanvas::UseGL ; (; ); const. inline . Definition at line 228 of file TCanvas.h. Friends And Related Symbol Documentation. ◆ TCanvasImp. friend class TCanvasImp. friend . Definition at line 25 of file TCanvas.h. ◆ TInterpreter. friend class TInterpreter. friend . Definition at line 28 of file TCanvas.h. ◆ TThread. friend class TThread. friend . Definition at line 27 of file TCanvas.h. ◆ TWebCanvas. friend class TWebCanvas. friend . Definition at line 26 of file TCanvas.h. Member Data Documentation. ◆ fBatch. Bool_t TCanvas::fBatch. protected . ! True when in batchmode ; Definition at line 59 of file TCanvas.h. ◆ fCanvasID. Int_t TCanvas::fCanvasID. protected . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCanvas.html:93962,perform,performed,93962,doc/master/classTCanvas.html,https://root.cern,https://root.cern/doc/master/classTCanvas.html,1,['perform'],['performed']
Performance," TrainOneEvent(Int_t ievt); train network over a single event; this uses the new event model. Double_t GetDesiredOutput(const TMVA::Event* ev); get the desired output of this event. void UpdateNetwork(Double_t desired, Double_t eventWeight = 1.); update the network based on how closely; the output matched the desired output. void UpdateNetwork(const vector<Float_t>& desired, Double_t eventWeight = 1.); update the network based on how closely; the output matched the desired output. void CalculateNeuronDeltas(); have each neuron calculate its delta by backpropagation. void GeneticMinimize(); create genetics class similar to GeneticCut; give it vector of parameter ranges (parameters = weights); link fitness function of this class to ComputeEstimator; instantiate GA (see MethodCuts); run it; then this should exist for GA, Minuit and random sampling. Double_t EstimatorFunction(vector<Double_t>& parameters); interface to the estimate. Double_t ComputeEstimator(vector<Double_t>& parameters); this function is called by GeneticANN for GA optimization. void UpdateSynapses(); update synapse error fields and adjust the weights (if in sequential mode). void AdjustSynapseWeights(); just adjust the synapse weights (should be called in batch mode). void UpdatePriors(). void UpdateRegulators(). void GetApproxInvHessian(TMatrixD& InvHessian, bool regulate = true). Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0). void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". MethodMLP(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructors. void Train(); { Train(NumCycles()); }. bool HasInverseHessian(); { return fCalculateErrors; }. » Author: Krzysztof Danielowski, Andreas Hoecker, Matt Ja",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodMLP.html:29234,optimiz,optimization,29234,root/html602/TMVA__MethodMLP.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodMLP.html,2,['optimiz'],['optimization']
Performance," Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgrThe cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooArgSet*_curNormSet!; Double_t_cutOffCutoff parameter for running product; RooArgSet_defNormSetDefault normalization set; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Int_t_extendedIndexIndex of extended PDF (if any) ; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAICRegistry_genCode! Registry of composite direct generator codes; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normaliz",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProdPdf.html:41913,cache,cache,41913,root/html532/RooProdPdf.html,https://root.cern,https://root.cern/root/html532/RooProdPdf.html,1,['cache'],['cache']
Performance," Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgrThe cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooArgSet*_curNormSet!; Double_t_cutOffCutoff parameter for running product; RooArgSet_defNormSetDefault normalization set; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Int_t_extendedIndexIndex of extended PDF (if any) ; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAICRegistry_genCode! Registry of composite direct generator codes; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically inte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProdPdf.html:40416,cache,cache,40416,root/html528/RooProdPdf.html,https://root.cern,https://root.cern/root/html528/RooProdPdf.html,2,['cache'],['cache']
Performance," Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Release Checklist. Steps to be followed to produce a new ROOT release are:; Prerequisites. Get the 'green' light from all main developers; Check that all the Jenkins builds / CDash builds are green; Verify that no performance regressions exist in the benchmark system; Update versions in JIRA. 'Release' the version in the project configuration; Create the next development version. root.git. Update the release notes in README/ReleaseNotes/vXXX/index.md. Edit release notes patches section; From the list the versions in JIRA, select the version and then 'release notes'; git commit README/ReleaseNotes/vXXX/index.md. Modify version number and modify all necessary files. edit build/version_number (even patch number for releases); Run from the build directory $ make version. Tag main ROOT repository. $ git tag -a vX-YY-ZZ; Run $ cmake . to update etc/gitinfo.txt. Create the source tarball. Run from the build directory $ make distsrc not on a MacOS machine; $ scp ../root_vX.YY.ZZ.source.tar.gz sftnight@root:/home/www/root/download. Update the release notes in README/ReleaseNotes/vXXX/index.md again. edit README/ReleaseNotes/vXXX/index.md; possibly copying from README/ReleaseNotes/em",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/release-checklist.html:2080,perform,performance,2080,d/release-checklist.html,https://root.cern,https://root.cern/d/release-checklist.html,1,['perform'],['performance']
Performance, Two-dimensional kernel estimation p.d.f.; RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers ; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable ; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical integration engine; RooAdaptiveIntegratorND N-d,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:25383,optimiz,optimized,25383,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,1,['optimiz'],['optimized']
Performance," Types; enum  EPrefillType { kNoPrefill; , kAllBranches; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TTreeCache ();  Default Constructor. ;  ;  TTreeCache (TTree *tree, Int_t buffersize=0);  Constructor. ;  ;  ~TTreeCache () override;  Destructor. (in general called by the TFile destructor) ;  ; Int_t AddBranch (const char *branch, bool subbranches=false) override;  Add a branch to the list of branches to be stored in the cache this is to be used by user (thats why we pass the name of the branch). ;  ; Int_t AddBranch (TBranch *b, bool subgbranches=false) override;  Add a branch to the list of branches to be stored in the cache this function is called by the user via TTree::AddBranchToCache. ;  ; virtual void Disable ();  ; virtual Int_t DropBranch (const char *branch, bool subbranches=false);  Remove a branch to the list of branches to be stored in the cache this is to be used by user (thats why we pass the name of the branch). ;  ; virtual Int_t DropBranch (TBranch *b, bool subbranches=false);  Remove a branch to the list of branches to be stored in the cache this function is called by TBranch::GetBasket. ;  ; virtual void Enable ();  ; virtual bool FillBuffer ();  Fill the cache buffer with the branches in the cache. ;  ; const TObjArray * GetCachedBranches () const;  ; EPrefillType GetConfiguredPrefillType () const;  Return the desired prefill type ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCache.html:12278,cache,cache,12278,doc/v632/classTTreeCache.html,https://root.cern,https://root.cern/doc/v632/classTTreeCache.html,2,['cache'],['cache']
Performance," Used to make the caceh information available to workers. Int_t InitDataSetManager(); Initialize the dataset manager from directives or from defaults; Return 0 on success, -1 on failure. void ShowCache(Bool_t all = kFALSE); List contents of file cache. If all is true show all caches also on; slaves. If everything is ok all caches are to be the same. void ClearCache(const char* file = 0); Remove files from all file caches. Int_t Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); Copy the specified macro in the cache directory. The macro file is; uploaded if new or updated. If existing, the corresponding header; basename(macro).h or .hh, is also uploaded. For the other arguments; see TProof::Load().; Returns 0 in case of success and -1 in case of error. Int_t CopyMacroToCache(const char* macro, Int_t headerRequired = 0, TSelector** selector = 0, Int_t opt = 0); Copy a macro, and its possible associated .h[h] file,; to the cache directory, from where the workers can get the file.; If headerRequired is 1, return -1 in case the header is not found.; If headerRequired is 0, try to copy header too.; If headerRequired is -1, don't look for header, only copy macro.; If the selector pionter is not 0, consider the macro to be a selector; and try to load the selector and set it to the pointer.; The mask 'opt' is an or of ESendFileOpt:; kCpBin (0x8) Retrieve from the cache the binaries associated; with the file; kCp (0x10) Retrieve the files from the cache; Return -1 in case of error, 0 otherwise. Int_t CleanupSandbox(); Remove old sessions dirs keep at most 'Proof.MaxOldSessions' (default 10). TList * GetListOfQueries(Option_t* opt = """"); Get the list of queries. Bool_t RegisterDataSet(const char* dsName, TFileCollection* ds, const char* opt = """"); Register the 'dataSet' on the cluster under the current; user, group and the given 'dataSetName'.; Fails if a dataset named 'dataSetName' already exists, unless 'optStr'; contains 'O', i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofLite.html:28933,cache,cache,28933,root/html528/TProofLite.html,https://root.cern,https://root.cern/root/html528/TProofLite.html,3,['cache'],['cache']
Performance," Used to make the cache information available to workers. Int_t InitDataSetManager(); Initialize the dataset manager from directives or from defaults; Return 0 on success, -1 on failure. void ShowCache(Bool_t all = kFALSE); List contents of file cache. If all is true show all caches also on; slaves. If everything is ok all caches are to be the same. void ClearCache(const char* file = 0); Remove files from all file caches. Int_t Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); Copy the specified macro in the cache directory. The macro file is; uploaded if new or updated. If existing, the corresponding header; basename(macro).h or .hh, is also uploaded. For the other arguments; see TProof::Load().; Returns 0 in case of success and -1 in case of error. Int_t CopyMacroToCache(const char* macro, Int_t headerRequired = 0, TSelector** selector = 0, Int_t opt = 0); Copy a macro, and its possible associated .h[h] file,; to the cache directory, from where the workers can get the file.; If headerRequired is 1, return -1 in case the header is not found.; If headerRequired is 0, try to copy header too.; If headerRequired is -1, don't look for header, only copy macro.; If the selector pionter is not 0, consider the macro to be a selector; and try to load the selector and set it to the pointer.; The mask 'opt' is an or of ESendFileOpt:; kCpBin (0x8) Retrieve from the cache the binaries associated; with the file; kCp (0x10) Retrieve the files from the cache; Return -1 in case of error, 0 otherwise. Int_t CleanupSandbox(); Remove old sessions dirs keep at most 'Proof.MaxOldSessions' (default 10). TList * GetListOfQueries(Option_t* opt = """"); Get the list of queries. Bool_t RegisterDataSet(const char* dsName, TFileCollection* ds, const char* opt = """"); Register the 'dataSet' on the cluster under the current; user, group and the given 'dataSetName'.; Fails if a dataset named 'dataSetName' already exists, unless 'optStr'; contains 'O', i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofLite.html:32930,cache,cache,32930,root/html602/TProofLite.html,https://root.cern,https://root.cern/root/html602/TProofLite.html,1,['cache'],['cache']
Performance," UserGroup_t structure. ; The only active fields in the UserGroup_t structure for this call are: fGid and fGroup The returned structure must be deleted by the user. In case of error 0 is returned. ; Reimplemented from TSystem.; Definition at line 2099 of file TUnixSystem.cxx. ◆ GetHomeDirectory(). std::string TUnixSystem::GetHomeDirectory ; (; const char * ; userName = nullptr); const. overridevirtual . Return the user's home directory. ; Reimplemented from TSystem.; Definition at line 1491 of file TUnixSystem.cxx. ◆ GetHostByName(). TInetAddress TUnixSystem::GetHostByName ; (; const char * ; hostname). overridevirtual . Get Internet Protocol (IP) address of host. ; Returns an TInetAddress object. To see if the hostname lookup was successfull call TInetAddress::IsValid(). ; Reimplemented from TSystem.; Definition at line 3046 of file TUnixSystem.cxx. ◆ GetLinkedLibraries(). const char * TUnixSystem::GetLinkedLibraries ; (; ). overrideprotectedvirtual . Get list of shared libraries loaded at the start of the executable. ; Returns 0 in case list cannot be obtained or in case of error. ; Reimplemented from TSystem.; Definition at line 2857 of file TUnixSystem.cxx. ◆ GetMemInfo(). int TUnixSystem::GetMemInfo ; (; MemInfo_t * ; info); const. overridevirtual . Returns ram and swap memory usage info into the MemInfo_t structure. ; Returns -1 in case of error, 0 otherwise. ; Reimplemented from TSystem.; Definition at line 5363 of file TUnixSystem.cxx. ◆ GetPathInfo(). int TUnixSystem::GetPathInfo ; (; const char * ; path, . FileStat_t & ; buf . ). overridevirtual . Get info about a file. ; Info is returned in the form of a FileStat_t structure (see TSystem.h). The function returns 0 in case of success and 1 if the file could not be stat'ed. ; Reimplemented from TSystem.; Definition at line 1658 of file TUnixSystem.cxx. ◆ GetPeerName(). TInetAddress TUnixSystem::GetPeerName ; (; int ; sock). overridevirtual . Get Internet Protocol (IP) address of remote host and port #. ; Re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnixSystem.html:52735,load,loaded,52735,doc/master/classTUnixSystem.html,https://root.cern,https://root.cern/doc/master/classTUnixSystem.html,1,['load'],['loaded']
Performance," Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void Transform (bool dir, UShort_t *indexnew);  Transform the existing fIndices. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; UShort_t fCurrent;  ! to fasten Contains() in list mode ;  ; UShort_t * fIndices;  [fN] ;  ; Int_t fLastIndexQueried;  ! to optimize GetEntry() in a loop ;  ; Int_t fLastIndexReturned;  ! to optimize GetEntry() in a loop ;  ; Int_t fN;  size of fIndices for I/O =fNPassed for list, fBlockSize for bits ;  ; Int_t fNPassed;  number of entries in the entry list (if fPassing=0 - number of entries not in the entry list ;  ; bool fPassing;  1 - stores entries that belong to the list 0 - stores entries that don't belong to the list ;  ; Int_t fType;  0 - bits, 1 - list ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TEntryListBlock.h>. Inheritance diagram for TEntryListBlock:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkBlockSize . Definition at line 61 of file TEntryListBlock.h. Constructor & Destructor Documentation. ◆ TEntryListBlock() [1/2]. TEntryListBlock::TEntryListBlock ; (; ). Default c-tor. ; Definition at line 53 of file TEntryListBlock.cxx. ◆ TEntryListBlock() [2/2]. TEntryListBlock::TEntryListBlock ; (; const TEntryListBlock & ; eblock). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEntryListBlock.html:12684,optimiz,optimize,12684,doc/master/classTEntryListBlock.html,https://root.cern,https://root.cern/doc/master/classTEntryListBlock.html,2,['optimiz'],['optimize']
Performance," We book first a Likelihood based on KDE (Kernel Density Estimation), a Fischer discriminant, a BDT; and a shallow neural network; ; */; ; ; // Likelihood (""naive Bayes estimator""); if (useLikelihood) {; factory.BookMethod(loader, TMVA::Types::kLikelihood, ""Likelihood"",; ""H:!V:TransformOutput:PDFInterpol=Spline2:NSmoothSig[0]=20:NSmoothBkg[0]=20:NSmoothBkg[1]=10:NSmooth=1:NAvEvtPerBin=50"" );; }; // Use a kernel density estimator to approximate the PDFs; if (useLikelihoodKDE) {; factory.BookMethod(loader, TMVA::Types::kLikelihood, ""LikelihoodKDE"",; ""!H:!V:!TransformOutput:PDFInterpol=KDE:KDEtype=Gauss:KDEiter=Adaptive:KDEFineFactor=0.3:KDEborder=None:NAvEvtPerBin=50"" );; ; }; ; // Fisher discriminant (same as LD); if (useFischer) {; factory.BookMethod(loader, TMVA::Types::kFisher, ""Fisher"", ""H:!V:Fisher:VarTransform=None:CreateMVAPdfs:PDFInterpolMVAPdf=Spline2:NbinsMVAPdf=50:NsmoothMVAPdf=10"" );; }; ; //Boosted Decision Trees; if (useBDT) {; factory.BookMethod(loader,TMVA::Types::kBDT, ""BDT"",; ""!V:NTrees=200:MinNodeSize=2.5%:MaxDepth=2:BoostType=AdaBoost:AdaBoostBeta=0.5:UseBaggedBoost:BaggedSampleFraction=0.5:SeparationType=GiniIndex:nCuts=20"" );; }; ; //Multi-Layer Perceptron (Neural Network); if (useMLP) {; factory.BookMethod(loader, TMVA::Types::kMLP, ""MLP"",; ""!H:!V:NeuronType=tanh:VarTransform=N:NCycles=100:HiddenLayers=N+5:TestRate=5:!UseRegulator"" );; }; ; ; /// Here we book the new DNN of TMVA if we have support in ROOT. We will use GPU version if ROOT is enabled with GPU; ; ; /***; ; ## Booking Deep Neural Network; ; Here we define the option string for building the Deep Neural network model.; ; #### 1. Define DNN layout; ; The DNN configuration is defined using a string. Note that whitespaces between characters are not allowed.; ; We define first the DNN layout:; ; - **input layout** : this defines the input data format for the DNN as ``input depth | height | width``.; In case of a dense layer as first layer the input layout should be ``1 | 1 | number of in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:62572,load,loader,62572,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,1,['load'],['loader']
Performance," [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooGaussian::sig1; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::mean; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::sigma1; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::sig1frac; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooGaussian::sig2; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::sigma2; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#0] ERROR:Minimization -- RooMinimizer::calculateHessErrors() Error when calculating Hessian; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; ; RooWorks",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf510__wsnamedsets_8C.html:10479,optimiz,optimization,10479,doc/master/rf510__wsnamedsets_8C.html,https://root.cern,https://root.cern/doc/master/rf510__wsnamedsets_8C.html,2,['optimiz'],['optimization']
Performance," [#7164] - TGSpeedo mean value calculation; [#7195] - ROOT crash when parameter by value passed to slot: StrDup; [#7240] - [RF] Batch mode returns broken logarithms when -DVDT=OFF; [#7180] - TGCommandLinePlugin Up-Down Arrows and Tab Keys; [#7181] - RDataFrame Snapshot of friend trees; [#7258] - [RF] Update crystal ball shapes in RooFit; [#7086] - [DF] Section of RDF reference guide about RDF+RVec; [#7182] - Range not considered when computing integral of RooParamHistFunc; [#7547] - [DF] Crash in lazy jitted Snapshot; [#7010] - fifo in $CWD causes TCanvas to hang on macOS; [#7676] - hadd reverses order of object cycles; [#6343] - Problem with using namespace std in generated dictionary files; [#7657] - New dictionary-related crash in 6.24.00-patches; [#7718] - PyROOT in root 6.24 branch hangs while loading CMSSW library; [#7090] - Apple M1: bug in jitting argument of type short; [#6802] - Allow to pass Bearer token authentication header to Davix client; [#7345] - Issue building built-in libafterimage; [#6812] - root REPL problem with unsigned num assigned to a not declared item; [#7292] - compilation fails on xrootd: _STAT_VER was not declared; [#7481] - String parse error in RooSimPdfBuilder.cxx; [#7433] - Segmentation fault after quitting Cling in CUDA mode; [#7239] - [RF] Use integral of PDF curves for pull plots and residuals; [#7390] - Must not forward declare template specialization with enumerator as template arg; [#7454] - [RF][Docs] Breaking changes of batch computation interface not documented in release notes; [#7558] - AfterImage compilation broken with binutils 2.36; [#7507] - [tree] Possible error in TLeaf::GetLeafCounter; [#7361] - RooFit backend library: force to specific architecture; [#7362] - Incremental build problems; [#7319] - [Hist] Wrong computation in TH3::GetCovariance for diagonal elements; [#7206] - Unable to build with builtin_cling=OFF for LLVM 9; [#7157] - RooFFTConvPdf doesn’t work with RooProdPdf; [#7076] - RNTuple, parallel unzip te",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:45121,load,loading,45121,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['load'],['loading']
Performance," \; 49 { \; 50 name *x=(name*)(arr[index]+ioffset); \; 51 b.WriteFastArray(x,compinfo[i]->fLength); \; 52 }; 53 ; 54#define WriteBasicArray(name) \; 55 { \; 56 WriteBasicArrayElem(name,0); \; 57 }; 58 ; 59#define WriteBasicArrayLoop(name) \; 60 { \; 61 for(int k=0; k<narr; ++k) WriteBasicArrayElem(name,k); \; 62 }; 63 ; 64#define WriteBasicPointerElem(name,index) \; 65 { \; 66 Int_t *l = (Int_t*)(arr[index]+imethod); \; 67 name **f = (name**)(arr[index]+ioffset); \; 68 name *af = *f; \; 69 if (af && *l) b << Char_t(1); \; 70 else {b << Char_t(0); continue;} \; 71 int j; \; 72 for(j=0;j<compinfo[i]->fLength;j++) { \; 73 b.WriteFastArray(f[j],*l); \; 74 } \; 75 }; 76 ; 77#define WriteBasicPointer(name) \; 78 { \; 79 int imethod = compinfo[i]->fMethod+eoffset; \; 80 WriteBasicPointerElem(name,0); \; 81 }; 82 ; 83#define WriteBasicPointerLoop(name) \; 84 { \; 85 int imethod = compinfo[i]->fMethod+eoffset; \; 86 for(int k=0; k<narr; ++k) { \; 87 WriteBasicPointerElem(name,k); \; 88 } \; 89 }; 90 ; 91// Helper function for TStreamerInfo::WriteBuffer; 92namespace {; 93 template <class T> Bool_t R__TestUseCache(TStreamerElement *element); 94 {; 95 return element->TestBit(TStreamerElement::kCache);; 96 }; 97 ; 98 template <> Bool_t R__TestUseCache<TVirtualArray>(TStreamerElement*); 99 {; 100 // We are already using the cache, no need to recurse one more time.; 101 return kFALSE;; 102 }; 103}; 104 ; 105////////////////////////////////////////////////////////////////////////////////; 106/// The object at pointer is serialized to the buffer b; 107/// if (arrayMode & 1) ptr is a pointer to array of pointers to the objects; 108/// otherwise it is a pointer to a pointer to a single object.; 109/// This also means that T is of a type such that arr[i] is a pointer to an; 110/// object. Currently the only anticipated instantiation are for T==char**; 111/// and T==TVirtualCollectionProxy; 112 ; 113template <class T>; 114Int_t TStreamerInfo::WriteBufferAux(TBuffer &b, const T &arr,; 115",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoWriteBuffer_8cxx_source.html:2824,cache,cache,2824,doc/master/TStreamerInfoWriteBuffer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoWriteBuffer_8cxx_source.html,1,['cache'],['cache']
Performance," \; 53 defined(R__FBSD) || defined(R__OBSD) || \; 54 defined(R__MACOSX) || defined(R__HURD); 55#define HAS_DIRENT; 56#endif; 57#ifdef HAS_DIRENT; 58# include <dirent.h>; 59#else; 60# include <sys/dir.h>; 61#endif; 62#if defined(ULTRIX) || defined(R__SUN); 63# include <sgtty.h>; 64#endif; 65#if defined(R__AIX) || defined(R__LINUX) || \; 66 defined(R__FBSD) || defined(R__OBSD) || \; 67 defined(R__LYNXOS) || defined(R__MACOSX) || defined(R__HURD); 68# include <sys/ioctl.h>; 69#endif; 70#if defined(R__AIX) || defined(R__SOLARIS); 71# include <sys/select.h>; 72#endif; 73#if defined(R__MACOSX); 74# include <mach-o/dyld.h>; 75# include <sys/mount.h>; 76 extern ""C"" int statfs(const char *file, struct statfs *buffer);; 77#elif defined(R__LINUX) || defined(R__HURD); 78# include <sys/vfs.h>; 79#elif defined(R__FBSD) || defined(R__OBSD); 80# include <sys/param.h>; 81# include <sys/mount.h>; 82# ifdef R__FBSD; 83# include <sys/user.h>; 84# include <sys/types.h>; 85# include <sys/param.h>; 86# include <sys/queue.h>; 87# include <libprocstat.h>; 88# include <libutil.h>; 89# endif; 90#else; 91# include <sys/statfs.h>; 92#endif; 93 ; 94#include <utime.h>; 95#include <syslog.h>; 96#include <sys/stat.h>; 97#include <setjmp.h>; 98#include <signal.h>; 99#include <sys/param.h>; 100#include <pwd.h>; 101#include <grp.h>; 102#include <errno.h>; 103#include <sys/resource.h>; 104#include <sys/wait.h>; 105#include <time.h>; 106#include <sys/time.h>; 107#include <sys/file.h>; 108#include <sys/socket.h>; 109#include <netinet/in.h>; 110#include <netinet/tcp.h>; 111#if defined(R__AIX); 112# define _XOPEN_EXTENDED_SOURCE; 113# include <arpa/inet.h>; 114# undef _XOPEN_EXTENDED_SOURCE; 115# if !defined(_AIX41) && !defined(_AIX43); 116 // AIX 3.2 doesn't have it; 117# define HASNOT_INETATON; 118# endif; 119#else; 120# include <arpa/inet.h>; 121#endif; 122#include <sys/un.h>; 123#include <netdb.h>; 124#include <fcntl.h>; 125#if defined(R__SOLARIS); 126# include <sys/systeminfo.h>; 127# include <sys/fili",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnixSystem_8cxx_source.html:2814,queue,queue,2814,doc/master/TUnixSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TUnixSystem_8cxx_source.html,1,['queue'],['queue']
Performance," \cond HIDDEN_SYMBOLS */ \; 461 static Short_t _R__UNIQUE_(R__dummyStreamer) = \; 462 GenerateInitInstance((name*)0x0)->SetStreamer(STREAMER); \; 463 /** \endcond */ \; 464 R__UseDummy(_R__UNIQUE_(R__dummyStreamer)); \; 465}; 466 ; 467//---- Macro to load a library into the interpreter --------------; 468// Call as R__LOAD_LIBRARY(libEvent); 469// This macro intentionally does not take string as argument, to; 470// prevent compilation errors with complex diagnostics due to; 471// TString BAD_DO_NOT_TRY = ""lib"";; 472// R__LOAD_LIBRARY(BAD_DO_NOT_TRY + ""BAD_DO_NOT_TRY.so"") // ERROR!; 473#ifdef __CLING__; 474# define _R_PragmaStr(x) _Pragma(#x); 475# define R__LOAD_LIBRARY(LIBRARY) _R_PragmaStr(cling load ( #LIBRARY )); 476# define R__ADD_INCLUDE_PATH(PATH) _R_PragmaStr(cling add_include_path ( #PATH )); 477# define R__ADD_LIBRARY_PATH(PATH) _R_PragmaStr(cling add_library_path ( #PATH )); 478#elif defined(R__WIN32); 479# define _R_PragmaStr(x) __pragma(#x); 480# define R__LOAD_LIBRARY(LIBRARY) _R_PragmaStr(comment(lib, #LIBRARY)); 481# define R__ADD_INCLUDE_PATH(PATH) _R_PragmaStr(comment(path, #PATH)); 482# define R__ADD_LIBRARY_PATH(PATH) _R_PragmaStr(comment(path, #PATH)); 483#else; 484// No way to inform linker though preprocessor :-(; 485// We could even inform the user:; 486/*; 487# define R__LOAD_LIBRARY(LIBRARY) \; 488 _R_PragmaStr(message ""Compiler cannot handle linking against "" #LIBRARY \; 489 "". Use -L and -l instead.""); 490*/; 491# define R__LOAD_LIBRARY(LIBRARY); 492# define R__ADD_INCLUDE_PATH(PATH); 493# define R__ADD_LIBRARY_PATH(PATH); 494#endif; 495 ; 496// Convenience macros to disable cling pointer check.; 497#ifdef __CLING__; 498# define R__CLING_PTRCHECK(ONOFF) __attribute__((annotate(""__cling__ptrcheck("" #ONOFF "")""))); 499#else; 500# define R__CLING_PTRCHECK(ONOFF); 501#endif; 502 ; 503#endif; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; RtypesCore.h; Bool_tbool Bool_tDefinition RtypesCore.h:63; Int_tint Int_tDefin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/Rtypes_8h_source.html:20258,load,load,20258,doc/v632/Rtypes_8h_source.html,https://root.cern,https://root.cern/doc/v632/Rtypes_8h_source.html,1,['load'],['load']
Performance," \cond HIDDEN_SYMBOLS */ \; 466 static Short_t _R__UNIQUE_(R__dummyStreamer) = \; 467 GenerateInitInstance((name*)0x0)->SetStreamer(STREAMER); \; 468 /** \endcond */ \; 469 R__UseDummy(_R__UNIQUE_(R__dummyStreamer)); \; 470}; 471 ; 472//---- Macro to load a library into the interpreter --------------; 473// Call as R__LOAD_LIBRARY(libEvent); 474// This macro intentionally does not take string as argument, to; 475// prevent compilation errors with complex diagnostics due to; 476// TString BAD_DO_NOT_TRY = ""lib"";; 477// R__LOAD_LIBRARY(BAD_DO_NOT_TRY + ""BAD_DO_NOT_TRY.so"") // ERROR!; 478#ifdef __CLING__; 479# define _R_PragmaStr(x) _Pragma(#x); 480# define R__LOAD_LIBRARY(LIBRARY) _R_PragmaStr(cling load ( #LIBRARY )); 481# define R__ADD_INCLUDE_PATH(PATH) _R_PragmaStr(cling add_include_path ( #PATH )); 482# define R__ADD_LIBRARY_PATH(PATH) _R_PragmaStr(cling add_library_path ( #PATH )); 483#elif defined(R__WIN32); 484# define _R_PragmaStr(x) __pragma(#x); 485# define R__LOAD_LIBRARY(LIBRARY) _R_PragmaStr(comment(lib, #LIBRARY)); 486# define R__ADD_INCLUDE_PATH(PATH) _R_PragmaStr(comment(path, #PATH)); 487# define R__ADD_LIBRARY_PATH(PATH) _R_PragmaStr(comment(path, #PATH)); 488#else; 489// No way to inform linker though preprocessor :-(; 490// We could even inform the user:; 491/*; 492# define R__LOAD_LIBRARY(LIBRARY) \; 493 _R_PragmaStr(message ""Compiler cannot handle linking against "" #LIBRARY \; 494 "". Use -L and -l instead.""); 495*/; 496# define R__LOAD_LIBRARY(LIBRARY); 497# define R__ADD_INCLUDE_PATH(PATH); 498# define R__ADD_LIBRARY_PATH(PATH); 499#endif; 500 ; 501// Convenience macros to disable cling pointer check.; 502#ifdef __CLING__; 503# define R__CLING_PTRCHECK(ONOFF) __attribute__((annotate(""__cling__ptrcheck("" #ONOFF "")""))); 504#else; 505# define R__CLING_PTRCHECK(ONOFF); 506#endif; 507 ; 508#endif; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; RtypesCore.h; Bool_tbool Bool_tDefinition RtypesCore.h:63; Int_tint Int_tDefin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Rtypes_8h_source.html:20679,load,load,20679,doc/master/Rtypes_8h_source.html,https://root.cern,https://root.cern/doc/master/Rtypes_8h_source.html,1,['load'],['load']
Performance," _Force_ will start the additional thread even if there is only one core.; the default will be taken as kEnable.; returns 0 if there was an error, 1 otherwise. Int_t StartThreadUnzip(Int_t nthreads); The Thread is only a part of the TTreeCache but it is the part that; waits for info in the queue and process it... unfortunatly, a Thread is; not an object an we have to deal with it in the old C-Style way; Returns 0 if the thread was initialized or 1 if it was already running. Int_t StopThreadUnzip(); To stop the thread we only need to change the value of the variable; fActiveThread to false and the loop will stop (of course, we will have); to do the cleaning after that.; Note: The syncronization part is important here or we will try to delete; teh object while it's still processing the queue. void* UnzipLoop(void* arg); This is a static function.; This is the call that will be executed in the Thread generated by; StartThreadTreeCacheUnzip... what we want to do is to inflate the next; series of buffers leaving them in the second cache.; Returns 0 when it finishes. Int_t GetRecordHeader(char* buf, Int_t maxbytes, Int_t& nbytes, Int_t& objlen, Int_t& keylen); Read the logical record header from the buffer buf.; That must be the pointer tho the header part not the object by itself and; must contain data of at least maxbytes; Returns nread;; In output arguments:; nbytes : number of bytes in record; if negative, this is a deleted record; if 0, cannot read record, wrong value of argument first; objlen : uncompressed object size; keylen : length of logical record header; Note that the arguments objlen and keylen are returned only; if maxbytes >=16; Note: This was adapted from TFile... so some things dont apply. void ResetCache(); This will delete the list of buffers that are in the unzipping cache; and will reset certain values in the cache.; This name is ambiguos because the method doesn't reset the whole cache,; only the part related to the unzipping; Note: This method is co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeCacheUnzip.html:15316,cache,cache,15316,root/html528/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html528/TTreeCacheUnzip.html,6,['cache'],['cache']
Performance," _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_tRooAbsCachedReal::_ipOrderInterpolation order for cache histograms ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; TListRooAbsArg::_proxyListlist of proxies; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Bool_t_useCdfBoundariesAre c.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCachedReal.html:33033,cache,cache,33033,root/html526/RooCachedReal.html,https://root.cern,https://root.cern/root/html526/RooCachedReal.html,2,['cache'],['cache']
Performance," _norm->getVal() << endl ;; 425 ; 426 double ret = _norm->getVal() ;; 427 if (ret==0.) {; 428 if(++_errorCount <= 10) {; 429 coutW(Eval) << ""RooAbsPdf::getNorm("" << GetName() << "":: WARNING normalization is zero, nset = "" ; nset->Print(""1"") ;; 430 if(_errorCount == 10) coutW(Eval) << ""RooAbsPdf::getNorm("" << GetName() << "") INFO: no more messages will be printed "" << endl ;; 431 }; 432 }; 433 ; 434 return ret ;; 435}; 436 ; 437 ; 438 ; 439////////////////////////////////////////////////////////////////////////////////; 440/// Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range; 441/// rangeName, optionally taking the integrand normalized over observables nset; 442 ; 443const RooAbsReal* RooAbsPdf::getNormObj(const RooArgSet* nset, const RooArgSet* iset, const TNamed* rangeName) const; 444{; 445 // Check normalization is already stored; 446 CacheElem* cache = static_cast<CacheElem*>(_normMgr.getObj(nset,iset,nullptr,rangeName)) ;; 447 if (cache) {; 448 return cache->_norm.get();; 449 }; 450 ; 451 // If not create it now; 452 RooArgSet depList;; 453 getObservables(iset, depList);; 454 ; 455 // Normalization is always over all pdf components. Overriding the global; 456 // component selection temporarily makes all RooRealIntegrals created during; 457 // that time always include all components.; 458 GlobalSelectComponentRAII globalSelComp(true);; 459 RooAbsReal* norm = std::unique_ptr<RooAbsReal>{createIntegral(depList,*nset, *getIntegratorConfig(), RooNameReg::str(rangeName))}.release();; 460 ; 461 // Store it in the cache; 462 _normMgr.setObj(nset,iset,new CacheElem(*norm),rangeName) ;; 463 ; 464 // And return the newly created integral; 465 return norm ;; 466}; 467 ; 468 ; 469 ; 470////////////////////////////////////////////////////////////////////////////////; 471/// Verify that the normalization integral cached with this PDF; 472/// is valid for given set of normalization observables.; 473///; 474/// If not, th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:16844,cache,cache,16844,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,2,['cache'],['cache']
Performance," _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooListProxyx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooUniform.html:44040,cache,cache,44040,root/html602/RooUniform.html,https://root.cern,https://root.cern/root/html602/RooUniform.html,2,['cache'],['cache']
Performance," _x, . const char * ; bname = ""cache"" . ). Construct running integral of function '_func' over x_print from the lower bound on _x to the present value of _x using a numeric sampling technique. ; The sampling frequency is controlled by the binning named 'bname' and a default second order interpolation is applied to smooth the histogram-based c.d.f. ; Definition at line 51 of file RooNumRunningInt.cxx. ◆ RooNumRunningInt() [2/2]. RooNumRunningInt::RooNumRunningInt ; (; const RooNumRunningInt & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 66 of file RooNumRunningInt.cxx. ◆ ~RooNumRunningInt(). RooNumRunningInt::~RooNumRunningInt ; (; ). override . Destructor. ; Definition at line 79 of file RooNumRunningInt.cxx. Member Function Documentation. ◆ actualObservables(). RooFit::OwningPtr< RooArgSet > RooNumRunningInt::actualObservables ; (; const RooArgSet & ; nset); const. overrideprotectedvirtual . Return observable in nset to be cached by RooAbsCachedPdf this is always the x observable that is integrated. ; Implements RooAbsCachedReal.; Definition at line 260 of file RooNumRunningInt.cxx. ◆ actualParameters(). RooFit::OwningPtr< RooArgSet > RooNumRunningInt::actualParameters ; (; const RooArgSet & ; nset); const. overrideprotectedvirtual . Return the parameters of the cache created by RooAbsCachedPdf. ; These are always the input functions parameter, but never the integrated variable x. ; Implements RooAbsCachedReal.; Definition at line 274 of file RooNumRunningInt.cxx. ◆ binningName(). const char * RooNumRunningInt::binningName ; (; ); const. inlineoverrideprotectedvirtual . Reimplemented from RooAbsCachedReal.; Definition at line 47 of file RooNumRunningInt.h. ◆ Class(). static TClass * RooNumRunningInt::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooNumRunningInt::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooNumRunnin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumRunningInt.html:64288,cache,cached,64288,doc/master/classRooNumRunningInt.html,https://root.cern,https://root.cern/doc/master/classRooNumRunningInt.html,1,['cache'],['cached']
Performance," `TResultProxy` (they are executed one after the other in the; // same order as they were registered). We now request that the partial result is drawn and the TBrowser's TPad is; // updated every 50 events.; h.OnPartialResult(50, [&browserPad](TH1D &hist) {; if (!browserPad); return; // in case root -b was invoked; browserPad->cd();; hist.Draw();; browserPad->Update();; // This call tells ROOT to process all pending GUI events; // It allows users to use the TBrowser as usual while the event-loop is running; gSystem->ProcessEvents();; });; ; // Finally, we would like to print a progress bar on the terminal to show how the event-loop is progressing.; // To take into account _all_ events we use `OnPartialResultSlot`: when Implicit Multi-Threading is enabled, in fact,; // `OnPartialResult` invokes the callback only in one of the worker threads, and always returns that worker threads'; // partial result. This is useful because it means we don't have to worry about concurrent execution and; // thread-safety of the callbacks if we are happy with just one threads' partial result.; // `OnPartialResultSlot`, on the other hand, invokes the callback in each one of the worker threads, every time a; // thread finishes processing a batch of `everyN` events. This is what we want for the progress bar, but we need to; // take care that two threads will not print to terminal at the same time: we need a std::mutex for synchronization.; std::string progressBar;; std::mutex barMutex; // Only one thread at a time can lock a mutex. Let's use this to avoid concurrent printing.; // Magic numbers that yield good progress bars for nSlots = 1,2,4,8; const auto everyN = nSlots == 8 ? 1000 : 100ull * nSlots;; const auto barWidth = nEvents / everyN;; h.OnPartialResultSlot(everyN, [&barWidth, &progressBar, &barMutex](unsigned int /*slot*/, TH1D & /*partialHist*/) {; std::lock_guard<std::mutex> l(barMutex); // lock_guard locks the mutex at construction, releases it at destruction; progressBar.push_b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df013__InspectAnalysis_8C.html:4537,concurren,concurrent,4537,doc/master/df013__InspectAnalysis_8C.html,https://root.cern,https://root.cern/doc/master/df013__InspectAnalysis_8C.html,1,['concurren'],['concurrent']
Performance," a buffer that has already been unzipped Returns -1 in case of read failure, 0 in case it's not in the cache and n>0 in case read from cache (number of bytes copied). ;  ; Int_t GetUnzipGroupSize ();  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print cache statistics. ;  ; Int_t ReadBufferExt (char *buf, Long64_t pos, Int_t len, Int_t &loc) override;  ; void ResetCache () override;  This will delete the list of buffers that are in the unzipping cache and will reset certain values in the cache. ;  ; Int_t SetBufferSize (Long64_t buffersize) override;  Change the underlying buffer size of the cache. ;  ; void SetEntryRange (Long64_t emin, Long64_t emax) override;  Set the minimum and maximum entry number to be processed this information helps to optimize the number of baskets to read when prefetching the branch buffers. ;  ; void SetUnzipBufferSize (Long64_t bufferSize);  Sets the size for the unzipping cache... by default it should be two times the size of the prefetching cache. ;  ; void SetUnzipGroupSize (Int_t groupSize);  ; void StopLearningPhase () override;  It's the same as TTreeCache::StopLearningPhase but we guarantee that we start the unzipping just after getting the buffers. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t UnzipBuffer (char **dest, char *src);  Unzips a ROOT specific buffer... by reading the header at the beginning. ;  ; Int_t UnzipCache (Int_t index);  This inflates a basket in the cache. ;  ; void UpdateBranches (TTree *tree) override;  update pointer to current Tree and recompute pointers to the branches in the cache ;  ;  Public Member Functions inherited from TTreeCache;  TTreeCache ();  Default Constructor. ;  ;  TTreeCache (TTree *tree, Int_t buffersize=0);  Constructor. ;  ;  ~TTreeCache () override;  Destructor. (in general called by the TFile destructor) ;  ; virtual void Disable ();  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCacheUnzip.html:3615,cache,cache,3615,doc/master/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/master/classTTreeCacheUnzip.html,1,['cache'],['cache']
Performance," a collection of RooAbsArg pointers in a doubly linked list...Definition RooLinkedList.h:44; RooLinkedList::Addvirtual void Add(TObject *arg)Definition RooLinkedList.h:73; RooLinkedList::FindObjectTObject * FindObject(const char *name) const overrideReturn pointer to object with given name.Definition RooLinkedList.cxx:534; RooNameReg::strstatic const char * str(const TNamed *ptr)Return C++ string corresponding to given TNamed pointer.Definition RooNameReg.h:39; RooNumGenConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumGenConfig.h:25; RooNumGenConfig::defaultConfigstatic RooNumGenConfig & defaultConfig()Return reference to instance of default numeric integrator configuration object.Definition RooNumGenConfig.cxx:44; RooObjCacheManagerImplementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elem...Definition RooObjCacheManager.h:29; RooObjCacheManager::sterilizevoid sterilize() overrideClear the cache payload but retain slot mapping w.r.t to normalization and integration sets.Definition RooObjCacheManager.cxx:152; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::addObjectvoid addObject(TObject *obj, Option_t *drawOptions="""", bool invisible=false)Add a generic object to this plot.Definition RooPlot.cxx:366; RooPlot::getFitRangeNEvtdouble getFitRangeNEvt() constReturn the number of events in the fit range.Definition RooPlot.h:145; RooPlot::getNormVarsconst RooArgSet * getNormVars() constDefinition RooPlot.h:152; RooPlot::getPlotVarRooAbsRealLValue * getPlotVar() constDefinition RooPlot.h:143; RooPlot::updateNormVarsvoid updateNormVars(const RooArgSet &vars)Install the given set of observables are reference normalization variables for this frame.Definition RooPlot.cxx:351; RooPlot::getFitRangeBinWdouble getFitRangeBinW() constReturn the bin width that is being used to normalise the PDF.Definition RooPlot.h:1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:166107,cache,cache,166107,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['cache'],['cache']
Performance," a data member on an object stored in a TTree. ; TTreeFormula now relies on a variety of TFormLeafInfo classes to handle the reading of the information. Here is the list of theses classes:; TFormLeafInfo; TFormLeafInfoDirect; TFormLeafInfoNumerical; TFormLeafInfoClones; TFormLeafInfoCollection; TFormLeafInfoPointer; TFormLeafInfoMethod; TFormLeafInfoMultiVarDim; TFormLeafInfoMultiVarDimDirect; TFormLeafInfoCast. The following method are available from the TFormLeafInfo interface:. AddOffset(Int_t offset, TStreamerElement* element); GetCounterValue(TLeaf* leaf) : return the size of the array pointed to.; GetObjectAddress(TLeafElement* leaf) : Returns the location of the object pointed to.; GetMultiplicity() : Returns info on the variability of the number of elements; GetNdata(TLeaf* leaf) : Returns the number of elements; GetNdata() : Used by GetNdata(TLeaf* leaf); GetValue(TLeaf *leaf, Int_t instance = 0) : Return the value; GetValuePointer(TLeaf *leaf, Int_t instance = 0) : Returns the address of the value; GetLocalValuePointer(TLeaf *leaf, Int_t instance = 0) : Returns the address of the value of 'this' LeafInfo; IsString(); ReadValue(char *where, Int_t instance = 0) : Internal function to interpret the location 'where'; Update() : react to the possible loading of a shared library. . Definition at line 47 of file TFormLeafInfo.h. Classes; struct  GetValueHelper;  ; struct  GetValueHelper< Long64_t >;  ; struct  GetValueHelper< LongDouble_t >;  ; struct  GetValueHelper< ULong64_t >;  ; struct  ReadValueHelper;  ; struct  ReadValueHelper< Long64_t >;  ; struct  ReadValueHelper< LongDouble_t >;  ; struct  ReadValueHelper< ULong64_t >;  . Public Member Functions;  TFormLeafInfo (const TFormLeafInfo &orig);  Constructor. ;  ;  TFormLeafInfo (TClass *classptr=nullptr, Longptr_t offset=0, TStreamerElement *element=nullptr);  Constructor. ;  ;  ~TFormLeafInfo () override;  Delete this object and all its content. ;  ; virtual void AddOffset (Int_t offset, TStreamerElement ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFormLeafInfo.html:1612,load,loading,1612,doc/master/classTFormLeafInfo.html,https://root.cern,https://root.cern/doc/master/classTFormLeafInfo.html,1,['load'],['loading']
Performance," a dot ('.') at the end of the Branch creation; and use the corresponding regular expression. I.e If your Tree has been created in split mode with a parent branch ""parent.""; (note the trailing dot).; T.SetBranchStatus(""parent"",1);; will not activate the sub-branches of ""parent"". You should do:; T.SetBranchStatus(""parent*"",1);. Without the trailing dot in the branch creation you have no choice but to; call SetBranchStatus explicitly for each of the sub branches. An alternative to this function is to read directly and only; the interesting branches. Example:; TBranch *brc = T.GetBranch(""c"");; TBranch *bre = T.GetBranch(""e"");; brc->GetEntry(i);; bre->GetEntry(i);. If found is not 0, the number of branch(es) found matching the regular; expression is returned in *found AND the error message 'unknown branch'; is suppressed. void SetBranchStyle(Int_t style = 1); Set the current branch style. (static function). style = 0 old Branch; style = 1 new Bronch. void SetCacheSize(Long64_t cachesize = -1); Set maximum size of the file cache .; if cachesize = 0 the existing cache (if any) is deleted.; if cachesize = -1 (default) it is set to the AutoFlush value when writing; the Tree (default is 30 MBytes).; WARNING: Currently only ONE TTree object can be 'cached' per TFile object.; This call disable the cache for the other TTree objects read from the same; TFile object as this TTree (The SetCacheSize called __last__ wins).; To cache multiple TTree objects in the same ROOT file, you must create; one TFile object per TTree object. void SetCacheEntryRange(Long64_t first, Long64_t last); interface to TTreeCache to set the cache entry range. void SetCacheLearnEntries(Int_t n = 10); interface to TTreeCache to set the number of entries for the learning phase. void SetCircular(Long64_t maxEntries); Enable/Disable circularity for this tree. if maxEntries > 0 a maximum of maxEntries is kept in one buffer/basket; per branch in memory.; Note that when this function is called (maxEntries>0) the T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:119634,cache,cachesize,119634,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,4,['cache'],"['cache', 'cachesize']"
Performance," a file was not specified, try to load the class via the interpreter;; 168 // this returns 0 (== failure) in the case the class is already in memory; 169 // but does not have a dictionary, so we just raise a flag for better; 170 // diagnostic in the case the class is not found in the CINT ClassInfo table.; 171 bool autoloaderr = false;; 172 if (!fromFile && gCling->AutoLoad(localname) != 1); 173 autoloaderr = true;; 174 ; 175 TClass *selCl = TClass::GetClass(localname);; 176 if (selCl) {; 177 // We have all we need.; 178 auto offset = selCl->GetBaseClassOffset(TSelector::Class());; 179 if (offset == -1) {; 180 // TSelector is not a based class.; 181 if (fromFile); 182 ::Error(""TSelector::GetSelector"",; 183 ""The class %s in file %s does not derive from TSelector."", localname.Data(), filename);; 184 else if (autoloaderr); 185 ::Error(""TSelector::GetSelector"", ""class %s could not be loaded"", filename);; 186 else; 187 ::Error(""TSelector::GetSelector"",; 188 ""class %s does not exist or does not derive from TSelector"", filename);; 189 return nullptr;; 190 }; 191 char *result = (char*)selCl->New();; 192 // By adding offset, we support the case where TSelector is not the; 193 // ""left-most"" base class (i.e. offset != 0); 194 return (TSelector*)(result+offset);; 195 ; 196 } else {; 197 ClassInfo_t *cl = gCling->ClassInfo_Factory(localname);; 198 bool ok = false;; 199 bool nameFound = false;; 200 if (cl && gCling->ClassInfo_IsValid(cl)) {; 201 if (localname == gCling->ClassInfo_FullName(cl)) {; 202 nameFound = true;; 203 if (gCling->ClassInfo_IsBase(cl,""TSelector"")) ok = true;; 204 }; 205 }; 206 if (!ok) {; 207 if (fromFile) {; 208 if (nameFound) {; 209 ::Error(""TSelector::GetSelector"",; 210 ""The class %s in file %s does not derive from TSelector."", localname.Data(), filename);; 211 } else {; 212 ::Error(""TSelector::GetSelector"",; 213 ""The file %s does not define a class named %s."", filename, localname.Data());; 214 }; 215 } else {; 216 if (autoloaderr); 217 ::Error(""TSelector",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSelector_8cxx_source.html:7784,load,loaded,7784,doc/master/TSelector_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSelector_8cxx_source.html,1,['load'],['loaded']
Performance," a filer 3x3 and padding=1 and stride=1 so we get the output dimension of the; # conv layer equal to the input; ; # - note we use after the first convolutional layer a batch normalization layer. This seems to help significantly the; # convergence; ; # - For the MaxPool layer:; # - MAXPOOL | pool height | pool width | stride height | stride width; ; # The RESHAPE layer is needed to flatten the output before the Dense layer; ; # Note that to run the CNN is required to have CPU or GPU support; ; ; if useTMVACNN:; # Training strategies.; trainingString1 = ROOT.TString(; ""LearningRate=1e-3,Momentum=0.9,Repetitions=1,""; ""ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,""; ""WeightDecay=1e-4,Regularization=None,""; ""Optimizer=ADAM,DropConfig=0.0+0.0+0.0+0.0""; ); trainingString1 += "",MaxEpochs="" + str(max_epochs); ; ## New DL (CNN); cnnMethodName = ""TMVA_CNN_CPU""; cnnOptions = ""CPU""; # use GPU if available; if hasGPU:; cnnOptions = ""GPU""; cnnMethodName = ""TMVA_CNN_GPU""; ; factory.BookMethod(; loader,; TMVA.Types.kDL,; cnnMethodName,; H=False,; V=True,; ErrorStrategy=""CROSSENTROPY"",; VarTransform=None,; WeightInitialization=""XAVIER"",; InputLayout=""1|16|16"",; Layout=""CONV|10|3|3|1|1|1|1|RELU,BNORM,CONV|10|3|3|1|1|1|1|RELU,MAXPOOL|2|2|1|1,RESHAPE|FLAT,DENSE|100|RELU,DENSE|1|LINEAR"",; TrainingStrategy=trainingString1,; Architecture=cnnOptions,; ); ; ; ### Book Convolutional Neural Network in Keras using a generated model; ; ; if usePyTorchCNN:; ROOT.Info(""TMVA_CNN_Classification"", ""Using Convolutional PyTorch Model""); pyTorchFileName = str(ROOT.gROOT.GetTutorialDir()); pyTorchFileName += ""/tmva/PyTorch_Generate_CNN_Model.py""; # check that pytorch can be imported and file defining the model exists; torch_spec = importlib.util.find_spec(""torch""); if torch_spec is not None and os.path.exists(pyTorchFileName):; #cmd = str(ROOT.TMVA.Python_Executable()) + "" "" + pyTorchFileName; #os.system(cmd); #import PyTorch_Generate_CNN_Model; ROOT.Info(""TMVA_CNN_Classification"", ""Booking PyTorch ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8py.html:12507,load,loader,12507,doc/master/TMVA__CNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8py.html,1,['load'],['loader']
Performance," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChi2Var.html:38330,optimiz,optimizeCacheMode,38330,doc/master/classRooChi2Var.html,https://root.cern,https://root.cern/doc/master/classRooChi2Var.html,6,"['cache', 'optimiz']","['cache', 'optimization', 'optimizeCacheMode']"
Performance," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAddPdf.html:48082,optimiz,optimizeCacheMode,48082,doc/v632/classRooAddPdf.html,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html,27,"['cache', 'optimiz']","['cache', 'optimization', 'optimizeCacheMode']"
Performance," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBMixDecay.html:48131,optimiz,optimizeCacheMode,48131,doc/master/classRooBMixDecay.html,https://root.cern,https://root.cern/doc/master/classRooBMixDecay.html,21,"['cache', 'optimiz']","['cache', 'optimization', 'optimizeCacheMode']"
Performance," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAnd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBreitWigner.html:43445,optimiz,optimizeCacheMode,43445,doc/master/classRooBreitWigner.html,https://root.cern,https://root.cern/doc/master/classRooBreitWigner.html,405,"['cache', 'optimiz']","['cache', 'optimization', 'optimizeCacheMode']"
Performance," a name; return -1 if variable is not found. int PrintLevel() const; minimizer configuration parameters ; set print level. { return fOptions.PrintLevel(); }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fOptions.MaxFunctionCalls(); }. unsigned int MaxIterations() const; max iterations. { return fOptions.MaxIterations(); }. double Tolerance() const; absolute tolerance. { return fOptions.Tolerance(); }. double Precision() const; precision of minimizer in the evaluation of the objective function; ( a value <=0 corresponds to the let the minimizer choose its default one). { return fOptions.Precision(); }. int Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fOptions.ErrorDef(); }. bool IsValidError() const; return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit). { return fValidError; }. void SetPrintLevel(int level); set print level. { fOptions.SetPrintLevel(level); }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { if (maxfcn > 0) fOptions.SetMaxFunctionCalls(maxfcn); }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { if (maxiter > 0) fOptions.SetMaxIterations(maxiter); }. void SetTolerance(double tol); set the tolerance. { fOptions.SetTolerance(tol); }. void SetPrecision(double prec); set in the minimizer the objective function evaluation precision; ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. default case). { fOptions.SetPrecision(prec); }. void SetStrategy(int strategyLevel); set the strategy. { fOptions.SetStrategy(strategyLevel); }. void SetErrorDef(double up); set scale for calculating the errors. { fOptions.SetErrorDef(up); }",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__Minimizer.html:12827,perform,performed,12827,root/html534/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__Minimizer.html,3,['perform'],['performed']
Performance," a new canvas window in the current ROOT session.; Open…: popup a dialog to open a file.; Close Canvas: close the canvas window.; Save: save the drawing of the current canvas in a format selectable from the submenu. The current canvas name is used as a file name for various formats such as PostScript, GIF, JPEG, C macro file, root file.; Save As…: popup a dialog for saving the current canvas drawing in a new filename.; Print: popup a dialog to print the current canvas drawing; Quit ROOT: exit the ROOT session. 2.3.1.2 Edit Menu; There is only one active menu entry in the Edit menu. The others menu entries will be implemented and will become active in the near future. Clear: delete all objects in the canvas or in the selected pad according to the selected entry in the submenu. 2.3.1.3 View Menu. Editor: toggles the view of the editor. If it is selected activates and shows up the editor on the left side of the canvas window. According to the selected object, the editor loads the corresponding user interface for easy change of the object’s attributes.; Toolbar: toggles the view of the toolbar. If it is selected activates and shows up the toolbar. It contains buttons for easy and fast access to most frequently used commands and for graphics primitive drawing. Tool tips are provided for helping users.; Status Bar: toggles the view of the status bar. If it is selected, the status bar below the canvas window shows up. There the identification of the objects is displayed when moving the mouse (such as the object’s name, the object’s type, its coordinates, etc.).; Colors: creates a new canvas showing the color palette.; Markers: creates a new canvas showing the various marker styles.; Iconify: create the canvas window icon, does not close the canvas; View With…: If the last selected pad contains a 3-d structure, a new canvas is created with a 3-D picture according to the selection made from the cascaded menu: X3D or OpenGL. The 3-D image can be interactively rotated, zoomed ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:38262,load,loads,38262,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['load'],['loads']
Performance," a pseudorapidity smaller or equal to 2 and with a transverse momentum greater than 10 GeV. Such a selection would require, among the other things, the management of an explicit loop, for example: std::vector<float> goodMuons_pt;; const auto size = mu_charge.size();; for (size_t i=0; i < size; ++i) {; if (mu_pt[i] > 10 && abs(mu_eta[i]) <= 2. && mu_charge[i] == -1) {; goodMuons_pt.emplace_back(mu_pt[i]);; }; }; ROOT::Internal::VecOps::SmallVectorTemplateCommon::sizesize_t size() constDefinition RVec.hxx:174; ROOT::VecOps::absRVec< PromoteType< T > > abs(const RVec< T > &v)Definition RVec.hxx:1832; These operations become straightforward with RVec - we just need to write what we mean: auto goodMuons_pt = mu_pt[ (mu_pt > 10.f && abs(mu_eta) <= 2.f && mu_charge == -1) ]; Now the clean collection of transverse momenta can be used within the rest of the data analysis, for example to fill a histogram. Arithmetic operations, logical operations and mathematical functions; Arithmetic operations on RVec instances can be performed: for example, they can be added, subtracted, multiplied. RVec<double> v1 {1.,2.,3.,4.};; RVec<float> v2 {5.f,6.f,7.f,8.f};; auto v3 = v1+v2;; auto v4 = 3 * v1;; ROOT::VecOps::RVecA ""std::vector""-like collection of values implementing handy operation to analyse them.Definition RVec.hxx:1529; v2@ v2Definition rootcling_impl.cxx:3690; v4@ v4Definition rootcling_impl.cxx:3692; v3@ v3Definition rootcling_impl.cxx:3691; v1@ v1Definition rootcling_impl.cxx:3689; The supported operators are; +, -, *, /; +=, -=, *=, /=; <, >, ==, !=, <=, >=, &&, ||; ~, !; &, |, ^; &=, |=, ^=; <<=, >>=. The most common mathematical functions are supported. It is possible to invoke them passing RVecs as arguments.; abs, fdim, fmod, remainder; floor, ceil, trunc, round, lround, llround; exp, exp2, expm1; log, log10, log2, log1p; pow; sqrt, cbrt; sin, cos, tan, asin, acos, atan, atan2, hypot; sinh, cosh, tanh, asinh, acosh; erf, erfc; lgamma, tgamma. If the VDT library is availab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:3368,perform,performed,3368,doc/v632/classROOT_1_1VecOps_1_1RVec.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html,1,['perform'],['performed']
Performance," a pseudorapidity smaller or equal to 2 and with a transverse momentum greater than 10 GeV. Such a selection would require, among the other things, the management of an explicit loop, for example: std::vector<float> goodMuons_pt;; const auto size = mu_charge.size();; for (size_t i=0; i < size; ++i) {; if (mu_pt[i] > 10 && abs(mu_eta[i]) <= 2. && mu_charge[i] == -1) {; goodMuons_pt.emplace_back(mu_pt[i]);; }; }; ROOT::Internal::VecOps::SmallVectorTemplateCommon::sizesize_t size() constDefinition RVec.hxx:174; ROOT::VecOps::absRVec< PromoteType< T > > abs(const RVec< T > &v)Definition RVec.hxx:1832; These operations become straightforward with RVec - we just need to write what we mean: auto goodMuons_pt = mu_pt[ (mu_pt > 10.f && abs(mu_eta) <= 2.f && mu_charge == -1) ]; Now the clean collection of transverse momenta can be used within the rest of the data analysis, for example to fill a histogram. Arithmetic operations, logical operations and mathematical functions; Arithmetic operations on RVec instances can be performed: for example, they can be added, subtracted, multiplied. RVec<double> v1 {1.,2.,3.,4.};; RVec<float> v2 {5.f,6.f,7.f,8.f};; auto v3 = v1+v2;; auto v4 = 3 * v1;; ROOT::VecOps::RVecA ""std::vector""-like collection of values implementing handy operation to analyse them.Definition RVec.hxx:1529; v2@ v2Definition rootcling_impl.cxx:3702; v4@ v4Definition rootcling_impl.cxx:3704; v3@ v3Definition rootcling_impl.cxx:3703; v1@ v1Definition rootcling_impl.cxx:3701; The supported operators are; +, -, *, /; +=, -=, *=, /=; <, >, ==, !=, <=, >=, &&, ||; ~, !; &, |, ^; &=, |=, ^=; <<=, >>=. The most common mathematical functions are supported. It is possible to invoke them passing RVecs as arguments.; abs, fdim, fmod, remainder; floor, ceil, trunc, round, lround, llround; exp, exp2, expm1; log, log10, log2, log1p; pow; sqrt, cbrt; sin, cos, tan, asin, acos, atan, atan2, hypot; sinh, cosh, tanh, asinh, acosh; erf, erfc; lgamma, tgamma. If the VDT library is availab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVec.html:3369,perform,performed,3369,doc/master/classROOT_1_1VecOps_1_1RVec.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVec.html,1,['perform'],['performed']
Performance," able to see a canvas with two pads on it. Both pads keep histograms updated and filled by three different threads. With the CalcPi example, you should be able to see two threads calculating Pi with the given number of intervals as precision.; 23.2.4 TThread in More Details; Cling is not thread safe yet, and it will block the execution of the threads until it has finished executing.; 23.2.4.1 Asynchronous Actions; Different threads can work simultaneously with the same object. Some actions can be dangerous. For example, when two threads create a histogram object, ROOT allocates memory and puts them to the same collection. If it happens at the same time, the results are undetermined. To avoid this problem, the user has to synchronize these actions with:; TThread::Lock() // Locking the following part of code; ... // Create an object, etc...; TThread::UnLock() // Unlocking; The code between Lock() and UnLock() will be performed uninterrupted. No other threads can perform actions or access objects/collections while it is being executed. The methods TThread::Lock()and TThread::UnLock() internally use a global TMutex instance for locking.; The user may also define their own TMutex MyMutex instance and may locally protect their asynchronous actions by calling MyMutex.Lock() and MyMutex.UnLock().; 23.2.4.2 Synchronous Actions: TCondition; To synchronize the actions of different threads you can use the TCondition class, which provides a signaling mechanism. The TCondition instance must be accessible by all threads that need to use it, i.e. it should be a global object (or a member of the class which owns the threaded methods, see below). To create a TCondition object, a TMutex instance is required for the Wait and TimedWait locking methods. One can pass the address of an external mutex to the TCondition constructor:; TMutex MyMutex;; TCondition MyCondition(&MyMutex);; If zero is passed, TCondition creates and uses its own internal mutex:; TCondition MyCondition(0);; You can n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1107759,perform,perform,1107759,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['perform'],['perform']
Performance," able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TDelTextCom() [1/2]. TDelTextCom::TDelTextCom ; (; TGTextEdit * ; te, . TGText * ; txt . ). inline . Definition at line 192 of file TGTextEdit.cxx. ◆ TDelTextCom() [2/2]. TDelTextCom::TDelTextCom ; (; const TDelTextCom & ; dtc). inline . Definition at line 196 of file TGTextEdit.cxx. ◆ ~TDelTextCom(). TDelTextCom::~TDelTextCom ; (; ). inlineoverride . Definition at line 200 of file TGTextEdit.cxx. Member Function Documentation. ◆ Notify(). Bool_t TDelTextCom::Notify ; (; ). inlineoverridevirtual . This method must be overridden to handle object notification (the base implementation is no-op). ; Different objects in ROOT use the Notify method for different purposes, in coordination with other objects that call this method at the appropriate time.; For example, TLeaf uses it to load class information; TBranchRef to load contents of referenced branches TBranchRef; most notably, based on Notify, TChain implements a callback mechanism to inform interested parties when it switches to a new sub-tree. ; Reimplemented from TObject.; Definition at line 217 of file TGTextEdit.cxx. ◆ operator=(). TDelTextCom & TDelTextCom::operator= ; (; const TDelTextCom & ; dtc). inline . Definition at line 202 of file TGTextEdit.cxx. ◆ SetBreakLine(). void TDelTextCom::SetBreakLine ; (; Bool_t ; on). inline . Definition at line 215 of file TGTextEdit.cxx. ◆ SetEndPos(). void TDelTextCom::SetEndPos ; (; TGLongPosition ; end). inline . Definition at line 211 of file TGTextEdit.cxx. Member Data Documentation. ◆ fBreakLine. Bool_t TDelTextCom::fBreakLine. private . Definition at line 189 of file TGTextEdit.cxx. ◆ fEndPos. TGLongPosition TDelTextCom::fEndPos. private . Definition at line 188 of file TGTextEdit.cxx. ◆ fText. TGText* TDelTextCom::fText. private . Definition at line 187 of file TGTextEdit.cxx. gui/gui/src/TGTextEdit.cxx. TDelTextCom. ROOT master - Reference Guide Gen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDelTextCom.html:10999,load,load,10999,doc/master/classTDelTextCom.html,https://root.cern,https://root.cern/doc/master/classTDelTextCom.html,2,['load'],['load']
Performance," access all members of the Myclass instance from the Thread0 function.; Note: Method Thread0 cannot be a virtual member function, since the cast of Thread0 to void(*) in the TThread constructor may raise problems with C++ virtual function table. However, Thread0 may call another virtual member function virtual void Myclass::Func0() which then can be overridden in a derived class of Myclass. (See example TMhs3).; Class Myclass may also provide a method to stop the running thread:; Int_t Myclass::Threadstop() {; if (mTh) {; TThread::Delete(mTh);; delete mTh;; mTh=0;; return 0;; }; return 1;; }; Example TMhs3: Class TThreadframe (TThreadframe.h, TThreadframe.cxx) is a simple example of a framework class managing up to four threaded methods. Class TMhs3 (TMhs3.h, TMhs3.cxx) inherits from this base class, showing the mhs3 example 8.1 (mhs3.h, mhs3.cxx)within a class. The Makefile of this example builds the shared libraries libTThreadframe.so and libTMhs3.so. These are either loaded or executed by the ROOT script TMhs3demo.C, or are linked against an executable: TMhs3run.cxx.; 23.3.1 Known Problems; Parts of the ROOT framework, like the interpreter, are not yet thread-safe. Therefore, you should use this package with caution. If you restrict your threads to distinct and `simple’ duties, you will able to benefit from their use. The TThread class is available on all platforms, which provide a POSIX compliant thread implementation. On Linux, Xavier Leroy’s Linux Threads implementation is widely used, but the TThread implementation should be usable on all platforms that provide pthread.; Linux Xlib on SMP machines is not yet thread-safe. This may cause crashes during threaded graphics operations; this problem is independent of ROOT.; Object instantiation: there is no implicit locking mechanism for memory allocation and global ROOT lists. The user has to explicitly protect their code when using them.; 23.4 The Signals of ROOT; The list of default signals handled by ROOT is:; k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1116814,load,loaded,1116814,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['load'],['loaded']
Performance," address of color with index color. ;  ; const char * GetConfigFeatures () const;  ; const char * GetConfigOptions () const;  ; const char * GetCutClassName () const;  ; const char * GetDefCanvasName () const;  ; Bool_t GetEditHistograms () const;  ; Int_t GetEditorMode () const;  ; TFile * GetFile () const override;  ; TFile * GetFile (const char *name) const;  Return pointer to file with name. ;  ; Bool_t GetForceStyle () const;  ; TObject * GetFunction (const char *name) const;  Return pointer to function with name. ;  ; TFunctionTemplate * GetFunctionTemplate (const char *name);  ; TObject * GetGeometry (const char *name) const;  Return pointer to Geometry with name. ;  ; const char * GetGitBranch () const;  ; const char * GetGitCommit () const;  ; const char * GetGitDate ();  Return date/time make was run. ;  ; TGlobal * GetGlobal (const char *name, Bool_t load=kFALSE) const;  Return pointer to global variable by name. ;  ; TGlobal * GetGlobal (const TObject *obj, Bool_t load=kFALSE) const;  Return pointer to global variable with address addr. ;  ; TFunction * GetGlobalFunction (const char *name, const char *params=nullptr, Bool_t load=kFALSE);  Return pointer to global function by name. ;  ; TFunction * GetGlobalFunctionWithPrototype (const char *name, const char *proto=nullptr, Bool_t load=kFALSE);  Return pointer to global function by name. ;  ; TInterpreter * GetInterpreter () const;  ; TList * GetListOfBrowsables () const;  ; TSeqCollection * GetListOfBrowsers () const;  ; TSeqCollection * GetListOfCanvases () const;  ; TCollection * GetListOfClasses () const;  ; TCollection * GetListOfClassGenerators () const;  ; TSeqCollection * GetListOfCleanups () const;  ; TSeqCollection * GetListOfClosedObjects () const;  ; TSeqCollection * GetListOfColors () const;  ; TSeqCollection * GetListOfDataSets () const;  ; TCollection * GetListOfEnums (Bool_t load=kFALSE);  ; TSeqCollection * GetListOfFiles () const;  ; TCollection * GetListOfFunctionOverloads (const char *n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTROOT.html:6483,load,load,6483,doc/v632/classTROOT.html,https://root.cern,https://root.cern/doc/v632/classTROOT.html,2,['load'],['load']
Performance," address passed to operator() will be the address of the start; of the object. Function Members (Methods); public:. TClassStreamer(ClassStreamerFunc_t pointer); virtual~TClassStreamer(); virtual TClassStreamer*Generate() const; virtual const TClass*GetOnFileClass() const; virtual voidoperator()(TBuffer& b, void* objp); virtual voidSetOnFileClass(const TClass* cl); virtual voidStream(TBuffer& b, void* objp, const TClass* onfileClass). protected:. TClassStreamer(); TClassStreamer(const TClassStreamer& rhs); TClassStreamer&operator=(const TClassStreamer& rhs). Data Members; protected:. TClassReffOnFileClass. private:. ClassStreamerFunc_tfStreamer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClassStreamer(); {}. TClassStreamer(const TClassStreamer& rhs); {}. TClassStreamer & operator=(const TClassStreamer& rhs); { fOnFileClass = rhs.fOnFileClass; fStreamer = rhs.fStreamer; return *this; }. TClassStreamer(ClassStreamerFunc_t pointer); {}. void SetOnFileClass(const TClass* cl); { fOnFileClass = const_cast<TClass*>(cl); }. const TClass* GetOnFileClass() const; { return fOnFileClass; }. TClassStreamer * Generate() const; Virtual copy constructor. virtual ~TClassStreamer(); {}. void operator()(TBuffer& b, void* objp); The address passed to operator() will be the address of the start of the; object. void Stream(TBuffer& b, void* objp, const TClass* onfileClass); The address passed to operator() will be the address of the start of the; object. Overload this routine, if your derived class can optimize; the handling of the onfileClass (rather than storing and restoring from the; fOnFileClass member. » Author: Victor Perev and Philippe Canal 08/05/02 » Copyright (C) 1995-2003, Rene Brun, Fons Rademakers and al. *; » Last changed: root/base:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TClassStreamer.html:1884,optimiz,optimize,1884,root/html534/TClassStreamer.html,https://root.cern,https://root.cern/root/html534/TClassStreamer.html,1,['optimiz'],['optimize']
Performance," address passed to operator() will be the address of the start; of the object. Function Members (Methods); public:. virtual~TClassStreamer(); virtual TClassStreamer*Generate() const; virtual const TClass*GetOnFileClass() const; virtual voidoperator()(TBuffer& b, void* objp); virtual voidSetOnFileClass(const TClass* cl); virtual voidStream(TBuffer& b, void* objp, const TClass* onfileClass); TClassStreamer(ClassStreamerFunc_t pointer). protected:. TClassStreamer&operator=(const TClassStreamer& rhs); TClassStreamer(); TClassStreamer(const TClassStreamer& rhs). Data Members; protected:. TClassReffOnFileClass. private:. ClassStreamerFunc_tfStreamer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClassStreamer(); {}. TClassStreamer(const TClassStreamer& rhs); {}. TClassStreamer & operator=(const TClassStreamer& rhs); { fOnFileClass = rhs.fOnFileClass; fStreamer = rhs.fStreamer; return *this; }. TClassStreamer(ClassStreamerFunc_t pointer); {}. void SetOnFileClass(const TClass* cl); { fOnFileClass = const_cast<TClass*>(cl); }. const TClass* GetOnFileClass() const; { return fOnFileClass; }. TClassStreamer * Generate() const; Virtual copy constructor. virtual ~TClassStreamer(); {}. void operator()(TBuffer& b, void* objp); The address passed to operator() will be the address of the start of the; object. void Stream(TBuffer& b, void* objp, const TClass* onfileClass); The address passed to operator() will be the address of the start of the; object. Overload this routine, if your derived class can optimize; the handling of the onfileClass (rather than storing and restoring from the; fOnFileClass member. » Author: Victor Perev and Philippe Canal 08/05/02 » Copyright (C) 1995-2003, Rene Brun, Fons Rademakers and al. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 14:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClassStreamer.html:1884,optimiz,optimize,1884,root/html602/TClassStreamer.html,https://root.cern,https://root.cern/root/html602/TClassStreamer.html,1,['optimiz'],['optimize']
Performance," address passed to operator() will be the address of the start; of the object. Function Members (Methods); public:. virtual~TClassStreamer(); virtual TClassStreamer*Generate() const; virtual const TClass*GetOnFileClass() const; virtual voidoperator()(TBuffer& b, void* objp); virtual voidSetOnFileClass(const TClass* cl); virtual voidStream(TBuffer& b, void* objp, const TClass* onfileClass); TClassStreamer(ClassStreamerFunc_t pointer). protected:. TClassStreamer&operator=(const TClassStreamer& rhs); TClassStreamer(); TClassStreamer(const TClassStreamer& rhs). Data Members; protected:. TClassReffOnFileClass. private:. ClassStreamerFunc_tfStreamer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClassStreamer(); {}. TClassStreamer(const TClassStreamer& rhs); {}. TClassStreamer & operator=(const TClassStreamer& rhs); { fOnFileClass = rhs.fOnFileClass; fStreamer = rhs.fStreamer; return *this; }. TClassStreamer(ClassStreamerFunc_t pointer); {}. void SetOnFileClass(const TClass* cl); { fOnFileClass = const_cast<TClass*>(cl); }. const TClass* GetOnFileClass() const; { return fOnFileClass; }. TClassStreamer * Generate() const; Virtual copy constructor. virtual ~TClassStreamer(); {}. void operator()(TBuffer& b, void* objp); The address passed to operator() will be the address of the start of the; object. void Stream(TBuffer& b, void* objp, const TClass* onfileClass); The address passed to operator() will be the address of the start of the; object. Overload this routine, if your derived class can optimize; the handling of the onfileClass (rather than storing and restoring from the; fOnFileClass member. » Author: Victor Perev and Philippe Canal 08/05/02 » Copyright (C) 1995-2003, Rene Brun, Fons Rademakers and al. *; » Last changed: root/base:$Id$ » Last generated: 2015-09-08 17:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TClassStreamer.html:1884,optimiz,optimize,1884,root/html604/TClassStreamer.html,https://root.cern,https://root.cern/root/html604/TClassStreamer.html,1,['optimiz'],['optimize']
Performance," algorithm should be written in Python: it's terribly hard to convert it into C++, and it's incredibly slow in Python (ask the Google developers about youtube).; So C++ is not a good interpreted language, mainly due to its syntactic verbosity and its lack of dynamic interfaces and reflection capabilities - think; const std::type_info& ti = std::type_info::lookup(""MyClass"");; MyBase* ptr = ti.default_construct();; And Python is not appropriate for many use cases due to its lack of type safety and speed, and its lack of native binding to C++. Then which other language should we use?; Cheers, Axel. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:51 Permalink . Hi Alex, . Hi Alex,; Very good points but let me try to defend python. I have found that a following approach (used by ATLAS that I also adopted in my private code) works fantastically well:; -- Use python to read configuration, find input files, etc;; -- Write performance critical code in C++;; -- Create C++ objects in python (relying on ROOT for dictionary support);; -- Pass configuration from python to C++;; -- Do calculations in C++;; -- Return results to python for processing, ploting, etc;; -- Run entire plot making code in python for stacking, labeling, etc.; Granted, this is probably a more complex approach than most of us in physics are willing to tolerate. I suspect that you do not have much choice since the user community wants CINT-like functionality from ROOT (and one feature of the ROOT project that makes it great is a full consideration of what experiments and users need for data taking and analysis).; Thanks for the interesting discussion! I have learned quite a bit about ROOT plans and it all seems very promising. Cheers!. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:52 Permalink . Dependency on Python . In my experience, getting python scripts to work is a very unreliable affair. They almost always have dependencies on external packages and if you don't have EXACTLY",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:17846,perform,performance,17846,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,1,['perform'],['performance']
Performance," algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::IntegrationOneDim::Type type, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::IntegrationOneDim::Type type, const ROOT::Math::Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); virtual doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__GSLIntegrator.html:1378,perform,performances,1378,root/html526/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__GSLIntegrator.html,1,['perform'],['performances']
Performance," algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, const ROOT::Math::Integration::GKRule rule, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GSLIntegrator.html:1380,perform,performances,1380,root/html602/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GSLIntegrator.html,2,['perform'],['performances']
Performance," algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::IntegrationOneDim::Type type, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::IntegrationOneDim::Type type, const ROOT::Math::Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const char* type, int rule, double absTol, double relTol, size_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GSLIntegrator.html:1378,perform,performances,1378,root/html528/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GSLIntegrator.html,4,['perform'],['performances']
Performance," all bins. More...;  ; class  RooBinnedGenContext;  Efficient implementation of the generator context specific for binned pdfs. More...;  ; class  RooBinnedL;  Implements a -log(likelihood) calculation from a dataset (assumed to be binned) and a PDF. More...;  ; class  RooBinning;  Implements a RooAbsBinning in terms of an array of boundary values, posing no constraints on the choice of binning, thus allowing variable bin sizes. More...;  ; class  RooBinningCategory;  Provides a real-to-category mapping defined by a series of thresholds. More...;  ; class  RooBinWidthFunction;  Returns the bin width (or volume) given a RooHistFunc. More...;  ; class  RooBrentRootFinder;  Implement the abstract 1-dimensional root finding interface using the Brent-Decker method. More...;  ; class  RooCachedPdf;  Implementation of RooAbsCachedPdf that can cache any external RooAbsPdf input function provided in the constructor. More...;  ; class  RooCachedReal;  Implementation of RooAbsCachedReal that can cache any external RooAbsReal input function provided in the constructor. More...;  ; class  RooCacheManager< T >;  Manages the storage of any type of data indexed on the choice of normalization and optionally the set of integrated observables. More...;  ; class  RooCategory;  Object to represent discrete states. More...;  ; class  RooChangeTracker;  Meta object that tracks value changes in a given set of RooAbsArgs by registering itself as value client of these objects. More...;  ; class  RooChi2Var;  Simple \( \chi^2 \) calculation from a binned dataset and a PDF. More...;  ; class  RooClassFactory;  Similar to TTree::MakeClass(), generates skeleton code for RooAbsPdf and RooAbsReal functions given a list of input parameter names. More...;  ; class  RooCmdArg;  Named container for two doubles, two integers two object points and three string pointers that can be passed as generic named arguments to a variety of RooFit end user methods. More...;  ; class  RooCmdConfig;  Configurable par",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Roofitcore.html:6011,cache,cache,6011,doc/master/group__Roofitcore.html,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html,1,['cache'],['cache']
Performance," all members ; ROOT::Experimental::Internal::RVirtualCanvasPainter Class ReferenceabstractGraphics » ROOT7 Graphics » ROOT7 Pad related classes. ; Abstract interface for painting a canvas. ; AuthorAxel Naumann axel@.nosp@m.cern.nosp@m..ch ; Date2017-05-31 ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! ; Definition at line 36 of file RVirtualCanvasPainter.hxx. Classes; class  Generator;  . Public Member Functions; virtual ~RVirtualCanvasPainter ();  Default destructor. ;  ; virtual bool AddPanel (std::shared_ptr< ROOT::RWebWindow >);  ; virtual void CanvasUpdated (uint64_t, bool, CanvasCallback_t)=0;  indicate that canvas changed, provides current version of the canvas ;  ; virtual void DoWhenReady (const std::string &, const std::string &, bool, CanvasCallback_t)=0;  perform special action when drawing is ready ;  ; virtual std::string GetWindowAddr () const =0;  ; virtual std::string GetWindowUrl (bool remote)=0;  ; virtual bool IsCanvasModified (uint64_t) const =0;  return true if canvas modified since last painting ;  ; virtual void NewDisplay (const std::string &where)=0;  ; virtual int NumDisplays () const =0;  ; virtual bool ProduceBatchOutput (const std::string &, int, int)=0;  produce file output in batch mode like png, jpeg, svg or pdf ;  ; virtual std::string ProduceJSON ()=0;  produce canvas JSON ;  ; virtual void Run (double tm=0.)=0;  run canvas functionality in caller thread, not needed when main thread is used ;  ; virtual void SetClearOnClose (const std::shared_ptr< void > &);  . Static Public Member Functions; static std::unique_ptr< RVirtualCanvasPainter > Create (RCanvas &canv);  Loads the plugin that implements this class. ;  . Static Protected Member Functions; static std::unique_ptr< Generator > & GetGenerator ();  generator getter ;  . #include <ROOT/RVirtualCanvasPainter.hxx>. Inheritance diagram for ROOT::Experimental::Internal::RVirtualCanvasPainter:. This bro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RVirtualCanvasPainter.html:1157,perform,perform,1157,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RVirtualCanvasPainter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RVirtualCanvasPainter.html,1,['perform'],['perform']
Performance," all other parameters which is most strongly correlated with i. ; Minimizer must overload method if implemented ; Reimplemented in ROOT::Minuit2::Minuit2Minimizer, and TMinuitMinimizer.; Definition at line 161 of file Minimizer.cxx. ◆ Hesse(). bool ROOT::Math::Minimizer::Hesse ; (; ). virtual . perform a full calculation of the Hessian matrix for error calculation ; Reimplemented in TMinuitMinimizer, and ROOT::Minuit2::Minuit2Minimizer.; Definition at line 185 of file Minimizer.cxx. ◆ IsFixedVariable(). bool ROOT::Math::Minimizer::IsFixedVariable ; (; unsigned int ; ivar); const. virtual . query if an existing variable is fixed (i.e. ; considered constant in the minimization) note that by default all variables are not fixed ; Reimplemented in ROOT::Math::BasicMinimizer, ROOT::Minuit2::Minuit2Minimizer, and TMinuitMinimizer.; Definition at line 102 of file Minimizer.cxx. ◆ IsValidError(). bool ROOT::Math::Minimizer::IsValidError ; (; ); const. inline . return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ; Definition at line 320 of file Minimizer.h. ◆ MaxFunctionCalls(). unsigned int ROOT::Math::Minimizer::MaxFunctionCalls ; (; ); const. inline . max number of function calls ; Definition at line 294 of file Minimizer.h. ◆ MaxIterations(). unsigned int ROOT::Math::Minimizer::MaxIterations ; (; ); const. inline . max iterations ; Definition at line 297 of file Minimizer.h. ◆ MinGradient(). virtual const double * ROOT::Math::Minimizer::MinGradient ; (; ); const. inlinevirtual . return pointer to gradient values at the minimum ; Reimplemented in TFumiliMinimizer, ROOT::Math::GeneticMinimizer, ROOT::Math::GSLMinimizer, ROOT::Math::GSLNLSMinimizer, TLinearMinimizer, TMinuitMinimizer, and ROOT::Minuit2::Minuit2Minimizer.; Definition at line 225 of file Minimizer.h. ◆ Minimize(). virtual bool ROOT::Math::Minimizer::Minimize ; (; ). pure virtual . method to perform the minimization ; Implemented in TFumiliMinimizer, ROOT::Math::Genetic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html:21052,perform,performed,21052,doc/master/classROOT_1_1Math_1_1Minimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html,1,['perform'],['performed']
Performance," all point to the same normalization list. Lists; for up to 'maxSize' different normalization/ projection; configurations can be cached. ; . Function Members (Methods); public:. RooCacheManager<RooAbsCacheElement>(Int_t maxSize = 10); RooCacheManager<RooAbsCacheElement>(RooAbsArg* owner, Int_t maxSize = 10); RooCacheManager<RooAbsCacheElement>(const RooCacheManager<RooAbsCacheElement>& other, RooAbsArg* owner = 0); virtual~RooCacheManager<RooAbsCacheElement>(); Int_tcacheSize() const; static TClass*Class(); virtual voidRooAbsCache::findConstantNodes(const RooArgSet&, RooArgSet&, RooLinkedList&); RooAbsCacheElement*getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); RooAbsCacheElement*getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0); RooAbsCacheElement*getObjByIndex(Int_t index) const; virtual voidinsertObjectHook(RooAbsCacheElement&); virtual TClass*IsA() const; Int_tlastIndex() const; const RooNameSet*nameSet1ByIndex(Int_t index) const; const RooNameSet*nameSet2ByIndex(Int_t index) const; RooCacheManager<RooAbsCacheElement>&operator=(const RooCacheManager<RooAbsCacheElement>&); virtual voidoperModeHook(); virtual voidRooAbsCache::optimizeCacheMode(const RooArgSet&, RooArgSet&, RooLinkedList&); virtual voidprintCompactTreeHook(ostream&, const char*); virtual Bool_tredirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); voidreset(); Int_tsetObj(const RooArgSet* nset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Int_tsetObj(const RooArgSet* nset, const RooArgSet* iset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); virtual voidShowMembers(TMemberInspector& insp, char* parent); voidsterilize(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. Int_t_lastIndexLast slot accessed; Int_t_maxSizeMaximum size; RooNormSetCache*_nsetCache! Normalization/Integration set manager; RooAbsCacheElement**_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCacheManager_RooAbsCacheElement_.html:2278,optimiz,optimizeCacheMode,2278,root/html526/RooCacheManager_RooAbsCacheElement_.html,https://root.cern,https://root.cern/root/html526/RooCacheManager_RooAbsCacheElement_.html,1,['optimiz'],['optimizeCacheMode']
Performance," all the Hessian (second derivatives matrix) of the function with respect to the parameters at a point x. ;  ; bool HasParameterHessian () const override;  ; bool ParameterG2 (const T *, const double *, T *) const override;  Evaluate all the second derivatives (diagonal ones) of the function with respect to the parameters at a point x. ;  ; const TF1 * GetFunction () const;  method to retrieve the internal function pointer ;  ; void SetAndCopyFunction (const TF1 *f=nullptr);  method to set a new function pointer and copy it inside. ;  ; static void SetDerivPrecision (double eps);  precision value used for calculating the derivative step-size h = eps * |x|. ;  ; static double GetDerivPrecision ();  get precision value used for calculating the derivative step-size ;  ; T DoEvalPar (const T *x, const double *p) const override;  evaluate function passing coordinates x and vector of parameters ;  ; T DoEvalVec (const T *x) const;  evaluate function using the cached parameter values (of TF1) re-implement for better efficiency ;  ; T DoEval (const T *x) const override;  evaluate function using the cached parameter values (of TF1) re-implement for better efficiency ;  ; T DoParameterDerivative (const T *x, const double *p, unsigned int ipar) const override;  evaluate the partial derivative with respect to the parameter ;  . #include <Math/WrappedMultiTF1.h>. Inheritance diagram for ROOT::Math::WrappedMultiTF1Templ< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFunc. template<class T > . typedef ROOT::Math::IParametricFunctionMultiDimTempl<T>::BaseFunc ROOT::Math::WrappedMultiTF1Templ< T >::BaseFunc. Definition at line 53 of file WrappedMultiTF1.h. ◆ BaseParamFunc. template<class T > . typedef ROOT::Math::IParametricGradFunctionMultiDimTempl<T> ROOT::Math::WrappedMultiTF1Templ< T >::BaseParamFunc. Definition at line 52 of file WrappedMultiTF1.h. Constructor & Destructor Documentation. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedMultiTF1Templ.html:5392,cache,cached,5392,doc/master/classROOT_1_1Math_1_1WrappedMultiTF1Templ.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedMultiTF1Templ.html,2,['cache'],['cached']
Performance," all values of observable x and parameter p.; In such a mode of operation the cache will also not be recalculated; if the observable p changes. RooCachedPdf(const RooCachedPdf& other, const char* name = 0); Copy constructor. ~RooCachedPdf(); Destructor. void fillCacheObject(RooAbsCachedPdf::PdfCacheElem& cachePdf) const; Update contents of cache histogram by resampling the input p.d.f. Note that; the cache is filled with normalized p.d.f values so that the RooHistPdf; that represents the cache contents can be explicitly declared as self normalized; eliminating the need for superfluous numeric calculations of unit normalization.s. void preferredObservableScanOrder(const RooArgSet& obs, RooArgSet& orderedObs) const; Defer preferred scan order to cached pdf prefernece. RooArgSet* actualObservables(const RooArgSet& nset) const; If this pdf is operated with a fixed set of observables, return; the subset of the fixed observables that are actual dependents; of the external input p.d.f. If this p.d.f is operated without; a fixed set of cache observables, return the actual observables; of the external input p.d.f given the choice of observables defined; in nset. RooArgSet* actualParameters(const RooArgSet& nset) const; If this p.d.f is operated with a fixed set of observables, return; all variables of the external input p.d.f that are not one of; the cache observables. If this p.d.f is operated in automatic mode,; return the parameters of the external input p.d.f. RooCachedPdf(); {}. TObject* clone(const char* newname) const; { return new RooCachedPdf(*this,newname); }. const char* inputBaseName() const; Return the base name for cache objects, in this case the name of the cached p.d.f. Double_t evaluate() const; Dummy evaluate, it is never called. » Last changed: Mon Dec 7 13:47:01 2009 » Last generated: 2009-12-07 13:47; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCachedPdf.html:43282,cache,cache,43282,root/html526/RooCachedPdf.html,https://root.cern,https://root.cern/root/html526/RooCachedPdf.html,4,['cache'],"['cache', 'cached']"
Performance," always require a raw tessellation description of points/lines/segments.; Some need the 3D object positions in the global frame, others can cope with local frames + a translation matrix - which can give considerable performance benefits. To cope with these situations the object buffer is filled out in negotiation with the viewer. TBuffer3D classes are conceptually divided into enumerated sections Core, BoundingBox, Raw etc (see TBuffer3D.h for more details). The SectionsValid() / SetSectionsValid / ClearSectionsValid() methods of TBuffer3D are used to test/set/clear these section valid flags.; The sections found in TBuffer3D (Core/BoundingBox/Raw Sizes/Raw) are sufficient to describe any tessellated shape in a generic fashion. An additional ShapeSpecific section in derived shape specific classes allows a more abstract shape description (""a sphere of inner radius x, outer radius y""). This enables a viewer which knows how to draw (tessellate) the shape itself to do so, which can bring considerable performance and quality benefits, while providing a generic fallback suitable for all viewers.; The rules for client negotiation with the viewer are:. If suitable specialized TBuffer3D class exists, use it, otherwise use TBuffer3D.; Complete the mandatory Core section.; Complete the ShapeSpecific section if applicable.; Complete the BoundingBox if you can.; Pass this buffer to the viewer using one of the AddObject() methods - see below. If the viewer requires more sections to be completed (Raw/RawSizes) AddObject() will return flags indicating which ones, otherwise it returns kNone. You must fill the buffer and mark these sections valid, and pass the buffer again. A typical code snippet would be:; TBuffer3DSphere sphereBuffer;; // Fill out kCore...; // Fill out kBoundingBox...; // Fill out kShapeSpecific for TBuffer3DSphere; // Try first add to viewer; Int_t reqSections = viewer-&gt;AddObject(buffer);; if (reqSections != TBuffer3D::kNone) {; if (reqSections & TBuffer3D::kRaw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBuffer3D.html:1714,perform,performance,1714,doc/master/classTBuffer3D.html,https://root.cern,https://root.cern/doc/master/classTBuffer3D.html,1,['perform'],['performance']
Performance," an eve-window ;  CTExecTExec is a utility class that can be used to execute a C++ command when some event happens in a pad ;  ►CTExMapThis class stores a (key,value) pair using an external hash ;  CAssoc_t;  CTExMapIter;  ►CTF11-Dim function class ;  CTF1FunctorPointer;  CTF1FunctorPointerImpl;  CTF12A projection of a TF2 along X or Y ;  CTF1AbsComposition;  CTF1ConvolutionClass wrapping convolution of two functions ;  CTF1Editor;  CTF1NormSumClass adding two functions: c1*f1+c2*f2 ;  CTF1ParametersTF1 Parameters class ;  CTF2A 2-Dim function with parameters ;  CTF2GLGL renderer for TF2 ;  CTF3A 3-Dim function with parameters ;  CTFastCgi;  CTFeldmanCousinsClass to calculate the CL upper limit using the Feldman-Cousins method as described in PRD V57 #7, p3873-3889 ;  CTFFTComplex;  CTFFTComplexReal;  CTFFTReal;  CTFFTRealComplex;  CTFileA ROOT file is a suite of consecutive data records (TKey instances) with a well defined format ;  CTFileCacheReadA cache when reading files over the network ;  CTFileCacheWriteA cache when writing files over the network ;  CTFileCollectionClass that contains a list of TFileInfo's and accumulated meta data information about its entries ;  CTFileDrawMapThis class is automatically called by TFile::DrawMap ;  CTFileHandler;  CTFileInfoClass describing a generic file including meta information ;  CTFileInfoMeta;  CTFileIter;  CTFileMergeInfo;  CTFileMergerThis class provides file copy and merging services ;  CTFileOpenHandleClass holding info about the file being opened ;  CTFilePrefetchThe prefetching mechanism uses two classes (TFilePrefetch and TFPBlock) to prefetch in advance a block of tree entries ;  CTFileSet;  CTFileStager;  ►CTFitEditor;  CFuncParamData_tTF1Convolution object ;  CTFitParametersDialog;  CTFitResultExtends the ROOT::Fit::Result class with a TNamed inheritance providing easy possibility for I/O ;  CTFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointer, i.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:150801,cache,cache,150801,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,1,['cache'],['cache']
Performance," analyzing a network.; Fills the two analysis trees. void DrawDInput(Int_t i); Draws the distribution (on the test sample) of the; impact on the network output of a small variation of; the ith input. void DrawDInputs(); Draws the distribution (on the test sample) of the; impact on the network output of a small variation of; each input.; DrawDInputs() draws something that approximates the distribution of the; derivative of the NN w.r.t. each input. That quantity is recognized as; one of the measures to determine key quantities in the network. What is done is to vary one input around its nominal value and to see; how the NN changes. This is done for each entry in the sample and produces; a distribution. What you can learn from that is:; - is variable a really useful, or is my network insensitive to it ?; - is there any risk of big systematic ? Is the network extremely sensitive; to small variations of any of my inputs ?. As you might understand, this is to be considered with care and can serve; as input for an ""educated guess"" when optimizing the network. void DrawNetwork(Int_t neuron, const char* signal, const char* bg); Draws the distribution of the neural network (using ith neuron).; Two distributions are drawn, for events passing respectively the ""signal""; and ""background"" cuts. Only the test sample is used. TProfile* DrawTruthDeviation(Int_t outnode = 0, Option_t* option = """"); Create a profile of the difference of the MLP output minus the; true value for a given output node outnode, vs the true value for; outnode, for all test data events. This method is mainly useful; when doing regression analysis with the MLP (i.e. not classification,; but continuous truth values).; The resulting TProfile histogram is returned.; It is not drawn if option ""goff"" is specified.; Options are passed to TProfile::Draw. THStack* DrawTruthDeviations(Option_t* option = """"); Creates TProfiles of the difference of the MLP output minus the; true value vs the true value, one for each outpu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMLPAnalyzer.html:7776,optimiz,optimizing,7776,root/html528/TMLPAnalyzer.html,https://root.cern,https://root.cern/root/html528/TMLPAnalyzer.html,6,['optimiz'],['optimizing']
Performance," and TFormula::Analyze.; *-* Once a formula has been compiled, it can be evaluated for a given; *-* set of parameters. see graph in TFormula::EvalPar.; -; *-* This class is the base class for the function classes TF1,TF2 and TF3.; *-* It is also used by the ntuple selection mechanism TNtupleFormula.; -; *-* In version 7 of TFormula, the usage of fOper has been changed; *-* to improve the performance of TFormula::EvalPar.; *-* Conceptually, fOper was changed from a simple array of Int_t; *-* to an array of composite values.; *-* For example a 'ylandau(5)' operation used to be encoded as 4105;; *-* it is now encoded as (klandau >> kTFOperShit) + 5; *-* Any class inheriting from TFormula and using directly fOper (which; *-* is now a private data member), needs to be updated to take this; *-* in consideration. The member functions recommended to set and; *-* access fOper are: SetAction, GetAction, GetActionParam; *-* For more performant access to the information, see the implementation; *-* TFormula::EvalPar; -; *-* CHANGING DEFAULT SETTINGS; *-* =========================; *-* When creating complex formula , it may be necessary to increase; *-* some default parameters. see static function TFormula::SetMaxima; -; *-* WHY TFormula CANNOT ACCEPT A CLASS MEMBER FUNCTION ?; *-* ====================================================; *-* This is a frequently asked question.; *-* C++ is a strongly typed language. There is no way for TFormula (without; *-* recompiling this class) to know about all possible user defined data types.; *-* This also apply to the case of a static class function.; *-* Because TMath is a special and frequent case, TFormula is aware; *-* of all TMath functions.; -; -. Function Members (Methods); public:. TFormula(); TFormula(const TFormula& formula); TFormula(const char* name, const char* formula); virtual~TFormula(); voidTObject::AbstractMethod(const char* method) const; virtual voidAnalyze(const char* schain, Int_t& err, Int_t offset = 0); virtual Bool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFormula.html:3077,perform,performant,3077,root/html528/TFormula.html,https://root.cern,https://root.cern/root/html528/TFormula.html,3,['perform'],['performant']
Performance," and \""AdaptiveSpeed\"")"" << Endl;; 1783 Log() << ""to individual data sets should also help. Summary:"" << brk << Endl;; 1784 Log() << "" -> increase \""MaxCalls\"""" << brk << Endl;; 1785 Log() << "" -> adjust \""MinTemperature\"""" << brk << Endl;; 1786 Log() << "" -> adjust \""TemperatureScale\"""" << brk << Endl;; 1787 Log() << "" -> adjust \""AdaptiveSpeed\"""" << Endl;; 1788 Log() << """" << Endl;; 1789 Log() << ""\""Decreasing Adaptive\"" approach:"" << Endl;; 1790 Log() << """" << Endl;; 1791 Log() << ""The algorithm calculates the initial temperature (based on the effect-"" << Endl;; 1792 Log() << ""iveness of large steps) and the multiplier that ensures to reach the"" << Endl;; 1793 Log() << ""minimal temperature with the requested number of iteration steps."" << Endl;; 1794 Log() << ""The performance can be improved by adjusting the minimal temperature"" << Endl;; 1795 Log() << "" (\""MinTemperature\"") and by increasing number of steps (\""MaxCalls\""):"" << brk << Endl;; 1796 Log() << "" -> increase \""MaxCalls\"""" << brk << Endl;; 1797 Log() << "" -> adjust \""MinTemperature\"""" << Endl;; 1798 Log() << "" "" << Endl;; 1799 Log() << ""Other kernels:"" << Endl;; 1800 Log() << """" << Endl;; 1801 Log() << ""Alternative ways of counting the temperature change are implemented. "" << Endl;; 1802 Log() << ""Each of them starts with the maximum temperature (\""MaxTemperature\"")"" << Endl;; 1803 Log() << ""and decreases while changing the temperature according to a given"" << Endl;; 1804 Log() << ""prescription:"" << brk << Endl;; 1805 Log() << ""CurrentTemperature ="" << brk << Endl;; 1806 Log() << "" - Sqrt: InitialTemperature / Sqrt(StepNumber+2) * TemperatureScale"" << brk << Endl;; 1807 Log() << "" - Log: InitialTemperature / Log(StepNumber+2) * TemperatureScale"" << brk << Endl;; 1808 Log() << "" - Homo: InitialTemperature / (StepNumber+2) * TemperatureScale"" << brk << Endl;; 1809 Log() << "" - Sin: (Sin(StepNumber / TemperatureScale) + 1) / (StepNumber + 1)*InitialTemperature + Eps"" << brk << Endl;; 1810 Log() << "" - Geo:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:71989,perform,performance,71989,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,1,['perform'],['performance']
Performance," and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooAbsData *dset;  ;  R__DEPRECATED (6, 36, ""Use observableOverl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLagrangianMorphFunc.html:45211,cache,cache,45211,doc/master/classRooLagrangianMorphFunc.html,https://root.cern,https://root.cern/doc/master/classRooLagrangianMorphFunc.html,6,['cache'],['cache']
Performance," and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAddPdf.html:49410,cache,cache,49410,doc/v632/classRooAddPdf.html,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html,3,['cache'],['cache']
Performance," and compare against md5 in map,; if not same return kTRUE.; - if no, get file's md5 and modtime and store in file map, ask; slave if file exists with specific md5, if yes return kFALSE,; if no return kTRUE.; The options 'cpopt' define if to copy things from cache to sandbox and what.; To retrieve from the cache the binaries associated with the file TProof::kCpBin; must be set in cpopt; the default is copy everything.; Returns kTRUE in case file needs to be send, returns kFALSE in case; file is already on remote node. Int_t SendFile(const char* file, Int_t opt = (kBinary | kForward | kCp | kCpBin), const char* rfile = 0, TSlave* sl = 0); Send a file to master or slave servers. Returns number of slaves; the file was sent to, maybe 0 in case master and slaves have the same; file system image, -1 in case of error.; If defined, send to worker 'wrk' only.; If defined, the full path of the remote path will be rfile.; If rfile = ""cache"" the file is copied to the remote cache instead of the sandbox; (to copy to the cache on a different name use rfile = ""cache:newname"").; The mask 'opt' is an or of ESendFileOpt:. kAscii (0x0) if set true ascii file transfer is used; kBinary (0x1) if set true binary file transfer is used; kForce (0x2) if not set an attempt is done to find out; whether the file really needs to be downloaded; (a valid copy may already exist in the cache; from a previous run); the bit is set by; UploadPackage, since the check is done elsewhere.; kForward (0x4) if set, ask server to forward the file to slave; or submaster (meaningless for slave servers).; kCpBin (0x8) Retrieve from the cache the binaries associated; with the file; kCp (0x10) Retrieve the files from the cache. Int_t Echo(const TObject* obj); Sends an object to master and workers and expect them to send back a; message with the output of its TObject::Print(). Returns -1 on error, the; number of workers that received the objects on success. Int_t Echo(const char* str); Sends a string to master and wo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProof.html:67558,cache,cache,67558,root/html602/TProof.html,https://root.cern,https://root.cern/root/html602/TProof.html,8,['cache'],['cache']
Performance," and exit.; 3b. If no, read the peeked data and goto 1.; The function is careful to assume as little as possible about the implementation of peeking. For example, every peek is followed by a read. If the read returns a different amount of data, the process is retried until all data arrives safely.; Reads at most one less than the number of characters specified by maxsize. ; Definition at line 1275 of file TWebFile.cxx. ◆ GetLine(). Int_t TWebFile::GetLine ; (; TSocket * ; s, . char * ; line, . Int_t ; maxsize . ). protectedvirtual . Read a line from the socket. ; Reads at most one less than the number of characters specified by maxsize. Reading stops when a newline character is found, The newline (\n) and cr (\r), if any, are removed. Returns -1 in case of error, or the number of characters read (>= 0) otherwise. ; Definition at line 1212 of file TWebFile.cxx. ◆ GetMaxFullCacheSize(). Long64_t TWebFile::GetMaxFullCacheSize ; (; ). static . Static method returning maxmimal size of full cache, which can be preserved by file instance. ; Definition at line 1440 of file TWebFile.cxx. ◆ GetProxy(). const char * TWebFile::GetProxy ; (; ). static . Static method returning the global proxy URL. ; Definition at line 1420 of file TWebFile.cxx. ◆ GetSize(). Long64_t TWebFile::GetSize ; (; ); const. overridevirtual . Return maximum file size. ; Reimplemented from TFile.; Definition at line 1010 of file TWebFile.cxx. ◆ HttpTerminator(). const char * TWebFile::HttpTerminator ; (; const char * ; start, . const char * ; peeked, . Int_t ; peeklen . ). protectedvirtual . Determine whether [START, PEEKED + PEEKLEN) contains an HTTP new line [\r]\n. ; If so, return the pointer to the position after the line, otherwise return 0. This is used as callback to GetHunk(). The data between START and PEEKED has been read and cannot be ""unread""; the data after PEEKED has only been peeked. ; Definition at line 1350 of file TWebFile.cxx. ◆ Init(). void TWebFile::Init ; (; Bool_t ; readHeadOnly). o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebFile.html:51054,cache,cache,51054,doc/master/classTWebFile.html,https://root.cern,https://root.cern/doc/master/classTWebFile.html,1,['cache'],['cache']
Performance," and forwards the interface.; 5.6.6 VariableMetricMinimizer(); The VariableMetricMinimizer is instantiated using default constructor.; 5.6.7 minimize(const FCNBase&, …); The VariableMetricMinimizer provides several overloaded methods minimize with return value FunctionMinimum. Together with the user \(\mbox{FCN}\) (either an implementation of FCNBase or FCNGradientBase) the user has to give as input the parameters with starting values in one of the defined formats (std::vector\(<\)double\(>\), MnUserParameters or MnUserParameterState).; 5.7 MnMinimize and CombinedMinimizer; [api:minimize]; Causes minimization of the function by the method of \(\mbox{MIGRAD}\), as does the MnMigrad class, but switches to the \(\mbox{SIMPLEX}\) method if \(\mbox{MIGRAD}\) fails to converge. Constructor arguments, methods arguments and names of methods are the same as for MnMigrad or MnSimplex and VariableMetricMinimizer or SimplexMinimizer.; 5.8 MnMinos; [api:minos] Causes a \(\mbox{MINOS}\) error analysis to be performed on the parameter whose number is specified. \(\mbox{MINOS}\) errors may be expensive to calculate, but are very reliable since they take account of non-linearities in the problem as well as parameter correlations, and are in general asymmetric. The optional argument \(\mbox{maxcalls}\) specifies the (approximate) maximum number of function calls per parameter requested, after which the calculation will be stopped for that parameter.; 5.8.1 MnMinos(const FCNBase&, const FunctionMinimum&); Construct an MnMinos object from the user’s \(\mbox{FCN}\) and a valid FunctionMinimum. Additional constructors for user specific MnStrategy settings are provided.; 5.8.2 operator(); MnMinos::operator()(unsigned int n, unsigned int maxcalls) causes a \(\mbox{MINOS}\) error analysis for external parameter \(\mbox{n}\). The return value is a std::pair\(<\)double,double\(>\) with the lower and upper bounds of parameter \(\mbox{n}\).; 5.8.3 minos(unsigned int n, unsigned int maxcalls); Mn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:50225,perform,performed,50225,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['perform'],['performed']
Performance," and graph. void CreateResults() const; create a new HypoTestInverterResult to hold all computed results. HypoTestInverterResult* GetInterval() const; Run a fixed scan or the automatic scan depending on the configuration; Return if needed a copy of the result object which will be managed by the user. HypoTestResult * Eval(RooStats::HypoTestCalculatorGeneric& hc, bool adaptive, double clsTarget) const; Run the Hypothesis test at a previous configured point; (internal function called by RunOnePoint). bool RunFixedScan(int nBins, double xMin, double xMax, bool scanLog = false) const; Run a Fixed scan in npoints between min and max. bool RunOnePoint(double thisX, bool adaptive = false, double clTarget = -1) const; run only one point at the given POI value. bool RunLimit(double& limit, double& limitErr, double absTol = 0, double relTol = 0, const double* hint = 0) const; run an automatic scan until the desired accurancy is reached; Start by default from the full interval (min,max) of the POI and then via bisection find the line crossing; the target line; Optionally an hint can be provided and the scan will be done closer to that value; If by bisection the desired accuracy will not be reached a fit to the points is performed. SamplingDistribution * GetLowerLimitDistribution(bool rebuild = false, int nToys = 100); get the distribution of lower limit; if rebuild = false (default) it will re-use the results of the scan done; for obtained the observed limit and no extra toys will be generated; if rebuild a new set of B toys will be done and the procedure will be repeted; for each toy. SamplingDistribution * GetUpperLimitDistribution(bool rebuild = false, int nToys = 100); get the distribution of lower limit; if rebuild = false (default) it will re-use the results of the scan done; for obtained the observed limit and no extra toys will be generated; if rebuild a new set of B toys will be done and the procedure will be repeted; for each toy; The nuisance parameter value used for",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestInverter.html:9985,perform,performed,9985,root/html534/RooStats__HypoTestInverter.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestInverter.html,3,['perform'],['performed']
Performance," and height of the pixmap.; lenname : pixmap name length; pxname : pixmap name. void ImgPickPalette(XImage* image, Int_t& ncol, Int_t*& R, Int_t*& G, Int_t*& B); Returns in R G B the ncol colors of the palette used by the image.; The image pixels are changed to index values in these R G B arrays.; This produces a colormap with only the used colors (so even on displays; with more than 8 planes we will be able to create GIF's when the image; contains no more than 256 different colors). If it does contain more; colors we will have to use GIFquantize to reduce the number of colors.; The R G B arrays must be deleted by the caller. Int_t WriteGIF(char* name); Writes the current window into GIF file. Returns 1 in case of success,; 0 otherwise. void PutImage(Int_t offset, Int_t itran, Int_t x0, Int_t y0, Int_t nx, Int_t ny, Int_t xmin, Int_t ymin, Int_t xmax, Int_t ymax, UChar_t* image, Drawable_t id); Draw image. Pixmap_t ReadGIF(Int_t x0, Int_t y0, const char* file, Window_t id = 0); If id is NULL - loads the specified gif file at position [x0,y0] in the; current window. Otherwise creates pixmap from gif file. unsigned char * GetColorBits(Drawable_t wid, Int_t x = 0, Int_t y = 0, UInt_t w = 0, UInt_t h = 0); Returns an array of pixels created from a part of drawable (defined by x, y, w, h); in format:; b1, g1, r1, 0, b2, g2, r2, 0 ... bn, gn, rn, 0 .. Pixels are numbered from left to right and from top to bottom.; By default all pixels from the whole drawable are returned. Note that return array is 32-bit aligned. Pixmap_t CreatePixmapFromData(unsigned char* bits, UInt_t width, UInt_t height); create pixmap from RGB data. RGB data is in format :; b1, g1, r1, 0, b2, g2, r2, 0 ... bn, gn, rn, 0 .. Pixels are numbered from left to right and from top to bottom.; Note that data must be 32-bit aligned. Int_t AddPixmap(ULong_t pixid, UInt_t w, UInt_t h); Register pixmap created by gVirtualGL; w,h : Width and height of the pixmap.; register new pixmap. Int_t SupportsExtension(con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGX11.html:37332,load,loads,37332,root/html528/TGX11.html,https://root.cern,https://root.cern/root/html528/TGX11.html,4,['load'],['loads']
Performance," and minor number.; Note that this function returns only the entry number, not the data; To read the data corresponding to an entry number, use TTree::GetEntryWithIndex; the BuildIndex function has created a table of Long64_t* of sorted values; corresponding to val = major<<31 + minor;; The function performs binary search in this sorted table.; If it finds a pair that maches val, it returns directly the; index in the table.; If an entry corresponding to major and minor is not found, the function; returns the index of the major,minor pair immediately lower than the; requested value, ie it will return -1 if the pair is lower than; the first entry in the index. See also GetEntryNumberWithIndex. Long64_t GetEntryNumberWithIndex(Long64_t major, Long64_t minor = 0) const; Return entry number corresponding to major and minor number.; Note that this function returns only the entry number, not the data; To read the data corresponding to an entry number, use TTree::GetEntryWithIndex; the BuildIndex function has created a table of Long64_t* of sorted values; corresponding to val = major<<31 + minor;; The function performs binary search in this sorted table.; If it finds a pair that maches val, it returns directly the; index in the table, otherwise it returns -1. See also GetEntryNumberWithBestIndex. Int_t GetEntryWithIndex(Int_t major, Int_t minor = 0); Read entry corresponding to major and minor number. The function returns the total number of bytes read.; If the Tree has friend trees, the corresponding entry with; the index values (major,minor) is read. Note that the master Tree; and its friend may have different entry serial numbers corresponding; to (major,minor). TTree* GetFriend(const char* ) const; Return a pointer to the TTree friend whose name or alias is 'friendname. const char* GetFriendAlias(TTree* ) const; If the 'tree' is a friend, this method returns its alias name. This alias is an alternate name for the tree. It can be used in conjunction with a branch or leaf ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:100021,perform,performs,100021,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,3,['perform'],['performs']
Performance," and not a library; TFunction*fMethod!ctor method or global function; TStringfOriginorigin of plugin handler definition; TStringfPluginplugin library which should contain fClass; TStringfRegexpregular expression which must be matched in URI. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPluginHandler(const char* base, const char* regexp, const char* className, const char* pluginName, const char* ctor, const char* origin); Create a plugin handler. Called by TPluginManager. Bool_t CanHandle(const char* base, const char* uri); Check if regular expression appears in the URI, if so return kTRUE.; If URI = 0 always return kTRUE. void SetupCallEnv(); Setup ctor or static method call environment. Int_t CheckPlugin() const; Check if the plugin library for this handler exits. Returns 0; when it exists and -1 in case the plugin does not exist. Int_t LoadPlugin(); Load the plugin library for this handler. Returns 0 on successful loading; and -1 in case the library does not exist or in case of error. Long_t ExecPlugin(Int_t va_(nargs), ...); Execute ctor for this plugin and return pointer to object of specific; class. User must cast the returned long to the correct class.; This method accepts a variable number of arguments to be passed; to the ctor, where nargs is the number of arguments, followed; by nargs arguments. Returns 0 in case of error. void Print(Option_t* opt = """") const; Print info about the plugin handler. If option is ""a"" print; also the ctor's that will be used. TPluginHandler(); { }. TPluginHandler(const char* base, const char* regexp, const char* className, const char* pluginName, const char* ctor, const char* origin). TPluginHandler& operator=(const TPluginHandler& ). const char * GetBase() const; { return fBase; }. const char * GetRegexp() const; { return fRegexp; }. const char * GetPlugin() const; { return fPlugin; }. const char * GetCtor() const; { return fCtor; }. const char * GetOrigin() const; { return fOrigin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPluginHandler.html:9963,load,loading,9963,root/html528/TPluginHandler.html,https://root.cern,https://root.cern/root/html528/TPluginHandler.html,4,['load'],['loading']
Performance," and ranges that are meant to be tuned. ;  ; void PrintHelpMessage () const;  prints out method-specific help method ;  ; void ProcessSetup ();  process all options the ""CheckForUnusedOptions"" is done in an independent call, since it may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; void ReadStateFromFile ();  Function to write options and weights to file. ;  ; void ReadStateFromStream (std::istream &tf);  read the header from the weight files of the different MVA methods ;  ; void ReadStateFromStream (TFile &rf);  write reference MVA distributions (and other information) to a ROOT type weight file ;  ; void ReadStateFromXMLString (const char *xmlstr);  for reading from memory ;  ; void RerouteTransformationHandler (TransformationHandler *fTargetTransformation);  ; virtual void SetAnalysisType (Types::EAnalysisType type);  ; void SetBaseDir (TDirectory *methodDir);  ; void SetFile (TFile *file);  ; void SetMethodBaseDir (TDirectory *methodDir);  ; void SetMethodDir (TDirectory *methodDir);  ; void SetModelPersistence (Bool_t status);  ; void SetSignalReferenceCut (Double_t cut);  ; void SetSignalReferenceCutOrientation (Double_t cutOrientation);  ; void SetSilentFile (Bool_t status);  ; void SetTestTime (Double_t testTime);  ; void SetTestvarName (const TString &v="""");  ; void SetTrainTime (Double_t trainTime);  ; virtual void SetTuneParameters (std::map< TString, Double_t > tuneParameters);  set the tuning parameters according to the argument This is just a dummy . ;  ; void SetupMethod ();  setup of methods ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestClassification ();  initialization ;  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::ETreeType typ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodCrossValidation.html:10355,tune,tuneParameters,10355,doc/master/classTMVA_1_1MethodCrossValidation.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCrossValidation.html,2,['tune'],['tuneParameters']
Performance," and should be used as the action's output result. In case Book is called without specifying column types as template arguments, corresponding typed code will be just-in-time compiled by RDataFrame. In that case the Helper class needs to be known to the ROOT interpreter.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Examples; See this tutorial for an example implementation of an action helper.; It is also possible to inspect the code used by built-in RDataFrame actions at ActionHelpers.hxx. ; Definition at line 2984 of file RInterface.hxx. ◆ Cache() [1/4]. template<typename Proxied , typename DataSource = void> . template<typename... ColumnTypes> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; const ColumnNames_t & ; columnList). inline . Save selected columns in memory. ; Template Parameters. ColumnTypesvariadic list of branch/column types. . Parameters. [in]columnListcolumns to be cached in memory. . Returnsa RDataFrame that wraps the cached dataset.; This action returns a new RDataFrame object, completely detached from the originating RDataFrame. The new dataframe only contains the cached columns and stores their content in memory for fast, zero-copy subsequent access.; Use Cache if you know you will only need a subset of the (Filtered) data that fits in memory and that will be accessed many times.; NoteCache will refuse to process columns with names of the form #columnname. These are special columns made available by some data sources (e.g. RNTupleDS) that represent the size of column columnname, and are not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an Alias(): df.Alias(""nbar"", ""#bar"").Cache<std::size_t>(..., {""nbar""}). Example usage:; Types and columns specified: auto cache_some_cols_df = df.Cache<double, MyClass, int>({""col0"", ""col1"", ""col2""});; double; Types inferred and columns specified (thi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:42098,cache,cached,42098,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['cache'],['cached']
Performance," and slaves. ; Definition at line 11760 of file TProof.cxx. ◆ AddFeedback(). void TProof::AddFeedback ; (; const char * ; name). Add object to feedback list. ; Definition at line 9989 of file TProof.cxx. ◆ AddIncludePath(). Int_t TProof::AddIncludePath ; (; const char * ; incpath, . Bool_t ; onClient = kFALSE, . TList * ; wrks = 0, . Bool_t ; doCollect = kTRUE . ). Add 'incpath' to the inc path search. ; Multiple paths can be specified at once separating them with a comma or a blank. Return 0 on success, -1 otherwise ; Definition at line 8888 of file TProof.cxx. ◆ AddInput(). void TProof::AddInput ; (; TObject * ; obj). Add objects that might be needed during the processing of the selector (see Process()). ; Definition at line 9734 of file TProof.cxx. ◆ AddInputData(). void TProof::AddInputData ; (; TObject * ; obj, . Bool_t ; push = kFALSE . ). Add data objects that might be needed during the processing of the selector (see Process()). ; This object can be very large, so they are distributed in an optimized way using a dedicated file. If push is TRUE the input data are sent over even if no apparent change occured to the list. ; Definition at line 9522 of file TProof.cxx. ◆ AddWorkers(). Int_t TProof::AddWorkers ; (; TList * ; workerList). protected . Works on the master node only. ; It starts workers on the machines in workerList and sets the paths, packages and macros as on the master. It is a subbstitute for StartSlaves(...) The code is mostly the master part of StartSlaves, with the parallel startup removed. ; Definition at line 1320 of file TProof.cxx. ◆ Archive() [1/2]. Int_t TProof::Archive ; (; const char * ; ref, . const char * ; path = 0 . ). Send archive request for the query specified by ref. ; Generic method working for all queries known by the server. If ref == ""Default"", path is understood as a default path for archiving. ; Definition at line 6077 of file TProof.cxx. ◆ Archive() [2/2]. Int_t TProof::Archive ; (; Int_t ; query, . const char * ; url . ).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:64244,optimiz,optimized,64244,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['optimiz'],['optimized']
Performance," and the Cling the C++ Interpreter to connect signals to slots methods.; Therefore, all necessary elements for an object-oriented editor design are in place. The editor complexity can be reduced by splitting it into discrete units of so-called object editors. Any object editor provides an object specific GUI. The main purpose of the ROOT graphics editor is the organization of the object editors’ appearance and the task sequence between them.; 25.9.1 Object Editors; Every object editor follows a simple naming convention: to have as a name the object class name concatenated with ‘Editor’ (e.g. for TGraph objects the object editor is TGraphEditor). Thanks to the signals/slots communication mechanism and to the method DistancetoPrimitive() that computes a ‘‘distance’’ to an object from the mouse position, it was possible to implement a signal method of the canvas that says which is the selected object and to which pad it belongs. Having this information the graphics editor loads the corresponding object editor and the user interface is ready for use. This way after a click on ‘axis’—the axis editor is active; a click on a ‘pad’ activates the pad editor, etc.; The algorithm in use is simple and is based on the object-oriented relationship and communication. When the user activates the editor, according to the selected object <obj> in the canvas it looks for a class name <obj>Editor. For that reason, the correct naming is very important. If a class with this name is found, the editor verifies that this class derives from the base editor class TGedFrame. If all checks are satisfied, the editor makes an instance of the object editor. Then, it scans all object base classes searching the corresponding object editors. When it finds one, it makes an instance of the base class editor too.; Once the object editor is in place, it sets the user interface elements according to the object’s status. After that, it is ready to interact with the object following the user actions.; The gr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1221979,load,loads,1221979,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['load'],['loads']
Performance," and tubes are the most recommendable shapes for this purpose due to their fast navigation algorithms.; root[] TGeoVolume *top=gGeoManager->MakeBox(""Top"",med,10.,10.,10.);; gGeoManagerR__EXTERN TGeoManager * gGeoManagerDefinition TGeoManager.h:608; TGeoManager::MakeBoxTGeoVolume * MakeBox(const char *name, TGeoMedium *medium, Double_t dx, Double_t dy, Double_t dz)Make in one step a volume pointing to a box shape with given medium.Definition TGeoManager.cxx:3169; TGeoVolumeTGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes.Definition TGeoVolume.h:43; The default units are in centimeters. Now we want to make this volume our world. We have to do this operation before closing the geometry.; root[] gGeoManager->SetTopVolume(top);; TGeoManager::SetTopVolumevoid SetTopVolume(TGeoVolume *vol)Set the top volume and corresponding node as starting point of the geometry.Definition TGeoManager.cxx:3655; This should be enough, but it is not since always after defining some geometry hierarchy, TGeo needs to build some optimization structures and perform some checks. Note the messages posted after the statement is executed. We will describe the corresponding operations later.; root[] gGeoManager->CloseGeometry();; TGeoManager::CloseGeometryvoid CloseGeometry(Option_t *option=""d"")Closing geometry implies checking the geometry validity, fixing shapes with negative parameters (run-...Definition TGeoManager.cxx:1480; Now we are really done with geometry building stage, but we would like to see our simple world:; root[] top->SetLineColor(kMagenta);; root[] gGeoManager->SetTopVisible(); // the TOP is invisible; root[] top->Draw();; kMagenta@ kMagentaDefinition Rtypes.h:66; TGeoManager::SetTopVisiblevoid SetTopVisible(Bool_t vis=kTRUE)make top volume visible on screenDefinition TGeoManager.cxx:2396. Example 2: A Geometrical Hierarchy Look and Feel; Before going further, let us get a look and feel of interacting with the modeller. For this, we will use one of the example",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:6572,optimiz,optimization,6572,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,2,"['optimiz', 'perform']","['optimization', 'perform']"
Performance," and will reset certain values in the cache. ; This name is ambiguos because the method doesn't reset the whole cache, only the part related to the unzipping Note: This method is completely different from TTreeCache::ResetCache(), in that method we were cleaning the prefetching buffer while here we delete the information about the unzipped buffers ; Reimplemented from TTreeCache.; Definition at line 501 of file TTreeCacheUnzip.cxx. ◆ SetBufferSize(). Int_t TTreeCacheUnzip::SetBufferSize ; (; Int_t ; buffersize). overridevirtual . Change the underlying buffer size of the cache. ; Returns:; 0 if the buffer content is still available; 1 if some or all of the buffer content has been made unavailable; -1 on error . Reimplemented from TTreeCache.; Definition at line 359 of file TTreeCacheUnzip.cxx. ◆ SetEntryRange(). void TTreeCacheUnzip::SetEntryRange ; (; Long64_t ; emin, . Long64_t ; emax . ). overridevirtual . Set the minimum and maximum entry number to be processed this information helps to optimize the number of baskets to read when prefetching the branch buffers. ; Reimplemented from TTreeCache.; Definition at line 375 of file TTreeCacheUnzip.cxx. ◆ SetParallelUnzip(). Int_t TTreeCacheUnzip::SetParallelUnzip ; (; TTreeCacheUnzip::EParUnzipMode ; option = TTreeCacheUnzip::kEnable). static . Static function that (de)activates multithreading unzipping. ; The possible options are:; kEnable Enable it, which causes an automatic detection and launches the additional thread if the number of cores in the machine is greater than one; kDisable Disable will not activate the additional thread.; kForce Force will start the additional thread even if there is only one core. the default will be taken as kEnable. Returns 0 if there was an error, 1 otherwise. ; Definition at line 436 of file TTreeCacheUnzip.cxx. ◆ SetUnzipBufferSize(). void TTreeCacheUnzip::SetUnzipBufferSize ; (; Long64_t ; bufferSize). Sets the size for the unzipping cache... by default it should be two times the si",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCacheUnzip.html:35256,optimiz,optimize,35256,doc/v632/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/v632/classTTreeCacheUnzip.html,1,['optimiz'],['optimize']
Performance," and, thanks to OS optimisations, content is flushed to the output file when a few MBytes of data are available. On the other hand, when reading, one may hit performance problems because of latencies e.g imposed by network. For example in a WAN with 10ms latency, reading 1000 buffers of 10 KBytes each with no cache will imply 10s penalty where a local read of the 10 MBytes would take about 1 second.; The TreeCache tries to prefetch all the buffers for the selected branches in order to transfer a few multi-Megabytes large buffers instead of many multi-kilobytes small buffers. In addition, TTreeCache can sort the blocks to be read in increasing order such that the file is read sequentially.; Systems like xrootd, dCache or httpd take advantage of the TTreeCache in reading ahead as much data as they can and return to the application the maximum data specified in the cache and have the next chunk of data ready when the next request comes. Are there cases for which the usage of TTreeCache is detrimental for performance?; Yes, some corner cases. For example, when reading only a small fraction of all entries such that not all branch buffers are read. General Description; This class acts as a file cache, registering automatically the baskets from the branches being processed via direct manipulation of TTrees or with tools such as TTree::Draw, TTree::Process, TSelector, TTreeReader and RDataFrame when in the learning phase. The learning phase is by default 100 entries. It can be changed via TTreeCache::SetLearnEntries.; The usage of a TTreeCache can considerably improve the runtime performance at the price of a modest investment in memory, in particular when the TTree is accessed remotely, e.g. via a high latency network.; For each TTree being processed a TTreeCache object is created. This object is automatically deleted when the Tree is deleted or when the file is deleted. The user can change the size of the cache with the TTree::SetCacheSize method (by default the size is 30",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCache.html:2090,perform,performance,2090,doc/v632/classTTreeCache.html,https://root.cern,https://root.cern/doc/v632/classTTreeCache.html,2,['perform'],['performance']
Performance," any).; If 'opts' contains 'V' the dataset files are also verified (if the dataset manager; is configured to allow so). By default the dataset is not verified.; If 'opts' contains 'T' the in the dataset object (status bits, meta,...); is trusted, i.e. not reset (if the dataset manager is configured to allow so).; Returns kTRUE on success. Int_t SetDataSetTreeName(const char* dataset, const char* treename); Set/Change the name of the default tree. The tree name may contain; subdir specification in the form ""subdir/name"".; Returns 0 on success, -1 otherwise. TMap * GetDataSets(const char* uri = """", const char* optStr = """"); Lists all datasets that match given uri. void ShowDataSets(const char* uri = """", const char* optStr = """"); Shows datasets in locations that match the uri.; By default shows the user's datasets and global ones. Bool_t ExistsDataSet(const char* dataset); Returns kTRUE if 'dataset' exists, kFALSE otherwise. void ClearDataSetCache(const char* dataset = 0); Clear the content of the dataset cache, if any (matching 'dataset', if defined). void ShowDataSetCache(const char* dataset = 0); Display the content of the dataset cache, if any (matching 'dataset', if defined). TFileCollection * GetDataSet(const char* dataset, const char* optStr = """"); Get a list of TFileInfo objects describing the files of the specified; dataset.; To get the short version (containing only the global meta information); specify optStr = ""S:"" or optStr = ""short:"".; To get the sub-dataset of files located on a given server(s) specify; the list of servers (comma-separated) in the 'optStr' field. void ShowDataSet(const char* dataset = """", const char* opt = ""M""); display meta-info for given dataset usi. Int_t RemoveDataSet(const char* dataset, const char* optStr = """"); Remove the specified dataset from the PROOF cluster.; Files are not deleted. TList* FindDataSets(const char* searchString, const char* optStr = """"); Find datasets, returns in a TList all found datasets. Int_t VerifyDataSet(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:81371,cache,cache,81371,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,1,['cache'],['cache']
Performance," are not allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. NOTE 1. C/C++ offer the possibility to allocate and delete memory.; Forgetting to delete allocated memory is a programming error that originate ""leaks"",; i.e. the memory of your process grows and eventually your program crashes.; Even if you *always* delete the allocated memory, the recovered space may not be; efficiently reused. The process knows that there are portions of free memory,; but when you allocate it again, a fresh piece of memory is grabbed.; Your program is free from semantic errors, but the total memory of your process; still grows. Moreover your program's memory is full of ""holes"" which reduce the; efficiency of memory access, this is called ""memory fragmentation"".; Moreover new / delete are expensive operations in terms of CPU time. Without entering into technical details, the TClonesArray allow to ""reuse"" the; same portion of memory for new/delete avoiding memory fragmentation and memory; growth and improving by orders of magnitude the performance. Every time the; memory of the TClonesArray has to be reused, the Clear() method is employed.; To provide its benefits, each TClonesArray must be allocated *once* per process; and disposed of (deleted) *only when not needed any more*.; So a job should see *only one* deletion for each TClonesArray, which should be; ""Cleared()"" in between several times. Keep deleting a TClonesArray is a double; waste. Not only you do not avoid memory fragmentation, but you worsen it because; the TClonesArray itself is a rather heavy structure, and there is quite some; code in the destructor, so you have more memory fragmentation and slower code. NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. * Use Clear() or Clear(""C"") instead of Delete(). This will improve program; execution time.; * TClonesArray object classes containing pointers allocate memory.; To avoi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TClonesArray.html:2422,perform,performance,2422,root/html528/TClonesArray.html,https://root.cern,https://root.cern/root/html528/TClonesArray.html,2,['perform'],['performance']
Performance," as a result of using the `root` command; 180 for (auto n = 1; n < *argc; n++) {; 181 std::cerr << ""root: unrecognized option '"" << argv[n] << ""'\n"";; 182 }; 183 std::cerr << ""Try 'root --help' for more information.\n"";; 184 TApplication::Terminate(0);; 185 }; 186 ; 187 fNcmd = 0;; 188 fDefaultPrompt = ""root [%d] "";; 189 fInterrupt = kFALSE;; 190 ; 191 gBenchmark = new TBenchmark();; 192 ; 193 if (!noLogo && !NoLogoOpt()) {; 194 Bool_t lite = (Bool_t) gEnv->GetValue(""Rint.WelcomeLite"", 0);; 195 PrintLogo(lite);; 196 }; 197 ; 198 // Explicitly load libMathCore it cannot be auto-loaded it when using one; 199 // of its freestanding functions. Once functions can trigger autoloading we; 200 // can get rid of this.; 201 if (!gClassTable->GetDict(""TRandom"")); 202 gSystem->Load(""libMathCore"");; 203 ; 204 if (!gInterpreter->HasPCMForLibrary(""std"")) {; 205 // Load some frequently used includes; 206 Int_t includes = gEnv->GetValue(""Rint.Includes"", 1);; 207 // When the interactive ROOT starts, it can automatically load some frequently; 208 // used includes. However, this introduces several overheads; 209 // -The initialisation takes more time; 210 // -Memory overhead when including <vector>; 211 // In $ROOTSYS/etc/system.rootrc, you can set the variable Rint.Includes to 0; 212 // to disable the loading of these includes at startup.; 213 // You can set the variable to 1 (default) to load only <iostream>, <string> and <DllImport.h>; 214 // You can set it to 2 to load in addition <vector> and <utility>; 215 // We strongly recommend setting the variable to 2 if your scripts include <vector>; 216 // and you execute your scripts multiple times.; 217 if (includes > 0) {; 218 TString code;; 219 code = ""#include <iostream>\n""; 220 ""#include <string>\n"" // for std::string std::iostream.; 221 ""#include <DllImport.h>\n"";// Defined R__EXTERN; 222 if (includes > 1) {; 223 code += ""#include <vector>\n""; 224 ""#include <utility>"";; 225 }; 226 ProcessLine(code, kTRUE);; 227 }; 228 }; 229 ; 230 //",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRint_8cxx_source.html:6689,load,load,6689,doc/master/TRint_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TRint_8cxx_source.html,1,['load'],['load']
Performance," as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; Optimisation interface; These functions allow RooFit to optimise a computation graph, to keep track of cached values, and to invalidate caches. . virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Inte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:20899,cache,cached,20899,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,2,['cache'],"['cached', 'caches']"
Performance," as an integer to version code as used in RVersion.h.Definition TROOT.cxx:2930; TROOT::ResetClassSavedvoid ResetClassSaved()Reset the ClassSaved status of all classes.Definition TROOT.cxx:1096; TROOT::GetTTFFontDirstatic const TString & GetTTFFontDir()Get the fonts directory in the installation. Static utility function.Definition TROOT.cxx:3189; TROOT::fForceStyleBool_t fForceStyleForce setting of current style when reading objects.Definition TROOT.h:133; TROOT::MakeDefCanvasTCanvas * MakeDefCanvas() constReturn a default canvas.Definition TROOT.cxx:1554; TROOT::fTypesTCollection * fTypesList of data types definition.Definition TROOT.h:141; TROOT::GetColorTColor * GetColor(Int_t color) constReturn address of color with index color.Definition TROOT.cxx:1536; TROOT::GetGlobalTGlobal * GetGlobal(const char *name, Bool_t load=kFALSE) constReturn pointer to global variable by name.Definition TROOT.cxx:1631; TROOT::FindSTLClassTClass * FindSTLClass(const char *name, Bool_t load, Bool_t silent=kFALSE) constreturn a TClass object corresponding to 'name' assuming it is an STL container.Definition TROOT.cxx:1484; TROOT::fStreamerInfoTSeqCollection * fStreamerInfoList of active StreamerInfo classes.Definition TROOT.h:159; TROOT::Appendvoid Append(TObject *obj, Bool_t replace=kFALSE) overrideAppend object to this directory.Definition TROOT.cxx:1047; TROOT::GetIconPathstatic const TString & GetIconPath()Get the icon path in the installation. Static utility function.Definition TROOT.cxx:3168; TROOT::GetListOfGlobalFunctionsTCollection * GetListOfGlobalFunctions(Bool_t load=kFALSE)Return list containing the TFunctions currently defined.Definition TROOT.cxx:1826; TROOT::fGitDateTString fGitDateDate and time when make was run.Definition TROOT.h:122; TROOT::fSpecialsTSeqCollection * fSpecialsList of special objects.Definition TROOT.h:156; TROOT::GetListOfFunctionTemplatesTCollection * GetListOfFunctionTemplates()Definition TROOT.cxx:1771; TROOT::RegisterModulestatic void RegisterModu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8cxx_source.html:150286,load,load,150286,doc/v632/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8cxx_source.html,1,['load'],['load']
Performance," as an integer to version code as used in RVersion.h.Definition TROOT.cxx:2934; TROOT::ResetClassSavedvoid ResetClassSaved()Reset the ClassSaved status of all classes.Definition TROOT.cxx:1096; TROOT::GetTTFFontDirstatic const TString & GetTTFFontDir()Get the fonts directory in the installation. Static utility function.Definition TROOT.cxx:3193; TROOT::fForceStyleBool_t fForceStyleForce setting of current style when reading objects.Definition TROOT.h:133; TROOT::MakeDefCanvasTCanvas * MakeDefCanvas() constReturn a default canvas.Definition TROOT.cxx:1554; TROOT::fTypesTCollection * fTypesList of data types definition.Definition TROOT.h:141; TROOT::GetColorTColor * GetColor(Int_t color) constReturn address of color with index color.Definition TROOT.cxx:1536; TROOT::GetGlobalTGlobal * GetGlobal(const char *name, Bool_t load=kFALSE) constReturn pointer to global variable by name.Definition TROOT.cxx:1631; TROOT::FindSTLClassTClass * FindSTLClass(const char *name, Bool_t load, Bool_t silent=kFALSE) constreturn a TClass object corresponding to 'name' assuming it is an STL container.Definition TROOT.cxx:1484; TROOT::fStreamerInfoTSeqCollection * fStreamerInfoList of active StreamerInfo classes.Definition TROOT.h:159; TROOT::Appendvoid Append(TObject *obj, Bool_t replace=kFALSE) overrideAppend object to this directory.Definition TROOT.cxx:1047; TROOT::GetIconPathstatic const TString & GetIconPath()Get the icon path in the installation. Static utility function.Definition TROOT.cxx:3172; TROOT::GetListOfGlobalFunctionsTCollection * GetListOfGlobalFunctions(Bool_t load=kFALSE)Return list containing the TFunctions currently defined.Definition TROOT.cxx:1826; TROOT::fGitDateTString fGitDateDate and time when make was run.Definition TROOT.h:122; TROOT::fSpecialsTSeqCollection * fSpecialsList of special objects.Definition TROOT.h:156; TROOT::GetListOfFunctionTemplatesTCollection * GetListOfFunctionTemplates()Definition TROOT.cxx:1771; TROOT::RegisterModulestatic void RegisterModu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:150462,load,load,150462,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,1,['load'],['load']
Performance," as color boxes; The supported option is:. ""GLCOL"" ; H3 is drawn using semi-transparent colored boxes.; See $ROOTSYS/tutorials/gl/glvox1.C. TH3 as boxes (spheres); The supported options are:. ""GLBOX"" ; TH3 as a set of boxes, size of box is proportional to bin content. ""GLBOX1""; The same as ""glbox"", but spheres are drawn instead of boxes. TH3 as iso-surface(s); The supported option is:. ""GLISO"" ; TH3 is drawn using iso-surfaces. TF3 (implicit function); The supported option is:. ""GLTF3"" ; Draw a TF3. Parametric surfaces; $ROOTSYS/tutorials/gl/glparametric.C shows how to create parametric; equations and visualize the surface.; Interaction with the plots; All the interactions are implemented via standard methods; DistancetoPrimitive() and ExecuteEvent(). That's why all the; interactions with the OpenGL plots are possible only when the mouse cursor is; in the plot's area (the plot's area is the part of a the pad occupied by; gl-produced picture). If the mouse cursor is not above gl-picture, the standard; pad interaction is performed.; Selectable parts; Different parts of the plot can be selected:. xoz, yoz, xoy back planes:; When such a plane selected, it's highlighted in green if the; dynamic slicing by this plane is supported, and it's; highlighted in red, if the dynamic slicing is not supported.; The plot itself:; On surfaces, the selected surface is outlined in red. (TF3 and; ISO are not outlined). On lego plots, the selected bin is; highlighted. The bin number and content are displayed in pad's; status bar. In box plots, the box or sphere is highlighted and; the bin info is displayed in pad's status bar. Rotation and zooming. Rotation:; When the plot is selected, it can be rotated by pressing and; holding the left mouse button and move the cursor.; Zoom/Unzoom:; Mouse wheel or 'j', 'J', 'k', 'K' keys. Panning; The selected plot can be moved in a pad's area by pressing and; holding the left mouse button and the shift key.; Box cut; Surface, iso, box, TF3 and parametr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/THistPainter.html:81022,perform,performed,81022,root/html604/THistPainter.html,https://root.cern,https://root.cern/root/html604/THistPainter.html,1,['perform'],['performed']
Performance," asynchronous open functionality need to override this method to run the appropriate checks before calling this standard initialization part. See TNetXNGFile::Init for an example. ; Reimplemented from TFile.; Definition at line 677 of file TDavixFile.cxx. ◆ IsA(). virtual TClass * TDavixFile::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 128 of file TDavixFile.h. ◆ ReadBuffer() [1/2]. Bool_t TDavixFile::ReadBuffer ; (; char * ; buf, . Int_t ; len . ). virtual . Read specified byte range from remote file via HTTP. ; Returns kTRUE in case of error. ; Reimplemented from TFile.; Definition at line 737 of file TDavixFile.cxx. ◆ ReadBuffer() [2/2]. Bool_t TDavixFile::ReadBuffer ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Read a buffer from the file at the offset 'pos' in the file. ; Returns kTRUE in case of failure. Compared to ReadBuffer(char*, Int_t), this routine does not change the cursor on the physical file representation (fD) if the data is in this TFile's cache. ; Reimplemented from TFile.; Definition at line 756 of file TDavixFile.cxx. ◆ ReadBufferAsync(). Bool_t TDavixFile::ReadBufferAsync ; (; Long64_t ; offs, . Int_t ; len . ). virtual . Reimplemented from TFile.; Definition at line 774 of file TDavixFile.cxx. ◆ ReadBuffers(). Bool_t TDavixFile::ReadBuffers ; (; char * ; buf, . Long64_t * ; pos, . Int_t * ; len, . Int_t ; nbuf . ). virtual . Read the nbuf blocks described in arrays pos and len. ; The value pos[i] is the seek position of block i of length len[i]. Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer. This function is overloaded by TNetFile, TWebFile, etc. Returns kTRUE in case of failure. ; Reimplemented from TFile.; Definition at line 790 of file TDavixFile.cxx. ◆ Seek(). void TDavixFile::Seek ; (; Long64_t ; offset, . ERelativeTo ; pos = kBeg . ). virtual . Set position from where to start reading. ; Reimplemented from TFile.; Defi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDavixFile.html:46229,cache,cache,46229,doc/master/classTDavixFile.html,https://root.cern,https://root.cern/doc/master/classTDavixFile.html,1,['cache'],['cache']
Performance," at line 223 of file TROOT.h. ◆ GetGitDate(). const char * TROOT::GetGitDate ; (; ). Return date/time make was run. ; Definition at line 2474 of file TROOT.cxx. ◆ GetGlobal() [1/2]. TGlobal * TROOT::GetGlobal ; (; const char * ; name, . Bool_t ; load = kFALSE . ); const. Return pointer to global variable by name. ; If load is true force reading of all currently defined globals from CINT (more expensive). ; Definition at line 1631 of file TROOT.cxx. ◆ GetGlobal() [2/2]. TGlobal * TROOT::GetGlobal ; (; const TObject * ; obj, . Bool_t ; load = kFALSE . ); const. Return pointer to global variable with address addr. ; Definition at line 1639 of file TROOT.cxx. ◆ GetGlobalFunction(). TFunction * TROOT::GetGlobalFunction ; (; const char * ; function, . const char * ; params = nullptr, . Bool_t ; load = kFALSE . ). Return pointer to global function by name. ; If params != 0 it will also resolve overloading other it returns the first name match. If params == 0 and load is true force reading of all currently defined global functions from Cling. The param string must be of the form: ""3189,\""aap\"",1.3"". ; Definition at line 1685 of file TROOT.cxx. ◆ GetGlobalFunctions(). TListOfFunctions * TROOT::GetGlobalFunctions ; (; ). protected . Internal routine returning, and creating if necessary, the list of global function. ; Definition at line 1663 of file TROOT.cxx. ◆ GetGlobalFunctionWithPrototype(). TFunction * TROOT::GetGlobalFunctionWithPrototype ; (; const char * ; function, . const char * ; proto = nullptr, . Bool_t ; load = kFALSE . ). Return pointer to global function by name. ; If proto != 0 it will also resolve overloading. If load is true force reading of all currently defined global functions from CINT (more expensive). The proto string must be of the form: ""int, char*, float"". ; Definition at line 1718 of file TROOT.cxx. ◆ GetIconPath(). const TString & TROOT::GetIconPath ; (; ). static . Get the icon path in the installation. Static utility function. ; Definition at li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTROOT.html:53059,load,load,53059,doc/v632/classTROOT.html,https://root.cern,https://root.cern/doc/v632/classTROOT.html,2,['load'],['load']
Performance," at line 228 of file TWebCanvas.cxx. ◆ AddSendQueue(). void TWebCanvas::AddSendQueue ; (; unsigned ; connid, . const std::string & ; msg . ). protected . Add message to send queue for specified connection If connid == 0, message will be add to all connections. ; Definition at line 1187 of file TWebCanvas.cxx. ◆ AssignStatusBits(). void TWebCanvas::AssignStatusBits ; (; UInt_t ; bits). protected . Assign clients bits. ; Definition at line 1472 of file TWebCanvas.cxx. ◆ BatchImageMode(). void TWebCanvas::BatchImageMode ; (; UInt_t ; n = 100). static . Configure batch image mode for web graphics. ; Allows to process many images with single headless browser invocation and increase performance of image production. When many canvases are stored as image in difference places, they first collected in batch and then processed when at least n images are prepared. Only then headless browser invoked and create all these images at once. This allows to significantly increase performance of image production in web mode ; Definition at line 156 of file TWebCanvas.cxx. ◆ CalculateColorsHash(). UInt_t TWebCanvas::CalculateColorsHash ; (; ). protected . Calculate hash function for all colors and palette. ; Definition at line 559 of file TWebCanvas.cxx. ◆ CanCreateObject(). virtual Bool_t TWebCanvas::CanCreateObject ; (; const std::string & ; ). inlineprotectedvirtual . Definition at line 170 of file TWebCanvas.h. ◆ CheckCanvasModified(). Bool_t TWebCanvas::CheckCanvasModified ; (; bool ; force_modified = false). protected . Check if any pad on the canvas was modified If yes, increment version of correspondent pad Returns true when canvas really modified. ; Definition at line 2244 of file TWebCanvas.cxx. ◆ CheckDataToSend(). Bool_t TWebCanvas::CheckDataToSend ; (; unsigned ; connid = 0). protected . Check if any data should be send to client If connid != 0, only selected connection will be checked. ; Definition at line 1200 of file TWebCanvas.cxx. ◆ CheckPadModified(). void TWebCanvas::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebCanvas.html:21387,perform,performance,21387,doc/master/classTWebCanvas.html,https://root.cern,https://root.cern/doc/master/classTWebCanvas.html,1,['perform'],['performance']
Performance," at line 271 of file RLoopManager.hxx. ◆ GetUniqueVariationsWithReaders(). std::set< std::pair< std::string_view, std::unique_ptr< ROOT::Internal::RDF::RVariationsWithReaders > > > & ROOT::Detail::RDF::RLoopManager::GetUniqueVariationsWithReaders ; (; ). inline . Definition at line 276 of file RLoopManager.hxx. ◆ HasDataSourceColumnReaders(). bool RLoopManager::HasDataSourceColumnReaders ; (; const std::string & ; col, . const std::type_info & ; ti . ); const. Return true if AddDataSourceColumnReaders was called for column name col. ; Definition at line 1103 of file RLoopManager.cxx. ◆ IncrChildrenCount(). void ROOT::Detail::RDF::RLoopManager::IncrChildrenCount ; (; ). inlinefinalvirtual . Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 235 of file RLoopManager.hxx. ◆ InitNodes(). void RLoopManager::InitNodes ; (; ). private . Initialize all nodes of the functional graph before running the event loop. ; This method is called once per event-loop and performs generic initialization operations that do not depend on the specific processing slot (i.e. operations that are common for all threads). ; Definition at line 791 of file RLoopManager.cxx. ◆ InitNodeSlots(). void RLoopManager::InitNodeSlots ; (; TTreeReader * ; r, . unsigned int ; slot . ). private . Build TTreeReaderValues for all nodes This method loops over all filters, actions and other booked objects and calls their InitSlot method, to get them ready for running a task. ; Definition at line 728 of file RLoopManager.cxx. ◆ Jit(). void RLoopManager::Jit ; (; ). Add RDF nodes that require just-in-time compilation to the computation graph. ; This method also clears the contents of GetCodeToJit(). ; Definition at line 848 of file RLoopManager.cxx. ◆ JitDeclarations(). void ROOT::Detail::RDF::RLoopManager::JitDeclarations ; (; ). ◆ operator=() [1/2]. RLoopManager & ROOT::Detail::RDF::RLoopManager::operator= ; (; const RLoopManager & ; ). delete . ◆ operator=() [2/2]. RLoopManager & ROOT::Detail::RDF::RL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html:21228,perform,performs,21228,doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html,1,['perform'],['performs']
Performance," at line 457 of file TClass.h. ◆ GetImplFileName(). const char * TClass::GetImplFileName ; (; ); const. inline . Definition at line 456 of file TClass.h. ◆ GetInstanceCount(). UInt_t TClass::GetInstanceCount ; (; ); const. inline . Definition at line 466 of file TClass.h. ◆ GetIsAProxy(). TVirtualIsAProxy * TClass::GetIsAProxy ; (; ); const. Return the proxy implementing the IsA functionality. ; Definition at line 2955 of file TClass.cxx. ◆ GetLastReadInfo(). TVirtualStreamerInfo * TClass::GetLastReadInfo ; (; ); const. inline . Definition at line 444 of file TClass.h. ◆ GetListOfAllPublicDataMembers(). TList * TClass::GetListOfAllPublicDataMembers ; (; Bool_t ; load = kTRUE). Returns a list of all public data members of this class and its base classes. ; Refers to a subset of the data members in GetListOfDatamembers() so don't do GetListOfAllPublicDataMembers()->Delete(). ; Definition at line 3862 of file TClass.cxx. ◆ GetListOfAllPublicMethods(). const TList * TClass::GetListOfAllPublicMethods ; (; Bool_t ; load = kTRUE). Returns a list of all public methods of this class and its base classes. ; Refers to a subset of the methods in GetListOfMethods() so don't do GetListOfAllPublicMethods()->Delete(). Algorithm used to get the list is:; put all methods of the class in the list (also protected and private ones).; loop over all base classes and add only those methods not already in the list (also protected and private ones).; once finished, loop over resulting list and remove all private and protected methods. . Definition at line 3845 of file TClass.cxx. ◆ GetListOfBases(). TList * TClass::GetListOfBases ; (; ). Return list containing the TBaseClass(es) of a class. ; Definition at line 3636 of file TClass.cxx. ◆ GetListOfDataMembers(). TList * TClass::GetListOfDataMembers ; (; Bool_t ; load = kTRUE). Return list containing the TDataMembers of a class. ; Definition at line 3770 of file TClass.cxx. ◆ GetListOfEnums(). TList * TClass::GetListOfEnums ; (; Bool_t ; reques",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:81372,load,load,81372,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,1,['load'],['load']
Performance," at line 457 of file TClass.h. ◆ GetImplFileName(). const char * TClass::GetImplFileName ; (; ); const. inline . Definition at line 456 of file TClass.h. ◆ GetInstanceCount(). UInt_t TClass::GetInstanceCount ; (; ); const. inline . Definition at line 466 of file TClass.h. ◆ GetIsAProxy(). TVirtualIsAProxy * TClass::GetIsAProxy ; (; ); const. Return the proxy implementing the IsA functionality. ; Definition at line 3022 of file TClass.cxx. ◆ GetLastReadInfo(). TVirtualStreamerInfo * TClass::GetLastReadInfo ; (; ); const. inline . Definition at line 444 of file TClass.h. ◆ GetListOfAllPublicDataMembers(). TList * TClass::GetListOfAllPublicDataMembers ; (; Bool_t ; load = kTRUE). Returns a list of all public data members of this class and its base classes. ; Refers to a subset of the data members in GetListOfDatamembers() so don't do GetListOfAllPublicDataMembers()->Delete(). ; Definition at line 3929 of file TClass.cxx. ◆ GetListOfAllPublicMethods(). const TList * TClass::GetListOfAllPublicMethods ; (; Bool_t ; load = kTRUE). Returns a list of all public methods of this class and its base classes. ; Refers to a subset of the methods in GetListOfMethods() so don't do GetListOfAllPublicMethods()->Delete(). Algorithm used to get the list is:; put all methods of the class in the list (also protected and private ones).; loop over all base classes and add only those methods not already in the list (also protected and private ones).; once finished, loop over resulting list and remove all private and protected methods. . Definition at line 3912 of file TClass.cxx. ◆ GetListOfBases(). TList * TClass::GetListOfBases ; (; ). Return list containing the TBaseClass(es) of a class. ; Definition at line 3703 of file TClass.cxx. ◆ GetListOfDataMembers(). TList * TClass::GetListOfDataMembers ; (; Bool_t ; load = kTRUE). Return list containing the TDataMembers of a class. ; Definition at line 3837 of file TClass.cxx. ◆ GetListOfEnums(). TList * TClass::GetListOfEnums ; (; Bool_t ; reques",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClass.html:81373,load,load,81373,doc/master/classTClass.html,https://root.cern,https://root.cern/doc/master/classTClass.html,1,['load'],['load']
Performance," attributes defined. const std::set<std::string>& transientAttributes() const; Return set of transient boolean attributes. Bool_t isConstant() const; Returns true if 'Constant' attribute is set. Bool_t IsSortable() const; Object is sortable in ROOT container class. Bool_t operator==(const RooAbsArg& other). Bool_t inRange(const char* ) const; Range management. Bool_t hasRange(const char* ) const; Has this argument a defined range (dummy interface always returns flase). Bool_t isShapeDirty() const; Dirty state accessor. Bool_t isValueDirty() const; Returns true of value has been invalidated by server value change. OperMode operMode() const; { return _operMode==AClean ? (flipAClean() ? ADirty : AClean ) : _operMode ; }. const RooArgSet* ownedComponents() const; { return _ownedComponents ; }. void setProhibitServerRedirect(Bool_t flag); { _prohibitServerRedirect = flag ; }. void operModeHook(); friend class RooSimCloneTool ;. {}. void optimizeDirtyHook(const RooArgSet* ); {}. void getParametersHook(const RooArgSet* , RooArgSet* , Bool_t ) const; {}. void getObservablesHook(const RooArgSet* , RooArgSet* ) const; {}. void setValueDirty() const; Dirty state modifiers. { setValueDirty(0) ; }. void setShapeDirty() const; { setShapeDirty(0) ; }. void clearValueDirty() const. void clearShapeDirty() const. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); { return kFALSE ; }. void serverNameChangeHook(const RooAbsArg* , const RooAbsArg* ); { }. void setExpensiveObjectCache(RooExpensiveObjectCache& cache); { _eocache = &cache ; }. void syncCache(const RooArgSet* nset = 0). void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE). void setTreeBranchStatus(TTree& t, Bool_t active). void fillTreeBranch(TTree& t). » Last changed: Mon Dec 7 13:45:31 2009 » Last generated: 2009-12-07 13:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsArg.html:40595,cache,cache,40595,root/html526/RooAbsArg.html,https://root.cern,https://root.cern/root/html526/RooAbsArg.html,2,['cache'],['cache']
Performance," attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; TVectorD_frac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; Int_t_ixmax; Int_t_ixmin; Int_t_iymax; Int_t_iymin; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TMatrixD_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Roo2DMomentMorphFunction.html:34702,cache,cache,34702,root/html534/Roo2DMomentMorphFunction.html,https://root.cern,https://root.cern/root/html534/Roo2DMomentMorphFunction.html,2,['cache'],['cache']
Performance," attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManagerRooAbsCachedPdf::_cacheMgrThe cache manager ; RooSetProxy_cacheObsObservable to be cached; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_tRooAbsCachedPdf::_ipOrderInterpolation order for cache histograms ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCachedPdf.html:37830,cache,cache,37830,root/html526/RooCachedPdf.html,https://root.cern,https://root.cern/root/html526/RooCachedPdf.html,4,['cache'],['cache']
Performance," automatically identified as such; and will be precalculated when fitting to a dataset. By forcibly precalculating functions with non-trivial Jacobians,; or functions of multiple variables occurring in the data set,; using addColumn(), you may alter the outcome of the fit. Only in cases where such a modification of fit behaviour is intentional,; this function should be used. RooArgSet* addColumns(const RooArgList& varList); Utility function to add multiple columns in one call; See addColumn() for details. RooAbsDataStore* merge(const RooArgSet& allvars, list<RooAbsDataStore*> dstoreList); Merge columns of supplied data set(s) with this data set. All; data sets must have equal number of entries. In case of; duplicate columns the column of the last dataset in the list; prevails. void append(RooAbsDataStore& other). Int_t numEntries() const. void reset(). void cacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0); Cache given RooAbsArgs with this tree: The tree is; given direct write access of the args internal cache; the args values is pre-calculated for all data points; in this data collection. Upon a get() call, the; internal cache of 'newVar' will be loaded with the; precalculated value and it's dirty flag will be cleared. void recalculateCache(). void attachCache(const RooAbsArg* newOwner, const RooArgSet& cachedVars); Initialize cache of dataset: attach variables of cache ArgSet; to the corresponding TTree branches. void resetCache(). void setArgStatus(const RooArgSet& set, Bool_t active); Disabling of branches is (intentionally) not implemented in vector; data stores (as the doesn't result in a net saving of time). void attachBuffers(const RooArgSet& extObs). void resetBuffers(). void dump(). void Streamer(TBuffer& b); Stream an object of class RooVectorDataStore. RooAbsDataStore* clone(const char* newname = 0) const; { return new RooVectorDataStore(*this,newname) ; }. RooAbsDataStore* clone(const RooArgSet& vars, const char* newname = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooVectorDataStore.html:15256,cache,cacheArgs,15256,root/html532/RooVectorDataStore.html,https://root.cern,https://root.cern/root/html532/RooVectorDataStore.html,2,['cache'],"['cache', 'cacheArgs']"
Performance," automatically identified as such; and will be precalculated when fitting to a dataset. By forcibly precalculating functions with non-trivial Jacobians,; or functions of multiple variables occurring in the data set,; using addColumn(), you may alter the outcome of the fit. Only in cases where such a modification of fit behaviour is intentional,; this function should be used. RooArgSet* addColumns(const RooArgList& varList); Utility function to add multiple columns in one call; See addColumn() for details. RooAbsDataStore* merge(const RooArgSet& allvars, list<RooAbsDataStore*> dstoreList); Merge columns of supplied data set(s) with this data set. All; data sets must have equal number of entries. In case of; duplicate columns the column of the last dataset in the list; prevails. void append(RooAbsDataStore& other). Int_t numEntries() const. void reset(). void cacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0); Cache given RooAbsArgs with this tree: The tree is; given direct write access of the args internal cache; the args values is pre-calculated for all data points; in this data collection. Upon a get() call, the; internal cache of 'newVar' will be loaded with the; precalculated value and it's dirty flag will be cleared. void setArgStatus(const RooArgSet& set, Bool_t active); Activate or deactivate the branch status of the TTree branch associated; with the given set of dataset observables. void resetCache(); Remove tree with values of cached observables; and clear list of cached observables. void checkInit() const. Stat_t GetEntries() const; Interface function to TTree::GetEntries. void Reset(Option_t* option = 0); Interface function to TTree::Reset. Int_t Fill(); Interface function to TTree::Fill. Int_t GetEntry(Int_t entry = 0, Int_t getall = 0); Interface function to TTree::GetEntry. void Draw(Option_t* option = """"). void Streamer(TBuffer& b); Stream an object of class RooTreeDataStore. RooAbsDataStore* clone(const RooArgSet& vars, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooTreeDataStore.html:16317,cache,cacheArgs,16317,root/html526/RooTreeDataStore.html,https://root.cern,https://root.cern/root/html526/RooTreeDataStore.html,6,['cache'],"['cache', 'cacheArgs']"
Performance," based on treename and filename. This is mostly useful when the TEntryList has multiple sublists for the same tree and filename. . Exceptions. std::runtime_errorIf option ""sync"" was chosen and either:; elist doesn't have sub entry lists.; the number of sub entry lists in elist is different than the number of trees in the chain.; any of the sub entry lists in elist doesn't correspond to the tree of the chain with the same index (i.e. it doesn't share the same tree name and file name). This function finds correspondence between the sub-lists of the TEntryList and the trees of the TChain. ; Reimplemented from TTree.; Definition at line 2677 of file TChain.cxx. ◆ SetEntryListFile(). void TChain::SetEntryListFile ; (; const char * ; filename = """", . Option_t * ; opt = """" . ). virtual . Set the input entry list (processing the entries of the chain will then be limited to the entries in the list). ; This function creates a special kind of entry list (TEntryListFromFile object) that loads lists, corresponding to the chain elements, one by one, so that only one list is in memory at a time.; If there is an error opening one of the files, this file is skipped and the next file is loaded; File naming convention:. by default, filename_elist.root is used, where filename is the name of the chain element; xxx$xxx.root - $ sign is replaced by the name of the chain element. If the list name is not specified (by passing filename_elist.root/listname to the TChain::SetEntryList() function, the first object of class TEntryList in the file is taken.; It is assumed, that there are as many list files, as there are elements in the chain and they are in the same order ; Definition at line 2822 of file TChain.cxx. ◆ SetEventList(). void TChain::SetEventList ; (; TEventList * ; evlist). overridevirtual . This function transfroms the given TEventList into a TEntryList. ; NOTE, that this function loads all tree headers, because the entry numbers in the TEventList are global and have to be recompu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTChain.html:99105,load,loads,99105,doc/v632/classTChain.html,https://root.cern,https://root.cern/doc/v632/classTChain.html,1,['load'],['loads']
Performance," based on treename and filename. This is mostly useful when the TEntryList has multiple sublists for the same tree and filename. . Exceptions. std::runtime_errorIf option ""sync"" was chosen and either:; elist doesn't have sub entry lists.; the number of sub entry lists in elist is different than the number of trees in the chain.; any of the sub entry lists in elist doesn't correspond to the tree of the chain with the same index (i.e. it doesn't share the same tree name and file name). This function finds correspondence between the sub-lists of the TEntryList and the trees of the TChain. ; Reimplemented from TTree.; Definition at line 2703 of file TChain.cxx. ◆ SetEntryListFile(). void TChain::SetEntryListFile ; (; const char * ; filename = """", . Option_t * ; opt = """" . ). virtual . Set the input entry list (processing the entries of the chain will then be limited to the entries in the list). ; This function creates a special kind of entry list (TEntryListFromFile object) that loads lists, corresponding to the chain elements, one by one, so that only one list is in memory at a time.; If there is an error opening one of the files, this file is skipped and the next file is loaded; File naming convention:. by default, filename_elist.root is used, where filename is the name of the chain element; xxx$xxx.root - $ sign is replaced by the name of the chain element. If the list name is not specified (by passing filename_elist.root/listname to the TChain::SetEntryList() function, the first object of class TEntryList in the file is taken.; It is assumed, that there are as many list files, as there are elements in the chain and they are in the same order ; Definition at line 2848 of file TChain.cxx. ◆ SetEventList(). void TChain::SetEventList ; (; TEventList * ; evlist). overridevirtual . This function transfroms the given TEventList into a TEntryList. ; NOTE, that this function loads all tree headers, because the entry numbers in the TEventList are global and have to be recompu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTChain.html:99726,load,loads,99726,doc/master/classTChain.html,https://root.cern,https://root.cern/doc/master/classTChain.html,1,['load'],['loads']
Performance," batch. ;  . Private Types; using BatchIterator_t = TTensorBatchIterator< Data_t, Architecture_t >;  ; using DeviceBuffer_t = typename Architecture_t::DeviceBuffer_t;  ; using HostBuffer_t = typename Architecture_t::HostBuffer_t;  ; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Shape_t = typename Architecture_t::Tensor_t::Shape_t;  ; using Tensor_t = typename Architecture_t::Tensor_t;  . Private Attributes; size_t fBatchDepth;  The number of matrices in the tensor. ;  ; size_t fBatchHeight;  The number od rows in each matrix. ;  ; size_t fBatchIndex;  The index of the batch when there are multiple batches in parallel. ;  ; size_t fBatchSize;  The size of a batch. ;  ; size_t fBatchWidth;  The number of columns in each matrix. ;  ; const Data_t & fData;  The data that should be loaded in the batches. ;  ; std::vector< DeviceBuffer_t > fDeviceBuffers;  The device buffers used to keep the input, output and weight data. ;  ; std::vector< HostBuffer_t > fHostBuffers;  The host buffers used to load the input, output and weight data. ;  ; Shape_t fInputLayout;  The input data layout (does not include batch size) ;  ; size_t fNOutputFeatures;  The number of outputs from the classifier/regressor. ;  ; size_t fNSamples;  The total number of samples in the dataset. ;  ; size_t fNStreams;  Number of buffer pairs. ;  ; std::vector< size_t > fSampleIndices;  Ordering of the samples in the epoch. ;  . #include <TMVA/DNN/TensorDataLoader.h>; Member Typedef Documentation. ◆ BatchIterator_t. template<typename Data_t , typename Architecture_t > . using TMVA::DNN::TTensorDataLoader< Data_t, Architecture_t >::BatchIterator_t = TTensorBatchIterator<Data_t, Architecture_t>. private . Definition at line 140 of file TensorDataLoader.h. ◆ DeviceBuffer_t. template<typename Data_t , typename Architecture_t > . using TMVA::DNN::TTensorDataLoader< Data_t, Architecture_t >::DeviceBuffer_t = typename Architecture_t::DeviceBuffer_t. private . Definition at line 136 of file TensorDataL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TTensorDataLoader.html:7784,load,load,7784,doc/master/classTMVA_1_1DNN_1_1TTensorDataLoader.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TTensorDataLoader.html,1,['load'],['load']
Performance," be available through the function; 2792/// TSystem::SetIncludePath().; 2793/// A good default will be provided so that a typical user session should be at; 2794/// most:; 2795/// ~~~ {.cpp}; 2796/// root[1] gSystem->SetIncludePath(""-I$ROOTSYS/include; 2797/// -I$HOME/mypackage/include"");; 2798/// root[2] .x myfunc.C++(10,20);; 2799/// ~~~; 2800/// The user may sometimes try to compile a script before it has loaded all the; 2801/// needed shared libraries. In this case we want to be helpful and output a; 2802/// list of the unresolved symbols. So if the loading of the created shared; 2803/// library fails, we will try to build a executable that contains the; 2804/// script. The linker should then output a list of missing symbols.; 2805///; 2806/// To support this we provide a TSystem::SetMakeExe() function, that sets the; 2807/// directive telling how to create an executable. The loader will need; 2808/// to be informed of all the libraries available. The information about; 2809/// the libraries that has been loaded by .L and TSystem::Load() is accessible; 2810/// to the script compiler. However, the information about; 2811/// the libraries that have been selected at link time by the application; 2812/// builder (like the root libraries for root.exe) are not available and need; 2813/// to be explicitly listed in fLinkedLibs (either by default or by a call to; 2814/// TSystem::SetLinkedLibs()).; 2815///; 2816/// To simplify customization we could also add to the .rootrc support for the; 2817/// variables; 2818/// ~~~ {.cpp}; 2819/// Unix.*.Root.IncludePath: -I$ROOTSYS/include; 2820/// WinNT.*.Root.IncludePath: -I%ROOTSYS%/include; 2821///; 2822/// Unix.*.Root.LinkedLibs: -L$ROOTSYS/lib -lBase ....; 2823/// WinNT.*.Root.LinkedLibs: %ROOTSYS%/lib/*.lib msvcrt.lib ....; 2824/// ~~~; 2825/// And also support for MakeSharedLibs() and MakeExe().; 2826///; 2827/// (the ... have to be replaced by the actual values and are here only to; 2828/// shorten this comment).; 2829///;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:92656,load,loaded,92656,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['load'],['loaded']
Performance," be casted to MethodCategory. /Factory""; 435 << Endl; // DSMTEST; 436 return nullptr;; 437 }; 438 if (fModelPersistence); 439 methCat->SetWeightFileDir(fileDir);; 440 methCat->SetModelPersistence(fModelPersistence);; 441 methCat->fDataSetManager = loader->GetDataSetInfo().GetDataSetManager(); // DSMTEST; 442 methCat->SetFile(fgTargetFile);; 443 methCat->SetSilentFile(IsSilentFile());; 444 } // DSMTEST; 445 ; 446 if (!method->HasAnalysisType(fAnalysisType, loader->GetDataSetInfo().GetNClasses(),; 447 loader->GetDataSetInfo().GetNTargets())) {; 448 Log() << kWARNING << ""Method "" << method->GetMethodTypeName() << "" is not capable of handling "";; 449 if (fAnalysisType == Types::kRegression) {; 450 Log() << ""regression with "" << loader->GetDataSetInfo().GetNTargets() << "" targets."" << Endl;; 451 } else if (fAnalysisType == Types::kMulticlass) {; 452 Log() << ""multiclass classification with "" << loader->GetDataSetInfo().GetNClasses() << "" classes."" << Endl;; 453 } else {; 454 Log() << ""classification with "" << loader->GetDataSetInfo().GetNClasses() << "" classes."" << Endl;; 455 }; 456 return 0;; 457 }; 458 ; 459 if (fModelPersistence); 460 method->SetWeightFileDir(fileDir);; 461 method->SetModelPersistence(fModelPersistence);; 462 method->SetAnalysisType(fAnalysisType);; 463 method->SetupMethod();; 464 method->ParseOptions();; 465 method->ProcessSetup();; 466 method->SetFile(fgTargetFile);; 467 method->SetSilentFile(IsSilentFile());; 468 ; 469 // check-for-unused-options is performed; may be overridden by derived classes; 470 method->CheckSetup();; 471 ; 472 if (fMethodsMap.find(datasetname) == fMethodsMap.end()) {; 473 MVector *mvector = new MVector;; 474 fMethodsMap[datasetname] = mvector;; 475 }; 476 fMethodsMap[datasetname]->push_back(method);; 477 return method;; 478}; 479 ; 480////////////////////////////////////////////////////////////////////////////////; 481/// Books MVA method. The option configuration string is custom for each MVA; 482/// the TString field ""theN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:18853,load,loader,18853,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['load'],['loader']
Performance," be convolved ; [in]pdf2Second PDF to be convolved ; [in]ipOrderOrder for interpolation between bins (since FFT is discrete) The binning used for the FFT sampling is controlled by the binning named ""cache"" in the convolution observable convVar. If such a binning is not set, the same number of bins as for convVar will be used. . Definition at line 223 of file RooFFTConvPdf.cxx. ◆ RooFFTConvPdf() [3/4]. RooFFTConvPdf::RooFFTConvPdf ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; pdfConvVar, . RooRealVar & ; convVar, . RooAbsPdf & ; pdf1, . RooAbsPdf & ; pdf2, . Int_t ; ipOrder = 2 . ). Constructor for numerical (FFT) convolution of PDFs. ; Parameters. [in]nameName of this PDF ; [in]titleTitle for plotting this PDF ; [in]convVarObservable to convolve the PDFs in . AttentionUse a high number of bins (>= 1000) for good accuracy. ; Parameters. [in]pdf1First PDF to be convolved ; [in]pdf2Second PDF to be convolved ; [in]ipOrderOrder for interpolation between bins (since FFT is discrete) The binning used for the FFT sampling is controlled by the binning named ""cache"" in the convolution observable convVar. If such a binning is not set, the same number of bins as for convVar will be used. ; [in]pdfConvVarIf the variable used for convolution is a PDF, itself, pass the PDF here, and pass the convolution variable to convVar. See also rf210_angularconv.C in the roofit tutorials . Definition at line 248 of file RooFFTConvPdf.cxx. ◆ RooFFTConvPdf() [4/4]. RooFFTConvPdf::RooFFTConvPdf ; (; const RooFFTConvPdf & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 272 of file RooFFTConvPdf.cxx. ◆ ~RooFFTConvPdf(). RooFFTConvPdf::~RooFFTConvPdf ; (; ). override . Destructor. ; Definition at line 292 of file RooFFTConvPdf.cxx. Member Function Documentation. ◆ actualObservables(). RooFit::OwningPtr< RooArgSet > RooFFTConvPdf::actualObservables ; (; const RooArgSet & ; nset); const. overrideprotectedvirtual . Return the observables to be ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFFTConvPdf.html:86129,cache,cache,86129,doc/master/classRooFFTConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooFFTConvPdf.html,1,['cache'],['cache']
Performance," be evaluated; TH1D*fMvaBkgMVA distrituion for bakgr. events, used for spline fit; TH1D*fMvaBkgFineBinMVA distrituion for bakgr. events; TH1D*fMvaSigMVA distrituion for signal events, used for spline fit; TH1D*fMvaSigFineBinMVA distrituion for signal events; TStringfOptimizationFitTypewhich type of optimisation procedure to be used ; map<TString,TMVA::Interval>fTuneParametersparameters included in the tuning; map<TString,Double_t>fTunedParametersparameters included in the tuning. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; OptimizeConfigParameters(TMVA::MethodBase *const method, map<TString,TMVA::Interval> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); Constructor which sets either ""Classification or Regression"". ~OptimizeConfigParameters(); the destructor (delete the OptimizeConfigParameters, store the graph and .. delete it). std::map<TString,Double_t> optimize(). void optimizeScan(); do the actual optimization using a simple scan method,; i.e. calcualte the FOM for; different tuning paraemters and remember which one is; gave the best FOM. void optimizeFit(); ranges (intervals) in which the fit varies the parameters. Double_t EstimatorFunction(vector<Double_t>& ); return the estimator (from current FOM) for the fitting interface. Double_t GetFOM(); Return the Figure of Merit (FOM) used in the parameter; optimization process. void GetMVADists(); fill the private histograms with the mva distributinos for sig/bkg. Double_t GetSeparation(); return the searation between the signal and background; MVA ouput distribution. Double_t GetROCIntegral(); calculate the area (integral) under the ROC curve as a; overall quality measure of the classification. makeing pdfs out of the MVA-ouput distributions doesn't work; reliably for cases where the MVA-ouput isn't a smooth distribution.; this happens ""frequently"" in BDTs for example when the number of; trees is small resulting in only some discrete p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__OptimizeConfigParameters.html:2797,optimiz,optimizeScan,2797,root/html528/TMVA__OptimizeConfigParameters.html,https://root.cern,https://root.cern/root/html528/TMVA__OptimizeConfigParameters.html,2,['optimiz'],"['optimization', 'optimizeScan']"
Performance," be known to the ROOT interpreter.; This action is lazy: upon invocation of this method the calculation is booked but not executed. Also see RResultPtr. Examples; See this tutorial for an example implementation of an action helper.; It is also possible to inspect the code used by built-in RDataFrame actions at ActionHelpers.hxx. ; Definition at line 2984 of file RInterface.hxx. ◆ Cache() [1/4]. template<typename Proxied , typename DataSource = void> . template<typename... ColumnTypes> . RInterface< RLoopManager > ROOT::RDF::RInterface< Proxied, DataSource >::Cache ; (; const ColumnNames_t & ; columnList). inline . Save selected columns in memory. ; Template Parameters. ColumnTypesvariadic list of branch/column types. . Parameters. [in]columnListcolumns to be cached in memory. . Returnsa RDataFrame that wraps the cached dataset.; This action returns a new RDataFrame object, completely detached from the originating RDataFrame. The new dataframe only contains the cached columns and stores their content in memory for fast, zero-copy subsequent access.; Use Cache if you know you will only need a subset of the (Filtered) data that fits in memory and that will be accessed many times.; NoteCache will refuse to process columns with names of the form #columnname. These are special columns made available by some data sources (e.g. RNTupleDS) that represent the size of column columnname, and are not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an Alias(): df.Alias(""nbar"", ""#bar"").Cache<std::size_t>(..., {""nbar""}). Example usage:; Types and columns specified: auto cache_some_cols_df = df.Cache<double, MyClass, int>({""col0"", ""col1"", ""col2""});; double; Types inferred and columns specified (this invocation relies on jitting): auto cache_some_cols_df = df.Cache({""col0"", ""col1"", ""col2""});; Types inferred and columns selected with a regexp (this invocation relies on jitting): auto cache_all_cols_df = df.Cache(myRegexp);. Definitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:42304,cache,cached,42304,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['cache'],['cached']
Performance," be memory or disk-resident trees. The new tree is created in the current directory (memory if gROOT). ; Definition at line 6851 of file TTree.cxx. ◆ MoveReadCache(). void TTree::MoveReadCache ; (; TFile * ; src, . TDirectory * ; dir . ). protected . Move a cache from a file to the current file in dir. ; if src is null no operation is done, if dir is null or there is no current file the cache is deleted. ; Definition at line 6983 of file TTree.cxx. ◆ Notify(). bool TTree::Notify ; (; ). overridevirtual . Function called when loading a new class library. ; Reimplemented from TObject.; Definition at line 7033 of file TTree.cxx. ◆ operator=(). TTree & TTree::operator= ; (; const TTree & ; tt). delete . ◆ OptimizeBaskets(). void TTree::OptimizeBaskets ; (; ULong64_t ; maxMemory = 10000000, . Float_t ; minComp = 1.1, . Option_t * ; option = """" . ). virtual . This function may be called after having filled some entries in a Tree. ; Using the information in the existing branch buffers, it will reassign new branch buffer sizes to optimize time and memory.; The function computes the best values for branch buffer sizes such that the total buffer sizes is less than maxMemory and nearby entries written at the same time. In case the branch compression factor for the data written so far is less than compMin, the compression is disabled.; if option =""d"" an analysis report is printed. ; Definition at line 7057 of file TTree.cxx. ◆ Principal(). TPrincipal * TTree::Principal ; (; const char * ; varexp = """", . const char * ; selection = """", . Option_t * ; option = ""np"", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). Interface to the Principal Components Analysis class. ; Create an instance of TPrincipal; Fill it with the selected variables. if option ""n"" is specified, the TPrincipal object is filled with normalized variables.; If option ""p"" is specified, compute the principal components; If option ""p"" and ""d"" print results of analysis; If option ""p"" and ""h"" gene",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:183396,optimiz,optimize,183396,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,2,['optimiz'],['optimize']
Performance," be possible to read RNTuples written in the previous format anymore.; Support has been added for several new field types: std::unordered_set<T>, std::map<K,V>, std::unordered_map<K,V>; Support has been added for on-disk half-precision (IEEE 754-2008 16-bit) float fields. This can be enabled through RField<float>::SetHalfPrecision(). On reading, values of such fields are represented as regular, 32-bit floats.; A new RNTupleInspector utility class has been added, to provide information about the on-disk metadata of an RNTuple.; A new RNTupleParallelWriter class has been added, providing (initial) support for parallel writing of RNTuples.; A new static method RFieldBase::Check() has been added, which produces a support status report of a type with regards to RNTuple I/O.; A new internal RNTupleMerger class has been added, enabling the merging of different page sources into one page sink. This also means that RNTuples can be merged through hadd.; Zero-copy bulk reading has been added, with extra optimizations for ROOT::RVec fields.; It is now possible to use the RNTupleView with an external address with type erasure, e.g.:; std::shared_ptr<void> data{new float()};; auto view = reader->GetView(""pt"", data);; This enables use cases such as reading one specific entry of one specific field into a previously allocated memory location.; Further integration with RDataFrame: it is now possible to create RDataFrame for chains of RNTuples. This addition also comes with improvements to the multi-threaded work scheduling.; Many additional bug fixes and improvements. Please, report any issues regarding the above mentioned features should you encounter them. RNTuple is still in pre-production. The on-disk format is scheduled to be finalized by the end of 2024. Thus, we appreciate feedback and suggestions for improvement.; Histogram Libraries. Implement the FLT_MAX mechanism for THStack::GetMaximum() and THStack::GetMiniumum().; Print a warning when the range given to TAxis::SetRange ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:6866,optimiz,optimizations,6866,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['optimiz'],['optimizations']
Performance," be prefetched; Int_t*TFileCacheRead::fSeekPos[fNseek] Position of sorted blocks in fBuffer; Int_tTFileCacheRead::fSeekSizeAllocated size of fSeek; Long64_t*TFileCacheRead::fSeekSort[fNseek] Position on file of buffers to be prefetched (sorted); Int_t*TFileCacheRead::fSeekSortLen[fNseek] Length of buffers to be prefetched (sorted); TTree*fTree! pointer to the current Tree; static Int_tfgLearnEntriesnumber of entries used for learning mode. Class Charts. Inheritance Chart:. TObject. ←; TFileCacheRead. ←; TTreeCache. ←. TTreeCacheUnzip. Function documentation; TTreeCache(); Default Constructor. TTreeCache(TTree* tree, Int_t buffersize = 0); Constructor. ~TTreeCache(); destructor. (in general called by the TFile destructor). void AddBranch(TBranch* b, Bool_t subgbranches = kFALSE); add a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void AddBranch(const char* branch, Bool_t subbranches = kFALSE); Add a branch to the list of branches to be stored in the cache; this is to be used by user (thats why we pass the name of the branch).; It works in exactly the same way as TTree::SetBranchStatus so you; probably want to look over ther for details about the use of bname; with regular expressions.; The branches are taken with respect to the Owner of this TTreeCache; (i.e. the original Tree); NB: if bname=""*"" all branches are put in the cache and the learning phase stopped. void DropBranch(TBranch* b, Bool_t subbranches = kFALSE); Remove a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket. void DropBranch(const char* branch, Bool_t subbranches = kFALSE); Remove a branch to the list of branches to be stored in the cache; this is to be used by user (thats why we pass the name of the branch).; It works in exactly the same way as TTree::SetBranchStatus so you; probably want to look over ther for details about the use of bname; with regular expresions.; The branches are tak",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeCache.html:22273,cache,cache,22273,root/html602/TTreeCache.html,https://root.cern,https://root.cern/root/html602/TTreeCache.html,1,['cache'],['cache']
Performance," be true as well, unless you take care of; the viewers elsewhere or in some other way. void UpdateLogical(TObject* logid); Drop display-lists for the logical (assume TGLObject/direct rendering).; Re-calculate the bounding box (also for all physicals). void UpdatePhysical(UInt_t phid, Double_t* trans, UChar_t* col); Reposition/recolor physical shape. void UpdatePhysical(UInt_t phid, Double_t* trans, Color_t cidx = -1, UChar_t transp = 0); Reposition/recolor physical shape. void UpdatePhysioLogical(TObject* logid, Double_t* trans, UChar_t* col); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). void UpdatePhysioLogical(TObject* logid, Double_t* trans, Color_t cidx, UChar_t transp); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). UInt_t BeginSmartRefresh(); Moves logicals that support smart-refresh to intermediate cache.; Destroys the others and returns the number of destroyed ones. void EndSmartRefresh(); Wipes logicals in refresh-cache. TGLLogicalShape * FindLogicalSmartRefresh(TObject* ID) const; Find and return logical shape identified by unqiue 'ID' in refresh-cache.; Returns 0 if not found. UInt_t SizeOfScene() const; Return memory cost of scene.; Warning: NOT CORRECT at present - doesn't correctly calculate size.; of logical shapes with dynamic internal contents. void DumpMapSizes() const; Print sizes of logical nad physical-shape maps. void RGBAFromColorIdx(Float_t* rgba, Color_t ci, Char_t transp = 0); Fill rgba color from ROOT color-index ci and transparency (0->100). Bool_t IsOutside(const TGLBoundingBox& box, const TGLPlaneSet_t& planes); Check if box is outside of all planes. TGLScene(const TGLScene& ). TGLScene& operator=(const TGLScene& ). TSceneInfo* CreateSceneInfo(TGLViewerBase* view). LogicalShapeMap_t& RefLogicalShapes(); Temporary export for setting selected-state of physical shapes. { return fLogicalShapes; }. TGLContextIdentity* GetGLCtxIdentity() const. GL-context hol",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLScene.html:13680,cache,cache,13680,root/html528/TGLScene.html,https://root.cern,https://root.cern/root/html528/TGLScene.html,4,['cache'],['cache']
Performance," be true as well, unless you take care of; the viewers elsewhere or in some other way. void UpdateLogical(TObject* logid); Drop display-lists for the logical (assume TGLObject/direct rendering).; Re-calculate the bounding box (also for all physicals). void UpdatePhysical(UInt_t phid, Double_t* trans, UChar_t* col); Reposition/recolor physical shape. void UpdatePhysical(UInt_t phid, Double_t* trans, Color_t cidx = -1, UChar_t transp = 0); Reposition/recolor physical shape. void UpdatePhysioLogical(TObject* logid, Double_t* trans, UChar_t* col); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). void UpdatePhysioLogical(TObject* logid, Double_t* trans, Color_t cidx, UChar_t transp); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). UInt_t BeginSmartRefresh(); Moves logicals that support smart-refresh to intermediate cache.; Destroys the others and returns the number of destroyed ones. void EndSmartRefresh(); Wipes logicals in refresh-cache. TGLLogicalShape * FindLogicalSmartRefresh(TObject* ID) const; Find and return logical shape identified by unqiue 'ID' in refresh-cache.; Returns 0 if not found. UInt_t SizeOfScene() const; Return memory cost of scene.; Warning: NOT CORRECT at present - doesn't correctly calculate size.; of logical shapes with dynamic internal contents. void DumpMapSizes() const; Print sizes of logical nad physical-shape maps. void RGBAFromColorIdx(Float_t[4] rgba, Color_t ci, Char_t transp = 0); Fill rgba color from ROOT color-index ci and transparency (0->100). Bool_t IsOutside(const TGLBoundingBox& box, const TGLPlaneSet_t& planes); Check if box is outside of all planes. TGLScene(const TGLScene& ). TGLScene& operator=(const TGLScene& ). TSceneInfo* CreateSceneInfo(TGLViewerBase* view). LogicalShapeMap_t& RefLogicalShapes(); Temporary export for setting selected-state of physical shapes. { return fLogicalShapes; }. TGLContextIdentity* GetGLCtxIdentity() const. GL-context h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLScene.html:14317,cache,cache,14317,root/html602/TGLScene.html,https://root.cern,https://root.cern/root/html602/TGLScene.html,2,['cache'],['cache']
Performance," before the end of file. The function returns nread. Note that the arguments objlen and keylen are returned only if maxbytes >=16 ; Definition at line 1301 of file TFile.cxx. ◆ GetRelOffset(). Long64_t TFile::GetRelOffset ; (; ); const. inline . Definition at line 251 of file TFile.h. ◆ GetSeekFree(). virtual Long64_t TFile::GetSeekFree ; (; ); const. inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 252 of file TFile.h. ◆ GetSeekInfo(). virtual Long64_t TFile::GetSeekInfo ; (; ); const. inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 253 of file TFile.h. ◆ GetSize(). Long64_t TFile::GetSize ; (; ); const. virtual . Returns the current file size. ; Returns -1 in case the file could not be stat'ed. ; Reimplemented in TDavixFile, TSQLFile, TXMLFile, TMemFile, TWebFile, and TNetXNGFile.; Definition at line 1347 of file TFile.cxx. ◆ GetStreamerInfoCache(). const TList * TFile::GetStreamerInfoCache ; (; ). Returns the cached list of StreamerInfos used in this file. ; Definition at line 1366 of file TFile.cxx. ◆ GetStreamerInfoList(). TList * TFile::GetStreamerInfoList ; (; ). finalvirtual . Read the list of TStreamerInfo objects written to this file. ; The function returns a TList. It is the user's responsibility to delete the list created by this function.; Note the list, in addition to TStreamerInfo object, contains sometimes a TList named 'listOfRules' and containing the schema evolution rules related to the file's content.; Using the list, one can access additional information, e.g.: TFile f(""myfile.root"");; auto list = f.GetStreamerInfoList();; auto info = dynamic_cast<TStreamerInfo*>(list->FindObject(""MyClass""));; if (info) auto classversionid = info->GetClassVersion();; delete list;; TStreamerInfoDescribes a persistent version of a class.Definition TStreamerInfo.h:39; TStreamerInfo::GetClassVersionInt_t GetClassVersion() const overrideDefinition TStreamerInfo.h:161. Definition at line 1445 of file TFile.cxx. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFile.html:69518,cache,cached,69518,doc/master/classTFile.html,https://root.cern,https://root.cern/doc/master/classTFile.html,1,['cache'],['cached']
Performance," before the end of file. The function returns nread. Note that the arguments objlen and keylen are returned only if maxbytes >=16 ; Definition at line 1301 of file TFile.cxx. ◆ GetRelOffset(). Long64_t TFile::GetRelOffset ; (; ); const. inline . Definition at line 251 of file TFile.h. ◆ GetSeekFree(). virtual Long64_t TFile::GetSeekFree ; (; ); const. inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 252 of file TFile.h. ◆ GetSeekInfo(). virtual Long64_t TFile::GetSeekInfo ; (; ); const. inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 253 of file TFile.h. ◆ GetSize(). Long64_t TFile::GetSize ; (; ); const. virtual . Returns the current file size. ; Returns -1 in case the file could not be stat'ed. ; Reimplemented in TDavixFile, TSQLFile, TXMLFile, TMemFile, TWebFile, and TNetXNGFile.; Definition at line 1347 of file TFile.cxx. ◆ GetStreamerInfoCache(). const TList * TFile::GetStreamerInfoCache ; (; ). Returns the cached list of StreamerInfos used in this file. ; Definition at line 1366 of file TFile.cxx. ◆ GetStreamerInfoList(). TList * TFile::GetStreamerInfoList ; (; ). finalvirtual . Read the list of TStreamerInfo objects written to this file. ; The function returns a TList. It is the user's responsibility to delete the list created by this function.; Note the list, in addition to TStreamerInfo object, contains sometimes a TList named 'listOfRules' and containing the schema evolution rules related to the file's content.; Using the list, one can access additional information, e.g.: TFile f(""myfile.root"");; auto list = f.GetStreamerInfoList();; auto info = dynamic_cast<TStreamerInfo*>(list->FindObject(""MyClass""));; if (info) auto classversionid = info->GetClassVersion();; delete list;; TStreamerInfoDescribes a persistent version of a class.Definition TStreamerInfo.h:39; TStreamerInfo::GetClassVersionInt_t GetClassVersion() const overrideDefinition TStreamerInfo.h:202. Definition at line 1445 of file TFile.cxx. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:69584,cache,cached,69584,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,1,['cache'],['cached']
