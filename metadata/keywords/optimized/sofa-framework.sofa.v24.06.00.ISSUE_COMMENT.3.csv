quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Security,@fredroy can you validate that the requested change has been done ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3462#issuecomment-1308603336:17,validat,validate,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3462#issuecomment-1308603336,1,['validat'],['validate']
Security,"@jnbrunet residual norm and other convergence information should rather be managed by the LinearSolver than the ODESolver.; For matrices, I think what would make sense is what you started to look into: having the matrix as a ""outout"" Data that could be accessed and analyzed outside the class. What's your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1260#issuecomment-593405839:253,access,accessed,253,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1260#issuecomment-593405839,1,['access'],['accessed']
Security,"@marques-bruno Great list of types :). I think it would make sense to make this data factory a real factory with its own .h/.cpp, and set of method to add/remove element to it. This PSDEFactory (Actually a DataFactory) may be an attribute of PythonEnvironment. . Now about merging the PSDE with the PythonFactory, this sound is a different issue to me. As far as I can say the PythonFactory is in charge of generating the python binding of the 'right' type for an object (so a BaseObject* to the right SofaPython.Binding_SpecificObject) while the PSDEFactory is more in charge of allocating the right Data<> type (a string to Data<something>). I think a closer factory to look is how the Data<> are converted to and from python type (eg when we are accessing them with the getattr/findData). . I didn't investigated to much but I also have several worries about the existing PythonFactory: ; - the long sequence of if-else to detect among a set of ""hard code"" (why those ones, why there is an implicit ordering), ; - the complexity to match a type seems to be linear with the number of type (so the more type there will be in the factory the slowest it will be).; - this linear search is done *each time* an object is crossing the Sofa to Python border (which means each time we use Python to access Sofa object we pay this price).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-389395402:749,access,accessing,749,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-389395402,2,['access'],"['access', 'accessing']"
Security,@matthieu-nesme I support the idea of having a compliant contact manager to expose directly the parameters instead of using the string of parameters.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/81#issuecomment-265726099:76,expose,expose,76,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/81#issuecomment-265726099,1,['expose'],['expose']
Security,"@matthieu-nesme you are right the ""existing.txt"" file is created to validate the behavior of the FileMonitor API. It should be added to .gitignore as well as probably removed when the test terminates.; Edit: typos",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/146#issuecomment-275222917:68,validat,validate,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/146#issuecomment-275222917,1,['validat'],['validate']
Security,"@matthieu-nesme, thanks for your interest,. In this PR set up the base of the API,; This second PR (https://github.com/sofa-framework/sofa/pull/124) use the API to unify all the colors I found in the Data of components. VisualModel is not in PR https://github.com/sofa-framework/sofa/pull/124 because the color is not a Data field of the component. So I let it away for the moment. But you are right this should be done and more generally it would be nice to have the RGBAColor object be exposed as a python object.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/119#issuecomment-273888541:488,expose,exposed,488,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/119#issuecomment-273888541,1,['expose'],['exposed']
Security,"@sescaida Thanks for the review; The reason why I didn't add examples for this PR is because the current examples themselves, without any modification, demonstrate that it works as-is, thus showing that the call to update() in the handleEvent method was redundant with the default DDGNode's update mechanism. Basically, if your scene is well created (links are properly made between datafields & data are correctly accessed by components lower in the scene graph), everything should work just as well as before. The only difference I would say, is that the user has the hand over the cleanDirty() method, which allows him to fix use cases where a read acces is performed on an input, after setting an output's value has been set, in update(). as for whether it is a good idea to keep that system, I must say, that I agree with you, as we discussed before: Bringing the complexity of the DDGNode's mechanism in Python might be something we want to avoid.; Although, I think that the good approach to fight this issue would rather be to solve the problem on the C++ side (simplifying the Data-Update mechanism) than to diverge from it by simplifying the Python process.; I think @damienmarchal woul be the best placed to give us a feedback on this question, maybe? (When he'll be back from his holidays of course!)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022:415,access,accessed,415,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022,1,['access'],['accessed']
Security,"Actually, I dont even know if anybody uses the GUI with the docker installation 😅. I think it is a matter of configuration of docker to access the local X server. You may try setting some environment variables; https://stackoverflow.com/questions/69872788/docker-could-not-connect-to-any-x-display",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3486#issuecomment-1315521495:136,access,access,136,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3486#issuecomment-1315521495,1,['access'],['access']
Security,"Alright after digging a bit into the code, I noticed that the XML parser for SOFA has a builtin handling of (forcefully set to) empty strings in name, which has not been ported to SofaPython:. Basically the XML parser stores a map of instantiated components (typename, idx), uses the `shortname` of the component concatenated with the idx of the new instantiation.; For instance 2 MechanicalObjects would be called ""mObject1"" and ""mObject2"". I implemented the same mechanism in the bindings to stay coherent. This mechanism is not perfect though, as one could still easily trick it by creating any component and give it the name ""mObject1"".. but then who would purposely do that... For nodes, It's better handled because at the node's creation, I have access to the node's parent and can thus check the names of components / nodes in the parent to prevent duplications. Still, moving the node post-creation could still result in name duplications, of course. Also in the bindings I have no structure in which to put this map... meaning that It will not be resetted until the whole program restarts, which is kind of ugly (reloading the scene from the UI would not reset the map so the names would change from one execution to another (yuck). I'll remind you that the initial purpose of this code is to prevent creation of nodes/objects with an empty string as a name, not to prevent code duplication (which is a different issue and should be checked using the SceneChecker instead IMHO) Duplicated names can result in undefined behaviors, but empty names can lead to crashes (the component's pathname becomes corrupted). Looking fwd to your feedbacks",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1009#issuecomment-489135388:752,access,access,752,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1009#issuecomment-489135388,1,['access'],['access']
Security,As I already mentionned somewhere ( probably in the PR related to multithreading ) in our public branch we have already removed the dependency to boost in the Multithreading plugin. I guess in that respect there are very few commits that need to be backported. ; See : ; https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. However note that we removed from the build of Multithreading all the things related to the components such as `BeamLinearMapping_mt` and so on. Mostly because we did not want to invest any time in adapating components code that we are not sure that it ; - worked at some point in the past ( and by working I mean without any occasional crash related to data races and without any deterministic issue ); - still used by someone somewhere. As a general remark I would downvote the very idea of putting actual implementation of Sofa components in that plugin to keep the dependencies of this plugin to the **bare** minimum. Any library that wants to implement something that rely on the Task mechanism exposed by that plugin should simply do a `find_package(Multithreading)` and react according to the outcome of this method.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270:1071,expose,exposed,1071,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270,1,['expose'],['exposed']
Security,As it change the behavior of a core component i prefer to validate on regression files. ; [ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1749#issuecomment-768962610:58,validat,validate,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1749#issuecomment-768962610,1,['validat'],['validate']
Security,"At the end of the STC yesterday we discussed ""packaging"" and ""granularity"" aspects of the different component sets. On the way back I remembered that we addressed this question a while back, and at the time I was proposing an approach ""a la Python"":; - create relatively small plugins organized by ""theme"" (i.e. ForceField, Mapping, Collision, etc.). This would be like a module in Python; - group these plugins into packages through which you can access all modules or only selected ones; - in a scene file we could then include all modules from a package using <RequiredPackage packageName=""..."" /> or use the current <RequiredPlugin /> for specific modules. When it comes to the way files are organized it the different folders in the SOFA directory, I think most of us wanted to go back to a meaningful structure. I am proposing something like this:. - SOFA; + Core; + ForceFields; + Supported; + Unsupported; + Deprecated; + Mappings; + Supported; + Unsupported; + Deprecated; + .... As a developper this would make it easier to quickly see what to use or not. From a user perspective, the packages and plugins would provide another organization, from a functional point of view. Any thoughts and comments are welcome...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334396489:448,access,access,448,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334396489,1,['access'],['access']
Security,"But @damienmarchal , shall we validate this pull-request since it concerns the v16.12 release?; We will re-arrange the ChangeLog for the future 17.06.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/121#issuecomment-271328265:30,validat,validate,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/121#issuecomment-271328265,1,['validat'],['validate']
Security,"CG is already in the list my bad, I forgot it sorry!. The description corresponds to a 1st level / layer of SOFA NG.; We intend to have (still in SOFA NG) a second layer of components. This second layer would focus on : ; - state of the art algorithm (like EulerImplicit); - advanced, efficient and validated algorithms (cf Project https://github.com/sofa-framework/sofa/projects/6). I would rather see the EulerImplicit in this second level.; The first level would propose only one implementation per category (e.g. one integration scheme). @matthieu-nesme, you would then rather like to see one explicit and one implicit integration scheme, right?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/247#issuecomment-295709649:299,validat,validated,299,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/247#issuecomment-295709649,1,['validat'],['validated']
Security,During the meeting it was considered as needed to have a scene test to validate the mis-behavior and the fix. @ScheiklP do you have something (otherwise @epernod will have to do one).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3268#issuecomment-1253437880:71,validat,validate,71,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3268#issuecomment-1253437880,1,['validat'],['validate']
Security,"Following the discussion of STC#3, here is a short summary. The work of validation started.; If mainly focused on linear elasticity and corotational approach. It consists in both verification against analytical solutions and industrial softwares. . This work aims at:. - structure the selected forcefield and homogenize them; - consistency of functions,; - data structure; - and data naming; - use inheritance to decrease code complexity and improve readability : one class corresponds to one mechanical constitutive law; - define properly the mechanical tests assessing the mechanics; - defining validated components with associated tests (unit, functional and regression). Later we could consider heterogeneity and anisotropy.; Under the same workflow, the hyperelasiticity will be introduced.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/25#issuecomment-291186601:72,validat,validation,72,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/25#issuecomment-291186601,2,['validat'],"['validated', 'validation']"
Security,"For the record, what I am doing to alleviate this issue is to specialize the MechanicalObject functions that fail to compile with the default implementation and my DataType. There are a couple that fail because the access method operator[] doesn't make sense or can't be overriden (operator[] exists for Eigen::Matrix so its ambiguos for example). This is the list I had to specialize. ```template <>; void MechanicalObject<VNCS::F33D>::vThreshold(sofa::core::VecId v, double t); {; // Do nothing; }; template <>; double MechanicalObject<VNCS::F33D>::vDot(const core::ExecParams *, core::ConstVecId a, core::ConstVecId b); {; Real r = 0.0;; return r;; }. template <>; double MechanicalObject<VNCS::F33D>::getConstraintJacobianTimesVecDeriv(unsigned int line, core::ConstVecId id); {; SReal result = 0;; return result;; }. template <>; void MechanicalObject<VNCS::F33D>::applyScale(const double sx, const double sy, const double sz); {; }; template <>; void MechanicalObject<VNCS::F33D>::storeResetState(); {; // store a reset state only for independent dofs (mapped dofs are deduced from independent dofs); if (!isIndependent()); return;; }. template <>; void MechanicalObject<VNCS::F33D>::buildIdentityBlocksInJacobian(const sofa::helper::vector<unsigned int> &list_n,; core::MatrixDerivId &mID); {; }. template <>; SReal MechanicalObject<VNCS::F33D>::vSum(const core::ExecParams *params, core::ConstVecId a, unsigned l); {; Real r = 0.0;; return r;; }. template <>; SReal MechanicalObject<VNCS::F33D>::vMax(const core::ExecParams *params, core::ConstVecId a); {; Real r = 0.0;; return r;; }. template <>; void MechanicalObject<VNCS::F33D>::getConstraintJacobian(const core::ConstraintParams *cParams,; sofa::defaulttype::BaseMatrix *J,; unsigned int &off); {; }; ```. Im not sure if this specializations make sense, but I think they do as in my particular case VNCS::F33D is a dependent DoF and I am using a CG solver, so I think most of them are not called anyway. . I found that if a DataType can ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1525#issuecomment-707684184:215,access,access,215,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1525#issuecomment-707684184,1,['access'],['access']
Security,"From what I understand, this PR does not change the behaviour of SOFA, nor improve the performances. It is a preparation work to secure the access to the detection output vector. However, the proposed implementation has not been made thread-safe. But it's a necessary start, so thanks @fspadoni.; The branches diverged so much, I think starting again would take less time than solving the conflicts.; Note: it's a good idea to allow a parallel manipulation of the contacts to improve the performances. However, parallel addition of contacts would lead to a non-deterministic order of contacts. We would end up with non-deterministic simulations. The CI would not be happy :); Conclusion: we can close this PR, but keep it in mind when we want to parallelize manipulation of contacts.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/965#issuecomment-884712307:129,secur,secure,129,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/965#issuecomment-884712307,2,"['access', 'secur']","['access', 'secure']"
Security,"Give a try to the mouse described in Compliant (note this mouse implementation is fully compatible with non-Compliant solvers).; For that, compile the Compliant plugin and then add these components to your scene:; `<RequiredPlugin name=""Compliant""/>; <CompliantAttachButton />`; (Note that CompliantAttachButton has parameters you can set in your scene and access from the runSofa gui)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/84#issuecomment-264831926:357,access,access,357,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/84#issuecomment-264831926,1,['access'],['access']
Security,"Glad you like it :-) . But first I need to figure out why it works on our fork but not on this one though :-/ . After that, it would be super sweet to add finer grained GIL release as you suggest, but since we also have the monstro-SofaPython-PR pending I anticipate many merge conflicts, so the plan was to keep this one as small as possible. BTW do we have actual costly or I/O-bound c++ operations exposed in python? And if so, do these happen during simulation or only during scene initialization?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/326#issuecomment-313602996:401,expose,exposed,401,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326#issuecomment-313602996,1,['expose'],['exposed']
Security,"Good news, the mstate is already a link:. https://github.com/sofa-framework/sofa/blob/07119acb36dad5526e6af1c8e25190be2b575b57/SofaKernel/modules/SofaCore/src/sofa/core/behavior/ForceField.h#L228. Hence, you could simply do something like this:; ```cpp; template<class T>; static bool canCreate(T*& obj, objectmodel::BaseContext* context, objectmodel::BaseObjectDescription* arg); {; // Get the mechanical state link path set in the scene by the user; std::string requested_mstate_path = arg->getAttribute( ""mstate"", """");; ; // Get the mechanical state from the path; const auto * mstate = dynamic_cast<MechanicalState<DataTypes>*>(; PathResolver::FindBaseFromPath(context, requested_mstate_path); );; ; // If a mechanical state path was specified but could not get resolved (ex. is not of the same datatype, or simply if the path isn't good); if (!requested_mstate_path.empty() && !mstate) {; if (!PathResolver::CheckPath<BaseState>(context, requested_mstate_path)) {; arg->logError(std::string(""Unresolved path to a mechanical state ('"") + requested_mstate_path + ""')."");; } else {; arg->logError(std::string(""The specified mechanical state ('"") + requested_mstate_path + ""') was found but its datatype is not "" + DataTypes::Name() + ""."");; }; return false;; }; ; // If no mechanical state specified, try to find one in the current context node; if (!mstate) {; mstate = dynamic_cast<MechanicalState<DataTypes>*>(context->getMechanicalState());; }; ; if (!mstate) {; arg->logError(std::string(""No mechanical state with the datatype '"") + DataTypes::Name() + ""' found in the current context node."");; return false;; }. arg->setAttribute(mstate->getPathName());; return BaseObject::canCreate(obj, context, arg);; }; ```. Maybe @damienmarchal could validate if the usage of the `PathResolver` is correct here, I didn't find any documentation on these methods ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621:1748,validat,validate,1748,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621,1,['validat'],['validate']
Security,"Have you checked then in the code that no access to vertexMass is done in any other function without checking the ""newSize"" ? @epernod",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4151#issuecomment-1725491705:42,access,access,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4151#issuecomment-1725491705,1,['access'],['access']
Security,"Hello @alxbilger . Nice PR. . This is outside of the scope of the PR but the use of the very intrusive; ```cpp; if (this->d_componentState.getValue() != sofa::core::objectmodel::ComponentState::Valid); return;; ```; makes me thing one day we will have to do something. The way to go is probably to make clear when the component state validation/update issupposed to happen. The two choice are: ""everytime/everywhere"", update all the time including ""in-between"" timestep or only once at beginning of timestep (with visitor in the BeginAnimationStep event ?).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3850#issuecomment-1556742232:334,validat,validation,334,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3850#issuecomment-1556742232,1,['validat'],['validation']
Security,"Hello @jjcasmar . In order to added a new template to a component you need to add that where the object is registered ; to the component factory as in MechanicalObject.; ```cpp; int MechanicalObjectClass = core::RegisterObject(""mechanical state vectors""); .add< MechanicalObject<Vec3Types> >(true) // default template; .add< MechanicalObject<Vec2Types> >(); .add< MechanicalObject<Vec1Types> >(); .add< MechanicalObject<Vec6Types> >(); .add< MechanicalObject<Rigid3Types> >(); .add< MechanicalObject<Rigid2Types> >();; ```. This is where the component become accessible to the runtime point of view. The name you can use in the scene is automatically generated out of the c++ name. But you can tune that as done in RigidTypes. I'm not 100% sure but this should correspond to these lines in RigidTypes.h; ```cpp; typedef StdRigidTypes<2,double> Rigid2dTypes;; typedef RigidMass<2,double> Rigid2dMass;; template<> inline const char* Rigid2dTypes::Name() { return ""Rigid2d""; }; ``` . Hope this will help you,",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1524#issuecomment-706132405:559,access,accessible,559,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1524#issuecomment-706132405,1,['access'],['accessible']
Security,"Hello @jnbrunet ; Thanks a lot of the PR. Lot of interesting things. ; Few comments:; - one that repeat a lot about error/exception's message. ; - the other is about wether SofaPython is the proper place to put Simulation and GUIManager's manager binding. My feeling is that we should have second module like SofaApplication/SofaRuntimewhich exposes those, application specific bindings. . Please tell us your opinion.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/990#issuecomment-489499745:342,expose,exposes,342,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/990#issuecomment-489499745,1,['expose'],['exposes']
Security,"Hello Guillaume,. Maybe we should use PUBLIC/PRIVATE/INTERFACE keyword in the target_link_libraries, target_compiler_definition, target_include_directory to control how the parameters are exposed. . More specifically, in CImgPlugin/CMakeLists.txt I think we should replace; ```; set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""${CIMG_CFLAGS} -DSOFA_BUILD_CIMGPLUGIN""); ```; by ; ```; target_compile_options(${PROJECT_NAME} PUBLIC ${CIMG_CFLAGS}); target_compile_definitions(${PROJECT_NAME} PRIVATE ""-DSOFA_BUILD_CIMGPLUGIN""); ```. By doing this we can totally remove the CImgPlugins_CFLAGS and only do:; ```; find_package(CImgPlugin REQUIRED); target_link_libraries(MyLib CImgPlugin); ```; The target_link_libraries will handle the dependencies of the public part of the included package in the right way and transitively. . All that is new to me so if you try and if this work please confirm.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/595#issuecomment-369749323:188,expose,exposed,188,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/595#issuecomment-369749323,1,['expose'],['exposed']
Security,"Hello Hugo,. I disagree about your suggestion as this PR is not about binding GeometryAlgorithm's like object. . GeometryAlgorithm is inheriting from BaseObject. To use it you need the full Scene Graph and plenty of dependency to Base/BaseObject/Data/Link/SceneGraph/..... The underlying idea is to use them in ""your scene"" as part of your scene/simulation. But if you 'just' want to test intersection between ray/plane using GeometryAlgorithmes imply a lot of boilerplate code to manage the ""scene graph"" and baseobject management. . In this PR the target is not to expose GeometryAlgorithm in python, it is more to have a low-level API that propose geometrical object (c++ object, not BaseObject) and their associated operations as well as the corresponding binding to python. The key target of that this API is to be usable with as few as possible boilerplate code and without any scene graph/base/baseobject's folks. . So the SofaGeometry module proposed in this PR can be seen as 'one' level lower in the software stack that GeometryAlgorithm. The interest of this module is that it can be used as-is (API style), in C++ or in python. Of course it is possible to go one step further (in that case I suggest to do that in a different module and in a different PR) where the c++ object implemented in SofaGeometry are exposed in the SceneGraph by inhering from BaseObject. . Hope it is more clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498:567,expose,expose,567,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498,2,['expose'],"['expose', 'exposed']"
Security,"Hello Hugo,. Thank for the PR. . There is currently no test at all to this component. ; It would be nice to add some before doing changes and validate the changes behavior.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/714#issuecomment-405875637:142,validat,validate,142,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/714#issuecomment-405875637,1,['validat'],['validate']
Security,"Hello,. A simple [blame](https://github.com/sofa-framework/sofa/blame/25f245b2383a86f097cabdea13697aa42665568e/modules/SofaConstraint/BilateralInteractionConstraint.cpp) shows the 2 commits where these values where last set:; https://github.com/sofa-framework/sofa/commit/bb99399cba47a95301025531577c2e3ac3f728ab; https://github.com/sofa-framework/sofa/commit/8b294f75884a0216ce26f5457b8689da57dd081a. They were done for a PhD work, tuning for specific cases but without giving real reasons in the log. So this is not something that was really meant to be preserved like that, indeed it does not make sense that the value is much higher for double that floats. But the actual refactoring that is needed is to expose this tolerance as a Data instead of hiding it within the code itself, so that it can be tuning within the simulations that require it instead of requiring a patch within Sofa. Ideally the value in the Data should preserve the current behaviour in order not to break existing scenes, possibly with the isRequired flag set such that others will know that they should set the value specifically instead of relying on the previously hidden and inconsistent default. Jeremie.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683:709,expose,expose,709,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683,1,['expose'],['expose']
Security,"Hello,. Here are a few remarks and suggestions regarding this topic:. 1. I would be wary about relying on performance measurements from a blog post that is 8 years old and does not mention the exact platform and compilers used. Thread Local Storage (TLS) is highly dependent on OS, ABI, compiler, flags. Here is for instance a quick test using compiler explorer: https://godbolt.org/z/6ObfHR.; 2. one usage requiring ExecParams to have a thread-local storage was to be able to do asynchronous loops (mainly simulation and rendering) with full access to the scene graph without copies, by using copy-on-write for large Data and having each thread be assigned a ""version"" (called ""aspect"" per the published work that was used). See the MultithreadGUI for an example of this mechanism.; 3. As far as I know, all asynchronous/external rendering engines integrations that are used with Sofa relied instead on a design where the Sofa scene graph is not exposed but only visual meshes (based on SofaPhysicsAPI), therefore this feature was never enabled/tested in real applications so it can make sense to remove it.; 4. It would be interesting to measure if there are any performance gained from just removing the TLS qualifier (as done in PR #1129). I expect it to not be measurable, but performances can be surprising, which is why any optimization efforts should measure before and after ;); 5. If the TLS part of ExecParams is removed, then you should also remove everything that depends on it: MultithreadGUI, ExecParams::threadID, aspectID, AspectPool, *AspectVisitor, DDGNode::currentAspect()/copyAspect()/..., and all the aspect-related features in Data and Link. Otherwise all these code will be silently broken by the change.; 6. Note that this also makes ExecParams itself a bit pointless. The initial rational was that this provides a thread-safe way to set parameters controlling all codes in such a way that even if it is not explicitly passed in to all API calls, it can be queried with ExecPa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748:543,access,access,543,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748,2,"['access', 'expose']","['access', 'exposed']"
Security,"Hello,. The issue I have with this approach is that this make it very invasive, as Sofa is adding operators in std namespace for all types, even not its own. So within an application that could also does the same, we would get conflicts / redefinition / ambiguity compiler errors, or worse silently override the application's own operators that could have relied on a different string syntax. I agree that the approach of subclassing the standard containers just to be able to package them within a Data is wrong. In our current branch we are refactoring the approach, relying more on `DataTypeInfo` to generically access features like string parsing, without having to put them in the type itself. But this is work in progress so it is not ready to be pushed yet. So in the meantime this change could be pushed, but with the understanding that it may be a temporary solution only. Jeremie.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/113#issuecomment-271622525:615,access,access,615,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/113#issuecomment-271622525,1,['access'],['access']
Security,"Hello,; I have a similar error, when trying to load a mesh file with the wrong format. For example, when loading a scene with this line:. `<MeshObjLoader name=""loader"" filename=""mesh/smCube27.msh"" />`. SOFA crash with a SIGSEV. Here's the output in the console (edited to break the really long lines of stack trace):; ```; [INFO] [SceneCheckerVisitor] Validating node ""root"" with checks:; [SceneCheckAPIChange, SceneCheckDuplicatedName, SceneCheckMissingRequiredPlugin, SceneCheckUsingAlias]; [INFO] [SceneCheckAPIChange] No 'APIVersion' component in scene. Using the default APIVersion level:; 17.06; [INFO] [SceneCheckerVisitor] Finished validating node ""root"".; [WARNING] [FixedConstraint(default3)] Can not find the topology, won't be able to handle topological changes; [WARNING] [FixedConstraint(default3)] Index 0 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 3 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 6 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 9 not valid, should be [0,0]; [WARNING] [FixedConstraint(default3)] Index 12 not valid, should be [0,0]; [WARNING] [RealGUI] Global Bounding Box seems very small; Your viewer settings (based on the bbox) are likely invalid, switching to default value of [-1,-1,-1,1,1,1].This is caused by using component which does not implement properly the updateBBox function.You can remove this warning by manually forcing a value in the parameter bbox=""minX minY minZ maxX maxY maxZ"" in your root node. ########## SIG 11 - SIGSEGV: segfault ##########; 54: sofa::helper::BackTrace::dump - 0x7ffbf5c001e053:; sofa::helper::BackTrace::sig - 0x7ffbf5c0034052:; seh_filter_exe - 0x7ffc2b60d4e051:; seh_filter_exe - 0x7ffc2b60d4e050:; _C_specific_handler - 0x7ffc1c9ab86049:; _chkstk - 0x7ffc2e51457048:; RtlWalkFrameChain - 0x7ffc2e47373047:; KiUserExceptionDispatcher - 0x7ffc2e5133d046:; sofa::component::projectiveconstraintset::FixedConstraint<sofa::defaulttype::StdVecto",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396:352,Validat,Validating,352,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/746#issuecomment-475536396,2,"['Validat', 'validat']","['Validating', 'validating']"
Security,"Hello,; would it be possible to provide a simple test?; It seems there is no unit/scene/regression tests which are using Multi2Mapping and its `input2` apparently.; And by just looking at the code, I cannot see why `input2` would be impacted by #3665 as there is no `validator` for input2 😅; It would be much easier to track down the bug, thanks !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3705#issuecomment-1457371112:267,validat,validator,267,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3705#issuecomment-1457371112,1,['validat'],['validator']
Security,"Here is a short feedback of what we have done since the STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing pa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:100,access,accesses,100,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792,4,['access'],['accesses']
Security,"Here is an update on our efforts to perform an automatic parallelization on Sofa. **Parallelism at the Visitor level :** . **General idea :**; Some visitors execute functions on multiple components (example : BaseMechanicalVisitor launches MechanicalVisitor::fwdForceField on a list of BaseForceFields).; The implementation of the function can vary depending on the actual type of the component. Usually, a function executing on different components will access the same data vectors while executing on each component (for example MechanicalVisitor::fwdForceField, calls addForce or addDForce on each component, each one modifying the force vector).; We define a **Parallel Section** as the execution of a given visitor function on a list of components.; We define a **Task** as the execution of a visitor function on a component. Therefore a parallel section is decomposed in an ordered list of tasks.; Each task accesses a given set of vectors (read or write accesses), and a given set of locations in these vectors. We can split the tasks in **phases** such that each phase accesses a subset of the vector locations. To facilitate this, we decompose the vectors into **blocks**, and we look at the vector blocks accessed by each task phase.; Then we can have phases of different tasks that do not accesses the same locations, and so are independent and can run in parallel.; Then we model the dependencies between the tasks phases, and we use the dependency graph to schedule the parallel executions of the phases, keeping the sequential order of the operations. . All the user should have to do is to flag visitors that can be launched in parallel on the components : use a parallel version of Visitor::for_each / for_each_r to enable parallel execution of the components. **Steps performed at runtime:**. 1. Creation of « parallel visitors » using a parallel version of Visitor::for_each functions; - parallel version of for_each starts a parallel section, and creates tasks; - a task is defined ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289:455,access,access,455,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289,3,['access'],"['access', 'accesses']"
Security,"Hey @alxbilger ,. I'm very sorry for the late reply. > If I understand correctly, your problem with this solver is not the approximation equations on which I asked your opinion. Well kinda. I am unable to answer your initial question, since when I try to derive the equation to validate your changes, I'm unable to get to the same formulation as you have. But, in addition, I'm also unable to derive the old one (before your change).... Anyway, if you can validate that the multiop ""optimized"" version gives the same result as the ""unoptimized"" one for both explicit and semi-implicit, and for both before and after this PR, you have my +1 to merge!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-866817370:278,validat,validate,278,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-866817370,2,['validat'],['validate']
Security,"Hey @nhnhan92 ; Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license. To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!. Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _\*\*\*\_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); See: https://link.springer.com/article/10.1007/s00366-017-0572-4. Let us know what you think about it. We can make it step by step!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204:816,validat,validation,816,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204,1,['validat'],['validation']
Security,"Hey guys,. Sorry I took so long to join the party, busy weeks !. To me, a force-**field** intrinsically means a discrete geometrical representation of a domain from a topology (it could even be meshless having the field discretized with point-cloud neighbourhood topologies). To me, a forcefield could even **inherits** the topology class itself! . But then you find components such as **ConstantForcefield** or **LinearForcefield**, which contradicts my previous statement :-( They are however useful when you are computing the nodal forces externally and fill in the values in sofa. Therefore, the solution of @damienmarchal seems good to me, as it does not prevent forcefields without topological fields. It will however restrict the forcefield to one topology link only (which makes sense to me...but we never know). Or you could also add an additional **MultipleTopologicalLink** class in addition to the **TopologicalLink**, or make the **TopologicalLink** handles the ""0 to many"" dependency link. Another solution could be to add this ""0 to many"" data-link directly in the ForceField base class. Forcefields could fill this data in their respective **init** stage in the case the user didn't provide any and make proper checks to validate that the topology objects contains the right type of elements needed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/979#issuecomment-490135316:1237,validat,validate,1237,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/979#issuecomment-490135316,1,['validat'],['validate']
Security,"Hey,; I also tried on my side and faced the same problem. I ended up changing versions like this:; ```; ## Version; set(SOFAFRAMEWORK_VERSION ""17.12.dev""). ## sofa/version.h; set(SOFA_VERSION ""1712xx""); set(SOFA_VERSION_STR ""\""17.12.dev\""""); ```; Then including `<sofa/version.h>` gives you access to `SOFA_VERSION_STR`.; What do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/329#issuecomment-315979793:291,access,access,291,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/329#issuecomment-315979793,1,['access'],['access']
Security,"Hi @NouraHz,; Thank you for your work!. Please note that there are some [guidelines to follow](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md) concerning the commit messages in SOFA. We also prefer when a pull-request comes [from a specific branch](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#reminder---how-to-pull-request-from-github-documentation) (not from a master branch) because it is easier to edit (all reviewers have write access). Therefore, could you please create a branch in your fork containing these commits and start a new pull-request? I will then take care of the messages.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/287#issuecomment-306471464:474,access,access,474,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/287#issuecomment-306471464,1,['access'],['access']
Security,"Hi @ScheiklP ,. `MeshROI` is a SOFA engine, it inherite from ... `DataEngine` I think (without looking at the code).; The design of the the engine is to call the method `DataEngine::update` when one of the output Data is accessed and if any of the input Data is dirty. Meaning we need to recompute the output from new input value. . But as several mechanisms are required for this design, the `update `method is calling the method `doUpdate `which has to be implemented in each specific engine in middle of other code. So it is normal you don't see call of doUpdate inside the MeshRoi. DO you have a scenario which doesn't work as expected?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3484#issuecomment-1315100053:221,access,accessed,221,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3484#issuecomment-1315100053,1,['access'],['accessed']
Security,Hi @damienmarchal . Is this PR still in your plans @damienmarchal?; It even had the approval from Guillaume but the CI was failing then. Now the PR is too old to access any log.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-1708442304:162,access,access,162,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-1708442304,1,['access'],['access']
Security,"Hi @epernod . Can I add more tests on this PR ? Because I think we should validate a bit more ""negative/bad"" case to enforce the behavior of component when used improperly.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/270#issuecomment-302034546:74,validat,validate,74,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-302034546,1,['validat'],['validate']
Security,"Hi @epernod ; Is this the way we want to implement update process (when data changes) for non-engine components ?; Here you are doing:; - at init: `m_dataTrackerDATA.trackData(d_MYDATA);`; - a function _updateIfXXXX_ is:; - called at each physical function call (addForce, addDForce, addKToMatrix etc.); - checking if data changed; - if yes, updates data and re-compute internal vectors. My approach in MeshMatrixMass is the following.; - at init: `m_dataTrackerDATA.trackData(d_MYDATA);` (same); - a function _update_ (like in engine) is : ; - called at each EndAnimationEvent; - checking if data changed (same); - if yes, updates data and internal structures (same); - this update function is also called by reinit(). What do you think ?; I would like to have like a template to attack all important (NG related) components to apply the right internal update process ! (and kill the reinits)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1093#issuecomment-510625843:781,attack,attack,781,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1093#issuecomment-510625843,1,['attack'],['attack']
Security,"Hi @guparan , @damienmarchal ,. Indeed this is a real subject.; It is also related to the project of having a smaller, lighter and cleaner version of SOFA.; About the FEM, the [Validation workgroup](https://github.com/sofa-framework/sofa/issues/25) is going to investigate it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/28#issuecomment-257830798:177,Validat,Validation,177,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/28#issuecomment-257830798,1,['Validat'],['Validation']
Security,"Hi Damien,. Actually, Jenkins is already doing this, here is a regression: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/3955/testReport/(root)/ImagePNG_test/ImagePNG_NoFile/. We can also access this results with a GET request: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/3955/testReport/api/json?pretty=true; Just search for ""REGRESSION"". So it is possible to count them in the ""post build"" step :). About colors, I don't agree with you because it would make people think ""It's green, I don't care about new tests failing"". If we are adding (failing) tests, it is precisely because we want to warn people that something is broken and needs to be fixed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258823053:197,access,access,197,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258823053,1,['access'],['access']
Security,"Hi Erik,. Nice commit. Some (cosmetic) remarks:; - you updated some attributes/data field names but the name you use are not following the sofa guidelines. Data should starts with d_ not m_ (https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md). ; - there are std::cout which should be replaced by the msg_error api ; ; +1 for the examples.; Would be nice to also have a test file validating the behavior.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273165258:393,validat,validating,393,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273165258,1,['validat'],['validating']
Security,"Hi Erik,. Thank you for the offer,; If you have time you could look at the failing scenes to see what is wrong and how it would be best to validate that. Maybe testing this branch with your plugins or scenes would also be very useful. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/853#issuecomment-446186538:139,validat,validate,139,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/853#issuecomment-446186538,1,['validat'],['validate']
Security,"Hi Thomas,. Currently it seems there is some problem in compiling it, but fundamentally I think this is a great objective. ; Thank you very much to tackling this. . If I understand correctly now we can have the two syntax to read vectors (the one from Python and the historical one). +Backward compatibility is preserved and you added tests to validate the new behavior. This all looks great to me. . You also changed the getStringValue...here I think this is a problem as it will break a lot of third party code. This is why you had to fix a lot of failing test. Instead of changing the behavior of an existing function it would be much better to offer a second function to serialize to python format (or adds a parameter to the existing one to control the behavior eg: getStringValue(SerializingMode mode=SerializingMode::ClassicSofa)). The underlying idea is that by default old code will function as usual and ""awared"" users can take profit of the existing function getStringValueAsPython() or getStringValue(SerializingMode::Python). . I'm sorry because I think it probably took you a lot of time to update the failing tests but the tests shouldn't have been changed, only new one should have been added to validate the new syntax and corner case. . Minor details: ; There is some msg_error(""(S)Vector"") in vector shouldn't it be vector<> instead ?. ; Maybe you will find this pattern usefull: ; ```cpp; namespace sofa {; namespace helper {; namespace logging {; inline bool notMuted(const sofa::helper::io::MeshVTK* ){ return true; }; inline ComponentInfo::SPtr getComponentInfo(const sofa::helper::io::MeshVTK*); {; return ComponentInfo::SPtr(new ComponentInfo(""MeshVTK"")) ;; }; } /// logging; } /// helper; } /// sofa; ```. It allows to write the implicit (this) msg_* as in ; ```cpp; msg_error() << ""Blahblah""; ```. Instead of; ```cpp; msg_error(""MeshVTK"") << ""Blahblah""; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/330#issuecomment-314893430:344,validat,validate,344,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-314893430,2,['validat'],['validate']
Security,"Hi Thomas,. I made a small PR #371 trying to implement that. As you said a message is send if duplicated names exists.The name checking is done either on the node or on the object lists. The PR also contains basic tests to validate thee behavior. But, as usual, things are a bit more complex in the details...so I have several question.; - do we really want to have a test of linear complexity for each add to the scene graph ? ; To face this issue I have two solution one is to only activate the tests when there is #define WITH_SOFA_DEVTOOLS so that when we are using runSofa to make or debug ""scenes"". Once the scene is done it can be executed with improved performances on a runSofa (or any other scene runner) compiled without the DEVTOOLS enabled. ; The other approach would be to have an implicit extra param to the addChild(..., warnOnDuplicates) ;. - Second issue is that it is unclear to me if we have to check that all the time. Isn't there cases in which we have duplicate name (ie when adding object either with an""undefined"") that are then fixed ""later"". There is a lot of test (in simulation) that are now emitting a warning because of that so I assume the ""old"" behavior usage was quite common. . So guys (@jeremieallard, @thomas-lemaire, @matthieu-nesme, @maxime-tournier , @bcarrez , @fredroy ...) ...what design do we want ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323859167:223,validat,validate,223,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323859167,1,['validat'],['validate']
Security,"Hi Thomas,. You said:; ""As long as the deserialization operator is compatible with the serialization one, I do not see any issue. And no example scene is failing because of that."". You have to take the whole picture into consideration, everyone is not using serialization/deserialization as ""pairs"". The actual default serialization format is used in a lot of other software (GUIs, scene processing tools written in python, perl and C++). If you change the behavior of the default serialization mechanism all of them will stop working and required to be updated. This is a very, very, very nasty thing to impose to other users of Sofa. A PR doing has no changes to be accepted. . Actually tests is part of our guard line because they validates the API compatibility and allow us to detect changes that breaks it. The existing tests should be considered as validating the ""the existing"" sofa API. It was normal to have them to fail on your PR because it shows that the PR was breaking the compatibility. . I really like the idea of keeping the old serialization behavior as it is and add the other deserialization as an extra feature. This will make the whole PR transparent for users that don't want to update their code base. It thus it can be merged very quickly. . About the test: ; You are right that it would be better if we had test specific tests to validate the serialization alone.; I personally would like to have tests to validate that getValueString() return ""1 2 3"" and that getValueAsPythonString() return ""[1 2 3]"" . And also as you said having tests to validate against the real values instead of their serialization would be nice. . . About the branches:; The rule is to never work directly on the sofa-framework repository. There is no reason to do so (if you really want to make two PR one in anatoscope and one in sofa ... you need to to that from two branches located in the anatoscope repo). Otherwise this consume a lot of disk space on the CI servers that we have to fix manual",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626:734,validat,validates,734,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626,2,['validat'],"['validates', 'validating']"
Security,"Hi again @EulalieCoevoet ; I tried to check the difference with the PR #797; I suppose it is this commit: https://github.com/sofa-framework/sofa/pull/798/commits/5f56d38ac531e7dfd8a0d63eb7d00ddc870c21ea; Could you add in 2 lines in the header, what criteria is used to create the hash table and then which method is used to find element in the table. If already done I apologize, the changes log is very hard to read.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/798#issuecomment-444042411:280,hash,hash,280,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/798#issuecomment-444042411,1,['hash'],['hash']
Security,"Hi all, . The problem with this whole SofaNG project is that it imply a major refactoring of Sofa and thus involve a lot of changes to the existing code base and imply lot of file move (which is know to be a troublemaker with git). . To evaluate how hard it would be to have sofa that match our whishes I decided to put my hand-on; https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa. Now the problem is that it is not possible to reach this state without breaking a lot of things validating each step incrementally. I don't know how to do that but I really think we need to find either a solution or stop talking about sofang. . I have done a small tool to automate a set of changes to generate an NG directory and the corresponding cmakelists straigh from the existing master code base. ; Example of a changeset: ; ```python; {; ""commands"" : [; [""git"", ""checkout"", """" ,""Sofa.Helper.Types""],; [""spm"", ""package"", ""Sofa.Helper.Types"", ""init""],; [""mkdir"", ""Sofa/Helper/Types/src/sofa/helper/types/""],; [""move"", ""../../SofaKernel/framework/sofa/helper/OptionsGroup.h"", ""Sofa/Helper/Types/src/sofa/helper/types/OptionsGroup.h""],; [""move"", ""../../SofaKernel/framework/sofa/helper/OptionsGroup.cpp"", ""Sofa/Helper/Types/src/sofa/helper/types/OptionsGroup.cpp""],; [""move"", ""../../SofaKernel/framework/sofa/helper/types/RGBAColor.h"", ""Sofa/Helper/Types/src/sofa/helper/types/RGBAColor.h""],; [""move"", ""../../SofaKernel/framework/sofa/helper/types/RGBAColor.cpp"", ""Sofa/Helper/Types/src/sofa/helper/types/RGBAColor.cpp""],; [""commit"", ""Moving all the file to their new location""],; [""spm"", ""package"", ""Sofa.Helper.Types"", ""property"", ""source_files"", ""add-to"", ""Sofa/Helper/Types/src/sofa/helper/types/OptionsGroup.cpp""],; [""spm"", ""package"", ""Sofa.Helper.Types"", ""property"", ""header_files"", ""add-to"", ""Sofa/Helper/Types/src/sofa/helper/types/OptionsGroup.h""],; [""spm"", ""package"", ""Sofa.Helper.Types"", ""property"", ""source_files"", ""add-to"", ""Sofa/Helper/Types/src/sofa/helper/types/RGBAColor.h""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372290133:503,validat,validating,503,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372290133,1,['validat'],['validating']
Security,"Hi all,. To me there is several questions here... ; 1- one is how to pass command line argument to python.; 2- one is how to get the file name associated with a loaded scene.; 3- one is how to execute multiple sofa in // with small difference in the scene.; ; 1-; To pass command line argument to python and answering Maxime suggestion I prefer something like --extra or --scene-argv so that we don't have to take care of not breaking someone's code. . 2-; Getting the filename using a binded function in the Sofa python module.; Filename only make sense in specific case, i.e. when we have a single scene loaded from a file (as in runSofa) of course this means nothing when you have no scene files (dynamically generating the scene) or you have loaded multiple scene. So I think this shouldn't be part of the Sofa python module but could find its place in a separated RunSofa python module that would expose things specific to the runSofaX application. Actually I would like to have this kind of module for other reasons. . 3-; About the general workflow of launching multiple scene. We have in Defrost few python scripts called sofa-launcher that we use to execute in parallel multiple sofa instances of a templated scene. The parallel execution can be done on a single machine or a a cluster of linux with ssh access, scene specific data are saved in temporary directories or gathered by the calling script for further processing (eg: plotting the result). think this could prefectly match what you want to do so I will make a PR for that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323691821:902,expose,expose,902,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323691821,2,"['access', 'expose']","['access', 'expose']"
Security,"Hi folks,. I was just passing by and notice the work done by fred so thanks for the work done. . I made a branch where I refactor the DataCallback to make it use the std lib #include<functional> and lambdas instead of re-implementing a similar system with the class Callback/CallbackImpl. ; See: https://github.com/mimesis-inria/sofa/pull/12. But now this is done I wonder what are the difference with the DataCallback and the existing DataTrackerFunctor implemented in DataTracker.h ? Can you explain a bit ? . To me the differences are:; - the DataTrackerFunctor is allowing one callback and not multiple (but should be easy to change); - the DataTrackerFunctor is templated by the callback (which look not needed to me) ; - the DataTrackerFunctor is not using lambda/functional (but should be easy to change); - the DataTrackerFunctor is passing itself to the functor (which I think is a good idea to access the list of data that have changed, but...lambda are much more easy to work with.); - the DataCallback is storing the tracked data in m_data but this is also done in its parent ""inputs"" is this data duplication useful ? ; - the DataTrackerFunctor is ""hacking"" the setDirtyValue() to trigger the callback while the DataCallback is using notifyEndEdit(). It is unclear to me if this stricly equivalent but the DataTrackerFunctor implementation is shorter. => So this is not equivalent...setDirtyValue is called before the value is changed while notifyendEndif ...when it has changed. . To me the two approach needs to be either unified and/or cleaned so we have a consistent API. . @marques-bruno can you confirm that DataTrackerFunctor is notified before the value is changed, if so this is a big difference (well I wonder what the DataTrackerFunctor is used for)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/911#issuecomment-466645674:904,access,access,904,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/911#issuecomment-466645674,1,['access'],['access']
Security,"Hi fred,. The sofa::qt::GuiDataRepository is pointing to the set of resources that are specific to the qt application complementing the shared DataRepository (""share/""). Consequently it is the expected behavior to have it only usable when SofaGuiQt is enabled. I quickly looked in the code base where it is used and the only usage are in qt specific code which shouldn't prevent the compilation. If it does then something is wrong and the right fix is to prevent non qt base code to use this repository. . But maybe the problem you are facing is not a compilation problem but is more about sharing UI resources in different GUI. ; To do that I my suggestion is to:; - always consider to have a specific GuiDataRepository in your application namespace, this repository should point to your application specific resource (the ones that are tied to you GUI functionality).; - use the DataRepository to store shared UI elements because this one is already shared by sofa (but do we really want to have UI resources in SofaCore ?).; - or, and I think this is the real way to go, make a plugin (SharedUIResources ) to hold and expose the UI elements we are considering as re-usable by different GUI projects. But maybe I'm all wrong, if so please tell me. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368789908:1121,expose,expose,1121,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368789908,1,['expose'],['expose']
Security,"Hi, @polyakovkrylo! Thank you for your reply. When I run the scene with lindhd.so.3, there were no errors, but there was a warning; `Gtk-Message: 16:20:05.799: GtkDialog mapped without a transient parent. This is discouraged.; [INFO] [SceneCheckerVisitor] Validating node ""root"" with checks: [SceneCheckDuplicatedName, SceneCheckMissingRequiredPlugin, SceneCheckUsingAlias]; [WARNING] [SceneCheckUsingAlias] This scene is using hard coded aliases. Aliases can be very confusing, use with caution. ; - DefaultContactManager: 1 created with alias ""CollisionResponse"" ; - DefaultPipeline: 1 created with alias ""CollisionPipeline"" ; - EulerImplicitSolver: 1 created with alias ""EulerImplicit""; [INFO] [SceneCheckerVisitor] Finished validating node ""root"".; `. I was able to use the ForceDimension SDK examples as normal, and when I run the scene， the device was already connected but couldn't do anything, which confused me.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3497#issuecomment-1328008865:256,Validat,Validating,256,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3497#issuecomment-1328008865,2,"['Validat', 'validat']","['Validating', 'validating']"
Security,I agree that it make sense to keep in DiscreteIntersection only what it the most commonly used and validated (as was the original design before those new primitives where added). I'm not sure however that SofaMeshCollision is the right place to put codes not related to collision on meshes. Maybe SofaMiscCollision ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/251#issuecomment-296645546:99,validat,validated,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/251#issuecomment-296645546,1,['validat'],['validated']
Security,"I don't really see why, but it might be a side effect of some renumbering change I did in tetra and triangles.; I will check the scene. or side effect of the hashing map from @EulalieCoevoet yes!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/988#issuecomment-482020005:158,hash,hashing,158,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/988#issuecomment-482020005,1,['hash'],['hashing']
Security,"I found the problem: the binaries shipped with the dependencies packages are compiled with a version of VS which is not 2013 or 2015. ; And if you dont use the same CRT version between fopen/fread/.... , libpng will crash.; http://stackoverflow.com/questions/29208826/libpng-1-616-crashing-on-png-read-png-in-vs2012-c :. > ; > You are passing a (FILE*) to libpng, probably using png_init_io. Visual Studio crashes inside fread when it tries to access the underlying FILE structure.; > ; > This is because you created the FILE* using fopen from one Visual Studio runtime but libpng is linked against a different Visual Studio runtime (msvcrt or something like that); the two runtimes are incompatible. And it is currently wokring with the present ImagePNG because this class set its own read function() to libpng using ; `png_set_read_fn(PNG_reader, file, png_my_read_data);`; But CImg does not.; The solution is to built new version of the binaries for each supported Visual Studio version (2013 and 2015 in our case). Moreover, we need to ship as well the debug version of those libraries, as libpng is incompatible between release and debug configurations (e.g you compile Sofa in debug and load it with libpng.dll, it will crash if you use libpng ; and vice-versa)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/185#issuecomment-286420546:444,access,access,444,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-286420546,1,['access'],['access']
Security,"I have not the competence nore time to validate it on the mechanical aspect so I suggest to let 1 week to anyone to give feedback, and after one week we merge it :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/147#issuecomment-275100765:39,validat,validate,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/147#issuecomment-275100765,1,['validat'],['validate']
Security,I have restored the recursive version because I see the advantage of handling vector of vector and I have no example of problematic case in mind.; I added two tests to validate this behavior.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308106140:168,validat,validate,168,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308106140,1,['validat'],['validate']
Security,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:990,expose,exposed,990,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188,1,['expose'],['exposed']
Security,"I just noticed this PR is adding new feature without providing associated tests.; It would be great to have two tests, one validating the old behavior and one validating the new one.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/283#issuecomment-308230210:123,validat,validating,123,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-308230210,2,['validat'],['validating']
Security,"I like the simplicity of your proposal, however the macro trick (does it work with clang ?) could be avoided if we decide some different names for the macro, like . msg_info () << ""Implicit 'this'""; // keep that one, the most common . msg_info_component ( this ) << ""Explicit""; // or s.t. else shorter ; msg_info_name ( "" Something else "" ) << ""Hep""; // I think that one is mostly used in python, should it be exposed in c++ as a macro ? . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Jeudi 16 Février 2017 13:54:11; > Objet: Re: [sofa-framework/sofa] Cleaning the way we handle message in Sofa.; > (#179). > About a possible implementation for the following syntax:; > msg_info () << ""Implicit 'this'""; msg_info ( this ) << ""Explicit""; msg_info (; > "" Something else "" ) << ""Hep"";. > I finally have one that seems to work on gcc and on visual studio.; > You can try it one-line at: http://www.cpp.sh/3xvfk. > I have a question to you @matthieu-nesme , @thomas-lemaire , @nurbal . I; > really like the implicit version but at the same time I fear using complex; > MACRO trick. What do you think ?. > DM. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281041722:410,expose,exposed,410,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281041722,1,['expose'],['exposed']
Security,"I mean the only thing that could be considered is whether on platforms like gcc the PluginRepository should contain **both** the working directory and `../lib`. But this question has never been an issue so far, so the default behaviour for initialisation should remain the one exposed in ca0402d",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342566746:277,expose,exposed,277,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342566746,1,['expose'],['exposed']
Security,I personally really like to use spatial hashing for this kind of things. ; http://matthias-mueller-fischer.ch/publications/tetraederCollision.pdf,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/784#issuecomment-424640459:40,hash,hashing,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/784#issuecomment-424640459,1,['hash'],['hashing']
Security,"I quickly looked at SubsetTopology.inl and at first sight I wonder if there is interaction between the ; data.setParent() and the update() function. . Before the PR it is:; mydata.setParent(), addInput(mydata), then mark all dirty. . Now it is:; addInput(mydata), mydata.setParent(). It is unclear to me but I think that if something try to access one of the output data of the engine then the update function is called; with a partially valid input data.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2825#issuecomment-1088788811:341,access,access,341,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2825#issuecomment-1088788811,1,['access'],['access']
Security,"I think I like the PR :smile: but I lack of knowledge .. does it mean that we can use these accessor on any type not event Data?. > I added unit tests for the default class, for the vector types specialization and for the Data specialization. is this the mechanism used when the flag readOnly is set on a Data?. well.. I need to get a technical update on this!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3234#issuecomment-1228179850:92,access,accessor,92,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3234#issuecomment-1228179850,1,['access'],['accessor']
Security,I think it is very useful to have this sort of functionality. ; For example it would be very useful for people that want to do analysis and validation of a simulation.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/492#issuecomment-338962423:140,validat,validation,140,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-338962423,1,['validat'],['validation']
Security,"I vote for no warning message, and no global switch! **Keep it light and simple.**; The only case where you really expect to have the string `""[1,2,3]""` is for Data<SVector> that would report a problem for `""1,2,3""`, and the fix is simple (simply add some `""""`). But frankly who was benefiting from that?!. Indeed we do not want warning messages when converting scalars, but we can easily add a test for specific types (float, bool, int...). At least everything would be clearly exposed in the code. Also, I propose that if you pass a Node, a BaseObject or a Data, it uses their getLinkPath (defined in the bindings, i.e. `""@/path/from/root/node""`, `""@/path/from/root/node/myobject""`, `""@/path/from/root/node/myobject.mydata""` ). It would be so useful when creating Links that are required during creation (like the mapping's inputs).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656:479,expose,exposed,479,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656,1,['expose'],['exposed']
Security,"I wanted to pass on a flag after -n in a format such as -n infinite.; However, the general syntax constituted of a number after -n, such as: -g batch -n 20 (for 20 iterations).; Therefore the variable storing it was declared as an integer one and a lot of compilation errors came up when I tried to change to string variable and later on validate it for a digit or string.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/610#issuecomment-373103519:338,validat,validate,338,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/610#issuecomment-373103519,1,['validat'],['validate']
Security,I will see if I can come up with an implementation of that probably exposed through the factory or something like that.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/228#issuecomment-295638674:68,expose,exposed,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/228#issuecomment-295638674,1,['expose'],['exposed']
Security,"In term of easy task for newcommers, ; finding excessive calls to getValue() is clearly one of them (same for begin/end vs accessor).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3503#issuecomment-1325242993:123,access,accessor,123,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3503#issuecomment-1325242993,1,['access'],['accessor']
Security,In the case of the Light (and actually this is true to most of the sofa component) I see several very simple tests to add to validate the inputes. But you are totally right this cannot be done automatically (unless with a kind of ; code-path/coverage analysis) so the developper have to write at least the easy one.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/73#issuecomment-264160230:125,validat,validate,125,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/73#issuecomment-264160230,1,['validat'],['validate']
Security,Just before the February school break we started a branch on our repo. The task #189 is complete (needs more testing to validate it) and is a prerequisite before real python 3 refactoring in SofaPython.; Stay tuned.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/23#issuecomment-282653658:120,validat,validate,120,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/23#issuecomment-282653658,1,['validat'],['validate']
Security,"List of things to do:; - fix conflicts; - expose the private members as Data<> (for getters/setters, py2, xml etc); - register the component in the Factory (now it cannot be spawn like other BaseObject); - get an example, tests; - some math people could review (@hugtalbot, @jnbrunet ) ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2209#issuecomment-910077737:42,expose,expose,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2209#issuecomment-910077737,1,['expose'],['expose']
Security,Looks like a total mystery to me :!); Actually I don't even know why loadfrommemory try to access the FS at all.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/325#issuecomment-313369730:91,access,access,91,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/325#issuecomment-313369730,1,['access'],['access']
Security,Many thanks Matthieu for the time you spend on carefully reviewing this PR I appreciate. . For the movement of function in a file...my mistake I should have clean that...I tried other changes (like extern template specialization) that I finally not took into consideration in this PR but forgot to clean the file so they seems to have moved more than what they actually did. . You are right about performance issues and your suggestion for checking the first non-empty char in getUnsignedInteger looks ok so I will make the change. . Now about the getInteger vs atoi aspect my first impression is that there will be a small performance difference at the cost of scarifying correctness and code security so I really advocate for using getInteger/getUnisgnedInteger and not atoi. . To go further we probably have to measure the performance but I wouldn't be surprised to be less than a 10% speed difference so it is not worth the loss of good error reporting to user. If high performance is really an issue I prefer to put energy to implement a raw binary storage of indices because this would make things like 10x or more faster speedup as well as have less memory consumption.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302655856:694,secur,security,694,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302655856,1,['secur'],['security']
Security,"My checklist:; - tests coverage (none, low, good); - have at least one working example (yes, no); - is validated in the Igor's sense (if yes provide a link to the validation references); - is thread safe according a given thread safe design provided by the Multi-thread WG. ; - sofa code guidelines violation (none, a few, a lot) . I suggest this checklist to be part of the component as a kind of meta-data in the factory.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132:103,validat,validated,103,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132,2,['validat'],"['validated', 'validation']"
Security,"No other consequence, just a good practice I think. Even if we discussed it during the meeting, having someone else clicking the merge button is a final security and also I think it's good for the community : you don't feel alone 😄",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/261#issuecomment-302741167:153,secur,security,153,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/261#issuecomment-302741167,1,['secur'],['security']
Security,"No problem, I'll do my best to rebase my fixes here in a PR. As for the buffer overflow, it's definitely not a serious one (read-only, static size) but it aborts execution when compiled with address sanitizer, which prevents further bug discovery. Another show-stopper in SofaCUDA, `CudaBarycentricMappingRigid.cpp:50`, ODR violation:. ```; ==13885==ERROR: AddressSanitizer: odr-violation (0x7f474c739640):; [1] size=4 'class_BarycentricMappingRigid' ../applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaBarycentricMappingRigid.cpp:47:1; [2] size=4 'class_BarycentricMappingRigid' ../modules/SofaMiscMapping/BarycentricMappingRigid.cpp:42:18; ```. Fix is simple: remove the `SOFA_DECL` as it's defined already somewhere else. After that, it's a world of memleaks! ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/528#issuecomment-347130851:199,sanitiz,sanitizer,199,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-347130851,1,['sanitiz'],['sanitizer']
Security,"Ok the following works: . ```c++; static std::string convert_string(PyObject* object) {; if( PyString_Check(object) ) {; // strings will be strings; return PyString_AsString(object);; }; ; if( PySequence_Check(object) ) {; std::stringstream ss;. for(Py_ssize_t i = 0, n = PySequence_Length(object); i < n; ++i) {; if(i > 0) ss << ' ';; ss << convert_string(PySequence_GetItem(object, i));; }; ; return ss.str();; }. // fallback to python string conversion; PyObject* str = PyObject_Str(object);; std::string res = PyString_AsString(str);; Py_DECREF(str);; ; return res;; }; ```. `Binding_BaseObject.cpp:`. ```c++; SP_CLASS_METHODS_END;. static struct patch {; patch() {; // set __str__ slot for BaseObject; SP_SOFAPYTYPEOBJECT(BaseObject).tp_str = [](PyObject* self) {; return BaseObject_getLinkPath(self, nullptr);; };; }; } patcher;. SP_CLASS_TYPE_SPTR(BaseObject, BaseObject, Base); ```; It does breaks some python tests in Compliant, but this is due to errors there. I can push code to another PR that does the whole thing if needed (I don't think I have push access to this one).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307775648:1064,access,access,1064,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307775648,1,['access'],['access']
Security,Ok validated by @epernod @fredroy ; @JeremieA @fjourdes do not hesitate to let us know your opinion on this. We keep the PR in quarantine for 7 days. + wait for c++17 compilation,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1269#issuecomment-600533257:3,validat,validated,3,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1269#issuecomment-600533257,1,['validat'],['validated']
Security,"Oups sorry @hugtalbot , I didn't see the notification that you ping me in this thread. I don't know why the triangles were oriented this way. For the breaking part, if someone was using them for BC or collisions, it will definitely break. The next thing I can see is, you are not only changing the orientation of the triangle, but also the ordering of these triangles inside the tetrahedron. If I do `TetrahedronSetTopologyContainer::getLocalTrianglesInTetrahedron (const TriangleID i)`, I no longer have the same triangle as before. That might also break something, although I can't find anything with a quick search in Sofa using it. ~~Finally, these indices are hardcoded in the cpp, and not accessible from the outside. So if someone is using them, it means he copy/pasted them in his source file. They will no longer match the one of the tetra container. This might have weird effects. It could be a good idea to make them available either directly from the header or inside a get function so that in the future, anyone using them will be in sync with the tetra container.~~ They have `getLocalTrianglesInTetrahedron` for this, I'm a little bit tired !. I guess it is ok to go forward with this, but have this PR in mind if you got ""my pressure FF doesn't work anymore, what are you guys doing????"" on the forum :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/878#issuecomment-454860278:695,access,accessible,695,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/878#issuecomment-454860278,1,['access'],['accessible']
Security,PR #660 is merged. Hugo can you validate the problem is gone ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/654#issuecomment-392606560:32,validat,validate,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/654#issuecomment-392606560,1,['validat'],['validate']
Security,PR passes now and includes:; - use function isComponentStateValid(); - Create separate addUpdateCallback and created dedicated separate functions; - remove call to trackData for doUpdateInternal; - use Accessors (remove beginEdit),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3924#issuecomment-1625471509:202,Access,Accessors,202,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3924#issuecomment-1625471509,1,['Access'],['Accessors']
Security,Please submit a PR with a test validating the right behavior.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/9#issuecomment-298854469:31,validat,validating,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9#issuecomment-298854469,1,['validat'],['validating']
Security,"PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GUI.Component.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GUI.Batch.dll; [INFO] [GUIManager] Registered qglviewer as a GUI.; [INFO] [GUIManager] Registered qt as a GUI.; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GUI.Qt.dll; [DEPRECATED] [SofaValidation] SofaValidation is deprecated. It will be removed at v23.06. For CompareState and CompareTopology, use Sofa.Component.Playback instead.; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/SofaValidation.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/SceneCreator.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/CImgPlugin.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/ArticulatedSystemPlugin.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/SofaMatrix.dll; [INFO] [PluginManager] 72 plugins have been loaded from C:\Users\gfurn\anaconda3\envs\sofa_source\sofa\build\bin\Release/plugin_list.conf.default; [INFO] [GUIManager] lastUsedGUI.ini not found; using default GUI.; [INFO] [SofaPluginManager] Loading automatically plugin list in C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/config/loadedPlugins.ini; [INFO] [PluginManager] 0 plugins have been loaded from C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/config/loadedPlugins.ini. [INFO] [SceneCheckerVisitor] Validating node ""root"" with checks: [SceneCheckCollisionResponse, SceneCheckDeprecatedComponents, SceneCheckDuplicatedName, SceneCheckMissingRequiredPlugin, SceneCheckUsingAlias]; [INFO] [SceneCheckerVisitor] Finished validating node ""root"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:11984,Validat,Validating,11984,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Validat', 'validat']","['Validating', 'validating']"
Security,"Ready, merge if CI validates it. An issue should be open to point the dependency on the deprecated SofaGraphComponent.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3302#issuecomment-1253446110:19,validat,validates,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3302#issuecomment-1253446110,1,['validat'],['validates']
Security,Reminder: SOFA documentation is on https://github.com/sofa-framework/doc; All @sofa-framework/reviewers have write access to this repository.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/103#issuecomment-266998411:115,access,access,115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/103#issuecomment-266998411,1,['access'],['access']
Security,Some feedbacks:; I compiled with https://github.com/google/sanitizers/wiki/AddressSanitizerLeakSanitizer and I did not get any difference in leaks while executing TorusFall.scn and caduceus.scn in batch for 100 steps unfortunately.; The output is huge (20Mo of logs) so not easy shareable (can give it on demand). Final outputs for both (PR and master branches) :; caduceus: `SUMMARY: AddressSanitizer: 10282202 byte(s) leaked in 111987 allocation(s).`; torusfall: `SUMMARY: AddressSanitizer: 6271499 byte(s) leaked in 28416 allocation(s).`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4838#issuecomment-2249517443:59,sanitiz,sanitizers,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4838#issuecomment-2249517443,1,['sanitiz'],['sanitizers']
Security,"Something really useful would be to create a Compliant specific contact manager that directly exposes the contact Data, rather than the DefaultContactManager and its really unefficient string of parameters.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/81#issuecomment-265719239:94,expose,exposes,94,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/81#issuecomment-265719239,1,['expose'],['exposes']
Security,"Sorry for the delay !. First, I have some precisions regarding Fred's remark: with the modification I suggested, I see a critical performance drop in the caduceus scene, going from ~150-200 FPS before the change, to ~25 FPS after. I expect that, indeed, the barycentric mapping accesses the `m_positions` field of the `OGLmodel`, consequently causing extensive triggering of the callback at each time step. So the solution I first suggested should be discarded anyway. @hugtalbot, using the `m_restPositions` field for the callback doesn't have the same performance issue. However I believe that this field is not used in the rendering process of the `OglModel`. Or, at least, calling `initVisual()` after a change of `m_restPositions` doesn't change the visual. So this solution doesn't solve the initial issue I had. I tried to look into how the `BarycentricMapping` works in details, but I'm afraid it is a bit too complexe for me with the time I have at the moment... My idea was to find how the barycentric mapping makes sure that the visual OGLModel is updated at each time step, and mimick this. If someone is familiar with the process ?. In the meantime, regarding the specific scenario I was working on, I'm using another workaround. Instead of dynamically changing the source file of the loader, I'm creating as many loaders as mesh files I have, and I dynamically change the loader I need at a given time during the simulation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2925#issuecomment-1137038775:278,access,accesses,278,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2925#issuecomment-1137038775,1,['access'],['accesses']
Security,Tested on my side for #1649 (locally); it is working so I validate it 😙,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1651#issuecomment-744391099:58,validat,validate,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1651#issuecomment-744391099,1,['validat'],['validate']
Security,"Thank you @ziqiu-zeng for the PR, I can see I did some mistake in the compat files 😬. > Enable compilation with cuda plugins: SofaAsyncSolvers, SofaCUDALDI, SofaCUDASolvers, SofaCUDADev Please also update the plugins; > . Unfortunately, these plugins are private plugins from the mimesis team so we cannot access/fix/update them 🤔",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2883#issuecomment-1102753225:306,access,access,306,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2883#issuecomment-1102753225,1,['access'],['access']
Security,"Thank you a lot for the nice proposals preventing potential hacks like the ones I presented above. I just checked your pull request and I really like its simple usage - I hope it will be merged soon! . @damienmarchal : I am excited to see your solution to 3., if you would like to have further information about my approach, please let me know. To create python scenes, I am using the [scene to python transform script](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/SofaPython/scn2python.py) and with the direct usage your approach works well, i.e.; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn -o caduceus2 -p`; generates the python scene `caduceus2.py` and when launching it I can retrieve all the arguments of the command line, i.e. the output of ; `runSofa caduceusPython.scn --argv test test2`; is `['caduceusPython', 'test', 'test2']`. However, by default (i.e. without -p) the scene to python transform script generates a .scn file calling a .py file - a choice made to prevent having to load the python plugin before launching python scenes. For example; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn`; outputs the caduceusPython.scn and caduceusPython.py. Now when using ; `runSofa caduceusPython.scn --argv test test2`; and running ; `print sys.argv`; only the filename can be retrieved, i.e. the output is `['caduceusPython']`. 1. Is the usage presented as second approach (i.e. using .scn and .py) still up to date/a recommended approach?; 2. If yes, is it possible to access the argv in the .py file when it is used from the .scn file? Or is it possible to improve the implementation such that it can handle it?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656:1566,access,access,1566,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656,1,['access'],['access']
Security,"Thank you for your help! I changed the scn2python script:; - The standard output is now be .py (before it was .scn and .py); - It handles the command line arguments now in the way you presented it above; - It uses the output into .json, as presented in #360.; I would like to push these changes to your pull requestion #368, do you mind giving me access rights (if not I will wait and do a separate pull request or I push it to #360 (which is not as close as your pull request) )?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324896145:347,access,access,347,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324896145,1,['access'],['access']
Security,"Thank you for your pull request!; Someone will soon check it and start the builds. Note that by submitting a contribution to SOFA, you hereby accept and agree to the terms and conditions detailed in the [associated DCO](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/639#issuecomment-381866574:302,certificate,certificate-of-origin-dco,302,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-381866574,3,['certificate'],['certificate-of-origin-dco']
Security,"Thanks for the changes, . @epernod, do you have time to add tests to validate the new features you introduced ? ; (I know that you made examples but examples are not as informative as tests to detect regression)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273193002:69,validat,validate,69,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273193002,1,['validat'],['validate']
Security,"Thanks for the explanation,. So, when GLOBAL is set the friction coefficient came from the mu parameter and when {MINIMUM, AVERAGE, GEOMETRIC, PRODUCT} is set the friction coefficient is computed from the objects with the corresponding function. . If so, I agree that a GLOBAL flags in addition to MINIMUM, AVERAGE, GEOMETRIC and PRODUCT would make sense. I also agree with maxim's that ""In any case I would favour clamping negative mu to zero together with some warning displayed since mu < 0 is a modelling error anyways."". It could also be nice to display a warning when 'mu' is set while GLOBAL is not to inform users they are maybe mis-understanding something (and provide an advice on how to fix the problem). . Finally I also have the feeling that the ""horizontal"" data field could also be improved by renaming it with something like ""coneProjection"" with two possible values: [""horizontal"" and ""orthogonal""] instead of using a boolean. The boolean can be kept inside but it should not be exposed as is to the users.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/81#issuecomment-265566878:996,expose,exposed,996,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/81#issuecomment-265566878,1,['expose'],['exposed']
Security,"The creation of TriangleSetAlgorithms is not linked to the creation of triangleSetTopologyContainer arrays like edgesInTriangle. what can be possible is that MeshMatrixMass access to edgesInTriangle which is not filled due to the return.; But the return is reached because the input topology is not consistent. And the choice was done to break instead of simulating potential wrong behavior. My question was, in your PR, by removing the return, how many error is dumped if you test #1243 ?. each error means an inconsistency between the Triangle, the Edge and the EdgeInTriangles structure so potentially if FEM is using edges and mass the EdgeInTriangles, you won't fill the matrix in the same order.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1245#issuecomment-577251657:173,access,access,173,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1245#issuecomment-577251657,1,['access'],['access']
Security,"The new crash you have is in the `solve` function, trying to access an element of an empty vector (either the solution vector, or the right-hand side vector). The solve function is [here](https://github.com/sofa-framework/sofa/blob/41a88c16b6e5d9660a306b8faa7a12d79c0d0a57/Sofa/Component/LinearSolver/Direct/src/sofa/component/linearsolver/direct/SparseLDLSolver.inl#L74), called from [here](https://github.com/sofa-framework/sofa/blob/41a88c16b6e5d9660a306b8faa7a12d79c0d0a57/Sofa/Component/LinearSolver/Iterative/src/sofa/component/linearsolver/iterative/MatrixLinearSolver.inl#L199). . The solveSystem function works in 2 steps: 1) factorize the matrix into LDL, 2) solve the system based on the factorization. As far as I can see, the solving process runs even if the factorization fails. It's probably why you have the crash. A modification to do could be to catch the error in the solveSystem function and not perform the solving. In the meantime, as a quick fix, you can try to set `invertData->n = n;` before leaving the function:. ```cpp; int n = M.colSize();; invertData->n = n;; ```. `invertData->n` would be `=0`, then the [solve function](https://github.com/sofa-framework/sofa/blob/41a88c16b6e5d9660a306b8faa7a12d79c0d0a57/Sofa/Component/LinearSolver/Direct/src/sofa/component/linearsolver/direct/SparseLDLSolverImpl.h#L160) may run safely.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3499#issuecomment-1327722611:61,access,access,61,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3499#issuecomment-1327722611,1,['access'],['access']
Security,The relativePath was existing in C++ but not in python. ; I fixed the c++ version because it was not working but I didn't planned in this PR to add a new feature to Python. . But fundamentally you are right.. It would be nicer to have it exposed and I can hijack this PR for that :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/250#issuecomment-296172484:238,expose,exposed,238,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/250#issuecomment-296172484,1,['expose'],['exposed']
Security,The runSofa2 project developpement is taking place in https://gitlab.inria.fr/ocarre/sofaqtquick; Currently you need an inria account to access it..but this should change one day.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/187#issuecomment-296666343:137,access,access,137,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/187#issuecomment-296666343,1,['access'],['access']
Security,"There is a primary template class that can act on any type (not just Data). In this case, the class is a simple proxy.; A second implementation partially specializes the class for vector types. Again, no need to be a Data. The type needs to implement the `begin` and `end` methods, and the `[](int)` operator, to be considered a vector type.; Finally, a third implementation partially specializes the class for Data. This specialization uses one of the first two implementation: `template<class T> class ReadAccessor<Data<T> > : public ReadAccessor<T>`.; We can say that accessors are meant to be used for Data only, but they need the implementations for any type (the type that is contained by the Data). And those implementations can be tested, even if they are not used. Worth to be noted:; `std::vector` is of course considered as a vector type. If I want to use it through an accessor, it matches the partial specialization for vector types. However, accessors for vector types require the type `Size` in the vector type (there is an alias). `std::vector` has not such a type, so the compilation fails. Accessors to vector types can be used only for `sofa::type::vector` (and its derived types). Conclusion: ; 1) there is a discrepancy between the `is_vector` type trait and the requirements of the accessors.; 2) Write `ReadAccessor<std::vector<Real> >` or `ReadAccessor<Data<std::vector<Real> > >` does not compile. To fix this behavior, I'll suggest in another PR something like; ```cpp; using Size = std::conditional_t<hasSizeSize<T>::value, T::Size, T::size_type>;; ```. I think the read-only flag has nothing to do with the accessors. I think it is related to the GUI only.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3234#issuecomment-1228215278:571,access,accessors,571,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3234#issuecomment-1228215278,6,"['Access', 'access']","['Accessors', 'accessor', 'accessors']"
Security,This PR is not supposed to be merged...the idea was to show on the CI in which components there is not an even number of begin/end of accessors. But the CI is not working anymore on it and has not kept the compilation log. Now after a quick reading I see several good things in this PR:; - a new fonction in BackTrace to get the trace; - a way to systematically detect components rely on an invalid behavior in begin/end pairs. But given how many componnents have problem this is far too much error messages. ; ; Maybe we could just enable the systematic test using NDEBUG and have that merged.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1326#issuecomment-680744834:134,access,accessors,134,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1326#issuecomment-680744834,1,['access'],['accessors']
Security,"This comes from comit 570b09b. > UPDATE: PointSetTopologyContainer maintains a list of point indices, accessible through the data points. Move data nbPoints to private so that only dedicated methods setNbPoints and getNbPoints are accessible to derived / friend classes. Indeed, not sure if Data is needed",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/529#issuecomment-423549647:102,access,accessible,102,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/529#issuecomment-423549647,2,['access'],['accessible']
Security,"This feature is working in debug mode (just tested in windows, and it allowed me to find a bug when compiling SOFA with VS....).; But as you mentioned it won't work when you will want to load a binary not suffixed with _d and trying to runSofa in debug mode (e.g it could happen that you don't have access to the debug version of a plugin but still want to debug your application). ; Basically PluginManager, if compiled in Debug mode, wants to load ""_d"" suffixed binaries. If we want to achieve that:; - remove the forced suffix ""_d"" when loading in debug mode,; - the config file must have the ""complete"" ""binary name"" and not the target name (or just add the binary name with the target name). What do you people think ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/301#issuecomment-312619038:299,access,access,299,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-312619038,1,['access'],['access']
Security,This issue is pending since last STC6.; Now that regression test project is tracked as a git submodule. Old historically failing refences will be accessible from git history and will now be replaced (in PR #1061) by new version with only first and last iteration dump.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/828#issuecomment-499867640:146,access,accessible,146,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/828#issuecomment-499867640,1,['access'],['accessible']
Security,This one will definitely need multiple checking and maybe local tests with your own plugins / versions of SOFA for obvious security reasons :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1301#issuecomment-606568981:123,secur,security,123,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1301#issuecomment-606568981,1,['secur'],['security']
Security,"This problem is because you are launching runSofa from the command line.; The ""normal"" way to solve it would be to launch from a .app application (so-called bundle). In that case, the menubar is directly accessible. ; I already searched for an other solution, but apparently that is because of MacOS itself:; https://github.com/robotology/yarp/issues/457; (I cannot find the bug report on Qt...). http://www.alecjacobson.com/weblog/?p=3910; This guy is suggesting to call an apple script to do a quick alt-tab.....",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/183#issuecomment-281681138:204,access,accessible,204,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/183#issuecomment-281681138,1,['access'],['accessible']
Security,"To get rid of the ""call super"" anti-pattern is very challenging, because it is used to (a) check constraints on data fields as well as to (b) initialize the internal logic of the component. The problem I see is that the two things are being interleaved in a very subtle way. And both (a) and (b) rely on the call super pattern to work.; ; That said I strongly support the idea of cleaning the data validation mechanism. . Damien,; Nota bene:; I disagree about your saying ""I think this ""true/false implying other data fields"" mechanism is a bad design and for this case no checking solution will be clean. "" . Having complex relationship between input fields is a very common situation in user interfaces and it is not restricted to""true/false implying other data fields"" but also having mutually exclusive fields and other cases. It is so common that UI frameworks have dedicated support for that (QGroupBox (http://doc.qt.io/qt-5/qtwidgets-widgets-groupbox-example.html in Qt). And from an User interface perspective not exposing such constraints to the user is actually a bad design. So, these kind of constraint are good design, the problem is on how to implement them in Sofa :) . In Sofa the current state is that:; - the constraints resulting from the type are encoded into the read method of the field (eg: RGBAColor accept inputs like #FFAABBCC or ""red"", the input validation and error message reporting is done in the 'read' field, a dynamic cast can be used to display a color selector widget instead of a text field). ; - the ""isRequired"" constraint is encoded with a boolean in the Data field and checked in BaseObject::init(); - the ""isReadOnly"" constraint is encoded with a boolean in the Data field, it is not checked in BaseObject::init() and writing to it is allowed but it used to gray out things in the GUI. ; - other constraints (including one making relation between multiple data) are encoded with if() in the overriden init() and of course these constraints are not visible in ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832:398,validat,validation,398,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832,1,['validat'],['validation']
Security,Validated by @ChristianDuriez,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2578#issuecomment-1009867203:0,Validat,Validated,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2578#issuecomment-1009867203,1,['Validat'],['Validated']
Security,Validated by symbolic calculations using SymPy: https://gist.github.com/alxbilger/21b4ef8d5f71bb57659dc3c11f491b9f,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4906#issuecomment-2348894487:0,Validat,Validated,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4906#issuecomment-2348894487,1,['Validat'],['Validated']
Security,"Well:; - `doLoad()` was called three times, without clearing the lists (e.g. d_position, d_tetra...). So I had duplicated positions, triangles and tetra in my scene, which caused failures. Those calls seemed to be triggered by `addUpdateCallback` in `MeshLoader`.; - the transforms wasn't called three times, so the last positions were not transformed.... but that's not really important I guess. After digging, I found that using `getWriteOnlyAccessor()` to access the `d_positions`... instead of `beginEdit()`, like it was done in most other loaders, reduced this number of calls, which fixed everything for me. I should also mention that my scene was failing at init (when loading the scene).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713100804:459,access,access,459,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713100804,1,['access'],['access']
Security,Yes it is: actions making changes in the repo (here a comment) are forbidden as long as it is not merged; See the end of the message: `Resource not accessible by integration`. You need to trust me :see_no_evil:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4267#issuecomment-1785524462:148,access,accessible,148,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4267#issuecomment-1785524462,1,['access'],['accessible']
Security,"[Modeler] :: warning and print cleaned. deprecated function removed; [Modeler] :: Set modeler cmake ON; ___________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2081487375:264,Certificate,Certificate,264,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2081487375,2,"['Certificate', 'certificate']","['Certificate', 'certificate-of-origin-dco']"
Security,"`asin` might be undefined, it is still better to have it crashing instead of working were it should not - again, if `y` contains a ""big"" error (greater than 10e-15 upon @raffaellatrivisonne comment). ; The question is: could `y` contain such a ""big"" error? If no, let's just assume that and round this way. If yes or don't know, let's add a tiny security with something like; ```cpp; const double epsilon = 1e-15;; Real y = Real(2.)*(q[3]*q[1] - q[2]*q[0]);; if( std::abs( double(y) ) - 1.0 > epsilon ); {; msg_error(""Quat"") << ""Unexpectedly out of bounds argument for asin: "" << y << msgendl;; }; ```; or; ```cpp; const double epsilon = 1e-15;; Real y = Real(2.)*(q[3]*q[1] - q[2]*q[0]);; if( std::abs( double(y) ) - 1.0 > epsilon ); {; Real force_round = std::max( Real(-1.0), std::min(Real(1.0), y) );; msg_warning(""Quat"") << ""Unexpectedly out of bounds argument for asin: "" << y; << ""Force rounding to "" << force_round << msgendl;; y = force_round;; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/399#issuecomment-338594103:346,secur,security,346,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-338594103,1,['secur'],['security']
Security,alyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) |; | [clang-analyzer-security.insecureAPI.vfork](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.vfork.html) | [modernize-use-default-member-init](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-default-member-init.html) |; | [clang-analyzer-unix.API](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.API.html) | [modernize-use-emplace](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-emplace.html) |; | [clang-analyzer-unix.Malloc](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.Malloc.html) | [modernize-use-equals-default](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-equals-default.html) |; | [clang-analyzer-unix.MallocSizeof](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.MallocSizeof.html) | [modernize-use-equals-delete](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-equals-delete.html) |; | [clang-analyzer-unix.MismatchedDeallocator](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.MismatchedDeallocator.html) | [m,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:17926,secur,security,17926,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,1,['secur'],['security']
Security,ang-analyzer-optin.mpi.MPI-Checker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.mpi.MPI-Checker.html) | [modernize-make-unique](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-unique.html) |; | [clang-analyzer-optin.performance.Padding](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.performance.Padding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extr,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:16015,secur,security,16015,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,1,['secur'],['security']
Security,caduceus does not really pass the thread sanitization🙊,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4534#issuecomment-1965977014:41,sanitiz,sanitization,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4534#issuecomment-1965977014,1,['sanitiz'],['sanitization']
Security,can you update the PR @maddin200 ? we have not write access on your PR,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2435#issuecomment-948582568:53,access,access,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2435#issuecomment-948582568,1,['access'],['access']
Security,clang-tidy/checks/clang-analyzer-optin.cplusplus.VirtualCall.html) | [modernize-make-shared](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-shared.html) |; | [clang-analyzer-optin.mpi.MPI-Checker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.mpi.MPI-Checker.html) | [modernize-make-unique](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-unique.html) |; | [clang-analyzer-optin.performance.Padding](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.performance.Padding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-securi,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:15847,secur,security,15847,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,1,['secur'],['security']
Security,"compatible architecture (have 'x86_64', need 'arm64e' or 'arm64')); > >>> ; > ```; > ; > **Env vars**; > ; > ```shell; > python -c ""exec( \""import os, sys\nprint('#################')\nprint('--- sys.version ---')\nprint(sys.version)\nprint('--- PATH ---')\ntry:\n print(os.environ['PATH'])\nexcept Exception:\n pass\nprint('--- SOFA_ROOT ---')\ntry:\n print(os.environ['SOFA_ROOT'])\nexcept Exception:\n pass\nprint('--- PYTHONPATH ---')\ntry:\n print(os.environ['PYTHONPATH'])\nexcept Exception:\n pass\nprint('--- sys.path ---')\ntry:\n print(str(sys.path))\nexcept Exception:\n pass\nprint('#################')\"" )""; > ```; > ; > ```; > --- sys.version ---; > 3.8.19 (default, Mar 20 2024, 15:27:52) ; > [Clang 14.0.6 ]; > --- PATH ---; > /usr/local/opt/python@3.8/bin/:/opt/anaconda3/envs/sofarl/bin:/opt/anaconda3/condabin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/usr/local/share/dotnet:~/.dotnet/tools; > --- SOFA_ROOT ---; > /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS; > --- PYTHONPATH ---; > /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages:/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.12.01_MacOS/plugins/SofaPython3/lib/python3/site-packages:/path/to/SofaPython3/lib/python3/site-packages:; > --- sys.path ---; > ['', '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages', '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.12.01_MacOS/plugins/SofaPython3/lib/python3/site-packages', '/path/to/SofaPython3/lib/python3/site-packages', '/opt/anaconda3/envs/sof",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179:3650,secur,security,3650,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179,1,['secur'],['security']
Security,dding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.ra,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:16380,secur,security,16380,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,1,['secur'],['security']
Security,"e STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing parallel vectors to allow some kind of domain decomposit",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:1048,access,accesses,1048,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792,2,['access'],['accesses']
Security,"e import of the plugin failed when running the scene example in the [force dimension plugin](https://gitlab.com/polyakovkrylo/forcedimensions). ```. Gtk-Message: 14:09:35.149: GtkDialog mapped without a transient parent. This is discouraged.; [ERROR] [PluginManager] Plugin loading failed (/home/dell/raid/hx/sigma7_hx/sofa2012/build/lib/libForceDimensions.so): libdhd.so.3: cannot open shared object file: No such file or directory.; [ERROR] [RequiredPlugin(ForceDimensions)] Plugin loading failed (/home/dell/raid/hx/sigma7_hx/sofa2012/build/lib/libForceDimensions.so): libdhd.so.3: cannot open shared object file: No such file or directory.; ; Failed to load: [""ForceDimensions""]; [ERROR] [InfoComponent(Not created (OmegaDriver))] Object type OmegaDriver<> was not created ; The object is not in the factory. . [ERROR] [SceneLoaderXML] Node initialization failed. . [INFO] [SceneCheckerVisitor] Validating node ""root"" with checks: [SceneCheckDuplicatedName, SceneCheckMissingRequiredPlugin, SceneCheckUsingAlias]; [ERROR] [PluginManager] Plugin loading failed (/home/dell/raid/hx/sigma7_hx/sofa2012/build/lib/libForceDimensions.so): libdhd.so.3: cannot open shared object file: No such file or directory.; [ERROR] [RequiredPlugin(ForceDimensions] Plugin loading failed (/home/dell/raid/hx/sigma7_hx/sofa2012/build/lib/libForceDimensions.so): libdhd.so.3: cannot open shared object file: No such file or directory. Failed to load: [""ForceDimensions""]; [WARNING] [SceneCheckMissingRequiredPlugin] This scene is using component defined in plugins but is not importing the required plugins. ; ```. When I modify the force dimension lib file libdhd.3.14.0 to libdhd.so.3, it runs. However, when running the scene, the device only recovers to a certain position on its own and then does not respond. So I want to know if the effect of this plugin is only initializing the position or can be manipulated by humans, but I have not implemented this function yet. I would be very grateful if you could help ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3497#issuecomment-1323155229:2479,Validat,Validating,2479,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3497#issuecomment-1323155229,1,['Validat'],['Validating']
Security,"e:; http://book.pythontips.com/en/latest/map_filter.html ; as well as part of libraries:; https://docs.scipy.org/doc/numpy-1.13.0/reference/routines.functional.html. So functional programming is a must (and cheap thing) to have but to be honest the syntax:; ```py; m.position[OnDiagonal] = 0.0; ```; was just there for fun and to see if it was possible (actually I see it as a generalization of the slice syntax array[2:1] that is part of the language where instead of iterating between the slice interval you can provide funny iteration scheme). But I fear how slow may be generators compared to more classical iteration mechanisms. . About your question regarding the implementation: ; I wrote most of the change using the C-python API but after some time I was fed-up on how ugly it is and terminated the implementation using python. Mixing the python and c++ code was actually very simple thanks to the cython ability to generate dual-bindings... where a c++ function is exposed in python as well as having python functions exposed to C++ (so a .h is generated to include and use the python code in your c++ code base). ; That's said cython is not magic and the generated .cpp/.h are containing 100% python C-api ...so everything implemented in cython could be implemented exactly the same using the C-python API. ; It is just 10x longer to write an equivalent code. . As you ask I pushed a branch (https://github.com/SofaDefrost/sofa/tree/sofa_refactorSofaPython) with the implementation don't expect the branch to compile today as it contains irrelevant code that are wip to support the buffer protocol for seamless integration with numpy. . For the syntax about Data...everything is implemented in 'Binding_Data.cpp'. ; The function SofaData_asMapping_ass_subscript is the one called when using the [aaa] = operation. ; ```cpp; static int SofaData_asMapping_ass_subscript(PyObject *o, PyObject *key, PyObject *value); {; ....; /// This line is actually calling the ""python"" part implementation",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819:1052,expose,exposed,1052,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819,2,['expose'],['exposed']
Security,"easy.; 3. Add a public `Data` constructor that only initializes value, something like:; ; ``` c++; template<class T>; class Data {; public: ; Data(BaseData::no_init, const T& value = T() ) : // ...; };; ```; ; Again, easy.; 4. Provide component constructors that do not initialize their `Data` so that optimized components can be derived:; ; ``` c++; Base::Base(BaseData::no_init) : name(BaseData::no_init), //...; BaseObject::BaseObject(BaseData::no_init) : f_listening(BaseData::no_init), //... ; ; // ... BaseMapping, Mapping, etc.; ```; ; this one is tedious but not that hard. Now if all of this can be done, a derived component class will be able to manage its data on a per-class basis, and only initialize data lazily when they are actually needed (i.e. when `findData` or `getDataFields` are called). Adding/removing data would be no-ops or errors in these derived classes. ## Performance. Changing the iteration strategy incurs an extra copy of the existing `DataVec` when accessing data, but since we are likely to iterate the vector anyways there should be no visible change in; complexity. Careful allocation on the caller side should also be able to avoid most allocations during vector copy. Finally, data iteration does not seems to happen during computationally intensive sections. Should this remain an issue, it is always possible to iterate using a callback instead, which is acceptable using c++11 lambdas/`std::function`, but probably too cumbersome using c++98. **To summarize I think the performance hit for current code path is minimal.**. On the other hand, a component using `BaseData::no_init` with per-class data managemenent potentially saves up to 6 heap allocations per data per constructor call, and a fraction of this during destruction. FYI, I counted 10 `Data` members in base class `Mapping<In, Out>` alone, `collision::Contact` has 5, `ForceField` has 7,`MechanicalObject` has around 30. This means that for every collision between two different collision models",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923:2442,access,accessing,2442,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923,1,['access'],['accessing']
Security,"ely on the call super pattern to work.; ; That said I strongly support the idea of cleaning the data validation mechanism. . Damien,; Nota bene:; I disagree about your saying ""I think this ""true/false implying other data fields"" mechanism is a bad design and for this case no checking solution will be clean. "" . Having complex relationship between input fields is a very common situation in user interfaces and it is not restricted to""true/false implying other data fields"" but also having mutually exclusive fields and other cases. It is so common that UI frameworks have dedicated support for that (QGroupBox (http://doc.qt.io/qt-5/qtwidgets-widgets-groupbox-example.html in Qt). And from an User interface perspective not exposing such constraints to the user is actually a bad design. So, these kind of constraint are good design, the problem is on how to implement them in Sofa :) . In Sofa the current state is that:; - the constraints resulting from the type are encoded into the read method of the field (eg: RGBAColor accept inputs like #FFAABBCC or ""red"", the input validation and error message reporting is done in the 'read' field, a dynamic cast can be used to display a color selector widget instead of a text field). ; - the ""isRequired"" constraint is encoded with a boolean in the Data field and checked in BaseObject::init(); - the ""isReadOnly"" constraint is encoded with a boolean in the Data field, it is not checked in BaseObject::init() and writing to it is allowed but it used to gray out things in the GUI. ; - other constraints (including one making relation between multiple data) are encoded with if() in the overriden init() and of course these constraints are not visible in the UI. ; - in some case it seems that using a common prefix in the field's name is used to group input together (I have only a vague remembering about that with drawEnable then drawColor and drawLine but I cannot find back the example). For that I have not solution...but we can think about one.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832:1374,validat,validation,1374,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832,1,['validat'],['validation']
Security,"er.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaMiscFem/lib/libSofaMiscFem.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaMiscMapping/lib/libSofaMiscMapping.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaMiscCollision/lib/libSofaMiscCollision.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/CImgPlugin/lib/libCImgPlugin.so; Warning: Setting a new default format with a different version or profile after the global shared context is created may cause issues with context sharing.; The constructor with a QGLFormat is deprecated, use the regular contructor instead. [INFO] [SceneCheckerVisitor] Validating node ""root"" with checks: [SceneCheckDuplicatedName, SceneCheckMissingRequiredPlugin, SceneCheckUsingAlias, SceneCheckDeprecatedComponents, SceneCheckCollisionResponse]; [INFO] [SceneCheckerVisitor] Finished validating node ""root"". ########## SIG 11 - SIGSEGV: segfault ##########; sofa::helper::BackTrace::sig(int); sofa::component::forcefield::TetrahedronFEMForceField<sofa::defaulttype::StdVectorTypes<sofa::type::Vec<3u, double>, sofa::type::Vec<3u, double>, double> >::init(); sofa::simulation::InitVisitor::processNodeTopDown(sofa::simulation::Node*); sofa::simulation::graph::DAGNode::executeVisitorTopDown(sofa::simulation::Visitor*, std::__cxx11::list<sofa::simulation::graph::DAGNode*, std::allocator<sofa::simulation::graph::DAGNode*> >&, std::map<sofa::simulation::graph::DAGNode*, sofa::simulation::graph::DAGNode::StatusStruct, std::less<sofa::simulation::graph::DAGNode*>, std::allocator<std::pair<sofa::simulation::graph::DAGNode* const, sofa::simulation::graph::DAGNode::StatusStruct> > >&, sofa::simulation::graph::DAGNode*); sofa::simulation::graph::DAGNode::executeVisitorTopD",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918:10246,Validat,Validating,10246,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918,2,"['Validat', 'validat']","['Validating', 'validating']"
Security,"h out of bound values, 1 test with extrema values (min & max) and if there is multiple parameter...you either have to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They don't have the timer prefix.. so sound as if they are more general than timing function. ; - in Sofa_timerSetEnabled(PyObject* /*self*/, PyObject *args) you are passing an int argument to get a bool...does it means that timeSetEnable(..., True) will not work ? ; If this is the case the following code is probably better as it allow it:; ```cpp; PyObject* o;; if(!PyArg_ParseTuple(args, ""sO"", &id, &o)){...}; advancedTimer::setEnabled(id, PyObject_IsTrue(o));; ```; - in function taking a string description it would be nicer to warn users or the calling code when an invalid name is provided so that he can locate & fix his scene/script. ; ```cpp; /// In void AdvancedTimer::setOutputType(IdTimer id, std::string type); else {; msg_warning(""AdvancedTimer"") << ""Unable to set the type to '""<< type << ""' Switching to the default",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:1821,access,accessible,1821,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977,1,['access'],['accessible']
Security,how can we access it @damienmarchal ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/187#issuecomment-296598943:11,access,access,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/187#issuecomment-296598943,1,['access'],['access']
Security,https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.performance.Padding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/check,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:16290,secur,security,16290,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,1,['secur'],['security']
Security,"implementation of the function can vary depending on the actual type of the component. Usually, a function executing on different components will access the same data vectors while executing on each component (for example MechanicalVisitor::fwdForceField, calls addForce or addDForce on each component, each one modifying the force vector).; We define a **Parallel Section** as the execution of a given visitor function on a list of components.; We define a **Task** as the execution of a visitor function on a component. Therefore a parallel section is decomposed in an ordered list of tasks.; Each task accesses a given set of vectors (read or write accesses), and a given set of locations in these vectors. We can split the tasks in **phases** such that each phase accesses a subset of the vector locations. To facilitate this, we decompose the vectors into **blocks**, and we look at the vector blocks accessed by each task phase.; Then we can have phases of different tasks that do not accesses the same locations, and so are independent and can run in parallel.; Then we model the dependencies between the tasks phases, and we use the dependency graph to schedule the parallel executions of the phases, keeping the sequential order of the operations. . All the user should have to do is to flag visitors that can be launched in parallel on the components : use a parallel version of Visitor::for_each / for_each_r to enable parallel execution of the components. **Steps performed at runtime:**. 1. Creation of « parallel visitors » using a parallel version of Visitor::for_each functions; - parallel version of for_each starts a parallel section, and creates tasks; - a task is defined as the execution of the visitor function on a component; 2. Execute the first time step sequentially, logging/profiling all accesses to vectors; - create parallel sections and tasks; - in each task, log all accesses to vectors using and overloaded helper::vector::operator[]; 3. During the second time step, w",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289:1300,access,accesses,1300,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289,1,['access'],['accesses']
Security,in fact I don't really see where this margin is used as the _min and _max are computed from the vertices.; I don't see where _min and _max are used to encapsulate the vertices... The only read access is in SparseGridTopology::buildVirtualFinerLevels(). I see two solutions:; - The bourrin version: we remove this shift in a branch and check the tests. ; - The pétochard version: we duplicate the min and max field to have the accurate and enlarged one. (I'm for the 1st one); Edit: I forgot the 3rd option: the batard version: we remove the shift without saying it and wait if someone notice ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/308#issuecomment-355534101:193,access,access,193,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/308#issuecomment-355534101,1,['access'],['access']
Security,"it is not straightforward to me how to access and use the ""enable"" option for the LinearSpring class",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/498#issuecomment-340528053:39,access,access,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/498#issuecomment-340528053,1,['access'],['access']
Security,ity.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) |; | [clang-analyzer-security.insecureAPI.vfork](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.vfork.html) | [modernize-use-default-member-init](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-default-member-init.html) |; | [clang-analyzer-unix.API](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.API.html) | [modernize-use-emplace](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-emplace.html) |; | [clang-analyzer-unix.Malloc](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.Malloc.html) | [modernize-use-equals-default](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-equals-default.html) |; | [clang-analyzer-unix.MallocSizeof](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.MallocSizeof.html) | [,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:17668,secur,security,17668,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,1,['secur'],['security']
Security,lang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) ,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:16824,secur,security,16824,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,1,['secur'],['security']
Security,"llowing; ```cpp; #include <sofa/core/objectmodel/BaseObject>; bool myFunction1(BaseObject* a); {; return doSomethingWith(a);; }; ```; As we are manipulating the 'a' object via a pointer and passing it to the doSomethingWith function there is no need to know any details of the BaseObject to compile that properly. Using a forward declaration for BaseObject would save us from the inclusion of the file ```#include <sofa/core/objectmodel/BaseObject>```. Where to put forward declaration; --------------------------------------------; Forward declaration must be in a file called ```fwd.h```. The fwd.h can be located at the module root directory.; Eg:; ```; sofa/core/fwd.h; ```; If there is a lot of forward declaration it is allowed to have a per sub-module ```fwd.h``` file. ; Eg:; ```; sofa/core/objectmodel/fwd.h; sofa/core/behavior/fwd.h; ```; In that case it is mandatory that the module file contains them all. In our example ; ```cpp; sofa/core/fwd.h; #include<sofa/core/objectmodel/fwd.h>; #include<sofa/core/behavior/fwd.h>; ```. Opaque API ; =========; When it is not desirable to have access the full type definition it is possible to make or use what is called an opaque API. The Opaque API mimmics the methods provided by a class but relying only on forward declaration. ; Exemple of the ""transparent"" API: ; ```cpp; #include <Context>; #include <BaseNode>; namespace sofa::simulation; {; class Node : public Context, public BaseNode ; {; public:; double getDt(); ; ///....; };; }; ```. Exemple of the corresponding ""opaque"" API: ; ```cpp; namespace sofa::simulation::node; {; double getDt(Node*); ; }; ```. Opaque API for a given type can be located at the same location where the type is foward declared or if very long in their own dedicated file close to the one where the type definition is. ; ```; sofa/simulation/node.h; sofa/simulation/node.cpp; sofa/simulation/node-fwd.h ; ```; If the second solution is chosen, the ``node-fwd.h` file must be included by the per-module fwd.h.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1764#issuecomment-780848561:1709,access,access,1709,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1764#issuecomment-780848561,1,['access'],['access']
Security,llvm.org/extra/clang-tidy/checks/bugprone-argument-comment.html) | [hicpp-deprecated-headers](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-deprecated-headers.html) |; | [bugprone-assert-side-effect](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-assert-side-effect.html) | [hicpp-exception-baseclass](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-exception-baseclass.html) |; | [bugprone-bool-pointer-implicit-conversion](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-bool-pointer-implicit-conversion.html) | [hicpp-explicit-conversions](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-explicit-conversions.html) |; | [bugprone-copy-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-copy-constructor-init.html) | [hicpp-function-size](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-function-size.html) |; | [bugprone-dangling-handle](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-dangling-handle.html) | [hicpp-invalid-access-moved](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-invalid-access-moved.html) |; | [bugprone-fold-init-type](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-fold-init-type.html) | [hicpp-member-init](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-member-init.html) |; | [bugprone-forward-declaration-namespace](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-forward-declaration-namespace.html) | [hicpp-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-move-const-arg.html) |; | [bugprone-inaccurate-erase](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-inaccurate-erase.html) | [hicpp-named-parameter](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-named-parameter.html) |; | [bugprone-integer-division](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-integer-division.html) | [hicpp-new-delete-operators](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-new-delete-operators.html) |; | [bugprone-misplaced-operator-i,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:1672,access,access-moved,1672,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,1,['access'],['access-moved']
Security,lvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) |; | [clang-analyzer-security.insecureAPI.vfork](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.vfork.html) | [modernize-use-default-member-init](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-default-me,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:17077,secur,security,17077,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,1,['secur'],['security']
Security,lyzer-optin.mpi.MPI-Checker.html) | [modernize-make-unique](https://clang.llvm.org/extra/clang-tidy/checks/modernize-make-unique.html) |; | [clang-analyzer-optin.performance.Padding](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.performance.Padding.html) | [modernize-pass-by-value](https://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html) |; | [clang-analyzer-optin.portability.UnixAPI](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:16115,secur,security,16115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,1,['secur'],['security']
Security,"n, perl and C++). If you change the behavior of the default serialization mechanism all of them will stop working and required to be updated. This is a very, very, very nasty thing to impose to other users of Sofa. A PR doing has no changes to be accepted. . Actually tests is part of our guard line because they validates the API compatibility and allow us to detect changes that breaks it. The existing tests should be considered as validating the ""the existing"" sofa API. It was normal to have them to fail on your PR because it shows that the PR was breaking the compatibility. . I really like the idea of keeping the old serialization behavior as it is and add the other deserialization as an extra feature. This will make the whole PR transparent for users that don't want to update their code base. It thus it can be merged very quickly. . About the test: ; You are right that it would be better if we had test specific tests to validate the serialization alone.; I personally would like to have tests to validate that getValueString() return ""1 2 3"" and that getValueAsPythonString() return ""[1 2 3]"" . And also as you said having tests to validate against the real values instead of their serialization would be nice. . . About the branches:; The rule is to never work directly on the sofa-framework repository. There is no reason to do so (if you really want to make two PR one in anatoscope and one in sofa ... you need to to that from two branches located in the anatoscope repo). Otherwise this consume a lot of disk space on the CI servers that we have to fix manually. Now fundamentally from my experience in playing with PR and branches I think that making two PR will be very complex for you to handle. Because the PR you issued to anatoscope and the one you issued to sofa-framework may diverge ... so it will cost you to switch from one to the other and handle the changes. . PS: I'm not very good to explains things in english so if you want we can continue in by email in french.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626:1433,validat,validate,1433,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626,2,['validat'],['validate']
Security,ng-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html) |; | | [readability-uniqueptr-delete-release](https://clang.llvm.org/extra/clang-tidy/checks/readability-uniqueptr-delete-release.html) |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:30117,access,accessed-through-instance,30117,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,2,['access'],['accessed-through-instance']
Security,nt-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) |; | [clang-analyzer-security.insecureAPI.vfork](https://clang.llvm.org/extra/clang-,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:16916,secur,security,16916,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,1,['secur'],['security']
Security,"o work with especially in scene building.; - In SpringFF every spring is listed in a data list of LinearSpring. Along with this the two topologySubestIndices where here to cope for topological changes; - In StiffSpringFF, along with the inherited data from SpringFF, lied the indices lists and a single data for stiffness and damping. . In order to be as conservative as possible, I tried in this PR to only do the merge while keeping every current features enabled. This leads in a double representation of the spring list: the list `d_springs` and the tuple `d_springsIndices[0], d_springsIndices[1], d_ks, d_kd, d_lengths, d_elongationOnly, d_enabled` that needs to be kept coherent constantly through call back. This is cumbersome because we cannot have a circular dependency, and has thus been solved by implicitly defining a hierarchy between the two representation : the tuple representation is the master one, and the spring list follows it. This would be better if we could have a read only data so that the user cannot access the spring list. . The spring list is still useful for three things :; 1. the CUDA implementation (but not mandatory, removing it would require a significant refactoring); 2. the huge number of existing example scenes using SpringForceField that uses this representation in the scene; 3. the extensive use of this representation in the python bindings (especially the linearSpring that has no other purpose that this API). Other than that, it has no real superiority over the proposed parallel representation using a single vector for each spring parameter except for the fact that we don't need to keep coherency over all of the vectors... ; Although the tuple enable more versatile scene description. For example, the input indices can now come from other component while no difficult assembling is needed to build the spring list, we only need to link the data and specify one stiffness that will be generalized to all the springs. . So this is a **_first step_*",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4649#issuecomment-2252777879:2478,access,access,2478,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4649#issuecomment-2252777879,1,['access'],['access']
Security,"re used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warning message be a dmsg_warning instead of a msg_warning one ? . EDIT3: And this one ; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DifferenceEngine_test_0/DataTest/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:1396,expose,expose,1396,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197,1,['expose'],['expose']
Security,rg/extra/clang-tidy/checks/clang-analyzer-optin.portability.UnixAPI.html) | [modernize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-aut,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:16557,secur,security,16557,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,1,['secur'],['security']
Security,rnize-raw-string-literal](https://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html) |; | [clang-analyzer-security.FloatLoopCounter](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.FloatLoopCounter.html) | [modernize-redundant-void-arg](https://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html) |; | [clang-analyzer-security.insecureAPI.UncheckedReturn](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.UncheckedReturn.html) | [modernize-replace-auto-ptr](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:16646,secur,security,16646,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,1,['secur'],['security']
Security,"s dynamic data instances would be adding quite a lot of complexity. However the current system could be improved based on your observations :; 1. `VecLink m_vecLink` in `BaseData` will only ever contain { &inputs, &outputs }. `VecLink` could be changed to `helper::fixed_array<BaseLink*,2>` to remove those allocations (`BaseData::addLink()` should then be removed or a NOP like in `DDGNode`); 2. Reducing dynamic allocations is why `help`/`group`/`widget` were stored as `const char*` instead of `std::string` (as in most case they are compile time constants). However this did create some bugs in components, so I would be in favor of always storing strings. But one [new issue with c++11 is that std::string is no longer allowed to use copy-on-write](http://stackoverflow.com/questions/12199710/legality-of-cow-stdstring-implementation-in-c11) to share a single buffer between instances, therefore this introduces new allocations with gcc 5 for instance (and `name` is currently copied multiple times). One option would be to use a different string implementation (such as `fbstring` as used by facebook and detailed in the [CppCon 2016 talk “The strange details of std::string at Facebook""](https://youtu.be/kPR8h4-qZdk)). An alternative that would help is to use the new move semantics to minimize the number of copies involved. Regarding multithreading, it is indeed an issue. Currently constructing an object and all its Data is a local operation that can happen in parallel in any thread, but adding/removing them within a given scene graph is supposed to be done sequentially. There is the ""aspect"" mechanism that allow to provide a ""frozen"" version of the graph to another thread while it is being changed through adding and removing node and objects. But adding (and removing) Data in objects is not covered by this mechanism, and is not supported if multiple threads are accessing it concurrently. Which basically limit the creation of dynamic Data to the sequential initialization phase.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/44#issuecomment-256028112:1967,access,accessing,1967,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-256028112,1,['access'],['accessing']
Security,secureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) |; | [clang-analyzer-security.insecureAPI.vfork](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.vfork.html) | [modernize-use-default-member-init](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-default-member-init.html) |; | [clang-analyzer-unix.API](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.API.html) | [modernize-use-emplace](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-emplace.html) |; | [clang-analyzer-unix.Malloc](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.Malloc.html) | [modernize-use-equals-default](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-equals-default.html) |; | [clang-analyzer-unix.MallocSizeof](https:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:17577,secur,security,17577,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,1,['secur'],['security']
Security,"site-packages/Sofa/Helper.cpython-38-darwin.so' (mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm64e' or 'arm64')); > >>> ; > ```; > ; > **Env vars**; > ; > ```shell; > python -c ""exec( \""import os, sys\nprint('#################')\nprint('--- sys.version ---')\nprint(sys.version)\nprint('--- PATH ---')\ntry:\n print(os.environ['PATH'])\nexcept Exception:\n pass\nprint('--- SOFA_ROOT ---')\ntry:\n print(os.environ['SOFA_ROOT'])\nexcept Exception:\n pass\nprint('--- PYTHONPATH ---')\ntry:\n print(os.environ['PYTHONPATH'])\nexcept Exception:\n pass\nprint('--- sys.path ---')\ntry:\n print(str(sys.path))\nexcept Exception:\n pass\nprint('#################')\"" )""; > ```; > ; > ```; > --- sys.version ---; > 3.8.19 (default, Mar 20 2024, 15:27:52) ; > [Clang 14.0.6 ]; > --- PATH ---; > /usr/local/opt/python@3.8/bin/:/opt/anaconda3/envs/sofarl/bin:/opt/anaconda3/condabin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/usr/local/share/dotnet:~/.dotnet/tools; > --- SOFA_ROOT ---; > /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS; > --- PYTHONPATH ---; > /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages:/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.12.01_MacOS/plugins/SofaPython3/lib/python3/site-packages:/path/to/SofaPython3/lib/python3/site-packages:; > --- sys.path ---; > ['', '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages', '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.12.01_MacOS/plugins/SofaPython3/lib/python3/site-packages', ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179:3576,secur,security,3576,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179,1,['secur'],['security']
Security,technically yes as I remove some methods... But I doubt someone was using that instead of accessing the Data directly.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1947#issuecomment-807471620:90,access,accessing,90,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1947#issuecomment-807471620,1,['access'],['accessing']
Security,the ```return``` was added intentionally in a previous PR where mechanism to force the initialization of topology container have been added to avoid time bomb. ; Removing the return means you don't bother of the error sent just before and you continue to fill or not fill data and you will get a crash later in another component due to inconsistent topology buffers access. Can you check how many errors you get in your example without this return?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1245#issuecomment-577238750:366,access,access,366,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1245#issuecomment-577238750,1,['access'],['access']
Security,"tion format is used in a lot of other software (GUIs, scene processing tools written in python, perl and C++). If you change the behavior of the default serialization mechanism all of them will stop working and required to be updated. This is a very, very, very nasty thing to impose to other users of Sofa. A PR doing has no changes to be accepted. . Actually tests is part of our guard line because they validates the API compatibility and allow us to detect changes that breaks it. The existing tests should be considered as validating the ""the existing"" sofa API. It was normal to have them to fail on your PR because it shows that the PR was breaking the compatibility. . I really like the idea of keeping the old serialization behavior as it is and add the other deserialization as an extra feature. This will make the whole PR transparent for users that don't want to update their code base. It thus it can be merged very quickly. . About the test: ; You are right that it would be better if we had test specific tests to validate the serialization alone.; I personally would like to have tests to validate that getValueString() return ""1 2 3"" and that getValueAsPythonString() return ""[1 2 3]"" . And also as you said having tests to validate against the real values instead of their serialization would be nice. . . About the branches:; The rule is to never work directly on the sofa-framework repository. There is no reason to do so (if you really want to make two PR one in anatoscope and one in sofa ... you need to to that from two branches located in the anatoscope repo). Otherwise this consume a lot of disk space on the CI servers that we have to fix manually. Now fundamentally from my experience in playing with PR and branches I think that making two PR will be very complex for you to handle. Because the PR you issued to anatoscope and the one you issued to sofa-framework may diverge ... so it will cost you to switch from one to the other and handle the changes. . PS: I'm not v",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626:1357,validat,validate,1357,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626,1,['validat'],['validate']
Security,"tion on Sofa. **Parallelism at the Visitor level :** . **General idea :**; Some visitors execute functions on multiple components (example : BaseMechanicalVisitor launches MechanicalVisitor::fwdForceField on a list of BaseForceFields).; The implementation of the function can vary depending on the actual type of the component. Usually, a function executing on different components will access the same data vectors while executing on each component (for example MechanicalVisitor::fwdForceField, calls addForce or addDForce on each component, each one modifying the force vector).; We define a **Parallel Section** as the execution of a given visitor function on a list of components.; We define a **Task** as the execution of a visitor function on a component. Therefore a parallel section is decomposed in an ordered list of tasks.; Each task accesses a given set of vectors (read or write accesses), and a given set of locations in these vectors. We can split the tasks in **phases** such that each phase accesses a subset of the vector locations. To facilitate this, we decompose the vectors into **blocks**, and we look at the vector blocks accessed by each task phase.; Then we can have phases of different tasks that do not accesses the same locations, and so are independent and can run in parallel.; Then we model the dependencies between the tasks phases, and we use the dependency graph to schedule the parallel executions of the phases, keeping the sequential order of the operations. . All the user should have to do is to flag visitors that can be launched in parallel on the components : use a parallel version of Visitor::for_each / for_each_r to enable parallel execution of the components. **Steps performed at runtime:**. 1. Creation of « parallel visitors » using a parallel version of Visitor::for_each functions; - parallel version of for_each starts a parallel section, and creates tasks; - a task is defined as the execution of the visitor function on a component; 2. Execute ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289:1077,access,accesses,1077,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289,1,['access'],['accesses']
Security,"tiple components (example : BaseMechanicalVisitor launches MechanicalVisitor::fwdForceField on a list of BaseForceFields).; The implementation of the function can vary depending on the actual type of the component. Usually, a function executing on different components will access the same data vectors while executing on each component (for example MechanicalVisitor::fwdForceField, calls addForce or addDForce on each component, each one modifying the force vector).; We define a **Parallel Section** as the execution of a given visitor function on a list of components.; We define a **Task** as the execution of a visitor function on a component. Therefore a parallel section is decomposed in an ordered list of tasks.; Each task accesses a given set of vectors (read or write accesses), and a given set of locations in these vectors. We can split the tasks in **phases** such that each phase accesses a subset of the vector locations. To facilitate this, we decompose the vectors into **blocks**, and we look at the vector blocks accessed by each task phase.; Then we can have phases of different tasks that do not accesses the same locations, and so are independent and can run in parallel.; Then we model the dependencies between the tasks phases, and we use the dependency graph to schedule the parallel executions of the phases, keeping the sequential order of the operations. . All the user should have to do is to flag visitors that can be launched in parallel on the components : use a parallel version of Visitor::for_each / for_each_r to enable parallel execution of the components. **Steps performed at runtime:**. 1. Creation of « parallel visitors » using a parallel version of Visitor::for_each functions; - parallel version of for_each starts a parallel section, and creates tasks; - a task is defined as the execution of the visitor function on a component; 2. Execute the first time step sequentially, logging/profiling all accesses to vectors; - create parallel sections and task",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289:1215,access,accessed,1215,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289,1,['access'],['accessed']
Security,type-cstyle-cast.html) | [performance-inefficient-vector-operation](https://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html) |; | [cppcoreguidelines-pro-type-member-init](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html) | [performance-move-const-arg](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html) |; | [cppcoreguidelines-pro-type-reinterpret-cast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html) | [performance-move-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html) |; | [cppcoreguidelines-pro-type-static-cast-downcast](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html) | [performance-noexcept-move-constructor](https://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html) |; | [cppcoreguidelines-pro-type-union-access](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html) | [performance-type-promotion-in-math-fn](https://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html) |; | [cppcoreguidelines-pro-type-vararg](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html) | [performance-unnecessary-copy-initialization](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html) |; | [cppcoreguidelines-slicing](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html) | [performance-unnecessary-value-param](https://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html) |; | [cppcoreguidelines-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-special-member-functions.html) | [readability-avoid-const-params-in-decls](https://clang.llvm.org/extra/clang-tidy/checks/read,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:23870,access,access,23870,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,1,['access'],['access']
Security,urity.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) |; | [clang-analyzer-security.insecureAPI.vfork](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.vfork.html) | [modernize-use-default-member-init](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-default-member-init.html) |; | [clang-analyzer-unix.API](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.API.html) | [modernize-use-emplace](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-emplace.html) |; | [clang-analyzer-unix.Malloc](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.Malloc.html) | [modernize-use-equals-default](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-equals-default.html) |; | [clang-analyzer-unix.MallocSizeof](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.MallocSizeof.html) | [modernize-use-equals-delete](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-equals-delete.html) |; | [clang-analyzer-unix.MismatchedDeallocator](https://clang.llv,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:17836,secur,security,17836,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,1,['secur'],['security']
Security,"yes, this is the work started in the other issue:. > 1. Depreciate all getXXXMeshTopology for 19.12; > 2. Use explicit SingleLink; > 3. if easy will see to automatically add a SingleLink each time a getXXXMeshTopology is used for the in-between period. 2 and 3 have been done in most components through several PR. 1. is a little late in the planning...; The idea was to keep GetMeshTopology for unset case but as a last solution, and not accessible through the API.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605885366:439,access,accessible,439,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605885366,1,['access'],['accessible']
Testability," 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected (1 ms); [ RUN ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent; ======================================================================; ERROR: test_addNewDataFromParent (Base.Test); --------------------------------------------------------------",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:4218,test,tests,4218,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['tests']
Testability," Adding collection SofaGeneralRigid; Adding collection SofaGeneralSimpleFem; Adding collection SofaGeneralTopology; Adding collection SofaTopologyMapping; Adding collection SofaUserInteraction; Adding collection SofaConstraint; Adding collection SofaGeneralLoader; Adding collection SofaExporter; Adding collection SofaSparseSolver; Adding collection SofaPreconditioner; Adding collection SofaDenseSolver; Adding collection SofaNonUniformFem; Adding collection SofaOpenglVisual; Adding collection SofaMiscTopology; Adding collection SofaMiscExtra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; SofaPython3 is compiled as a subproject to the external project 'Sofa'.; Adding plugin SofaPython3; CMake Error at applications/plugins/SofaPython3/CMakeLists.txt:114 (find_package):; Could not find a package configuration file provided by ""pybind11""; (requested version 2.3) with any of the following names:. pybind11Config.cmake; pybind11-config.cmake. Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed. Configuring incomplete, errors occurred!; See also ""/home/giangnguyen/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/giangnguyen/sofa/build/CMakeFiles/CMakeError.log"".; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062:7471,log,log,7471,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062,2,['log'],['log']
Testability," TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3947,test,tests,3947,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['tests']
Testability," ```; ########## SIG 6 - SIGABRT: usually caused by an abort() or assert() ##########; sofa::helper::BackTrace::sig(int); pthread_kill; raise; abort; free; std::__new_allocator<int>::deallocate(int*, unsigned long); std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long); std::_Vector_base<int, std::allocator<int> >::~_Vector_base(); std::vector<int, std::allocator<int> >::~vector(); sofa::type::vector<int, sofa::type::CPUMemoryManager<int> >::~vector(); sofa::linearalgebra::CompressedRowSparseMatrixGeneric<double, sofa::linearalgebra::CRSMechanicalPolicy>::~CompressedRowSparseMatrixGeneric(); sofa::linearalgebra::CompressedRowSparseMatrixMechanical<double, sofa::linearalgebra::CRSMechanicalPolicy>::~CompressedRowSparseMatrixMechanical(); void std::_Destroy<sofa::linearalgebra::CompressedRowSparseMatrixMechanical<double, sofa::linearalgebra::CRSMechanicalPolicy> >(sofa::linearalgebra::CompressedRowSparseMatrixMechanical<double, sofa::linearalgebra::CRSMechanicalPolicy>*); std::_Sp_counted_ptr_inplace<sofa::linearalgebra::CompressedRowSparseMatrixMechanical<double, sofa::linearalgebra::CRSMechanicalPolicy>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose(); std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(); std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count(); std::__shared_ptr<sofa::linearalgebra::CompressedRowSparseMatrixMechanical<double, sofa::linearalgebra::CRSMechanicalPolicy>, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr(); std::shared_ptr<sofa::linearalgebra::CompressedRowSparseMatrixMechanical<double, sofa::linearalgebra::CRSMechanicalPolicy> >::~shared_ptr(); std::pair<sofa::core::behavior::BaseMechanicalState* const, std::shared_ptr<sofa::linearalgebra::CompressedRowSparseMatrixMechanical<double, sofa::linearalgebra::CRSMechanicalPolicy> > >::~pair(); std::_Rb_tree<sofa::core::behavior::BaseMechanicalState*, std::pair<sofa::core::b",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4443#issuecomment-1900616105:129,assert,assert,129,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4443#issuecomment-1900616105,1,['assert'],['assert']
Testability, code:; ```cpp; #include <sofa/defaulttype/VecTypes.h>. #include <sofa/component/collision/detection/algorithm/BruteForceBroadPhase.h>; #include <sofa/component/collision/detection/algorithm/BVHNarrowPhase.h>; #include <sofa/component/collision/detection/algorithm/DefaultPipeline.h>. #include <sofa/component/collision/detection/intersection/NewProximityIntersection.h>. #include <sofa/component/collision/response/contact/DefaultContactManager.h>. #include <sofa/component/collision/geometry/PointModel.h>. #include <sofa/simulation/graph/DAGNode.h>; #include <sofa/simulation/graph/DAGSimulation.h>; #include <sofa/simulation/graph/init.h>. #include <sofa/simulation/DefaultAnimationLoop.h>. #include <sofa/component/statecontainer/MechanicalObject.h>. #include <sofa/core/objectmodel/Context.h>; #include <sofa/simulation/Node.h>; #include <sofa/simulation/Simulation.h>; #include <SofaComponentAll/initSofaComponentAll.h>. #include <sofa/helper/system/FileRepository.h>; #include <sofa/helper/logging/LoggingMessageHandler.h>; #include <sofa/core/logging/PerComponentLoggingMessageHandler.h>; #include <sofa/helper/BackTrace.h>. using namespace sofa::defaulttype;. using sofa::simulation::Node;; using sofa::simulation::graph::DAGNode;; using sofa::helper::system::DataRepository;. // collision pipeline; using sofa::component::collision::detection::algorithm::DefaultPipeline;; using sofa::component::collision::detection::algorithm::BruteForceBroadPhase;; using sofa::component::collision::detection::algorithm::BVHNarrowPhase;; using sofa::component::collision::detection::intersection::NewProximityIntersection;; using sofa::component::collision::response::contact::DefaultContactManager;; using sofa::component::collision::geometry::PointCollisionModel;. // mechanical object; using sofa::component::statecontainer::MechanicalObject;; using sofa::defaulttype::StdVectorTypes;; using sofa::type::Vec;. using sofa::core::behavior::MechanicalState;; using sofa::core::State;; using sofa::core:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1254291147:1521,log,logging,1521,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1254291147,2,"['Log', 'log']","['LoggingMessageHandler', 'logging']"
Testability," p1, ..., pn]| |p: [p0, p1, ..., pm]|; |r: [r0, r1, ..., rn]| |r: [r0, r1, ..., rm]|; |q: [q0, q1, ..., qn]| |q: [q0, q1, ..., qm]|; +--------------------+ +----------+---------+; |; mapping1 | mapping2; +--------------+-------------+; | |; +----------+---------+ +----------+---------+; | MO3 | | MO4 |; +--------------------+ +--------------------+; |x: [x0, x1, ..., xl]| |x: [x0, x1, ..., xo]|; |p: [p0, p1, ..., pl]| |p: [p0, p1, ..., po]|; |r: [r0, r1, ..., rl]| |r: [r0, r1, ..., ro]|; |q: [q0, q1, ..., ql]| |q: [q0, q1, ..., qo]|; +--------------------+ +--------------------+; ```. Version 1 will do:; 1. Launch a visitor in the CG's subgraph (`x.peq(p,alpha);`); **MO 1** : x = x + alpha p; **M0 2** : x = x + alpha p; **MO 3** : x = x + alpha p; **MO 4** : x = x + alpha p; 2. Launch a visitor in the CG's subgraph (`r.peq(q,-alpha); `); **MO 1** : r = r - alpha q; **M0 2** : r = r - alpha q; **MO 3** : r = r - alpha q; **MO 4** : r = r - alpha q. Version 2 will do:; 1. Launch a visitor in the CG's subgraph; **MO 1** :; x = x + alpha p; r = r - alpha q; **MO 2** :; x = x + alpha p; r = r - alpha q; **MO 3** :; x = x + alpha p; r = r - alpha q; **MO 4** :; x = x + alpha p; r = r - alpha q. Unless I'm missing something, the optimized version only removes one subgraph visit and allows the compilator to *\***maybe**\** optimize two subsequent operations on vectors. However, I don't think the compiler will actually do something here as the `MechanicalState::vMultiOp` simply makes two calls to `MechanicalState::vOp` which, well, is a virtual function and can't be inlined. To the question to whether or not we should keep one or the other, I guess we would have to benchmark it (use a scene with multiple top level mechanical object's, and multiple mapping levels). If the optimized version do not brings a lot of speed (which would be my guess since the cost of a visit isn't very big, but I may be wrong), I would remove the optimization as it is quite confusing for the reader.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191:2921,benchmark,benchmark,2921,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191,1,['benchmark'],['benchmark']
Testability," that each phase accesses a subset of the vector locations. To facilitate this, we decompose the vectors into **blocks**, and we look at the vector blocks accessed by each task phase.; Then we can have phases of different tasks that do not accesses the same locations, and so are independent and can run in parallel.; Then we model the dependencies between the tasks phases, and we use the dependency graph to schedule the parallel executions of the phases, keeping the sequential order of the operations. . All the user should have to do is to flag visitors that can be launched in parallel on the components : use a parallel version of Visitor::for_each / for_each_r to enable parallel execution of the components. **Steps performed at runtime:**. 1. Creation of « parallel visitors » using a parallel version of Visitor::for_each functions; - parallel version of for_each starts a parallel section, and creates tasks; - a task is defined as the execution of the visitor function on a component; 2. Execute the first time step sequentially, logging/profiling all accesses to vectors; - create parallel sections and tasks; - in each task, log all accesses to vectors using and overloaded helper::vector::operator[]; 3. During the second time step, we launch a parallel thread that ; - splits each task in phase each phase doing a (statically) given number of vector accesses.; - for each phase, identify the blocks of vectors accessed; - for each parallel section, build a dependency graph between task phases; - for each parallel section, schedule the parallel execution of the different task phases so that we keep the order of the operations and independent phases can run in parallel; 4. When the scheduling is computed, we run the following time steps in parallel; 5. When there is a change in the topology, we do the logging and scheduling phases again, while the simulation run sequentially. This is a work in progress. As you can imagine, designing and implementing this is far from trivial.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289:2103,log,logging,2103,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-330557289,3,['log'],"['log', 'logging']"
Testability," the context when an area is left. To give you a look of how it is (the V2 stuff are just transitional of course):; ```cpp; #include <SofaTest/Sofa_test.h>; using sofa::Sofa_test;. #include <SofaTest/TestMessageHandler.h>; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure with line number close to "" << __LINE__ ;; }. void complexTestBehavior(); {; {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should generate a failure"" ;; //msg_error(""HERE"") << ""This should generate a test failure"" ;; {; EXPECT_MSG_NOEMIT_V2(Error) ;; msg_error(""HERE"") << ""This should generate a test failure"" ;; }; }. {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEM",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:1464,test,test,1464,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643,1,['test'],['test']
Testability," unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected (1 ms); [ RUN ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent; ======================================================================; ERROR: test_addNewDataFromParent ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:4175,test,test,4175,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['test']
Testability,![ezgif com-crop](https://user-images.githubusercontent.com/21199245/67515939-f4466d80-f69f-11e9-8db7-ef8bd1fb6deb.gif). Tested with the last changes in ParticleSource and ParticleSink ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1194#issuecomment-546053902:121,Test,Tested,121,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1194#issuecomment-546053902,1,['Test'],['Tested']
Testability,![image](https://user-images.githubusercontent.com/21199245/45017005-b105e700-b026-11e8-9257-41d8325eea42.png). you mean normally the particles outside the floor should not be there in the image but directly respawn?; I tested the scriptEvent directly inside c++ code between 2 components and this works.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/723#issuecomment-418272101:220,test,tested,220,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/723#issuecomment-418272101,1,['test'],['tested']
Testability,"""If an issue reports a bug or any abnormal behavior in SOFA, a test highlighting the issue *must* be written."". I suggest to replace must by may or should. Must is very strict.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/260#issuecomment-299190327:63,test,test,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/260#issuecomment-299190327,1,['test'],['test']
Testability,"### Conclusion suggested. - SofaCUDA; - VolumetricRendering (ICI CE SERAIT LA RACINE DU ""plugin""); - CMakeLists.txt; - src; - VolumetricRendering/BaseVolumetricRenderer.h; - examples; - python/; - all python examples; - volumetricrendering/\_\_init\_\_.py; - tests; - extensions; - CUDA (nom de la target VolumetricRendering.CUDA); - CMakeLists.txt `find_package(VolumetricRendering)`; - src/>>>>; - VolumetricRendering/CUDA/BaseCudaVolumetricRenderer.h; - examples; - tests; - OpenCL (nom de la target VolumetricRendering.OpenCL); - CMakeLists.txt `find_package(VolumetricRendering)`; - src/>>> ; - VolumetricRendering/OpenCL/BaseCLXX.h; - examples; - tests; - Python (bindings); - CMakeLists.txt `find_package(VolumetricRendering)`; - src; - examples; - tests; - libraries",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4395#issuecomment-1884626282:259,test,tests,259,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4395#issuecomment-1884626282,4,['test'],['tests']
Testability,"(edited); No problem for me since boost is now mandatory. ; As seen in the main CMakeLists.txt, line 158:; `find_package(Boost REQUIRED)`. Does the job, no test broken, fixes one failing test: green light for me.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/99#issuecomment-266968755:156,test,test,156,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/99#issuecomment-266968755,2,['test'],['test']
Testability,"(not the PR itself) ; I am wondering why does the `plugins/` dir CMakefile tests the presence of Sofa.GL ?; IMO it should be in the CMakefile of the plugin itself, where it does ` find_package()`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3514#issuecomment-1333215217:75,test,tests,75,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3514#issuecomment-1333215217,1,['test'],['tests']
Testability,**Warning**: there are [two failing unit tests](https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-5.4_options/712/testReport/).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/368#issuecomment-323972645:41,test,tests,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/368#issuecomment-323972645,2,['test'],"['testReport', 'tests']"
Testability,"**https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-850/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/2/** warnings4Result/package.-377079774/. \+ . see BUILD_URL/**artifact/parent_dir/build/scene-tests/examples/Components/constraint/FixedLMConstraint.scn/output.txt**. =. https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-850/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/2//artifact/parent_dir/build/scene-tests/examples/Components/forcefield/JointSpringForceField.scn/output.txt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/850#issuecomment-446541019:219,test,tests,219,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/850#issuecomment-446541019,2,['test'],['tests']
Testability,"+1 for tracing compiler's time (and thus template instanciation and .h parsing) and fixing things. ; 15 sec of compiler time on a 8 core machine is actually (8*15 sec)), this is quite significant :) . Could you verify that the change didn't not decrease the performances (maybe we should have for each .h tp .cpp of core class a small benchmark to asses the performacne difference). On my side I'm still very surprised that all the move we are doing in removing code from .h to put them into dedicated translation unit has so limited impact on performances. To me either the compiler's are very good nowaydays (thanks to GO/IPO/LTO) or a lot of code was not optimized because of our code architecture (eg: no final keyworkd in overriden method preventing optimization).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3401#issuecomment-1285131009:335,benchmark,benchmark,335,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3401#issuecomment-1285131009,1,['benchmark'],['benchmark']
Testability,"- I agree that we should test data's value more thoroughly ; the only problem is that there are potentially thousands of combination to test (depending the component obviously); - as for the data gathering in the GUI, I am not sure but it is already done for Data related to visualization (tab ""Visualization"" when you double-click the component). If I remember well, the process checks that the data's name contains ""draw"" or ""show"" words. The problem is, how to tell the GUI that for Lights, it has to group all d_shadow* in a ""Shadow"" tab ? ; Otherwise, a solution could be to to add a ""Collection of Data"" type into SofaObject and register it at the construction. E.g ; ```; //In Light; DataCollection dc_shadow(""Shadowing"");; this->addCollectionData(dc_shadow);; dc_shadow.add(d_shadowEnabled);; dc_shadow.add(d_shadowTextureSize);. //In the GUI; foreach(component->getDataCollections() as dc ); {; tab = createNewTab(dc->getName()); foreach(dc.getAllData as data ); tab.add(data); }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/73#issuecomment-264143178:25,test,test,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/73#issuecomment-264143178,2,['test'],['test']
Testability,"- I made to PR trying to have symetry in the implementation: https://github.com/alxbilger/sofa/pull/2; - I also tested the code with Vec2 and Vec1 and it does not compile (so the use of template there is highly questionnable) . It could also be a good use case for c++ 20 concepts; . More comments (to go totally out of the scope of the PR):; - the methods ""addContact"" are probably not properly name... as this component has nothing to do with contact maybe addConstraint (?); - the ""merge"" data field is only in in Vec3 which means either the data field should be only on that specialization or that it should be used in Rigid3Type (or at least printing an ""unsupproted behavior"" when set) ; - the ""keepOrientDiff"" data field is only for Rigid, it shouldn't exists at all in the Vec3 version (it can be considered an favor of having inheritance in addition to specialization). ; - the ""numericalTolerance"" data field is only used for rigid specialization (so same comment as for keepOrientDiff"" and it seems it is only for rotational part.; - why BilateralInteractionConstraint<Rigid>::getVelocityViolation() is empty ? ; - in BilateralInteractionConstraint<Rigid3Types>::getConstraintResolution() there is getValue() in for loops(); - accessors are not used in BilateralInteractionConstraint<Rigid3Types>::buildConstraintMatrix()",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1187581578:112,test,tested,112,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1187581578,1,['test'],['tested']
Testability,"- There still is a dubious `else if (typeinfo->ValidInfo())` in binding_data.; - DataFileName should be handled as its own type.; - how not to push regression test results? so everyone do not have to download it. If I well remember this files are created automatically the first time the test is launched, and then used. Is it not enough?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/171#issuecomment-283292780:159,test,test,159,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/171#issuecomment-283292780,2,['test'],['test']
Testability,- info on time is already dumped at each scene test but not used on the CI.; - State is now tested using the project: https://github.com/sofa-framework/regression; Done in PR #830; Tested in PR #857,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/801#issuecomment-445825381:47,test,test,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/801#issuecomment-445825381,3,"['Test', 'test']","['Tested', 'test', 'tested']"
Testability,"------------------------------------------------------------------------; Benchmark Time CPU Iterations UserCounters...; -------------------------------------------------------------------------------------------------------------------; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/2 1000 ms 1000 ms 1 FPS=200/s frame=5ms; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/4 2043 ms 2016 ms 1 FPS=198.45/s frame=5.03906ms; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/8 4050 ms 4047 ms 1 FPS=197.683/s frame=5.05859ms; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/16 8135 ms 8125 ms 1 FPS=196.923/s frame=5.07812ms; BM_Scene_bench_StepFactor<SparseLDLSolverScene>/512 2606 ms 2562 ms 1 FPS=199.805/s frame=5.00488ms; BM_Scene_bench_StepFactor<SparseLDLSolverScene>/1024 5261 ms 5250 ms 1 FPS=195.048/s frame=5.12695ms; BM_Scene_bench_StepFactor<SparseLDLSolverScene>/2048 10407 ms 10406 ms 1 FPS=196.805/s frame=5.08118ms; ```. # `applyPermutation=""true""`. ```; -------------------------------------------------------------------------------------------------------------------; Benchmark Time CPU Iterations UserCounters...; -------------------------------------------------------------------------------------------------------------------; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/2 1581 ms 1562 ms 1 FPS=128/s frame=7.8125ms; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/4 3114 ms 3141 ms 1 FPS=127.363/s frame=7.85156ms; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/8 6271 ms 6281 ms 1 FPS=127.363/s frame=7.85156ms; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/16 12554 ms 12609 ms 1 FPS=126.89/s frame=7.88086ms; BM_Scene_bench_StepFactor<SparseLDLSolverScene>/512 3960 ms 3969 ms 1 FPS=129.008/s frame=7.75146ms; BM_Scene_bench_StepFactor<SparseLDLSolverScene>/1024 7831 ms 7844 ms 1 FPS=130.55/s frame=7.65991ms; BM_Scene_bench_StepFactor<SparseLDLSolverScene>/2048 15703 ms 15688 ms 1 FPS=130.55/s frame=7.65991ms; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2762#issuecomment-1060704325:1344,Benchmark,Benchmark,1344,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2762#issuecomment-1060704325,1,['Benchmark'],['Benchmark']
Testability,"------------------------------------; Benchmark Time CPU Iterations UserCounters...; -------------------------------------------------------------------------------------------------------------------; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/2 2071 ms 2094 ms 1 FPS=95.5224/s frame=0.0104687s; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/4 4103 ms 4094 ms 1 FPS=97.7099/s frame=0.0102344s; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/8 8253 ms 8188 ms 1 FPS=97.7099/s frame=0.0102344s; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/16 17380 ms 17312 ms 1 FPS=92.4188/s frame=0.0108203s; BM_Scene_bench_StepFactor<SparseLDLSolverScene>/512 6187 ms 6188 ms 1 FPS=82.7475/s frame=0.012085s; BM_Scene_bench_StepFactor<SparseLDLSolverScene>/1024 11960 ms 11938 ms 1 FPS=85.7801/s frame=0.0116577s; BM_Scene_bench_StepFactor<SparseLDLSolverScene>/2048 24209 ms 24156 ms 1 FPS=84.7814/s frame=0.011795s; ```. # `useSymbolicDecomposition=""true""`. ```; -------------------------------------------------------------------------------------------------------------------; Benchmark Time CPU Iterations UserCounters...; -------------------------------------------------------------------------------------------------------------------; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/2 1588 ms 1578 ms 1 FPS=126.733/s frame=7.89062ms; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/4 3182 ms 3156 ms 1 FPS=126.733/s frame=7.89062ms; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/8 6391 ms 6344 ms 1 FPS=126.108/s frame=7.92969ms; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/16 12823 ms 12938 ms 1 FPS=123.671/s frame=8.08594ms; BM_Scene_bench_StepFactor<SparseLDLSolverScene>/512 3981 ms 3938 ms 1 FPS=130.032/s frame=7.69043ms; BM_Scene_bench_StepFactor<SparseLDLSolverScene>/1024 7918 ms 7906 ms 1 FPS=129.518/s frame=7.72095ms; BM_Scene_bench_StepFactor<SparseLDLSolverScene>/2048 15920 ms 15938 ms 1 FPS=128.502/s frame=7.78198ms. ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2756#issuecomment-1060696095:1406,Benchmark,Benchmark,1406,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2756#issuecomment-1060696095,1,['Benchmark'],['Benchmark']
Testability,-tidy/checks/modernize-replace-auto-ptr.html) |; | [clang-analyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) |; | [clang-analyzer-security.insecureAPI.vfork](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.vfork.html) | [modernize-use-default-member-init](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-default-member-init.html) |; | [clang-analyzer-unix.API](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.API.html) | [modernize-use-emplace](https,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:17228,assert,assert,17228,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,1,['assert'],['assert']
Testability,". stiff_bead_node = composite_node.addChild(""stiff bead""); stiff_bead_node.addObject(""MeshOBJLoader"", name=""meshLoader_3"", filename=""mesh/bubille_in2.obj"", handleSeams=True); stiff_bead_node.addObject(""OglModel"", name=""VisualBody2"", src=""@meshLoader_3"", normals=""0"", color=[0, 0, 1, 1]); stiff_bead_node.addObject(""HexahedronCompositeFEMMapping"", input=""@.."", output=""@VisualBody2""). ball_node = root.addChild(""ball""); ball_node.addObject(""EulerImplicitSolver"", vdamping=0, rayleighMass=0, rayleighStiffness=0); ball_node.addObject(""CGLinearSolver"", iterations=100, tolerance=1e-5, threshold=1e-5). ball_node.addObject(""MechanicalObject"", template=""Rigid3d"", position=[0, 5, 0, 0, 0, 0, 1], showObject=True, showObjectScale=2.0); ball_node.addObject(""UniformMass"", totalMass=10000.0); ball_node.addObject(""SphereCollisionModel"", radius=0.5, group=1); ball_node.addObject(""UncoupledConstraintCorrection""); ```. As a side question: Am I even using the right components? How would you model this scene of a liver with an embedded tumor? I also tested the Heterogeneous-TetrahedronFEMForceField.scn example, but that is even more unstable. When you interact with the object through the mouse, it applies a huge force in the opposite direction. <video src=""https://github.com/sofa-framework/sofa/assets/29635054/dc863ba3-7e55-48e1-8b5d-30d078fd5b88; "" width=""200"" height=""auto"">. I also simplified the liver scene to just the SOFA liver. Same problem with the instability. ```python; import Sofa; import Sofa.Core. PLUGINS = [; ""Sofa.Component.AnimationLoop"",; ""Sofa.Component.Collision.Detection.Algorithm"",; ""Sofa.Component.Collision.Detection.Intersection"",; ""Sofa.Component.Collision.Response.Contact"",; ""Sofa.Component.Constraint.Lagrangian.Solver"",; ""Sofa.Component.Visual"",; ""Sofa.Component.Collision.Geometry"",; ""Sofa.Component.Constraint.Projective"",; ""Sofa.Component.LinearSolver.Iterative"",; ""Sofa.Component.Mapping.NonLinear"",; ""Sofa.Component.Mass"",; ""Sofa.Component.ODESolver.Backward"",; ""So",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4597#issuecomment-2006525838:7371,test,tested,7371,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4597#issuecomment-2006525838,1,['test'],['tested']
Testability,"/SOFA_study/SOFA_v23.06.00_MacOS; > --- PYTHONPATH ---; > /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages:/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.12.01_MacOS/plugins/SofaPython3/lib/python3/site-packages:/path/to/SofaPython3/lib/python3/site-packages:; > --- sys.path ---; > ['', '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages', '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.12.01_MacOS/plugins/SofaPython3/lib/python3/site-packages', '/path/to/SofaPython3/lib/python3/site-packages', '/opt/anaconda3/envs/sofarl/lib/python38.zip', '/opt/anaconda3/envs/sofarl/lib/python3.8', '/opt/anaconda3/envs/sofarl/lib/python3.8/lib-dynload', '/opt/anaconda3/envs/sofarl/lib/python3.8/site-packages']; > #################; > ```; > ; > ### Logs; > **Full output**; > ; > ```; > (sofarl) bemore@BeMores-MacBook-Pro site-packages % python ; > Python 3.8.19 (default, Mar 20 2024, 15:27:52) ; > [Clang 14.0.6 ] :: Anaconda, Inc. on darwin; > Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; > >>> import Sofa; > ---------------------------------------; > Checking SOFA_ROOT and SOFAPYTHON3_ROOT; > Using environment variable SOFA_ROOT: /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS; > ---------------------------------------; > Traceback (most recent call last):; > File ""<stdin>"", line 1, in <module>; > File ""/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/__init__.py"", line 140, in <module>; > import Sofa.Helper; > ImportError: dlopen(/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so, 0x0",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179:4875,Log,Logs,4875,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179,1,['Log'],['Logs']
Testability,/bugprone-multiple-statement-macro.html) | [hicpp-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-no-malloc.html) |; | [bugprone-string-constructor](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-string-constructor.html) | [hicpp-noexcept-move](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-noexcept-move.html) |; | [bugprone-suspicious-memset-usage](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-suspicious-memset-usage.html) | [hicpp-signed-bitwise](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-signed-bitwise.html) |; | [bugprone-undefined-memory-manipulation](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-undefined-memory-manipulation.html) | [hicpp-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-special-member-functions.html) |; | [bugprone-use-after-move](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-use-after-move.html) | [hicpp-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-static-assert.html) |; | [bugprone-virtual-near-miss](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-virtual-near-miss.html) | [hicpp-undelegated-constructor](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-undelegated-constructor.html) |; | [cert-dcl03-c](https://clang.llvm.org/extra/clang-tidy/checks/cert-dcl03-c.html) | [hicpp-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-use-auto.html) |; | [cert-dcl21-cpp](https://clang.llvm.org/extra/clang-tidy/checks/cert-dcl21-cpp.html) | [hicpp-use-emplace](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-use-emplace.html) |; | [cert-dcl50-cpp](https://clang.llvm.org/extra/clang-tidy/checks/cert-dcl50-cpp.html) | [hicpp-use-equals-default](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-use-equals-default.html) |; | [cert-dcl54-cpp](https://clang.llvm.org/extra/clang-tidy/checks/cert-dcl54-cpp.html) | [hicpp-use-equals-delete](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-use-equals-dele,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:4222,assert,assert,4222,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,1,['assert'],['assert']
Testability,"/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3648,test,tests,3648,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['tests']
Testability,"/libSofaSimulationGraph.so.17.dev.0(sofa::simulation::graph::DAGNode::doExecuteVisitor(sofa::simulation::Visitor*, bool)+0x9d) [0x7f65889ce59d]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::Node::executeVisitor(sofa::simulation::Visitor*, bool)+0x111) [0x7f6588281511]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::DefaultAnimationLoop::step(sofa::core::ExecParams const*, double)+0x124) [0x7f6588263ed4]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::Simulation::animate(sofa::simulation::Node*, double)+0x54) [0x7f65882c9c44]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(sofa::Python_scene_test::run(sofa::Python_test_data const&)+0x2e1) [0x7f658ebb3791]; -> ../builds/pr/all/bin/Compliant_test(sofa::Python_scene_test_sofa_python_scene_tests_Test::TestBody()+0x2e) [0x54f76e]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*)+0x33) [0x7f658ebd7223]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::Test::Run()+0xb7) [0x7f658ebca917]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestInfo::Run()+0x9e) [0x7f658ebca9be]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestCase::Run()+0xa5) [0x7f658ebcaac5]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::internal::UnitTestImpl::RunAllTests()+0x248) [0x7f658ebcd198]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::UnitTest::Run()+0x54) [0x7f658ebcd454]; -> ../build",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:6844,Test,TestBody,6844,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320,1,['Test'],['TestBody']
Testability,"/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3567,test,tests,3567,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['tests']
Testability,1 new scene-test error due to serr -> msg_error:; - `RemovingTriangle2EdgeProcess.scn: [EdgePressureForceField(edgePressureFF0)] No mechanical Object linked.`. 2 new unit-test failures due to serr -> msg_error:; - `SceneChecker_test.checkUsingAlias_withAlias: TriangleModel requires a BaseMeshTopology`; - `SceneChecker_test.checkUsingAlias_withoutAlias: TriangleModel requires a BaseMeshTopology`. @epernod I know you encountered and fixed the SceneChecker_test ones. Where is that?; @marques-bruno Can you look at RemovingTriangle2EdgeProcess.scn for a fix?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/916#issuecomment-462274812:12,test,test,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/916#issuecomment-462274812,2,['test'],['test']
Testability,2 Tests related to TriangularFEMForceFieldOptim seems to fail:; - RegressionTests.Regression_test/Regression_test/StateRegression_test.sceneTest/TriangularFEMForceFieldOptim; - UnitTests.SofaMiscFem_test/TriangleFEMForceField3_test.checkTriangularFEMForceFieldOptim_init,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2284#issuecomment-894273835:2,Test,Tests,2,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2284#issuecomment-894273835,1,['Test'],['Tests']
Testability,2 regression tests are failing : ; - Regression_test/StateRegression_test.sceneTest/EulerExplicitSolver; - Regression_test/StateRegression_test.sceneTest/EulerImplicitSolver. Could it be that the references of these 2 scenes are bogus themselves ? (thus needing to update them?),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2193#issuecomment-873004315:13,test,tests,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2193#issuecomment-873004315,1,['test'],['tests']
Testability,2 tests are considered as failing since the message of RemovedData is thrown as an `Error`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3934#issuecomment-1600428420:2,test,tests,2,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3934#issuecomment-1600428420,1,['test'],['tests']
Testability,2 tests are failing is this normal ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/656#issuecomment-389781136:2,test,tests,2,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-389781136,1,['test'],['tests']
Testability,"2080: 20% of the components make 80% of the result. Components list: https://docs.google.com/spreadsheets/d/1mPGnMrC-3Yo8dEdm5549dRhKcquK4mDmWoNRQt711gs/edit#gid=0. General idea: Repackage components ina way that a subset of the components will be mandatory. These selected components will be maintained with a high level of quality (tests, doc, comments, etc...); Binary distribution will include only this subset. On a fist time:; All the other components will remain available in the repo, but optionnal. (plugins?) ; Once the transition is mature enough, move the deprecated components to another repo ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/225#issuecomment-290699442:334,test,tests,334,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/225#issuecomment-290699442,1,['test'],['tests']
Testability,": Failed to finding matching FBConfig for QSurfaceFormat(version 3.2, options QFlags<QSurfaceFormat::FormatOption>(DeprecatedFunctions), depthBufferSize -1, redBufferSize 1, greenBufferSize 1, blueBufferSize 1, alphaBufferSize -1, stencilBufferSize -1, samples -1, swapBehavior QSurfaceFormat::SingleBuffer, swapInterval 0, colorSpace QColorSpace(), profile QSurfaceFormat::CompatibilityProfile); [WARNING] [Qt] qglx_findConfig: Failed to finding matching FBConfig for QSurfaceFormat(version 3.2, options QFlags<QSurfaceFormat::FormatOption>(DeprecatedFunctions), depthBufferSize -1, redBufferSize 1, greenBufferSize 1, blueBufferSize 1, alphaBufferSize -1, stencilBufferSize -1, samples -1, swapBehavior QSurfaceFormat::SingleBuffer, swapInterval 0, colorSpace QColorSpace(), profile QSurfaceFormat::CompatibilityProfile); [WARNING] [Qt] qglx_findConfig: Failed to finding matching FBConfig for QSurfaceFormat(version 3.2, options QFlags<QSurfaceFormat::FormatOption>(DeprecatedFunctions), depthBufferSize -1, redBufferSize 1, greenBufferSize 1, blueBufferSize 1, alphaBufferSize -1, stencilBufferSize -1, samples -1, swapBehavior QSurfaceFormat::SingleBuffer, swapInterval 0, colorSpace QColorSpace(), profile QSurfaceFormat::CompatibilityProfile); [FATAL] [Qt] Could not initialize GLX. ########## SIG 6 - SIGABRT: usually caused by an abort() or assert() ##########; sofa::helper::BackTrace::sig(int); gsignal; abort; _Z13qErrnoWarningPKcz+0; QOpenGLContext::create(); QRhiGles2InitParams::newFallbackSurface(QSurfaceFormat const&); QBackingStoreRhiSupport::create(); QWidgetPrivate::create(); QWidget::create(unsigned long long, bool, bool); QWidgetPrivate::setVisible(bool); sofa::gui::qt::RealGUI::InitApplication(sofa::gui::qt::RealGUI*); sofa::gui::qt::RealGUI::CreateGUI(char const*, boost::intrusive_ptr<sofa::simulation::Node>, char const*); sofa::gui::common::GUIManager::createGUI(boost::intrusive_ptr<sofa::simulation::Node>, char const*); __libc_start_main; Aborted (core dumped); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:14076,assert,assert,14076,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,1,['assert'],['assert']
Testability,":) . I think we should use 'must' only if we are willing to insure that this happens each time. This mean forcing people to do a lot of extra work when submitting an issue. And forcing people that are already kind enough to submit an issue does not sound very appealing to me. . So I prefer to say 'should' and explain why it helps a lot in the general process of bug-fixing to have test cases to validate the issue, correct it and fix it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/260#issuecomment-299199200:383,test,test,383,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/260#issuecomment-299199200,1,['test'],['test']
Testability,"<frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3490,test,tests,3490,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['tests']
Testability,"> * @fredroy: What should we do with NonUniformHexahedronFEMForceFieldDensity? Its reference is commented in the CMakeLists. I did not touch it.; > . IMO:; - nobody complained about its absence in the project since... ?; - no relevant commits since a loooooooong time; - no example; - almost no doc (although a paper citation is present); - obviously no test; - it needs a kind of file (density volume), but we dont even know the format/standard, and if there is one in the repo already... I would simply delete it 🧐",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2333#issuecomment-916716382:354,test,test,354,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2333#issuecomment-916716382,1,['test'],['test']
Testability,"> +1; > I remember it was at a time where Intel driver and Linux was crashing #526 with Core profile (I guess?); > Maybe a bug in mesa at that time or the intel driver.; > Anyway we would need people using Intel & Linux to test this on their setup. Thanks for linking this issue, I wasn't aware. . I wouldn't be surprise that the crash that was initially happening was for the same reason as the one for which I made this PR (the 0 GL extension -> std::string(nullptr) -> crash). With this PR, such a crash won't happen anymore. In addition, the extensions will now be found due to the magic call to `f.setOption(QSurfaceFormat::DeprecatedFunctions, true);`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1690#issuecomment-753931342:223,test,test,223,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1690#issuecomment-753931342,1,['test'],['test']
Testability,"> . > I just had a look on the implementation of `FullVector`. I notice the following differences between `operator[](Index i)` and `element(Index i)`:; > ; > * `element(Index i)` is virtual; > ; > * `element(Index i)` returns necessarily a `SReal` independent from the type of `FullVector`. It may lead to a type conversion therefore an impact on the performances. But usually, all the components are compiled with `SReal`, so I am not sure there is a conversion here. So it should not affect the performances.; > ; > ; > I am confused here, because I cannot believe that the speedup you get is only because of the virtual function. I guess you can try again your benchmark, but instead of using `operator[](Index i)`, use `FullVector<Real>::element(Index i)`. Note that I force the `element` function to be the one in `FullVector<Real>`. with `FullVector<Real>::element(Index i)`:; ` 5000 iterations done in 59.448 s ( 84.1071 FPS)` more or less same as with the operator[] then",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3231#issuecomment-1236824001:665,benchmark,benchmark,665,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3231#issuecomment-1236824001,1,['benchmark'],['benchmark']
Testability,"> 2 new scenes tests are failing on windows: `FEMBAR_ShewchukPCGLinearSolver_BlockJacobiPreconditioner` `FEMBAR_ShewchukPCGLinearSolver_PrecomputedWarpPreconditioner` Any idea why? What is different form the others ones you added?. That's a good question! Especially as I am on Windows. I'll have a look. Otherwise, I'll remove those tests for the moment.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2776#issuecomment-1075373896:15,test,tests,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2776#issuecomment-1075373896,2,['test'],['tests']
Testability,"> ; > * removed caduceus from regression. Could you say why?; > . yes sorry, I put the comment in the commit message: ""[tests] Remove caduceus from the regression test, This scene is not appropriate to test as the resolution seems to depends on the HW for the Gauss Seidel to converge""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1669#issuecomment-749537068:120,test,tests,120,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1669#issuecomment-749537068,3,['test'],"['test', 'tests']"
Testability,> ; > ; > 2 regression tests are failing :; > ; > * Regression_test/StateRegression_test.sceneTest/EulerExplicitSolver; > ; > * Regression_test/StateRegression_test.sceneTest/EulerImplicitSolver; > ; > ; > Could it be that the references of these 2 scenes are bogus themselves ? (thus needing to update them?). yes probably as both scenes are using MeshMatrixMass. I'll try to check the values to see if it is a regression or a fix... 🤞,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2193#issuecomment-873985742:23,test,tests,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2193#issuecomment-873985742,1,['test'],['tests']
Testability,"> ; > ; > > @fredroy you wanted some tests.... I have added ""some""... I know 2 are failing but I think the mesh is wrong. I will fix that in another PR; > ; > Could you identify them in the code (in a comment, maybe add the url or the number of this PR); > In case you dont have time to solve them or something like that; otherwise we wont know when these tests had failed 😏. In fact the checker had a bug. All the tests are now working. Thanks for the review, the tests were worth it!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1594#issuecomment-807574906:37,test,tests,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1594#issuecomment-807574906,4,['test'],['tests']
Testability,"> ; > ; > > I really dont see why the Quater test fails with mac in this PR 🤔; > ; > @fredroy I see the test uses randomly generated quaternions as input (the seed is based on the current time -> this should be changed). It's probably a hint that something is wrong, and that it fails randomly. Duly noted",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2323#issuecomment-921838381:45,test,test,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2323#issuecomment-921838381,2,['test'],['test']
Testability,"> ; > ; > > Just looking at the code, it is fine for me but I don't have the whole overview of Link API. I know that @damienmarchal was reworking the BaseLink API. If you could give a look ?; > ; > Yes, I kind of noticed that it required a rework, but my goal was just to fix a failing unit test. I recall that this test was failing on purpose actually (to keep track to work on the Link); @damienmarchal ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2166#issuecomment-863977710:291,test,test,291,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2166#issuecomment-863977710,2,['test'],['test']
Testability,"> ; > ; > > ```; > > * add a compiler flags no-attributes for MSVC; > > ```; > ; > I didn't do it for MSVC, is there an equivalent?. My bad, i thought the cmake test was ""if is MSVC"" 🙄; As for your question, no idea",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1682#issuecomment-751700038:161,test,test,161,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1682#issuecomment-751700038,1,['test'],['test']
Testability,"> ; > ; > > ```; > > * removed caduceus from regression. Could you say why?; > > ```; > ; > yes sorry, I put the comment in the commit message: ""[tests] Remove caduceus from the regression test, This scene is not appropriate to test as the resolution seems to depends on the HW for the Gauss Seidel to converge"". Ah my bad, did not think to check the commits messages",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1669#issuecomment-749550372:146,test,tests,146,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1669#issuecomment-749550372,3,['test'],"['test', 'tests']"
Testability,"> ; > ; > > mac: `Build OK. FIXME: 17 units, 11 scenes, 3 regressions`; > > 😬; > ; > what a shame I don't have a mac to test here :). Windows is even better: `windows_vs2017_options — Build OK. FIXME: 17 units, 16 scenes, 3 regressions `; 🙃",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2359#issuecomment-927938811:120,test,test,120,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2359#issuecomment-927938811,1,['test'],['test']
Testability,"> ; > ; > @fredroy you wanted some tests.... I have added ""some""... I know 2 are failing but I think the mesh is wrong. I will fix that in another PR. Could you identify them in the code (in a comment, maybe add the url or the number of this PR) ; In case you dont have time to solve them or something like that; otherwise we wont know when these tests had failed 😏",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1594#issuecomment-807059522:35,test,tests,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1594#issuecomment-807059522,2,['test'],['tests']
Testability,"> ; > ; > If I understood correctly, there are two testing libraries for `Sofa.LinearAlgebra`:; > ; > 1. An interface which is only an abstract code waiting to be instantiated with some types. Only header files. This one is Sofa.LinearAlgebra.Testing; > ; > 2. The actual library which includes some tests in cpp files. This one is Sofa.LinearAlgebra_test. But I don't see any CMakeLists.txt. Did I miss something?. I forgot to add the file 🙃; > ; > ; > I approve this architecture. (the names of the libraries are not explicit. It's difficult to understand the difference.). One naming convention could be: implementations of the tests themselves always end with _test, and the frameworks helping write tests will be suffixed with Testing (i.e sofa::blablabla::testing for Sofa.Blablabla.Testing); Actually I have more or less convert the existing sofadefaulttype.test and sofadefaulttype.testing for SofaLinearAlgebra",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2383#issuecomment-934160920:51,test,testing,51,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2383#issuecomment-934160920,10,"['Test', 'test']","['Testing', 'test', 'testing', 'tests']"
Testability,"> ; > ; > Indeed :; > ; > * SceneTests.examples/Benchmark/TopologicalChanges.ProjectToPlaneConstraint_RemovingMeshTest.scn; > ; > * SceneTests.examples/Benchmark/TopologicalChanges.FixedPlaneConstraint_RemovingMeshTest.scn; > crash.; > Should we let them crash and appear in the CI log (thus maybe making the result even more confusing), or should we ignore it on the CI ?. yes as I said in the description, they are failing because the code is not working.; Either we put them to remind me I need to fix those components (but could be in several months); or we remove them from PR and copy past in an issue (maybe cleaner) ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2161#issuecomment-863872196:48,Benchmark,Benchmark,48,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2161#issuecomment-863872196,3,"['Benchmark', 'log']","['Benchmark', 'log']"
Testability,"> ; > ; > Nice work @epernod 👍; > If you already know what must be done to fix the tests, I'm for doing it in this PR !. ok I fixed some of them. The last 2 failing tests need big changes. we can comment them for the moment.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2249#issuecomment-883341079:83,test,tests,83,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2249#issuecomment-883341079,2,['test'],['tests']
Testability,"> ; > ; > Very nice work @fredroy 👏 👏 👏; > ; > I have 2 side questions:; > ; > * shouldn't this be under applications/projects instead of applications/plugins (I would feel more logical to have it next to runSofa basically) ?; > . Hum, could be in the project, as there is one executable (standalone glfw launcher), but there is also one library (which can be used for runSofa as a plugin; this one is very similar to SofaQuiQt if you want). > * is it planned to host the repository in sofa-framework organization ?. Of course, my repo was more a sandbox, once this is a bit tested by people, we can move it into the sofa-framework organization.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2062#issuecomment-843017590:178,log,logical,178,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2062#issuecomment-843017590,3,"['log', 'sandbox', 'test']","['logical', 'sandbox', 'tested']"
Testability,"> ; > ; > mac: `Build OK. FIXME: 17 units, 11 scenes, 3 regressions`; > 😬. what a shame I don't have a mac to test here :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2359#issuecomment-927800514:110,test,test,110,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2359#issuecomment-927800514,1,['test'],['test']
Testability,"> > > Just looking at the code, it is fine for me but I don't have the whole overview of Link API. I know that @damienmarchal was reworking the BaseLink API. If you could give a look ?; > > ; > > ; > > Yes, I kind of noticed that it required a rework, but my goal was just to fix a failing unit test.; > ; > I recall that this test was failing on purpose actually (to keep track to work on the Link); > @damienmarchal ?. Well... putting technical debt in failing unit tests does not force developers to fix the debt... It is as invisible as an GitHub issue (yes, because we know that the test is failing, so at some point we just don't care about it), and it pollutes diagnostics on the CI.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2166#issuecomment-864035253:295,test,test,295,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2166#issuecomment-864035253,4,['test'],"['test', 'tests']"
Testability,"> > > Ok for me, but could you explain in which case you have this problem? Setting the component to invalid is a good idea. Breaking the loop might create some bigger issue in components using the topology as it won't be set.; > > ; > > ; > > We have this problem when using subtopologies defined using BoxROIs. The subTopo has fewer points than the original topology (Since it is a subset of it) but the triangles in that subtopo refer to nodes indexed with the numbering in the original topology that are out of bounds within the subtopo world. Not sure that is clear!; > ; > There is something un-catholic there... So if I understand well, you have triangle in your topology that refer to point out of bound to your current node mechanicalObject? I don't understand how it can work. It will crash as soon as a component will try to access a dof passing through the topology no?. Sorry for the late reply!; So it is a case where the node where the subtopology is defined does not contain a MechanicalObject. It is only defined to add a ForceField applying onto a subpart of the node of the MechanicalObject. An example is in this scene: https://github.com/SofaDefrost/ModelOrderReduction/blob/master/tools/test/sofa_test_scene/quadruped.py",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4242#issuecomment-1820989683:1209,test,test,1209,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4242#issuecomment-1820989683,1,['test'],['test']
Testability,"> > I agree to remove the macro, but why removing the template? I think it matches better the constructors available in the STL.; > ; > I was wondering the same, but everything was tested with ` __STL_MEMBER_TEMPLATES` not defined for years so thats why I prefered to use the ""legacy"" code. But I can change and take the templated one otherwise 😶‍🌫️. alright, I am not against it. It's not that important",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4251#issuecomment-1774607704:181,test,tested,181,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4251#issuecomment-1774607704,1,['test'],['tested']
Testability,"> > I took the liberty to retrieve the ArticulatedControllers (which were deprecated/removed some years ago) and put it back into it. Especially because I retrieved the ""man-walking"" example which is quite cool in my opinion. But the code was created by DigitalTrainers, I dont know if it could be bothersome license-wise.; > ; > Are you sure ? If it's the case it's only the controller... because the code of the articulatedSystemMapping was done in the SHACRA team... In any case we had a contract at that time with Digital Trainers on suture that said that the SOFA code developed in the project was open-source and that Inria keeps the property.; > . Yes it is only the controllers. I checked the git log history and it was made by P.J Bensoussan 🧐 on behalf of Digital Trainers.; But good to know that Inria has the property in any case.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1056596552:705,log,log,705,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1056596552,1,['log'],['log']
Testability,"> > Last regression test failing will disappear as soon as PR #4494 is merged as the new version of isquadDelaunay method is not using this method intersectionWithEdge anymore. And for the note, the error is a false positive. The regression should be regenerated at one point.; > ; > Regressions are OK but the error being an unit test `InciseProcessor_test.InciseTriangles`, it is because of `[ERROR] [TriangleSetGeometryAlgorithms(GeomAlgo)] Orthogonal projection failed` I dont really see how it can be a false positive ?. Hi, ; I meant, false positive because it is part of the snapping algorithm in the incision which was already buggy but the error was not catch before.; The projection was computed totally outside of the edge (the mesh is a square of size 10x10:; coord_edge1: [5.44854, 5.02682, -0.832787] - [4.86141, 4.79438, -0.760481]; coord_edge2: [4.99791, 4.99949, -0.778808] - **[20676.1, 52846.7, 1933.72]**. the result was a strange (but not crashing 🤔 ) incision; ![image](https://github.com/sofa-framework/sofa/assets/21199245/c3b0bfbc-9867-4991-bfaf-2120aaee4203). In fact the correct fix is to exit the snapping if the projection failed and continue the incision normally instead of forcing the projection and use a ""random"" point of the triangle to be snapped. . Here is the result after:; ![IncisionTrianglesProcess_00000002](https://github.com/sofa-framework/sofa/assets/21199245/84858056-93c6-44ad-bd19-1e1151409c1a)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4194#issuecomment-2044595739:20,test,test,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4194#issuecomment-2044595739,2,['test'],['test']
Testability,"> > So, as we discussed during the dev meeting. 2 modifications:; > > ```; > > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > > ; > > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > > ```; > > ; > > ; > > @guparan can you confirm this is now ok to go?; > ; > The _FindCGAL.cmake_ was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`.; > ; > IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful. Ok I see, maybe we could add a test on top of ""our FindCGAL"" checking if CGAL_DIR is known or not. @guparan could you give your feedback so we can converge on that PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910:1046,test,test,1046,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910,1,['test'],['test']
Testability,"> > The CI does not try to install the resulting build... so did you try to make the target ""INSTALL"" ?; > ; > I don't understand. Your cmake change is mostly affecting the install process, which is not tested on the CI... so did you try to install your current build ? ( to be sure that the change does not incur any error)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3359#issuecomment-1270972063:203,test,tested,203,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3359#issuecomment-1270972063,1,['test'],['tested']
Testability,"> > VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA; > ; > Ok that makes sense. Yeah I guess the clean thing would be to swap every usage in SOFA to the new dynamic TypeInfo, and to somehow depreciate the static one.; > ; > Looks good to me, I look forward to testing it, probably with Eigen types to extend what @Younesssss started. Definitly a must have...but not in the same PR :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712909548:45,test,test,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712909548,2,['test'],"['test', 'testing']"
Testability,"> > why not defining the test in Sofa.component.ODESolver.tests in place of Sofa.component.ODESolver_test ? To me this looks more consistant and coherent with our naming scheme as well as having the tests in a child directory of ODESolver. > Hum I kept the naming from before, and this is an executable, not a library so maybe something to differenciate. But I dont really care the naming, and we can change it if needed. I wouldn't say it is just name because we have given a specific meaning to the '.'. Sofa.component.ODESolver.tests is a subpackage (and a subdir) of Sofa.component.ODESolver while Sofa.component.ODESolver_tests is a side package. ; Shouldn't we prefer to have the tests shipped with the code they are supposed to validate ? . > > * why centralizing the testing.tools which breaks modularity instead of letting them at their right logical location ?; > > To me having something like; > > ```; > > SofaDeformable.testing.tools/MassSpringSystemCreation ; > > ```; > > Is much better than; > > ```; > > Sofa.testing.tools/MassSpringSystemCreation ; > > ```. > For those two (`MassSpringSystemCreation` and `SunSystemCreation`), it is not really creating something ODESolver-specific so there is no ""logical"" place by itself. The given example is nothing related to ODESolver but SofaDeformable. As MassSpringSystemCreation is creating StiffSpringForceField (which is in SofaDeformable), then the logical place seems to straightforwardly point to SofaDeformable and not Sofa.testing.whatever.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2650#issuecomment-1040571894:25,test,test,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2650#issuecomment-1040571894,12,"['log', 'test']","['logical', 'test', 'testing', 'tests']"
Testability,"> @bakpaul Strange, I checked again (with and without parallelization) and I don't have the artefact you have. `ShewchukPCGLinearSolver` is not a difference because you use an alias of it (`PCGLinearSolver`). In the benchmark I translated the beam to measure mainly the contacts and skip the falling part. But I still don't see the artefact when I remove the translation. @fredroy @hugtalbot would you like to test this branch with the scene provided by @bakpaul ?. I tested the scene of @bakpaul and I get the same artefact on ubuntu 23.04/gcc12.2; EDIT: and I dont have the artefact on Windows/MSVC2022 😶‍🌫️",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1643181408:216,benchmark,benchmark,216,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1643181408,3,"['benchmark', 'test']","['benchmark', 'test', 'tested']"
Testability,> @epernod should add to non regression tests. https://github.com/sofa-framework/regression; Let me know if you do it yourself or if you need my input (I have time... this holiday week),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1260#issuecomment-591342521:40,test,tests,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1260#issuecomment-591342521,1,['test'],['tests']
Testability,> @epernod you mean that the scene you mentioned did not make a match between the force fields?. no this scene is working fine and both FEM have exactly the same behavior. ; I did a previous bad tests several weeks ago and it was not working... but now it is working nicely. wait for CI for triple check and go,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3991#issuecomment-1655449085:195,test,tests,195,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3991#issuecomment-1655449085,1,['test'],['tests']
Testability,"> @fredroy I think all the problems you found are only due to RestShapeSpringForceField. I am now able to run (properly I think) both scenes SingleBeamDeployment.scn and 3instruments_collis.scn. Could you confirm that?. Good news, it works well !; And a bad news but not directly related to your PR, if `parallelCollisionDetectionAndFreeMotion` is activated for the animationloop in `scenes/3instruments_collis.scn `, there is a crash on the message mechanism. Here is the backtrace:; ```; 	[Inline Frame] Sofa.Helper.dll!std::_Check_C_return(int _Res) Line 131	C++; 	[Inline Frame] Sofa.Helper.dll!std::_Mutex_base::lock() Line 50	C++; 	[Inline Frame] Sofa.Helper.dll!std::lock_guard<std::mutex>::{ctor}(std::mutex & _Mtx) Line 427	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::process(sofa::helper::logging::Message & m) Line 151	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::LoggerStream::~LoggerStream() Line 198	C++; 	Sofa.GUI.Qt.dll!redirectQtMessages(QtMsgType type, const QMessageLogContext & context, const QString & msg) Line 40	C++; 	[External Code]	; 	Sofa.GUI.Qt.dll!sofa::gui::qt::setMessageIconFrom(QTreeWidgetItem * item, sofa::core::objectmodel::Base * object) Line 325	C++; 	Sofa.GUI.Qt.dll!sofa::gui::qt::ObjectStateListener::notifyEndEdit() Line 350	C++; 	Sofa.Core.dll!sofa::core::objectmodel::DDGNode::notifyEndEdit() Line 83	C++; 	[Inline Frame] Sofa.Helper.dll!sofa::helper::logging::MessageDispatcherImpl::process(sofa::helper::logging::Message &) Line 119	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::process(sofa::helper::logging::Message & m) Line 152	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::LoggerStream::~LoggerStream() Line 198	C++; >	Sofa.Core.dll!sofa::core::behavior::BaseForceField::buildStiffnessMatrix(sofa::core::behavior::StiffnessMatrix * matrix) Line 62	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsystem::AssemblingMatrixSystem<sofa::linearalgebra::BTDMatr",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1436394850:769,log,logging,769,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1436394850,5,"['Log', 'log']","['LoggerStream', 'logging']"
Testability,"> @olivier-roussel The findGTest https://cmake.org/cmake/help/v3.19/module/FindGTest.html of cmake only works for CMake >= 3.20 😭 (tested with cmake 3.16 and 3.19 ❌ whereas cmake 3.20 and 3.28 ✅). Indeed again :cry: ; Another option but maybe a bit conda-specific would be to switch to config mode `find_package(GTest CONFIG QUIET)`, as the conda package comes with the GTest cmake config files. Tested with conda + cmake 3.19.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1923358310:131,test,tested,131,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1923358310,2,"['Test', 'test']","['Tested', 'tested']"
Testability,"> @olivier-roussel thanks for the conda test and the feedbacks 👍 You should have made suggestions and/or make a PR on my branch, as I cannot credit you your patches 😵. Indeed, sorry about that",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1923345776:40,test,test,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1923345776,1,['test'],['test']
Testability,"> Ah that is good to know 👍 Keep us in touch !. Hi @fredroy,; I tested it more and the results seem very strange to me:. For caduceus scene, in v21.06 I can only drag the caduceus to the right direction using mouse with bilaterial , none of the left, up and down directions work. And the same case happens in v19.12, only moving mouse to the right works. While when I test my own gallbaldder scene in v19.12, all of the directions work with the mouse, but none of the directions work in v21.06.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2486#issuecomment-977632348:64,test,tested,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2486#issuecomment-977632348,2,['test'],"['test', 'tested']"
Testability,> An opportunity to add a unit test in SofaPython3 ;); +1. But SofaPython3 is not the place to validate sofa core behavior. It would be much better to have it in Sofa implemented using simpleapi. And not in a reverting PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3464#issuecomment-1307358562:31,test,test,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3464#issuecomment-1307358562,1,['test'],['test']
Testability,"> Any interest to keep newmat ? I remember a discussion during a sofadevmeeting with @jnbrunet saying that we should remove the usage of newmat. Especially because it seems this library is really old and not maintained anymore.; > http://robertnz.net/nm_intro.htm; > Latest update seems to be 2008 for newmat11 (beta)... Good point. I just saw an opportunity to easily benefit from the type-parameterized tests that I introduced for `BaseMatrix`. An option is to remove it, but it could also be moved into an external plugin. Let's discuss it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2311#issuecomment-909026838:405,test,tests,405,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2311#issuecomment-909026838,1,['test'],['tests']
Testability,"> Any news @nhnhan92 ?; > Note that for my remark on the header, having your project name if fine for us. What matters for us is to have first the SOFA header (LGPL) up in the file. Would this be possible?; > Let me thank you again for this nice contribution. Hi @hugtalbot,; Sorry for late response. I have recently been in the middle of some work (related to this project). Therefore, there is no progress so far, however, I plan to add the addKtoMatrix module to the FF and also try to improve coding stuffs (will be updated as soon as possible). On the other hand, I have discussed with my team member and advisor about the header. We agree with your above suggestion, but I just wonder is it possible for this FF to appear in both the SOFA source code (in the future) and our own under-developing plugin? we are not familiar with this procedure, sorry for that; If it is okay, please write the name of the contributor as:; JST/PRESTO Project: TouchIoT-Smart Tangible Sensing Enabler for Tactile Internet (Developer: Nhan Nguyen Huu); One last thing, from the previous comment, you mentioned the test. Could you please be more specific about the test? do you want to test the reliability of the FF (like coding, mathematical model, etc.)? We definitely want to certify that.; Thank you for your and SOFA team effort to review our work.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-780500969:1100,test,test,1100,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-780500969,3,['test'],['test']
Testability,> Are more tests provided in InSimo's repo? I would like to make sure that you get the same results if you change specific parameters of the policy. I see there are tests for CRSConstraintMatrix (and the eigenutils) but not for the generic and mechanicals one; https://github.com/InSimo/ISSofa/tree/issofa/framework/framework_test/defaulttype,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3515#issuecomment-1534077944:11,test,tests,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3515#issuecomment-1534077944,2,['test'],['tests']
Testability,"> As you said, using prime-run runSofa when available to force SOFA to run on the GPU seems to be working. Actually, when not using prime-run it still runs on the GPU. I have two GPUs, one AMD 5700XT and a nVidia 1650. On AMD doesn't work, on nVidia it works. Could be something related only with the amd driver. Haven't tested it on other mesa based drivers.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1567#issuecomment-724744131:321,test,tested,321,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1567#issuecomment-724744131,1,['test'],['tested']
Testability,"> Could you think about a pertinent unit test?. I made some but it is possible that it fails, as (normally) CI jobs run with a unprivileged user which can have no home-directory defined, AFAIK (on Linux at least)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4875#issuecomment-2270387340:41,test,test,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4875#issuecomment-2270387340,1,['test'],['test']
Testability,"> Could you verify that the change didn't not decrease the performances (maybe we should have for each .h tp .cpp of core class a small benchmark to asses the performacne difference). In this case, this is a just the map between vecid and string which is normally not really used in performance context (or hopefully not 😅) like in the GUI, but I can do a bench if it is really needed. > ; > On my side I'm still very surprised that all the move we are doing in removing code from .h to put them into dedicated translation unit has so limited impact on performances. To me either the compiler's are very good nowaydays (thanks to GO/IPO/LTO) or a lot of code was not optimized because of our code architecture (eg: no final keyworkd in overriden method preventing optimization). At least I can see quite a nice difference LTO/noLTO but I only really do my perf checks on MSVC.; I dont know about the current state of LTO for gcc/clang (ldd, gold, etc)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3401#issuecomment-1286301742:136,benchmark,benchmark,136,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3401#issuecomment-1286301742,1,['benchmark'],['benchmark']
Testability,> Do we have a CI on that part of the code ?. SofaCUDA is built on Win and Ubuntu i think; SofaSpfFluid should be built everywhere as well.; It seems there are some scenes as well (but no unit test as far as I am aware),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3144#issuecomment-1190919495:193,test,test,193,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3144#issuecomment-1190919495,1,['test'],['test']
Testability,> Does #3832 fix the failing unit test?. It does 👍,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3515#issuecomment-1533956692:34,test,test,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3515#issuecomment-1533956692,1,['test'],['test']
Testability,"> Don't you think that moving `errF` and `tempF` out of the loop is enough? I would test to only resize them in the loop. The underlying memory allocation should not happen a lot. My suggestion is because I think it is simpler to understand compared to the buffer implementation.; > ; > In any case, I think the condition `if (nb > bufferSize)` is not necessary. I obtained the same level of improvement so I will go with this easier way 👍",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4195#issuecomment-1734678391:84,test,test,84,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4195#issuecomment-1734678391,1,['test'],['test']
Testability,> During the meeting it was considered as needed to have a scene test to validate the mis-behavior and the fix. @ScheiklP do you have something (otherwise @epernod will have to do one). Weirdly I cannot reproduce the incorrect behavior that I observed when opening the PR. Were there some changes in linking a topology to the component? :D,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3268#issuecomment-1253511047:65,test,test,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3268#issuecomment-1253511047,1,['test'],['test']
Testability,"> FYI, `SimpleCarving.py` is not exectuted by the CI (or more precisely, there is no mention of it in the logs). I would say, on s'en balek",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3457#issuecomment-1707842240:106,log,logs,106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3457#issuecomment-1707842240,1,['log'],['logs']
Testability,"> Have you tested it still works with Qt5?. it is still Qt5 on the CI so if it is green, it should be ok ✌️",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4330#issuecomment-1836137261:11,test,tested,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4330#issuecomment-1836137261,1,['test'],['tested']
Testability,"> Hey @alxbilger , just a small question, did you try it with large K and J? Does it makes you RAM sweat with all those triplets stored ?; > . Actually, I am not even sure that the performances are better in any case, specially for large K or J. I admit I did not benchmark for multiple mesh size. I'll put this PR back to WIP and consider your remark on the RAM (but I am confident it's OK). I'll need to revert this PR from #2411.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2399#issuecomment-948332404:264,benchmark,benchmark,264,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2399#issuecomment-948332404,1,['benchmark'],['benchmark']
Testability,"> Hey @alxbilger , thanks for this benchmark.; > ; > My guest would be that solving one big system (the merge of both objects) is slower than solving to smaller system.; > ; > However, solving two system independently should, I think, produce incorrect results as; > ; > 1. You are applying the interactions (for example, contact forces) at different solving states. For example, the first object is solved, its node positions are updated to the step t+1. Collisions are then computed. But the state of the second object is still at the time step t. Oscillation will therefore probably happen and the convergence will be delayed.; > ; > 2. In addition, the solution state with both objects merged under the same system takes into account the interaction between the two objects. For example, when both objects are merged into a same system, you can create entries inside the system matrix to create a relationship between a node in the first object and a node in the second object. This is not possible when the two objects are separated.; > ; > ; > **TLDR**: Solving two objects independently is faster than solving one big system containing both objects. However it will take longer to converge to a steady solution (in number of steps), and even probably converge to an incorrect solution. Thank you for this explanation. It makes more sense. If I understood correctly, the group manager would help the performances compared to a single system. Here, we compare to two systems (one per cube). I'll add a third scene in this benchmark with a single system, to be more rigorous. I expect the same result from ""single system"" and ""two systems + group manager"". I expect better performances only in case the two cubes are not in contact, am I right?. Can we say that the best practice would be to start the design of a simulation scene with a single system, without group manager? And if performances are poor, it can be improved with a group manager, knowing its drawbacks (such as hiding a selection ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2089#issuecomment-842964385:35,benchmark,benchmark,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2089#issuecomment-842964385,1,['benchmark'],['benchmark']
Testability,"> Hey @nhnhan92; > Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license.; > ; > To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!; > ; > Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _***_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); > See: https://link.springer.com/article/10.1007/s00366-017-0572-4; > ; > Let us know what you think about it. We can make it step by step!. Dear @hugtalbot,; Thank you for your recommendation, we think that would be a proper option for our case. ; On the other hand, regarding the test, we want nothing more than that, but we are not familiar with the testing procedure. Therefore, we are willing to follow your guidance. Hope to hear your response soon.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454:462,test,test,462,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454,6,['test'],"['test', 'testing']"
Testability,"> Hi @ScheiklP; > ; > Thanks for the PR.; > ; > The SphereCollisionModel works historically without a topology (relying on the mstate). The tests are failing due to the absence of a PointSetTopology. What could be done is to change the warning into an info saying that no topology is found therefore no topological change will be supported. What do you think?; > ; > Another change in order to make the component topologically robust would be to make the data `radius` as a PointData:; > ; > ```c++; > Data< VecReal > radius; ///< Radius of each sphere; > ```; > ; > should become; > ; > ```c++; > PointData< Real > radius; ///< Radius of each sphere; > ```; > ; > (connected to a topology handler). Hi @Hugo,; the `SphereCollisionModel` are in a node together with an `EdgeSetTopologyContainer` that is now also correctly found and bound to `l_topology` and `m_topology`. . Is there something else to do, to correctly connect it to `m_mstate`?. Or maybe `updateFromTopology()` should do more than it does now? :D",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3203#issuecomment-1210437597:140,test,tests,140,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3203#issuecomment-1210437597,1,['test'],['tests']
Testability,"> Hi @fredroy; > ; > Several questions:; > ; > * shouldn't we drop the dependency to SceneCreator (as discussed ([SceneCreator dependencies #417](https://github.com/sofa-framework/sofa/issues/417)) ?; > ; See https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040462403. > * why not defining the test in Sofa.component.ODESolver.tests in place of Sofa.component.ODESolver_test ? To me this looks more consistant and coherent with our naming scheme as well as having the tests in a child directory of ODESolver. Hum I kept the naming from before, and this is an executable, not a library so maybe something to differenciate. But I dont really care the naming, and we can change it if needed. > ; > * why centralizing the testing.tools which breaks modularity instead of letting them at their right logical location ?; > To me having something like; > ; > ; > ```; > SofaDeformable.testing.tools/MassSpringSystemCreation ; > ```; > ; > Is much better than; > ; > ```; > Sofa.testing.tools/MassSpringSystemCreation ; > ```. For those two (`MassSpringSystemCreation` and `SunSystemCreation`), it is not really creating something ODESolver-specific so there is no ""logical"" place by itself.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2650#issuecomment-1040496377:308,test,test,308,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2650#issuecomment-1040496377,8,"['log', 'test']","['logical', 'test', 'testing', 'tests']"
Testability,"> Hi @marques-bruno,; > ; > Thanks for this very interesting PR that is going into the right direction. Sadly the breaking part is not fun. Let's see how other will react. Agreed..; To give you some context, initially my intent was to only add a init_position / init_size, to remove the bidirectionality of this component's position / size datafields.; Basically, the rule of thumb with SOFA components should be to NEVER EVER use a datafield both as an input and an output of the component (modified by the component AND linked to a parent data for isntance). The problem is that keeping the previous behavior of the component and having the new datafields that work the right way created an asymetry in the updates that created weird logic in the callbacks. So while I'm at it I decided to go all in and refactor the whole thing with the good behavior.; I don't see how to add depreciation messages or how to handle previous behavior. If anyone has an idea, I'm all ears :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1489#issuecomment-695967930:736,log,logic,736,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1489#issuecomment-695967930,1,['log'],['logic']
Testability,"> Hi @nhnhan92; > Here is what we propose: let's get this nice work merged as is. I will only add a regression scene to check that no alteration of the model occurs in the future. I will also write a short doc about it, and I will let you append any additional details on it.; > ; > A C++ test inspired from the [article](https://link.springer.com/article/10.1007/s00366-017-0572-4) would be nice in another PR. For writing test, you can:; > ; > * see the [doc here](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/); > * get inspired from the [PluginExample test](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp); > ; > Is this fine for you?. Hi @hugtalbot,; It is clear enough. I will take a look at the instruction and try to implement the .test file. I will inform you as soon as I get something new. Thank you again for your patient to help me.; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301:289,test,test,289,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301,5,['test'],"['test', 'tests']"
Testability,"> Hi @sergeiNikolaev; > Sorry for the latency on this topic, tests can be made so that we create a simple scene in c++ imposing rest shape and an imposed displacement. Thus, the resulting force should be analytically defined.; > By the way do you have any latex file for the polynomial equations?. Thank you for your answer @hugtalbot.; Regarding your question, I do not, sorry.; I wrote these equations since for me it is easier to process the stuff like this with a ""writing memory"". And then I decided that it will be enough just to scan them and send to you.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643263065:61,test,tests,61,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643263065,1,['test'],['tests']
Testability,"> Hi Fred,; > ; > The splitting seems to perpetuate the spurious dependency from SceneCreator to sofa.testing.tools. Maybe it is the time to remove the dependency to SceneCreator and use simpleapi in place so that sofa.testing is cleaned from SceneCreator. I have to admit that I did not see that the DataEngineTestCreation.h file was using scenecreator itself, and this is a good idea to do it while sofang'ing. But I would prefer to do that in a further PR to not block my other sofang PRs 😗.; Except if it is trivial to remove/replace 🙃",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040462403:102,test,testing,102,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040462403,2,['test'],['testing']
Testability,"> Hi,; > ; > What is exactly the ""Haptic module""? It's weird that is tries to use directly the constructors. You are right that the constructors are protected, so they cannot be used. So I am curious to know if this code ever worked....; > ; > To fix the code, you should have a look on the [tutorials](https://github.com/sofa-framework/sofa/tree/master/applications/tutorials), for example this line: https://github.com/sofa-framework/sofa/blob/master/applications/tutorials/oneTetrahedron/oneTetrahedron.cpp#L94 It uses the friend class `New` to instantiate the objects. There are also many examples in the unit tests. The code in plugins/Haption/HaptionDriver.cpp which support virtuose device; and i try to use the friend class ::New as. `visualHaptionDOF = sofa::component::container::MechanicalObject::New<sofa::defaulttype::Rigid3dTypes>();`. i'm sorry, still error",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4336#issuecomment-1840284644:614,test,tests,614,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4336#issuecomment-1840284644,1,['test'],['tests']
Testability,"> How bad is it to drop the support of DiagonalMass for rigids? Should we keep it anyway? Can MeshMatrixMass support rigids?. @alxbilger I actually hardy can reply .. I need Christian for this, I will ask tomorrow further to the team meeting, would you join?. > We should also have a look on performances. Already done by @fredroy, very very very close! Here: https://github.com/sofa-framework/sofa/issues/2452#issuecomment-982735834; But I do not know about the mesh size used for the test.. maybe to re-investigate",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3912#issuecomment-1576777259:486,test,test,486,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3912#issuecomment-1576777259,1,['test'],['test']
Testability,"> Hum sorry in fact FEMBAR-SVDLinearSolver.scn seems to time out: https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2422/CI_CONFIG=macos_clang,CI_PLUGINS=options,CI_TYPE=release/3/SceneTestCrashes/; > ; > https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2422/CI_CONFIG=macos_clang,CI_PLUGINS=options,CI_TYPE=release/3/artifact/parent_dir/build/scene-tests/archive/examples/Components/linearsolver/FEMBAR-SVDLinearSolver.scn/output.txt; > ; > could you double check before merging. @epernod yes it makes sense as this solver is super slow. I'll change the number of iterations for this scene. Thanks",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2422#issuecomment-949348641:367,test,tests,367,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2422#issuecomment-949348641,1,['test'],['tests']
Testability,"> I agree to remove the macro, but why removing the template? I think it matches better the constructors available in the STL. I was wondering the same, but everything was tested with ` __STL_MEMBER_TEMPLATES` not defined for years so thats why I prefered to use the ""legacy"" code. But I can change and take the templated one otherwise 😶‍🌫️",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4251#issuecomment-1774592209:172,test,tested,172,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4251#issuecomment-1774592209,1,['test'],['tested']
Testability,"> I also wonder if your message in the `parse` function is a good strategy. `parse` means that `canCreate` returns true. Is it possible if both templates are provided?. Not 100% sure (ObjectFactory stuff is a mess) but canCreate() is this case will try all the possible templates and is testing against the template of the present MechanicalObject (ForceField::canCreate). So the template string of the mass itself is not really read, and it essentially depends on the MechanicalObject.; I already tried on a example with rigid and it worked well. (ArticulationSystemMapping.scn)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2644#issuecomment-1025925776:287,test,testing,287,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2644#issuecomment-1025925776,1,['test'],['testing']
Testability,"> I did some benches on TorusFall.scn🤐 master `5000 iterations done in 41.7616 s ( 119.727 FPS)`; > ; > pr `5000 iterations done in 36.09 s ( 138.543 FPS)`. Thank you for the benchmark. In the PR, did you activated the parallel computation? I would like to know that there is no performance regression in the single-threaded implementation.; I did not parallelize the third loop: I would like to test that to speed up more.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1632077224:175,benchmark,benchmark,175,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1632077224,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"> I did the change for labels detection. The ""wip"" label will not be ignored by CI anymore. I created a new label ""pr: ci-ignore"" for that 👍. I would have done differently, it is normal for me that a ""wip"" PR is not ran on the ci (for polar bear sake). But the comment ""ci-build][with-all-tests"" should override the normal behavior. I don't know if it is easy to do?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2284#issuecomment-988652179:289,test,tests,289,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2284#issuecomment-988652179,1,['test'],['tests']
Testability,"> I made some tests on godbolt, but I was not able to reproduce the crash. In any case, one day it would be great to remove the public inheritance from `std::vector` (but SofaCUDA probably doesn't agree). I tried to switch to at least to private inheritance but I can tell you that not only SofaCUDA is complaining 😅",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4180#issuecomment-1724973503:14,test,tests,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4180#issuecomment-1724973503,1,['test'],['tests']
Testability,"> I really dont see why the Quater test fails with mac in this PR 🤔. @fredroy I see the test uses randomly generated quaternions as input (the seed is based on the current time -> this should be changed). It's probably a hint that something is wrong, and that it fails randomly.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2323#issuecomment-921825536:35,test,test,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2323#issuecomment-921825536,2,['test'],['test']
Testability,"> I removed a commit by force push. It was failing on some OS.; > Could it be linked to a bad rebuild?. The latest build was manually triggered by you after the force push, including scene tests. So I guess the answer is no.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/873#issuecomment-451901112:189,test,tests,189,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/873#issuecomment-451901112,1,['test'],['tests']
Testability,"> I was wondering if there is a way to catch the missing symbols at compile-time and I found this: https://cmake.org/cmake/help/latest/module/CheckCXXSymbolExists.html#module:CheckCXXSymbolExists. It's configuration time but it could be helpful. I tried to play with it but I was not able to make it work. I added the check in the `sofa_create_package_with_targets` macro. It could be interesting to enforce that the necessary symbols are defined at configure-time yes 🤔 . EDIT: I did some tests and it is quite bothersome to set up, (the file itself needs to be compilable, the symbol need to be defined and not only declared, adding variable in cache, etc) And I think if we do that for all potential loadable libraries, it will slow down considerably the cmake configure process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4466#issuecomment-1915860120:490,test,tests,490,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4466#issuecomment-1915860120,1,['test'],['tests']
Testability,"> If I understand correctly, the problem comes from the fact that two equivalent cubes (in terms of the comparison predicate) are not in the same order depending on the platform (compiler). In my opinion, it creates collision responses that are also ordered differently. And the order in collision responses is important (see #2067). Yes, but a small precision in this case the determinism is set across the different compilers (and more precisely the different implementations of the STL). A priori the same compiler/libstd will create the same result. > But I also wonder how two cubes can be equivalent. We compare two floating-point types, more specifically, the center of a cube along the largest dimension. I suspect that both cubes are perfectly aligned in an orthogonal dimension. It is probably due to the construction of the scene (torus are aligned along the X axis), or the symmetry of the geometry. @fredroy do you know when the discrepancy happens? Is it at the very beginning?. Yes, at the very beginning.; Here is a dump of the container being sorted (left linux/gcc and right windows/msvc), after running 1 step ; showing { minBBox maxBBox } for each element. ![diff_gcc_msvc](https://user-images.githubusercontent.com/11028016/221719424-3d8e3a07-23cc-47ce-b277-08673889b83e.png). It is trying to sort according to the axis X and you can see the highlighted lines have the same X. > ; > If we don't want to use `stable_sort` because it is slower, maybe we can make a smarter comparison predicate? For example, if the largest dimension is equivalent, let's compare the second largest dimension etc. Yes, it could be an other solution, but in this end, does `sort() + multiple_test_axis_predicate < stable_sort() + oneaxis_predicate` ? not so sure and it would need more benchmarks. And I am sure it will also depend on the data itself...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3687#issuecomment-1447335507:1786,benchmark,benchmarks,1786,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3687#issuecomment-1447335507,1,['benchmark'],['benchmarks']
Testability,"> If I understood correctly, the group manager would help the performances compared to a single system. Here, we compare to two systems (one per cube). I'll add a third scene in this benchmark with a single system, to be more rigorous. I expect the same result from ""single system"" and ""two systems + group manager"". I expect better performances only in case the two cubes are not in contact, am I right?. Well, if I understood correctly, the group manager is doing just that: take two objects usually solved with their own solver, and merge them into one. So in this case, your third scene should produce the same result as the one with a group manager. Here is a screen shot of the advanced timer monitor for your two scenes:; ![image](https://user-images.githubusercontent.com/6951981/118618298-c239b680-b7c3-11eb-9f4d-aeaa23aaa916.png). See the mechanical nodes? In the scene with the group manager, the two mechanical nodes have been merged into one. > Can we say that the best practice would be to start the design of a simulation scene with a single system, without group manager? And if performances are poor, it can be improved with a group manager, knowing its drawbacks (such as hiding a selection of solver properties to the user). Again, one big system should be the same as what the group manager those. However, I do think it should be best practice to manually do it instead of relying on the group manager to do it...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2089#issuecomment-842971418:183,benchmark,benchmark,183,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2089#issuecomment-842971418,1,['benchmark'],['benchmark']
Testability,"> Indeed. No test nor scene where impacted?. I tested simple scenes and it seems the simulations run and are plausible, with or without the mistake. I don't think this function is actually tested.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2448#issuecomment-950787168:13,test,test,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2448#issuecomment-950787168,3,['test'],"['test', 'tested']"
Testability,"> Is there still something to do here?. Yep, still need to write a test 😅",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3294#issuecomment-1396249004:67,test,test,67,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3294#issuecomment-1396249004,1,['test'],['test']
Testability,> Is this related to #4910?. Maybe but It was not my intention 😅 I got the problem in SofaPython3 for our own component. > This should fix #4911. It would have been convenient to have a test related to this problem 👼,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5081#issuecomment-2433697578:186,test,test,186,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5081#issuecomment-2433697578,1,['test'],['test']
Testability,"> It does not come from your PR, but while trying to compile this branch with the newest gcc, there is an interesting (and useful) warning:; > ; > ```; > /home/fred/sofa/src/current/Sofa/framework/Type/src/sofa/type/Mat.h:408:58: warning: array subscript 2 is above array bounds of ‘const sofa::type::VecNoInit<3, double> [2]’ [-Warray-bounds]; > 408 | if( rabs( this->elems[i][j] - this->elems[j][i] ) > EQUALITY_THRESHOLD ) return false;; > ```; > ; > Indeed, there is no compile-time test about the fact that the matrix is square or not (so the symmetry could be irrelevant). I added compile-time check that the matrix is square. Thanks for spotting it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1240491520:487,test,test,487,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1240491520,1,['test'],['test']
Testability,> It reminds me that we should in general browse all scene warnings to fix them. Good luck. From the last build:. ```; Scene testing summary:; - 675 scene(s) tested; - 675 success(es); - 2184 warning(s); - 0 error(s); - 0 crash(es); ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5072#issuecomment-2434876976:125,test,testing,125,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5072#issuecomment-2434876976,2,['test'],"['tested', 'testing']"
Testability,"> Just looking at the code, it is fine for me but I don't have the whole overview of Link API. I know that @damienmarchal was reworking the BaseLink API. If you could give a look ?. Yes, I kind of noticed that it required a rework, but my goal was just to fix a failing unit test.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2166#issuecomment-863958574:275,test,test,275,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2166#issuecomment-863958574,1,['test'],['test']
Testability,"> Last regression test failing will disappear as soon as PR #4494 is merged as the new version of isquadDelaunay method is not using this method intersectionWithEdge anymore. And for the note, the error is a false positive. The regression should be regenerated at one point. Regressions are OK but the error being an unit test ` InciseProcessor_test.InciseTriangles `, it is because of `[ERROR] [TriangleSetGeometryAlgorithms(GeomAlgo)] Orthogonal projection failed`; I dont really see how it can be a false positive ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4194#issuecomment-1958537865:18,test,test,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4194#issuecomment-1958537865,2,['test'],['test']
Testability,"> Looks fine now.; > [ci-build][with-scene-tests]. Yeah... Although we simply moved the definitions of the problematic operator overloads back into the .h... so problem half solved... if anyone has an idea how to make it build on windows... I'm curious. Otherwise, let's just merge... :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/907#issuecomment-461873354:43,test,tests,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/907#issuecomment-461873354,1,['test'],['tests']
Testability,"> Ok so maybe I misunderstood your last comment, but the GTest find module you added in your last commit works fine on my side with cmake >= 3.12 (which is our min required version). So I guess you meant that the embedded GTest find module in recent cmake version (>=3.20) was required to have the correct targets defined, which is not the case in earlier <3.20 version of cmake (tested in 3.12), but this recent GTest find module was not building if used with cmake <3.20. In the end, your last commit seems to fix everything, so looks like a more generic option that relying on cmake config files as suggested in my last comment. I just added the cmake module from v3.20 for GTest directly in our cmake folder modules; not very clean but it does the job apparently 👍",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1924180211:380,test,tested,380,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1924180211,1,['test'],['tested']
Testability,"> One unit test failling : https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4494/CI_CONFIG=ubuntu_gcc,CI_PLUGINS=options,CI_TYPE=release/2/testReport/UnitTests.Sofa_Component/Topology_InciseProcessor_test/InciseTriangles/. Unit test references have been changed. The new version is more accurate.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4494#issuecomment-1951953396:11,test,test,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4494#issuecomment-1951953396,3,['test'],"['test', 'testReport']"
Testability,> Reminder: https://github.com/sofa-framework/sofa/wiki/Pull-Request-Keywords. `with-all-scenes` does not exist. [ci-build][with-all-tests]. 😬,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4676#issuecomment-2106409063:133,test,tests,133,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4676#issuecomment-2106409063,1,['test'],['tests']
Testability,"> Seems that this causes 1 additional unit test failing: UnitTests.SofaHaptics_test/LCPForceFeedback_test.test_SimpleCollision. Thanks @fredroy, it's now fixed",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2105#issuecomment-856495689:43,test,test,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2105#issuecomment-856495689,1,['test'],['test']
Testability,> Should it be replaced by `Sofa.Component`?. Does it exists? ; I'm doing it in a clean way by adding the needed plugin in the tests...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3266#issuecomment-1237943547:127,test,tests,127,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3266#issuecomment-1237943547,1,['test'],['tests']
Testability,"> So... I made my best to explain why I care of explicit test but the important things to me are:; >- what do I have to change so that PR can be be merged so that I can close it and move forward ?. Only one last thing I did not get.; There are EXPECT_NOEMIT, EXPECT_EMIT, what about a EXPECT_NOTHING_I_DO_NOT_CARE?!; That would correspond to the default behavior for warnings for instance. >- do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated >?. We should at least fix some of them that are real crap, and must not test anything.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292868331:57,test,test,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292868331,3,['test'],"['test', 'tests']"
Testability,"> SquareDistanceMapping test fails with the introduced test : https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4897/CI_CONFIG=ubuntu_gcc,CI_PLUGINS=options,CI_TYPE=release/1/testReport/. See #4891",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4897#issuecomment-2288281667:24,test,test,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4897#issuecomment-2288281667,3,['test'],"['test', 'testReport']"
Testability,"> Strange, looking at the dashboard: 1) some timeout appeared and 2) regression tests failing; > could this be related to the PR?. Hello Hugo!; Hum, I don't think so, that would be really strange, this PR is purely about cleaning, it does not change the behaviour of the component.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/856#issuecomment-448187576:80,test,tests,80,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/856#issuecomment-448187576,1,['test'],['tests']
Testability,"> Tested by @fredroy and ready to be merged !. Not ready to be merged unfortunately; on Windows, CMake complains:; ```; CMake Error at Sofa/framework/Config/cmake/SofaMacrosInstall.cmake:858 (get_target_property):; get_target_property() called with non-existent target ""ZSTD::ZSTD"".; Call Stack (most recent call first):; applications/plugins/CImgPlugin/CMakeLists.txt:101 (sofa_install_libraries). ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4749#issuecomment-2132471684:2,Test,Tested,2,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4749#issuecomment-2132471684,1,['Test'],['Tested']
Testability,"> Thanks @sergeiNikolaev for this contribution and making this nice effort of bringing back this work.; > ; > * Is any test available with these new classes?; > * is there any example scene?. @hugtalbot; Here is the test to verify polynomial springs (Python2 scripts). [polynomial_spring_test.zip](https://github.com/sofa-framework/sofa/files/4540453/polynomial_spring_test.zip). The test ""spring_verification.py"" depicts two points (p1, p2) connected with a spring. One point (p1) is fixed, another (p2) is moving in space. The external impact (f_external) to the system could be applied using LinearForceField (you need to make target_force as a Data<> object in order to collect its information, but I have this modification) or ControlPoint (third point (p_control), attached with a linear rest shape spring). In case of a second option, the external force is computed as (p_control - p2)*k_rest_shape_spring.; During the simulation process, the position ""p2"" and forces ""f2"" for point p2, and also the external force or the position of the control point are saved to data files.; The script ""spring_verification_draw_result.py"" loads all data. The strain for spring is computed as ; (norm(p2-p1) - l0) / l0 for PolynomialSpring or as norm(p2-p1) / l0 for RestShapePolynomialSpring.; I use static solver with many iterations to make spring force equal to external force, but I guess it is also possible to compute the spring force as difference f2 - f_external.; Based on this data, a force-strain relation is plotted and compared with polynomial values.; And this is the end of the test. NOTE: Please, keep in mind, that configuration parameters have to be the same for both scripts, in order to get a valid result.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-620055719:119,test,test,119,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-620055719,4,['test'],['test']
Testability,"> Thanks @sergeiNikolaev for this contribution and making this nice effort of bringing back this work.; > ; > * Is any test available with these new classes?; > * is there any example scene?. Thank you for your answer. Yes, there is an example scene, which I also use as a test. But to add it to Sofa I have to remove plugin dependencies from it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616504586:119,test,test,119,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616504586,2,['test'],['test']
Testability,"> Thanks again for this nice contribution @nhnhan92; > Sorry I had prepared many similar feedback as @epernod so, some might be duplicated.; > ; > A more general remark, could you point us out the documentation you used to write this code please?; > Do you have an idea of when you would plan to consider rotations around the z axis?; > I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!; > ; > If this is too much questions, we can discuss about this live if you'd like. Dear, @hugtalbot,; Thank you for kind supports from you and @epernod. First, I implemented this FF mostly based on two following references:; 1. Book: ""Structural Analysis with the Finite Element Method, Linear static, Vol. 2, chapter 8""; 2. And the most recent paper of our group: https://ieeexplore.ieee.org/document/9247533; On the other hand, at this stage, this FF fairly meets our expectations for the current project. I definitely want to improve it in the near future. However, FEM is not my field (I am basically an end-user) and I have been in the middle of something else, therefore, It is gonna take time for me to be able to complete it. I would love to cooperate with SOFA team to complete it.; I'm sorry, but I'm quite unsure when you said rotation around z-axis (normal axis of the element?). Do you mean the consideration of rotating element around its normal axis? (i.e., co-rotational LARGE method (am I right?)). Right now, my priority is to take the rest two rotation dofs of a node (location rotations of around x and y direction) because, at this moment, I assumed they are zeros. But, so far, I have no idea how to include them; Finally, if it is necessary, I am willing to have a face-to-face discussion as long as I am available. Thank you ; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816:374,test,tests,374,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816,3,['test'],"['test', 'testing', 'tests']"
Testability,"> The [crash that happened on Windows](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3959/CI_CONFIG=windows_vs2019,CI_PLUGINS=options,CI_TYPE=release/13/testReport/SceneTests/applications_plugins_SofaSphFluid_examples/SpatialGridPointModel_scn/) also happens on the master branch on my computer. But I don't understand how it is not detected by the CI. Maybe it is random, it does not crash on mine (but I only tried like 2, 3 times) on msvc; Nevertheless, I dont think this scene is working as intended anyway.... (the particules do not interact with the static mesh)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3959#issuecomment-1657297421:165,test,testReport,165,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3959#issuecomment-1657297421,1,['test'],['testReport']
Testability,"> The right syntax is the following:; > ; > ```c++; > const auto visualHaptionDOFSPtr = sofa::core::objectmodel::New<sofa::component::statecontainer::MechanicalObject<sofa::defaulttype::Rigid3dTypes>>();; > visualHaptionDOF = visualHaptionDOFSPtr.get();; > nodeHaptionVisual->addObject(visualHaptionDOFSPtr);; > visualHaptionDOF->name.setValue(""rigidDOF"");; > ```; > ; > Note that this plugin has not been maintained for a long time. You should expect some changes in order to make it work. Here are some changes I made today to fix the configuration: #4338. But it does not fix the compilation.; > ; > If you succeed to make it work, a pull request would be very welcome ;). We are in the process of adapting the sofa22.12 plugin for homebrew devices, with reference to the Haptic plugin. No problem of course, I'll commit our code as soon as it's aligned and tested.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4336#issuecomment-1841943965:861,test,tested,861,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4336#issuecomment-1841943965,1,['test'],['tested']
Testability,"> The unit tests failure came from the fact that the order of the files changed in the CMakeLists.txt. It highlights the facts that `EXPECT_MSG_EMIT` works only if `MainGtestMessageHandler` is added to the `MessageDispatcher`. But `logging_test.cpp` calls `clearHandlers`. Since `logging_test.cpp` is now sorted before `FileSystem_test.cpp`, it clears the message handler required by `FileSystem_test.cpp`. The message handler must be added in any case, and not relying on the fact that it might have been added earlier. Well done!; I have added the `breaking` flag due to the change of some signatures for some methods",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1480398997:11,test,tests,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1480398997,1,['test'],['tests']
Testability,"> This change makes all tests using the ConstantForceField fail due to a bug in SingleStateAccessor solved in #4917 . To solve the tests, merge #4917 first and rebase. Then, the PR should be fine. #4917 has been integrated (not rebased due to anterior conflicts) and there are still errors because of ; `No input force has been set. Please define one of both Data: forces or totalForce` 🥲. I guess there is an error of logics (if, else, etc) somewhere",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4918#issuecomment-2297674122:24,test,tests,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4918#issuecomment-2297674122,3,"['log', 'test']","['logics', 'tests']"
Testability,"> Updates: I just tried it once more, the caduceus scene now works well for me, I can pick the snake using the mouse with bilaterial now. I will switch to my branch and test it with my scene file now. Ah that is good to know 👍 Keep us in touch !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2486#issuecomment-976821950:169,test,test,169,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2486#issuecomment-976821950,1,['test'],['test']
Testability,"> VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA. Ok that makes sense. Yeah I guess the clean thing would be to swap every usage in SOFA to the new dynamic TypeInfo, and to somehow depreciate the static one. Looks good to me, I look forward to testing it, probably with Eigen types to extend what @Younesssss started.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712798002:43,test,test,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712798002,2,['test'],"['test', 'testing']"
Testability,"> You don't need to add checks, later in the code for: d_componentState.getValue() == sofa::core::objectmodel::ComponentState::Valid; > ; > to avoid crash?. I only have a partial answer:; I tested one time step and it works. I suppose it is because the initialization defines the topology. If the topology is empty, I guess that the later functions just don't iterate over the elements. But it's just a guess.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3400#issuecomment-1282012318:190,test,tested,190,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3400#issuecomment-1282012318,1,['test'],['tested']
Testability,"> [Related to #2089]; > this does not fix the multiple creation of vectors at every timestep in the mechanical objects. Ok, thank you for having done the test.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2076#issuecomment-842967989:154,test,test,154,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2076#issuecomment-842967989,1,['test'],['test']
Testability,"> `compliance`. Thanks @hugtalbot,; This works!. I currently don't have access to my UFlorida lab machine that have several versions of sofa built. But I built my sofa v21.06 on my new workstation and have tested it. Adding the compliance term made the mouse grasping works properly with our scenes. I also tested it with the demo/caduceus, with this line: ; ``` xml; <UncoupledConstraintCorrection useOdeSolverIntegrationFactors=""0"" compliance=""184"" "" />; ```; the snake seems still not fully movable by the mouse though.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2486#issuecomment-1187786897:206,test,tested,206,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2486#issuecomment-1187786897,2,['test'],['tested']
Testability,"> can you point the test that is not wworking, it is impossible to find it in jenkins menu, even more with a low bandwidth. > Regressions are OK but the error being an unit test `InciseProcessor_test.InciseTriangles`, it is because of `[ERROR] [TriangleSetGeometryAlgorithms(GeomAlgo)] Orthogonal projection failed` I dont really see how it can be a false positive ?. `InciseProcessor_test.InciseTriangles` 😅 ?; https://github.com/sofa-framework/sofa/blob/251fd89b99379aa2f7693095f9399368acdc72ee/Sofa/Component/Topology/Utility/tests/TopologicalChangeProcessor_test.cpp#L362. But for sure the CI jenkins is slow as hell",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4194#issuecomment-1967972725:20,test,test,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4194#issuecomment-1967972725,3,['test'],"['test', 'tests']"
Testability,> do you know why is this fixing the problem @fredroy ?; > ; > Anyway I tested and it works 👍. Because the VisualDrawVisitor is managing both the VisualModels' (drawVisual) and the BaseObject (draw()). ; In this case the added tests were bypassing the BaseObjects' draw(),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4044#issuecomment-1637217987:72,test,tested,72,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4044#issuecomment-1637217987,2,['test'],"['tested', 'tests']"
Testability,"> https://github.com/sofa-framework/sofa/blob/b66d9ad54731b35891645b131efa04eecada3467/SofaKernel/modules/SofaBaseMechanics/SofaBaseMechanics_test/CMakeLists.txt#L15-L19; > ; > ; > ; > @fredroy @guparan this shoud be removed right?. Yes, this test project cannot be loaded anymore by the way.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2955#issuecomment-1128321623:243,test,test,243,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2955#issuecomment-1128321623,1,['test'],['test']
Testability,"> new feature, new unit test?. Thanks for the little push to write the test :+1: ; This actually helped me find a bunch of bugs and inconsistencies in the Links API. I fixed some, made some tests to highlight those I considered as too hard / time-consuming / not-worth-the-effort to fix . - When constructing a link without an owner, a call to `getOwnerBase()` systematically crashed instead of returning a nullptr, because of a bad initialization ; - When calling `setOwner(owner)` on a link with a `nullptr`, a segfault would happen within the function since it tries to call a method on the given owner; - the read() function is SUPER, SUPER buggy, obscure and cryptic. This function alone has tons of potential outcomes depending on whether the link has or not an owner, whether this owner has a context, whether the link is valid, or points to a wrong object type. Even worse, all those outcomes are kind of dependent on whether we're initializing the link, or whether the init visitor already ran on the scene graph. needless to say that this is way too complex, for something as simple by definition as a link.... So to at least get something out of my time, I added a test in SofaSimulationGraph_test/Link_test.cpp which shows most of the results you can get from `read()`, depending on the state of initialization of that link, the state of its owner and the validity of the link path. There's also a test of the setLinkedBase() method in SofaCore_test (BaseLink_test.cpp)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820:24,test,test,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820,5,['test'],"['test', 'tests']"
Testability,"> shift + left click. Yes I did hold shift down all the time (and I have been using the bilaterial constraints with no issues in sofa v19.12.) . In my case the pink small square shows the same as in your screenshot, however the snake doesn't follow the mouse (such that two pink squares have large distance apart while i moving the mouse). Updates:; I just tried it once more, the caduceus scene now works well for me, I can pick the snake using the mouse with bilaterial now. I will switch to my branch and test it with my scene file now.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2486#issuecomment-976514790:508,test,test,508,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2486#issuecomment-976514790,1,['test'],['test']
Testability,> tested and approved on XUbuntu!. Same here (with manjaro up-to-date),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3031#issuecomment-1153713774:2,test,tested,2,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3031#issuecomment-1153713774,1,['test'],['tested']
Testability,"> the image distance filter test is un-related, so let's pass it to ready right @fredroy. yep, ready !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3393#issuecomment-1295318906:28,test,test,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3393#issuecomment-1295318906,1,['test'],['test']
Testability,"> what's your opinion @jnbrunet ?. Isn't a warning when the scalar template is used a bit intense? I would put a warning if we actually checked that all mechanical objects are of 3d types, and the specified/default template is a scalar. But here, we output a warning without any logic other than the default scalar template was used. Maybe at least remove the warning if the user manually specified that he needed the scalar template?. **EDIT** Sorry, last time I checked the PR, the check was done on the template used, hence the warning was emitted when the scalar template was used. Now it seems to be emitted when the user doesn't manually specify which template he/she wants.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1996#issuecomment-868719470:279,log,logic,279,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1996#issuecomment-868719470,1,['log'],['logic']
Testability,">; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure with line number close to "" << __LINE__ ;; }. void complexTestBehavior(); {; {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should generate a failure"" ;; //msg_error(""HERE"") << ""This should generate a test failure"" ;; {; EXPECT_MSG_NOEMIT_V2(Error) ;; msg_error(""HERE"") << ""This should generate a test failure"" ;; }; }. {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a test falure"" ;; }. }; };; ```. PS: if someone says it smell like 'asynchronous' exceptions I agree.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:1727,test,test,1727,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643,5,['test'],['test']
Testability,@Ant0nin The conflicts are indeed solved but the test errors remain. See https://www.sofa-framework.org/dash?branch=origin/PR-992; Could you try for instance to run SofaPython_test on your local build?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/992#issuecomment-501325095:49,test,test,49,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/992#issuecomment-501325095,1,['test'],['test']
Testability,"@Ant0nin all python related tests are failing, could you take a look?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/992#issuecomment-501172441:28,test,tests,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/992#issuecomment-501172441,1,['test'],['tests']
Testability,@Camille-K will you test the suggestion? ; @epernod wanted to be poked here as well to test :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2925#issuecomment-1136967791:20,test,test,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2925#issuecomment-1136967791,2,['test'],['test']
Testability,"@ChristianDuriez ; One scene was crashing in SensableEmulation plugin : testOmniDriverEmu.scn ; I fixed it by adding the option : ```solveVelocityConstraintFirst=""true""```. I have no idea why actually! Could you give some insight?. I fixed some added warnings, let me know if this was normal:; Note that : ; - in GenericConstraintSolver.cpp line 368 : none of the function parameter (cParams, res1 and res2) were unused.; - in GenericConstraintCorrection.cpp line 277 : the complianceFactor is not used. What appears really necessary, is to have some documentation on this constraint pipeline. This could be a good task for the STC#5 don't you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/459#issuecomment-390153258:72,test,testOmniDriverEmu,72,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-390153258,1,['test'],['testOmniDriverEmu']
Testability,"@ErwanDouaille , It's not exactly what I meant:. I would like to keep Sofa's GUI as is (not batch mode or anything like that.; What I would like to be able to do though, is grabbing only the scene of sofa.; An example might be more explicit: This picture is a screenshot of a Sofa scene where my component grabs the OpenGL viewport with glReadPixels() and then displays it back in Sofa's scene.; If everything would work as I want it to, this scene shouldn't do anything (the grabbed image would be the displayed image, so I would constantly have the classic black background with the SOFA logo. Instead though, I'm getting the whole UI on the left, the menu on top and runSofa's counter bar at the bottom.; ![screengrabber](https://user-images.githubusercontent.com/13734391/36718977-fcf8a99e-1ba3-11e8-8b62-ec2f9c9dc431.png). (In addition the framebuffer is flipped on the X axis but that's just a bug in my code... =); The purpose of this is to perform image processing directly on the scene that's generated in Sofa. In the case of the new GUI, you could imagine a scene that has multiple cameras, displaying in multiple widgets, and be interested in performing some post processing stages on these generated frames, so being able to retrive the framebuffer coming from those widgets could be useful.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/600#issuecomment-368793399:590,log,logo,590,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/600#issuecomment-368793399,1,['log'],['logo']
Testability,"@ErwanDouaille your remark makes sense. ; There are several points to be aware of:; - installing a X server on the slaves will take time; - it may destabilize the build slave (?) (disc space, unforeseen problem running a GUI server on a headless machine,...); - and I agree: if we do it, the next step should be to test all existing GUIs",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/538#issuecomment-360786622:315,test,test,315,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-360786622,1,['test'],['test']
Testability,"@EulalieCoevoet , @VannesteFelix can one of you test this branch with our plugins SoftRobots & MOR on the big's felix machine to see if this work well ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/834#issuecomment-440584625:48,test,test,48,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/834#issuecomment-440584625,1,['test'],['test']
Testability,"@EulalieCoevoet Thank you for reporting the error (too bad it skipped the reviews 😕); By any chance, would have a simple scene to submit as a test? thanks ! 😙",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2265#issuecomment-886453383:142,test,test,142,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2265#issuecomment-886453383,1,['test'],['test']
Testability,"@EulalieCoevoet apparently one of the change does change something, some (all?) scenes using this plugin) crashes:; ```; [SceneTests.applications/plugins/ArticulatedSystemPlugin/examples/ArticulatedArm.robot.py](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3751/CI_CONFIG=fedora_clang,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/SceneTests/applications_plugins_ArticulatedSystemPlugin_examples_ArticulatedArm/robot_py/); [SceneTests.applications/plugins/ArticulatedSystemPlugin/examples.ArticulatedHierarchyBVHController.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3751/CI_CONFIG=fedora_clang,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/SceneTests/applications_plugins_ArticulatedSystemPlugin_examples/ArticulatedHierarchyBVHController_scn/); [SceneTests.applications/plugins/ArticulatedSystemPlugin/examples.ArticulatedSystemMapping.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3751/CI_CONFIG=fedora_clang,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/SceneTests/applications_plugins_ArticulatedSystemPlugin_examples/ArticulatedSystemMapping_scn/); ```; The trace tells it crashes here:; ```; sofa::component::mapping::ArticulatedSystemMapping<sofa::defaulttype::StdVectorTypes<sofa::type::Vec<1u, double>, sofa::type::Vec<1u, double>, double>, sofa::defaulttype::StdRigidTypes<3u, double>, sofa::defaulttype::StdRigidTypes<3u, double> >::applyJT(sofa::defaulttype::MapMapSparseMatrix<sofa::type::Vec<1u, double> >&, sofa::defaulttype::MapMapSparseMatrix<sofa::defaulttype::RigidDeriv<3u, double> > const&, sofa::defaulttype::MapMapSparseMatrix<sofa::defaulttype::RigidDeriv<3u, double> >*); ```; so maybe the typo was not one... 🧐😅",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3751#issuecomment-1489730917:335,test,testReport,335,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3751#issuecomment-1489730917,3,['test'],['testReport']
Testability,"@EulalieCoevoet is right, changing parameter without warning is bad ; @hugtalbot it is very easy, there is two options. One consist in adding some test in the init() function of the component to detect if the data is set or not by the user and provide the adequate message. The other is to add a dedicated rules in the SceneChecker at the following of: ; ```cpp. void SceneCheckAPIChange::installDefaultChangeSets(); {; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""BoxStiffSpringForceField"" ); msg_warning(o) << ""BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'"" ;; }) ;; ```. @fredroy Eulalie also report that there was some changes in the way shaders are pass to components and that old working behavior stopped working without warnings so adding warning in the same way would be nice (@EulalieCoevoet).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/338#issuecomment-334521674:147,test,test,147,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/338#issuecomment-334521674,1,['test'],['test']
Testability,"@EulalieCoevoet there is an issue with the test, do you have time within the 7 upcoming days to have a look at it ? either the test needs to be updated, or the code to be fixed. Let us know if you don't ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/459#issuecomment-365541425:43,test,test,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-365541425,2,['test'],['test']
Testability,"@JeremieA ; Hi Jeremie, as you might know, I am currently working on multithreaded simulation with SOFA.; In this PR, I propose to remove the checkValidStorage() test in Node::ExecuteVisitor function because it prevents some parallel execution and also suggest to remove the thread specific declaration for ExecParams variable.; Do you see a reason to keep the ExecParams specific for each thread?; I especially noticed accessing the thread local memory of a thread A from the thread B with these different ExecParams is significantly slow (~20%) . ; Your opinion would be valuable for us. Thanks!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1129#issuecomment-526090929:162,test,test,162,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1129#issuecomment-526090929,1,['test'],['test']
Testability,@ScheiklP your case (topological changes) where you have `n==0` seems to be legit. So I would not emit a warning. The unit tests are probably to be changed,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3529#issuecomment-1341375305:123,test,tests,123,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3529#issuecomment-1341375305,1,['test'],['tests']
Testability,"@alxbilger . > Hello, I think the actual error is in the output of the Cmake Gui(bottom part), could you copy-paste it ?. Sorry for the delay, here is the log output:; ```; The C compiler identification is Clang 10.0.0; The CXX compiler identification is Clang 10.0.0; Check for working C compiler: /usr/bin/clang; Check for working C compiler: /usr/bin/clang -- works; Detecting C compiler ABI info; Detecting C compiler ABI info - done; Detecting C compile features; Detecting C compile features - done; Check for working CXX compiler: /usr/bin/clang++; Check for working CXX compiler: /usr/bin/clang++ -- works; Detecting CXX compiler ABI info; Detecting CXX compiler ABI info - done; Detecting CXX compile features; Detecting CXX compile features - done; Setting build type to Release as none was specified.; -- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).; Install prefix: /home/giang/sofa/build/install; Adding library Sofa.Config; Using legacy headers is enabled.; Headers from v21.12 are usable, but it is advised to change your code to use the new headers introduced in v22.06.; Adding library Sofa.Compat; Adding library Sofa.Component.Compat; Adding library Sofa.Type; Adding library Sofa.Geometry; Adding library Sofa.Topology; Adding library Sofa.Helper; Found Eigen3: /usr/include/eigen3 (Required is at least version ""2.91.0"") ; Found Json: /home/giang/sofa/src/extlibs/json (Required is at least version ""3.1.2"") ; Found STB: /home/giang/sofa/src/extlibs/stb ; Found DIFFLIB: /home/giang/sofa/src/extlibs/difflib ; Adding library Sofa.LinearAlgebra; Adding library Sofa.DefaultType; Adding library Sofa.Core; Adding library Sofa.Simulation; Adding library Sofa.Simulation.Core; Adding library Sofa.Simulation.Common; Adding library Sofa.Simulation.Graph; Adding library Sofa.Testing; Found PythonInterp: /usr/bin/python (found version ""3.8.10"") ; Looking for pthread.h; Looking for pthread.h - found; Performing Test CMAKE_HAVE_LIBC_PTHREAD; Perf",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:155,log,log,155,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815,1,['log'],['log']
Testability,"@alxbilger is that `TEST(SparseLDLSolver, EmptyMState)` and `TEST(SparseLDLSolver, EmptySystem)`?; Just removing the `EXPECT_MSG_EMIT(Warning);` is probably also not what we want, right?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3529#issuecomment-1341494734:20,TEST,TEST,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3529#issuecomment-1341494734,2,['TEST'],['TEST']
Testability,"@bakpaul . > I call that 'un doigt dans l'engrenage', nice !. Yes... > But then I don't fully agree on the protected part : it might become cumbersome to test them in unit test with such protection. It is exactly what happens now. However, I believe that the tests should not drive the design of a class. Today, I don't have a solution to test the protected methods (even if it's theoretically possible). So I am not against keeping them public.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2317112884:154,test,test,154,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2317112884,4,['test'],"['test', 'tests']"
Testability,"@bakpaul I used your scene for benchmarks and updated the PR description accordingly. However, I don't observe the artefact your mention, even when going step by step.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1640372331:31,benchmark,benchmarks,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1640372331,1,['benchmark'],['benchmarks']
Testability,"@bakpaul Strange, I checked again (with and without parallelization) and I don't have the artefact you have. `ShewchukPCGLinearSolver` is not a difference because you use an alias of it (`PCGLinearSolver`). In the benchmark I translated the beam to measure mainly the contacts and skip the falling part. But I still don't see the artefact when I remove the translation.; @fredroy @hugtalbot would you like to test this branch with the scene provided by @bakpaul ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1641710748:214,benchmark,benchmark,214,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1641710748,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"@bakpaul This PR does not take the latest commits in sofa-framework/ci. Hence, it does not fetch and compile the plugin CSparseSolvers. Here is what I see in the logs:; ```; --------------- Clone CI scripts ---------------; pwd = /builds/workspace/sofa-framework/PR-4258/ubuntu_gcc_options_release; Cloning into 'ci'...; 640400517e592bfa826a46dea29b6ddd512abf02 Merge pull request #21 from hugtalbot/202308_remove_meshsteploader_from_list; CI scripts are available in /builds/workspace/sofa-framework/PR-4258/ubuntu_gcc_options_release/ci/scripts; ```; It's not the latest commit in the master branch. Can you investigate why?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1822533494:162,log,logs,162,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1822533494,1,['log'],['logs']
Testability,"@bakpaul thanks for the benchmark. Yes, I would like your scene to investigate both the behavior and the performances (I am a bit disappointed so far).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1633694721:24,benchmark,benchmark,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1633694721,1,['benchmark'],['benchmark']
Testability,"@bakpaul you were right, and it is fixed now in https://github.com/sofa-framework/sofa/pull/4138/commits/c349e111debbcb377c5bbb7ad68610c15f336c52. Here is my benchmark:. ```; CGLinearSolver template=""CompressedRowSparseMatrixMat3x3d"". [INFO] [BatchGUI] 1000 iterations done in 72.7944 s ( 13.7373 FPS). Steps Duration Statistics (in ms) :; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 0 0 1000 40.29 110.35 72.73 8.91 72732.7 100 TOTAL; 1 0 1 40.29 110.32 72.73 8.91 72.73 100 .Simulation::animate; 2 0.01 1 0 0.07 0 0 0 0 ..BehaviorUpdatePositionVisitor; 2 0.01 1 0 0.03 0 0 0 0.01 ..UpdateInternalDataVisitor; 2 0.01 1 0 0.04 0.01 0 0.01 0.01 ..resetConstraint; 2 0.02 1 0 0.02 0 0 0 0 ..collision; 2 0.03 1 0 0.03 0 0 0 0 ..propagateIntegrateBeginEvent; 2 0.03 1 0 0.02 0 0 0 0 ..beginIntegration; 2 0.03 1 0 0.07 0 0 0 0 ..buildConstraintMatrix; 2 0.03 1 0 0.03 0.01 0 0.01 0.01 ..accumulateMatrixDeriv; 2 0.04 1 40.07 109.99 72.48 8.91 72.48 99.65 ..solve; 3 0.04 1 40.07 109.98 72.47 8.90 72.47 99.65 ...Mechanical; 4 0.07 1 2.07 4.47 2.45 0.33 2.45 3.37 ....ComputeForce; 4 2.52 1 1.11 3.14 1.37 0.29 1.37 1.89 ....ComputeRHTerm; 4 3.89 1 34.04 71.94 36.80 2.11 36.80 50.60 ....MBKBuild; 5 3.90 1 34.03 71.91 36.79 2.11 36.79 50.58 .....CG-setSystemMBKMatrix; 6 3.90 1 0.03 0.21 0.04 0.01 0.04 0.05 ......getContributors; 6 3.94 1 0.02 0.17 0.02 0.01 0.02 0.03 ......buildMappingGraph; 6 3.96 1 0.25 2.56 0.72 0.17 0.72 0.98 ......InitializeSystem; 7 3.97 1 0.06 1.35 0.36 0.10 0.36 0.50 .......resizeSystem; 7 4.33 1 0.01 1.22 0.32 0.08 0.32 0.44 .......clearSystem; 7 4.65 1 0.02 0.27 0.03 0.01 0.03 0.04 .......initializeLocalMatrices; 6 4.68 1 33.38 71.55 36 2.08 36 49.49 ......AssembleSystem; 7 4.68 1 33.35 49.36 35.94 1.80 35.94 49.41 .......buildMatrices; 8 4.68 1 32.79 49.09 35.44 1.78 35.44 48.72 ........buildStiffness; 8 40.13 1 0.25 1.33 0.49 0.12 0.49 0.67 ........buildMass; 8 40.61 1 0 0.02 0 0 0 0.01 ........buildDamping; 8 40.62 1 0 0.02 0 0 0 0 ........buildGeometri",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717164532:158,benchmark,benchmark,158,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717164532,1,['benchmark'],['benchmark']
Testability,"@damienmarchal , discussions during the SOFA-dev meeting lead to a question over the developed design and your opinion is needed. . The problem was that some scenes tests where crashing at exit. This is due to the SofaPython3 cache (`s_objectcache` there https://github.com/sofa-framework/SofaPython3/blob/1b5d271aa21df06c4c5ab75599e364adb0c1e9be/Plugin/src/SofaPython3/DataHelper.cpp#L252C1-L252C73) . The problem was that this is a static object containing python objects and is thus cleaned at the very end of the program exit, after the python interpreter, which is not authorized. . To fix it, following [pybind11 suggestions](https://pybind11.readthedocs.io/en/stable/advanced/misc.html) I've added a member to the module Sofa.Core that insured that the cleanup is called while the interpreter is still alive (see the PR https://github.com/sofa-framework/SofaPython3/pull/425). But is was not enough because the interpreter is not cleaned correctly either : the static method ""Release"" of SofaPython3, in charge of cleaning up python and deleting the interpreter was never called when launching scene in runSofa. . This lead to the need of cleaning up *explicitly* the plugin before exiting the main function. This design was not liked by every dev, some wanting a Raii-like cleanup, in the destructor of some member, which is in my mind not possible because the interpreter instance is static in the SofaPython3 plugin and thus we have no guaranty that it would not be deleted before any other static member.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4828#issuecomment-2233357216:165,test,tests,165,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4828#issuecomment-2233357216,1,['test'],['tests']
Testability,"@damienmarchal ; Sorry I did not pay attention that `BaseTest` reside in SofaHelper so that is fine, I thought your idea was to implement a new library dedicated to the abstraction api for testing with sofa, ie a kind of lightweight SofaTest library.; I was not really aware that there was code inside SofaKernel libraries that directly depend on gtest, I thought it was still kept ""optional"" (ie that gtest has become mandatory on master for some time, wether or not you build and execute unit tests). ; We are still used to developping with the ""idea"" that gtest is optional, even though in reality there is no use case were we do not include it. Coming back at this PR, to be honest I don't believe there is a functionality in the BaseTest classes (apart from the fact that it removes dependencies) that I would like to use, because mostly : ; - we do not currently have a use for message api, or at least we do not have any idea about why it could be beneficial for us to start using it.; - I d like to discourage the use of one size fits all epsilon and comparison values for floating points arithmetic, since I prefer people to actually think about the quantities they want to compare. Comparing floats in a consistent fashion is harder than it looks, with the exception when you expect that the quantities you want to compare to be strictly equal. So having a Base test class which provides these comparison facilities is also not something I am particularly looking for. There are some abstractions attempts in SofaTest that I find interesting ( linearisation tests for the most part ) but it got snowed under a dependency bloat. . However that being said, the only thing I'd like, is that if I implement a test just using the ""vanilla"" gtest library, it can be merged, built and run easily on the master. With the current state of things, integrating a new test in `framework_test`, requires you to build all sofa, and not just `SofaCore` as I would have expected. So in return you have to wa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224:189,test,testing,189,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224,2,['test'],"['testing', 'tests']"
Testability,"@damienmarchal @courtecuisse I have tested the mapping and done the change requested but I'm not able to push the change in mimesis-inria/sofa , any idea why?; If complicated I can recreate a PR...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1203#issuecomment-552047154:36,test,tested,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1203#issuecomment-552047154,1,['test'],['tested']
Testability,"@damienmarchal @hugtalbot , stupid question. How can I write a test for a GUI ? I don't see any tests for qt/glut ... :/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/538#issuecomment-356577080:63,test,test,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-356577080,2,['test'],"['test', 'tests']"
Testability,@damienmarchal Could you have a look at my recent commits (particularly https://github.com/sofa-framework/sofa/pull/586/commits/661d7609897dda39bf7f11d0e232e4799f3176f6) please?; [ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/586#issuecomment-371075952:201,test,tests,201,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/586#issuecomment-371075952,1,['test'],['tests']
Testability,"@damienmarchal Could you take a look at the 8 failing scene tests?; All of them are ""required data"" errors.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/825#issuecomment-439840761:60,test,tests,60,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/825#issuecomment-439840761,1,['test'],['tests']
Testability,@damienmarchal Did you notice the unit test failures? It's about PSL.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/540#issuecomment-357206293:39,test,test,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/540#issuecomment-357206293,1,['test'],['test']
Testability,"@damienmarchal Even if these new components are trivial, you are right and I did push some tests for them.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/147#issuecomment-278908596:91,test,tests,91,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/147#issuecomment-278908596,1,['test'],['tests']
Testability,"@damienmarchal I added a `UnableToOpenFile()` function and modified ""MeshTrian.cpp"" accordingly, for now. Could you check if I am in right direction? If I am, I would follow up with changes in other loader and components. **Caution**: I couldn't test if it actually works! Because, a function `findfile(filename)` exists to check if file exists. So, to make `fopen()` purposely fail, even after supplying correct filename, I tried changing permissions with `chmod uga-r MeshTrian.cpp`, but it didn't report any error even with sofa's official master version. I tried couple other ways to purposely fail `fopen()` but they didn't work. Anyway, since the code looked fine, and to receive feedback, I will make a PR shortly.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/197#issuecomment-381862958:246,test,test,246,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/197#issuecomment-381862958,1,['test'],['test']
Testability,@damienmarchal I have added a RegularGridTopology_test. In fact I don't think GridTopology is used like this as a component. It is more a mother class for Regular/Cylindrical and sphereGridTopology (which each has tests now),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/270#issuecomment-301436164:214,test,tests,214,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-301436164,1,['test'],['tests']
Testability,"@damienmarchal no idea, but it cannot come from this PR as it only defines macros w/o using them.; Is the crashing test based on random parameters?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/165#issuecomment-278911300:115,test,test,115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/165#issuecomment-278911300,1,['test'],['test']
Testability,"@damienmarchal ok for the test. To have an example, could you point me out an example of test done in a plugin. Thanks.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273408076:26,test,test,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273408076,2,['test'],['test']
Testability,"@damienmarchal sure ? it's look like the test is still failing, isn't it ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/304#issuecomment-314827432:41,test,test,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-314827432,1,['test'],['test']
Testability,@damienmarchal tests are fixed (modifying a map while iterating it is always bad...) ; a failure on gcc5.4 but it seems to be the hiccup failing test.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/301#issuecomment-311932799:15,test,tests,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-311932799,2,['test'],"['test', 'tests']"
Testability,"@damienmarchal that does make sense, indeed. With all the qml I've been doing I could have thought of that.. I'll change it again :). I'd love your input on the tests also, if possible.; I would like to test the change in behavior compared to the previous implementation but I don't know how I could do that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/917#issuecomment-466507138:161,test,tests,161,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/917#issuecomment-466507138,2,['test'],"['test', 'tests']"
Testability,@damienmarchal why aren't you fixing the tests directly in this PR?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/453#issuecomment-335177317:41,test,tests,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453#issuecomment-335177317,1,['test'],['tests']
Testability,"@damienmarchal, I am talking about these xml files:; ```; [ RUN ] BilateralInteractionConstraint_test/1.attributesTests; bash: line 1: 2202 Segmentation fault build/bin/SofaConstraint_test --gtest_output=xml:build/tests/SofaConstraint_test/report.xml 2>&1; ```. (copied from https://ci.inria.fr/sofa-ci/job/centos_clang-3.4_options/262/console). But I think @guparan is working on the subject.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/191#issuecomment-283708840:214,test,tests,214,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/191#issuecomment-283708840,1,['test'],['tests']
Testability,@dessteph I prepared the test in Sofa/Component/LinearSolver/Direct/tests/SparseLDLSolver_test.cpp. Could you add the check of the result at the end? You will need to use another software (matlab?) to compute the ground truth and compare it to the variable `JMInvJt` containing our result. Thanks,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3010#issuecomment-1174910942:25,test,test,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3010#issuecomment-1174910942,2,['test'],"['test', 'tests']"
Testability,"@epernod ; When making tests I generally try to tests either all the code-path or if this is too big, to test at least each added function with several values (eg: one with valid values and one with wrong one). . For examples of tests on a Class you can have at the test added in: ; https://github.com/sofa-framework/sofa/pull/119/files. For examples of tests on a component you can have look at the last Eulalie's PR (; https://github.com/sofa-framework/sofa/pull/108); and specifically at: ; https://github.com/SofaDefrost/sofa/blob/0df8da53458d64ed22b1cd2807555838e23ef0cf/SofaKernel/modules/SofaEngine/SofaEngine_test/BoxROI_test.cpp; you can also tests as in PR https://github.com/sofa-framework/sofa/pull/105 (interesting examples as they show how use ExpectMessage/MessageAsTestFailure to detect that a message has not been sended by the component); and more specifically in: ; https://github.com/SofaDefrost/sofa/blob/65a113512104f0237a4c4bf5e6f05b2c1d6a7013/SofaKernel/modules/SofaBaseCollision/SofaBaseCollision_test/DefaultPipeline_test.cpp. PS: I'm not saying this a super perfect tests but may gave you and idea on the direction to go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273766830:23,test,tests,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273766830,8,['test'],"['test', 'tests']"
Testability,"@epernod Can you have a look on my changes in TopologyChecker. I had to add this to satisfy the unit tests in TopologyChecker_test. Otherwise, it crashes.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3962#issuecomment-1600807973:101,test,tests,101,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3962#issuecomment-1600807973,1,['test'],['tests']
Testability,@epernod Could you quick review the commit 47ef2e63a80c please? How could CubeTopology.scn have been passing scene-tests without this fix?; (request from @damienmarchal),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/548#issuecomment-358257329:115,test,tests,115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-358257329,1,['test'],['tests']
Testability,@epernod Did you managed to make some tests ? . EDIT: up :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/133#issuecomment-275694634:38,test,tests,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-275694634,1,['test'],['tests']
Testability,@epernod I just simplified the code and added some readyOnly properties; Maybe you could test before merge.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-741936553:89,test,test,89,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-741936553,1,['test'],['test']
Testability,@epernod I needed to have two different names for the same test:; - one when edges are computed from an existing triangle topology; - and one when edges are computed from hexa.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1335#issuecomment-614777371:59,test,test,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1335#issuecomment-614777371,1,['test'],['test']
Testability,"@epernod If I am not wrong, if you have n=[2,2,2] your code will give dim=0 where it should give dim=3.; Only a test could check that ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/270#issuecomment-305456930:112,test,test,112,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-305456930,1,['test'],['test']
Testability,@epernod Would you like to test this PR?. [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2141#issuecomment-952910634:27,test,test,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2141#issuecomment-952910634,2,['test'],"['test', 'tests']"
Testability,@epernod for sure ComponentState is not used in the simulation graph (maybe it should...).; ; But even if it was the case we would still need at least an assert at the entry of each functions in case the caller is not respecting the callee's precondition of being in a valid state.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278903426:154,assert,assert,154,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278903426,1,['assert'],['assert']
Testability,@epernod should add to non regression tests,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1260#issuecomment-591341951:38,test,tests,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1260#issuecomment-591341951,1,['test'],['tests']
Testability,"@epernod thanks for having taken the time to test this feature, and reporting the bug",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2141#issuecomment-964171394:45,test,test,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2141#issuecomment-964171394,1,['test'],['test']
Testability,@epernod this PR fixes ParticleSink alright but two other tests fail _because_ of the new msg_error() in [ParticleSink.inl](https://github.com/sofa-framework/sofa/blob/aeea55fbd91e165ee323e3f4fcecb2e430135328/applications/plugins/SofaSphFluid/src/SofaSphFluid/ParticleSink.inl#L82) 😅,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2026#issuecomment-823852998:58,test,tests,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2026#issuecomment-823852998,1,['test'],['tests']
Testability,"@epernod yes, these functions are the one used to queue in the object's message log all the msg_info/warnig/error/deprecation. ; basically this means that when an object receive a new message increment the component_state counter so we can detect ""something happened"". . On day we may wonder if, for msg_error() the component_state shouldn't be flipped to ""Invalid"", but for the moment the state counter is just ""incremented"" but not changed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2397#issuecomment-943187451:80,log,log,80,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2397#issuecomment-943187451,1,['log'],['log']
Testability,@epernod you can test the perf aspects it compiles with #1131 ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1093#issuecomment-526513207:17,test,test,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1093#issuecomment-526513207,1,['test'],['test']
Testability,"@etienneschmitt, thank you for the test. ; ; The dashboard seems to report there is problem with the added test: ; https://www.sofa-framework.org/dash/?branch=pr/fix_vtkloader. EDIT1: isn't the file 'vox8_binary.vtk' missing ?. Apart from the dashboard issue i would say:; +1 for the use of c++x11 ; +1 for the test ; +1 for the new feature ; :). As @thomas-lemaire was assigned by Mathieu to this PR I assume having its feedback is important before merging.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/72#issuecomment-265752803:35,test,test,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/72#issuecomment-265752803,3,['test'],['test']
Testability,@fredroy Do you have some time to take a look?; [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1069#issuecomment-498992413:68,test,tests,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1069#issuecomment-498992413,1,['test'],['tests']
Testability,"@fredroy I really like the Raw String Litteral, . The FileMonitor test is probably not related with your PR, It is an old bug that was soved last week...but maybe it wasn't @bcarrez ...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/158#issuecomment-276366449:66,test,test,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/158#issuecomment-276366449,1,['test'],['test']
Testability,@fredroy Thanks a lot for the tests. I'll investigate,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1432650987:30,test,tests,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1432650987,1,['test'],['tests']
Testability,@fredroy Thanks for trying.; So the regression depends on the OS. Great!; I added a regression test for this scene in https://github.com/sofa-framework/sofa/pull/4055,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1643591728:95,test,test,95,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1643591728,1,['test'],['test']
Testability,@fredroy This change seems to have a bad impact on the performances. I noticed that on the caduceus. Could you test it on your end?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2458#issuecomment-964167988:111,test,test,111,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2458#issuecomment-964167988,1,['test'],['test']
Testability,@fredroy any progress on this one ? I tested and It worked like a charm ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1837#issuecomment-786017626:38,test,tested,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1837#issuecomment-786017626,1,['test'],['tested']
Testability,@fredroy could you try to add :; ``` cpp; Inherit::init();; ```. to call Mapping `init()` which include the function `testMechanicalState()` checking the `isMechanical` property.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3473#issuecomment-1325267101:118,test,testMechanicalState,118,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3473#issuecomment-1325267101,1,['test'],['testMechanicalState']
Testability,@fredroy in recent builds the test are failling can you have a look.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/301#issuecomment-311276205:30,test,test,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-311276205,1,['test'],['test']
Testability,@fredroy thanks for the benchmark. I am pleased with the results.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4248#issuecomment-1776632509:24,benchmark,benchmark,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4248#issuecomment-1776632509,1,['benchmark'],['benchmark']
Testability,@fredroy thanks for the info... Here are the corresponding lines on windows: ; Adding Plugin CImgPlugin; -- Could NOT find JPEG (missing: JPEG_LIBRARY JPEG_INCLUDE_DIR) ; -- Could NOT find TIFF (missing: TIFF_LIBRARY TIFF_INCLUDE_DIR) . So we either need to install the imagemagick approach (I assume when CIMg cannot do something with a file it calls imagemagick) or to install the JPEG/TIFF libraries on windows/centos/macos. . I also wonder if CMakeLists.txt use conditionnal for JPEG why the tests are done unconditionally ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335465320:496,test,tests,496,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335465320,1,['test'],['tests']
Testability,@fredroy you have test failures,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1226819678:18,test,test,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1226819678,1,['test'],['test']
Testability,"@fredroy you wanted some tests.... I have added ""some""... I know 2 are failing but I think the mesh is wrong. I will fix that in another PR",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1594#issuecomment-806988625:25,test,tests,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1594#issuecomment-806988625,1,['test'],['tests']
Testability,"@fredroy, @guparan In this PR just wanted to have the exception message related with the Image_test. Here it is: ; ```; unknown file; C++ exception with description ""[instance(0,0,0,0,0x0,non-shared)] CImg<unsigned char>::load(): Failed to recognize format of file '/Users/sofa/jenkins/workspace/mac_clang-3.4_options/pr/all/applications/plugins/image/image_test/scenes/lena.jpg'."" thrown in the test body.; ```. Any idea why ? Could it be the image CImg library compiled without jpg support or something like that ? . EDIT: Ok I fixed this one...it is because ImageMagick is not install on some machine and thus CImg does not handle jpg. @guparan (I have installed ImageMagick on sofa-centos). . EDIT2: I updated the mac. I remember that CImg need to install external tool on windows. But don't remember which one...maybe it was imagemagick also. @guparan would you have some time to dig into that ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335427052:396,test,test,396,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335427052,1,['test'],['test']
Testability,"@gaurab4163 ; yes sorry for the missunderstood, the files should be placed in a new folder named: SofaKernel/framework/sofa/helper/messaging/; not in logging/; Could you change your commit and move the files. Thx.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/639#issuecomment-387664299:150,log,logging,150,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-387664299,1,['log'],['logging']
Testability,"@ggrosshenny ; Thank you for you PR. Being able to save timing in JSON is a very nice idea and as more and more sofa component are using JSON so it make sense to have that. . Now, some feedback about the implementation:; - There is a lot of new functions but there is not test for any of them. . - The way you handle errors in the binding code is now deprecated as it was not following the python standard. The proper way is that failure in binding code must return NULL (and not Py_RETURN_NONE). You can add an execption and a custom message with PyErr_SetString(...) but you don't need to do that when the failure is because of PyArg_ParseTuple...as it set the message itself so that it is standardized. . So, it should be like that: ; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); return NULL;; ```; Instead of:; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); {; PyErr_BadArgument();; Py_RETURN_NONE;; }; ```. - You are commenting the python binding code using doxygen, thank you very much for that ! As these are python functions it would be great if you could also provide python docstrings (as this is the python standard of documenting code). You are using the SP_MODULE_METHOD macro which have and empty docstring by default... sofa is missing a macro one to specify the docstring (it exists for SP_CLASS_METHOD_DOC). So to document you functions you first need to add a new macro close to SP_MODULE_METHOD with:; ```cpp; #define SP_MODULE_METHOD_DOC(MODULENAME,M, D) {#M, MODULENAME##_##M, METH_VARARGS, D},; ```; Then you can document the python code in a way similar to when using ""SP_CLASS_METHOD_DOC"". . - the externals libraries should be in the repository extlibs/* so sofa/helper/json.hpp should be moved there. - I have no opinion whether the JSON output should be activated only when the json.hpp is found or if we should systematically ship this lib with sofa. @hugtalbot probably have better opinion on these aspects as this have connection with the Licens",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885:272,test,test,272,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885,1,['test'],['test']
Testability,@guparan & @fredroy ; I think I fixed the test failure problem on centos & ubuntu by removing the ; add_target_library( gtest ) in Sofa_test.; Don't ask me why it remove the failure at release I don't know ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-343492858:42,test,test,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-343492858,1,['test'],['test']
Testability,@guparan +for the typo and for the careful reading. Thanks.; With the new condition the macro is now equivalent to something like EXPECT_ATLEAST_TWO_FAILURES ? But as you can see in the dashboard this is not what the tests are expecting as there is now one new test failure reported in the dashboard.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370721309:217,test,tests,217,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370721309,2,['test'],"['test', 'tests']"
Testability,"@guparan : good question. Actually I also believe it should be split to actually match the current architecture. That is to say each library gets its own test exectuable ( provided one exist ). But for me that was beyond the scope of this pull request, which was to propose the removal of the `SofaTest` dependency from the `framework_test` executable, for the aforementioned reasons.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/455#issuecomment-335459601:154,test,test,154,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/455#issuecomment-335459601,1,['test'],['test']
Testability,"@guparan : however for example unit tests inside SofaCore / SofaDefaullttype / SofaHelper cannot rely on a Sofa specific testing abstraction layer written on top of gtest, if the guildeline is that a unit test executable can be run solely by linking against the library it is designed to test.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338632890:36,test,tests,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338632890,4,['test'],"['test', 'testing', 'tests']"
Testability,@guparan ; I don't think this is a regression. . This test fails on MacOS from time to time because of a timeout. It was described by @bcarrez somewhere (i'm searching:)). We should propably re-create a new issue because this is something that need to be fixed. EDIT: I didn't find where it was described by bruno so let me describe it better. The problem is related to the fact that the test are using a delay to wait the OS to notify the application a file has changed...but on MacOS the delay is not big enough causing the test to fail.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/105#issuecomment-273806468:54,test,test,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/105#issuecomment-273806468,3,['test'],['test']
Testability,"@guparan @epernod , I just tested the compilation again (without my patch) and I realized that SOFACUDA_DOUBLE has nothing to do with this issue, I was wrong about that. On my setup, the compilation does not works regardless of the SOFACUDA_DOUBLE option. I'm a bit surprized it works on your side. Here are information on my setup:; OS => Fedora 29; NVCC version => V10.1.105; CMake variable SOFACUDA_ARCH=sm_60; CMake variable CUDA_VERSION=10.1. And here are the output errors from ninja:. ```; [1/96] Building NVCC (Device) object applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o; FAILED: applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o ; cd /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda && /usr/bin/cmake -E make_directory /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/. && /usr/bin/cmake -D verbose:BOOL=OFF -D build_configuration:STRING=Release -D generated_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:27,test,tested,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057,1,['test'],['tested']
Testability,@guparan @fredroy there is still 66 regressions on Ubuntu.. maybe a [ci-build][force-full-build][with-all-tests] will help,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1175997285:106,test,tests,106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1175997285,1,['test'],['tests']
Testability,@guparan @hugtalbot the scene has not been ignored despite the file .scene-tests,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2804#issuecomment-1108158984:75,test,tests,75,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2804#issuecomment-1108158984,1,['test'],['tests']
Testability,@guparan Here it is the failure on windows are removed. ; Do we go fast path ? [ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/604#issuecomment-369864264:101,test,tests,101,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-369864264,1,['test'],['tests']
Testability,"@guparan I though about that but if you switch from release to debug I'm not sure cmake will always clean the lib repository to remove the non suffixed version. This is why I choose the ordering of operation. In debug load the _d and fallback to the normal. . @fjourdes its a pity that all those nice PR are waiting unmerged. . EDIT: I don't see a lot of work to do to have a ready PR (add some unit tests on the features added in RequiredPlugin and on PluginManager, use the msg_ api). Two hours of work maybe. . EDIT2: @guparan about the InSimo PR... we should merge the easy PRs from InSimo and don't wait the hard ones to be merged.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/465#issuecomment-335823292:400,test,tests,400,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465#issuecomment-335823292,1,['test'],['tests']
Testability,@guparan My tests were wrong (they read previously deleted data). Now everything seems fine.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/72#issuecomment-266378914:12,test,tests,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/72#issuecomment-266378914,1,['test'],['tests']
Testability,@guparan thank you for pointing that.The problem is that the CI machine *_pr3 does not have the python module 'hjson' installed consequently psl tests failed. EDIT: So you can safely ignore them...& merge the PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/540#issuecomment-357269105:145,test,tests,145,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/540#issuecomment-357269105,1,['test'],['tests']
Testability,"@guparan the timeout in Jenkins is a timeout of ""no activity"" and not absolute...an application that constantly print on its ouput is not halted. This is clearly not enough. . We probably need both logics:; - a 'no activity' timeout that should be set to a short duration like 30min.; - an 'absolute' timeout configured to a much larger value (eg: build duration + all the test + 40% ). EDIT: one thing to add, timeout is not the panacea because a '3 hours timeout' (a sound value) already allows problematics build to cause a lot of harm in the CI. Our log files are always far below < 100 MB unless something goes really wrong. So my suggestion is some checks on the log file size to detect and cancel offending builds.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117:198,log,logics,198,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117,4,"['log', 'test']","['log', 'logics', 'test']"
Testability,"@guparan there is no `messaging` folder. did you mean; `SofaKernel/framework/sofa/helper/logging/FileMessage.{h,cpp}` instead of; `SofaKernel/framework/sofa/helper/messaging/FileMessage.{h,cpp}`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/639#issuecomment-386779185:89,log,logging,89,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-386779185,1,['log'],['logging']
Testability,"@guparan you're right! We didn't see the problem because we ran the tests on the Release build and not on the Debug build. A segmentation fault occurs with the Debug build, dues to an assertion. @tgaugry currently investigates on the issue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/992#issuecomment-501707903:68,test,tests,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/992#issuecomment-501707903,2,"['assert', 'test']","['assertion', 'tests']"
Testability,"@guparan, @Younesssss, @hugtalbot any volunteer to integrate the test in the normal test framework so we can merge this asap ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-624093742:65,test,test,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-624093742,2,['test'],['test']
Testability,"@guparan, @fredroy, @bcarrez , @hugtalbot ; Hello, this branch is now synced with master, CI is ok, added functions have theirs tests...; So it is waiting.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/410#issuecomment-345064392:128,test,tests,128,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/410#issuecomment-345064392,1,['test'],['tests']
Testability,@guparan...the failing test on stl exporter are also fixed. ; @jnbrunet Thanks again for the PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/406#issuecomment-330821254:23,test,test,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/406#issuecomment-330821254,1,['test'],['test']
Testability,@hugtalbot & @jnbrunet ; I fixed the problematic code and added new tests for each of the added features.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/656#issuecomment-389903272:68,test,tests,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-389903272,1,['test'],['tests']
Testability,"@hugtalbot , @guparan and everyone else ; This PR; - have discussed with as much as possible persons,; - and is now one month old, ; - succeed on all Tests on the CI since several days. I suggest to have a last look at it & merge it rapidly that we can start working on top of it to improve it and to remove all the dependencies to SofaTest.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-344250584:150,Test,Tests,150,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-344250584,1,['Test'],['Tests']
Testability,"@hugtalbot , I added a test with an error message;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3783#issuecomment-1551107805:23,test,test,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3783#issuecomment-1551107805,1,['test'],['test']
Testability,"@hugtalbot ; My guess is the following:; When loading the SofaCUDA plugin, the module check if it can detect a cuda device. If there is no such a device, it now triggers an error, whereas it was just a print before. In other words, the behavior does not change (loading of the plugin), but the log message is now counted as an error. ; I think it is a good thing. It helps to identify the scenes that cannot be executed on the CI. For the case of the failing scene. I'll just remove the `<RequiredPlugin name=""SofaCUDA""/>` which is even not required.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4430#issuecomment-1903663503:294,log,log,294,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4430#issuecomment-1903663503,1,['log'],['log']
Testability,@hugtalbot @bakpaul I don't really understand why there is a factor 2 here: https://github.com/sofa-framework/sofa/blob/975b4ab35149b23915490e715da0fb3cdcc3bb92/Sofa/Component/SolidMechanics/FEM/HyperElastic/tests/Material_test.cpp#L250. And here:. https://github.com/sofa-framework/sofa/blob/975b4ab35149b23915490e715da0fb3cdcc3bb92/Sofa/Component/SolidMechanics/FEM/HyperElastic/src/sofa/component/solidmechanics/fem/hyperelastic/material/StableNeoHookean.h#L193. I don't understand how `C_H_C ` relates to $C^{-1} \underline{\overline{\otimes}} C^{-1}$ and `trC_HC_` relates to $C^{-1} \otimes C^{-1}$,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4603#issuecomment-2012379731:208,test,tests,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4603#issuecomment-2012379731,1,['test'],['tests']
Testability,"@hugtalbot @epernod ; Done! :). **Before**:. https://user-images.githubusercontent.com/29635054/191820070-83997f7f-5b62-4c09-a0c9-6e22469da284.mp4. **After**:. https://user-images.githubusercontent.com/29635054/191820082-26d29ac0-21c1-4d65-9a62-3e27a550502b.mp4. **Scene to test with**:; ```python; import Sofa; import Sofa.Core. def createScene(; root_node: Sofa.Core.Node,; ) -> Sofa.Core.Node:. plugin_list = [; ""Sofa.Component.Collision.Detection.Algorithm"", # [BVHNarrowPhase, BruteForceBroadPhase, DefaultPipeline]; ""Sofa.Component.Collision.Detection.Intersection"", # [NewProximityIntersection]; ""Sofa.Component.Collision.Geometry"", # [SphereCollisionModel]; ""Sofa.Component.Collision.Response.Contact"", # [DefaultContactManager]; ""Sofa.Component.Constraint.Projective"", # [FixedConstraint]; ""Sofa.Component.LinearSolver.Iterative"", # [CGLinearSolver]; ""Sofa.Component.Mass"", # [UniformMass]; ""Sofa.Component.ODESolver.Backward"", # [EulerImplicitSolver]; ""Sofa.Component.SolidMechanics.Spring"", # [StiffSpringForceField]; ""Sofa.Component.Topology.Container.Dynamic"", # [EdgeSetTopologyContainer, EdgeSetTopologyModifier]; ""Sofa.Component.Visual"", # [VisualStyle]; ""SofaCarving"", # [CarvingManager]; ""Sofa.Component.StateContainer"", # [MechanicalObject; ""Sofa.Component.LinearSolver.Direct"", # [SparseLDLSolver]; ""Sofa.Component.AnimationLoop"", # [FreeMotionAnimationLoop]; ""Sofa.Component.Constraint.Lagrangian.Correction"", # [LinearSolverConstraintCorrection, UncoupledConstraintCorrection]; ""Sofa.Component.Constraint.Lagrangian.Solver"", # [GenericConstraintSolver]; ]. plugin_node = root_node.addChild(""Plugins""). for plugin in plugin_list:; plugin_node.addObject(""RequiredPlugin"", pluginName=plugin, name=plugin). root_node.addObject(""FreeMotionAnimationLoop""); root_node.addObject(""DefaultVisualManagerLoop""); root_node.addObject(; ""VisualStyle"",; displayFlags=[""showVisual"", ""showForceFields"", ""showCollisionModels"", ""showInteractionForceFields""],; ). root_node.addObject(""DefaultPipeline",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3269#issuecomment-1255376528:274,test,test,274,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3269#issuecomment-1255376528,1,['test'],['test']
Testability,"@hugtalbot @guparan I am not sure I just need to switch from EXPECT_EQ to EXPECT_NE. When I'll refactor the interface of the TaskScheduler, a large majority of the test will not make sense. I suggest to merge this PR now, and I'll change the tests in my next PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1927#issuecomment-808284622:164,test,test,164,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1927#issuecomment-808284622,2,['test'],"['test', 'tests']"
Testability,"@hugtalbot I didn't test it but the argument parser stuff looks good to me. I would suggest to not define b/o characters because, AFAIK, advance timer is not often used so maybe there is better use of b/o character.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/468#issuecomment-354986412:20,test,test,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/468#issuecomment-354986412,1,['test'],['test']
Testability,"@hugtalbot I fixed the test, is was not updated to handle the change between repr and str as well as the commit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/304#issuecomment-314798964:23,test,test,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-314798964,1,['test'],['test']
Testability,@hugtalbot No it is not..sorry for that.. I will fix the conflict and the failing test.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/304#issuecomment-314775298:82,test,test,82,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-314775298,1,['test'],['test']
Testability,@hugtalbot The code seems ok to me and fix test that are bugued. ; I vote for fast integration ASAP we have an all green dashboard.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/143#issuecomment-275706127:43,test,test,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/143#issuecomment-275706127,1,['test'],['test']
Testability,@hugtalbot Why do you want to remove DataTrackerEngine and its tests?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1238#issuecomment-571978585:63,test,tests,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1238#issuecomment-571978585,1,['test'],['tests']
Testability,@hugtalbot `getobjects` test should be solved here #2326 and `string_wstring` here #2320,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2290#issuecomment-915390572:24,test,test,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2290#issuecomment-915390572,1,['test'],['test']
Testability,@hugtalbot as we are on those tests. Could you quickly test if this one is working fine on your computer:; Regression_test/TopologyRegression_test.sceneTest/RemovingTetra2TriangleProcess_withOptions. I'm not sure to understand what is the problem here.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1321#issuecomment-609669017:30,test,tests,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1321#issuecomment-609669017,2,['test'],"['test', 'tests']"
Testability,@hugtalbot could you review my review in commit cb4eb09; I had to split your VecCoord position device into 2 variables. As in fact the original Data is linked to rigid mechanical Object in the scene and so changing its size and adding new position change the behavior of the rigid objects.; I tested your Demo scene and I can still nicely see the omni moving. Well done.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/648#issuecomment-406545983:293,test,tested,293,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/648#issuecomment-406545983,1,['test'],['tested']
Testability,@hugtalbot could you test it on linux?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3531#issuecomment-1562518690:21,test,test,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3531#issuecomment-1562518690,1,['test'],['test']
Testability,"@hugtalbot thanks for the comment.; This PR is not entirely forgotten, but there are still some questions regarding the implementation of such system. First, it relies on the messaging API to work, which I find is not a great approach, not that I have another one.; Second, the question remains as to how this mechanism could be put to good use.; I think the best way to put the mechanism to the test would be through a visual graph of the component's states, which could be done in runSofa2. Sadly there are more important stuff to deal with in runSofa2 for now.; We can surely discuss it on wednesday, but I don't know if there's much to say, and I don't think I'll work on this in the following weeks...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/823#issuecomment-466042751:396,test,test,396,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/823#issuecomment-466042751,1,['test'],['test']
Testability,@hugtalbot will you update the regression references in an other PR ? 🙊. And there is scene test still failing on Python3 (ReadTheDocs_Example.py 😅),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1786372979:92,test,test,92,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4205#issuecomment-1786372979,1,['test'],['test']
Testability,"@hugtalbot, @fredroy ; I did the layout organization without the tests.; I would be in favor of merging it so we can directly write the functional tests during the planned meeting.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1697#issuecomment-759413476:65,test,tests,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1697#issuecomment-759413476,2,['test'],['tests']
Testability,"@hugtalbot, test is fixed somehow so... yes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3271#issuecomment-1283205568:12,test,test,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3271#issuecomment-1283205568,1,['test'],['test']
Testability,"@hugtalbot, the change seems to break 2 scene tests. Will you have time to check if they are false negative due to the BB change?. https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-670/CI_CONFIG=centos_clang-3.4,CI_PLUGINS=options,CI_TYPE=release/5/warnings3Result/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/670#issuecomment-400971635:46,test,tests,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/670#issuecomment-400971635,1,['test'],['tests']
Testability,"@marques-bruno I see how that ""on-demand""-processing mechanism prevents useless computation by the DataEngine. Do you think we should strive to preserve that behavior and unlink the triggering by an event? From my part it needs more testing to see the behavior. . Returning to the issues part of this PR:; - I've checked the examples and everything seems to work nicely. I modified one example by adding a chained PSDE, which also works (by explicitly declaring the type of the output); - I find the following syntax for declaring a vacant output a little bit confusing: ; `self.addNewOutput('average', value='0')`; I would probably leave out the 'value' altogether, because this syntax suggests that it has some integer or even string type. But this is not the main issue now.; - I think the main issue now is to get a review from the guys to see the feasibility of the concept in general and of the modifications at the level of Base.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407380411:233,test,testing,233,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407380411,1,['test'],['testing']
Testability,@matthieu-nesme . I looked back to the PR and I will remove the three Data field because:; - controlling the queue size with a Data is not crucial. I will replace it with an attribute and get/set or an environment variable. ; - the msgLevel is un-used and was there to rise discussion on whether or not controlling the level of messages emitted by an object make sense (eg when debugging). ; - the logLevel'one is un-used yet but should one day override the behavior of the mis-used f_printLog. ; ; Thanks again to pointing that.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276757536:398,log,logLevel,398,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276757536,1,['log'],['logLevel']
Testability,"@matthieu-nesme I think we should implement str() as you have in your fork ;) . First of all thanks Matthieu and Maxime for the interest and time you put into this PR because it is getting very long. . Let's me summary the different approach that have been tried so far. . 1) The first version of the code was doing conversion by hard-coding the object type detection and calling getLinkPath(). The problem with this version is that it cannot be extend without adding more hard-coded test and recompiling the SofaPython plugin. ; Everyone agree this version is bad. . 2) The second version that was suggested by maxime is much more extensible as it was using the str() operator. The problem I see with this approach is that the str function have been implemented and is used in a lot of place (including Anatoscope fork) and so it may not be a god idea to now force the str() function to return the path just to make the createObject function happy. In this version prevent us to warn user there is a conversion done and that if they change the str() because, well its python they can do that, it may break something. This version is imposing that people writing a 'str' function have to keep in mind that (even if they don't know nothing about that) it must work if their object is called in createObject. (see later I try to explain better the problem). ; So to me this version will generate a lot of subtile problems and backward compatibility issues. . 3) The third version is close to use the str() in term of design but it makes it explicit that if an object want conversion to be used in the parameters of the createObject function it have to follow a specific protocol...this is done by implementing a dedicated function (eg: getAsACreateObjectParameter()). The implementation of this function for BaseObject and Sofa.Data could simply link to getLinkPath(). But if you have your own 'complex' object and want it to be used as a parameter in createObject you can just implement your own conver",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:484,test,test,484,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575,1,['test'],['test']
Testability,"@matthieu-nesme you are right the ""existing.txt"" file is created to validate the behavior of the FileMonitor API. It should be added to .gitignore as well as probably removed when the test terminates.; Edit: typos",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/146#issuecomment-275222917:184,test,test,184,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/146#issuecomment-275222917,1,['test'],['test']
Testability,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:57,test,test,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180,5,['test'],['test']
Testability,"@matthieu-nesme, @maxime-tournier . Thanks for your PR. The cleaning looks ok to me but it seems there is two new components (UniformStiffness, DiagonalStiffness) added in this PR. . Maybe you should change the title of the PR to ""Minor Fix and Add UniformStiff & DiagonalStiffness Components"" . I don't see any test on the two added components. . You changed the .py file to use the two added component. As they seems very similar to the existing one maybe this deserve a bit of documentation (doxygen) or example on when to use one component instead of the other otherwise users will be puzzled in deciding which one to choose.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/147#issuecomment-275705743:312,test,test,312,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/147#issuecomment-275705743,1,['test'],['test']
Testability,"@maxime-tournier ; I currently have tests with this pattern:; {""'aString'.join('[ ]')"", ""[aString aString]""} ; which succeed. . I also have added this one:; {""' '.join(['AA', 'BB', 'CC'])"", ""AA BB CC""}, ; Which also succeed. . I didn't managed to build something that fails...if you find some..please report so we can improve & update the tests. EDIT: I'm more concerned about the automatic conversion to getPath/getLinkPath for which I'm not sure we can find a clean semantic. I suggest we let that for a different PR...because this out of the scope of the PR initially submitted by Felix.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307760074:36,test,tests,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307760074,2,['test'],['tests']
Testability,"@maxime-tournier did convince me now!. As long as the init of a lib is calling the init of its dependencies the init order should be ok (with the safeguard ""s_initialized"" not to init several times). But the cleanup order cannot be guarantee, but is it a big deal? For what I can see in the public code, these init/cleanup function do nothing yet. The doc can precise than ""cleanup"" must clean the actual lib, w/o depending on any other lib, and then the actual cleanup functions should not call cleanup from their dependencies. Also ""helper::printLibraryNotCleanedUpWarning"" was creating a big mess, because using the message logger while a lot of things were already destroyed could easily creating a segfault. Anyway it would not be useful anymore and could be removed too. - ""CleanupCheck"" RAII should be renamed; - s_cleanedUp could be removed; - all the call to init/cleanup could be removed from app/tests; - helper::printLibraryNotCleanedUpWarning should be removed",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280283167:627,log,logger,627,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280283167,2,"['log', 'test']","['logger', 'tests']"
Testability,@olivier-roussel ; The findGTest https://cmake.org/cmake/help/v3.19/module/FindGTest.html of cmake only works for CMake >= 3.20 😭; (tested with cmake 3.16 and 3.19 ❌ whereas cmake 3.20 and 3.28 ✅),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1923010688:132,test,tested,132,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1923010688,1,['test'],['tested']
Testability,"@olivier-roussel thanks for the conda test and the feedbacks 👍; You should have made suggestions and/or make a PR on my branch, as I cannot credit you your patches 😵",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1922632664:38,test,test,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1922632664,1,['test'],['test']
Testability,"@olivier-roussel thanks for your complete answer. I came to the same conclusion as you. I just wanted to be sure that the result of `toEulerVector` in this test is the right one. I just tried on matlab, and it ends up with one of the angle to be pi/2.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4122#issuecomment-1699077289:156,test,test,156,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4122#issuecomment-1699077289,1,['test'],['test']
Testability,"@sescaida, I just discovered a syntax, that exists since, well ... ever, and makes this whole PR completely useless....:. ```py; import Sofa; import os. class PyEng(Sofa.PythonScriptDataEngine):; def __init__(self, ctx, name, positions):; self.name = name; self.addNewInput('positions', datatype=""vector<Vec3d>"", value=positions, help=""test""); self.addNewOutput('average', datatype=""Vec3d"", help=""average""); ; def parse(self, arg):; pass; ; def init(self):; 	pass; ; def update(self):; value = [0, 0, 0]; for pos in self.positions:; value[0] += pos[0]; value[1] += pos[1]; value[2] += pos[2]; value[0] /= len(self.positions); value[1] /= len(self.positions); value[2] /= len(self.positions); self.cleanDirty(); self.average = [[-value[0],-value[1],-value[2]]]; pass. def createScene(rootNode):; loader = rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'); psde = PyEng(rootNode, name=""PSDE"", positions=loader.findData('position').getLinkPath()); rootNode.createObject('TransformEngine', name='TE', input_position=""@loader.position"", translation=psde.findData('average').getLinkPath()); rootNode.createObject('OglModel', name=""visu"", position=""@TE.output_position"", triangles=""@loader.triangles"",; color=""1 0 0 1""); ```. With this syntax, I can create my engines definition once, and create as many as I want, on the fly, with any parameter I want for my input fields. It's actually even better, because:; - I don't have to create inputs with the fields I pass to the constructor. It could be simple data (addNewData vs addNewInput); - Construction of datafields is more explicit, thus less error-prone; - No need to go search for a decorator function somewhere in SofaPython, or to declare a dictionary of default arguments, everything is performed in the constructor. So, yeah, this PR is now virtually useless.; There's one thing I don't like with this syntax though, it's that the creation of the object is performed at the same time as it is assigned to the scene gra",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442:336,test,test,336,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442,1,['test'],['test']
Testability,"@sescaida, you can find [here](https://github.com/marques-bruno/snippets/blob/master/testDataEngine.cpp) a test code for Sofa showing what happens when cleanDirty is called at the wrong moment. After testing a little bit the engines, I noticed that the only case where it wouldn't work (to have all the data updates & cleanDirty() before calling the update() method would be in the very unlikely case where the update() method would fetch an earlier engine in the dependency graph through getContext, and set its output value. this is very unlikely, which means that, apart for some performance reasons, I don't see why it would be important to bind the cleanDirty() method in python. Since python is much slower anyway, I think this PR does not make much sense anymore. although, I still insist on removing the call to update() from handleEvent, since it is redundant with its normal on-demand calling mechanism. :) I'll update the PR soon!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/751#issuecomment-417357372:85,test,testDataEngine,85,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-417357372,3,['test'],"['test', 'testDataEngine', 'testing']"
Testability,@thomas-lemaire currently I see that some components are doing; ```cpp; if(printLog) sout << ; ```; While the 'sout' is already checking the printLog which is redundant. This is what I'm refering as mis-usagse. To me the cleaning consist in defining what is the right pattern to employ and this may (or not) result in removing the if(printLog) from the component and replace them with the use of 'sout'. . About the link with PR106. With the PR a dedicated message handler has to be installed in the application or the scene to activate loggin into component... this is done with the following code ; ```cpp; MessageDispatcher::addHandler(&MainPerComponentLoggingMessageHandler::getInstance()) ;; ```; But currently this is not done in runSofa or any other app and the messages are not added to the log. This is why I'm saying the PR is independent and is without side effect. . When the printLog expected behavior is clear the current log 'to the big string' should be removed and replaced by installing the logging proposed in PR106.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662:537,log,loggin,537,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662,4,['log'],"['log', 'loggin', 'logging']"
Testability,"@untereiner , . I'm concerned about the the impact of the fix against existing scenes. ; So can you explain a bit more what is fixed ? Was it a broken behavior resulting in a failing test or a failling scene or is it fixing a 'yet un-noticed' and fundamentally broken behavior ? ; If the computation is changed, is there any risk to have other people scenes to behave differently ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/290#issuecomment-306482993:183,test,test,183,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/290#issuecomment-306482993,1,['test'],['test']
Testability,"@untereiner I think that this is because batch mode does not ""remove"" element from the scene ; (it would be a nighmare). To me the underlying problem is that the batch mode should have a valid opengl context created (off-screen rendering) as we use it to test file with opengl based components. . Thanks for the stack trace... I will try to make something about it (even on macos).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357753868:255,test,test,255,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357753868,1,['test'],['test']
Testability,@untereiner could you please include CGOGN as an external library + separate the core changes and the pluginizable changes; Any scene to test ?; We are all curious to test it !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402413064:137,test,test,137,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402413064,2,['test'],['test']
Testability,@untereiner sorry I didn't saw you expected feedback on the tests. ; I will do that next monday.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-328175570:60,test,tests,60,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-328175570,1,['test'],['tests']
Testability,"A draft: (the existing ones first); -io; -gl; -logging; -messaging; -system; -testing; -types (with Vec, Mat, Quat, Frame, BaseMatrix, BaseVector, BoundingBox, Ray); -basictypes (fixed_array, vector, map etc); -algo (Polynmial_LD, decompose, Mat_*, lcpsolver); -utilities (rest of the mess)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1521#issuecomment-705544809:47,log,logging,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1521#issuecomment-705544809,2,"['log', 'test']","['logging', 'testing']"
Testability,A list of tasks to do:; 1. remove SofaTest use in Sofa*_test (first in the most important modules SofaBase* and then SofaCommon and ...); 2. dispatch the existing tests in the SofaTest. I suppose 1) will involve to add/modify the new Sofa.Testing API.; This post will surely be updated heavily soon....,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1885#issuecomment-852823164:163,test,tests,163,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1885#issuecomment-852823164,2,"['Test', 'test']","['Testing', 'tests']"
Testability,A lot of regression tests are failing. Maybe their references should be updated?; @hugtalbot,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2305#issuecomment-910400785:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2305#issuecomment-910400785,1,['test'],['tests']
Testability,A more generic was asked in #3592 all scenes are usually using template=Vec3d we should use the SReal version template=Vec3 allowing us to test the float cases. Is float really useful?. A CI (nightly?) should test the float configuration,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3451#issuecomment-1403263559:139,test,test,139,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3451#issuecomment-1403263559,2,['test'],['test']
Testability,"A quick test of this branch on macos: ; - `./bin/runSofa -g batch -s dag -n 100 ../../sofa/examples/Demos/caduceus.scn` crashes with a segfault; - `./bin/runSofa -s dag -n 100 ../../sofa/examples/Demos/caduceus.scn` runs ok. There is call to `glGetIntegerv(GL_READ_FRAMEBUFFER_BINDING, &windowId);` who ends to a segfault.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357514557:8,test,test,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357514557,1,['test'],['test']
Testability,A regression test must be added,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1719391944:13,test,test,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1719391944,1,['test'],['test']
Testability,"A test I did using contact and another one sliding constraints seems to work nicely:; [Scenes-TimeStepChanging.zip](https://github.com/sofa-framework/sofa/files/11685794/Scenes-TimeStepChanging.zip). To start with, I used the caduceus scene, but it's a mess.; To be noted: the `UncoupledConstraintCorrection` using the data `useOdeSolverIntegrationFactors=False` will not use the time step info from the solver anymore, therefore it will not support time step changes neither; ; I suggest we close this issue as long as no issue is actually reported.; Fine for you @alxbilger ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3793#issuecomment-1582140408:2,test,test,2,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3793#issuecomment-1582140408,1,['test'],['test']
Testability,"A unit test is failing, in Sofa.Component.Topology/InciseProcessor_test.InciseTriangles; from **TriangleSetGeometryAlgorithms**: `Orthogonal projection failed`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4194#issuecomment-1763776241:7,test,test,7,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4194#issuecomment-1763776241,1,['test'],['test']
Testability,"AFAIK, @bcarrez installed zmq on CI ubuntu (or maybe not, just before vacations). . For liboscpack it requires a specific version : https://github.com/SofaDefrost/sofa/blob/sofaCommunication/applications/plugins/Communication/README.md; If you install liboscpack from the repository there is some bugs in it. About windows and mac I never tested on it. Plus, I have to write a liboscpack cmake find :/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/534#issuecomment-355128157:339,test,tested,339,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-355128157,1,['test'],['tested']
Testability,Aaaaaaaand we forgot to handle the scenes using deprecated components. Let's fix those 27-30 new scene test errors now :laughing:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/905#issuecomment-461045318:103,test,test,103,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/905#issuecomment-461045318,1,['test'],['test']
Testability,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:134,test,tests,134,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636,6,['test'],"['test', 'testing', 'tests']"
Testability,"About the failing tests I had to fix and serialization changes...; *I wanted to reply in the specific comment but could not (github magic effect ??)*. ## Failing tests; The failing tests were using the *serialization* to check the result, I mean the tests are doing comparison of **string** instead of the **actual** values, but these tests are not testing the serialization (in which case it would have been correct). These tests should be changed to compare the expected returned values (with a tolerance in the case of floating point), using the Sofa_test.h EXPECT_VEC_DOUBLE_EQ and other similar macros (add some if they are missing). Not to mix every thing it could be addressed in an other PR. ## serialization using ""[,]"" instead of "" ""; As long as the deserialization operator is compatible with the serialization one, I do not see any issue. And no example scene is failing because of that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315013607:18,test,tests,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315013607,7,['test'],"['testing', 'tests']"
Testability,"About the last syntax your are proposing, I think it shouldn't be hard to do. . You simply have to in the c++ construction of the PSDEMagic dedicated code that get the argument named 'update', then extract its parameters (is callable, param names), transform all that as input and generate the output.; Actually this is very similar the use of decorator except that with decorator this ""magic binding"" logic is implemented in python while in your case the ""binding"" logic is done in the c++ part. . I will continue digging in this issue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380411028:402,log,logic,402,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380411028,2,['log'],['logic']
Testability,"About this PR...please keep in mind that its target is to cut the dependency to SofaTest. . About the NumericTest base test class (I think this is the one François is refering to this one when he is saying ""I would like to discourage the use of one size fits all epsilon and comparison values for floating points arithmetic, since I prefer people to actually think about the quantities they..."") it is there because there was this functionallities in SofaTest and I didn't want to update all the tests in this PR. So I just move the features from SofaTest to SofaFramework. My strategy is to 1) cut the dependency with this PR, 2) update all the tests in modules small at a time so that they stop using SofaTest. And in a third step if NumericTest is really bad...then maybe someone will update the tests relying on it and remove the class :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338786171:119,test,test,119,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338786171,4,['test'],"['test', 'tests']"
Testability,"According to origin/defrost on the Dashboard, error appeared between 4b1f2897 and a33b4b12.; There are some LightManager changes here, we are close ;); I update my ""summary"" post. EDIT: This range is where the test was created. **This test fails on Windows since its creation.**; Please @damienmarchal give this type of information (if you know it) when you create your issue so that no time is lost searching for error appearance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263275881:210,test,test,210,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263275881,2,['test'],['test']
Testability,According to the CI there is one test in Flexible that is failing in this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/243#issuecomment-311171428:33,test,test,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-311171428,1,['test'],['test']
Testability,According to the manual test i started here : ; https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.8_options-debug/105/consoleFull; It now succeed on all test on the clang_option_debug build. . So it should be ready !!!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/279#issuecomment-308079993:24,test,test,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-308079993,2,['test'],['test']
Testability,"Actually SOFA CI is already building a merge for PRs so I was wrong with my use case before. :sweat_smile: . Here is a corrected version of what could happen:; 1. Bob opens a SOFA PR that breaks SP3; -> the SOFA PR fails on SOFA CI; 2. Bob opens a SP3 PR to propose a fix to this future change in SOFA that will break SP3; -> the SP3 PR fails on SP3 CI (because it fixes something that is not broken yet); 3. Thanks to my work on ExternalProject, SOFA CI is able to test the SOFA PR with a custom version for SP3 (the version of the SP3 PR); -> the SOFA PR succeeds on SOFA CI; 4. SP3 PR is merged first (to ensure that SOFA/master always succeeds on SOFA CI); 5. **All the other SOFA PRs are now failing on SOFA CI** and must wait for Bob's SOFA PR to be merged; 6. SOFA PR is merged; 7. All the other SOFA PRs are fixed. The problematic point is the duration of step 5. ; How to make sure it is short? Is it a good idea to ask our devs to quickly merge 2 PRs from 2 projects? What about when it will be more complicated with 2, 3 or more external projects needing to be fixed?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2004#issuecomment-821193144:466,test,test,466,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2004#issuecomment-821193144,1,['test'],['test']
Testability,"Actually the different specialization for sofa::helper::vector<> look highly suspicious to me and we can for sure do better. ; (especially the ""unsigned int"" one that is used to defined the indices in topologies). In this PR https://github.com/sofa-framework/sofa/pull/271; I wrote small tests trying to show all the possible ""bad behavior"" to fix. . EDIT: It is a bit out of the scope of the Hugo's initial question but it is somehow connected.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/265#issuecomment-301476350:288,test,tests,288,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/265#issuecomment-301476350,1,['test'],['tests']
Testability,Actually this is not fixed. See https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.8_options-debug/520/testReport/,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/463#issuecomment-342433689:99,test,testReport,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/463#issuecomment-342433689,1,['test'],['testReport']
Testability,"After further investigations:; - running the python script from runSofa (instead from a py env), **works** (array is modified); - printing pointers shows that the pointer is changing when doing `self.MO.position.value = self.MO.rest_position.value + random_disp` when running from a py env, whereas not with runSofa; - using my c++ controller but in the python scene, works ( `root.addObject(""MyTestController"", name=""testcontroller"", MO=""@MO"")` ); - weirdest of all, if **adding** my c++ controller in the scene, along the python Controller one.... the python Controller then works 😵; ```; root.addObject(""MyTestController"", name=""testcontroller"", MO=""@MO""); root.addObject(Controller(root.MO)); ```. So my speculation is that the custom python Controller stuff has some memory/link/data problem, but I dont know what...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2761#issuecomment-1064092685:418,test,testcontroller,418,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2761#issuecomment-1064092685,2,['test'],['testcontroller']
Testability,"After some tests on a cantilever beam with a LDL solver and a scalar CSR matrix:. - `addKToMatrix` takes a large part of the time for low number of elements; - `addKToMatrix` takes less and less part of the time as the number of elements grows; - The time consuming operation (more than 90% of the time) in `addKToMatrix` is `r.matrix->add(i, j, v)`. In the test, `r.matrix` is of type `CompressedRowSparseMatrix<double>`, and I did not test a bloc-based matrix. ; - In `r.matrix->add`, `wbloc` is the time consuming function. My profiler did not tell me more information inside this function. I tried to pre-allocate `btemp` before all the `add` calls, but it does not help. I suspect the bad performances come from the algorithm itself which must find an element in sorted arrays at each `add` call.; - Since the bad performances come from `CompressedRowSparseMatrix<double>::add`, it would be interesting to parallelize the calls to `add`. However, I doubt `CompressedRowSparseMatrix` is thread-safe...; - My tests are in https://github.com/alxbilger/sofa/commit/41584bceaf5d5666c362cdfb28238318c750af9e. But I don't plan to merge it since it does not improve the performances",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2177#issuecomment-868309098:11,test,tests,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2177#issuecomment-868309098,4,['test'],"['test', 'tests']"
Testability,"After spending some (too much?) time on this topic, it seems that the fact that static_assert not being evaluated in uninstantiated functions of template classes is not consistent between compilers.; Neither could I find a way to trick the compiler to postpone the evaluation of the condition of the static_assert (for example replace (N==10) by (sizeof(T)==0||N==10) , of template tricks to force the compiler to wait for template instantiation before assertion evaluation. All this is also true for BOOST_STATIC_ASSERT (tried this with no chance, too). My opinion would be to simply remove the static_asserts, since in this context their behaviour is not specified by C++ references (and not consistent). We loose the benefit of the safeguard but are not subject to false-positive anymore. If anyone sees another solution...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/130#issuecomment-272476017:453,assert,assertion,453,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/130#issuecomment-272476017,1,['assert'],['assertion']
Testability,"Agreed. It's simpler.; To be clearer: plugin was equal to ""PSL"" and not ""PSL.dll"". In this case, we want to to load as a name, but the test based on std::equal crashes (in debug only).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376458776:135,test,test,135,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376458776,1,['test'],['test']
Testability,"Ah, you must be careful to not confuse image and CImgPlugin. Both of them are using CImg but they are using it separately.; The warning you are noticing comes from CImgPlugin (which warns if it does not find libjpeg and libtiff).; CImgPlugin_test tests if JPEG or TIFF have been enabled (if not, of course it does not test it). As for plugin image, I think it was developed mainly by people using imagemagick on Linux or mac (which is called automatically if CImg does not recognize the format I think).; On Windows, it is not really natural to have imagemagick into the PATH... Anyway, the solutions are:; - change lena.jpg by lena.bmp (it should not need any external library); - add imagemagick to the Windows CI; - add libjpeg/libtiff to the external libraries of Sofa (like libpng) and add libjpeg/libpng support to the image plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335476728:247,test,tests,247,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335476728,2,['test'],"['test', 'tests']"
Testability,"All tests not working are due to input mesh with an inconstant input mesh.; Like Quad without edges, or list of quads and edges only on border, etc... what should we do?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3368#issuecomment-2061113394:4,test,tests,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3368#issuecomment-2061113394,1,['test'],['tests']
Testability,Also: the test is the associated example.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/411#issuecomment-335815718:10,test,test,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411#issuecomment-335815718,1,['test'],['test']
Testability,"Alternatively, you could simply stick all your data inside a dedicated structure as follows:. ```c++; class Component : public Base {; ; struct data_type {; Data<int> test;; Data<double> test2;. data_type(Component* owner); : test(owner->initData(&test, int(0), ""test"", ""test doc"")),; test2(owner->initData(&test2, double(0.0), ""test2"", ""test2 doc"")) {; ; }; ; } data;. Component(); : data(this) {. }. Component(int foo); : data(this) {. }; ; }; ; ```; As an added bonus, you don't even have to use `d_` prefixing to remember which attribute is a Data ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/274#issuecomment-303142439:167,test,test,167,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/274#issuecomment-303142439,5,['test'],['test']
Testability,"Although I understand your wish not to break too much and do this transition form custom to stl containers, wouldn't it be more logical to make the Sofa Vec<N,T> inherit from stl fixed_array ? I don't know if this is desirable, but if it is ever done, wouldn't this pr be somehow reverted by his change ? What I mean is that, an RGBA value is still a vector of fixed size, so there is no problem regarding this inheritance that allows to do vector operations with it right ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4263#issuecomment-1790440999:128,log,logical,128,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4263#issuecomment-1790440999,1,['log'],['logical']
Testability,"Amazing, I have tested the branch and it compiles fine. Thank you for your prompt response. ; Please feel free to close the issue when #3727 is merged.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3726#issuecomment-1468384088:16,test,tested,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3726#issuecomment-1468384088,1,['test'],['tested']
Testability,An opportunity to add a unit test in SofaPython3 ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3464#issuecomment-1307353148:29,test,test,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3464#issuecomment-1307353148,1,['test'],['test']
Testability,And it pass tests at first time :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1689#issuecomment-753904506:12,test,tests,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1689#issuecomment-753904506,1,['test'],['tests']
Testability,"And when you see that, on the CI, for Windows, that the log size is going from 16MB to 1.6MB... you know it was useful 😙",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1682#issuecomment-751660556:56,log,log,56,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1682#issuecomment-751660556,1,['log'],['log']
Testability,Another benchmark: `examples/Demos/chainAll.scn`. With parallelism; ```; 1000 iterations done in 41.8915 s ( 23.8712 FPS).; ```. Without parallelism:; ```; 1000 iterations done in 91.9302 s ( 10.8778 FPS).; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3959#issuecomment-1599092992:8,benchmark,benchmark,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3959#issuecomment-1599092992,1,['benchmark'],['benchmark']
Testability,"Any idea why `SofaPython3/Bindings.Sofa.Tests` tests are failing?. The output:; ```text; Running unit-tests Bindings.Sofa.Tests; Calling: bash -c ""/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Bindings.Sofa.Tests --gtest_output=xml:unit-tests/Bindings.Sofa.Tests/report.xml 2>&1"". [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Registering a scene loader for [.py, .py3, .pyscn, .py3scn] files.; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [INFO] [SofaPython3] Intializing python; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/python3/site-packages' to sys.path; [INFO] [PluginManager] Loaded plugin: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/libSofaPython3.so; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)];",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:40,Test,Tests,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,7,"['Test', 'test']","['Tests', 'tests']"
Testability,Any idea why building acd79fe caused more than 20 new unit test failures?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/317#issuecomment-315742489:59,test,test,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/317#issuecomment-315742489,1,['test'],['test']
Testability,Any reason to have re-opened this ? I thought we all agreed that this PR would be discarded and closed as the initial behavior of having Sofa.Testing built for other plugins TU is OK and the problem with conda was fixed thanks to #447.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4459#issuecomment-1964698947:142,Test,Testing,142,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4459#issuecomment-1964698947,1,['Test'],['Testing']
Testability,Any update on your side @EulalieCoevoet?; Or could you just share a simple scene for us to test and reproduce the problem?; Thanks,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-810881801:91,test,test,91,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-810881801,1,['test'],['test']
Testability,Apparently a remaining test is failing : TetrahedronVolumeMappingTest/0.test_perTetra; Are you on it @epernod ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/243#issuecomment-334498519:23,test,test,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-334498519,1,['test'],['test']
Testability,Are more tests provided in InSimo's repo? I would like to make sure that you get the same results if you change specific parameters of the policy.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3515#issuecomment-1532704807:9,test,tests,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3515#issuecomment-1532704807,1,['test'],['tests']
Testability,"Are you dead, dear CI?; [ci-build][force-full-build][with-all-tests]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2766#issuecomment-1076518383:62,test,tests,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2766#issuecomment-1076518383,1,['test'],['tests']
Testability,Are you still writing tests for Topological operations @epernod ? ; What is the status of this issue ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/43#issuecomment-264822755:22,test,tests,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43#issuecomment-264822755,1,['test'],['tests']
Testability,Arf the scene directories are hard-coded... https://github.com/sofa-framework/ci/blob/5fdd611c1c6190c170e41b84a0e5cbe6b0f76e65/scripts/scene-tests.sh#L175,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1569622345:141,test,tests,141,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1569622345,1,['test'],['tests']
Testability,"As I was not ready to kill all the existing tests I solved the issue in a different way that I found simple. ; The idea is based on a small api that mimick the Python API and then to use it to re-implement the SceneCreator functionnality. This is in the STC4 branch. If you are curious it look like that:; ```cpp; #include<SceneCreator/SimpleAPI.h> . Node::SPtr root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; ```. I'm quite sure we should be able to make much nicer things with a proper eDSLinstead of mimicking the python API but I'm not sure I have time for that. My target was to remove all dependencies between Sofa & SceneCreator and this make the job.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331:44,test,tests,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331,1,['test'],['tests']
Testability,"As SofaPython(2) has been dropped from the official support, the unit test `UnitTests.SofaPython_test/PythonBinding/PythonBinding_tests.scene/2` wont be fixed. ; If interested, have a look at https://github.com/sofa-framework/SofaPython/blob/6e0abe2c00ceffa627f992cdab7b826b07021f46/Binding_Data.cpp#L714",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2354#issuecomment-927783665:70,test,test,70,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2354#issuecomment-927783665,1,['test'],['test']
Testability,"As asked I removed the Data in base. . Now here is my working plan regarding all that ordering all the feedback received: ; - PR0: was implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. This was done in this PR. - PR1: with the introduced system to replace the existing logging of error (this PR is risky and touch a lot of file) it should contains: ; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK). ; - removing all the uses of the old message buffers and replace them with the new one (API BREAK). ; - updating the gui to use the new msghandler buffers. - PR2: removing the printLog Data:; - backward compatibility solution must be implemented. ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages . - PR3: extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion. . Anyone interested in working on PR1, PR2 and PR3 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662:164,log,logging,164,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662,3,['log'],['logging']
Testability,As discussed with @fredroy QGLViewer is no longer maintained so the only way to know if this is a bug or not is to test it ourselves.; Feel free to reopen if you think this is a bug and have a way to reproduce it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2108#issuecomment-853669440:115,test,test,115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2108#issuecomment-853669440,1,['test'],['test']
Testability,"As far as I tested, it works :+1:; -> ready imho",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/927#issuecomment-467950328:12,test,tested,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/927#issuecomment-467950328,1,['test'],['tested']
Testability,As far as know this is useful (and we use it in python) to get kind of parent class of an object (eg: testing if an object is a FF or a constraint or whatever).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1085#issuecomment-503450931:102,test,testing,102,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1085#issuecomment-503450931,1,['test'],['testing']
Testability,As it change the behavior of a core component i prefer to validate on regression files. ; [ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1749#issuecomment-768962610:112,test,tests,112,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1749#issuecomment-768962610,2,['test'],['tests']
Testability,"As it involve removing/deleting things during test phase, would be good to wait for mac to be back and run all tests on the ci.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3942#issuecomment-1596790145:46,test,test,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3942#issuecomment-1596790145,2,['test'],"['test', 'tests']"
Testability,"As soon as this PR is merged, we should fix the newly failing tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-290017981:62,test,tests,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-290017981,1,['test'],['tests']
Testability,As suggested by @guparan this one is to merge when we will be sure that #457 will have fixed the tests.; It is still unclear to me.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/453#issuecomment-335028488:97,test,tests,97,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453#issuecomment-335028488,1,['test'],['tests']
Testability,"As suspected, the two missing unit tests were not yours. Two plugins were ignored in PR builds on Windows, implying 2 unit tests.; It's fixed :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/621#issuecomment-378910002:35,test,tests,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/621#issuecomment-378910002,2,['test'],['tests']
Testability,"As those tests does not inherit SofaTest anymore, I think this issue is kind of fixed.; Feel free to re-open if it is not actually the case",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1935#issuecomment-1499800081:9,test,tests,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1935#issuecomment-1499800081,1,['test'],['tests']
Testability,"As we just discussed, let's wait if #4471 is fine, in which case this PR should be closed and discarded: we would keep building Sofa.Testing component even if TU are not built (`SOFA_BUILD_TESTS=OFF`)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4459#issuecomment-1918659142:133,Test,Testing,133,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4459#issuecomment-1918659142,1,['Test'],['Testing']
Testability,"As you renamed the BilateralInteractionConstraint, you will need to recreate/regenerate regression tests associated too 🤫",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3053#issuecomment-1158735160:99,test,tests,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3053#issuecomment-1158735160,1,['test'],['tests']
Testability,"At last, this PR is ready. It fixes all FileMonitor tests on all platforms.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/267#issuecomment-303131249:52,test,tests,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/267#issuecomment-303131249,1,['test'],['tests']
Testability,Back for review ! [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1979#issuecomment-821121450:38,test,tests,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1979#issuecomment-821121450,1,['test'],['tests']
Testability,Back to wip until tested and typo fixed.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/649#issuecomment-389504611:18,test,tested,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/649#issuecomment-389504611,1,['test'],['tested']
Testability,BeamAdapter tests the regression for itself ; https://github.com/sofa-framework/BeamAdapter/blob/master/.github/workflows/ci.yml; but the way to do it is a bit rough indeed 😅,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4265#issuecomment-1786453403:12,test,tests,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4265#issuecomment-1786453403,1,['test'],['tests']
Testability,"Because defaultTestBehavior was supposed to fail three time and not one (this is not working with EXPECT_NONFATAL_FAILURE). The fact it actually fails only once has been changed later by changing the default behavior in BaseTest. The rational for this change was that for a transitional period of time it was decided to avoid warnings messages to generate a test failure so that the dashboard is less ""red"" and the tests was not refactor since this decision. ; ; EDIT: I didn't made EXPECT_ATLEAST_TWO_FAILURES...only ONE.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370804645:358,test,test,358,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370804645,2,['test'],"['test', 'tests']"
Testability,Before the changes:. ```; ------------------------------------------------------------------------------; Benchmark Time CPU Iterations; ------------------------------------------------------------------------------; BM_Matrix_typematf_matmult<3>/128 1.27 us 1.28 us 560000; BM_Matrix_typematf_matmult<3>/256 2.53 us 2.51 us 280000; BM_Matrix_typematf_matmult<3>/512 5.11 us 5.16 us 100000; BM_Matrix_eigenmatf_matmult<3>/128 0.923 us 0.900 us 746667; BM_Matrix_eigenmatf_matmult<3>/256 1.83 us 1.84 us 373333; BM_Matrix_eigenmatf_matmult<3>/512 3.67 us 3.68 us 186667; ```. After the changes:. ```; ------------------------------------------------------------------------------; Benchmark Time CPU Iterations; ------------------------------------------------------------------------------; BM_Matrix_typematf_matmult<3>/128 1.00 us 1.00 us 640000; BM_Matrix_typematf_matmult<3>/256 1.98 us 1.97 us 373333; BM_Matrix_typematf_matmult<3>/512 3.93 us 3.90 us 172308; BM_Matrix_eigenmatf_matmult<3>/128 1.00 us 1.00 us 746667; BM_Matrix_eigenmatf_matmult<3>/256 1.99 us 2.01 us 373333; BM_Matrix_eigenmatf_matmult<3>/512 3.99 us 4.01 us 179200; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1239272179:106,Benchmark,Benchmark,106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1239272179,2,['Benchmark'],['Benchmark']
Testability,"Benchmark on the provided example. # Matrix-free CG:. Sequential:; `[INFO] [BatchGUI] 1000 iterations done in 4.1899 s ( 238.669 FPS).`; `CG-Solve 3.21 ms` (mean). Parallel:; `[INFO] [BatchGUI] 1000 iterations done in 2.82476 s ( 354.012 FPS).`; `CG-Solve 1.85 ms` (mean). # Assembled CG; (CG with `template=""CompressedRowSparseMatrixMat3x3d""`. Sequential:; `[INFO] [BatchGUI] 1000 iterations done in 6.65858 s ( 150.182 FPS).`; `CG-setSystemMBKMatrix 2.34 ms` (mean). Parallel:; `[INFO] [BatchGUI] 1000 iterations done in 4.1272 s ( 242.295 FPS).`; `CG-setSystemMBKMatrix 4.94 ms` (mean)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3552#issuecomment-1359694003:0,Benchmark,Benchmark,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3552#issuecomment-1359694003,1,['Benchmark'],['Benchmark']
Testability,Build is OK now but there are still a bunch of failing tests.; [ci-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-330164053:55,test,tests,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-330164053,1,['test'],['tests']
Testability,But we want PSL.dll to be loaded as a path and not as a name.; I think we should replace the whole test by a simple `if (plugin.find(dotExt) != std::string::npos)`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376457490:99,test,test,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376457490,1,['test'],['test']
Testability,"CGAL is not available in CentOS official repos. On Ubuntu 18.04, a custom findCGAL.cmake is not necessary.; With a dumb project like; ```cmake; project(test); cmake_minimum_required(VERSION 3.6). find_package(CGAL REQUIRED). get_cmake_property(_variableNames VARIABLES); list (SORT _variableNames); foreach (_variableName ${_variableNames}); if(_variableName MATCHES ""^CGAL_""); message(""${_variableName} = ${${_variableName}}""); endif(); endforeach(); ```. I got this output:; ```bash; root@90bf513426c7:~/project/build# cmake ..; CGAL_3RD_PARTY_DEFINITIONS = ; CGAL_3RD_PARTY_INCLUDE_DIRS = /usr/include; CGAL_3RD_PARTY_LIBRARIES = ; CGAL_3RD_PARTY_LIBRARIES_DIRS = /usr/lib; CGAL_BUGFIX_VERSION = 0; CGAL_BUILD_SHARED_LIBS = TRUE; CGAL_BUILD_TYPE_INIT = Release; CGAL_BUILD_VERSION = 1000; CGAL_Boost_USE_STATIC_LIBS = OFF; CGAL_COMPONENT = ; CGAL_CONFIG = /usr/lib/x86_64-linux-gnu/cmake/CGAL/CGALConfig.cmake; CGAL_CONFIGURED_LIBRARIES = CGAL_Core;CGAL_ImageIO;CGAL_Qt5; CGAL_CONFIG_DIR = /usr/lib/x86_64-linux-gnu/cmake/CGAL; CGAL_CONFIG_LOADED = TRUE; CGAL_CONSIDERED_CONFIGS = /usr/lib/x86_64-linux-gnu/cmake/CGAL/CGALConfig.cmake; CGAL_CONSIDERED_VERSIONS = 4.11.1000; CGAL_CXX_FLAGS_DEBUG_INIT = -g; CGAL_CXX_FLAGS_INIT = -g -O2 -fdebug-prefix-map=/build/cgal-ZyilPF/cgal-4.11=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -frounding-math; CGAL_CXX_FLAGS_RELEASE_INIT = -O3 -DNDEBUG; CGAL_DIR = /usr/lib/x86_64-linux-gnu/cmake/CGAL; CGAL_DISABLE_GMP = ; CGAL_ENABLE_PRECONFIG = OFF; CGAL_ESSENTIAL_3RD_PARTY_LIBRARIES = GMP;MPFR;GMPXX; CGAL_EXT_LIB_Coin3D_PREFIX = COIN3D; CGAL_EXT_LIB_Eigen3_PREFIX = EIGEN3; CGAL_EXT_LIB_QGLViewer_PREFIX = QGLVIEWER; CGAL_EXT_LIB_Qt5_PREFIX = QT; CGAL_FOUND = 1; CGAL_GIT_SHA1 = ; CGAL_GRAPHICSVIEW_PACKAGE_DIR = /usr//include/CGAL/; CGAL_HEADER_ONLY = OFF; CGAL_INCLUDE_DIRS = /usr//include; CGAL_INSTALL_PREFIX = /usr/; CGAL_ImageIO_USE_ZLIB = ON; CGAL_LIB = CGAL; CGAL_LIBRARIES_DIR = /usr//lib/x86_64-linux",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611416421:152,test,test,152,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611416421,1,['test'],['test']
Testability,CI on CentOS not happy with CUDA and stopped on MacOS.; Let's restart it to check (Mac) with the tests!. [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1373#issuecomment-631274536:97,test,tests,97,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1373#issuecomment-631274536,2,['test'],['tests']
Testability,"CI seems not happy:; ```; Edge2QuadTopologicalMapping.cpp.obj; J:\0\src\modules\SofaTopologyMapping\src\SofaTopologyMapping\Edge2QuadTopologicalMapping.cpp(85): error C2146: syntax error: missing ')' before identifier 'and'; J:\0\src\modules\SofaTopologyMapping\src\SofaTopologyMapping\Edge2QuadTopologicalMapping.cpp(85): error C2065: 'and': undeclared identifier; ```. See [full log](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1861/CI_CONFIG=windows10_vs-2017,CI_PLUGINS=options,CI_TYPE=release/1/console) here",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1861#issuecomment-785683796:381,log,log,381,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1861#issuecomment-785683796,1,['log'],['log']
Testability,CI was missing disk space. I relaunch ;); [ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/760#issuecomment-424019836:64,test,tests,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/760#issuecomment-424019836,1,['test'],['tests']
Testability,CI/Tests seem fine 😙,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1453#issuecomment-694084492:3,Test,Tests,3,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1453#issuecomment-694084492,1,['Test'],['Tests']
Testability,Can't wait to test this today! Awesome idea!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1464#issuecomment-681500862:14,test,test,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1464#issuecomment-681500862,1,['test'],['test']
Testability,CentOS: 15 scenes time out; MacOS: 87 crashes (time out as well) .. Let's :. [ci-build][with-all-tests][force-full-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/218#issuecomment-680735938:97,test,tests,97,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-680735938,1,['test'],['tests']
Testability,"Checks show SUCCESS but tests are ignored. ; Your unit test crashes, check the logs: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/4259/console",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/72#issuecomment-266020393:24,test,tests,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/72#issuecomment-266020393,3,"['log', 'test']","['logs', 'test', 'tests']"
Testability,Ci is running : wait for the tests.; If successful --> ready,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1269#issuecomment-607109002:29,test,tests,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1269#issuecomment-607109002,1,['test'],['tests']
Testability,Compilation has been fixed with master and the regression test has been added.; Only the PR on regression must be merged and then reference in regression submodule udpated. Let's get it merged tomorrow.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-805278512:58,test,test,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-805278512,1,['test'],['test']
Testability,"Conflicts were solved, tests are OK, and it has been long enough this PR is opened;ready to merge",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3404#issuecomment-1311061497:23,test,tests,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3404#issuecomment-1311061497,1,['test'],['tests']
Testability,Congrats @Changjing-Liu Thanks a lot for your PR!!!. [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3164#issuecomment-1193704452:73,test,tests,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3164#issuecomment-1193704452,1,['test'],['tests']
Testability,Congratulation Bruno @bcarrez for the new log messages ! !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289696125:42,log,log,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289696125,1,['log'],['log']
Testability,"Could someone give me a hint on what is the problem... @guparan or @damienmarchal maybe .; Looking for ""error"" in the full log give me this:; `..\SofaKernel\framework\sofa\core\..\..\sofa/defaulttype/DataTypeInfo.h(757) : fatal error C1060: compiler is out of heap space; c1xx : fatal error C1063: INTERNAL COMPILER ERROR`. Not sure if this is really the error that breaks the compile and if it is related to my modifications or to the VM used for the build.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/164#issuecomment-284352946:123,log,log,123,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/164#issuecomment-284352946,1,['log'],['log']
Testability,Could someone test if the AdvancedTimer is still working correctly with the new nlohmann_json version?; @jnbrunet @fredroy @damienmarchal ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/719#issuecomment-405506066:14,test,test,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/719#issuecomment-405506066,1,['test'],['test']
Testability,Could someone test on windows / mac with an intel graphics? @guparan maybe?; I need to find out if I have to fix that as a cross-platform or linux-specific issue.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/238#issuecomment-346566462:14,test,test,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/238#issuecomment-346566462,1,['test'],['test']
Testability,Could you think about a pertinent unit test?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4875#issuecomment-2262415200:39,test,test,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4875#issuecomment-2262415200,1,['test'],['test']
Testability,Create Issue to rethink the way it is done: maybe centralize the regression-tests files in Regression plugin. This would require multiple changes like being able to find the path of all plugins to find the scenes and the regression files when they are inside of the plugin instead of Regression. . --> https://github.com/sofa-framework/sofa/issues/4424,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4420#issuecomment-1884536809:76,test,tests,76,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4420#issuecomment-1884536809,1,['test'],['tests']
Testability,Currently being tested : https://ci.inria.fr/sofa-ci-dev/job/sofa-custom/8615/,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4767#issuecomment-2151812116:16,test,tested,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4767#issuecomment-2151812116,1,['test'],['tested']
Testability,"Damned, it seems there's some test failing with BilateralInteractionConstraint_test/0.checkVec3ConstrainedPositions",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/459#issuecomment-365332892:30,test,test,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-365332892,1,['test'],['test']
Testability,"Damnit, I'm very sorry. I wanted to checkout this PR to test it out, but made a mistake with GH cli (which I'm trying for the first time). For the next dev meeting (since I cannot be there), if you guys agree with this PR, we can let it merged. Or I can make a revert PR. Very sorry again @alxbilger !. Edit: I will still try it on my side and report back if I see any issue !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2208#issuecomment-870762880:56,test,test,56,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2208#issuecomment-870762880,1,['test'],['test']
Testability,"Dashboard is showing good progress, only one scene crash on ubuntu & centos in an easy to fix issue.; Still one unknown test-failure on centos (but it may be a configuration problem related to LANG).; One test failure on windows is still because this machine does not have libjpeg/libtiff installed (or we need a full build ?). Three are test problem. The big dark spot is now the 26 remaining crashes ? Can someone with MacOS investigate the issues please ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357504599:120,test,test-failure,120,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357504599,3,['test'],"['test', 'test-failure']"
Testability,"Dashboard said no ^^; At first sight: ParallelFor.h:59:47: error: too many arguments provided to function-like macro invocation; assert(!(_last < _first), ""for range size() error"");",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/902#issuecomment-456080548:129,assert,assert,129,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/902#issuecomment-456080548,1,['assert'],['assert']
Testability,"Dear @faichele ,. Following the SOFA dev meeting 25/01/2017.; Multi-threading plugin proposed by @faichele. Your new plugin implements a static scheduling for collision detection. The implementation does not require any change of the existing collision components of SOFA. The bounding volume hierarchy methods is parallelized. It should be easy to use. Compared to the approach used in the MultiThreading plugin using the ""work-stealing"" scheduling pattern (https://en.wikipedia.org/wiki/Work_stealing), Fabian's implementation is based on ""conventional"" work-sharing, with a ""round-robin"" assignment of collision pair checks per thread. One extension is the fact that worker threads are persistent: they do not terminate after processing all assigned tasks, and no new threads are spawned when new collision pair check tasks are added to the thread pool. Instead, worker threads enter a ""sleeping"" state to avoid using CPU cycles when no tasks are processed. This avoids unnecessary respawning of threads every 10 to 50 ms, since the collision detection is typically called very often and in quick succession. @faichele , you mentioned it will be released under open-source license and with standalone for beta testing. Tests on potential performance gains remain to do (number of per checks).; Do not hesitate to correct me. In the context of the recent coding sprint, some new feature around multithreading were added in a branch ( https://github.com/sofa-framework/sofa/tree/issofa_multithreading ), not merged yet. This should be discussed and merged at the upcoming STC. @JeremieA , would you agree to prepare a short illustration/explanation of the API changes of your multithreading feature branch?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830:1213,test,testing,1213,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830,2,"['Test', 'test']","['Tests', 'testing']"
Testability,"Definitely @EulalieCoevoet , you can ignore it by adding a `.scene-tests` in the applications/plugins/ArticulatedSystemPlugin/examples/_ repository and define in it:. ```; ignore ""robotGUI.py""; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2804#issuecomment-1106242947:67,test,tests,67,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2804#issuecomment-1106242947,1,['test'],['tests']
Testability,"Definitively, @damienmarchal could you point out an example of component/class unit test well written. To have the best practice.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/701#issuecomment-400575865:84,test,test,84,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/701#issuecomment-400575865,1,['test'],['test']
Testability,"Dependencies packages were updated, we are testing it with standard builds.; And then we will launch new checks on this PR",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/185#issuecomment-289724146:43,test,testing,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-289724146,1,['test'],['testing']
Testability,"Did not have time to start this yet. 😢 ; As discussed last wednesday, the idea would be to simply `cat` the output of crashed tests during the `print-summary()` phases (for unit tests and scene tests). So only scripts stuff.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/191#issuecomment-283715155:126,test,tests,126,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/191#issuecomment-283715155,3,['test'],['tests']
Testability,Did you have some time to test my patch @epernod ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/958#issuecomment-476541612:26,test,test,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/958#issuecomment-476541612,1,['test'],['test']
Testability,Did you test a scene with a loader below (in the scene file order) a MechanicalObject or Topology ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2094#issuecomment-842953279:8,test,test,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2094#issuecomment-842953279,1,['test'],['test']
Testability,Do python tests work in similar way? Ok.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/400#issuecomment-330598775:10,test,tests,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/400#issuecomment-330598775,1,['test'],['tests']
Testability,Do someone knows why do tests are failing ? (In QuaterTest),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/399#issuecomment-343414028:24,test,tests,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-343414028,1,['test'],['tests']
Testability,"Do we want to create a new PR to fix some tests, or should we start fixing them directly in this PR?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288973746:42,test,tests,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288973746,1,['test'],['tests']
Testability,Does https://github.com/sofa-framework/sofa/pull/3832 fix the failing unit test?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3515#issuecomment-1532915092:75,test,test,75,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3515#issuecomment-1532915092,1,['test'],['test']
Testability,Does this test still fail? I have tested and cannot reproduce it. And I did not do anything to fix it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4323#issuecomment-1860172648:10,test,test,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4323#issuecomment-1860172648,2,['test'],"['test', 'tested']"
Testability,"Don't mind me, I'm testing CI stuff...; [ci-build][generate-binaries]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2740#issuecomment-1059287331:19,test,testing,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2740#issuecomment-1059287331,1,['test'],['testing']
Testability,Done and tested in #857,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/829#issuecomment-445824183:9,test,tested,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/829#issuecomment-445824183,1,['test'],['tested']
Testability,Done! [ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/540#issuecomment-357289750:28,test,tests,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/540#issuecomment-357289750,1,['test'],['tests']
Testability,"Done, let's [ci-build][with-all-tests] again :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1186#issuecomment-542682672:32,test,tests,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1186#issuecomment-542682672,1,['test'],['tests']
Testability,During the meeting it was considered as needed to have a scene test to validate the mis-behavior and the fix. @ScheiklP do you have something (otherwise @epernod will have to do one).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3268#issuecomment-1253437880:63,test,test,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3268#issuecomment-1253437880,1,['test'],['test']
Testability,"Error of one test involving topological change : TopologicalChangeProcessor_test.Incise; ```; [ RUN ] TopologicalChangeProcessor_test.Incise; [DEPRECATED] [Sofa_test] Sofa_test & BaseSofa_test are now deprecated classes. To fix this message you should replace their usage by BaseTest, NumericTest or BaseSimulationTest to implement your tests; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1150/mac_clang-3.5_options_release/src/modules/SofaMiscTopology/SofaMiscTopology_test/scenes/IncisionTrianglesProcess.scn; [WARNING] [DiagonalMass(default5)] Negative value of vertexMass vector: vertexMass[357] = -0.138459; [ERROR] [DiagonalMass(default5)] doUpdateInternal: incorrect update from vertexMass; ```. maybe nodes/elements which are removed twice ... @epernod",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1150#issuecomment-534008149:13,test,test,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1150#issuecomment-534008149,2,['test'],"['test', 'tests']"
Testability,Error on compilation: ; - (WIN) error C3861: 'not': identifier not found; - (MAC) unexpected crash of Compliant_test. [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/990#issuecomment-484005693:138,test,tests,138,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/990#issuecomment-484005693,1,['test'],['tests']
Testability,"Etienne, if the test succeeds on your PC please fix your branch so that the test succeeds on the dashboard also. Otherwise, this pull request could not be accepted.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/72#issuecomment-265968279:16,test,test,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/72#issuecomment-265968279,2,['test'],['test']
Testability,Everything seems OK; ```; ciosx:build ci$ time ./bin/MultiThreading_test; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaAllCommonComponents.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSceneCreator.dylib; [==========] Running 4 tests from 1 test case.; [----------] Global test environment set-up.; [----------] 4 tests from TaskSchedulerTests; [ RUN ] TaskSchedulerTests.FibonacciSingle; [ OK ] TaskSchedulerTests.FibonacciSingle (15 ms); [ RUN ] TaskSchedulerTests.FibonacciMulti; [ OK ] TaskSchedulerTests.FibonacciMulti (20 ms); [ RUN ] TaskSchedulerTests.IntSumSingle; [ OK ] TaskSchedulerTests.IntSumSingle (47 ms); [ RUN ] TaskSchedulerTests.IntSumMulti; [ OK ] TaskSchedulerTests.IntSumMulti (68 ms); [----------] 4 tests from TaskSchedulerTests (150 ms total). [----------] Global test environment tear-down; [==========] 4 tests from 1 test case ran. (150 ms total); [ PASSED ] 4 tests. real 0m3.061s; user 0m0.551s; sys 0m0.159s; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487:563,test,tests,563,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487,9,['test'],"['test', 'tests']"
Testability,FO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Components/Components.py ; ModuleNotFoundError: No module named 'Sofa.Components'. At:; Components.py(4): <module>; <frozen importlib._bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3014,test,tests,3014,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['tests']
Testability,FVM plugin should now be fixed . [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1965901959:53,test,tests,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1965901959,1,['test'],['tests']
Testability,FYI : no need to run the scene tests etc.; It works!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1185#issuecomment-541198303:31,test,tests,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1185#issuecomment-541198303,1,['test'],['tests']
Testability,"FYI guys another test was failing, it's fixed as well.; Close your eyes and believe me.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1386#issuecomment-631443254:17,test,test,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1386#issuecomment-631443254,1,['test'],['test']
Testability,"FYI, `SimpleCarving.py` is not exectuted by the CI (or more precisely, there is no mention of it in the logs)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3457#issuecomment-1707519816:104,log,logs,104,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3457#issuecomment-1707519816,1,['log'],['logs']
Testability,FYI: unit tests are OK; there are no scene tests or regression however.; ```; Plugin SoftRobots: built (found libSoftRobots.so libSoftRobots.so.1.0); Plugin SoftRobots: no examples/ nor scenes/ directories.; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1569299565:10,test,tests,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1569299565,2,['test'],['tests']
Testability,"Following our recent discussions, the ""find or fetch"" is replaced by a more classical find package strategy. The package management is fully left to the user. ; As some package managers were not providing cmake config files for tinyxml2 (at least APT), this PR also provides a cmake find module to look for a config file first, and if none found, look manually for the tinyxml2 library. ; Tested with:; - APT package libtinyxml2-dev (v9.0.0), no cmake config file provided; - conda package tinyxml2 (v9.0.0), cmake config file provided; - vcpkg package tinyxml2 (v9.0.0), cmake config file provided.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4240#issuecomment-1785355094:389,Test,Tested,389,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4240#issuecomment-1785355094,1,['Test'],['Tested']
Testability,"Following the discussion of STC#3, here is a short summary. The work of validation started.; If mainly focused on linear elasticity and corotational approach. It consists in both verification against analytical solutions and industrial softwares. . This work aims at:. - structure the selected forcefield and homogenize them; - consistency of functions,; - data structure; - and data naming; - use inheritance to decrease code complexity and improve readability : one class corresponds to one mechanical constitutive law; - define properly the mechanical tests assessing the mechanics; - defining validated components with associated tests (unit, functional and regression). Later we could consider heterogeneity and anisotropy.; Under the same workflow, the hyperelasiticity will be introduced.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/25#issuecomment-291186601:555,test,tests,555,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/25#issuecomment-291186601,2,['test'],['tests']
Testability,"Following the discussions of dev meeting, it is possible to add custom filters to Doxygen to parse initData as a member comment. Tested successfully on a simple example :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2613#issuecomment-1023300619:129,Test,Tested,129,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2613#issuecomment-1023300619,1,['Test'],['Tested']
Testability,"For me there is no more color, neither gtest's or sofa's. The `Fatal` messages should also be considered as failures by default.; Can you see why it is annoying to copy default behaviors to each test? Now we have to modify every of them rather than only a the default place...; If we let deprecated and warning messages on the side for now, but we want to activate them later, it is the same story.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292506026:195,test,test,195,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292506026,1,['test'],['test']
Testability,"For small scenes I found very convenient to write the scene directly in the test...; This allow to iterate on each variation of scene elements (PointLight, DirectionalLight, SpotLight) (or templates (Vec3d, Vec3f, Rigid)) with just a simple loop and string concat. . ```cpp; void mytestThatShouldExistsForAllLights(std::string& lighttype){; std::stringstream scene ;; scene << ""<?xml version='1.0'?> \n""; ""<Node 	name='Root' gravity='0 -9.81 0' time='0' animate='0' > \n""; "" <Node name='Level 1'> \n""; "" <MechanicalObject/> \n""; "" <""<< lighttype << "" name='light1'/> \n""; "" </Node> \n""; ""</Node> \n"" ;; Node::SPtr root = SceneLoaderXML::loadFromMemory (""testscene"",; scene.str().c_str(),; scene.str().size()) ;. ... the actual meat of the test....; }; ```; For complex scene I think that using a template langage could be an option ...but needs more work.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/43#issuecomment-265274667:76,test,test,76,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43#issuecomment-265274667,3,['test'],"['test', 'testscene']"
Testability,"For the future, the work on improving the SOFA API has to be done to ensure a good initialization / update of components.; A good test would be to run sequentially: `storeResetState()` and `reset()`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3123#issuecomment-1189978414:130,test,test,130,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3123#issuecomment-1189978414,1,['test'],['test']
Testability,"For the ignoring part,apparently you have to set the 2 ignore lines into examples/.scene-tests ( and not into examples/Benchmark/TopologicalChanges/.scene-tests )",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2161#issuecomment-866669649:89,test,tests,89,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2161#issuecomment-866669649,3,"['Benchmark', 'test']","['Benchmark', 'tests']"
Testability,For the record I just tested if I totally remove the conditionnal management... and nothing bad happens. @alxbilger Do you have any idea if bad things could happen (in term of building numerical system/solving/animation loop).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3954#issuecomment-1592523781:22,test,tested,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3954#issuecomment-1592523781,1,['test'],['tested']
Testability,Formatted spreadsheet of the benchmark result; [sparsematrixproductBenchmark.ods](https://github.com/sofa-framework/sofa/files/14458867/sparsematrixproductBenchmark.ods),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4547#issuecomment-1972798556:29,benchmark,benchmark,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4547#issuecomment-1972798556,1,['benchmark'],['benchmark']
Testability,"Found it, this is my fault (sorry):. - we have some mappings implemented in python in Compliant; - setting up the mapping uses scipy, which is not the expected version on some plateform (mostly osx for now), which triggers a python error; - the python code returns to c++ before having a chance to finish the test and keeps going on forever. I fixed the offending script, assuming it is the only one. I'll monitor the builds to see if there's more. I'll try to add some mechanism to detect uncaught python exceptions during test execution, and fail the script should this happen. With all my apologies for killing the CI engine :-/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289499063:309,test,test,309,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289499063,2,['test'],['test']
Testability,From my above remark we should make a test,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4848#issuecomment-2265444735:38,test,test,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4848#issuecomment-2265444735,1,['test'],['test']
Testability,"From what I understand, we have 2 different topics here. 1. cut dependencies to SofaTest, which I totally approve. This point reaches consensus I think. I don't see anything that can go against the merge of this PR in this topic. 2. split unit tests and functionnal tests; This is a different topic and should be discussed in a separate issue. Anyway my 2 cents about this:; - obviously this is a good idea. I cannot push forward enough this idea.; - just keep in mind that these unit-tests should remain FAST to run, since they will be run at each build. (ie. the filemonitor tests, for example, should be refactored to spend less than 10 seconds to run otherwise they will soon become a pain). To resume my point of view:; 1. merge this PR first; 2. communicate around the fact that tests should not rely on SofaTest anymore (when possible) ==> why not log a warning or ""deprecated"" message when using SofaTest utilities ?; 3. progressively cut unit tests from SofaTest, on-the-go. In parallel, open the ""always run unit-tests"" discussion on a separate topic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700:244,test,tests,244,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700,8,"['log', 'test']","['log', 'tests']"
Testability,"Further tests: if LTO is not enabled, then it does not crash as well, so the culprit would be something about the optimizer/vectorizer 🧐",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4180#issuecomment-1730804223:8,test,tests,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4180#issuecomment-1730804223,1,['test'],['tests']
Testability,GUI to be tested by some else (me?),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3027#issuecomment-1162867893:10,test,tested,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3027#issuecomment-1162867893,1,['test'],['tested']
Testability,Given the implement is highly questionnable (testing on string representation) I suggest to remove it and if some needs pop's up then propose a new implementation.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2694#issuecomment-1054572287:45,test,testing,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2694#issuecomment-1054572287,1,['test'],['testing']
Testability,Giving more info: it was not supported for Ubuntu2004 while I implemented this feature in BeamAdapter. https://github.com/sofa-framework/BeamAdapter/actions/runs/2880398323; (no more logs unfortunately),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3358#issuecomment-1275425441:183,log,logs,183,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3358#issuecomment-1275425441,1,['log'],['logs']
Testability,Good catch @bakpaul. I made a PR on your branch to also restore the corresponding unit tests. See https://github.com/mimesis-inria/sofa/pull/17,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2332#issuecomment-916019297:87,test,tests,87,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2332#issuecomment-916019297,1,['test'],['tests']
Testability,"Good for me! Setting to 'ready'. ; If you have the time, add unit tests for your changes. It could be in another PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2527#issuecomment-993262350:66,test,tests,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2527#issuecomment-993262350,1,['test'],['tests']
Testability,"Good news, the mstate is already a link:. https://github.com/sofa-framework/sofa/blob/07119acb36dad5526e6af1c8e25190be2b575b57/SofaKernel/modules/SofaCore/src/sofa/core/behavior/ForceField.h#L228. Hence, you could simply do something like this:; ```cpp; template<class T>; static bool canCreate(T*& obj, objectmodel::BaseContext* context, objectmodel::BaseObjectDescription* arg); {; // Get the mechanical state link path set in the scene by the user; std::string requested_mstate_path = arg->getAttribute( ""mstate"", """");; ; // Get the mechanical state from the path; const auto * mstate = dynamic_cast<MechanicalState<DataTypes>*>(; PathResolver::FindBaseFromPath(context, requested_mstate_path); );; ; // If a mechanical state path was specified but could not get resolved (ex. is not of the same datatype, or simply if the path isn't good); if (!requested_mstate_path.empty() && !mstate) {; if (!PathResolver::CheckPath<BaseState>(context, requested_mstate_path)) {; arg->logError(std::string(""Unresolved path to a mechanical state ('"") + requested_mstate_path + ""')."");; } else {; arg->logError(std::string(""The specified mechanical state ('"") + requested_mstate_path + ""') was found but its datatype is not "" + DataTypes::Name() + ""."");; }; return false;; }; ; // If no mechanical state specified, try to find one in the current context node; if (!mstate) {; mstate = dynamic_cast<MechanicalState<DataTypes>*>(context->getMechanicalState());; }; ; if (!mstate) {; arg->logError(std::string(""No mechanical state with the datatype '"") + DataTypes::Name() + ""' found in the current context node."");; return false;; }. arg->setAttribute(mstate->getPathName());; return BaseObject::canCreate(obj, context, arg);; }; ```. Maybe @damienmarchal could validate if the usage of the `PathResolver` is correct here, I didn't find any documentation on these methods ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621:975,log,logError,975,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621,3,['log'],['logError']
Testability,"Good to me, tests are always welcome :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/268#issuecomment-302633096:12,test,tests,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/268#issuecomment-302633096,1,['test'],['tests']
Testability,Good to me.; Just a small note that in a future PR it would be better to test if the componentState is Valid before drawing.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1480#issuecomment-693275647:73,test,test,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1480#issuecomment-693275647,1,['test'],['test']
Testability,Great thank you :+1: ; [ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376551497:45,test,tests,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376551497,1,['test'],['tests']
Testability,Great...shouldn't the test scene become a test to detect future regression ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/406#issuecomment-329785483:22,test,test,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/406#issuecomment-329785483,2,['test'],['test']
Testability,"H_PCH_ENABLED is OFF or CMake < 3.16).; Install prefix: /home/giang/sofa/build/install; Adding library Sofa.Config; Using legacy headers is enabled.; Headers from v21.12 are usable, but it is advised to change your code to use the new headers introduced in v22.06.; Adding library Sofa.Compat; Adding library Sofa.Component.Compat; Adding library Sofa.Type; Adding library Sofa.Geometry; Adding library Sofa.Topology; Adding library Sofa.Helper; Found Eigen3: /usr/include/eigen3 (Required is at least version ""2.91.0"") ; Found Json: /home/giang/sofa/src/extlibs/json (Required is at least version ""3.1.2"") ; Found STB: /home/giang/sofa/src/extlibs/stb ; Found DIFFLIB: /home/giang/sofa/src/extlibs/difflib ; Adding library Sofa.LinearAlgebra; Adding library Sofa.DefaultType; Adding library Sofa.Core; Adding library Sofa.Simulation; Adding library Sofa.Simulation.Core; Adding library Sofa.Simulation.Common; Adding library Sofa.Simulation.Graph; Adding library Sofa.Testing; Found PythonInterp: /usr/bin/python (found version ""3.8.10"") ; Looking for pthread.h; Looking for pthread.h - found; Performing Test CMAKE_HAVE_LIBC_PTHREAD; Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed; Check if compiler accepts -pthread; Check if compiler accepts -pthread - yes; Found Threads: TRUE ; Adding library Sofa.Framework; Adding module Sofa.Component; Adding module Sofa.Component.ODESolver; Adding module Sofa.Component.ODESolver.Forward; Adding module Sofa.Component.ODESolver.Backward; Adding module Sofa.Component.IO; Adding module Sofa.Component.IO.Mesh; Found ZLIB: /usr/lib/x86_64-linux-gnu/libz.so (found version ""1.2.11"") ; Adding module Sofa.Component.Playback; Adding module Sofa.Component.SceneUtility; Adding module Sofa.Component.Topology; Adding module Sofa.Component.Topology.Container; Adding module Sofa.Component.Topology.Container.Constant; Adding module Sofa.Component.Topology.Container.Dynamic; Adding module Sofa.Component.Topology.Container.Grid; Adding module Sofa.Component.Topol",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:1830,Test,Testing,1830,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815,1,['Test'],['Testing']
Testability,Haha no surprise tests didn't worked :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3278#issuecomment-1238968104:17,test,tests,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3278#issuecomment-1238968104,1,['test'],['tests']
Testability,Have you tested it with different versions of gmsh format @Younesssss?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3030#issuecomment-1151544065:9,test,tested,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3030#issuecomment-1151544065,1,['test'],['tested']
Testability,"Hello ! ; I've read your PR and I am currently compiling it on my side to test the GUI and the Modeler. . Some changes will need to be performed in order to accept your PR : ; 1. You have added some commented code that need to be removed. ; 2. You have expended the namespaces of some files, which is not in accordance with our standard, it is certainly your IDE. But could you please revert those changes ? ; 3. You have set default value to attributes directly in the class declaration, this should be done only in the constructor. ; 4. You have made some breaking changes: for instance, you removed the call to the superinit of ConfigurationSetting. Do you have any justification for that ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2097577135:74,test,test,74,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2097577135,1,['test'],['test']
Testability,"Hello @ChristianDuriez,. I've been discussing the sparse matrix issue with @matthieu-nesme for some time now. Here are some thoughts on the subject. The biggest issue with sparse matrices is that there is no silver bullet representation that covers everyone's needs: some people like it compressed (row/column), others like to have small dense chunks instead of single floating points, and so on. In particular, I see two major orthogonal uses of sparse matrices:; 1. getting matrix data out of components; 2. working with sparse matrices (linear algebra, factorization, assembly). It is not at all obvious that the two operations should use the same representation, and in fact I would argue against it. For instance in the Compliant plugin, we use Eigen sparse matrices for everything, and end up doing a lot of work in order to shift matrix blocks around which is tedious and costly. I've been toying around with alternate designs, and the simplest I found so far is to use a plain old vector of triplets (row, column, value) for fetching matrix data. More precisely, mappings/forcefields directly `push_back` matrix data into a `std::vector<Eigen::Triplet<SReal> >` through a `std::back_insert_iterator`. With this design the caller is then responsible for structuring the sparse data further (sorting/converting to CSR, shifting rows/columns, handing over to another library, etc) Of course this approach is tailored for our needs and might not fit others, and performance-wise it needs thorough benchmarking anyways, but I think that using separate data structures for *getting the data* and *working with the data* instead of a single structure is the way to go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716:1501,benchmark,benchmarking,1501,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716,1,['benchmark'],['benchmarking']
Testability,"Hello @alxbilger, @fredroy, @hugtalbot . Here is a quick test around the idea we discussed during the today's sofa dev meeting: https://godbolt.org/z/9f1z4nbfq",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1232800715:57,test,test,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1232800715,1,['test'],['test']
Testability,"Hello @damienmarchal . I tried to execute tests manually using python. And I got import errors like:; _Traceback (most recent call last):; File ""test_mass.py"", line 8, in <module>; from SofaTest.Macro import *; ImportError: No module named SofaTest.Macro_; or; _Traceback (most recent call last):; File ""test_MeshLoader.py"", line 1, in <module>; import SofaPython.MeshLoader; ImportError: No module named SofaPython.MeshLoader_. It seems I should attach some additional modules (plugins), but I don't know what exactly I should do.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/400#issuecomment-329773331:42,test,tests,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/400#issuecomment-329773331,1,['test'],['tests']
Testability,"Hello @hugtalbot,. Actually I'm not really in favor of merging this PR and view it as a compiling (and regression test) draft that I wanted to share so we can discuss. . Before discussing about having a naming convention to me the real question is to ask ask ourself if we want to have all the forward declarations in a single file on a per sofa module basis or not :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1509#issuecomment-706166486:114,test,test,114,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1509#issuecomment-706166486,1,['test'],['test']
Testability,"Hello Bruno,. Thanks for the work done, I fully agree that this is needed. . I don't understand the need for MODULE_SOFASPARSESOLVER. This is a module/plugin so is the classic find_package(SofaSparseSolver) then (SofaSparseSolver_FOUND) not enough ?; It should be the same with SofaPython. Its availability should be tested with find_package(SofaPython). . Now about the other defines that are not related to module or plugin, it is of course important to export them properly in the SofaFramework package.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/927#issuecomment-462713812:317,test,tested,317,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/927#issuecomment-462713812,1,['test'],['tested']
Testability,"Hello Erik,. I don't know there is no so much places where I consider the tests well written :); I like the following:; - vector_test.cpp and Utils_test.cpp are interesting because they use the INSTANTIATE feature of gtest; - SimpleApi_test.cpp is interesting especially the ""SimpleApi_test::testParamString"" as it use the c++ api equivalent to the python one to create dynamic scenes. ; - BaseContext_test is also interesting because it inherit the test from BaseSimulationData",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/701#issuecomment-400579740:74,test,tests,74,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/701#issuecomment-400579740,3,['test'],"['test', 'testParamString', 'tests']"
Testability,"Hello Eulalie,. - `isRequired()` should be true by default [OK]; - `hasDefaultValue()` should be true by default as well [OK]; - `setRequired(false)` should also change things so that `hasDefaultValue()` returns false ; To me this is independant; - current `setRequired(true)` should be replaced by `setHasDefaultValue(false)` or something like that... ; Same here, the two things are separated I don't see why we should couple them. . - in BaseObject::init() print a warning/error message...; I was more thinking for `if (data->isRequired() && !(data->hasDefaultValue() || data->isSet()) )`; So the message prints if the field is required (i.e not optional) and there is neither a default value nor a user provided data. . - finally update the GUI to handle `hasDefaultValue()` and display an empty field if it returns false; actually in my tests I tried with a ""light gray text"" showing something like: ""<optional, type to set>""; ; I think one PR could be done to implement the described behavior in Data.h including tests for then ; then a second one update the runSofa widgets so they can take profit of that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767133475:842,test,tests,842,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-767133475,2,['test'],['tests']
Testability,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:171,test,tests,171,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552,12,['test'],"['test', 'tests']"
Testability,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:271,test,test,271,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814,5,['test'],"['test', 'tests']"
Testability,"Hello Guillaume,. As you are in this kind of things...the solution to handle scenes that rely on plugins and that should be started only if the required plugin is there should be to generate the .test-scene file with the adequate ignore command from CMake. I can give it a try or, as you are fluent in Cmake you can do it :).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/575#issuecomment-360443780:196,test,test-scene,196,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/575#issuecomment-360443780,1,['test'],['test-scene']
Testability,"Hello Guillaume,. I'have mixed feeling. On one side I would like the sprint branch to be merged asap so that we can all start from this baseline and continue deprecating/pluginizing (I know bruno is waiting, as is the pluginization done during the STC) but, on the other side I dislike to merge things that fails. . Currently the base branch have several tests failing and I fixed all of them in #457. I'm not sure all of them are easy to cherry-pick so I would recommend to merge this one and immediately after merge the #457 so that master is not in a broken state for a long time. . Actually in #457 only one test remains to be fixed, the ""VariationalXXX"". This one was not in the base branch but appeared during the sprint. I have no idea what is wrong so if this speak to you @hugtalbot , @StephaneCotin, @ChristianDuriez please help. . So my opinion is that we should accept the risk of merging #453 and #457 in a row so that we can restart working from a shared code base and continue our work and deals with the breaking/regression introduced. ; It also have advantages as more people will try this branch we will have more feedback on the deprecation process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963:355,test,tests,355,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963,2,['test'],"['test', 'tests']"
Testability,"Hello Hugo,. I disagree about your suggestion as this PR is not about binding GeometryAlgorithm's like object. . GeometryAlgorithm is inheriting from BaseObject. To use it you need the full Scene Graph and plenty of dependency to Base/BaseObject/Data/Link/SceneGraph/..... The underlying idea is to use them in ""your scene"" as part of your scene/simulation. But if you 'just' want to test intersection between ray/plane using GeometryAlgorithmes imply a lot of boilerplate code to manage the ""scene graph"" and baseobject management. . In this PR the target is not to expose GeometryAlgorithm in python, it is more to have a low-level API that propose geometrical object (c++ object, not BaseObject) and their associated operations as well as the corresponding binding to python. The key target of that this API is to be usable with as few as possible boilerplate code and without any scene graph/base/baseobject's folks. . So the SofaGeometry module proposed in this PR can be seen as 'one' level lower in the software stack that GeometryAlgorithm. The interest of this module is that it can be used as-is (API style), in C++ or in python. Of course it is possible to go one step further (in that case I suggest to do that in a different module and in a different PR) where the c++ object implemented in SofaGeometry are exposed in the SceneGraph by inhering from BaseObject. . Hope it is more clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498:384,test,test,384,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498,1,['test'],['test']
Testability,"Hello Hugo,. Thank for the PR. . There is currently no test at all to this component. ; It would be nice to add some before doing changes and validate the changes behavior.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/714#issuecomment-405875637:55,test,test,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/714#issuecomment-405875637,1,['test'],['test']
Testability,"Hello Maxime,. Thanks for the precise analysis that is really helpful as well as on tracking the 'hidden overheads' in sofa. . All that sound reasonable to me and I share your view that the cost hit of creating object in case of collision is a strong point for doing something. . Maybe people interested in this topic could experiment in a dedicated branch so that we have an alternative implementation as well as a real test benchmark illustrating the speedup (eg: an hardcoded component creating a huge amount of collisions). . Regards, ; DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255351195:421,test,test,421,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255351195,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"Hello all, . I've added some modifications on this PR. . First I've created a new *Python* script in PythonSofa to make the use of the *AdvancedTimer* easier. Now, if you want to use it in a *Python scene*, the easiest way to do it is to use the script with the method *measureAnimationTime*. You will have to add this line: . ```py; from SofaPython import PythonAdvancedTimer; ```. at the beginning of your script. Then you have to add the method *bwdInitGraph(self, node)* method at least as the following:. ```py; def bwdInitGraph(self, node):; # It will call the simulationStep method too; PythonAdvancedTimer.measureAnimationTime(node, ""timerPoutre"", ; 2, ""ljson"", ""poutre_grid_sofa_timerLog"", 0.1, 1000); return 0; ```. If you already have defined a bwdInitGraph, you juste have to add the *measureAnimationTime()* method to get your scene analyzed. To use it by your own way, you can take a look at the *PythonAdvancedTimer.py* script. You'll find it in the *Sofa project* at *SofaPython/python/SofaPython/PythonAdvancedTimer.py*. Second, I've added two scripts to use the returned *light JSON* files of the *AdvancedTimer* : *TimerLJSONPlot.py* and *timerLjsonManyFilesPlot.py*. I've also added the documentation to informe future users how to use the *AdvancedTimer* and the plotting scripts. The tests will come soon. Thank you for your feedback @damienmarchal .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-324669680:1306,test,tests,1306,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-324669680,1,['test'],['tests']
Testability,"Hello, . On that PR I recommand that some voluntary people, not involved in the refactoring, to add some additionals tests to see if their understanding match what is implementation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/718#issuecomment-411334181:117,test,tests,117,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/718#issuecomment-411334181,1,['test'],['tests']
Testability,"Hello, Maxime,. Thanks a lot for the report. Appart from the unconventional way to test strings on my side I fully support the idea of removing the group by prefix feature for two reasons: the first one is that I prefer explicit things vs implicit one. . PS: you don't need to argue :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/528#issuecomment-347117728:83,test,test,83,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-347117728,1,['test'],['test']
Testability,"Hello,. A simple [blame](https://github.com/sofa-framework/sofa/blame/25f245b2383a86f097cabdea13697aa42665568e/modules/SofaConstraint/BilateralInteractionConstraint.cpp) shows the 2 commits where these values where last set:; https://github.com/sofa-framework/sofa/commit/bb99399cba47a95301025531577c2e3ac3f728ab; https://github.com/sofa-framework/sofa/commit/8b294f75884a0216ce26f5457b8689da57dd081a. They were done for a PhD work, tuning for specific cases but without giving real reasons in the log. So this is not something that was really meant to be preserved like that, indeed it does not make sense that the value is much higher for double that floats. But the actual refactoring that is needed is to expose this tolerance as a Data instead of hiding it within the code itself, so that it can be tuning within the simulations that require it instead of requiring a patch within Sofa. Ideally the value in the Data should preserve the current behaviour in order not to break existing scenes, possibly with the isRequired flag set such that others will know that they should set the value specifically instead of relying on the previously hidden and inconsistent default. Jeremie.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683:498,log,log,498,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683,1,['log'],['log']
Testability,"Hello,. Could you post the logs of the build with VS2022 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4246#issuecomment-1774466757:27,log,logs,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4246#issuecomment-1774466757,1,['log'],['logs']
Testability,"Hello,. Here are a few remarks and suggestions regarding this topic:. 1. I would be wary about relying on performance measurements from a blog post that is 8 years old and does not mention the exact platform and compilers used. Thread Local Storage (TLS) is highly dependent on OS, ABI, compiler, flags. Here is for instance a quick test using compiler explorer: https://godbolt.org/z/6ObfHR.; 2. one usage requiring ExecParams to have a thread-local storage was to be able to do asynchronous loops (mainly simulation and rendering) with full access to the scene graph without copies, by using copy-on-write for large Data and having each thread be assigned a ""version"" (called ""aspect"" per the published work that was used). See the MultithreadGUI for an example of this mechanism.; 3. As far as I know, all asynchronous/external rendering engines integrations that are used with Sofa relied instead on a design where the Sofa scene graph is not exposed but only visual meshes (based on SofaPhysicsAPI), therefore this feature was never enabled/tested in real applications so it can make sense to remove it.; 4. It would be interesting to measure if there are any performance gained from just removing the TLS qualifier (as done in PR #1129). I expect it to not be measurable, but performances can be surprising, which is why any optimization efforts should measure before and after ;); 5. If the TLS part of ExecParams is removed, then you should also remove everything that depends on it: MultithreadGUI, ExecParams::threadID, aspectID, AspectPool, *AspectVisitor, DDGNode::currentAspect()/copyAspect()/..., and all the aspect-related features in Data and Link. Otherwise all these code will be silently broken by the change.; 6. Note that this also makes ExecParams itself a bit pointless. The initial rational was that this provides a thread-safe way to set parameters controlling all codes in such a way that even if it is not explicitly passed in to all API calls, it can be queried with ExecPa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748:333,test,test,333,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1147#issuecomment-532775748,2,['test'],"['test', 'tested']"
Testability,"Hello,. Thanks for the PR. I fully agree on generalizing more the 'delegate' pattern and this is a proper usecase. . - About the use of final (on the public api) and private (on the delegated part): both are the way to go. . - About testing privates methods:; In tests, shouldn't we prefer implementing tests using the generic interface, so by calling BaseForceField::addKToMatrix() on instance of BeamFEMForceField instead of writing tests for the specific BeamFEMFOrceFIeld::doAddKToMatrix(). I see a lot of added values of writing tests using the public API while testing private method of a delegated patterns are not obvious to me but. ; That's said if BeamFEMForceFIeld::doAddKToMatrix() is private and final, we can probably make it ""testable"" by having a friend class Test<BeamFEMForceField>; . In the code base we are making the use of this pattern obvious by using a specific naming scheme (XXXX -> doXXX). ; The intention what to make visually clear what part was part of the public API and what part was using the ""delegate"" pattern. ; As in: ; ```cpp; BaseData::beginEditVoidPtr() ; Data<T>::doBeginEditVoidPtr() ; ```. I think it would be worth to stick to the scheme for the following reasons: ; - it de-ambiguate the purpose of each of the function. With addKToMatrix(blabla) and addKToMapping(otherblabla) nothing indicates, at first glance, that the two are in fact not equivalent, and ones has to refer to code comment or documentation (if any) to get that a very specific design pattern is involved. Having addKToMatrix(blablag) and doAddKToMapping(otherblablab) makes it in the contrary cristal clear).; - using the ""do"" prefix also have the advantage that to the pattern is possible when the method's attributes are the same (In the PR using the same names works because the de-ambiguation is implicitly done through the different BaseMatrix and MechanicalParams). ; - more consistant codebase . Of course, this means renaming the the addKToMatrix but in that matter, earlier is ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920:233,test,testing,233,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920,8,"['Test', 'test']","['Test', 'testable', 'testing', 'tests']"
Testability,"Hello,; would it be possible to provide a simple test?; It seems there is no unit/scene/regression tests which are using Multi2Mapping and its `input2` apparently.; And by just looking at the code, I cannot see why `input2` would be impacted by #3665 as there is no `validator` for input2 😅; It would be much easier to track down the bug, thanks !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3705#issuecomment-1457371112:49,test,test,49,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3705#issuecomment-1457371112,2,['test'],"['test', 'tests']"
Testability,"Hello. > Hi @sergeiNikolaev; > thank you for sharing your zip test. I think we will be able to work it out from here.; > TODO for me:; > ; > * Need a test in c++ for checking new functionality, to be implemented from py example.; > * Add an example in SOFA. My question is what test it is possible to write for Polynomial springs?; Personally me, I verified them by generating some data using the scene from .zip and then compare it visually with the polynomial result. But, I am not sure it is possible to perform the same stuff as a functional test.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-624616296:62,test,test,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-624616296,4,['test'],['test']
Testability,"Here are binaries of this PR to test:; [Linux binaries](https://ci.inria.fr/sofa-ci-dev/job/sofa-custom/547/CI_CONFIG=ubuntu_gcc-7,CI_TYPE=release/artifact/build/SOFA_v20.06.99_Linux.zip); [Windows binaries](https://ci.inria.fr/sofa-ci-dev/job/sofa-custom/547/CI_CONFIG=windows10_vs-2017,CI_TYPE=release/artifact/build/SOFA_v20.06.99_Win64.zip)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1570#issuecomment-718797548:32,test,test,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1570#issuecomment-718797548,1,['test'],['test']
Testability,"Here is a quick summary of NG project evolution. A proof of concept for a minimal version of SOFA has been pushed: https://github.com/sofa-framework/sofa-minimal-poc. Multiple iterations were made on NG architecture: ; https://annuel2.framapad.org/p/sofang-v0; https://annuel2.framapad.org/p/sofang-v1; https://annuel2.framapad.org/p/sofang-v2; https://annuel2.framapad.org/p/sofang-v3. We converged towards a namespace oriented architecture splitted in two main parts: modules and plugins.; At the end, we want modules and plugins to be strictly identical in the way they are built. Same CMake behavior, same dependency handling. ; The only difference that make us separate the two is the way we see their proximity with SOFA core in a long term future.; modules = things that should stay in SOFA repository; plugins = things that should move to an external repository. Most of the work done has been offline testing and discussions on [Gitter](https://gitter.im/sofa-framework/sofa-ng). Different refactors and different CMake behaviors were tested, trying very hard not to break SOFA (or at least not too much). @damienmarchal wrote a tool to automatize refactoring (moved to a separated repo): https://github.com/guparan/sofa2ng; It is still in early state but will be the base of future works. Despite all this offline testing phase, the question of a clean and generic CMakeLists template for any module/plugin remains. I guess we will converge on this by actually doing the refactoring. Finally, I just opened a primary pull-request: https://github.com/sofa-framework/sofa/pull/620. Next steps will mainly focus on cleaning SOFA codebase to make further refactoring as easy as possible. See [previous comment](https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690) for specific tasks.; In parallel, Damien's tool shall be tested and improved to move on about the CMake questions.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598:910,test,testing,910,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598,4,['test'],"['tested', 'testing']"
Testability,"Here is my error : ; ```bash; /data/Softwares/sofa/src/master/Sofa/Component/SolidMechanics/FEM/HyperElastic/tests/Material_test.cpp; /data/Softwares/sofa/src/master/Sofa/Component/SolidMechanics/FEM/HyperElastic/tests/Material_test.cpp:56:18: error: too few template arguments for class template 'Matrix'; const Eigen::Matrix<Real, 3>& eigenvalues = eigensolver.eigenvalues();; ^; /usr/include/eigen3/Eigen/src/Core/Matrix.h:178:7: note: template is declared here; class Matrix; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4724#issuecomment-2110844690:109,test,tests,109,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4724#issuecomment-2110844690,2,['test'],['tests']
Testability,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:138,Test,Test,138,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435,14,"['Test', 'test']","['Test', 'TestPlugin', 'test']"
Testability,"Here is what I tested:. - The scene that @hugtalbot provided: using the mouse does not impact the movement or the deformation. However, setting `useOdeSolverIntegrationFactors` in `UncoupledConstraintCorrection` to false seems to work.; - In the caduceus scene, `useOdeSolverIntegrationFactors` is already set to false. I also observe that I can pull only to the right direction.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2486#issuecomment-1180610000:15,test,tested,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2486#issuecomment-1180610000,1,['test'],['tested']
Testability,"Here we go, let's try to [ci-build][with-scene-tests]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/586#issuecomment-365607713:47,test,tests,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/586#issuecomment-365607713,1,['test'],['tests']
Testability,"Here's a small test class that displays the different features I implemented in that ImplicitDataEngine mother class of mine:. ```; struct TestEngine : public ImplicitDataEngine; {; SOFAOR_CALLBACK_SYSTEM(TestEngine); // Required to setup the callback mechanism. public:; sofa::Data<int> d_a;; sofa::Data<int> d_b;; sofa::Data<int> d_c;; sofa::Data<int> d_a_out;; sofa::Data<int> d_b_out;. SOFA_CLASS(TestEngine, ImplicitDataEngine);. TestEngine(); : d_a(initData(&d_a, 0, ""a"", ""An input with a callback method"")),; d_b(initData(&d_b, 0, ""b"", ""An input without callback methods"")),; d_c(initData(&d_c, 0, ""c"", ""A simple data field with a callback"")); d_d(initData(&d_d, 0, ""d"", ""A simple data field without callback"")); {; d_a_out.setName(""a_out""); // the processed output of a; d_b_out.setName(""a_out""); // the processed output of b; }. void init(); {; SOFAOR_ADD_INPUT_CALLBACK(&d_a, &TestEngine::increment, false);; addInput(&d_a);; addInput(&d_b);; SOFAOR_ADD_CALLBACK(&d_c);. addOutput(&d_a_out);; addOutput(&d_b_out);; addOutput(&d_c_out);; }. void update(); {; // do something that's generic for any of the data fields. Called AFTER the data callbacks; }. private:; void increment(sofa::core::objectmodel::BaseData* data); {; d_a.setValue(d_a.getValue() + 1);; }; void decrement(sofa::core::objectmodel::BaseData* data); {; d_b.setValue(d_b.getValue() - 1);; }; };; ```. And here's what happens in the base class:. - The SOFAOR_CALLBACK_SYSTEM is a macro that creates a callback functor:; ```; class CallbackFunctor; {; public:; virtual void call(sofa::core::objectmodel::BaseData* o) = 0;; };. #define SOFAOR_CALLBACK_SYSTEM(T) \; typedef T SOFAOR_CLASS; \; class Callback : public sofaor::common::CallbackFunctor \; { \; typedef void (SOFAOR_CLASS::*Func)(sofa::core::objectmodel::BaseData * o); \; \; SOFAOR_CLASS* m_obj; \; Func m_func; \; \; public: \; Callback(SOFAOR_CLASS* _this, Func f) : m_obj(_this), m_func(f) {} \; void call(sofa::core::objectmodel::BaseData* data = 0) \; { \; (m_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:15,test,test,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816,6,"['Test', 'test']","['TestEngine', 'test']"
Testability,"HexahedronForceFieldTopologyChangeHandling.scn has been fixed in #1573 ; and testOmniDriverEmu.scn fixed in .... PR ? Can't find where, feel free to fill this up if somebody know. Closing the issue itself",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1461#issuecomment-774170003:77,test,testOmniDriverEmu,77,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1461#issuecomment-774170003,1,['test'],['testOmniDriverEmu']
Testability,"Hey @alxbilger , thanks for this benchmark. My guest would be that solving one big system (the merge of both objects) is slower than solving to smaller system. However, solving two system independently should, I think, produce incorrect results as . 1. You are applying the interactions (for example, contact forces) at different solving states. For example, the first object is solved, its node positions are updated to the step t+1. Collisions are then computed. But the state of the second object is still at the time step t. Oscillation will therefore probably happen and the convergence will be delayed. ; 2. In addition, the solution state with both objects merged under the same system takes into account the interaction between the two objects. For example, when both objects are merged into a same system, you can create entries inside the system matrix to create a relationship between a node in the first object and a node in the second object. This is not possible when the two objects are separated. **TLDR**: Solving two objects independently is faster than solving one big system containing both objects. However it will take longer to converge to a steady solution (in number of steps), and even probably converge to an incorrect solution.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2089#issuecomment-842947771:33,benchmark,benchmark,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2089#issuecomment-842947771,1,['benchmark'],['benchmark']
Testability,"Hey @alxbilger . Taking another look at this issue, and I realized that :; - contacts are created as SUB-nodes and connected to the associated object though a mapping; - then (if `response='default'` meaning Penality approach is chosen for the ContactResponse), a PenalityContactForceField is added in the root node with a BarycentricPenalityContact which distributes the spring forces on the SUB-node MechanicalObject. As stiffness matrices (implicit force contributions) are not propagated through mappings (yet), only the addForce is used and the need of a AddKToMatrix never arose. I tried an implementation shortly but I would need to test it which is yet not possible. Hope this updates this issue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2060#issuecomment-908068228:640,test,test,640,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2060#issuecomment-908068228,1,['test'],['test']
Testability,"Hey @epernod . Yeah sorry, I'll give a bit more details. The force vector (built from addForce) should be the same (or very close), either you are using a lumped mass matrix or a (full) mass matrix. This was the case before, but isn't anymore. Here a quick unittest that could help:. ```c++; using sofa::helper::system::PluginManager ;; using namespace sofa::simulation;; using namespace sofa::simpleapi;. TEST(MeshMatrixMass, addForce) {; using namespace sofa::core::objectmodel;; setSimulation(new sofa::simulation::graph::DAGSimulation());. // Create the scene; auto root = getSimulation()->createNewNode(""root"");; createObject(root, ""RequiredPlugin"", {{""pluginName"", ""SofaBoundaryCondition SofaEngine SofaTopologyMapping""}});; createObject(root, ""RegularGridTopology"", {{""name"", ""grid""}, {""min"", ""-7.5 -7.5 0""}, {""max"", ""7.5 7.5 80""}, {""n"", ""3 3 9""}});; auto mo = dynamic_cast<sofa::component::container::MechanicalObject<sofa::defaulttype::Vec3Types> *>(; createObject(root, ""MechanicalObject"", {{""name"", ""mo""}, {""src"", ""@grid""}}).get(); );; createObject(root, ""TetrahedronSetTopologyContainer"", {{""name"", ""topology""}});; createObject(root, ""TetrahedronSetTopologyModifier"");; createObject(root, ""TetrahedronSetGeometryAlgorithms"");; createObject(root, ""Hexa2TetraTopologicalMapping"", {{""input"", ""@grid""}, {""output"", ""@topology""}});; auto sofa_mass = dynamic_cast<sofa::component::mass::MeshMatrixMass<sofa::defaulttype::Vec3Types, sofa::defaulttype::Vec3Types::Real> *> (; createObject(root, ""MeshMatrixMass"", {{""name"", ""sofa_mass""}, {""topology"", ""@topology""}, {""massDensity"", ""2""}, {""lumping"", ""false""}}).get(); );; auto sofa_mass_diagonal = dynamic_cast<sofa::component::mass::MeshMatrixMass<sofa::defaulttype::Vec3Types, sofa::defaulttype::Vec3Types::Real> *> (; createObject(root, ""MeshMatrixMass"", {{""name"", ""sofa_mass_diagonal""}, {""topology"", ""@topology""}, {""massDensity"", ""2""}, {""lumping"", ""true""}}).get(); ); ; getSimulation()->init(root.get());. // Get residual vectors; DataVecDeriv d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901856585:406,TEST,TEST,406,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901856585,1,['TEST'],['TEST']
Testability,"Hey @guparan ,. Thanks a lot for this. I've tested it very quickly. In order to use this for SofaPython3, we would need to be able to specify where to install some targets and files relative to the install prefix. For example, the binding libraries should be installed in `lib/python3/site-packages/...` . Here is the installation tree that we would need for SofaPython3:; ```; .; ├── bin; │   ├── Bindings.Modules.Tests; │   ├── Bindings.SofaRuntime.Tests; │   ├── Bindings.Sofa.Tests; │   ├── Bindings.SofaTypes.Tests; │   ├── Components; │   │   └── Components.py; │   ├── Core; │   │   ├── BaseData.py; │   │   ├── BaseLink.py; │   │   ├── BaseObject.py; │   │   ├── Base.py; │   │   ├── Controller.py; │   │   ├── DataEngine.py; │   │   ├── ForceField.py; │   │   ├── ForceField.py.orig; │   │   ├── MyRestShapeForceField.py; │   │   └── PythonRestShapeForceField.py; │   ├── Helper; │   │   ├── FileRepository.py; │   │   └── Message.py; │   ├── pyfiles; │   │   └── vector_test.py; │   ├── Simulation; │   │   ├── Node.py; │   │   └── Simulation.py; │   ├── SofaDeformable; │   │   ├── LinearSpring.py; │   │   └── SpringForceField.py; │   ├── tests; │   │   └── Base.py; │   └── Types; │   ├── BoundingBox.py; │   ├── RGBAColor.py; │   └── Vec3.py; ├── include; │   └── SofaPython3; │   ├── config.h; │   ├── DataCache.h; │   ├── DataHelper.h; │   ├── initModule.h; │   ├── Prefab.h; │   ├── PythonEnvironment.h; │   ├── PythonFactory.h; │   ├── PythonTestExtractor.h; │   ├── PythonTest.h; │   ├── SceneLoaderPY3.h; │   ├── Sofa; │   │   ├── Components; │   │   │   └── Submodule_Components.h; │   │   ├── Core; │   │   │   ├── Binding_BaseCamera_doc.h; │   │   │   ├── Binding_BaseCamera.h; │   │   │   ├── Binding_BaseContext.h; │   │   │   ├── Binding_BaseData_doc.h; │   │   │   ├── Binding_BaseData.h; │   │   │   ├── Binding_Base_doc.h; │   │   │   ├── Binding_Base.h; │   │   │   ├── Binding_BaseLink_doc.h; │   │   │   ├── Binding_BaseLink.h; │   │   │   ├── Binding_BaseObject_doc.h;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592:44,test,tested,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592,5,"['Test', 'test']","['Tests', 'tested']"
Testability,Hey @lagarkane ; There's still 22 new failures of the tests. Is that normal? Looks your commit : 092b19f did it,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/317#issuecomment-317355130:54,test,tests,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/317#issuecomment-317355130,1,['test'],['tests']
Testability,"Hey @maxime-tournier ,. You bring valuable points here. You are absolutely right, it is not that trivial, I'm starting to see it now. Here is what I observed during my tests (I'm working part time on this, it is entirely possible that I come back later to correct those statements of mine :) ). > you need to properly initialize/finalize sofa and core modules (see Main.cpp in the runSofa application). Yes. I'm usually leaning towards making most of the functions available and let the script use what it need. So if I'm writing a _runSofa_ like application in python, I should be able to init the components there, create/set the simulation, add the needed message handlers to the MessageDispatcher, and set the paths (plugin, config, sofa prefix) there. If this complicate too much the python script, than making optional python util scripts that set all of this for the user could be a clean option. But I don't think the library should do this in the user's back without transparency. > you need to handle the case where the loaded scene already has python scripts, and let the PythonEnvironment know the interpreter is being run from the outside when initializing (and maybe deal with all the sys.path / __file__ abuses down there). The PythonEnvironment will create an interpreter if there isn't one (like when launching for a binary executable), or use the one already defined. In this case, PythonEnvironment will use the interpreter that called the script (ex python runSofaPython.py). No new python interpreter nor python thread a created (I've just checked to be sure). > probably have a good fight with the GIL down the road. The current GIL usage in the plugin seems to align correctly with this feature since we ""attach"" the PythonEnvironment to an interpreter instead of initialising a new one. No new threads are created. > how should this feature integrate with existing python scenes? Should it be possible to load scenes from within python scenes?. Yes, it seems to work so far. Ho",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525:168,test,tests,168,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525,1,['test'],['tests']
Testability,"Hey @nhnhan92 ; Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license. To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!. Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _\*\*\*\_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); See: https://link.springer.com/article/10.1007/s00366-017-0572-4. Let us know what you think about it. We can make it step by step!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204:452,test,test,452,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204,4,['test'],['test']
Testability,"Hi @EulalieCoevoet,. Thanks for you PR. . Given that this PR: ; - [x] successfully compile in our settings on the CI.; - [x] does not generates new warnings or test failure. ; - [x] shouldn't break existing scenes.; - [x] add new features & corresponding tests. ; - [ ] does not break API compatibility. ; - [x] is now more 1 week old. Its breaks the API compatibility but this is to match the sofa coding style so I suggest a merge (@hugtalbot). @EulalieCoevoet about your question about PlaneROI I suggest you to make an issue dedicated .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/108#issuecomment-273826140:160,test,test,160,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/108#issuecomment-273826140,2,['test'],"['test', 'tests']"
Testability,"Hi @FabienPean, ; Any idea why RigidLinearDeformationMappings_test is failing on Windows ?; See [windows7_VS-2015_amd64_origin_options tests report](https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_amd64_pr_2_options/266/testReport/). EDIT: This is certainly nothing related to your PR. It is also failing for sofa-framework/sofa#261. EDIT 2: The problem is known, see issue sofa-framework/Flexible#4.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/262#issuecomment-300141659:135,test,tests,135,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/262#issuecomment-300141659,2,['test'],"['testReport', 'tests']"
Testability,Hi @ScheiklP . Thanks for the PR. The SphereCollisionModel works historically without a topology (relying on the mstate). The tests are failing due to the absence of a PointSetTopology. What could be done is to change the warning into an info saying that no topology is found therefore no topological change will be supported. What do you think?. Another change in order to make the component topologically robust would be to make the data `radius` as a PointData:; ``` cpp; Data< VecReal > radius; ///< Radius of each sphere; ```. should become; ``` cpp; PointData< Real > radius; ///< Radius of each sphere; ```; (connected to a topology handler),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3203#issuecomment-1210431318:126,test,tests,126,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3203#issuecomment-1210431318,1,['test'],['tests']
Testability,Hi @Younesssss . Thanks for your PR. . I strongly support removing the #define/#ifdef where-ever this is possible because #ifdef leads to code that is very hard to maintain and test in a CI. Your proposition is going toward that so I like it. . Matthieu suggested an alternative way to achieve the same result do you think you can do it or is it too far away from what you had in mind ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/288#issuecomment-306479445:177,test,test,177,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/288#issuecomment-306479445,1,['test'],['test']
Testability,"Hi @alxbilger,. Thanks for the tests, which if I understand correctly are working as expected. . When doing; ```xml; <Import fromPlugin=""MultiThreading"" components=""ParallelBVHNarrowPhase"" as=""BVHNarrowPhase""/>; ```; The alias BVHNarrowPhase that is initially pointing to SofaBaseCollision.BVHNarrowPhase should be replaced with one with the same named BVHNarrowPhase but pointing to Multithread.BVHNarrowPhase.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-1005149509:31,test,tests,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-1005149509,1,['test'],['tests']
Testability,"Hi @damien-marchal,. Yes I will do it. Maybe just need to talk with @matthieu-nesme to; understand more his suggestions. Thanks. 2017-06-06 15:03 GMT+02:00 Damien Marchal <notifications@github.com>:. > Hi @Younesssss <https://github.com/younesssss>; >; > Thanks for your PR.; >; > I strongly support removing the #define/#ifdef where-ever this is possible; > because #ifdef leads to code that is very hard to maintain and test in a; > CI. Your proposition is going toward that so I like it.; >; > Matthieu suggested an alternative way to achieve the same result do you; > think you can do it ?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/sofa-framework/sofa/pull/288#issuecomment-306479445>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AXU08Yg8acAOCZtwUhU61g0EnlJ8Ck5Zks5sBU40gaJpZM4NxEC9>; > .; >. -- ; Yinoussa ADAGOLODJO. Doctorant en Simulation Médicale; Laboratoire ICube - UMR 7357; IRCAD Hôpitaux Universitaires; 1 place de l'hôpital F. 67091 Strasbourg Cedex",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/288#issuecomment-306565218:422,test,test,422,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/288#issuecomment-306565218,1,['test'],['test']
Testability,Hi @damienmarchal ! Do you have any comments on the unit tests ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-329404570:57,test,tests,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-329404570,1,['test'],['tests']
Testability,Hi @damienmarchal . I need a review of the first version of the unit tests.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-326303609:69,test,tests,69,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-326303609,1,['test'],['tests']
Testability,Hi @damienmarchal . Is this PR still in your plans @damienmarchal?; It even had the approval from Guillaume but the CI was failing then. Now the PR is too old to access any log.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-1708442304:173,log,log,173,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-1708442304,1,['log'],['log']
Testability,"Hi @damienmarchal, thank you for this massive work.; 117 changed files in 1 commit is not easy to review so this may take a while to be merged but be sure we (I included) are going to check it out.; About the deprecation policy, I agree with your proposal of 1 year transition + highlights in releases.; I'm curious to see this PR [ci-build]'ed [with-scene-tests] 😉",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/389#issuecomment-328514613:357,test,tests,357,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389#issuecomment-328514613,1,['test'],['tests']
Testability,"Hi @damienmarchal,; You broke [DataFileName_test](https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_amd64_pr_1_options/178/testReport/(root)/DataFileName_test/checkSetGetRelativePath/) on Windows with this PR. ; Could you have a look?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/250#issuecomment-300142620:122,test,testReport,122,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/250#issuecomment-300142620,1,['test'],['testReport']
Testability,"Hi @epernod , @fspadoni . Thanks for the PR. ; This is the kind of code I would like to have test unit for. Do you think it could be possible ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/701#issuecomment-400500548:93,test,test,93,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/701#issuecomment-400500548,1,['test'],['test']
Testability,"Hi @epernod . Can I add more tests on this PR ? Because I think we should validate a bit more ""negative/bad"" case to enforce the behavior of component when used improperly.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/270#issuecomment-302034546:29,test,tests,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-302034546,1,['test'],['tests']
Testability,"Hi @fjourdes, thanks for the suggestion. I used HOBAK for the implementation, adapting it to SOFA `TetrahedronHyperelasticityFEMForceField`. I implemented only the material. Therefore, everything outside of the material, such as matrix clamping, is not yet implemented. Note that HOBAK has also a test suite, with some similarities with mine (test derivative against finite differences). I guess we can check that both test suites match for the same input.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4603#issuecomment-2024912176:297,test,test,297,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4603#issuecomment-2024912176,3,['test'],['test']
Testability,Hi @fredroy . Several questions: ; - shouldn't we drop the dependency to SceneCreator (as discussed (https://github.com/sofa-framework/sofa/issues/417) ? ; - why not defining the test in Sofa.component.ODESolver.tests in place of Sofa.component.ODESolver_test ? To me this looks more consistant and coherent with our naming scheme as well as having the tests in a child directory of ODESolver. ; - why centralizing the testing.tools which breaks modularity instead of letting them at their right logical location ? ; To me having something like; ```console; SofaDeformable.testing.tools/MassSpringSystemCreation ; ``` ; Is much better than; ```console; Sofa.testing.tools/MassSpringSystemCreation ; ``` ; Because the latter creates a dependency from package SofaDeformable to package Sofa.testing.toos. ; While the First has only a dependency from SofaDeformable to SofaDeformable.testing,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2650#issuecomment-1040482854:179,test,test,179,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2650#issuecomment-1040482854,9,"['log', 'test']","['logical', 'test', 'testing', 'tests']"
Testability,"Hi @ggrosshenny . For the tests I think that the ideal target of testing to have a good code coverage (https://en.wikipedia.org/wiki/Code_coverage). A very strong level of testing may requires ""path coverage"". This means that all the execution path are at least executed once. This is very hard to achieve an so a more manageable target is to be close to ""function coverage""+""branch coverage"" in which each line of the function is at least executed once. I found that in sofa a succesfull strategy is to make tests with ""Parameter value coverage"" in which in a method taking parameters, all the common values for such parameters be considered. This give good results and is really easy to do. More concretely in your PR you could: ; - test each python function with different parameters. At least one with a valid value, 1 with out of bound values, 1 test with extrema values (min & max) and if there is multiple parameter...you either have to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They do",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:26,test,tests,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977,6,['test'],"['test', 'testing', 'tests']"
Testability,"Hi @guparan ; I added tests & the use of SOFA_VERSION but is this contains a real value ? On my system it was 999999; which is pretty useless. Could the value be set to the ""next release"" ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/329#issuecomment-315888752:22,test,tests,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/329#issuecomment-315888752,1,['test'],['tests']
Testability,"Hi @hugtalbot . I removed all the experimental stuff (sad), the commit history is cleaned, the CI is compiling (but as there is now the test scenes by default it is super laggy). . The first six commits are touching Sofa files and are fixes. ; The two other are adding the PSL plugin. . About the number of files, the 2/3 are examples and test scenes. ; The failing test in windows are because of the missing module on the windows machine:; https://github.com/hjson/hjson-py. EDIT: the crash on mac-os is because the tests scenes are using components that uses OpenGL. I think I will remove those tests as they are not really usefull anymore. EDIT2: Here it is...and it fullfill our merging list check boxes :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/541#issuecomment-353217703:136,test,test,136,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541#issuecomment-353217703,5,['test'],"['test', 'tests']"
Testability,"Hi @hugtalbot what does it means ""tested first"" ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-994941714:34,test,tested,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-994941714,1,['test'],['tested']
Testability,"Hi @kriptian88,. Thank you very much for your contribution and welcome in the sofa development community. ; I will test it asap.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/369#issuecomment-323769996:115,test,test,115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/369#issuecomment-323769996,1,['test'],['test']
Testability,Hi @lagarkane . Thanks for this PR. +1 for adding new tests :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/312#issuecomment-312248734:54,test,tests,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-312248734,1,['test'],['tests']
Testability,"Hi @maddin200 ; Thanks for the notice, I will test it within the week. But it clearly appears uninitialized.; I put here the [link to ImageTypes.h](https://github.com/sofa-framework/sofa/blob/d1434b2eaaf2b8ef516a428544f9c0d65ed3d4df/applications/plugins/image/ImageTypes.h#L303)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1133#issuecomment-526942267:46,test,test,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1133#issuecomment-526942267,1,['test'],['test']
Testability,"Hi @nhnhan92 ; Here is what we propose: let's get this nice work merged as is. I will only add a regression scene to check that no alteration of the model occurs in the future. I will also write a short doc about it, and I will let you append any additional details on it. A C++ test inspired from the [article](https://link.springer.com/article/10.1007/s00366-017-0572-4) would be nice in another PR. For writing test, you can:; - see the [doc here](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/); - get inspired from the [PluginExample test](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp). Is this fine for you?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-789654667:279,test,test,279,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-789654667,4,['test'],"['test', 'tests']"
Testability,"Hi @nim65s . Sorry for the delay in our reply, a mixture of things, including a vacation, have kept us away from the code for several days! Here we are again!; Once again thanks a lot for you very nice contribution. Have you taken another look regarding the Ubuntu issue?; During our weekly dev meeting, we discussed it and it might not be related to Nix but possibly to Wayland now by default in Ubuntu 24.04. We could therefore test with Ubuntu 22.04. Cheers",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2459631954:430,test,test,430,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2459631954,1,['test'],['test']
Testability,"Hi @olivier-goury , @ChristianDuriez . Some tests on our CI are crashing with your PR, following the link ; https://www.sofa-framework.org/dash/?branch=pr/mapped_forcefield_matrix; You will find the crashing tests, those are the one that have a negative runtime, in the stackstrace you can see it is related to some Eigen spare matrix operation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/276#issuecomment-302852972:44,test,tests,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/276#issuecomment-302852972,2,['test'],['tests']
Testability,Hi @sergeiNikolaev . I'm not sure what you want. ; There is actually several tests of python functionality in different plugins. ; SofaPython_test and SofaTest are good starting point. . Now if you want to lauch automatically something like 'unittest' or 'coverage' I have no idea but this is a good question.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/400#issuecomment-329769083:77,test,tests,77,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/400#issuecomment-329769083,1,['test'],['tests']
Testability,"Hi @sergeiNikolaev ; Sorry for the latency on this topic, tests can be made so that we create a simple scene in c++ imposing rest shape and an imposed displacement. Thus, the resulting force should be analytically defined.; By the way do you have any latex file for the polynomial equations?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643111261:58,test,tests,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643111261,1,['test'],['tests']
Testability,"Hi @sergeiNikolaev ; thank you for sharing your zip test. I think we will be able to work it out from here.; TODO for me:; - Need a test in c++ for checking new functionality, to be implemented from py example.; - Add an example in SOFA.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-624527110:52,test,test,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-624527110,2,['test'],['test']
Testability,"Hi @sofa-framework/reviewers,. May was quite quiet for our beloved NG project.; Don't worry, I still have some news for you :wink:. ## Discussions. Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramew",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:604,test,test,604,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223,1,['test'],['test']
Testability,"Hi @tgaugry ; I think I fixed the issue:; - first, I added a condition checking before resizing constraintReleased; - second, a beginEdit() on d_constraintFactor was actually forcing the d_constraintFactor.isSet() function to return true (since the the beginEdit is considered as ""setting"" the data); Let me know if it suits you, I tested your scene it works with or without specifying the constraintFactor; - third, use of bwdInit() function: when AttachedContraint focuses on subnodes (these might not be initialized yet) and the initialization of AttachedContraint requires MO size info. With the work on Data dependencies bwdInit() should be later removed. Thanks for noticing the issue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/650#issuecomment-447334444:332,test,tested,332,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/650#issuecomment-447334444,1,['test'],['tested']
Testability,"Hi @untereiner . From my experience you will have more feedback if you provide more information on the PR description to give other some envy to try it. . Given the complexity of the PR here is what people passing by may need:; - what the PR does precisely ? ; - what is the existing state on this topic in Sofa (the title speak about dynamic topology...isn't there dynamic topology in Sofa since year) ? ; - how this PR handle the problem, ; - use CGOGN library... what is this CGOGN library ? ; - argument on why the PR is it useful/mandatory/improvement,; - trying to convince people why they should spend time testing it,; - provide some idea on how invasive the PR will be (non breaking at all, breaking the SofaCore API, breaking existing scenes)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402418819:614,test,testing,614,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402418819,1,['test'],['testing']
Testability,"Hi Camille,. Thanks a lot for the detailed reports. I just tested the files and can confirm the issue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487539429:59,test,tested,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487539429,1,['test'],['tested']
Testability,"Hi Damien,. Actually, Jenkins is already doing this, here is a regression: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/3955/testReport/(root)/ImagePNG_test/ImagePNG_NoFile/. We can also access this results with a GET request: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/3955/testReport/api/json?pretty=true; Just search for ""REGRESSION"". So it is possible to count them in the ""post build"" step :). About colors, I don't agree with you because it would make people think ""It's green, I don't care about new tests failing"". If we are adding (failing) tests, it is precisely because we want to warn people that something is broken and needs to be fixed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258823053:135,test,testReport,135,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258823053,4,['test'],"['testReport', 'tests']"
Testability,"Hi Damien,. I haven't had much time to devote to this as of late, but here is some quick feedback so far:. - lots of code need modification (like *lots*), deep down the core and you need lots of patience to recompile everything over and over again,; - it makes little sense to optimize data initialization if you don't optimize links as well since they use a similar initialization mechanism,; - the speedups in my test scenes were disappointing, being largely dominated by other code paths (contact detection and response mostly, since this is the main use case as the graph gets dynamically altered at every time step),; - IIRC there was a data/link notification mechanism on insertion that could cause accidental quadratic complexity when used sequentially (I'll try to fix this one soon),; - beware of CollisionGroup managers that was causing huge slowdowns in my case for no visible reason as there was a single group. The takeaway: this is probably premature optimization at this point. I might give it another shot in the next few months as my work may depend on it but until then, don't expect major changes on this front. (edit: typos)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574:415,test,test,415,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574,1,['test'],['test']
Testability,"Hi Erik, . Thank for your question. The caller's is the one that call the create function. Some of them looks if the arg's log is empty and if not they consider this is an error. ; The problem is that for the deprecation message they should not be considered as error but real deprecation message. This is what I do in this PR. The deprecation message are handled separately, out of the arg's log, so the arg's log behave as usual and deprecation messages are properly handleded.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/939#issuecomment-465237578:123,log,log,123,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/939#issuecomment-465237578,3,['log'],['log']
Testability,"Hi Erik, . There is one test crash in TetrahedronFEMForceField_test. Is this related to your changes ?. DM",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/270#issuecomment-301898283:24,test,test,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-301898283,1,['test'],['test']
Testability,"Hi Erik,. Nice commit. Some (cosmetic) remarks:; - you updated some attributes/data field names but the name you use are not following the sofa guidelines. Data should starts with d_ not m_ (https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md). ; - there are std::cout which should be replaced by the msg_error api ; ; +1 for the examples.; Would be nice to also have a test file validating the behavior.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273165258:383,test,test,383,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273165258,1,['test'],['test']
Testability,"Hi Erik,. Thank you for the offer,; If you have time you could look at the failing scenes to see what is wrong and how it would be best to validate that. Maybe testing this branch with your plugins or scenes would also be very useful. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/853#issuecomment-446186538:160,test,testing,160,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/853#issuecomment-446186538,1,['test'],['testing']
Testability,"Hi François,. Thank for this PR. Currently SofaTest contains two different things: 1) a set of utilitary classes to implement tests and 2) specific tests on component. . To me the right approach is to split that in two. The utility classes should be moved into SofaKernel and be part of the framework as we want to use the utility classes to make test. While the specific tests can stay on SofaTest. . Once that done the dependency to SofaTest can be removed. But the test in framework are still using the helper class including the ability to generate failure based on sofa error messages. . EDIT: I forgot to say that your are totally right saying that these backward dependencies are bad and have a lot of consequence on modularization & compilation time in Sofa. As far as I can say @maxime-tournier is also working actively on that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/455#issuecomment-335746406:126,test,tests,126,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/455#issuecomment-335746406,5,['test'],"['test', 'tests']"
Testability,"Hi Fred, . The splitting seems to perpetuate the spurious dependency from SceneCreator to sofa.testing.tools. ; Maybe it is the time to remove the dependency to SceneCreator and use simpleapi in place so that sofa.testing is cleaned from SceneCreator.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040449818:95,test,testing,95,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040449818,2,['test'],['testing']
Testability,"Hi Fred,. Thank for this PR. . +1 for the cleannig; +1 for the tests ; Maybe it should be told in the PR description. . I'm surprise by the C++ code in the test.glsl file. I don't think this is a good naming convention because it is really hard to understand that the content of the .gsl file is actually c++. So I suggest to rename the file with a more classical .cpp (or .cppglsl if you really want something no .cpp). . There is some place in the code that introduces new std::cerr. Can you please update to use the dmsg_* API . I will try the PR to see if it does not interfere with the livecoding features.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/158#issuecomment-276338378:63,test,tests,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/158#issuecomment-276338378,2,['test'],"['test', 'tests']"
Testability,"Hi Fred,. Thank you for your pull-request. ; It looks really nice. . Some user friendly stuff...; - I would be great to have more details in the help string of the added Data. Currently it is more or less duplicating the name; maybe you can say what is it used for in term of rendering and shadowing.; - I have now clear opinion on that but maybe we should also add the default values in the docstring (I found it very annoying for the users to look in the source code to know what the default values are). ; - In the same spirit I think that somewhere VMS should be documented to the user. Maybe in the component helpstring when it is registered ? . I will test that by thursday unless someone else do that before.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/73#issuecomment-263723195:658,test,test,658,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/73#issuecomment-263723195,1,['test'],['test']
Testability,"Hi Guillaume,. Thank for the fix. Sorry about the the tailing tests since the beginning... I was assuming that Jenkins would correctly report this information with its regression/failure status & tracking. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263480331:62,test,tests,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263480331,1,['test'],['tests']
Testability,"Hi Guillaume,. The problem of matrix reading was visible because of the UniformMass<Rigid3> was generating a warning at run-time. The test was designed to fail if the uniformmass generates such a warning or cannot read the given values. Finally the error was not in UniformMass but in Mat.h, so I fixed the problem and keept the written test (not failing now).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/993#issuecomment-484738528:134,test,test,134,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/993#issuecomment-484738528,2,['test'],['test']
Testability,"Hi Hugo,. If I remember correctly there is still an inconsistency between the internal logic between DiagonalMass and UniformMass. I started with these two because I wanted to review all the component we are using in our soft-robots plugins. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/36#issuecomment-268331516:87,log,logic,87,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/36#issuecomment-268331516,1,['log'],['logic']
Testability,"Hi Mathieu,. - About the 'd_size' data field. It is there just to store the attribute passed by the user. As the parse function already do the resize using the raw value of the attribute it was not needed to do any resize(d_size.getValue) anywhere. . - I share your concern about the cost of adding data. ; According to the last updates in Issue https://github.com/sofa-framework/sofa/issues/44) it seems that data is not that crucial for a real simulation. . To have more insight I just made a quick test with the following result: ; The time to create 200 000 (empty) component (without calling the init function):; - with 6 Data field is 1.10sec; - with 10 Data field is 1.55sec; So one data field added to a component cost 0.05ms at component creation (it is higher than what I expected). ; Now for a more realistic scenario with 200 SphereModel created and initialized one extra data field rise the cost from 3.1 ms 3.2ms and that this is 'dialuated' in all the other cost (collision detection, mechanics). . About your suggestion to set everything to persistent by default and have each component decide what is good to save or not. This is what SOFA actually does and this behave terribly. ; I see two reason for that:; - there is a lot of component that 'forgot' to set/unset the persistent values.; - it is very hard to identify what is relevant to save, IMO because what is relevant to save is a matter of context of use, a Data 'useless' for one may be very useful for someone else. . This is why I choose to do things in the reversed way and let the client code to select what to save (so that you may eventually implement dedicated widgets to let the user select what to save). . I see at least to different context of use and thus saving strategies. . For my context of use it is more important to save scenes that are as close as possible as the one written by the user. This is why I made the XML loader and the GUI have the responsability to make persistent:; - the value given explic",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495:501,test,test,501,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495,1,['test'],['test']
Testability,"Hi Mathieu,. Best wishes for this year. . Daccord is an old repository on gforge storing a lot of experimental feature (UI & modelling) that are pending for integration in sofa. . I fully agree with your suggestion for point first&second; for third:; - what about adding a Data for template & src ? (I really would like to preserve as much as much as possible the original scene because) ; - ""type"" I don't know but it handled specifically in (XML.cpp). I started a new branch for this task so we can work and tests : ; https://github.com/SofaDefrost/sofa/tree/xmlsave. EDIT: I have updated this branch saving is now working (at least the caduceus scene). If some of you have time please give feedback.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/41#issuecomment-270089246:510,test,tests,510,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/41#issuecomment-270089246,1,['test'],['tests']
Testability,"Hi Mathieu,. I see what you mean. ; ; The new implementation allows you to select precisely how gtest suceed or fail according to the messages emitted by a component by using either the MessageAsTestFailure or/and ExpectMessage RAII. . To update the old tests with *a minimal amount of effort* to restore the behavior you described. ; I think in each test setup we can simply add something like ; ```cpp; MessageAsTestFailure raii_warning(Message::Warning) ;; MessageAsTestFailure raii_error(Message::Error) ;; ```; I can devote some time to do that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290:254,test,tests,254,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290,2,['test'],"['test', 'tests']"
Testability,"Hi Mathieu,. Thank for the feedback. . STLExport & MeshExporter are exporting single object while OBJExporter is exporting a whole scene. ; I didn't change that because it would cause too much refactoring and it seems there is an agreement on that. . In this PR what I did was just to factorize the existing quasi-duplicated functionalities into an unique class. So now the three objects have a consistent behavior regarding the filename & path creation as well as the attributes behavior. . I'm very sorry about the difficulty to review this kind of changes... I think the best approach is not to use the diff which are too complex and instead review the resulting file which are (I hope) good looking. . I also have added tests (+30) to check that things goes fine and help in future refactoring to detect regression. As you said one year ago ...we need more tests :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631:724,test,tests,724,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631,2,['test'],['tests']
Testability,"Hi Maxime,. This is great news. This evening I still had to kill manually some Compliant_test running in endless loop. Now the MacBuilder is ""knocked out"" for the night because there is no more space left on the device and we need to log in manually to clean that. . If you are curious here are the builds: ; 35GB https://ci.inria.fr/sofa-ci/job/mac_clang-3.4_options/4959/console; 41GB https://ci.inria.fr/sofa-ci/job/mac_clang-3.4_options/4958/console. I hope your fix will remove this kind of problem.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289565745:234,log,log,234,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289565745,1,['log'],['log']
Testability,"Hi Paul,. I made some tests on basic scenes and it seems empty systems are supported (in the sense it does not crash). See https://github.com/sofa-framework/sofa/pull/3500. The factorization is supposed to stop here: https://github.com/sofa-framework/sofa/blob/master/Sofa/Component/LinearSolver/Direct/src/sofa/component/linearsolver/direct/SparseLDLSolver.inl#L93. Can you debug your scene around this line to investigate why this condition is not reached?. Alex",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3499#issuecomment-1323257851:22,test,tests,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3499#issuecomment-1323257851,1,['test'],['tests']
Testability,"Hi Raphael,. Many thank for your pull request. ; The feature sounds appealing and at first sight it looks ok. I have never used this component so if someone can give feedback it would be great. . EDIT: do you mind if I push some cleaning commit on this component in your PR. I would like to add some test cases for this component.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/394#issuecomment-328134531:300,test,test,300,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/394#issuecomment-328134531,1,['test'],['test']
Testability,"Hi Remi, thanks for the bug report and the scene.; @epernod, @EulalieCoevoet can you say which change is the latest so we can test before this version if the code work ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/988#issuecomment-483757703:126,test,test,126,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/988#issuecomment-483757703,1,['test'],['test']
Testability,"Hi Thomas,. Currently it seems there is some problem in compiling it, but fundamentally I think this is a great objective. ; Thank you very much to tackling this. . If I understand correctly now we can have the two syntax to read vectors (the one from Python and the historical one). +Backward compatibility is preserved and you added tests to validate the new behavior. This all looks great to me. . You also changed the getStringValue...here I think this is a problem as it will break a lot of third party code. This is why you had to fix a lot of failing test. Instead of changing the behavior of an existing function it would be much better to offer a second function to serialize to python format (or adds a parameter to the existing one to control the behavior eg: getStringValue(SerializingMode mode=SerializingMode::ClassicSofa)). The underlying idea is that by default old code will function as usual and ""awared"" users can take profit of the existing function getStringValueAsPython() or getStringValue(SerializingMode::Python). . I'm sorry because I think it probably took you a lot of time to update the failing tests but the tests shouldn't have been changed, only new one should have been added to validate the new syntax and corner case. . Minor details: ; There is some msg_error(""(S)Vector"") in vector shouldn't it be vector<> instead ?. ; Maybe you will find this pattern usefull: ; ```cpp; namespace sofa {; namespace helper {; namespace logging {; inline bool notMuted(const sofa::helper::io::MeshVTK* ){ return true; }; inline ComponentInfo::SPtr getComponentInfo(const sofa::helper::io::MeshVTK*); {; return ComponentInfo::SPtr(new ComponentInfo(""MeshVTK"")) ;; }; } /// logging; } /// helper; } /// sofa; ```. It allows to write the implicit (this) msg_* as in ; ```cpp; msg_error() << ""Blahblah""; ```. Instead of; ```cpp; msg_error(""MeshVTK"") << ""Blahblah""; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/330#issuecomment-314893430:335,test,tests,335,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-314893430,6,"['log', 'test']","['logging', 'test', 'tests']"
Testability,"Hi Thomas,. Glad you made this PR, so thank you. ; ; Some feedback:; - Everything in sofa is a component so the default name of ""DistanceGridComponent"" should be shortened into ""DistanceGrid"" when it is used in the scene. You can do that by overriding the function std::string Base::getClassName() const.; - I would be much better to have the number of samples (the nx,ny,nz) stored at the beginning of the tmg file. ; - I assume that in MeshGenerationFromDG, the DG is for DistanceGrid. As it work with ImplicitShape wouldn't it be better to name it MeshGenerationFromImplicitShape ? ; - There is not tests for the added classes.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/354#issuecomment-319761815:602,test,tests,602,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354#issuecomment-319761815,1,['test'],['tests']
Testability,"Hi Thomas,. I made a small PR #371 trying to implement that. As you said a message is send if duplicated names exists.The name checking is done either on the node or on the object lists. The PR also contains basic tests to validate thee behavior. But, as usual, things are a bit more complex in the details...so I have several question.; - do we really want to have a test of linear complexity for each add to the scene graph ? ; To face this issue I have two solution one is to only activate the tests when there is #define WITH_SOFA_DEVTOOLS so that when we are using runSofa to make or debug ""scenes"". Once the scene is done it can be executed with improved performances on a runSofa (or any other scene runner) compiled without the DEVTOOLS enabled. ; The other approach would be to have an implicit extra param to the addChild(..., warnOnDuplicates) ;. - Second issue is that it is unclear to me if we have to check that all the time. Isn't there cases in which we have duplicate name (ie when adding object either with an""undefined"") that are then fixed ""later"". There is a lot of test (in simulation) that are now emitting a warning because of that so I assume the ""old"" behavior usage was quite common. . So guys (@jeremieallard, @thomas-lemaire, @matthieu-nesme, @maxime-tournier , @bcarrez , @fredroy ...) ...what design do we want ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323859167:214,test,tests,214,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323859167,4,['test'],"['test', 'tests']"
Testability,"Hi Thomas,. You said:; ""As long as the deserialization operator is compatible with the serialization one, I do not see any issue. And no example scene is failing because of that."". You have to take the whole picture into consideration, everyone is not using serialization/deserialization as ""pairs"". The actual default serialization format is used in a lot of other software (GUIs, scene processing tools written in python, perl and C++). If you change the behavior of the default serialization mechanism all of them will stop working and required to be updated. This is a very, very, very nasty thing to impose to other users of Sofa. A PR doing has no changes to be accepted. . Actually tests is part of our guard line because they validates the API compatibility and allow us to detect changes that breaks it. The existing tests should be considered as validating the ""the existing"" sofa API. It was normal to have them to fail on your PR because it shows that the PR was breaking the compatibility. . I really like the idea of keeping the old serialization behavior as it is and add the other deserialization as an extra feature. This will make the whole PR transparent for users that don't want to update their code base. It thus it can be merged very quickly. . About the test: ; You are right that it would be better if we had test specific tests to validate the serialization alone.; I personally would like to have tests to validate that getValueString() return ""1 2 3"" and that getValueAsPythonString() return ""[1 2 3]"" . And also as you said having tests to validate against the real values instead of their serialization would be nice. . . About the branches:; The rule is to never work directly on the sofa-framework repository. There is no reason to do so (if you really want to make two PR one in anatoscope and one in sofa ... you need to to that from two branches located in the anatoscope repo). Otherwise this consume a lot of disk space on the CI servers that we have to fix manual",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626:689,test,tests,689,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626,2,['test'],['tests']
Testability,"Hi Vlad. We have discussed your PR during the sofa dev meeting. And this is what came out : ; This is of interest but would require an example/context (plugin using it) of use to see how you use it. More over, it still need a lot to do to integrate it in a more standardized way to be more generic regarding the type of element. And finally, and we could help you for this, this feature would need unit tests. This pr is currently set to WIP, waiting for further comment from you.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4226#issuecomment-1757148121:403,test,tests,403,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4226#issuecomment-1757148121,1,['test'],['tests']
Testability,"Hi again @EulalieCoevoet ; I tried to check the difference with the PR #797; I suppose it is this commit: https://github.com/sofa-framework/sofa/pull/798/commits/5f56d38ac531e7dfd8a0d63eb7d00ddc870c21ea; Could you add in 2 lines in the header, what criteria is used to create the hash table and then which method is used to find element in the table. If already done I apologize, the changes log is very hard to read.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/798#issuecomment-444042411:392,log,log,392,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/798#issuecomment-444042411,1,['log'],['log']
Testability,"Hi all, . It was tested two weeks ago at Defrost, @EulalieCoevoet try our tutorials/tripods and it works like a charm. @TanguyNav found a bug that was reported. To us, it is going in the right direction and we support the merge of this work. . We hope the rest of the community will provide feedback asap.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1469608892:17,test,tested,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1469608892,1,['test'],['tested']
Testability,"Hi all, . The failing test in Compliant seems to be broken by design. The object holds in SPTR pointers are reused (dof1, node1) while there is dangling WriteAccessor still pointing to them...leading to a crash in the WriteAccessor's destructor. So it is just ""normal"" for the tests to crash and it a good news it does now so we can fix it in a future PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1269#issuecomment-610036837:22,test,test,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1269#issuecomment-610036837,2,['test'],"['test', 'tests']"
Testability,"Hi all,. Here are the result why BarycentricMapping<> is failing in the BarycentricMappingTruss example. Summary on how object are registered in the factory in sofa/master: ; 1) BarycentricMapping<Vec3d,Vec3d> is added into the factory using ""BarycentricMapping"" as entry name; Then ; 2) BarycentricMapping<Vec3d, Rigid3d> is aded into the factory using ""BarycentricMapping"" as entry name (so this actually adds a new template to the existing one). With the PR this is what happens:; 1) BarycentricMapping<Vec3d,Vec3d> is added into the factory using ""SofaBaseMechanics.BarycentricMapping"" as entry name. ; 2) Then, for compatibility, it adds an alias from BarycentricMapping to SofaBaseMechanics.BarycentricMapping. ; 3) Then BarycentricMapping<Vec3d, Rigid3d> is added into the factory using ""SofaMiscMapping.BarycentricMapping"" as entry name. This is actually correct (as SofaMiscMapping is the target where this mapping lies in). But the alias is not updated to point both to SofaBaseMechanics.BarycentricMapping and SofaMIscMapping.BarycentricMapping...which, actually seems pretty logic...one name - one object. . Maybe we can change the alias mechanism so we allow an alias to point to multiple different object...which I'm not very convinced this will not get into troubles.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-1007333869:1087,log,logic,1087,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-1007333869,1,['log'],['logic']
Testability,"Hi all,. I will try to give weekly news on the runSofa2 project progress. . So let's start, ; here are runSofa2 recent merges:; - adding a new widget to handle DataFilename (which pop-up a file selector); - adding a new widget to handle Data<RGBAColor> ; - adding a new widget to handle Data<OptionsGroup> ; - add a button in the graph view to open the current scene in your prefered text editor. . recently opened merge requests:; - add the files needed to do testing of qml & sofaQtQuick component. ; - code cleaning around SofaApplication; - replace the DynamicContent drop down menu by a static one name ViewSelector. If you have time & interest please join the development effort. ; https://gitlab.inria.fr/ocarre/sofaqtquick",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/187#issuecomment-300765854:461,test,testing,461,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/187#issuecomment-300765854,1,['test'],['testing']
Testability,"Hi all,. I'm hesitating between the following two design:. ```__getattr__``` returns a DataContainer object implementing lot of operations allowing:; ```python; root = Sofa.Node(""root""); obj = root.createObject(""MechanicalObject"", name=""test"", position=aList). np = numpy.zeros((100,3)). p.position = [[1.0,2.0,3.0]]; p.position = np; p.position += [1.0,2.0,3.0]; p.position += np; p.position += Vec3d((0.,0.0,0.0)). ## To get a numpy array view out the DataContainer it is needed to request it like that:; with p.position.array() as wa: ; wa += np ; wa *= np; # Other numpy.array operation; ```; This syntax guarantee that the beginEditPtr/endEditPtr is correctly called when the data are written. The drawback is that I have to re+implement a lot of operation on the DataContainer object (add,mul, iadd, imul, etc..etc...)which is annoying. The other approach is much lighter in term of code as it is directly a numpy.array out of the ```__getattr__``` function. This allows to do; ```python; np = numpy.zeros((100,3)). p.position = [[1.0,2.0,3.0]]; p.position = np; p.position += [1.0,2.0,3.0]; p.position += np; p.position += Vec3d((0.,0.0,0.0)). ## To get have correct management of begin/end... you should do like that:; with p.WriteAccessor(""position"") as wa:; wa += np ; # Other numpy.array operation; ```; The problem with this version is that doing:; ```; d = p.position; d += np; ```; Will change the data through numpy code without incrementing the data counter which violates the expected semantic of the DataEngine mechanismes. I have tried different solution in the last two days but cannot find one. . So any comment and help is welcomed :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/771#issuecomment-426624335:237,test,test,237,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/771#issuecomment-426624335,1,['test'],['test']
Testability,"Hi all,. In some of my work I tend to add new Data to Base object and as rightly pointed by @matthieu-nesme this may have a significant cost. To have more insight I just made a quick test with the following result:; The time to create 200 000 (empty) component (without calling their init() function):; - with 6 Data field is 1.10sec; - with 10 Data field is 1.55sec; So, one data field added to a component cost 0.05ms at component creation (it is higher than what I expected). Now for a more realistic scenario with 200 SphereModel created and initialized one extra data field rise the cost from 3.1 ms 3.2ms and that this is 'dialuated' in all the other cost (collision detection, mechanics). My question now is should we stop adding Data to Base or do we find a solution to decrease the cost of all the initData ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/44#issuecomment-276748182:183,test,test,183,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-276748182,1,['test'],['test']
Testability,"Hi all,. It seems there a lot of new test-scene failures since the merge of this PR. ; https://ci.inria.fr/sofa-ci/job/centos_clang-3.4_options/635/console. We probably need to fix that in a new PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/219#issuecomment-297932196:37,test,test-scene,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/219#issuecomment-297932196,1,['test'],['test-scene']
Testability,"Hi all,. It seems there is new test-scene failure since the merge of this PR. ; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""TriangleTopology""] Object type ""Bezier2MeshTopologicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""TriangleTopology""] Object type ""Bezier2MeshMechanicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTriangleSetTopologyContainer"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTetra2BezierTriangleTopologicalMapping"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierCubicTriangleTopology""] Object type ""BezierTriangleSetGeometryAlgorithms"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierTriangleMeshFromEngine""] Object type ""BezierTetrahedronSetTopologyContainer"" creation Failed; - examples/Components/topology/Bezier2MeshMechanicalMapping.scn: [ERROR] [DAGNode ""BezierTriangleMeshFromEngine""] Object type ""BezierTetrahedronSetGeometryAlgorithms"" creation Failed; .... more in the logs....; ; We need to fix that in a new PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/222#issuecomment-297932539:31,test,test-scene,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222#issuecomment-297932539,2,"['log', 'test']","['logs', 'test-scene']"
Testability,"Hi all,. Thank Erik for the review of this PR. It seems there is one scene test failure that may be related ""RuleBaseCollisionManager"". @ChristianDuriez any idea where this could come from ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/901#issuecomment-458522196:75,test,test,75,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/901#issuecomment-458522196,1,['test'],['test']
Testability,Hi all. @EulalieCoevoet @epernod @matthieu-nesme @thomas-lemaire @hugtalbot @guparan @fredroy . I suggest we use this issue for general communication about what is happening on the UX group either on github and/or on gitlab. . Please tell anyone interested to join/. Our general target for the next sofa release (17.06) is to ship a runSofa2 application. ; This means we only have less than 3 month. ; I suggest that in April & first day of May we add the missing features and we keep the last month to test and bug fix the software. . DM.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/187#issuecomment-291478457:503,test,test,503,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/187#issuecomment-291478457,1,['test'],['test']
Testability,"Hi bruno, thanks for this PR :). - It compiles nicely on the different targets on the CI,; - The implementation follows the unit-test of file monitor. . So it looks ok to me. @guparan ; Is there a way to make something like ([ci-fullbuild]) so that we see if there is compiler's warning in the PR code ? This could be really useful.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/109#issuecomment-267908657:129,test,test,129,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/109#issuecomment-267908657,1,['test'],['test']
Testability,"Hi dear reviewers,; I'm waiting for the ci-build, but I believe that the problems are now solved, and the fix now comes with a few unit tests =); @matthieu-nesme I also restored the static_assert that I previously removed so the code is not only better.; Any other suggestion?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/317#issuecomment-325378873:136,test,tests,136,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/317#issuecomment-325378873,1,['test'],['tests']
Testability,"Hi everyone, this this is an ""all in one"" branch that adds functions in Sofa ; before we can make a PR with the PSL plugin. The PR is two month old...no one complains and now all the added function are tested & documented so it may be merged soon.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/410#issuecomment-344618765:202,test,tested,202,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/410#issuecomment-344618765,1,['test'],['tested']
Testability,"Hi everyone. I just created a new branch (https://github.com/mimesis-inria/sofa/tree/cmtopology_module) where I put everything into a module called ""SofaCombinatorialMaps"" instead of using different existing sofa modules.; To test it, you just have to put the cgogn repository that @guparan extrated earlier into a sofa/modules/SofaCombinatorialMaps/cgogn2 directory and it should compile :crossed_fingers:.; I am able to launch examples/CMTetrahedralCorotationalFEMForceField.scn",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-412876226:226,test,test,226,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-412876226,1,['test'],['test']
Testability,"Hi fred,. You are right, an automated system to report the default values is better. . Your ""[shadowing] "" in the docstring make me wonder a more general question about datas that only have a meaning when an other parameter is enable. . To make a more user friendly sofa we should: ; - test the data this kind of pattern in the init function:; ```cpp; if( !d_shadowsEnabled.getValue() && d_shadowTextureSize.isSet()){; msg_warning(this) << ""The shadow are not enabled but the shadowTextureSize parameter is set. ""; ""To remove this warning you can either : ""; ""- enable the 'shadow' parameter. "" ; ""- remove the use of the shadowTextureSize parameter.""; }. - group and gray/ungrayed in the GUI the connected parameters. Do you think we could use the widget string in the Data field for that ?; ; DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/73#issuecomment-264118684:286,test,test,286,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/73#issuecomment-264118684,1,['test'],['test']
Testability,"Hi guillaume, . Many thanks for the links to the jenkins API, this will helps us in differentiating the tests. . I think the meaning of the colors depend on what the dash board is used for:; a) if the dash board is used to know what is the current state of the sofa code base (so answer the question: ""is this version of sofa good"") then, as you say, it should be red showing that something is bad. . b) but, if the dash board is used to get feedback of a given (personal) contribution (answering the question: ""did I introduced regression or is my contribution positive""). In this perspective a transition from green-to-red will be considered as:; - ""SHIT, I did something wrong !""; - ""OMG, other people will see that !""; - ""I quickly need to revert or fix that mess"". ; - ""But I have no time to fix the Sofa bug...so I remove the test i made showing an existing defect"" . From what I see in the defrost team the dash board is only use in the (b) situation and I regularly see people not commiting because they are afraid of putting the dash board to red. . Consequently and if we want to increase the number of commits (containing tests showing existing sofa defect) we should reward contributor with an positive feedback mecanism (whatever it is). DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277:104,test,tests,104,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277,3,['test'],"['test', 'tests']"
Testability,"Hi guys!. Thanks again, Bruno, for your suggestions! I'm happy to read you find the PSDE useful. I especially like your extension to allow for for automatic derivation of the types for Inputs. This was also one of my top ideas to improve the PSDE, but I didn't have any more time to pursue this development. In the next days I'll test your Pull Request and try to give feedback on the different topics discussed here!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392039499:330,test,test,330,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392039499,1,['test'],['test']
Testability,"Hi guys,. Actually I think this PR should not be merged in this state. It is a proof of concept to show the possibilities.; I just updated a scene that you can use to test the new components. The scene called ""TetrahedralCorotationalFEMForceField"" has two nodes. The first one uses ; the components ""VolumeTopologyContainer"" and ""CMTetrahedralCorotationalFEMForceField"" that are completely written using cgogn and ""MapTetrahedronSetTopologyContainer"" a compatibility wrapper that allows to use ""classical"" sofa components with cgogn. @damienmarchal concerning your questions:. - what the PR does precisely ?; - This PR adds a new data structure for handling meshes. This data structure is designed to handle dynamic (with topological changes) meshes.; - what is the existing state on this topic in Sofa (the title speak about dynamic topology...isn't there dynamic topology in Sofa since year) ?; - I think there is a pipeline for topological changes in Sofa. I do not know much about the efficiency of this pipeline. What I can say (I should provide figures) is that this data structure is as effective as the sofa ones in ""static"" scenarios and more effective and reliable in ""dynamic"" scenarios.; - how this PR handle the problem,; - by changing to a more appropriate data structure; - use CGOGN library... what is this CGOGN library ?; - a topological modeling kernel (see https://cgogn.github.io). I am not sure you need more information about it.; - argument on why the PR is it useful/mandatory/improvement, trying to convince people why they should spend time testing it,; - this work has been in progress since 3 years now. His interest has already been debated. I do not want to debate an infinite time on it. If someone is interested in topological changes, it should save him time.; - provide some idea on how invasive the PR will be (non breaking at all, breaking the SofaCore API, breaking existing scenes); - depends on the meaning of beaking. It does not change the sofa API for topolo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402690583:167,test,test,167,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402690583,1,['test'],['test']
Testability,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:66,test,test,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197,11,['test'],"['test', 'testing', 'tests']"
Testability,"Hi matt, . Can you have a look at my last version...the one that mimic the gtest API. ; It is not solving the point you are addressing but I see good things in this solution as it makes everything looking very consistant and in a test, no one complain there is a lot of EXPECT_ ... so adding few more to check the message behavior looks very fine to me. ; In addition it also report correctly where the problem arise instead of reporting that the problem happens in the base class. . Now about your suggestion... I like it because it is more like saying that everything that is not explicitely allowed is a failure and I really support that. I'm not yet sure how to mix the two things but we will find that ;). PS: have you noticed that if we makes warning a failure by default we will have +30 test failure in the current sofa (which is fine to me because these failures a either showing a problem or a not precise enough test). . EDIT: I may have a drafted mix between the two approach soon.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288691167:230,test,test,230,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288691167,3,['test'],['test']
Testability,"Hi matt,. 1) Color are not disabled in runSofa for me. It is only one line that disable them in Sofa_test.cpp and I don't see why it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:318,test,tests,318,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008,4,['test'],"['test', 'tests']"
Testability,"Hi matt,. I made a new version mixing you expectations and mine :) ; The implementation is probably drafty but I like the general API...; Two aspect I like is that:; - it is ""incremental"", each time you add more EXPECT_MSG_ in the code better are the narrowing of the errors. ; - the defaut mode can be specified in a Sofa_test<> as well as in fact into any object or function body; - it is stack based so we restore the context when an area is left. To give you a look of how it is (the V2 stuff are just transitional of course):; ```cpp; #include <SofaTest/Sofa_test.h>; using sofa::Sofa_test;. #include <SofaTest/TestMessageHandler.h>; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure wi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:616,Test,TestMessageHandler,616,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643,3,"['Test', 'log', 'test']","['TestMessageHandler', 'logging', 'test']"
Testability,"Hi matt,. I wanted to test a very basic approach based on completely reinitializing the Python environment ; you can have a look here: https://github.com/SofaDefrost/sofa/tree/reinit-plugin. But there is problem with numpy (an probably other modules) that does not support to be reloaded and crashing sofa. But if I comment the numpy parts it is working ok. . Now the challenge is either to fix the numpy crash or to come with a different approach (probably closer to what I implemented in the livecoding module) in which we don't destroy the python environment but only reload some of the modules. D",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/193#issuecomment-284719373:22,test,test,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/193#issuecomment-284719373,1,['test'],['test']
Testability,"Hi there, . I would bet on a mismatch between system python and user-installed python (osx, right?). You can probably find out by printing `sys.path` from a test sofa scene, and from a regular python script. If the path for the standard lib don't match you should see it, then adapt the python path in the cmake command.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/531#issuecomment-347198220:157,test,test,157,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-347198220,1,['test'],['test']
Testability,"Hi there,. You cannot load tests using the python binary because the sofa bindings are only available for the embedded interpreter. . There are some python tests under SofaTest/python IIRC.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/400#issuecomment-329794323:27,test,tests,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/400#issuecomment-329794323,2,['test'],['tests']
Testability,"Hi vlad, this PR has also been discussed during the dev meeting. ; The conclusions are the same as for the #4226 : we need more context/example of use (for instance to see how you use it in your scenes or plugin). . We are also curious to know how you handle differences between this and the group mechanism : what happens if you are in the same time in the same group and in the same layer ? Are the two mechanism really necessary ? ; It could be also possible to remplace the group mechanism by yours to have a more positive mechanism (same layer = collision instead of diffrent group = collision). But for this it would need to handle multiple layer by object. . And finally, again, some unit testing would be great if we manage to find a mechanism that suites every one.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4219#issuecomment-1757168402:696,test,testing,696,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4219#issuecomment-1757168402,1,['test'],['testing']
Testability,"Hi!; Here's a simple test scene showing the problem:; ```<?xml version=""1.0"" ?>; <Node name=""lroot"" gravity=""0 -9.81 0"" dt=""0.02"">; <Node name=""Liver"">; <EulerImplicitSolver name=""cg_odesolver"" rayleighStiffness=""0.1"" rayleighMass=""0.1"" />; <SparseLDLSolver saveMatrixToFile=""true""/>; <!-- <CGLinearSolver name=""linear solver"" iterations=""1000"" tolerance=""1e-09"" threshold=""1e-09"" /> -->; <MeshGmshLoader name=""meshLoader"" filename=""mesh/liver.msh"" />; <TetrahedronSetTopologyContainer name=""topo"" src=""@meshLoader"" />; <MechanicalObject name=""dofs"" src=""@meshLoader"" />; <TetrahedronSetGeometryAlgorithms template=""Vec3d"" name=""GeomAlgo"" />; <DiagonalMass name=""computed using mass density"" massDensity=""1"" />; <TetrahedralCorotationalFEMForceField template=""Vec3d"" name=""FEM"" method=""large"" poissonRatio=""0.3"" youngModulus=""3000"" computeGlobalMatrix=""0"" />; <FixedConstraint name=""FixedConstraint"" indices=""3 39 64"" />; <Node name=""BUG"" >; <MechanicalObject name=""MO"" position=""1 1 1 2 2 2 3 3 3"" />; <Sphere radius=""1"" />; </Node>; </Node>; </Node>; ```. I have a very bad comprehension of these things, but apparently, Sofa concatenates the points in the mechanical object ""/dofs"" and ""/BUG/MO"", even though there is no mapping to link both objects.; If you replace the SparseLDLSolver by the CGLinearSolver, it will work, but that's because CG doesn't invert the matrix.; I am reporting @IPeterlik's explanations here, but Igor can undoubtedly explain better than me what's actually happening here.. :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390925346:21,test,test,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390925346,1,['test'],['test']
Testability,"Hi, ; I think I have solved the test problem.. by changing the test ! ; It was not designed to take into account the tolerance of the solver...; see commit:; https://github.com/fjourdes/sofa/commit/78b84592651836809078c18971300f6abde6806a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/459#issuecomment-387922879:32,test,test,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-387922879,2,['test'],['test']
Testability,"Hi, ; could you specify which version of CGAL and which version of SOFA you are using.; Could you past the error log as well; Thanks",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1334#issuecomment-621363273:113,log,log,113,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1334#issuecomment-621363273,1,['log'],['log']
Testability,"Hi,. Could you put your scene example here and the error message you get.; The Geomagic plugin just create SOFA components to be used in the scene graph so there should be no interference with the SofaPython3 mechanism.; But nothing is better than testing! 😄",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3185#issuecomment-1327155580:248,test,testing,248,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3185#issuecomment-1327155580,1,['test'],['testing']
Testability,"Hi,. Thanks for this PR and nice work. . This PR: ; - [ ] succeed to be compiled on each configuration on the CI.; - [ ] does not generates new warnings or test failure. ; - [ ] does not break existing scenes.; - [ ] does not break API compatibility. ; - [x] is now 1 week old. Once the CI will confirm nothing is broken and upon @matthieu-nesme agreement I suggest we merge this PR without waiting 1 week :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/139#issuecomment-273764567:156,test,test,156,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-273764567,1,['test'],['test']
Testability,"Hi,. What is exactly the ""Haptic module""? It's weird that is tries to use directly the constructors. You are right that the constructors are protected, so they cannot be used. So I am curious to know if this code ever worked.... To fix the code, you should have a look on the [tutorials](https://github.com/sofa-framework/sofa/tree/master/applications/tutorials), for example this line: https://github.com/sofa-framework/sofa/blob/master/applications/tutorials/oneTetrahedron/oneTetrahedron.cpp#L94; It uses the friend class `New` to instantiate the objects. There are also many examples in the unit tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4336#issuecomment-1840186364:600,test,tests,600,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4336#issuecomment-1840186364,1,['test'],['tests']
Testability,"Hi,. nice to have you back!. I think the fact that the ```doLoad``` is called 3 times is because your callback is not connected to all your output data at the same time. So each time you ask for a data independently it will relaunch the callback. Then the second point is because you don't override the method ```doClearBuffers```. you can see how ```meshObjLoader``` has been updated in commit ca3a1a4 (I don't know how to link the commit here...); date of the commit: Date: Wednesday, June 24, 2020 2:26:41 PM. I didn't know this loader. It would be nice if you could push a small example with it's mesh in the main repository of SOFA. Like for the other meshloader in: examples/Components/loader/ ; Moreover as soon as a scene is set, it would be tested by the CI of SOFA.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1534#issuecomment-711993815:750,test,tested,750,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1534#issuecomment-711993815,1,['test'],['tested']
Testability,"Hi,. yes you are right, thanks!; Do you have a small use case where you could see that bug? (it could be helpful to create a test). Could you push the fix in a PR?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1213#issuecomment-553807961:125,test,test,125,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1213#issuecomment-553807961,1,['test'],['test']
Testability,"Hi,; I have also been away for the last 2 weeks, so couldn't test more. Yes, I suspect this is an issue with Wayland, I can probably test that on Friday. It should not matter whether ubuntu is 22.04 or 24.04. Btw, I'll be in Lille from 25/11 to 30/11: https://wiki.2rm.cnrs.fr/AnfRust2024, same as sofa week, so we may find another discussions place there :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2459720224:61,test,test,61,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2459720224,2,['test'],['test']
Testability,"Hi,; thank you for the report and the scene. I have tested on my side and I also have an... helicopter motion.; I will work on it... hopefully this week, or next week. ++erik",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4833#issuecomment-2230189137:52,test,tested,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4833#issuecomment-2230189137,1,['test'],['tested']
Testability,"Hi. I completely thought it was fromModels and toModels. I'll test with input and output, thanks!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1293#issuecomment-605438196:62,test,test,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1293#issuecomment-605438196,1,['test'],['test']
Testability,"Hmmm ok, the Add*.scn are created with empty topo and then topology is created.; Warning is logic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1199#issuecomment-547830019:92,log,logic,92,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1199#issuecomment-547830019,1,['log'],['logic']
Testability,Houston we got a problem: https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.8_options-debug/545/testReport/,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/410#issuecomment-346931244:93,test,testReport,93,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/410#issuecomment-346931244,1,['test'],['testReport']
Testability,However it seems to add a failing test on the CI: could this be due to the differences noticed between your machine and the CI?; @epernod @guparan,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1581#issuecomment-724770470:34,test,test,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1581#issuecomment-724770470,1,['test'],['test']
Testability,"Hum, yes, I only tested that on NixOS, sorry. I'll try on ubuntu, with x11 and wayland. I guess this is only a matter of selecting the correct QT_QPA_PLATFORM or something.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2418799849:17,test,tested,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2418799849,1,['test'],['tested']
Testability,"I actually just used grep to parse clang's compilation output to find the files and lines where the warning occurred, then sed to add the override keyword. I didn't do all plugins so there might still be a lot to add. But for the ones I went through, the number of override warnings went from over 1000 to none (with clang 5 on Linux).; It's true that I didn't test on Mac... At least now when we add override somewhere it should remove warnings rather than add more.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/423#issuecomment-333872909:361,test,test,361,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/423#issuecomment-333872909,1,['test'],['test']
Testability,"I added a test (FileRepository_test) empathizing the problem.; Successing on linux, failing on windows.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/17#issuecomment-248837757:10,test,test,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/17#issuecomment-248837757,1,['test'],['test']
Testability,"I agree that maintaining those ifdef are quite cumbersome and there are probably easier ways to manage this. Just a small remark, while arithmetic operations on double are probably faster than float (well, at least on most of our hardware), using float might minimize cache misses and might, with the help of compiler optimisations, produce faster execution times on memory intensive application (like SOFA) . I think we should test this before removing floats from everywhere. If we got different results, maybe we could set a default floating type for the entire Sofa, and allow modules to change this default value for their components.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/827#issuecomment-438663241:428,test,test,428,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/827#issuecomment-438663241,1,['test'],['test']
Testability,"I agree that we should embed the 'muted' test in the macro ; msg_info() << ""Emitted only when InfoMessageLevel is not Muted""... The macro trick should work with clang (but didn't tested) so now we could vote for the version we prefer. ; @matthieu-nesme, @hugtalbot, @thomas-lemaire, @bcarrez, @epernod, @EulalieCoevoet, @fredroy . Which one would you prefer to use: ; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info(other) << ""I'm a message from the 'other' component...""; msg_info(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; or; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info_from(other) << ""I'm a message from the 'other' component...""; msg_info_from(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; or; ```cpp ; msg_info() << ""I'm a message from the 'this' component...""; msg_info_component(other) << ""I'm a message from the 'other' component...""; msg_info_name(""NotAComponent"") << ""I'm a message emitted not from a component...""; ```; Please answer 1,2 or 3 :) . PS1: In case you prefer something else...please explain a bit; PS2: sout/serr will be fixed independently. ; During a transitional period we should make a macro that maps sout to msg_info and serr to msg_warning. PS 3: @thomas-lemaire I have added the muted test to the branch.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281687351:41,test,test,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281687351,3,['test'],"['test', 'tested']"
Testability,"I agree. I also have to modify the SOFA_BUILD_COMPONENTSET to change the levels from core/full/deprecated to core/light/standard/full where:; - core contains only the ""glue"" of sofa (simulation, framework, ...); - light contains a restricted/basic set of components (to be defined); - standard contains most sofa components and features; - full = standard + deprecated components/tests. Hopefully this will be done by the end of this week.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334384140:380,test,tests,380,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334384140,1,['test'],['tests']
Testability,I also would like to get rid of the failure in Utils:; https://ci.inria.fr/sofa-ci/job/centos_clang-3.4_options/1522/testReport/. Here is the associated msg_warning:; [WARNING] [Utils::widenString()] Invalid or incomplete multibyte or wide character. Could it be because this one is changing the locale and depending on the system things goes wrong with the french character used in the string ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335428709:117,test,testReport,117,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335428709,1,['test'],['testReport']
Testability,I am catching up with all PRs of the last four weeks.; @pedroperrusi I would be awesome if you could contribute a test ensuring that we detect the possible problem induced. Would you agree?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2265#issuecomment-891708693:114,test,test,114,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2265#issuecomment-891708693,1,['test'],['test']
Testability,"I am not able to reproduce this issue. I close it for now, but if you have time @jnbrunet and @AndreaMendizabal test it again and re-open the issue if necessary. I tried to run the mentioned scene. Result: an error message without crash; ```; [ERROR] [SparseGridTopology(SparseGridTopology1)] vertex 0 not found in hexahedral topology; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1748#issuecomment-1152390531:112,test,test,112,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1748#issuecomment-1152390531,1,['test'],['test']
Testability,I am not on Ubuntu. It seems to be a problem with a test in the Flexible plugin.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/459#issuecomment-389593983:52,test,test,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-389593983,1,['test'],['test']
Testability,"I am not sure it is necessary to integrate the logger. It makes the code more complex, and IMO nobody will use it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3515#issuecomment-1333575575:47,log,logger,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3515#issuecomment-1333575575,1,['log'],['logger']
Testability,"I am not sure of the consequence to change the maps, but if :; - the tests (yours + current scene tests) behave exactly the same,; - it is easy to revert in case we find drawbacks later on. I am ok with that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2047#issuecomment-829324334:69,test,tests,69,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2047#issuecomment-829324334,2,['test'],['tests']
Testability,"I am not sure we want to add it manually to each test.; It would be better if it could be added automatically to any Sofa_test, as it would satisfy 99% of the tests.; It would be more convenient to have extra stuff only for the more complicated tests that raise an error on purpose.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288463882:49,test,test,49,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288463882,3,['test'],"['test', 'tests']"
Testability,"I am on Windows and did not try on Linux, so my hopes still hold as long as that yellow dot does not become a cross for the windows VS build :D. The error on the linux build seem trivial fortunately. However it stopped at the first error... Would it be possible for the build system not to stop at this first error and try compiling the remaining ? Since I cannot test on every platform/os that would be valuable to have all potential error at once.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/262#issuecomment-305322072:364,test,test,364,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/262#issuecomment-305322072,1,['test'],['test']
Testability,"I am vsync-limited on my setup so cannot really test.; Lets simply revert this PR, I will see later",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2458#issuecomment-967174468:48,test,test,48,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2458#issuecomment-967174468,1,['test'],['test']
Testability,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:99,test,tests,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243,8,['test'],"['testing', 'tests']"
Testability,"I benchmarked only TetrahedronFEMForceFieldScene:. Before; ```; ------------------------------------------------------------------------------------------------------------------------; Benchmark Time CPU Iterations UserCounters...; ------------------------------------------------------------------------------------------------------------------------; BM_Scene_bench_StepFactor<TetrahedronFEMForceFieldScene>/512 3197 ms 3188 ms 1 FPS=160.627/s frame=6.22559ms; BM_Scene_bench_StepFactor<TetrahedronFEMForceFieldScene>/1024 6434 ms 6438 ms 1 FPS=159.068/s frame=6.28662ms; BM_Scene_bench_StepFactor<TetrahedronFEMForceFieldScene>/2048 12923 ms 12938 ms 1 FPS=158.3/s frame=6.31714ms; BM_Scene_bench_StepFactor<TetrahedronFEMForceFieldScene>/4096 26074 ms 26062 ms 1 FPS=157.161/s frame=6.36292ms; ```. After. ```; ------------------------------------------------------------------------------------------------------------------------; Benchmark Time CPU Iterations UserCounters...; ------------------------------------------------------------------------------------------------------------------------; BM_Scene_bench_StepFactor<TetrahedronFEMForceFieldScene>/512 3128 ms 3125 ms 1 FPS=163.84/s frame=6.10352ms; BM_Scene_bench_StepFactor<TetrahedronFEMForceFieldScene>/1024 6343 ms 6344 ms 1 FPS=161.419/s frame=6.19507ms; BM_Scene_bench_StepFactor<TetrahedronFEMForceFieldScene>/2048 12693 ms 12656 ms 1 FPS=161.817/s frame=6.17981ms; BM_Scene_bench_StepFactor<TetrahedronFEMForceFieldScene>/4096 25060 ms 25062 ms 1 FPS=163.431/s frame=6.11877ms; ```. It's not very significative since it is run only once, but it tends to confirm that the changes do accelerate the simulations.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2647#issuecomment-1025485195:2,benchmark,benchmarked,2,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2647#issuecomment-1025485195,3,"['Benchmark', 'benchmark']","['Benchmark', 'benchmarked']"
Testability,"I call that 'un doigt dans l'engrenage', nice ! . I totally agree on the fact that those methods should be final otherwise the 'delegate' pattern used here makes no sense because we cannot trust it for child class... . But then I don't fully agree on the protected part : it might become cumbersome to test them in unit test with such protection . It might be good to understand why those base methods where overridden instead of the ""delegate' one, maybe old artifact on un-refactored components ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2315676097:302,test,test,302,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2315676097,2,['test'],['test']
Testability,I cannot test myself on window but:; - the tests is not failing anymore. ; - no new tests are failing. ; - I don't think the new boost dependency is a problem. . I let @matthieu-nesme (who made the issue #17) to make the final decision.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/99#issuecomment-266705530:9,test,test,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/99#issuecomment-266705530,3,['test'],"['test', 'tests']"
Testability,I changed a little bit the unit tests. I will add a last commit in a few minutes,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-329419961:32,test,tests,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-329419961,1,['test'],['tests']
Testability,I checked the QuaterTest **EulerAngles** and it is not using code touched by this PR. This sounds like another blinking error test. ; Ok to open an issue on that but it is not related to this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1449#issuecomment-679390995:126,test,test,126,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1449#issuecomment-679390995,1,['test'],['test']
Testability,I close this pull-request because of a problem in one test. I will recreate one when the problem will be fixed.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/69#issuecomment-263152451:54,test,test,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/69#issuecomment-263152451,1,['test'],['test']
Testability,"I did not manage to compile it fully. SofaDenseSolver is now ok but not the remaining of Sofa. I started to fix some errors, however it seems that this feature was not actively maintained recently. ; With latest commit it should compile but it gives weird runtime visualization. (Windows VS2015 also); ![image](https://cloud.githubusercontent.com/assets/9134757/26287521/acf354d4-3e7d-11e7-8e6f-bc5d1a2e6ca2.png); ![image](https://cloud.githubusercontent.com/assets/9134757/26287526/b7ce280c-3e7d-11e7-8262-c22a7fc16069.png); ![image](https://cloud.githubusercontent.com/assets/9134757/26287527/c4514e1a-3e7d-11e7-96e3-a18bcf007403.png). If the feature is a must-have, maybe the CI should test with float-only and double-only instead of ""both"" ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/262#issuecomment-302964842:689,test,test,689,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/262#issuecomment-302964842,1,['test'],['test']
Testability,"I did some tests with and without the code in the reinit of the mechanicalObject, appently it only change the value of the Data P0 but the result is the same (see pic right is without the code and left with); Thus I'm going to just remove the code. ![screenshot from 2017-05-17 19-01-03](https://cloud.githubusercontent.com/assets/21199245/26166261/3e1ebe42-3b33-11e7-83e2-e056ad7a3e56.png)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/162#issuecomment-302155571:11,test,tests,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/162#issuecomment-302155571,1,['test'],['tests']
Testability,"I do understand the idea.; But I guess it should be possible to got only one component, let's call it `WarningAndErrorInGTest`, that would be created directly in Sofa_test (so added to every tests).; This component would have two tristates `{not_expected,expected,nothing}`, one for warnings and one for errors.; By default both states would be set to `not_expected`, such as by default every sofa warnings/errors would raise a gtest error.; It would be enough for most of the tests, so the user has NOTHING to do when writing its tests (and it would work for any existing tests, incl. plugins'). For more complex tests like in your example, rather than creating; `ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;; `; you could write something like:; `this->warningAndErrorInGTest.warningState = expected;`. It is as explicit, not heavier, and even more flexible, as you can switch the state during the test (w/o having to delete objects and creating new ones). I am note sure to be clear enough, do you follow me?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630:191,test,tests,191,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630,6,['test'],"['test', 'tests']"
Testability,I don't have test yet.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-703543088:13,test,test,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-703543088,1,['test'],['test']
Testability,I don't know if this test has ever been working properly...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1174#issuecomment-539879728:21,test,test,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1174#issuecomment-539879728,1,['test'],['test']
Testability,"I don't know... Some digging is needed. ; Eg the topology is ""mandatory"" because the checkAttributes test is calling ""init"" which emit an error if there is no topology. So do we add a topology or to we allow an MSG_EXPECT(Error) ? . The one about rigid is simpler as we simply this test is supposed to fail so it actually needs an MSG_EXPECT()",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/832#issuecomment-440233295:101,test,test,101,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/832#issuecomment-440233295,2,['test'],['test']
Testability,"I don't know...it seems to be on ; CylinderGridTopology_test.cylinderGridCreation. Which are modified recently by this PR https://github.com/sofa-framework/sofa/pull/133 this seems to be not related to your request. @epernod any idea ? . EDIT: I found the problem... this is not PR133. It is in fact related to the fact is we are re-using the same build directory to compile all the PR and that this directory is not cleaned. This morning PR164 added a new test, then PR165 compiled, and execute every thing bin/*_test. But the added test was compiled against a different version of the sofa libraries resulting in crash. I fixed the CI so everything should back to the normal (or will severely crash because I edited the script of the running CI;))",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/165#issuecomment-278916519:457,test,test,457,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/165#issuecomment-278916519,2,['test'],['test']
Testability,"I don't really think it is related to this PR, it has been quite a long time now that some SofaPython3 tests are failing, especially on macOS.; It does not happen on Ubuntu though apparently.; And it seems there is no unit tests of SofaPython3 on Windows ...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831186824:103,test,tests,103,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831186824,2,['test'],['tests']
Testability,I don't think that warnings are considered as failure in the tests,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4725#issuecomment-2114505453:61,test,tests,61,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4725#issuecomment-2114505453,1,['test'],['tests']
Testability,"I don't think the minus operator should behave differently. The Rigid is just a container of a Vec3d and a Quaternion. Doing a subtraction element by element is something natural and quite expected when doing so. What is done here is equivalent to a Transform multiplication by the inverse (T1*T2^{-1}) , which attach more meaning to the rigid than just a container. So, this is just a different use-case I guess, maybe this could be added to the rigid as the operator/, it would be somewhat more logical...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3680#issuecomment-1453155623:497,log,logical,497,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3680#issuecomment-1453155623,1,['log'],['logical']
Testability,"I don't think,. Graying out things, and more generally having them grouped in logical block, (as in http://doc.qt.io/qt-5/qtwidgets-widgets-groupbox-example.html) allow the user to very easily quickly understand the underlying logic that connect the fields. In addition graying things out is part of the user interface which, if well done should be separated as much as possible from your the functional logic of the component. Consequently I'm not sure that refactoring the internal logic of a component to please the GUI level is the way to go. . The difficulty with Sofa is that the components's data field (BaseObject) coherency checking is done by the component during init/reinit and the logic behind can be really complex (i.e. not just exclusive relation). We don't want to duplicate this logic at the GUI level. So...now I wonder if one solution could be to just set the ReadOnly flag in the Data during the init/reinit as well as when data changes and refresh the widget panel each time we are changing something. . This would result in the following processing: ; GUI -> Data(enableShadow) -> reinit()/update() -> change other data to be readOnly -> GUI redisplay",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/235#issuecomment-378953698:78,log,logical,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/235#issuecomment-378953698,6,['log'],"['logic', 'logical']"
Testability,"I don't understand why a single map: tag => stack would not work: for each component, iterate over each of its tags, lookup the corresponding stack in the map and take the topmost shader in the corresponding stack. That's a total O(k * log(k)) for each component, which is O(1) if k is small/bounded. I mean the whole point of using a stack was to avoid linear searches upwards in the first place, so I don't see how using a single stack improves the situation if you have to walk the whole stack upwards before finding the right shader? . It's both more complex than it is now *and* sub-optimal.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/292#issuecomment-306744462:236,log,log,236,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/292#issuecomment-306744462,1,['log'],['log']
Testability,I dont know if it is linked with this PR but one additional scenes is failing `SceneTests.examples/Benchmark/TopologicalChanges.ProjectDirectionConstraint_RemovingMeshTest.scn` ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2589#issuecomment-1017448408:99,Benchmark,Benchmark,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2589#issuecomment-1017448408,1,['Benchmark'],['Benchmark']
Testability,"I dont think the fix is good ; the ""toMatrix()"" is available for Mat3x3 but not for Mat4x4 (there was a ` toMatrix` for Mat4x4 but it was deleted and replace with `toHomogenousMatrix()` ).; This RigidCoord::toMatrix() is templated on the Mat type actually, and is really ill-formed (no assert on the size of the given matrix, etc).; I think the solution is to either:; - test if the matrix is 3x3 or 4x4 (and failed to compile with a message with a static assert) and calling the respective ` toMatrix()` or ` toHomogenousMatrix ()` ; - or remove the template, force it to Mat3x3 and create an other `toHomogenousMatrix` in RigidCoord. Consisntent with Quat but duplicating code and breaking. I am more for the first solution. > Thanks for your contribution. I wonder how it was not detected before. I guess this was not detected before because nobody was calling RigidCoord::toMatrix with a Mat4x4 with the code compiled on the CI. Actually, nobody calls RigidCoord::toMatrix, either with mat3 or mat4 apparently.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3360#issuecomment-1267742881:286,assert,assert,286,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3360#issuecomment-1267742881,3,"['assert', 'test']","['assert', 'test']"
Testability,"I guess the one main problem you have if you warm start by default, is that if any changes in the topology has occurred since the last step the previous solution vector may not be resized nor initialised properly ? Have you got any example to test that ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/365#issuecomment-321609546:243,test,test,243,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/365#issuecomment-321609546,1,['test'],['test']
Testability,"I have added a bunch of new functions and a draft on how to implement force field in python. . It taste like that:; ```python; class MyForceField(Sofa.Core.BaseForceField):; def __init__(self, *args, **kwargs):; Sofa.Core.BaseForceField.__init__(self, *args, **kwargs). def addForce(self, m, f, x, v):; n = numpy.ones((1000,1)); f = x * 2 + n; ; class Test(unittest.TestCase):; def test_animation(self):; node = Sofa.Node(""root""); node.addObject(""DefaultAnimationLoop"", name=""loop""); node.addObject(""EulerImplicit""); node.addObject(""CGLinearSolver""); object1 = node.addChild(""object1""); c = object1.addObject(""MechanicalObject"", position=[0,0,0]*1000); d = object1.addObject(MyForceField(""customFF"")). SingleSimulation.init(node); for i in range(10):; SingleSimulation.animate(node, 0.01); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/771#issuecomment-428036943:352,Test,Test,352,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/771#issuecomment-428036943,2,['Test'],"['Test', 'TestCase']"
Testability,"I have corrected the test scripts as they were retrieving and error with the class definition from the previous definition. Now it compiles succesfully and passes all the tests. Sorry for using multiple accounts for commiting, but I had to change PC in the last days and I did not realize that the one I was using already had a linked account.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3944#issuecomment-1598530028:21,test,test,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3944#issuecomment-1598530028,2,['test'],"['test', 'tests']"
Testability,"I have identified the actual issue in ```$sofa_dir/Sofa/GUI/Qt/libQGLViewer/QGLViewer/CMakeLists.txt```:; - line 124 has a few mentions of ```/${PROJECT_NAME}``` too much, removing these at least reduces the header install path to ```$sofa_dir/build/install/include/extlibs/QGLViewer/QGLViewer/*.h```; - for some reason the ```MOC_HEADER_FILES``` (line 21 ff.) are not considered for copying by your ```sofa_create_package_with_targets``` macro. For testing I have simply copied the headers listed in ```MOC_HEADER_FILES``` to the ""normal"" ```HEADER_FILES```. This does not affect the build and finally copies the previously missing MOC headers to the install include directory. I can make a pull request for this. Or I can wait a bit if someone has an idea on how to properly copy/install the MOC_HEADERS without the redundant mentioning in both header lists.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4196#issuecomment-1734430674:450,test,testing,450,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4196#issuecomment-1734430674,1,['test'],['testing']
Testability,I have restored the recursive version because I see the advantage of handling vector of vector and I have no example of problematic case in mind.; I added two tests to validate this behavior.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308106140:159,test,tests,159,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308106140,1,['test'],['tests']
Testability,"I have tested both mass on a triangulation and tetra mesh, seems to work. Let's see the CI.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1212#issuecomment-551921002:7,test,tested,7,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1212#issuecomment-551921002,1,['test'],['tested']
Testability,"I have tried that, but is not running yet correctly. I get the same assert. ```; xNObject = coarseObject.addChild(""xN""); xN_mo = xNObject.addObject(""MechanicalObject"", template=""Vec1"", name=""xN_MO"", size=3); xN_mo.rest_position = np.array([[0,0.25,0.75]]).T; ```. Is the assignment to rest_position correct?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1517#issuecomment-703709218:68,assert,assert,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1517#issuecomment-703709218,1,['assert'],['assert']
Testability,I just added changes to fix warnings created by the missing override and the ordering of data between declaration and initialization in header. [ci-build] [with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/497#issuecomment-340510526:167,test,tests,167,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/497#issuecomment-340510526,1,['test'],['tests']
Testability,"I just added the performances tests... not very significant on ""classical"" scenes. So for the moment I suggest keeping the two version of DataContentValue<> but merge de PR to remove the dependency to DataTypeInfo.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2285#issuecomment-910387440:30,test,tests,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2285#issuecomment-910387440,1,['test'],['tests']
Testability,"I just checked, this is the same for other topologies. For example if you take the scene: Demos/TriangleSurfaceCutting.scn and add change the mechanicalObject like this:; `<MechanicalObject translation=""10 0 0""/>`. in MeshGmshLoader: x[0] = [0; 10; 0] // logical; in MechanicalObject: x[0] = [10; 10; 0] // logical; in TriangleSetTopologyContainer: x[0] = [0; 10; 0] // because position=@meshLoader.position; in OglModel: x[0] = [10; 10; 0] // due to identityMapping. The problem in the regularGrid case is that if you change the value the position to match the mechanicalObject, you need to apply transformation to all child node. (the code I removed in the PR #324 ). I'm not sure what should be the good way to act?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/308#issuecomment-315030239:255,log,logical,255,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/308#issuecomment-315030239,2,['log'],['logical']
Testability,"I just cherry-picked Anatoscope's changes related to SofaPython (excl. PythonScriptController that comes in #283).; It seems huge, but it is simply:; - mainly cleaning-up,; - adding bindings,; - refactoring python-tests. More cleanings are coming, and waiting for #283 and #286.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/304#issuecomment-308411143:214,test,tests,214,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-308411143,1,['test'],['tests']
Testability,"I just did a quick test in a simple scene (horizontal beam with downward force at one end), and the Newton static solver does *not* converge with the TetrahedronFEMForceField in single precision, using a CGSolver in double precision. The problem may be with the addDforce function used by CG, but it would need some more investigating. So basically, we can't simply switch to single precision without checking everything that could be sensitive to numerical errors (but I agree that it would be better if we could use mostly single precision).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/495#issuecomment-340728191:19,test,test,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-340728191,1,['test'],['test']
Testability,"I just had a look on the implementation of `FullVector`. I notice the following differences between `operator[](Index i)` and `element(Index i)`:. - `element(Index i)` is virtual; - `element(Index i)` returns necessarily a `SReal` independent from the type of `FullVector`. It may lead to a type conversion therefore an impact on the performances. But usually, all the components are compiled with `SReal`, so I am not sure there is a conversion here. So it should not affect the performances. I am confused here, because I cannot believe that the speedup you get is only because of the virtual function. I guess you can try again your benchmark, but instead of using `operator[](Index i)`, use `FullVector<Real>::element(Index i)`. Note that I force the `element` function to be the one in `FullVector<Real>`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3231#issuecomment-1236791920:636,benchmark,benchmark,636,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3231#issuecomment-1236791920,1,['benchmark'],['benchmark']
Testability,I just implemented DataFileName binding. This PR could be merged as soon as the regression tests are moved somewhere else (the idea is to create a new git containing all regression tests with associated scenes and data).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/171#issuecomment-285009182:91,test,tests,91,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/171#issuecomment-285009182,2,['test'],['tests']
Testability,"I just noticed this PR is adding new feature without providing associated tests.; It would be great to have two tests, one validating the old behavior and one validating the new one.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/283#issuecomment-308230210:74,test,tests,74,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-308230210,2,['test'],['tests']
Testability,"I just spent a significant amount of time to understand how we play with GTest and XML outputs in SOFA.; Printing a call stack should be done with #191 + #195. ; But there is still a problem in our way to report unit tests.; Currently what we do is to run all our tests with `--gtests_output:xml`. This is OK but sometimes we have crashes (often due to segfaults) in our tests. When a test crashes, it just stops. All the other steps/functions/cases are skipped and the XML output is not created.; So currently, for each crash, we are losing results. This brings me a question: should we (1) handle the lost tests for each crash or (2) change the way we use GTest and detect crashes as failures? Is (2) even possible with segfaults?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/149#issuecomment-284763976:217,test,tests,217,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/149#issuecomment-284763976,5,['test'],"['test', 'tests']"
Testability,"I just tested it, it works :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1668#issuecomment-750883623:7,test,tested,7,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1668#issuecomment-750883623,1,['test'],['tested']
Testability,"I just tested this on SP3/Windows out-of-tree, and it works. Not sure why the Windows CI post-job failed, but it looks unrelated to this PR. I will merge this now since we need it quickly for the release.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1708#issuecomment-759584141:7,test,tested,7,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1708#issuecomment-759584141,1,['test'],['tested']
Testability,"I know this PR doesn't touch that file, but since we're looking at enhancing the tests for this component, I noticed that the way the FixedConstraint_test checks for the SparseLDLSolver (and in general how we should check for the presence of modules) could be improved",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/718#issuecomment-411335581:81,test,tests,81,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/718#issuecomment-411335581,1,['test'],['tests']
Testability,I like new tests so thanks for your PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/289#issuecomment-306480023:11,test,tests,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/289#issuecomment-306480023,1,['test'],['tests']
Testability,I made an unitary test to compare the results of the LDL solver to those of the LU solver. The difference goes up to 9e-13. I would have like to compare LU and Cholesky to see if that difference is realy significative.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3010#issuecomment-1191475068:18,test,test,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3010#issuecomment-1191475068,1,['test'],['test']
Testability,"I made some tests on godbolt, but I was not able to reproduce the crash. In any case, one day it would be great to remove the public inheritance from `std::vector` (but SofaCUDA probably doesn't agree).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4180#issuecomment-1724957130:12,test,tests,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4180#issuecomment-1724957130,1,['test'],['tests']
Testability,I made some tests with the scene with the single big system:. 1system_without_CollisionGroupManager; 1000 iterations done in 5.63715 s ( 177.394 FPS). 2systems_with_CollisionGroupManager; 1000 iterations done in 8.45474 s ( 118.277 FPS). . 2systems_without_CollisionGroupManager; 1000 iterations done in 4.78311 s ( 209.069 FPS). . And here is the result of the simulation:; ![groupmanager](https://user-images.githubusercontent.com/10572752/118659838-f4600e00-b7ed-11eb-8b47-2a8724e1e2b0.gif); From top to bottom:; - 1system_without_CollisionGroupManager; - 2systems_with_CollisionGroupManager; - 2systems_without_CollisionGroupManager. We can observe that 1system_without_CollisionGroupManager and 2systems_without_CollisionGroupManager behave similarly and both are fast. 2systems_with_CollisionGroupManager is different and twice slower.; This is not what we expected.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2089#issuecomment-843176724:12,test,tests,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2089#issuecomment-843176724,1,['test'],['tests']
Testability,"I might have emmêlé mes pinceaux with the ""based on"". It is based on because I've added the class `Renamed` in the other PR, but in the end, it would have been more logical to do it separately. What you really have to look at are the commits [1384deb](https://github.com/sofa-framework/sofa/pull/4324/commits/1384deba11b6b402dd4318ca14b1c215e31520cc) and [7bf84de](https://github.com/sofa-framework/sofa/pull/4324/commits/7bf84dee24d6a66224b94390d7db22c4394a33db). The rest are on the other PR",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4324#issuecomment-1833328041:165,log,logical,165,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4324#issuecomment-1833328041,1,['log'],['logical']
Testability,"I presume it has nothing to do with Flexible, but it rather seems related to the mstate size. Maybe the test could be fixed, but what is important to notice is that this PR can have unexpected behaviors with existing code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/243#issuecomment-311600437:104,test,test,104,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-311600437,1,['test'],['test']
Testability,"I ran the benchmark in https://github.com/alxbilger/SofaBenchmark/blob/main/SofaBenchmarkScenes/src/SofaBenchmarkScenes/linearsolver/SparseLDLSolver.cpp:. # `applyPermutation=""false""`. ```; -------------------------------------------------------------------------------------------------------------------; Benchmark Time CPU Iterations UserCounters...; -------------------------------------------------------------------------------------------------------------------; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/2 1000 ms 1000 ms 1 FPS=200/s frame=5ms; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/4 2043 ms 2016 ms 1 FPS=198.45/s frame=5.03906ms; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/8 4050 ms 4047 ms 1 FPS=197.683/s frame=5.05859ms; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/16 8135 ms 8125 ms 1 FPS=196.923/s frame=5.07812ms; BM_Scene_bench_StepFactor<SparseLDLSolverScene>/512 2606 ms 2562 ms 1 FPS=199.805/s frame=5.00488ms; BM_Scene_bench_StepFactor<SparseLDLSolverScene>/1024 5261 ms 5250 ms 1 FPS=195.048/s frame=5.12695ms; BM_Scene_bench_StepFactor<SparseLDLSolverScene>/2048 10407 ms 10406 ms 1 FPS=196.805/s frame=5.08118ms; ```. # `applyPermutation=""true""`. ```; -------------------------------------------------------------------------------------------------------------------; Benchmark Time CPU Iterations UserCounters...; -------------------------------------------------------------------------------------------------------------------; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/2 1581 ms 1562 ms 1 FPS=128/s frame=7.8125ms; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/4 3114 ms 3141 ms 1 FPS=127.363/s frame=7.85156ms; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/8 6271 ms 6281 ms 1 FPS=127.363/s frame=7.85156ms; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/16 12554 ms 12609 ms 1 FPS=126.89/s frame=7.88086ms; BM_Scene_bench_StepFactor<SparseLDLSolverScene>/512 3960 ms 3969 ms 1 FPS=12",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2762#issuecomment-1060704325:10,benchmark,benchmark,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2762#issuecomment-1060704325,2,"['Benchmark', 'benchmark']","['Benchmark', 'benchmark']"
Testability,I really don't see the link of the two new crashes on Max / Linux : ; - optiTrack : with a crash from a libc++abi; ```; libc++abi.dylib: terminating with uncaught exception of type boost::exception_detail::clone_impl; ```; - a CPU scene with beams in SofaCUDA plugin with a strange timeout (that I can't reproduce locally). Does anyone has a clue?; [ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/658#issuecomment-390139788:371,test,tests,371,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/658#issuecomment-390139788,1,['test'],['tests']
Testability,I really dont see why the Quater test fails with mac in this PR 🤔,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2323#issuecomment-921792080:33,test,test,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2323#issuecomment-921792080,1,['test'],['test']
Testability,"I really think this isnt related to this PR. I don't see any ""CollisionModel"" in the test.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1034#issuecomment-494462467:85,test,test,85,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1034#issuecomment-494462467,1,['test'],['test']
Testability,I really would like to have this merged. ; So how could we progress ? ; - can we remove the feature that makes the tests fail ? ; - do we fix the test and hope others person code will no be broken silently ? ; - can we implement kind of backward compatibility tricks ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/243#issuecomment-312737011:115,test,tests,115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-312737011,2,['test'],"['test', 'tests']"
Testability,"I recommend adding tests, and repeat them several times due to the non-deterministic nature of a multi-threaded approach.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-791314794:19,test,tests,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-791314794,1,['test'],['tests']
Testability,I removed completely the unit tests. I'll add them later in another pull request.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1927#issuecomment-816570146:30,test,tests,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1927#issuecomment-816570146,1,['test'],['tests']
Testability,I restart [ci-build][with-scene-tests] to take into account the recent merge in master. ; Then merge. if ok.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/656#issuecomment-393438275:32,test,tests,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-393438275,1,['test'],['tests']
Testability,I run the CI again because it seems the job on Windows has been killed; [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3300#issuecomment-1253790425:92,test,tests,92,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3300#issuecomment-1253790425,1,['test'],['tests']
Testability,I run the CI again because it seems the job on fedora has been killed; [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3316#issuecomment-1253786500:91,test,tests,91,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3316#issuecomment-1253786500,1,['test'],['tests']
Testability,"I see the difference of point of view between you. Guillaume wants the dashboard to show the absolute current state of Sofa, with all failing tests marking the commits as ""broken/need to be fixed""; Damien sees more the average Sofa contributor point of view: ""did I break something?""/""is Sofa better or worse with my last commit"". **_Would it be acceptable**_ to add a simple checkbox on the dashboard, to filter the *_OpenIssue tests ? This way, open issues don't polute the workflow of people not concerned/competent with them. ; By default this option would be disabled. The same for pull request, new failing tests (marked as _OpenIssue) should not be marked as failures during the pull request, since they do not introduce new malfunctions but only reveal them, which is (in my opinion) a step toward the good direction, ie kind of an improvement ?. Once fixed, *_OpenIssue tests should be renamed and kept in the tests base as normal regression tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585:142,test,tests,142,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585,6,['test'],['tests']
Testability,I should buy new glasses...one of the tests is now failing. I think this is minor and I'm not sure if the test or the component have to be fixed.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/398#issuecomment-331190290:38,test,tests,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/398#issuecomment-331190290,2,['test'],"['test', 'tests']"
Testability,"I tested different scenarios:; If `ComponentA` is defined before `ComponentB`:. 1. A Data of `ComponentA` referring to a Data of `ComponentB` is not linked properly: the numeric value is not the right one, and Data that depends on the first Data are not updated accordingly.; 2. A Data of `ComponentB` referring to a Data that does not exist (and will not exist) does not warn the user. The link is created (pointing to nothing) with a default numeric value. Therefore, I suggest to restore the `else` statement with a warning to the user that the link does not have a parent. It seems that the case when a Data points to a Data that will be initialized later is not supported.; What do you think @damienmarchal ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2211#issuecomment-872029650:2,test,tested,2,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2211#issuecomment-872029650,1,['test'],['tested']
Testability,I tested it it works :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2943#issuecomment-1125768922:2,test,tested,2,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2943#issuecomment-1125768922,1,['test'],['tested']
Testability,"I tested it on OSX Mojave and this PR is miraculous. The caduceus goes from 35FPS to 130FPS by adding "" forceFloat=1"" to each of the 4 OglModel in the scene. ; I approve this fix (once forceFloat is set to ""on"" by default)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1069#issuecomment-498193900:2,test,tested,2,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1069#issuecomment-498193900,1,['test'],['tested']
Testability,"I tested it: it compiles, it runs fine; Anyone else to test it? @epernod maybe?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1806#issuecomment-783650739:2,test,tested,2,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1806#issuecomment-783650739,2,['test'],"['test', 'tested']"
Testability,"I tested the component and the examples and this sound fine, ; I merge it so that I can work on it to add more checking on its inputs.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/73#issuecomment-264160693:2,test,tested,2,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/73#issuecomment-264160693,1,['test'],['tested']
Testability,I tested the master branch.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3010#issuecomment-1191484076:2,test,tested,2,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3010#issuecomment-1191484076,1,['test'],['tested']
Testability,"I tested the update of the scene graph and the msg icon, both features seem to work :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3026#issuecomment-1172259093:2,test,tested,2,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3026#issuecomment-1172259093,1,['test'],['tested']
Testability,"I tested your work yesterday in the evening and I really appreciated the easy usage! I would like to add some remarks that might be interesting for future improvements:; 1. If there is a possibility to use the advanced timer at initialization (see #357), where do we need to perform changes to use your code? I would guess the main changes have to be made in [PythonAdvancedTimer.py](https://github.com/mimesis-inria/sofa/blob/0e1a298aa41f666eb792d846101be36352dbb5b3/applications/plugins/SofaPython/python/SofaPython/PythonAdvancedTimer.py) and in the reading of the json file, since the first time step has the identifier 0.; 2. Currently -c and your time evaluation exist side by side. Is it possible to combine your work with the command line argument -c?; 3. Similarly, your time evaluation exists side by side with the command -n (this variable is used in batch mode when launching the simulation for a certain number of steps). When running my simulation, I realized, your number of steps and the number of steps given by the command line add up. Again here, it would be valuable to know: how is it possible to directly use the command line argument?. More ideas might follow, thank you for your investment of time in this nice feature that I will use certainly!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-324873542:2,test,tested,2,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-324873542,1,['test'],['tested']
Testability,I think - except by implementing a complicated check on time step change in both of the above components - we are good here. Only one thing remain TMO as discussed with @alxbilger : we could create a test scene inspired from caduceus using a python controller decreasing progressively the time step to check that in this configuration the simulation smoothly handles the change of time step. Anything else?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3793#issuecomment-1564497074:200,test,test,200,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3793#issuecomment-1564497074,1,['test'],['test']
Testability,"I think I get your point but it adds an another parameter that changes nothing in practice. Here the point is to cut everything outside the bounds. With your suggestions, who will test the sensibility of this epsilon parameter ? It is not acceptable to have a number outside these bounds since asin is not defined at all",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/399#issuecomment-338133353:180,test,test,180,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-338133353,1,['test'],['test']
Testability,"I think I have another sofa installation, but I have tested pointing CMAKE_PREFIX_PATH to /usr/local and also to /SOFA_DIR/build/install dependending on where I installed v20.06. In both cases failed. . Have u been able to replicate?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1429#issuecomment-655812712:53,test,tested,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1429#issuecomment-655812712,1,['test'],['tested']
Testability,"I think I like the PR :smile: but I lack of knowledge .. does it mean that we can use these accessor on any type not event Data?. > I added unit tests for the default class, for the vector types specialization and for the Data specialization. is this the mechanism used when the flag readOnly is set on a Data?. well.. I need to get a technical update on this!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3234#issuecomment-1228179850:145,test,tests,145,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3234#issuecomment-1228179850,1,['test'],['tests']
Testability,I think my commit is what you actually need. Could you test and confirm?; @hugtalbot,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2346#issuecomment-921156133:55,test,test,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2346#issuecomment-921156133,1,['test'],['test']
Testability,"I think the clean should not be done independently, if you remove the if (printLog) test many components are going to fill their ""log buffer"", hence increase memory usage",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276908575:84,test,test,84,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276908575,2,"['log', 'test']","['log', 'test']"
Testability,"I think the layout is ok now, . I only want o re-implement the xsp loader using the code from MeshXspLoader that is stl instead of good old C. . There is new tests including one that fails (because ...well the implementation is broken and the test is right ;))",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/918#issuecomment-461343436:158,test,tests,158,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/918#issuecomment-461343436,2,['test'],"['test', 'tests']"
Testability,"I think this has some benefits:; - the features are already merged in the master branch and *should* work without the hassle of merging different dev branches; - they are OFF by default, so they are not disturbing anyone. But we should take care of the following:; - they must be tested (at least ONE ci config should activate them); - they are not meant to stay ""experimental"" forever, so there is an implicit contract to move them to ""non-experimental"" as soon as they are ready and working. ""EXPERIMENTAL_FEATURES"" must not be the carpet above the decisions we don't make. Typically, an ""experimental"" feature in release N should be merged in release N+1.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/517#issuecomment-345207607:280,test,tested,280,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517#issuecomment-345207607,1,['test'],['tested']
Testability,"I thought at that moment that sofa.ini was a resource but apparently no.; (it was related to CPack and Mac when creating a .app/dmg).; So yes, it should be processed outside this test then.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/114#issuecomment-270325726:179,test,test,179,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/114#issuecomment-270325726,1,['test'],['test']
Testability,"I took into account @damienmarchal 's comment; Scene updated, tested and working properly. Regarding changes (refactoring) proposed by @epernod, this must be done in another PR. I do not want to refactor only obj export, otherwise SOFA would be inconsistent (look at STLExporter, VTKExporter).; I would therefore like to refactor all exporters as a clean I/O API! This will take some efforts and this is not related to this PR (which just fix and add the obj export in MeshExporter). I set this one as to review again then.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1789#issuecomment-785262772:62,test,tested,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1789#issuecomment-785262772,1,['test'],['tested']
Testability,"I tried and on macOS and Ubuntu/gcc :; - `EXPECT_EQ(std::string{sofa::geometry::ElementInfo<sofa::geometry::Point>::name()}, ""Point"");` test passes; - `EXPECT_EQ(defaulttype::DataTypeName<sofa::topology::Element<sofa::geometry::Point> >::name(), ""Point"");` does not (return Element<Point> as you said). After some investigation, `DataTypeInfo<topo::Element<geo::Point>` does not exist so it uses the default decoder.; IMO, It was not implemented because topology::Point (which should be an alias on `topo::Element<geo::Point>`) is not defined. I dont remember why it was not done while Sofa.Topo and Sofa.Geo was created. Maybe topology::Point does not make sense ? (in a topology point of view); If in the end it does, making the alias (and adding the typeinfo) does work. (see https://github.com/alxbilger/sofa/pull/8 )",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4732#issuecomment-2109148673:136,test,test,136,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4732#issuecomment-2109148673,1,['test'],['test']
Testability,"I tried this feature with BeamAdapter, replacing the parallel std::for_each() on https://github.com/sofa-framework/BeamAdapter/pull/50; On a custom scene, the performance is the same, which is a good news by itself. The regression test did not report any discrepancy either.; And at least there is no special case (compiler not supporting std::execution, etc) to handle 👍",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3548#issuecomment-1370411383:231,test,test,231,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3548#issuecomment-1370411383,1,['test'],['test']
Testability,"I understand the feature, I understand the need and I agree I would use it.... but I find really weird to set the option using a component in the graph... Do you know if there is an option in the Node? we could use the same logic but per Node",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3162#issuecomment-1193394417:224,log,logic,224,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3162#issuecomment-1193394417,1,['log'],['logic']
Testability,"I vote for no warning message, and no global switch! **Keep it light and simple.**; The only case where you really expect to have the string `""[1,2,3]""` is for Data<SVector> that would report a problem for `""1,2,3""`, and the fix is simple (simply add some `""""`). But frankly who was benefiting from that?!. Indeed we do not want warning messages when converting scalars, but we can easily add a test for specific types (float, bool, int...). At least everything would be clearly exposed in the code. Also, I propose that if you pass a Node, a BaseObject or a Data, it uses their getLinkPath (defined in the bindings, i.e. `""@/path/from/root/node""`, `""@/path/from/root/node/myobject""`, `""@/path/from/root/node/myobject.mydata""` ). It would be so useful when creating Links that are required during creation (like the mapping's inputs).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656:395,test,test,395,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656,1,['test'],['test']
Testability,"I was looking for writting some test for ArgumentParser, but I don't see any test for SofaKernel/framework/sofa. Is it normal :D ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/513#issuecomment-346334238:32,test,test,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/513#issuecomment-346334238,2,['test'],['test']
Testability,"I was testing a benchmark scene with quite a lot of constraints (frictions) and:; (exactly the same scene); ```; master : 5000 iterations done in 203.986 s ( 24.5115 FPS); this PR : 5000 iterations done in 134.177 s ( 37.2643 FPS); ```; with just having to set `multithread=""true""` (and building multithreading plugin) this is **cool** 🥳. Edit: and it was with Windows/MSVC",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-802383252:6,test,testing,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-802383252,2,"['benchmark', 'test']","['benchmark', 'testing']"
Testability,I was thinking that the PR was about keeping the vsize and real vector size the same so I was thinking ; to a test that fails if there is a size mismatch. But I may be wrong...I'm really weak on these part of Sofa.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/406#issuecomment-329790996:110,test,test,110,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/406#issuecomment-329790996,1,['test'],['test']
Testability,I will test your branch any way but would you have a visu of this feature @bakpaul ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4048#issuecomment-1640703846:7,test,test,7,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4048#issuecomment-1640703846,1,['test'],['test']
Testability,"I would also point out that while there is no tests on the SparseLDLSolver (which is not very suprising) there is also no example scene, no mention of it in any doc etc.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390939574:46,test,tests,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390939574,1,['test'],['tests']
Testability,"I would like to schedule a hangout in the coming days to synchronize everyone's job on CI. I have the feeling that everyone is not up-to-date with the current CI status, and I came to the point I would not touch anything until I understand clearly what has been done recently. ; This includes jenkins updates, use of tests ci scripts, etc.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/186#issuecomment-282669576:317,test,tests,317,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/186#issuecomment-282669576,1,['test'],['tests']
Testability,I would not add a boolean because you would have a large number of tests in the case of a large mesh.; I would rather rename those functions and set them purely protected/private (then transforming them like utility methods for DrawToolGL). ; And then create other functions implementing the DrawTool interface (calling those private methods and glBegin(*)/glEnd calls),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/7#issuecomment-250756856:67,test,tests,67,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/7#issuecomment-250756856,1,['test'],['tests']
Testability,"I'll check how difficult it is to write this component for BTD.; In the meantime, I also have unit tests to fix.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4158#issuecomment-1728994383:99,test,tests,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4158#issuecomment-1728994383,1,['test'],['tests']
Testability,I'm a bit surprised with the test failures;... so i restart ; [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/847#issuecomment-446571947:29,test,test,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/847#issuecomment-446571947,2,['test'],"['test', 'tests']"
Testability,I'm afraid this PR was merged to fast.; - windows7_VS-2013_options_amd64 has 3 more test failures; - we don't know what happens for centos_clang-3.4_options and mac_clang-3.4_options; - there is 36 new test errors for centos_clang-3.4_options on origin/master after merge,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/202#issuecomment-288380223:84,test,test,84,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/202#issuecomment-288380223,2,['test'],['test']
Testability,"I'm always having a hard time designing this type of workflow...; I agree with you that it's way easier to have a branch than a commit in GIT_TAG.; What will happen though is that SOFA CI could be failing because of changes in SP3/master. . For instance, this will happen:; ~~1. Bob opens a SOFA PR that breaks SP3~~; ~~-> the SOFA PR fails on SOFA CI~~; ~~2. Bob opens a SP3 PR to propose a fix to this future change in SOFA that will break SP3~~; ~~-> the SP3 PR fails on SP3 CI (because it fixes something that is not broken yet)~~; ~~3. Thanks to my work on ExternalProject, SOFA CI is able to test the SOFA PR with a custom version for SP3 (the version of the SP3 PR)~~; ~~-> the SOFA PR succeeds on SOFA CI~~; ~~4. Both PRs are merged (in any order)~~; ~~5. **All the other SOFA PRs are now failing on SOFA CI** and must be updated with SOFA/master~~. EDIT: corrected version below",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2004#issuecomment-821081219:598,test,test,598,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2004#issuecomment-821081219,1,['test'],['test']
Testability,I'm fixing the failing tests in https://github.com/sofa-framework/sofa/pull/457,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/453#issuecomment-334871354:23,test,tests,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453#issuecomment-334871354,1,['test'],['tests']
Testability,I'm gonna find some time to investigate this test failure. To be continued...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/243#issuecomment-313034837:45,test,test,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-313034837,1,['test'],['test']
Testability,"I'm looking for the ""-"" in the read to detect the intervals syntax:; 0-5 or 0-10-2 as well as --5-5 or 10--10. This intervals syntax using '-' was not of my own and I'm actually quite surprised and happy it was possible to fix the crash & endless loop that were in the code while preserving the syntax and backward compatibility. . Now all this discussion about performance rise my interest as I wonder if all this discussion have a measurable impact on performances. As usual I cannot prevent myself to make a small benchmark. ; The benchmark is implemented in the test class so that we will be able to detect performance regression in the future. . First there is a +200ms variation between the same run so I average several runs which gaves these numbers: ; strtoll alone tooks 1645 ms to ""read"" 1 000 000 time a size 10 array. ; strtoll+early check of '-' tooks 1654 ms to ""read"" 1 000 000 times the same array. ; ; strtoll alone tooks 7758 ms to ""read"" 100 000 time a size 1000 array. ; strtoll+early check of '-' tooks 7719 ms to ""read"" 100 000 times the same array. . strtoll alone tooks 8464 ms to ""read"" 1000 time a size 100 000 array. ; strtoll+early check of '-' tooks 8403 ms to ""read"" 10000 times the same array. . So we are discussing about un-measurable effect and I switched to your version because it contains less lines of code and looks simpler which is a very good property. . Is there still question about this PR? . EDIT: and the dashboard is now green on linux. @bcarrez please finish #267 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828:517,benchmark,benchmark,517,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828,3,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"I'm not sure it's a good practice to open a PR only for Changelog stuff, unless if you're logging already done changes.; It's not easier to maintain because I have no idea if your adds are relevant. It would be way more convenient to edit the Changelog in **each** important PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/58#issuecomment-262732494:90,log,logging,90,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/58#issuecomment-262732494,1,['log'],['logging']
Testability,"I'm ok with the change regarding the edges. I can't see some border effect right now... and as all the non regression tests are green I'm 99% confident!; I just added some additional warning and tests inside the tetrahedron methods you fixed to match what has been done inside the TriangleSetTopologyContainer. You could double check if needed.; Thanks, I missed those one.; :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1008#issuecomment-490437324:118,test,tests,118,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1008#issuecomment-490437324,2,['test'],['tests']
Testability,I'm on it...but first I'm making a Test suite. . PR on its way.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/928#issuecomment-466451014:35,Test,Test,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/928#issuecomment-466451014,1,['Test'],['Test']
Testability,"I'm progressing... ; There is a lot of test failure but this was expected as now any warning that was not explicitely EXPECTED generates a test failure. . So it looks really fine to me. ; @epernod, @fredroy, @thomas-lemaire as you wrote tests...what do you think about the current approach ? . EDIT: OUPS this was for PR #213 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/207#issuecomment-288874603:39,test,test,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/207#issuecomment-288874603,3,['test'],"['test', 'tests']"
Testability,"I'm sorry, I missed part of the conversation on this topic during the sofa-dev meeting. Here's my suggestion:. What if we would set a `Check()` method (and maybe also a `Parse(), Init(), fwdInit(), bwdInit()` and all other method that kind of expect a ""call super"" code smell to work...) in `SOFA_ABSTRACT_CLASS_DECL`, similar to this:. ```cpp; #define SOFA_ABSTRACT_CLASS_DECL \; [...]; void doCheck() { this->check(); static_cast<Inherit1*>(this)->doCheck(); }	\; virtual void Check() { this->doCheck(); }; ```; ; `Check()` would be a virtual method, so that when called from a casted `BaseObject` ptr or from a visitor, the child's method would be called.; `check()` and `doCheck()` on the other hand would not be virtual, so that when called from `this` casted as `Parent*`, the method of the current pointer cast would be called, thus triggering the recursion when static_casting the pointer. . It's the same as the ""call super"" pattern, with the exception that it is this time bug-free, because the API's user is not in charge of calling manually the parent's method. A small example here if you want to test the concept:. ```cpp; #include <iostream>. #define SOFA_BASE_CLASS(T) \; virtual void Init() {} \; void doInit() { this->init(); }. #define SOFA_CLASS(T, Parent) \; typedef Parent Inherit1; \; void doInit() { this->init(); static_cast<Inherit1*>(this)->doInit(); }	\; virtual void Init() { this->doInit(); }; . struct BaseObject; {; SOFA_BASE_CLASS(BaseObject); void init() { std::cout << ""BaseObejct::init()"" << std::endl; }; };. struct A : public BaseObject; {; SOFA_CLASS(A, BaseObject); void init() { std::cout << ""A::init()"" << std::endl; }; };. struct B : public A; {; SOFA_CLASS(B, A); void init() { std::cout << ""B::init()"" << std::endl; }; };. main(); {; BaseObject* b = new B();; b->Init();; }; ```. The imact in terms of implementation would be a bit huge though.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416907185:1110,test,test,1110,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416907185,1,['test'],['test']
Testability,"I'm trying to debug to see where it fails, but it will take a little bit more than expected.; Meanwhile I just want to highlight that coming back to the un-fixed version (the one without my commit) the test doesn't fail YET the **toEulerVector** is doing an invalid operation (the bug that my commit is supposed to fix). ![screenshot from 2017-11-10 12-13-39](https://user-images.githubusercontent.com/20112873/32656351-bf740592-c611-11e7-95a5-786c795763c1.png)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/399#issuecomment-343448267:202,test,test,202,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-343448267,1,['test'],['test']
Testability,"I'm very happy to say that it compiles and passes the tests. ; bye bye the sofa float ugliness. ; @guparan, @hugtalbot, @ChristianDuriez, @bcarrez . So now how do we merge ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/853#issuecomment-447487467:54,test,tests,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/853#issuecomment-447487467,1,['test'],['tests']
Testability,"I've tested to remove completely the functions. If used or overridden, it should fail to compile. On my setup, I don't observe a compilation failure, even with SofaCuda. Let's see if the CI does not complain.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3335#issuecomment-1267085460:5,test,tested,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3335#issuecomment-1267085460,1,['test'],['tested']
Testability,"If the Data was simply renamed (but is having the same role as previously), it is not a big deal to have a alias. If the Data is no longer used, backward compatibility will have to be done in the 'parse' function (to fill others Data for instance), in that case, it is easy to add a deprecated message. Note that the initial Data should not exist anymore.; As an example, you can look at RigidMapping, where the Data 'repartition' was removed, but the 'parse' function still ensures backward compatibility and log a deprecated msg.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255372823:510,log,log,510,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255372823,1,['log'],['log']
Testability,In fact most of the methods I'm testing are directly inside the mother class. So I'm not sure a gridTopology_test is needed.; But to remove GridTopology from the factory is maybe possible. We need to investigate if someone is using it as a component.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/270#issuecomment-301501500:32,test,testing,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-301501500,1,['test'],['testing']
Testability,In fact would be better to merge PR #3330 and #3331 before this one as they are fixing bugs found while doing this test.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3329#issuecomment-1254711655:115,test,test,115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3329#issuecomment-1254711655,1,['test'],['test']
Testability,"In fact, we have to go down to the iterator protocol as some strings are initialized with proxies (e.g. `' '.join(...)`) and the Sequence protocol fails on getting the length/size. . The following conversion code passes all python tests in Compliant:. ```c++; static std::string convert_string(PyObject* object) {; if( PyString_Check(object) ) {; // strings will be strings; return PyString_AsString(object);; }. if( PyIter_Check(object) ) {; // TODO we should throw and abort createObject in case of error; std::stringstream ss;; bool first = true;. PyObject *iterator = PyObject_GetIter(object);; if(!iterator) {; msg_error(""createObject"") << ""error while creating iterator"";; }; ; while(PyObject* next = PyIter_Next(iterator)) {; if(first) first = false;; else ss << ' ';. ss << convert_string(next);; Py_DECREF(next);; }. Py_DECREF(iterator);; ; if (PyErr_Occurred()) {; msg_error(""createObject"") << ""error while iterating"";; }; ; return ss.str();; }. // link path conversion for baseobjects; if( PyObject_IsInstance(object, (PyObject*) &SP_SOFAPYTYPEOBJECT(BaseObject)) ) {; const std::string path_name = (((PySPtr<Base>*) object)->object->toBaseObject()->getPathName());; return '@' + path_name;; }. // fallback to python string conversion; return PyString_AsString(PyObject_Str(object));; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307438921:231,test,tests,231,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307438921,1,['test'],['tests']
Testability,In last commits:; - DataTrackerEngine is deprecated; - CallbackEngine is renamed as DataTrackerCallback & tests use it instead of the deprecated DataTrackerEngine; - Updated doc for the DataTrackerCallback; - const DataTracker& passed as argument to callback function: this makes it possible to call hasChanged() on datafields using the dataTracker in each DataTrackerCallback. @jnbrunet @damienmarchal if that's OK with you. If it passes I think that should be all on this PR,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1406#issuecomment-645446057:106,test,tests,106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1406#issuecomment-645446057,1,['test'],['tests']
Testability,"In order to work as expected the automatic addition of the GravityForceField by the node need to be implemented for the two following events:; - react when the ""gravity"" field is changed to add the GravityForceField not only done at parse/init... and if gravity is set back to zero... should we remove the GravityForceFIeld ? ; - have a hook in the addObject(BaseObject*) so that any addition of a Mass Object trigger on a node that had a gravity set ... the function adding the GravityForceField is called. The underlying logic is complex and looks very hack to me but needed to provide a consistant behavior between two deeply inter-connected component (mass & gravityforcefield). I may be wrong but using a ""slave"" for the ""automatic"" use-case would cut that complexity.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3149#issuecomment-1190185317:523,log,logic,523,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3149#issuecomment-1190185317,1,['log'],['logic']
Testability,"In terms of performances, I run the benchmark in https://github.com/alxbilger/SofaBenchmark/blob/main/SofaBenchmarkScenes/src/SofaBenchmarkScenes/linearsolver/SparseLDLSolver.cpp:. # `useSymbolicDecomposition=""false""`. ```; -------------------------------------------------------------------------------------------------------------------; Benchmark Time CPU Iterations UserCounters...; -------------------------------------------------------------------------------------------------------------------; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/2 2071 ms 2094 ms 1 FPS=95.5224/s frame=0.0104687s; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/4 4103 ms 4094 ms 1 FPS=97.7099/s frame=0.0102344s; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/8 8253 ms 8188 ms 1 FPS=97.7099/s frame=0.0102344s; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/16 17380 ms 17312 ms 1 FPS=92.4188/s frame=0.0108203s; BM_Scene_bench_StepFactor<SparseLDLSolverScene>/512 6187 ms 6188 ms 1 FPS=82.7475/s frame=0.012085s; BM_Scene_bench_StepFactor<SparseLDLSolverScene>/1024 11960 ms 11938 ms 1 FPS=85.7801/s frame=0.0116577s; BM_Scene_bench_StepFactor<SparseLDLSolverScene>/2048 24209 ms 24156 ms 1 FPS=84.7814/s frame=0.011795s; ```. # `useSymbolicDecomposition=""true""`. ```; -------------------------------------------------------------------------------------------------------------------; Benchmark Time CPU Iterations UserCounters...; -------------------------------------------------------------------------------------------------------------------; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/2 1588 ms 1578 ms 1 FPS=126.733/s frame=7.89062ms; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/4 3182 ms 3156 ms 1 FPS=126.733/s frame=7.89062ms; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/8 6391 ms 6344 ms 1 FPS=126.108/s frame=7.92969ms; BM_Scene_bench_SimulationFactor<SparseLDLSolverScene>/16 12823 ms 12938 ms 1 FPS=123.671/s frame=8.08594ms; BM_Scene",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2756#issuecomment-1060696095:36,benchmark,benchmark,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2756#issuecomment-1060696095,2,"['Benchmark', 'benchmark']","['Benchmark', 'benchmark']"
Testability,In the case of the Light (and actually this is true to most of the sofa component) I see several very simple tests to add to validate the inputes. But you are totally right this cannot be done automatically (unless with a kind of ; code-path/coverage analysis) so the developper have to write at least the easy one.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/73#issuecomment-264160230:109,test,tests,109,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/73#issuecomment-264160230,1,['test'],['tests']
Testability,"Indeed :; - SceneTests.examples/Benchmark/TopologicalChanges.ProjectToPlaneConstraint_RemovingMeshTest.scn; - SceneTests.examples/Benchmark/TopologicalChanges.FixedPlaneConstraint_RemovingMeshTest.scn; crash.; Should we let them crash and appear in the CI log (thus maybe making the result even more confusing), or should we ignore it on the CI ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2161#issuecomment-863033431:32,Benchmark,Benchmark,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2161#issuecomment-863033431,3,"['Benchmark', 'log']","['Benchmark', 'log']"
Testability,"Indeed. I am not a big fan of having a member function `invert`; Anyway, to fix the problem you can test that the address of reference passed as an argument is different from the address of the object instance. e.g. ```lang=cpp. template< std::size_t L, std::size_t C, typename real = double >; bool Mat<L,C,real>::invert(const Mat<L,C,real>& m ); {; if(&m == this ); {; // do something clever to handle ""in-place"" invert; }; else; {; invertMatrix(*this, m );; }; }; ```. NB: it is an usual pattern when for instance you must overload the assignment operator of a class (because it has to manage some heap allocated memory for example ), and therefore handle the special case when you self assign.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/280#issuecomment-305173227:100,test,test,100,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/280#issuecomment-305173227,1,['test'],['test']
Testability,"Indeed. It would be interesting to know why. But I can see that the `thread_local` version did not stay long (4 hours). From https://github.com/sofa-framework/sofa/pull/792, I can see that the compilation failed when `thread_local` was introduced. And the compilation log is no longer available. But you can see now that the compilation succeeds. I guess that at the time the compilation failed because of old version of the compilers. And it is no longer a problem now.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3422#issuecomment-1291804586:268,log,log,268,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3422#issuecomment-1291804586,1,['log'],['log']
Testability,Indeed... my bad.; This Pr already add tests for the gridTopology but the Tests needed a test. ; Thanks @matthieu-nesme for the review. It should be good now.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/270#issuecomment-305487544:39,test,tests,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-305487544,3,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"Interesting CI results a test failer I never heard about :). @guparan , @VannesteFelix any idea if this is related to the PR ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/841#issuecomment-441300085:25,test,test,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/841#issuecomment-441300085,1,['test'],['test']
Testability,"Interesting, I compiled on the CI with just the FAST_MATH option enabled and those tests fails; ```; [UnitTests.SofaGeneralExplicitOdeSolver_test/RungeKutta2ExplicitSolverDynamic_test.rungeKutta2ExplicitSolverDynamicTest_high_dt/0](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralExplicitOdeSolver_test_RungeKutta2ExplicitSolverDynamic_test/rungeKutta2ExplicitSolverDynamicTest_high_dt_0/); [UnitTests.SofaGeneralExplicitOdeSolver_test/RungeKutta4ExplicitSolverDynamic_test.rungeKutta4ExplicitSolverDynamicTest_medium_dt/0](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralExplicitOdeSolver_test_RungeKutta4ExplicitSolverDynamic_test/rungeKutta4ExplicitSolverDynamicTest_medium_dt_0/); [UnitTests.SofaGeneralExplicitOdeSolver_test/RungeKutta4ExplicitSolverDynamic_test.rungeKutta4ExplicitSolverDynamicTest_small_dt/0](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralExplicitOdeSolver_test_RungeKutta4ExplicitSolverDynamic_test/rungeKutta4ExplicitSolverDynamicTest_small_dt_0/); [UnitTests.SofaGeneralImplicitOdeSolver_test/VariationalSymplecticExplicitSolverDynamic_test.variationalSymplecticExplicitSolverDynamicTest_small_dt_without_damping/0](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralImplicitOdeSolver_test_VariationalSymplecticExplicitSolverDynamic_test/variationalSymplecticExplicitSolverDynamicTest_small_dt_without_damping_0/); [UnitTests.SofaGeneralImplicitOdeSolver_test/VariationalSymplecticExplicitSolverDynamic_test.variationalSymplecticExplicitSolverDynamicTest_medium_dt_with_damping/0](https://ci.inria.fr/sofa-ci-dev/jo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2652#issuecomment-1028969769:83,test,tests,83,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2652#issuecomment-1028969769,3,['test'],"['testReport', 'tests']"
Testability,"Is it really a fix? ; If yes, could be good to add a test. I never use quads",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2408#issuecomment-941133363:53,test,test,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2408#issuecomment-941133363,1,['test'],['test']
Testability,Is the examples automatically started during CI tests ? ; If not please consider adding a dedicated test (even one loading the examples file) because we don't want to be forced to run manually all the examples scenes to detect possible regressions.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/411#issuecomment-335828643:48,test,tests,48,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411#issuecomment-335828643,2,['test'],"['test', 'tests']"
Testability,"Is the topology mandatory for the purpose of `DiagonalMass3_test.checkAttributes`? It seems not when reading the test.; About `DiagonalMass3_test.checkAttributeLoadFromXps` error, you commented `/// Rigid file are not handled only xs3....` [here](https://github.com/sofa-framework/sofa/blob/68cc242dd0140b668485277266d26b0ce9d476cf/SofaKernel/modules/SofaBaseMechanics/SofaBaseMechanics_test/DiagonalMass_test.cpp#L813). So maybe you know how to fix the error?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/832#issuecomment-440211317:113,test,test,113,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/832#issuecomment-440211317,1,['test'],['test']
Testability,Is there any ... test 🤓 ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1594#issuecomment-743748962:17,test,test,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1594#issuecomment-743748962,1,['test'],['test']
Testability,Is there any log I could use to investigate ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289412827:13,log,log,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289412827,1,['log'],['log']
Testability,"Is this CI error is related to the PR ? ; https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1034/CI_CONFIG=mac_clang-3.5,CI_PLUGINS=options,CI_TYPE=release/6/testReport/(root)/Assembly_test/testDecomposedString/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1034#issuecomment-494401840:166,test,testReport,166,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1034#issuecomment-494401840,2,['test'],"['testDecomposedString', 'testReport']"
Testability,"Is this PR ready to be reviewed? If yes, the label must be changed. [ci-build][with-all-tests]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3203#issuecomment-1225325160:88,test,tests,88,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3203#issuecomment-1225325160,1,['test'],['tests']
Testability,It appears that Damien anticipated it: https://github.com/sofa-framework/BeamAdapter/pull/11. [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2890#issuecomment-1127441277:114,test,tests,114,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2890#issuecomment-1127441277,1,['test'],['tests']
Testability,It compile...now warnings or test failure so let's merge it. ; Thanks raffaela.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/398#issuecomment-331164452:29,test,test,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/398#issuecomment-331164452,1,['test'],['test']
Testability,"It does not come from your PR, but while trying to compile this branch with the newest gcc, there is an interesting (and useful) warning:; ```; /home/fred/sofa/src/current/Sofa/framework/Type/src/sofa/type/Mat.h:408:58: warning: array subscript 2 is above array bounds of ‘const sofa::type::VecNoInit<3, double> [2]’ [-Warray-bounds]; 408 | if( rabs( this->elems[i][j] - this->elems[j][i] ) > EQUALITY_THRESHOLD ) return false;; ```; ; Indeed, there is no compile-time test about the fact that the matrix is square or not (so the symmetry could be irrelevant)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1240049702:469,test,test,469,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1240049702,1,['test'],['test']
Testability,"It looks like the intialization of the MO when nothing is given in input is a problem .. not sure. I see [this test](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1977/CI_CONFIG=windows10_vs-2017,CI_PLUGINS=options,CI_TYPE=release/1/testReport/UnitTests/SofaDeformable_test_RestStiffSpringsForceField_test/defaultBehaviorVec3/)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1977#issuecomment-816682682:111,test,test,111,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1977#issuecomment-816682682,2,['test'],"['test', 'testReport']"
Testability,"It really appears as a proof of concept.This work will be very useful, especially regarding the recent discussion on matrix formats in SOFA relying on Eigen. Handles here only one type Eigen. Double/Float compatibility depending on SOFA compiling options (adjust with template): Vec3 or Real. Let’s make it explicitly only for double. A test is also needed here (e.g. AbstractTypeInfo). We need in a future.a more generic way for other Eigen types.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-708261022:337,test,test,337,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-708261022,1,['test'],['test']
Testability,It seems like the function was tested through DataFilename as it is failing in `UnitTests.SofaCore_test/DataFileName_test.checkSetGetRelativePath`. But I agree that it needs to be tested in SofaHelper/FileRepository nevertheless.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2350#issuecomment-924101049:31,test,tested,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2350#issuecomment-924101049,2,['test'],['tested']
Testability,"It seems that `serr` was outputed as WARNING in the test and thus not making it fail. See pre-merge output [here](https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.8_options/267/consoleText) and search for ""Vertex2Frame : no vertices or normals found...""; Replacing it with `msg_error` create a ""real"" error so the test fails.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/398#issuecomment-331837341:52,test,test,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/398#issuecomment-331837341,2,['test'],['test']
Testability,"It seems that the test still fails on Ubuntu Debug: https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/master/CI_CONFIG=ubuntu_clang,CI_PLUGINS=options,CI_TYPE=debug/4872/testReport/UnitTests/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4464#issuecomment-1935489193:18,test,test,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4464#issuecomment-1935489193,2,['test'],"['test', 'testReport']"
Testability,It should be alright now. Let's try to [ci-build][with-scene-tests] :-),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/536#issuecomment-356976670:61,test,tests,61,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-356976670,1,['test'],['tests']
Testability,It won't compile here on the CI if you don't merge your PR in this one. Or I missed something.; I will test it on my computer.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1093#issuecomment-526513905:103,test,test,103,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1093#issuecomment-526513905,1,['test'],['test']
Testability,It worked. Note that test failures and crashes are not due to this PR :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1825#issuecomment-780069074:21,test,test,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1825#issuecomment-780069074,1,['test'],['test']
Testability,"It would fix a scene, if only there was such a scene... Currently, the constructor just crashes. There are no tests and no scenes.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4711#issuecomment-2092530090:110,test,tests,110,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4711#issuecomment-2092530090,1,['test'],['tests']
Testability,It's something I noticed when inspecting the values while debugging in https://github.com/sofa-framework/sofa/issues/4051. I would like to write a unit test if I find the time,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4063#issuecomment-1645661295:152,test,test,152,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4063#issuecomment-1645661295,1,['test'],['test']
Testability,"I’m currently cleaning the ci infra disks, before anyone else notices… ;). > Le 28 mars 2017 à 09:36, Matthieu Nesme <notifications@github.com> a écrit :; > ; > more than 40Go of text!!!; > In top of adding a stopping criterion based on execution time, we could also add a maximal size for the logging buffer.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub <https://github.com/sofa-framework/sofa/issues/221#issuecomment-289688384>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AR1ILlGbW9e6NmUklt1K8Zg1tlqpXtHkks5rqLiSgaJpZM4Mp6My>.; > . --------------------------------; Bruno Carrez; SED Inria Lille-Nord Europe; bruno.carrez@inria.fr",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289693213:294,log,logging,294,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289693213,1,['log'],['logging']
Testability,Just added a dummy commit to see if ALL the tests are executed on CI (I changed some stuff in CI scripts).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1825#issuecomment-780032801:44,test,tests,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1825#issuecomment-780032801,1,['test'],['tests']
Testability,Just before the February school break we started a branch on our repo. The task #189 is complete (needs more testing to validate it) and is a prerequisite before real python 3 refactoring in SofaPython.; Stay tuned.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/23#issuecomment-282653658:109,test,testing,109,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/23#issuecomment-282653658,1,['test'],['testing']
Testability,Just tested it @epernod it works as a charm :+1: :+1: :+1: :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2377#issuecomment-952864133:5,test,tested,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2377#issuecomment-952864133,1,['test'],['tested']
Testability,Just tested it on Windows and it's indeed a mess. | | QGLViewer | QtViewer |; | ----- | ----- | ----- |; | S key | - Opens a dialog to save a screenshot next to runSofa executable<br>- Opens a 2nd dialog for image settings<br>- Captures the viewer only<br>- Crashes if file exists | - Quietly saves a screenshot in the screenshots folder<br>- Captures the whole interface |; | Screenshot<br>button | - Opens a dialog to save a screenshot in the screenshots folder<br>- Captures the whole interface<br>- Repeats 3 times | - Opens a dialog to save a screenshot in the screenshots folder<br>- Captures the viewer only<br>- Repeats 2 times |. Which behavior is the right one? :laughing:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1791#issuecomment-853756838:5,test,tested,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1791#issuecomment-853756838,1,['test'],['tested']
Testability,"Just tested it, fix indeed the issue",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/168#issuecomment-279477705:5,test,tested,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-279477705,1,['test'],['tested']
Testability,Just tested it:. Before | After 1 | After 2 ; :-------:|:---------:|:--------:|; ![before](https://user-images.githubusercontent.com/1651667/29559563-ba6ef7ee-872f-11e7-901d-d584baf0d8be.png) | ![after 1](https://user-images.githubusercontent.com/1651667/29559566-bd0aeb20-872f-11e7-8859-9455807cd76b.png) | ![after 2](https://user-images.githubusercontent.com/1651667/29615570-b4570754-880e-11e7-84a2-4983a2cf0726.png),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/369#issuecomment-323977178:5,test,tested,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/369#issuecomment-323977178,1,['test'],['tested']
Testability,Last [ci-build][force-full-build][with-all-tests] in case :F,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3242#issuecomment-1294302126:43,test,tests,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3242#issuecomment-1294302126,1,['test'],['tests']
Testability,Last check : [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3299#issuecomment-1294474300:33,test,tests,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3299#issuecomment-1294474300,1,['test'],['tests']
Testability,"Last regression test failing will disappear as soon as PR #4494 is merged as the new version of isquadDelaunay method is not using this method intersectionWithEdge anymore. ; And for the note, the error is a false positive. The regression should be regenerated at one point.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4194#issuecomment-1937719127:16,test,test,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4194#issuecomment-1937719127,1,['test'],['test']
Testability,Latest benchmark on the caduceus:. Before; ```; [BatchGUI] 10000 iterations done in 37.8088 s ( 264.489 FPS).; ```. After; ```; [BatchGUI] 10000 iterations done in 14.4789 s ( 690.661 FPS).; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4001#issuecomment-1655466999:7,benchmark,benchmark,7,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4001#issuecomment-1655466999,1,['benchmark'],['benchmark']
Testability,Let's add a test like in https://github.com/sofa-framework/sofa/pull/289 !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/409#issuecomment-330462081:12,test,test,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/409#issuecomment-330462081,1,['test'],['test']
Testability,Let's count warnings: [ci-build][with-all-tests][force-full-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1449#issuecomment-673315660:42,test,tests,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1449#issuecomment-673315660,1,['test'],['tests']
Testability,Let's rebuild to check the CI ; [ci-build][force-full-build][with-all-tests]. thanks again @Changjing-Liu for your contribution,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3164#issuecomment-1210386812:70,test,tests,70,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3164#issuecomment-1210386812,1,['test'],['tests']
Testability,Let's test to define it `constexpr` while defining it in the inl file (including it in the header) and see if it works as `constexpr`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3221#issuecomment-1239097355:6,test,test,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3221#issuecomment-1239097355,1,['test'],['test']
Testability,Let's try something new: [ci-build] [with-scene-tests] 😉,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/350#issuecomment-318602338:48,test,tests,48,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/350#issuecomment-318602338,1,['test'],['tests']
Testability,"List of things to do:; - fix conflicts; - expose the private members as Data<> (for getters/setters, py2, xml etc); - register the component in the Factory (now it cannot be spawn like other BaseObject); - get an example, tests; - some math people could review (@hugtalbot, @jnbrunet ) ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2209#issuecomment-910077737:222,test,tests,222,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2209#issuecomment-910077737,1,['test'],['tests']
Testability,"Looking at the source code I just find a good example. . It is from https://github.com/sofa-framework/sofa/blob/8410f29a80093f44fb0b224c91867bb7f65ee328/modules/SofaGeneralTopology/SofaGeneralTopology_test/SphereGridTopology_test.cpp; In the SphereGridCreation test. Erik wanted to test both valid and invalid code path, and he is right to do so,...but as Sofa has no way to report error to the caller's he cannot detect that (I assume this is probably what he wanted to test and why he commented out line); ```cpp; // EXPECT_EQ(sphereGrid2, nullptr);; ```. With explicit message specification improve the situation as he can now write things like that:; ```cpp; bool SphereGridTopology_test::SphereGridCreation(); {; // Creating a good Grid; {; //// This is valid code so a warning or an error is probably a regression leading to test failure; ; WarningAndErrorAsTestFailure err(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid = sofa::core::objectmodel::New<SphereGridTopology>(5, 5, 5);; EXPECT_NE(sphereGrid, nullptr);; EXPECT_EQ(sphereGrid->d_radius.getValue(), 1.0);; }. // Creating a bad Grid; {; /// must send warn a warning message to the caller indicating something goes wrong; /// mustn't send an error ; ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;. SphereGridTopology::SPtr sphereGrid2 = sofa::core::objectmodel::New<SphereGridTopology>(-1, 0, 1);; }. return true;; }. EDIT: It just appear to me that the message rising failures are very similar in EXPECT_ /ASSERT things from gtest...nothing more, nothing less ...and similarly to EXPECT_ they are very verbose because it is what tests do :) ; Maybe I should make a macro to emphasize the similarities and showing this is part of the test framework ? ; ```cpp; EXPECT_MESSAGE( Error ) ;; EXPECT_MESSAGE( Warning ) ;; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168:261,test,test,261,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288670168,7,"['ASSERT', 'test']","['ASSERT', 'test', 'tests']"
Testability,Looks all good to me ... and gg guillaume for the extra test.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/409#issuecomment-330655999:56,test,test,56,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/409#issuecomment-330655999,1,['test'],['test']
Testability,Looks fine now.; [ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/907#issuecomment-461843469:39,test,tests,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/907#issuecomment-461843469,1,['test'],['tests']
Testability,"Looks fine to me, build and tests are passing (windows fails due to lack of free space). fast-merge -> let's merge this to alleviate our dev meetings",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1646#issuecomment-740486542:28,test,tests,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1646#issuecomment-740486542,1,['test'],['tests']
Testability,"Looks good to me, any idea what is the issue with the `emptyForceField.py` (unrelated to this PR) ?. https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2804/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/8/testReport/SceneTests/applications_plugins_SofaPython3_examples/emptyForceField_py/. thanks @fredroy for the change and @alxbilger for the vigilance :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2804#issuecomment-1108841718:226,test,testReport,226,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2804#issuecomment-1108841718,1,['test'],['testReport']
Testability,"Looks good, let's [ci-build][with-scene-tests]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378934582:40,test,tests,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378934582,1,['test'],['tests']
Testability,"Looks like this particular case falls under the Euler angles singularities. The initial quaternion `q0` converted to Roll-Pitch-Yaw Euler angles has a pitch of `pi / 2`, which corresponds to a singularity case, i.e. there is no global and smooth solutions to the inverse problem of converting the rotation to Euler angles. In this particular case, one DOF is lost (I found the explanations of this quite intuitive and clear here: http://lavalle.pl/vr/node83.html ).; When we can afford it, a good way would be to only allow global parameterizations of SO(3) and simply not use Euler angles, but I guess we have reasons to have them in SOFA and have to deal with them.; I would not go to change anything in the `createQuaterFromEuler` or `toEulerVector` conversions functions, as to me they are valid as it and it is left to the user of Euler angles to know that they have to be used as their are, locally, as it is a local parameterization, i.e. not close to their singularities.; I guess this is what happened also in the random rotations failing tests.; What do you think about simply fixing our tests by excluding cases where quaternion `q0` is leading to a Euler angles singularity (here checking that pitch is not `pi / 2`), prior to converting them back to queternion `q1` ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4122#issuecomment-1698867376:1048,test,tests,1048,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4122#issuecomment-1698867376,2,['test'],['tests']
Testability,"MFC/ATL SDK is needed to get this header (it is proposed in Visual Studio installer).; I tried to remove it once and had an issue, will retry and log here.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/448#issuecomment-334512592:146,log,log,146,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/448#issuecomment-334512592,1,['log'],['log']
Testability,"Make sense that this error does not appear on the CI, as the assert() is not processed by the compiler in other mode than Debug (and I suppose the CI compiles in Release mode with MSVC); and the ambiguity comes from the fact there are two invalidID things, one defined in the sofa namespace and one other defined in the defaulttype namespace for compatibility.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1577#issuecomment-719695958:61,assert,assert,61,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1577#issuecomment-719695958,1,['assert'],['assert']
Testability,Make sense. [ci-build][with-all-tests]; (to be sure),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1879#issuecomment-788731272:32,test,tests,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1879#issuecomment-788731272,1,['test'],['tests']
Testability,"Matt',. Yes the breakage would be minimal. . It would be possible to mix instance-based and class-based Data management as long as the consistency in maintained through the data API in `Base`. Static data would incur no extra penalty at construction time, but later add/remove would remain possible. . I am unsure this is desirable, however: a full-blown mix of class-based and instance-based management would require more efforts, mainly to chain class-based datas up the class hierarchy, and I am not sure it is worth it. It could be the case though, but this requires _significant_ changes and testing, like converting all the existing `initData` to the new system for example. The use case I had in mind was more like the 5-10% cases where it really matters to be fast, and we don't really care whether data's are setup properly, and we sure do _not_ want to pay for it. . If data inspection turns out to be required (e.g. for debug), then we can come up with an ad-hoc solution when/if it's needed, but at this point it is not clear whether this will be of sufficient interest. But maybe more people could step in and provide feedback?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255404557:597,test,testing,597,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255404557,1,['test'],['testing']
Testability,"Meh... it was just a missing warning that the test expected. :D ; I wanted to leave out the warning to not flood the output, once all points are gone. :P",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3529#issuecomment-1340841032:46,test,test,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3529#issuecomment-1340841032,1,['test'],['test']
Testability,Merged too fast! Tests are failing on CentOS.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1823#issuecomment-779848845:17,Test,Tests,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1823#issuecomment-779848845,1,['Test'],['Tests']
Testability,More tests and less SofaTest. Thanks @epernod,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1909#issuecomment-795105690:5,test,tests,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1909#issuecomment-795105690,1,['test'],['tests']
Testability,My change is not a regression. Builds are now failing when unit tests crash for an unexpected reason (not due to the test itself).; Sorry to kind of break your PR @damienmarchal :-/,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-343187862:64,test,tests,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-343187862,2,['test'],"['test', 'tests']"
Testability,"My checklist:; - tests coverage (none, low, good); - have at least one working example (yes, no); - is validated in the Igor's sense (if yes provide a link to the validation references); - is thread safe according a given thread safe design provided by the Multi-thread WG. ; - sofa code guidelines violation (none, a few, a lot) . I suggest this checklist to be part of the component as a kind of meta-data in the factory.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132:17,test,tests,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132,1,['test'],['tests']
Testability,"My example: ; Open ""test.scn"" in my application, the content is as follows:; ```; <?xml version=""1.0"" ?>; <Node name=""root"" dt=""0.005"" gravity=""0 0 0"" >; 	<AddResourceRepository path="".""/>; 	<RequiredPlugin pluginName='SofaOpenglVisual'/>; 	<RequiredPlugin pluginName='MyTestFlugin'/>; <VisualStyle displayFlags=""hideBehaviorModels showVisual hideForceFields"" />; 	; <CollisionPipeline verbose=""0"" />; <BruteForceDetection name=""N2"" />; 	<CollisionResponse response=""MultiFrictionContact"" />; <FreeMotionAnimationLoop/>; <!--LCPConstraintSolver name=""cs"" tolerance=""0.001"" maxIt=""500""/-->; 	<GenericConstraintSolver name=""cs"" tolerance=""0.001"" maxIt=""500""/>; 	<MyTestController name=""body"" modelName=""patient.scn"" />; </Node>; ```. I dynamically load ""patient.scn"" in the MyTestController component, the code is as follows:. ```; sofa::simulation::SceneLoader *loader = sofa::simulation::SceneLoaderFactory::getInstance()->getEntryFileName(modelPath);; if (loader); {; 	m_node = loader->load(modelPath.c_str());; 	m_node->init(sofa::core::ExecParams::defaultInstance());; }; ```; The content of ""patient.scn"" is as follows:; ```; <?xml version=""1.0""?>; <Node name=""root"" gravity=""0 0 0"" dt=""0.005"" >. 	<RequiredPlugin name=""MeshFbxLoader"" />; 	<Node name=""Patient"">; 		<MechanicalObject name=""Articulations"" template=""Vec1d"" size=""1"" />; 		<Node name=""PatientBone"">; 			<MeshFbxLoader name=""fbxloader"" filename=""Body-Bone.FBX"" />		; 			<MechanicalObject name=""Bones"" template=""Rigid3d"" position=""@fbxloader.bonePos"" showObject=""0"" />; 			<Node name=""skinning"">; 				<OglModel name=""body"" src=""@../fbxloader"" />; 				<SkinningMapping name=""skinMap"" template=""Rigid3d,ExtVec3d"" input =""@../Bones"" output =""@body"" nbRef =""@../fbxloader.nbref"" indices =""@../fbxloader.boneIds"" weight=""@../fbxloader.boneWeights""/>; 			</Node>	; 			<ArticulatedSystemMapping input1=""@../Articulations"" output=""@Bones""/>; 		</Node>; 		<ArticulatedHierarchyContainer/>; 		<Node name=""articulationCenters"">; 			<Node name=""art",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696:20,test,test,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696,1,['test'],['test']
Testability,My guess is this PR is really a kick in the 💩 ; I came up to this single line fix because Data update were looping between engine using dofs as input and forcefield and mapping....; In the list of failing test could you pick one that you know is supposed to work and I'll check what changed.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1977#issuecomment-815097407:205,test,test,205,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1977#issuecomment-815097407,1,['test'],['test']
Testability,Need to be benchmark to see if the conversion by the GPU has an impact or not.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2856#issuecomment-1097837161:11,benchmark,benchmark,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2856#issuecomment-1097837161,1,['benchmark'],['benchmark']
Testability,New benchmark:. ```; ------------------------------------------------------------------------------; Benchmark Time CPU Iterations; ------------------------------------------------------------------------------; BM_Matrix_typematf_matmult<3>/128 0.689 us 0.684 us 1120000; BM_Matrix_typematf_matmult<3>/256 1.28 us 1.29 us 497778; BM_Matrix_typematf_matmult<3>/512 2.76 us 2.73 us 263529; BM_Matrix_eigenmatf_matmult<3>/128 1.01 us 1.03 us 746667; BM_Matrix_eigenmatf_matmult<3>/256 1.93 us 1.95 us 344615; BM_Matrix_eigenmatf_matmult<3>/512 3.81 us 3.81 us 172308; ```. We are faster than Eigen!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1240734523:4,benchmark,benchmark,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1240734523,2,"['Benchmark', 'benchmark']","['Benchmark', 'benchmark']"
Testability,"New library to factorize the functions that will be called for the tests of BaseMatrix.; Need the INTERFACE CMakeMake keyword to compile a ""header-only library"". Did you intend to add any further features/functions/codes in the PR @alxbilger ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2280#issuecomment-892494390:67,test,tests,67,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2280#issuecomment-892494390,1,['test'],['tests']
Testability,Newly failing tests can be fixed in #237.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291900184:14,test,tests,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291900184,1,['test'],['tests']
Testability,"Nice work @epernod :+1:; If you already know what must be done to fix the tests, I'm for doing it in this PR !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2249#issuecomment-882630651:74,test,tests,74,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2249#issuecomment-882630651,1,['test'],['tests']
Testability,"Nice work, do you need help to test?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/853#issuecomment-446174036:31,test,test,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/853#issuecomment-446174036,1,['test'],['test']
Testability,No regression test on the advanceTimer? ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/719#issuecomment-405518396:14,test,test,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/719#issuecomment-405518396,1,['test'],['test']
Testability,"Nope, nothing planned. I trust you guys for the cmake side. On Wed., Aug. 4, 2021, 11:06 Hugo, ***@***.***> wrote:. > New library to factorize the functions that will be called for the tests; > of BaseMatrix.; > Need the INTERFACE CMakeMake keyword to compile a ""header-only library"".; >; > Did you intend to add any further features/functions/codes in the PR; > @alxbilger <https://github.com/alxbilger> ?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/sofa-framework/sofa/pull/2280#issuecomment-892494390>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ACQVHUH6LCJFLIWGUGITT3LT3D7J5ANCNFSM5BIERQAQ>; > .; > Triage notifications on the go with GitHub Mobile for iOS; > <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>; > or Android; > <https://play.google.com/store/apps/details?id=com.github.android&utm_campaign=notification-email>; > .; >",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2280#issuecomment-892979761:185,test,tests,185,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2280#issuecomment-892979761,1,['test'],['tests']
Testability,Not since one week. ; We were waiting VS-2013 to be removed. ; I just fixed the merge with master done by froy which was looking weird on OglLabel and ; add some tests.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/206#issuecomment-297651950:162,test,tests,162,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/206#issuecomment-297651950,1,['test'],['tests']
Testability,Not sure why these tests do not pass @alxbilger https://github.com/sofa-framework/sofa/blob/dccb9849ed4b08a305086e02131ce7c25c79eff0/Sofa/Component/Topology/Utility/tests/TopologyChecker_test.cpp#L1346-L1369,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3151#issuecomment-1232705945:19,test,tests,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3151#issuecomment-1232705945,2,['test'],['tests']
Testability,"Note for @sofa-framework/reviewers ; The PR now builds and tests run.; This PR might be really breaking, and your careful review and feedback is more than welcome. I am available for any question.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/637#issuecomment-391685881:59,test,tests,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-391685881,1,['test'],['tests']
Testability,Note meeting 28/02/2024 : Sofa.Testing should externalized in order to bring real modularization,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4459#issuecomment-1968479959:31,Test,Testing,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4459#issuecomment-1968479959,1,['Test'],['Testing']
Testability,Note that this PR should fix the unit tests introduced in https://github.com/sofa-framework/sofa/pull/3501,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3529#issuecomment-1337529119:38,test,tests,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3529#issuecomment-1337529119,1,['test'],['tests']
Testability,Note: To test the bug: Demo/CollisionMultiple.scn related to #270,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/308#issuecomment-313043281:9,test,test,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/308#issuecomment-313043281,1,['test'],['test']
Testability,"Note: empty `ArgumentParser::extra_args()` will not set `sys.argv`, as opposed to set it some empty list (this was the reason why the test was failing: it would reset it to empty on script loading after being set initially from the test binary). I'm not quite happy with this kind of side-effect, but this matches the previous behaviour so `¯\_(ツ)_/¯`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/368#issuecomment-324934199:134,test,test,134,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/368#issuecomment-324934199,2,['test'],['test']
Testability,"Nothing to add except that after few test my conclusion is that Include-what-you-use is ok but can only detect includes that are not needed. Thus an include needed because of an single inline method in a .h will not be detected as not-needed. . On my side I'm using the -H options of g++ to prints all the includes loaded when compiling a .cpp then I use a small python script to generate an html page out of that to navigate from includes to includes. Because I lack of time it is as-is, ; https://github.com/damienmarchal/snippets/blob/master/include-analyzer.py",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1527#issuecomment-706382858:37,test,test,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1527#issuecomment-706382858,1,['test'],['test']
Testability,Now is the good time to suggest any other clang-tidy run among:. | _ | _ |; |------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------|; | [boost-use-to-string](https://clang.llvm.org/extra/clang-tidy/checks/boost-use-to-string.html) | [hicpp-braces-around-statements](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-braces-around-statements.html) |; | [bugprone-argument-comment](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-argument-comment.html) | [hicpp-deprecated-headers](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-deprecated-headers.html) |; | [bugprone-assert-side-effect](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-assert-side-effect.html) | [hicpp-exception-baseclass](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-exception-baseclass.html) |; | [bugprone-bool-pointer-implicit-conversion](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-bool-pointer-implicit-conversion.html) | [hicpp-explicit-conversions](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-explicit-conversions.html) |; | [bugprone-copy-constructor-init](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-copy-constructor-init.html) | [hicpp-function-size](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-function-size.html) |; | [bugprone-dangling-handle](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-dangling-handle.html) | [hicpp-invalid-access-moved](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-invalid-access-moved.html) |; | [bugprone-fold-init-type](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-fold-init-type.html) | [hicpp-member-init](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-member-init.html) |; | [bugprone-forward-declaration,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:861,assert,assert-side-effect,861,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,2,['assert'],['assert-side-effect']
Testability,Now it compiles let's try the full damages: [ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1605#issuecomment-726778540:66,test,tests,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1605#issuecomment-726778540,2,['test'],['tests']
Testability,Now the `multTranspose` operation is faster than Eigen:. ```; -----------------------------------------------------------------------------------; Benchmark Time CPU Iterations; -----------------------------------------------------------------------------------; BM_Matrix_typemat3x3f_multTranspose/128 0.731 us 0.711 us 746667; BM_Matrix_typemat3x3f_multTranspose/256 1.53 us 1.54 us 497778; BM_Matrix_typemat3x3f_multTranspose/512 2.83 us 2.85 us 235789; BM_Matrix_eigenmat3x3f_multTranspose/128 0.842 us 0.837 us 746667; BM_Matrix_eigenmat3x3f_multTranspose/256 1.73 us 1.73 us 407273; BM_Matrix_eigenmat3x3f_multTranspose/512 3.46 us 3.45 us 194783. ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1240495147:147,Benchmark,Benchmark,147,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1240495147,1,['Benchmark'],['Benchmark']
Testability,"Now, as you said Maxime, the definitive solution would be to implement component specific tests where the components are implemented and not in a shared plugins like SceneCreator or SofaTest but this is still something to do (One step at a time).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334525669:90,test,tests,90,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334525669,1,['test'],['tests']
Testability,"Now, each class has its own file. A unit test has been added. The error message is managed by a `Data<DisplayFlags>` (only if you include `Data[DisplayFlags].h`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3575#issuecomment-1384992721:41,test,test,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3575#issuecomment-1384992721,1,['test'],['test']
Testability,"OK,; I updated the PR with a few things:; 1 / the test now checks the content of the generated files for error; 2 / Monitor has an additional data field ""fileName"" through which one can override the default path to the generated files; 3 / Monitor now respects basic coding guidelines; Looks a bit better now",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/312#issuecomment-313136828:50,test,test,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-313136828,1,['test'],['test']
Testability,"OMG There is so much things to do to finalize this PR. ; I'm reviewing my own code but among things:; - add docstring,; - remove the todo before PR; - add tests to each new features.; - ...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/410#issuecomment-332143846:155,test,tests,155,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/410#issuecomment-332143846,1,['test'],['tests']
Testability,OMG... it compiles and it pass tests... DDGNode clean step1 will be over soon. ; next-step...BaseData/Data.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1372#issuecomment-627197521:31,test,tests,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1372#issuecomment-627197521,1,['test'],['tests']
Testability,"Oh and here's a minimal scene to test the new feature:. ```python; import Sofa; import Sofa.Core. def createScene(; root_node: Sofa.Core.Node,; ) -> Sofa.Core.Node:. plugin_list = [; ""Sofa.Component.Collision.Detection.Algorithm"", # [BVHNarrowPhase, BruteForceBroadPhase, DefaultPipeline]; ""Sofa.Component.Collision.Detection.Intersection"", # [NewProximityIntersection]; ""Sofa.Component.Collision.Geometry"", # [SphereCollisionModel]; ""Sofa.Component.Collision.Response.Contact"", # [DefaultContactManager]; ""Sofa.Component.Constraint.Projective"", # [FixedConstraint]; ""Sofa.Component.LinearSolver.Iterative"", # [CGLinearSolver]; ""Sofa.Component.Mass"", # [UniformMass]; ""Sofa.Component.ODESolver.Backward"", # [EulerImplicitSolver]; ""Sofa.Component.SolidMechanics.Spring"", # [StiffSpringForceField]; ""Sofa.Component.Topology.Container.Dynamic"", # [EdgeSetTopologyContainer, EdgeSetTopologyModifier]; ""Sofa.Component.Visual"", # [VisualStyle]; ""SofaCarving"", # [CarvingManager]; ""Sofa.Component.StateContainer"", # [MechanicalObject; ]. plugin_node = root_node.addChild(""Plugins""). for plugin in plugin_list:; plugin_node.addObject(""RequiredPlugin"", pluginName=plugin, name=plugin). root_node.addObject(""DefaultAnimationLoop""); root_node.addObject(""DefaultVisualManagerLoop""); root_node.addObject(; ""VisualStyle"",; displayFlags=[""showVisual"", ""showForceFields"", ""showCollisionModels"", ""showBehaviorModels"", ""showInteractionForceFields""],; ). root_node.addObject(""DefaultPipeline""); root_node.addObject(""BruteForceBroadPhase""); root_node.addObject(""BVHNarrowPhase""); root_node.addObject(""DefaultContactManager"", response=""PenalityContactForceField""). root_node.addObject(; ""NewProximityIntersection"",; alarmDistance=3.0,; contactDistance=0.5,; ). root_node.gravity = [0.0, -918, 0.0]. scene_node = root_node.addChild(""scene""); #############; # Cutting Sphere; #############; cutting_sphere_node = scene_node.addChild(""cutting_sphere""); cutting_sphere_node.addObject(""CGLinearSolver""); cutting_sphere_node.add",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3239#issuecomment-1224323251:33,test,test,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3239#issuecomment-1224323251,1,['test'],['test']
Testability,"Oh... when I made last commit, I meant to revert a37ba08. Had been awake for more than 40 hours(academics, tests, etc.) and evidently, wasn't thinking properly. (Slept like a baby right after last commit. :grin: ) Will adjust this in next commit. Creating new files sounds right. I have another exam tomorrow. Will do right after it. :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/639#issuecomment-382434596:107,test,tests,107,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-382434596,1,['test'],['tests']
Testability,"Ok I didn't take the time to run the tests myself so I wanted to see the Dashboard. Is it actually possible to have more than 1 failure in a test ? Both ""ATLEAST_ONE"" and ""ATLEAST_TWO"" seem useless there.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370723402:37,test,tests,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370723402,2,['test'],"['test', 'tests']"
Testability,"Ok for me. . (for the future: I'm still unsure mixing push based logic with the ""on demand"" will not cause more troubles than it solves).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/911#issuecomment-480197507:65,log,logic,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/911#issuecomment-480197507,1,['log'],['logic']
Testability,Ok found it: the scene-tests are not performing in default mode (100 iterations with a timeout of 60s for a Debug build) because FastTetrahedronCorotationalForceField.scn is listed with custom values in examples/.scene-tests config file.; Renaming the scene according to b061a51606f9dbe6a8bb9305eb6a95af0aad6bf5 should calm down the CI ;-),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/554#issuecomment-359378442:23,test,tests,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/554#issuecomment-359378442,2,['test'],['tests']
Testability,"Ok so I see still a lot of change to do before to have a clean PR to merge. ; The first change is probably to make the code available in an independant plugin. ; I wonder if this could be an opportunity to make the whole VolumetricData a plugin ....this could be a kind of gentle test for sofa core pluginiization, . @guparan , @hugtalbot , @fredroy any opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/354#issuecomment-325373316:280,test,test,280,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354#issuecomment-325373316,1,['test'],['test']
Testability,Ok so if the pr is just about wrong messages no need for test :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/406#issuecomment-329794045:57,test,test,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/406#issuecomment-329794045,1,['test'],['test']
Testability,"Ok so maybe I misunderstood your last comment, but the GTest find module you added in your last commit works fine on my side with cmake >= 3.12 (which is our min required version). So I guess you meant that the embedded GTest find module in recent cmake version (>=3.20) was required to have the correct targets defined, which is not the case in earlier <3.20 version of cmake (tested in 3.12), but this recent GTest find module was not building if used with cmake <3.20. In the end, your last commit seems to fix everything, so looks like a more generic option that relying on cmake config files as suggested in my last comment.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1923509418:378,test,tested,378,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1923509418,1,['test'],['tested']
Testability,"Ok so, hopefully the end of this PR. I reverted some commit and double/both should be back to normal. In the case of float only the DilateEngine is not available and its test deactivated. So basically it should compile fine, but some components would be limited.; I quickly tried to fix it but I encountered some difficulties. I would prefer open a new issue regarding float compliance of remaining components. To sum up, it should be back to the original goal: fix compilation, not necessarily the components with type limitation",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/262#issuecomment-305318209:170,test,test,170,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/262#issuecomment-305318209,1,['test'],['test']
Testability,Ok thanks a lot for the test,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3650#issuecomment-1432673313:24,test,test,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3650#issuecomment-1432673313,1,['test'],['test']
Testability,"Ok the following works: . ```c++; static std::string convert_string(PyObject* object) {; if( PyString_Check(object) ) {; // strings will be strings; return PyString_AsString(object);; }; ; if( PySequence_Check(object) ) {; std::stringstream ss;. for(Py_ssize_t i = 0, n = PySequence_Length(object); i < n; ++i) {; if(i > 0) ss << ' ';; ss << convert_string(PySequence_GetItem(object, i));; }; ; return ss.str();; }. // fallback to python string conversion; PyObject* str = PyObject_Str(object);; std::string res = PyString_AsString(str);; Py_DECREF(str);; ; return res;; }; ```. `Binding_BaseObject.cpp:`. ```c++; SP_CLASS_METHODS_END;. static struct patch {; patch() {; // set __str__ slot for BaseObject; SP_SOFAPYTYPEOBJECT(BaseObject).tp_str = [](PyObject* self) {; return BaseObject_getLinkPath(self, nullptr);; };; }; } patcher;. SP_CLASS_TYPE_SPTR(BaseObject, BaseObject, Base); ```; It does breaks some python tests in Compliant, but this is due to errors there. I can push code to another PR that does the whole thing if needed (I don't think I have push access to this one).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307775648:918,test,tests,918,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307775648,1,['test'],['tests']
Testability,Ok to be merged.; But should not we prepare the next PR correcting most of the tests before merging this PR?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291873684:79,test,tests,79,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291873684,1,['test'],['tests']
Testability,"Ok, I have meanly three reasons:; - how explain mechanically that the stiffness is multiplied by a length ?; - there is no test when the length is 0 (almost) (the problem that occured to me); - when the length is very small you will have a very high stiffness which is different from the stiffness you enterred. I understand your concerns but I think the behavior is not what expected (at least for the third reason). The existing scenes take maybe into account these strange behavior.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/290#issuecomment-311888196:123,test,test,123,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/290#issuecomment-311888196,1,['test'],['test']
Testability,"Ok, I've just realized that the strange tetra crushing that appears on the top of the beam doesn't appear before your pr (on the commit from which your branch has been created). So there might be something wrong going on... Do you want my scene to do some tests on your side ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1632825342:256,test,tests,256,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1632825342,1,['test'],['tests']
Testability,"Ok, good to know! Thanks for having tested that. To summarize:. 1. PenalityContactForceField needs to implement `addKToMatrix`; 2. Matrices need to be mapped so contacts can be correctly created when the collision model is mapped",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2060#issuecomment-908090195:36,test,tested,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2060#issuecomment-908090195,1,['test'],['tested']
Testability,"Ok, so I gave it a quick look. ; The good news is that this PR does not breaks anything. ; The bad news is that the failing test may be a new OpenIssue. . The underlying problem is that the implementation of ; std::string FileRepository::relativeToPath(std::string path, std::string refPath); is converting the path to be to lowercase on windows but not on Linux/MacOS. I see no good reason why we should do that only on Windows so I think we should fix this function to gave it a consistant behavior on all OS as well as a behavior that correspond to its name. . If returning a lowercased relative path is important this should be implemented in a separated function.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/250#issuecomment-300150787:124,test,test,124,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/250#issuecomment-300150787,1,['test'],['test']
Testability,"Ok, this PR is almost there. Only one test is failing.; @fjourdes have you few minutes to check it out ? thx",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/459#issuecomment-367262010:38,test,test,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-367262010,1,['test'],['test']
Testability,"On my side I would like to have automatically generated tests on the Data<> to be sure the object behave nicely whatever the user gives as input. . I made some early prototype (read, non-satsifactory) using clang but I have more high priority task to do.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/111#issuecomment-271665560:56,test,tests,56,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/111#issuecomment-271665560,1,['test'],['tests']
Testability,"On the BFM it compile perfectly!; There are just some errors related to update & doUpdate function that will need to be fixed but this doesn't come from this MR. (@EulalieCoevoet); I also test some examples and still no error for me, so it should be ok.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/834#issuecomment-441579131:188,test,test,188,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/834#issuecomment-441579131,1,['test'],['test']
Testability,"On the dash ; http://www.sofa-framework.org/dash/index.php?limit=10&pg=1&user=&branch=pr%2Ffix_filerepository&platform= . I do not see an information to be able to fix any compilation pb, I might not be looking in the right place ? Can you point me the correct dash url ? . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Author""; > <author@noreply.github.com>; > Envoyé: Jeudi 19 Janvier 2017 10:46:13; > Objet: Re: [sofa-framework/sofa] [SofaKernel] Fix FileRepository should not; > be optional (#122). > This PR:. > * succeed on all compilations setup on the CI.; > * does not generates new warnings or test failure.; > * does not break existing scenes.; > * does not break API compatibility.; > * is now 1 week old. > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/122#issuecomment-274104510:750,test,test,750,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/122#issuecomment-274104510,1,['test'],['test']
Testability,One last test is failing (indice out of range) for Python_test,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264234:9,test,test,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264234,1,['test'],['test']
Testability,One more time! [ci-build] [with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/350#issuecomment-319609572:38,test,tests,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/350#issuecomment-319609572,1,['test'],['tests']
Testability,One of the mac on the CI does not have numpy for python3 (thats why the unit tests are failing) but otherwise seems good for me!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1918#issuecomment-799500705:77,test,tests,77,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1918#issuecomment-799500705,1,['test'],['tests']
Testability,"One simple solution, it to add [Base::checkDataValidity()](url). Its call would be let to the application.; For example, runSofa would call it right before `init` and `reinit`, but a more specific application could chose not to call it not to add over-cost. Note that high level checkers could be implemented (such as `check_it_is_a_valid_vector_of_indices`, ...). The downside is how to perform the check on a single Data rather than at the component level? But maybe it would be way sufficient for what we attend to do?; To perform the test at the Data level, we need to differentiate Data modification coming from a user vs coming from a computation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/265#issuecomment-302649603:538,test,test,538,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/265#issuecomment-302649603,1,['test'],['test']
Testability,One test added in the PR is failing --> to be fixed,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3271#issuecomment-1275837981:4,test,test,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3271#issuecomment-1275837981,1,['test'],['test']
Testability,"One unit test failling : ; https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4494/CI_CONFIG=ubuntu_gcc,CI_PLUGINS=options,CI_TYPE=release/2/testReport/UnitTests.Sofa_Component/Topology_InciseProcessor_test/InciseTriangles/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4494#issuecomment-1943419526:9,test,test,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4494#issuecomment-1943419526,2,['test'],"['test', 'testReport']"
Testability,"One unit test is failing, but it does not seem to be related to this pull request. Could you just make sure of it?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3843#issuecomment-1543476543:9,test,test,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3843#issuecomment-1543476543,1,['test'],['test']
Testability,"One unit test is still failing on mac and unbutu ...👺; ```; 3271/macos_clang_options_release/src/Sofa/Component/Topology/Container/Dynamic/tests/EdgeSetTopology_test.cpp:352; Expected equality of these values:; edgeH0->getName(); Which is: ""TopologyDataHandler( VectorSpringForceField )springs""; ""TopologyDataHandler( MeshMatrixMass )edgeMass""; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3271#issuecomment-1280904900:9,test,test,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3271#issuecomment-1280904900,2,['test'],"['test', 'tests']"
Testability,One warning added : CommunicationSubscriber.inl:36 (-Wreorder). Two scene tests failing:; - receiverRequest.scn; - senderRequest.scn. and several others on CentOS,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/534#issuecomment-679145990:74,test,tests,74,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-679145990,1,['test'],['tests']
Testability,Optimize the assembly of mapped ForceFields JtKJ by identifying the useful terms of the Jacobian matrix with regards to the K matrix shape. :arrow_right: a regression appeared on BeamFEMForceField and a scene test seems to fail SpatialGridPointModel.scn,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4001#issuecomment-1621242771:209,test,test,209,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4001#issuecomment-1621242771,1,['test'],['test']
Testability,Option set for Metis (which should override the metis one). Create an option instead of setting it. A test will also be done.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3072#issuecomment-1169733966:102,test,test,102,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3072#issuecomment-1169733966,1,['test'],['test']
Testability,Or use a map tag -> shader stack? this way we should get O(n * log(k) ),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/292#issuecomment-306522109:63,log,log,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/292#issuecomment-306522109,1,['log'],['log']
Testability,"Output of the failing test on MacOS:; ```; [----------] 1 test from Batch/Python_scene_test; [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/0; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.p",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:22,test,test,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176,2,['test'],['test']
Testability,"Owh, CI seems not happy.; I will make sure to fix it (coming from the recent change in testing, to be propagated in regression)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-806216521:87,test,testing,87,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-806216521,1,['test'],['testing']
Testability,Please add unit tests based on the PR #3050,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3010#issuecomment-1169721980:16,test,tests,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3010#issuecomment-1169721980,1,['test'],['tests']
Testability,Please consider merging this PR soon ;-); [ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/546#issuecomment-364502422:64,test,tests,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/546#issuecomment-364502422,1,['test'],['tests']
Testability,Please make a separate pull request referencing #368. . I need to fix failing tests before #368 is merged though.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324897715:78,test,tests,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324897715,1,['test'],['tests']
Testability,Please submit a PR with a test validating the right behavior.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/9#issuecomment-298854469:26,test,test,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9#issuecomment-298854469,1,['test'],['test']
Testability,"Plugin SofaCoreAsync; https://github.com/SofaDefrost/sofa/blob/pluginSofaCoreAsync/applications/plugins/SofaCoreAsync/Sofa/Core/Async/tests/AsyncComponentTracker_test.cpp. Associate to the component a Data<'state'>. This data state can be used to keep track of component state change and propagate lazy update so that the component that depend on other can be updated appropriately. The general design was attempting to combine both synchonous and asynchronous components in the same scene so that ""normal"" Sofa object can still interact with the one using asynchronous updates. . In the following example a change in python1,2,3 file is reloaded and the ImplicitFeldRenderer & MeshGeneration are updated, each in an asynchronous way. ; ```qml; Node : {; ImplicitField : { name : ""python1"", src : ""python1.py"" }; ImplicitField : { name : ""python2"", src : ""python2.py"" }; ImplicitField : { name : ""python3"", src : ""python3.py"" }; ; ImplicitFieldRenderer : { src : ""@python1"" }; ImplicitFieldRenderer : { src : ""@python2"" }; ImplicitFieldRenderer : { src : ""@python2"" }. TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh1"" }; SurfaceMeshGeneration : { src : ""@python2"", name = ""mesh2"" }; TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh3"" }; ; MechanicalFEM3D : { src : ""@mesh1"" }; MechanicalFEM2D : { src : ""@mesh2"" }; MechanicalFEM3D : { src : ""@mesh3"" }; }; ```. Note 1: When used in asyncrhonous mode, the current approach does not guarante that a change is propagated immediately. So one change in a component at a given IDLEEvent may be updated in this or an other IDLEEvent. It depend on ""when"" the dependencies checks the validity of their input. . Node 2: To fix that a queue may be used to keep track of what still needs to be done. Looks good on paper but this kind of implementation are often much more complex than their initial drafted idea.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769:134,test,tests,134,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769,1,['test'],['tests']
Testability,"Poke @fjourdes @bakpaul ;). TODO : ; - test with weak (spring) constraint instead of the projective one; - add clamping on eigen values in the Hessian; - investigate the failing tests (to be listed, a priori Ogden Mooney Rivlin for PK2 + Costa for the Hessian-ElasticityTensor)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4603#issuecomment-2009244438:39,test,test,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4603#issuecomment-2009244438,2,['test'],"['test', 'tests']"
Testability,Probably because of the removal of the DataRepository intialization in https://github.com/sofa-framework/sofa/commit/5dad27f7bc374c190042959bc55367532008b25a#diff-876fc7003912f34d0dac92bb413d70a0 ; The tests are failling but as they were not in-heriting from BaseTest/SofaTest this was not reported as test failure.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/832#issuecomment-440205222:202,test,tests,202,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/832#issuecomment-440205222,2,['test'],"['test', 'tests']"
Testability,Problem (test failing) seems to be fixed with the Inherit::parse(),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2098#issuecomment-861271861:9,test,test,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2098#issuecomment-861271861,1,['test'],['test']
Testability,Problem demonstrated in the failing tests DataFileNameVector_test.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/21#issuecomment-248850189:36,test,tests,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/21#issuecomment-248850189,1,['test'],['tests']
Testability,Ready but waiting the CI to be upgraded with #2251 to be sure that all tests are OK,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2240#issuecomment-880523148:71,test,tests,71,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2240#issuecomment-880523148,1,['test'],['tests']
Testability,"Ready, merge if [ci-build][with-all-tests] agrees.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1253449018:36,test,tests,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1253449018,1,['test'],['tests']
Testability,"Reasons for the failing tests:; - Timeout: simulations are way slower, but not necessarily different in terms of behavior; - `buildStiffnessMatrix` is not implemented: if it is not implemented, there is the backup of calling `addKToMatrix`, but it is not necessarily implemented.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4010#issuecomment-1623097057:24,test,tests,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4010#issuecomment-1623097057,1,['test'],['tests']
Testability,Rebase on #3050 and then create a unit test on SparseLDLSolver: doAddJMInvJtLocal,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3010#issuecomment-1169723258:39,test,test,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3010#issuecomment-1169723258,1,['test'],['test']
Testability,Rebuild and run the scene tests :; [ci-build] [with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/411#issuecomment-336932219:26,test,tests,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411#issuecomment-336932219,2,['test'],['tests']
Testability,Regarding last review comments (as I'm not sure to be there for the next review):. - I would like to remove those header directly... do we have to go through the 6 months of deprecated before... ?; - Do you want me to put keep empty headers with the SOFA_DEPRECATED_HEADER macro? ; - I would keep the xxxSetGeometryAlgorithms and not put everything inside xxxSetTopologyXXX because the name Geometry make sense here to indicate we depend on the type of dof (aka mechanicalObject). Tests and scenes have been updated.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1546#issuecomment-725923633:481,Test,Tests,481,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1546#issuecomment-725923633,1,['Test'],['Tests']
Testability,"Regression results exported with Windows make the regression tests fail on Linux and inversely. It may come from a precision problem in one component, from the amount of exported data or from the regression mechanism itself. To be investigated at STC coding sprint",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2800#issuecomment-1136957490:61,test,tests,61,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2800#issuecomment-1136957490,1,['test'],['tests']
Testability,Regression tests execution time after:; real 0m22.666s; user 0m0.000s; sys 0m0.015s; Reference size dir: 2.96 mo,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1061#issuecomment-499862525:11,test,tests,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1061#issuecomment-499862525,1,['test'],['tests']
Testability,Regression tests execution time before:; real 0m41.202s; user 0m0.000s; sys 0m0.015s; Reference dir: 32 mo,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1061#issuecomment-499859915:11,test,tests,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1061#issuecomment-499859915,1,['test'],['tests']
Testability,"Relevant test results are correct now, ready.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3329#issuecomment-1301501723:9,test,test,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3329#issuecomment-1301501723,1,['test'],['test']
Testability,Remark : I need to fix the test on planeForceField,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/704#issuecomment-402411560:27,test,test,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/704#issuecomment-402411560,1,['test'],['test']
Testability,Report from users. They tests the example and it does not work;,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1020#issuecomment-489637824:24,test,tests,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1020#issuecomment-489637824,1,['test'],['tests']
Testability,"STC10 Feedback: (https://annuel2.framapad.org/p/sofang-v6). SofaFramework will be re-designed like that:; ```; * Type (Vec, Mat, Quat, Frame, BaseMatrix, BaseVector, BoundingBox, Ray, ...) ( + leurs algos); * StdType (fixed_array, vector, map, etc); * Geometry (Triangle, Tetra...); * Topology; * Mesh; * Helper; * Config; * Messaging; * Logging; * Image; * BVH; * IO; * System; * Visual; * DefaultType (VecTypes, RigidTypes, ...); * Core; * Data (#1605 #1611 .... ); * TypeInfo (TypeInfo_Vec, TypeInfo_Quat, etc); * DataTypeInfo (DataTypeInfo_Vec, DataTypeInfo_Quat). * Simulation; * Testing (to isolate the dependency gtest); * OpenGL (to isolate the dependency opengl); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1521#issuecomment-734300737:338,Log,Logging,338,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1521#issuecomment-734300737,2,"['Log', 'Test']","['Logging', 'Testing']"
Testability,"Scene test errors ""extension (py) not handled"" should be fixed now.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2804#issuecomment-1103683768:6,test,test,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2804#issuecomment-1103683768,1,['test'],['test']
Testability,Scene tests are failing on Windows,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3315#issuecomment-1268477561:6,test,tests,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3315#issuecomment-1268477561,1,['test'],['tests']
Testability,Scene tests are failing. Back to WIP,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3301#issuecomment-1253645784:6,test,tests,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3301#issuecomment-1253645784,1,['test'],['tests']
Testability,"See my comment in the remarks section of #487. > I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it... which is absolutely not the case. See PR #471; > Instead having a library which depends on gtest and SofaCore which ; > - factorize some initialisation methods when they are actually required in the test `SetUp()` method; > - provide some useful abstractions when you want to test some important concepts of a component, like what SofaTest wanted to do, but without the dependency bloat. A potential non exhaustive list of abstactions such a library could provide ; > - Mapping ; > - linearisation, ; > - applyJ applyJT equivalence ; > - ForceField; > - linearisation; > - addDForce addKToMatrix equivalence ; > - addKToMatrix must give a SPD matrix (well actually in Sofa convention I think internal forcefields actually give a SND matrix but the idea remains... > Nothing of this testing API would require the initialisation of a simulation / node. At this stage to be honest I am not even 100% sure we even need a library for that, maybe free methods are enough.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338631019:247,test,test,247,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338631019,4,['test'],"['test', 'testing']"
Testability,Seems that this causes 1 additional unit test failing: UnitTests.SofaHaptics_test/LCPForceFeedback_test.test_SimpleCollision,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2105#issuecomment-855702940:41,test,test,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2105#issuecomment-855702940,1,['test'],['test']
Testability,Setting back to WIP after a quick review; 1. absolute and relative residual are inverted in the convergence checks; 2. Missing the divergence test when the residual is growing; 3. I will add unit tests for relative norms,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2050#issuecomment-828404081:142,test,test,142,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2050#issuecomment-828404081,2,['test'],"['test', 'tests']"
Testability,Several tests are not passing yet due to error in the code to be fixed soon.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/708#issuecomment-403002854:8,test,tests,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/708#issuecomment-403002854,1,['test'],['tests']
Testability,"Should be fine now; I ran some tests, looks fine to me. MeshNewProximityIntersection is rarely used.; Regarding the TriangleModel the new options seems to add some 1% slow down on a test scene I made, but it's just an option. Ready for me, I wait for a second eye :eye:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1559#issuecomment-724765422:31,test,tests,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1559#issuecomment-724765422,2,['test'],"['test', 'tests']"
Testability,Should not but I will check.; Yes in fact my fix in TetrahedronFEMFF reveals that the test was doing nothing: This the log on the master branch:; ```; [ RUN ] TetrahedronDiffusionFEMForceField_test/0.extension; [ERROR] [TetrahedronFEMForceField(fem)] object must have a mesh topology. The component is inactivated. To remove this error message please add a topology component to your scene. ```; Right now it crashes... will see if I understand enough the test to fix it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/270#issuecomment-302012176:86,test,test,86,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-302012176,3,"['log', 'test']","['log', 'test']"
Testability,"Should we add a regression or a test for `ParallelCGLinearSolver.scn` to check the MT and the non-MT version, if they get both the same result ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717174394:32,test,test,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717174394,1,['test'],['test']
Testability,"Similar feature is merged for the ConstantForceField in [#3924](https://github.com/sofa-framework/sofa/pull/3924). It adds separate callbacks for each data but a hacky flag allows to avoid data cross-dependency by de-activating all inputs non-set at the initialization. It could be done here as well but a more robust implementation (Data, callback) could be found. Add a unit test to make sure that no data cross-dependency is triggered. Manual test as well.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2034213815:377,test,test,377,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2034213815,4,['test'],['test']
Testability,"SimulationCore.so(sofa::simulation::Node::executeVisitor(sofa::simulation::Visitor*, bool)+0x111) [0x7f6588281511]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::DefaultAnimationLoop::step(sofa::core::ExecParams const*, double)+0x124) [0x7f6588263ed4]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::Simulation::animate(sofa::simulation::Node*, double)+0x54) [0x7f65882c9c44]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(sofa::Python_scene_test::run(sofa::Python_test_data const&)+0x2e1) [0x7f658ebb3791]; -> ../builds/pr/all/bin/Compliant_test(sofa::Python_scene_test_sofa_python_scene_tests_Test::TestBody()+0x2e) [0x54f76e]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*)+0x33) [0x7f658ebd7223]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::Test::Run()+0xb7) [0x7f658ebca917]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestInfo::Run()+0x9e) [0x7f658ebca9be]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestCase::Run()+0xa5) [0x7f658ebcaac5]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::internal::UnitTestImpl::RunAllTests()+0x248) [0x7f658ebcd198]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::UnitTest::Run()+0x54) [0x7f658ebcd454]; -> ../builds/pr/all/bin/Compliant_test(main+0xd4) [0x4aeb84]; -> /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf5) [0x7f6585034f45]; -> ../builds/pr/all/bin/Compliant_test() [0x4aec6f]; bash: line 1: 11528 Terminated ../builds/pr/a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:6966,test,testing,6966,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320,7,"['Test', 'test']","['Test', 'testing']"
Testability,"Since the changes are compiled only in debug mode, it is not required to run all the tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3432#issuecomment-1293174113:85,test,tests,85,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3432#issuecomment-1293174113,1,['test'],['tests']
Testability,"Since there is new scene, I force the execution on the CI to be sure.; [ci-build][with-scene-tests]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3508#issuecomment-1332431242:93,test,tests,93,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3508#issuecomment-1332431242,1,['test'],['tests']
Testability,"Small update: seems like the recursive thing is not even the source of the problem. The following object is enough to cause the issue:. ```c++; class TestComponent : public BaseObject {; public:; SOFA_CLASS(TestComponent, BaseObject);; using DataTypes = sofa::defaulttype::Vec3Types;; using VecCoord = DataTypes::VecCoord;; TestComponent() : d_position(initData(&d_position, ""position"", ""Position vector"")){}. void init() override {; Inherit1::init();; ReadAccessor<Data<VecCoord>> a(d_position);; }; private:; Data<VecCoord> d_position;; };; ```; with ; ```python; root.addObject(""MechanicalObject"", name=""MO"", template=""Vec3d"", position=[1, 0, 0]); root.addObject(""TestComponent"", position=""@MO.position""); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2761#issuecomment-1059834227:150,Test,TestComponent,150,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2761#issuecomment-1059834227,4,['Test'],['TestComponent']
Testability,"So I finally used the following name; Valid cases; ```xml; <Import fromPlugin=""SofaOpenglVisual"" component=""OglModel""/>; <Import fromPlugin=""SofaOpenglVisual"" component=""OglModel"" as=""MyVisualModel""/>; <Import fromPlugin=""SofaOpenglVisual"" components=""OglModel,OglShader""/>; <Import fromPlugin=""SofaOpenglVisual"" components=""OglModel, OglShader""/>; <Import fromPlugin=""SofaOpenglVisual"" components=""*""/>; ```. Invalid cases; ``` ; <Import fromPlugin=""SofaOpenglVisual""/> ; <Import fromPlugin=""SofaOpenglVisual"" component=""OglModel"" components=""OglShader""/>; <Import fromPlugin=""SofaOpenglVisual"" components=""OglModel"" as=""VisualModel""/>; <Import fromPlugin=""SofaOpenglVisual"" components=""OglModel, OglShader"" as=""Invalid1, Invalid2""/> // Maybe this one ?; <Import fromPlugin=""SofaOpenglVisual"" components=""*"" as=""Test""/>; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-989048657:813,Test,Test,813,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-989048657,1,['Test'],['Test']
Testability,"So I have tested the branch fjourdes:insimo_freemotion_integration with our plugins. Our tests and examples ran fine.; I have read the very well detailed changelog (thanks for that) and from what I know it looks fine. I didn't review the files changes, because there is too much to look at... but I would agree to merge.; Again, I'm really sorry for the late answer.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/459#issuecomment-362789780:10,test,tested,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-362789780,2,['test'],"['tested', 'tests']"
Testability,"So I think I found a clean way to run the SceneChecks by using SceneLoader::Listener.; SceneChecks are now run on every GUI (batch, classic) and every SceneLoader (XML, Python).; They are also triggered in unit tests that use loadFromMemory but that is maybe too much... What do you guys think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/938#issuecomment-465596135:211,test,tests,211,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/938#issuecomment-465596135,1,['test'],['tests']
Testability,"So I've made a benchmark on my side too, it is a rectangular beam falling on a cube. Little specs : . ![ezgif com-video-to-gif](https://github.com/sofa-framework/sofa/assets/30337881/d7a812f8-5127-4e3b-b177-ee9bee793516). Beam : ; - 625 points; - 2304 tetra. Constraints : ; - 276 constraints; - 200 CG iteration; ; -----; Synchronous inverse product; - BuildSystem step took a mean of 66.25 ms (75% of the time step); - Simulation fps : ~ 11 FPS. ----; Asynchronous inverse product; - BuildSystem step took a mean of 49.81 ms (69% of the time step); - Simulation fps : ~ 14 FPS",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1632643547:15,benchmark,benchmark,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1632643547,1,['benchmark'],['benchmark']
Testability,So apparently SceneLoaderPY (Python scene loader) needs to call notifyLoadingScene at a specific moment because using my new `doLoad` delegate messes with the unit test SofaPython_test/python/moduleReload.py. @damienmarchal Could you tell me if you see a fix to that?. We still can stick to the old `load` override and ignore `doLoad` in SceneLoaderPY.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/938#issuecomment-465612130:164,test,test,164,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/938#issuecomment-465612130,1,['test'],['test']
Testability,So let Guillaume finish...; But is the autodump stuff useful or not ?; If Backtrace is not installed by default how a failing test will print anything ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/191#issuecomment-284087037:126,test,test,126,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/191#issuecomment-284087037,1,['test'],['test']
Testability,So now the linkage of metis is PRIVATE in `Sofa.Component.LinearSolver.Direct` and every other target requiring metis finds the package itself (e.g. SofaMatrix) . One problem is that FetchContent_MakeAvailable make the target available for the current target and its child (that is why the test in `Sofa.Component.LinearSolver.Direct` is able to link to metis without the need of finding it) but other unrelated targets cannot find it. So we cannot keep it Public because it will not be found by the other target linking to `Sofa.Component.LinearSolver.Direct` because a lot of them doesn't require metis,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4450#issuecomment-1956756623:290,test,test,290,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4450#issuecomment-1956756623,1,['test'],['test']
Testability,"So there is no ""no-go"" from any one. So I rebuild from recent master with testing the scene...and then...merge. ; [build][with-scene-tests]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/484#issuecomment-339979817:74,test,testing,74,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/484#issuecomment-339979817,2,['test'],"['testing', 'tests']"
Testability,So this PR is merged...but the CI configuration needs to be updated to rename PLUGIN_XXX into MODULE_XXX this is the cause of the failing test on the CI.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/732#issuecomment-410245860:138,test,test,138,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/732#issuecomment-410245860,1,['test'],['test']
Testability,"So to test this scene, we have to change the LDL solver for a CG? Also, the mesh file is not provided",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4051#issuecomment-1641655025:6,test,test,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4051#issuecomment-1641655025,1,['test'],['test']
Testability,"SofaConstraint links with SofaImplicitOdeSolver, which links with Sofa.Component.ODESolver.Backward, which links with SofaSimulationCore. Isn't the dependencies transferred in this case?. I launch a full build, just in case.; [ci-build][force-full-build][with-all-tests]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2640#issuecomment-1031474078:264,test,tests,264,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2640#issuecomment-1031474078,1,['test'],['tests']
Testability,Solutions could be:; - Clean all scenes in SOFA: remove all RequiredPlugin and use either Sofa.Components or (RATHER) finer lever (e.g. Sofa.Component.LinearSolver); - Test option “noautoload” on the CI to check the scenes. would you rather use :rocket: `Sofa.Components` or :tada: `Sofa.Component.LinearSolver` ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2818#issuecomment-1082783108:168,Test,Test,168,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2818#issuecomment-1082783108,1,['Test'],['Test']
Testability,"Some benchmarks done:; (setup: whole SOFA compiled either float or double, and the scene is just an OglModel drawting the dragon from the stanford database http://graphics.stanford.edu/data/3Dscanrep/ , which has 500K vertices and 1M triangles); - SOFA with double: 105 fps; - SOFA with float: 110 fps; ; (on Windows); the small difference is within the error margin (and in a real simulation the rendering itself is negligible). <img src=""https://user-images.githubusercontent.com/11028016/166214524-85d8ae4d-0ccd-43a3-8a55-9437b12dc36e.PNG"" width=""200"" />",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2856#issuecomment-1113123372:5,benchmark,benchmarks,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2856#issuecomment-1113123372,1,['benchmark'],['benchmarks']
Testability,Some feedbacks:; I compiled with https://github.com/google/sanitizers/wiki/AddressSanitizerLeakSanitizer and I did not get any difference in leaks while executing TorusFall.scn and caduceus.scn in batch for 100 steps unfortunately.; The output is huge (20Mo of logs) so not easy shareable (can give it on demand). Final outputs for both (PR and master branches) :; caduceus: `SUMMARY: AddressSanitizer: 10282202 byte(s) leaked in 111987 allocation(s).`; torusfall: `SUMMARY: AddressSanitizer: 6271499 byte(s) leaked in 28416 allocation(s).`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4838#issuecomment-2249517443:261,log,logs,261,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4838#issuecomment-2249517443,1,['log'],['logs']
Testability,"Some more info about this test... ; Fails on master since b70b477f; Error appeared in `defrost` branch between 4b1f289 and a33b4b1.; First CI build with error: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/546/ ; Error message: ; ```; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp:65; Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; ```; Full output: ; ```; Running SofaOpenglVisual_test.exe; Seed Value used for the tests = 1478637948; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from TestLightManager; [ RUN ] TestLightManager.checkAttributes; [ERROR] [DAGNode ""Level 1""] Object type ""MechanicalObject"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [DAGNode ""Level 1""] Object type ""LightManager"" creation Failed; Emitted from 'J:\job\origin\master\SofaKernel\modu; les\SofaSimulationCommon\xml\NodeElement.cpp' line ; 92; [ERROR] [SceneLoaderXML] Node initialization failed.; Emitted from 'testscene' line 1; J:\job\origin\master\modules\SofaOpenglVisual\SofaOpenglVisual_test\LightManager_test.cpp(65): error: Expected: (lm) != (nullptr), actual: NULL vs 8-byte object <00-00 00-00 00-00 00-00>; unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; [ FAILED ] TestLightManager.checkAttributes (9 ms); [----------] 1 test from TestLightManager (9 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (10 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] TestLightManager.checkAttributes; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510:26,test,test,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263269510,19,"['Test', 'test']","['TestLightManager', 'test', 'tests', 'testscene']"
Testability,Some new test in TetrahedronSetTopology_test is failing. Was it expected due to your change Erik ?; The regression tests are also crying on topo.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/985#issuecomment-481128348:9,test,test,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/985#issuecomment-481128348,2,['test'],"['test', 'tests']"
Testability,"Some notes:. - It was extremely hard to understand why L^T was used in the first step of the solve, and not L. I hope it's clearer now with the comment I added. Anyway, it requires to have the knowledge of the CSR and CSC formats, and how they relates to the transpose.; - I would like to use C++20 `std::span` in some functions such as `solveLowerUnitriangularSystemCSR`.; - Regression tests threshold are usually set to 1e-4. IMO it's not enough to capture errors happening on a single DOF because it's an average",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1653112403:387,test,tests,387,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1653112403,1,['test'],['tests']
Testability,"Some scenes crash at the end (but not related to this PR):; - [testOmniDriverEmu.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1449/CI_CONFIG=centos_clang-5,CI_PLUGINS=options,CI_TYPE=release/5/artifact/parent_dir/build/scene-tests/archive/applications/plugins/SensableEmulation/examples/testOmniDriverEmu.scn/output.txt); - [HexahedronForceFieldTopologyChangeHandling.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1449/CI_CONFIG=windows10_vs-2017,CI_PLUGINS=options,CI_TYPE=release/5/artifact/parent_dir/build/scene-tests/archive/examples/Components/topology/TopologicalModifiers/HexahedronForceFieldTopologyChangeHandling.scn/output.txt). The Quater_test is also failing on CentOS but we think it could be related to the rand() bringing the angle too close to in the gimbal lock ToEulerVector in SOFA. If that's the issue, the fix is described here: http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToEuler/ and should be applied to Quater::toEulerVector (l. 573 in Quater.inl)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1449#issuecomment-676066963:63,test,testOmniDriverEmu,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1449#issuecomment-676066963,4,['test'],"['testOmniDriverEmu', 'tests']"
Testability,"Some tests are now failing, it has to be understood before merging.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/216#issuecomment-293639372:5,test,tests,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216#issuecomment-293639372,1,['test'],['tests']
Testability,"Something is broken here. See tests results: https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1275/CI_CONFIG=ubuntu_gcc-7,CI_PLUGINS=options,CI_TYPE=release/3/testReport/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1275#issuecomment-603862893:30,test,tests,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1275#issuecomment-603862893,2,['test'],"['testReport', 'tests']"
Testability,"Sorry I should have given more details. The move I suggest is something that was around for quite a while now. I think it was suggested by @damienmarchal first. The legacy conditionally compiled code, mainly in SofaCUDA but it applies everywhere, is a bad practice for the following reasons:; - It is nearly impossible for the user to know what components are included in the conditionally compiled module. It would require a complex documentation to inform the user, which is not done for SofaCUDA.; - Testing becomes more complex. It's challenging to ensure that all possible combinations of conditions are thoroughly tested, increasing the risk of undetected bugs. See https://github.com/sofa-framework/sofa/pull/4227 for example.; - Other plugins (for example SoftRobots) cannot add their own CUDA components into SofaCUDA. So it's not true that all components are in the same plugin. We also have the example of the GPU-based solvers. What I suggest is to keep the cpu-based plugin, and create a new plugin for the gpu-based components. It would be applied to all plugins that are a conditional dependency in SofaCUDA (so not the `Sofa.Component.*` modules), not only `VolumetricRendering`. This PR is an illustration of the move of one particular plugin, but it should be generalized. The goal of the PR is also to approve the move, but also the folder architecture. If we can agree on an architecture inside the SOFA codebase, we can also apply it in external plugins (such as SoftRobots or MOR).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4395#issuecomment-1864019900:503,Test,Testing,503,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4395#issuecomment-1864019900,2,"['Test', 'test']","['Testing', 'tested']"
Testability,"Sorry but a lot of tests are failing 😥 (either units, scenes and regression)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2391#issuecomment-945566650:19,test,tests,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2391#issuecomment-945566650,1,['test'],['tests']
Testability,"Sorry to be so long to merge this PR but the CI is very slow and buggy which really breaks the workflow. . @matthieu-nesme, @maxime-tournier can you please give me your thinking about adding tests and documentations on the components introduced in this PR. . EDIT: took the checklist to add it in the PR description.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/147#issuecomment-276603951:191,test,tests,191,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/147#issuecomment-276603951,1,['test'],['tests']
Testability,"Sorry, I haven't done anything about this yet for SOFA. I am currently using the solver in my own project and right now I am testing it works correctly. I have some cases where the energy of the system seems to grow and I am not sure if its because of the solver or I have issues somewhere else, so I would say its not ready yet.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2209#issuecomment-895036698:125,test,testing,125,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2209#issuecomment-895036698,1,['test'],['testing']
Testability,"SquareDistanceMapping test fails with the introduced test : https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4897/CI_CONFIG=ubuntu_gcc,CI_PLUGINS=options,CI_TYPE=release/1/testReport/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4897#issuecomment-2288223285:22,test,test,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4897#issuecomment-2288223285,3,['test'],"['test', 'testReport']"
Testability,Still a unit test failing @epernod,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4194#issuecomment-1767929740:13,test,test,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4194#issuecomment-1767929740,1,['test'],['test']
Testability,"Still not ready, tests are failing. This is weird because tests are OK on my computer, at least for VS2015. (tried 64 and 32 bits)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/185#issuecomment-292187023:17,test,tests,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-292187023,2,['test'],['tests']
Testability,"Strange, looking at the dashboard: 1) some timeout appeared and 2) regression tests failing; could this be related to the PR?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/856#issuecomment-447794176:78,test,tests,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/856#issuecomment-447794176,1,['test'],['tests']
Testability,Super good initiative!. - these message handler should replace existing buffers. They should be removed because handling history with an handler is a way better idea. But the distributed gui should then use this new mechanism to print log history in the component widgets. - please stop adding Data in Base!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276614106:235,log,log,235,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276614106,1,['log'],['log']
Testability,"Sure, I do it right away: [ci-build][with-scene-tests]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/792#issuecomment-429316737:48,test,tests,48,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/792#issuecomment-429316737,1,['test'],['tests']
Testability,"Sure, feel free to do it if you reviewed the latest changes.; Let's not forget the [ci-build][with-scene-tests] though :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/780#issuecomment-428888825:105,test,tests,105,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/780#issuecomment-428888825,1,['test'],['tests']
Testability,TEst to fix,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3368#issuecomment-1283720918:0,TEst,TEst,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3368#issuecomment-1283720918,1,['TEst'],['TEst']
Testability,TODO: ; - [ ] test with SofaPython3 out-of-tree; - [x] add warnings in transitional headers,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1397#issuecomment-638100826:14,test,test,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1397#issuecomment-638100826,1,['test'],['test']
Testability,"TODO: Component must have an S (components), and must be tested first; Add to guidelines: vector data must include an “s” to specify that there is several info",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-994673970:57,test,tested,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-994673970,1,['test'],['tested']
Testability,TODO: add parent classes + eventually category + add a test with a template,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4775#issuecomment-2178070260:55,test,test,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4775#issuecomment-2178070260,1,['test'],['test']
Testability,"TODO: scene tests count should be same as master before #611 merge: 612 for CentOS options, 612 for MacOS options, 620 for Ubuntu options, 612 for Windows options.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/619#issuecomment-378520483:12,test,tests,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/619#issuecomment-378520483,1,['test'],['tests']
Testability,TODO: solve conflict and build with scene tests,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/704#issuecomment-405863496:42,test,tests,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/704#issuecomment-405863496,1,['test'],['tests']
Testability,"TODO:; - ~~check removed functions and insure compatibility layer~~; - ~~new creation mechanism of GravityForceField~~; - ~~self, GravityForceField checks if one is already here~~; - ~~have a callback and save the norm : if 0 exit all loops~~; - ~~what happens if no mass for GFF~~; - ~~update dates in messages (v22.12 -> v23.12)~~; - ~~update PR description~~; - test when a node is added. One issue remains in my tests :; - simulation starting without gravity, and then gravity is added; - mass added using python, since no init, the link in GravityForceField to the local mass is no performed",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1238134724:365,test,test,365,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1238134724,2,['test'],"['test', 'tests']"
Testability,"Take a look at the removed overload. ; ```; SetDirectory::SetDirectory(const std::string& filename); {; SetDirectory(filename.c_str());; }; ``` ; is not valid object creation.; It is both wrong and unneeded. As for the link with #992, latest message mention failing tests, which are due to the aforementionned bug.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1083#issuecomment-503608712:266,test,tests,266,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1083#issuecomment-503608712,1,['test'],['tests']
Testability,Test OK. Pushed to master.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/40#issuecomment-254783994:0,Test,Test,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/40#issuecomment-254783994,1,['Test'],['Test']
Testability,Test SceneChecker_test.checkDuplicatedNames is now working further to Damien's commit.; Merge as agreed,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1080#issuecomment-504000825:0,Test,Test,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1080#issuecomment-504000825,1,['Test'],['Test']
Testability,Test and scene examples are added.; Doc is ready here: https://github.com/sofa-framework/doc/pull/38/files. Looks now fine to me.; Anyone else I merge by the end of the week.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-646594194:0,Test,Test,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-646594194,1,['Test'],['Test']
Testability,Test are still failing @alxbilger and many warnings seem to be added :drop_of_blood:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3151#issuecomment-1228154634:0,Test,Test,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3151#issuecomment-1228154634,1,['Test'],['Test']
Testability,Test failures are still here. Looks like CMAKE_INSTALL_DEFAULT_COMPONENT_NAME is not responsible for the failures then.; I keep this PR open to investigate...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2059#issuecomment-831802913:0,Test,Test,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2059#issuecomment-831802913,1,['Test'],['Test']
Testability,"Test is failing:. ```; [ERROR] [MergeVectors(mergedPositions)] Requested template 'Data<double>' cannot be found in the list of available templates [vector<RigidCoord2d>, vector<RigidCoord3d>, vector<RigidDeriv2d>, vector<RigidDeriv3d>, vector<Vec2I>, vector<Vec2d>, vector<Vec3d>, vector<Vec4d>, vector<bool>, vector<d>, vector<i>]. Falling back to the first compatible template: 'vector<d>'.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3465#issuecomment-1331830676:0,Test,Test,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3465#issuecomment-1331830676,1,['Test'],['Test']
Testability,Test is fixed. Failure was due to the fact that test values were generated before c81e4b73f24c2272e9346be3b5c0a1756ecdca59.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/312#issuecomment-323962386:0,Test,Test,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-323962386,2,"['Test', 'test']","['Test', 'test']"
Testability,Tested & Approved 🤩,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4001#issuecomment-1619582818:0,Test,Tested,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4001#issuecomment-1619582818,1,['Test'],['Tested']
Testability,"Tested & approved, -> ready",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4523#issuecomment-1994590127:0,Test,Tested,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4523#issuecomment-1994590127,1,['Test'],['Tested']
Testability,"Tested and approved :+1: . What do you think @alxbilger about setting gravity to ""0 0 0"" as default value?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4876#issuecomment-2263909359:0,Test,Tested,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4876#issuecomment-2263909359,1,['Test'],['Tested']
Testability,Tested and compiled on VS22/Ubuntu22.04 and it works.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4240#issuecomment-1938997587:0,Test,Tested,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4240#issuecomment-1938997587,1,['Test'],['Tested']
Testability,Tested and working on Linux and Windows :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1820#issuecomment-784263603:0,Test,Tested,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1820#issuecomment-784263603,1,['Test'],['Tested']
Testability,Tested by @fredroy and ready to be merged !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4749#issuecomment-2129378389:0,Test,Tested,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4749#issuecomment-2129378389,1,['Test'],['Tested']
Testability,Tested on my side for #1649 (locally); it is working so I validate it 😙,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1651#issuecomment-744391099:0,Test,Tested,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1651#issuecomment-744391099,1,['Test'],['Tested']
Testability,"Tested sucessfully, and needed for an incoming PR to fix the compilation out-of-tree of sofapython3 (on my setup at least ... 😅 )",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3023#issuecomment-1152000018:0,Test,Tested,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3023#issuecomment-1152000018,1,['Test'],['Tested']
Testability,"Tested the scene, it ""looks"" the same; Being hard to manually assess, we could add this scene to the regression what about this ? (not blocking remark)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4301#issuecomment-1828076832:0,Test,Tested,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4301#issuecomment-1828076832,1,['Test'],['Tested']
Testability,Tested with my PR #1162 and works with an additional compile flag.; Good to merge for me.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-538727046:0,Test,Tested,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-538727046,1,['Test'],['Tested']
Testability,Tested.. and working :).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2944#issuecomment-1125753496:0,Test,Tested,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2944#issuecomment-1125753496,1,['Test'],['Tested']
Testability,"Testing this PR coupled with #1997 on Windows/MSVC and there is no more CPU ""business"" if the simulation is stopped.; So I guess this PR is ready IMO.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-823044769:0,Test,Testing,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-823044769,1,['Test'],['Testing']
Testability,"Testing this with the Visual Studio compiler, on my (getting old) desktop (4 cores, 16GB RAM, Windows) I obtained :. ```; - MSVC/debug: 23:52; - MSVC/debug/pch: 14:50; - MSVC/debug/unity: 15:10; - MSVC/debug/pch+unity: 12:46. - MSVC/release: 34:44; - MSVC/release/pch: 23:51; - MSVC/release/unity: 28:52; - MSVC/release/pch+unity: 23:52; ```. So this gives me a 20 to 50% decrease in build time (:+1:), and I would say that performances obtained either with unity, pch, or both are comparable.; Aside from that, when using the unity build, I get only one error while compiling SofaMeshCollision (for multiply defined symbols)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1964#issuecomment-815604404:0,Test,Testing,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1964#issuecomment-815604404,1,['Test'],['Testing']
Testability,"Tests (2) I think are failing. We could check in other PRs if the tests failing for them as well; - constraint.FrictionContact_VelocityConstraints.scn; - examples/Components/constraint.InextensiblePendulum.scn. (see [CentOS here](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1992/CI_CONFIG=centos_clang-5,CI_PLUGINS=options,CI_TYPE=release/13/testReport/SceneTests/))",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1992#issuecomment-828294302:0,Test,Tests,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1992#issuecomment-828294302,3,"['Test', 'test']","['Tests', 'testReport', 'tests']"
Testability,"Tests are fixed, ready then 👮",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4722#issuecomment-2262233934:0,Test,Tests,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4722#issuecomment-2262233934,1,['Test'],['Tests']
Testability,Tests are here:; - [VS2013_options_amd64](https://ci.inria.fr/sofa-ci/job/TEST_new-dependencies_windows7_VS-2013/1/); - [VS2015_options_amd64](https://ci.inria.fr/sofa-ci/job/TEST_new-dependencies_windows7_VS-2015/3/),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/185#issuecomment-289725047:0,Test,Tests,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-289725047,1,['Test'],['Tests']
Testability,Tests are passing ; thanks @bakpaul and @alxbilger 👍,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2332#issuecomment-916686361:0,Test,Tests,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2332#issuecomment-916686361,1,['Test'],['Tests']
Testability,Tests are still failing @epernod :. - RegressionTests.Regression_test/Regression_test/TopologyRegression_test.sceneTest/AddingTriangle2EdgeProcess; - UnitTests.Sofa_Component.Topology/AddTetrahedronProcessor_test.AddTetrahedra; - UnitTests.Sofa_Component.Topology/AddTriangleProcessor_test.AddTriangles,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3216#issuecomment-1228159103:0,Test,Tests,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3216#issuecomment-1228159103,1,['Test'],['Tests']
Testability,"Tests ok, merging",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1610#issuecomment-730252522:0,Test,Tests,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1610#issuecomment-730252522,1,['Test'],['Tests']
Testability,"Tests passed so, mergin' 🎵",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1519#issuecomment-705527067:0,Test,Tests,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1519#issuecomment-705527067,1,['Test'],['Tests']
Testability,"Thank Guillaume for the effort you are doing on this hard task. . For curious people here is a small test we did on how things could look like ; on the ""pluginization"" side (the idea is to be closer to python modules): ; https://github.com/SofaDefrost/sofa/blob/addModule/applications/pluginsNG/README.md",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-351405252:101,test,test,101,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-351405252,1,['test'],['test']
Testability,"Thank Hadrien, the fix is fine. The m_primitiveTestCount is used only for statitistics to know how many collision tests are performed.; There should be no other crash if m_primitiveTestCount is = 0.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/961#issuecomment-472364785:114,test,tests,114,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/961#issuecomment-472364785,1,['test'],['tests']
Testability,Thank for adding new features to Sofa and having provided tests with it.; Seem to compile and does not turn the CI in full red.; So let's merge it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/402#issuecomment-331384661:58,test,tests,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/402#issuecomment-331384661,1,['test'],['tests']
Testability,"Thank you @guparan! . What I see first is:; - [ ] ~~the files modules/SofaMiscFem/HexaFEMForceField.* should be renamed with CM prefix~~; - [x] the files modules/SofaMiscMapping/BeamMapping.* should be erased (merged from another branch and unrelated to combinatorial topologies ) ; - [x] the changes to modules/SofaGeneralSimpleFem/BeamFEMForceField.* should be erased (merged from another branch, juste a wip and unrelated to combinatorial topologies); - [x] And as said by @damienmarchal, the changes related to SofaKernel/modules/SofaBaseMechanics/BarycentricMapping.* should be extracted to another branch (unrelated to combinatorial topologies) ; - [x] the modifications in the files modules/SofaGeneralSimpleFem/TetrahedralCorotationalFEMForceField.* should be erased (test work of one of our former trainee); - [x] The file modules/SofaMiscMapping/BarycentricMappingRigid.h has modifications unrelated to combinatorial topologies should be extracted to another branch too. These modifications should decrease the number of changed files a bit more",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-404480807:776,test,test,776,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-404480807,1,['test'],['test']
Testability,"Thank you a lot for the nice proposals preventing potential hacks like the ones I presented above. I just checked your pull request and I really like its simple usage - I hope it will be merged soon! . @damienmarchal : I am excited to see your solution to 3., if you would like to have further information about my approach, please let me know. To create python scenes, I am using the [scene to python transform script](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/SofaPython/scn2python.py) and with the direct usage your approach works well, i.e.; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn -o caduceus2 -p`; generates the python scene `caduceus2.py` and when launching it I can retrieve all the arguments of the command line, i.e. the output of ; `runSofa caduceusPython.scn --argv test test2`; is `['caduceusPython', 'test', 'test2']`. However, by default (i.e. without -p) the scene to python transform script generates a .scn file calling a .py file - a choice made to prevent having to load the python plugin before launching python scenes. For example; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn`; outputs the caduceusPython.scn and caduceusPython.py. Now when using ; `runSofa caduceusPython.scn --argv test test2`; and running ; `print sys.argv`; only the filename can be retrieved, i.e. the output is `['caduceusPython']`. 1. Is the usage presented as second approach (i.e. using .scn and .py) still up to date/a recommended approach?; 2. If yes, is it possible to access the argv in the .py file when it is used from the .scn file? Or is it possible to improve the implementation such that it can handle it?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656:843,test,test,843,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656,3,['test'],['test']
Testability,"Thank you for this work @damienmarchal. ; I agree there are some location problems with tests in SofaKernel but I'm not sure the solution you propose would be clearer at a CMake point of view.; This is what I would find consistent:; ```; SofaKernel; framework; sofa; core; core_test; defaulttype; defaulttype_test; helper; helper_test; simulation; simulation_test; ```; Is this possible? Too long to implement? Breaking too much?. I think that any *_test should be located besides the library it tests, not in a package. I would even say that we should have **nothing except CMake files in CMake packages**.; I'm afraid that your proposal will mix SofaFramework package definition and test sources. ; I know we are creating a SofaFramework_test executable and that it's obviously related to the SofaFramework package but the problem is not the test location, it's the fact that it's bubbled like a package while it should be factorized following SofaFramework's libraries. Not sure I was very clear. I may have misunderstand stuff. Please be sure I don't want to kill your work <3",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/605#issuecomment-370851122:88,test,tests,88,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/605#issuecomment-370851122,4,['test'],"['test', 'tests']"
Testability,"Thank you for your feedback @damienmarchal ! . I've done most of your enhancements, but I can't figure out what tests we can create for this PR. ; Do you have some suggestions ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323296216:112,test,tests,112,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323296216,1,['test'],['tests']
Testability,"Thank you for your report @louise-scherrer . This segmentation fault is indeed a bug, and should be prevented. Here is the call stack to the fault:. ```; -> return m_trianglesAroundVertex[i];; const MeshTopology::TrianglesAroundVertex& MeshTopology::getTrianglesAroundVertex(PointID i); bool LocalMinDistance::testValidity(Point &p, const Vector3 &PQ); int LocalMinDistance::computeIntersection(Point& e1, Point& e2, OutputVector* contacts); int MemberElementIntersector<Point, Point, LocalMinDistance>::intersect(core::CollisionElementIterator elem1, core::CollisionElementIterator elem2, DetectionOutputVector* contacts); void BruteForceDetection::addCollisionPair(const std::pair<core::CollisionModel*, core::CollisionModel*>& cmPair); void NarrowPhaseDetection::addCollisionPair(const std::pair<core::CollisionModel*, core::CollisionModel*>& cmPair); void DefaultPipeline::doCollisionDetection(const helper::vector<core::CollisionModel*>& collisionModels); void PipelineImpl::computeCollisionDetection(); ...; void CollisionAnimationLoop::computeCollision(const core::ExecParams* params); void FreeMotionAnimationLoop::step(const sofa::core::ExecParams* params, SReal dt); ```. I'll try to further look into this. We should try to find the best place to prevent this kind of fault without impacting too much the computation time.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/746#issuecomment-411679329:310,test,testValidity,310,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/746#issuecomment-411679329,1,['test'],['testValidity']
Testability,"Thank you for your response. Yesterday I tried with my home PC and it occured that error. Today I'm trying with my office PC and it occurs another error but still in the same process. Here is the log:. ```; -- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).; Install prefix: /home/giangnguyen/sofa/build/install; Adding library Sofa.Config; Using legacy headers is enabled.; Headers from v21.12 are usable, but it is advised to change your code to use the new headers introduced in v22.06.; Adding library Sofa.Compat; Adding library Sofa.Component.Compat; Adding library Sofa.Type; Adding library Sofa.Geometry; Adding library Sofa.Topology; Adding library Sofa.Helper; Adding library Sofa.LinearAlgebra; Adding library Sofa.DefaultType; Adding library Sofa.Core; Adding library Sofa.Simulation; Adding library Sofa.Simulation.Core; Adding library Sofa.Simulation.Common; Adding library Sofa.Simulation.Graph; Adding library Sofa.Testing; Found PythonInterp: /usr/bin/python3.8 (found version ""3.8.10"") ; Adding library Sofa.Framework; Adding module Sofa.Component; Adding module Sofa.Component.ODESolver; Adding module Sofa.Component.ODESolver.Forward; Adding module Sofa.Component.ODESolver.Backward; Adding module Sofa.Component.IO; Adding module Sofa.Component.IO.Mesh; Adding module Sofa.Component.Playback; Adding module Sofa.Component.SceneUtility; Adding module Sofa.Component.Topology; Adding module Sofa.Component.Topology.Container; Adding module Sofa.Component.Topology.Container.Constant; Adding module Sofa.Component.Topology.Container.Dynamic; Adding module Sofa.Component.Topology.Container.Grid; Adding module Sofa.Component.Topology.Mapping; Adding module Sofa.Component.Topology.Utility; Adding module Sofa.Component.Visual; Adding module Sofa.Component.LinearSolver; Adding module Sofa.Component.LinearSolver.Iterative; Adding module Sofa.Component.LinearSolver.Direct; Sofa.Component.LinearSolver.Direct: using built-in metis library; Adding m",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062:196,log,log,196,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062,2,"['Test', 'log']","['Testing', 'log']"
Testability,"Thank you for your update @nhnhan92 ; I added two reviews in the code. Regarding the license, we need the SOFA header to be added in order to display the official license of the project. If this is not possible, an alternative would be to create a dedicated plugin which could have its own open-source license. Finally, a last question would be : would it be possible to have a regression test comparing your material with a analytical/manufactured solution?. Thanks again for this nice piece of work.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-776748349:389,test,test,389,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-776748349,1,['test'],['test']
Testability,"Thank you sergeiNikolaev, for the compontent and for the tests :) . I was writing a long answer...then I looked at the BoxROI implementation and noticed it already implemented axis aligned box and oriented box with the 'orientedBox' parameter. . Maybe it does not work for you and there is bug or it doesn't match what you wanted to do in that case can you provide more details please.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357303877:57,test,tests,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357303877,1,['test'],['tests']
Testability,"Thanks @EulalieCoevoet for this nice contribution. . It is still unclear to me if instead of having the extension passed by changing the SceneChecker API it would not be a better to use Base::getInstanciationSourceFileName(). . @alxbilger, what is your opinion ? . [ci-build][with-scene-tests]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3033#issuecomment-1155084064:287,test,tests,287,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3033#issuecomment-1155084064,1,['test'],['tests']
Testability,Thanks @damienmarchal . I guess you tried to run the tests on SP3 to see if your patch was fixing the original issue?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1668#issuecomment-748716799:53,test,tests,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1668#issuecomment-748716799,1,['test'],['tests']
Testability,Thanks @damienmarchal :+1: ; Could you explain how the new test `checkRigidAttribute` ends up using the `operator>>` you fixed?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/993#issuecomment-484428288:59,test,test,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/993#issuecomment-484428288,1,['test'],['test']
Testability,Thanks @jnbrunet for the interesting feedback indeed.; I can run the tests!. Agreed @damienmarchal ; What is this DISPLAY_TIME!?! wtf!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-594847317:69,test,tests,69,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-594847317,1,['test'],['tests']
Testability,Thanks @sergeiNikolaev for this contribution and making this nice effort of bringing back this work.; - Is any test available with these new classes?; - is there any example scene?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616496056:111,test,test,111,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616496056,1,['test'],['test']
Testability,Thanks @tgaugry your PR solves the issue. I tested it on my side.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/914#issuecomment-461026691:44,test,tested,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/914#issuecomment-461026691,1,['test'],['tested']
Testability,Thanks Eric for the fixes and the additional test. Your answer about GridTopology rise other questions:; - If the component is not supposed to be used without being inherited... shouldn't we remove it from the factory ?; - If a class is not a component does not mean we shouldn't test it. Actually my feeling is that base class (as they are shared) are very good entities to test :) . EDIT: Maybe these questions should be for a new Issue and not to handle in this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/270#issuecomment-301445540:45,test,test,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-301445540,3,['test'],['test']
Testability,"Thanks Guillaume for the safe-guard eyes. ; A 2 character fix later now all the tests are passing so I switched the status ""to review"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/335#issuecomment-318203462:80,test,tests,80,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/335#issuecomment-318203462,1,['test'],['tests']
Testability,"Thanks Jérémie,. The remaining failing tests are our classic failures so this PR seems ok to me. ; @guparan Can this one be set to the flag ready for merge ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/216#issuecomment-308375664:39,test,tests,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216#issuecomment-308375664,1,['test'],['tests']
Testability,"Thanks a lot @fredroy . Can you share your test scene?. Also, what happen if the default 3x3 block sparse matrix is used with something else than 3D DOFs? For example, with rigids?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1996#issuecomment-827541222:43,test,test,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1996#issuecomment-827541222,1,['test'],['test']
Testability,Thanks a lot for your contribution @dennis2society ; Last check using the MacOS continuous integration. [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4198#issuecomment-1746423490:124,test,tests,124,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4198#issuecomment-1746423490,1,['test'],['tests']
Testability,"Thanks again for this nice contribution @nhnhan92 ; Sorry I had prepared many similar feedback as @epernod so, some might be duplicated. A more general remark, could you point us out the documentation you used to write this code please?; Do you have an idea of when you would plan to consider rotations around the z axis?; I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!. If this is too much questions, we can discuss about this live if you'd like",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209:360,test,tests,360,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209,3,['test'],"['test', 'testing', 'tests']"
Testability,Thanks erwan for the test.; The warning is also there in release. Maybe the problem is specific to Thomas application. ; Each application has to define and set-up its way to handle the messages. Have a look in runSofa on how it is one.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/378#issuecomment-328104201:21,test,test,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/378#issuecomment-328104201,1,['test'],['test']
Testability,Thanks for reporting the issue. It should be fixed in https://github.com/sofa-framework/sofa/pull/3727. Are you able to test the branch to confirm?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3726#issuecomment-1468328518:120,test,test,120,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3726#issuecomment-1468328518,1,['test'],['test']
Testability,"Thanks for reporting this issue @margaretkoehler. . > GuiDataRepository.addFirstPath(Utils::getSofaPathTo(""share/sofa/gui/runSofa/resources/"").c_str()) ;. Does it fix the problem ? If yes, we need to test it on other OS. . I will investigate it tomorrow afternoon during the coding friday. Feel free to join us for helping :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/577#issuecomment-360522585:200,test,test,200,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/577#issuecomment-360522585,1,['test'],['test']
Testability,Thanks for the PR and sorry for the delay. FileMonitor.updateNoChange_test is failing (regression) on MacOS: https://ci.inria.fr/sofa-ci/job/mac_clang-3.4_options/4289/testReport/(root)/FileMonitor/updateNoChange_test; Do you know why?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/105#issuecomment-273787691:168,test,testReport,168,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/105#issuecomment-273787691,1,['test'],['testReport']
Testability,Thanks for the answer @epernod ; Others opinion? @hugtalbot @fredroy @alxbilger @damienmarchal . :arrow_right: To keep the non-CUDA scenes tested by CI: click on the :+1: below; :arrow_right: To ignore all the scenes: click on the :-1: below,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2042#issuecomment-831078438:139,test,tested,139,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2042#issuecomment-831078438,1,['test'],['tested']
Testability,"Thanks for the changes, . @epernod, do you have time to add tests to validate the new features you introduced ? ; (I know that you made examples but examples are not as informative as tests to detect regression)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273193002:60,test,tests,60,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273193002,2,['test'],['tests']
Testability,Thanks for the feedback @untereiner maybe it is because in batch mode there is no opengl context. ; If I remember correctly this crash macos's tests that way. . Can you providing line/file that cause problem ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357533958:143,test,tests,143,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357533958,1,['test'],['tests']
Testability,"Thanks for the feedback,. I totally agree that O(log n) as well as memory/indirection optimization would be nicer but this topic should have its own issue. About the checking...I also like the idea of the Visitor and this is very consistent as we already have existing SceneCheckerVisitor.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323972382:49,log,log,49,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323972382,1,['log'],['log']
Testability,"Thanks for the feedbacks,. This seems related to the fact that Engines are designed to be data flow oriented and, keeping that in mind, we shouldn't break the general design of engines. But, it also appears that in several scenarios, ROIs are used to select features, eg 'position', but not necessarily at initialization time and not necessarily at rest_position and that there may not have an associated 'not changing' data field. My impression is that being able to pick a set of features from data field in a quick way, at controlled instant, is as desirable as not breaking the Engine logics. . What do you think about refactoring that and separate the two behaviors in different components. BoxROISelector and BoxROIEngine ?. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/38#issuecomment-258126238:589,log,logics,589,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/38#issuecomment-258126238,1,['log'],['logics']
Testability,"Thanks for the review @damienmarchal . However I'm not sure what you are expecting for the tests based on BaseTest? My modification is needed for the compilation of these cpp files, I didn't go further than this.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/642#issuecomment-397580596:91,test,tests,91,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-397580596,1,['test'],['tests']
Testability,"Thanks for the solution @epernod. I tested, and it works well now.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4706#issuecomment-2147654185:36,test,tested,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4706#issuecomment-2147654185,1,['test'],['tested']
Testability,Thanks for the tests...actually I was more thinking to remove the forceFloat data field that was just here for testing purpose. What is your opinion ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1069#issuecomment-498195211:15,test,tests,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1069#issuecomment-498195211,2,['test'],"['testing', 'tests']"
Testability,"Thanks for the tip! It's been some time since I've used `git bisect`, so I might be mistaking, but for me the only way to judge if a commit is 'good', is to recompile and test the scene I was mentioning at each iteration of bisect, right ? In which case the process could take a bit of time... I'll keep you updated if I go through !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1332408866:171,test,test,171,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1332408866,1,['test'],['test']
Testability,"Thanks for you feedback @epernod. I think your suggestion is the more natural. Actually, I tried to set `printLog` in a log, to see if it was already working (but no). But I always feel uncomfortable when modifying such an important base class. I don't want that some classes become God classes. That's why I did not touch the Node class. But I am definitively open to discussion",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3162#issuecomment-1196614783:120,log,log,120,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3162#issuecomment-1196614783,1,['log'],['log']
Testability,"Thanks for your PR @gaurab4163 :+1: . I'm not sure about the place (file and namespace) this function should be. @damienmarchal you have a clearer vision of logging and messages in SOFA, what do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/639#issuecomment-381898967:157,log,logging,157,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-381898967,1,['log'],['logging']
Testability,Thanks for your commits @matthieu-nesme ; Any idea why Compliant tests are failing?. ```; [----------] 6 tests from Batch/Python_scene_test; [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/0; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaPython.so; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/Example.py; [ OK ] Batch/Python_scene_test.sofa_python_scene_tests/0 (2544 ms); [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/1; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/LambdaPropagation.py; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant.so; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant_gui.so; [DEPRECATED] [Compliant.Vec],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:65,test,tests,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320,2,['test'],['tests']
Testability,"Thanks for your fast answer !. I will rename the extension of the C++/shader file.; As a side note, this file is using [Raw String Litterals](https://en.wikipedia.org/wiki/C++11#New_string_literals), as it allowed me to directly copy-paste content of the shader file into a string (without escaping end-of-line, quotes, etc.); I will also remove the std::cerr/cout to use the msg_ api.; Finally, one test is failing on MacOS (only!) about filemonitor because of my commits and I dont really know why ?? (FileMonitor.updateNoChange_test)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/158#issuecomment-276340122:400,test,test,400,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/158#issuecomment-276340122,1,['test'],['test']
Testability,"Thanks for your feedback,. We need examples of use of Data & Base conversion to add in the tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307789319:91,test,tests,91,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307789319,1,['test'],['tests']
Testability,"Thanks for your feedbacks. . @matthieu-nesme I agree with you about adding Data to base. This was discussed in; issue https://github.com/sofa-framework/sofa/issues/44 for which there was no clear conclusion so I still have no clear idea on what to do. My current thinking is that fundamentally Data are good (among other things they are a big part of the sofa UIs as well as offer saving capabilities)...the problem is that their init cost is too high. Instead of not using them shouldn't we accelerate that ? (To restart the discussion I have added few benchmark to the issue https://github.com/sofa-framework/sofa/issues/44). . @thomas-lemaire You are totally right about the printLog. Actually this was my long term target. But as I didn't wanted to break everything I just set-up the foundation of an alternative in this PR, to have your feedbacks, try the feature on few component then do the changing and cleaning all around in a second PR. Could we pursue the discussion in a dedicated issue (https://github.com/sofa-framework/sofa/issues/160) to define how we should do the general cleaning.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276751927:554,benchmark,benchmark,554,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276751927,1,['benchmark'],['benchmark']
Testability,"Thanks guillaume for the investigation,; The easy solution is to use msg_warning instead (restoring the old behavior). ; But shouldn't something that prevent the component to work be reported as an error and thus we should fix the test ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/398#issuecomment-331839847:231,test,test,231,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/398#issuecomment-331839847,1,['test'],['test']
Testability,"Thanks, that's a start but not quite refactored. Here is a proposal (not tested):; ```cpp; int BatchGUI::mainLoop(); {; if (groot); { ; bool infiniteLoop = (nbIter == -1);. if (infiniteLoop); { ; msg_info(""BatchGUI"") << ""Computing "" << nbIter << "" iterations."" << msgendl;; }; else; {; msg_info(""BatchGUI"") << ""Computing infinite iterations."" << msgendl;; }. sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; msg_info(""BatchGUI"") << sofa::helper::AdvancedTimer::end(""Animate"", groot.get()) << msgendl;; //As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());; sofa::simulation::Visitor::ctime_t rtfreq = sofa::helper::system::thread::CTime::getRefTicksPerSec();; sofa::simulation::Visitor::ctime_t tfreq = sofa::helper::system::thread::CTime::getTicksPerSec();; sofa::simulation::Visitor::ctime_t rt = sofa::helper::system::thread::CTime::getRefTime();; sofa::simulation::Visitor::ctime_t t = sofa::helper::system::thread::CTime::getFastTime();. signed int i = 2; // one simulation step is animated above; while(infiniteLoop || i <= nbIter); {; sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; //As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());. if(infiniteLoop && i % 1000 == 0 || i == nbIter); {; t = sofa::helper::system::thread::CTime::getFastTime()-t;; rt = sofa::helper::system::thread::CTime::getRefTime()-rt;; msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)t)/((double)tfreq) << "" s ( "" << (((double)tfreq)*i)/((double)t) << "" FPS)."" << msgendl;; msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)rt)/((double)rtfreq) << "" s ( "" << (((double)rtfreq)*i)/((double)rt) << "" FPS)."" << msgendl; ; ; if(infiniteLoop); {; msg_info(""BatchGUI"") << ""Press Ctrl + C (linux)/ ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378645175:73,test,tested,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378645175,1,['test'],['tested']
Testability,That looks great ! I did not have the time yet to test. Maybe we could have a look at the following implementation for the test bench ? ; [HOBAK](https://github.com/theodorekim/HOBAKv1) the code repository used by the paper authors; [Libgl](https://github.com/iyht/Stable-Neo-hookean-Flesh-Simulation) implementation of Stable Neo hookean energy,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4603#issuecomment-2024881248:50,test,test,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4603#issuecomment-2024881248,2,['test'],['test']
Testability,"That's an interesting explanation @fjourdes and it seems you raise an issue to solve if we need an efficient way to manage points/vertices/whatever in the MechanicalObject.; However as you say, TopologyData is actually NOT used in MechanicalObject. Therefore it is totally safe to comment/remove `#include SofaBaseTopology/TopologyData.inl` . I assume that it was forgotten when people attempted to use the new topology engine system for MechanicalObject (and unfortunately gave up). A PR should be issued with the removal, in order to be sure that everything does not change at all (I checked on my setup and the tests ran smoothly; but it would be better to test with the ""options"" configuration)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295322091:614,test,tests,614,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295322091,2,['test'],"['test', 'tests']"
Testability,"That's were it goes non-logical...; Historically, in SOFA we have:; ```; SofaFramework package; SofaCore: SofaKernel/framework/sofa/core; SofaDefaultType: SofaKernel/framework/sofa/defaulttype; SofaHelper: SofaKernel/framework/sofa/helper; SofaSimulationCore: SofaKernel/framework/sofa/simulation; SofaSimulation package; SofaSimulationCommon: SofaKernel/modules/SofaSimulation/SofaSimulationCommon; SofaSimulationGraph: SofaKernel/modules/SofaSimulation/SofaSimulationGraph; SofaSimulationTree: SofaKernel/modules/SofaSimulation/SofaSimulationTree; ```. So by just changing the install dir of SofaSimulationCore we will retrieve consistency between install architecture and CMake packages.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540495837:24,log,logical,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540495837,1,['log'],['logical']
Testability,"The 20 new unit tests failures are still there, certainly caused by 092b19fd8e922d155a459de09f002f1815ce9a16.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/317#issuecomment-317355829:16,test,tests,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/317#issuecomment-317355829,1,['test'],['tests']
Testability,"The CI does not look happy, but I think it's nothing:. for Linux: some permission error at CMake phase. and Windows: ; - `139 - see BUILD_URL/artifact/parent_dir/build/scene-tests/archive/applications/plugins/SensableEmulation/examples/SimpleBox-Method2.scn/output.txt`; - `3 - see BUILD_URL/artifact/parent_dir/build/scene-tests/archive/examples/Components/topology/TopologicalModifiers/HexahedronForceFieldTopologyChangeHandling.scn/output.txt`. + scenes not working:; HexahedronCompositeFEMMapping.scn; HexahedronCompositeFEMForceFieldAndMass.scn",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1397#issuecomment-646697637:174,test,tests,174,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1397#issuecomment-646697637,2,['test'],['tests']
Testability,The CI finished but the dashboard is not up-to date.; The test failure are pre-existing to the PR. So I merge it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/314#issuecomment-316832128:58,test,test,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/314#issuecomment-316832128,1,['test'],['test']
Testability,"The Monitor test is failing, it seems it should investigated @lagarkane",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/312#issuecomment-323333990:12,test,test,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-323333990,1,['test'],['test']
Testability,"The O(n) should be avoided even though; 1. there might already be a O(n) lookup hiding somewhere during insertion; 2. we should be fine in practice; 3. this should really be O(log n) anyways. I like the late check during `getChild/getObject`, and even more so the Visitor approach where all the checks are made in a separate pass (aside: in this spirit we could provide a `check` method just like `init` and a visitor that checks consistency so that we don't have to check stuff all the time during simulation. also: use exceptions for error handling!!). More generally, why do we have objects and children stored in a list? We just need to store pointers to the siblings directly inside nodes/components instead of the extra memory/indirections, especially if we're using lists.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323954428:176,log,log,176,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323954428,1,['log'],['log']
Testability,"The ReadScene_test not passing is explicitly said so in the PR description, this is a new test showing an existing wrong behavior in Sofa (i.e. not sending an error message when trying to load an invalid faile). [ci-build][with-scene-tests] will say if my last commit fixed the old scene failing",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/918#issuecomment-465728648:90,test,test,90,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/918#issuecomment-465728648,2,['test'],"['test', 'tests']"
Testability,The [ReadState test](https://github.com/sofa-framework/sofa/blob/0da3f6e1aef69318838c4a363e017d7901f14483/modules/SofaGeneralLoader/SofaGeneralLoader_test/ReadState_test.cpp#L76) is not passing due to error not emitted. and all scenes with XspLoader are crashing,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/918#issuecomment-465493555:15,test,test,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/918#issuecomment-465493555,1,['test'],['test']
Testability,"The [crash that happened on Windows](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3959/CI_CONFIG=windows_vs2019,CI_PLUGINS=options,CI_TYPE=release/13/testReport/SceneTests/applications_plugins_SofaSphFluid_examples/SpatialGridPointModel_scn/) also happens on the master branch on my computer. But I don't understand how it is not detected by the CI",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3959#issuecomment-1653274458:163,test,testReport,163,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3959#issuecomment-1653274458,1,['test'],['testReport']
Testability,"The added scene is failing because CUDA scene are not tested on the CI. Add the scene to the ignore list, then rebase, then ready",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3868#issuecomment-1569702789:54,test,tested,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3868#issuecomment-1569702789,1,['test'],['tested']
Testability,"The blinking test crash comes from Assembly_test.cpp:1051`createCompliantString( root, p0, p1, 2, 2.0, 1.0/stiffness, false, 1.0 );` (in Compliant plugin).; Could someone understanding this code investigate further?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/911#issuecomment-479873379:13,test,test,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/911#issuecomment-479873379,1,['test'],['test']
Testability,The branch is already up-to-date. The failing unit tests are legit. They have to be fixed,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3529#issuecomment-1340647498:51,test,tests,51,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3529#issuecomment-1340647498,1,['test'],['tests']
Testability,"The broken tests are caused by new error messages introduced by converting serrs into msg_errors. the number of errors should be updated in the tests. @epernod has a waiting PR doing just that, so I suggest that we merge and wait for erik's fixes in his own PR, as he suggested himself ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/916#issuecomment-461874062:11,test,tests,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/916#issuecomment-461874062,2,['test'],['tests']
Testability,The changes broke some tests (forcing the strict case).; I will have a look at it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1127#issuecomment-525818506:23,test,tests,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1127#issuecomment-525818506,1,['test'],['tests']
Testability,The code is compiling fine on the CI but **tests are failing** this resize was maybe propagating an info .. @epernod,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1977#issuecomment-814746750:43,test,tests,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1977#issuecomment-814746750,1,['test'],['tests']
Testability,The commit that fix that is ; 910d498493f13ca0c670e7df32e99b8674e7c29d; in the defrost branch. Cherry-picking it & test it is ready to go into master.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/40#issuecomment-254772225:115,test,test,115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/40#issuecomment-254772225,1,['test'],['test']
Testability,"The crash in distanceFieldFilter.scn is no longer here. It makes sense because this PR has nothing to do with the crashing code (but we never know...). Another crash on Windows appeared, but it is also on master (https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/master/CI_CONFIG=windows_vs2019,CI_PLUGINS=options,CI_TYPE=release/3949/testReport/SceneTests/). So I think this PR is ready to be reviewed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3393#issuecomment-1293166614:340,test,testReport,340,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3393#issuecomment-1293166614,1,['test'],['testReport']
Testability,"The creation of TriangleSetAlgorithms is not linked to the creation of triangleSetTopologyContainer arrays like edgesInTriangle. what can be possible is that MeshMatrixMass access to edgesInTriangle which is not filled due to the return.; But the return is reached because the input topology is not consistent. And the choice was done to break instead of simulating potential wrong behavior. My question was, in your PR, by removing the return, how many error is dumped if you test #1243 ?. each error means an inconsistency between the Triangle, the Edge and the EdgeInTriangles structure so potentially if FEM is using edges and mass the EdgeInTriangles, you won't fill the matrix in the same order.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1245#issuecomment-577251657:477,test,test,477,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1245#issuecomment-577251657,1,['test'],['test']
Testability,The details to know:; - where (I vote for the 'salle du conseil' :)); - when (wednesday 4 ?); - who will attend to the coding sprint ? . My dream list:; - SofaNG (pluginizing the modules); - sofaqtquick (only if there is more than 2 QML expert); - Sofa code cleaning (as usual) :) ; - coding standard conformance; - we want more tests (they are crucial for refactoring) !!!; - remove & unify duplicated code (eg...how many fast marching algorithm do we need ?); - remove the not-needed includes. ; - Writing doc :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/413#issuecomment-330845349:329,test,tests,329,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-330845349,1,['test'],['tests']
Testability,The error in the tests came from (applications/plugins/LMConstraint/src/LMConstraint/LMConstraintSolver.cpp) in `init`:; ```cpp; listConstraintCorrection[i]->removeConstraintSolver(this);; listConstraintCorrection[i]->addConstraintSolver(this);; ```; The first line removed the element from the list whereas the element was never added to the list (we are in the `init` method). It is added in the second line.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2364#issuecomment-940746618:17,test,tests,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2364#issuecomment-940746618,1,['test'],['tests']
Testability,The failing test is actually showing there was a bug before :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-987947394:12,test,test,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-987947394,1,['test'],['test']
Testability,The failing test is under investigation but let's merge and create the release branch,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4322#issuecomment-1832076559:12,test,test,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4322#issuecomment-1832076559,1,['test'],['test']
Testability,The failing tests are now fixed... ready when the compile is over ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391701836:12,test,tests,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391701836,1,['test'],['tests']
Testability,"The failing tests were mainly due to a unintended side effect that projective constraints were no longer applied at the end of Simulation::init(). To make sure similar issues were not hidden somewhere else, in the last commit I renamed the propagate visitor to make sure existing codes fail at compilation time. Fixing other codes in private/external repos should be easy:; - if projective constraints should not be applied, simply apply the rename to the visitor class; - if projective constraints should be applied, add a MechanicalProject???Visitor first, then rename the existing one. This information should be added to the changelog, but as far as I understood this needs to be done after the PR is merged.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/216#issuecomment-308269542:12,test,tests,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216#issuecomment-308269542,1,['test'],['tests']
Testability,"The fails again... the mac_clang-3.4 succeeded (I restarted but the previous build was here; https://ci.inria.fr/sofa-ci/job/mac_clang-3.4_options_pr3/25/console); And the additional failure in test scenes is because some machines still don't have the libjpeg/tiff library installed (se macos pr3 ) :) . @guparan, @hugtalbot if you are passing by please considere merging the PR because we need it monday morning for our group writing of tutorials for Sofa :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/540#issuecomment-357312877:194,test,test,194,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/540#issuecomment-357312877,1,['test'],['test']
Testability,"The feature was used ; removing it has already been discussed many times and refused"" but having something discussed or used (a long time ago) shouldn't be an argument not to ""refresh"" the discussion (in the last 10 years things have changed in term of hardware as well as we have now more insight on the intrusiveness of the selected approach). Having the featured re-discussed again is probably an indication that something is somehow problematic :) . As I said before there is fact two different issues...one is about mixing in the same scene object/solver with different floating point representation while the other is about having SReal mapped to float or double by default. . The current approach, despite it does not match individual preferences, makes a relative consensus: ; SReal to be switched via a define; Vec3 that is using SReal; Vec3d that is using double; Vec3f that is using float; We use vec3d or vec3f when we want to be explicit on the type or we use Vec3 if we don't. And of course life would be easier if everyone agreed to use double only code (or according to Matthieu's opinion float only) but I don't think this will happen soon ;) . To me the real problem is not there, it is in how we have implemented the mixing in the same scene object/solver with different floating point representation. Our current implement is based on instantiating templates in the factory for each types so that when the types matches the objects can work together without conversion cost. ; This design is implemented with the conditional #ifdef SOFA_FLOAT/SOFA_DOUBLE and is very intrusive (our code is harder to write/read/understand, easy to forget things and/or have 'hidden' or subtle bugs (confirmed by the quick test made by @vmagno)) while there is only very specific gain in certain limited use case. . So we are trading run-time speed for a development cost. But the use case is very rare that we may wonder if other approach shouldn't be preferable (eg: a conversion layer instead) ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/495#issuecomment-342102732:1761,test,test,1761,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-342102732,1,['test'],['test']
Testability,"The file `DisplayFlags.h` contained 3 classes. Now each class has its own specific file. Unit tests on DisplayFlags are added. In my previous proposition, I added an error message when a flag was unknown, and giving suggestions for closest matches. This error message was put directly when reading the flags as a string in the `FlagTreeItem` class. Now, the `FlagTreeItem` triggers the error message, but the function to trigger, including the code for the message, is now in `Data<DisplayFlags>`. Since `Data<DisplayFlags>` is a template specialization that is put in `Data[DisplayFlags].h`, you need to include `Data[DisplayFlags.h]`. If you do that, the owner of the `Data<DisplayFlags>` will know an error happened. Therefore, it will have an error icon in the GUI and the user can consult the errors in the GUI. Before, the component was not aware.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3575#issuecomment-1385224169:94,test,tests,94,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3575#issuecomment-1385224169,1,['test'],['tests']
Testability,The fix worked. Regression tests are back on CI :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1881#issuecomment-789115644:27,test,tests,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1881#issuecomment-789115644,1,['test'],['tests']
Testability,"The merge with master is done.; If the CI does not complain, please ""review"" (maybe rather look at commits) and merge :). [ci-build][with-all-tests]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1375#issuecomment-629144002:142,test,tests,142,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1375#issuecomment-629144002,1,['test'],['tests']
Testability,The new logo(s) are bitmaps (.bmp) so I dont think it would crash in libpng.... Or something is really wrong 🤐,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1851#issuecomment-784008844:8,log,logo,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1851#issuecomment-784008844,1,['log'],['logo']
Testability,"The pull-request #95 contains code that automatically install the dispatcher needed in tests. ; So normally it is not needed any more to clearHandlers (unless you really want a specific behavior). . EDIT: The Pull request #95 was not clean so I did a new one, sorry for the noise.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/94#issuecomment-265592897:87,test,tests,87,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/94#issuecomment-265592897,1,['test'],['tests']
Testability,"The remaining `else if (typeinfo->ValidInfo())` is now reverted. About the regression test results, we needed a reference (diff base) for each example we wanted to test. We chose to run regression tests on these examples :; ```; applications/plugins/SofaTest/SofaTest_test/regression/gravity.scn; examples/Components/collision/FFDDistanceGridCollisionModel.scn; examples/Components/collision/RuleBasedContactManager.scn; examples/Components/constraint/BilateralInteractionConstraint.scn; examples/Components/constraint/FixedConstraint.scn; examples/Components/constraint/FrictionContact.scn; examples/Components/forcefield/BeamFEMForceField.scn; examples/Components/forcefield/FastTriangularBendingSprings.scn; examples/Components/forcefield/TriangularFEMForceFieldOptim.scn; examples/Components/interactionforcefield/InteractionEllipsoidForceField.scn; examples/Components/topology/Mesh2PointTopologicalMapping.scn; examples/Demos/caduceus.scn; ```; We can't use regression tests without these reference files.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/171#issuecomment-283650672:86,test,test,86,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/171#issuecomment-283650672,4,['test'],"['test', 'tests']"
Testability,"The successor of sofaVerification is in SofaTest, look at ; plugins/SofaTest/SofaTest_test/Regression_test.h . I like small test scene that also serve the purpose of being didactic examples, it also ensures that examples are up to date since they are being tested . thomas . ----- Mail original -----. > De: ""erik pernod"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Envoyé: Mercredi 19 Octobre 2016 16:08:29; > Objet: [sofa-framework/sofa] Creating tests on Topological operations (#43); > ; > Hi,; > ; > several tests were already done for topological modifier, they are tested; > through scenes in examples/Components/Topology/TopologicalModifiers; > ; > They test: add/remove of topological elements; > - Is sofaVerification still used?; > - I can easily rewrite those tests in c++ using the ::Sofa_test api. Is it; > better? what is the politic between doing tests through scene or Sofa_test.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/43#issuecomment-255038381:124,test,test,124,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43#issuecomment-255038381,8,['test'],"['test', 'tested', 'tests']"
Testability,"The test is failing, the good news is that this is not related to code regression. Nevertheless I suggest we merge this fix quickly as it looks harmless and remove some noise in our dashboard.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/267#issuecomment-301027658:4,test,test,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/267#issuecomment-301027658,1,['test'],['test']
Testability,The test reading a png file is crashing unexpectedly on Windows ; investigating....,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/185#issuecomment-284464288:4,test,test,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-284464288,1,['test'],['test']
Testability,"The test timeout should be done directly in the CI bash scripts, by running the gtest executables using the command `timeout` that can even send a signal to be able to print a specific message on the dashboard.; https://www.gnu.org/software/coreutils/manual/html_node/timeout-invocation.html. Maybe it makes more sense that @guparan or @bcarrez have a look at it rather than @maxime-tournier?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289721814:4,test,test,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289721814,1,['test'],['test']
Testability,"The tests are happy, so OK for me.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1992#issuecomment-829384704:4,test,tests,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1992#issuecomment-829384704,1,['test'],['tests']
Testability,"The unit test fails because `TypeInfoRegistryTu2.external_registration` has side-effects, and does not clean up. I changed the order of the files in the CMakeLists.txt. So the side-effect is a problem now...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5015#issuecomment-2371570900:9,test,test,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5015#issuecomment-2371570900,1,['test'],['test']
Testability,"The unit tests failure came from the fact that the order of the files changed in the CMakeLists.txt. It highlights the facts that `EXPECT_MSG_EMIT` works only if `MainGtestMessageHandler` is added to the `MessageDispatcher`. But `logging_test.cpp` calls `clearHandlers`. Since `logging_test.cpp` is now sorted before `FileSystem_test.cpp`, it clears the message handler required by `FileSystem_test.cpp`. The message handler must be added in any case, and not relying on the fact that it might have been added earlier.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1479260603:9,test,tests,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1479260603,1,['test'],['tests']
Testability,"The unit tests on the StaticSolver failed because the Metis permutation using the Eigen API did not give the same result than the Metis permutation that was implemented before. This is intriguing... But the most concerning problem is that the result of the linear solver depends on the permutation. Hopefully, it is only a problem of numerical errors. Afterall, the operations are not the same depending on the permutation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4370#issuecomment-1895627928:9,test,tests,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4370#issuecomment-1895627928,1,['test'],['tests']
Testability,"The work is done . now, testing is in progress . The label can be changed",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2082774802:24,test,testing,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2082774802,1,['test'],['testing']
Testability,"There are a few tests/scenes throwing the new warnings (especially with the image plugin), but this was to be expected I guess.; Strangely, I would have predicted Jenkins/gtest to consider those as ""FAILED"" (and having some additional failures in the summary) but it does not. 🤔",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4725#issuecomment-2113900167:16,test,tests,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4725#issuecomment-2113900167,1,['test'],['tests']
Testability,There are unit tests to fix (or remove),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4795#issuecomment-2194072479:15,test,tests,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4795#issuecomment-2194072479,1,['test'],['tests']
Testability,"There is a patch in the daccord repository on forge. . Here are the commit messages (which contains possible interaction with other sofa part):. ```; [FIX]: Allow sofa to save in xml & pyscn the scene. This may break some scene. Once stabilized this may go to the main Sofa. Several issues needed to be adresse to make this system work. first (to try to minimize the amount of un-needed saved informations making the file unreadable) ):; - all the Data<> are now non persistent by default.; - a Data<> become persistent if:; * it is loaded from a file or from a python script.; * it is modified in the GUI. second (hacky stuff on top of old hack stuff):; during the parsing of xml some component ""converts"" XML attributes to other (and possibility none) dataField). As only the dataField can be saved...these attributes are ""lost"". ; The solution was to stop doing with a minimal number of changes the Sofa behavior. . third (quirck stuffs on pile of quirck stuffs):; some important XML attributes are interpreted on the fly and have very specific meaning but there is no associated data field. The solution was to add the corresponding datafield to allow them to be saved.; This is the case for ""src"", ""template"", ""name"", ""type"" .... Given the amount of changed on base classes logics...some scene may have problem to load or save. Please tell if this is the case.; ```. The case that probably could cause some problem is the replacement of the 'src', 'template' with real data field.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/41#issuecomment-254789868:1279,log,logics,1279,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/41#issuecomment-254789868,1,['log'],['logics']
Testability,"There is a primary template class that can act on any type (not just Data). In this case, the class is a simple proxy.; A second implementation partially specializes the class for vector types. Again, no need to be a Data. The type needs to implement the `begin` and `end` methods, and the `[](int)` operator, to be considered a vector type.; Finally, a third implementation partially specializes the class for Data. This specialization uses one of the first two implementation: `template<class T> class ReadAccessor<Data<T> > : public ReadAccessor<T>`.; We can say that accessors are meant to be used for Data only, but they need the implementations for any type (the type that is contained by the Data). And those implementations can be tested, even if they are not used. Worth to be noted:; `std::vector` is of course considered as a vector type. If I want to use it through an accessor, it matches the partial specialization for vector types. However, accessors for vector types require the type `Size` in the vector type (there is an alias). `std::vector` has not such a type, so the compilation fails. Accessors to vector types can be used only for `sofa::type::vector` (and its derived types). Conclusion: ; 1) there is a discrepancy between the `is_vector` type trait and the requirements of the accessors.; 2) Write `ReadAccessor<std::vector<Real> >` or `ReadAccessor<Data<std::vector<Real> > >` does not compile. To fix this behavior, I'll suggest in another PR something like; ```cpp; using Size = std::conditional_t<hasSizeSize<T>::value, T::Size, T::size_type>;; ```. I think the read-only flag has nothing to do with the accessors. I think it is related to the GUI only.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3234#issuecomment-1228215278:739,test,tested,739,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3234#issuecomment-1228215278,1,['test'],['tested']
Testability,There is an error in the test because timer ids changed in this PR,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3959#issuecomment-1645543718:25,test,test,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3959#issuecomment-1645543718,1,['test'],['test']
Testability,"There is one error on the dashboard:; https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3366/CI_CONFIG=windows_vs2019,CI_PLUGINS=options,CI_TYPE=release/2/testReport/SceneTests/applications_plugins_ArticulatedSystemPlugin_examples_ArticulatedArm/robot_py/. do you think it is linked to your change or is it a blinking error on the CI?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3366#issuecomment-1272895824:163,test,testReport,163,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3366#issuecomment-1272895824,1,['test'],['testReport']
Testability,"There was a flaw fixed in the tests, fixing it fixed all tests on Linux and OSx but raised errors on Windows. I switch to Redmond's OS to fix them and hopefully, it will then be ok...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/267#issuecomment-302020287:30,test,tests,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/267#issuecomment-302020287,2,['test'],['tests']
Testability,There was also the OBBModel in SOFA for OrientedBoundingBox but I don't think there is a ROI function in it. Thank you @sergeiNikolaev . [ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357225065:159,test,tests,159,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357225065,1,['test'],['tests']
Testability,"These files are not in the CMakeLists of SofaGeneralEngine, and were not updated for 14mo.; And the good BoxROI is still in SofaEngine, still updated and tested. So I guess there is no problem with deleting those (and it seems this PR does it well 🐱‍🐉)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1333#issuecomment-613972165:154,test,tested,154,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1333#issuecomment-613972165,1,['test'],['tested']
Testability,"Thinking about it again, Intel(R) UHD Graphics is not a cuda capable device, so it will not be used for computation (rendering maybe?). What's the content of DEVICE_ID and DEVICE_NAME in the log message `CUDA: Using device DEVICE_ID : DEVICE_NAME`?; What do you use to measure the performances?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4423#issuecomment-1884754342:191,log,log,191,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4423#issuecomment-1884754342,1,['log'],['log']
Testability,"This PR can be closed. Nevertheless, I'll check SparseLDLSolver again, and add a unit test in a future PR",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3010#issuecomment-1709555765:86,test,test,86,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3010#issuecomment-1709555765,1,['test'],['test']
Testability,This PR fixes some of the failing unit tests in https://github.com/sofa-framework/sofa/pull/2554,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2578#issuecomment-1010909781:39,test,tests,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2578#issuecomment-1010909781,2,['test'],['tests']
Testability,"This PR is not about fixing the tests, it was to point they are failing since a long time and this was un-noticed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/832#issuecomment-440225157:32,test,tests,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/832#issuecomment-440225157,1,['test'],['tests']
Testability,"This PR is not ready at all, 25 unit tests are crashing 😢",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/335#issuecomment-318066743:37,test,tests,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/335#issuecomment-318066743,1,['test'],['tests']
Testability,This PR is not supposed to be merged...the idea was to show on the CI in which components there is not an even number of begin/end of accessors. But the CI is not working anymore on it and has not kept the compilation log. Now after a quick reading I see several good things in this PR:; - a new fonction in BackTrace to get the trace; - a way to systematically detect components rely on an invalid behavior in begin/end pairs. But given how many componnents have problem this is far too much error messages. ; ; Maybe we could just enable the systematic test using NDEBUG and have that merged.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1326#issuecomment-680744834:218,log,log,218,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1326#issuecomment-680744834,2,"['log', 'test']","['log', 'test']"
Testability,This PR seems to have problem on the tests.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/326#issuecomment-314187431:37,test,tests,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326#issuecomment-314187431,1,['test'],['tests']
Testability,This PR will finally add warning due to the CollisionModel.; Another PR will come to fix them in SOFA.; [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1241#issuecomment-573061786:124,test,tests,124,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1241#issuecomment-573061786,1,['test'],['tests']
Testability,This PR won't solve any error nor warning. It will just prevent the warning parser (on Jenkins) from crashing.; About the SceneChecker raising lots of warnings: what kind of warnings does it raise? Is it normal that it is triggered for our CI batch tests?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/555#issuecomment-355560915:249,test,tests,249,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/555#issuecomment-355560915,1,['test'],['tests']
Testability,"This PR, which introduces unit tests, shows a difference is coming from the call of the METIS library: https://github.com/sofa-framework/sofa/pull/3050",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3036#issuecomment-1158800544:31,test,tests,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3036#issuecomment-1158800544,1,['test'],['tests']
Testability,This PR: ; - [ ] succeed on all compilations setup on the CI.; - [x] does not generates new warnings or test failure. ; - [x] does not break existing scenes.; - [x] does not break API compatibility. ; - [x] is now 1 week old.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/122#issuecomment-273726986:104,test,test,104,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/122#issuecomment-273726986,1,['test'],['test']
Testability,This PR: ; - [ ] successfully compile on each configuration on the CI.; - [x] does not generates new warnings or test failure. ; - [x] does not break existing scenes.; - [x] does not break API compatibility. ; - [x] is now 1 week old.; - [x] has been reviewed and agreed to be transitional.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/113#issuecomment-273725996:113,test,test,113,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/113#issuecomment-273725996,1,['test'],['test']
Testability,This PR: ; - [x] does not breaks compilation on the CI.; - [x] does not generates new warnings or test failure. ; - [x] does not break existing scenes.; - [x] does not break API compatibility. ; - [x] is now 1 week old. So I merge it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/132#issuecomment-273724965:98,test,test,98,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/132#issuecomment-273724965,1,['test'],['test']
Testability,This PR: ; - [x] succeed on each compilation setup on the CI.; - [x] does not generates new warnings or test failure. ; - [x] does not seems to break existing scenes.; - [x] does not seems to break API compatibility. ; - [x] is now 1 week old. I would say we can merge it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/148#issuecomment-276601858:104,test,test,104,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/148#issuecomment-276601858,1,['test'],['test']
Testability,This bug may affect every windows VS builds.; @guparan we investigate and found than the problem come from visual studio build directory named Release/Debug. I´m testing my PR and see if everything works well. I added some specific MSVC code inside the main CMakefile to enforce VS to not create release/debug directory.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/561#issuecomment-357989953:162,test,testing,162,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-357989953,1,['test'],['testing']
Testability,"This feature is working in debug mode (just tested in windows, and it allowed me to find a bug when compiling SOFA with VS....).; But as you mentioned it won't work when you will want to load a binary not suffixed with _d and trying to runSofa in debug mode (e.g it could happen that you don't have access to the debug version of a plugin but still want to debug your application). ; Basically PluginManager, if compiled in Debug mode, wants to load ""_d"" suffixed binaries. If we want to achieve that:; - remove the forced suffix ""_d"" when loading in debug mode,; - the config file must have the ""complete"" ""binary name"" and not the target name (or just add the binary name with the target name). What do you people think ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/301#issuecomment-312619038:44,test,tested,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-312619038,1,['test'],['tested']
Testability,"This implementation is at the force field level because its goal is to parallelize the matrix-free CG.; Unfortunately, the benchmarks were measured with a bug. Now the bug is fixed, the performances are disappointing. It requires more investigation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3566#issuecomment-1373932415:123,benchmark,benchmarks,123,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3566#issuecomment-1373932415,1,['benchmark'],['benchmarks']
Testability,This is connected but as the Image_png is not inheriting from Sofa_test then no. ; Maybe #96 also fix the test but this is more a side-effect. Actually I planned to make a future pull-request in which I will unify all the *_test ; to inherits from sofa_test and removing all the clearHandler/addHandler but this ; is not done yet. But as I don't know when I will have time for that I prefer to have ; this PR merged (to remove the failing test).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/92#issuecomment-265831479:106,test,test,106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/92#issuecomment-265831479,2,['test'],['test']
Testability,"This is exactly what I mentionned when I said ""I strongly believe that would these paths have been properly restored by f93e2b9 (**my bad**)..."" ; It should have been restored, but I did not do it properly for the **linux** plaform because it is not my main working environment ( so it is easy to slip an error here ) and also probably because I was kind of upset to have to deal with this issue on the first place... [EDIT] I did not take the time to go back enough in the log to find back the last version which had the paths properly set. [/EDIT]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342829426:474,log,log,474,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342829426,1,['log'],['log']
Testability,"This is weird, this should not happen if the plugin was loaded (i.e thanks to ""-l SofaPython3""on the command line); Can you post the entire log when you execute runSofa ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1788253936:140,log,log,140,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1788253936,1,['log'],['log']
Testability,This issue is pending since last STC6.; Now that regression test project is tracked as a git submodule. Old historically failing refences will be accessible from git history and will now be replaced (in PR #1061) by new version with only first and last iteration dump.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/828#issuecomment-499867640:60,test,test,60,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/828#issuecomment-499867640,1,['test'],['test']
Testability,"This issue was forgotten (sorry) but we actually have the same problem on our CI.; @oalii Did you manage to find a solution?. ## My research; I created a basic python script doing; ```python; import sys. print ""Using python: "" + sys.executable; print ""**** sys.path ****""; for p in sys.path:; print p; print ""******************"". import os; try:; user_paths = os.environ['PYTHONPATH'].split(os.pathsep); except KeyError:; user_paths = []; print ""*** PYTHONPATH ***""; for p in user_paths:; print p; print ""******************"". import numpy; print ""Numpy found: "" + numpy.__file__; ```. When I run this script with default python:; ```; sofamacbuilder:mac_clang-3.5_default_release sofa$ python test.py; Using python: /usr/local/opt/python@2/bin/python2.7; **** sys.path ****; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release; /usr/local/lib/python2.7/site-packages; /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python27.zip; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-darwin; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload; /usr/local/lib/python2.7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; Numpy found: /usr/local/lib/python2.7/sit",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:693,test,test,693,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326,1,['test'],['test']
Testability,This one is a small PR so maybe we can merge it before the 7 days ? ; [ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/669#issuecomment-393438678:92,test,tests,92,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/669#issuecomment-393438678,1,['test'],['tests']
Testability,This one will definitely need multiple checking and maybe local tests with your own plugins / versions of SOFA for obvious security reasons :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1301#issuecomment-606568981:64,test,tests,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1301#issuecomment-606568981,1,['test'],['tests']
Testability,This should be really tested also with CUDA.; @guparan do you confirm that it is compiled and tested on CI ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1301#issuecomment-607158413:22,test,tested,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1301#issuecomment-607158413,2,['test'],['tested']
Testability,This should fix:; regression_test issue: #801; regresison test topology: #829; failing regression test need to be discussed in next dev meeting: #828,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/830#issuecomment-440233757:58,test,test,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/830#issuecomment-440233757,2,['test'],['test']
Testability,Those scenes were not tested? How did you detect the error?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1020#issuecomment-489635041:22,test,tested,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1020#issuecomment-489635041,1,['test'],['tested']
Testability,"Timeout on tests was disabled in 2bc5db53 with commit message ""I have the intuition that this timeout mess might be the reason why continuous builds on Windows are so long. Let's see...""; Should we re-enable this?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033:11,test,tests,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033,1,['test'],['tests']
Testability,To fix the last test I had to be able to detect that some data are child of BaseImage. So I have added inheritance mecanism in the DataTypeInfoWrapper.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1605#issuecomment-729713330:16,test,test,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1605#issuecomment-729713330,1,['test'],['test']
Testability,"To get rid of the ""call super"" anti-pattern is very challenging, because it is used to (a) check constraints on data fields as well as to (b) initialize the internal logic of the component. The problem I see is that the two things are being interleaved in a very subtle way. And both (a) and (b) rely on the call super pattern to work.; ; That said I strongly support the idea of cleaning the data validation mechanism. . Damien,; Nota bene:; I disagree about your saying ""I think this ""true/false implying other data fields"" mechanism is a bad design and for this case no checking solution will be clean. "" . Having complex relationship between input fields is a very common situation in user interfaces and it is not restricted to""true/false implying other data fields"" but also having mutually exclusive fields and other cases. It is so common that UI frameworks have dedicated support for that (QGroupBox (http://doc.qt.io/qt-5/qtwidgets-widgets-groupbox-example.html in Qt). And from an User interface perspective not exposing such constraints to the user is actually a bad design. So, these kind of constraint are good design, the problem is on how to implement them in Sofa :) . In Sofa the current state is that:; - the constraints resulting from the type are encoded into the read method of the field (eg: RGBAColor accept inputs like #FFAABBCC or ""red"", the input validation and error message reporting is done in the 'read' field, a dynamic cast can be used to display a color selector widget instead of a text field). ; - the ""isRequired"" constraint is encoded with a boolean in the Data field and checked in BaseObject::init(); - the ""isReadOnly"" constraint is encoded with a boolean in the Data field, it is not checked in BaseObject::init() and writing to it is allowed but it used to gray out things in the GUI. ; - other constraints (including one making relation between multiple data) are encoded with if() in the overriden init() and of course these constraints are not visible in ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832:166,log,logic,166,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416637832,1,['log'],['logic']
Testability,"To me loading textures and logos is not a core functionality of a physics library, so I would vote for not putting it in SofaKernel. What is important is that this removes the dependencies to `zlib` and `libpng` from sofahelper, correct ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281631942:27,log,logos,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281631942,1,['log'],['logos']
Testability,"To please both @hugtalbot and @fredroy, I did the following:; - I added a regression test on the introduced scene, keeping only one beam; - I generated the regression reference with the single threaded version => the scene runs with the multithreaded version but compare to the single threaded one",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1721274955:85,test,test,85,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1721274955,1,['test'],['test']
Testability,To test: multiple solvers using METIS in parallel,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3072#issuecomment-1169734002:3,test,test,3,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3072#issuecomment-1169734002,1,['test'],['test']
Testability,"Todo en vrac:; - trier les composants à garder; - réorganiser les composants à mettre dans des plugins; - mise à jour des CMakeLists pour compiler en mode ""NG"" (par défaut) ou avec tout; - ""paquets de plugins"" pour ne pas devoir activer un par un tous les plugins. Sur les composants gardés: ; - mettre n place des tests; - faire une passe de cleaning (noms, code, etc)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/225#issuecomment-290703670:315,test,tests,315,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/225#issuecomment-290703670,1,['test'],['tests']
Testability,"Tried the crashing test on MacOS VM (Assembly_test.testDecomposedString) and it passed several times, crashed one time, then passed again several times...; Can't investigate further atm.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/911#issuecomment-479423080:19,test,test,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/911#issuecomment-479423080,2,['test'],"['test', 'testDecomposedString']"
Testability,Two regression tests are failing :; - Regression_test/StateRegression_test.sceneTest/EulerExplicitSolver; - Regression_test/StateRegression_test.sceneTest/EulerExplicitSolver_diagonal. I suppose this is because you moved them into a new folder and the Regression project has not been updated accordingly.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2199#issuecomment-873010397:15,test,tests,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2199#issuecomment-873010397,1,['test'],['tests']
Testability,"Two tests are failing, did you notice @bakpaul ; ```; UnitTests.Bindings_Modules/SofaPython3/Modules.all_tests/0_SofaDeformable_SpringForceField_test_add_many_springs	89 ms	13; UnitTests.Bindings_Modules/SofaPython3/Modules.all_tests/1_SofaDeformable_SpringForceField_test_add_one_spring; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4649#issuecomment-2247110094:4,test,tests,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4649#issuecomment-2247110094,1,['test'],['tests']
Testability,"Two unit tests failing, probably solved in https://github.com/sofa-framework/sofa/pull/3322",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1253810910:9,test,tests,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3280#issuecomment-1253810910,1,['test'],['tests']
Testability,"Unfortunately I won't have much time to dedicate to this in the foreseeable future :-/. I see at least a few options for fixing this:; - split the `SceneCreator` API across plugins so that any plugin can provide facilities for creating a scene with components in this plugin, possibly with a common API in core; - remove anything referencing modules/plugins in`SceneCreator`, and instantiate components only using `createObject` (aka. the easy way out); - deprecate SceneCreator/C++ tests altogether and do python tests only, put the effort on making python tests bullet proof and easy to use (my personal preference). I strongly favour having tests that are as frictionless as possible, otherwise people will just stop writing them. In our fork we are considering using example python scenes as tests, by adding suitable assertions and testing what's needed on the example scene.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/417#issuecomment-331550589:483,test,tests,483,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-331550589,7,"['assert', 'test']","['assertions', 'testing', 'tests']"
Testability,Unit and scene tests are not happy. Setting back to WIP,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2125#issuecomment-853614523:15,test,tests,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2125#issuecomment-853614523,1,['test'],['tests']
Testability,Unit test failing due to the increased number of visual flag @bakpaul,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4048#issuecomment-1680145018:5,test,test,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4048#issuecomment-1680145018,1,['test'],['test']
Testability,Unit tests added! Performances using the benchmark scenes seem similar to the current ones.; To be reviewed @sofa-framework/reviewers,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1275831031:5,test,tests,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1275831031,2,"['benchmark', 'test']","['benchmark', 'tests']"
Testability,"Unit tests are failing, but are these maybe fixed in previous PR? @epernod",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3369#issuecomment-1282850263:5,test,tests,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3369#issuecomment-1282850263,1,['test'],['tests']
Testability,Very cool ! both classes are key classes intended to enter Sofa-NG project.; Thank you guys for the tests.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/268#issuecomment-302628489:100,test,tests,100,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/268#issuecomment-302628489,1,['test'],['tests']
Testability,"Very cool, I just tested it. ; - But I see it is not possible to put black background?; - The fluid is not visible in front of another VisualModel, is it due to ZBuffer?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1194#issuecomment-544885851:18,test,tested,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1194#issuecomment-544885851,1,['test'],['tested']
Testability,Very nice work @fredroy :clap: :clap: :clap:. I have 2 side questions:; - shouldn't this be under applications/projects instead of applications/plugins (I would feel more logical to have it next to runSofa basically) ?; - is it planned to host the repository in sofa-framework organization ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2062#issuecomment-842943342:171,log,logical,171,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2062#issuecomment-842943342,1,['log'],['logical']
Testability,Very strange failure on macos_clang_options; [ci-build][with-all-tests][force-full-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3176#issuecomment-1210400782:65,test,tests,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3176#issuecomment-1210400782,1,['test'],['tests']
Testability,"VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712792606:41,test,test,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712792606,1,['test'],['test']
Testability,"WIP -> rewriting history. EDIT: in the end, the only ""non logical"" rename by `git log ` is `modules/SofaPreconditioner/src/SofaPreconditioner/BlockJacobiPreconditioner.cpp => Component/Compat/src/SofaBaseLinearSolver/CGLinearSolver.h`. where BlockJacobiPreconditioner.cpp is deleted and thinks it is now the (new file but temporary) compat file for CGLinearSolver.h (whose destiny is to be deleted anyway)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2717#issuecomment-1068020496:58,log,logical,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2717#issuecomment-1068020496,2,['log'],"['log', 'logical']"
Testability,"Wait for CI, then ready :+1:; [ci-build][with-all-tests]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1899#issuecomment-793688900:50,test,tests,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1899#issuecomment-793688900,1,['test'],['tests']
Testability,Waiting for CI but I think it's better now:; used enable_if<is_base_of> to compile or not the doUpdate / update methods in the test. should be clean enough,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/760#issuecomment-423956245:127,test,test,127,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/760#issuecomment-423956245,1,['test'],['test']
Testability,"Waiting for the last build to complete, but test problems look fixed since last commit. OK for me to merge as soon as the mas build is ok.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/207#issuecomment-289040858:44,test,test,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/207#issuecomment-289040858,1,['test'],['test']
Testability,Warning: a bunch of unit tests are failing after merge on [ubuntu_clang-3.8_options-debug](https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.8_options-debug/353/testReport/),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/372#issuecomment-329165449:25,test,tests,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-329165449,2,['test'],"['testReport', 'tests']"
Testability,"We chould have an intermediate level in the inheritance hierarchye or we can have interfaces as well as agregation. . Here is an example with both interface & agregation approache to factor the data logics. It is a bit long because I wanted it to be self compiling. ; ```cpp; #include <iostream>; #include <vector>; class Data; {; public:; std::string name;; std::string value;; };. class BaseObject; {; public:; BaseObject() {; initData(&d_name, ""name"");; }. virtual void init() {}. void initData(Data* d, const std::string& name); {; d->name = name;; m_datas.push_back(d);; }. void dump(); {; std::cout << ""== ("" << d_name.name << "") =="" << std::endl;; for(auto& data : m_datas); std::cout << ""Data: "" << data->name << std::endl;; }. private:; std::vector<Data*> m_datas;; Data d_name;; };. class ForceField : public BaseObject; {; public:; ForceField() {; initData(&d_mstate, ""mstate"");; }; Data d_mstate;; };. //// Data related object...; class TopologicalLink; {; public:; TopologicalLink(BaseObject* self); {; self->initData(&d_topology, ""topology"");; }; Data d_topology;. private:; TopologicalLink(const TopologicalLink&) {};. };. class GroupOfRelatedData; {; public:; GroupOfRelatedData(BaseObject* self); {; self->initData(&d_a, ""a"");; self->initData(&d_b, ""b"");; self->initData(&d_c, ""c"");; }. void parse(); {. }. void init(); {; if(d_a.value == ""well"" and d_c.value == ""not so""); d_b.value = ""ok"";; }. Data d_a;; Data d_b;; Data d_c;; };. ///// Sofa components; class TetrahedronFEMForceField :; public ForceField,; public TopologicalLink; {; public:; TetrahedronFEMForceField() : TopologicalLink(this); {; initData(&d_youngModulus, ""youngModulus"");; }. Data d_youngModulus;; };. class SuperFEM :; public ForceField,; public TopologicalLink; {; public:; SuperFEM() : TopologicalLink(this), dataGroup(this); {; initData(&d_youngModulus, ""youngModulus"");; initData(&d_oldModulus, ""oldModulus"");; }. void init() override; {; dataGroup.init();; }. Data d_youngModulus;; Data d_oldModulus;. Grou",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/979#issuecomment-479885178:199,log,logics,199,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/979#issuecomment-479885178,1,['log'],['logics']
Testability,We still did not test with Rigid or Vec2/6.; In my opinion we should be conservative and just let the caching optimization (and let the default template as it is for the moment); What do you think ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1996#issuecomment-857807779:17,test,test,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1996#issuecomment-857807779,1,['test'],['test']
Testability,"We tested this scene in debug and release, and both displays a warning message.; The warning message is consistent because it use a default template (aka double). Here is a log on debug :; ` [WARNING] [MergeVectors(merge)] Template <tartempion> incorrect, used <double>; `",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/378#issuecomment-328103188:3,test,tested,3,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/378#issuecomment-328103188,2,"['log', 'test']","['log', 'tested']"
Testability,We will also need to decide if we use assimp as an extlib or if we embedded it. Right now I use cmake to find it on the system and so I can't test the code on the dasboard.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/603#issuecomment-369891387:142,test,test,142,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-369891387,1,['test'],['test']
Testability,"Well I don't really see the cleaning there just renaming to a name I find more ambiguous because EXPECT_NONFATAL_FAILURES is much less 'distinct' fom EXPECT_NONFATAL_FAILURE than the previous one... but maybe I miss-understood the commit. Anyway if you think this is better I don't really care as this is a macro to ""test"" the testing framework so of very limited usage.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370559064:317,test,test,317,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370559064,2,['test'],"['test', 'testing']"
Testability,"Well I found a fix, it involves `sys.excepthook` to register a toplevel handler for uncaught python errors. In this case I simply abort the test. We should be fine now, but just in case we should also:. 1. limit logging size; 2. limit simulation time for tests. I'll look into the second part. And again, my deepest apologies.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289694371:140,test,test,140,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289694371,3,"['log', 'test']","['logging', 'test', 'tests']"
Testability,"Well in this case, the bug was a wrongfully warning printed only when Sofa is built in debug. Can we create tests that are that specific?. I could try to do some regex ninja tests on the application output, but it would have to be executed on debugged configurations. Let me know if this is something you would like to see for this PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/406#issuecomment-329789709:108,test,tests,108,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/406#issuecomment-329789709,2,['test'],['tests']
Testability,"Well it isn't actually a map in the code but a vector. This TopologySubsetIndices data is used in SpringForcefield to keep track of the topological changes and contains the indices on which each spring is attached. Given the fact that multiple springs can be attached to one point, then this vector may contains multiple occurrence of the same index (and it is the case for some unit tests currently). And more importantly its order is very important because it should be kept consistent with the order of the list of attached indices of the second object...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4738#issuecomment-2114789914:384,test,tests,384,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4738#issuecomment-2114789914,1,['test'],['tests']
Testability,"Well spotted @courtecuisse . - This fix reminds me that some bound checks (e.g type::vector) does only check in DEBUG mode/assertion https://github.com/sofa-framework/sofa/blob/649a41bf386b78c95264d9a6fb3125f4662c5a58/Sofa/framework/Type/src/sofa/type/vector_T.h#L108; obviously for performance reason. Should we do that here ? Thing is, many people do not run in debug so.... 🤐. - I guess this is a far cry but @fjourdes you would want to get the fix ? (if you dont have it already...)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4179#issuecomment-1724637659:123,assert,assertion,123,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4179#issuecomment-1724637659,1,['assert'],['assertion']
Testability,"Well, here is the updated log. (I also did small corrections in scene to remove warnings I know how to remove. Anyway, the issue is still there).; The scene with corrections is attached.; [test_scene.zip](https://github.com/sofa-framework/sofa/files/8573660/test_scene.zip). **Full output**. ```txt. [sergei@sergei-20hd0000fr test_scene]$ /home/sergei/Source_code/Sofa_development/sofa/build_release/install/bin/runSofa -l /home/sergei/Source_code/Sofa_development/SofaPython3/build_release/install/lib/libSofaPython3.so /home/sergei/Source_code/test_scene/test_scene.py ; [WARNING] [SofaEigen2Solver] SofaEigen2Solver is deprecated; Eigen classes are now located in Sofa.LinearAlgebra and SVDLinearSolver in SofaDenseSolver.You can remove SofaEigen2Solver from your scene, and if using SVDLinearSolver, please load SofaDenseSolver instead.; [INFO] [runSofa] PluginRepository paths = /home/sergei/Source_code/Sofa_development/Optimus/build_release:/home/sergei/Source_code/Sofa_development/SofaAuxiliaryComponents/build_release:/home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins:/home/sergei/Source_code/Sofa_development/sofa/build_release/install/lib; [INFO] [runSofa] DataRepository paths = /home/sergei/Source_code/Sofa_development/sofa/build_release/install/share/sofa:/home/sergei/Source_code/Sofa_development/sofa/build_release/install/share/sofa/examples:/home/sergei/Source_code/Sofa_development/sofa/build_release/install/share/sofa:/home/sergei/Source_code/Sofa_development/sofa/build_release/install/share/sofa/examples; [INFO] [runSofa] GuiDataRepository paths = /home/sergei/Source_code/Sofa_development/sofa/build_release/install/share/sofa/gui/runSofa:/home/sergei/Source_code/Sofa_development/sofa/build_release/install/share/sofa/gui/qt:/home/sergei/Source_code/Sofa_development/sofa/build_release/install/share/sofa/gui/qt; [INFO] [SofaPython3] Initializing with python version 3.10.4 (main, Mar 23 2022, 23:05:40) [GCC 11.2.0]; [INFO] [SofaPython3] Registe",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918:26,log,log,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918,1,['log'],['log']
Testability,"Well, it's now compiling on linux since @bcarrez installed a new version of some ffmpeg libs.; The failure on the ubuntu build is due to the lack of X. @damienmarchal @guparan @hugtalbot do we need to test this ""gui"" ? I means, others gui are not tested and the problem would be the same as we encounter with the headless recorder if we consider testing it. On centos, we need to install newer version of ffmpeg libs.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/538#issuecomment-360769714:201,test,test,201,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-360769714,3,['test'],"['test', 'tested', 'testing']"
Testability,"Well, today the long name is the returned string. And it does not depend on this PR. Look at the unit tests I added:. ```cpp; EXPECT_EQ(sofa::defaulttype::DataTypeName<float>::name(), ""f"");; const auto object = sofa::core::objectmodel::New<DefaultTemplate1<float> >();; EXPECT_EQ(object->getTemplateName(), ""float"");; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3461#issuecomment-1307402013:102,test,tests,102,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3461#issuecomment-1307402013,1,['test'],['tests']
Testability,What do I(we) do now ? Should I add other tests ? @damienmarchal @guparan,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-328151492:42,test,tests,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-328151492,1,['test'],['tests']
Testability,"What was written above (hidden by GH):. ---. TODO:; - test when a node is added. One issue remains in my tests :; - simulation starting without gravity, and then gravity is added; - mass added using python, since no init, the link in GravityForceField to the local mass is no performed",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1445308949:54,test,test,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1445308949,2,['test'],"['test', 'tests']"
Testability,When #1080 is merged and scenes tests will be checked I will add change to remove fileMesh inside oglModel.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1081#issuecomment-501667969:32,test,tests,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1081#issuecomment-501667969,1,['test'],['tests']
Testability,When inheriting from BaseTest this automatically add to the test the adequate message handler so there is no need to add them manually. ; But refactoring these tests is out of the scope of the PR :) ; So it was more a comment for future work ;) . EDIT: Do you know why the windows build is failing ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/642#issuecomment-397590209:60,test,test,60,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-397590209,2,['test'],"['test', 'tests']"
Testability,"While refactoring a bit, I also stumbled upon the `typedef` plugin, which automatically couples every potential test file with every single include file through `<typedef/Sofa_typedef.h>`. Why is there such a plugin? Why not simply have plugins define their own `typedef.h`? . And more importantly why are we aggregating typedefs *across* modules boundaries? This completely defeats modularity which in turn complicates refactoring quite a lot!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172:112,test,test,112,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172,1,['test'],['test']
Testability,"Why back ""to review"" @epernod? ; The failing tests are still here :cry:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2284#issuecomment-988074827:45,test,tests,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2284#issuecomment-988074827,1,['test'],['tests']
Testability,Why this is one not yet merge ? ; :) [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1831#issuecomment-783467227:57,test,tests,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1831#issuecomment-783467227,1,['test'],['tests']
Testability,"With the new exclusion of SOFAGUI_HEADLESS_RECORDER on CentOS, looks like all tests pass correctly.; I think that once the dashboard has finished, this PR will be ready to merge.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/538#issuecomment-368035205:78,test,tests,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-368035205,1,['test'],['tests']
Testability,Would it be easy to add theme to the scene tests for future problem detection?; They were not crashing I guess...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1020#issuecomment-489640989:43,test,tests,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1020#issuecomment-489640989,1,['test'],['tests']
Testability,Would it be possible to write a unit test to show this ? thanks ! 👍; (there are already some in Sofa.Type_test/MatTypes_test.cpp so it would be easy to add tensorproduct tests here),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2787#issuecomment-1067780563:37,test,test,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2787#issuecomment-1067780563,2,['test'],"['test', 'tests']"
Testability,"Wouldn't it be better if implemented in VisualStyle which is kind of our user interface instead of DisplayFlag ? ; This would also allow to use msg_error() instead of msg_error(""Blahblah)...(independently, i would say that msg_error(""String) version should always print something, unless the logging backend is not registerd).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3575#issuecomment-1383854873:292,log,logging,292,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3575#issuecomment-1383854873,1,['log'],['logging']
Testability,"Yeah I see your issue now, thanks !. I think it could be resolved by changing (improving?) a little bit our current CI strategy. Correct me if I'm wrong, but right now the CI does the following for a PR # XXX into the branch Master:. 1. Checkout PR#XXX branch; 2. Build SOFA; 3. Run tests. I think a better approach should be:. 1. Checkout origin/master; 2. **Merge** PR #XXX branch; 3. Build SOFA; 4. Run tests. This might also prevent some weird issues that we had were the CI passes, we merge, and then the CI start breaking everywhere: The CI never actually tested the merged PR. I think this would fix your issue 5. What do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2004#issuecomment-821093676:283,test,tests,283,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2004#issuecomment-821093676,3,['test'],"['tested', 'tests']"
Testability,"Yeah just I wanted to write which ones were failing.; As for your question.... I suppose the issue thingy is cleaner, but dont remove the tests themselves (just ignore it in the list with a comment with a link to the issue)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2161#issuecomment-863905746:138,test,tests,138,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2161#issuecomment-863905746,1,['test'],['tests']
Testability,"Yeah, I was testing head of 19.06.00. But I forgot to mention that I'm on macOS, don't know if it is related. A colleague told me that it seems to work on windows.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1105#issuecomment-513251952:12,test,testing,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1105#issuecomment-513251952,1,['test'],['testing']
Testability,"Yep, I did not find a ""standard"" std:: thingy to do the is_iterable or something like that (except concept from c++20), so good to go for me as well.; [ci-build][force-full-build][with-all-tests]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1807#issuecomment-785722870:189,test,tests,189,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1807#issuecomment-785722870,1,['test'],['tests']
Testability,"Yes I actually fixed it in https://github.com/sofa-framework/sofa/pull/905, see https://github.com/sofa-framework/sofa/commit/c608d441edd35f6e8eb90ebfc420cb941c3bd750 and https://github.com/sofa-framework/sofa/commit/e1b55cba5ff200c7a11f6992974159b55cec000f. The error is printed on CI but you have to open the output of a scene test to see it (Jenkins only shows the first line of an error in the ""SOFA SceneTest Errors"" view). See for example the [output of failing scene Components/forcefield/ForceMaskOff.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/master/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/636/artifact/parent_dir/build/scene-tests/examples/Components/forcefield/ForceMaskOff.scn/output.txt) (latest master build).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/922#issuecomment-461353086:329,test,test,329,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/922#issuecomment-461353086,2,['test'],"['test', 'tests']"
Testability,"Yes I have an idea... . The problem is probably because currently there is two approaches to interpret the messages send with the Message API as test failure. Fixing should be easily, will do that this evening. . More in-depth... I think this is a good opportunity to discuss how the component messages are interpreted as test...currently we have two different approaches. . One of the approach is a global message handler that interprets all errors as test failure. This handler can be ""explicitely"" deactivated when we don't need this behavior. But if we forgot to do so this behavior propagates to each _test in the same test suite (I think this is what is happening here). . I found this behavior not precise enough so I develop ExpectMessage & MessageAsTestFailure which are RAII classes to finely select which message generates test failure with the granulary of the RAII; (so it is automatically removed when the RAII is destroy). ; The good point about this approach is that:; - we can raise test failure for any kind of message (this depend on the test); - we can raise test failure is a message is expected but not send (like using a wrong filename must generate a message). ; - we behavior is only active during the RAII lifetime. . I don't know if we need to keep them both. What is your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642:145,test,test,145,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642,8,['test'],['test']
Testability,Yes I'm using that fix and I do not see errors but I didn't run all the tests.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1465#issuecomment-688179583:72,test,tests,72,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1465#issuecomment-688179583,1,['test'],['tests']
Testability,"Yes you're right. It can take some time, but if you really have no idea what commit is the guilty one, it is the fastest method. If you go with this process, disable the compilation of useless plugins and tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1332413084:205,test,tests,205,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1332413084,1,['test'],['tests']
Testability,"Yes, but I am doing some testing to check everything is worked as expected. I have some scenes using this NBESolver + a custom CG and they are failing, need to check if its the NBESolver or the CG.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2209#issuecomment-874244045:25,test,testing,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2209#issuecomment-874244045,1,['test'],['testing']
Testability,"You are right about the case of 1 iteration. I broke it by starting `i` to 2. Handling the 1 iteration case differently is a bit overkill though. Here is my update (still not tested):; ```cpp; int BatchGUI::mainLoop(); {; if (groot); { ; if (nbIter != -1); { ; msg_info(""BatchGUI"") << ""Computing "" << nbIter << "" iterations."" << msgendl;; }; else; {; msg_info(""BatchGUI"") << ""Computing infinite iterations."" << msgendl;; }; ; sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; msg_info(""BatchGUI"") << ""Processing."" << sofa::helper::AdvancedTimer::end(""Animate"", groot.get()) << msgendl;; // As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());; sofa::simulation::Visitor::ctime_t rtfreq = sofa::helper::system::thread::CTime::getRefTicksPerSec();; sofa::simulation::Visitor::ctime_t tfreq = sofa::helper::system::thread::CTime::getTicksPerSec();; sofa::simulation::Visitor::ctime_t rt = sofa::helper::system::thread::CTime::getRefTime();; sofa::simulation::Visitor::ctime_t t = sofa::helper::system::thread::CTime::getFastTime();; ; signed int i = 1; // one simulation step is animated above ; ; while (i <= nbIter || nbIter == -1); {; if (i != nbIter); {; sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; //As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());; }. if ( i == nbIter || (nbIter == -1 && i%1000 == 0) ); {; t = sofa::helper::system::thread::CTime::getFastTime()-t;; rt = sofa::helper::system::thread::CTime::getRefTime()-rt;. msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)t)/((double)tfreq) << "" s ( "" << (((double)tfreq)*i)/((double)t) << "" FPS)."" << msgendl;; msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)rt)/((double)rtfreq) << "" s ( "" << (((double)rtfr",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378860087:175,test,tested,175,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378860087,1,['test'],['tested']
Testability,"You can see an example of regression test results here: https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-830/11/CI_CONFIG=windows7_vs-2015_amd64,CI_PLUGINS=options,CI_TYPE=release/testReport",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/830#issuecomment-440201586:37,test,test,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/830#issuecomment-440201586,2,['test'],"['test', 'testReport']"
Testability,"[Modeler] :: warning and print cleaned. deprecated function removed; [Modeler] :: Set modeler cmake ON; ___________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2081487375:640,test,test,640,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2081487375,2,['test'],['test']
Testability,[c-i-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4301#issuecomment-1822404641:21,test,tests,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4301#issuecomment-1822404641,1,['test'],['tests']
Testability,[ci-build] (scene tests not needed),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/711#issuecomment-404511905:18,test,tests,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/711#issuecomment-404511905,1,['test'],['tests']
Testability,[ci-build] (testing future CI),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/684#issuecomment-396923972:12,test,testing,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/684#issuecomment-396923972,1,['test'],['testing']
Testability,[ci-build] (testing),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/540#issuecomment-353380059:12,test,testing,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/540#issuecomment-353380059,1,['test'],['testing']
Testability,[ci-build] [with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/218#issuecomment-338577782:23,test,tests,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-338577782,9,['test'],['tests']
Testability,[ci-build] [with-scene-tests] [with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/756#issuecomment-447792966:23,test,tests,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/756#issuecomment-447792966,20,['test'],['tests']
Testability,[ci-build] [with-scene-tests] 😉,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/467#issuecomment-335848261:23,test,tests,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/467#issuecomment-335848261,1,['test'],['tests']
Testability,[ci-build]. All build & tests are passing... so let's merge it .,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/367#issuecomment-326678771:24,test,tests,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/367#issuecomment-326678771,1,['test'],['tests']
Testability,[ci-build]. just testing if the problem is due to the lib. ; Will rebase if not.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/719#issuecomment-405420789:17,test,testing,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/719#issuecomment-405420789,1,['test'],['testing']
Testability,[ci-build][[with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/853#issuecomment-446007608:23,test,tests,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/853#issuecomment-446007608,2,['test'],['tests']
Testability,[ci-build][ci-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1730#issuecomment-767429850:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1730#issuecomment-767429850,2,['test'],['tests']
Testability,[ci-build][ci-with-scene-tests][ci-with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1706#issuecomment-759269268:25,test,tests,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1706#issuecomment-759269268,2,['test'],['tests']
Testability,[ci-build][force-full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1160#issuecomment-541583797:38,test,tests,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1160#issuecomment-541583797,151,['test'],['tests']
Testability,[ci-build][force-full-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1167#issuecomment-539904483:45,test,tests,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1167#issuecomment-539904483,2,['test'],['tests']
Testability,[ci-build][full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1432518934:32,test,tests,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1432518934,7,['test'],['tests']
Testability,[ci-build][with-all-test],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1375#issuecomment-626130173:20,test,test,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1375#issuecomment-626130173,1,['test'],['test']
Testability,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/534#issuecomment-692074894:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-692074894,1793,['test'],['tests']
Testability,[ci-build][with-all-tests] (check for MacOS),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3959#issuecomment-1613074434:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3959#issuecomment-1613074434,1,['test'],['tests']
Testability,[ci-build][with-all-tests] . (testing the reactivation of the regression tests on windows),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4486#issuecomment-1941501863:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4486#issuecomment-1941501863,3,['test'],"['testing', 'tests']"
Testability,[ci-build][with-all-tests] just to be sure :angel:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3227#issuecomment-1219270111:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3227#issuecomment-1219270111,1,['test'],['tests']
Testability,[ci-build][with-all-tests] to check further to #3672,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3665#issuecomment-1445357212:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3665#issuecomment-1445357212,1,['test'],['tests']
Testability,"[ci-build][with-all-tests]. > Don't you think that moving `errF` and `tempF` out of the loop is enough? I would test to only resize them in the loop. The underlying memory allocation should not happen a lot. My suggestion is because I think it is simpler to understand compared to the buffer implementation. I will try that 👍. > ; > In any case, I think the condition `if (nb > bufferSize)` is not necessary. Thats what I was thinking but not sure 🧐",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4195#issuecomment-1733123460:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4195#issuecomment-1733123460,2,['test'],"['test', 'tests']"
Testability,[ci-build][with-all-tests]. I do not understand the issue with the tests failing ...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2098#issuecomment-851027994:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2098#issuecomment-851027994,2,['test'],['tests']
Testability,[ci-build][with-all-tests]. let's wait the CI and then merge,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2901#issuecomment-1131311858:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2901#issuecomment-1131311858,1,['test'],['tests']
Testability,[ci-build][with-all-tests]. yes all green :muscle: :green_circle:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3891#issuecomment-1563454307:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3891#issuecomment-1563454307,1,['test'],['tests']
Testability,"[ci-build][with-all-tests]; Fine to me. Let's see the CI tests, then ready.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1404#issuecomment-640468518:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1404#issuecomment-640468518,2,['test'],['tests']
Testability,[ci-build][with-all-tests]; Good night and work well CI :crescent_moon:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1883#issuecomment-789239755:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1883#issuecomment-789239755,1,['test'],['tests']
Testability,"[ci-build][with-all-tests]; I am pretty sure Erik meant a c++ alias, isn't it @epernod ? Aliases for scenes is already done; Do you have an example of how to proceed?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1034#issuecomment-491609275:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1034#issuecomment-491609275,1,['test'],['tests']
Testability,[ci-build][with-all-tests]; Then ready if it passes,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1377#issuecomment-627940072:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1377#issuecomment-627940072,1,['test'],['tests']
Testability,[ci-build][with-all-tests]; To test your scene 😗,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2092#issuecomment-842927758:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2092#issuecomment-842927758,2,['test'],"['test', 'tests']"
Testability,[ci-build][with-all-tests][force-full-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/534#issuecomment-673316535:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-673316535,187,['test'],['tests']
Testability,[ci-build][with-all-tests][force-full-build] to check further to #3672,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3668#issuecomment-1445357324:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3668#issuecomment-1445357324,1,['test'],['tests']
Testability,[ci-build][with-all-tests][force-full-build] to check further to https://github.com/sofa-framework/sofa/pull/3672,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3664#issuecomment-1445357553:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3664#issuecomment-1445357553,3,['test'],['tests']
Testability,[ci-build][with-all-tests][generate-binaries],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2875#issuecomment-1115035060:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2875#issuecomment-1115035060,2,['test'],['tests']
Testability,[ci-build][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1060#issuecomment-498606513:27,test,tests,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1060#issuecomment-498606513,1,['test'],['tests']
Testability,[ci-build][with-regression-tests] :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/756#issuecomment-442401931:27,test,tests,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/756#issuecomment-442401931,1,['test'],['tests']
Testability,[ci-build][with-regression-tests] [with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/949#issuecomment-467602254:27,test,tests,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/949#issuecomment-467602254,2,['test'],['tests']
Testability,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/838#issuecomment-442785687:27,test,tests,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/838#issuecomment-442785687,44,['test'],['tests']
Testability,[ci-build][with-scene-test][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1490#issuecomment-700493158:22,test,test,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1490#issuecomment-700493158,2,['test'],"['test', 'tests']"
Testability,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/243#issuecomment-341650499:22,test,tests,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-341650499,294,['test'],['tests']
Testability,[ci-build][with-scene-tests] (please CI don't die on me),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/554#issuecomment-359381125:22,test,tests,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/554#issuecomment-359381125,1,['test'],['tests']
Testability,[ci-build][with-scene-tests] ; [with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1704#issuecomment-759269625:22,test,tests,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1704#issuecomment-759269625,2,['test'],['tests']
Testability,[ci-build][with-scene-tests] [with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1269#issuecomment-604700221:22,test,tests,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1269#issuecomment-604700221,2,['test'],['tests']
Testability,[ci-build][with-scene-tests] do you really work ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/540#issuecomment-353569482:22,test,tests,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/540#issuecomment-353569482,1,['test'],['tests']
Testability,"[ci-build][with-scene-tests]. As discussed, I removed the useless parentheses! Can be merged after the build passes (and it will !)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/584#issuecomment-364923879:22,test,tests,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/584#issuecomment-364923879,1,['test'],['tests']
Testability,[ci-build][with-scene-tests]; ; Comme ça.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/527#issuecomment-354966914:22,test,tests,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/527#issuecomment-354966914,1,['test'],['tests']
Testability,[ci-build][with-scene-tests]; Regression needs to be updated. . PR to update Regression is: https://github.com/sofa-framework/regression/pull/6,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1794#issuecomment-780168810:22,test,tests,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1794#issuecomment-780168810,1,['test'],['tests']
Testability,[ci-build][with-scene-tests][ci-reformat],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/527#issuecomment-355926106:22,test,tests,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/527#issuecomment-355926106,2,['test'],['tests']
Testability,[ci-build][with-scene-tests][force-full-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1282981929:22,test,tests,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1282981929,8,['test'],['tests']
Testability,"[ci-build][with-scene-tests][force-full-build]. The result of the test show that the scene `advanced_timer.py` is not taken from the PR https://github.com/sofa-framework/SofaPython3/pull/309, but from master.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1282349471:22,test,tests,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1282349471,2,['test'],"['test', 'tests']"
Testability,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/218#issuecomment-453814208:22,test,tests,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-453814208,116,['test'],['tests']
Testability,[ci-build][with-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3934#issuecomment-1594841162:16,test,tests,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3934#issuecomment-1594841162,1,['test'],['tests']
Testability,[ci-build][with-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1744#issuecomment-799487090:16,test,tests,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1744#issuecomment-799487090,6,['test'],['tests']
Testability,[ci-test][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4732#issuecomment-2112605654:4,test,test,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4732#issuecomment-2112605654,2,['test'],"['test', 'tests']"
Testability,[ci]-build][with-scene-tests][with-regressions],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1902#issuecomment-794637886:23,test,tests,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1902#issuecomment-794637886,1,['test'],['tests']
Testability,[force-full-build][ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3329#issuecomment-1299807808:38,test,tests,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3329#issuecomment-1299807808,4,['test'],['tests']
Testability,[with-regression-tests] [with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1149#issuecomment-533241683:17,test,tests,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1149#issuecomment-533241683,2,['test'],['tests']
Testability,[with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1064#issuecomment-575320727:12,test,tests,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1064#issuecomment-575320727,1,['test'],['tests']
Testability,"_bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 20",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3335,test,tests,3335,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['tests']
Testability,_release/build/bin/Components/Components.py ; ModuleNotFoundError: No module named 'Sofa.Components'. At:; Components.py(4): <module>; <frozen importlib._bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Globa,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3182,test,tests,3182,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['tests']
Testability,"`; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user application). And one with an error:; ```cpp; if( inv.info() != Eigen::Success ){; - std::cerr << SOFA_CLASS_METHOD<<""non invertible block Schur."" << std::endl;; - std::cerr << schur << std::endl;; + msg_error(SOFA_CLASS_METHOD) << ""non invertible block Schur."" << msgendl; + << schur ;; ```; - Shorter to write (using msg_error_when() it would have to be even shorter); - Consistant way to present message to the user; - All the text is considered is a single message with a single call to msg_* ; - Is functionnaly equivalent to the old code ; - Uou can write tests that check that the message; is emitted (ExpectMessage/MessageAsTestFailure) so it become possible to test how components behave when they are ""mis-used"".... while with the old code it was just 'not done' at all.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:2212,log,logger,2212,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960,3,"['log', 'test']","['logger', 'test', 'tests']"
Testability,```; [----------] 2 tests from TetrahedronFEMForceField_stepTest/0; [ OK ] TetrahedronFEMForceField_stepTest/0.extension (2 ms); [ OK ] TetrahedronFEMForceField_stepTest/0.checkGracefullHandlingWhenTopologyIsMissing (1 ms); [----------] 2 tests from TetrahedronFEMForceField_stepTest/0 (3 ms total); ```; (CI did execute the 2 tests),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3982#issuecomment-1619621078:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3982#issuecomment-1619621078,3,['test'],['tests']
Testability,`examples/Benchmark/Performance/benchmark_cubes.scn` was ignored by CI due to a script issue. I'm on it :muscle:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2646#issuecomment-1027693111:10,Benchmark,Benchmark,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2646#issuecomment-1027693111,1,['Benchmark'],['Benchmark']
Testability,"a clear(er) method BaseContext::getActiveMeshTopology() that you can call from any context and will give you the topology that is relevant for this context, i.e. either the topology at this exact node, or from a parent node but only if there is no mapping in between (or if there are only mappings whose sameTopology() method returns true). Using this method, state->l_topology is initialized (and you can inspect its result in the GUI), and if it is not NULL it will be used by all computations for the state without extra hidden checks. Now back to this bug, the last issue here was that the tested mapping (TetrahedronVolumeMapping) was not preserving the topology, but its output state was somehow linked to its input topology. The solution is not to go back to the old (broken) behavior, but instead to understand what is the actual root cause here. Theoretically, if the logic described above was behaving correctly, the output state would not be able to see the input topology because of the use of getActiveMeshTopology() and the fact that the mapping sameTopology() method would return false (thanks to its ""safe"" default implementation). The reason why this incorrect link was being created was because the mapping was created in the wrong Node. Normally, Sofa requires mappings to be in the same node as its output state. This is important in order to know for example which mapping is associated to which state (at least prior to the introduction of reflective Links, and still required because Mapping->State links are only one-way). This is used for example by visitors to know if a state is to be considered as real DOFs (because of the absence of a mapping in its node). But the MappingTest initialization code was not respecting this requirement, instead putting the mapping in the root node along with the input state (and the topology). Only the output state was in the child node. In this case, getActiveMeshTopology() from the output state does not see any mapping in the child, a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201:1997,log,logic,1997,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201,1,['log'],['logic']
Testability,"aPython3.so; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Components/Components.py ; ModuleNotFoundError: No module named 'Sofa.Components'. At:; Components.py(4): <module>; <frozen importlib._bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:2850,test,test,2850,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['test']
Testability,add non-regression tests?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1420#issuecomment-646511574:19,test,tests,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1420#issuecomment-646511574,1,['test'],['tests']
Testability,adding some recorded mouse non-regression tests? 😈,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1011#issuecomment-487960421:42,test,tests,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1011#issuecomment-487960421,1,['test'],['tests']
Testability,"alright, that should fix the failing test. Although, the test doesn't reflect very well the behavior of the component. the SimpleDataEngine *must* exclusively be used in cases where the process performed the engine has to be applied no matter which datafield is set to dirty.; Currently, the engine would even be called if NO data is set to dirty, which is also the case in the core::DataEngine if there's no check performed on the DataTracker. I believe this is a mistake. I think that doUpdate() should be called iff at least 1 data field is dirty.; What do you think?. concretely, it means that in DataEngine_test.cpp, line 151 would assert FALSE",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/760#issuecomment-424285945:37,test,test,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/760#issuecomment-424285945,3,"['assert', 'test']","['assert', 'test']"
Testability,"and about the process, I think this PR is a very good test case for everyone to give it a try.; Regarding the feedback we should be able to package it together as a public plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-400260057:54,test,test,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-400260057,1,['test'],['test']
Testability,and did you try with out-of-tree compilation with SofaPython3 for example ? (as the CI does not test this mode for the moment),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1913#issuecomment-796881062:96,test,test,96,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1913#issuecomment-796881062,1,['test'],['test']
Testability,"and if I was picky, I would say that a small test is missing !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/334#issuecomment-317521296:45,test,test,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/334#issuecomment-317521296,1,['test'],['test']
Testability,as this component is in fact a kind of map. The swap might not be needed... but without diving back into this I'm not 100% sure...; normally there is enough regression tests on topology modification to detect if removing the swap will break the mechanism.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4738#issuecomment-2114756090:168,test,tests,168,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4738#issuecomment-2114756090,1,['test'],['tests']
Testability,"ate was somehow linked to its input topology. The solution is not to go back to the old (broken) behavior, but instead to understand what is the actual root cause here. Theoretically, if the logic described above was behaving correctly, the output state would not be able to see the input topology because of the use of getActiveMeshTopology() and the fact that the mapping sameTopology() method would return false (thanks to its ""safe"" default implementation). The reason why this incorrect link was being created was because the mapping was created in the wrong Node. Normally, Sofa requires mappings to be in the same node as its output state. This is important in order to know for example which mapping is associated to which state (at least prior to the introduction of reflective Links, and still required because Mapping->State links are only one-way). This is used for example by visitors to know if a state is to be considered as real DOFs (because of the absence of a mapping in its node). But the MappingTest initialization code was not respecting this requirement, instead putting the mapping in the root node along with the input state (and the topology). Only the output state was in the child node. In this case, getActiveMeshTopology() from the output state does not see any mapping in the child, allowing to go to the parent to find a topology. It assumes that the Mapping in the root node is there to write to the state/topology of the root node, so it is not considered as something that would block the topology to remain active. Hence the wrong link being created, and the bug. The fix (beaaaf5) is a simple one-line change in MappingTest, creating the mapping in childNode instead of root, which should have been the case to respect Sofa's conventions (but which are unfortunately not checked/asserted by anyone). Hopefully all is well now. It's difficult to know for sure because not-disabled tests are still failing on my computer (but they are also failing on the master...)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201:3622,assert,asserted,3622,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201,2,"['assert', 'test']","['asserted', 'tests']"
Testability,"bSofaSimulationCore.so(sofa::simulation::DefaultAnimationLoop::step(sofa::core::ExecParams const*, double)+0x124) [0x7f6588263ed4]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::Simulation::animate(sofa::simulation::Node*, double)+0x54) [0x7f65882c9c44]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(sofa::Python_scene_test::run(sofa::Python_test_data const&)+0x2e1) [0x7f658ebb3791]; -> ../builds/pr/all/bin/Compliant_test(sofa::Python_scene_test_sofa_python_scene_tests_Test::TestBody()+0x2e) [0x54f76e]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*)+0x33) [0x7f658ebd7223]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::Test::Run()+0xb7) [0x7f658ebca917]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestInfo::Run()+0x9e) [0x7f658ebca9be]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestCase::Run()+0xa5) [0x7f658ebcaac5]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::internal::UnitTestImpl::RunAllTests()+0x248) [0x7f658ebcd198]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::UnitTest::Run()+0x54) [0x7f658ebcd454]; -> ../builds/pr/all/bin/Compliant_test(main+0xd4) [0x4aeb84]; -> /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf5) [0x7f6585034f45]; -> ../builds/pr/all/bin/Compliant_test() [0x4aec6f]; bash: line 1: 11528 Terminated ../builds/pr/all/bin/Compliant_test --gtest_output=xml:../builds/pr/all/tests/Compliant_test/report.xml 2>&1; /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/scripts/ci/tests.sh: error: Compliant_t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:7210,test,testing,7210,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320,2,"['Test', 'test']","['Test', 'testing']"
Testability,"back from a little ""into the wild"" break. Will finish that in the next days. Edit: Test added. Not perfect but more will come as I add new methods in sceneCreator.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/133#issuecomment-276923603:83,Test,Test,83,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-276923603,1,['Test'],['Test']
Testability,"backtrace:; ```; 	[Inline Frame] Sofa.Helper.dll!std::_Check_C_return(int _Res) Line 131	C++; 	[Inline Frame] Sofa.Helper.dll!std::_Mutex_base::lock() Line 50	C++; 	[Inline Frame] Sofa.Helper.dll!std::lock_guard<std::mutex>::{ctor}(std::mutex & _Mtx) Line 427	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::process(sofa::helper::logging::Message & m) Line 151	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::LoggerStream::~LoggerStream() Line 198	C++; 	Sofa.GUI.Qt.dll!redirectQtMessages(QtMsgType type, const QMessageLogContext & context, const QString & msg) Line 40	C++; 	[External Code]	; 	Sofa.GUI.Qt.dll!sofa::gui::qt::setMessageIconFrom(QTreeWidgetItem * item, sofa::core::objectmodel::Base * object) Line 325	C++; 	Sofa.GUI.Qt.dll!sofa::gui::qt::ObjectStateListener::notifyEndEdit() Line 350	C++; 	Sofa.Core.dll!sofa::core::objectmodel::DDGNode::notifyEndEdit() Line 83	C++; 	[Inline Frame] Sofa.Helper.dll!sofa::helper::logging::MessageDispatcherImpl::process(sofa::helper::logging::Message &) Line 119	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::process(sofa::helper::logging::Message & m) Line 152	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::LoggerStream::~LoggerStream() Line 198	C++; >	Sofa.Core.dll!sofa::core::behavior::BaseForceField::buildStiffnessMatrix(sofa::core::behavior::StiffnessMatrix * matrix) Line 62	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsystem::AssemblingMatrixSystem<sofa::linearalgebra::BTDMatrix<6,double>,sofa::linearalgebra::BlockVector<6,double>>::contribute<0>(const sofa::core::MechanicalParams * mparams) Line 85	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsystem::AssemblingMatrixSystem<sofa::linearalgebra::BTDMatrix<6,double>,sofa::linearalgebra::BlockVector<6,double>>::assembleSystem(const sofa::core::MechanicalParams * mparams) Line 123	C++; 	Sofa.Core.dll!sofa::core::behavior::BaseMatrixLinearSystem::buildSystemMatrix(const s",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1436394850:1435,log,logging,1435,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1436394850,2,['log'],['logging']
Testability,"backup discussion for logs:. here is the call stack of sphereLoader:; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345:22,log,logs,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345,2,['log'],"['log', 'logs']"
Testability,"benchmark.; > ; > My guest would be that solving one big system (the merge of both objects) is slower than solving to smaller system.; > ; > However, solving two system independently should, I think, produce incorrect results as; > ; > 1. You are applying the interactions (for example, contact forces) at different solving states. For example, the first object is solved, its node positions are updated to the step t+1. Collisions are then computed. But the state of the second object is still at the time step t. Oscillation will therefore probably happen and the convergence will be delayed.; > ; > 2. In addition, the solution state with both objects merged under the same system takes into account the interaction between the two objects. For example, when both objects are merged into a same system, you can create entries inside the system matrix to create a relationship between a node in the first object and a node in the second object. This is not possible when the two objects are separated.; > ; > ; > **TLDR**: Solving two objects independently is faster than solving one big system containing both objects. However it will take longer to converge to a steady solution (in number of steps), and even probably converge to an incorrect solution. Thank you for this explanation. It makes more sense. If I understood correctly, the group manager would help the performances compared to a single system. Here, we compare to two systems (one per cube). I'll add a third scene in this benchmark with a single system, to be more rigorous. I expect the same result from ""single system"" and ""two systems + group manager"". I expect better performances only in case the two cubes are not in contact, am I right?. Can we say that the best practice would be to start the design of a simulation scene with a single system, without group manager? And if performances are poor, it can be improved with a group manager, knowing its drawbacks (such as hiding a selection of solver properties to the user).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2089#issuecomment-842964385:1527,benchmark,benchmark,1527,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2089#issuecomment-842964385,1,['benchmark'],['benchmark']
Testability,btw why have you redundant values? This is not logical for an indice map.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4738#issuecomment-2114760464:47,log,logical,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4738#issuecomment-2114760464,1,['log'],['logical']
Testability,"btw, maybe one VM of each OS should do a make install to test the cpack config.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/194#issuecomment-284471982:57,test,test,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/194#issuecomment-284471982,1,['test'],['test']
Testability,"build is good, tests are good, gentle bump :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/368#issuecomment-325585225:15,test,tests,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/368#issuecomment-325585225,1,['test'],['tests']
Testability,build/tests seem good now,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/347#issuecomment-325585516:6,test,tests,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/347#issuecomment-325585516,1,['test'],['tests']
Testability,"can you point the test that is not wworking, it is impossible to find it in jenkins menu, even more with a low bandwidth",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4194#issuecomment-1967652226:18,test,test,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4194#issuecomment-1967652226,1,['test'],['test']
Testability,"changes taken into account, only the test to go!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-655631523:37,test,test,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-655631523,1,['test'],['test']
Testability,compilation fails @epernod but further to #2868 it should pass now. [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2869#issuecomment-1106062059:88,test,tests,88,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2869#issuecomment-1106062059,1,['test'],['tests']
Testability,"considered. This give good results and is really easy to do. More concretely in your PR you could: ; - test each python function with different parameters. At least one with a valid value, 1 with out of bound values, 1 test with extrema values (min & max) and if there is multiple parameter...you either have to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They don't have the timer prefix.. so sound as if they are more general than timing function. ; - in Sofa_timerSetEnabled(PyObject* /*self*/, PyObject *args) you are passing an int argument to get a bool...does it means that timeSetEnable(..., True) will not work ? ; If this is the case the following code is probably better as it allow it:; ```cpp; PyObject* o;; if(!PyArg_ParseTuple(args, ""sO"", &id, &o)){...}; advancedTimer::setEnabled(id, PyObject_IsTrue(o));; ```; - in function taking a string description it would be nicer to warn users or the calling code when an invalid name is provided so that he can locate & fix his scene/sc",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:1614,test,test,1614,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977,1,['test'],['test']
Testability,could you put the names of the falling tests in the description for the records.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2017#issuecomment-822276662:39,test,tests,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2017#issuecomment-822276662,1,['test'],['tests']
Testability,cro](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-multiple-statement-macro.html) | [hicpp-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-no-malloc.html) |; | [bugprone-string-constructor](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-string-constructor.html) | [hicpp-noexcept-move](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-noexcept-move.html) |; | [bugprone-suspicious-memset-usage](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-suspicious-memset-usage.html) | [hicpp-signed-bitwise](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-signed-bitwise.html) |; | [bugprone-undefined-memory-manipulation](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-undefined-memory-manipulation.html) | [hicpp-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-special-member-functions.html) |; | [bugprone-use-after-move](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-use-after-move.html) | [hicpp-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-static-assert.html) |; | [bugprone-virtual-near-miss](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-virtual-near-miss.html) | [hicpp-undelegated-constructor](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-undelegated-constructor.html) |; | [cert-dcl03-c](https://clang.llvm.org/extra/clang-tidy/checks/cert-dcl03-c.html) | [hicpp-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-use-auto.html) |; | [cert-dcl21-cpp](https://clang.llvm.org/extra/clang-tidy/checks/cert-dcl21-cpp.html) | [hicpp-use-emplace](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-use-emplace.html) |; | [cert-dcl50-cpp](https://clang.llvm.org/extra/clang-tidy/checks/cert-dcl50-cpp.html) | [hicpp-use-equals-default](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-use-equals-default.html) |; | [cert-dcl54-cpp](https://clang.llvm.org/extra/clang-tidy/checks/cert-dcl54-cpp.html) | [hicpp-use-equals-delete](https://clang.llv,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:4154,assert,assert,4154,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,1,['assert'],['assert']
Testability,"ctor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParent",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3722,test,tests,3722,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['tests']
Testability,"defrost-macos1011-0 (Defrost machine): AppleClang 8.0.0.8000042; sofa-ci-dev-macos109-0 (VM): AppleClang 6.0.0.6000051. The machine on which a build was done is printed at the beginning of the log.; Example: ""Building remotely on sofa-ci-dev-macos109-0"" in https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-792/CI_CONFIG=mac_clang-3.5,CI_PLUGINS=options,CI_TYPE=release/1/console",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/792#issuecomment-428505978:193,log,log,193,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/792#issuecomment-428505978,1,['log'],['log']
Testability,do you know why is this fixing the problem @fredroy ?. Anyway I tested and it works :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4044#issuecomment-1636735864:64,test,tested,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4044#issuecomment-1636735864,1,['test'],['tested']
Testability,"e to point out specifically the most problematic points in which you think that the remplacement will not do the work so that I can propose solutions to be closer to the ""semantic you want"". . I looked into the Flexible/Compliant and it seems to me that only a dozen of replacement (out of hundreds) are not equivalent to the old code. . If you take time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:1428,log,logger,1428,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960,1,['log'],['logger']
Testability,"e"". This means that all the execution path are at least executed once. This is very hard to achieve an so a more manageable target is to be close to ""function coverage""+""branch coverage"" in which each line of the function is at least executed once. I found that in sofa a succesfull strategy is to make tests with ""Parameter value coverage"" in which in a method taking parameters, all the common values for such parameters be considered. This give good results and is really easy to do. More concretely in your PR you could: ; - test each python function with different parameters. At least one with a valid value, 1 with out of bound values, 1 test with extrema values (min & max) and if there is multiple parameter...you either have to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They don't have the timer prefix.. so sound as if they are more general than timing function. ; - in Sofa_timerSetEnabled(PyObject* /*self*/, PyObject *args) you are passing an int argument to get a bool...does i",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:1059,test,tests,1059,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977,1,['test'],['tests']
Testability,"en::Dynamic ? 1 : 0); ; ; /// 1 if the constructor is equivalent to setting memory to 0; static constexpr auto ZeroConstructor = (std::is_base_of_v<Eigen::SparseMatrixBase<Derived>, Derived> ? 1 : 0);; ; /// 1 if copying the data can be done with a memcpy; static constexpr auto SimpleCopy = 0; ; ; /// 1 if the layout in memory is simply N values of the same base type; static constexpr auto SimpleLayout = 0;; ; /// 1 if this type uses integer values; static constexpr auto Integer = std::is_integral_v<Derived::Scalar>;; ; /// 1 if this type uses scalar values; static constexpr auto Scalar = std::is_floating_point_v<Derived::Scalar>;; ; /// 1 if this type uses text values; static constexpr auto Text = 0;; ; /// 1 if this type uses copy-on-write -> it seems to be THE important; static constexpr auto CopyOnWrite = 0;; ; /// 1 if this type is a container; static constexpr auto Container = 1;; ; /// largest known fixed size for this type, as returned by size(); static constexpr auto Size = (Derived::ColsAtCompileTime == Eigen::Dynamic ? 0 : Derived::ColsAtCompileTime);; ; /// Number of elements in the container, or the 2nd dimension for arrays; static size_t size() { ; return (Derived::ColsAtCompileTime == Eigen::Dynamic ? 0 : Derived::ColsAtCompileTime); ; }; ; /// Size of the smalest single element in the container; static size_t byteSize() { ; return sizeof(Derived::Scalar); ; }; ; /// Total number of elements; static size_t size(const DataType & data) {; return data.rows();; }; ; static bool setSize(DataType & data, size_t size) { ; if constexpr (Derived::ColsAtCompileTime == Eigen::Dynamic) {; return data.resize(size, data.cols);; } else {; return false; ; }; }; ; // (...); }; ```. And test it with a couple of matrix types, for example:; ```c++; data<Eigen::Matrix<double, Eigen::Dynamic, 3>> data_1;; data<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>> data_2;; data<Eigen::Matrix<double, 8, 3>> data_3;; data<Eigen::Map<Eigen::Matrix<double, 8, 3>>> data_4;; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-885687022:2132,test,test,2132,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-885687022,1,['test'],['test']
Testability,"es/SofaOpenglVisual/src -Iinclude/SofaOpenglVisual -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaBaseVisual/src -Iinclude/SofaBaseVisual -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaBaseTopology/src -Iinclude/SofaBaseTopology -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaSimulationCommon/.. -Iinclude/SofaSimulation -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaCore/src -Iinclude/SofaFramework -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../SofaSimulationCore/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../SofaDefaultType/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../SofaCore/src -Iinclude/GTest -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaDefaultType/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaSimulationCore/src -isystem /home/vozenne/Dev/sofa/src/SofaKernel/extlibs/json -isystem /home/vozenne/Dev/sofa/src/extlibs/gtest/include -isystem /usr/include/eigen3 -Wall -W -Wno-padded -O3 -DNDEBUG -fPIC -DFRAMEWORK_TEST_RESOURCES_DIR=\""/home/vozenne/Dev/sofa/src/SofaKernel/SofaFramework/resources/tests\"" -pthread -DGTEST_LINKED_AS_SHARED_LIBRARY=1 -std=gnu++17 -MD -MT modules/SofaOpenglVisual/CMakeFiles/SofaOpenglVisual.dir/src/SofaOpenglVisual/OglShaderVisualModel.cpp.o -MF modules/SofaOpenglVisual/CMakeFiles/SofaOpenglVisual.dir/src/SofaOpenglVisual/OglShaderVisualModel.cpp.o.d -o modules/SofaOpenglVisual/CMakeFiles/SofaOpenglVisual.dir/src/SofaOpenglVisual/OglShaderVisualModel.cpp.o -c /home/vozenne/Dev/sofa/src/modules/SofaOpenglVisual/src/SofaOpenglVisual/OglShaderVisualModel.cpp; In file included from /home/vozenne/Dev/sofa/src/modules/SofaOpenglVisual/src/SofaOpenglVisual/OglShaderVisualModel.cpp:30:; /home/vozenne/Dev/sofa/src/modules/SofaOpenglVisual/src/SofaOpenglVisual/OglAttribute.inl:199:9: error: use of undeclared identifier 'glVertexAttribLPointer'; did you mean '__glewVertexAttribIPointer'?; glVertexAtt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786521312:2447,test,tests,2447,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786521312,1,['test'],['tests']
Testability,"ese tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is still nice to have a record of the regressions that occur during the overall development, because you can then document better when you actually introduced changes in the code that are significant, which certainly is hard to track by unit tests only, unless you have a coverage of 100%, which is a target that in my opinion is a waste of energy to aim at, provided you have some functional tests also.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1689,test,tests,1689,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243,4,['test'],['tests']
Testability,"example scene, log and backtrace, please :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2392#issuecomment-939545364:15,log,log,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2392#issuecomment-939545364,1,['log'],['log']
Testability,"f are just transitional of course):; ```cpp; #include <SofaTest/Sofa_test.h>; using sofa::Sofa_test;. #include <SofaTest/TestMessageHandler.h>; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure with line number close to "" << __LINE__ ;; }. void complexTestBehavior(); {; {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should generate a failure"" ;; //msg_error(""HERE"") << ""This should generate a test failure"" ;; {; EXPECT_MSG_NOEMIT_V2(Error) ;; msg_error(""HERE"") << ""This should generate a test failure"" ;; }; }. {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:1492,TEST,TEST,1492,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643,1,['TEST'],['TEST']
Testability,"g-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3794,test,tests,3794,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['tests']
Testability,"good, I like the direction it takes . I think if we (you ?-) add additionnal sXyz component stream (like at least sdebug, or a new component API to match the existing msg_Xyz API), we could then have the printLog data deprecated and replaced by msgLevel and start the transition. . The removal of the per component ""message buffer"" has to be done in // in the gui and can be viewed as a separate problem. This would be the responsibility of the GUI to create those per component buffers . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Mercredi 1 Février 2017 20:34:25; > Objet: Re: [sofa-framework/sofa] [SofaKernel] Add; > PerComponentLoggingMessageHandler to keep and history of messages. (#106). > @matthieu-nesme. > I looked back to the PR and I will remove the three Data field because:. > * controlling the queue size view a Data is not crucial. I will replace it; > with an attribute and get/set or an environment variable.; > * the msgLevel is un-used and was there to rise discussion on whether or not; > controlling the level of messages emitted by an object make sense (eg when; > debugging).; > * the logLevel'one is un-used yet but should one day override the behavior of; > the mis-used f_printLog. > Thanks again to pointing that. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276931767:1311,log,logLevel,1311,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276931767,1,['log'],['logLevel']
Testability,"great so conclusion, it has been tested (as least the compilation part); thanks @guparan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1301#issuecomment-607207302:33,test,tested,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1301#issuecomment-607207302,1,['test'],['tested']
Testability,"hello @Ant0nin , are you speaking about the option: ; SOFACUDA_DOUBLE; or; SOFA_GPU_CUDA_DOUBLE_PRECISE. my version with SOFACUDA_DOUBLE activated compile on windows 10 with recent cudaToolkit. ; Maybe can you put here the error log.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484086528:229,log,log,229,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484086528,1,['log'],['log']
Testability,"hello @guparan :raised_hands: ; we do need to backport this PR, it would be a good test for me doing it. Would you be open to share the steps to-do (branch backport, tag to be added, etc.)?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3229#issuecomment-1225376787:83,test,test,83,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3229#issuecomment-1225376787,1,['test'],['test']
Testability,hey @alxbilger top :+1: :+1: ; could you add the associated regression tests please?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3756#issuecomment-1489792756:71,test,tests,71,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3756#issuecomment-1489792756,1,['test'],['tests']
Testability,hey @damienmarchal ; I just tried with the macro at the top of the cpp file and I still get the error (for static function):; `sofa/helper/logging/Messaging.h:177:24: note: expanded from macro 'msg_error'; #define msg_error(...) MSGERROR_CHOOSER(__VA_ARGS__)(__VA_ARGS__); `; Any idea why ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/503#issuecomment-344637137:139,log,logging,139,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/503#issuecomment-344637137,1,['log'],['logging']
Testability,hey @damienmarchal is it normal that the test _testCreateObjectDataConversionWarning_ is failing since your last commit ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/304#issuecomment-314772234:41,test,test,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-314772234,1,['test'],['test']
Testability,"hi @damienmarchal ,; I've added a small test (loading a binary vtk file with point and cell attributes). Is that enough ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/72#issuecomment-265748799:40,test,test,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/72#issuecomment-265748799,1,['test'],['test']
Testability,"hi @olivier-goury my bad, the regression tests have nothing to do with your PR! timeout are strange but same, not related to the PR ;) sorry about that !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/856#issuecomment-448204968:41,test,tests,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/856#issuecomment-448204968,1,['test'],['tests']
Testability,https://github.com/sofa-framework/sofa/blob/dccb9849ed4b08a305086e02131ce7c25c79eff0/Sofa/Component/Topology/Utility/tests/TopologyChecker_test.cpp#L1202-L1205,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3151#issuecomment-1232706994:117,test,tests,117,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3151#issuecomment-1232706994,1,['test'],['tests']
Testability,"https://github.com/sofa-framework/sofa/pull/3512 is already merged.; But you could try to add your changes on https://github.com/sofa-framework/sofa/pull/3501. According to my unit test, a simple; ```cpp; if (n == 0); {; return true;; }; ```; makes the job",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3499#issuecomment-1337325939:181,test,test,181,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3499#issuecomment-1337325939,1,['test'],['test']
Testability,https://stackoverflow.com/questions/7208070/googletest-how-to-skip-a-test,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2249#issuecomment-884026144:69,test,test,69,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2249#issuecomment-884026144,1,['test'],['test']
Testability,"icitSolverDynamicTest_medium_dt_0/); [UnitTests.SofaGeneralExplicitOdeSolver_test/RungeKutta4ExplicitSolverDynamic_test.rungeKutta4ExplicitSolverDynamicTest_small_dt/0](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralExplicitOdeSolver_test_RungeKutta4ExplicitSolverDynamic_test/rungeKutta4ExplicitSolverDynamicTest_small_dt_0/); [UnitTests.SofaGeneralImplicitOdeSolver_test/VariationalSymplecticExplicitSolverDynamic_test.variationalSymplecticExplicitSolverDynamicTest_small_dt_without_damping/0](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralImplicitOdeSolver_test_VariationalSymplecticExplicitSolverDynamic_test/variationalSymplecticExplicitSolverDynamicTest_small_dt_without_damping_0/); [UnitTests.SofaGeneralImplicitOdeSolver_test/VariationalSymplecticExplicitSolverDynamic_test.variationalSymplecticExplicitSolverDynamicTest_medium_dt_with_damping/0](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralImplicitOdeSolver_test_VariationalSymplecticExplicitSolverDynamic_test/variationalSymplecticExplicitSolverDynamicTest_medium_dt_with_damping_0/); [UnitTests.SofaGeneralImplicitOdeSolver_test/VariationalSymplecticExplicitSolverDynamic_test.variationalSymplecticExplicitSolverDynamicTest_high_dt_with_damping/0](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralImplicitOdeSolver_test_VariationalSymplecticExplicitSolverDynamic_test/variationalSymplecticExplicitSolverDynamicTest_high_dt_with_damping_0/); ```. for a reallllly slight variation in the result (6.106226635438361e-16 diff); actually the unit tests checker is really tight 😛",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2652#issuecomment-1028969769:2092,test,testReport,2092,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2652#issuecomment-1028969769,3,['test'],"['testReport', 'tests']"
Testability,ile skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Components/Components.py ; ModuleNotFoundError: No module named 'Sofa.Components'. At:; Components.py(4): <module>; <frozen importlib._bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit te,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3106,test,tests,3106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['tests']
Testability,in fact I don't really see where this margin is used as the _min and _max are computed from the vertices.; I don't see where _min and _max are used to encapsulate the vertices... The only read access is in SparseGridTopology::buildVirtualFinerLevels(). I see two solutions:; - The bourrin version: we remove this shift in a branch and check the tests. ; - The pétochard version: we duplicate the min and max field to have the accurate and enlarged one. (I'm for the 1st one); Edit: I forgot the 3rd option: the batard version: we remove the shift without saying it and wait if someone notice ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/308#issuecomment-355534101:345,test,tests,345,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/308#issuecomment-355534101,1,['test'],['tests']
Testability,"ion. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warnin",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:973,test,test,973,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197,2,['test'],['test']
Testability,"is now deprecated (and will be deleted soon), please use numpy instead; [ERROR] [SofaPython] createObject: component 'compliance' of type 'UniformCompliance' in node 'joint'; [ERROR] [SofaPython] Object type UniformCompliance<Vec1d> creation failed; [FATAL] [SofaPython] SP_CALL_MODULEFUNC; Traceback (most recent call last):; File ""LambdaPropagation.py"", line 90, in createScene; joint = StructuralAPI.FixedRigidJoint( ""joint"", ground.node, rigid.node ); File ""/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python/Compliant/StructuralAPI.py"", line 634, in __init__; self.compliance = self.node.createObject('UniformCompliance', name='compliance', compliance=compliance); TypeError: bad argument type for built-in operation; Build timed out (after 30 minutes). Marking the build as aborted.; Build was aborted; [File exists] check if file exists [builds/pr/all/build-finished]; Run condition [And] preventing perform for step [[Scan for compiler warnings]]; [File exists] check if file exists [builds/pr/all/build-finished]; Run condition [And] preventing perform for step [[Scan for compiler warnings]]; Recording test results. ########## SIG 15 - SIGTERM: a termination request was sent to the program ##########; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaHelper.so.17.dev.0(sofa::helper::BackTrace::dump()+0x23) [0x7f6585f9be63]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaHelper.so.17.dev.0(sofa::helper::BackTrace::sig(int)+0x14a) [0x7f6585f9c15a]; -> /lib/x86_64-linux-gnu/libc.so.6(+0x36cb0) [0x7f6585049cb0]; -> /usr/lib/x86_64-linux-gnu/libstdc++.so.6(+0x5b6b1) [0x7f658594f6b1]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::PropagateEventVisitor::processNodeTopDown(sofa::simulation::Node*)+0xec) [0x7f65882c897c]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulati",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:3177,test,test,3177,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320,1,['test'],['test']
Testability,"ised to change your code to use the new headers introduced in v22.06.; Adding library Sofa.Compat; Adding library Sofa.Component.Compat; Adding library Sofa.Type; Adding library Sofa.Geometry; Adding library Sofa.Topology; Adding library Sofa.Helper; Found Eigen3: /usr/include/eigen3 (Required is at least version ""2.91.0"") ; Found Json: /home/giang/sofa/src/extlibs/json (Required is at least version ""3.1.2"") ; Found STB: /home/giang/sofa/src/extlibs/stb ; Found DIFFLIB: /home/giang/sofa/src/extlibs/difflib ; Adding library Sofa.LinearAlgebra; Adding library Sofa.DefaultType; Adding library Sofa.Core; Adding library Sofa.Simulation; Adding library Sofa.Simulation.Core; Adding library Sofa.Simulation.Common; Adding library Sofa.Simulation.Graph; Adding library Sofa.Testing; Found PythonInterp: /usr/bin/python (found version ""3.8.10"") ; Looking for pthread.h; Looking for pthread.h - found; Performing Test CMAKE_HAVE_LIBC_PTHREAD; Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed; Check if compiler accepts -pthread; Check if compiler accepts -pthread - yes; Found Threads: TRUE ; Adding library Sofa.Framework; Adding module Sofa.Component; Adding module Sofa.Component.ODESolver; Adding module Sofa.Component.ODESolver.Forward; Adding module Sofa.Component.ODESolver.Backward; Adding module Sofa.Component.IO; Adding module Sofa.Component.IO.Mesh; Found ZLIB: /usr/lib/x86_64-linux-gnu/libz.so (found version ""1.2.11"") ; Adding module Sofa.Component.Playback; Adding module Sofa.Component.SceneUtility; Adding module Sofa.Component.Topology; Adding module Sofa.Component.Topology.Container; Adding module Sofa.Component.Topology.Container.Constant; Adding module Sofa.Component.Topology.Container.Dynamic; Adding module Sofa.Component.Topology.Container.Grid; Adding module Sofa.Component.Topology.Mapping; Adding module Sofa.Component.Topology.Utility; Adding module Sofa.Component.Visual; Adding module Sofa.Component.LinearSolver; Adding module Sofa.Component.LinearSolver.Iterative; A",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:1967,Test,Test,1967,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815,2,['Test'],['Test']
Testability,issue #1589 could be closed after merging this PR. It has already been solved in a previous PR but this one add a test related to the reported bug.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2136#issuecomment-859587427:114,test,test,114,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2136#issuecomment-859587427,1,['test'],['test']
Testability,it doesn't on mac.... I pushed a simple test on EdgeSetTopologyAlgorithm.; Feel free to do some tests.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/777#issuecomment-422350644:40,test,test,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/777#issuecomment-422350644,2,['test'],"['test', 'tests']"
Testability,it seems from the CI that many tests and scene examples are using UniformMass without any input mass info .. ; :clown_face: :japanese_goblin:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2037429819:31,test,tests,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2037429819,1,['test'],['tests']
Testability,"it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1311,test,tests,1311,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008,5,['test'],"['test', 'tests']"
Testability,just for the record: it seems that test DISABLED_ are counted in the total number of tests displayed the dashboard.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2275#issuecomment-888080197:35,test,test,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2275#issuecomment-888080197,2,['test'],"['test', 'tests']"
Testability,"know nothing about that) it must work if their object is called in createObject. (see later I try to explain better the problem). ; So to me this version will generate a lot of subtile problems and backward compatibility issues. . 3) The third version is close to use the str() in term of design but it makes it explicit that if an object want conversion to be used in the parameters of the createObject function it have to follow a specific protocol...this is done by implementing a dedicated function (eg: getAsACreateObjectParameter()). The implementation of this function for BaseObject and Sofa.Data could simply link to getLinkPath(). But if you have your own 'complex' object and want it to be used as a parameter in createObject you can just implement your own conversion schema. So fundamentally it is like 'str' but with a specific semantic saying that the function returns a string ""that can be parsed as a Sofa parameter"". . This approach has several advantages:; - it does not requires to have a lot of ""hard-coded"" test into the createObject function. ; - it does not mess with the existing str() function and there is no risk to break existing scenes or applications and we haven't to worry about backward compatibility. ; - it makes things very explicit, because people that want to have their object used in createObject have to implement it instead of ""assuming"" that by default any object's str function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate problems and teach them how to fix their scenes. . As you said Maxime, ""In python semantic of str is to provide a concise representation of an object as a string, which is exactly what BaseObject.getLinkPath does. "" . A ""concise representation"" is a very flexible/weak semantic with a lot of different meaning that will change depending on the context.; For matthieu (and the Anatos",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:2255,test,test,2255,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575,1,['test'],['test']
Testability,"l some targets and files relative to the install prefix. For example, the binding libraries should be installed in `lib/python3/site-packages/...` . Here is the installation tree that we would need for SofaPython3:; ```; .; ├── bin; │   ├── Bindings.Modules.Tests; │   ├── Bindings.SofaRuntime.Tests; │   ├── Bindings.Sofa.Tests; │   ├── Bindings.SofaTypes.Tests; │   ├── Components; │   │   └── Components.py; │   ├── Core; │   │   ├── BaseData.py; │   │   ├── BaseLink.py; │   │   ├── BaseObject.py; │   │   ├── Base.py; │   │   ├── Controller.py; │   │   ├── DataEngine.py; │   │   ├── ForceField.py; │   │   ├── ForceField.py.orig; │   │   ├── MyRestShapeForceField.py; │   │   └── PythonRestShapeForceField.py; │   ├── Helper; │   │   ├── FileRepository.py; │   │   └── Message.py; │   ├── pyfiles; │   │   └── vector_test.py; │   ├── Simulation; │   │   ├── Node.py; │   │   └── Simulation.py; │   ├── SofaDeformable; │   │   ├── LinearSpring.py; │   │   └── SpringForceField.py; │   ├── tests; │   │   └── Base.py; │   └── Types; │   ├── BoundingBox.py; │   ├── RGBAColor.py; │   └── Vec3.py; ├── include; │   └── SofaPython3; │   ├── config.h; │   ├── DataCache.h; │   ├── DataHelper.h; │   ├── initModule.h; │   ├── Prefab.h; │   ├── PythonEnvironment.h; │   ├── PythonFactory.h; │   ├── PythonTestExtractor.h; │   ├── PythonTest.h; │   ├── SceneLoaderPY3.h; │   ├── Sofa; │   │   ├── Components; │   │   │   └── Submodule_Components.h; │   │   ├── Core; │   │   │   ├── Binding_BaseCamera_doc.h; │   │   │   ├── Binding_BaseCamera.h; │   │   │   ├── Binding_BaseContext.h; │   │   │   ├── Binding_BaseData_doc.h; │   │   │   ├── Binding_BaseData.h; │   │   │   ├── Binding_Base_doc.h; │   │   │   ├── Binding_Base.h; │   │   │   ├── Binding_BaseLink_doc.h; │   │   │   ├── Binding_BaseLink.h; │   │   │   ├── Binding_BaseObject_doc.h; │   │   │   ├── Binding_BaseObject.h; │   │   │   ├── Binding_ContactListener_doc.h; │   │   │   ├── Binding_ContactListener.h; │   │   │   ├── Binding_Con",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592:1151,test,tests,1151,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592,1,['test'],['tests']
Testability,"l/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/Extras/lib/python; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload; /usr/local/lib/python2.7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; [ERROR] [PythonScript] ImportError:; Importing the multiarray numpy extension module failed. Most; likely you are trying to import a failed build of numpy.; If you're working with a numpy git repo, try `git clean -xdf` (removes all; files not under version control). Otherwise reinstall numpy. Original error was: cannot import name multiarray. File ""test.py"", line 20, in <module>; import numpy; File ""/usr/local/lib/python2.7/site-packages/numpy/__init__.py"", line 142, in <module>; from . import add_newdocs; File ""/usr/local/lib/python2.7/site-packages/numpy/add_newdocs.py"", line 13, in <module>; from numpy.lib import add_newdoc; File ""/usr/local/lib/python2.7/site-packages/numpy/lib/__init__.py"", line 8, in <module>; from .type_check import *; File ""/usr/local/lib/python2.7/site-packages/numpy/lib/type_check.py"", line 11, in <module>; import numpy.core.numeric as _nx; File ""/usr/local/lib/python2.7/site-packages/numpy/core/__init__.py"", line 26, in <module>; raise ImportError(msg). [ERROR] [SofaPython] Script (file:test) import error; [ERROR] [SofaPython] scene script load error.; [INFO] [BatchGUI] Computing 1000 iterations. [INFO] [BatchGUI] Processing. [INFO] [BatchGUI] 1000 iterations done in 0.004765 s ( 209864 FPS). [INFO] [BatchGUI] 1000 iterations done in 0.004766 s ( 209820 FPS).; ```. When running it with default python ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:5616,test,test,5616,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326,1,['test'],['test']
Testability,let's wait for the test / scene to see if it generate any warning,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1145#issuecomment-542787267:19,test,test,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1145#issuecomment-542787267,1,['test'],['test']
Testability,"licitSolverDynamicTest_high_dt/0](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralExplicitOdeSolver_test_RungeKutta2ExplicitSolverDynamic_test/rungeKutta2ExplicitSolverDynamicTest_high_dt_0/); [UnitTests.SofaGeneralExplicitOdeSolver_test/RungeKutta4ExplicitSolverDynamic_test.rungeKutta4ExplicitSolverDynamicTest_medium_dt/0](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralExplicitOdeSolver_test_RungeKutta4ExplicitSolverDynamic_test/rungeKutta4ExplicitSolverDynamicTest_medium_dt_0/); [UnitTests.SofaGeneralExplicitOdeSolver_test/RungeKutta4ExplicitSolverDynamic_test.rungeKutta4ExplicitSolverDynamicTest_small_dt/0](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralExplicitOdeSolver_test_RungeKutta4ExplicitSolverDynamic_test/rungeKutta4ExplicitSolverDynamicTest_small_dt_0/); [UnitTests.SofaGeneralImplicitOdeSolver_test/VariationalSymplecticExplicitSolverDynamic_test.variationalSymplecticExplicitSolverDynamicTest_small_dt_without_damping/0](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralImplicitOdeSolver_test_VariationalSymplecticExplicitSolverDynamic_test/variationalSymplecticExplicitSolverDynamicTest_small_dt_without_damping_0/); [UnitTests.SofaGeneralImplicitOdeSolver_test/VariationalSymplecticExplicitSolverDynamic_test.variationalSymplecticExplicitSolverDynamicTest_medium_dt_with_damping/0](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralImplicitOdeSolver_test_VariationalSymplecticExplicitSolverDynamic_tes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2652#issuecomment-1028969769:1172,test,testReport,1172,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2652#issuecomment-1028969769,1,['test'],['testReport']
Testability,"loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected (1 ms); [ RUN ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent; =================",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:4096,test,tests,4096,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['tests']
Testability,"loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected (1 ms); [ RUN ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent; ======================================================================; ERROR: test_addNewDataFromParent (Base.Test); ----------------------------------------------------------------------; Traceback (most recent call last):; File ""Base.py"", line 83, in test_addNewDataFromParent; c1 = root.addObject(""MechanicalObject"", name=""c1""); ValueError: Object type MechanicalObject<> was not created ; The object is not in the factory. . -----------------------------------------------",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:4615,test,test,4615,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['test']
Testability,looks good to me @epernod but not locally tested,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2935#issuecomment-1228140385:42,test,tested,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2935#issuecomment-1228140385,1,['test'],['tested']
Testability,"ly one line that disable them in Sofa_test.cpp and I don't see why it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1087,test,test,1087,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008,1,['test'],['test']
Testability,lyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) |; | [clang-analyzer-security.insecureAPI.vfork](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.vfork.html) | [modernize-use-default-member-init](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-default-member-init.html) |; | [clang-analyzer-unix.API](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.API.html) | [modernize-use-emplace](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-empla,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:17306,assert,assert,17306,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,1,['assert'],['assert']
Testability,"maybe I am stating something already well known, but with c++11 there are some built in functions that can help to test floating point arithmetic. ; So with the current implementation adding something to the `EulerAngle` test like; ```lang=cpp; for(std::size_t i=0; i<q0.size(); ++i) // same goes for q1; {; ASSERT_FALSE(std::is_nan(q0[i]));; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/399#issuecomment-343465411:115,test,test,115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-343465411,2,['test'],['test']
Testability,"ment a new library dedicated to the abstraction api for testing with sofa, ie a kind of lightweight SofaTest library.; I was not really aware that there was code inside SofaKernel libraries that directly depend on gtest, I thought it was still kept ""optional"" (ie that gtest has become mandatory on master for some time, wether or not you build and execute unit tests). ; We are still used to developping with the ""idea"" that gtest is optional, even though in reality there is no use case were we do not include it. Coming back at this PR, to be honest I don't believe there is a functionality in the BaseTest classes (apart from the fact that it removes dependencies) that I would like to use, because mostly : ; - we do not currently have a use for message api, or at least we do not have any idea about why it could be beneficial for us to start using it.; - I d like to discourage the use of one size fits all epsilon and comparison values for floating points arithmetic, since I prefer people to actually think about the quantities they want to compare. Comparing floats in a consistent fashion is harder than it looks, with the exception when you expect that the quantities you want to compare to be strictly equal. So having a Base test class which provides these comparison facilities is also not something I am particularly looking for. There are some abstractions attempts in SofaTest that I find interesting ( linearisation tests for the most part ) but it got snowed under a dependency bloat. . However that being said, the only thing I'd like, is that if I implement a test just using the ""vanilla"" gtest library, it can be merged, built and run easily on the master. With the current state of things, integrating a new test in `framework_test`, requires you to build all sofa, and not just `SofaCore` as I would have expected. So in return you have to wait a loooong time before you can actually check that the functionality you want to integrate in master actually works as you expect.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224:1372,test,test,1372,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224,4,['test'],"['test', 'tests']"
Testability,"more than 40Go of text!!!; In top of adding a stopping criterion based on execution time, we could also add a maximal size for the logging buffer.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289688384:131,log,logging,131,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289688384,1,['log'],['logging']
Testability,"n they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warning message be a dmsg_warning instead of a msg_warning one ? . EDIT3: And this one ; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DifferenceEngine_test_0/Da",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:1204,test,testReport,1204,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197,1,['test'],['testReport']
Testability,"n your PR you could: ; - test each python function with different parameters. At least one with a valid value, 1 with out of bound values, 1 test with extrema values (min & max) and if there is multiple parameter...you either have to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They don't have the timer prefix.. so sound as if they are more general than timing function. ; - in Sofa_timerSetEnabled(PyObject* /*self*/, PyObject *args) you are passing an int argument to get a bool...does it means that timeSetEnable(..., True) will not work ? ; If this is the case the following code is probably better as it allow it:; ```cpp; PyObject* o;; if(!PyArg_ParseTuple(args, ""sO"", &id, &o)){...}; advancedTimer::setEnabled(id, PyObject_IsTrue(o));; ```; - in function taking a string description it would be nicer to warn users or the calling code when an invalid name is provided so that he can locate & fix his scene/script. ; ```cpp; /// In void AdvancedTimer::setOutputType(IdTimer id, std::stri",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:1675,test,testing,1675,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977,2,['test'],"['test', 'testing']"
Testability,"n, perl and C++). If you change the behavior of the default serialization mechanism all of them will stop working and required to be updated. This is a very, very, very nasty thing to impose to other users of Sofa. A PR doing has no changes to be accepted. . Actually tests is part of our guard line because they validates the API compatibility and allow us to detect changes that breaks it. The existing tests should be considered as validating the ""the existing"" sofa API. It was normal to have them to fail on your PR because it shows that the PR was breaking the compatibility. . I really like the idea of keeping the old serialization behavior as it is and add the other deserialization as an extra feature. This will make the whole PR transparent for users that don't want to update their code base. It thus it can be merged very quickly. . About the test: ; You are right that it would be better if we had test specific tests to validate the serialization alone.; I personally would like to have tests to validate that getValueString() return ""1 2 3"" and that getValueAsPythonString() return ""[1 2 3]"" . And also as you said having tests to validate against the real values instead of their serialization would be nice. . . About the branches:; The rule is to never work directly on the sofa-framework repository. There is no reason to do so (if you really want to make two PR one in anatoscope and one in sofa ... you need to to that from two branches located in the anatoscope repo). Otherwise this consume a lot of disk space on the CI servers that we have to fix manually. Now fundamentally from my experience in playing with PR and branches I think that making two PR will be very complex for you to handle. Because the PR you issued to anatoscope and the one you issued to sofa-framework may diverge ... so it will cost you to switch from one to the other and handle the changes. . PS: I'm not very good to explains things in english so if you want we can continue in by email in french.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626:1424,test,tests,1424,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626,2,['test'],['tests']
Testability,"n.dll` are both in the same directory; - the `../lib` directory for other platforms like linux, where the plugins are usually stored in a `lib` sub folder of the parent directory where the application reside. For example from the directory where the `runSofa` executable is, you can look for the directory where `SofaPython.lib` is located by doing `cd ../lib`. These paths are relative and are compatible both with a build tree and an install tree. Prior to f93e2b9 the PluginRepository was empty by default, leaving all the executables the responsibility to fill it with these values. Behavior which was changed multiple times compared to ca0402d for a reason yet to be explained. The side effect this change introduced was the requirement to have every unit test executable which attempts to load a plugin to explicitly fill the PluginRepository with the paths where the libraries are located with respect to the executable. This requirement was covered by having most of the unit tests depend on SofaGTest which initialize these default paths for you, so that test scenes that use a ` RequiredPlugin` component do not utterly fail. ; Unless a **valid** argument is raised, the aforementioned paths should be the default ones to use to initialize the `PluginRepository` global object. ; I strongly believe that would these paths have been properly restored by f93e2b9 (my bad), this PR would have never existed on the first place. I mean how much time has been lost already in fixes, and discussions because of this ! Just to in the end roll back to the implementation that was done 5 years ago which was **just working**. The other thing I mentionned in the comment https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769 is that there should be only one place to store the paths for possible plugin locations so either the method `Utils::getPluginDirectory()` should use internally of the `PluginRepository` global object, or the method should be removed entirely for consistency.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659:1313,test,tests,1313,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659,2,['test'],"['test', 'tests']"
Testability,"n2.7/lib-dynload; /usr/local/lib/python2.7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; [ERROR] [PythonScript] ImportError:; Importing the multiarray numpy extension module failed. Most; likely you are trying to import a failed build of numpy.; If you're working with a numpy git repo, try `git clean -xdf` (removes all; files not under version control). Otherwise reinstall numpy. Original error was: cannot import name multiarray. File ""test.py"", line 20, in <module>; import numpy; File ""/usr/local/lib/python2.7/site-packages/numpy/__init__.py"", line 142, in <module>; from . import add_newdocs; File ""/usr/local/lib/python2.7/site-packages/numpy/add_newdocs.py"", line 13, in <module>; from numpy.lib import add_newdoc; File ""/usr/local/lib/python2.7/site-packages/numpy/lib/__init__.py"", line 8, in <module>; from .type_check import *; File ""/usr/local/lib/python2.7/site-packages/numpy/lib/type_check.py"", line 11, in <module>; import numpy.core.numeric as _nx; File ""/usr/local/lib/python2.7/site-packages/numpy/core/__init__.py"", line 26, in <module>; raise ImportError(msg). [ERROR] [SofaPython] Script (file:test) import error; [ERROR] [SofaPython] scene script load error.; [INFO] [BatchGUI] Computing 1000 iterations. [INFO] [BatchGUI] Processing. [INFO] [BatchGUI] 1000 iterations done in 0.004765 s ( 209864 FPS). [INFO] [BatchGUI] 1000 iterations done in 0.004766 s ( 209820 FPS).; ```. When running it with default python in verbose mode, multiarray appears as follows:; ```; sofamacbuilder:mac_clang-3.5_default_release sofa$ cat test.out | grep multiarray; dlopen(""/usr/local/lib/python2.7/site-packages/numpy/core/multiarray.so"", 2);; import numpy.core.multiarray # dynamically loaded from /usr/local/lib/python2.7/site-packages/numpy/core/multiarray.so; # cleanup[2] numpy.core.multiarray; ```. But `/usr/local/lib/python2.7/site-packages` is in `sys.path` when running with SofaPython so **why does it fail**?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:6295,test,test,6295,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326,2,['test'],['test']
Testability,"nTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected (1 ms); [ RUN ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent; =========================================================",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:4129,test,tests,4129,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,2,['test'],"['test', 'tests']"
Testability,named 'Sofa.Components'. At:; Components.py(4): <module>; <frozen importlib._bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INF,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3259,test,tests,3259,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['tests']
Testability,"new feature, new unit test?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-663853203:22,test,test,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-663853203,1,['test'],['test']
Testability,"newly introduced tests not compatible with the compat, back to wip 😬",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2975#issuecomment-1158540178:17,test,tests,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2975#issuecomment-1158540178,1,['test'],['tests']
Testability,"ng a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1052,test,test,1052,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243,2,['test'],['test']
Testability,ng.llvm.org/extra/clang-tidy/checks/misc-non-copyable-objects.html) |; | [clang-analyzer-core.NonNullParamChecker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonNullParamChecker.html) | [misc-redundant-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-redundant-expression.html) |; | [clang-analyzer-core.NonnilStringConstants](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonnilStringConstants.html) | [misc-sizeof-container](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-container.html) |; | [clang-analyzer-core.NullDereference](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NullDereference.html) | [misc-sizeof-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-expression.html) |; | [clang-analyzer-core.StackAddressEscape](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.StackAddressEscape.html) | [misc-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/misc-static-assert.html) |; | [clang-analyzer-core.UndefinedBinaryOperatorResult](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.UndefinedBinaryOperatorResult.html) | [misc-string-compare](https://clang.llvm.org/extra/clang-tidy/checks/misc-string-compare.html) |; | [clang-analyzer-core.VLASize](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.VLASize.html) | [misc-string-integer-assignment](https://clang.llvm.org/extra/clang-tidy/checks/misc-string-integer-assignment.html) |; | [clang-analyzer-core.builtin.BuiltinFunctions](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.builtin.BuiltinFunctions.html) | [misc-string-literal-with-embedded-nul](https://clang.llvm.org/extra/clang-tidy/checks/misc-string-literal-with-embedded-nul.html) |; | [clang-analyzer-core.builtin.NoReturnFunctions](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.builtin.NoReturnFunctions.html) | [misc-suspicious-enum-usage](https://clang,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:9803,assert,assert,9803,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,1,['assert'],['assert']
Testability,now that I have fixed the tests on tetrahedron yes.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/878#issuecomment-456604198:26,test,tests,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/878#issuecomment-456604198,1,['test'],['tests']
Testability,nts.cpython-39-x86_64-linux-gnu.so; │   │   ├── constants; │   │   │   ├── __init__.py; │   │   │   ├── KeyCode.py; │   │   │   └── Key.py; │   │   ├── Core.cpython-39-x86_64-linux-gnu.so; │   │   ├── Gui.cpython-39-x86_64-linux-gnu.so; │   │   ├── Helper.cpython-39-x86_64-linux-gnu.so; │   │   ├── __init__.py; │   │   ├── livecoding.py; │   │   ├── prefab.py; │   │   ├── PyTypes; │   │   │   ├── __init__.py; │   │   │   ├── RGBAColor.py; │   │   │   └── Vec3.py; │   │   ├── Simulation.cpython-39-x86_64-linux-gnu.so; │   │   ├── SofaBaseTopology.cpython-39-x86_64-linux-gnu.so; │   │   ├── SofaDeformable.cpython-39-x86_64-linux-gnu.so; │   │   ├── test.py; │   │   └── Types.cpython-39-x86_64-linux-gnu.so; │   ├── SofaRuntime; │   │   ├── __init__.py; │   │   └── SofaRuntime.cpython-39-x86_64-linux-gnu.so; │   ├── SofaTypes; │   │   ├── __init__.py; │   │   └── SofaTypes.cpython-39-x86_64-linux-gnu.so; │   └── splib; │   ├── animation; │   │   ├── animate.py; │   │   ├── easing.py; │   │   └── __init__.py; │   ├── caching; │   │   ├── cacher.py; │   │   └── __init__.py; │   ├── __init__.py; │   └── meshing; │   ├── cgal_sofa.py; │   ├── data; │   │   └── meshes; │   │   ├── gallbladder.stl; │   │   ├── parametric_mesh_example.step; │   │   └── surface_mesh_example.stl; │   ├── gmsh_sofa.py; │   ├── __init__.py; │   └── pygalmesh_sofa.py; └── share; └── SofaPython3; ├── documentation; │   ├── Contributing.rst; │   ├── CustomModule.rst; │   ├── index.rst; │   ├── install.rst; │   ├── SofaModule.rst; │   └── SofaPlugin.rst; └── examples; ├── backend_pygame.py; ├── BaseCamera.py; ├── CMakeLists.txt; ├── ControllerScene.py; ├── easingSceneMatplotlib.py; ├── easingScene.py; ├── emptyController.py; ├── emptyDataEngine.py; ├── emptyForceField.py; ├── example-forcefield2.py; ├── example-forcefield.py; ├── example.pyscn; ├── example-scriptcontroller.py; ├── keyEvents.py; ├── pygame_test.py; ├── ReadTheDocs_Example.py; ├── realTimeClockScene.py; ├── SofaGui.py; └── test.scn. ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592:6524,test,test,6524,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592,1,['test'],['test']
Testability,"ois Faure; https://team.inria.fr/imagine/francois-faure/. > Le 6 avr. 2017 à 19:30, Maxime Tournier <notifications@github.com> a écrit :; > ; > ; > The biggest issue with sparse matrices is that there is no silver bullet representation that covers everyone's needs: some people like it compressed (row/column), others like to have small dense chunks instead of single floating points, and so on.; > ; > In particular, I see two major orthogonal uses of sparse matrices:; > ; > getting matrix data out of components; > working with sparse matrices (linear algebra, factorization, assembly); > It is not at all obvious that the two operations should use the same representation, and in fact I would argue against it. For instance in the Compliant plugin, we use Eigen sparse matrices for everything, and end up doing a lot of work in order to shift matrix blocks around which is tedious and costly.; > ; > I've been toying around with alternate designs, and the simplest I found so far is to use a plain old vector of triplets (row, column, value) for fetching matrix data. More precisely, mappings/forcefields directly push_back matrix data into a std::vector<Eigen::Triplet<SReal> > through a std::back_insert_iterator.; > ; > With this design the caller is then responsible for structuring the sparse data further (sorting/converting to CSR, shifting rows/columns, handing over to another library, etc) Of course this approach is tailored for our needs and might not fit others, and performance-wise it needs thorough benchmarking anyways, but I think that using separate data structures for getting the data and working with the data instead of a single structure is the way to go.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AHUGIb2x8bFdYI3KTJsLE_7Qy-d2FFJiks5rtSFPgaJpZM4KLEE1>.; >",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292785399:2418,benchmark,benchmarking,2418,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292785399,1,['benchmark'],['benchmarking']
Testability,ok for me if the tests pass but I don't understand what is involved behind between the groups and multi-mapping.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/901#issuecomment-456416670:17,test,tests,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/901#issuecomment-456416670,1,['test'],['tests']
Testability,"ok for me, just a shame this was not detected automatically by the tests...; Maybe @damienmarchal or @EulalieCoevoet you could put an issue on that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/924#issuecomment-462260724:67,test,tests,67,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/924#issuecomment-462260724,1,['test'],['tests']
Testability,"ok here is the new call stack with your version @hugtalbot :; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434:1062,log,log,1062,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434,1,['log'],['log']
Testability,"ok looking at the CI, only tests from plugin are failing because the scene are still requesting to load plugin with old plugin name. I can fix that quickly.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3301#issuecomment-1263227559:27,test,tests,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3301#issuecomment-1263227559,1,['test'],['tests']
Testability,"ok, I agree with your choice ! ; thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 3 Mars 2017 10:18:55; > Objet: Re: [sofa-framework/sofa] [all] Improve msg_api and logging of message; > (#190). > Hi @thomas-lemaire ,. > About the ""\n"" ... why would it breaks windows console printing ? Windows and; > linux does not have the same ""\n"" but a windows app emits the ""\n"" the; > windows system understand. > About using ""\n"" or better std::endl. My target was to supports messages; > written with a simple markdown syntax for which the ""\n"" is not an explicit; > line break, it is "" \n"" . So i replaced std::endl/sendl by "" \n""; > But I found that ugly and hard to read so I finally made 'msgendl' that; > contains the explicit markdown line break, but I forgot to remove the old; > manually placed "" \n"" I used all around. > Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). > Do you think msgendl is ok ?; > Do you like the msg_endl. > The change on how the messages are printed in runSofa is visible here:. > The two panels are merged and the panel now shows in its title the number of; > messages.; > (in this PR I removed the column with ""suggest a better message). > In the Graph view there is now a small alert (green, yellow, red) on top of; > th icons showing the kind of message an object have. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211:369,log,logging,369,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211,1,['log'],['logging']
Testability,"ok, could you test by removing the line:; 323 or 324 in the GeomagicDriver.cpp. remove this call: ```updatePosition(); ```; because I saw it is called at SOFA component init when the device thread is not yet well init so it init the manager position with trash position of the device.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/996#issuecomment-484090622:14,test,test,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/996#issuecomment-484090622,1,['test'],['test']
Testability,"olver name=""cs"" tolerance=""0.001"" maxIt=""500""/-->; 	<GenericConstraintSolver name=""cs"" tolerance=""0.001"" maxIt=""500""/>; 	<MyTestController name=""body"" modelName=""patient.scn"" />; </Node>; ```. I dynamically load ""patient.scn"" in the MyTestController component, the code is as follows:. ```; sofa::simulation::SceneLoader *loader = sofa::simulation::SceneLoaderFactory::getInstance()->getEntryFileName(modelPath);; if (loader); {; 	m_node = loader->load(modelPath.c_str());; 	m_node->init(sofa::core::ExecParams::defaultInstance());; }; ```; The content of ""patient.scn"" is as follows:; ```; <?xml version=""1.0""?>; <Node name=""root"" gravity=""0 0 0"" dt=""0.005"" >. 	<RequiredPlugin name=""MeshFbxLoader"" />; 	<Node name=""Patient"">; 		<MechanicalObject name=""Articulations"" template=""Vec1d"" size=""1"" />; 		<Node name=""PatientBone"">; 			<MeshFbxLoader name=""fbxloader"" filename=""Body-Bone.FBX"" />		; 			<MechanicalObject name=""Bones"" template=""Rigid3d"" position=""@fbxloader.bonePos"" showObject=""0"" />; 			<Node name=""skinning"">; 				<OglModel name=""body"" src=""@../fbxloader"" />; 				<SkinningMapping name=""skinMap"" template=""Rigid3d,ExtVec3d"" input =""@../Bones"" output =""@body"" nbRef =""@../fbxloader.nbref"" indices =""@../fbxloader.boneIds"" weight=""@../fbxloader.boneWeights""/>; 			</Node>	; 			<ArticulatedSystemMapping input1=""@../Articulations"" output=""@Bones""/>; 		</Node>; 		<ArticulatedHierarchyContainer/>; 		<Node name=""articulationCenters"">; 			<Node name=""articulationCenter1"">; 				<ArticulationCenter parentIndex=""0"" childIndex=""1"" posOnParent=""294 22 0"" posOnChild=""0 0 0"" />; 				<Node name=""articulations"">; 					<Articulation translation=""0"" rotation=""1"" rotationAxis=""0 0 -1"" articulationIndex=""0""/>; 				</Node>; 			</Node>; 		</Node>; 	</Node>; 	; </Node>; ```. When my application is started, the above pointer is empty error appears, but when the component ""GenericConstraintSolver"" is changed to ""LCPConstraintSolver"" in ""test.scn"", the above pointer is empty problem no longer occurs.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696:2476,test,test,2476,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696,1,['test'],['test']
Testability,"on my machine:. > [==========] Running 2 tests from 1 test case.; > [----------] Global test environment set-up.; > [----------] 2 tests from Monitor_test; > [ RUN ] Monitor_test.testInit; > [ OK ] Monitor_test.testInit (21 ms); > [ RUN ] Monitor_test.testModif; > [ OK ] Monitor_test.testModif (17 ms); > [----------] 2 tests from Monitor_test (38 ms total); > ; > [----------] Global test environment tear-down; > [==========] 2 tests from 1 test case ran. (38 ms total); > [ PASSED ] 2 tests. The purpose of this PR was initially to create a test to uncover a bug that some people in our team went through.; I personally never had the problem on my machine, but I know that @IPeterlik had it for instance.; It would be interesting to investigate deeper into this issue, but without being able to reproduce it on my workstation, I don't really know how I could do it. :/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942:41,test,tests,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942,14,['test'],"['test', 'testInit', 'testModif', 'tests']"
Testability,on.html) | [misc-non-copyable-objects](https://clang.llvm.org/extra/clang-tidy/checks/misc-non-copyable-objects.html) |; | [clang-analyzer-core.NonNullParamChecker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonNullParamChecker.html) | [misc-redundant-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-redundant-expression.html) |; | [clang-analyzer-core.NonnilStringConstants](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonnilStringConstants.html) | [misc-sizeof-container](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-container.html) |; | [clang-analyzer-core.NullDereference](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NullDereference.html) | [misc-sizeof-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-expression.html) |; | [clang-analyzer-core.StackAddressEscape](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.StackAddressEscape.html) | [misc-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/misc-static-assert.html) |; | [clang-analyzer-core.UndefinedBinaryOperatorResult](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.UndefinedBinaryOperatorResult.html) | [misc-string-compare](https://clang.llvm.org/extra/clang-tidy/checks/misc-string-compare.html) |; | [clang-analyzer-core.VLASize](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.VLASize.html) | [misc-string-integer-assignment](https://clang.llvm.org/extra/clang-tidy/checks/misc-string-integer-assignment.html) |; | [clang-analyzer-core.builtin.BuiltinFunctions](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.builtin.BuiltinFunctions.html) | [misc-string-literal-with-embedded-nul](https://clang.llvm.org/extra/clang-tidy/checks/misc-string-literal-with-embedded-nul.html) |; | [clang-analyzer-core.builtin.NoReturnFunctions](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.builtin.NoReturnFunctions.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:9736,assert,assert,9736,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,1,['assert'],['assert']
Testability,"one test is failing on ubuntu (RigidLinearDeformationMappings) but this does occur on my machine.; Otherwise, ready for review !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/218#issuecomment-338120512:4,test,test,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-338120512,1,['test'],['test']
Testability,"or] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected (1 ms); [ RUN ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent; ======================================================================; ERROR: test_addNewDataFromParent (Base.Test); ----------------------------------------------------------------------; Traceback (most recent call last):; File ""Base.py"", line 83, in test_addNewDataFromParent; c1 = root.addObject(""MechanicalObject"", name=""c1""); ValueError: Object type MechanicalObject<> was not created ; The object is not in the factory. . ----------------------------------------------------------------------; Ran 1 test in 0.001s. FAILED (errors=1); /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/Base.py:0: Failure; Failed; [ FAILED ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent, where GetParam() ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:4888,test,test,4888,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['test']
Testability,"ory;. // collision pipeline; using sofa::component::collision::detection::algorithm::DefaultPipeline;; using sofa::component::collision::detection::algorithm::BruteForceBroadPhase;; using sofa::component::collision::detection::algorithm::BVHNarrowPhase;; using sofa::component::collision::detection::intersection::NewProximityIntersection;; using sofa::component::collision::response::contact::DefaultContactManager;; using sofa::component::collision::geometry::PointCollisionModel;. // mechanical object; using sofa::component::statecontainer::MechanicalObject;; using sofa::defaulttype::StdVectorTypes;; using sofa::type::Vec;. using sofa::core::behavior::MechanicalState;; using sofa::core::State;; using sofa::core::objectmodel::New;; using sofa::core::objectmodel::Data;. using sofa::simulation::DefaultAnimationLoop;. int main(int argc, char** argv); {; sofa::helper::logging::MessageDispatcher::addHandler(&sofa::helper::logging::MainLoggingMessageHandler::getInstance());; sofa::helper::logging::MessageDispatcher::addHandler(&sofa::helper::logging::MainPerComponentLoggingMessageHandler::getInstance());; sofa::helper::logging::MainLoggingMessageHandler::getInstance().activate();. sofa::helper::BackTrace::autodump();. sofa::simulation::graph::init();. sofa::simulation::setSimulation(new sofa::simulation::graph::DAGSimulation());. for (int i = 0; i < 1000; i++) {. Node::SPtr groot = sofa::simulation::getSimulation()->createNewGraph(""root"");; groot->setGravity({ 0,0,0 });; groot->setDt(0.02);. DefaultAnimationLoop::SPtr animationLoop = New<DefaultAnimationLoop>();; groot->addObject(animationLoop);. // collision pipeline; DefaultPipeline::SPtr collisionPipeline = New<DefaultPipeline>();; collisionPipeline->setName(""Collision Pipeline"");; groot->addObject(collisionPipeline);. // collision detection system; BruteForceBroadPhase::SPtr broadPhaseDetection = New<BruteForceBroadPhase>();; broadPhaseDetection->setName(""Broad Phase Collision Detection"");; groot->addObject(broadPhaseDete",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1254291147:2678,log,logging,2678,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1254291147,5,['log'],['logging']
Testability,"or}(std::mutex & _Mtx) Line 427	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::process(sofa::helper::logging::Message & m) Line 151	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::LoggerStream::~LoggerStream() Line 198	C++; 	Sofa.GUI.Qt.dll!redirectQtMessages(QtMsgType type, const QMessageLogContext & context, const QString & msg) Line 40	C++; 	[External Code]	; 	Sofa.GUI.Qt.dll!sofa::gui::qt::setMessageIconFrom(QTreeWidgetItem * item, sofa::core::objectmodel::Base * object) Line 325	C++; 	Sofa.GUI.Qt.dll!sofa::gui::qt::ObjectStateListener::notifyEndEdit() Line 350	C++; 	Sofa.Core.dll!sofa::core::objectmodel::DDGNode::notifyEndEdit() Line 83	C++; 	[Inline Frame] Sofa.Helper.dll!sofa::helper::logging::MessageDispatcherImpl::process(sofa::helper::logging::Message &) Line 119	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::process(sofa::helper::logging::Message & m) Line 152	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::LoggerStream::~LoggerStream() Line 198	C++; >	Sofa.Core.dll!sofa::core::behavior::BaseForceField::buildStiffnessMatrix(sofa::core::behavior::StiffnessMatrix * matrix) Line 62	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsystem::AssemblingMatrixSystem<sofa::linearalgebra::BTDMatrix<6,double>,sofa::linearalgebra::BlockVector<6,double>>::contribute<0>(const sofa::core::MechanicalParams * mparams) Line 85	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsystem::AssemblingMatrixSystem<sofa::linearalgebra::BTDMatrix<6,double>,sofa::linearalgebra::BlockVector<6,double>>::assembleSystem(const sofa::core::MechanicalParams * mparams) Line 123	C++; 	Sofa.Core.dll!sofa::core::behavior::BaseMatrixLinearSystem::buildSystemMatrix(const sofa::core::MechanicalParams * mparams) Line 38	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsolver::MatrixLinearSolver<sofa::linearalgebra::BTDMatrix<6,double>,sofa::linearalgebra::BlockVector<6,double>,sof",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1436394850:1671,log,logging,1671,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1436394850,3,"['Log', 'log']","['LoggerStream', 'logging']"
Testability,"ound. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; -----------------------------------------------------",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3871,test,tests,3871,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['tests']
Testability,"per.dll!std::_Mutex_base::lock() Line 50	C++; 	[Inline Frame] Sofa.Helper.dll!std::lock_guard<std::mutex>::{ctor}(std::mutex & _Mtx) Line 427	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::process(sofa::helper::logging::Message & m) Line 151	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::LoggerStream::~LoggerStream() Line 198	C++; 	Sofa.GUI.Qt.dll!redirectQtMessages(QtMsgType type, const QMessageLogContext & context, const QString & msg) Line 40	C++; 	[External Code]	; 	Sofa.GUI.Qt.dll!sofa::gui::qt::setMessageIconFrom(QTreeWidgetItem * item, sofa::core::objectmodel::Base * object) Line 325	C++; 	Sofa.GUI.Qt.dll!sofa::gui::qt::ObjectStateListener::notifyEndEdit() Line 350	C++; 	Sofa.Core.dll!sofa::core::objectmodel::DDGNode::notifyEndEdit() Line 83	C++; 	[Inline Frame] Sofa.Helper.dll!sofa::helper::logging::MessageDispatcherImpl::process(sofa::helper::logging::Message &) Line 119	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::process(sofa::helper::logging::Message & m) Line 152	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::LoggerStream::~LoggerStream() Line 198	C++; >	Sofa.Core.dll!sofa::core::behavior::BaseForceField::buildStiffnessMatrix(sofa::core::behavior::StiffnessMatrix * matrix) Line 62	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsystem::AssemblingMatrixSystem<sofa::linearalgebra::BTDMatrix<6,double>,sofa::linearalgebra::BlockVector<6,double>>::contribute<0>(const sofa::core::MechanicalParams * mparams) Line 85	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsystem::AssemblingMatrixSystem<sofa::linearalgebra::BTDMatrix<6,double>,sofa::linearalgebra::BlockVector<6,double>>::assembleSystem(const sofa::core::MechanicalParams * mparams) Line 123	C++; 	Sofa.Core.dll!sofa::core::behavior::BaseMatrixLinearSystem::buildSystemMatrix(const sofa::core::MechanicalParams * mparams) Line 38	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsol",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1436394850:1554,log,logging,1554,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1436394850,2,['log'],['logging']
Testability,"pping that produce the same number of outputs as its inputs), previously to get correct topology association and changes propagation you would need to replicate the topology (and the topological mappings) with a topology both before and after the mapping (but beware if they end up with different sizes, or updated in the wrong order...). With our changes, there is a clear(er) method BaseContext::getActiveMeshTopology() that you can call from any context and will give you the topology that is relevant for this context, i.e. either the topology at this exact node, or from a parent node but only if there is no mapping in between (or if there are only mappings whose sameTopology() method returns true). Using this method, state->l_topology is initialized (and you can inspect its result in the GUI), and if it is not NULL it will be used by all computations for the state without extra hidden checks. Now back to this bug, the last issue here was that the tested mapping (TetrahedronVolumeMapping) was not preserving the topology, but its output state was somehow linked to its input topology. The solution is not to go back to the old (broken) behavior, but instead to understand what is the actual root cause here. Theoretically, if the logic described above was behaving correctly, the output state would not be able to see the input topology because of the use of getActiveMeshTopology() and the fact that the mapping sameTopology() method would return false (thanks to its ""safe"" default implementation). The reason why this incorrect link was being created was because the mapping was created in the wrong Node. Normally, Sofa requires mappings to be in the same node as its output state. This is important in order to know for example which mapping is associated to which state (at least prior to the introduction of reflective Links, and still required because Mapping->State links are only one-way). This is used for example by visitors to know if a state is to be considered as real DOFs",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201:1714,test,tested,1714,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201,1,['test'],['tested']
Testability,"proach of the kind of pattern I'm using in the init/reinit function (actually any change to the data from the UIs should also be checked); ```cpp; void MyComponent::init(){; m_componentState = ComponentState::Valid; // By default the ComponentState is to Undefined. ; if( d_stiffness.getValue() < 0.0 ){; msg_warning(this) << ""The 'stiffness=""<< d_stiffness.getValueString() << ""' parameters is outside the validity range of [0, +INF[. Continuing with the default value=500.0 . ""; ""To remove this warning message you need to set the 'stiffness' attribute between [0, +INF[."" ; d_stiffness.setValue(500) ;; }. if( this->m_state nullptr ){; msg_error(this) << ""No mechanical state, the component is thus de-activated.""; ""To remove this error message you need to add a MechanicalObject.""; m_componentState = ComponentState::Invalid;; }; }; ```; Then for each function crashing sofa when the object is not properly initialized... ; ```cpp; void MyComponent::draw(); {; if(m_componentState == ComponentState::Deactivated); return ; ; ; if(m_componentState == ComponentState::Invalid){ ; msg_info_when(this, m_verbosityLevel == HIGH ) << ""You are calling a function on an invalid component. "" ;; return ; ; }; ....; }; ```. I agree this is a lot of code to add but I haven't yet a better solution. Now...if you implement this kind of pattern you can then do the following from the outside (eg: in the _test):; ```cpp; void myComponentInvalid_test(); {; ... make a scene with a MyComponent with an invalid '-1' param.... ; {; ExpectMessage error(Message::Error); // test failure if the component does not send an error message; ; MessageAsTestFailure warning(Message::Warning); // test failure if the component do not send a messae while it shouldn't ; ; MyComponent::init() ; } ; EXPECT_EQ( MyComponent::getComponentState(), ComponentState::Invalid ); ; }; ```. N.B: When I look carefully the ExpectMessage & MessageAsTestFailure... I have the feeling this is a kind of an asynchronous exception mechanism.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494:1575,test,test,1575,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494,2,['test'],['test']
Testability,probably I have no time to test it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3267#issuecomment-1236901105:27,test,test,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3267#issuecomment-1236901105,1,['test'],['test']
Testability,"ra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; CMake Error: File /home/giang/sofa/src/applications/plugins/SofaPython/ExternalProjectConfig.cmake.in does not exist.; CMake Error at Sofa/framework/Config/cmake/SofaMacrosConfigure.cmake:266 (configure_file):; configure_file Problem configuring file; Call Stack (most recent call first):; Sofa/framework/Config/cmake/SofaMacrosConfigure.cmake:295 (sofa_add_generic_external); applications/plugins/CMakeLists.txt:22 (sofa_add_subdirectory). SofaPython3 is compiled as a subproject to the external project 'Sofa'.; Adding plugin SofaPython3; CMake Error at /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:146 (message):; Could NOT find Python (missing: Python_LIBRARIES Python_INCLUDE_DIRS; Development) (found suitable version ""3.9.5"", minimum required is ""3.7""); Call Stack (most recent call first):; /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:393 (_FPHSA_FAILURE_MESSAGE); /usr/share/cmake-3.16/Modules/FindPython/Support.cmake:2214 (find_package_handle_standard_args); /usr/share/cmake-3.16/Modules/FindPython.cmake:304 (include); applications/plugins/SofaPython3/CMakeLists.txt:86 (find_package). Configuring incomplete, errors occurred!; See also ""/home/giang/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/giang/sofa/build/CMakeFiles/CMakeError.log"".; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:9411,log,log,9411,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815,2,['log'],['log']
Testability,"ractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected (1 ms); [ RUN ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent; ======================================================================; ERROR: test_addNewDataFromParent (Base.Test); ----------------------------------------------------------------------; Traceback (most recent call last):; File ""Base.py"", line 83, in test_addNewDataFromParent; c1 = root.addObject(""MechanicalObject"", name=""c1""); ValueError: Object type MechanicalObject<> was not created ; The object is not in the factory. . ----------------------------------------------------------------------; Ran 1 test in 0.001s. FAILED (errors=1); /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/Base.py:0: Failure; Failed; [ FAILED ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent, where GetParam() = /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/Base.py with args {test_addNewDataFromParent, } (2 ms); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:5182,Test,Test,5182,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,2,"['Test', 'test']","['Test', 'test']"
Testability,"raph entries. This is why the initial design was that there is no ""path"" concept at this level.; > ; > My current approach to handle this kind of scenario was to implement an easing function like that:; > ; > ```c++; > std::string sofa::helper::objectmodel::getPathName(Base* o); > {; > BaseNode *node = dynamic_cast<BaseNode>(o);; > if(node); > return node->getPathName();; > BaseObject *object = dynamic_cast<BaseNode>(o);; > if(object); > return object->getPathName();; > ...; > }; > ```; > ; > To avoid having if/else and dynamic cast at every call and thus easing the readability on the caller's.; > But I agree with your that factoring them out in Base would make sense. Actually some refactoring of BaseNode/Node/DAGNode/BaseContext would also make sense given how hard these are interleaved and unclear to most of the developpers. Let's get rid of BaseContext! ;); More seriously, I was also using easing functions before, but I noticed that I was often just duplicating the code whenever I needed it, and felt like having it in Base made more sense, but I must say that I would have preferred a virtual pure method there.. your alternative (adding in SofaCore an easing function in the sofa::core::objectmodel or sofa::helper::objectmodel scope) makes sense to me, solves the problem of having an extra function to override when inheriting Base.; Do you know if there is an improvement in perfs when using toBaseNode() / toBaseObject() instead of a dynamic_cast here?. I would not bet too much on performance improvement without making small benchmark. But in a function that basically returns strings build by concatenating ... I would say this is probably very small. . In addition it has to be noted that using a getPathName() explingn function with if/else has a linear complexity in the amount of possible types (number of if/else) while a virtual getPathName in Base has a constant cost. But again...the calling costs is probably very small compared to what the function actually do :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1455#issuecomment-678138769:1699,benchmark,benchmark,1699,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1455#issuecomment-678138769,1,['benchmark'],['benchmark']
Testability,"re used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warning message be a dmsg_warning instead of a msg_warning one ? . EDIT3: And this one ; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DifferenceEngine_test_0/DataTest/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:1820,test,testReport,1820,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197,3,['test'],"['test', 'testReport']"
Testability,ready if CI+tests compiles,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1466#issuecomment-685459680:12,test,tests,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1466#issuecomment-685459680,1,['test'],['tests']
Testability,"rectory ( hence the ""./"" ) of the applications since on windows platform. By default, on windows the dlls are located in the same directory as the application. For example `runSofa` and `SofaPython.dll` are both in the same directory; - the `../lib` directory for other platforms like linux, where the plugins are usually stored in a `lib` sub folder of the parent directory where the application reside. For example from the directory where the `runSofa` executable is, you can look for the directory where `SofaPython.lib` is located by doing `cd ../lib`. These paths are relative and are compatible both with a build tree and an install tree. Prior to f93e2b9 the PluginRepository was empty by default, leaving all the executables the responsibility to fill it with these values. Behavior which was changed multiple times compared to ca0402d for a reason yet to be explained. The side effect this change introduced was the requirement to have every unit test executable which attempts to load a plugin to explicitly fill the PluginRepository with the paths where the libraries are located with respect to the executable. This requirement was covered by having most of the unit tests depend on SofaGTest which initialize these default paths for you, so that test scenes that use a ` RequiredPlugin` component do not utterly fail. ; Unless a **valid** argument is raised, the aforementioned paths should be the default ones to use to initialize the `PluginRepository` global object. ; I strongly believe that would these paths have been properly restored by f93e2b9 (my bad), this PR would have never existed on the first place. I mean how much time has been lost already in fixes, and discussions because of this ! Just to in the end roll back to the implementation that was done 5 years ago which was **just working**. The other thing I mentionned in the comment https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769 is that there should be only one place to store the paths for po",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659:1090,test,test,1090,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659,1,['test'],['test']
Testability,rk/Versions/2.7/lib/python2.7; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-darwin; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload; /usr/local/lib/python2.7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; Numpy found: /usr/local/lib/python2.7/site-packages/numpy/__init__.pyc; ```. When I run it with runSofa (and thus SofaPython):; ```; sofamacbuilder:mac_clang-3.5_default_release sofa$ ./build/bin/runSofa -g batch test.py; [INFO] [runSofa] Loading automatically plugin list in /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaSparseSolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPreconditioner.dylib; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:2173,test,test,2173,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326,1,['test'],['test']
Testability,"rnal>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] S",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3413,test,tests,3413,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['tests']
Testability,"same here.; When looking at the log, the trace gives:; ```; ObjectFactory::ClassEntry::~ClassEntry(); _M_erase()",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604360809:32,log,log,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604360809,1,['log'],['log']
Testability,"se tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is still nice to have a record of the regressions that occur during the overall development, because you can then document better when you actually introduced changes in the code that are significant, which certainly is hard to track by unit tests only, unless you have a coverage of 100%, which is a target that in my opinion is a waste of energy to aim at, provided you have some functional tests also.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1635,test,tests,1635,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243,1,['test'],['tests']
Testability,seems like it introduces two new failed unit test:; - UnitTests.Compliant_test/Batch/Python_scene_test.sofa_python_scene_tests/2; - UnitTests.SofaCarving_test/SofaCarving_test.testdoCarving; ; I suppose investigating the SofaCarving test will fix the Compliant one,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2225#issuecomment-874602567:45,test,test,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2225#issuecomment-874602567,3,['test'],"['test', 'testdoCarving']"
Testability,"sentation in the scene; 3. the extensive use of this representation in the python bindings (especially the linearSpring that has no other purpose that this API). Other than that, it has no real superiority over the proposed parallel representation using a single vector for each spring parameter except for the fact that we don't need to keep coherency over all of the vectors... ; Although the tuple enable more versatile scene description. For example, the input indices can now come from other component while no difficult assembling is needed to build the spring list, we only need to link the data and specify one stiffness that will be generalized to all the springs. . So this is a **_first step_**. It can totally be merged for me. But we still have work to do. It could be done in this PR but I don't know how much time I'll be able to dedicate to it in the near future, and I don't want this work to get lost. Those are the two remaining tasks I've identified :; - [ ] Clean the API by removing one of the two representation. I would prefer to remove the `d_springs` data which would require a refactoring of the CUDA code and of the scenes.; - [ ] Clean classes that originally inherited from the StiffSpringFF (QuadBendingSprings, RegularGridSpringFF & TriangularBendingSprings) because until then, they were only considering a constant value of stiffness and damping for all their springs, turning a blind eye on the d_spring data. Now that we don't have a single attribute for stiffness and damping (as it was the case in the stiffSpringFF) but a vector of them, they should also be cleaned, along with their associated scenes. If those two points have not been addressed in this PR, it is because I think it is better to have the opinion of the @sofa-framework/reviewers on whether we only want to keep one representation and if so which one ?. PS: I've added a scene test for the CUDA spring implementation because it was never tested, I don't know if it was really working until here",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4649#issuecomment-2252777879:4629,test,test,4629,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4649#issuecomment-2252777879,2,['test'],"['test', 'tested']"
Testability,should we activate the tests on this PR?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1178106822:23,test,tests,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1178106822,1,['test'],['tests']
Testability,"signed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is still nice to have a record of the regressions that occur during the overall development, because you can then document better when you actually introduced changes in the code that are significant, which certainly is hard to track by unit tests only, unless you have",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1376,test,tests,1376,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243,1,['test'],['tests']
Testability,"simulation::DefaultAnimationLoop::step(sofa::core::ExecParams const*, double)+0x124) [0x7f6588263ed4]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::Simulation::animate(sofa::simulation::Node*, double)+0x54) [0x7f65882c9c44]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(sofa::Python_scene_test::run(sofa::Python_test_data const&)+0x2e1) [0x7f658ebb3791]; -> ../builds/pr/all/bin/Compliant_test(sofa::Python_scene_test_sofa_python_scene_tests_Test::TestBody()+0x2e) [0x54f76e]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*)+0x33) [0x7f658ebd7223]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::Test::Run()+0xb7) [0x7f658ebca917]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestInfo::Run()+0x9e) [0x7f658ebca9be]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestCase::Run()+0xa5) [0x7f658ebcaac5]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::internal::UnitTestImpl::RunAllTests()+0x248) [0x7f658ebcd198]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::UnitTest::Run()+0x54) [0x7f658ebcd454]; -> ../builds/pr/all/bin/Compliant_test(main+0xd4) [0x4aeb84]; -> /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf5) [0x7f6585034f45]; -> ../builds/pr/all/bin/Compliant_test() [0x4aec6f]; bash: line 1: 11528 Terminated ../builds/pr/all/bin/Compliant_test --gtest_output=xml:../builds/pr/all/tests/Compliant_test/report.xml 2>&1; /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/scripts/ci/tests.sh: error: Compliant_test ended with code 143; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:7343,test,testing,7343,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320,8,"['Test', 'test']","['TestCase', 'TestInfo', 'testing', 'tests']"
Testability,"since it is fixed with#2305 , can you point us out the comparison test that was failing @jnbrunet ? thanks 🙏",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2301#issuecomment-915388831:66,test,test,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2301#issuecomment-915388831,1,['test'],['test']
Testability,so the CI will not test SPH regression anymore?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4526#issuecomment-1967636838:19,test,test,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4526#issuecomment-1967636838,1,['test'],['test']
Testability,"sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralExplicitOdeSolver_test_RungeKutta4ExplicitSolverDynamic_test/rungeKutta4ExplicitSolverDynamicTest_medium_dt_0/); [UnitTests.SofaGeneralExplicitOdeSolver_test/RungeKutta4ExplicitSolverDynamic_test.rungeKutta4ExplicitSolverDynamicTest_small_dt/0](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralExplicitOdeSolver_test_RungeKutta4ExplicitSolverDynamic_test/rungeKutta4ExplicitSolverDynamicTest_small_dt_0/); [UnitTests.SofaGeneralImplicitOdeSolver_test/VariationalSymplecticExplicitSolverDynamic_test.variationalSymplecticExplicitSolverDynamicTest_small_dt_without_damping/0](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralImplicitOdeSolver_test_VariationalSymplecticExplicitSolverDynamic_test/variationalSymplecticExplicitSolverDynamicTest_small_dt_without_damping_0/); [UnitTests.SofaGeneralImplicitOdeSolver_test/VariationalSymplecticExplicitSolverDynamic_test.variationalSymplecticExplicitSolverDynamicTest_medium_dt_with_damping/0](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralImplicitOdeSolver_test_VariationalSymplecticExplicitSolverDynamic_test/variationalSymplecticExplicitSolverDynamicTest_medium_dt_with_damping_0/); [UnitTests.SofaGeneralImplicitOdeSolver_test/VariationalSymplecticExplicitSolverDynamic_test.variationalSymplecticExplicitSolverDynamicTest_high_dt_with_damping/0](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralImplicitOdeSolver_test_VariationalSymplecticExplicitSolve",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2652#issuecomment-1028969769:1615,test,testReport,1615,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2652#issuecomment-1028969769,1,['test'],['testReport']
Testability,"still a test failing : [UnitTests.Sofa/LoggingTest.checkBaseObjectMsgAPI](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3299/CI_CONFIG=fedora_clang,CI_PLUGINS=options,CI_TYPE=release/14/testReport/UnitTests/Sofa_LoggingTest/checkBaseObjectMsgAPI/)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3299#issuecomment-1282863772:8,test,test,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3299#issuecomment-1282863772,3,"['Log', 'test']","['LoggingTest', 'test', 'testReport']"
Testability,test BilateralInteractionConstraint_test failing due to the constraint which is not exactly met,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/459#issuecomment-387682199:0,test,test,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-387682199,1,['test'],['test']
Testability,test the component that will do the tests. Could be possible I think,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1594#issuecomment-743749466:0,test,test,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1594#issuecomment-743749466,2,['test'],"['test', 'tests']"
Testability,tested and approved on XUbuntu!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3031#issuecomment-1153699184:0,test,tested,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3031#issuecomment-1153699184,1,['test'],['tested']
Testability,tested it works !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3229#issuecomment-1219659843:0,test,tested,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3229#issuecomment-1219659843,1,['test'],['tested']
Testability,"thanks @alxbilger since it's a part of the code I am not familiar with, could you share some context with us?; anyway the change looks logical",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4063#issuecomment-1645576537:135,log,logical,135,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4063#issuecomment-1645576537,1,['log'],['logical']
Testability,thanks @epernod for the fix :+1: ; @monkeygame do not hesitate to [contribute a test](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/) corresponding to the failing case you had. Thanks for rising the issue :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3216#issuecomment-1217713653:80,test,test,80,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3216#issuecomment-1217713653,2,['test'],"['test', 'tests']"
Testability,"thanks @gaurab4163 for the change. Could you just check the reviews, there is 2 files to remove: a .log and .view; Then it is ok to go I think.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/639#issuecomment-388058388:100,log,log,100,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-388058388,1,['log'],['log']
Testability,thanks for reporting it @EtienneMenager I will test it locally with my old Mac! (I need tp find and recharge it 😄 ),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3089#issuecomment-1171590630:47,test,test,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3089#issuecomment-1171590630,1,['test'],['test']
Testability,"thanks for the quick reply @hugtalbot , I'll open a PR and add some regress tests as well.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1276#issuecomment-601107401:76,test,tests,76,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1276#issuecomment-601107401,1,['test'],['tests']
Testability,"the image distance filter test is un-related, so let's pass it to ready right @fredroy",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3393#issuecomment-1295131084:26,test,test,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3393#issuecomment-1295131084,1,['test'],['test']
Testability,the new factors/parameters were set arbitrary using qualitative tests as we still don't have automatic test on this plugin.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1435#issuecomment-672826026:64,test,tests,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1435#issuecomment-672826026,2,['test'],"['test', 'tests']"
Testability,the rebase did not suffice @epernod ; we let it to review but a unit test is still failing,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4194#issuecomment-1875002964:69,test,test,69,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4194#issuecomment-1875002964,1,['test'],['test']
Testability,"the unwanted behavior is describe in the commit of @damienmarchal : ; ""; [SofaKernel] FIX Bug in BoxROI that is not properly initialized. The code is automatically adding an alignedbox if nothing is provided in; the constructor. This kind of test make no sense in the constructor as; the ""isSet"" is sure to be set to false. The test should go in init or reinit. This commit fix that.; """,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/627#issuecomment-380386385:242,test,test,242,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/627#issuecomment-380386385,2,['test'],['test']
Testability,"there are 2 more unit tests failing on windows only, could you check if relevant to this PR or not. thx",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1151#issuecomment-533996059:22,test,tests,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1151#issuecomment-533996059,1,['test'],['tests']
Testability,"there are new tests failure:; ```. FastTriangularBendingSprings.scn:0, Dynamic Parser, Priority: Normal; --; [EdgeSetGeometryAlgorithms(edgeSetGeometryAlgorithms1)] Unable to get a valid topology from the context. ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/973#issuecomment-480168725:14,test,tests,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/973#issuecomment-480168725,1,['test'],['tests']
Testability,this has been solved.; [ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/731#issuecomment-409131896:45,test,tests,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/731#issuecomment-409131896,1,['test'],['tests']
Testability,"this will be very useful ... So, this PR would be perfect with some unitary tests",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-701293179:76,test,tests,76,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-701293179,1,['test'],['tests']
Testability,thx @jnbrunet for your answer.; Indeed there is a missmatch with the Tetra2TriangleTopologicalMapping but I removed that in another PR. In fact the mapping was inverting the triangles because their orientation in the tetra-container was not logical to have a well oriented surface. . Let see if it breaks something. At least people know on whom to shoot.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/878#issuecomment-455501878:241,log,logical,241,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/878#issuecomment-455501878,1,['log'],['logical']
Testability,"ties.; I just updated a scene that you can use to test the new components. The scene called ""TetrahedralCorotationalFEMForceField"" has two nodes. The first one uses ; the components ""VolumeTopologyContainer"" and ""CMTetrahedralCorotationalFEMForceField"" that are completely written using cgogn and ""MapTetrahedronSetTopologyContainer"" a compatibility wrapper that allows to use ""classical"" sofa components with cgogn. @damienmarchal concerning your questions:. - what the PR does precisely ?; - This PR adds a new data structure for handling meshes. This data structure is designed to handle dynamic (with topological changes) meshes.; - what is the existing state on this topic in Sofa (the title speak about dynamic topology...isn't there dynamic topology in Sofa since year) ?; - I think there is a pipeline for topological changes in Sofa. I do not know much about the efficiency of this pipeline. What I can say (I should provide figures) is that this data structure is as effective as the sofa ones in ""static"" scenarios and more effective and reliable in ""dynamic"" scenarios.; - how this PR handle the problem,; - by changing to a more appropriate data structure; - use CGOGN library... what is this CGOGN library ?; - a topological modeling kernel (see https://cgogn.github.io). I am not sure you need more information about it.; - argument on why the PR is it useful/mandatory/improvement, trying to convince people why they should spend time testing it,; - this work has been in progress since 3 years now. His interest has already been debated. I do not want to debate an infinite time on it. If someone is interested in topological changes, it should save him time.; - provide some idea on how invasive the PR will be (non breaking at all, breaking the SofaCore API, breaking existing scenes); - depends on the meaning of beaking. It does not change the sofa API for topology classes but it adds a hierarchy of classes in the core with a new API and a compatibility layer with the old one.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402690583:1568,test,testing,1568,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402690583,1,['test'],['testing']
Testability,"tion format is used in a lot of other software (GUIs, scene processing tools written in python, perl and C++). If you change the behavior of the default serialization mechanism all of them will stop working and required to be updated. This is a very, very, very nasty thing to impose to other users of Sofa. A PR doing has no changes to be accepted. . Actually tests is part of our guard line because they validates the API compatibility and allow us to detect changes that breaks it. The existing tests should be considered as validating the ""the existing"" sofa API. It was normal to have them to fail on your PR because it shows that the PR was breaking the compatibility. . I really like the idea of keeping the old serialization behavior as it is and add the other deserialization as an extra feature. This will make the whole PR transparent for users that don't want to update their code base. It thus it can be merged very quickly. . About the test: ; You are right that it would be better if we had test specific tests to validate the serialization alone.; I personally would like to have tests to validate that getValueString() return ""1 2 3"" and that getValueAsPythonString() return ""[1 2 3]"" . And also as you said having tests to validate against the real values instead of their serialization would be nice. . . About the branches:; The rule is to never work directly on the sofa-framework repository. There is no reason to do so (if you really want to make two PR one in anatoscope and one in sofa ... you need to to that from two branches located in the anatoscope repo). Otherwise this consume a lot of disk space on the CI servers that we have to fix manually. Now fundamentally from my experience in playing with PR and branches I think that making two PR will be very complex for you to handle. Because the PR you issued to anatoscope and the one you issued to sofa-framework may diverge ... so it will cost you to switch from one to the other and handle the changes. . PS: I'm not v",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626:1278,test,test,1278,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626,3,['test'],"['test', 'tests']"
Testability,"to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py' not parsable); ../applications/plugins/SofaTest/Python_test.cpp:263: Failure; Failed; python error; [ FAILED ] Batch/Python_scene_test.sofa_python_scene_tests/0, where GetParam() = 48-byte object <81-00 00-00 00-00 00-00 7E-00 00-00 00-00 00-00 00-4D 60-FA C4-7F 00-00 80-4D 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00> (1051 ms); [----------] 1 test from Batch/Python_scene_test (1051 ms total); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:2372,test,test,2372,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176,1,['test'],['test']
Testability,ubuntu_gcc_options seems to have a one additional scene-tests error but I can find out which one.; Else I think it's ready right @alxbilger ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4430#issuecomment-1903614639:56,test,tests,56,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4430#issuecomment-1903614639,1,['test'],['tests']
Testability,ude <sofa/component/collision/detection/algorithm/BruteForceBroadPhase.h>; #include <sofa/component/collision/detection/algorithm/BVHNarrowPhase.h>; #include <sofa/component/collision/detection/algorithm/DefaultPipeline.h>. #include <sofa/component/collision/detection/intersection/NewProximityIntersection.h>. #include <sofa/component/collision/response/contact/DefaultContactManager.h>. #include <sofa/component/collision/geometry/PointModel.h>. #include <sofa/simulation/graph/DAGNode.h>; #include <sofa/simulation/graph/DAGSimulation.h>; #include <sofa/simulation/graph/init.h>. #include <sofa/simulation/DefaultAnimationLoop.h>. #include <sofa/component/statecontainer/MechanicalObject.h>. #include <sofa/core/objectmodel/Context.h>; #include <sofa/simulation/Node.h>; #include <sofa/simulation/Simulation.h>; #include <SofaComponentAll/initSofaComponentAll.h>. #include <sofa/helper/system/FileRepository.h>; #include <sofa/helper/logging/LoggingMessageHandler.h>; #include <sofa/core/logging/PerComponentLoggingMessageHandler.h>; #include <sofa/helper/BackTrace.h>. using namespace sofa::defaulttype;. using sofa::simulation::Node;; using sofa::simulation::graph::DAGNode;; using sofa::helper::system::DataRepository;. // collision pipeline; using sofa::component::collision::detection::algorithm::DefaultPipeline;; using sofa::component::collision::detection::algorithm::BruteForceBroadPhase;; using sofa::component::collision::detection::algorithm::BVHNarrowPhase;; using sofa::component::collision::detection::intersection::NewProximityIntersection;; using sofa::component::collision::response::contact::DefaultContactManager;; using sofa::component::collision::geometry::PointCollisionModel;. // mechanical object; using sofa::component::statecontainer::MechanicalObject;; using sofa::defaulttype::StdVectorTypes;; using sofa::type::Vec;. using sofa::core::behavior::MechanicalState;; using sofa::core::State;; using sofa::core::objectmodel::New;; using sofa::core::objectmodel::Data;. usi,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1254291147:1575,log,logging,1575,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1254291147,1,['log'],['logging']
Testability,"unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected (1 ms); [ RUN ] SofaPython",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:4018,test,tests,4018,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['tests']
Testability,"waiting to compile/test, to be sure 👮‍♂️",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1781#issuecomment-773620434:19,test,test,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1781#issuecomment-773620434,1,['test'],['test']
Testability,what test should be performed to check the performance impact @damienmarchal ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2285#issuecomment-892534841:5,test,test,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2285#issuecomment-892534841,1,['test'],['test']
Testability,"what was going wrong with this test, I can see only message refactoring in the diff.; No info in the PR description.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1097#issuecomment-509993235:31,test,test,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1097#issuecomment-509993235,1,['test'],['test']
Testability,"working fine on my side, @hugtalbot could you test it on linux?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2096#issuecomment-1562539913:46,test,test,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2096#issuecomment-1562539913,1,['test'],['test']
Testability,yes because the QWT option is never tested I guess (but SofaGuiQt is),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1132#issuecomment-526574191:36,test,tested,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1132#issuecomment-526574191,1,['test'],['tested']
Testability,yes but not the tests or I'm missing something?; And @hugtalbot changed 2 scenes.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/648#issuecomment-408846977:16,test,tests,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/648#issuecomment-408846977,1,['test'],['tests']
Testability,yes the change of trianglesInTetrahedron need to be propagated in the tests. I will check that.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/985#issuecomment-481152688:70,test,tests,70,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/985#issuecomment-481152688,1,['test'],['tests']
Testability,"yes we can change the test to remove` badDim` as now the dim is not computed at the same time. No, `_n[i] = 1` works. `n = [1; 5; 5]` give a plan grid of 25 cells. -> Dim = 2",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/270#issuecomment-305446954:22,test,test,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-305446954,1,['test'],['test']
Testability,"yes, that was what I mean by moving the test in the FEM.; No problem to have regularGrid in 1D, but this won't be possible for sphere and cylindricalGrid",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/163#issuecomment-293814344:40,test,test,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-293814344,1,['test'],['test']
Testability,"you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is still nice to have a record of the regressions that occur during the overall development, because you can then document better when you actually introduced changes in t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1274,test,tests,1274,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243,2,['test'],"['tested', 'tests']"
Testability,"ython version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Components/Components.py ; ModuleNotFoundError: No module named 'Sofa.Components'. At:; Components.py(4): <module>; <frozen importlib._bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:2939,Test,TestCase,2939,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['Test'],['TestCase']
Testability,─ BindingsTargets.cmake; │   │   ├── BindingsTargets-debug.cmake; │   │   ├── PluginConfig.cmake; │   │   ├── PluginTargets.cmake; │   │   ├── PluginTargets-debug.cmake; │   │   ├── SofaPython3Config.cmake; │   │   └── SofaPython3ConfigVersion.cmake; │   ├── libSofaPython3.so; │   └── python3; │   └── site-packages; │   ├── Sofa; │   │   ├── Components.cpython-39-x86_64-linux-gnu.so; │   │   ├── constants; │   │   │   ├── __init__.py; │   │   │   ├── KeyCode.py; │   │   │   └── Key.py; │   │   ├── Core.cpython-39-x86_64-linux-gnu.so; │   │   ├── Gui.cpython-39-x86_64-linux-gnu.so; │   │   ├── Helper.cpython-39-x86_64-linux-gnu.so; │   │   ├── __init__.py; │   │   ├── livecoding.py; │   │   ├── prefab.py; │   │   ├── PyTypes; │   │   │   ├── __init__.py; │   │   │   ├── RGBAColor.py; │   │   │   └── Vec3.py; │   │   ├── Simulation.cpython-39-x86_64-linux-gnu.so; │   │   ├── SofaBaseTopology.cpython-39-x86_64-linux-gnu.so; │   │   ├── SofaDeformable.cpython-39-x86_64-linux-gnu.so; │   │   ├── test.py; │   │   └── Types.cpython-39-x86_64-linux-gnu.so; │   ├── SofaRuntime; │   │   ├── __init__.py; │   │   └── SofaRuntime.cpython-39-x86_64-linux-gnu.so; │   ├── SofaTypes; │   │   ├── __init__.py; │   │   └── SofaTypes.cpython-39-x86_64-linux-gnu.so; │   └── splib; │   ├── animation; │   │   ├── animate.py; │   │   ├── easing.py; │   │   └── __init__.py; │   ├── caching; │   │   ├── cacher.py; │   │   └── __init__.py; │   ├── __init__.py; │   └── meshing; │   ├── cgal_sofa.py; │   ├── data; │   │   └── meshes; │   │   ├── gallbladder.stl; │   │   ├── parametric_mesh_example.step; │   │   └── surface_mesh_example.stl; │   ├── gmsh_sofa.py; │   ├── __init__.py; │   └── pygalmesh_sofa.py; └── share; └── SofaPython3; ├── documentation; │   ├── Contributing.rst; │   ├── CustomModule.rst; │   ├── index.rst; │   ├── install.rst; │   ├── SofaModule.rst; │   └── SofaPlugin.rst; └── examples; ├── backend_pygame.py; ├── BaseCamera.py; ├── CMakeLists.txt; ├── ControllerScene.py; ├── e,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592:5192,test,test,5192,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592,1,['test'],['test']
Testability,"⚠️ ⚠️ ⚠️ For now, some unit tests on StaticSolver are failing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4370#issuecomment-1862362599:28,test,tests,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4370#issuecomment-1862362599,1,['test'],['tests']
Testability,👍; I remember it was at a time where Intel driver and Linux was crashing #526 with Core profile (I guess?); Maybe a bug in mesa at that time or the intel driver.; Anyway we would need people using Intel & Linux to test this on their setup.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1690#issuecomment-753879358:214,test,test,214,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1690#issuecomment-753879358,1,['test'],['test']
Testability,😄 ; I do not know how to proceed for you to test it. Maybe I can add test scenes to start somewhere.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-399515911:44,test,test,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-399515911,2,['test'],['test']
Testability,🥹; ```; Test Result (2 failures / +1); SceneTests.applications/plugins/SoftRobots/examples/tutorials/Tripod/myproject.elasticbody.py; SceneTests.applications/plugins/SoftRobots/examples/tutorials/Tripod/myproject.step6.py; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1630092082:8,Test,Test,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1630092082,1,['Test'],['Test']
Usability," NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the patch; - open a PR. ## Next steps; - Finalize and merge Sofa.Component.Utils PR; - Open a new PR: Sofa.Helper.Bvh; - Continue with SofaHelper refactoring. ----------. Any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:2252,feedback,feedback,2252,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811,1,['feedback'],['feedback']
Usability," Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramework; - Progress within Sofa.Helper.*; Assign tasks to all volunteers before STC#5. ----------. As always, any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:1671,simpl,simplify,1671,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223,3,"['clear', 'feedback', 'simpl']","['clear', 'feedback', 'simplify']"
Usability," Yes, all call-super need to be fixed that way (which I didn't in the PR), I will not do that unless it is clear we are really going to do such a breaking change in the sofa code base ;) . > Currently, the fact that `init()` is no longer virtual is breaking. I had the same problem in https://github.com/sofa-framework/sofa/pull/3242. Do you have an idea to guide the developers in the update of their code?. I'm not sure I get the point . EDIT: (....I'm reading 3242 to see if I understand). ; EDIT2: the easy non breaking strategy is to use new names for the base virtual function eg: newInit (not sure we want that). (good code use override so if we keep the old name the code will breaks will be detected at compile time) but this is probably not enough... > Finally, I don't like `doBaseObjectInit`, and it is a problem of this pattern: we need to invent new names for delegate methods even though they are similar to the initial method. Instead of ""inventing"" new names for delegates methods I strongly advocate to rely on single and clear name scheme. . Currently I'm doing:; ```console; do _ ClassThatDelegatesToYou _ MethodDelegated; ```; so ```BaseObject::init()``` become ```doBaseObjectInit()``` (which I interpret as ""do"" the init as requested by BaseObject). . The underlying idea of the naming scheme is that with a first sight we get a lot of information... the (do) show the intention of the code and the pattern used, while the class's name indicates where to look at to get documentation on what the ""methodDelegated"" should do (to know contract the child has to fulfill). . The advantage I see with that naming scheme is that it works with chain of delegation. So the code should look like:; ```cpp; BaseObject::init() /// non virtual ; {; // I do the stuff shared by all child ; checkWhatever();; ; // ask my child to do their specific init, ; doBaseObjectInit(); }. BarycentricMapping::doBaseObjectInit() final; {; // I do the stuff shared by all of my child ; checkWhatever();;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252323162:1543,clear,clear,1543,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252323162,1,['clear'],['clear']
Usability," by which state, and allow for correct initialization and most importantly topological changes propagation. One issue with the initial implementation, associating a state to the first topology found in its parents and then ignoring it if it is not in the same context (hopefully in all codes using state->m_topology, but who checked?), is that this make it impossible to share the same topology (and topological changes) with multiple states in different (children) nodes. One such example is when you use an IdentityMapping (or a Rigid <-> Vec3 mapping or any other mapping that produce the same number of outputs as its inputs), previously to get correct topology association and changes propagation you would need to replicate the topology (and the topological mappings) with a topology both before and after the mapping (but beware if they end up with different sizes, or updated in the wrong order...). With our changes, there is a clear(er) method BaseContext::getActiveMeshTopology() that you can call from any context and will give you the topology that is relevant for this context, i.e. either the topology at this exact node, or from a parent node but only if there is no mapping in between (or if there are only mappings whose sameTopology() method returns true). Using this method, state->l_topology is initialized (and you can inspect its result in the GUI), and if it is not NULL it will be used by all computations for the state without extra hidden checks. Now back to this bug, the last issue here was that the tested mapping (TetrahedronVolumeMapping) was not preserving the topology, but its output state was somehow linked to its input topology. The solution is not to go back to the old (broken) behavior, but instead to understand what is the actual root cause here. Theoretically, if the logic described above was behaving correctly, the output state would not be able to see the input topology because of the use of getActiveMeshTopology() and the fact that the mapping sameTo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201:1122,clear,clear,1122,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201,1,['clear'],['clear']
Usability," can read, Jeremie suggested to use OBJExporter not MeshObj to export visual things and I didn't changed this behavior. And there is no MeshObjExporter in sofa. Here is the current situation in Sofa: ; In sofa/helper/io:; MeshObj (a reading class, not a saving one) ; MeshStl (a reading class, not a saving one) . SofaExporter:; - MeshExporter (a writing component that focus on tetrahedral mesh forme as: VTKXML, VTK, Gmesh, Netgen, TetGen) All the format are coded in it. ; - OBJExporter (a writing component with a visitor that dump visual scene); - STLExporter ; - VTKExporter . As far as I can say the thee later are duplicating a lot of boiler plate code. The three reason why I created this BaseSimulationExporter was: to factorize theis code. To enforce a consistent behavior for each of them (eg having one component that create the missing ""directory"" while the other does not is too bad from a UX perspective). Finally it also help in writing the python binding because only one binding is needed instead of three. This is also consistent with what exists in SofaLoader where both MeshOBJLoader & MeshVTKLoader inherit from MeshLoader. . My current thinking and target is that we need to have more symetrical implementation between SofaLoader and SofaExporter. ; Eg: ; in SofaExporter: ; - SceneExporter (rename or inherit from BaseSimulationExporter) ; - SceneOBJExporter (the existing OBJExporter inheriting from SceneExporter); - SceneSTLExporter (the existing STLEXporter inheriting from SceneExporter); - ...; - MeshExporter (base class); - MeshTetGenExporter (result from splitting the MeshExporter); - MeshVTKExporter (result from splitting the MeshExporter). I don't have a lot of time to this so I prefer to stay focus on the ""SceneExporter"" (so STL & OBJ ones) and left the MeshExporter untouched for the moment. The rename with Scene* vs Mesh* is to clearly show the component that have a visitor in them. . If you think it is ok I will do the cleaning of STLExporter as well...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236:1954,clear,clearly,1954,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236,1,['clear'],['clearly']
Usability," load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin; static std::string classes = sofa::core::ObjectFactory::getInstance()->listClassesFromTarget(sofa_tostring(SOFA_TARGET));; return classes.c_str();; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:1695,simpl,simple,1695,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188,1,['simpl'],['simple']
Usability," of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the `init()` functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the _right_ time: the program will work correctly by design, not by coincidence;. * **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the `main()` function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. * **choice** (or whatever): with an explicit call to `init()`, an application writer gets to decide both *whether* and *when* to initialize SOFA. ### Now... In the end, I didn't actually bother to search for any single piece of initialization code in SOFA and move it into the appropriate init() function, so the init() functions are pretty light, but the setup is there. Also, the static-dynamic-initialization trick is used all over the place in SOFA, and what happens in the init() functions is ridiculous compared to all the code that probably runs when SOFA is loaded, so here again it is a drop in the ocean, but, I think, a step in the right direction. ### Anyway... > What I don't understand is why the above code snipped does not simply cleanup() the library in the destructor, since the latter is being called while the library unloads and this is the last chance to actually clean things up, instead of (trying to) emit a warning while the whole program is being terminated. @maxime-tournier The CleanupCheck thingy is disposable; it's a just safeguard, a way to tell developpers about the `init()` and `cleanup()` function. You're right, this is almost the last chance to call cleanup(), but no _guarantee_ of correctness. Hope this helps,; Marc Legendre. --. > trying to call `std::exit` in some plugin. _Sweating_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946:1969,simpl,simply,1969,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946,1,['simpl'],['simply']
Usability," p1, ..., pn]| |p: [p0, p1, ..., pm]|; |r: [r0, r1, ..., rn]| |r: [r0, r1, ..., rm]|; |q: [q0, q1, ..., qn]| |q: [q0, q1, ..., qm]|; +--------------------+ +----------+---------+; |; mapping1 | mapping2; +--------------+-------------+; | |; +----------+---------+ +----------+---------+; | MO3 | | MO4 |; +--------------------+ +--------------------+; |x: [x0, x1, ..., xl]| |x: [x0, x1, ..., xo]|; |p: [p0, p1, ..., pl]| |p: [p0, p1, ..., po]|; |r: [r0, r1, ..., rl]| |r: [r0, r1, ..., ro]|; |q: [q0, q1, ..., ql]| |q: [q0, q1, ..., qo]|; +--------------------+ +--------------------+; ```. Version 1 will do:; 1. Launch a visitor in the CG's subgraph (`x.peq(p,alpha);`); **MO 1** : x = x + alpha p; **M0 2** : x = x + alpha p; **MO 3** : x = x + alpha p; **MO 4** : x = x + alpha p; 2. Launch a visitor in the CG's subgraph (`r.peq(q,-alpha); `); **MO 1** : r = r - alpha q; **M0 2** : r = r - alpha q; **MO 3** : r = r - alpha q; **MO 4** : r = r - alpha q. Version 2 will do:; 1. Launch a visitor in the CG's subgraph; **MO 1** :; x = x + alpha p; r = r - alpha q; **MO 2** :; x = x + alpha p; r = r - alpha q; **MO 3** :; x = x + alpha p; r = r - alpha q; **MO 4** :; x = x + alpha p; r = r - alpha q. Unless I'm missing something, the optimized version only removes one subgraph visit and allows the compilator to *\***maybe**\** optimize two subsequent operations on vectors. However, I don't think the compiler will actually do something here as the `MechanicalState::vMultiOp` simply makes two calls to `MechanicalState::vOp` which, well, is a virtual function and can't be inlined. To the question to whether or not we should keep one or the other, I guess we would have to benchmark it (use a scene with multiple top level mechanical object's, and multiple mapping levels). If the optimized version do not brings a lot of speed (which would be my guess since the cost of a visit isn't very big, but I may be wrong), I would remove the optimization as it is quite confusing for the reader.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191:2723,simpl,simply,2723,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191,1,['simpl'],['simply']
Usability," to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They don't have the timer prefix.. so sound as if they are more general than timing function. ; - in Sofa_timerSetEnabled(PyObject* /*self*/, PyObject *args) you are passing an int argument to get a bool...does it means that timeSetEnable(..., True) will not work ? ; If this is the case the following code is probably better as it allow it:; ```cpp; PyObject* o;; if(!PyArg_ParseTuple(args, ""sO"", &id, &o)){...}; advancedTimer::setEnabled(id, PyObject_IsTrue(o));; ```; - in function taking a string description it would be nicer to warn users or the calling code when an invalid name is provided so that he can locate & fix his scene/script. ; ```cpp; /// In void AdvancedTimer::setOutputType(IdTimer id, std::string type); else {; msg_warning(""AdvancedTimer"") << ""Unable to set the type to '""<< type << ""' Switching to the default 'stdout' output. Other valid types are [stdout, JSON, LJSON]."" ; data.timerOutputType = STDOUT;; }; ```. Hope thi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:1894,feedback,feedback,1894,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977,2,"['clear', 'feedback']","['clear', 'feedback']"
Usability," unfortunately. Eigen matrices have a nice compile-time introspection. Hence it would be possible to do something like:. ```c++; template <Derived>; struct EigenMatrixTypeInfo {; /// 1 if this type has valid infos; static constexpr auto ValidInfo = 1; ; ; /// 1 if this type has a fixed size -> always 1 single pair of vec3; static constexpr auto FixedSize = (Derived::RowsAtCompileTime != Eigen::Dynamic ? 1 : 0); ; ; /// 1 if the constructor is equivalent to setting memory to 0; static constexpr auto ZeroConstructor = (std::is_base_of_v<Eigen::SparseMatrixBase<Derived>, Derived> ? 1 : 0);; ; /// 1 if copying the data can be done with a memcpy; static constexpr auto SimpleCopy = 0; ; ; /// 1 if the layout in memory is simply N values of the same base type; static constexpr auto SimpleLayout = 0;; ; /// 1 if this type uses integer values; static constexpr auto Integer = std::is_integral_v<Derived::Scalar>;; ; /// 1 if this type uses scalar values; static constexpr auto Scalar = std::is_floating_point_v<Derived::Scalar>;; ; /// 1 if this type uses text values; static constexpr auto Text = 0;; ; /// 1 if this type uses copy-on-write -> it seems to be THE important; static constexpr auto CopyOnWrite = 0;; ; /// 1 if this type is a container; static constexpr auto Container = 1;; ; /// largest known fixed size for this type, as returned by size(); static constexpr auto Size = (Derived::ColsAtCompileTime == Eigen::Dynamic ? 0 : Derived::ColsAtCompileTime);; ; /// Number of elements in the container, or the 2nd dimension for arrays; static size_t size() { ; return (Derived::ColsAtCompileTime == Eigen::Dynamic ? 0 : Derived::ColsAtCompileTime); ; }; ; /// Size of the smalest single element in the container; static size_t byteSize() { ; return sizeof(Derived::Scalar); ; }; ; /// Total number of elements; static size_t size(const DataType & data) {; return data.rows();; }; ; static bool setSize(DataType & data, size_t size) { ; if constexpr (Derived::ColsAtCompileTime == Eigen::D",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-885687022:698,Simpl,SimpleCopy,698,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-885687022,3,"['Simpl', 'simpl']","['SimpleCopy', 'SimpleLayout', 'simply']"
Usability,"# Deprecation macros. ## The 2 base macros. **Do not use them directly in your code**, see ""how to use them"" below. `SOFA_ATTRIBUTE_DEPRECATED(deprecateDate, removeDate, toFixMsg)`; To be used to trigger a deprecation warning. It is a simple `[[deprecated]]` interface.; Warns that something; &nbsp;&nbsp;&nbsp; - is DEPRECATED (so still usable) since `deprecateDate`; &nbsp;&nbsp;&nbsp; - will be removed on `removeDate`; and gives the toFixMsg instructions to fix the deprecation warning.; ; `SOFA_ATTRIBUTE_DISABLED(deprecateDate, disableDate, toFixMsg)`; To be used jointly with `= delete` to trigger an error. It is a flavored `[[deprecated]]` interface.; Warns that something ; &nbsp;&nbsp;&nbsp; - is DISABLED (so not usable anymore) since `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (curr",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:235,simpl,simple,235,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249,3,"['simpl', 'usab']","['simple', 'usable']"
Usability,) :; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 0 0 1000 39.40 89.65 53.81 3.72 53810.7 100 TOTAL; 1 0 1 39.40 89.63 53.81 3.72 53.81 99.99 .Simulation::animate; 2 0.01 1 0 0.02 0 0 0 0 ..BehaviorUpdatePositionVisitor; 2 0.01 1 0 0.02 0 0 0 0.01 ..UpdateInternalDataVisitor; 2 0.01 1 0 0.04 0.01 0 0.01 0.01 ..resetConstraint; 2 0.02 1 0 0.07 0 0 0 0 ..collision; 2 0.02 1 0 0 0 0 0 0 ..propagateIntegrateBeginEvent; 2 0.03 1 0 0.02 0 0 0 0 ..beginIntegration; 2 0.03 1 0 0.06 0 0 0 0 ..buildConstraintMatrix; 2 0.03 1 0 0.02 0 0 0 0.01 ..accumulateMatrixDeriv; 2 0.04 1 39.17 89.35 53.58 3.72 53.58 99.57 ..solve; 3 0.04 1 39.17 89.34 53.57 3.72 53.57 99.56 ...Mechanical; 4 0.07 1 2.11 3.55 2.36 0.14 2.36 4.38 ....ComputeForce; 4 2.42 1 1.14 3.35 1.30 0.18 1.30 2.41 ....ComputeRHTerm; 4 3.72 1 33.78 68.54 35.78 1.50 35.78 66.50 ....MBKBuild; 5 3.73 1 33.77 68.51 35.78 1.50 35.78 66.48 .....CG-setSystemMBKMatrix; 6 3.73 1 0.03 0.14 0.04 0.01 0.04 0.07 ......getContributors; 6 3.77 1 0.02 0.21 0.02 0.01 0.02 0.04 ......buildMappingGraph; 6 3.79 1 0.26 1.60 0.70 0.10 0.70 1.29 ......InitializeSystem; 7 3.79 1 0.09 1.18 0.36 0.06 0.36 0.67 .......resizeSystem; 7 4.16 1 0.01 0.69 0.30 0.04 0.30 0.56 .......clearSystem; 7 4.46 1 0.02 0.17 0.02 0.01 0.02 0.05 .......initializeLocalMatrices; 6 4.49 1 33.12 68.12 35.01 1.48 35.01 65.06 ......AssembleSystem; 7 4.49 1 33.09 47.99 34.95 1.13 34.95 64.95 .......buildMatrices; 8 4.49 1 32.71 47.75 34.52 1.10 34.52 64.16 ........buildStiffness; 8 39.02 1 0.23 1.13 0.41 0.08 0.41 0.77 ........buildMass; 8 39.43 1 0 0.02 0 0 0 0.01 ........buildDamping; 8 39.44 1 0 0.02 0 0 0 0 ........buildGeometricStiffness; 7 39.44 1 0 0 0 0 0 0 .......projectMappedMatrices; 7 39.44 1 0.02 20.12 0.05 0.63 0.05 0.09 .......applyProjectiveConstraint; 4 39.51 1 0.85 21.84 14.06 3.56 14.06 26.13 ....MBKSolve; 5 39.83 1 0.51 21.43 13.67 3.56 13.67 25.41 .....CG-Solve; 4 53.57 1 0.02 0.07 0.02 0 0.02 0.05 ....UpdateVAndX; ```. Thanks for having tried!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717164532:3724,clear,clearSystem,3724,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717164532,1,['clear'],['clearSystem']
Usability,+1 for UX improvement of such importance.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3914#issuecomment-1573757731:7,UX,UX,7,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3914#issuecomment-1573757731,1,['UX'],['UX']
Usability,+1. . We probably simply need to install the autodump trick somewhere in Sofa_test.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/149#issuecomment-276515093:18,simpl,simply,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/149#issuecomment-276515093,1,['simpl'],['simply']
Usability,"+1; Having a clean, generic and intuitive method for marchingCube would be awesome.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/496#issuecomment-339449132:32,intuit,intuitive,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/496#issuecomment-339449132,1,['intuit'],['intuitive']
Usability,", ""mo""}, {""src"", ""@grid""}}).get(); );; createObject(root, ""TetrahedronSetTopologyContainer"", {{""name"", ""topology""}});; createObject(root, ""TetrahedronSetTopologyModifier"");; createObject(root, ""TetrahedronSetGeometryAlgorithms"");; createObject(root, ""Hexa2TetraTopologicalMapping"", {{""input"", ""@grid""}, {""output"", ""@topology""}});; auto sofa_mass = dynamic_cast<sofa::component::mass::MeshMatrixMass<sofa::defaulttype::Vec3Types, sofa::defaulttype::Vec3Types::Real> *> (; createObject(root, ""MeshMatrixMass"", {{""name"", ""sofa_mass""}, {""topology"", ""@topology""}, {""massDensity"", ""2""}, {""lumping"", ""false""}}).get(); );; auto sofa_mass_diagonal = dynamic_cast<sofa::component::mass::MeshMatrixMass<sofa::defaulttype::Vec3Types, sofa::defaulttype::Vec3Types::Real> *> (; createObject(root, ""MeshMatrixMass"", {{""name"", ""sofa_mass_diagonal""}, {""topology"", ""@topology""}, {""massDensity"", ""2""}, {""lumping"", ""true""}}).get(); ); ; getSimulation()->init(root.get());. // Get residual vectors; DataVecDeriv d_f (VecDeriv(mo->getSize(), {0, 0, 0}));; DataVecDeriv d_f_dia (VecDeriv(mo->getSize(), {0, 0, 0}));. sofa_mass->addForce(&mechanical_parameters, d_f_sofa, mo->x, mo->v);; sofa_mass_diagonal->addForce(&mechanical_parameters, d_f_sofa_dia, mo->x, mo->v);. // Map residual vectors with Eigen to facilitate norm computations; Eigen::Map<const Eigen::Matrix<Real, Eigen::Dynamic, 3, Eigen::RowMajor>> f ((d_f.getValue().data()->data()), mo->getSize(), 3);; Eigen::Map<const Eigen::Matrix<Real, Eigen::Dynamic, 3, Eigen::RowMajor>> f_dia ((d_f_dia.getValue().data()->data()), mo->getSize(), 3);. // Compare the norms; EXPECT_DOUBLE_EQ(f.norm(), f_dia.norm());; }; ```. > Maybe the used topology doesn't have edges?. An edge topology should not change anything here. We are integrating the mass density times g over the volumetric domain (tetra). If you are adding edges, then you are integrating a second time the region of an edge (the edge is a part of the tetra's volume). Let me know if something isn't clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901856585:3002,clear,clear,3002,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901856585,1,['clear'],['clear']
Usability,",. I just had a look in the code and the associated paper ([link](https://hal.inria.fr/file/index/docid/394480/filename/NPF05.pdf)). @alxbilger, there are two `computeStress` methods in TriangularFEMForceField, with the following signatures :; ```; void computeStress(type::Vec<3,Real> &stress, Index elementIndex);; ```; and; ```; void computeStress(type::Vec<3,Real> &stress, const MaterialStiffness &K, const type::Vec<3,Real> &strain);; ```; Only the first one seems to use the same pattern as in `computeForce` (with the call to `computeStrainDisplacement` conditioned by `_anisotropicMaterial`), in case of small deformation, which is - as you pointed out - incoherent with what is in `computeForce`.; However this `computeStress` method with this signature is apparently used only in ; ```; void computeStressAlongDirection(Real &stress_along_dir, Index elementIndex, const Coord &direction);; ```; which itself is used only in both `computeStressAcrossDirection` methods, and (finally) these are apparently not called anywhere.; So, _bottomline_: even though the code in `computeStress` is incoherent with the code in `computeForce`, it's actually not used and - I guess - should be cleaned rather than made coherent. Regarding the initial issue, what I understand from the paper is that the strain-displacement matrix **should be updated at each time step** in case of large deformations. It seems to be clearly stated in the introduction, and demonstrated later in the text (section 2.3). I have a doubt if this is necessary in case of small displacement (for me the paper focuses on large deformation), but even in this case, the current implementation is not coherent (the update should be made in case of large displacement and could be saved in case of small displacement).; I think it's worth highlighting that it was actually the case at first, but it seems to have been changed in this [commit](https://github.com/sofa-framework/sofa/commit/b7d68ef394f703957e7a00037f88d7abeed82d24).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2706#issuecomment-1056847653:1418,clear,clearly,1418,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2706#issuecomment-1056847653,1,['clear'],['clearly']
Usability,"- PoissonContainer/StiffnessContainer are already present in SofaSimpleFem; - It should follow guidelines from PluginExample (name, folder, etc)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1618#issuecomment-741665270:95,guid,guidelines,95,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1618#issuecomment-741665270,1,['guid'],['guidelines']
Usability,- there are some different kind of ` { ... } ` against the guidelines but it was there before so it is not really the point of the PR; - I would put the content of the specialized(?) inl files directly into the associated cpp.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1225431851:59,guid,guidelines,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1225431851,1,['guid'],['guidelines']
Usability,"3 0 0 0 0.01 ..UpdateInternalDataVisitor; 2 0.01 1 0 0.04 0.01 0 0.01 0.01 ..resetConstraint; 2 0.02 1 0 0.02 0 0 0 0 ..collision; 2 0.03 1 0 0.03 0 0 0 0 ..propagateIntegrateBeginEvent; 2 0.03 1 0 0.02 0 0 0 0 ..beginIntegration; 2 0.03 1 0 0.07 0 0 0 0 ..buildConstraintMatrix; 2 0.03 1 0 0.03 0.01 0 0.01 0.01 ..accumulateMatrixDeriv; 2 0.04 1 40.07 109.99 72.48 8.91 72.48 99.65 ..solve; 3 0.04 1 40.07 109.98 72.47 8.90 72.47 99.65 ...Mechanical; 4 0.07 1 2.07 4.47 2.45 0.33 2.45 3.37 ....ComputeForce; 4 2.52 1 1.11 3.14 1.37 0.29 1.37 1.89 ....ComputeRHTerm; 4 3.89 1 34.04 71.94 36.80 2.11 36.80 50.60 ....MBKBuild; 5 3.90 1 34.03 71.91 36.79 2.11 36.79 50.58 .....CG-setSystemMBKMatrix; 6 3.90 1 0.03 0.21 0.04 0.01 0.04 0.05 ......getContributors; 6 3.94 1 0.02 0.17 0.02 0.01 0.02 0.03 ......buildMappingGraph; 6 3.96 1 0.25 2.56 0.72 0.17 0.72 0.98 ......InitializeSystem; 7 3.97 1 0.06 1.35 0.36 0.10 0.36 0.50 .......resizeSystem; 7 4.33 1 0.01 1.22 0.32 0.08 0.32 0.44 .......clearSystem; 7 4.65 1 0.02 0.27 0.03 0.01 0.03 0.04 .......initializeLocalMatrices; 6 4.68 1 33.38 71.55 36 2.08 36 49.49 ......AssembleSystem; 7 4.68 1 33.35 49.36 35.94 1.80 35.94 49.41 .......buildMatrices; 8 4.68 1 32.79 49.09 35.44 1.78 35.44 48.72 ........buildStiffness; 8 40.13 1 0.25 1.33 0.49 0.12 0.49 0.67 ........buildMass; 8 40.61 1 0 0.02 0 0 0 0.01 ........buildDamping; 8 40.62 1 0 0.02 0 0 0 0 ........buildGeometricStiffness; 7 40.62 1 0 0.02 0 0 0 0 .......projectMappedMatrices; 7 40.63 1 0.02 22.18 0.05 0.70 0.05 0.07 .......applyProjectiveConstraint; 4 40.69 1 1.38 43.66 31.78 8.31 31.78 43.69 ....MBKSolve; 5 41.19 1 0.92 43.15 31.20 8.30 31.20 42.90 .....CG-Solve; 4 72.48 1 0.02 0.15 0.03 0.01 0.03 0.04 ....UpdateVAndX; ```. ```; ParallelCGLinearSolver template=""ParallelCompressedRowSparseMatrixMat3x3d"". [INFO] [BatchGUI] 1000 iterations done in 53.883 s ( 18.5587 FPS). Steps Duration Statistics (in ms) :; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 0 0 1000 39.40 89.6",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717164532:1568,clear,clearSystem,1568,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717164532,1,['clear'],['clearSystem']
Usability,"3) Shouldn't we remove the ""call-super"" ? ; The code and PR makes use of what we call the ""call super""design patern in which an specialization or an in-herited class must call its parent/general implementation to behave correctly. I think the PR contains a variation for ""template"" of this pattern with the unspecializedInit(). In most of the case I noticed that the ""call super"" was a bad design choice as it delegate the ""validity"" of the implementation to the child/specialization instead of enforcing the behavioral validity by code structure. ; Example of the call super ""design""; ```cpp; class GeneralImplementation; {; public:; void doSomethingCrucial(); ; virtual void init(); {; doSomethingCrucial();; }; }. class UserImplementation : GeneralImplementation; {; public:; virtual void init(); {; GeneralImplementation::init(); ; }; }; ```; And how it can be change to prevent mis-implementation:; ```cpp; class GeneralImplementation; {; public:; void doSomethingCrucial();; void init(); {; doSomethingCrucial();; doInit(); ; }; ; protected:; virtual void doInit() = 0; ; }. class UserImplementation : GeneralImplementation; {; public:; final void doInit() override; {; /// my specific things; }; }; ```; I don't know if this could/may/must be applied to BilateralInteractionConstraint...but at first sight it looks like a good sanbox. . 4) Mixing reset/init; I see that reset() is actually calling init(). To me this leads to a lot of fuzzyness in which it is not clear what are the purpose of these function. Maybe it is possible to rework that part to make clear what are the specific role of the API entry points. This probably requires to clarify what reset is supposed to do (and this is probably not strictly equivalent to init()). . 5) Extra side notes:; I would recommand deprecating all handleEvent implementation by printing a deprecation message saying that you need to use ; a separated controller. Because...well this is just a non-sense to have hardcoded keycode and UX concerns.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1187087614:3091,clear,clear,3091,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1187087614,3,"['UX', 'clear']","['UX', 'clear']"
Usability,"> * @fredroy: What should we do with NonUniformHexahedronFEMForceFieldDensity? Its reference is commented in the CMakeLists. I did not touch it.; > . IMO:; - nobody complained about its absence in the project since... ?; - no relevant commits since a loooooooong time; - no example; - almost no doc (although a paper citation is present); - obviously no test; - it needs a kind of file (density volume), but we dont even know the format/standard, and if there is one in the repo already... I would simply delete it 🧐",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2333#issuecomment-916716382:498,simpl,simply,498,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2333#issuecomment-916716382,1,['simpl'],['simply']
Usability,> 1. Is `iterationCounter` reset when you press the reset button?; > ; It is reset to 0 in method: void RealGUI::resetScene(). > 2. What's the difference between `iterationCounter` and `frameCounter`?. the only diff I see is that frameCounter is reset to 0 when you pause/play the scene. I assume it is just used as counter for the FPS calculation. You could remove this reset to 0 and use it instead of the new iterationCounter.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2742#issuecomment-1081495442:266,pause,pause,266,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2742#issuecomment-1081495442,1,['pause'],['pause']
Usability,"> 1. We could probably rename the ""**EulerSolver.h**"" and ""**EulerSolver.cpp**"" files to ""**EulerExplicitSolver.h**"" and ""**EulerExplicitSolver.cpp**"" to follow the name of the class.; > ; > 2. Maybe we could factor the sympletic option as a new time integrator class? I think it would be much clearer to have, for example,; > ; > ; > ```; > <EulerExplicitSolver />; > <EulerImplicitSolver />; > <EulerSemiImplicitSolver />; > ```; > ; > and might speak to more people. I definitively agree with both your suggestions.; I also thought about your second suggestion, and it was my plan to talk about it during the next dev meeting. The problem I see is that `EulerExplicitSolver` is by default symplectic. So, applying your suggestion would change the ODE solver when the user write `<EulerExplicitSolver />`. Let's discuss it on Wednesday.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-855629658:294,clear,clearer,294,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-855629658,1,['clear'],['clearer']
Usability,"> ; > ; > > Can we take the opportunity to renaming it `d_useRestPosition` ?; > ; > I'm not sure it's a good idea to transform a fix into a breaking change. Waiting for @fredroy insight 🔍. Exactly my thoughts.; Wondering the fact that indeed this is badly needed BUT it will be breaking. Arguments for renaming:; - does not follow the guideline and the other Data<> in BarycentricMapping are following it,; - referenced only **ONCE** in the whole sofa code base; - does not breaking anything scene-wise (the stringName wont change). Arguments for not renaming:; - breaking plugins using this Data<> directly. Conclusion: ; My opinion would be to rename it indeed 🧐",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1939#issuecomment-802790797:335,guid,guideline,335,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1939#issuecomment-802790797,1,['guid'],['guideline']
Usability,"> ; > ; > > EDIT: I ran the performance monitor of VS and indeed it takes a lot of time in the resize() function of MechanicalObject; > ; > Indeed, this looks like a nice bug 😎; > ; > However, I'm not sure this is impacting the _simulation_ time. The same multivectors are used (x_rest, x, v, etc.) and the newly (and very wrongly) created vectors are simply, well, created...; > ; > But we must definitely fix this bug 😁. Agreed for the simulation time itself, but the created vectors are not only created; in the resize function, it tried to resize ALL the vectors every time step, so after a thousand steps for example, it tried to resize like 2000 vectors... Interestingly, the useless vectors are all V_DERIV so something related to the velocities?; ![Capture_collis2](https://user-images.githubusercontent.com/11028016/118618533-03ca6180-b7c4-11eb-9332-0ce4c316fc23.PNG)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2089#issuecomment-842970198:352,simpl,simply,352,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2089#issuecomment-842970198,1,['simpl'],['simply']
Usability,"> ; > ; > > I also changed the code in GLBackend.cpp to remove the ""background is moving when I resize the window"" effect.; > > ```c++; > > double coordWidth = int(screenWidth / w) + 1;; > > double coordHeight = int(screenHeight / h) + 1;; > > ; > > glColor3f(1.0f, 1.0f, 1.0f);; > > glBegin(GL_QUADS);; > > glTexCoord2d(0.0, 0.0); glVertex3d( -w*coordWidth, -h*coordHeight, 0.0 );; > > glTexCoord2d(coordWidth*2.0, 0.0); glVertex3d( w*coordWidth, -h*coordHeight, 0.0 );; > > glTexCoord2d(coordWidth*2.0, coordHeight*2.0); glVertex3d( w*coordWidth, h*coordHeight, 0.0 );; > > glTexCoord2d(0.0, coordHeight*2.0); glVertex3d( -w*coordWidth, h*coordHeight, 0.0 );; > > glEnd();; > > ```; > > ; > > ; > > @fredroy could you review this before I push it in the PR please ?; > ; > `double coordWidth = int(screenWidth / w) + 1;`; > will give warning conversion and why +1 ?. +1 because we want to know how many entire textures we have to display to cover **at least** screenWidth and screenHeight. Thus we do an integer division and add 1 to handle all the cases where `screenWidth % w != 0` (almost all the cases actually).; Not sure this was very clear :eyes:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1758#issuecomment-772368085:1143,clear,clear,1143,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1758#issuecomment-772368085,1,['clear'],['clear']
Usability,"> ; > ; > > I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; > > ```c++; > > #include <MultiThreading/config.h>; > > ...; > > #include <MultiThreading/Tasks.h>; > > ```; > > ; > > ; > > it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. monocle_face; > ; > How can it compile?. If it is not included, it is not compiled.; My guess is that this file was included in Multithreading, or is included in a private plugin using Multithreading (thus enabling `-I/path/to/Multithreading`)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816468503:399,usab,usable,399,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816468503,1,['usab'],['usable']
Usability,"> ; > ; > > That's cool 👍 especially with scenes with dozens of falling things.... (and penalty contacts 😆); > > Just a thought: the 'collapse all' will obviously always show only root, maybe the 'collapse all' should show the first node (i.e root) still expanded ?; > ; > Yes, I also thought about it. I decided to keep it simple, but I don't mind doing your suggestion. Lets see what the other guys will say",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2322#issuecomment-912583213:324,simpl,simple,324,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2322#issuecomment-912583213,1,['simpl'],['simple']
Usability,> ; > ; > Did you try with an out-of-tree compilation of a plugin (e.g Python3) ? just in case. Yes but with a simpler plugin (MyAwesomeComponents). `find_package(SofaFramework)` passed 👌,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2175#issuecomment-863303655:111,simpl,simpler,111,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2175#issuecomment-863303655,1,['simpl'],['simpler']
Usability,"> ; > ; > For now, I would say we could introduce a file into the SofaSimpleFEM module (the first module introducing the FEM in SOFA), with a name like FEMUtils.h (I am not good with names...). Inside you can put the functions (or a class with static functions) factorizing the code (I would say something like computeVonMisesFromElement() and drawVonMisesElements()). In fact TetrahedronFEMForceField and TetrahedralCorotationalFEMForceField should be merged. Historically the Tetrahedral is only a copy past with topological changes support. Now that topological changes are done using callbacks, the merge could be done by simply adding an option that will or won't registered the call back.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2185#issuecomment-875964434:626,simpl,simply,626,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2185#issuecomment-875964434,1,['simpl'],['simply']
Usability,"> ; > ; > Not that I want to that guy, but the code is quite copy-pasted from TetrahedronFEMForcefield (even the data name starts with '_' ) 🧐 . Wont it be possible to factorize the code with TetrahedronFEMForcefield or anything like that ?. of curse the answer is ""Yes, but..."" ; Like that is it not that simple because they have a totally different way to store the data. I see 2 methods that could be factorized.; - the computeVonMises which could take the data as parameter, but I don't know where it should be placed.; - the draw method, but it is too specific to be put in the drawTools. is there a ForceField toolkit or helper somewhere?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2185#issuecomment-863919176:306,simpl,simple,306,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2185#issuecomment-863919176,1,['simpl'],['simple']
Usability,> ; > ; > The changes have not been propagated everywhere @epernod; > ; > ```shell; > /builds/workspace/sofa-framework/PR-1495/mac_clang-3.5_options_release/src/modules/SofaGeneralLoader/SphereLoader.cpp:81:5: error: use of undeclared identifier 'radius'; did you mean 'd_radius'?; > radius.beginEdit()->clear();; > ^~~~~~; > d_radius; > ```. I don't see what you are speaking about...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-696641121:304,clear,clear,304,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-696641121,1,['clear'],['clear']
Usability,"> > * if it is input or output (for DataEngines); > ; > Isn't it defined by the group string? Input Data have the group ""Inputs"", and output ""Outputs"". I would say that being an input is because the Data has been added with DataEngine::addInput ... the fact it is in the group ""Inputs"" is just an UX choice.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4775#issuecomment-2162608418:297,UX,UX,297,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4775#issuecomment-2162608418,1,['UX'],['UX']
Usability,"> > > Ok for me, but could you explain in which case you have this problem? Setting the component to invalid is a good idea. Breaking the loop might create some bigger issue in components using the topology as it won't be set.; > > ; > > ; > > We have this problem when using subtopologies defined using BoxROIs. The subTopo has fewer points than the original topology (Since it is a subset of it) but the triangles in that subtopo refer to nodes indexed with the numbering in the original topology that are out of bounds within the subtopo world. Not sure that is clear!; > ; > There is something un-catholic there... So if I understand well, you have triangle in your topology that refer to point out of bound to your current node mechanicalObject? I don't understand how it can work. It will crash as soon as a component will try to access a dof passing through the topology no?. Sorry for the late reply!; So it is a case where the node where the subtopology is defined does not contain a MechanicalObject. It is only defined to add a ForceField applying onto a subpart of the node of the MechanicalObject. An example is in this scene: https://github.com/SofaDefrost/ModelOrderReduction/blob/master/tools/test/sofa_test_scene/quadruped.py",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4242#issuecomment-1820989683:565,clear,clear,565,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4242#issuecomment-1820989683,1,['clear'],['clear']
Usability,"> > However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?; > ; > This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:; > ; > 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; > ; > 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; > ; > 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not...; > ; > ; > This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices.; > ; > Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?; > ; > CC: @hugtalbot , @ChristianDuriez , @fjourdes. Thanks @jnbrunet for having looked on this issue. I rephrase your findings as a list of tasks to improve SOFA efficiency and accuracy:. - [ ] Remove EulerExplicitSolver::d_optimizedForDiagonalMatrix and replace it by fetching the result of Mass::isDiagonal; - [ ] CentralDifferenceSolver must be adapted to work with any type of mass matrix; - [ ] Implicit solvers must read the result of Mass::isDiagonal to speed up computations in case mas",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001:260,simpl,simply,260,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001,2,['simpl'],['simply']
Usability,"> > Ok for me, but could you explain in which case you have this problem? Setting the component to invalid is a good idea. Breaking the loop might create some bigger issue in components using the topology as it won't be set.; > ; > We have this problem when using subtopologies defined using BoxROIs. The subTopo has fewer points than the original topology (Since it is a subset of it) but the triangles in that subtopo refer to nodes indexed with the numbering in the original topology that are out of bounds within the subtopo world. Not sure that is clear!. There is something un-catholic there... So if I understand well, you have triangle in your topology that refer to point out of bound to your current node mechanicalObject?; I don't understand how it can work. It will crash as soon as a component will try to access a dof passing through the topology no?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4242#issuecomment-1772243763:553,clear,clear,553,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4242#issuecomment-1772243763,1,['clear'],['clear']
Usability,"> > On this pull-request we would need the feedback of @Younesssss and @ChristianDuriez about how to sort the mapping components in SOFA? How should be differentiated the different kind of mappings?; > > Your input is important to us for NG.; > ; > I can organize a meeting with @ChristianDuriez, @guparan, @fredroy around this subject. Maybe it's better that way?. It would be great yes !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2635#issuecomment-1054042237:43,feedback,feedback,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2635#issuecomment-1054042237,1,['feedback'],['feedback']
Usability,"> > So, as we discussed during the dev meeting. 2 modifications:; > > ```; > > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > > ; > > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > > ```; > > ; > > ; > > @guparan can you confirm this is now ok to go?; > ; > The _FindCGAL.cmake_ was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`.; > ; > IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful. Ok I see, maybe we could add a test on top of ""our FindCGAL"" checking if CGAL_DIR is known or not. @guparan could you give your feedback so we can converge on that PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910:1143,feedback,feedback,1143,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910,1,['feedback'],['feedback']
Usability,"> > VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA; > ; > Ok that makes sense. Yeah I guess the clean thing would be to swap every usage in SOFA to the new dynamic TypeInfo, and to somehow depreciate the static one.; > ; > Looks good to me, I look forward to testing it, probably with Eigen types to extend what @Younesssss started. Definitly a must have...but not in the same PR :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712909548:111,clear,clearly,111,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712909548,1,['clear'],['clearly']
Usability,"> > ```; > > 1. We could probably rename the ""**EulerSolver.h**"" and ""**EulerSolver.cpp**"" files to ""**EulerExplicitSolver.h**"" and ""**EulerExplicitSolver.cpp**"" to follow the name of the class.; > > ; > > 2. Maybe we could factor the sympletic option as a new time integrator class? I think it would be much clearer to have, for example,; > > ```; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ```; > > <EulerExplicitSolver />; > > <EulerImplicitSolver />; > > <EulerSemiImplicitSolver />; > > ```; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > and might speak to more people.; > ; > I definitively agree with both your suggestions.; > I also thought about your second suggestion, and it was my plan to talk about it during the next dev meeting. The problem I see is that `EulerExplicitSolver` is by default symplectic. So, applying your suggestion would change the ODE solver when the user write `<EulerExplicitSolver />`. Let's discuss it on Wednesday. Unfortunately, I'm not sure I will be able to join this Wednesday and the next. Could we do something like this?. 1. If `EulerExplicitSolver` is used with default parameters or with explicit `sympletic=True`, then warn the user that he should use `EulerSemiImplicitSolver` instead, and create this new component automatically for him (this is the part where I'm not sure it's feasible..); 2. Else, the user manually specified `sympletic=False`, warn him that this option no longer exists and that he can remove it from its scene file.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-855748841:309,clear,clearer,309,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-855748841,1,['clear'],['clearer']
Usability,"> @epernod @damienmarchal I have the following error in several scenes of SoftRobots:; > ; > ```; > [ERROR] [UniformMass(mass)] TopologyData: indices already has a TopologyDataHandler. createTopologyHandler should only be called once at init of the TopologyData.; > ```; > ; > I think it is due to the fact that a Node is initialized twice. What is your recommendation?. Quickly: this error is fired because init is not called only once. A ""TopologyDataHandler"" is created in the UniformMass init method. Creating 2 trackers could create real bugs if topologicalChanges are applied (basically changes will be applied twice); I see several options:; - init should not be applied several times in those examples; - If we decide init could be applied several times, we need to change the code to check tracker are not created twice. This should be possible but not as simple as ```tracker != null```. As a quick workaround: replace the `TetrahedronSetTopologyContainer ` by a `MeshTopology ` here : https://github.com/SofaDefrost/SoftRobots/blob/4acf28248278106c2855206f1751dcba41268039/examples/tutorials/Tripod/details/elasticbody.py#L20; This should solve all the tripod tutorials scenes. TopologyDataHandler are not created if the topology is using static containers.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1590748119:865,simpl,simple,865,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1590748119,1,['simpl'],['simple']
Usability,"> @fredroy I worked on this problem too, but my approach was to refactor texture references by using texture objects. It is not trivial. It's not working yet. I'll try again in the week, otherwise I suggest to simply remove the usage of textures. I'd use simply raw GPU pointers. This alternative is easier than the texture objects approach (but it may cost a bit of performances (perhaps negligible)). My point is, don't merge this PR right now, unless is super urgent. Of course, it would be much better to effectively fix the problem than to ignore it. This PR was just providing a quick but brainless solution for a (hopefully) temporary fix.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427168232:210,simpl,simply,210,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427168232,2,['simpl'],['simply']
Usability,"> @olivier-roussel thanks for the conda test and the feedbacks 👍 You should have made suggestions and/or make a PR on my branch, as I cannot credit you your patches 😵. Indeed, sorry about that",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1923345776:53,feedback,feedbacks,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1923345776,1,['feedback'],['feedbacks']
Usability,"> Amazing work @sergeiNikolaev !; > However, as it seems you want into SofaCommon, we have to be a bit strict on the guidelines ; > So could you:; > ; > * remove all useless commented code?; > * set prefix for Data<> (d_) and member (m_) ?; > * remove serr with msg_error; > * maybe uncomment all the msg_info (as it is not print if you dont enable printLog); > * would be cool to use pragma once instead of the preprocessor guards (ifdef); > Thanks !. @fredroy ; I have submitted the correction to the code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-620039061:117,guid,guidelines,117,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-620039061,1,['guid'],['guidelines']
Usability,> An opportunity to add a unit test in SofaPython3 ;); +1. But SofaPython3 is not the place to validate sofa core behavior. It would be much better to have it in Sofa implemented using simpleapi. And not in a reverting PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3464#issuecomment-1307358562:185,simpl,simpleapi,185,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3464#issuecomment-1307358562,1,['simpl'],['simpleapi']
Usability,"> Can I still ask a small question ? :-); > ; > Why keeping the Framework directory? Would something like this be simpler?:; > ; > ```; > /; > plugins; > BeamAdapter; > ...; > Sofa; > Compat; > Config; > Core; > DefaultType; > Geometry; > ...; > Component; > Collision; > ...; > scripts; > tools; > ...; > ```. like @hugtalbot said, it is to keep the sepearation framework (i.e APIs & stuff) and components (implementations).; Ideally like @guparan we should have made a framework dir/namespace structure but we decided not to break the framework code (so we still have sofa::core, sofa::helper....)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1119312670:114,simpl,simpler,114,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1119312670,1,['simpl'],['simpler']
Usability,"> Can static methods be binded ?. If your question is: ""can c++ static methods be bound in python"", then yes. If your question is ""can I bind something as a python class/static method"", I *think* the answer is yes but in any case you can wrap it as a free function in a module. If applicable, I suggest your binding class follows the context protocol (https://www.python.org/dev/peps/pep-0343/) so that you can time code fragments using `with` statements:. ```python; with Sofa.Timer('description'):; # do something time-consuming here; ```. In this case, you need to:; 1. create the type object and store needed state, in this case that would be a simple string for identifying the timed action; 2. bind `beginStep` as the `__enter__` method; 3. bind `endStep` as the `__exit__` method. and that should be it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/336#issuecomment-316477409:649,simpl,simple,649,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/336#issuecomment-316477409,1,['simpl'],['simple']
Usability,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:856,simpl,simplify,856,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911,1,['simpl'],['simplify']
Usability,"> Don't you think that moving `errF` and `tempF` out of the loop is enough? I would test to only resize them in the loop. The underlying memory allocation should not happen a lot. My suggestion is because I think it is simpler to understand compared to the buffer implementation.; > ; > In any case, I think the condition `if (nb > bufferSize)` is not necessary. I obtained the same level of improvement so I will go with this easier way 👍",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4195#issuecomment-1734678391:219,simpl,simpler,219,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4195#issuecomment-1734678391,1,['simpl'],['simpler']
Usability,"> EDIT: I ran the performance monitor of VS and indeed it takes a lot of time in the resize() function of MechanicalObject. Indeed, this looks like a nice bug :sunglasses: . However, I'm not sure this is impacting the _simulation_ time. The same multivectors are used (x_rest, x, v, etc.) and the newly (and very wrongly) created vectors are simply, well, created... But we must definitely fix this bug :grin:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2089#issuecomment-842965195:342,simpl,simply,342,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2089#issuecomment-842965195,1,['simpl'],['simply']
Usability,"> FYI, `SimpleCarving.py` is not exectuted by the CI (or more precisely, there is no mention of it in the logs). I would say, on s'en balek",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3457#issuecomment-1707842240:8,Simpl,SimpleCarving,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3457#issuecomment-1707842240,1,['Simpl'],['SimpleCarving']
Usability,"> Hello @olivier-goury,; > ; > Thank you for the PR.; > I have added some comments (mostly about coding-style).; > ; > As I'm the author of some of the code you propose in the PR...could you add my name in a contributors section after the license header. In general I do the following.; > ; > ```c++; > /******************************************************************************; > * Contributors: ; > * - damien.marchal@univ-lille.fr ; > * - olivier.goury@inria.fr ; > ******************************************************************************; > ```; > ; > I know @hugtalbot and @guparan complains...but to me this is a clear demonstration that relying on git to track authors ship (and thus copyright credit) is misleading...and thus having a per-file contributors sections. Hey thanks for all the comments, yes I can do that, no problem!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1510#issuecomment-701479584:630,clear,clear,630,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1510#issuecomment-701479584,1,['clear'],['clear']
Usability,"> Hello Fred, to avoid excessive code coupling maybe such kind of application could be done using the simpleapi instead of the raw c++ api. This would demonstrate the same ""no gui"" app. I wanted to keep the direct usage of the components and direct linking with lib, for eventual people who would want to manipulate the components directly (because why not). This PR comes from the discussion https://github.com/sofa-framework/sofa/discussions/2785 which pointed to a (really) deprecated piece of code [in the doc.](https://www.sofa-framework.org/community/doc/programming-with-sofa/create-your-scene-in-cpp/) I took the initiative to clean this project to use it directly into this page after merging. But indeed, the second step was to create the exact same project with the simpleapi API, to illustrate the 2 use-cases (runtime dep vs compile/link-time dep). And create a page about simpleapi in the documentation as well, as there is none (or I did not see)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075594174:102,simpl,simpleapi,102,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075594174,3,['simpl'],['simpleapi']
Usability,"> Hey @marques-bruno !; > ; > I think this will help us a lot to add robustness to our components.; > ; > With this PR, do you see any reason why one would use `BaseLink`s in his component instead of a `BaseDDGLink`s?; > ; > Also, maybe instead of have a new `InitDDGLink` function in BaseClass, we could simply overload the `initLink` with; > `initLink(BaseDDGLink* owner, std::string name, std::string help, std::string group = """")` ?; > ; > Thanks !. Thanks @jnbrunet for your review, I'll do the changes tomorrow.; Regarding using BaseLink instead of BaseDdgLink, BaseLinks are actually used internally in DDGNodes (for input/outputs). So they have their use. What I want to replace with DDGLink, are the SingleLink entries in sofa components.; We'll discuss it at the sofa meeting if you're there tomorrow ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1226#issuecomment-561309194:305,simpl,simply,305,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1226#issuecomment-561309194,1,['simpl'],['simply']
Usability,"> Hey @nhnhan92; > Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license.; > ; > To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!; > ; > Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _***_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); > See: https://link.springer.com/article/10.1007/s00366-017-0572-4; > ; > Let us know what you think about it. We can make it step by step!. Dear @hugtalbot,; Thank you for your recommendation, we think that would be a proper option for our case. ; On the other hand, regarding the test, we want nothing more than that, but we are not familiar with the testing procedure. Therefore, we are willing to follow your guidance. Hope to hear your response soon.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454:558,simpl,simply,558,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454,2,"['guid', 'simpl']","['guidance', 'simply']"
Usability,"> Hi @nhnhan92; > Here is what we propose: let's get this nice work merged as is. I will only add a regression scene to check that no alteration of the model occurs in the future. I will also write a short doc about it, and I will let you append any additional details on it.; > ; > A C++ test inspired from the [article](https://link.springer.com/article/10.1007/s00366-017-0572-4) would be nice in another PR. For writing test, you can:; > ; > * see the [doc here](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/); > * get inspired from the [PluginExample test](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp); > ; > Is this fine for you?. Hi @hugtalbot,; It is clear enough. I will take a look at the instruction and try to implement the .test file. I will inform you as soon as I get something new. Thank you again for your patient to help me.; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301:780,clear,clear,780,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301,1,['clear'],['clear']
Usability,"> Hi @olivier-goury; > The info is in the sofa-dev meeting report but has not been copied here.; > --> wip, use clear() instead of removeAt(0) on l_forceField link; > ; > @guparan will work on it, no worries. Ok thanks for the info!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/772#issuecomment-424999993:112,clear,clear,112,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/772#issuecomment-424999993,1,['clear'],['clear']
Usability,"> Hi @sergeiNikolaev; > Sorry for the latency on this topic, tests can be made so that we create a simple scene in c++ imposing rest shape and an imposed displacement. Thus, the resulting force should be analytically defined.; > By the way do you have any latex file for the polynomial equations?. Thank you for your answer @hugtalbot.; Regarding your question, I do not, sorry.; I wrote these equations since for me it is easier to process the stuff like this with a ""writing memory"". And then I decided that it will be enough just to scan them and send to you.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643263065:99,simpl,simple,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643263065,1,['simpl'],['simple']
Usability,"> Hi Fred,; > ; > The splitting seems to perpetuate the spurious dependency from SceneCreator to sofa.testing.tools. Maybe it is the time to remove the dependency to SceneCreator and use simpleapi in place so that sofa.testing is cleaned from SceneCreator. I have to admit that I did not see that the DataEngineTestCreation.h file was using scenecreator itself, and this is a good idea to do it while sofang'ing. But I would prefer to do that in a further PR to not block my other sofang PRs 😗.; Except if it is trivial to remove/replace 🙃",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040462403:187,simpl,simpleapi,187,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040462403,1,['simpl'],['simpleapi']
Usability,"> However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?. This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:. 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not... This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices. Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?. CC: @hugtalbot , @ChristianDuriez , @fjourdes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125:252,simpl,simply,252,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125,2,['simpl'],['simply']
Usability,> I also think about creating a graph link instead of a simple copy:. why @alxbilger,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4876#issuecomment-2269055267:56,simpl,simple,56,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4876#issuecomment-2269055267,1,['simpl'],['simple']
Usability,"> I am a bit sad that we lost simplicity in cmake files cry. I liked the fact that Sofa/framework was (supposed to?) be buildable by iteelf; . How? By unchecking the SOFA_COMPONENT option? It's still possible this way. The thing is that Framework is (unfortunately) not a module and thus should not be treated as one if we want to be consistent. I'm not against reverting the framework/CMakeLists.txt deletion though. > and that the root SOFA CMakefile was kind of slimmer/less complicated and actually was (supposed to be ?) not mandatory. This file was and still is mandatory. At least, I think it's clearer now with the changes I propose because we see what is directly below the root CMakeLists (all the remaining add_subdirectory calls) and what could be done from somewhere else. Ideally we should just have a some options/variables and a bunch of add_subdirectory calls in this file.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1180212670:30,simpl,simplicity,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1180212670,2,"['clear', 'simpl']","['clearer', 'simplicity']"
Usability,> I did not check but I thought it was using `addData` here:; > ; > https://github.com/sofa-framework/sofa/blob/9096c3eed599622ec9eb77a3d8a61bf3932a81a7/Sofa/Component/StateContainer/src/sofa/component/statecontainer/MechanicalObject.inl#L1310. Not necessarily there is another codepath that initialize the state vectors and registe the data. Refactoring the whole part would be interesting to make that clear but it is far outside the scope of this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3783#issuecomment-1534324585:404,clear,clear,404,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3783#issuecomment-1534324585,1,['clear'],['clear']
Usability,"> I don't understand why we have so much complexity around `projectResponseT`. It seems we don't need the template since we call it only once. Same for the lambda. Not everywhere, sometimes the templated projectResponseT is called with VecDeriv (aka Vec\<Deriv>) and MatrixDeriv (aka CRS)); But it could simplified where this statement does not apply though.; EDIT: some (e.g FixedTranslationConstraint) are useless IMO",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3894#issuecomment-1590483514:304,simpl,simplified,304,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3894#issuecomment-1590483514,1,['simpl'],['simplified']
Usability,"> I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; > ; > ```c++; > #include <MultiThreading/config.h>; > ...; > #include <MultiThreading/Tasks.h>; > ```; > ; > it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. monocle_face. How can it compile?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816453584:373,usab,usable,373,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816453584,1,['usab'],['usable']
Usability,> I recommend to deprecate Data fields properly. See https://www.sofa-framework.org/community/doc/contributing-to-sofa/lifecycle-mechanisms/#removing-a-datafield. I did something to correctly depreciate the Data. The instruction are not 100% clear to me (regarding dates inside the macro and parse method). Let me know if it seems correct.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3328#issuecomment-1272102338:242,clear,clear,242,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3328#issuecomment-1272102338,1,['clear'],['clear']
Usability,"> I think from a user perspective it is easier to understand names like ""PyScriptableComponent"" or even ""PyComponent"", because that is what they are: components, just like any other in Sofa, with Datas, Inputs and Outputs and a certain behavior. This is not really correct actually:; The pythonScriptController is not really a component (i.e a Sofa class inheriting BaseObject) as it possesses extra features, such as the possibility to create the scene graph from scratch, send events to other controllers etc. It is not a purely simple 1to1 binding of its C++ methods in Python. In that way, I agree with you that calling it a PyController makes more sense than to call it a PyBaseObject for instance, or pyComponent, since it does more.; The current PSDE is actually as far from a Std sofa component (core::objectmodel::BaseObject) as the PythonScriptController: the PSDE is much closer in terms of behaviour to that of Sofa's DataEngine components: the key difference is that DataEngines, contrary to BaseObjects, is a call for action on the modification of one of its input datafield. The update method is not present in a BaseObject or in a PythonScriptController. In that way it completely mimics the behavior of the DataEngines in Sofa. Hence my suggestion :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406605755:531,simpl,simple,531,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406605755,1,['simpl'],['simple']
Usability,> I think it will break a lot of scenes. I like it baby :fire_engine: :fire: . > I also think about creating a graph link instead of a simple copy:. :thinking: why would you do that? I am unsure about side effect,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4876#issuecomment-2265459196:135,simpl,simple,135,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4876#issuecomment-2265459196,1,['simpl'],['simple']
Usability,"> In that case, why bother with manual init/cleanup? Where is it done? . This is precisely why I asked for feedback before merging, because I have no idea. I don't quite know why it was not automatic in the first place since this is all c++98. > If manual init/cleanup are removed, s_initialized/s_cleanedUp become obsolete. agreed, but until we know exactly what's going on we don't want to get rid of it. > What does guarantee that libs are loaded in the right order? . nothing, but libraries could probably load their dependencies upon `init` (+ simple cycle detection strategy) to have it all automatic?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/168#issuecomment-279743777:107,feedback,feedback,107,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-279743777,2,"['feedback', 'simpl']","['feedback', 'simple']"
Usability,"> Indeed. No test nor scene where impacted?. I tested simple scenes and it seems the simulations run and are plausible, with or without the mistake. I don't think this function is actually tested.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2448#issuecomment-950787168:54,simpl,simple,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2448#issuecomment-950787168,1,['simpl'],['simple']
Usability,"> It would be FALSE by default and wouldn't need to be specified if ""inline"" I/O-creation is not used. Actually, I didn't think of it immediately when you said it, but this is already what the current implementation does (kind of, the implementation is different but the concept is the same):. if the decorator `@sp.ParseInputs` is not set on the parse method, the passing of arguments through the createObject() is disabled, and the input argument will be ignored.; setting @sp.ParseInputs is kind of the equivalent to a boolean flag in the class allowing ""inline"" definitions. The only difference is that it's made at the declaration step and not during the instantiation of the class. the name (ParseInputs) is maybe not very clear. it could be called differently. ""fwd_inline_args"" or ""allow_inlines""..?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/743#issuecomment-416264093:729,clear,clear,729,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-416264093,1,['clear'],['clear']
Usability,"> Looks fine now.; > [ci-build][with-scene-tests]. Yeah... Although we simply moved the definitions of the problematic operator overloads back into the .h... so problem half solved... if anyone has an idea how to make it build on windows... I'm curious. Otherwise, let's just merge... :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/907#issuecomment-461873354:71,simpl,simply,71,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/907#issuecomment-461873354,1,['simpl'],['simply']
Usability,"> More seriously, defaultCompliance can be considered in a simplified way as the inverse of the nodal mass. This is close to 184 in this simulation. Not the purpose of the PR itself, but not possible to do a ""autoSetDefaultCompliance=true"" or something like that ? 😅",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4187#issuecomment-1730537815:59,simpl,simplified,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4187#issuecomment-1730537815,1,['simpl'],['simplified']
Usability,"> Of course the PR will be breaking and we will need to update our code base. But this is all for the good.; > ; > Clearly congratulation @SofaFramework for such high quality management of software evolution.; > ; > So if I understand correctly, this will be merge into master the day after the official release of v22.06 right ?. It should be breaking for some yes (the ones who did not do the change of the things flagged deprecated the last version and marked removed now, like the use of sout/serr/sendl); But it should be merged just before releasing actually, now is the code of v22.06",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1174746402:115,Clear,Clearly,115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1174746402,1,['Clear'],['Clearly']
Usability,"> Ok for me, but could you explain in which case you have this problem? Setting the component to invalid is a good idea. Breaking the loop might create some bigger issue in components using the topology as it won't be set. We have this problem when using subtopologies defined using BoxROIs. The subTopo has fewer points than the original topology (Since it is a subset of it) but the triangles in that subtopo refer to nodes indexed with the numbering in the original topology that are out of bounds within the subtopo world. Not sure that is clear!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4242#issuecomment-1771157912:544,clear,clear,544,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4242#issuecomment-1771157912,1,['clear'],['clear']
Usability,"> Olivier's point me that in his code the clearing of the links is really ""perfectible"". It was improved with the last commit, thank you!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/772#issuecomment-422810617:42,clear,clearing,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/772#issuecomment-422810617,1,['clear'],['clearing']
Usability,"> On this pull-request we would need the feedback of @Younesssss and @ChristianDuriez about how to sort the mapping components in SOFA? How should be differentiated the different kind of mappings?; > ; > Your input is important to us for NG. I can organize a meeting with @ChristianDuriez, @guparan, @fredroy around this subject. Maybe it's better that way?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2635#issuecomment-1054038880:41,feedback,feedback,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2635#issuecomment-1054038880,1,['feedback'],['feedback']
Usability,"> So, if I understand correctly, you implemented 2 methods to deduce the template: 1) a static method in the component, 2) an additional line when registering in the object factory. Yes, despite it is possible to have only the system with the static method I find the explict method more clear despite it does not allow to cover the same set of feature. We may remove it if needed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3938#issuecomment-1590796190:288,clear,clear,288,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3938#issuecomment-1590796190,1,['clear'],['clear']
Usability,"> Thanks @marques-bruno ! Could you confirm that your clang-format file complies with [the astyle configuration](https://github.com/sofa-framework/sofa/blob/master/tools/astyle/sofa.astyle)?. Almost... I went through each of the options in the style sheet to make sure, but:; * *--indent-labels*: this is not supported by clang-format. This astyle option indents C-style labels (goto labels) as if it were a normal instruction in its scope. clang-format offers an option `IndentGotoLabels` but it will either align it with the root of its scope (true,) or align them at the first column in the file. for more info on this option:; [StackOverflow post](https://stackoverflow.com/a/66511380/1376968). But to me, it seems like a bad idea to indent labels the way astyle does. clang-format's makes more sense to me. * *--add-braces*: This one is more problematic: clang-format supports this option since its latest version (clang-format-15.0.0), BUT, here's what they say in the doc:. _**Warning**_. _**Setting this option to true could lead to incorrect code formatting due to clang-format’s lack of complete semantic information. As such, extra care should be taken to review code changes made by this option.**_. Linter tools, like clang-tidy, let you do that also...; Most importantly, clang-format's default package version on ubuntu is v10.0.0. v12 can be found in ubuntu's default package manager, but for v15 you gotta look for the package in external repos or compile it yourself. So I'd rather leave this option out, and keep it more as a general guideline in SOFA's documentation. Other than that my last commit updated the file to adopt the other astyle options :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2884#issuecomment-1103726034:1553,guid,guideline,1553,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2884#issuecomment-1103726034,1,['guid'],['guideline']
Usability,"> Thanks again for this nice contribution @nhnhan92; > Sorry I had prepared many similar feedback as @epernod so, some might be duplicated.; > ; > A more general remark, could you point us out the documentation you used to write this code please?; > Do you have an idea of when you would plan to consider rotations around the z axis?; > I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!; > ; > If this is too much questions, we can discuss about this live if you'd like. Dear, @hugtalbot,; Thank you for kind supports from you and @epernod. First, I implemented this FF mostly based on two following references:; 1. Book: ""Structural Analysis with the Finite Element Method, Linear static, Vol. 2, chapter 8""; 2. And the most recent paper of our group: https://ieeexplore.ieee.org/document/9247533; On the other hand, at this stage, this FF fairly meets our expectations for the current project. I definitely want to improve it in the near future. However, FEM is not my field (I am basically an end-user) and I have been in the middle of something else, therefore, It is gonna take time for me to be able to complete it. I would love to cooperate with SOFA team to complete it.; I'm sorry, but I'm quite unsure when you said rotation around z-axis (normal axis of the element?). Do you mean the consideration of rotating element around its normal axis? (i.e., co-rotational LARGE method (am I right?)). Right now, my priority is to take the rest two rotation dofs of a node (location rotations of around x and y direction) because, at this moment, I assumed they are zeros. But, so far, I have no idea how to include them; Finally, if it is necessary, I am willing to have a face-to-face discussion as long as I am available. Thank you ; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816:89,feedback,feedback,89,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816,1,['feedback'],['feedback']
Usability,"> That's cool 👍 especially with scenes with dozens of falling things.... (and penalty contacts 😆); > Just a thought: the 'collapse all' will obviously always show only root, maybe the 'collapse all' should show the first node (i.e root) still expanded ?. Yes, I also thought about it. I decided to keep it simple, but I don't mind doing your suggestion.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2322#issuecomment-912582014:306,simpl,simple,306,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2322#issuecomment-912582014,1,['simpl'],['simple']
Usability,"> The unit tests failure came from the fact that the order of the files changed in the CMakeLists.txt. It highlights the facts that `EXPECT_MSG_EMIT` works only if `MainGtestMessageHandler` is added to the `MessageDispatcher`. But `logging_test.cpp` calls `clearHandlers`. Since `logging_test.cpp` is now sorted before `FileSystem_test.cpp`, it clears the message handler required by `FileSystem_test.cpp`. The message handler must be added in any case, and not relying on the fact that it might have been added earlier. Well done!; I have added the `breaking` flag due to the change of some signatures for some methods",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1480398997:257,clear,clearHandlers,257,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1480398997,2,['clear'],"['clearHandlers', 'clears']"
Usability,"> VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA. Ok that makes sense. Yeah I guess the clean thing would be to swap every usage in SOFA to the new dynamic TypeInfo, and to somehow depreciate the static one. Looks good to me, I look forward to testing it, probably with Eigen types to extend what @Younesssss started.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712798002:109,clear,clearly,109,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712798002,1,['clear'],['clearly']
Usability,"> What does it mean : ""child crossing"" ?. Improve UX / Usability....; Yeah, not necessarily the clearest gitmoji. RGBAColor mainly improves UX, whether it is used from C++, Python, or a user interface.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1471#issuecomment-688337154:50,UX,UX,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1471#issuecomment-688337154,4,"['UX', 'Usab', 'clear']","['UX', 'Usability', 'clearest']"
Usability,"> When I see a Doxygen comment at a non-Doxygen-standard place, I always wonder ""Why is this here? Does Doxygen now support this?"".; > How can it be more useful to use `///` than `//` ?. I understand your point and here is a summary to boostrap discussion. . Currently in our code base we never esthablish specific rules on the use of doxygen comments and we are in fact mixing two different approaches. Let's name them ""code centric"" and ""doxygen centric"". . In the code centric approach: ; - /// or ///< is used to state that this the comment *is part of the documentation*. ; - // is for any other *non-documenting* comment (eg: commented code). ; With this approach the main focus is that the documentation parts should be easily visible from the source code and that documentation is composed of declaration parts related part (that must fullfill doxygen rules) as well as internal details. ; The added value of using /// or ///< is that developper when they see them clearly knows ""this is part of the documentation"". This aproach is a super-set of doxygen but is not limiting the documentation to only what doxygen understand (the underlying assumption is that we need to document much more than just declaration/api). . The doxygen centric approach is slighly different: ; - // should be used for internal-documentation as well as non-documentating comments; - /// or ///< should be used only for documentation what can be understood by Doxgen to generate html pages. ; Te main focus with this approach is to make very clear what will be use by Doxygen what it will use to auto-generate its public documentation, the counter part I see is that it mix comments and what should be considered as internal documentation. . It is important is of course to have doxygen friendly declaration centric (the public API) documentation ...but it is equally important to have proper documentation for the internal details. ; If would probably do something like that in a new project:; - always use /** */ f",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1794#issuecomment-794162417:973,clear,clearly,973,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1794#issuecomment-794162417,1,['clear'],['clearly']
Usability,"> You are clearly in a dev state, each time you push a commit it triggers a new build on the CI. I'll put the flag wip again until you tell me that you've finished your fixes to avoid loading the CI. All changes was minor and i think I'm not in dev state now. sorry for loading on CI",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2084605955:10,clear,clearly,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2084605955,1,['clear'],['clearly']
Usability,"> You may add a consistency check if the given path is actually a dir when it is supposed to be. I'm ok with the rest of the code. I've updated the code to check for path types according to isDirectory.; I also propagated the mechanism to DataFileNameVectors (if one of the paths in the vector is not of the right type, I simply set it to """". Dunno if thats the right way but it seems right)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1407#issuecomment-639434209:322,simpl,simply,322,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1407#issuecomment-639434209,1,['simpl'],['simply']
Usability,"> do you plan to create a doc page @alxbilger for us to go through the equation for review ?. yes, but I need more time. Fortunately, the equations are 1000x simpler than in AreaMapping",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4906#issuecomment-2339894590:158,simpl,simpler,158,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4906#issuecomment-2339894590,1,['simpl'],['simpler']
Usability,"> is it not a problem to add a new class (an interface) to inherit from? does it not make the inheritance tree heavier? This second point is just a remark but obviously not blocking at all. @hugtalbot the answer is not simple (see https://stackoverflow.com/questions/7210412/what-is-the-cost-of-inheritance for example). However, in our case, I think the cost (if any) is negligible.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2438#issuecomment-963006116:219,simpl,simple,219,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2438#issuecomment-963006116,1,['simpl'],['simple']
Usability,"> new feature, new unit test?. Thanks for the little push to write the test :+1: ; This actually helped me find a bunch of bugs and inconsistencies in the Links API. I fixed some, made some tests to highlight those I considered as too hard / time-consuming / not-worth-the-effort to fix . - When constructing a link without an owner, a call to `getOwnerBase()` systematically crashed instead of returning a nullptr, because of a bad initialization ; - When calling `setOwner(owner)` on a link with a `nullptr`, a segfault would happen within the function since it tries to call a method on the given owner; - the read() function is SUPER, SUPER buggy, obscure and cryptic. This function alone has tons of potential outcomes depending on whether the link has or not an owner, whether this owner has a context, whether the link is valid, or points to a wrong object type. Even worse, all those outcomes are kind of dependent on whether we're initializing the link, or whether the init visitor already ran on the scene graph. needless to say that this is way too complex, for something as simple by definition as a link.... So to at least get something out of my time, I added a test in SofaSimulationGraph_test/Link_test.cpp which shows most of the results you can get from `read()`, depending on the state of initialization of that link, the state of its owner and the validity of the link path. There's also a test of the setLinkedBase() method in SofaCore_test (BaseLink_test.cpp)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820:1086,simpl,simple,1086,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820,1,['simpl'],['simple']
Usability,"@EulalieCoevoet Thank you for reporting the error (too bad it skipped the reviews 😕); By any chance, would have a simple scene to submit as a test? thanks ! 😙",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2265#issuecomment-886453383:114,simpl,simple,114,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2265#issuecomment-886453383,1,['simpl'],['simple']
Usability,@IPeterlik @courtecuisse please provide us a feedback on this PR. This would be valuable. Thanks,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/484#issuecomment-339261044:45,feedback,feedback,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/484#issuecomment-339261044,1,['feedback'],['feedback']
Usability,"@JeremieA thank for the feedback, . A closed pull-request is probably not the best location to rise this kind of discussion. Why not creating a new issue dedicated to this topic ? Something like ""Suggestion to cleaning & unifying the way we handle 'locale'"" would be nice.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/161#issuecomment-281657903:24,feedback,feedback,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/161#issuecomment-281657903,1,['feedback'],['feedback']
Usability,"@ScheiklP Here is a branch with a simple object tracker: https://github.com/alxbilger/sofa/tree/objecttracker. It counts the number of creation and destruction for each class managed with the `SOFA_CLASS` macro. Note that if `Y` derives from `X`, it counts both `X` and `Y`. Finally, it prints a summary when the program finishes (properly). But I cannot guarantee that more destructions does not happen after the summary (static destruction order depends on construction order and https://en.cppreference.com/w/cpp/language/siof). Is this useful to you? Can you spot which component is not destroyed?. The diff is here: https://github.com/sofa-framework/sofa/compare/master...alxbilger:sofa:objecttracker?expand=1. For example, there are a couple of components in caduceus where I see a difference between nb of allocations and destructions.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256275783:34,simpl,simple,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256275783,1,['simpl'],['simple']
Usability,@TheGreatLudini any feedback ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2706#issuecomment-1056739968:20,feedback,feedback,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2706#issuecomment-1056739968,1,['feedback'],['feedback']
Usability,"@Younesssss do you think:; - you still need to have Data<EigenMatrix> ? (it was not clear in our last sofa devmeeting); - if yes, could be nice to integrate what @jnbrunet said",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-886477819:84,clear,clear,84,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-886477819,1,['clear'],['clear']
Usability,"@alxbilger . In addition to have very component not relying anymore on a dependency to opengl should be moved to a generic module. ; I would suggest having a layer of compatibility/deprecation (possibly build on top of the generic module) to to tell users that scenes like:; ```console; RequiredPlugin(""Sofa.GL.Component"") ; OglModel(); OglGrid() ; ```; Are still working but displays nice guidance on how to update to more or less something of that kind:; ```console; RequiredPlugin(""Sofa.Components.Visual"") ; VisualModel() ; VisualGrid() ; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1184124812:390,guid,guidance,390,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1184124812,1,['guid'],['guidance']
Usability,"@alxbilger I implemented the refactoring of NameDecoder and clearly this is way better that way. Some part fit much more naturally and both NameDecoder and BaseClassNameHelper have kind of consistency on their respective role. . EDIT: I directly went to the DISABLED state as I see no simple way (apart from duplicating the code) to keep the feature. But In our whole code base, that was very rarely used.. so I think this is the same for plugins.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3465#issuecomment-1308598386:60,clear,clearly,60,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3465#issuecomment-1308598386,2,"['clear', 'simpl']","['clearly', 'simple']"
Usability,"@alxbilger sure. . Actually I'm looking at Subsettopology for your PR (#2825) and my eyes saw its draw function. Don't :) ; When I saw it, I think we have so much duplicated code in every components and that this propagate to the Data<d_showBlablab>. But doing such work is clearly something to do small step by step during our dev session or for a coding sprint during STC (@hugtalbot) with pizza's.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2838#issuecomment-1088812518:274,clear,clearly,274,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2838#issuecomment-1088812518,1,['clear'],['clearly']
Usability,"@alxbilger you are right, only NewMat* things are not moved/done but this will deprecated ASAP (as well as the LULinearSolver which is only usable with those matrices)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2150#issuecomment-971431358:140,usab,usable,140,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2150#issuecomment-971431358,1,['usab'],['usable']
Usability,"@damienmarchal @epernod, Taking @sescaida's comment into account, I tried to create an example showing the undesirable behavior related to the cleanDirty() call, unsuccessfully.; The comments for the sofa::core::DataEngine class in Sofa are very clear about the order in which the update() method should be implemented: first call update / getValue / updateIfDirty on your *inputs*, then call cleanDirty, then call setValue on your outputs. I have had issues in the past related to this specific cleanDirty() method, but for some reason I can't reproduce it. ; Does any of you understood the problem enough to create a small example causing the issue? I'll keep digging on my side.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/751#issuecomment-414978348:246,clear,clear,246,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-414978348,1,['clear'],['clear']
Usability,"@damienmarchal @tgaugry @jnbrunet, what do you think of @sescaida 's comment?. I agree that it makes it a bit tricky to look into the inner mechanisms of the creation of datafields from the createObject method.; I tried to make it as clear / explicit / fail-safe as possible though: ; - datafields passed through the createObject() function MUST be inputs fields referenced in the `args` dictionnary present in the Python class and there is a nice warning showing up when you try to pass an argument that doesn't exist in the args `dictionary` to createObject; - The user needs to explicitely use the decorator function in the SofaPython module on the parse() method, so he kinda has to know what the decorator does; - The syntax is as close as possible to the syntaxt of normal sofa::core::DataEngines created in python:; ```node.createObject('TransformEngine', input_position='@component.data', translation='0 0 0')```; would translate into; ```node.createObject('PythonScriptDataEngine', input_position='@component.data', translation='0 0 0', filename=__file__, classname='PyTransformEngine')```. I personnally believe it's a must-have feature, because, let's say you have a python scene in which you have to create 5 times the same PSDE component, a custom TransformEngine for instance:; - Without this PR, you would have to create 5 separated classes, with the exact same implementation, just a different value in the addNewInput() in parse(). This is very redundant. ; - Passing the inputs values through createObject allows you to create a component only once, and use it as many times as you want in your scene afterwards.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/743#issuecomment-414973420:234,clear,clear,234,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-414973420,1,['clear'],['clear']
Usability,"@damienmarchal I added a `UnableToOpenFile()` function and modified ""MeshTrian.cpp"" accordingly, for now. Could you check if I am in right direction? If I am, I would follow up with changes in other loader and components. **Caution**: I couldn't test if it actually works! Because, a function `findfile(filename)` exists to check if file exists. So, to make `fopen()` purposely fail, even after supplying correct filename, I tried changing permissions with `chmod uga-r MeshTrian.cpp`, but it didn't report any error even with sofa's official master version. I tried couple other ways to purposely fail `fopen()` but they didn't work. Anyway, since the code looked fine, and to receive feedback, I will make a PR shortly.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/197#issuecomment-381862958:686,feedback,feedback,686,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/197#issuecomment-381862958,1,['feedback'],['feedback']
Usability,@damienmarchal It makes sense. Thanks for the feedback,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3480#issuecomment-1324904059:46,feedback,feedback,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3480#issuecomment-1324904059,1,['feedback'],['feedback']
Usability,"@damienmarchal if you check for '-' in the vector<unsigned>::read specialization, is it necessary to check for it in the getUnsignedNumber?; Also, since strtoll returns a signed integer, you could simply check for its sign rather than playing with strings.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302702732:197,simpl,simply,197,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302702732,1,['simpl'],['simply']
Usability,"@damienmarchal it is not the right place, but it is the right moment, in case you did not know it.; It is easy to modify an existing PR. You simply have to add the fork containing the PR in your local repo (`git remote add`), you can then have access to the PR like any other branch. The pb with this specific PR, is that the branch is the master of the BehnamBinesh fork, it is quite disturbing to modify the master of someone else, but I guess it is ok here.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/48#issuecomment-264177683:141,simpl,simply,141,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/48#issuecomment-264177683,1,['simpl'],['simply']
Usability,"@damienmarchal regarding the hook in the addObject(BaseObject*) so that any addition of a Mass Object, should it not simply warn the user that no gravity will be applied if no GravityForceField is added ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3149#issuecomment-1235280937:117,simpl,simply,117,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3149#issuecomment-1235280937,1,['simpl'],['simply']
Usability,"@damienmarchal there's not really anything you could've done differently, that was just the first time I encountered this situation. I tried re-merging my branch on a new PR and it succeeded, but the build failed since all the previous changes were reverted (so no `PythonEnvironment::gil` defined, etc). I had to find and revert the revert commit, then push it to the PR branch to get the changes back in. It was very simple in the end but for a while it got me pretty worried :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/347#issuecomment-319000414:419,simpl,simple,419,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/347#issuecomment-319000414,1,['simpl'],['simple']
Usability,"@damienmarchal you're right, my bad, it does not fail on my build :-/ . Looking into it, thanks for the feedback.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/326#issuecomment-314418538:104,feedback,feedback,104,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326#issuecomment-314418538,1,['feedback'],['feedback']
Usability,"@damienmarchal, splitting our sprint branch in 2 was not hard but like you I'd like to merge things correctly.; I agree with your proposal but I think we should also reopen a PR from https://github.com/SofaDefrost/sofa/commits/deprecating_components beheaded until 456d88343e210ce89d9f7436c290be92fe438313 to merge all sprint prerequisites first.; This way, the two PRs from our sprint will be very clear.; What do you think ? I am ready to do it ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/413#issuecomment-334468636:399,clear,clear,399,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-334468636,1,['clear'],['clear']
Usability,@epernod I just simplified the code and added some readyOnly properties; Maybe you could test before merge.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-741936553:16,simpl,simplified,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-741936553,1,['simpl'],['simplified']
Usability,"@etienneschmitt, thank you for the test. ; ; The dashboard seems to report there is problem with the added test: ; https://www.sofa-framework.org/dash/?branch=pr/fix_vtkloader. EDIT1: isn't the file 'vox8_binary.vtk' missing ?. Apart from the dashboard issue i would say:; +1 for the use of c++x11 ; +1 for the test ; +1 for the new feature ; :). As @thomas-lemaire was assigned by Mathieu to this PR I assume having its feedback is important before merging.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/72#issuecomment-265752803:421,feedback,feedback,421,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/72#issuecomment-265752803,1,['feedback'],['feedback']
Usability,"@fjourdes and @ChristianDuriez I think this comes from the collaboration between you guys.; Last moment for a feedback before merge, thx",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/218#issuecomment-456727444:110,feedback,feedback,110,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-456727444,1,['feedback'],['feedback']
Usability,"@fjourdes if you have 2 sec, could you please give your feedback on the 2 lines change in the FreeAnimationLoop. ; It was done to fix a problem of position update between the mapped tool and the geomagic driver. See #1148 ; I don't have the knowledge to say if it is a real fix or if it will bring side effects. ; Thanks",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1217#issuecomment-558076674:56,feedback,feedback,56,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1217#issuecomment-558076674,1,['feedback'],['feedback']
Usability,"@fjourdes sorry for the assignment, miss click. I wanted to assign fredroy :/; But your answer looks good to me, thanks for the PR. I will try to fix the SimpleGUI soon.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/493#issuecomment-339258771:154,Simpl,SimpleGUI,154,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/493#issuecomment-339258771,1,['Simpl'],['SimpleGUI']
Usability,"@francoisfaure ; > E.g. Mat<3,3,SReal>. This just shifts the same issue to chunk types, then :-) . I probably misunderstood your proposal: you mentioned having the sparse matrix type passed as a template parameter for efficiency reasons. I was simply pointing out that this template type cannot be known outside of the component, and so cannot appear in the `back_insert_iterator` type which is part of the hypothetical API I hinted to. Maybe you had this in mind from the start and I did not get it. @fjourdes Maybe it would be preferable not to *return* a `std::vector`, but instead to push to an existing one like so:. ```c++; class BaseForceField; {; public: ; virtual void getMatrixChunks(std::vector<MatrixChunkType>& chunks) const = 0; ; };; ```. This way you make no assumption as to whom should manage the memory, and leave the opportunity to optimize memory allocations. . I assume the `MatrixChunkType` holds the type index, so you can `std::visit` it and dispatch using its actual type? Having a type index per chunk means having one dispatch per chunk, and I am afraid this would somewhat bring us back to the ""one virtual call per element"" issue :-/ But maybe the compiler would be clever enough to optimize this? . More problematic, each chunk would have the size of the largest element in the tagged union, unless we use an extra indirection. . I was more thinking of having one `std::vector` per chunk type in the chunk container like so: . ```c++. struct chunk_container {; // add more as needed; using chunk_vector = std::variant< std::vector< chunk<1, 1> >, ; std::vector< chunk<2, 2,> > >;; ; chunk_vector storage[2]; // size can be inferred automatically; ; template<int I, int J>; void push(chunk<I, J> c) {; static constexpr int index = chunk_index<I, J>(); // correct index in chunk_storage; std::get< std::vector<I, J> >(storage[index]).push_back(c);; }; };",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292914877:244,simpl,simply,244,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292914877,1,['simpl'],['simply']
Usability,"@fredroy I worked on this problem too, but my approach was to refactor texture references by using texture objects. It is not trivial. It's not working yet. I'll try again in the week, otherwise I suggest to simply remove the usage of textures. I'd use simply raw GPU pointers. This alternative is easier than the texture objects approach (but it may cost a bit of performances (perhaps negligible)).; My point is, don't merge this PR right now, unless is super urgent.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427103805:208,simpl,simply,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427103805,2,['simpl'],['simply']
Usability,"@fredroy The choice is given. User can simply change the value of `EIGEN_ROOT` to use another Eigen. @epernod I was also thinking about a submodule solution but I need time to decide between multiple possibilities:; 1. Use our own [custom external project mechanism](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/SofaFramework/SofaMacros.cmake#L164-L257) (already used for HighOrder plugin and Regression project). Some changes may be required to limit the fetching process (for now, it fetches at every configure as long as `SOFA_FETCH_XXXX=ON`).; 2. Use (correctly) the standard [CMake external project mechanism](https://cmake.org/cmake/help/latest/module/ExternalProject.html). As far as I understand, this should be used only when building the dependency, so Eigen is not concerned. But should we use it for others?; 3. Use [CMake FetchContent mechanism](https://cmake.org/cmake/help/v3.11/module/FetchContent.html), limited to CMake >= 3.11 (30 Nov 2018). As I'm writing this, I think solution 1 is the best but needs some rework at least to improve the fetching process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510040955:39,simpl,simply,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510040955,1,['simpl'],['simply']
Usability,@fredroy This is a very good question and definitely worth investigation. . To me this is related to a systematic problem we have regarding the mix between Data update through DDG or updates using toModel and fromModel. As far as can think about it is that BarycentricMapping should stop using the to and from model to compute barycentric topologies Maybe it should be refactored to be part of the Data depenency graph by adding few data field.; - control_rest_position // The vector of positions that are the control points of the interpolation space. ; - target_rest_position // The vector of positions that are embeded into interpolation space.; ; With these two it is clear that a change in the contrl_rest_position or target_rest_position should trigger the recomputation of barycentric coordinates.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2925#issuecomment-1124734825:672,clear,clear,672,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2925#issuecomment-1124734825,1,['clear'],['clear']
Usability,"@fredroy a feedback from Hadrien from #3894. A crash is occuring from the SofaCUDALDI plugin, but it does concern SOFA.; The crash has been noticed when constraints are added on a ""non-mechanical"" object, aka a passive/non-moving object used for the collision detection (MechanicalObject with no solver). In the SofaCUDALDI plugin the following code is written : . ``` cpp; MatrixDerivRowConstIterator1 Re1= c1.readLine(c.myCId);; MatrixDerivRowConstIterator2 Re2= c2.readLine(c.myCId);; ; for (MatrixDerivColIterator1 it=Re1.begin(); it!=Re1.end();++it); {; //unsigned int dof = itSvd1->first;; dx1+= it.val(); //x1Free[dof] - x1[dof];; }; ```. while in CompressedRowSparseMatrixConstraint.h there is: ; ``` cpp; ColConstIterator begin() const; {; Range r = m_matrix->getRowRange(m_internal);; return ColConstIterator(m_internal, r.begin(), m_matrix);; }; ```. and in CompressedRowSparseMatrixGeneric.h :; ``` cpp ; Range getRowRange(Index id) const { return Range(rowBegin[id], rowBegin[id+1]); }. ``` . where rowBegin is empty. Hadrien explained that in a CRM structure, 2 values are required minimum in order to check whether the CRS is empty or not; Is this possible ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4179#issuecomment-1723731877:11,feedback,feedback,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4179#issuecomment-1723731877,1,['feedback'],['feedback']
Usability,"@fredroy what do you think about the feedback from @fjourdes and @JeremieA ? . This topic interests me because it is connected with a usability issue I would like to see solved one day. . Suppose you are using ""BeamAdapter"". After some time you stop using ""BeamAdapter"" and one year later you (or a collegue/successor) want to reload the scene. It will not work and the user has no idea why the scene is not working anymore (he forgot he is no compiling the plugin anymore). . There is no such problem when there is ```<RequirePlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/>``` but people forgot them too often because they are 'silently' loaded by runSofa. . In that view, the autoload system, by facilitating people not to write the ```<RequiredPlugin>``` does not seems very appealling to me making the situation worse. . This is why I suggest to add to add a mechanism that warns users each time a scene is loaded and this scene contains component based on either autoloaded (or loaded from a configuration file) plugins.; A gentle reminder like that would be great: ; ```; Warning(root): This scene is using components (Beam) from the plugin 'BeamAdapter' but ; the plugin is not indicated as required in your scene. ; Please fix your scene by cut&pasting the following line at the beggining. ; <RequiredPlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/> ; ```. To implement such warning we probably needs the kind of manifesto file @fjourdes is proposing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257:37,feedback,feedback,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257,2,"['feedback', 'usab']","['feedback', 'usability']"
Usability,"@fredroy, welcome back, . When I'm in this situation here is my workflow: . If it is really important for other to see my progress, or have multiple person commiting in the branh and have systematic feedback from the CI...I let the PR open with the pr:wip tag as guillaume answered. . Otherwise, if I prefer less publicity on the work (and avoid the PR to stay for month in the wip status) I close the PR, then open a new issue sumerizing & centralizing the discussion and I continue working in the closed PR. If from time to time if I need CI's feedback I re-open the closed PR for few hours..then close it back again until I really think this is a work nearly done.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/253#issuecomment-304904342:199,feedback,feedback,199,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-304904342,2,['feedback'],['feedback']
Usability,"@ggrosshenny ; Thank you for you PR. Being able to save timing in JSON is a very nice idea and as more and more sofa component are using JSON so it make sense to have that. . Now, some feedback about the implementation:; - There is a lot of new functions but there is not test for any of them. . - The way you handle errors in the binding code is now deprecated as it was not following the python standard. The proper way is that failure in binding code must return NULL (and not Py_RETURN_NONE). You can add an execption and a custom message with PyErr_SetString(...) but you don't need to do that when the failure is because of PyArg_ParseTuple...as it set the message itself so that it is standardized. . So, it should be like that: ; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); return NULL;; ```; Instead of:; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); {; PyErr_BadArgument();; Py_RETURN_NONE;; }; ```. - You are commenting the python binding code using doxygen, thank you very much for that ! As these are python functions it would be great if you could also provide python docstrings (as this is the python standard of documenting code). You are using the SP_MODULE_METHOD macro which have and empty docstring by default... sofa is missing a macro one to specify the docstring (it exists for SP_CLASS_METHOD_DOC). So to document you functions you first need to add a new macro close to SP_MODULE_METHOD with:; ```cpp; #define SP_MODULE_METHOD_DOC(MODULENAME,M, D) {#M, MODULENAME##_##M, METH_VARARGS, D},; ```; Then you can document the python code in a way similar to when using ""SP_CLASS_METHOD_DOC"". . - the externals libraries should be in the repository extlibs/* so sofa/helper/json.hpp should be moved there. - I have no opinion whether the JSON output should be activated only when the json.hpp is found or if we should systematically ship this lib with sofa. @hugtalbot probably have better opinion on these aspects as this have connection with the Licens",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885:185,feedback,feedback,185,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885,1,['feedback'],['feedback']
Usability,@guparan ; Actually there were not used at all in the sofa code base so I simply remove them. To you have a suggestion about that ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/407#issuecomment-330469848:74,simpl,simply,74,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/407#issuecomment-330469848,1,['simpl'],['simply']
Usability,"@guparan In fact, calling `sofa::helper::ArgumentParser::extra_args()` from `SceneLoaderPY::doLoad` (line 89 of SceneLoaderPY.cpp) causes an inconvenient limitation: The python scene loader cannot be used correctly when using a different parser than `sofa::helper::ArgumentParser`. . And in SofaQtQuick, we precisely would like to use the class `SceneLoaderPY` but using `QCommandLineParser` (`sofa::helper::ArgumentParser` is not used at all in SofaQtQuick). In the suggested commit, I simply move the call of `sofa::helper::ArgumentParser::extra_args()` from `SceneLoaderPY::doLoad` into more high-level methods. But this change induces to add a second input parameter for `SceneLoaderPY::doLoad`, in order to forward sceneArgs. Knowing that `doLoad` is originally a pure virtual method defined in class SceneLoader (see file SceneLoaderFactory.h), the multiple method overrides of this one (so in each scene loader) have to take into account the sceneArgs parameter even if it does nothing with it, that's why I made the parameter optional (NULL by default).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/992#issuecomment-484164265:487,simpl,simply,487,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/992#issuecomment-484164265,1,['simpl'],['simply']
Usability,@guparan It is relatively easy because there is already good examples in some Sofa components. So it is more a factor of refactoring/reorganize/reuse existing code. . I consider that anything that has consequence on the User Experience is of high priority (in order to get more and more happy sofa users). Data fields are a big part of the sofa User Interface.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/64#issuecomment-264851270:220,User Experience,User Experience,220,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/64#issuecomment-264851270,1,['User Experience'],['User Experience']
Usability,"@guparan in our plugins organization objects is there to hold c++ class that are not components while in general 'core' in sofa is for the base classes and infrastructure. Actually what we are putting in this objects directory is much closer in essence to what is actually in sofa/helper (ie utilitary classes). But ""objects"" is not a very clear name after all and core is maybe not better but not worse so if you like it...let's use it ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334517552:340,clear,clear,340,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334517552,1,['clear'],['clear']
Usability,"@guparan it was there and ""already in the path"" I simply dropped ninja in it :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/234#issuecomment-291500471:50,simpl,simply,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/234#issuecomment-291500471,1,['simpl'],['simply']
Usability,"@guparan thanks for the feedback, I will change all the #ifdef XXX_HAVE_SOFA_GL then",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1888#issuecomment-790721996:24,feedback,feedback,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1888#issuecomment-790721996,1,['feedback'],['feedback']
Usability,"@guparan the timeout in Jenkins is a timeout of ""no activity"" and not absolute...an application that constantly print on its ouput is not halted. This is clearly not enough. . We probably need both logics:; - a 'no activity' timeout that should be set to a short duration like 30min.; - an 'absolute' timeout configured to a much larger value (eg: build duration + all the test + 40% ). EDIT: one thing to add, timeout is not the panacea because a '3 hours timeout' (a sound value) already allows problematics build to cause a lot of harm in the CI. Our log files are always far below < 100 MB unless something goes really wrong. So my suggestion is some checks on the log file size to detect and cancel offending builds.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117:154,clear,clearly,154,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117,1,['clear'],['clearly']
Usability,"@guparan, @fredroy, @marques-bruno . I'm facing a problem here, all the scene are failing because of interaction between the library in this PR and the ""automatically loading plugin"" mechanism we have. . In this PR, a new module is added but as this does not contains sofa components there is no need for to implement the 'plugin' interface (the initExternalModule() and other functions). But, by default the build scripts are automatically adding all plugins&modules into the config file with the plugins to load by automatically including things that does not have components (and thus are ""simple shared libraries). . What do you think about:; - differentiate better the 'libraries' from the plugins. This may be by adding adding a ; sofa_add_library() ? ; - store the libraries in a different build location than the plugins/modules. ; - I can add the initSofaEditor.cpp with the missing function...it would work but as this does make sens I'm hesitating to such solution.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429:593,simpl,simple,593,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429,1,['simpl'],['simple']
Usability,"@guparan: ultimately what I wanted to achieve with this PR was to roll back to https://github.com/sofa-framework/sofa/commit/ca0402dbfb909c222f913cb7b8f03a522f71f9ad in terms of what the PluginRepository contains. I made a mistake when it came to the content of the PluginRepository except for the windows platform which is my most common development environment.; There have been multiple changes made to this file, most for no good, and mostly undocumented, reasons, this was working in the first place.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342480134:446,undo,undocumented,446,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342480134,1,['undo'],['undocumented']
Usability,@guparan; ​Thanks for managing the pull request. I'll make a new one according to the commit guidelines within the week .,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/287#issuecomment-307788624:93,guid,guidelines,93,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/287#issuecomment-307788624,1,['guid'],['guidelines']
Usability,"@hugtalbot ; - it is not related to #1087, ; - it is more to prepare the evolution from the class that mix in a single object a static/singleton part of the object and a part that shouldn't be one. It was often said in discussion that such design was highly questionnable. ; - i prefer to have such move before implementing the import/namespace in the factory demonstrated in https://github.com/sofa-framework/sofa/pull/2512; ; About the use of the ""future"" namespace I use it to clearly show that there is two ""ObjectFactory"". The one with the old API (and it fully backward compatible) and the one with the new API. I could of course have mixed everything (the old and the new API) in a single one object but I found it quite convenient to clearly see the objects future::ObjectFatory and ObjectFactoryInstance in their final state and well separated from the ""compatbility"" layer in ObjectFactory. ; I could have use a different class name for future::ObjectFactory like NewObjectFactory but this is would have been behaving exactly like having a namespace glued to the class name (actually I see this a namespace hidden in the classname so people don't notice it is one ;)); I also consider using the approach of SofaNG to make deprecation but this only work if we move the new version of the object to be in a different namespace that the one we want to deprecate. In the present case I wasn't sure we really want to move sofa::core;;ObjectFactory somewhere less, if you find an appropriate suggestion i would be very welcome as I would found that easier than using the ""extra"" namespace. ; In NG we often do such a thing but this is done like that:; 1) move the new API to a new namespace (eg: sofa::type::); 2) make a deprecation layer (eg: sofa::defaulttypes::); In the ObjectFactory cas I'm not sure there is a need to have the new api moved in a new namespace (I see no problem in having it in sofa::core) . EDIT: and ""future"" this is nothing related to master branch. As being in master bra",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2712#issuecomment-1054507393:480,clear,clearly,480,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2712#issuecomment-1054507393,2,['clear'],['clearly']
Usability,@hugtalbot @alxbilger @fredroy ; I have added the deprecated lifecycle mechanism as requested. Could you tell me if I did it right. The instructions on the webpage are not 100% clear to me.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3327#issuecomment-1272091500:177,clear,clear,177,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3327#issuecomment-1272091500,1,['clear'],['clear']
Usability,@hugtalbot Can you merge it please (unless someone see problems and give feedback),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/63#issuecomment-262619814:73,feedback,feedback,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/63#issuecomment-262619814,1,['feedback'],['feedback']
Usability,@hugtalbot I simply checked out #2999 :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3084#issuecomment-1172285654:13,simpl,simply,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3084#issuecomment-1172285654,1,['simpl'],['simply']
Usability,"@hugtalbot My intuition would answer no, but I cannot prove it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3233#issuecomment-1223895055:14,intuit,intuition,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3233#issuecomment-1223895055,1,['intuit'],['intuition']
Usability,"@hugtalbot unless it is a very important fix, please don't forget to wait a 1 week quarantaine before merging to give an oportunity to anyone to give feedback :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/168#issuecomment-279689308:150,feedback,feedback,150,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-279689308,1,['feedback'],['feedback']
Usability,"@jnbrunet To be clear, there are 2 optimizations in this solver: 1) optimization for diagonal masses, 2) multiop optimization.; I did not touch anything in the non-optimized multiop code. I changed the velocity input in the position update in the optimized multiop code. # Non-optimized multiop code. I did not change this code. ## Symplectic. ```; newVel = vec + acc * dt; newPos = pos + newVel * dt; ```. ## Non-Symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. # Optimized multiop code. ```cpp; ops_vel.second.emplace_back(vel.id(), 1.0);; ops_vel.second.emplace_back(acc.id(), dt);; ops_pos.second.emplace_back(pos.id(), 1.0);; ops_pos.second.emplace_back(d_symplectic.getValue() ? newVel.id() : vel.id(), dt);; ```; `ops_vel` is executed first if symplectic. `ops_pos` is executed first if non-symplectic. If I translate this code to formulas:. ## Symplectic. ```; newVel = vel + acc * dt; newPos = pos + newVel * dt; ```. ## Non-symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. This is exactly the same formulas than for the non-optimized code!; My change was on the line:; `ops_pos.second.emplace_back(d_symplectic.getValue() ? newVel.id() : vel.id(), dt);`; Before it was:; `ops_pos.second.emplace_back(vel.id(), dt);`. It would translate to:. ## Symplectic. ```; newVel = vel + acc * dt; newPos = pos + vel * dt <-- difference here with the non-optimized code; ```. ## Non-symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. # Conclusion. I believe that I fixed the multiop optimized symplectic version. Both optimized and non-optimized codes are now consistent. Note that this makes a difference only for the FreeMotion animation loops. @jnbrunet Regarding your math problem, I don't understand it. I don't see where you see a difference with SOFA. If you agree, I think we can merge this PR because it does not change the behavior (except for the fix). If there are some maths problems, it can probably be tackled later. What",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-867677866:16,clear,clear,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-867677866,1,['clear'],['clear']
Usability,"@jnbrunet thanks for the code. I'm wondering if canCreate is the right stage to do that because if the link can't be resolved, your FF will not be created at all. But in a ideal SOFA world, if the component is set to invalid because the link is not working you could update it in your gui, solve the link which will act like a Data and update the component. I'm also wondering if the mstate link is set in your scene, is it already usable in the ForceField constructor ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705099048:432,usab,usable,432,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705099048,1,['usab'],['usable']
Usability,"@jnbrunet, @fredroy I updated the PR, . can you give me feedback on the implementation of error/warning promotion (in config.in.h)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1639#issuecomment-737198485:56,feedback,feedback,56,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1639#issuecomment-737198485,1,['feedback'],['feedback']
Usability,"@marques-bruno you're right! You had already mentioned that this would improve the reusability of PSDE-Python-Code written by the user. In that case I am in favor of this feature. About the intuitiveness: do you (and the others) think it would make sense to have an additional argument in createObject() that explicitly has to be set to use this feature of ""inline"" PSDE I/O creation?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/743#issuecomment-416164790:190,intuit,intuitiveness,190,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-416164790,1,['intuit'],['intuitiveness']
Usability,"@marques-bruno: can you provide examples for the behavior you describe? (maybe add them to the PR) I don't have as much experience with the update-on-demand feature. Pertaining to the discussion in PR#629 (should we use on-demand updating or events) I would also appreciate the opinion of the others. The pros of on-demand updating is consistency with the DataEngines, the pros of the event-based approach is simplicity. @marques-bruno has been raising the issue of code maintainability regarding the update-on-demand feature of DataEngines for a while and this PR seems a good opportunity to decide what the developments in the future could be. For me the questions are: Refactor the implementation? Document the behavior in a more understandable way? Simplify/Change behavior alltogether?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413554139:409,simpl,simplicity,409,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413554139,2,"['Simpl', 'simpl']","['Simplify', 'simplicity']"
Usability,@matthieu-nesme . Currently no-one answered to the checkData API related issues https://github.com/sofa-framework/sofa/issues/265 so I don't know when this will happen.I hope this will happen soon but currently I have no visibility so I prefer to make the change of existing function in batch when a PR related to #265 will be accepted. . In the meantime it is probably a good idea to add a function called checkDataValidity() called in init() just to simplify the transition when it will happen.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302639771:452,simpl,simplify,452,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302639771,1,['simpl'],['simplify']
Usability,"@matthieu-nesme . The version is very simple...; In the constructor we:; - record the already loaded modules, ; - install a hook on the import function. . At each subsequent import we record in a second list the imported modules. ; Then when calling uninstall we remove from python module cache the one that are in this second list...(thus returning to the previous loading state). This force python to reload them next time it sees an import. About the re-init... ; Do you know how to be notified when the scene is going to be destructed and if there is no...is this something you could implement easily ? . EDIT: I cleaned the branch for a PR once the reinit stuff cleared.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/193#issuecomment-285083694:38,simpl,simple,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/193#issuecomment-285083694,2,"['clear', 'simpl']","['cleared', 'simple']"
Usability,@matthieu-nesme I like so much your concision I should learn from that when writing ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/44#issuecomment-276933049:55,learn,learn,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-276933049,1,['learn'],['learn']
Usability,@matthieu-nesme what's wrong with using `str` ? The semantics are clear and concise and you don't have to mentally infer the various checks that will take place when converting. The explicit case checking looks much worse to me. (sorry for bikeshedding). @damienmarchal why not recursive? This prevents setting `MechanicalObject` positions when `size > 1`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308039440:66,clear,clear,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308039440,1,['clear'],['clear']
Usability,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:1051,feedback,feedback,1051,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180,1,['feedback'],['feedback']
Usability,"@maxime-tournier ; I think that any code that pass a sequence to createObject will work differently. ; Eg: ; 1) passing a python sequence to a Data<string> was resulting in [1,2,3], now it will be 1 2 3. If your component count on the [1,2,3] structure to do something it will not work anymore. ; 2) passing a python sequence to a Data<set> was resulting in [1, 2 3] but because the parser was not reporting problems this was resulting in something different (0 0 0 ?) ... if the scene was, 'by surprise', working...it will not work anymore. The case (1) is probably rare but not fundamentally bad.; The case (2) is clearly bad but exists. 1 & 2 are rare cases and I'm convinced we shouldn't annoy anyone using createObject with warning messages this is why I personally think that having a global switch (not an #ifdef) to print these kind of messages would be great to tools to help users to debug their scenes through the API changes. (maybe it is overkill :)). About having the warning in the 'else' case. It may be an option but we still want to support simple conversion from int/string/float values without a warning right ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306600829:616,clear,clearly,616,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306600829,2,"['clear', 'simpl']","['clearly', 'simple']"
Usability,@maxime-tournier I believe the last commits takes your input into consideration (if I didn't miss anything); Looking forward your feedback,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/317#issuecomment-315029412:130,feedback,feedback,130,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/317#issuecomment-315029412,1,['feedback'],['feedback']
Usability,@maxime-tournier I would alreay be happy with a feedback on the approach taken to cut the depdencies. I'm asking because I know the topic interests you.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-343905851:48,feedback,feedback,48,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-343905851,1,['feedback'],['feedback']
Usability,@maxime-tournier Thanks for your responsiveness ;). Mergeable to me.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/283#issuecomment-306789278:33,responsiv,responsiveness,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-306789278,1,['responsiv'],['responsiveness']
Usability,"@maxime-tournier and @matthieu-nesme ; Thanks for your suggestions,. It is not very clear when you are refering to ""current approach"" if you are discussing about the sofa version or the one that is already in this PR. . Existing Sofa looks like: ; ```cpp; namespace std{; ... operator<<(ostream, std::set); ; }; ```. In this PR it looks like: ; ```cpp; namespace sofa::helper{; using std::set ; /// do we need the template prefix as matthieu suggested ? ; ... operator<<(ostream, sofa::helper::set); ; }; ```. Maxime's suggestion ; ```cpp; namespace foo{; template<class ...T>; struct vector final : std::vector<T...> {; using std::vector<T...>::vector;; };; ... operator<<(ostream, sofa::helper::set); ; }; ```. The sofa existing one is clearly bad as it pollute the namespace. It seems to me that maxime's suggestion avoid the need to have 'using operator<<' in calling code. It is unclear to me what are the drawback.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/278#issuecomment-303335697:84,clear,clear,84,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/278#issuecomment-303335697,2,['clear'],"['clear', 'clearly']"
Usability,"@maxime-tournier just to make things clear for me. ; You use an intermediate data structure to store the matrix values ( wherever they are coming from, mapping forcefield... ) and the mask data structure store the sparsity pattern. Since Flexible and Compliant rely extensively on the `Mapping` API, (conceptually everything can be broken down in a combination of application + linearisation around a given configuration) the only requirement in that case is to be able to express the sparsity pattern of each mapping, am I correct ? . That being said I agree that it would be ideal to have an intermediate data structure to supersede the `BaseMatrix` API, to fetch the matrix data ~~( and maybe the sparsity pattern at the same time ? )~~ that could fit with any linear algebra library with minimal overhead.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292484429:37,clear,clear,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292484429,1,['clear'],['clear']
Usability,"@maxime-tournier ok I am convinced, let's use str for everyone (except list/iterable) to remain on a simple implementation. Please could you propose us an implementation?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308057027:101,simpl,simple,101,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308057027,1,['simpl'],['simple']
Usability,@olivier-goury and @EulalieCoevoet this PR can be severly breaking so don't hesitate to review it and give feedback to Hugo.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199306:107,feedback,feedback,107,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199306,1,['feedback'],['feedback']
Usability,"@olivier-roussel thanks for the conda test and the feedbacks 👍; You should have made suggestions and/or make a PR on my branch, as I cannot credit you your patches 😵",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1922632664:51,feedback,feedbacks,51,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1922632664,1,['feedback'],['feedbacks']
Usability,"@rgao15 Thanks a lot for the feedback!. I tried to reproduce your issue. On my end, I do have an error message:; ```; [ERROR] [MouseOperation] ConstraintAttachBody performer cannot be created with the picked model.; ```; Let us know if you have the same error message. I am also on Windows. Anyway, I tried to understand what's happening. Why ConstraintAttachBody cannot be created?; It is supposed to be added in a factory here : https://github.com/sofa-framework/sofa/blob/323e20e4168e1ab5b67352f4621d4f1b3fa39be9/modules/SofaConstraint/src/SofaConstraint/ConstraintAttachBodyPerformer.cpp#L38; Registration in the factory works BUT not in the right factory.; The factory in `modules/SofaGuiCommon/src/sofa/gui/MouseOperations.cpp` and in `modules/SofaConstraint/src/SofaConstraint/ConstraintAttachBodyPerformer.cpp` are different. The factory is a singleton but there are 2 different instances. I confirmed it by printing the factory address. I suspect it's because they are used in different libraries. The question is: how to solve it? And is it the same story for other factories? @fredroy @damienmarchal I would need your help",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2486#issuecomment-973088531:29,feedback,feedback,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2486#issuecomment-973088531,1,['feedback'],['feedback']
Usability,@sergeiNikolaev . I think your problem is interesting and is an important issue of Sofa usability. If you agree and other interested we could discuss here what ones can come up with possible solution (ie having more clear/simpler way to define component's properties).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357354462:88,usab,usability,88,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357354462,3,"['clear', 'simpl', 'usab']","['clear', 'simpler', 'usability']"
Usability,@sergeiNikolaev would you also have a simple example scene ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-644877800:38,simpl,simple,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-644877800,1,['simpl'],['simple']
Usability,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:388,clear,clearly,388,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370,1,['clear'],['clearly']
Usability,"@sescaida Thanks for the review; The reason why I didn't add examples for this PR is because the current examples themselves, without any modification, demonstrate that it works as-is, thus showing that the call to update() in the handleEvent method was redundant with the default DDGNode's update mechanism. Basically, if your scene is well created (links are properly made between datafields & data are correctly accessed by components lower in the scene graph), everything should work just as well as before. The only difference I would say, is that the user has the hand over the cleanDirty() method, which allows him to fix use cases where a read acces is performed on an input, after setting an output's value has been set, in update(). as for whether it is a good idea to keep that system, I must say, that I agree with you, as we discussed before: Bringing the complexity of the DDGNode's mechanism in Python might be something we want to avoid.; Although, I think that the good approach to fight this issue would rather be to solve the problem on the C++ side (simplifying the Data-Update mechanism) than to diverge from it by simplifying the Python process.; I think @damienmarchal woul be the best placed to give us a feedback on this question, maybe? (When he'll be back from his holidays of course!)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022:1070,simpl,simplifying,1070,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022,3,"['feedback', 'simpl']","['feedback', 'simplifying']"
Usability,"@sescaida as a reply to you previous comment:. - I think we should indeed remove the call to update from handleEvent, in the dataEngine. Although there are some twisted cases where it is necessary, it is not how it was designed initially I believe. I'd like @damienmarchal 's input on that, though.; Concerning the default value in addNewOutput, I totally agree with you. The only reason I kept it is because it would have even more impact on the error handling codebase in Sofa, which currently forces the existence of a ""value"" field to guarantee that the datatype can be deduced (which we are bypassing for outputs..); Overall, I think there's a decent amount of cleaning to do in this PR before it can be merged, including removing all the warnings that appear because we're working our way around the ""standard"" way to build datafields.; - I also agree with you that we need some reviews on this PR, and maybe also split it in multiple PRs for simpler reviewing. Things are getting mixed up now, between; - Populating the PSDE factory; - Deriving inputs / outputs; - passing datafields through createObject; - ...; I'll pass the PR to to_review and we can take a look at it on monday ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407791294:949,simpl,simpler,949,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407791294,1,['simpl'],['simpler']
Usability,@thomas-lemaire currently I see that some components are doing; ```cpp; if(printLog) sout << ; ```; While the 'sout' is already checking the printLog which is redundant. This is what I'm refering as mis-usagse. To me the cleaning consist in defining what is the right pattern to employ and this may (or not) result in removing the if(printLog) from the component and replace them with the use of 'sout'. . About the link with PR106. With the PR a dedicated message handler has to be installed in the application or the scene to activate loggin into component... this is done with the following code ; ```cpp; MessageDispatcher::addHandler(&MainPerComponentLoggingMessageHandler::getInstance()) ;; ```; But currently this is not done in runSofa or any other app and the messages are not added to the log. This is why I'm saying the PR is independent and is without side effect. . When the printLog expected behavior is clear the current log 'to the big string' should be removed and replaced by installing the logging proposed in PR106.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662:918,clear,clear,918,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662,1,['clear'],['clear']
Usability,@untereiner sorry I didn't saw you expected feedback on the tests. ; I will do that next monday.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-328175570:44,feedback,feedback,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-328175570,1,['feedback'],['feedback']
Usability,"A bit of explanation about this PR:; When a attribute is passed to createObject, it is added to the BaseObjectDescription of the component. This means that, in cpp, the parse() method, that takes a BaseObjectDescription in parameter, has this information. The problem is, that in the PythonScriptDataEngine, the parse method calls the python version of the parse() method, which doesn't take this BaseObjectDescription in parameter (maybe that should change btw, since its mainly a simple key/value dictionnary after all...); The datafields could be added directly from the C++, but since most of the error handling in the creation of derived I/Os in #742 is performed in the bindings, it would mean recoding a lot of redundant code.; Since I didn't want to touch the parse() method, I created an additional method, that can (or not) be used in PSDEs, named ""datalinks"". This method is called right after the parse() binding, and takes a filtered version of the BaseObjectDescription as an argument (all datafields already created in the parse() method are removed from the dictionnary). The function then calls addNewInput() on each of the leftover fields. I'm certain there is a cleaner way of doing that.; - I was thinking maybe calling directly the python addNewInput() method from the cpp parse() method, to avoid the creation of this extra module function, but I am not sure I know how to do that. ; - Another idea would be to pass the BaseObjectDescription in the parse() method of the PSDE (as it should be done IMHO), and let the user decide whether or not he wants to loop over those fields to create inputs.. more error prone in my opinion. But you guys have good input on that ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524:482,simpl,simple,482,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524,1,['simpl'],['simple']
Usability,"A third solution, still in c++, to parse the added field into the function BoxROI::parse() and converts these fields values into the DataField used internally by BoxROI to do the computation. The good is that there is no performance cost. The drawback are the following:; - the parsed attribute are not visible in the GUI thus ppl cannot use them from the graphical interface and even worses, and when learning Sofa cannot discover they exists neither from the doc or from the GUI.; - the parsed attribute cannot be saved easily.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357364812:402,learn,learning,402,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357364812,1,['learn'],['learning']
Usability,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:788,clear,clear,788,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636,2,['clear'],['clear']
Usability,"About the UX, we have different possibilities to use multithreaded algorithms:. # Traditional components using usual DataTypes. They can have some Datas to enable/disable the use of multithreading.; - `FreeMotionAnimationLoop`; - `d_parallelCollisionDetectionAndFreeMotion`; - `d_parallelODESolving`; - `GenericConstraintSolver`; - `d_multithreading`; - `MechanicalMatrixMapper`; - `d_parallelTasks`. # Component in MultiThreading plugin starting with Parallel; Again using the regular DataTypes; - `ParallelBruteForceBroadPhase`; - `ParallelBVHNarrowPhase`; - `ParallelHexahedronFEMForceField`. # In the MultiThreading plugin, there is also these components:; - `BeamLinearMapping_mt`; - `AnimationLoopParallelScheduler`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2049#issuecomment-1318486067:10,UX,UX,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2049#issuecomment-1318486067,1,['UX'],['UX']
Usability,"About the last syntax your are proposing, I think it shouldn't be hard to do. . You simply have to in the c++ construction of the PSDEMagic dedicated code that get the argument named 'update', then extract its parameters (is callable, param names), transform all that as input and generate the output.; Actually this is very similar the use of decorator except that with decorator this ""magic binding"" logic is implemented in python while in your case the ""binding"" logic is done in the c++ part. . I will continue digging in this issue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380411028:84,simpl,simply,84,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380411028,1,['simpl'],['simply']
Usability,"AbstractTypeInfoDynamicWrapper is a façade to ""wrap"" the compile time TypeInfo type-traits into the virtual one. . The TypeInfo type-traits API has several consistancy issues (probably dating back to pre-c++17 area) mixing a lot of different behavior into a single dynamic API... making things very fuzzy. . In the current status of the PR I just wanted to draft something to have a gimplse of the look and feel of a more modern code architecture (without breaking everything). . Regarding your question about insertion in a vector... the problem is that insert is not a push_back... it means inserting ""somewhere"" which could of course be implemented on vector. But it would requires a serious work on the AbstractTypeInfo API to make all that consistent. ;   | set | map | vector | fixed_array; -- | -- | -- | -- | --; clear() | X | X | X |  ; insert(A) | X |   |   |  ; insert(std::pair<key, B>) |   | X | Y |  ; size() | X | X | X | X; resize() |   |   | X |  ; empty() | X | X | X | X. So in short:; ! IsFixedSizeContainer => clear(), resize(); isContainer => empty(), size(); isSet => insert(A) and !insert(std::pair<>). I drafted the general implementation, to illustrate what the current TypeInfo is really doing and how to refactor it: https://godbolt.org/z/srsq3ExPq; extract:; ```cpp. template<class Info>; class AbstractTypeInfoDynamicWrapper : public BaseAbstractTypeInfo; {; public:; bool size() override ; { ; if constexpr(; Info::IsContainer && ; Info::Properties::IsContainer); return Info::clear();; throw std::runtime_error(""Invalid operation"");; }. bool empty() override ; { ; if constexpr(; Info::IsContainer && ; Info::Properties::IsContainer); return Info::empty();; throw std::runtime_error(""Invalid operation"");; }. void setValueInteger(int index, int value) override ; { ; if constexpr(; !Info::Properties::IsSetContainer && ; Info::Properties::Type == DataType::Integer); return Info::setAt(index, value);; throw std::runtime_error(""Invalid operation"");; }; /// ...; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1545409905:1387,clear,clear,1387,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1545409905,2,['clear'],['clear']
Usability,"According to @jnbrunet 's feedback I would say that the right approach to fix this is to stop using implicit and hidden link between objects. In defrost we are doing this kind of pattern (in pseudo code) this: ; ```cpp; class MyObject {; ....; SingleLink<Topology> topologyLink;; }; MyObject::init(){; /// Check if the link is explicitely set, ; if( !topologyLink.isSet() ){; /// If this is not the case so fallback to get the first topology in the context (buisness as usual) topologyLink.setLinkTo( getTopology() );; }. /// Here we use linked object. ; }; ```. Such an approach:; - is compatible with our existing scene base (when no link is specified then automatically retrieve something from the context) . But it brings the following: ; - As there is systematically a SingleLink for each getContext query, users can see in the GUI which object is actually linked to and so he can detect more easily what is wrong. . - With the SingleLink it become possible for the user to specify object should be used instead of the one retrived from the context (eg when you want the second object instead of the first one). . So to me we juste need to generalize this way of doing to all sofa objects. ; Any suggestion and feedback welcome.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/744#issuecomment-411381930:26,feedback,feedback,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/744#issuecomment-411381930,2,['feedback'],['feedback']
Usability,"Actually I was more thinking on tracking Mass::d_componentState to either be notified on changed or to simply detect when a mass is changed using a DataTracker. . Using a DataTracker situation would be more or less the following... . ```cpp; class MatrixLinearSystem; {; // .......; private:; DataTracker massChangedTracker; ; };. void MatrixLinearSystem<>::XXXX(); {; ...; /// somewhere where we add the mass to the lists of contributor; massChangedTracker->trackData(contributor->d_componentState); ... ; }. void MatrixLinearSystem<TMatrix, TVector>::contribute(const core::MechanicalParams* mparams); {; ...; /// Here we can then juste track the change; else if constexpr (c == Contribution::MASS); {; if( massChangedTracker->hasChanged(contributor->d_componentState) ) ; {; contributor->buildMassMatrix(m_mass[contributor]);; massChangedTracker->clean(contributor->d_componentState); ; }; }; ....; }; ```. PS: This is somehow connected to what @hugtalbot is doing in these PRs: https://github.com/sofa-framework/sofa/pull/3927",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4625#issuecomment-2042583615:103,simpl,simply,103,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4625#issuecomment-2042583615,1,['simpl'],['simply']
Usability,Actually there is no clear() method for Links.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/772#issuecomment-425903565:21,clear,clear,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/772#issuecomment-425903565,1,['clear'],['clear']
Usability,"Actually this is not really true, the problem is that the other things with a 'd_' are NOT data 🤪, they are Link and thus should be prefixed with 'l_' . ; So this class is not following the correct guidelines 😬 (and members not having 'm_' etc...)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1939#issuecomment-803896279:198,guid,guidelines,198,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1939#issuecomment-803896279,1,['guid'],['guidelines']
Usability,"After a successful build, I have the following trace when running:. ```; [INFO] [runSofa] PluginRepository paths = /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins:/nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/collections:/nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib; [INFO] [runSofa] DataRepository paths = /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/share/sofa:/nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/share/sofa/examples:/nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/share/sofa:/nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/share/sofa/examples; [INFO] [runSofa] GuiDataRepository paths = /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/share/sofa/gui/runSofa:/nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/share/sofa/gui/qt; [ERROR] [FileSystem::createdirectory()] /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config: Permission denied; [INFO] [BaseGUI] Created directory: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config; [ERROR] [FileSystem::createdirectory()] /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/screenshots: Permission denied; [INFO] [BaseGUI] Created directory: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/screenshots; [INFO] [GUIManager] Registered batch as a GUI.; [INFO] [runSofa] Loading automatically plugin list in /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.Forward.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.Backward.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-so",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:666,GuiD,GuiDataRepository,666,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,1,['GuiD'],['GuiDataRepository']
Usability,"After some tries, I could not come up with something that fails either. This is good news, right? :-). As to the semantics, maybe we should simply add an `__str__` method to `BaseObject` that returns `getLinkPath()`. This way we don't have extra special cases in `createObject` and the semantics become clear enough to me: arguments are converted to strings unless they are sequences, in which case they are converted to the expected format.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307767628:140,simpl,simply,140,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307767628,2,"['clear', 'simpl']","['clear', 'simply']"
Usability,"After spending some (too much?) time on this topic, it seems that the fact that static_assert not being evaluated in uninstantiated functions of template classes is not consistent between compilers.; Neither could I find a way to trick the compiler to postpone the evaluation of the condition of the static_assert (for example replace (N==10) by (sizeof(T)==0||N==10) , of template tricks to force the compiler to wait for template instantiation before assertion evaluation. All this is also true for BOOST_STATIC_ASSERT (tried this with no chance, too). My opinion would be to simply remove the static_asserts, since in this context their behaviour is not specified by C++ references (and not consistent). We loose the benefit of the safeguard but are not subject to false-positive anymore. If anyone sees another solution...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/130#issuecomment-272476017:578,simpl,simply,578,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/130#issuecomment-272476017,1,['simpl'],['simply']
Usability,"Agreed, I don't like adding a Data in every component just for this.; I think the underlying issue of having an empty scene bounding box when there is not visual models could also by fixed relatively simply and without introducing much cost by:; - including the collision models top-most bounding boxes that are already computed during each time step (in fact this could be the only information used by default, as it is cheaper in practice to obtain than the visual bounding boxes because it's already computed for the broad phase); - and/or having a flag in `DrawTool` to look at the given coordinates to compute a bounding box of all non-visual but visible elements. As the DrawTool API is quite inefficient anyway the overhead may be insignificant, and it will disappear in cases where there is no debug information visualised. To me this could be controlled by one of the master component in the root node, either the `AnimationLoop` (as the issue is when `UpdateBBox` happens and how it is implemented, bonus point is that this component would then have the ability to schedule it in parallel with the other computations), or the `VisualManager` (as the current use cases for bounding boxes are currently exclusively to setup the scene rendering bounds and/or show bounds of a subgraph). This control could either be by implementing this update directly, or providing the choice that is setup for this particular scene (which alternative to use, which frequency of bbox updates).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/29#issuecomment-261507387:200,simpl,simply,200,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/29#issuecomment-261507387,1,['simpl'],['simply']
Usability,"Agreed. It's simpler.; To be clearer: plugin was equal to ""PSL"" and not ""PSL.dll"". In this case, we want to to load as a name, but the test based on std::equal crashes (in debug only).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376458776:13,simpl,simpler,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376458776,2,"['clear', 'simpl']","['clearer', 'simpler']"
Usability,"Aha! Well, just to be clear, my suggestion would have been PythonScriptDataEngine-> PyComponent and PythonScriptController -> PyController. I understand that in terms of implementation, even conceptually, a DataEngine is different from a BaseObject. But, this information is of no use to the user in my opinion. When he sees the PSDE he expects it to be updated when the Datas have changed. If I'm new to Sofa and I see a component that is called ""PythonScriptDataEngine"" I figure that it must be something very specific, related to an engine of some sorts. If I see ""PyComponent"" I understand immediately that this is a component in my scene whose behavior I can implement in python. But granted, it doesn't take much to explain in a documentation that what is hidden behind the name ""PythonScriptDataEngine"" is just that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406614649:22,clear,clear,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406614649,1,['clear'],['clear']
Usability,"Alright after digging a bit into the code, I noticed that the XML parser for SOFA has a builtin handling of (forcefully set to) empty strings in name, which has not been ported to SofaPython:. Basically the XML parser stores a map of instantiated components (typename, idx), uses the `shortname` of the component concatenated with the idx of the new instantiation.; For instance 2 MechanicalObjects would be called ""mObject1"" and ""mObject2"". I implemented the same mechanism in the bindings to stay coherent. This mechanism is not perfect though, as one could still easily trick it by creating any component and give it the name ""mObject1"".. but then who would purposely do that... For nodes, It's better handled because at the node's creation, I have access to the node's parent and can thus check the names of components / nodes in the parent to prevent duplications. Still, moving the node post-creation could still result in name duplications, of course. Also in the bindings I have no structure in which to put this map... meaning that It will not be resetted until the whole program restarts, which is kind of ugly (reloading the scene from the UI would not reset the map so the names would change from one execution to another (yuck). I'll remind you that the initial purpose of this code is to prevent creation of nodes/objects with an empty string as a name, not to prevent code duplication (which is a different issue and should be checked using the SceneChecker instead IMHO) Duplicated names can result in undefined behaviors, but empty names can lead to crashes (the component's pathname becomes corrupted). Looking fwd to your feedbacks",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1009#issuecomment-489135388:1641,feedback,feedbacks,1641,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1009#issuecomment-489135388,1,['feedback'],['feedbacks']
Usability,"Alright, it seems the config.h is also needed. This is what I have by simply putting back SofaSimulationCore in SofaFramework. **CMakeLists.txt**; ```; cmake_minimum_required(VERSION 3.1); project(mymy). find_package(SofaFramework); add_executable(${PROJECT_NAME} main.cpp); target_link_libraries(${PROJECT_NAME} SofaSimulationCore); ```. **main.cpp**; ```; #include <sofa/simulation/MechanicalMatrixVisitor.h>; int main () { return 0;} ; ```; **Result**; ```; sofa/build/install/include/SofaFramework/sofa/simulation/simulationcore.h:25:10: fatal error: sofa/simulation/config.h: No such file or directory; 25 | #include <sofa/simulation/config.h>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645:70,simpl,simply,70,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645,1,['simpl'],['simply']
Usability,"Also, I'm seeing this pattern over and over again:; ```c++; if (!PyArg_ParseTuple(args, ""s"",&filename)) {; PyErr_BadArgument();; return NULL;; }; ```; Please don't do that since it replaces the slightly helpful error message set by `PyArg_ParseTuple` by a generic one. Simply return `NULL` instead:. ```c++; if (!PyArg_ParseTuple(args, ""s"",&filename)) {; return NULL;; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/283#issuecomment-306426870:269,Simpl,Simply,269,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-306426870,1,['Simpl'],['Simply']
Usability,"Alternatively, you could simply stick all your data inside a dedicated structure as follows:. ```c++; class Component : public Base {; ; struct data_type {; Data<int> test;; Data<double> test2;. data_type(Component* owner); : test(owner->initData(&test, int(0), ""test"", ""test doc"")),; test2(owner->initData(&test2, double(0.0), ""test2"", ""test2 doc"")) {; ; }; ; } data;. Component(); : data(this) {. }. Component(int foo); : data(this) {. }; ; }; ; ```; As an added bonus, you don't even have to use `d_` prefixing to remember which attribute is a Data ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/274#issuecomment-303142439:25,simpl,simply,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/274#issuecomment-303142439,1,['simpl'],['simply']
Usability,"Amazing work @sergeiNikolaev !; However, as it seems you want into SofaCommon, we have to be a bit strict on the guidelines 👍 ; So could you: ; - remove all useless commented code?; - set prefix for Data<> (d_) and member (m_) ?; - remove serr with msg_error; - maybe uncomment all the msg_info (as it is not print if you dont enable printLog); - would be cool to use pragma once instead of the preprocessor guards (ifdef); Thanks !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616515264:113,guid,guidelines,113,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616515264,1,['guid'],['guidelines']
Usability,"And also I guess that for different people there are different ways to define the component the most usable way. So, I am afraid there won't be unique solution for this problem.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357642003:101,usab,usable,101,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357642003,1,['usab'],['usable']
Usability,"And one more note -- with this scene, if using CG, it is even impossible to learn what is happening during the calculations. If you use a direct solver capable of exporting the matrix, you will learn that in the above scene, the size of the system matrix is 3*184 X 3*184. Thus mathematically speaking, the two mechanical systems were _concatenated_ (181 points in master node + 3 nodes in slave node) which is IMHO an absolute nonsense. But again, you'll never learn that directly from SOFA (only if you examine the matrix dumped by LDL before it crashes).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390929647:76,learn,learn,76,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390929647,3,['learn'],['learn']
Usability,Another alternative that could make sense would be to use std::optional that is part of the c++ language (see: https://en.cppreference.com/w/cpp/utility/optional). So in CableActuator it would look like:; ```; Data<float> m_actuatorValue; Data<std::optional<float>> m_actuatorMinValue;; Data<std::optional<float>> m_actuatorMaxValue;; ```. Of course it make things more verbose...but the good side of that is that it clearly indicate at every use of actuatorMinValue/MaxValue that these values are optional. So optionality is no more a runSofa widget issue but a structural property of the contained data. . DM.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-754525924:417,clear,clearly,417,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-754525924,1,['clear'],['clearly']
Usability,"Another question, If there are some ways to extract the **Constraints Matrix** and ""Internal Force Vector and its Jacobian"". Some simple examples would be greatly appreciated!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4954#issuecomment-2324076285:130,simpl,simple,130,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4954#issuecomment-2324076285,1,['simpl'],['simple']
Usability,Any reason to do this instead of adding a flag `--infinite-run` or similar ? `-1` is a bit counter-intuitive.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/610#issuecomment-373062078:99,intuit,intuitive,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/610#issuecomment-373062078,1,['intuit'],['intuitive']
Usability,Any update on your side @EulalieCoevoet?; Or could you just share a simple scene for us to test and reproduce the problem?; Thanks,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-810881801:68,simpl,simple,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-810881801,1,['simpl'],['simple']
Usability,"Appart from that, I did a quick search in the sofa code base, I didn't paid attention to how much of the doXXXX stuff are with a public visibility... which is clearly not what the design pattern suggested initially.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1753#issuecomment-772637003:159,clear,clearly,159,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1753#issuecomment-772637003,1,['clear'],['clearly']
Usability,As I already mentionned somewhere ( probably in the PR related to multithreading ) in our public branch we have already removed the dependency to boost in the Multithreading plugin. I guess in that respect there are very few commits that need to be backported. ; See : ; https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. However note that we removed from the build of Multithreading all the things related to the components such as `BeamLinearMapping_mt` and so on. Mostly because we did not want to invest any time in adapating components code that we are not sure that it ; - worked at some point in the past ( and by working I mean without any occasional crash related to data races and without any deterministic issue ); - still used by someone somewhere. As a general remark I would downvote the very idea of putting actual implementation of Sofa components in that plugin to keep the dependencies of this plugin to the **bare** minimum. Any library that wants to implement something that rely on the Task mechanism exposed by that plugin should simply do a `find_package(Multithreading)` and react according to the outcome of this method.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270:1101,simpl,simply,1101,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270,1,['simpl'],['simply']
Usability,"As I was not ready to kill all the existing tests I solved the issue in a different way that I found simple. ; The idea is based on a small api that mimick the Python API and then to use it to re-implement the SceneCreator functionnality. This is in the STC4 branch. If you are curious it look like that:; ```cpp; #include<SceneCreator/SimpleAPI.h> . Node::SPtr root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; ```. I'm quite sure we should be able to make much nicer things with a proper eDSLinstead of mimicking the python API but I'm not sure I have time for that. My target was to remove all dependencies between Sofa & SceneCreator and this make the job.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331:101,simpl,simple,101,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331,7,"['Simpl', 'simpl']","['SimpleAPI', 'simple', 'simpleapi']"
Usability,"As an additional thread management pattern, I would like to add a thread pool with persistent worker threads, which also uses ""Task"" instances to encapsulate single work items as in the Multithreading plugin.; The motivation for this alternative to the existing work-stealing approach in the Multithreading plugin is to use it for a simple parallelization scheme in the collision detection pipeline.; There are currently two Task types available:; * For running bounding volume hierarchy updates in parallel; * For running collision pair checks in parallel. Both task implementations require no modifications to the existing collision model implementations (especially not within the CubeModel class).; However, the implementation is not complete yet, as I have yet to find a reliable alternative to generate DetectionOutputVector instances after all collision pair checks have finished their computations.; I have implemented this as a separate library and plugin, largely independent of changes in SOFA core classes and completely independent of the existing MultiThreading plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437:333,simpl,simple,333,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437,1,['simpl'],['simple']
Usability,"As asked I removed the Data in base. . Now here is my working plan regarding all that ordering all the feedback received: ; - PR0: was implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. This was done in this PR. - PR1: with the introduced system to replace the existing logging of error (this PR is risky and touch a lot of file) it should contains: ; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK). ; - removing all the uses of the old message buffers and replace them with the new one (API BREAK). ; - updating the gui to use the new msghandler buffers. - PR2: removing the printLog Data:; - backward compatibility solution must be implemented. ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages . - PR3: extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion. . Anyone interested in working on PR1, PR2 and PR3 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662:103,feedback,feedback,103,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662,1,['feedback'],['feedback']
Usability,"Basically, when i compile sofa using cmake it says that it is adding sofapython3 and it seems not to have any problems. But when i run runSofa.exe sofapython3 is not in the plugin list and i cannot open python scenes in sofa. I can't load it manually fromn the plugin manager either. I tried also to follow the guide to install python3 on github but the problem still remains.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1785018217:311,guid,guide,311,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1785018217,1,['guid'],['guide']
Usability,"But then for the sake of clarity at least, wouldn't it still make sense to implement this function by checking whether or not the values are the same as the defaults?; One can argue that a zero-ed matrix doesn't mean an ""empty"" matrix, and some could consider the identity matrix to be an empty matrix maybe in some cases, but at least, with a little comment, it would make it clearer.; Otherwise a msg_warning in this method would be helpful for whoever tries to call it without knowing that it has a ""return false"" behavior?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/277#issuecomment-303150889:377,clear,clearer,377,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/277#issuecomment-303150889,1,['clear'],['clearer']
Usability,But we want PSL.dll to be loaded as a path and not as a name.; I think we should replace the whole test by a simple `if (plugin.find(dotExt) != std::string::npos)`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376457490:109,simpl,simple,109,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376457490,1,['simpl'],['simple']
Usability,"CI is clear now. ; This PR triggers following error:; ```; applications/plugins/SofaSphFluid/src/SofaSphFluid/SPHFluidForceField.inl:34:10: fatal error: execution: No such file or directory; #include <execution>; ^~~~~~~~~~~; compilation terminated.; ```; see https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1249/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/7/console",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598091418:6,clear,clear,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598091418,1,['clear'],['clear']
Usability,Can I still ask a small question ? :-) . Why keeping the Framework directory? Would something like this be simpler?:. ```; /; plugins; BeamAdapter; ...; Sofa; Compat; Config; Core; DefaultType; Geometry; ...; Component; Collision; ...; scripts; tools; ...; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1117461438:107,simpl,simpler,107,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1117461438,1,['simpl'],['simpler']
Usability,Can't wait to simplify all this !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1636#issuecomment-780706656:14,simpl,simplify,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1636#issuecomment-780706656,1,['simpl'],['simplify']
Usability,Changes DONE following guidelines of SOFA dev meeting.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1107#issuecomment-515002596:23,guid,guidelines,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1107#issuecomment-515002596,1,['guid'],['guidelines']
Usability,Cleary not. I'm investigating because I have no idea where the problem could come from. OK. I Got it...it is an interesting one so I report the details. In the code comments.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/656#issuecomment-389848233:0,Clear,Cleary,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-389848233,1,['Clear'],['Cleary']
Usability,"Closing & Re-opning was a mistake :). You are right, breaking changes should be done only for punctual release...I wanted to discuss that in issue #318. But given the amount of breaking changes people want to merge...It think maybe the 17.16 will be a ""breaking"" release. To make the change more manageable by user I introduced a recent PR #329 for which I would like to have feedback (or support or thumb-up :)). ; ; Can you describe what exactly are the breaking and if you have time it would be super great if with #PR329 you can provide a custom hook to warn inform user of which changes happens.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/312#issuecomment-315047276:376,feedback,feedback,376,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-315047276,1,['feedback'],['feedback']
Usability,"Conclusion of several .. years of discussion with @damienmarchal :. such circular dependencies should be handled by defining clear input data which update output data.; For instance for a Mass:; - input data: `d_inputMassDensity` and `d_inputTotalMass` (input prefix would make it clear that a circular dependency is avoided); - actual data used in computations (outputs): `d_massDensity` and `d_totalMass`. When `d_inputMassDensity` is modified, it triggers a callback like:; ``` cpp; addUpdateCallback(""updateFromTotalMass"", {&d_inputTotalMass}, [this](const core::DataTracker& ); {; .. /// do the computation; return sofa::core::objectmodel::ComponentState::Valid;; }, {&d_massDensity, &d_totalMass});; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2173#issuecomment-1564102951:125,clear,clear,125,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2173#issuecomment-1564102951,2,['clear'],['clear']
Usability,"Did not have time to start this yet. 😢 ; As discussed last wednesday, the idea would be to simply `cat` the output of crashed tests during the `print-summary()` phases (for unit tests and scene tests). So only scripts stuff.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/191#issuecomment-283715155:91,simpl,simply,91,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/191#issuecomment-283715155,1,['simpl'],['simply']
Usability,Discussion : what about remove the usage of float within SOFA to lighten the code base of SOFA. This might affect (and feedback would be interesting) some guys @ziqiu-zeng @courtecuisse @bakpaul,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3435#issuecomment-1299944386:119,feedback,feedback,119,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3435#issuecomment-1299944386,1,['feedback'],['feedback']
Usability,Do you have questions guys? From the last SOFA meeting report: . #1258 [SofaKernel] Who hates warnings?; → still to review: wait for feedback from jnbrunet regarding the copy of constructor. @hugtalbot,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1258#issuecomment-592465740:133,feedback,feedback,133,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1258#issuecomment-592465740,1,['feedback'],['feedback']
Usability,Draft of a proposition to enforce the API for a clear thread friendly semantics. ; ```cpp; class SOFA_CORE_API DetectionOutputVector; {; public:; ; virtual int acquireAddContact(){}; virtual releaseAddContact(int){}; virtual void addContact(DetectionOutput* detectionOutput){; if(getHasBeenAcquired){ fail }; if(notAcquired) { warn }; ; ...; }. /// ; virtual const DetectionOutput& getContacts(){; if(noToken) return array;; return nullptr; ; }; virtual void releaseGetContact(DetectionOutput& r){; ....; }; };; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/965#issuecomment-474772645:48,clear,clear,48,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/965#issuecomment-474772645,1,['clear'],['clear']
Usability,"Everything looks clear to me. ; Why did you taggued this with ""bug"" ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/100#issuecomment-266839785:17,clear,clear,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/100#issuecomment-266839785,1,['clear'],['clear']
Usability,"Exactly, this is simple but it need to be discussed :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/552#issuecomment-367773729:17,simpl,simple,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/552#issuecomment-367773729,1,['simpl'],['simple']
Usability,Excellent ! Just make sure that you have an assembled matrix in the scene. Thanks for the feedback,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1432007612:90,feedback,feedback,90,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1432007612,1,['feedback'],['feedback']
Usability,"FYI, `SimpleCarving.py` is not exectuted by the CI (or more precisely, there is no mention of it in the logs)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3457#issuecomment-1707519816:6,Simpl,SimpleCarving,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3457#issuecomment-1707519816,1,['Simpl'],['SimpleCarving']
Usability,"FYI, the decision back in the sofa coding sprint of June 2014 (as fas as I remember), was to remove all `*GridTopology`, in favor of a new design based on `*GridLoader` or `*GridEngine` types of components. A workgroup worked on this topic during the sprint. The associated branch may or may not still exist, but unfortunatly it was not completed and merged back. The rational however is still valid, the current design of those topologies introduce many complexities that are not providing a lot of value, given how rarely then end-up being used, outside of quick and useful examples, but for which the performance gain (if any) of using these grids directly instead of using `MeshTopology` or `HexahedronSetTopologyContainer` does not really matter. So in term of maintenance it seems more practical to remove them completely from the codebase, once we have a usable (and simpler) alternative in place.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/162#issuecomment-281638098:862,usab,usable,862,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/162#issuecomment-281638098,2,"['simpl', 'usab']","['simpler', 'usable']"
Usability,Feedback from @damienmarchal : [PoC working here]([hugtalbot (Hugo)](https://matrix.to/#/@hugtalbot-5a840cffd73408ce4f8d167a:gitter.im): https://sofapython3.readthedocs.io/en/xp-readthedocs/). - The fastest would be to have a ci process like the generate-doxygen which generate an artifact with the build documentation; - Then in readthedocs we just have to download that artifact and copy it to the right location (this what I did in the xp-readthedoc); - The only missing part is make the ci script (which shouldn't be super hard for anyone that know how our jenkins ci is operating),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3764#issuecomment-1582191183:0,Feedback,Feedback,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3764#issuecomment-1582191183,1,['Feedback'],['Feedback']
Usability,Feel free to make PR when you think it is ready for you because this is the best way to get feedback.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/552#issuecomment-372658667:92,feedback,feedback,92,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/552#issuecomment-372658667,1,['feedback'],['feedback']
Usability,"Following our discussions:; SimpleDataEngine's update method now looks like this:. ```cpp; void update() final; {; updateAllInputs() // a method that calls `updateIfDirty()` on all inputs: can be overridden, but rarely necessary; DDGNode::cleanDirty() // same as cleanDirty(), but does NOT call m_datatracker->clean() so counters are still valid after; doUpdate() // actual magic; m_datatracker->clean() // cleaning the counters; }; ```. To my understanding, DataTrackerDDGNode's `cleanDirty()` method becomes useless in DataEngines at this point, making the workflow much smoother for the user's impl of `doUpdate()`. I believe there would be no side effects (apart from being BRAKING...) if we would replace `core::DataEngine` with `core::SimpleDataEngine`, and rename all engine's `udpate()` methods to `doUpdate()`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/760#issuecomment-424761403:28,Simpl,SimpleDataEngine,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/760#issuecomment-424761403,2,['Simpl'],['SimpleDataEngine']
Usability,"Following the discussions of dev meeting, it is possible to add custom filters to Doxygen to parse initData as a member comment. Tested successfully on a simple example :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2613#issuecomment-1023300619:154,simpl,simple,154,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2613#issuecomment-1023300619,1,['simpl'],['simple']
Usability,"For @sofa-framework/reviewers : this PR is now ready but it will have a **massive impact on all the code base.**. Any feedback is more than welcome. A compatibility layer is obviously implemented. We suggest to merge this PR but temporarily de-activating all the warnings (compilation-time and runtime). Another PR will start the cleaning within SOFA and its official plugins. When the main part will be done, warnings will be re-activated so that plugin authors can be informed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4429#issuecomment-2205566982:118,feedback,feedback,118,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4429#issuecomment-2205566982,1,['feedback'],['feedback']
Usability,"For historical explanations:; * we need to gather the pointers to all Data in a Base instance, so there must be a function somewhere that is called with both the pointer to the `Base*` object and to the `Data*`.; * a simple option could be to have the `Base*` pointer as a parameter of the Data constructor, however most compilers issue a warning if `this` is explicitly used when initializing member variables, as it is not fully constructed yet; * however, compilers are happy with calling a method, which itself use `this`, hence the initial implementation of `initData()` (which was called `dataField()`) had the `this` pointer implicitely, but needed the `Data*` pointer to add if to the ""fields"" map, which is why it was provided as an explicit parameter to the method; * later changes refactored this to add new features (such capturing which level of the class hierarchy is creating each Data), and the actual registration of the `Data*` in the list within Base was moved to the Data constructor, where the `Data*` pointer is available so the one from `initData()` became redundant. The newer similar design for initializing BaseLink did use an `initLink()` method without this pointer. And regarding this change:; * a useful aspect of having the pointer to the Data as the first parameter of `initData()` is to unambiguously know the type of the final `Data<T>`, so that there could be (relatively) good compile errors if the type of the provided default value is not matching it. I'm not sure how this PR is affecting / handling that (i.e. if you set a `float` value as a default to a `Data<int>`, how the gcc/clang/msvc error messages look like?); * one drawback in the current design is that there are sometimes bugs introduced by the multiple overloads of `initData()`, because of the ambiguity between the optional default value and the optional pair of bool flags at the end. In particular, for a `Data<std::string>`, calling `initData(&d, ""mydefaultvalue"", ""mydata"", ""help message"")` w",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283:217,simpl,simple,217,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283,1,['simpl'],['simple']
Usability,"For me handling different sets of sofa components with a lots of CMakeLists is cumbersome. ; I am not ashamed to say that I do not understand the difference between SofaKernel/SofaFramework/SofaMisc/SofaNG/SofaAdvanced/SofaGeneral. I would suggest an another direction more in the spirit of Qt, e.g. having meaningful modules. ; In Qt they have: Qt Core/ Qt Multimedia / Qt Network etc. ; I suggest to have something similar: Sofa Core (with only the glue) / Sofa Solvers / Sofa Elastic / Sofa Fluid / Sofa Collision /; In each of these modules we could have several algorithms from the simplest and cheap to the more complex expensive one.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332165689:587,simpl,simplest,587,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332165689,1,['simpl'],['simplest']
Usability,"For me, it makes no sense to have two different values based on the template in BilateralInteractionConstraint. But it would be nice to have some feedback from real expert on Constraints.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/45#issuecomment-257862434:146,feedback,feedback,146,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/45#issuecomment-257862434,1,['feedback'],['feedback']
Usability,"For small scenes I found very convenient to write the scene directly in the test...; This allow to iterate on each variation of scene elements (PointLight, DirectionalLight, SpotLight) (or templates (Vec3d, Vec3f, Rigid)) with just a simple loop and string concat. . ```cpp; void mytestThatShouldExistsForAllLights(std::string& lighttype){; std::stringstream scene ;; scene << ""<?xml version='1.0'?> \n""; ""<Node 	name='Root' gravity='0 -9.81 0' time='0' animate='0' > \n""; "" <Node name='Level 1'> \n""; "" <MechanicalObject/> \n""; "" <""<< lighttype << "" name='light1'/> \n""; "" </Node> \n""; ""</Node> \n"" ;; Node::SPtr root = SceneLoaderXML::loadFromMemory (""testscene"",; scene.str().c_str(),; scene.str().size()) ;. ... the actual meat of the test....; }; ```; For complex scene I think that using a template langage could be an option ...but needs more work.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/43#issuecomment-265274667:234,simpl,simple,234,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43#issuecomment-265274667,1,['simpl'],['simple']
Usability,"For some reasons, the static task scheduler could not be destroyed by the end of the program because it results into a deadlock: the worker threads are not woken up by the destructor of the task scheduler. I did not find how to fix this issue. Therefore, I clear the task schedulers before the end of the program, in the module `cleanup` function. It did not happened before because the task scheduler was never destroyed resulting in a memory leak and not-joined idle threads.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3480#issuecomment-1315357347:257,clear,clear,257,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3480#issuecomment-1315357347,1,['clear'],['clear']
Usability,François is right but isn't doing this will only fix the find plugin problem... this can be problematic as there is other part of Sofa that are using the executable with relative path to locate resources directory (eg: GuiDataRepository).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358249596:219,GuiD,GuiDataRepository,219,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358249596,1,['GuiD'],['GuiDataRepository']
Usability,"From what I understand, we have 2 different topics here. 1. cut dependencies to SofaTest, which I totally approve. This point reaches consensus I think. I don't see anything that can go against the merge of this PR in this topic. 2. split unit tests and functionnal tests; This is a different topic and should be discussed in a separate issue. Anyway my 2 cents about this:; - obviously this is a good idea. I cannot push forward enough this idea.; - just keep in mind that these unit-tests should remain FAST to run, since they will be run at each build. (ie. the filemonitor tests, for example, should be refactored to spend less than 10 seconds to run otherwise they will soon become a pain). To resume my point of view:; 1. merge this PR first; 2. communicate around the fact that tests should not rely on SofaTest anymore (when possible) ==> why not log a warning or ""deprecated"" message when using SofaTest utilities ?; 3. progressively cut unit tests from SofaTest, on-the-go. In parallel, open the ""always run unit-tests"" discussion on a separate topic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700:699,resume,resume,699,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700,1,['resume'],['resume']
Usability,"Glad you like it ; With a typesafe version you mean something like; ```cpp; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", 0.3},; {""contactDistance"", Vec3d(0,1,2)}}) ;; ```; This could be great especially with a version without string conversion so it would be both elegant and fast. . On my side the things I tried but didn't pushed were:; ```cpp; simpleapi::createObject(root, DefaultPipeline, {; { DefaultPipeline::name, ""myname"" },; { DefaultPipeline::position, ""1 2 3"" },; }) ; ```; The idea was to avoid to use strings as identifier because that are error prone and hard to maintain when something change. It also feature autocompletion, you write DefaultPipeline:: TAB and you get all the possible data field. The drawback is the extra DefaultPipeline prefix all around which impact readbility. . A was also curious on how we could make visible the graph structure of the scene (PSL like) and I cannot prevent myself to think about something like the following: ; ```cpp; createTree(; {; Node, { ; {""name"", ""root""}, ; MechanicalObject, {; {""name"", ""bob""},; {""position"", ""1 2 3""} ; },; } ; ); ```; With good template and operator overloading it is probably possible but I'm afraid of the trickyness of the approach (and the error message in case of compilation error) but compared to the current simpleapi that is ""straightforward"" to use and offer a smooth transition for people coming from SofaPython, I'm not sure this is worth the effort.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515:76,simpl,simpleapi,76,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515,3,['simpl'],['simpleapi']
Usability,"Good news, the mstate is already a link:. https://github.com/sofa-framework/sofa/blob/07119acb36dad5526e6af1c8e25190be2b575b57/SofaKernel/modules/SofaCore/src/sofa/core/behavior/ForceField.h#L228. Hence, you could simply do something like this:; ```cpp; template<class T>; static bool canCreate(T*& obj, objectmodel::BaseContext* context, objectmodel::BaseObjectDescription* arg); {; // Get the mechanical state link path set in the scene by the user; std::string requested_mstate_path = arg->getAttribute( ""mstate"", """");; ; // Get the mechanical state from the path; const auto * mstate = dynamic_cast<MechanicalState<DataTypes>*>(; PathResolver::FindBaseFromPath(context, requested_mstate_path); );; ; // If a mechanical state path was specified but could not get resolved (ex. is not of the same datatype, or simply if the path isn't good); if (!requested_mstate_path.empty() && !mstate) {; if (!PathResolver::CheckPath<BaseState>(context, requested_mstate_path)) {; arg->logError(std::string(""Unresolved path to a mechanical state ('"") + requested_mstate_path + ""')."");; } else {; arg->logError(std::string(""The specified mechanical state ('"") + requested_mstate_path + ""') was found but its datatype is not "" + DataTypes::Name() + ""."");; }; return false;; }; ; // If no mechanical state specified, try to find one in the current context node; if (!mstate) {; mstate = dynamic_cast<MechanicalState<DataTypes>*>(context->getMechanicalState());; }; ; if (!mstate) {; arg->logError(std::string(""No mechanical state with the datatype '"") + DataTypes::Name() + ""' found in the current context node."");; return false;; }. arg->setAttribute(mstate->getPathName());; return BaseObject::canCreate(obj, context, arg);; }; ```. Maybe @damienmarchal could validate if the usage of the `PathResolver` is correct here, I didn't find any documentation on these methods ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621:214,simpl,simply,214,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621,2,['simpl'],['simply']
Usability,"Gravity back in SofaGraphComponents. ; New Issues created: creation of a dedicated gravity forcefield, remove the ContextObject (polluting BaseObject, used only in Gravity) and remove the PauseAnimationOnEvent & PauseAnimation.; TODO: rename Component.Utility into Component.SceneUtility",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2605#issuecomment-1027803616:188,Pause,PauseAnimationOnEvent,188,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2605#issuecomment-1027803616,2,['Pause'],"['PauseAnimation', 'PauseAnimationOnEvent']"
Usability,"Great :-). Well, PIMPLs and forward declarations solve two orthogonal issues:. - forward declarations are (mostly) for types in the API defined by the class i.e. public methods; - PIMPLs are for when the implementation pulls off too many includes that are only needed by the implementation, or when you want/need to break source dependency. Typically forward declarations are best packed in a header for each plugin/module e.g. ; ```c++; #include <sofa/core/types.h>; #include <Compliant/types.h>; ```. which itself may pull forward decls from subfolders, like `#include <Compliant/mapping/types.h>`. . Of course we don't want to end up with yet another gigantic include graph, but forward includes are typically much smaller than actual includes so we should be fine io-wise. . Concerning PIMPLs, you'll need to put it behind a `std::unique_ptr` like so:. ```c++; class foo {; struct pimpl_type;; std::unique_ptr<pimpl_type> pimpl;. public:; foo();; ~foo();; };; ```; otherwise your class will have undefined `sizeof`, and you won't be able to instantiate it unless you include the PIMPL definition (which you don't want by construction). My feeling is that the general guideline should be about forward declarations: PIMPLs are seldom needed, and really put some burden on the programmer as you need to write the glue code between the pimpl and the actual class. On the contrary, forward decls are easy to setup and to implement, and *should* definitely improve build times.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/436#issuecomment-333965790:1171,guid,guideline,1171,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-333965790,1,['guid'],['guideline']
Usability,Great @guparan keeping one macro will make things so much clearer!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1941#issuecomment-806039493:58,clear,clearer,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1941#issuecomment-806039493,1,['clear'],['clearer']
Usability,Great! Thanks for the feedback @KantaphatLeelakunwet,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4527#issuecomment-1962333637:22,feedback,feedback,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4527#issuecomment-1962333637,1,['feedback'],['feedback']
Usability,"Great, thanks for the feedback JuanJo.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1476#issuecomment-693513752:22,feedback,feedback,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1476#issuecomment-693513752,1,['feedback'],['feedback']
Usability,Guidelines: https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/712#issuecomment-405873488:0,Guid,Guidelines,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/712#issuecomment-405873488,2,"['GUID', 'Guid']","['GUIDELINES', 'Guidelines']"
Usability,Having BaseContext and BaseNode a single class would have simplified so much sofa.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4334#issuecomment-1856589634:58,simpl,simplified,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4334#issuecomment-1856589634,1,['simpl'],['simplified']
Usability,"Hello @ChristianDuriez,. I've been discussing the sparse matrix issue with @matthieu-nesme for some time now. Here are some thoughts on the subject. The biggest issue with sparse matrices is that there is no silver bullet representation that covers everyone's needs: some people like it compressed (row/column), others like to have small dense chunks instead of single floating points, and so on. In particular, I see two major orthogonal uses of sparse matrices:; 1. getting matrix data out of components; 2. working with sparse matrices (linear algebra, factorization, assembly). It is not at all obvious that the two operations should use the same representation, and in fact I would argue against it. For instance in the Compliant plugin, we use Eigen sparse matrices for everything, and end up doing a lot of work in order to shift matrix blocks around which is tedious and costly. I've been toying around with alternate designs, and the simplest I found so far is to use a plain old vector of triplets (row, column, value) for fetching matrix data. More precisely, mappings/forcefields directly `push_back` matrix data into a `std::vector<Eigen::Triplet<SReal> >` through a `std::back_insert_iterator`. With this design the caller is then responsible for structuring the sparse data further (sorting/converting to CSR, shifting rows/columns, handing over to another library, etc) Of course this approach is tailored for our needs and might not fit others, and performance-wise it needs thorough benchmarking anyways, but I think that using separate data structures for *getting the data* and *working with the data* instead of a single structure is the way to go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716:943,simpl,simplest,943,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716,1,['simpl'],['simplest']
Usability,"Hello @JeremieA, the current approach about the changelog management is to have a description of the changes in the PR's description so that @guparan & @hugtalbot can easily integrate them into the CHANGELOG.md file in a (more or less :)) weekly basis. . You can add a dedicated CHANGELOG section in the PR description in which there is a summary of the changes and, in case of behavior or API changes, the mecanism used to notify other's and minimal guideline/example on how they should fix their code. You already provided this informations into the comments feeds...but, having that in the comments feed makes them hard to find so it is better if all that is summarized. . EDIT: I just updated the PR description up to my understanding.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/216#issuecomment-311016705:451,guid,guideline,451,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216#issuecomment-311016705,1,['guid'],['guideline']
Usability,"Hello @StephaneCotin . I'm glad you are asking. . On my side I generate the following view to visualize & navigate in the inclusion graph.: ; https://htmlpreview.github.io/?https://raw.githubusercontent.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. It was suggested by @guparan that we could aggregate the files around their cmake ""components"" so we could identify easily the ""strengh"" (the amount of .h) between the cmake package. Then from this graph views, actions can be to guide the refactoring. ; Eg: ; 1) remove the includes that are not mandatory to make the graph more sparse (there is very easy cases that can be done during coding sprint). ; 2) when there is cycle in the graph, serious refactoring may be needed because this indicate it is not possible to properly make package out of it (this happens in Helper & DefaultType). ; 3) for the elements in the graph that are included only few time this means it is very easy to put them into ""external"" plugins without breaking a lot of code. . I practiced 1) in https://github.com/SofaDefrost/sofa/tree/reduceInclude2; I practiced 2) in https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel; I practiced 3) in several of our pluginization's PR. What I found very hard is to make that in coordinated way and in a smooth enough way not to kill anyone's projects. On the existing code base:; - make PR that unify the way to declare namespace/include guards so refactoring with string replacement instead of manually patching the code base would be faciliated.; - make PR to reduce the include's graph pressure (this will ease to cut the code into packages); - make more PR to deprecates components ; - put as real plugin the leaves of the dependency graph (starting with the leaves is easier because it indicate that only a small part of our code base needs to be updated). ; - find an agreement on the resulting structure.; - find an agreement on the amount of change and understand how this will impact th",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690:500,guid,guide,500,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690,1,['guid'],['guide']
Usability,"Hello @alxbilger . Nice PR. . This is outside of the scope of the PR but the use of the very intrusive; ```cpp; if (this->d_componentState.getValue() != sofa::core::objectmodel::ComponentState::Valid); return;; ```; makes me thing one day we will have to do something. The way to go is probably to make clear when the component state validation/update issupposed to happen. The two choice are: ""everytime/everywhere"", update all the time including ""in-between"" timestep or only once at beginning of timestep (with visitor in the BeginAnimationStep event ?).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3850#issuecomment-1556742232:303,clear,clear,303,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3850#issuecomment-1556742232,1,['clear'],['clear']
Usability,"Hello @bruno-marques . After some thinking about that I'm more convinced now that the best approach is to simply display a warning message like that:; ```cpp; if( isIntelraphics() ); {; msg_error(""runSofa"") << ""Intel drivers have a problem ...with ..... to runSofa you need to set your manually set an environment variable named 'MESA_GL_VERSION_OVERRIDE' with the value '3.0' to fix the problem."";; exit(-1);; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/526#issuecomment-351956951:106,simpl,simply,106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/526#issuecomment-351956951,1,['simpl'],['simply']
Usability,Hello @damienmarchal It seems this file was included by mistake.; The code was commented because it didn't compile but I didn't mean to put it in the pull request.; Only the commits about SofaGeneralEngine should have been there.; Thank you for the feedback,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694678251:249,feedback,feedback,249,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694678251,1,['feedback'],['feedback']
Usability,"Hello @etagliabue ; Thanks for your contribution. However, as @damienmarchal said, I don't see a use case where you would want this behavior instead of the engine behavior.; For the other proposals, I believe it should be done in another PR, just for the sake coherency/simplicity.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1066#issuecomment-496422349:270,simpl,simplicity,270,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1066#issuecomment-496422349,1,['simpl'],['simplicity']
Usability,"Hello @hugtalbot . thanks for feedback, and you are right and it would really help. Considering that I already documented the things in previous issues, in PRs, I systematically answer questions on github and I regularly gives the whole picture in our weekly meeting in addition to the refactoring work...well... a bit of help and involvement would be appreciated. And As usual, I welcome anyone willing to spend some time on project tracking or writing meeting notes and If you consider yourself a non expert on Data/Link, it is even better, do come in, this is a super opportunity for you to level-up and become an expert. . It is also very surprising to me that if things are not clear no-ones ask specific question in PR description. This is very annoying because if I don't know what you don't know how should I write a PR description to fill the gap ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1503#issuecomment-705507717:30,feedback,feedback,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1503#issuecomment-705507717,2,"['clear', 'feedback']","['clear', 'feedback']"
Usability,Hello @maddin200 . Thanks for your PR. The fix avoid a crash with 7 char input string (that are invallid input for color code). ; It would be an improvement in usability if instead of silently ignoring these 7 char long strings something was reported as invalid to the user by setting the fail bits.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1868#issuecomment-786919775:160,usab,usability,160,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1868#issuecomment-786919775,1,['usab'],['usability']
Usability,"Hello @olivier-goury,. Thank you for the PR. ; I have added some comments (mostly about coding-style). . As I'm the author of some of the code you propose in the PR...could you add my name in a contributors section after the license header. In general I do the following.; ```cpp; /******************************************************************************; * Contributors: ; * - damien.marchal@univ-lille.fr ; * - olivier.goury@inria.fr ; ******************************************************************************; ```. I know @hugtalbot and @guparan complains...but to me this is a clear demonstration that relying on git to track authors ship (and thus copyright credit) is misleading...and thus having a per-file contributors sections.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1510#issuecomment-701435773:592,clear,clear,592,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1510#issuecomment-701435773,1,['clear'],['clear']
Usability,"Hello Bruno,. Functional programming is very standard and part of the language:; http://book.pythontips.com/en/latest/map_filter.html ; as well as part of libraries:; https://docs.scipy.org/doc/numpy-1.13.0/reference/routines.functional.html. So functional programming is a must (and cheap thing) to have but to be honest the syntax:; ```py; m.position[OnDiagonal] = 0.0; ```; was just there for fun and to see if it was possible (actually I see it as a generalization of the slice syntax array[2:1] that is part of the language where instead of iterating between the slice interval you can provide funny iteration scheme). But I fear how slow may be generators compared to more classical iteration mechanisms. . About your question regarding the implementation: ; I wrote most of the change using the C-python API but after some time I was fed-up on how ugly it is and terminated the implementation using python. Mixing the python and c++ code was actually very simple thanks to the cython ability to generate dual-bindings... where a c++ function is exposed in python as well as having python functions exposed to C++ (so a .h is generated to include and use the python code in your c++ code base). ; That's said cython is not magic and the generated .cpp/.h are containing 100% python C-api ...so everything implemented in cython could be implemented exactly the same using the C-python API. ; It is just 10x longer to write an equivalent code. . As you ask I pushed a branch (https://github.com/SofaDefrost/sofa/tree/sofa_refactorSofaPython) with the implementation don't expect the branch to compile today as it contains irrelevant code that are wip to support the buffer protocol for seamless integration with numpy. . For the syntax about Data...everything is implemented in 'Binding_Data.cpp'. ; The function SofaData_asMapping_ass_subscript is the one called when using the [aaa] = operation. ; ```cpp; static int SofaData_asMapping_ass_subscript(PyObject *o, PyObject *key, PyObject *value);",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819:963,simpl,simple,963,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819,1,['simpl'],['simple']
Usability,"Hello Damien, and thanks for your feedback. Let met address your points one by one:. ## Invasiveness. That depends on the use cases for `Data` embedded in a component. From the code in `Base.h`, it seems that components essentially should be able to:; - Enumerate all its `Data`; - Associate a name to a `Data`; - Adding/removing `Data`. Assuming it's all there is to `Data` management in a component, then the following changes could enable opt-in, class-based data management when needed:; 1. Make all the associated methods virtual: `Base::findData, Base::addData, Base::removeData, Base::getDataFields`, possibly changing return type in the case of `Base::getDataFields` from `const VecData&` to `VecData`. In the latter case it would probably be even better to change the iteration strategy altogether, for instance by using:; ; ``` c++; virtual void Base::getDataFields(VecData& out) const = 0;; ```; ; ...to leave allocation to the caller. Grepping `getDataFields` on the whole SOFA codebase yields around 10 hits (python bindings, generateDoc, GUI and modeler, solver merger) so it should be manageable.; 2. Provide a protected `BaseData` constructor that does not initialize links/owner datas. Obviously we do not want to silently break existing code, so this behavior should be opt-in, for instance using a tag class:; ; ``` c++; class BaseData {; public:; struct no_init {};; ; protected:; BaseData(no_init) : // ...; };; ```; ; This one should be easy.; 3. Add a public `Data` constructor that only initializes value, something like:; ; ``` c++; template<class T>; class Data {; public: ; Data(BaseData::no_init, const T& value = T() ) : // ...; };; ```; ; Again, easy.; 4. Provide component constructors that do not initialize their `Data` so that optimized components can be derived:; ; ``` c++; Base::Base(BaseData::no_init) : name(BaseData::no_init), //...; BaseObject::BaseObject(BaseData::no_init) : f_listening(BaseData::no_init), //... ; ; // ... BaseMapping, Mapping, etc.; ```; ;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923:34,feedback,feedback,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923,1,['feedback'],['feedback']
Usability,"Hello Erwan,. Good idea to make a warning. . Now at the fundamental level to me all this part of Sofa is ""broken"". The fault is that there is no clear difference between the ""in editor"" camera (the ones use in the viewer/runSofa editor) and the ""in-scene"" camera. Making this distinction is important and I'm sure that for runSofa2 we will need to make that clear. . To be clear...think how Unity is doing... some panel are showing ""external"" view of the scene for editting..while one or multiple ""in-scene"" cameras are used in the ""game"" panel for the rendering. . Actually we also have the same problem with all the interaction.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/481#issuecomment-337361275:145,clear,clear,145,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/481#issuecomment-337361275,3,['clear'],['clear']
Usability,"Hello Eulalie,. Hello @EulalieCoevoet and thanks for the suggestion. . I'm not sure isSet() could be used for this task. ; Because there are cases:; - where a Data field has a default value and that this default value is used.; - there are cases where a Data field has a default value and that this default value is not used (ie. it is optional as in your example). Let's see for the other flags... There is the isDisplayed() flag. This flag can control if we show the data is showed all. The side effect of using it for hiding means that if not set at load time then it cannot be changed anymore later. . There is also the isRequired() flag. It is not used a lot and was primarely designed to indicate that need to be setted (mandatory)...which sound a bit like the reverse of ""optional"". Currently in Sofa component most of the data are not set to required (despite I bet that a lot of them are) and there is not graphical feedback related to this flag. So I will think a bit about this one to see if we can something out of that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-754520239:925,feedback,feedback,925,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-754520239,1,['feedback'],['feedback']
Usability,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:1191,clear,clear,1191,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552,2,['clear'],['clear']
Usability,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:159,clear,clear,159,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814,2,['clear'],['clear']
Usability,"Hello Fred, to avoid excessive code coupling maybe such kind of application could be done using the simpleapi instead of the raw c++ api. This would demonstrate the same ""no gui"" app.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075513418:100,simpl,simpleapi,100,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075513418,1,['simpl'],['simpleapi']
Usability,"Hello Guillaume,. I'have mixed feeling. On one side I would like the sprint branch to be merged asap so that we can all start from this baseline and continue deprecating/pluginizing (I know bruno is waiting, as is the pluginization done during the STC) but, on the other side I dislike to merge things that fails. . Currently the base branch have several tests failing and I fixed all of them in #457. I'm not sure all of them are easy to cherry-pick so I would recommend to merge this one and immediately after merge the #457 so that master is not in a broken state for a long time. . Actually in #457 only one test remains to be fixed, the ""VariationalXXX"". This one was not in the base branch but appeared during the sprint. I have no idea what is wrong so if this speak to you @hugtalbot , @StephaneCotin, @ChristianDuriez please help. . So my opinion is that we should accept the risk of merging #453 and #457 in a row so that we can restart working from a shared code base and continue our work and deals with the breaking/regression introduced. ; It also have advantages as more people will try this branch we will have more feedback on the deprecation process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963:1132,feedback,feedback,1132,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963,1,['feedback'],['feedback']
Usability,"Hello Hugo,. I disagree about your suggestion as this PR is not about binding GeometryAlgorithm's like object. . GeometryAlgorithm is inheriting from BaseObject. To use it you need the full Scene Graph and plenty of dependency to Base/BaseObject/Data/Link/SceneGraph/..... The underlying idea is to use them in ""your scene"" as part of your scene/simulation. But if you 'just' want to test intersection between ray/plane using GeometryAlgorithmes imply a lot of boilerplate code to manage the ""scene graph"" and baseobject management. . In this PR the target is not to expose GeometryAlgorithm in python, it is more to have a low-level API that propose geometrical object (c++ object, not BaseObject) and their associated operations as well as the corresponding binding to python. The key target of that this API is to be usable with as few as possible boilerplate code and without any scene graph/base/baseobject's folks. . So the SofaGeometry module proposed in this PR can be seen as 'one' level lower in the software stack that GeometryAlgorithm. The interest of this module is that it can be used as-is (API style), in C++ or in python. Of course it is possible to go one step further (in that case I suggest to do that in a different module and in a different PR) where the c++ object implemented in SofaGeometry are exposed in the SceneGraph by inhering from BaseObject. . Hope it is more clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498:820,usab,usable,820,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498,2,"['clear', 'usab']","['clear', 'usable']"
Usability,"Hello Hugo,. Thank for your will to change that. because I I fully agree that our naming are bad. . I see three different possible patterns:; (1) defaultX, genericXXX but they are vague (actually we could also rename the DefaultContactManager :)). ; (2) Penality or LagrangeMultiplier that are the name of numerical/mathematical method. ; (3) frictionalContact or stick that are the names of physical phenomenons/model. . To me (1) are totally non informative names and we should ban them everywhere. ; Now between (2) and (3) the choice is more terse. My thinking is that using a phenomenon base name is the best thing to do.; So we focus on what the method does (eg: provide a zero geometric intersection) instead of how this is done (with penality method or lagrange mutliplier). . It is possible that for on phenomena there is multiple method implemented to solve it. In that case I think that adding a second option field to specify the method name would be the clearest approach. ; This would results in something like:; ```xml; <CollisionManager response=""geometricIntersection"" method=""penality""/>; <CollisionManager response=""stickyContact"" method=""lagrangeMultiplier""/>; <CollisionManager response=""frictionalContact"" method=""lagrangeMultiplier""/>; ```; Of course doing so is probably a bigger refactoring than what you were thinking about. Maybe if and only if there is multiple methods for the same physical phenomenon adding the method name as a postfix could solve the issue.; This could look like: ; ```xml; <CollisionManager response=""geometricIntersectionWithPenality""/>; <CollisionManager response=""geometricIntersectionWithLagrangeMultiplier""/> (distanceLMConstraint ?); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1871#issuecomment-787489261:967,clear,clearest,967,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1871#issuecomment-787489261,1,['clear'],['clearest']
Usability,"Hello Jérémie,. Thank you for rising this issue and for making a proposition answering the questions asked in #346. ""These types of changes can be very painful for everyone looking at file histories and/or not working exclusively on master:""; You are totally correct. ""So I would like to know if those considerations were understood before doing this once again ?""; As you ask the question, yes, these considerations were understood and discussed. The problem we have is that when people taking part in discussions are sharing similar concern they can agree on changes that does not fit others needs. This is why we value and regularly ask your feedback (using @JeremieA or @fjourdes). Since we are on github nothing have been ever merged without a minimal shared approval (and this is a keystone for me to contribute to Sofa). So on my side I see no problem in withdrawing or updating the changes made of this is too cumbersome for your workflow. In our workflow we try to stay as close as possible to master and among all the problem we see in the current sofa code base (eg: no being able to deprecate things, too long compilation time because of code coupling, in-coherent and hard to understand file scheme organization) keeping a traceable file history, despite important, was set to a low priority. ""And as a counter-proposal, for discussion, that you are free to ignore, I would suggest a 3 steps approach :""; Impossible, I'm totally opposed to ignoring people contributions (as I'm oposed about endless discussion :)). ; Step 1 and 2 actually fit our needs so we can do that (and actually contribute by PR to make this happens)... About step 3...I have a:; - rather positive opinion on having a SofaPlugin/SofaPluginDeprecated; - moderated opinion on SofaPluginGPL; - negative opinion about using SofaGeneral/SofaAdvanced/SofaMisc because it is extremely confusing. To explaine why...I bet a coffee that, if we take 100 sofa components and ask 10 developers where the component should be we w",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/482#issuecomment-338700994:645,feedback,feedback,645,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482#issuecomment-338700994,1,['feedback'],['feedback']
Usability,"Hello Marc, and thanks a lot for your feedback !. I'll address some of your points below:. > **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the init() functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the right time: the program will work correctly by design, not by coincidence;. To be more explicit: there is no guarantee whatsoever that calling `init` in a `static` RAII constructor will get called *after* every other `static` variable in the shared library is initialized. This can indeed be an issue. I was under the impression that there is exactly one of such RAII per dynamic library loaded by SOFA, so as long as `init` does not involve messing around with other `static` variables in the library we should be safe, right?. > **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the main() function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. Come on, we're talking about SOFA here ;-). > **choice** (or whatever): with an explicit call to init(), an application writer gets to decide both whether and when to initialize SOFA. Not sure I agree: when `dlopen`-ing a shared library, I prefer to have it initialized automatically if possible (and safe) as the converse is error-prone. In any case, `cleanup` should really be called in the RAII destructor, otherwise resources will leak in case an exception is thrown and not caught, or somebody calls `std::exit` (which they *can*). And of course, the destructor should not do silly stuff like calling a `MessageDispatcher` that was destructed already.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333:38,feedback,feedback,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333,1,['feedback'],['feedback']
Usability,"Hello Serguei,. Thanks for the clear explaination. This may actually be part of the BoxROI documentation. ; Now back to your problem...what do you think about implementing a python function to convert from (position, orientation, size) would generates these 10 values ? Is it enough / not enough ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/560#issuecomment-359809208:31,clear,clear,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-359809208,1,['clear'],['clear']
Usability,"Hello all, . I've added some modifications on this PR. . First I've created a new *Python* script in PythonSofa to make the use of the *AdvancedTimer* easier. Now, if you want to use it in a *Python scene*, the easiest way to do it is to use the script with the method *measureAnimationTime*. You will have to add this line: . ```py; from SofaPython import PythonAdvancedTimer; ```. at the beginning of your script. Then you have to add the method *bwdInitGraph(self, node)* method at least as the following:. ```py; def bwdInitGraph(self, node):; # It will call the simulationStep method too; PythonAdvancedTimer.measureAnimationTime(node, ""timerPoutre"", ; 2, ""ljson"", ""poutre_grid_sofa_timerLog"", 0.1, 1000); return 0; ```. If you already have defined a bwdInitGraph, you juste have to add the *measureAnimationTime()* method to get your scene analyzed. To use it by your own way, you can take a look at the *PythonAdvancedTimer.py* script. You'll find it in the *Sofa project* at *SofaPython/python/SofaPython/PythonAdvancedTimer.py*. Second, I've added two scripts to use the returned *light JSON* files of the *AdvancedTimer* : *TimerLJSONPlot.py* and *timerLjsonManyFilesPlot.py*. I've also added the documentation to informe future users how to use the *AdvancedTimer* and the plotting scripts. The tests will come soon. Thank you for your feedback @damienmarchal .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-324669680:1347,feedback,feedback,1347,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-324669680,1,['feedback'],['feedback']
Usability,"Hello guys! Is there any news regarding the updated features? @marques-bruno : Can you make a small update to the PR with some examples for the functionality:. - Normal type inheritance (PSDE Input type is inherited from existing component); - ""Forwarded"" type inheritance (PSDE Output type is inherited from a component linking to it). I'll discuss with Damien about the forwarded inheritance mechanism to verify that we are on the right track.Then, after checking the PR with examples, we can see the next steps more clearly, i think.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236:519,clear,clearly,519,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236,1,['clear'],['clearly']
Usability,"Hello thank you for the feedback,. I'm strongly reluctant to hard code in c++ trivial keyboard controller because there is a lot of boilerplate code and because this also encourage software obesity by having all the application specific's user interfaces in Sofa Core, think about just changing the keypress ""a"" to ""b"" without recompiling sofa. . But I'm ok to implement that in a python controllers, does it would be ok ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4163#issuecomment-1737430587:24,feedback,feedback,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4163#issuecomment-1737430587,1,['feedback'],['feedback']
Usability,"Hello, . Since you made this PR @untereiner do you have any feedback on the NG proposal ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/707#issuecomment-404174229:60,feedback,feedback,60,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/707#issuecomment-404174229,1,['feedback'],['feedback']
Usability,"Hello, in my opinion, this bug is related to the actual status of solvers in SOFA. Since CG is a very ""robust"" solver (where ""robust"" means that it constructs solutions which are mathematically not always justifiable), it is used everywhere in examples. However, there are other solvers available in SOFA (even if not used often), such as SparseLDL, SparseLU. I think it might be highly ""surprising"" for someone that while CG calculates some solution (which IMHO is not mathematically justifiable, but let's put this aside), LDL or LU will simply crash on such as simple scene without saying anything clear about the reason of crashing. Or to put it differently -- the above scene is not well-formed (a non-mapped MO in a subnode...), but if using CG, everything looks fine (even IMHO it really should not).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390928123:540,simpl,simply,540,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390928123,3,"['clear', 'simpl']","['clear', 'simple', 'simply']"
Usability,"Hello,. A simple [blame](https://github.com/sofa-framework/sofa/blame/25f245b2383a86f097cabdea13697aa42665568e/modules/SofaConstraint/BilateralInteractionConstraint.cpp) shows the 2 commits where these values where last set:; https://github.com/sofa-framework/sofa/commit/bb99399cba47a95301025531577c2e3ac3f728ab; https://github.com/sofa-framework/sofa/commit/8b294f75884a0216ce26f5457b8689da57dd081a. They were done for a PhD work, tuning for specific cases but without giving real reasons in the log. So this is not something that was really meant to be preserved like that, indeed it does not make sense that the value is much higher for double that floats. But the actual refactoring that is needed is to expose this tolerance as a Data instead of hiding it within the code itself, so that it can be tuning within the simulations that require it instead of requiring a patch within Sofa. Ideally the value in the Data should preserve the current behaviour in order not to break existing scenes, possibly with the isRequired flag set such that others will know that they should set the value specifically instead of relying on the previously hidden and inconsistent default. Jeremie.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683:10,simpl,simple,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683,1,['simpl'],['simple']
Usability,"Hello,. Thank for the PR. The added feature is nice and should be merged but the way it hack the command line by allowing ""-2"" is very confusing. . Why not doing: ; The standard way; ```runSofa -c 1```. Only for the init functions:; ```runSofa -b```; (as -i is already taken maybe -b to begin is a good choice). For the init function and for every second step:; ```runSofa -c 2 -b```. It would clearly separate the concerns instead of encoding different behavior in the same variable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/468#issuecomment-337522901:394,clear,clearly,394,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/468#issuecomment-337522901,1,['clear'],['clearly']
Usability,"Hello,. Thanks for the PR. I fully agree on generalizing more the 'delegate' pattern and this is a proper usecase. . - About the use of final (on the public api) and private (on the delegated part): both are the way to go. . - About testing privates methods:; In tests, shouldn't we prefer implementing tests using the generic interface, so by calling BaseForceField::addKToMatrix() on instance of BeamFEMForceField instead of writing tests for the specific BeamFEMFOrceFIeld::doAddKToMatrix(). I see a lot of added values of writing tests using the public API while testing private method of a delegated patterns are not obvious to me but. ; That's said if BeamFEMForceFIeld::doAddKToMatrix() is private and final, we can probably make it ""testable"" by having a friend class Test<BeamFEMForceField>; . In the code base we are making the use of this pattern obvious by using a specific naming scheme (XXXX -> doXXX). ; The intention what to make visually clear what part was part of the public API and what part was using the ""delegate"" pattern. ; As in: ; ```cpp; BaseData::beginEditVoidPtr() ; Data<T>::doBeginEditVoidPtr() ; ```. I think it would be worth to stick to the scheme for the following reasons: ; - it de-ambiguate the purpose of each of the function. With addKToMatrix(blabla) and addKToMapping(otherblabla) nothing indicates, at first glance, that the two are in fact not equivalent, and ones has to refer to code comment or documentation (if any) to get that a very specific design pattern is involved. Having addKToMatrix(blablag) and doAddKToMapping(otherblablab) makes it in the contrary cristal clear).; - using the ""do"" prefix also have the advantage that to the pattern is possible when the method's attributes are the same (In the PR using the same names works because the de-ambiguation is implicitly done through the different BaseMatrix and MechanicalParams). ; - more consistant codebase . Of course, this means renaming the the addKToMatrix but in that matter, earlier is ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920:955,clear,clear,955,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920,1,['clear'],['clear']
Usability,"Hello,; would it be possible to provide a simple test?; It seems there is no unit/scene/regression tests which are using Multi2Mapping and its `input2` apparently.; And by just looking at the code, I cannot see why `input2` would be impacted by #3665 as there is no `validator` for input2 😅; It would be much easier to track down the bug, thanks !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3705#issuecomment-1457371112:42,simpl,simple,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3705#issuecomment-1457371112,1,['simpl'],['simple']
Usability,"Here are more details related to @alxbilger's concerns on ""do we want short name for fixed_array"". I think it would be interesting to go toward a systematic approach on generalizing the use of short names/alias in our code base because currently the ""do what you want"" policy leads to a lot of messiness in our code base with plenty of style inconsistencies. . So I would be in favor of the following rules: ; - every extern template XXXX should have use a short name. ; - every short name should be lead to an extern template. ; The two are good because it makes clear what is related to an extern template and what is not. . Now to have an idea on how much hardcoded short name do we want my guidelines are:; - every registered type in a factory (eg: TableDataWidget or in ObjectFactory) deserve a short name. ; - every type used in a Data<> in our code base deserve a short name (to be consistent with what is seen in the sofa scene). ; - never use long name if you can use a short name. . If you see other things to add/remove please tell.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3298#issuecomment-1253551760:564,clear,clear,564,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3298#issuecomment-1253551760,2,"['clear', 'guid']","['clear', 'guidelines']"
Usability,"Here is a list of component that are using raw attributes and thus will fail to be saved:; ImplicitSurfaceMapping: minx/max; RuleBasedContactManager: ; CubeTopology: parse, min/max; SelectConnectedLabelROI ; RegularGridTopology; GridTopology; MeshLoader; VisualModelImpl; BaseObject (the src/template). From my point of view using raw attribute in the parse function to ease scene writing allows developpers to implement 'creative' UX behaviors, and it is causing a lot of trouble. The problem is that doing this always breaks the consistency of the user interface of Sofa (when looking to the XML scene the user have not idea what is a 'parsed only' attribute and what is a data; when looking in the GUI he does not know that 'parsed attributes' exists and has no way to discover and manipulate them). . For attributes of the like: ""xmin"", ""ymin"" (in the CubeTopology) or the ""sx"", ""sy"" (in the VisualModelImpl); I'm considering to replace them with an extended point based notation for attribute ; ""sx"" -> ""scaled3d.x"" ; this would make it very clear that sx is in fact a subfield of the scale3d Data. (Haven't looked on how we can implement that) . Now about the 'size' attribute to set the size of all arrays in MechanicalObject...this a clear example of what you call a Dangerous behavior (having and saving Data that are not compatible to each other).; The best solution I currently have is to warn the user that 'size' is in fact transformed to setting all arrays into position.size='10'. We we could also rename that by writing 'initialSize' assuming that if the array is set...the initialSize is overwritten. . To be continuated... time to code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360:432,UX,UX,432,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360,3,"['UX', 'clear']","['UX', 'clear']"
Usability,"Here is a short feedback of what we have done since the STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing pa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:16,feedback,feedback,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792,1,['feedback'],['feedback']
Usability,"Here's a small test class that displays the different features I implemented in that ImplicitDataEngine mother class of mine:. ```; struct TestEngine : public ImplicitDataEngine; {; SOFAOR_CALLBACK_SYSTEM(TestEngine); // Required to setup the callback mechanism. public:; sofa::Data<int> d_a;; sofa::Data<int> d_b;; sofa::Data<int> d_c;; sofa::Data<int> d_a_out;; sofa::Data<int> d_b_out;. SOFA_CLASS(TestEngine, ImplicitDataEngine);. TestEngine(); : d_a(initData(&d_a, 0, ""a"", ""An input with a callback method"")),; d_b(initData(&d_b, 0, ""b"", ""An input without callback methods"")),; d_c(initData(&d_c, 0, ""c"", ""A simple data field with a callback"")); d_d(initData(&d_d, 0, ""d"", ""A simple data field without callback"")); {; d_a_out.setName(""a_out""); // the processed output of a; d_b_out.setName(""a_out""); // the processed output of b; }. void init(); {; SOFAOR_ADD_INPUT_CALLBACK(&d_a, &TestEngine::increment, false);; addInput(&d_a);; addInput(&d_b);; SOFAOR_ADD_CALLBACK(&d_c);. addOutput(&d_a_out);; addOutput(&d_b_out);; addOutput(&d_c_out);; }. void update(); {; // do something that's generic for any of the data fields. Called AFTER the data callbacks; }. private:; void increment(sofa::core::objectmodel::BaseData* data); {; d_a.setValue(d_a.getValue() + 1);; }; void decrement(sofa::core::objectmodel::BaseData* data); {; d_b.setValue(d_b.getValue() - 1);; }; };; ```. And here's what happens in the base class:. - The SOFAOR_CALLBACK_SYSTEM is a macro that creates a callback functor:; ```; class CallbackFunctor; {; public:; virtual void call(sofa::core::objectmodel::BaseData* o) = 0;; };. #define SOFAOR_CALLBACK_SYSTEM(T) \; typedef T SOFAOR_CLASS; \; class Callback : public sofaor::common::CallbackFunctor \; { \; typedef void (SOFAOR_CLASS::*Func)(sofa::core::objectmodel::BaseData * o); \; \; SOFAOR_CLASS* m_obj; \; Func m_func; \; \; public: \; Callback(SOFAOR_CLASS* _this, Func f) : m_obj(_this), m_func(f) {} \; void call(sofa::core::objectmodel::BaseData* data = 0) \; { \; (m_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:613,simpl,simple,613,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816,2,['simpl'],['simple']
Usability,"Hey @alxbilger,. I'll describe here the different steps of the solving process for a dynamic solver. Hopefully this could be useful at some point. I have described this further in the documentation of Caribou's backward Euler solver [here](https://caribou.jnbrunet.com/classSofaCaribou_1_1ode_1_1BackwardEulerODESolver.html). The last two equations are the one that will be fully assembled, given any solver other than the SOFA's [un-preconditioned] conjugate gradient (this one doesn't assemble any matrices). We can simplify them for the case of only one Newton iteration, which is the same as the SOFA's EulerImplicit component:. ```; [(1+h r_m)M + hB + h(h+r_k)K] da = [r_mM + B + r_k K] v + [F - T]; (1) (2) (3); ```; where `h = dt`, `F` is the internal force vector computed by the elastic forcefields, and `T` is the external force vector computed by pressure fields, gravitational fields, collisions, etc. Here is what happens during the solve:. (1) A = [(1+h r_m)M + hB + h(h+r_k)K]. Building step:; Here we go down on the current context sub-graph and call :; 1. `ff->addKToMatrix(&A)` and `f->addBToMatrix(&A)` for every force field ""ff"" found.; 2. `pc->applyConstraint(&A)` for every BaseProjectiveConstraintSet ""pc"" found. This will set to 0 lines and columns of fixed constraints.; If a mechanical mapping ""m"" is found during the traversal, and m->areMatricesMapped() is false, the traversal stops before entering the subgraph of the mapping. Mechanical mappings step:; In case we have mapped matrices, which is, system matrix of a slave mechanical object, accumulate its contribution to the global system matrix with:; [A]ij += Jt * [A']ij * J; where `A` is the master mechanical object's matrix (top level), `A'` is the slave mechanical object matrix (linked to the top level MO using a mapping) and `J=m.getJ()`; is the mapping relation between the slave and its master. (2) [r_m M + B + r_k K] v; Go down in the current context tree calling `addMBKdx` on every force field components",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263:518,simpl,simplify,518,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263,1,['simpl'],['simplify']
Usability,"Hey @epernod ,. Look at both methods, they are exactly the same. In #744 , we are talking about how such methods should not be used, which I agree completely. But here, `getMeshTopologyLink` is not giving us an answer to this, it is simply an alias to `getMeshTopology`, which is quite confusing as we can find both of them in the source code, and it seems they are used for the same exact reason, find the first mesh topology in the current context (which is probably wrong since we can have more than one in the context).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605882145:233,simpl,simply,233,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605882145,1,['simpl'],['simply']
Usability,"Hey @epernod . Yeah sorry, I'll give a bit more details. The force vector (built from addForce) should be the same (or very close), either you are using a lumped mass matrix or a (full) mass matrix. This was the case before, but isn't anymore. Here a quick unittest that could help:. ```c++; using sofa::helper::system::PluginManager ;; using namespace sofa::simulation;; using namespace sofa::simpleapi;. TEST(MeshMatrixMass, addForce) {; using namespace sofa::core::objectmodel;; setSimulation(new sofa::simulation::graph::DAGSimulation());. // Create the scene; auto root = getSimulation()->createNewNode(""root"");; createObject(root, ""RequiredPlugin"", {{""pluginName"", ""SofaBoundaryCondition SofaEngine SofaTopologyMapping""}});; createObject(root, ""RegularGridTopology"", {{""name"", ""grid""}, {""min"", ""-7.5 -7.5 0""}, {""max"", ""7.5 7.5 80""}, {""n"", ""3 3 9""}});; auto mo = dynamic_cast<sofa::component::container::MechanicalObject<sofa::defaulttype::Vec3Types> *>(; createObject(root, ""MechanicalObject"", {{""name"", ""mo""}, {""src"", ""@grid""}}).get(); );; createObject(root, ""TetrahedronSetTopologyContainer"", {{""name"", ""topology""}});; createObject(root, ""TetrahedronSetTopologyModifier"");; createObject(root, ""TetrahedronSetGeometryAlgorithms"");; createObject(root, ""Hexa2TetraTopologicalMapping"", {{""input"", ""@grid""}, {""output"", ""@topology""}});; auto sofa_mass = dynamic_cast<sofa::component::mass::MeshMatrixMass<sofa::defaulttype::Vec3Types, sofa::defaulttype::Vec3Types::Real> *> (; createObject(root, ""MeshMatrixMass"", {{""name"", ""sofa_mass""}, {""topology"", ""@topology""}, {""massDensity"", ""2""}, {""lumping"", ""false""}}).get(); );; auto sofa_mass_diagonal = dynamic_cast<sofa::component::mass::MeshMatrixMass<sofa::defaulttype::Vec3Types, sofa::defaulttype::Vec3Types::Real> *> (; createObject(root, ""MeshMatrixMass"", {{""name"", ""sofa_mass_diagonal""}, {""topology"", ""@topology""}, {""massDensity"", ""2""}, {""lumping"", ""true""}}).get(); ); ; getSimulation()->init(root.get());. // Get residual vectors; DataVecDeriv d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901856585:394,simpl,simpleapi,394,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901856585,1,['simpl'],['simpleapi']
Usability,"Hey @hugtalbot , the double flag was on purpose actually.. :D; The PR is clearly WIP (NOT to be merged) but I wanted it to be discussed today at the SOFA meeting",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1225#issuecomment-559400580:73,clear,clearly,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1225#issuecomment-559400580,1,['clear'],['clearly']
Usability,"Hey @jangirrishabh ,. You can already clone [this branch](https://github.com/jnbrunet/sofa/tree/sofa_python_without_executable). Once compiled, you will find the file libSofaPython.so in your **sofa_build_directory**/lib folder. Simply add this folder's path to your python sys path, and finally import the lib to your python script with `from libSofaPython import Sofa`. If you are not on Linux, you will have to manually copy the library name to the same file name but with the "".so"" extension (ex: libSofaPython.dylib -> libSofaPython.so). Also, I've stop the development of this feature since @damienmarchal is working on a newer python plugin that will support this feature much better than what I've done here. You can follow the development [here](https://github.com/sofa-framework/sofa/pull/771).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/492#issuecomment-433831876:229,Simpl,Simply,229,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-433831876,1,['Simpl'],['Simply']
Usability,"Hey @m4n4n,. Thanks for your updated PR!. Did you check this remark from @tgaugry on your previous PR?; > I kinda see what you went through. The argument parser isn't that intuitive TBO.; > ; > I recently had to do a similar task, so if you still want the ""infinite"" flag, you can check this [line](https://github.com/tgaugry/sofa/commit/326f4f4c8fea61783e40225cb4abac648e569922#diff-5904f9a1380b53f6de2fdc644b6b1a48R112) and the `parseSkipOption` function in the same file. ; > Maybe this would solve your problem ?. It would indeed be better to not allow a `-1` value to the `n` option but instead to create a new option like `-infinite`. It doesn't have to be a value of the `n` option ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/613#issuecomment-375686179:172,intuit,intuitive,172,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-375686179,1,['intuit'],['intuitive']
Usability,"Hey @marques-bruno !. I think this will help us a lot to add robustness to our components. With this PR, do you see any reason why one would use `BaseLink`s in his component instead of a `BaseDDGLink`s?. Also, maybe instead of have a new `InitDDGLink` function in BaseClass, we could simply overload the `initLink` with; `initLink(BaseDDGLink* owner, std::string name, std::string help, std::string group = """")` ?. Thanks !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1226#issuecomment-561074421:284,simpl,simply,284,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1226#issuecomment-561074421,1,['simpl'],['simply']
Usability,"Hey @nhnhan92 ; Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license. To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!. Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _\*\*\*\_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); See: https://link.springer.com/article/10.1007/s00366-017-0572-4. Let us know what you think about it. We can make it step by step!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204:548,simpl,simply,548,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204,1,['simpl'],['simply']
Usability,Hi ! This is of interest. But it would gain in usability if it was also generalized for triangles. Adding barycentric coords of size 2 limits its use to edges and thus cannot be hard coded in the general class. Have you done something similar for your cutting simulations @epernod ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4226#issuecomment-1754590641:47,usab,usability,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4226#issuecomment-1754590641,1,['usab'],['usability']
Usability,"Hi @ChristianDuriez, @fjourdes, @EulalieCoevoet, . It would be nice to have feedback on this possible issue because this is related to your PR. If it is not an issue we can close it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/749#issuecomment-488587368:76,feedback,feedback,76,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/749#issuecomment-488587368,1,['feedback'],['feedback']
Usability,"Hi @EulalieCoevoet @ChristianDuriez ; Good to see you two super active and responsive on GitHub!! The SOFA GitHub is on :fire: . Just FYI pull-requests without a flag ""fast-merge"" are supposed to be let open 7 days for people to see it and review it.; But when @ChristianDuriez agrees, I guess we do as well :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1813#issuecomment-778080835:75,responsiv,responsive,75,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1813#issuecomment-778080835,1,['responsiv'],['responsive']
Usability,"Hi @EulalieCoevoet, @hugtalbot, @bakpaul . We discussed this PR today and agree this is nice work to merge... but it was not clear which part of the discussion still hold or not. Can you make a short summary and flag discussion as resolved.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3680#issuecomment-1479115587:125,clear,clear,125,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3680#issuecomment-1479115587,1,['clear'],['clear']
Usability,"Hi @Gabriele111 ,; There is also a slightly more verbose guide on https://scheiklp.github.io/sofa_env/setting_up_sofa.html",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1750395312:57,guid,guide,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1750395312,1,['guid'],['guide']
Usability,"Hi @Neustradamus,; Shipping Python with SOFA binaries is not a priority for now but I will definitely improve the installation instructions to make it very clear that users have to set their Python env by themselves and how to do it.; But actually I may have closed this one too quickly, the solution you proposed should be implemented. Let's re-open and put a more generic title. No promise on when I will tackle this though.; Do not hesitate to help in any way :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/879#issuecomment-486572133:156,clear,clear,156,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/879#issuecomment-486572133,1,['clear'],['clear']
Usability,"Hi @NouraHz,; Thank you for your work!. Please note that there are some [guidelines to follow](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md) concerning the commit messages in SOFA. We also prefer when a pull-request comes [from a specific branch](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#reminder---how-to-pull-request-from-github-documentation) (not from a master branch) because it is easier to edit (all reviewers have write access). Therefore, could you please create a branch in your fork containing these commits and start a new pull-request? I will then take care of the messages.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/287#issuecomment-306471464:73,guid,guidelines,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/287#issuecomment-306471464,2,"['GUID', 'guid']","['GUIDELINES', 'guidelines']"
Usability,"Hi @WilkGardariki,; Thanks for this fix. Let's start the [ci-build]. ; About your question, I guess the simpler is the better. There are other plugins with a scenes folder (CGal, Geomagic).; I am also interested in a _examples vs scenes_ discussion. I personally prefer _scenes_ as I find it more accurate.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/299#issuecomment-307734188:104,simpl,simpler,104,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/299#issuecomment-307734188,1,['simpl'],['simpler']
Usability,"Hi @alxbilger . Thanks for the PR and requesting a review. The existing code makes the assumption we only want Vec3 and Rigid3, the PR builds on that assumption to make the implementation cleaner and clearer. The changes dones are relevant and can probably merged as-is. . Nevetheless the PR makes the underlying assumption that we only want Vec3Type and Rigid3Type is questionnable in several ways and is also connected to several of Sofa's code architecture issues that are worht discussing. 1) Do we want to support 1, 2,4, 6d constraint ? ; If this is the case then the current non specialized implementation need to be check it actually compiles and do the expected thing. If this is not the case we should consider fixing that.; But if handling 1,2,4, 6d is not possible nor a desirable property the we should consider making code extension through in-heritance and subclassing instead of templatization. . 2) Asymetrical implementation regarding the floating point precision: ; The current implemented allows users to add extra instanciation for Vec3 (f,d) but do not allow such a thing for Rigid3f. This asymetry in implementation is weird to me as I tend to think that if there is functionnal equivalence regarding the templated data (i.e that one data type is in no way special against the other => Vec3 is i no way ""better"" compared to Rigid3) then this functionnal equivalence results in a code base that exhibit symmetrical implementation where the Vec3 and Rigid3 are treated the same. This is not the case as one is specialized in .cpp while the other is not specialized and is implemented in the .inl. . 3) Shouldn't we remove the ""call-super"" ? ; The code and PR makes use of what we call the ""call super""design patern in which an specialization or an in-herited class must call its parent/general implementation to behave correctly. I think the PR contains a variation for ""template"" of this pattern with the unspecializedInit(). In most of the case I noticed that the ""call super"" w",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1187087614:200,clear,clearer,200,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1187087614,1,['clear'],['clearer']
Usability,"Hi @alxbilger @courtecuisse . We understand what this function was used for in BaseFF. However, the API for topological changes introduced by @epernod more than a year ago now uses callbacks. Such callbacks appear to me like the appropriate way to implement an optimized update of the local stiffness (only on the updated elements). This PR proposed to remove a function, which had no implementation in the core. No feature in the code base, so it was polluting the code base and making it harder for new developers to read the API. @alxbilger had explicitly asked for feedback, and the above discussion led to the confirmation of this deletion.; However, you make a point: SOFA should indeed include examples (scenes and code) of 3D cutting and such contributions are most expected. Such PRs and topics are (and were in this case) discussed weekly at the [SOFA dev meeting](https://sympa.inria.fr/sympa/subscribe/sofa-dev). . Two solutions I see: ; - pulled-request a revert of the PR introducing the feature in the core of SOFA; - use the new API and updates existing FF in SOFA",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-1171247643:569,feedback,feedback,569,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-1171247643,1,['feedback'],['feedback']
Usability,"Hi @coolteemf . Thanks for your PR. The change of name for ""topology"" is legitimate and unify this component with the convention used in other component. You also did great by using the parse method to provide user feedback. . In Refine2mesh you commented a lot of code, could you explain a bit ? ; Because the general coding guidelines is that either the code is broken/invalid/deprecated and should be really removed or refactored or it is valid then it should be keept.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694623891:215,feedback,feedback,215,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694623891,2,"['feedback', 'guid']","['feedback', 'guidelines']"
Usability,"Hi @damienmarchal ,; Thanks for your reply!; Indeed, that is what I would like to do... I didn't know I could call parse() per component, instead of per data.. The solution is much simpler than I thought.. sorry!; I close the topic",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/363#issuecomment-322704865:181,simpl,simpler,181,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/363#issuecomment-322704865,1,['simpl'],['simpler']
Usability,"Hi @damienmarchal . Actually, it was more a linking/DLL problem than a compilation problem. (at least for OS X); GuiDataRepository is used in runSofa:. `GuiDataRepository.addFirstPath(Utils::getSofaPathTo(""share/sofa/gui/runSofa/resources"").c_str()) ;`. runSofa knows the symbol as the header is included ; but if you dont compile SofaGuiQt, the symbol wont be present when the linking occurs (with SofaGuiMain which is supposed to load SofaGuiQt if present). Anyway, for now I was considering GuiDataRepository as a ""global"" repository for all GUIs. And making it into SofaGuiCommon seems to do the trick (at least in my point of view). But your solution with the SharedUIResources is more elegant indeed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368865927:113,GuiD,GuiDataRepository,113,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368865927,3,['GuiD'],['GuiDataRepository']
Usability,"Hi @damienmarchal ; I closed this PR because I think this is the wrong way of doing binary data bindings..; First of all, using binary data serialization for special data types bindings forces the user to manually add deserialization in their python scripts, which is not good, and a source of error... I looked at the way the plugin Image made their ImageData bindings, and I will go for this approach for my datatypes. As for actual byte arrays bindings, that could still be an interesting feature, but what I did wouldn't be the proper way of binding byte arrays: for serialization to python, the size is known thanks to the std::string container, so it is possible to serialize to python the way I did in this pr. But desserialization to c++ would not work out, since there would be no way to know the size of the string to retrieve. If necessary, instead, a new TypeInfo could maybe be added to the interface of AbstractTypeInfo and VirtualTypeInfo, that would provide information about the byte array size, so that desserialization could be implemented. This explanation might not be very clear, I apologise in advance =) Maybe we can talk about this on Wednesday at the sofa meeting.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/416#issuecomment-331833780:1095,clear,clear,1095,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/416#issuecomment-331833780,1,['clear'],['clear']
Usability,"Hi @ewpostek . Thank you for getting involved in the SOFA community!; Unfortunately, this pull request is not well formatted. It is a merge of our master on our v16.08 and does not contain any commit from you. ; I think that what you wanted to do was to propose a change on our master branch. I invite you to **read [our CONTRIBUTING guide](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md)** and create a new pull request when you are ready.; If you have questions, do not hesitate to reply here. For now, I close this one (discussion is still possible). Cheers,; Guillaume.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/182#issuecomment-280387227:334,guid,guide,334,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/182#issuecomment-280387227,1,['guid'],['guide']
Usability,"Hi @fredroy , @guparan , @hugtalbot . I got several feedback saying that the fix suggested as advice is not clear ; (i.e people don't understand it) and worse that add a bbox at the root node is not working.; Can someone give it a try.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/524#issuecomment-358045787:52,feedback,feedback,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/524#issuecomment-358045787,2,"['clear', 'feedback']","['clear', 'feedback']"
Usability,"Hi @fredroy,. I fully support removing the dependency to SceneCreator. Thanks for the effort. . Small comment: ; I think that using simpleapi is a better option for scene creation than using the raw c++one:; - it reduce the need for c++ includes (so the dependency graph (aka ""the giant spaggheti bowl"") pressure). ; - it reduce the compilation time,; - in theory simple and consistant API aligned with the python one (but It haven't been updated so it match with SofaPython3... but doing such a thing is worth the effort).; ; ; EDIT: I just try how would look a modernize simpleapi (https://godbolt.org/z/9EW9dbnvn)... and think I'm going to like doing things like that (thanks to c++ std::any):; ```cpp; mo = createObject(""MechanicalObject"",; {{""name"", std::string{""myMo""}}, ; {""position"", {{1,2,3},{4,5,6}}},; {""enable"", true}});; node.addObject(mo);; ```; The syntax is nice and there is no more this ugly data to string to data creation using ""BaseObjectDescription"" and its parse method.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3955#issuecomment-1592565882:132,simpl,simpleapi,132,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3955#issuecomment-1592565882,3,['simpl'],"['simple', 'simpleapi']"
Usability,Hi @fredroy. Here it is:. [INFO] [runSofa] PluginRepository paths = C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/plugins;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/collections;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release; [INFO] [runSofa] DataRepository paths = C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/src/share;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/src/examples;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build; [INFO] [runSofa] GuiDataRepository paths = C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/src/applications/projects/runSofa/resources;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/src/Sofa/GUI/Qt/src/sofa/gui/qt/resources;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build; [INFO] [BaseGUI] Created directory: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/config; [INFO] [BaseGUI] Created directory: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/screenshots; [INFO] [GUIManager] Registered batch as a GUI.; [INFO] [runSofa] Loading automatically plugin list in C:\Users\gfurn\anaconda3\envs\sofa_source\sofa\build\bin\Release/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.Forward.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.Backward.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.IO.Mesh.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.IO.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_sourc,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:598,GuiD,GuiDataRepository,598,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,1,['GuiD'],['GuiDataRepository']
Usability,"Hi @hdeling,; Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/936#issuecomment-465519581:151,simpl,simplify,151,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-465519581,1,['simpl'],['simplify']
Usability,"Hi @hugtalbot,. Thank you for your response. I've reviewed the CMakeLists.txt file in the SofaTearing plugin and noticed that the first two lines are:. find_package(SofaFramework REQUIRED); find_package(SofaGui REQUIRED). However, I couldn't find SofaFramework and SofaGui mentioned in the SOFA-NG transition list you provided. It's possible that I've misunderstood the process for integrating a v21.06 plugin with SOFA v23.06. Could you please clarify this for me or offer further guidance?. Thank you.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4461#issuecomment-1919100009:482,guid,guidance,482,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4461#issuecomment-1919100009,1,['guid'],['guidance']
Usability,"Hi @hugtalbot. In diagonalmass.cpp can you confirm that the following are bugs to fix: . The specialization for rigid3f ::init() & rigid3d ::init() are totally different. Seems to me they shouldn't. You said that ""totalMass parameter is re-computed in the un-specialized implementation of the reinit function sounds ok to me, but indeed, the specialization for rigid/vec should forward to this implementation"". ; I have the impression that the forwarding to the implementation is not missing in the specialized(rigid3) version. About the last point of your answer, sorry for not being very clear with ""not tagged"", I was in fact referring to the non usage of the readOnly flag.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/36#issuecomment-257843781:590,clear,clear,590,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/36#issuecomment-257843781,1,['clear'],['clear']
Usability,"Hi @lagarkane . Maybe I have not clearly understood what you want to achieve but what about something like the following:; ```cpp; void YourObject::parse( BaseObjectDescription* arg ); {; /// Initialize the possible list of options by parsing ""manually"" the list:; if (arg->getAttribute(""availableOptions"")){; /// vectorFromString is not existing...but this is just to give you the idea ; OptionGroup options(vectorFromString( arg->getAttribute(""availableOptions"") ))) ; ; d_myOptionGroup.setValue(options) ; . /// don't remove the availableOptions so that it is parsed as ""usual"" ; /// and it will be correctly saved. ; } ; ; /// Call the normal parse function. ; Inherit1::parse(arg) ; ; }",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/363#issuecomment-322543991:33,clear,clearly,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/363#issuecomment-322543991,1,['clear'],['clearly']
Usability,"Hi @m4n4n . Thank you for considering this issue and sorry for my low responsiveness, I was away from the office for some days. Indeed, the problem disappeared since it was due to another issue : the PR #521 introduced a bug, fixed since the #556 ; This issue being linked to this issue should now be closed. Do not hesitate to consider any other issue ! :+1: . Best,",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/571#issuecomment-372656292:70,responsiv,responsiveness,70,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/571#issuecomment-372656292,1,['responsiv'],['responsiveness']
Usability,"Hi @maddin200 ; Thanks for the notice, I will test it within the week. But it clearly appears uninitialized.; I put here the [link to ImageTypes.h](https://github.com/sofa-framework/sofa/blob/d1434b2eaaf2b8ef516a428544f9c0d65ed3d4df/applications/plugins/image/ImageTypes.h#L303)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1133#issuecomment-526942267:78,clear,clearly,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1133#issuecomment-526942267,1,['clear'],['clearly']
Usability,"Hi @matthieu-nesme . Thanks for your feedback, I really did my best on it to avoid as much as possible trouble. I suggest to cut this PR in several part (haha) to remove the Flexible/Compliant files from the changes, this woud make the move much smooth. . This will give you time to point out specifically the most problematic points in which you think that the remplacement will not do the work so that I can propose solutions to be closer to the ""semantic you want"". . I looked into the Flexible/Compliant and it seems to me that only a dozen of replacement (out of hundreds) are not equivalent to the old code. . If you take time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.s",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:37,feedback,feedback,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960,1,['feedback'],['feedback']
Usability,"Hi @olivier-goury ; The info is in the sofa-dev meeting report but has not been copied here.; --> wip, use clear() instead of removeAt(0) on l_forceField link. @guparan will work on it, no worries",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/772#issuecomment-424997626:107,clear,clear,107,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/772#issuecomment-424997626,1,['clear'],['clear']
Usability,Hi @sergeiNikolaev . Respecting the existing gui rendering is not crucial in itself..but we should try to respect standard guidelines for GUIs. On that aspect it is more common to have QLabel & checkbox/textfield on the same line otherwise this look a bit weird and consume a lot of screen space for nothing. . EDIT: But if this is too much work I think we can live with that as runSofa should die :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/369#issuecomment-324314176:123,guid,guidelines,123,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/369#issuecomment-324314176,1,['guid'],['guidelines']
Usability,"Hi @sergeiNikolaev ; Sorry for the latency on this topic, tests can be made so that we create a simple scene in c++ imposing rest shape and an imposed displacement. Thus, the resulting force should be analytically defined.; By the way do you have any latex file for the polynomial equations?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643111261:96,simpl,simple,96,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643111261,1,['simpl'],['simple']
Usability,"Hi @sofa-framework/reviewers,. Here are some news for September. ## Plugin vs Classic library; I removed the config/Sofa.*.cpp file from all modules that should not be using the PluginManager API.; This is necessary to clearly distinguish what is a Plugin (= bunch of Components that are loaded on user demand with a RequiredPlugin) and what is not (= core or misc library loaded automatically). ## Sofa.Helper.Types; I started the refactoring for Sofa.Helper.Types but it implies some sofa2ng modifications.; Since the sources come from 2 different places (SofaKernel/framework/sofa/helper and SofaKernel/framework/sofa/helper/types), I decided to use the recipe for SofaKernel/framework/sofa/helper only and then to refactor SofaKernel/framework/sofa/helper/types manually.; The result will be pull-requested soon. ## October objectives; - Finish refactoring Sofa.Helper.Types; - Open PR for Sofa.Helper.Types; - Start another Sofa.Helper.* refactoring. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491:219,clear,clearly,219,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491,1,['clear'],['clearly']
Usability,"Hi @sofa-framework/reviewers,. Here is a follow up of NG project for April. ; The project is huge and still requires a lot of iterations to get the best refactoring process but we are going in the right direction :+1: . ## Discussions; It was decided to push all NG changes to [a specific NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namesp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:443,feedback,feedback,443,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811,1,['feedback'],['feedback']
Usability,"Hi @sofa-framework/reviewers,. May was quite quiet for our beloved NG project.; Don't worry, I still have some news for you :wink:. ## Discussions. Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramew",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:259,simpl,simplify,259,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223,1,['simpl'],['simplify']
Usability,"Hi @thomas-lemaire,. About the ""\n"" ... why would it breaks windows console printing ? Windows and linux does not have the same ""\n"" but a windows app emits the ""\n"" the windows system understand. About using ""\n"" or better std::endl. My target was to supports messages written with a simple markdown syntax for which the ""\n"" is not an explicit line break, it is "" \n"" (double-space before the \n) . So i replaced std::endl/sendl by this "" \n"" ; But I found that ugly and hard to read so I finally made 'msgendl' that contains the explicit markdown line break, but I forgot to remove the old manually placed "" \n"" I used all around. . Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). Do you think msgendl is ok ? ; Do you like the msgendl ?. The change on how the messages are printed in runSofa is visible here: ; ![newmessage](https://cloud.githubusercontent.com/assets/12644882/23545144/72df7122-fffa-11e6-8c53-fc9a4415c493.png). The two panels Output/Error are now merged into a single ""Message"" one and the panel now shows in its title the number of messages (in this PR I removed the column with ""suggest a better message). In the Graph view there is also a small alert (green, yellow, red) on top of the icons showing the kind of message an object have. . EDIT: I fixed the "" \n""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162:285,simpl,simple,285,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162,1,['simpl'],['simple']
Usability,"Hi @untereiner . From my experience you will have more feedback if you provide more information on the PR description to give other some envy to try it. . Given the complexity of the PR here is what people passing by may need:; - what the PR does precisely ? ; - what is the existing state on this topic in Sofa (the title speak about dynamic topology...isn't there dynamic topology in Sofa since year) ? ; - how this PR handle the problem, ; - use CGOGN library... what is this CGOGN library ? ; - argument on why the PR is it useful/mandatory/improvement,; - trying to convince people why they should spend time testing it,; - provide some idea on how invasive the PR will be (non breaking at all, breaking the SofaCore API, breaking existing scenes)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402418819:55,feedback,feedback,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402418819,1,['feedback'],['feedback']
Usability,"Hi @vmagno, thank you for your PR!; This should be merged fast.; Could you add a simple description please?; [ci-build]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/384#issuecomment-327112983:81,simpl,simple,81,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/384#issuecomment-327112983,1,['simpl'],['simple']
Usability,"Hi Damien,. I haven't had much time to devote to this as of late, but here is some quick feedback so far:. - lots of code need modification (like *lots*), deep down the core and you need lots of patience to recompile everything over and over again,; - it makes little sense to optimize data initialization if you don't optimize links as well since they use a similar initialization mechanism,; - the speedups in my test scenes were disappointing, being largely dominated by other code paths (contact detection and response mostly, since this is the main use case as the graph gets dynamically altered at every time step),; - IIRC there was a data/link notification mechanism on insertion that could cause accidental quadratic complexity when used sequentially (I'll try to fix this one soon),; - beware of CollisionGroup managers that was causing huge slowdowns in my case for no visible reason as there was a single group. The takeaway: this is probably premature optimization at this point. I might give it another shot in the next few months as my work may depend on it but until then, don't expect major changes on this front. (edit: typos)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574:89,feedback,feedback,89,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574,1,['feedback'],['feedback']
Usability,"Hi Damien,. Thanks a lot for your answer!. Regarding the BarycentricMapping, I indeed wasn't sure of which of the input and the output was driving the other (although I knew that the mechanical model was supposed to drive the collision model). It is definitely clear with your explanation. So I understand that there is no bug regarding the behaviour of the BarycentricMapping (as you pointed out), as it is not suppose to work for another input types than Vec3d.; For me, the (very minor) issue would rather be with the error message, as you said in your NB. My apologies for the typo, indeed, I hadn't paid attention...; As for the unexpected behaviour, I haven't tried yet to track down what is happening. As I'm looking to use a reduced topology for my collision model, I might investigate it more in a near future. If so, I'll report here anything I find unsettling.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487582657:261,clear,clear,261,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487582657,1,['clear'],['clear']
Usability,"Hi Didier @dweckmann ; thanks for your feedback! we actually had very recently a discussion about better supporting the latest version of libraries required for SOFA like CMake.; Are you using the master branch? because the TARGET parameter seems to be defined. Whatever, happy to see you back in the game!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1105#issuecomment-513245249:39,feedback,feedback,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1105#issuecomment-513245249,1,['feedback'],['feedback']
Usability,"Hi Erik, . Thanks for the feedback. I reorder the SofaGUI Cmake inclusion order to have it compiling.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/915#issuecomment-460066859:26,feedback,feedback,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/915#issuecomment-460066859,1,['feedback'],['feedback']
Usability,"Hi Erik,. Nice commit. Some (cosmetic) remarks:; - you updated some attributes/data field names but the name you use are not following the sofa guidelines. Data should starts with d_ not m_ (https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md). ; - there are std::cout which should be replaced by the msg_error api ; ; +1 for the examples.; Would be nice to also have a test file validating the behavior.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273165258:144,guid,guidelines,144,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273165258,2,"['GUID', 'guid']","['GUIDELINES', 'guidelines']"
Usability,"Hi Felix,. Thank you for your PR. ; Let's see if it builds and if people have feedback to give you. [ci-build]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306476756:78,feedback,feedback,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306476756,1,['feedback'],['feedback']
Usability,"Hi Francois,; thank you for the feedback. Hopefully for the common good, this non-zero default value will disappear!; I did not know the historical explanation of the ForceField/Mass API. On my opinion, no matter how many scenes will be broken: hidden numerical damping is worse than anything else. Finally about making them clearly time dependent, I don't really see the point but whatever, this can be done in a second stage.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/338#issuecomment-316695855:32,feedback,feedback,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/338#issuecomment-316695855,2,"['clear', 'feedback']","['clearly', 'feedback']"
Usability,"Hi Fred, . The splitting seems to perpetuate the spurious dependency from SceneCreator to sofa.testing.tools. ; Maybe it is the time to remove the dependency to SceneCreator and use simpleapi in place so that sofa.testing is cleaned from SceneCreator.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040449818:182,simpl,simpleapi,182,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040449818,1,['simpl'],['simpleapi']
Usability,"Hi Fred,. On my side I have implemented the ""warning"" behavior. It is in PR #306 and I would appreciate your feedback (and if you have time, some support to fix the linking problem on windows).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/281#issuecomment-311036684:109,feedback,feedback,109,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281#issuecomment-311036684,1,['feedback'],['feedback']
Usability,"Hi Fred,. Thank you for your pull-request. ; It looks really nice. . Some user friendly stuff...; - I would be great to have more details in the help string of the added Data. Currently it is more or less duplicating the name; maybe you can say what is it used for in term of rendering and shadowing.; - I have now clear opinion on that but maybe we should also add the default values in the docstring (I found it very annoying for the users to look in the source code to know what the default values are). ; - In the same spirit I think that somewhere VMS should be documented to the user. Maybe in the component helpstring when it is registered ? . I will test that by thursday unless someone else do that before.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/73#issuecomment-263723195:315,clear,clear,315,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/73#issuecomment-263723195,1,['clear'],['clear']
Usability,"Hi Hugo, This is a very challenging target. I would probably try something something like:. 1- For release 17.12; - move all the ""not core"" files in plugins. ; - for each ""SofaXX/blahblah.h"" in the old location have this kind of file with:; ```cpp; /// This file is now deprecated and have been moved in the ""SofaXX"" plugin. You need to; /// update your code to #include <SofaConstraint/blabla.h> ; #ifdef SMOOTH_TRANSITION_UNTIL_17_12; #include <applications/plugins/SofaXX/blahblah.h>; #endif; ```; - for each component you really want to deprecate add a hook in the SceneChecker saying ""component xxYYZZ is now deprecated and will be removed in sofa 18.06. Use alternative XX and if there is none please contact us open Issue in our bugtracker with tag 'sofaNG'. "". Then in 18.06...really removes the component and update the SceneChecker hook so that it simply print somehing like ""this component have been removed since sofa 18.06. Alternative component is now XXXX."" . Of course the more automated it will be through script the best it will be.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481:858,simpl,simply,858,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481,1,['simpl'],['simply']
Usability,"Hi Mathieu,. Best wishes for this year. . Daccord is an old repository on gforge storing a lot of experimental feature (UI & modelling) that are pending for integration in sofa. . I fully agree with your suggestion for point first&second; for third:; - what about adding a Data for template & src ? (I really would like to preserve as much as much as possible the original scene because) ; - ""type"" I don't know but it handled specifically in (XML.cpp). I started a new branch for this task so we can work and tests : ; https://github.com/SofaDefrost/sofa/tree/xmlsave. EDIT: I have updated this branch saving is now working (at least the caduceus scene). If some of you have time please give feedback.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/41#issuecomment-270089246:693,feedback,feedback,693,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/41#issuecomment-270089246,1,['feedback'],['feedback']
Usability,"Hi Mathieu,. I see what you mean. ; ; The new implementation allows you to select precisely how gtest suceed or fail according to the messages emitted by a component by using either the MessageAsTestFailure or/and ExpectMessage RAII. . To update the old tests with *a minimal amount of effort* to restore the behavior you described. ; I think in each test setup we can simply add something like ; ```cpp; MessageAsTestFailure raii_warning(Message::Warning) ;; MessageAsTestFailure raii_error(Message::Error) ;; ```; I can devote some time to do that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290:369,simpl,simply,369,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290,1,['simpl'],['simply']
Usability,"Hi Mathieu,. Thank for the feedback. . STLExport & MeshExporter are exporting single object while OBJExporter is exporting a whole scene. ; I didn't change that because it would cause too much refactoring and it seems there is an agreement on that. . In this PR what I did was just to factorize the existing quasi-duplicated functionalities into an unique class. So now the three objects have a consistent behavior regarding the filename & path creation as well as the attributes behavior. . I'm very sorry about the difficulty to review this kind of changes... I think the best approach is not to use the diff which are too complex and instead review the resulting file which are (I hope) good looking. . I also have added tests (+30) to check that things goes fine and help in future refactoring to detect regression. As you said one year ago ...we need more tests :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631:27,feedback,feedback,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631,1,['feedback'],['feedback']
Usability,"Hi Mathieu,. Thank you for the feedback... the GLSL stuff is a mistake... I didn't knew that pull-request was for a branch and not for a specific commit. So i continued to to work in this branch (I will not do the same mistake in the future). . Now to answer your question...the overhead is near zero. ; - The GLSLListener is triggered by the file FileMonitor. ; - FileMonitor is using the event based ""select"" system API and is not actively 'polling' the files. AFAIK this is the most efficient way to monitor files. ; - If your application don't call FileMonitor::update(0) then this cost nothing. Currently only runSofa is calling FileMonitor::update(0) when started with the -i (for interactive) command line option. . So the different scenarios is:; - runSofa -i & changing the file (this cost the reload of the shader); - runSofa -i & not changing the file (this cost calling the select system call) ; - runSofa as usual...this cost nothing. . I hope I answer you question and yet again, thank you for your feedback on this PR. . Now about FileListener... it is part of the FileMonitor API that is already in Sofa. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/55#issuecomment-261506734:31,feedback,feedback,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/55#issuecomment-261506734,2,['feedback'],['feedback']
Usability,"Hi Maxime,. For 1. ; What about just setting the arguments into sys.argv using PySys_SetArgv(argc, argv) ? . For 2. ; Isn't __ file __ returning the current file... So in a python script controller __ file __ it would not contain the scene filename but the controller's one. But you are totally right that this could solve the initial @chrijopa question in a very simple way.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323698076:364,simpl,simple,364,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323698076,1,['simpl'],['simple']
Usability,"Hi Maxime,. Thanks for the feedback.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/44#issuecomment-271520439:27,feedback,feedback,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-271520439,1,['feedback'],['feedback']
Usability,"Hi Quentin !; Thanks for the notice !. @untereiner I recall that you recently had a look at the VTKLoader in SOFA. Am I correct?; Did you face these warnings ?. Since the file is well loaded, we would simply need to update the loader to have only Warning (and no error msg) when facing these new metadata.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/652#issuecomment-387752616:201,simpl,simply,201,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652#issuecomment-387752616,1,['simpl'],['simply']
Usability,"Hi Raphael,. Many thank for your pull request. ; The feature sounds appealing and at first sight it looks ok. I have never used this component so if someone can give feedback it would be great. . EDIT: do you mind if I push some cleaning commit on this component in your PR. I would like to add some test cases for this component.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/394#issuecomment-328134531:166,feedback,feedback,166,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/394#issuecomment-328134531,1,['feedback'],['feedback']
Usability,"Hi Sergei,; reset in SOFA might not clear with zeros some state values. That could be interesting to dig in the scene to see where does the problem come from. Could you investigate deeper ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/571#issuecomment-360534630:36,clear,clear,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/571#issuecomment-360534630,1,['clear'],['clear']
Usability,"Hi Stéphane, thanks for the feedback, . If we split the existing set of components into sub-sets eg (""stable"", ""fullset"", ""deprecated"") our starting point would be the current sofa with everything in the ""fullset"". Starting from that we can start moving the good enough one in the ""minimal"" or ""stable"" set, the bad ones into the ""deprecated"" set and keep the one we cannot decide into the ""fullset"". . You are totally right that this proposal is not providing any ideas on who will take the decision to move one component into the deprecated set. This is very interesting question but it deserve a whole issue & STC or an autocratic gentle decision :). To me the presented approach is interesting as:; - it is incremental and thus we don't have to wait any decision of a definitive list of components that have to be keep. We can already, small step after small step, moving the ones for which there is a agreement into the right set (and people not using the set will stop being bothered with them). ; - it is bi-directionnal, so people can work in parallel either to move the components into ""stable"" or into ""deprecated"". So team looking for the ""future"" should put their time on making a good ""stable set""; - the approach also cares about users because until a component is removed from the deprecated set"" a Sofa version can still be compiled with the deprecated components. ; - it is reversible, and each time a component is put into the ""deprecated"" set users of the component are warned when loading their scene, and thus, they can complain to sofa-dev that we shouldn't have deprecated a specific component (or that they are going to invest themself to maintain it). ; - it is complementary to organizing component sharing functionalities into module or plugins or packages (group of plugins) which also help to reduce the compilation time of sofa. . @untereiner I think in the existing sofa we have used component grouping (with modules or plugins) to handle lifetime management & functiona",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715:28,feedback,feedback,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715,1,['feedback'],['feedback']
Usability,"Hi Thomas,. Glad you made this PR, so thank you. ; ; Some feedback:; - Everything in sofa is a component so the default name of ""DistanceGridComponent"" should be shortened into ""DistanceGrid"" when it is used in the scene. You can do that by overriding the function std::string Base::getClassName() const.; - I would be much better to have the number of samples (the nx,ny,nz) stored at the beginning of the tmg file. ; - I assume that in MeshGenerationFromDG, the DG is for DistanceGrid. As it work with ImplicitShape wouldn't it be better to name it MeshGenerationFromImplicitShape ? ; - There is not tests for the added classes.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/354#issuecomment-319761815:58,feedback,feedback,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354#issuecomment-319761815,1,['feedback'],['feedback']
Usability,"Hi Thomas,. Many thanks for the feedback. ; I'm a bit confused because as far as I can read, Jeremie suggested to use OBJExporter not MeshObj to export visual things and I didn't changed this behavior. And there is no MeshObjExporter in sofa. Here is the current situation in Sofa: ; In sofa/helper/io:; MeshObj (a reading class, not a saving one) ; MeshStl (a reading class, not a saving one) . SofaExporter:; - MeshExporter (a writing component that focus on tetrahedral mesh forme as: VTKXML, VTK, Gmesh, Netgen, TetGen) All the format are coded in it. ; - OBJExporter (a writing component with a visitor that dump visual scene); - STLExporter ; - VTKExporter . As far as I can say the thee later are duplicating a lot of boiler plate code. The three reason why I created this BaseSimulationExporter was: to factorize theis code. To enforce a consistent behavior for each of them (eg having one component that create the missing ""directory"" while the other does not is too bad from a UX perspective). Finally it also help in writing the python binding because only one binding is needed instead of three. This is also consistent with what exists in SofaLoader where both MeshOBJLoader & MeshVTKLoader inherit from MeshLoader. . My current thinking and target is that we need to have more symetrical implementation between SofaLoader and SofaExporter. ; Eg: ; in SofaExporter: ; - SceneExporter (rename or inherit from BaseSimulationExporter) ; - SceneOBJExporter (the existing OBJExporter inheriting from SceneExporter); - SceneSTLExporter (the existing STLEXporter inheriting from SceneExporter); - ...; - MeshExporter (base class); - MeshTetGenExporter (result from splitting the MeshExporter); - MeshVTKExporter (result from splitting the MeshExporter). I don't have a lot of time to this so I prefer to stay focus on the ""SceneExporter"" (so STL & OBJ ones) and left the MeshExporter untouched for the moment. The rename with Scene* vs Mesh* is to clearly show the component that have a visitor ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236:32,feedback,feedback,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236,2,"['UX', 'feedback']","['UX', 'feedback']"
Usability,"Hi all, . It was tested two weeks ago at Defrost, @EulalieCoevoet try our tutorials/tripods and it works like a charm. @TanguyNav found a bug that was reported. To us, it is going in the right direction and we support the merge of this work. . We hope the rest of the community will provide feedback asap.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1469608892:291,feedback,feedback,291,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1469608892,1,['feedback'],['feedback']
Usability,"Hi all, . Just a quick update asked by @hugtalbot on how we handled this issue at Anatoscope. It's been a while so our fork drifted quite a bit since the opening of this issue:. - `Data` are only allowed in `BaseObject` instances (i.e. `Nodes` have no data), which simplified many things; - We removed `initData/initLink` altogether, most constructors are now `(BaseObject* owner, const char* name, const char* doc, const T& value = {})`. A pleasant consequence in c++17 is that you may directly declare datas in the class like this:; ```c++; class Object: public BaseObject {; public:; Data<double> foo = {this, ""foo"", ""a foo that bars"", 1.0};; };; ```; - `BaseData` now maintains shareable information (like name/doc/etc) in a shared object, which can be shared between several data instances. In practice doing so is still very ad-hoc so we don't use it much, but it is possible in case we want to optimize dynamic component creation; - Dependency relations between `DDGNodes` no longer use the `Link` mechanism. ; - In fact component links and `Links` in general are mostly gone, and will be removed in the future as they're yet another dependency graph and we would like *everything* to use the data/engine graph instead; - Our `Data` have at most one input (another data or its owner engine), so we may move the `inputs` handling of `DDGNode` to derived classes to avoid needless allocations for `Data`. It's not done yet though. As you can see, things don't quite look the same, but I think old-timers would still recognize what's going on ;) By the same token I think this issue can be closed, but please don't hesitate if you have any question.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/44#issuecomment-1033777336:265,simpl,simplified,265,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-1033777336,1,['simpl'],['simplified']
Usability,"Hi all, . Thanks for the PR. . In the past it was consider that draw tools was a rendering abstraction layer to be used for debugging/inspection or GUI helpers. The recommendation was to use drawTools in the Base::visual() overrides. The main ideas was to allow component developpers to have rendering tools without having a dependency to opengl. On its side, OglXXX component in Sofa.GL exists to hold compoennts that, for whatever reason (performance, lack of time), are still implemented using the opengl api. Up to now, the evolution guidelines was something like:; - replace in the complete code base ogl call by drawTools calls into xxx::draw() ; - move every component for which ogl call remains (mostly in xxxx:drawVisual) into the Sofa.GL.XXX. This PR does something else, as it replace opengl calls from Sofa.GL.OglXXX by drawTools's ones. Implementing component rendering using drawTools instead of ogl calls is probably desirable (if there is no performance cost)... but it cannot be in Sofa.GL. . I recommand to create a new component in Sofa.Component.Visual, for the component using drawTools and if needed in Sofa.GL.Component have the ogl version subclassing it (if needed).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1181534481:538,guid,guidelines,538,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1181534481,1,['guid'],['guidelines']
Usability,"Hi all, . Thanks for the discussion. . My current understanding is that removing the whole InitData Mechanisme is:; - possible, ; - desirable (would make the code more clear and maintainable). This mean converting every ; ```c++; myData(initData(&myData, 0.1, ""myData"", ""helpe)) ; /// into ; myData(this, 0.1, ""myData"", ""helpe""); ; ```; About the use of ""this"" in a child constructor. My understanding is that it is considered safe for non virutal methods and attributes from the superclass (https://isocpp.org/wiki/faq/ctors#using-this-in-ctors). I also tried a pure constructor based initialization with g++ and clang++ and got no warnings with -Wall and -pedantic. About the ambiguity case cause by the char* to bool implicit conversion... I would say it would be much easier to fix when the initData machinary will be dropped. . EDIT: One more thing about the bool to specify the parameter... I think that using directly the enum 'named"" value or the setXXXX method to set the parameter is far better than using bool.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1234334877:168,clear,clear,168,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1234334877,1,['clear'],['clear']
Usability,"Hi all, any feedback on this PR ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/337#issuecomment-318174397:12,feedback,feedback,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/337#issuecomment-318174397,1,['feedback'],['feedback']
Usability,"Hi all, it appears that PR #521 breaks several scenes. ; I'm fixing that in PR: #548 . In some of the problematic scenes the mechanical object does not have a mass so it was simply fixed by adding one. . For examples/Components/forcefield/TetrahedronDiffusionFEMForceField.scn I'm not sure the zero mass is the cause of the problem. . @hugtalbot any idea ? . Now more fundamentally I'm puzzled by the ; ```; if( fabs(den)<f_smallDenominatorThreshold.getValue() && nb_iter > 1 ); ```. As there is a division by 'den' just after the condition so if den == 0 (which seems to happens in several cases) and first iteration then the scene explode with nan-nan everywhere. . A more robust & user friendly approach should be implemented.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/539#issuecomment-354131222:174,simpl,simply,174,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/539#issuecomment-354131222,1,['simpl'],['simply']
Usability,"Hi all,. I have opened a new PR in WIP to handle the cleaning of set & vector. It currently contains an attempt to remove the std namespace ""pollution"" in commit https://github.com/sofa-framework/sofa/pull/278/commits/d3ecab1eaa7f2f29242aacf646910b2eb3ab47dd. Feedback & contribution in #278",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/113#issuecomment-303232819:260,Feedback,Feedback,260,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/113#issuecomment-303232819,1,['Feedback'],['Feedback']
Usability,"Hi all,. I think Eulalie's work is done. . Your feedback & review are welcome because it is a big PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/798#issuecomment-443732934:48,feedback,feedback,48,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/798#issuecomment-443732934,1,['feedback'],['feedback']
Usability,Hi all. @EulalieCoevoet @epernod @matthieu-nesme @thomas-lemaire @hugtalbot @guparan @fredroy . I suggest we use this issue for general communication about what is happening on the UX group either on github and/or on gitlab. . Please tell anyone interested to join/. Our general target for the next sofa release (17.06) is to ship a runSofa2 application. ; This means we only have less than 3 month. ; I suggest that in April & first day of May we add the missing features and we keep the last month to test and bug fix the software. . DM.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/187#issuecomment-291478457:181,UX,UX,181,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/187#issuecomment-291478457,1,['UX'],['UX']
Usability,"Hi everyone, Marc here :-). I remember I introduced the `init()` and `cleanup()` functions, so I'll add a few words of explanations. Bear with me, it's actually simpler that the length of my response may suggest. > So unless there is a compelling reason to leave it this way (and I would really like to know it). The trick which consists in using static variables to run dynamic initialization code (or cleanup code, for that matter) is an anti-pattern, for a couple of reasons:. * **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the `init()` functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the _right_ time: the program will work correctly by design, not by coincidence;. * **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the `main()` function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. * **choice** (or whatever): with an explicit call to `init()`, an application writer gets to decide both *whether* and *when* to initialize SOFA. ### Now... In the end, I didn't actually bother to search for any single piece of initialization code in SOFA and move it into the appropriate init() function, so the init() functions are pretty light, but the setup is there. Also, the static-dynamic-initialization trick is used all over the place in SOFA, and what happens in the init() functions is ridiculous compared to all the code that probably runs when SOFA is loaded, so here again it is a drop in the ocean, but, I think, a step in the right direction. ### Anyway... > What I don't understand is why the above code snipped does not simply cleanup() the library in ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946:161,simpl,simpler,161,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946,1,['simpl'],['simpler']
Usability,"Hi everyone, sorry for taking so long to further explain my PR. I fully agree with @Camille-K, the referenced paper states it clearly that the matrix should be updated at each time step.; Thanks for merging my PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2706#issuecomment-1060361474:126,clear,clearly,126,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2706#issuecomment-1060361474,1,['clear'],['clearly']
Usability,"Hi fred,. The sofa::qt::GuiDataRepository is pointing to the set of resources that are specific to the qt application complementing the shared DataRepository (""share/""). Consequently it is the expected behavior to have it only usable when SofaGuiQt is enabled. I quickly looked in the code base where it is used and the only usage are in qt specific code which shouldn't prevent the compilation. If it does then something is wrong and the right fix is to prevent non qt base code to use this repository. . But maybe the problem you are facing is not a compilation problem but is more about sharing UI resources in different GUI. ; To do that I my suggestion is to:; - always consider to have a specific GuiDataRepository in your application namespace, this repository should point to your application specific resource (the ones that are tied to you GUI functionality).; - use the DataRepository to store shared UI elements because this one is already shared by sofa (but do we really want to have UI resources in SofaCore ?).; - or, and I think this is the real way to go, make a plugin (SharedUIResources ) to hold and expose the UI elements we are considering as re-usable by different GUI projects. But maybe I'm all wrong, if so please tell me. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368789908:24,GuiD,GuiDataRepository,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368789908,4,"['GuiD', 'usab']","['GuiDataRepository', 'usable']"
Usability,"Hi guillaume, . Many thanks for the links to the jenkins API, this will helps us in differentiating the tests. . I think the meaning of the colors depend on what the dash board is used for:; a) if the dash board is used to know what is the current state of the sofa code base (so answer the question: ""is this version of sofa good"") then, as you say, it should be red showing that something is bad. . b) but, if the dash board is used to get feedback of a given (personal) contribution (answering the question: ""did I introduced regression or is my contribution positive""). In this perspective a transition from green-to-red will be considered as:; - ""SHIT, I did something wrong !""; - ""OMG, other people will see that !""; - ""I quickly need to revert or fix that mess"". ; - ""But I have no time to fix the Sofa bug...so I remove the test i made showing an existing defect"" . From what I see in the defrost team the dash board is only use in the (b) situation and I regularly see people not commiting because they are afraid of putting the dash board to red. . Consequently and if we want to increase the number of commits (containing tests showing existing sofa defect) we should reward contributor with an positive feedback mecanism (whatever it is). DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277:442,feedback,feedback,442,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277,2,['feedback'],['feedback']
Usability,"Hi guys!. Thanks again, Bruno, for your suggestions! I'm happy to read you find the PSDE useful. I especially like your extension to allow for for automatic derivation of the types for Inputs. This was also one of my top ideas to improve the PSDE, but I didn't have any more time to pursue this development. In the next days I'll test your Pull Request and try to give feedback on the different topics discussed here!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392039499:369,feedback,feedback,369,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392039499,1,['feedback'],['feedback']
Usability,"Hi guys, I made the changes concerning your feedback and now the PR is ready for review from my side! . The main changes are:; - Created a basic example of usage; - Now uses a factory for data creation; - The use of both args and kwargs for I/O creation is possible; - No unnecessary changes in files / no geometries added, etc. (cleaning)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/583#issuecomment-367666857:44,feedback,feedback,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/583#issuecomment-367666857,1,['feedback'],['feedback']
Usability,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:839,clear,clear,839,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197,1,['clear'],['clear']
Usability,"Hi matt,. 1) Color are not disabled in runSofa for me. It is only one line that disable them in Sofa_test.cpp and I don't see why it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:486,clear,clear,486,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008,1,['clear'],['clear']
Usability,"Hi raffaella,. We really appreciate feedback & suggestion, so thank you. . On the Python side we are currently actively working on improving the whole way to report error. This take place in PR #304 ; So it is the right moment to have that to be improved because release the next sofa release (17.12) will change things. . More generally Sofa messages are from ok to really bad but we lack (wo)man-power to fix all that so If you or anyone feel the envy to participate on this kind of task please don't hesitate because it is very important to have good error messages. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439:36,feedback,feedback,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439,1,['feedback'],['feedback']
Usability,"Hi thank you for the list, this is very informative. In the current state we clearly cannot trust that to feed the factory. So to me we have to add in the data factory base types like:; - double, int, float, Vec3, Vec4, Quaternion, Index, string, Matrices, Vector, ; - vector<XXX>, set<XXX>, . So that we already have a valid convention for the create data that is 'rich' and usable explicitely from python. . Then, for the automatic type deduction...isn't it possible to create a ""clone"" of an existing data without having to even have to get a typename ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380409414:77,clear,clearly,77,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380409414,2,"['clear', 'usab']","['clearly', 'usable']"
Usability,"Hi!; Here's a simple test scene showing the problem:; ```<?xml version=""1.0"" ?>; <Node name=""lroot"" gravity=""0 -9.81 0"" dt=""0.02"">; <Node name=""Liver"">; <EulerImplicitSolver name=""cg_odesolver"" rayleighStiffness=""0.1"" rayleighMass=""0.1"" />; <SparseLDLSolver saveMatrixToFile=""true""/>; <!-- <CGLinearSolver name=""linear solver"" iterations=""1000"" tolerance=""1e-09"" threshold=""1e-09"" /> -->; <MeshGmshLoader name=""meshLoader"" filename=""mesh/liver.msh"" />; <TetrahedronSetTopologyContainer name=""topo"" src=""@meshLoader"" />; <MechanicalObject name=""dofs"" src=""@meshLoader"" />; <TetrahedronSetGeometryAlgorithms template=""Vec3d"" name=""GeomAlgo"" />; <DiagonalMass name=""computed using mass density"" massDensity=""1"" />; <TetrahedralCorotationalFEMForceField template=""Vec3d"" name=""FEM"" method=""large"" poissonRatio=""0.3"" youngModulus=""3000"" computeGlobalMatrix=""0"" />; <FixedConstraint name=""FixedConstraint"" indices=""3 39 64"" />; <Node name=""BUG"" >; <MechanicalObject name=""MO"" position=""1 1 1 2 2 2 3 3 3"" />; <Sphere radius=""1"" />; </Node>; </Node>; </Node>; ```. I have a very bad comprehension of these things, but apparently, Sofa concatenates the points in the mechanical object ""/dofs"" and ""/BUG/MO"", even though there is no mapping to link both objects.; If you replace the SparseLDLSolver by the CGLinearSolver, it will work, but that's because CG doesn't invert the matrix.; I am reporting @IPeterlik's explanations here, but Igor can undoubtedly explain better than me what's actually happening here.. :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390925346:14,simpl,simple,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390925346,2,"['simpl', 'undo']","['simple', 'undoubtedly']"
Usability,"Hi, I suppose you are speaking about this one:; https://github.com/sofa-framework/sofa/blob/801cda5c4042438f49970fc8233d915f60e334d1/applications/projects/SofaGuiGlut/SimpleGUI.cpp#L232. I think you are right, this is a bug.; I just checked the [configure file of the ci](https://github.com/sofa-framework/sofa/blob/master/scripts/ci/configure.sh) it doesn't seems to have the option SOFAGUIGLUT to ON and the option is set to false by default, so I don't think it is compiled on the CI. @guparan do you confirm?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/989#issuecomment-482104942:167,Simpl,SimpleGUI,167,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/989#issuecomment-482104942,1,['Simpl'],['SimpleGUI']
Usability,"Hi, thanks four your feedback :-). I'm tackling 1. and it's almost done, however I lack a clean way of exposing the extra args to the sofa python plugin. any idea ?; 2. can't you just use `__file__` for that anyway ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323693853:21,feedback,feedback,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323693853,1,['feedback'],['feedback']
Usability,"Hi,; I don't actually want to use them, it's just that it was crashing! I created the mesh in Gmsh but exported it in vtk. Exporting it in the msh format does not lead to a crash indeed.; I can understand that my fix is not super clear! ; Essentially, in the code when it starts using the edges and something goes wrong, I move on to the option like if no edges had been given (For example in the function createEdgesInTetrahedronArray() with the if (hasEdges) ). I hope it clarifies a little bit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1008#issuecomment-487111948:230,clear,clear,230,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1008#issuecomment-487111948,1,['clear'],['clear']
Usability,"Hi,; thanks for your comments. 1) Indeed the local parameters should override the global parameter. If it is not the case there is a bug. 2) The friction coefficient cannot be negative, so set a positive value! Of course this could be checked. 3) Indeed the product of the two friction coefficients are used everywhere in SOFA (not only in Compliant as far as I know). In fact the friction coefficient should be defined for a pair of objects and not per object. Such an external table does not fit the actual Sofa design. But note that is possible to tweak the collision model's coefficients (even more easily when describing the scene in python).; `sqrt(coef1*coef2)` sounds a good suggestion to me, I guess it would produce a more intuitive behavior. Do you have a pointer talking about such behavior?. @maxime-tournier, your opinion?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/81#issuecomment-264505055:733,intuit,intuitive,733,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/81#issuecomment-264505055,1,['intuit'],['intuitive']
Usability,"However in the particular case your are mentionning ( ie compile time fixed size matrices ) nothing really strikes me as a ""bad behavior"" or undocumented behavior of some sort that needs to be amended in the current design. Then again in the standard which has `std::array` for compile time fixed size array, the `empty()` method always return false unless your array is degenerated ( ie it cannot contain anything at all ).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/277#issuecomment-303156473:141,undo,undocumented,141,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/277#issuecomment-303156473,1,['undo'],['undocumented']
Usability,"I Agree with Alex, the first two ones are ok, but the third one is not good. Why not keeping it simple and call it XXXLagrangianConstraint",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3903#issuecomment-1569866405:96,simpl,simple,96,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3903#issuecomment-1569866405,1,['simpl'],['simple']
Usability,"I agree with the style checking + auto-formatting ideas, it has been regularly discussed for a long time now. Here is what I propose for the astyle sheet (based on the existing one):; ```bash; # Brace Style; --style=allman. # Indentation; --indent-switches; --indent=spaces=4; --indent-labels; --indent-col1-comments; --max-instatement-indent=100. # Padding; --pad-oper; --pad-comma; --align-pointer=type; --align-reference=type. # Formatting; --break-one-line-headers; --add-braces; --convert-tabs; ```; Tell me if this is breaking some of our [coding guidelines](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md) but I think it is alright. My only doubt is about forcing or not braces around one line blocks (if, else, while, ...). I personally prefer when they are forced (particularly considering that SOFA devs are changing often and enjoy ""quick and dirty"" changes a lot) but the Google C++ Style Guide says the opposite [here](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md).; What do you guys think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353112234:553,guid,guidelines,553,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353112234,4,"['GUID', 'Guid', 'guid']","['GUIDELINES', 'Guide', 'guidelines']"
Usability,"I all,. I have improved the whole mecanism so now it is off by default and we can activate it selectively (progressively) ; per component during their registration in the factory. I also added a mecanism to handle in a smooth way the deprecation of aliases as well as a update the SceneCheckUsingAlias checker. . I don't see a lot of drawback for all this work, while I see a lot of benefits, so feedback welcome.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-981677782:396,feedback,feedback,396,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-981677782,1,['feedback'],['feedback']
Usability,I also think about creating a graph link instead of a simple copy:. ```cpp; if (!worldGravity_.isSet()); {; worldGravity_.setParent(&c); ///< Gravity IN THE WORLD COORDINATE SYSTEM.; }; ```. What do you think?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4876#issuecomment-2264776309:54,simpl,simple,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4876#issuecomment-2264776309,1,['simpl'],['simple']
Usability,"I am vsync-limited on my setup so cannot really test.; Lets simply revert this PR, I will see later",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2458#issuecomment-967174468:60,simpl,simply,60,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2458#issuecomment-967174468,1,['simpl'],['simply']
Usability,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:76,clear,clear,76,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243,1,['clear'],['clear']
Usability,"I confirm this version works in my scenes:; > Note that I prefer the range-based for loop. It would look like:; > ; > ```c++; > for(auto*& constraintsResolution : constraintsResolutions); > {; > delete constraintsResolution;; > constraintsResolution = nullptr;; > }; > ```; The alternative of clearing the vector after the loop also seems to work well:; ```C++; for (auto*& constraintsResolution : constraintsResolutions); {; delete constraintsResolution;; }; constraintsResolutions.clear();; ```; It is a pretty important bug to fix, half of my scenes are also crashing.; Thanks for finding the bug and the solution ideas",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2265#issuecomment-887544609:293,clear,clearing,293,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2265#issuecomment-887544609,2,['clear'],"['clear', 'clearing']"
Usability,"I consider the fetch mechanism within the Sofa subdirectories as a flawned design that is causing more troubles than it solved. And it is the n°1 cause of ""Can you help me, I updated SOFA from master it does not compile anymore "" at DEFROST (eg: https://github.com/sofa-framework/sofa/issues/4343). . This fetch mechanism is simplifing the initial ""fetch"" of the plugins but it complexify a lot every subsequent updates for each of them. . So to me, the fetches should be done outside the sofa directory structures (or not be used at all).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4409#issuecomment-1870264380:325,simpl,simplifing,325,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4409#issuecomment-1870264380,1,['simpl'],['simplifing']
Usability,"I currently have no clear and precise idea what all the function in PathResolver do. ; For the moment it is just a place where I cut & paste functions from other place in Sofa and that give me the feel they are quasi-duplicates (like findDest in Base or Link, findDataDest). No documentation probably means...no documenation in the initial function :); My idea then is to refactor that, remove the duplication, and have a single location for PathResolution. I will probably ; refactored the function including their signature so...well you can use the functions... but given it will be refactored soon I would not using that in a plugin not in sofa/master. ; I do hope PathResolution::FindBaseFromPath will not change, but all the other's will. . Warning: for the moment some of these function are taking linkpath (like ""@/this/is/a/link"") as inputs while other are taking path while other are taking a path (like ""/this/is/a/path""). On this aspect my thinking is that on PathResolution we should focus on path only API. the ""@"" should be just a parsing specific aspect to differentiate value from link. . @epernod I fully agree with your comment. My current thinking on this aspect is that the all the canCreate method should be removed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705135360:20,clear,clear,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705135360,1,['clear'],['clear']
Usability,"I didn't do anything right now. But I was thinking how we could change it. For the char length problem it's quite simple, but i think we need to refactor a lot of things in it. By example, one cool feature would be to be able to add arguments without changing main.cpp. Like adding a virtual function to BaseGUI and let subclasses having the ability to add options.; The main.cpp will still have basic arguments and will be able to list registered gui options. I don't like the (aGui only) comment ... :/. I can start working on it on my free time.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/512#issuecomment-343501522:114,simpl,simple,114,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/512#issuecomment-343501522,1,['simpl'],['simple']
Usability,"I do understand the idea.; But I guess it should be possible to got only one component, let's call it `WarningAndErrorInGTest`, that would be created directly in Sofa_test (so added to every tests).; This component would have two tristates `{not_expected,expected,nothing}`, one for warnings and one for errors.; By default both states would be set to `not_expected`, such as by default every sofa warnings/errors would raise a gtest error.; It would be enough for most of the tests, so the user has NOTHING to do when writing its tests (and it would work for any existing tests, incl. plugins'). For more complex tests like in your example, rather than creating; `ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;; `; you could write something like:; `this->warningAndErrorInGTest.warningState = expected;`. It is as explicit, not heavier, and even more flexible, as you can switch the state during the test (w/o having to delete objects and creating new ones). I am note sure to be clear enough, do you follow me?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630:1015,clear,clear,1015,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630,1,['clear'],['clear']
Usability,"I don't know if this still an adequate proposition, but I was thinking that it might be also a nice idea to change the name of the PSDE to something that is intuitively more graspable. Some suggestions could be (in order of preference): . PyScriptableComponent; PyFunctionBlock; PyComponent. I don't think that at this time we would be breaking to much code by changing the name.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-400231695:157,intuit,intuitively,157,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-400231695,1,['intuit'],['intuitively']
Usability,"I don't know... Some digging is needed. ; Eg the topology is ""mandatory"" because the checkAttributes test is calling ""init"" which emit an error if there is no topology. So do we add a topology or to we allow an MSG_EXPECT(Error) ? . The one about rigid is simpler as we simply this test is supposed to fail so it actually needs an MSG_EXPECT()",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/832#issuecomment-440233295:256,simpl,simpler,256,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/832#issuecomment-440233295,2,['simpl'],"['simpler', 'simply']"
Usability,"I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; ```c++; #include <MultiThreading/config.h>; ...; #include <MultiThreading/Tasks.h>; ```. it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. 🧐",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816111734:351,usab,usable,351,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816111734,1,['usab'],['usable']
Usability,"I finally got time to try a version with sptr as suggested by @epernod but because there is cycling reference counting there is memory leaks. So I reverted back to a raw pointer to old m_root and it is actually consistant with how are handled the other pointer to parents in DAGNode::l_parent (depsite it is not clear this are raw pointer because of the use of the Link's ""margic"" (the strong link vs weak link)) .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3059#issuecomment-1227602466:312,clear,clear,312,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3059#issuecomment-1227602466,1,['clear'],['clear']
Usability,I guess lowercasing on windows was to simplify path comparisons (using string comparison). Be careful not to break something else while removing it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/250#issuecomment-300176048:38,simpl,simplify,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/250#issuecomment-300176048,1,['simpl'],['simplify']
Usability,I guess this simple change is not breaking SOFA.; @matthieu-nesme ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/11#issuecomment-236527691:13,simpl,simple,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/11#issuecomment-236527691,1,['simpl'],['simple']
Usability,"I guparan,. This is a nice idea. By doing so you will have to remove components which may break backward compatibility with users existing scenes. Maybe you will find helpful the following template of code we are using in the soft-robots plugin to handle such backward compatibility issues. The idea basically consist in registering into the factory an empty component that simply print a warning the user saying that the component was there but is now deprecated and provides hints on how the user could fix his scene to handle the situation. . ``` cpp; class SOFA_SOFTROBOTS_API PositionEffectorConstraintGS : public sofa::component::DeprecatedComponent; {; public:; /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* context, BaseObjectDescription* arg); {; SOFA_UNUSED(obj) ;; SOFA_UNUSED(context) ;; SOFA_UNUSED(arg) ;. msg_error(this) << ""'PositionEffectorConstraintGS' is a SoftRobot v1.0 feature that has been replaced since V2.0 by the component 'PositionEffectorGS'. \n ""; ""To remove this error message, you either need to: \n ""; "" - replace PositionEffectorConstraintGS with PositionEffectorGS\n ""; "" - or use the SoftRobot plugin v1.0 \n "";; return false;; }; } ;. SOFA_DECL_CLASS(PositionEffectorConstraintGS). int PositionEffectorConstraintGSClass = RegisterObject(""PositionEffectorConstraintGS is now deprecated and should be replaced with PositionEffectorGS""); .add< PositionEffectorConstraintGS >(); ;. ========================= ; class DeprecatedComponent : public BaseObject; {; public:; SOFA_CLASS(DeprecatedComponent, BaseObject) ;. /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* /*context*/, BaseObjectDescription* /*arg*/); {; obj->serr << ""[Deprecated component]: "" << obj->getName() ;; return false;; }; private:; } ;. ```. If you have other way to handle this I'm interested to hear about them. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098:374,simpl,simply,374,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098,1,['simpl'],['simply']
Usability,"I have identified the actual issue in ```$sofa_dir/Sofa/GUI/Qt/libQGLViewer/QGLViewer/CMakeLists.txt```:; - line 124 has a few mentions of ```/${PROJECT_NAME}``` too much, removing these at least reduces the header install path to ```$sofa_dir/build/install/include/extlibs/QGLViewer/QGLViewer/*.h```; - for some reason the ```MOC_HEADER_FILES``` (line 21 ff.) are not considered for copying by your ```sofa_create_package_with_targets``` macro. For testing I have simply copied the headers listed in ```MOC_HEADER_FILES``` to the ""normal"" ```HEADER_FILES```. This does not affect the build and finally copies the previously missing MOC headers to the install include directory. I can make a pull request for this. Or I can wait a bit if someone has an idea on how to properly copy/install the MOC_HEADERS without the redundant mentioning in both header lists.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4196#issuecomment-1734430674:465,simpl,simply,465,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4196#issuecomment-1734430674,1,['simpl'],['simply']
Usability,"I have implemented a component ""MakeAlias"" to explicitely specify the Alias of a component (not a data) at the beginning of its scene. It is commited in https://github.com/sofa-framework/sofa/commit/92753c42b7eaa076ace4b3840aa4cac6c18172a7. Example of use: . ``` xml; <xml/>; <Node name=""Root"">; <MakeAlias targetcomponent=""TPointModel"" alias=""Point"">; ...; <Point> ; <Point> ; <Point> ; ...; </Node>; ```. With this approach people that want alias to simplify their scene...have them...but:; - there is not alias by default; - alias are explict so anyone reading the scene now that the object ""TPointModel"" will be named ""Point"". I'm looking on how to implement something equivalent for Data. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/35#issuecomment-258292916:452,simpl,simplify,452,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-258292916,1,['simpl'],['simplify']
Usability,"I have not the competence nore time to validate it on the mechanical aspect so I suggest to let 1 week to anyone to give feedback, and after one week we merge it :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/147#issuecomment-275100765:121,feedback,feedback,121,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/147#issuecomment-275100765,1,['feedback'],['feedback']
Usability,I integrated most of your changes @fredroy but changes in Data field of OmniDriver and others is really bigger work. I would like to keep the PR simple and do this in another PR later,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1019#issuecomment-487891721:145,simpl,simple,145,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1019#issuecomment-487891721,1,['simpl'],['simple']
Usability,I just added a commit to clean the custom `EXPECT_ATLEASE_ONE_NONFATAL_FAILURE` macro. Tell me if I'm wrong but it would better be a macro expecting MORE than 1 failure to clearly distinct from `EXPECT_NONFATAL_FAILURE` (GTest one).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370488262:172,clear,clearly,172,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370488262,1,['clear'],['clearly']
Usability,"I just cherry-picked Anatoscope's changes related to SofaPython (excl. PythonScriptController that comes in #283).; It seems huge, but it is simply:; - mainly cleaning-up,; - adding bindings,; - refactoring python-tests. More cleanings are coming, and waiting for #283 and #286.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/304#issuecomment-308411143:141,simpl,simply,141,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-308411143,1,['simpl'],['simply']
Usability,"I just did a quick test in a simple scene (horizontal beam with downward force at one end), and the Newton static solver does *not* converge with the TetrahedronFEMForceField in single precision, using a CGSolver in double precision. The problem may be with the addDforce function used by CG, but it would need some more investigating. So basically, we can't simply switch to single precision without checking everything that could be sensitive to numerical errors (but I agree that it would be better if we could use mostly single precision).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/495#issuecomment-340728191:29,simpl,simple,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-340728191,2,['simpl'],"['simple', 'simply']"
Usability,"I just gave it a look and it seems easy to move up the whole code at CollisionModel level... so please do so, code will be cleaner, shorter and will offer a more consistent interface to users. . In addition I see no problem in breaking code that does not follows Sofa guidelines. So renaming activated() into isActive() and other stuff like that would be welcome to :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1259#issuecomment-593969851:268,guid,guidelines,268,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1259#issuecomment-593969851,1,['guid'],['guidelines']
Usability,I just removed all plugin-concerned commits. They are still available on guparan/sofa:clean_licenses_pr_139.; This PR should now be simple to review :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/139#issuecomment-278993500:132,simpl,simple,132,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-278993500,1,['simpl'],['simple']
Usability,I just replaced my commit by a simple typo fix.; Thank you for the clear explanations @damienmarchal,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/604#issuecomment-371135821:31,simpl,simple,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-371135821,2,"['clear', 'simpl']","['clear', 'simple']"
Usability,I just submitted a new PR #322 on top of the SceneChecker to implement gentle mecanism to guide users through changes in Sofa. . My underlying target is to favor a bit more the PR that improves things but changes the behavior as long as our users are warned and guided to fix their scenes.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/318#issuecomment-313111808:90,guid,guide,90,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/318#issuecomment-313111808,2,['guid'],"['guide', 'guided']"
Usability,"I kinda see what you went through. The argument parser isn't that intuitive TBO. I recently had to do a similar task, so if you still want the ""infinite"" flag, you can check this [line](https://github.com/tgaugry/sofa/commit/326f4f4c8fea61783e40225cb4abac648e569922#diff-5904f9a1380b53f6de2fdc644b6b1a48R112) and the `parseSkipOption` function in the same file. ; Maybe this would solve your problem ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/610#issuecomment-373443938:66,intuit,intuitive,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/610#issuecomment-373443938,1,['intuit'],['intuitive']
Usability,"I like the simplicity of your proposal, however the macro trick (does it work with clang ?) could be avoided if we decide some different names for the macro, like . msg_info () << ""Implicit 'this'""; // keep that one, the most common . msg_info_component ( this ) << ""Explicit""; // or s.t. else shorter ; msg_info_name ( "" Something else "" ) << ""Hep""; // I think that one is mostly used in python, should it be exposed in c++ as a macro ? . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Jeudi 16 Février 2017 13:54:11; > Objet: Re: [sofa-framework/sofa] Cleaning the way we handle message in Sofa.; > (#179). > About a possible implementation for the following syntax:; > msg_info () << ""Implicit 'this'""; msg_info ( this ) << ""Explicit""; msg_info (; > "" Something else "" ) << ""Hep"";. > I finally have one that seems to work on gcc and on visual studio.; > You can try it one-line at: http://www.cpp.sh/3xvfk. > I have a question to you @matthieu-nesme , @thomas-lemaire , @nurbal . I; > really like the implicit version but at the same time I fear using complex; > MACRO trick. What do you think ?. > DM. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281041722:11,simpl,simplicity,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281041722,1,['simpl'],['simplicity']
Usability,I made a quick POC using constructor delegation (c++x11) in; https://github.com/SofaDefrost/sofa/tree/constructor_delegation. (I messed up with the branch so only have a look at how I factorize the constructors in; RegularGridTopology.cpp & GridTopology.cpp). . To me this looks quite an improvement over the existing approach but maybe I made mistake or there is scenario in which we will have trouble if we generalize this...so any feedback from c++ you (guru or not) will be appreciated.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/274#issuecomment-302061194:434,feedback,feedback,434,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/274#issuecomment-302061194,1,['feedback'],['feedback']
Usability,"I made the code more concise, more efficient and clearer to me. It also removes the need of the variable which was initially shadowed. Let me know if you agree/disagree.; I also merged master.; I suggest also to move the methods definitions in the cpp file, but I did not want to be out of the scope of this PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2987#issuecomment-1152101840:49,clear,clearer,49,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2987#issuecomment-1152101840,1,['clear'],['clearer']
Usability,"I most definitely agree with you, this is very annoying. In fact, I have a custom build of the main SOFA executable just for this. As of now, there is no mechanism I know of that will forward `sys.argv` correctly. The simplest and by far the most natural solution would be to forward anything happening after `--` to `sys.argv`. . Unless there is a compelling reason not to do so (@damienmarchal ?), I'll give it a quick shot soon.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323679624:218,simpl,simplest,218,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323679624,1,['simpl'],['simplest']
Usability,"I propose to simply remove the `projectForce` Data from this PR, as this debug feature is not essential, and you have it in your own fork.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/218#issuecomment-292125250:13,simpl,simply,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-292125250,1,['simpl'],['simply']
Usability,I quickly applied a simple formatter online and finished manually. This file was a mess.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1335#issuecomment-614500540:20,simpl,simple,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1335#issuecomment-614500540,1,['simpl'],['simple']
Usability,I see @fredroy you requested changes. I think it is clear now?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1180100688:52,clear,clear,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1180100688,1,['clear'],['clear']
Usability,"I see the difference of point of view between you. Guillaume wants the dashboard to show the absolute current state of Sofa, with all failing tests marking the commits as ""broken/need to be fixed""; Damien sees more the average Sofa contributor point of view: ""did I break something?""/""is Sofa better or worse with my last commit"". **_Would it be acceptable**_ to add a simple checkbox on the dashboard, to filter the *_OpenIssue tests ? This way, open issues don't polute the workflow of people not concerned/competent with them. ; By default this option would be disabled. The same for pull request, new failing tests (marked as _OpenIssue) should not be marked as failures during the pull request, since they do not introduce new malfunctions but only reveal them, which is (in my opinion) a step toward the good direction, ie kind of an improvement ?. Once fixed, *_OpenIssue tests should be renamed and kept in the tests base as normal regression tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585:369,simpl,simple,369,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585,1,['simpl'],['simple']
Usability,"I see what you want to do and of course it would be much more faster and simpler to add a new feature.; But I'm very relunctant to add an extra flag if it is redundant with others. . I would prefer to see a solution based on refactoring isRequired(), possibly with an hasDefaultValue() so we come up with a consistant and clear behavior. . EDIT:; My current thinking is thus:; - set isRequired() to true by default; - add an hasDefaultValue() (possibly implemented by using std::optional<> around Data::defaultvalue)); - change the code in BaseObject::init(); ```cpp; for(auto data: this->m_vecData); {; if (data->isRequired() && !data->isSet()); {; msg_error() << ""Required data \"""" << data->getName() << ""\"" has not been set. (Current value is "" << data->getValueString() << "")"" ;; }; }; ```; So it only warn if required and there is no default value. ; Update the GUI's so it can handle the isRequired + hasDefaultValue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762259707:73,simpl,simpler,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762259707,2,"['clear', 'simpl']","['clear', 'simpler']"
Usability,"I see, thanks to have a look at it.; Au secours encore un reinit! ;). Could we find a way to clear/empty the python environment rather than deleting and creating a new one?. I guess the numpy problem comes from PythonEnvironment.cpp:70 ^^",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/193#issuecomment-284732397:93,clear,clear,93,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/193#issuecomment-284732397,1,['clear'],['clear']
Usability,"I see. :) What do you guys think about a CMake option for explicitly allowing to include non-LGPL parts in the SOFA build (default ON to stay compatible, and maybe even tag it as advanced option)? The idea is that if this switch is off, all the non-LGPL parts (or non-compatible parts) like the applications and a few plugins don't even show up for configuration anymore (technically the add_directory() call into these directories is never made in that case). Currently I have to bundle our own SOFA tarball for the purpose of getting rid of the non-LGPL parts and patch the build system a little bit to, in a nutshell, accept that parts are missing. I can continue to do so, but I'm also interested in contributing something like that. I imagine to follow the license rule mentioned in the top-level readme file: Exclude a few directories in principle and dynamically lookup the plugins if they are LGPL or not. This way, plugin developers wouldn't need to add a list entry somewhere depending on the license. They would just need to follow a convention in order to make the license determinable by the script. Could be as simple as a LICENSE.txt file or even the implementation of the getModuleLicense() function, which should be easy to parse (and is only missing in a single plugin at the moment). Opinions?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943:1125,simpl,simple,1125,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943,1,['simpl'],['simple']
Usability,"I still do not get the interest of storing `m_gridDim`. What is the limitation of a simple function? So you never have to change the value of this variable to keep it consistent. If it was in a data you want to plug in a Data/Engine graph, it would indeed be necessary to store it, but it is not the case here.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/270#issuecomment-305409259:84,simpl,simple,84,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-305409259,1,['simpl'],['simple']
Usability,"I think the problem you are raising here is a more general issue in Sofa. ""Engine components"" should be used seamlessly in Sofa, without the need for a distinction. After all, as you said, they are nothing but ""components"" in the sense that they are put in your python scene just like the others, with a createObject, and are visible in the scene graph, just like the others.; Sadly, DataEngines in Sofa needs to be manipulated with care, because their behavior changes drastically from their BaseObject counterpart: They do not respect the classical execution order of the scene graph, they can be called multiple times per animation steps (or not at all), etc. If their use in Sofa wasn't so different from the rest of the Sofa components, I would also vote for a simpler name, such as PyComponent vs PyScript for the current PythonScriptController. Newcomers in Sofa tend to mix up DataEngines with standard components, ending up with behaviors that they do not understand, as their code in not executed when they expect it to be for instance.; But I guess the subject is drifting a little bit towards the Data-update topic on gitter ;); Maybe for now it's not so important to rename anything, and we should maybe wait to see how things evolve with the animation loop and usages of DDGNodes in Sofa...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406624802:766,simpl,simpler,766,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406624802,1,['simpl'],['simpler']
Usability,"I think this is because you need to call the bwdInit after the init and addContact calls when this parameter is used (by checking quickly the code). It is harmless when the template is Vec3D but it prepares the computation for when you want to keep the orientation -> again this is really a bad API and might require some refactoring. . If you still have the diff locally, could you try this ? I guess the usability of your feature would really gain from this if it was working. But if this doesn't make any change, I am ok with the state of the PR. . Tell me how it goes !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4801#issuecomment-2235862086:406,usab,usability,406,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4801#issuecomment-2235862086,1,['usab'],['usability']
Usability,I thomas...I think something goes wrong in your PR as there is more than thousand file changed :) . I support the idea of removing one of the way to handle vector serialization in sofa. When your PR will be readable I will provide you with more feedback :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/328#issuecomment-314191421:245,feedback,feedback,245,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/328#issuecomment-314191421,1,['feedback'],['feedback']
Usability,"I totally agree with the idea to limit dependencies, as a general state of mind. (not only in this particular case); +1 to backport the commits that cut boost dependency, though I have no idea how simply doable it is... :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313043473:197,simpl,simply,197,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313043473,1,['simpl'],['simply']
Usability,"I tried it with a tetrahedron beam with a TetrahedronFEMForcefield (not parallel) and I don't have a speed up, it is quite the contrary : . ```; Parallel : 14.7546 FPS. 2 	 0.04	 1 	 61.29	 64.18	 62.09	 0.56	 62.09	 99.59	..solve; 3 	 0.04	 1 	 61.29	 64.18	 62.09	 0.56	 62.09	 99.59	...Mechanical; 4 	 0.06	 1 	 1.78	 2.54	 1.93	 0.14	 1.93	 3.09	....ComputeForce; 4 	 1.99	 1 	 1.01	 1.63	 1.20	 0.11	 1.20	 1.93	....ComputeRHTerm; 4 	 3.20	 1 	 50.63	 52.92	 51.24	 0.43	 51.24	 82.18	....MBKBuild; 5 	 3.20	 1 	 50.63	 52.92	 51.24	 0.43	 51.24	 82.18	.....CG-setSystemMBKMatrix; 6 	 3.20	 1 	 0.02	 0.02	 0.02	 0 	 0.02	 0.03	......getContributors; 6 	 3.22	 1 	 0.01	 0.01	 0.01	 0 	 0.01	 0.02	......buildMappingGraph; 6 	 3.23	 1 	 0.25	 0.82	 0.31	 0.08	 0.31	 0.50	......InitializeSystem; 7 	 3.23	 1 	 0.15	 0.40	 0.19	 0.04	 0.19	 0.30	.......resizeSystem; 7 	 3.41	 1 	 0.07	 0.40	 0.11	 0.05	 0.11	 0.18	.......clearSystem; 7 	 3.53	 1 	 0.01	 0.02	 0.01	 0 	 0.01	 0.02	.......initializeLocalMatrices; 6 	 3.54	 1 	 50.34	 52.60	 50.89	 0.41	 50.89	 81.62	......AssembleSystem; 7 	 3.54	 1 	 50.31	 52.58	 50.87	 0.41	 50.87	 81.58	.......buildMatrices; 8 	 3.54	 1 	 50.03	 52.24	 50.56	 0.40	 50.56	 81.10	........buildStiffness; 8 	 54.11	 1 	 0.28	 0.45	 0.30	 0.03	 0.30	 0.48	........buildMass; 8 	 54.40	 1 	 0 	 0 	 0 	 0 	 0 	 0 	........buildDamping; 8 	 54.40	 1 	 0 	 0 	 0 	 0 	 0 	 0 	........buildGeometricStiffness; 7 	 54.41	 1 	 0 	 0 	 0 	 0 	 0 	 0 	.......projectMappedMatrices; 7 	 54.41	 1 	 0.02	 0.03	 0.02	 0 	 0.02	 0.03	.......applyProjectiveConstraint; 4 	 54.43	 1 	 7.47	 8.01	 7.68	 0.11	 7.68	 12.32	....MBKSolve; 5 	 54.57	 1 	 7.31	 7.85	 7.52	 0.11	 7.52	 12.06	.....CG-Solve; 4 	 62.12	 1 	 0.01	 0.02	 0.01	 0 	 0.01	 0.02	....UpdateVAndX. --- . Normal : 27.3678 FPS. 2 	 0.04	 1 	 37.97	 39.96	 38.38	 0.34	 38.38	 99.38	..solve; 3 	 0.04	 1 	 37.96	 39.95	 38.38	 0.34	 38.38	 99.37	...Mechanical; 4 	 0.06	 1 	 1.70	 2.24	 1.88	 0.12	 1.88	 4.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717065958:927,clear,clearSystem,927,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717065958,1,['clear'],['clearSystem']
Usability,"I understand completely. Here, we are not talking about bringing back `getMeshTopology`. We are saying that both `getMeshTopologyLink` and `getMeshTopology` are the same. Following #744, both should be removed. Here we are simply talking about removing the duplicated one, even if at some point it should be also be removed and replaced by either a link or a new **getTopologies()** (plural) method that makes it clear we can have more than one topology in the context.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605887979:223,simpl,simply,223,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605887979,2,"['clear', 'simpl']","['clear', 'simply']"
Usability,"I vote for no warning message, and no global switch! **Keep it light and simple.**; The only case where you really expect to have the string `""[1,2,3]""` is for Data<SVector> that would report a problem for `""1,2,3""`, and the fix is simple (simply add some `""""`). But frankly who was benefiting from that?!. Indeed we do not want warning messages when converting scalars, but we can easily add a test for specific types (float, bool, int...). At least everything would be clearly exposed in the code. Also, I propose that if you pass a Node, a BaseObject or a Data, it uses their getLinkPath (defined in the bindings, i.e. `""@/path/from/root/node""`, `""@/path/from/root/node/myobject""`, `""@/path/from/root/node/myobject.mydata""` ). It would be so useful when creating Links that are required during creation (like the mapping's inputs).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656:73,simpl,simple,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656,4,"['clear', 'simpl']","['clearly', 'simple', 'simply']"
Usability,I would be glad to have feedback on this one...especially the switch from sofa::simulation::Node::Sptr to sofa::core::sptr<>,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1509#issuecomment-703541126:24,feedback,feedback,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1509#issuecomment-703541126,1,['feedback'],['feedback']
Usability,"I would like to schedule a hangout in the coming days to synchronize everyone's job on CI. I have the feeling that everyone is not up-to-date with the current CI status, and I came to the point I would not touch anything until I understand clearly what has been done recently. ; This includes jenkins updates, use of tests ci scripts, etc.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/186#issuecomment-282669576:240,clear,clearly,240,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/186#issuecomment-282669576,1,['clear'],['clearly']
Usability,"I would rather rename every ""scenes"" dir in ""examples"" to follow plugin guidelines.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/299#issuecomment-308367531:72,guid,guidelines,72,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/299#issuecomment-308367531,1,['guid'],['guidelines']
Usability,"I'm actually a bit uncertain regarding your proposal @damienmarchal, I thought about it before this simple PR; My conclusion was the following: the more colors, the more confusing it can be for the users. On our hand, we want users to actually fix their scene for in both cases: deprecation and warnings. Having a single color for this purpose makes sense to me: simpler to read and simpler to understand for the user -> there is something to fix in the scene !. Maybe there is cases of warnings not requiring a scene fix which I am not thinking about..",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3914#issuecomment-1575027962:100,simpl,simple,100,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3914#issuecomment-1575027962,3,['simpl'],"['simple', 'simpler']"
Usability,"I'm always in favor of improving user experience and renaming coder's name by something with a mechanical meaning fit in this :) . For the PR, i suggest to first rename the class and filename, then adding an alias ""RestShapeSpringForceField"". So users are warned when using RestShapeSFF to use SpringConstraint.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3903#issuecomment-1568253488:33,user experience,user experience,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3903#issuecomment-1568253488,1,['user experience'],['user experience']
Usability,"I'm looking for the ""-"" in the read to detect the intervals syntax:; 0-5 or 0-10-2 as well as --5-5 or 10--10. This intervals syntax using '-' was not of my own and I'm actually quite surprised and happy it was possible to fix the crash & endless loop that were in the code while preserving the syntax and backward compatibility. . Now all this discussion about performance rise my interest as I wonder if all this discussion have a measurable impact on performances. As usual I cannot prevent myself to make a small benchmark. ; The benchmark is implemented in the test class so that we will be able to detect performance regression in the future. . First there is a +200ms variation between the same run so I average several runs which gaves these numbers: ; strtoll alone tooks 1645 ms to ""read"" 1 000 000 time a size 10 array. ; strtoll+early check of '-' tooks 1654 ms to ""read"" 1 000 000 times the same array. ; ; strtoll alone tooks 7758 ms to ""read"" 100 000 time a size 1000 array. ; strtoll+early check of '-' tooks 7719 ms to ""read"" 100 000 times the same array. . strtoll alone tooks 8464 ms to ""read"" 1000 time a size 100 000 array. ; strtoll+early check of '-' tooks 8403 ms to ""read"" 10000 times the same array. . So we are discussing about un-measurable effect and I switched to your version because it contains less lines of code and looks simpler which is a very good property. . Is there still question about this PR? . EDIT: and the dashboard is now green on linux. @bcarrez please finish #267 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828:1356,simpl,simpler,1356,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828,1,['simpl'],['simpler']
Usability,"I'm waiting someone having interest on that topic so we can modernize the prefab's using the added feature of sp3 and experience gained since sofapython2. . Short answers to your questions: ; - should they be located in the SofaPython3 plugin?; It is unclear to me about what you are talking about, prefab are already in SofaPython3. Are you in fact talking about the prefab that are in stlib ? ; If this is the case, it make sense to have prefab in SofaPython3 to demonstrate a ""standard"" way of doing a prefab through ""examples"", there could also have a standard prefab library, but I see no problem in having that in stlib or any other third party plugin. That's said, I don't consider the prefab in stlib mature enough for such move, first, because they are still implemented as they were back to python2 time, and up to now, not a lot of people have expressed interest in changing that to move forward; . - should we create many level of abstractions/prefabs?; From the experience in stlib there is always a trade-off between abstraction and usability and the overhead of modularization. But yes, there is always an interest in being able to build prefab from other prefab to make complex systems. . - definition of current prefabs, e.g. ElasticObject using a UniformMass?; Prefab just means you have an ""all-in-one"" object. There is no more constraint except from that. So it the choice of the one that make a prefab to decide prefabricating ""what"". That's said it is highly desirable to have set of prefabs that shares common structures and idioms so they are interoperable in the same scene. . Additional point:; - the prefabs implementation in SofaPython3 is only partially working and some fix are required; - there is a far too much limited support for prefab in our user interface, if we are going for generalize their use then additional support should be added.(eg: right-click navigating itno prefab should be implemented, dedicated icons in the scene graph, docbrowser linking the the ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279:1132,usab,usability,1132,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279,1,['usab'],['usability']
Usability,I've also mark const the source arguments from both `baseVector2MultiVector` and `multiVectorPeqBaseVector` so that it is clear that the source will never be changed by those two functions.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1248#issuecomment-579771707:122,clear,clear,122,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1248#issuecomment-579771707,1,['clear'],['clear']
Usability,"I've just cleaned the repo, removed unused mesh files.; It's 1.7MB of stl files now. Is it still too much ? I could also simplify the meshes but, yeah... it won't be as ""pretty"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2804#issuecomment-1079011710:121,simpl,simplify,121,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2804#issuecomment-1079011710,1,['simpl'],['simplify']
Usability,I've just fixed the broken history for the PR so we can see the simple two commits which concern this PR. Hope we can discuss it next week.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1788#issuecomment-776623903:64,simpl,simple,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1788#issuecomment-776623903,1,['simpl'],['simple']
Usability,"If the Data was simply renamed (but is having the same role as previously), it is not a big deal to have a alias. If the Data is no longer used, backward compatibility will have to be done in the 'parse' function (to fill others Data for instance), in that case, it is easy to add a deprecated message. Note that the initial Data should not exist anymore.; As an example, you can look at RigidMapping, where the Data 'repartition' was removed, but the 'parse' function still ensures backward compatibility and log a deprecated msg.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255372823:16,simpl,simply,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255372823,1,['simpl'],['simply']
Usability,"In term of easy task for newcommers, ; finding excessive calls to getValue() is clearly one of them (same for begin/end vs accessor).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3503#issuecomment-1325242993:80,clear,clearly,80,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3503#issuecomment-1325242993,1,['clear'],['clearly']
Usability,In the case of the Light (and actually this is true to most of the sofa component) I see several very simple tests to add to validate the inputes. But you are totally right this cannot be done automatically (unless with a kind of ; code-path/coverage analysis) so the developper have to write at least the easy one.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/73#issuecomment-264160230:102,simpl,simple,102,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/73#issuecomment-264160230,1,['simpl'],['simple']
Usability,"Indeed @alxbilger , not compiled for 6 years. I would simply remove it.; You fixes are always welcome @maddin200 :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1967#issuecomment-811885973:54,simpl,simply,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1967#issuecomment-811885973,1,['simpl'],['simply']
Usability,"Indeed, it can be cumbersome to change simple values in the data inspector. Good point the video ;) but YouTube does not show it, is it private ?; When you change the data value, the data is updated as soon as the mouse moves left&right, correct ? I am no expert in UX, but it this the best way to do it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/750#issuecomment-413484007:39,simpl,simple,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/750#issuecomment-413484007,2,"['UX', 'simpl']","['UX', 'simple']"
Usability,"Indeed, no example of the component was found, so I added a simple one: a beam under gravity",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3508#issuecomment-1331766967:60,simpl,simple,60,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3508#issuecomment-1331766967,1,['simpl'],['simple']
Usability,"Indeed, the naming is therefore pretty inappropriate, we will follow your guidelines ;); Thank you very much @matthieu-nesme . Isn't there a way of refactoring (inheritance) these components ? it would make things easier to understand, no?; Just curious, in which case the SpringForceField can be really useful ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/248#issuecomment-295711346:74,guid,guidelines,74,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/248#issuecomment-295711346,1,['guid'],['guidelines']
Usability,"Is there any scene to reproduce this error? ; Either already in the plugin SofaDistanceGrid, or if you could submit a simple scene to illustrate the problem ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1218#issuecomment-777528417:118,simpl,simple,118,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1218#issuecomment-777528417,1,['simpl'],['simple']
Usability,Is this issue to guide devs @fredroy ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2402#issuecomment-1569836914:17,guid,guide,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2402#issuecomment-1569836914,1,['guid'],['guide']
Usability,"It is a good idea to finally remove the flag sofa_have_glew (it would be cool to remove it entirely in Sofa by the way), and I don't see anything wrong (code guidelines like prefixes etc, is not the point of this PR).; I dont know if we should flag this PR as ¨breaking¨ as some data have been removed (useVBO and isToPrint) ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1069#issuecomment-499392089:158,guid,guidelines,158,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1069#issuecomment-499392089,1,['guid'],['guidelines']
Usability,It would be nice to have some feedback from @EtienneMenager @fjourdes @alxbilger @courtecuisse,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3888#issuecomment-1569740293:30,feedback,feedback,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3888#issuecomment-1569740293,1,['feedback'],['feedback']
Usability,"It's not perfect. The progress bar interacts with console messages (`msg_info`, `std::cout` etc), but it behaves well when the message is longer than the progress bar. Otherwise, both are mixed on a single line. It still does not behave correctly after a ctrl+c in a infinite loop (`runSofa -n infinite`). I also made some threading experiment in the case of infinite loop but no success. I wanted to add a command line option to hide the progress bar if needed. I wanted to add it only for BatchGUI, but it seems that parsing crashes for unkown arguments (the loading of the gui is after the parse). Maybe the help of @fredroy would be needed here (if we decide to go on).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4168#issuecomment-1721325089:22,progress bar,progress bar,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4168#issuecomment-1721325089,3,['progress bar'],['progress bar']
Usability,"It's simply an average found between the two points (in position/velocity/acc); What do you mean by ""aforementioned dynamic constraint fix"" ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/940#issuecomment-467077243:5,simpl,simply,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/940#issuecomment-467077243,1,['simpl'],['simply']
Usability,"Just my 2 cents (after the war) about this ```__str__``` stuff... . I don't know how to explain it clearly, but using the built-in ```str``` function to serialize objects in a createObject-specific format sounds weird to me, even if it works in our context. This is the first time we have to convert Sofa objects to string, it does not mean that converting sofa objects to string will only be needed for this specific purpose in the future. ; I am confident that we can find examples of bad variables usages in the code of Sofa : ""this var exists and seems not used by anyone, so I will use it to store my context-specific information without recompiling everything"". The wrong tool used for the good result, I don't know if you get me. . In a naive approach I would expect as a end-user, that issuing a ```print(mySofaStuff)``` from the sofa GUI built-in python console would return a human-readable string, a summary with the object class name, perhaps the object name, plus some useful infos. Getting either a path or a suite of numbers would be kinda disapointing in this context...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308102349:99,clear,clearly,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308102349,1,['clear'],['clearly']
Usability,Let's say it is a target (one would say a dream) to achieve more than a guide 😅,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2402#issuecomment-1571110655:72,guid,guide,72,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2402#issuecomment-1571110655,1,['guid'],['guide']
Usability,Let's see if we can make it cleaner and simpler!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/218#issuecomment-453789725:40,simpl,simpler,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-453789725,1,['simpl'],['simpler']
Usability,Let's wait the 7 days for potential remark / feedback,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/514#issuecomment-344212915:45,feedback,feedback,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/514#issuecomment-344212915,1,['feedback'],['feedback']
Usability,"Looks like this particular case falls under the Euler angles singularities. The initial quaternion `q0` converted to Roll-Pitch-Yaw Euler angles has a pitch of `pi / 2`, which corresponds to a singularity case, i.e. there is no global and smooth solutions to the inverse problem of converting the rotation to Euler angles. In this particular case, one DOF is lost (I found the explanations of this quite intuitive and clear here: http://lavalle.pl/vr/node83.html ).; When we can afford it, a good way would be to only allow global parameterizations of SO(3) and simply not use Euler angles, but I guess we have reasons to have them in SOFA and have to deal with them.; I would not go to change anything in the `createQuaterFromEuler` or `toEulerVector` conversions functions, as to me they are valid as it and it is left to the user of Euler angles to know that they have to be used as their are, locally, as it is a local parameterization, i.e. not close to their singularities.; I guess this is what happened also in the random rotations failing tests.; What do you think about simply fixing our tests by excluding cases where quaternion `q0` is leading to a Euler angles singularity (here checking that pitch is not `pi / 2`), prior to converting them back to queternion `q1` ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4122#issuecomment-1698867376:404,intuit,intuitive,404,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4122#issuecomment-1698867376,4,"['clear', 'intuit', 'simpl']","['clear', 'intuitive', 'simply']"
Usability,Looks ok to me. Any one for a quick feedback on reviewing this fast-merge PR ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1761#issuecomment-770078796:36,feedback,feedback,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1761#issuecomment-770078796,1,['feedback'],['feedback']
Usability,Lots of weird stuff happening with those *_API (dllimport/dllexport) thingies 🥴; TIL I learnt that you cannot put it after the type if it is a reference (I suppose the `&` bothers the compilation); Seems better to put it always before the type.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2259#issuecomment-885610982:87,learn,learnt,87,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2259#issuecomment-885610982,1,['learn'],['learnt']
Usability,Many thanks for all your PR @untereiner . This looks simple and I trust you it is the thing to do. So let's wait our 7 days quarantine if someone says a 'no-go' and merge it otherwise.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/310#issuecomment-312254210:53,simpl,simple,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/310#issuecomment-312254210,1,['simpl'],['simple']
Usability,"Matt',. Yes the breakage would be minimal. . It would be possible to mix instance-based and class-based Data management as long as the consistency in maintained through the data API in `Base`. Static data would incur no extra penalty at construction time, but later add/remove would remain possible. . I am unsure this is desirable, however: a full-blown mix of class-based and instance-based management would require more efforts, mainly to chain class-based datas up the class hierarchy, and I am not sure it is worth it. It could be the case though, but this requires _significant_ changes and testing, like converting all the existing `initData` to the new system for example. The use case I had in mind was more like the 5-10% cases where it really matters to be fast, and we don't really care whether data's are setup properly, and we sure do _not_ want to pay for it. . If data inspection turns out to be required (e.g. for debug), then we can come up with an ad-hoc solution when/if it's needed, but at this point it is not clear whether this will be of sufficient interest. But maybe more people could step in and provide feedback?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255404557:1032,clear,clear,1032,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255404557,2,"['clear', 'feedback']","['clear', 'feedback']"
Usability,Maxime (@maxime-tournier); I would appreciate to have your feedback on this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-343516044:59,feedback,feedback,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-343516044,1,['feedback'],['feedback']
Usability,Maybe we should add in the object factory a way to detect the use of Vec3f and warn user that it needs to update its scene to use Vec3 instead. So we can start simplifying the code base ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/495#issuecomment-440306342:160,simpl,simplifying,160,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-440306342,1,['simpl'],['simplifying']
Usability,"More seriously, defaultCompliance can be considered in a simplified way as the inverse of the nodal mass.; This is close to 184 in this simulation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4187#issuecomment-1730239279:57,simpl,simplified,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4187#issuecomment-1730239279,1,['simpl'],['simplified']
Usability,"My 2 cents... . Taking ""16 days to merge 20 lines of code is a waste of time"" is true...and this is the consequence that no-one ever took time to handle that properly. As usual no one's concerns tend to become everyone's waste of time. . My suggestion to fix that is:; - 0) make a style sheet that matches the Sofa guideline (or change the guideline to match an automated formatter style sheet which is much easier :)); - 1) apply an automated style sheet to format the whole code base. ; - 2) when making PR, everyone should apply the provided style sheet.; - 3) when merging a PR, the automated stylesheet should be applied again. . But ho wait ! ; Some told me here is already a stylesheet for astyle (to use in qtcreator) since years in the tools/astyle ; directory. ; This may be a good starting point for (0) and (1). . What about having 0 et 1 done for 17.16 release ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353068497:315,guid,guideline,315,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353068497,2,['guid'],['guideline']
Usability,"My 2 cents...; Eulalie is right, there is no 'formal' ambiguity as by just following the vector<> symbol the code editor jump to the 'using sofa::helper'. ; Guillaume is right in the fact that allowing using std::vector and using sofa::helper::vector in our code base it will generate a lot of ambiguity. . May I suggest two strategy: ; 1) 'using sofa::*' as much as you want unless it hides somethings from the stl. ; 2) 'using sofa::*' even for sofa::helper::vector etc. After all we are in sofa so it makes sense to get rid of as much as of the sofa::prefix for code simplicity. To avoid ambiguities, forbid the employement of using on external type eg no 'using std::vector' or 'using std::string'. . Strategy 2 would produce a very consistent and readable code making it obvious we we are using external object or lib;. EDIT: I forgot to say: :+1: Eulalie for the bugtracking, the fixing, cleaning and PRing",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/567#issuecomment-358766000:570,simpl,simplicity,570,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/567#issuecomment-358766000,1,['simpl'],['simplicity']
Usability,"My bad for the video...it is now public. About UX, I'm not sure there exists something like ""the best way"" to do something :) ; So I can only answer that sliding left/right is a very common and appreciated way in software like Blender or Unity3D.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/750#issuecomment-413547350:47,UX,UX,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/750#issuecomment-413547350,1,['UX'],['UX']
Usability,"My checklist:; - tests coverage (none, low, good); - have at least one working example (yes, no); - is validated in the Igor's sense (if yes provide a link to the validation references); - is thread safe according a given thread safe design provided by the Multi-thread WG. ; - sofa code guidelines violation (none, a few, a lot) . I suggest this checklist to be part of the component as a kind of meta-data in the factory.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132:288,guid,guidelines,288,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132,1,['guid'],['guidelines']
Usability,"New changes:; - Move Sofa.GL module under Sofa directory; - SofaKernel is gone.; - Everything was moved under applications/collections/deprecated; - New cosmetic feature in SofaMacros to hide sub-options when base-option is disabled (like cmake_dependent_option but simpler). E.g. when I disable SOFA_COMPONENT, all SOFA_COMPONENT_* are hidden.; - A bit of cleaning",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1180587977:266,simpl,simpler,266,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1180587977,1,['simpl'],['simpler']
Usability,Nice and simple :ok_hand:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1956#issuecomment-808329941:9,simpl,simple,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1956#issuecomment-808329941,1,['simpl'],['simple']
Usability,"No problem, I'll do my best to rebase my fixes here in a PR. As for the buffer overflow, it's definitely not a serious one (read-only, static size) but it aborts execution when compiled with address sanitizer, which prevents further bug discovery. Another show-stopper in SofaCUDA, `CudaBarycentricMappingRigid.cpp:50`, ODR violation:. ```; ==13885==ERROR: AddressSanitizer: odr-violation (0x7f474c739640):; [1] size=4 'class_BarycentricMappingRigid' ../applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaBarycentricMappingRigid.cpp:47:1; [2] size=4 'class_BarycentricMappingRigid' ../modules/SofaMiscMapping/BarycentricMappingRigid.cpp:42:18; ```. Fix is simple: remove the `SOFA_DECL` as it's defined already somewhere else. After that, it's a world of memleaks! ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/528#issuecomment-347130851:653,simpl,simple,653,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-347130851,1,['simpl'],['simple']
Usability,"Not sure it solves any problem and it might degrade performances. A full refactoring of AdvancedTimer should be the objective to make it simple, thread-safe and shiny!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3424#issuecomment-1308450688:137,simpl,simple,137,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3424#issuecomment-1308450688,1,['simpl'],['simple']
Usability,"Note for @sofa-framework/reviewers ; The PR now builds and tests run.; This PR might be really breaking, and your careful review and feedback is more than welcome. I am available for any question.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/637#issuecomment-391685881:133,feedback,feedback,133,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-391685881,1,['feedback'],['feedback']
Usability,"OK,; I updated the PR with a few things:; 1 / the test now checks the content of the generated files for error; 2 / Monitor has an additional data field ""fileName"" through which one can override the default path to the generated files; 3 / Monitor now respects basic coding guidelines; Looks a bit better now",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/312#issuecomment-313136828:274,guid,guidelines,274,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-313136828,1,['guid'],['guidelines']
Usability,"Of course the PR will be breaking and we will need to update our code base. ; But this is all for the good. ; ; Clearly congratulation @SofaFramework for such high quality management of software evolution. So if I understand correctly, this will be merge into master the day after the official release of v22.06 right ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1174731843:112,Clear,Clearly,112,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1174731843,1,['Clear'],['Clearly']
Usability,"Ok I see the problem (why qtcreator is not capable of showing this ""usage"" of GuiDataRepository is a mystery to me). . Anyhow you are right in moving GuiDataRepository in SofaGuiCommon you need to fix then the path. In SofaGuiCommon.cpp ; FileRepository GuiDataRepository(""GUI_DATA_PATH"", Utils::getSofaPathTo(""share/sofa/gui/common/resources"").c_str());. And somewhere in qt:; GuiDataRepository.addFirstPath(Utils::getSofaPathTo(""share/sofa/gui/qt/resources"").c_str()) ;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368866830:78,GuiD,GuiDataRepository,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368866830,4,['GuiD'],['GuiDataRepository']
Usability,"Ok it's all clear now, many thanks for your time :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342832090:12,clear,clear,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342832090,1,['clear'],['clear']
Usability,"Ok so it seems to be ready, let's just wait the feedback from @damienmarchal regarding the current incompatibility problem at Defrost.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/637#issuecomment-395357378:48,feedback,feedback,48,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-395357378,1,['feedback'],['feedback']
Usability,"Ok sorry my message was not totally clear. I meant, you check the option in the Node and it propagate the printLog to all child Node and their components.; So if you want all the printLog, you activate it in the root Node.; Just suggesting.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3162#issuecomment-1194083853:36,clear,clear,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3162#issuecomment-1194083853,1,['clear'],['clear']
Usability,"Ok thanks for the movie, the goal is more clear now.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1012#issuecomment-489031815:42,clear,clear,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1012#issuecomment-489031815,1,['clear'],['clear']
Usability,"Ok, great! I will check out the examples and give you feedback next week. Regarding the naming: This could end up being a lengthy discussion. My reasoning is that names like ""DataEngine"" have their origin in how things are implemented. I think from a user perspective it is easier to understand names like ""PyScriptableComponent"" or even ""PyComponent"", because that is what they are: components, just like any other in Sofa, with Datas, Inputs and Outputs and a certain behavior, which can be implemented in python. Of course there's the disadvantage of breaking the name consistency. If we keep the ""DataEngine"" name somehow, I vote for PythonDataEngine. Saying it is also ""Script"" is redundant.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406602449:54,feedback,feedback,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406602449,1,['feedback'],['feedback']
Usability,"Ok.... so when a node does not have parent.... which I assume is the case of the root ...; then the getPathName() string is empty... and ; Which make the function CreateString to return ""@"". . I have no clear idea where to fix that... the current fix is in #377",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/375#issuecomment-324900504:203,clear,clear,203,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/375#issuecomment-324900504,1,['clear'],['clear']
Usability,"Olivier's point me that in his code the clearing of the links is really ""perfectible"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/772#issuecomment-422772768:40,clear,clearing,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/772#issuecomment-422772768,1,['clear'],['clearing']
Usability,On this pull-request we would need the feedback of @Younesssss and @ChristianDuriez about how to sort the mapping components in SOFA? How should be differentiated the different kind of mappings?. Your input is important to us for NG.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2635#issuecomment-1048622163:39,feedback,feedback,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2635#issuecomment-1048622163,1,['feedback'],['feedback']
Usability,One possible next-step could be to connect the BaseSimulationTest with the simpleapi work discussed with @maxime-tournier. So that we would have a fully loosed coupling equivalent to scenecreator and sofatest with good looking syntax.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-336184799:75,simpl,simpleapi,75,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-336184799,1,['simpl'],['simpleapi']
Usability,One remark about commented blocks: couldn't they be simply removed if not used anymore? ; Would be better to avoid introducing commented/unmaintained/why-is-this-here code.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/12#issuecomment-241391253:52,simpl,simply,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/12#issuecomment-241391253,1,['simpl'],['simply']
Usability,"One simple solution, it to add [Base::checkDataValidity()](url). Its call would be let to the application.; For example, runSofa would call it right before `init` and `reinit`, but a more specific application could chose not to call it not to add over-cost. Note that high level checkers could be implemented (such as `check_it_is_a_valid_vector_of_indices`, ...). The downside is how to perform the check on a single Data rather than at the component level? But maybe it would be way sufficient for what we attend to do?; To perform the test at the Data level, we need to differentiate Data modification coming from a user vs coming from a computation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/265#issuecomment-302649603:4,simpl,simple,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/265#issuecomment-302649603,1,['simpl'],['simple']
Usability,"PR looks fine, but we absolutely need to define the convention about \_doXXX\_ or \_isXXXX\_; This should be definitely generalized within the whole code base AND the guidelines of SOFA.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1753#issuecomment-772399008:167,guid,guidelines,167,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1753#issuecomment-772399008,1,['guid'],['guidelines']
Usability,"Parse function should warn when using the removed Data `blockSize` :pray: ; Then, without additional feedback, will be merged",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3556#issuecomment-1386675840:101,feedback,feedback,101,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3556#issuecomment-1386675840,1,['feedback'],['feedback']
Usability,"Personnally I'm wondering if using a string here instead of magical systems is not better because otherwise it means we are relying on undocumented feature in our UX (because NameDecoder are used to register object in the factory). . More fundamentally, exposing the implementation names through the UX is considered as as bad design and is very typical of application make by developpers that considere themselves as their first users... so they find themselves find super cool as a kind of ""super print debuggin"" as well as the ability to see ""their"" naming in the end user app. . When targetted users are not the developpers, it is considered much better to make a glossary of the term they use... shape the UX on top of that and use their term in the UX... while keeping implementation's names out of user's eyes .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4514#issuecomment-2061005776:135,undo,undocumented,135,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4514#issuecomment-2061005776,5,"['UX', 'undo']","['UX', 'undocumented']"
Usability,"Proof of concept further to STC#15 discussions but so far, no use of this mechanism. Feedback from the community requested. A usecase could be to warn the user in LCPConstraintSolver when adding BilateralInteractionConstraint while this constraint solver does not support it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3888#issuecomment-1569747933:85,Feedback,Feedback,85,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3888#issuecomment-1569747933,1,['Feedback'],['Feedback']
Usability,Review done. Amazing PR it will be so much clearer in a few months !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1183#issuecomment-542794168:43,clear,clearer,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1183#issuecomment-542794168,1,['clear'],['clearer']
Usability,"Right for the overhead, my target was clearly to minimize the developement time because this is a very scarce resource. The good news I see is that if the function a performance limiting we are still able to improve it a lot (by order of magnitude).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/332#issuecomment-316340088:38,clear,clearly,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/332#issuecomment-316340088,1,['clear'],['clearly']
Usability,"Right, thank you guys for your quick feedback.; Cheers.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1066#issuecomment-496454265:37,feedback,feedback,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1066#issuecomment-496454265,1,['feedback'],['feedback']
Usability,"SOFA-dev meeting report: @damienmarchal will merge this PR with #373 since their contents are related. Doing so, he will try to get rid of this box problem simply by removing all boxes (separating Datas with lines). To be continued...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/369#issuecomment-329142955:156,simpl,simply,156,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/369#issuecomment-329142955,1,['simpl'],['simply']
Usability,"STC10 Feedback: (https://annuel2.framapad.org/p/sofang-v6). SofaFramework will be re-designed like that:; ```; * Type (Vec, Mat, Quat, Frame, BaseMatrix, BaseVector, BoundingBox, Ray, ...) ( + leurs algos); * StdType (fixed_array, vector, map, etc); * Geometry (Triangle, Tetra...); * Topology; * Mesh; * Helper; * Config; * Messaging; * Logging; * Image; * BVH; * IO; * System; * Visual; * DefaultType (VecTypes, RigidTypes, ...); * Core; * Data (#1605 #1611 .... ); * TypeInfo (TypeInfo_Vec, TypeInfo_Quat, etc); * DataTypeInfo (DataTypeInfo_Vec, DataTypeInfo_Quat). * Simulation; * Testing (to isolate the dependency gtest); * OpenGL (to isolate the dependency opengl); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1521#issuecomment-734300737:6,Feedback,Feedback,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1521#issuecomment-734300737,1,['Feedback'],['Feedback']
Usability,SceneCreator.; If you get a message saying:; ```; create: component 'Euler Explicit' of type 'EulerSolver Object type EulerSolver<> creation failed ; ```; Emitted by the simpleapi as in; ```; source code loc: /home/sofa/jenkins_1/workspace/ubuntu_gcc-5.4_options/src/applications/plugins/SceneCreator/SimpleApi.cpp:83; ```. This means that the factory does not contains the object. This message appears because the implementation of SceneCreator is totally new and it is now based on the content of the ObjectFactory. The consequence is that to create object the factory needs to be initialized properly (by loading the plugins/modules). . PS: to get the emitting location you can start runSofa with the clang message formatter.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535:170,simpl,simpleapi,170,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535,2,"['Simpl', 'simpl']","['SimpleApi', 'simpleapi']"
Usability,See 48b8dd0c70c400da8a7054f90bb413f8e0ee5483 for `nbOfMonomial` creation. ; This makes me think about [a wise advice I read once](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md#formatting).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/442#issuecomment-334484252:181,GUID,GUIDELINES,181,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/442#issuecomment-334484252,1,['GUID'],['GUIDELINES']
Usability,"See [this gist](https://gist.github.com/maxime-tournier/3c59175c9219098d419768d89af8a51e#file-attribute_list-cpp) for a simple prototype (start from the main function at the end). It uses a nifty trick for erasing and recovering type information through a throw/catch, which is a little slow but not slower than string conversion anyway. The one with member function pointers won't fly as it requires e.g. `DefaultPipeline::name` to be public, which is often not the case. I don't see how to come up with a reasonably usable syntax for the last one, since `Node, MechanicalObject` are (possibly dependent) type names. Also, putting them all inside a single `initializer_list` will drop type informations to make type checking possible in `createTree`, so I'm afraid this won't be worth it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/417#issuecomment-335082143:120,simpl,simple,120,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-335082143,2,"['simpl', 'usab']","['simple', 'usable']"
Usability,"Seems OK, could you just rebase/merge with master to remove the failed CUDA/whatever scenes? Just to be in the clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2050#issuecomment-839603263:111,clear,clear,111,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2050#issuecomment-839603263,1,['clear'],['clear']
Usability,"Seems VS2017 is not happy ; ```; j:\0\src\sofakernel\modules\sofabasemechanics\src\sofabasemechanics\diagonalmass.inl(573) : fatal error C1001: An internal error has occurred in the compiler.; (compiler file 'd:\agent\_work\1\s\src\vctools\compiler\utc\src\p2\main.c', line 187); To work around this problem, try simplifying or changing the program near the locations listed above.; Please choose the Technical Support command on the Visual C++ ; Help menu, or open the Technical Support help file for more information; ```; but we are ditching vs2017, right ? 😗. Or it could be that the CI is on a VM, maybe the vCPU is also at fault here.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2652#issuecomment-1028148021:313,simpl,simplifying,313,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2652#issuecomment-1028148021,1,['simpl'],['simplifying']
Usability,Several lines of thought:; + Proposal around a new way of adding contribution in addKtoMatrix in SOFA and avoid a virtual call at each call; + Merge MatrixDeriv with a sparse matrix representation; + SparseVectors in SOFA; + Simplify the (quite complex) multi-matrix things as a lot of the initial intentions have never been really implemented and can be (maybe) solved in a more simple way using efficient sparse matrices and sparse vectors.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292212265:225,Simpl,Simplify,225,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292212265,2,"['Simpl', 'simpl']","['Simplify', 'simple']"
Usability,Small warning before back porting... ; I got 10 minuets ago a preliminary feedback from @samFabrice that this change is not working as expected. ; He is investigating and will confirm/cancel the warning.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3232#issuecomment-1229950339:74,feedback,feedback,74,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3232#issuecomment-1229950339,1,['feedback'],['feedback']
Usability,"So I took a look at the SleepController. It simply puts context to sleep where the mechanical object has a max velocity under a certain threshold. Then wake them up again only when a collision occurs with another object that is moving. ; Three remarks : ; - Being put to sleep disables any mechanical visitor to be applied on the node and deactivates its constraint corrections. So no more computing (no system build, no integration, only collision detection); - This works well only for scenes where external interaction only arise between two objects colliding, neither by the mean of a change of external forces (dynamic vector field for instance), or of constraint state changes not managed by the collision pipeline (for instance statically defined interaction constraints such as cable constraints). ; - The code seems overly complicated for what it performs but certainly does what it says it does. I didn't try it but it looks ok. . Sincerely, I cannot see myself advising anyone to use it in their scene given the fact that the use case doesn't apply for the majority of the scenes (especially for soft robotics). So I wouldn't mind never seeing it again...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4813#issuecomment-2236872106:44,simpl,simply,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4813#issuecomment-2236872106,1,['simpl'],['simply']
Usability,So apparently `ImagePNG_test.ImagePNG_NoFile` fails when executed **after** `logging_test`.; I don't know Message API enough to understand what is wrong but it seems to be related to `MessageDispatcher::clearHandlers()` calls in `logging_test`.; Any idea @matthieu-nesme @damienmarchal ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265115802:203,clear,clearHandlers,203,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265115802,1,['clear'],['clearHandlers']
Usability,Some feedbacks:; I compiled with https://github.com/google/sanitizers/wiki/AddressSanitizerLeakSanitizer and I did not get any difference in leaks while executing TorusFall.scn and caduceus.scn in batch for 100 steps unfortunately.; The output is huge (20Mo of logs) so not easy shareable (can give it on demand). Final outputs for both (PR and master branches) :; caduceus: `SUMMARY: AddressSanitizer: 10282202 byte(s) leaked in 111987 allocation(s).`; torusfall: `SUMMARY: AddressSanitizer: 6271499 byte(s) leaked in 28416 allocation(s).`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4838#issuecomment-2249517443:5,feedback,feedbacks,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4838#issuecomment-2249517443,1,['feedback'],['feedbacks']
Usability,"Some notes:. - It was extremely hard to understand why L^T was used in the first step of the solve, and not L. I hope it's clearer now with the comment I added. Anyway, it requires to have the knowledge of the CSR and CSC formats, and how they relates to the transpose.; - I would like to use C++20 `std::span` in some functions such as `solveLowerUnitriangularSystemCSR`.; - Regression tests threshold are usually set to 1e-4. IMO it's not enough to capture errors happening on a single DOF because it's an average",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1653112403:123,clear,clearer,123,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1653112403,1,['clear'],['clearer']
Usability,"Sounds good to me :) ; So to be clear I should remove all the `using std::*`.; And all the `using sofa::*`, including `sofa::helper::vector` are okay?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/567#issuecomment-358917071:32,clear,clear,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/567#issuecomment-358917071,1,['clear'],['clear']
Usability,"Strangely, gcc cannot find the operator for the implicit conversion from `Mat<1,1,int>` to `int`. So I simply made the conversion explicit and it's working.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3584#issuecomment-1385001387:103,simpl,simply,103,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3584#issuecomment-1385001387,1,['simpl'],['simply']
Usability,"Sure, I am including that file. My point is that to be able to include that file correctly I need to find the SofaBase package and then link against SofaBaseTopology. ; If I dont link against that target, I still can include; ```; #include <SofaBase/SofaBaseTopology/MeshTopology>; ```; which looks completely okay but it fails in a inner include; This happens because when you install SOFA in usr/local/ you get the following directory `usr/local/SofaBase/SofaBaseTopology/`; If you for example install something else in usr/local, lets say CGAL, you get the following directory `usr/local/include/CGAL` and when linking against `CGAL::CGAL` target, you get the following include dir: `usr/local/include`. ; Since you get that include, it looks like you could include `SofaBase/SofaBaseTopology/MeshTopology.h`, but this fails as in reality you should include `SofaBaseTopology/MeshTopology.h`. If you are going to create extra directories in usr/include when installed, I would suggest naming them in lowercase, as for example Eigen does. When you install Eigen it creates the following structure `usr/local/eigen3/Eigen` so even if you add `usr/include` to you include dirs, you still know that you shouldn't include `eigen3/Eigen/Dense.h`. . Also, its hard to know in which cmake package and in which target each file is. I would suggest creating, for example, some global targets:; Sofa::Sofa would link against everything; SofaBase::SofaBase would link against everything in SofaBase package; SofaBase::SofaBaseTopology would link only against the SofaBaseTopology; Probably this would simplify linking against SOFA in general",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1288#issuecomment-607161514:1592,simpl,simplify,1592,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1288#issuecomment-607161514,1,['simpl'],['simplify']
Usability,"Sure, sorry. So I wanted to optimize the initialization of BarycentricMapping, see issue #784 for clear description of the problem. . To avoid more duplication of code, and to allow the optimization to be available for a maximum of topology types, I needed the code to be refactored. . So:. 1. I created an abstract class (BarycentricMapperTopologyContainer) that gather the shared implementations of BarycentricMapperEdgeSetTopology, BarycentricMapperTriangleSetTopology, BarycentricMapperQuadSetTopology, BarycentricMapperTetrahedronSetTopology, and BarycentricMapperHexahedronSetTopology. 2. Enabeling to refactor the apply(), applyJ(), applyJT(), getJ(), draw() functions and more importantly the function I want to optimize, init(). The PR also include some cleaning, in particular the renaming of variables. That could indeed break not updated code. . What I couldn't do, is to also refactor the code of BarycentricMapperMeshTopology...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901:98,clear,clear,98,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901,1,['clear'],['clear']
Usability,"TODO : use a generic container level for static, dynamic and grid; SimpleTesselatedTetraTopologicalMapping should join the SimpleTesselatedTetraMechanicalMapping",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2612#issuecomment-1033632088:67,Simpl,SimpleTesselatedTetraTopologicalMapping,67,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2612#issuecomment-1033632088,2,['Simpl'],"['SimpleTesselatedTetraMechanicalMapping', 'SimpleTesselatedTetraTopologicalMapping']"
Usability,"TODO: Component must have an S (components), and must be tested first; Add to guidelines: vector data must include an “s” to specify that there is several info",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-994673970:78,guid,guidelines,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-994673970,1,['guid'],['guidelines']
Usability,"Thank Eulalie for this report. After discussion with Erik, STL was remove on purpose but the error message is not clear on that and on how to fix the Scene. We will fix that this friday. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/768#issuecomment-420558059:114,clear,clear,114,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/768#issuecomment-420558059,1,['clear'],['clear']
Usability,Thank Mathieu for the info. So you are confirming that the name getContactPointWithSurfacePoint mismatch the behavior of what is actually implemented for vec3. Shouln't we separate the two behavior in two function with clear naming ?. DM,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/47#issuecomment-262492386:219,clear,clear,219,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/47#issuecomment-262492386,1,['clear'],['clear']
Usability,"Thank for your feedback, . As you I don't understand the SofaKernel/SofaFramework stuff and I'm always searching for the right component in the wrong place so I fully support you on that, the reason is that Misc vs Advanced vs NG have different meaning for different person so it is a totally arbitrary segmentation. . But I'm not really talking about this here. What I have in mind is more or less orthogonal to this aspect (and it is fully compatible with the existing scheme or one you could define in the future grouping stuff like Qt). What I would like to discuss is more about how do we management the components life-time (from integration to deprecation) and not where to put them. I'm not sure I'm very clear sorry for that. . Here is our working branch: ; https://github.com/SofaDefrost/sofa/tree/deprecating_components. You can see there that there is no more CMakeLists than what we have now (or what we could have in some future if some serious cleaning and refactoring is done to organize the component 'à la Qt'...but I have no time for that ;)). . The goods I see of the proposed approach, in addition to be orthogonal to the other concerns, is that it is very progressive. It change nothing for existing user of Sofa while at the same time we can progressively deprecated components from Sofa by just moving them from one set to one other (and updating the scenechecker). In a symetric way we can also progressively integrate in the core set of components the one that have been ""elected"" by the SofaNG workgroup. And for the other component...well nothing change. . My dream is that by doing so we could small step after small step, remove 50% of the components that should be deprecated and that, combined with the pluginization lighten sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148:15,feedback,feedback,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148,2,"['clear', 'feedback']","['clear', 'feedback']"
Usability,"Thank you @Camille-K and @jnbrunet for your feedback and explanation. . **As highlighted, we will keep the Lagrangian formulation and use the rest area to keep consistency with the others FEM implementation**. . - Regarding the triangle Thickness, it is not used anymore and will be removed when TriangleFEMForceField and TriangularFEMForceField will be merged to keep the code as simple as possible.; - Comparing the results with FEBio or Fenics is a very good idea. Which one do you recommend ? Considering starting from 0 with not much time.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2275#issuecomment-1068911072:44,feedback,feedback,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2275#issuecomment-1068911072,2,"['feedback', 'simpl']","['feedback', 'simple']"
Usability,"Thank you @maxime-tournier and sorry for the delay; @damienmarchal @matthieu-nesme do you have any feedback regarding the PR, otherwise it should be merged. Thx guys",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/411#issuecomment-334453911:99,feedback,feedback,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411#issuecomment-334453911,1,['feedback'],['feedback']
Usability,"Thank you Guillaume, ; I vote for fast-merge. But i think it is better to chain the two message like that:; ```console; msg_info() << ""Blahblah"" << msgendl; << ""Other thing"";; ```; Because it faster and if the two line are forming a single message it is more clear to have that:; ```console; INFO (MyComponent) : ""Blahblah"" ; ""OtherThing""; ```; Instead of: ; ```console; INFO (MyComponent) : ""Blahblah""; INFO (MyComponent) : ""OtherThing""; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/380#issuecomment-325982289:259,clear,clear,259,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/380#issuecomment-325982289,1,['clear'],['clear']
Usability,"Thank you Jeremie for this valuable feedback. . I started working towards a faster initialization path for `Data` and `Link` in a separate branch, I will post some results here if I get anything meaningful. The main use-case is a scene with many contacts, thus many components/data are added and removed at each time step due to collision handling. We'll see whether this is worth the effort. A small thing: I've seen that the DataTypeInfo for fixed array-like types (RigidCoord, Vec, and the like) all enable the CopyOnWrite flag, which makes any Data holding such type allocate on the heap on construction. Is this needed?. Thanks again for your help.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/44#issuecomment-256399737:36,feedback,feedback,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-256399737,1,['feedback'],['feedback']
Usability,"Thank you a lot for the nice proposals preventing potential hacks like the ones I presented above. I just checked your pull request and I really like its simple usage - I hope it will be merged soon! . @damienmarchal : I am excited to see your solution to 3., if you would like to have further information about my approach, please let me know. To create python scenes, I am using the [scene to python transform script](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/SofaPython/scn2python.py) and with the direct usage your approach works well, i.e.; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn -o caduceus2 -p`; generates the python scene `caduceus2.py` and when launching it I can retrieve all the arguments of the command line, i.e. the output of ; `runSofa caduceusPython.scn --argv test test2`; is `['caduceusPython', 'test', 'test2']`. However, by default (i.e. without -p) the scene to python transform script generates a .scn file calling a .py file - a choice made to prevent having to load the python plugin before launching python scenes. For example; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn`; outputs the caduceusPython.scn and caduceusPython.py. Now when using ; `runSofa caduceusPython.scn --argv test test2`; and running ; `print sys.argv`; only the filename can be retrieved, i.e. the output is `['caduceusPython']`. 1. Is the usage presented as second approach (i.e. using .scn and .py) still up to date/a recommended approach?; 2. If yes, is it possible to access the argv in the .py file when it is used from the .scn file? Or is it possible to improve the implementation such that it can handle it?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656:154,simpl,simple,154,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656,1,['simpl'],['simple']
Usability,"Thank you for this work @damienmarchal. ; I agree there are some location problems with tests in SofaKernel but I'm not sure the solution you propose would be clearer at a CMake point of view.; This is what I would find consistent:; ```; SofaKernel; framework; sofa; core; core_test; defaulttype; defaulttype_test; helper; helper_test; simulation; simulation_test; ```; Is this possible? Too long to implement? Breaking too much?. I think that any *_test should be located besides the library it tests, not in a package. I would even say that we should have **nothing except CMake files in CMake packages**.; I'm afraid that your proposal will mix SofaFramework package definition and test sources. ; I know we are creating a SofaFramework_test executable and that it's obviously related to the SofaFramework package but the problem is not the test location, it's the fact that it's bubbled like a package while it should be factorized following SofaFramework's libraries. Not sure I was very clear. I may have misunderstand stuff. Please be sure I don't want to kill your work <3",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/605#issuecomment-370851122:159,clear,clearer,159,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/605#issuecomment-370851122,2,['clear'],"['clear', 'clearer']"
Usability,"Thank you for your feedback @damienmarchal ! . I've done most of your enhancements, but I can't figure out what tests we can create for this PR. ; Do you have some suggestions ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323296216:19,feedback,feedback,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323296216,1,['feedback'],['feedback']
Usability,"Thank you for your feedback Eulalie!; I guess some fixes / merges are required to fit the current master. To start with, let's [ci-build]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/459#issuecomment-363549848:19,feedback,feedback,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-363549848,1,['feedback'],['feedback']
Usability,"Thank you for your response. Yesterday I tried with my home PC and it occured that error. Today I'm trying with my office PC and it occurs another error but still in the same process. Here is the log:. ```; -- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).; Install prefix: /home/giangnguyen/sofa/build/install; Adding library Sofa.Config; Using legacy headers is enabled.; Headers from v21.12 are usable, but it is advised to change your code to use the new headers introduced in v22.06.; Adding library Sofa.Compat; Adding library Sofa.Component.Compat; Adding library Sofa.Type; Adding library Sofa.Geometry; Adding library Sofa.Topology; Adding library Sofa.Helper; Adding library Sofa.LinearAlgebra; Adding library Sofa.DefaultType; Adding library Sofa.Core; Adding library Sofa.Simulation; Adding library Sofa.Simulation.Core; Adding library Sofa.Simulation.Common; Adding library Sofa.Simulation.Graph; Adding library Sofa.Testing; Found PythonInterp: /usr/bin/python3.8 (found version ""3.8.10"") ; Adding library Sofa.Framework; Adding module Sofa.Component; Adding module Sofa.Component.ODESolver; Adding module Sofa.Component.ODESolver.Forward; Adding module Sofa.Component.ODESolver.Backward; Adding module Sofa.Component.IO; Adding module Sofa.Component.IO.Mesh; Adding module Sofa.Component.Playback; Adding module Sofa.Component.SceneUtility; Adding module Sofa.Component.Topology; Adding module Sofa.Component.Topology.Container; Adding module Sofa.Component.Topology.Container.Constant; Adding module Sofa.Component.Topology.Container.Dynamic; Adding module Sofa.Component.Topology.Container.Grid; Adding module Sofa.Component.Topology.Mapping; Adding module Sofa.Component.Topology.Utility; Adding module Sofa.Component.Visual; Adding module Sofa.Component.LinearSolver; Adding module Sofa.Component.LinearSolver.Iterative; Adding module Sofa.Component.LinearSolver.Direct; Sofa.Component.LinearSolver.Direct: using built-in metis library; Adding m",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062:435,usab,usable,435,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062,1,['usab'],['usable']
Usability,"Thanks @damienmarchal for this already really nice POC on how to make a really simple to use Python DataEngine!. Concerning the registration of typename creators in the factory, I was wondering if the PSDEDataFactory couldn't somehow be merged together with the PythonFactory, currently used to bind types to python?. It's very quickly going to be unmaintainable otherwise I think. with the most basic matrices, vectors, scalars, basicTopologicalElements and their vector<X> version alone, I already have 50creators to register in the PSDEFactory, all of which were already somehow registered in the PythonFactory, for a different purpose, sure, but I think it could be combined.; Plus I have my own python bindings in my plugins, & I wouldn't like having to register them in sofa's Binding_Base.cpp file. I'd already be more ok to have a way to do this directly from my plugin (like it's done using the SP_ADD_CLASS_IN_FACTORY macros from SofaPython.. but again, why not have this macro doing all the work by itself?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-381072469:79,simpl,simple,79,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-381072469,1,['simpl'],['simple']
Usability,"Thanks @fredroy for taking the feedback into account. ; To me this PR is ready to merge because it fullfill our checklist and no one said ""no go"" in 15 days.; I rebuild from a fresh [ci-build]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/301#issuecomment-311036354:31,feedback,feedback,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-311036354,1,['feedback'],['feedback']
Usability,Thanks @jnbrunet for the interesting feedback indeed.; I can run the tests!. Agreed @damienmarchal ; What is this DISPLAY_TIME!?! wtf!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-594847317:37,feedback,feedback,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-594847317,1,['feedback'],['feedback']
Usability,Thanks @jnbrunet. I made some messages clearer. Some of them was meant to facilitate debugging (it helped me) and are not necessarily meant for the user. I converted them to developers messages (but still made them clearer).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2076#issuecomment-844140967:39,clear,clearer,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2076#issuecomment-844140967,2,['clear'],['clearer']
Usability,"Thanks @matthieu-nesme for the feedbacks and discussions. . About the implementation I agree there is some smoothing to do (there is redundency in the classes, the constructors with std::initializer are now useless as vs2013 don't like them)... But I would be happy to have that happens in a second PR as I think I can change this without touching the API :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-290018588:31,feedback,feedbacks,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-290018588,1,['feedback'],['feedbacks']
Usability,"Thanks Bruno,. To me the pro in this PR:; - the design seems clearer with the use of final and the delegates. ; - more efficient (no listener in each Nodes, no need to maintaint).; - more consistent with begin/end notifications. . The bad:; - no backward compatibility (can one be implemented ?), but this listener are not used so much (only in GUI).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/917#issuecomment-461186420:61,clear,clearer,61,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/917#issuecomment-461186420,1,['clear'],['clearer']
Usability,Thanks Guillaume for the feedback. I'm very surprise this fails since ; https://github.com/sofa-framework/sofa/commit/b70b477f9cdae6a1d31d4f462f23780d3bdbcde1. because I see no link between the two.... this is very strange to me.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263270733:25,feedback,feedback,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263270733,1,['feedback'],['feedback']
Usability,"Thanks a lot @alxbilger for your feedback, I will make the requested change :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3227#issuecomment-1222392543:33,feedback,feedback,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3227#issuecomment-1222392543,1,['feedback'],['feedback']
Usability,"Thanks a lot @chhas for the investigation :raised_hands:; I'm no specialist either, but, although most changes in the commit are simply `Vector3 -> Vec3`, there are two things that seem suspicious to me, in `SofaViewer.cpp` (l.256-295) and `QtGLViewer.cpp`(l.823-860) (sorry, I can't find an easy way to link to a specific line in a commit diff view).; In both, there is a change of condition from :; ```; if( isControlPressed() ); ```; to; ```; if (!isControlPressed() && !e->isAutoRepeat()); ```; before calling a `propagateEvent` method on the `QKeyEvent` being processed.; I had a brief look: `isAutoRepeat` seems to be a Qt routine always returning an `autor` variable being set to 1 in `qevent.h`. And `isControlPressed()` refers to an internal variable `m_isControlPressed` in `SofaViewer.h`, which does what its name suggests. At this point, it seems that these modifications could very well explain the two changes of behaviour I was describing above.; @damienmarchal, could you give us some input on this ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1333567910:129,simpl,simply,129,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1333567910,1,['simpl'],['simply']
Usability,"Thanks a lot Matthieu 👍 . Can you expand a little bit on ""easy"" vs. ""hard"" to get global/local mu parameters?. Looking quickly at the code, one could just add a GLOBAL flag and use the global mu (if any): that would make the code a bit simpler and the behaviour more explicit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/81#issuecomment-264918392:236,simpl,simpler,236,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/81#issuecomment-264918392,1,['simpl'],['simpler']
Usability,"Thanks a lot for being able to solve that because it has been a pain in the ass for too long!. But please, remove all that stuff about plugin reinit!!! Moreover it depends on the app/gui implementation, it is not satisfying. I think a simple workaround would do the job in PythonEnvironment::Init():; `; PyRun_SimpleString(""; try: __SofaPython_mainenvironment__.uninstall(); except: __SofaPython_mainenvironment__=ImportFrame()"");; `; (approximative code)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/198#issuecomment-285697641:235,simpl,simple,235,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/198#issuecomment-285697641,1,['simpl'],['simple']
Usability,"Thanks again for the investigation. I see you are using the raw c++ code to make your scene. Instead of doing that the ""hard way"" you can use ""simplapi"" which mimick in c++ de python one. It is in sofa/simulation/graph/simpleapi.h and there are exemple in the code base.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256001467:143,simpl,simplapi,143,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256001467,2,['simpl'],"['simplapi', 'simpleapi']"
Usability,"Thanks again for this nice contribution @nhnhan92 ; Sorry I had prepared many similar feedback as @epernod so, some might be duplicated. A more general remark, could you point us out the documentation you used to write this code please?; Do you have an idea of when you would plan to consider rotations around the z axis?; I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!. If this is too much questions, we can discuss about this live if you'd like",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209:86,feedback,feedback,86,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209,1,['feedback'],['feedback']
Usability,"Thanks for reporting this issue @margaretkoehler. . > GuiDataRepository.addFirstPath(Utils::getSofaPathTo(""share/sofa/gui/runSofa/resources/"").c_str()) ;. Does it fix the problem ? If yes, we need to test it on other OS. . I will investigate it tomorrow afternoon during the coding friday. Feel free to join us for helping :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/577#issuecomment-360522585:54,GuiD,GuiDataRepository,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/577#issuecomment-360522585,1,['GuiD'],['GuiDataRepository']
Usability,"Thanks for the PR @alxbilger ; I notify here @courtecuisse since he could have valuable feedback / review on this simple parallelization of the LDL factorization. Feedback could also be nice to factorize things and make sure some private plugins can rely on this solver. By the way, it also follows the design proposed several years ago (4!) by @damienmarchal in this branch: https://github.com/SofaDefrost/sofa/tree/pluginSofaCoreAsync",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2661#issuecomment-1041358936:88,feedback,feedback,88,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2661#issuecomment-1041358936,3,"['Feedback', 'feedback', 'simpl']","['Feedback', 'feedback', 'simple']"
Usability,"Thanks for the clear answer, . I'm afraid that if no one spend time on fixing this issue, the whole PR will wait for an un-defined amount of time. ; On my side I'm fully booked.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/243#issuecomment-312803016:15,clear,clear,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-312803016,1,['clear'],['clear']
Usability,Thanks for the feedback,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2787#issuecomment-1067804077:15,feedback,feedback,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2787#issuecomment-1067804077,1,['feedback'],['feedback']
Usability,Thanks for the feedback @untereiner maybe it is because in batch mode there is no opengl context. ; If I remember correctly this crash macos's tests that way. . Can you providing line/file that cause problem ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357533958:15,feedback,feedback,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357533958,1,['feedback'],['feedback']
Usability,"Thanks for the feedback Jean-Nicolas, . Could you provide examples of what would look like a generic/inituitive version in your view ? . On my side I'm thinking of something like:; ```xml; <CustomField name=""scalarfield"" source=""myfield.py"" evalFunctionName=""myImplicitFunction""/> ; <SurfaceMeshGenerationFromScalarField field=""@scalarfield"" output=""@topology""/>. <MetaBallField name=""scalarfield2"" radius=""0.5"" positions=""0 0 0""/> ; <SurfaceMeshGenerationFromScalarField field=""@scalarfield2"" output=""@topology2""/>; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/496#issuecomment-339468578:15,feedback,feedback,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/496#issuecomment-339468578,1,['feedback'],['feedback']
Usability,"Thanks for the feedback,. I totally agree that O(log n) as well as memory/indirection optimization would be nicer but this topic should have its own issue. About the checking...I also like the idea of the Visitor and this is very consistent as we already have existing SceneCheckerVisitor.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323972382:15,feedback,feedback,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323972382,1,['feedback'],['feedback']
Usability,Thanks for the feedback...actually this is what is done:; https://github.com/sofa-framework/sofa/pull/1269/files#diff-5b014f309073c89dc456a09768028992. But having hunderds of thousand of warnings for using deprecation method give me the envy to fix all the visible calling points.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1269#issuecomment-603891481:15,feedback,feedback,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1269#issuecomment-603891481,1,['feedback'],['feedback']
Usability,"Thanks for the feedbacks,. This seems related to the fact that Engines are designed to be data flow oriented and, keeping that in mind, we shouldn't break the general design of engines. But, it also appears that in several scenarios, ROIs are used to select features, eg 'position', but not necessarily at initialization time and not necessarily at rest_position and that there may not have an associated 'not changing' data field. My impression is that being able to pick a set of features from data field in a quick way, at controlled instant, is as desirable as not breaking the Engine logics. . What do you think about refactoring that and separate the two behaviors in different components. BoxROISelector and BoxROIEngine ?. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/38#issuecomment-258126238:15,feedback,feedbacks,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/38#issuecomment-258126238,1,['feedback'],['feedbacks']
Usability,Thanks for the heads up @epernod .; I just updated [my CLangFormat config](https://gist.github.com/pedroperrusi/f85f0d0db94a2b046716ec0e759c3550) to use Allman break before brackets as the [Guidelines](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md) request.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2020#issuecomment-822360243:190,Guid,Guidelines,190,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2020#issuecomment-822360243,2,"['GUID', 'Guid']","['GUIDELINES', 'Guidelines']"
Usability,Thanks for the screenshot @alxbilger and the feedback.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2416#issuecomment-981686033:45,feedback,feedback,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2416#issuecomment-981686033,1,['feedback'],['feedback']
Usability,"Thanks for you feedback @epernod. I think your suggestion is the more natural. Actually, I tried to set `printLog` in a log, to see if it was already working (but no). But I always feel uncomfortable when modifying such an important base class. I don't want that some classes become God classes. That's why I did not touch the Node class. But I am definitively open to discussion",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3162#issuecomment-1196614783:15,feedback,feedback,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3162#issuecomment-1196614783,1,['feedback'],['feedback']
Usability,"Thanks for your PR @gaurab4163 :+1: . I'm not sure about the place (file and namespace) this function should be. @damienmarchal you have a clearer vision of logging and messages in SOFA, what do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/639#issuecomment-381898967:139,clear,clearer,139,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-381898967,1,['clear'],['clearer']
Usability,"Thanks for your feedback @hugtalbot!. So I understand everything is on tracks on this bug then. I guess you have a lot of job to do guys with all the issues that you have to treat, and you are doing such a great job with SOFA framework!; I am discovering it since a few days now, and I really enjoy the journey :). Is there any chance that this issue will be treated in the near future?. Anyway, I found a work around:; - I read the `.vtk` file with the `meshio` python library.; - Then I export the mesh in `.mesh` format.; - I finally import the `.mesh` file into the gmsh python API, and export it in `.msh` format, which is readable by the `MeshGmshLoader`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155660392:16,feedback,feedback,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155660392,1,['feedback'],['feedback']
Usability,"Thanks for your feedback @jnbrunet @damienmarchal . Meanwhile, this PR is ready, and I suggest reviewing it as a fast-merge since it's not much and fixes a compile-time issue for quite a few people.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/827#issuecomment-439025656:16,feedback,feedback,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/827#issuecomment-439025656,1,['feedback'],['feedback']
Usability,"Thanks for your feedback,. We need examples of use of Data & Base conversion to add in the tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307789319:16,feedback,feedback,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307789319,1,['feedback'],['feedback']
Usability,"Thanks for your feedbacks,; I've encountered the problem with the Fontain.scn scene in sofa python examples. I don't think there's a mechanical state controller there though",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/724#issuecomment-406516354:16,feedback,feedbacks,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/724#issuecomment-406516354,1,['feedback'],['feedbacks']
Usability,"Thanks for your feedbacks. . @matthieu-nesme I agree with you about adding Data to base. This was discussed in; issue https://github.com/sofa-framework/sofa/issues/44 for which there was no clear conclusion so I still have no clear idea on what to do. My current thinking is that fundamentally Data are good (among other things they are a big part of the sofa UIs as well as offer saving capabilities)...the problem is that their init cost is too high. Instead of not using them shouldn't we accelerate that ? (To restart the discussion I have added few benchmark to the issue https://github.com/sofa-framework/sofa/issues/44). . @thomas-lemaire You are totally right about the printLog. Actually this was my long term target. But as I didn't wanted to break everything I just set-up the foundation of an alternative in this PR, to have your feedbacks, try the feature on few component then do the changing and cleaning all around in a second PR. Could we pursue the discussion in a dedicated issue (https://github.com/sofa-framework/sofa/issues/160) to define how we should do the general cleaning.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276751927:16,feedback,feedbacks,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276751927,4,"['clear', 'feedback']","['clear', 'feedbacks']"
Usability,"Thanks you all the for the feedback. . I appologize about the reviewing work. And you are right, this one is very hard. We can also be a bit more ""lazy"" in the reviewing, merging it, write a good changelog a tell people to send feedback if something goes wrong. . I'm pushing this one because we have a nice other PR waiting and this one have new cool features (from distance field modeling to tetrahedral meshing). . EDIT: actually moving from module to plugins without refactoring is much easier...but well... I was not able to prevent me.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/389#issuecomment-328528663:27,feedback,feedback,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389#issuecomment-328528663,2,['feedback'],['feedback']
Usability,Thanks you very much for this interesting PR. ; I hope we will have feedback on the NG direction.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/707#issuecomment-403004833:68,feedback,feedback,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/707#issuecomment-403004833,1,['feedback'],['feedback']
Usability,"The CI does not look happy, but I think it's nothing:. for Linux: some permission error at CMake phase. and Windows: ; - `139 - see BUILD_URL/artifact/parent_dir/build/scene-tests/archive/applications/plugins/SensableEmulation/examples/SimpleBox-Method2.scn/output.txt`; - `3 - see BUILD_URL/artifact/parent_dir/build/scene-tests/archive/examples/Components/topology/TopologicalModifiers/HexahedronForceFieldTopologyChangeHandling.scn/output.txt`. + scenes not working:; HexahedronCompositeFEMMapping.scn; HexahedronCompositeFEMForceFieldAndMass.scn",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1397#issuecomment-646697637:236,Simpl,SimpleBox-,236,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1397#issuecomment-646697637,1,['Simpl'],['SimpleBox-']
Usability,The FindAssimp you use does not seem to handle versions so let's keep it simple.; ```cmake; find_package(Assimp NO_MODULE QUIET; PATHS /usr/lib/${CMAKE_LIBRARY_ARCHITECTURE}/cmake; ); ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1360#issuecomment-640559850:73,simpl,simple,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1360#issuecomment-640559850,1,['simpl'],['simple']
Usability,The changes have not been propagated everywhere @epernod ; ```bash; /builds/workspace/sofa-framework/PR-1495/mac_clang-3.5_options_release/src/modules/SofaGeneralLoader/SphereLoader.cpp:81:5: error: use of undeclared identifier 'radius'; did you mean 'd_radius'?; radius.beginEdit()->clear();; ^~~~~~; d_radius; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-696242423:284,clear,clear,284,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-696242423,1,['clear'],['clear']
Usability,The config.h here clearly seems to be used within SofaSimulation modules. I guess the clean solution here is to remove the inclusion of this file in SofaFramework.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-541028903:18,clear,clearly,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-541028903,1,['clear'],['clearly']
Usability,"The current implementation is now converting things like:; Sequence (non recursively), string, scalar, and boolean without a warning. . If the object has a method named ""getSofaPath()"". This one is used in the createObject to do the conversion. My target was to avoid collision with the existing str() function that may have a different semantic and I wanted to preserve it. This function could be implemented in Base and Data but in virtually any object we want to be used as a parameter in createObject. . It sounds nice to me because it make things ""explicit"" and convenient as it simplify user's scripts.; I'm not a big fan of 'getAsSofaPath()' and though about getAsSofaValue or getAsACreateObjectParameter(). What do you think ? Do you have alternative names ? . PS: @matthieu-nesme you said: ... ""Data's str already gives the stringvalue"", ; ```python; first = rootNode.createObject( 'ExternalComponent', name='theFirst'); print('VERSION 1:'+ str( first.findData('name') + "" type: "" + str(type(first.name)) ); print('VERSION 2:'+ str( first.name ) + "" type: "" + str(type(first.name)) ); ```; Actually prints: ; ```; VERSION 1: <Sofa.Data object at 0x7ff43b77f6f0> -> <type 'Sofa.Data'>; VERSION 2: theFirst -> <type 'str'>; ```; So str() function is not implemented as you said.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307835375:584,simpl,simplify,584,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307835375,1,['simpl'],['simplify']
Usability,"The failing tests were mainly due to a unintended side effect that projective constraints were no longer applied at the end of Simulation::init(). To make sure similar issues were not hidden somewhere else, in the last commit I renamed the propagate visitor to make sure existing codes fail at compilation time. Fixing other codes in private/external repos should be easy:; - if projective constraints should not be applied, simply apply the rename to the visitor class; - if projective constraints should be applied, add a MechanicalProject???Visitor first, then rename the existing one. This information should be added to the changelog, but as far as I understood this needs to be done after the PR is merged.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/216#issuecomment-308269542:425,simpl,simply,425,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216#issuecomment-308269542,1,['simpl'],['simply']
Usability,"The function asin is defined in [-1,1].; The fix prevents NAN when the argument is slightly >1 due to numerical errors (1,000000000000001).; Hope it's clear enough.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/399#issuecomment-335735433:151,clear,clear,151,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-335735433,1,['clear'],['clear']
Usability,The new UX demo is so clean that it's hard to look again at the old one.; That's what I call perfect work.; Thanks @alxbilger :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2356#issuecomment-929326581:8,UX,UX,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2356#issuecomment-929326581,1,['UX'],['UX']
Usability,The plugin is not finish at all but is already usable. ; I will improve it in future works but this PR start to be very old so it would be nice to review and push it to avoid propagating the changes.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/603#issuecomment-415749827:47,usab,usable,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-415749827,1,['usab'],['usable']
Usability,"The problem is because the alias introduced in commit https://github.com/sofa-framework/sofa/commit/cd3b8aea26c296c2f0bb948ec6f96807565522bf translated every ""float"" to 'f"" ... which only works for component that implement GetCustemTemplateName() consistently with the sofa template name convention. For component that does not do such a thing the templateName() is decoded from the typeid().name() (which is plateform specific). The automatic decoding from typeid is bad practice that leaks to the UX implementation/compiler details. . To fix the issue the NameDecoder mechanism (or the SOFA_CLASS macro) should be improved to check if there is DataTypeInfo<T>::name() before calling the NameDecoder.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3450#issuecomment-1307832420:499,UX,UX,499,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3450#issuecomment-1307832420,1,['UX'],['UX']
Usability,The problem is clearly related to the DAG graph. A workaround until the bug is corrected is to use the Tree instead:. `$ runSofa -s tree`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/127#issuecomment-276599880:15,clear,clearly,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/127#issuecomment-276599880,1,['clear'],['clearly']
Usability,"The problem with SceneCreator is discussed in #417. ; But to summary the problem SceneCreator (which is supposed to be a plugin) is including tons of ; includes because he prefer to create the objects using ::New<MyObject>() instead of using abstracted BaseObject through the factory. . In the following is a simple proposal to replace the problematic code: ; ```cpp; namespace simpleapi; {. BaseObject::SPtr createObject(Node::SPtr self, const std::string& type, const std::map<std::string, std::string>& params={}); {; /// temporarily, the name is set to the type name.; /// if a ""name"" parameter is provided, it will overwrite it.; BaseObjectDescription desc(type.c_str(),type.c_str());; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }. /// Create the object.; BaseObject::SPtr obj = ObjectFactory::getInstance()->createObject(self.get(), &desc);; if (obj==0); {; std::stringstream msg;; msg << ""create: component '"" << desc.getName() << ""' of type '"" << desc.getAttribute(""type"","""")<< ""' in node '""<<self->getName()<<""'"" ;; for (std::vector< std::string >::const_iterator it = desc.getErrors().begin(); it != desc.getErrors().end(); ++it); msg << "" "" << *it << msgendl ;; return NULL;; }. return obj ;; }. Node::SPtr createChild(Node::SPtr& node, const std::string& name, const std::map<std::string, std::string>& params={}); {; BaseObjectDescription desc(""Node"", ""Node"");; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }; Node::SPtr tmp = node->createChild(name); ; tmp->parse(desc);; return tmp;; }; }. Node::SPtr createRootWithCollisionPipeline(const std::string& responseType); {; root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901:309,simpl,simple,309,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901,2,['simpl'],"['simple', 'simpleapi']"
Usability,"The pull-request #95 contains code that automatically install the dispatcher needed in tests. ; So normally it is not needed any more to clearHandlers (unless you really want a specific behavior). . EDIT: The Pull request #95 was not clean so I did a new one, sorry for the noise.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/94#issuecomment-265592897:137,clear,clearHandlers,137,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/94#issuecomment-265592897,1,['clear'],['clearHandlers']
Usability,"The suggested change is much better, thank @jnbrunet for all the pr helping to make sofa more usable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1652#issuecomment-742387960:94,usab,usable,94,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1652#issuecomment-742387960,1,['usab'],['usable']
Usability,"The unit tests failure came from the fact that the order of the files changed in the CMakeLists.txt. It highlights the facts that `EXPECT_MSG_EMIT` works only if `MainGtestMessageHandler` is added to the `MessageDispatcher`. But `logging_test.cpp` calls `clearHandlers`. Since `logging_test.cpp` is now sorted before `FileSystem_test.cpp`, it clears the message handler required by `FileSystem_test.cpp`. The message handler must be added in any case, and not relying on the fact that it might have been added earlier.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1479260603:255,clear,clearHandlers,255,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1479260603,2,['clear'],"['clearHandlers', 'clears']"
Usability,"There is a primary template class that can act on any type (not just Data). In this case, the class is a simple proxy.; A second implementation partially specializes the class for vector types. Again, no need to be a Data. The type needs to implement the `begin` and `end` methods, and the `[](int)` operator, to be considered a vector type.; Finally, a third implementation partially specializes the class for Data. This specialization uses one of the first two implementation: `template<class T> class ReadAccessor<Data<T> > : public ReadAccessor<T>`.; We can say that accessors are meant to be used for Data only, but they need the implementations for any type (the type that is contained by the Data). And those implementations can be tested, even if they are not used. Worth to be noted:; `std::vector` is of course considered as a vector type. If I want to use it through an accessor, it matches the partial specialization for vector types. However, accessors for vector types require the type `Size` in the vector type (there is an alias). `std::vector` has not such a type, so the compilation fails. Accessors to vector types can be used only for `sofa::type::vector` (and its derived types). Conclusion: ; 1) there is a discrepancy between the `is_vector` type trait and the requirements of the accessors.; 2) Write `ReadAccessor<std::vector<Real> >` or `ReadAccessor<Data<std::vector<Real> > >` does not compile. To fix this behavior, I'll suggest in another PR something like; ```cpp; using Size = std::conditional_t<hasSizeSize<T>::value, T::Size, T::size_type>;; ```. I think the read-only flag has nothing to do with the accessors. I think it is related to the GUI only.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3234#issuecomment-1228215278:105,simpl,simple,105,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3234#issuecomment-1228215278,1,['simpl'],['simple']
Usability,"There was a SVector<T> class added in sofa::helper simply to change the stream operators to use commas to delimit values and [ ] to delimit the vector itself (allowing for vectors inside vectors), but I don't like this design because the type itself is different affecting all the code that uses it...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/21#issuecomment-250735840:51,simpl,simply,51,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/21#issuecomment-250735840,1,['simpl'],['simply']
Usability,"These two components were added as a tool to smooth the transition between the use of hard-coded alias in our code base to ""no alias"" at all. The underlying idea was to propose our users, and more specifically the one complaining about the disappearance of the alias they are using, a simple way to restore it (if they don't want to update their complete scene base). . About the fact is it not used... this is not surprising as we are not removing the aliases as it was planned and when we do it we are updating all the scenes in our code base (removing the need for MakeAlias). I personally think that the approach proposed in (#PR 2512: https://github.com/sofa-framework/sofa/pull/2512) is much elegant compared to the MakeAlias (and would advocate to remove MakeAlias when something similar to 2512 is merged) . In any case (either with MakeAlias *or* the Import component) hard-coding multiple aliases for a single component in our c++ code is an UX mistake while letting user specify their aliases is an UX feature, so I would be more in favor for having a clear roadmap to remove the aliases.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3353#issuecomment-1265109648:285,simpl,simple,285,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3353#issuecomment-1265109648,4,"['UX', 'clear', 'simpl']","['UX', 'clear', 'simple']"
Usability,This PR is connected with:; https://github.com/sofa-framework/sofa/issues/61. I refresh the build to see if this still work then integrate it as no one gave negative feedbacks. ; [ci-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/80#issuecomment-267016624:166,feedback,feedbacks,166,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/80#issuecomment-267016624,1,['feedback'],['feedbacks']
Usability,This PR is so simple I cannot imagine anything that would go against its fast merging.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/282#issuecomment-305491712:14,simpl,simple,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/282#issuecomment-305491712,1,['simpl'],['simple']
Usability,"This PR seems to include several major changes (ptr / include vs typedef). All directly or indirectly related to the simplification of the headers. Could you also explain if we earn something by the change on typedef (perf, etc) or is this in prevision for c++20 modules? is this lightening the compilation?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1509#issuecomment-704844429:117,simpl,simplification,117,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1509#issuecomment-704844429,1,['simpl'],['simplification']
Usability,This PR was considered to simplify the dev of #2777 but it is no longer required.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1534342157:26,simpl,simplify,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1534342157,1,['simpl'],['simplify']
Usability,This include PR #389 #407 #396 ; It would be nice to have feedback..otherwise...well after merge it will be to late ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/346#issuecomment-330655449:58,feedback,feedback,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-330655449,1,['feedback'],['feedback']
Usability,This is connected but as the Image_png is not inheriting from Sofa_test then no. ; Maybe #96 also fix the test but this is more a side-effect. Actually I planned to make a future pull-request in which I will unify all the *_test ; to inherits from sofa_test and removing all the clearHandler/addHandler but this ; is not done yet. But as I don't know when I will have time for that I prefer to have ; this PR merged (to remove the failing test).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/92#issuecomment-265831479:279,clear,clearHandler,279,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/92#issuecomment-265831479,1,['clear'],['clearHandler']
Usability,"This is how I would do it:. 1. Separate the `SceneCheckMissingRequiredPlugin` class into 3: 1) an abstract base class, 2) a derived class printing the XML summary, 3) a derived class printing the Python summary.; 2. Move the XML class near the XML scene loader; 3. Move the Python class in SofaPython3; 4. Add (optionally) a new instance of the classes in each scene loader (see `void addListener( Listener* l )`). I admit this is quite complex to do. The reason is that all the scene checkers are all grouped in the same module, and `SceneCheck` is not in Core (but it could be). In any case, I am uncomfortable with the idea to have a scene checker for Python in the core. Somehow, it should be in SofaPython3. Another case to support is simpleapi :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3033#issuecomment-1155193405:740,simpl,simpleapi,740,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3033#issuecomment-1155193405,1,['simpl'],['simpleapi']
Usability,"This is pretty close to what I had in mind. Maybe call (or alias) the component with simply... ""MarchingCube"". It would become easy to find for everybody. Like you said, at the same time we could clean (refactor, delete) the other implementations of MarchingCube variations . Then a simple grep on the code from a new Sofa user would outline the ""MarchingCube"" component and welcome him in the community with joy :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/496#issuecomment-339581638:85,simpl,simply,85,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/496#issuecomment-339581638,2,['simpl'],"['simple', 'simply']"
Usability,"This issue will be closed as SparseGrid is working as intended (even if it is not really clear); Excerpt [SparseGridTopology.h](https://github.com/sofa-framework/sofa/blob/c05ff12d4540a7b0f62052583f318090bfe91c31/SofaKernel/modules/SofaBaseTopology/src/SofaBaseTopology/SparseGridTopology.h#L44) :; ```; A sparse grid topology. Like a sparse FFD building from the bounding box of the object. Starting from a RegularGrid, only valid cells containing matter (ie intersecting the original surface mesh or totally inside the object) are considered.; * Valid cells are tagged by a Type BOUNDARY or INSIDE; ```; Closing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1974#issuecomment-834199786:89,clear,clear,89,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1974#issuecomment-834199786,1,['clear'],['clear']
Usability,"Timeout on tests was disabled in 2bc5db53 with commit message ""I have the intuition that this timeout mess might be the reason why continuous builds on Windows are so long. Let's see...""; Should we re-enable this?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033:74,intuit,intuition,74,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033,1,['intuit'],['intuition']
Usability,"To anyone (@guparan and @hugtalbot, @fredroy, @bcarrez ) Can you please check how the formatting sheet should be updated to stick the the sofa guidelines (or withdrawn some rule from the guidelines) so we have an up-to date sheet to use.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353082986:143,guid,guidelines,143,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353082986,2,['guid'],['guidelines']
Usability,"To be clear, the simulation is not slower. The measured durations don't have overhead. The time consuming part due to the GUI is not measured. So, you are right, the percentages are accurate, but the durations also. It just takes time to display them.; I agree that optimizing this tool is not a priority. This issue is to keep it in mind.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2142#issuecomment-853001162:6,clear,clear,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2142#issuecomment-853001162,1,['clear'],['clear']
Usability,"To be honest, I don't think this INI file should be in the Sofa API, but more on the application side (GUI, python or whatever). The API should simply be giving the FFMPEG path by the application.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1177#issuecomment-540453199:144,simpl,simply,144,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1177#issuecomment-540453199,1,['simpl'],['simply']
Usability,"To be noted, this change would only work in XML : SimpleAPI or Python do not change the ""isSet"" property as does the XML. I investigate on this currently",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4876#issuecomment-2275612706:50,Simpl,SimpleAPI,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4876#issuecomment-2275612706,1,['Simpl'],['SimpleAPI']
Usability,"To cite Jeff Johson from GUI-Bloopers:; ""An even more blatant mistake is when designers put the same command onto different menus, but label it differently ... It is fairly serious because users almost always assume that differently labeled commands invoke different function"". . "" Another problem with putting the same command on multiple name is that it misleads users into believing that the application is more complex than it really is"". On my side I not that Jeff Johson is right and this is exactly the behavior I observed with new-comers to sofa. They are always puzzled and annoyed but the alias and this generates a lot of troubles and frustration. . So I think from an usability point of view this a bigger deal than what we, as developper, are thinking. . To improve the situation maybe we could: ; - each time an alias is used print a message using msg_info. This message should say:. ```; [INFO] Using of the data ""rest_position"" which is an alias (http://thedoctosofa/alias) pointing to the ""position' data field. To remove this message you can replace in myscele.xml:30 :; ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - each time an alias is used to for backward compatibility from previous name we should print a message using msg_warning:. ```; [WARNING] Using of the data ""rest_position"" is now deprecated. ; To remove this message you must update your scene and replace in myscele.xml:30 : ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - indicate in the GUI the alternative names (because some user may search the alias name in the GUI) ; - we could also totally remove the addAlias from the sofa core (unless for developement convenience) and implement a component that explicitely give data alias in a scene (I don't know if this is hard to implement) ; Maybe something like:. ```; <DataAlias src='@position.postion' 'rest_position'> ; <ComponentAlias src='OGLModel' dest='VisualModel'>; ```. At ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194:680,usab,usability,680,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194,1,['usab'],['usability']
Usability,"To keep history simple, I will push your commit manually and close this PR afterwards.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/433#issuecomment-333822629:16,simpl,simple,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/433#issuecomment-333822629,1,['simpl'],['simple']
Usability,To me adding more and more hard coded drawing function by copy-pasting other's drawing function in every components is not desirable. . I see two better solutions: ; 1) the drawing code & related datafield should at least be moved in a separated c++ object to factor rendering & UX. ; 2) the drawing code & related datafields should be in a separated sofa component so they can be compose in the scene.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4945#issuecomment-2325930280:279,UX,UX,279,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4945#issuecomment-2325930280,1,['UX'],['UX']
Usability,To me it is important to clarify (a one more ambiguity) about sofa where the same code is used for both editing scenes and for final scene rendering in a simulator application. . To me these two are different concerns which should be clearly separated in our code base. ; Currently the same code is use for both concerns which make things very confusing while it may be organized that way:; - The 'final scene' rendering code should be externalized from the objects (from the draw/drawVisual function) and put in a specific plugin. The plugin may contain a complete rendering stack using whatever API. Of course ones that do not want not to use this code can just don't use it and if nobody wants it nobody implement it. . - The 'in-editor' rendering is a bit different as we need it for at least to implement runSofa/runSofa2 editing features. So I think this rendering code will still need to be provided (probably as part of runSofa more than of Sofa). . One my side one big difference between the 'in-editor' and 'scene' rendering is that ; the 'in-editor' rendering code shouldn't appears in the scenegraph.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/678#issuecomment-396846626:234,clear,clearly,234,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/678#issuecomment-396846626,1,['clear'],['clearly']
Usability,"To me, the real question is do we want to keep float+double at the same time?; I.e. do we want to be able to have double dofs mapped from float dofs themselves mapped from double dofs?. A simple typedef for SReal would be so easy... Otherwise the graal would rather be to keep only float everywhere, and having just a few double where it is really necessary for numerical precision.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/495#issuecomment-339577323:188,simpl,simple,188,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-339577323,1,['simpl'],['simple']
Usability,"UX is not perfect : some plugins loaded are in blue in the GUI (the one loaded by the GUI itself).; Even with a tooltip, the user can be a bit confused but this is a dev feature. An issue will be created (double mechanism of plugin loading)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3109#issuecomment-1190072887:0,UX,UX,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3109#issuecomment-1190072887,1,['UX'],['UX']
Usability,"Update of my suggestion:; - Analyze; - Process; - Mesh; - Rigid (possibly to merge into Process); - Select; - Transform. It ""merges"" your proposals more or less. If no other feedback Fred will do the changes and ... :arrow_down: merge !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2812#issuecomment-1106528695:174,feedback,feedback,174,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2812#issuecomment-1106528695,1,['feedback'],['feedback']
Usability,"VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712792606:107,clear,clearly,107,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712792606,1,['clear'],['clearly']
Usability,"We already talked about that, and indeed you explained very well the nature of the problem and how to solve it. I don't think of a better approach. It is important to note that this pattern needs to be implemented again for classes, derived from BaseObject, and base class themselves. Look at `BarycentricMapping`, derived from `Mapping`, for example: it calls `Inherit1::doBaseObjectInit`, which is actually the same problem that you described. Here also it should be replaced by a ""delegate"" pattern. Currently, the fact that `init()` is no longer virtual is breaking. I had the same problem in https://github.com/sofa-framework/sofa/pull/3242. Do you have an idea to guide the developers in the update of their code?. Finally, I don't like `doBaseObjectInit`, and it is a problem of this pattern: we need to invent new names for delegate methods even though they are similar to the initial method.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252283975:670,guid,guide,670,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252283975,1,['guid'],['guide']
Usability,"We discussed a lot about it...but we never did a PR on that topic probably fearing the refactoring work and the amount of workload it would generates. . > It is important to note that this pattern needs to be implemented again for classes, derived from BaseObject, and base class themselves. Look at BarycentricMapping, derived from Mapping, for example: it calls Inherit1::doBaseObjectInit, which is actually the same problem that you described. Here also it should be replaced by a ""delegate"" pattern. Yes, all call-super need to be fixed that way (which I didn't in the PR), I will not do that unless it is clear we are really going to do such a breaking change in the sofa code base ;) . > Currently, the fact that `init()` is no longer virtual is breaking. I had the same problem in https://github.com/sofa-framework/sofa/pull/3242. Do you have an idea to guide the developers in the update of their code?. I'm not sure I get the point . EDIT: (....I'm reading 3242 to see if I understand). ; EDIT2: the easy non breaking strategy is to use new names for the base virtual function eg: newInit (not sure we want that). (good code use override so if we keep the old name the code will breaks will be detected at compile time) but this is probably not enough... > Finally, I don't like `doBaseObjectInit`, and it is a problem of this pattern: we need to invent new names for delegate methods even though they are similar to the initial method. Instead of ""inventing"" new names for delegates methods I strongly advocate to rely on single and clear name scheme. . Currently I'm doing:; ```console; do _ ClassThatDelegatesToYou _ MethodDelegated; ```; so ```BaseObject::init()``` become ```doBaseObjectInit()``` (which I interpret as ""do"" the init as requested by BaseObject). . The underlying idea of the naming scheme is that with a first sight we get a lot of information... the (do) show the intention of the code and the pattern used, while the class's name indicates where to look at to get docum",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252323162:610,clear,clear,610,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252323162,2,"['clear', 'guid']","['clear', 'guide']"
Usability,"Well I found a fix, it involves `sys.excepthook` to register a toplevel handler for uncaught python errors. In this case I simply abort the test. We should be fine now, but just in case we should also:. 1. limit logging size; 2. limit simulation time for tests. I'll look into the second part. And again, my deepest apologies.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289694371:123,simpl,simply,123,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289694371,1,['simpl'],['simply']
Usability,"Well spotted @jnbrunet :+1: . This is due to the fact that SofaSimulationCore is part of the SofaFramework package and NOT the SofaSimulation package.; I think I wanted to make things simpler by installing SofaSimulationCore under SofaSimulation but I forgot to set the target_include_directories accordingly (as you saw by yourself). I think the most consistent solution is to install SofaSimulationCore back in SofaFramework by setting, in sofa/simulation/CMakeLists.txt, `sofa_install_targets(SofaFramework ${PROJECT_NAME} ""SofaFramework/sofa/simulation"")`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540482203:184,simpl,simpler,184,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540482203,1,['simpl'],['simpler']
Usability,"Well, I guess this isn't thread safe. . One solution could be to simply remove these static variables and create one loopup table per object created (using a good old private class member). It will duplicate the lookup table for each class instance, but seriously, how many `DefaultStyleMessageFormatter` objects can be created in your typical simulation :-P",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/642#issuecomment-384919339:65,simpl,simply,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-384919339,1,['simpl'],['simply']
Usability,"Well, runSofa was not really following guidelines on that :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/369#issuecomment-324327683:39,guid,guidelines,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/369#issuecomment-324327683,1,['guid'],['guidelines']
Usability,"Well:; - `doLoad()` was called three times, without clearing the lists (e.g. d_position, d_tetra...). So I had duplicated positions, triangles and tetra in my scene, which caused failures. Those calls seemed to be triggered by `addUpdateCallback` in `MeshLoader`.; - the transforms wasn't called three times, so the last positions were not transformed.... but that's not really important I guess. After digging, I found that using `getWriteOnlyAccessor()` to access the `d_positions`... instead of `beginEdit()`, like it was done in most other loaders, reduced this number of calls, which fixed everything for me. I should also mention that my scene was failing at init (when loading the scene).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713100804:52,clear,clearing,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713100804,1,['clear'],['clearing']
Usability,"What is the ""daccord repository""?. I would be happy to talk about saving a sofa scene (and to help making it work). first: indeed that's critical and it would do most of the job. second: most of the time these are other ways to describe existing Data (e.g. the Data 'translation' is a Vec3 , but the parse function is able to read scalars 'tx', 'ty' and 'tz'). In that case the Data ""translation"" is modified and should be saved. In Fact we could simply forbid parsing stuff that is not filling existing Data. third:; 'src' is not a problem, it is simply a way to automatically link Data together, so if a Data is modified, it will be saved (the saved scene would not have the 'src' arguments, but all the explicit Data links).; 'template' is not a problem, it is already working (you just have to always export the template name); 'name' is already a data.; what is 'type'?. I would add that saving a scene in the middle of a simulation could bring more problems:; - the states (pos,vel,rest_pos) of every *independent* dofs (only the mechanical objects at the roots of the mapping graph) should be exported.; - maybe others stuffs to find (external_forces of every dofs?); - maybe Data links broken by a copy-on-write should be exported.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/41#issuecomment-268987556:447,simpl,simply,447,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/41#issuecomment-268987556,2,['simpl'],['simply']
Usability,"While refactoring a bit, I also stumbled upon the `typedef` plugin, which automatically couples every potential test file with every single include file through `<typedef/Sofa_typedef.h>`. Why is there such a plugin? Why not simply have plugins define their own `typedef.h`? . And more importantly why are we aggregating typedefs *across* modules boundaries? This completely defeats modularity which in turn complicates refactoring quite a lot!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172:225,simpl,simply,225,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172,1,['simpl'],['simply']
Usability,Why there is not CI feedback ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1253#issuecomment-610312311:20,feedback,feedback,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1253#issuecomment-610312311,1,['feedback'],['feedback']
Usability,Without feedback of yours @courtecuisse and @JeremieA this will be merged tomorrow (7 days since we poked you),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/276#issuecomment-306526433:8,feedback,feedback,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/276#issuecomment-306526433,1,['feedback'],['feedback']
Usability,"Wouldn't it make sense to alias the std container to sofa::helper ? . So that the general guideline could be to always use sofa::helper::* and not ""if your are using a list then use std::list, if it is a vector then use a sofa::helper::vector, ..."". . More generally ; - it would make the source code more consistent ; - it would ease newcommer's life to get into sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/107#issuecomment-270331991:90,guid,guideline,90,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/107#issuecomment-270331991,1,['guid'],['guideline']
Usability,"Wow, UX improvements are always so impressive. Especially when it comes with a demo :). +1, the scene graph is so much more readable with this change.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2356#issuecomment-925453020:5,UX,UX,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2356#issuecomment-925453020,1,['UX'],['UX']
Usability,"Wow, didn't expect that much interest :) My proposal for geometric average just came from intuition. There acutally may be users out there that have tables of friction values for material pairings, so we might want to consider that use case too. Here's a try:. We introduce a new ""material number"" property attached to collision models which could then be used as indices for looking up coefficients in a symmetric matrix within the ContactManager. An undefined material number could be mapped to 0 by default. Negative values indicate cells, whose friction coefficient has not (yet) been determined . * querying unset cells during contact creation triggers a computation from the locally defined mu values, using one of the mentioned heuristics (AVG, GEOMETRIC, MIN, MAX...). This mechanism maintains backwards compatibility with existing simulations, and it preserves the ability to distribute coefficient definitions across the simulation tree.; * presetting the friction coefficients matrix directly provides a way to override any local definitions via mu; * having a freely modifiable matrix covers all possible use cases. The ""material number"" concept might also come in handy in other circumstances.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/81#issuecomment-265756690:90,intuit,intuition,90,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/81#issuecomment-265756690,1,['intuit'],['intuition']
Usability,"Yep, drawText could be enhanced, especially by changing the texture containing the letters.; Or directly generating the bitmaps by using libfreetype (http://learnopengl.com/#!In-Practice/Text-Rendering)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/62#issuecomment-262460350:157,learn,learnopengl,157,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/62#issuecomment-262460350,1,['learn'],['learnopengl']
Usability,Yes exactly. Normally runing a simple cmake with the desired flags to activate or deactivate some plugins will be enough. All dependency are met for most of the plugins.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4230#issuecomment-1758196797:31,simpl,simple,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4230#issuecomment-1758196797,1,['simpl'],['simple']
Usability,"Yes the method exists... but, contrary to the XML loader, the SofaPython3 scene loader does not use the setInstanciationSourceFileName to set the filename associated with the root node. ; This can be done in a simple PR at SofaPython3. . EDIT: I made a quick pr to for SofapythoN3: https://github.com/sofa-framework/SofaPython3/pull/271",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3033#issuecomment-1155095712:210,simpl,simple,210,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3033#issuecomment-1155095712,1,['simpl'],['simple']
Usability,"Yes, I kind of hijacked the PR to open general discussion, but as my first line was saying:. ""The existing code makes the assumption we only want Vec3 and Rigid3, the PR builds on that assumption to make the implementation cleaner and clearer. The changes dones are relevant and can probably merged as-is."". All what follow is probably for future PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1188825154:235,clear,clearer,235,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1188825154,1,['clear'],['clearer']
Usability,"Yes, you are right about the path when GuiDataRepository is instanciated !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368870090:39,GuiD,GuiDataRepository,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368870090,1,['GuiD'],['GuiDataRepository']
Usability,"You are clearly in a dev state, each time you push a commit it triggers a new build on the CI. I'll put the flag wip again until you tell me that you've finished your fixes to avoid loading the CI.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2084580463:8,clear,clearly,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2084580463,1,['clear'],['clearly']
Usability,You are right (once again).; I just pushed a new proposition where nothing is done in your back anymore.; You simply have to call `SofaPython.unloadModules()` manually where you want unload the modules.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/202#issuecomment-286384827:110,simpl,simply,110,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/202#issuecomment-286384827,1,['simpl'],['simply']
Usability,You can find example in:; - SimpleApi.cpp in the createObject function; - Binding_BaseContext in the createObject_impl function,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/939#issuecomment-465731199:28,Simpl,SimpleApi,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/939#issuecomment-465731199,1,['Simpl'],['SimpleApi']
Usability,"You can simply start a python sofa scene using the main sofa executable, either through `File/Open` or from the command line. . A simple scene goes like this:. ```python; def createScene(node):; child = node.createChild('childname'); object = child.createObject('MechanicalObject', name = 'mobject', size = 1); ```. Please see the docs for more details.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/400#issuecomment-330498906:8,simpl,simply,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/400#issuecomment-330498906,2,['simpl'],"['simple', 'simply']"
Usability,Your remarks are taken into account @IPeterlik :); let's see if any further feedback,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/556#issuecomment-356127976:76,feedback,feedback,76,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/556#issuecomment-356127976,1,['feedback'],['feedback']
Usability,"[ci-build][with-all-tests]. > Don't you think that moving `errF` and `tempF` out of the loop is enough? I would test to only resize them in the loop. The underlying memory allocation should not happen a lot. My suggestion is because I think it is simpler to understand compared to the buffer implementation. I will try that 👍. > ; > In any case, I think the condition `if (nb > bufferSize)` is not necessary. Thats what I was thinking but not sure 🧐",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4195#issuecomment-1733123460:247,simpl,simpler,247,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4195#issuecomment-1733123460,1,['simpl'],['simpler']
Usability,"```; void NarrowPhaseDetection::endNarrowPhase(); {; for (auto it = m_outputsMap.begin(); it != m_outputsMap.end();); {; DetectionOutputVector *do_vec = (it->second);; if (!do_vec || do_vec->empty()); {; if (do_vec); {; do_vec->release();; }; m_outputsMap.erase(it++);; }; else; {; ++it;; }; }; }; ```. The intended behavior of this is ""if the vector is empty, or it's a nullpointer, remove it from the map. If it is not a nullpointer, also release the vector"", right?. Since the `do_vec->clear()` is in `beginNarrowPhase`, the vector is never released correctly.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256642333:489,clear,clear,489,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256642333,1,['clear'],['clear']
Usability,"`computeStressAcrossDirection` was clearly for tearing, are you using it yourself @epernod?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2706#issuecomment-1057066085:35,clear,clearly,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2706#issuecomment-1057066085,1,['clear'],['clearly']
Usability,"`sofa::helper::io::Mesh*` has been deprecated since many years, replace by `MeshLoader` components, it would be indeed good now to clean it up ;); The biggest chunk of work required is to remove all the `""filename""` Data still around in quite a few components (BaseMeshTopology, MechanicalObject, DiagonalMass, UniformMass, VisualModelImpl, SpringForceField, RigidMapping, RigidRigidMapping), which would be easy except that we need clear warnings if an XML is loaded still using this, as those components are used everywhere. A quick search in Sofa examples directory finds 500 instances of OglModel with a filename or fileMesh attribute...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/42#issuecomment-261508845:433,clear,clear,433,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/42#issuecomment-261508845,1,['clear'],['clear']
Usability,"actory. - Regarding the question of linking and automatic deriving of data-types for Outputs my ideas are not as concrete, but maybe helpful. For me there exist two cases:. 1) The Output of the PSDE is connected to an Input of a sofa-object that has static datas, e.g., sofa-objects whose code is written in C++. An example for such an object would be MechanicalObject (MO) that always has the same data (position, velocity, force, …). 2) The Output of the PSDE is connected to a scripted sofa-object, like another PSDE or similar. For case 1.:. It could be possible to define a special BaseData with a name but vacant type. This is a kind of “forward declaration” for the Output. Then, by extending the linking mechanism one could think of the following: At the time of parsing, a sofa-object (e.g. MO) will establish the link between one of its Inputs to the Output of a PSDE (i.e. PSDE->MO). Since the type of the Input is clear (we have static sofa-object whose BaseData doesn’t change) one could at this time create the clone and replace the BaseData with vacant type at the PSDE with the desired one. After that, this BaseData for the Output is valid and can be linked to in a normal way. . I don’t think this is especially dangerous, because this would not be allowed after parsing(). This also handles the problem that the sofa-objects involved would need to be created before the PSDE is created. In this way they can be created after the PSDE. This doesn’t cause confusion for the user neither, because he is aware of the types of the datas. Yet, overall this solution is a little bit complicated because it relies on changing the behavior of linking. Linking has to be extended to detect whether the Output that is being linked to has a valid type or is vacant. Overall I’m not 100% confident this kind of approach would work. For case 2.:. In this case one kind of remains in the “python-world” and it is not necessary to have an exhaustive set of possible types, I think. It would be eno",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416:2297,clear,clear,2297,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416,1,['clear'],['clear']
Usability,"alright, that should fix the failing test. Although, the test doesn't reflect very well the behavior of the component. the SimpleDataEngine *must* exclusively be used in cases where the process performed the engine has to be applied no matter which datafield is set to dirty.; Currently, the engine would even be called if NO data is set to dirty, which is also the case in the core::DataEngine if there's no check performed on the DataTracker. I believe this is a mistake. I think that doUpdate() should be called iff at least 1 data field is dirty.; What do you think?. concretely, it means that in DataEngine_test.cpp, line 151 would assert FALSE",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/760#issuecomment-424285945:123,Simpl,SimpleDataEngine,123,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/760#issuecomment-424285945,1,['Simpl'],['SimpleDataEngine']
Usability,"and about the process, I think this PR is a very good test case for everyone to give it a try.; Regarding the feedback we should be able to package it together as a public plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-400260057:110,feedback,feedback,110,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-400260057,1,['feedback'],['feedback']
Usability,"aseLoader.h>; #include <sofa/core/objectmodel/Event.h>. class Sequence : MultiLink {} ;. Sequence<sofa::core::BehaviorModel> behaviorModel;; Sequence<sofa::core::BaseMapping> mapping;. Sequence<sofa::core::behavior::OdeSolver> solver;; Sequence<sofa::core::behavior::ConstraintSolver> constraintSolver;; Sequence<sofa::core::behavior::BaseLinearSolver> linearSolver;. Single<sofa::core::topology::Topology> topology;; Single<sofa::core::topology::BaseMeshTopology> meshTopology;; Sequence<sofa::core::topology::BaseTopologyObject> topologyObject;. Single<sofa::core::BaseState> state;; Single<sofa::core::behavior::BaseMechanicalState> mechanicalState;; Single<sofa::core::BaseMapping> mechanicalMapping;; Single<sofa::core::behavior::BaseMass> mass;; Sequence<sofa::core::behavior::BaseForceField> forceField;; Sequence<sofa::core::behavior::BaseInteractionForceField> interactionForceField;; Sequence<sofa::core::behavior::BaseProjectiveConstraintSet> projectiveConstraintSet;; Sequence<sofa::core::behavior::BaseConstraintSet> constraintSet;; Sequence<sofa::core::objectmodel::ContextObject> contextObject;; Sequence<sofa::core::objectmodel::ConfigurationSetting> configurationSetting;. Sequence<sofa::core::visual::Shader> shaders;; Sequence<sofa::core::visual::VisualModel> visualModel;; Sequence<sofa::core::visual::VisualManager> visualManager;; ```. This is why I'm searching for a way to fix SingleLink/MultiLink to make it forward declaration friendly. . More fundamentally the Link implementation is interesting but it is also very complex. This complexity and its consequence in term of maintainability (very few of the sofa developpers can understand it easily) and compilation cost make me wonder if we shouldn't investigate/consider simpler approach. . So to anyone @JeremieA, @bcarrez , @maxime-tournier , @matthieu-nesme, @hugtalbot , @StephaneCotin, @guparan , @ErwanDouaille ... if you have idea for a simpler and/or forward declaration friendly approach help would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104:2978,simpl,simpler,2978,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104,2,['simpl'],['simpler']
Usability,"at least I would push for simplicity here, like if msgInfoLevel==InfoMessageLevel::MUTED, then no info message goes to the component stack, ; when using: ; msg_info () << ""I print if I am not muted"" ; . the _when version can be kept for fine tuning (I personally find it overkill) . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 17 Février 2017 13:21:47; > Objet: Re: [sofa-framework/sofa] Cleaning the way we handle message in Sofa.; > (#179). > Almost done... the f_printLog stuff is replaced with d_msgInfoLevel.; > Backward compatibility is implemented as well as deprecation warning. > This allow to write the follow things:; > msg_info_when ( d_msgInfoLevel.getValue() != InfoMessageLevel::MUTED ) << ""I; > print often"" ; msg_info_when ( d_msgInfoLevel.getValue() !=; > InfoMessageLevel::MUTED ) << ""I print often"" ;. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281043493:26,simpl,simplicity,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281043493,1,['simpl'],['simplicity']
Usability,"ate was somehow linked to its input topology. The solution is not to go back to the old (broken) behavior, but instead to understand what is the actual root cause here. Theoretically, if the logic described above was behaving correctly, the output state would not be able to see the input topology because of the use of getActiveMeshTopology() and the fact that the mapping sameTopology() method would return false (thanks to its ""safe"" default implementation). The reason why this incorrect link was being created was because the mapping was created in the wrong Node. Normally, Sofa requires mappings to be in the same node as its output state. This is important in order to know for example which mapping is associated to which state (at least prior to the introduction of reflective Links, and still required because Mapping->State links are only one-way). This is used for example by visitors to know if a state is to be considered as real DOFs (because of the absence of a mapping in its node). But the MappingTest initialization code was not respecting this requirement, instead putting the mapping in the root node along with the input state (and the topology). Only the output state was in the child node. In this case, getActiveMeshTopology() from the output state does not see any mapping in the child, allowing to go to the parent to find a topology. It assumes that the Mapping in the root node is there to write to the state/topology of the root node, so it is not considered as something that would block the topology to remain active. Hence the wrong link being created, and the bug. The fix (beaaaf5) is a simple one-line change in MappingTest, creating the mapping in childNode instead of root, which should have been the case to respect Sofa's conventions (but which are unfortunately not checked/asserted by anyone). Hopefully all is well now. It's difficult to know for sure because not-disabled tests are still failing on my computer (but they are also failing on the master...)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201:3429,simpl,simple,3429,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201,1,['simpl'],['simple']
Usability,"cool @fredroy . > Note that you need to do one step before being able to see the boxes (dont know if it is on purpose or not). this might clearly be computed at first step, but I do not see why it could not be done at init..",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3658#issuecomment-1433788701:138,clear,clearly,138,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3658#issuecomment-1433788701,1,['clear'],['clearly']
Usability,"copy pasting discussion (+ automatic translation) for the record:. > The bboxes are actually used to calculate the znear / far of the camera but in a well licked interface you want to be able to select nodes / components in the scenegraph and have a visual feedback in the 3D scene in SQQ we do this by displaying the bbox of the selected object and its descendants. > if you calculate only 1 global bbox in the camera, you lose this granularity. > If we want to fix the bbox at the beginning we do it via another component (""BoundingBox"") connected to the bbox field of ddgnode. To avoid having a boolean indicating if we want to update or not ... we clean the system of ""parent"" of Data to implement the following mechanism:; > - if connected parent the data is copied from the parent.; > - if have setValue the value of a data field which has a parent ... the relationship is broken.; > - if you want to cut the relationship, one can use the setParent (null) function.; > - the visitor who recursively updates the bboxes check if the box has a settled parent to avoid calling setValue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981:257,feedback,feedback,257,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981,1,['feedback'],['feedback']
Usability,"d idea to now force the str() function to return the path just to make the createObject function happy. In this version prevent us to warn user there is a conversion done and that if they change the str() because, well its python they can do that, it may break something. This version is imposing that people writing a 'str' function have to keep in mind that (even if they don't know nothing about that) it must work if their object is called in createObject. (see later I try to explain better the problem). ; So to me this version will generate a lot of subtile problems and backward compatibility issues. . 3) The third version is close to use the str() in term of design but it makes it explicit that if an object want conversion to be used in the parameters of the createObject function it have to follow a specific protocol...this is done by implementing a dedicated function (eg: getAsACreateObjectParameter()). The implementation of this function for BaseObject and Sofa.Data could simply link to getLinkPath(). But if you have your own 'complex' object and want it to be used as a parameter in createObject you can just implement your own conversion schema. So fundamentally it is like 'str' but with a specific semantic saying that the function returns a string ""that can be parsed as a Sofa parameter"". . This approach has several advantages:; - it does not requires to have a lot of ""hard-coded"" test into the createObject function. ; - it does not mess with the existing str() function and there is no risk to break existing scenes or applications and we haven't to worry about backward compatibility. ; - it makes things very explicit, because people that want to have their object used in createObject have to implement it instead of ""assuming"" that by default any object's str function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate p",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:1837,simpl,simply,1837,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575,1,['simpl'],['simply']
Usability,"d in createObject have to implement it instead of ""assuming"" that by default any object's str function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate problems and teach them how to fix their scenes. . As you said Maxime, ""In python semantic of str is to provide a concise representation of an object as a string, which is exactly what BaseObject.getLinkPath does. "" . A ""concise representation"" is a very flexible/weak semantic with a lot of different meaning that will change depending on the context.; For matthieu (and the Anatoscope fork), a concise representation could be ""5.0""; For you it seems to be ""@/myObject.param"" ; For me it should be ""@/myObject.param=5.0"" ; For others it could be ""Sofa.Data: @/myObject.param=5.0"" . These options are more or less adequate depending on the context...but they are all fully valid description because they match the clearly defined and accepted semantic. This is why I think solution 2 is clearly not the way to go because it change this well defined semantic for something narrower in which the str() function should return something that can be parsed as an argument in the createObject function. Doing so is like forcing anyone passing an object to createObject to modify their str() function to make it work with createObject. . I personally think that as the python specification for str() is very weak it is only a way to generate string to be read by human (that can cope with the inherent flexibility of its specification) but I prefer avoiding it to generate string that have to be processed by a program. When I have to generate string that are ""parsable"" I tend to use specific function with much tighter specification. . @maxime-tournier You are totally right about the recursive aspect...I didn't though about that. My initial worrying was it was transformating a complex structure into a f",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:3559,clear,clearly,3559,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575,1,['clear'],['clearly']
Usability,"dChild(""ball""); ball_node.addObject(""EulerImplicitSolver"", vdamping=0, rayleighMass=0, rayleighStiffness=0); ball_node.addObject(""CGLinearSolver"", iterations=100, tolerance=1e-5, threshold=1e-5). ball_node.addObject(""MechanicalObject"", template=""Rigid3d"", position=[0, 5, 0, 0, 0, 0, 1], showObject=True, showObjectScale=2.0); ball_node.addObject(""UniformMass"", totalMass=10000.0); ball_node.addObject(""SphereCollisionModel"", radius=0.5, group=1); ball_node.addObject(""UncoupledConstraintCorrection""); ```. As a side question: Am I even using the right components? How would you model this scene of a liver with an embedded tumor? I also tested the Heterogeneous-TetrahedronFEMForceField.scn example, but that is even more unstable. When you interact with the object through the mouse, it applies a huge force in the opposite direction. <video src=""https://github.com/sofa-framework/sofa/assets/29635054/dc863ba3-7e55-48e1-8b5d-30d078fd5b88; "" width=""200"" height=""auto"">. I also simplified the liver scene to just the SOFA liver. Same problem with the instability. ```python; import Sofa; import Sofa.Core. PLUGINS = [; ""Sofa.Component.AnimationLoop"",; ""Sofa.Component.Collision.Detection.Algorithm"",; ""Sofa.Component.Collision.Detection.Intersection"",; ""Sofa.Component.Collision.Response.Contact"",; ""Sofa.Component.Constraint.Lagrangian.Solver"",; ""Sofa.Component.Visual"",; ""Sofa.Component.Collision.Geometry"",; ""Sofa.Component.Constraint.Projective"",; ""Sofa.Component.LinearSolver.Iterative"",; ""Sofa.Component.Mapping.NonLinear"",; ""Sofa.Component.Mass"",; ""Sofa.Component.ODESolver.Backward"",; ""Sofa.Component.StateContainer"",; ""Sofa.GL.Component.Rendering3D"",; ""Sofa.Component.Constraint.Lagrangian.Correction"",; ""Sofa.Component.Topology.Container.Dynamic"",; ""MultiThreading"",; ""Sofa.Component.SolidMechanics.FEM.NonUniform"",; ""Sofa.Component.Topology.Container.Grid"",; ""Sofa.Component.IO.Mesh"",; ""Sofa.Component.LinearSolver.Direct"",; ""Sofa.Component.Mapping.Linear"",; ""Sofa.Component.Topology.Cont",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4597#issuecomment-2006525838:7712,simpl,simplified,7712,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4597#issuecomment-2006525838,1,['simpl'],['simplified']
Usability,"e Gui(bottom part), could you copy-paste it ?. Sorry for the delay, here is the log output:; ```; The C compiler identification is Clang 10.0.0; The CXX compiler identification is Clang 10.0.0; Check for working C compiler: /usr/bin/clang; Check for working C compiler: /usr/bin/clang -- works; Detecting C compiler ABI info; Detecting C compiler ABI info - done; Detecting C compile features; Detecting C compile features - done; Check for working CXX compiler: /usr/bin/clang++; Check for working CXX compiler: /usr/bin/clang++ -- works; Detecting CXX compiler ABI info; Detecting CXX compiler ABI info - done; Detecting CXX compile features; Detecting CXX compile features - done; Setting build type to Release as none was specified.; -- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).; Install prefix: /home/giang/sofa/build/install; Adding library Sofa.Config; Using legacy headers is enabled.; Headers from v21.12 are usable, but it is advised to change your code to use the new headers introduced in v22.06.; Adding library Sofa.Compat; Adding library Sofa.Component.Compat; Adding library Sofa.Type; Adding library Sofa.Geometry; Adding library Sofa.Topology; Adding library Sofa.Helper; Found Eigen3: /usr/include/eigen3 (Required is at least version ""2.91.0"") ; Found Json: /home/giang/sofa/src/extlibs/json (Required is at least version ""3.1.2"") ; Found STB: /home/giang/sofa/src/extlibs/stb ; Found DIFFLIB: /home/giang/sofa/src/extlibs/difflib ; Adding library Sofa.LinearAlgebra; Adding library Sofa.DefaultType; Adding library Sofa.Core; Adding library Sofa.Simulation; Adding library Sofa.Simulation.Core; Adding library Sofa.Simulation.Common; Adding library Sofa.Simulation.Graph; Adding library Sofa.Testing; Found PythonInterp: /usr/bin/python (found version ""3.8.10"") ; Looking for pthread.h; Looking for pthread.h - found; Performing Test CMAKE_HAVE_LIBC_PTHREAD; Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed; Check if compiler accepts -p",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:1035,usab,usable,1035,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815,1,['usab'],['usable']
Usability,"e... which I was not sure we agreed at this point. ; - the existing mecanism to define the target in ObjectFactory.h is buggy because two identical ObjectFactory::register<XX> compiled in different compilation units produces different getTarget() functions. There was an agreement we should remove it, so this PR was a good opporunity to trying such a thing. . Hope this clarify things. EDIT:; I just found a funny bug related to the automatic registration. Because it rely on the use of a backward macro expansion. There is currently more than 20 components that does not have their target properly set.; Eg: DataDisplay.cpp the code is like that:; ```cpp; #include <sofa/core/ObjectFactory.h>; #include <sofa/defaulttype/VecTypes.h>. #include <SofaOpenglVisual/config.h>; #include <SofaOpenglVisual/DataDisplay.h>; #include <sofa/core/visual/VisualParams.h>. namespace sofa::component::visual::model; {; int DataDisplayClass = core::RegisterObject(""Rendering of meshes colored by data""); .add< DataDisplay >();; }; ```. The problem is that the ```SOFA_TARGET``` macro is used in ```ObjetFactory``` but is actually initialized in ```<SofaOpenglVisual/config.h>```; To fix the code it is needed to move the inclusion of the config.h before the one of ObjectFactory so that RegisterObject behave as expected. ; ```cpp; #include <SofaOpenglVisual/config.h>; #include <sofa/core/ObjectFactory.h>; #include <sofa/defaulttype/VecTypes.h>. #include <SofaOpenglVisual/DataDisplay.h>; #include <sofa/core/visual/VisualParams.h>; ```. Given all that, I'm wonder if going for things like ; ```cpp; int DataDisplayClass = core::RegisterObject(""Rendering of meshes colored by data""); .add< DataDisplay >();; .addTargetName(""SofaOpenglVisual""); ``` ; or even:; ```cpp; int DataDisplayClass = core::RegisterObject(); .setClassName(""DataDisplay""), ; .setTargetName(""SofaOpenglVisual""), ; .setDocString(""Rendering of meshes colored by data""); .addCreator<DataDisplay>();; ``` ; Would not make things much more clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-982527615:2441,clear,clear,2441,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-982527615,1,['clear'],['clear']
Usability,"ecide what is good to save or not. This is what SOFA actually does and this behave terribly. ; I see two reason for that:; - there is a lot of component that 'forgot' to set/unset the persistent values.; - it is very hard to identify what is relevant to save, IMO because what is relevant to save is a matter of context of use, a Data 'useless' for one may be very useful for someone else. . This is why I choose to do things in the reversed way and let the client code to select what to save (so that you may eventually implement dedicated widgets to let the user select what to save). . I see at least to different context of use and thus saving strategies. . For my context of use it is more important to save scenes that are as close as possible as the one written by the user. This is why I made the XML loader and the GUI have the responsability to make persistent:; - the value given explicitely in the scene file; - the value specified explicitely in the GUI via the widget or the manipulators; Despite being very simple this work very well and without any risk that some authors breaks the saving because he forgot/decide not to setPersistent(false) in his component (and this happened quite a lot in the past). For your context of use, for which saving a simulated scene is important I think a very simple solution would be to write a visitor to switch all the Data values to persistent. And I would suggest to put this feature to a different entry in the menu (what about ""Export"" or ""Dump"" ?) so that in the same application we can either save or dump the scene with very well defined semantics ? . Now about the fact that some Data editted in the UI can be incompatible with another Data. I will let that for another day because to me this is a much more general UI problem. . Finally to improve a bit the general readability in any context of use we could, when writing big chunk of numbers (like vector.size() > 20) save them in separated files leading to something like: ; <MechanicalO",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495:2126,simpl,simple,2126,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495,1,['simpl'],['simple']
Usability,"elocitySolver.cpp:47: .addAlias(""DampVelocity""); modules/SofaMiscSolver/NewmarkImplicitSolver.cpp:227: .addAlias(""Newmark"");; modules/SofaNonUniformFem/SparseGridMultipleTopology.cpp:41: .addAlias(""SparseGridMultiple""); modules/SofaNonUniformFem/SparseGridRamificationTopology.cpp:43: .addAlias(""SparseGridRamification""); modules/SofaOpenglVisual/OglColorMap.cpp:48: .addAlias(""ColorMap""); modules/SofaOpenglVisual/PointSplatModel.cpp:54: .addAlias(""PointSplat""); modules/SofaPreconditioner/JacobiPreconditioner.cpp:48: .addAlias(""JacobiLinearSolver""); modules/SofaPreconditioner/JacobiPreconditioner.cpp:49: .addAlias(""JacobiSolver""); modules/SofaPreconditioner/ShewchukPCGLinearSolver.cpp:231:.addAlias(""PCGLinearSolver"");; modules/SofaPreconditioner/SSORPreconditioner.cpp:56: .addAlias(""SSORLinearSolver""); modules/SofaPreconditioner/SSORPreconditioner.cpp:57: .addAlias(""SSORSolver""); modules/SofaTopologyMapping/Mesh2PointMechanicalMapping.cpp:60://.addAlias(""SimpleTesselatedTetraMechanicalMapping""); modules/SofaUserInteraction/RayModel.cpp:42: .addAlias(""Ray""); ```; ```; $ grep -rn '.addAlias *( *""' SofaKernel/; SofaKernel/modules/SofaBaseCollision/CapsuleModel.cpp:49: .addAlias(""Capsule""); SofaKernel/modules/SofaBaseCollision/CapsuleModel.cpp:50: .addAlias(""CapsuleModel""); SofaKernel/modules/SofaBaseCollision/CapsuleModel.cpp:51://.addAlias(""CapsuleMesh""); SofaKernel/modules/SofaBaseCollision/CapsuleModel.cpp:52://.addAlias(""CapsuleSet""); SofaKernel/modules/SofaBaseCollision/CubeModel.cpp:44: .addAlias(""Cube""); SofaKernel/modules/SofaBaseCollision/CylinderModel.cpp:48: .addAlias(""Cylinder""); SofaKernel/modules/SofaBaseCollision/CylinderModel.cpp:49: .addAlias(""CylinderModel""); SofaKernel/modules/SofaBaseCollision/CylinderModel.cpp:50://.addAlias(""CylinderMesh""); SofaKernel/modules/SofaBaseCollision/CylinderModel.cpp:51://.addAlias(""CylinderSet""); SofaKernel/modules/SofaBaseCollision/DefaultContactManager.cpp:41: .addAlias(""CollisionResponse""); SofaKernel/modules/SofaBaseCo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/677#issuecomment-398795436:3722,Simpl,SimpleTesselatedTetraMechanicalMapping,3722,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/677#issuecomment-398795436,1,['Simpl'],['SimpleTesselatedTetraMechanicalMapping']
Usability,"factory. . In the following is a simple proposal to replace the problematic code: ; ```cpp; namespace simpleapi; {. BaseObject::SPtr createObject(Node::SPtr self, const std::string& type, const std::map<std::string, std::string>& params={}); {; /// temporarily, the name is set to the type name.; /// if a ""name"" parameter is provided, it will overwrite it.; BaseObjectDescription desc(type.c_str(),type.c_str());; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }. /// Create the object.; BaseObject::SPtr obj = ObjectFactory::getInstance()->createObject(self.get(), &desc);; if (obj==0); {; std::stringstream msg;; msg << ""create: component '"" << desc.getName() << ""' of type '"" << desc.getAttribute(""type"","""")<< ""' in node '""<<self->getName()<<""'"" ;; for (std::vector< std::string >::const_iterator it = desc.getErrors().begin(); it != desc.getErrors().end(); ++it); msg << "" "" << *it << msgendl ;; return NULL;; }. return obj ;; }. Node::SPtr createChild(Node::SPtr& node, const std::string& name, const std::map<std::string, std::string>& params={}); {; BaseObjectDescription desc(""Node"", ""Node"");; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }; Node::SPtr tmp = node->createChild(name); ; tmp->parse(desc);; return tmp;; }; }. Node::SPtr createRootWithCollisionPipeline(const std::string& responseType); {; root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; return root;; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901:1726,simpl,simpleapi,1726,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901,5,['simpl'],['simpleapi']
Usability,"for every BaseProjectiveConstraintSet ""pc"" found. This will set to 0 lines and columns of fixed constraints.; If a mechanical mapping ""m"" is found during the traversal, and m->areMatricesMapped() is false, the traversal stops before entering the subgraph of the mapping. Mechanical mappings step:; In case we have mapped matrices, which is, system matrix of a slave mechanical object, accumulate its contribution to the global system matrix with:; [A]ij += Jt * [A']ij * J; where `A` is the master mechanical object's matrix (top level), `A'` is the slave mechanical object matrix (linked to the top level MO using a mapping) and `J=m.getJ()`; is the mapping relation between the slave and its master. (2) [r_m M + B + r_k K] v; Go down in the current context tree calling `addMBKdx` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings. If the k mechanical parameter is not zero, the `applyDJT` will also be applied.; NOTE: This correspond to the force terms dependent on the velocity, i.e. the damping terms : ; [- r_m M - B + r_k K] v; where K is in fact -K by SOFA's convention, hence the positive (+) sign. (3) [F - T]; Go down in the current context tree calling `addForce` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings.; NOTE: This correspond to the force terms dependent on the displacement, i.e. :; (-Ku + T). Now, the damping and stiffness matrices `B` and `K` are usually sparse. Knowing in advanced that `M` is also sparse (or even diagonal), I would bet that we could optimize these operations `(aM + b B + c K) v`. This is even more important for non-linear systems since a third term of the type `(aM + bB + cK) a` appears and must be computed multiples times per time steps. . Let me know if something is not clear, this part is very un-intuitive and I spent the past 2 weeks trying to understand it to implement non-linear dynamic solvers so it is fresh in my memory !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263:3026,clear,clear,3026,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263,2,"['clear', 'intuit']","['clear', 'intuitive']"
Usability,"good job @coolteemf ; All you have to do is, go on your branch and revert your commit:; ```; # Make sure you are on the right branch; git checkout Improve_MeshBarycentricMapperEngine. # Undo the desired commit; git revert 130a13d. # Update the remote with the undo of the code; git push origin Improve_MeshBarycentricMapperEngine; ```; Cheers",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694692149:186,Undo,Undo,186,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694692149,2,"['Undo', 'undo']","['Undo', 'undo']"
Usability,"he topology state variable with respect to the change in the topology. For example in a `TriangularFEM` this means computing the variables related to the rest configuration when new triangles are added. See [TriangularFEMForceFieldOptim.inl](https://github.com/sofa-framework/sofa/blob/master/modules/SofaGeneralSimpleFem/TriangularFEMForceFieldOptim.inl#L54-L70) for the related code. ; An attempt to uniform this design has been tried in `MechanicalObject`, but stopped because it would have required some other drastic changes, namely that it would no longer be possible to have a `MechanicalObject`, without any `TopologyContainer` of some sort either in its local context or in its parent context.; With the current implementation ( which does not rely on `TopologyData` ) if no `TopologyContainer` is specified, it is therefore implicit that the topology is a point topology, no `PointSetTopologyContainer` is required to describe that fact.; However working with `TopologyData` ( or at least clarifying why ultimately it was decided not to use it ) API to store the state vectors of a `MechanicalObject` would have the benefit of removing the need to call the `resize()` method ( it is usually done during `apply` methods of mapping ).; Ultimately it would also lead to rework the current implementation of `PointSetTopologyContainer`, which can only contain set of contiguous indices ( e.g 0 1 2 3 4 5 ... ) and not any sub set of indices ( e.g 2 6 8 9 12) unlike the other TopologyContainers.; This would lead to at least two clarifications : ; - some forcefields specify the list of the dof indices they contribute to, it would no longer be necessary to do so, they would simply fetch the list of point indices they are supposed to work on from the closest `PointSetTopologyContainer`; - `SubsetMapping` would be deprecated, ( and not `SubsetMultiMapping` which has some other purpose ), since it would be only necessary to describe the point subset of interest that needs to be considered.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672:2378,simpl,simply,2378,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672,1,['simpl'],['simply']
Usability,"he use of doxygen comments and we are in fact mixing two different approaches. Let's name them ""code centric"" and ""doxygen centric"". . In the code centric approach: ; - /// or ///< is used to state that this the comment *is part of the documentation*. ; - // is for any other *non-documenting* comment (eg: commented code). ; With this approach the main focus is that the documentation parts should be easily visible from the source code and that documentation is composed of declaration parts related part (that must fullfill doxygen rules) as well as internal details. ; The added value of using /// or ///< is that developper when they see them clearly knows ""this is part of the documentation"". This aproach is a super-set of doxygen but is not limiting the documentation to only what doxygen understand (the underlying assumption is that we need to document much more than just declaration/api). . The doxygen centric approach is slighly different: ; - // should be used for internal-documentation as well as non-documentating comments; - /// or ///< should be used only for documentation what can be understood by Doxgen to generate html pages. ; Te main focus with this approach is to make very clear what will be use by Doxygen what it will use to auto-generate its public documentation, the counter part I see is that it mix comments and what should be considered as internal documentation. . It is important is of course to have doxygen friendly declaration centric (the public API) documentation ...but it is equally important to have proper documentation for the internal details. ; If would probably do something like that in a new project:; - always use /** */ for documenting public API (what should and must be visible in doxygen, mostly the comment close to declaration) ; - always use /// or ///< for internal details (no requirement that it must be close to declaration) ; - use // or /* */ for other usages. . But given our code base ... I'm not sure which direction we should go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1794#issuecomment-794162417:1527,clear,clear,1527,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1794#issuecomment-794162417,1,['clear'],['clear']
Usability,"hey @maxime-tournier could you provide me some info for the changelog ?; i also add a flag setting your PR as wip, but do not hesitate to change its status to review when the ci is fine and you want feedback. Cheers",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/347#issuecomment-317654029:199,feedback,feedback,199,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/347#issuecomment-317654029,1,['feedback'],['feedback']
Usability,"hi @fredroy, thanks for getting back. I am using Ubuntu 18.04.6 LTS. In `sofaframework/sofabuilder_ubuntu`, I clone the repo `git clone -b v22.06.00 https://github.com/sofa-framework/sofa.git sofa/src` and followed the procedure for `build SOFA on [Linux](https://www.sofa-framework.org/community/doc/getting-started/build/linux/)` and got the same error while running ./runSofa. while using `sofaframework/sofa_nightly_ubuntu:v22.06-full`, I first directly run ./runSofa without building sofa and then with building as earlier but again same error. ; Please also guide me if I have even have to build in second case `(sofaframework/sofa_nightly_ubuntu:v22.06-full)`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3486#issuecomment-1315420671:564,guid,guide,564,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3486#issuecomment-1315420671,1,['guid'],['guide']
Usability,"https://github.com/sofa-framework/sofa/pull/3512 is already merged.; But you could try to add your changes on https://github.com/sofa-framework/sofa/pull/3501. According to my unit test, a simple; ```cpp; if (n == 0); {; return true;; }; ```; makes the job",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3499#issuecomment-1337325939:189,simpl,simple,189,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3499#issuecomment-1337325939,1,['simpl'],['simple']
Usability,https://www.sofa-framework.org/community/doc/programming-with-sofa/guidelines/ is still not formatted appropriately. Any idea @hugtalbot @bakpaul @fredroy ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4695#issuecomment-2084536191:67,guid,guidelines,67,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4695#issuecomment-2084536191,1,['guid'],['guidelines']
Usability,"ils.addObject('MechanicalObject',template='Rigid3d',name='dofTopo3'). InstrumentCombined = rootNode.addChild('InstrumentCombined'); InstrumentCombined.addObject('EulerImplicitSolver',rayleighStiffness=0.2,rayleighMass=0.1,printLog='false'); InstrumentCombined.addObject('BTDLinearSolver',subpartSolve='0',verification='0',verbose='0'); InstrumentCombined.addObject('RegularGridTopology',name='meshLinesCombined',nx=60, ny=1, nz=1,xmin=0.0, xmax=1.0,ymin=0, ymax=0,zmin=1, zmax=1); InstrumentCombined.addObject('MechanicalObject',template='Rigid3d',name='DOFs',showIndices='0',ry=-90); InstrumentCombined.addObject('WireBeamInterpolation',name='InterpolCatheter',WireRestShape='@../topoLines_cath/catheterRestShape',radius=1,printLog='0'); InstrumentCombined.addObject('AdaptiveBeamForceFieldAndMass',name='CatheterForceField',interpolation='@InterpolCatheter',massDensity=0.00000155); InstrumentCombined.addObject('WireBeamInterpolation', name='InterpolGuide', WireRestShape='@../topoLines_guide/GuideRestShape', radius=0.9, printLog='0'); InstrumentCombined.addObject('AdaptiveBeamForceFieldAndMass',name='GuideForceField',interpolation='@InterpolGuide',massDensity=0.00000155); InstrumentCombined.addObject('WireBeamInterpolation', name='InterpolCoils', WireRestShape='@../topoLines_coils/CoilRestShape', radius=0.1, printLog='0'); InstrumentCombined.addObject('AdaptiveBeamForceFieldAndMass', name='CoilsForceField', interpolation='@InterpolCoils', massDensity=0.000021); InstrumentCombined.addObject('InterventionalRadiologyController',name='m_ircontroller',template='Rigid3d',printLog='0',instruments='InterpolCatheter InterpolGuide InterpolCoils',startingPos=[0, 0 ,0 ,0 ,-0.7071068, 0, 0.7071068],xtip=[1 ,0 ,0] ,rotationInstrument=[0, 0, 0 ],controlledInstrument=0,step=3,speed=2 ); InstrumentCombined.addObject('LinearSolverConstraintCorrection',printLog='false',wire_optimization='true'); InstrumentCombined.addObject('FixedConstraint',name='FixedConstraint',indices='0'); InstrumentCombined",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-1345193243:4193,Guid,GuideRestShape,4193,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-1345193243,1,['Guid'],['GuideRestShape']
Usability,"in compile time code, one is dynamic interface API. AbstractTypeInfo is the dynamic interface (with the virtual function). The AbstractTypeInfoDynamicWrapper is a façade to ""wrap"" the compile time TypeInfo type-traits into the virtual one. . The TypeInfo type-traits API has several consistancy issues (probably dating back to pre-c++17 area) mixing a lot of different behavior into a single dynamic API... making things very fuzzy. . In the current status of the PR I just wanted to draft something to have a gimplse of the look and feel of a more modern code architecture (without breaking everything). . Regarding your question about insertion in a vector... the problem is that insert is not a push_back... it means inserting ""somewhere"" which could of course be implemented on vector. But it would requires a serious work on the AbstractTypeInfo API to make all that consistent. ;   | set | map | vector | fixed_array; -- | -- | -- | -- | --; clear() | X | X | X |  ; insert(A) | X |   |   |  ; insert(std::pair<key, B>) |   | X | Y |  ; size() | X | X | X | X; resize() |   |   | X |  ; empty() | X | X | X | X. So in short:; ! IsFixedSizeContainer => clear(), resize(); isContainer => empty(), size(); isSet => insert(A) and !insert(std::pair<>). I drafted the general implementation, to illustrate what the current TypeInfo is really doing and how to refactor it: https://godbolt.org/z/srsq3ExPq; extract:; ```cpp. template<class Info>; class AbstractTypeInfoDynamicWrapper : public BaseAbstractTypeInfo; {; public:; bool size() override ; { ; if constexpr(; Info::IsContainer && ; Info::Properties::IsContainer); return Info::clear();; throw std::runtime_error(""Invalid operation"");; }. bool empty() override ; { ; if constexpr(; Info::IsContainer && ; Info::Properties::IsContainer); return Info::empty();; throw std::runtime_error(""Invalid operation"");; }. void setValueInteger(int index, int value) override ; { ; if constexpr(; !Info::Properties::IsSetContainer && ; Info::Properties::Ty",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1545409905:1177,clear,clear,1177,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1545409905,1,['clear'],['clear']
Usability,it doesn't on mac.... I pushed a simple test on EdgeSetTopologyAlgorithm.; Feel free to do some tests.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/777#issuecomment-422350644:33,simpl,simple,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/777#issuecomment-422350644,1,['simpl'],['simple']
Usability,"it's not compiling on the CI due to incompatibility of gcc 5.4 with C++17; otherwise I would appreciate a feedback from @epernod and @marques-bruno, especially about the updateIfDirty (and no clean dirty) thanks",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1131#issuecomment-526506834:106,feedback,feedback,106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1131#issuecomment-526506834,1,['feedback'],['feedback']
Usability,"ld be implemented exactly the same using the C-python API. ; It is just 10x longer to write an equivalent code. . As you ask I pushed a branch (https://github.com/SofaDefrost/sofa/tree/sofa_refactorSofaPython) with the implementation don't expect the branch to compile today as it contains irrelevant code that are wip to support the buffer protocol for seamless integration with numpy. . For the syntax about Data...everything is implemented in 'Binding_Data.cpp'. ; The function SofaData_asMapping_ass_subscript is the one called when using the [aaa] = operation. ; ```cpp; static int SofaData_asMapping_ass_subscript(PyObject *o, PyObject *key, PyObject *value); {; ....; /// This line is actually calling the ""python"" part implementation because I was too lazy; /// to implement it using C-Python API. So the function is really implemented partially with python ; /// and partially with c++ :) ; if( Data_ass_subscript(o,key,value) ); return 0;; ; /// after that it is a lot of ugly c-python api code. ; ....; ```. And the corresponding cython code (in Binding_DataArray.pyx); ```python; def sliceToRange(c, end):; start = 0; stop = end; if c.start != None:; start = c.start; if c.stop != None:; stop = c.stop; return xrange(start, stop) . cdef public bool Data_ass_subscript(o,key,value):; if isinstance(key, slice):; start, stop, step = key.start, key.stop, key.step; for i in xrange(start,stop):; Data_helper(o, i, value); return True; elif callable(key):; g = key(o) ; for i in g:; Data_helper(o, i, value); return True; elif isinstance(key, tuple):; if isinstance(key[0], slice) and isinstance(key[1], slice):; igen = sliceToRange(key[0], o.shape[0]); jgen = sliceToRange(key[1], o.shape[1]); for i in igen:; for j in jgen:; Data_helper(o,(i,j),value) ; return True ; return False; ```. Mixing code to implement a single function is clearly not the way to go. But i found that implementing complete complex function using the C-python api in cython is way more easier than writing them in C.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819:3178,clear,clearly,3178,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819,1,['clear'],['clearly']
Usability,"ly link to getLinkPath(). But if you have your own 'complex' object and want it to be used as a parameter in createObject you can just implement your own conversion schema. So fundamentally it is like 'str' but with a specific semantic saying that the function returns a string ""that can be parsed as a Sofa parameter"". . This approach has several advantages:; - it does not requires to have a lot of ""hard-coded"" test into the createObject function. ; - it does not mess with the existing str() function and there is no risk to break existing scenes or applications and we haven't to worry about backward compatibility. ; - it makes things very explicit, because people that want to have their object used in createObject have to implement it instead of ""assuming"" that by default any object's str function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate problems and teach them how to fix their scenes. . As you said Maxime, ""In python semantic of str is to provide a concise representation of an object as a string, which is exactly what BaseObject.getLinkPath does. "" . A ""concise representation"" is a very flexible/weak semantic with a lot of different meaning that will change depending on the context.; For matthieu (and the Anatoscope fork), a concise representation could be ""5.0""; For you it seems to be ""@/myObject.param"" ; For me it should be ""@/myObject.param=5.0"" ; For others it could be ""Sofa.Data: @/myObject.param=5.0"" . These options are more or less adequate depending on the context...but they are all fully valid description because they match the clearly defined and accepted semantic. This is why I think solution 2 is clearly not the way to go because it change this well defined semantic for something narrower in which the str() function should return something that can be parsed as an argument in the createObject function. ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:2808,clear,clear,2808,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575,1,['clear'],['clear']
Usability,msg_advice are emitted if the component it not muted. ; The default condition to be muted is when printLog is false. So it should behave as a msg_info... except it is more clear this is a suggestion.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2969#issuecomment-1134916530:172,clear,clear,172,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2969#issuecomment-1134916530,1,['clear'],['clear']
Usability,"nce `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated method but I will disable it with `= delete` and use a deprecation macro. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DISABLED( \; ""v20.12 (PR#12345)"", ""v21.06 (PR#45678)"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod() = delete;; ```. Anyone using myDeprecatedMethod will get an **error** right after this warning: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is not usable anymore because it ha",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:1787,usab,usable,1787,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249,1,['usab'],['usable']
Usability,"ng more the 'delegate' pattern and this is a proper usecase. . - About the use of final (on the public api) and private (on the delegated part): both are the way to go. . - About testing privates methods:; In tests, shouldn't we prefer implementing tests using the generic interface, so by calling BaseForceField::addKToMatrix() on instance of BeamFEMForceField instead of writing tests for the specific BeamFEMFOrceFIeld::doAddKToMatrix(). I see a lot of added values of writing tests using the public API while testing private method of a delegated patterns are not obvious to me but. ; That's said if BeamFEMForceFIeld::doAddKToMatrix() is private and final, we can probably make it ""testable"" by having a friend class Test<BeamFEMForceField>; . In the code base we are making the use of this pattern obvious by using a specific naming scheme (XXXX -> doXXX). ; The intention what to make visually clear what part was part of the public API and what part was using the ""delegate"" pattern. ; As in: ; ```cpp; BaseData::beginEditVoidPtr() ; Data<T>::doBeginEditVoidPtr() ; ```. I think it would be worth to stick to the scheme for the following reasons: ; - it de-ambiguate the purpose of each of the function. With addKToMatrix(blabla) and addKToMapping(otherblabla) nothing indicates, at first glance, that the two are in fact not equivalent, and ones has to refer to code comment or documentation (if any) to get that a very specific design pattern is involved. Having addKToMatrix(blablag) and doAddKToMapping(otherblablab) makes it in the contrary cristal clear).; - using the ""do"" prefix also have the advantage that to the pattern is possible when the method's attributes are the same (In the PR using the same names works because the de-ambiguation is implicitly done through the different BaseMatrix and MechanicalParams). ; - more consistant codebase . Of course, this means renaming the the addKToMatrix but in that matter, earlier is better and as the PR is breaking... this may be ok ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920:1616,clear,clear,1616,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920,1,['clear'],['clear']
Usability,ng-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html) |; | | [readability-uniqueptr-delete-release](https://clang.llvm.org/extra/clang-tidy/checks/readability-uniqueptr-delete-release.html) |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29980,simpl,simplify-boolean-expr,29980,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,2,['simpl'],['simplify-boolean-expr']
Usability,nice job and thx for the clear PR explanation,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3412#issuecomment-1288098257:25,clear,clear,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3412#issuecomment-1288098257,1,['clear'],['clear']
Usability,non je refuse un award pour un patch sur un design de qtwidget aussi compliqué! Alors qu'il y a tellement moyen de faire simple avec qt....,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1181#issuecomment-540592456:121,simpl,simple,121,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1181#issuecomment-540592456,1,['simpl'],['simple']
Usability,"o ""stable"" or into ""deprecated"". So team looking for the ""future"" should put their time on making a good ""stable set""; - the approach also cares about users because until a component is removed from the deprecated set"" a Sofa version can still be compiled with the deprecated components. ; - it is reversible, and each time a component is put into the ""deprecated"" set users of the component are warned when loading their scene, and thus, they can complain to sofa-dev that we shouldn't have deprecated a specific component (or that they are going to invest themself to maintain it). ; - it is complementary to organizing component sharing functionalities into module or plugins or packages (group of plugins) which also help to reduce the compilation time of sofa. . @untereiner I think in the existing sofa we have used component grouping (with modules or plugins) to handle lifetime management & functionally grouping & level of quality, which are different concerns, with a single tool (the modules). ; As you are proposing I dream of a clear re-organization of the different modules/plugins but I this sound very ambitious to me and I remember of a meeting 2 years ago where this was already discussed...and nothing moved. My assumption is that this is because the step is so big that no-one can afford it. . This is why I'm trying to find less ambitious but more incremental approach. . Eg with the current approach if you have 1 hour time to offer you can: ; - locate the leaves of the #include graph (these are component that have low coupling and thus are easy to remove); - move the file to the deprecated set (if you think it should); - add the component into the scene-checker to warn users. ; - make a PR; - if the PR is accepted you can be proud of the result because you saved:; ```; 1 second (average compilation time per component); * 20 (number of sofa compilation per day); * 150 (number of sofa developpers); = 3000 seconds per day. ; ```; The return of investment is very high :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715:2134,clear,clear,2134,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715,1,['clear'],['clear']
Usability,"oadSceneWithArguments(char const*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allo; cator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, boost::intrusive_ptr<sofa::simulation::Node>*) S; ceneLoaderPY.cpp:128; #12 0x14a8a6287 in sofa::simulation::SceneLoaderPY::load(char const*) SceneLoaderPY.cpp:88; #13 0x13a76cdee in sofa::simulation::Simulation::load(char const*) Simulation.cpp:472; #14 0x10f83fc80 in main Main.cpp:388; #15 0x7fffa5650234 in start (libdyld.dylib:x86_64+0x5234). 0x00013d5e5ee3 is located 0 bytes to the right of global variable '<string literal>' defined in '/Users/krasin/src/github.com/sofa-framework/sofa/src/SofaKernel/framework/sofa/core/; objectmodel/Context.cpp:37:37' (0x13d5e5ee0) of size 3; '<string literal>' is ascii string 'dt'; SUMMARY: AddressSanitizer: global-buffer-overflow Base.cpp:128 in sofa::core::objectmodel::Base::initData0(sofa::core::objectmodel::BaseData*, sofa::core::objectmodel::BaseData::BaseInitData&, char const*, char const*, unsigned int); ```. The code to blame (as pointed in the first message) is Base.cpp:128:. ```; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; ```. I propose to fix it in a simple, though, not very elegant way:. ```; if (strlen(name) >= 3) {; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; }; ```. Shall I create a PR like that?. I am currently tracking down some real issue with SOFA crashing on a VTU input, and having this buffer overflow on my way is a distraction. While it's not hard to fix it locally, this thread shows that I am not the first bitten by it, and suggests I won't be the last. It will save everyone time and effort, if we fix trivialities. Let me know, what would be the next steps here. I will be glad to follow your guidance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566:3956,simpl,simple,3956,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566,2,"['guid', 'simpl']","['guidance', 'simple']"
Usability,"ofa/build_release/install/bin/runSofa -l /home/sergei/Source_code/Sofa_development/SofaPython3/build_release/install/lib/libSofaPython3.so /home/sergei/Source_code/test_scene/test_scene.py ; [WARNING] [SofaEigen2Solver] SofaEigen2Solver is deprecated; Eigen classes are now located in Sofa.LinearAlgebra and SVDLinearSolver in SofaDenseSolver.You can remove SofaEigen2Solver from your scene, and if using SVDLinearSolver, please load SofaDenseSolver instead.; [INFO] [runSofa] PluginRepository paths = /home/sergei/Source_code/Sofa_development/Optimus/build_release:/home/sergei/Source_code/Sofa_development/SofaAuxiliaryComponents/build_release:/home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins:/home/sergei/Source_code/Sofa_development/sofa/build_release/install/lib; [INFO] [runSofa] DataRepository paths = /home/sergei/Source_code/Sofa_development/sofa/build_release/install/share/sofa:/home/sergei/Source_code/Sofa_development/sofa/build_release/install/share/sofa/examples:/home/sergei/Source_code/Sofa_development/sofa/build_release/install/share/sofa:/home/sergei/Source_code/Sofa_development/sofa/build_release/install/share/sofa/examples; [INFO] [runSofa] GuiDataRepository paths = /home/sergei/Source_code/Sofa_development/sofa/build_release/install/share/sofa/gui/runSofa:/home/sergei/Source_code/Sofa_development/sofa/build_release/install/share/sofa/gui/qt:/home/sergei/Source_code/Sofa_development/sofa/build_release/install/share/sofa/gui/qt; [INFO] [SofaPython3] Initializing with python version 3.10.4 (main, Mar 23 2022, 23:05:40) [GCC 11.2.0]; [INFO] [SofaPython3] Registering a scene loader for [.py, .py3, .pyscn, .py3scn] files.; [INFO] [SofaPython3] Shared library name is 'libpython3.1m.so'; [INFO] [SofaPython3] Intializing python; [INFO] [SofaPython3] Added '/home/sergei/Source_code/Sofa_development/SofaPython3/build_release/install/lib/python3/site-packages' to sys.path; ---------------------------------------; Checking SOFA_ROOT and SOFAPYT",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918:1575,GuiD,GuiDataRepository,1575,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918,1,['GuiD'],['GuiDataRepository']
Usability,"ok, I agree with your choice ! ; thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 3 Mars 2017 10:18:55; > Objet: Re: [sofa-framework/sofa] [all] Improve msg_api and logging of message; > (#190). > Hi @thomas-lemaire ,. > About the ""\n"" ... why would it breaks windows console printing ? Windows and; > linux does not have the same ""\n"" but a windows app emits the ""\n"" the; > windows system understand. > About using ""\n"" or better std::endl. My target was to supports messages; > written with a simple markdown syntax for which the ""\n"" is not an explicit; > line break, it is "" \n"" . So i replaced std::endl/sendl by "" \n""; > But I found that ugly and hard to read so I finally made 'msgendl' that; > contains the explicit markdown line break, but I forgot to remove the old; > manually placed "" \n"" I used all around. > Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). > Do you think msgendl is ok ?; > Do you like the msg_endl. > The change on how the messages are printed in runSofa is visible here:. > The two panels are merged and the panel now shows in its title the number of; > messages.; > (in this PR I removed the column with ""suggest a better message). > In the Graph view there is now a small alert (green, yellow, red) on top of; > th icons showing the kind of message an object have. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211:700,simpl,simple,700,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211,1,['simpl'],['simple']
Usability,ok... I think we should do an afternoon of brainless coding sprint to update all those components with the good guidelines... ; so this one is ready to go I guess. ; LGTM !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1939#issuecomment-803903671:112,guid,guidelines,112,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1939#issuecomment-803903671,1,['guid'],['guidelines']
Usability,onstraint; 4 	 54.43	 1 	 7.47	 8.01	 7.68	 0.11	 7.68	 12.32	....MBKSolve; 5 	 54.57	 1 	 7.31	 7.85	 7.52	 0.11	 7.52	 12.06	.....CG-Solve; 4 	 62.12	 1 	 0.01	 0.02	 0.01	 0 	 0.01	 0.02	....UpdateVAndX. --- . Normal : 27.3678 FPS. 2 	 0.04	 1 	 37.97	 39.96	 38.38	 0.34	 38.38	 99.38	..solve; 3 	 0.04	 1 	 37.96	 39.95	 38.38	 0.34	 38.38	 99.37	...Mechanical; 4 	 0.06	 1 	 1.70	 2.24	 1.88	 0.12	 1.88	 4.88	....ComputeForce; 4 	 1.94	 1 	 0.94	 1.23	 1.04	 0.06	 1.04	 2.68	....ComputeRHTerm; 4 	 2.98	 1 	 22.20	 23.41	 22.47	 0.18	 22.47	 58.17	....MBKBuild; 5 	 2.98	 1 	 22.20	 23.40	 22.46	 0.18	 22.46	 58.16	.....CG-setSystemMBKMatrix; 6 	 2.98	 1 	 0.01	 0.03	 0.02	 0 	 0.02	 0.04	......getContributors; 6 	 3 	 1 	 0.01	 0.01	 0.01	 0 	 0.01	 0.02	......buildMappingGraph; 6 	 3.01	 1 	 0.25	 0.56	 0.30	 0.04	 0.30	 0.77	......InitializeSystem; 7 	 3.01	 1 	 0.13	 0.28	 0.16	 0.03	 0.16	 0.41	.......resizeSystem; 7 	 3.17	 1 	 0.09	 0.25	 0.12	 0.02	 0.12	 0.32	.......clearSystem; 7 	 3.29	 1 	 0.01	 0.02	 0.01	 0 	 0.01	 0.04	.......initializeLocalMatrices; 6 	 3.31	 1 	 21.92	 22.80	 22.13	 0.15	 22.13	 57.31	......AssembleSystem; 7 	 3.31	 1 	 21.90	 22.77	 22.11	 0.14	 22.11	 57.25	.......buildMatrices; 8 	 3.31	 1 	 21.62	 22.44	 21.82	 0.14	 21.82	 56.50	........buildStiffness; 8 	 25.13	 1 	 0.27	 0.33	 0.28	 0.01	 0.29	 0.74	........buildMass; 8 	 25.42	 1 	 0 	 0 	 0 	 0 	 0 	 0 	........buildDamping; 8 	 25.42	 1 	 0 	 0 	 0 	 0 	 0 	 0 	........buildGeometricStiffness; 7 	 25.42	 1 	 0 	 0 	 0 	 0 	 0 	 0 	.......projectMappedMatrices; 7 	 25.42	 1 	 0.02	 0.02	 0.02	 0 	 0.02	 0.05	.......applyProjectiveConstraint; 4 	 25.45	 1 	 12.80	 13.57	 12.96	 0.12	 12.96	 33.55	....MBKSolve; 5 	 25.63	 1 	 12.61	 13.31	 12.75	 0.11	 12.75	 33 	.....CG-Solve; 4 	 38.41	 1 	 0.01	 0.02	 0.01	 0 	 0.01	 0.03	....UpdateVAndX; ```. Here is the scene. ; [4000-Cantilever-CG.scn.zip](https://github.com/sofa-framework/sofa/files/12594473/4000-Cantilever-CG.scn.zip),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717065958:2579,clear,clearSystem,2579,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717065958,1,['clear'],['clearSystem']
Usability,"r function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate problems and teach them how to fix their scenes. . As you said Maxime, ""In python semantic of str is to provide a concise representation of an object as a string, which is exactly what BaseObject.getLinkPath does. "" . A ""concise representation"" is a very flexible/weak semantic with a lot of different meaning that will change depending on the context.; For matthieu (and the Anatoscope fork), a concise representation could be ""5.0""; For you it seems to be ""@/myObject.param"" ; For me it should be ""@/myObject.param=5.0"" ; For others it could be ""Sofa.Data: @/myObject.param=5.0"" . These options are more or less adequate depending on the context...but they are all fully valid description because they match the clearly defined and accepted semantic. This is why I think solution 2 is clearly not the way to go because it change this well defined semantic for something narrower in which the str() function should return something that can be parsed as an argument in the createObject function. Doing so is like forcing anyone passing an object to createObject to modify their str() function to make it work with createObject. . I personally think that as the python specification for str() is very weak it is only a way to generate string to be read by human (that can cope with the inherent flexibility of its specification) but I prefer avoiding it to generate string that have to be processed by a program. When I have to generate string that are ""parsable"" I tend to use specific function with much tighter specification. . @maxime-tournier You are totally right about the recursive aspect...I didn't though about that. My initial worrying was it was transformating a complex structure into a flat one and I wasn't sure it was something that should be done in every cases for any types.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:3632,clear,clearly,3632,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575,1,['clear'],['clearly']
Usability,"ranslationTex; Vec2i | localRange; Vec3d | direction; Vec3f | scale3d; Vec3i | dataResolution; Vec4f | showColor; vector&lt;double> | compliance; vector&lt;Edge> | edges; vector&lt;fixed_array&lt;string,2>> | suffixMap; vector&lt;fixed_array&lt;unsigned int,4>> | highOrderEdgePositions; vector&lt;fixed_array&lt;unsigned int,5>> | highOrderTrianglePositions; vector&lt;fixed_array&lt;unsigned int,6>> | highOrderTetrahedronPositions; vector&lt;fixed_array&lt;unsigned int,8>> | highOrderHexahedronPositions; vector&lt;float> | projectionMatrix; vector&lt;Hexahedron> | hexahedra; vector&lt;int> | indices; vector&lt;Mat&lt;24,24,double>> | stiffnessMatrices; vector&lt;Pentahedron> | pentahedra; vector&lt;Pyramid> | pyramids; vector&lt;Quad> | quads; vector&lt;string> | pluginName; vector&lt;Tetrahedron> | tetrahedra; vector&lt;Triangle> | triangles; vector&lt;unknown> | groups; vector&lt;Vec2d> | uv; vector&lt;Vec3d> | reset_velocity; vector&lt;vector&lt;int>> | facets; vector&lt;vector&lt;unsigned int>> | polygons. Interesting to see that there are some ""unknown"" typenames in Sofa... Concerning the idea of reducing the syntax to its minimum when creating 1-instruction engines, I think that in terms of user experience, it would be ideal if an engine could be created by doing something like this:; ```; node.createObject('Component1', name=""1""); e = node.createEngine('PSDEMagic', name='2', myIntVector=""@1.vector_out""); e.addNewOutput('myIntOutput'); e.update = lambda e: e.myIntOutput = e.myIntVector[0]; node.createObject('AnotherComponent', name=""3"", myInt=""@2.myIntOutput); ```. Or even better but I don't see any technical approach for it:; ```; node.createObject('Component1', name=""1""); node.createEngine('PSDEMagic', name='2', myIntVector=""@1.vector_out"", update=lambda magic:(magic.myIntOutput = magic.myIntVector[0]) ); node.createObject('AnotherComponent', name=""3"", myInt=""@2.myIntOutput); ```. **EDIT: markdown didn't like the angle brackets.. now it shows all the types!**",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380402613:2000,user experience,user experience,2000,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380402613,1,['user experience'],['user experience']
Usability,rebase (to clear the previous failing scenes) +; ignore scene from the Geomatic plugin,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2115#issuecomment-853025370:11,clear,clear,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2115#issuecomment-853025370,1,['clear'],['clear']
Usability,"rumentCombined'); InstrumentCombined.addObject('EulerImplicitSolver',rayleighStiffness=0.2,rayleighMass=0.1,printLog='false'); InstrumentCombined.addObject('BTDLinearSolver',subpartSolve='0',verification='0',verbose='0'); InstrumentCombined.addObject('RegularGridTopology',name='meshLinesCombined',nx=60, ny=1, nz=1,xmin=0.0, xmax=1.0,ymin=0, ymax=0,zmin=1, zmax=1); InstrumentCombined.addObject('MechanicalObject',template='Rigid3d',name='DOFs',showIndices='0',ry=-90); InstrumentCombined.addObject('WireBeamInterpolation',name='InterpolCatheter',WireRestShape='@../topoLines_cath/catheterRestShape',radius=1,printLog='0'); InstrumentCombined.addObject('AdaptiveBeamForceFieldAndMass',name='CatheterForceField',interpolation='@InterpolCatheter',massDensity=0.00000155); InstrumentCombined.addObject('WireBeamInterpolation', name='InterpolGuide', WireRestShape='@../topoLines_guide/GuideRestShape', radius=0.9, printLog='0'); InstrumentCombined.addObject('AdaptiveBeamForceFieldAndMass',name='GuideForceField',interpolation='@InterpolGuide',massDensity=0.00000155); InstrumentCombined.addObject('WireBeamInterpolation', name='InterpolCoils', WireRestShape='@../topoLines_coils/CoilRestShape', radius=0.1, printLog='0'); InstrumentCombined.addObject('AdaptiveBeamForceFieldAndMass', name='CoilsForceField', interpolation='@InterpolCoils', massDensity=0.000021); InstrumentCombined.addObject('InterventionalRadiologyController',name='m_ircontroller',template='Rigid3d',printLog='0',instruments='InterpolCatheter InterpolGuide InterpolCoils',startingPos=[0, 0 ,0 ,0 ,-0.7071068, 0, 0.7071068],xtip=[1 ,0 ,0] ,rotationInstrument=[0, 0, 0 ],controlledInstrument=0,step=3,speed=2 ); InstrumentCombined.addObject('LinearSolverConstraintCorrection',printLog='false',wire_optimization='true'); InstrumentCombined.addObject('FixedConstraint',name='FixedConstraint',indices='0'); InstrumentCombined.addObject('RestShapeSpringsForceField',points='@m_ircontroller.indexFirstNode',stiffness=1e8,angularStiffness=1e",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-1345193243:4304,Guid,GuideForceField,4304,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-1345193243,1,['Guid'],['GuideForceField']
Usability,"s always a trade-off between abstraction and usability and the overhead of modularization. But yes, there is always an interest in being able to build prefab from other prefab to make complex systems. . - definition of current prefabs, e.g. ElasticObject using a UniformMass?; Prefab just means you have an ""all-in-one"" object. There is no more constraint except from that. So it the choice of the one that make a prefab to decide prefabricating ""what"". That's said it is highly desirable to have set of prefabs that shares common structures and idioms so they are interoperable in the same scene. . Additional point:; - the prefabs implementation in SofaPython3 is only partially working and some fix are required; - there is a far too much limited support for prefab in our user interface, if we are going for generalize their use then additional support should be added.(eg: right-click navigating itno prefab should be implemented, dedicated icons in the scene graph, docbrowser linking the the prefab documentation => so updating the prefab documentation now we managed to fix the sofapython3 one) . - there is also non trivial issues related to design practices, especially on re-usability through inheritance, composition or prototypes. . - there is an issue smoothing transition from a scene to a prefab (visible in the two way by which you can define a prefab, with the python decorator or by in-heriting from Sofa.Prefab). - there is also issues related to the fact that Sofa is relying on the scenegraph to do the simulation, this has the consequence that currently some useful scene-patterns are not easy to make through prefab. I think the work from @alxbilger on refactoring the animation loop and solving relax these constraints... I'm not sure it is at the point there is no more contraint so we can freely move on that. . Probably there is many more on that... but I can for sure make a clear summary of all that are missing before having prefab first class citizen in SofaPython3 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279:2273,usab,usability,2273,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279,2,"['clear', 'usab']","['clear', 'usability']"
Usability,"self.name = name; self.addNewInput('positions', datatype=""vector<Vec3d>"", value=positions, help=""test""); self.addNewOutput('average', datatype=""Vec3d"", help=""average""); ; def parse(self, arg):; pass; ; def init(self):; 	pass; ; def update(self):; value = [0, 0, 0]; for pos in self.positions:; value[0] += pos[0]; value[1] += pos[1]; value[2] += pos[2]; value[0] /= len(self.positions); value[1] /= len(self.positions); value[2] /= len(self.positions); self.cleanDirty(); self.average = [[-value[0],-value[1],-value[2]]]; pass. def createScene(rootNode):; loader = rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'); psde = PyEng(rootNode, name=""PSDE"", positions=loader.findData('position').getLinkPath()); rootNode.createObject('TransformEngine', name='TE', input_position=""@loader.position"", translation=psde.findData('average').getLinkPath()); rootNode.createObject('OglModel', name=""visu"", position=""@TE.output_position"", triangles=""@loader.triangles"",; color=""1 0 0 1""); ```. With this syntax, I can create my engines definition once, and create as many as I want, on the fly, with any parameter I want for my input fields. It's actually even better, because:; - I don't have to create inputs with the fields I pass to the constructor. It could be simple data (addNewData vs addNewInput); - Construction of datafields is more explicit, thus less error-prone; - No need to go search for a decorator function somewhere in SofaPython, or to declare a dictionary of default arguments, everything is performed in the constructor. So, yeah, this PR is now virtually useless.; There's one thing I don't like with this syntax though, it's that the creation of the object is performed at the same time as it is assigned to the scene graph, which, in my opinion is not always desirable.; Something closer to this would be neat:; ```py; rootNode.addObject(PyEng(name='PSDE', positions=loader.findData('position').getLinkPath()); ```. I'll work on that in the following days :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442:1522,simpl,simple,1522,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442,1,['simpl'],['simple']
Usability,"sorry, it looked simple and fine for me... . ----- Mail original -----. > De: ""Guillaume Paran"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""State change""; > <state_change@noreply.github.com>; > Envoyé: Jeudi 26 Janvier 2017 10:21:34; > Objet: Re: [sofa-framework/sofa] [CI] Replace 'make' by 'ninja' when; > available. (#141). > This one was merged too fast.; > I wanted to change a bit the code :(. > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/141#issuecomment-275343846:17,simpl,simple,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/141#issuecomment-275343846,1,['simpl'],['simple']
Usability,"t of component that 'forgot' to set/unset the persistent values.; - it is very hard to identify what is relevant to save, IMO because what is relevant to save is a matter of context of use, a Data 'useless' for one may be very useful for someone else. . This is why I choose to do things in the reversed way and let the client code to select what to save (so that you may eventually implement dedicated widgets to let the user select what to save). . I see at least to different context of use and thus saving strategies. . For my context of use it is more important to save scenes that are as close as possible as the one written by the user. This is why I made the XML loader and the GUI have the responsability to make persistent:; - the value given explicitely in the scene file; - the value specified explicitely in the GUI via the widget or the manipulators; Despite being very simple this work very well and without any risk that some authors breaks the saving because he forgot/decide not to setPersistent(false) in his component (and this happened quite a lot in the past). For your context of use, for which saving a simulated scene is important I think a very simple solution would be to write a visitor to switch all the Data values to persistent. And I would suggest to put this feature to a different entry in the menu (what about ""Export"" or ""Dump"" ?) so that in the same application we can either save or dump the scene with very well defined semantics ? . Now about the fact that some Data editted in the UI can be incompatible with another Data. I will let that for another day because to me this is a much more general UI problem. . Finally to improve a bit the general readability in any context of use we could, when writing big chunk of numbers (like vector.size() > 20) save them in separated files leading to something like: ; <MechanicalObject name position=""@file://./name.position468768764568.txt"" />. I will come back later with commit that take your remarks into account.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495:2413,simpl,simple,2413,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495,1,['simpl'],['simple']
Usability,"t3x3>>. Pr. Francois Faure; https://team.inria.fr/imagine/francois-faure/. > Le 6 avr. 2017 à 19:30, Maxime Tournier <notifications@github.com> a écrit :; > ; > ; > The biggest issue with sparse matrices is that there is no silver bullet representation that covers everyone's needs: some people like it compressed (row/column), others like to have small dense chunks instead of single floating points, and so on.; > ; > In particular, I see two major orthogonal uses of sparse matrices:; > ; > getting matrix data out of components; > working with sparse matrices (linear algebra, factorization, assembly); > It is not at all obvious that the two operations should use the same representation, and in fact I would argue against it. For instance in the Compliant plugin, we use Eigen sparse matrices for everything, and end up doing a lot of work in order to shift matrix blocks around which is tedious and costly.; > ; > I've been toying around with alternate designs, and the simplest I found so far is to use a plain old vector of triplets (row, column, value) for fetching matrix data. More precisely, mappings/forcefields directly push_back matrix data into a std::vector<Eigen::Triplet<SReal> > through a std::back_insert_iterator.; > ; > With this design the caller is then responsible for structuring the sparse data further (sorting/converting to CSR, shifting rows/columns, handing over to another library, etc) Of course this approach is tailored for our needs and might not fit others, and performance-wise it needs thorough benchmarking anyways, but I think that using separate data structures for getting the data and working with the data instead of a single structure is the way to go.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AHUGIb2x8bFdYI3KTJsLE_7Qy-d2FFJiks5rtSFPg",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292785399:1859,simpl,simplest,1859,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292785399,1,['simpl'],['simplest']
Usability,"tance',alarmDistance='2',contactDistance='1',angleCone='0.8',coneFactor='0.8'); rootNode.addObject('DefaultContactManager',name='Response',response='FrictionContact'); rootNode.addObject('DefaultCollisionGroupManager',name='Group'). topoLines_cath = rootNode.addChild('topoLines_cath'); topoLines_cath.addObject('WireRestShape',name='catheterRestShape',template='Rigid3d',printLog='0',length=1000.0, straightLength=600,spireDiameter=4000.0,spireHeight=0.0,densityOfBeams=[40,10],numEdges=200, numEdgesCollis=[40,20],youngModulus=10000 ,youngModulusExtremity=10000); topoLines_cath.addObject('EdgeSetTopologyContainer',name='meshLinesCath'); topoLines_cath.addObject('EdgeSetTopologyModifier', name='Modifier'); topoLines_cath.addObject('EdgeSetGeometryAlgorithms',name='GeomAlgo',template='Rigid3d'); topoLines_cath.addObject('MechanicalObject',template='Rigid3d',name='dofTopo1'). topoLines_guide = rootNode.addChild('topoLines_guide'); topoLines_guide.addObject('WireRestShape',name='GuideRestShape',template='Rigid3d',printLog='0',length=1000.0, straightLength=980.0, spireDiameter=25, spireHeight=0.0,densityOfBeams=[30 ,5],numEdges=200,numEdgesCollis=[50, 10], youngModulus=10000,youngModulusExtremity=10000); topoLines_guide.addObject('EdgeSetTopologyContainer',name='meshLinesGuide'); topoLines_guide.addObject('EdgeSetTopologyModifier',name='Modifier'); topoLines_guide.addObject('EdgeSetGeometryAlgorithms',name='GeomAlgo',template='Rigid3d'); topoLines_guide.addObject('MechanicalObject', template='Rigid3d', name='dofTopo2'). topoLines_coils = rootNode.addChild('topoLines_coils'); topoLines_coils.addObject('WireRestShape',name='CoilRestShape',template='Rigid3d',printLog='0',length=600.0, straightLength=540.0,spireDiameter=7, spireHeight=5.0,densityOfBeams=[40,20], numEdges=400, numEdgesCollis=[30,30],youngModulus=168000, youngModulusExtremity=168000); topoLines_coils.addObject('EdgeSetTopologyContainer',name='meshLinesCoils'); topoLines_coils.addObject('EdgeSetTopologyModifier',na",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-1345193243:2063,Guid,GuideRestShape,2063,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-1345193243,1,['Guid'],['GuideRestShape']
Usability,thanks a lot all for your feedback all!; @EulalieCoevoet would be great to have that example added.; @ChristianDuriez definitely a big thumb up :+1: for the URDF support. Maud Marchal stressed out the importance of this aspect as well !. Let's create a dedicated plugin @fredroy as you proposed,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1056667710:26,feedback,feedback,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1056667710,1,['feedback'],['feedback']
Usability,thanks a lot for the feedback @alxbilger ; you are perfectly right!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2427#issuecomment-948583464:21,feedback,feedback,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2427#issuecomment-948583464,1,['feedback'],['feedback']
Usability,"to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated method but I will disable it with `= delete` and use a deprecation macro. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DISABLED( \; ""v20.12 (PR#12345)"", ""v21.06 (PR#45678)"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod() = delete;; ```. Anyone using myDeprecatedMethod will get an **error** right after this warning: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is not usable anymore because it has been DISABLED since v21.06 (PR#45678) after being deprecated on v20.12 (PR#12345). XXX must be renamed into YYY.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:2127,clear,clear,2127,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249,2,"['clear', 'usab']","['clear', 'usable']"
Usability,"void handleEvent(sofa::core::objectmodel::Event* event); {; using namespace sofa::helper;; using namespace sofa::core::objectmodel;; using namespace sofa::core::behavior;. if (simulation::AnimateBeginEvent::checkEventType(event)); {; std::cout << ""onAnimateBeginEvent"" << std::endl;; auto moValue = sofa::helper::getWriteAccessor(*m_mo->write(core::VecCoordId::position()));; std::cout << moValue[0] << std::endl;; moValue[0] = moValue[0] + type::Vec3{ 1.0, 2.0, 3.0 };; std::cout << moValue[0] << std::endl;; }. if (simulation::AnimateEndEvent::checkEventType(event)); {; std::cout << ""onAnimateEndEvent"" << std::endl;; auto moValue = sofa::helper::getReadAccessor(*m_mo->read(core::VecCoordId::position()));; std::cout << moValue[0] << std::endl;; }; }. };; ```. ```c++; Simulation::SPtr simu = createSimulation(""DAG"");; Node::SPtr root = createRootNode(simu, ""root"");; sofa::component::initSofaBaseUtils();. simpleapi::createObject(root, ""RequiredPlugin"", { { ""pluginName"", ""SofaBaseMechanics""} });; simpleapi::createObject(root, ""RequiredPlugin"", { { ""pluginName"", ""PluginExample""} });. auto meca = createObject(root, ""MechanicalObject"", {; {""name"", ""MO""},; {""template"", ""Vec3d""},; {""position"", ""1 0 0""}; });; ; using MechaObjVec3 = sofa::component::container::MechanicalObject<defaulttype::Vec3Types>;; MechaObjVec3* mecaobj = dynamic_cast<MechaObjVec3*>(meca.get());; ; auto tcom = createObject(root, ""MyTestComponent"", {; {""position"", ""@MO.position""},; });. //auto cont = createObject(root, ""MyTestController"", {; // {""MO"", ""@MO""},; // }); . sofa::component::behaviormodel::MyTestController::SPtr cont = sofa::core::objectmodel::New<sofa::component::behaviormodel::MyTestController>(mecaobj);; root->addObject(cont);; ; sofa::simulation::getSimulation()->init(root.get());. sofa::simulation::getSimulation()->animate(root.get(), 0.01);; ```. ```; onAnimateBeginEvent; 1 0 0; 2 2 3; onAnimateEndEvent; 2 2 3; ```. (the controller just adding {1,2,3} to the mecha.position[0]). With both cases (",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2761#issuecomment-1063030017:1608,simpl,simpleapi,1608,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2761#issuecomment-1063030017,2,['simpl'],['simpleapi']
Usability,"you are welcomed, I did it as well as I need it.; Do not hesitate to send me some feedback if you see bugs or potential improvement",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1028#issuecomment-499424270:82,feedback,feedback,82,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1028#issuecomment-499424270,1,['feedback'],['feedback']
Usability,your feedback would be good @bakpaul @courtecuisse @ziqiu-zeng,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3335#issuecomment-1257009032:5,feedback,feedback,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3335#issuecomment-1257009032,1,['feedback'],['feedback']
