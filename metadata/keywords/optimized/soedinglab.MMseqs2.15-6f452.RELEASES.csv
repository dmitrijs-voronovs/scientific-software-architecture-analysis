quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Availability," Support other architectures (SSE2/ARM64/POWER8/POWER9/etc) through [SIMDe](https://github.com/simd-everywhere/simde); * Linclust is much faster on systems with a lot of CPU cores; * Clustering update is faster, more stable and correctly deals with deleted sequences #272; * Add easy workflow for reciprocal best hit searches `easy-rbh` ; * Add SILVA, Pfam-B, dbCAN2 to `databases`; * `databases` produces taxonomy information for NR; * Replace old greedy incremental clustering with new memory efficient version; * Add `result2dnamsa` module to create MSAs of nucleotide sequences; * Continued progress on profile-profile searching (`result2pp`,`expandaln`,`expand2profile`) , stay tuned!; * Add multi-parameter to support to overwrite sequence type specific parameters: e.g. `--gap-open ""nucl:5,aa:11""` ; * Add ORF information as output options to `convertalis` (`qOrfStart/qOrfEnd, dbOrfStart, dbOrfEnd`); * Speed up sorting using [ips4o](https://github.com/SaschaWitt/ips4o); * Speed up masking through new version of [tantan](http://cbrc3.cbrc.jp/~martin/tantan/) ; * Speed up multi-threaded writing of clustering results; * Speed up reading of database indices and merging target split databases; * Add memory tracking to account for index size when computing available memory (`--split-memory-limit` should be more reliable when searching/clustering billions of sequences).; * Add `--search-type 4` (translated/translated search) to `createindex`; * Add `convertalis --format-mode 3` HTML output based on MMseqs2 app (app.mmseqs.com); * Improve memory management in `result2msa` and `result2profile` modules; * Add `msa2result` module to create an alignment result db from MSAs; * Add `filterresult` to slim down result dbs with pairwise HHblits filtering #316; * Add `--kmers-per-sequence-scale` to `linsearch` to extract a k-mer fraction instead of a fixed count ; * Add a random integer to `--local-tmp` path to avoid race conditions if multiple MMseqs2 happen on the same machine; * Add `--",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/12-113e3:1476,mask,masking,1476,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/12-113e3,1,['mask'],['masking']
Availability," with ungapped alignments (`--alignment-mode 4`); * Allow sequence/result database input in `taxonomyreport` #401/#408; * `msa2profile/result` can skip the first sequence with `--skip-query`; * `createtaxdb` can create a taxdb by mapping through `.source` in addition to `.lookup` (`--tax-mapping-mode 1`); * `splitsequence` can create a sequence database with original headers; * `align` can return short cluster format if only identifiers are required `--alignment-output-mode`; * `tar2db` can be used multi-threaded if input allows (e.g. `.tar` containing `.gz` files); * Encode species names in taxonomy blocklist to make sure we don't block random nodes in * e.g. GTDB); * Split non-index parts over additional files in split index case to reduce peak memory use; * `proteinaln2nucl` can now compute scores and e-values; * `createdb` can create a sequence database from a database containing fasta files (e.g. created by `tar2db`); * Add `MMSEQS_FORCE_MERGE` environment variable to force generating fully merged databases; * Improved many descriptions, warnings and error messages. ## Bugs fixed; * Fix `filterresult` off by one issue removing wrong sequences; * Fix `addtaxonomy` always crashing due to invalid check #355; * Reduce numbers of calls to `posix_memalign` to fix lock contention on macOS; * `extractorfs` doesn't flood warnings due to short sequences anymore; * `expand2profile` `--pca` is correctly set to `0`; * `msa2profile` always copies `.lookup/source` files instead of symlinking; * Clustering of clustering input would not work with set-cover or connected-component ; * Short circuit `--cluster-reassign` if nothing can be reassigned; * Fix temporary files not getting removed in `linclust/cluster` with `--remove-tmp--files`; * Fix `kmermatcher` setting user k-mer pattern in auto k-mer selection and breaking; * Krona `taxonomyreport` was not working if no sequence was unclassified; * Make `Matcher::resultToBuffer` buffer sizes consistent (could crash with very long ba",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/13-45111:2967,error,error,2967,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/13-45111,1,['error'],['error']
Availability,"**At a glance:** The MMseqs2 command line interface is cleaner and validates user input. Many MMseqs2 modules use less memory and run faster. ## Known Issues; * High sensitivity searches (higher than -s 6) with precomputed indices should fail. Pass `--db-load-mode 3` as a workaround to the MMseqs2 call. ## Breaking Changes; * Default taxonomy mode is assigning the same taxonomic label as the top hit. The previous ""approximate 2bLCA"" mode can be used with `--lca-mode 3` or the non-approximated 2bLCA with `--lca-mode 2`; * MMseqs2 will refuse to compile on compilers without OpenMP support (Use `-DREQUIRE_OPENMP=0` to force a single-threaded no OpenMP build); * The confusingly named (and probably non-functional) `--global-alignment` parameter is gone; * File names of the **latest** precompiled binaries changed. All archives contain a copy of the user guide and the MMseqs2 binary in the same subfolder (see further down for binaries of release 10-6d92c):. | SIMD | Linux | macOS | Windows |; |--------|---------------------------|-------------------------|--------------------------|; | SSE4.1 | [mmseqs-linux-sse41.tar.gz](https://mmseqs.com/latest/mmseqs-linux-sse41.tar.gz) | [mmseqs-osx-sse41.tar.gz](https://mmseqs.com/latest/mmseqs-osx-sse41.tar.gz) | [mmseqs-win64.zip](https://mmseqs.com/latest/mmseqs-win64.zip) |; | AVX2 | [mmseqs-linux-avx2.tar.gz](https://mmseqs.com/latest/mmseqs-linux-avx2.tar.gz) | [mmseqs-osx-avx2.tar.gz](https://mmseqs.com/latest/mmseqs-osx-avx2.tar.gz) | - |. ## Known Issues; * MMseqs2 on Windows seems to not scale well on multiple threads; * MMseqs2 on Windows can crash when built with AVX2 support (mostly on VMs). ## Features; * `createindex` can precompute split indices to improve runtime when searching against a database that is larger than the system memory. Precomputed databases also require less overhead RAM, since only the required parts are loaded; * `easy-search`, `easy-taxonomy`, `easy-linclust` and `easy-cluster` workflows can take an",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c:924,down,down,924,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c,1,['down'],['down']
Availability,"**At a glance:** The MMseqs2 command line interface is cleaner and validates user input. Many MMseqs2 modules use less memory and run faster. The new `databases` module helps to download and setup database. We now have a chat support at [chat.mmseqs.com](https://chat.mmseqs.com). ## Known Issues; * `rbh` crashes due to invalid sorting mode (#290); * Homebrew's macOS version does not use multiple cores (#289); * `prefilter` results can be unstable between different runs for extremely redundant databases (#277); * `linclust`/`cluster` can crash for very small input sets (#274). ## Breaking Changes; * `kmermatcher` `--skip-n-repeat-kmer` parameter was replaced with `--ignore-multi-kmer`; Does not discard whole sequences anymore if a k-mer occured to often, instead it skips the specific k-mers.; Either mode is only used in Plass and not in Linclust; * `--lca-ranks` from `(easy-)taxonomy` and `lca` has to be delimited with semicolons (`;`) instead of colons (`:`); * `--dont-shuffle` flag was renamed to `--shuffle true/false`. ## Features; * new `databases` workflow to list and download common databases. ; Supported databases:; ```; Name 	Type 	Taxonomy	Url; - UniRef100 	Aminoacid 	 yes	https://www.uniprot.org/help/uniref; - UniRef90 	Aminoacid 	 yes	https://www.uniprot.org/help/uniref; - UniRef50 	Aminoacid 	 yes	https://www.uniprot.org/help/uniref; - UniProtKB 	Aminoacid 	 yes	https://www.uniprot.org/help/uniprotkb; - UniProtKB/TrEMBL 	Aminoacid 	 yes	https://www.uniprot.org/help/uniprotkb; - UniProtKB/Swiss-Prot	Aminoacid 	 yes	https://uniprot.org; - NR 	Aminoacid 	 -	https://ftp.ncbi.nlm.nih.gov/blast/db/FASTA; - NT 	Nucleotide	 -	https://ftp.ncbi.nlm.nih.gov/blast/db/FASTA; - PDB 	Aminoacid 	 -	https://www.rcsb.org; - PDB70 	Profile 	 -	https://github.com/soedinglab/hh-suite; - Pfam-A.full 	Profile 	 -	https://pfam.xfam.org; - Pfam-A.seed 	Profile 	 -	https://pfam.xfam.org; - eggNOG 	Profile 	 -	http://eggnog5.embl.de; - Resfinder 	Nucleotide	 -	https://cge.cbs.dtu.dk",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c:178,down,download,178,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c,2,"['down', 'redundant']","['download', 'redundant']"
Availability,"-limit 64G`); * Nucleotide substitution matrices should be user definable ; * Taxonomy report is compatible with [Pavian](https://github.com/fbreitwieser/pavian). Thanks to Florian Breitwieser!; * `cluster` workflow learned a reassignment mode `--cluster-reassign`. This mode corrects errors that occured because of cascaded clustering; * `extractorfs` can directly translate a nucleotide ORF to an amino acid sequence; * `result2stats` can write TSV files; * `createsubdb` supports softlinks instead of always hard copying the whole file to disk; * reduced harddisk space usage for all cascaded clusterings ; * `easy-taxonomy` reports the top hit alignment as a separate output file with the suffix `tophit_aln`; * `createindex` checks if an index needs to be recomputed were improved. ## Bug fixes; * MMseqs2 did not compile on FreeBSD. Please let us know about free continuous integration options to make sure it will keep working in the future; * `proteinaln2nucl` could return wrong coordinates; * `apply` would deadlock when running with multiple threads; * MPI searches are way more reliable, there were various issues around merging the separate results. MPI logic of split and merge is also integrated into the regression tests suite; * `prefilter` splits nucleotide searches if not enough memory is available ; * `kmermatcher` could corrupt memory; * `rescorediagonal` could produce wrong sequence identities when aligning mixed-case sequences; * macOS builds were not actually static (still dynamically link libsystem however); * `lca` module could corrupt memory and crash; * `createdb` does not crash on systems with only 4GB of RAM anymore; * AVX2 and SSE4.1 builds could produce slightly different results; * `summarizeresults` does not crash on empty alignments results anymore; * fix wrong tophit_report in `easy-taxonomy` ; * Precompiled Windows builds were broken; * Precomputed indices of databases with very short sequences could truncate alignments if the query sequences were l",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c:3829,reliab,reliable,3829,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c,1,['reliab'],['reliable']
Availability,"At a glance: Improved taxonomy, add colors to user output, improve computation progress bar, small speed ups and many bug fixes. ## Features; * Add support for Kraken style taxonomy reports. Thanks to Florian Breitwieser; * New easy-taxonomy workflow ; * New progress bar to reduce output ; * Colored errors and warnings . ## Bugs; * Fix alignment problem in SSW library https://github.com/mengyao/Complete-Striped-Smith-Waterman-Library/issues/61; * Fix iterative profile search ; * Fix protein nucleotide index issues ; * Fix cluster update workflow; * Fix critical multi threading bug in taxonomy workflow",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/9-d36de:301,error,errors,301,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/9-d36de,1,['error'],['errors']
Availability,"Changes since 2-23394 Release. ## New Features; * Create simple workflows fasta/fastq in flat file out for clustering `easy-cluster` and searching `easy-search`; * Add a new clustering greedy incremental clustering algorithm to the `clust` module which needs less memory; * Make the new low memory clustering algorithm default if `--cov-mode 1` is used in `linclust` and `cluster`; * Add `alignall` module for all-against-all alignments of e.g. clusters; * Improved Windows support; * `filterdb` learned new modes. ## Bug fixes; * Fix wrong merging code in `linclust`; * Fix e-value issues in target-split case; * Fix seg. fault in rescore diagonal if 'z' is used; * Fix seg. fault when using masking in `kmermatcher`; * Fix wrong `filterdb` default mode; * `prefilter` overestimated the required amount of memory and refused to run; * `prefilter` scores would saturate to early, now they have the full 2^16 range. ## Others; * Profile searches do create less high scoring false positive through better compositional bias correction and masking of low complexity regions of profiles; * Clustering supports now the whole 2^32 range instead the previously 2^31; * Speed up clustering when using `--cov-mode 1`; * Rework symlinks to the header databaes; * Support profiles on query and target side in `result2profile`",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/3-be8f6:623,fault,fault,623,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/3-be8f6,4,"['fault', 'mask']","['fault', 'masking']"
Availability,"Changes since release 3-be8f6. ## New features; * Alternative alignments in search (`--alt-ali`). Find alignments by masking out previously found regions in the target sequence.; * Added `map` workflow for fast near-exact mapping of reads; * Added `easy-linclust` workflow, that works on FASTA files; * Sequence lengths longer than 32k are now supported (default sequence length limit is now 65535); * `createdb` shuffles the order of entries by default (`--dont-shuffle` to disable), useful for database splits, where one split could take much longer than others; * `linclust` now supports MPI; * `linclust` adds one hash for the whole sequence, to improve extract sequence matching; * New sequence identity computation modes, where the normalization happens on the query or target length instead of alignment length; * New `--cov-mode` that computes the coverage only based on sequence lengths (`--cov-mode 3`); * `search`/`cluster`/`linclust` workflows have learned `--alignment-mode 4` for faster ungapped alignments; * Translated `search` sorts now results by E-value and aggregates all ORFs under the corresponding contig identifier; * `prefiltering` can now sort hits with score > 255 correctly; * `convertalis` now works with profiles; * Added generalized database transposition tool `swapdb` (`swapresults` only makes sense for prefiltering/alignment results). ## Performance; * Speedup `extractorf` with vectorization; * Many performance improvements to reduce overhead for web server mode; * `createtsv` writes output in parallel; * Avoid many unnecessary memory allocations in various modules. ## Bug fixes; * `covertmsa` does now correctly parses STOCKHOLM files without accession keys; * In `search` when using splits less than `--max-seqs` sequences would be the limit, now correctly computes the limit (max-seqs/Splits + 4*sqrt(max_seqs/Splits)); * Fix bug in MsaFilter where wrong sequences would be filtered; * `swapresults` will add an empty entry if a target entry has no correspon",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/4-0b8cc:117,mask,masking,117,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/4-0b8cc,1,['mask'],['masking']
Availability,Changes since vNatBiotech Release. ## New Features; * Taxonomy classification workflow with robust 2bLCA computation and fast LCA computation in O(N LogN); * Support reading .bz2 archives for createdb; * Createdb can turn multiple fasta files into one database now; * Extend prefilter score range to improve order of best hits after prefiltering.; * Automatically split input sequence set based on system RAM in kmermatcher. Linclust can now run with less memory.; ; ## Performance Regressions Fixed; * Fixed underperforming iterative-sequence-profile search without a precomputed index table. ## Breaking Command Line Interface Changes; * Iterative-non-profile-search --sens-step-size changed to --sens-steps (Number of Iterations) (Does not break nested workflows anymore). ## Others; * Query coverage mode (--cov-mode 2) for searching; * Clustering is now the same between single and multi threaded version; * Bug fixes in rescorediagonal; * Speedup of kmermatcher; * Speedup and memory reduction of swapresults; * Many usability improvements. ## Devlopers; * MMseqs2 can now be included in framework mode to subprojects,MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/1-c7a89:92,robust,robust,92,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/1-c7a89,1,['robust'],['robust']
Availability,"ce; * `result2stats` can write TSV files; * `createsubdb` supports softlinks instead of always hard copying the whole file to disk; * reduced harddisk space usage for all cascaded clusterings ; * `easy-taxonomy` reports the top hit alignment as a separate output file with the suffix `tophit_aln`; * `createindex` checks if an index needs to be recomputed were improved. ## Bug fixes; * MMseqs2 did not compile on FreeBSD. Please let us know about free continuous integration options to make sure it will keep working in the future; * `proteinaln2nucl` could return wrong coordinates; * `apply` would deadlock when running with multiple threads; * MPI searches are way more reliable, there were various issues around merging the separate results. MPI logic of split and merge is also integrated into the regression tests suite; * `prefilter` splits nucleotide searches if not enough memory is available ; * `kmermatcher` could corrupt memory; * `rescorediagonal` could produce wrong sequence identities when aligning mixed-case sequences; * macOS builds were not actually static (still dynamically link libsystem however); * `lca` module could corrupt memory and crash; * `createdb` does not crash on systems with only 4GB of RAM anymore; * AVX2 and SSE4.1 builds could produce slightly different results; * `summarizeresults` does not crash on empty alignments results anymore; * fix wrong tophit_report in `easy-taxonomy` ; * Precompiled Windows builds were broken; * Precomputed indices of databases with very short sequences could truncate alignments if the query sequences were longer. ## Developers; * Tools using MMseqs2 as a framework do not need to export MMseqs2 modules again anymore; * MMseqs2 uses Azure Pipelines for all platforms to run our regression tests suite and provide precompiled binaries; * MMseqs2 runs under ASan without any issues. We fixed various small memory leaks; * The regression suite is directly linked through a submodule. It can be used by running:; ```; git submo",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c:4048,avail,available,4048,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c,1,['avail'],['available']
Availability,"eatelinindex` computes an index for `linsearch`; * `taxonomy` uses `--orf-start-mode 1` to annotate more sequences ; * Added approx. 2bLCA to speed up computation, this is now the new default. The old mode can be turned on by `--lca-mode 2`; * `createdb` recognizes sequences containing Uracil as DNA sequences; * `createdb` is now faster through speeding up its shuffle operations ; * `view` module to view single entry in an MMseqs2 database; * `align` module has learned `--min-aln-len` parameter to filter by minimal alignment length; * Alignment modules (`rescorediagonal`, `align`) can align longer sequences now (not limited to 2^15 length); * Input sequences can now be softmasked (lower letter masking) instead of only hard masking (replacing with X) ``--mask-lower-case`. The masking only applies to the prefilter stages `kmermatcher` or `prefilter` and can be combined with `--mask`; * `filterdb` has learned `--filter-expression` parameter and mode that allows filtering by simple mathematical expressions; * `alignbykmer` can be used for nucleotide searches; * MMseqs2 _did-you-mean_ functionality gives better suggestions; * MMseqs2 does not repeat the whole parameter list for each submodule call anymore. ## Bugs; * Default parameters of `map` workflow are now set correctly; * Some modules were using the wrong coverage parameter; * Sliced profile search was losing high E-value hits; * Sliced profile search is now stable; * Profile-Sequence alignment E-values where slightly too high; * `result2msa` was crashing with profiles on the target side; * `result2msa` should not crash with `--alow-deletion` anymore; * Some parameters were never visible (with or without `-h`); * Various issues with MPI were resolved. ## Developers; * Continous integration enforces no compile warnings now; * Continous integration now tries to build AArch64 builds with Docker and Qemu; * We added a first draft of our [developer guide](https://github.com/soedinglab/MMseqs2/wiki/MMseqs2-Developer-Guide",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/8-fac81:2688,mask,masking,2688,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/8-fac81,2,['mask'],"['mask', 'masking']"
Availability,"has learned to return SAM formatted output (preview); * Database can be compressed by applying [zstd](https://github.com/facebook/zstd) on each entry (`--compressed 1`); * Also added `compress` and `decompress` modules; * `rbh` workflow for reciprocal best hit searches added ; * `linclust` can now cluster nucleotide sequences on both forward and reverse strand; * Added `linsearch`, a lightning fast search for proteins and nucleotide sequences (preview; easy workflow variant `easy-linsearch` also added); * `createlinindex` computes an index for `linsearch`; * `taxonomy` uses `--orf-start-mode 1` to annotate more sequences ; * Added approx. 2bLCA to speed up computation, this is now the new default. The old mode can be turned on by `--lca-mode 2`; * `createdb` recognizes sequences containing Uracil as DNA sequences; * `createdb` is now faster through speeding up its shuffle operations ; * `view` module to view single entry in an MMseqs2 database; * `align` module has learned `--min-aln-len` parameter to filter by minimal alignment length; * Alignment modules (`rescorediagonal`, `align`) can align longer sequences now (not limited to 2^15 length); * Input sequences can now be softmasked (lower letter masking) instead of only hard masking (replacing with X) ``--mask-lower-case`. The masking only applies to the prefilter stages `kmermatcher` or `prefilter` and can be combined with `--mask`; * `filterdb` has learned `--filter-expression` parameter and mode that allows filtering by simple mathematical expressions; * `alignbykmer` can be used for nucleotide searches; * MMseqs2 _did-you-mean_ functionality gives better suggestions; * MMseqs2 does not repeat the whole parameter list for each submodule call anymore. ## Bugs; * Default parameters of `map` workflow are now set correctly; * Some modules were using the wrong coverage parameter; * Sliced profile search was losing high E-value hits; * Sliced profile search is now stable; * Profile-Sequence alignment E-values where sl",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/8-fac81:2605,mask,masking,2605,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/8-fac81,3,['mask'],"['mask-lower-case', 'masking']"
Availability,"information as output options to `convertalis` (`qOrfStart/qOrfEnd, dbOrfStart, dbOrfEnd`); * Speed up sorting using [ips4o](https://github.com/SaschaWitt/ips4o); * Speed up masking through new version of [tantan](http://cbrc3.cbrc.jp/~martin/tantan/) ; * Speed up multi-threaded writing of clustering results; * Speed up reading of database indices and merging target split databases; * Add memory tracking to account for index size when computing available memory (`--split-memory-limit` should be more reliable when searching/clustering billions of sequences).; * Add `--search-type 4` (translated/translated search) to `createindex`; * Add `convertalis --format-mode 3` HTML output based on MMseqs2 app (app.mmseqs.com); * Improve memory management in `result2msa` and `result2profile` modules; * Add `msa2result` module to create an alignment result db from MSAs; * Add `filterresult` to slim down result dbs with pairwise HHblits filtering #316; * Add `--kmers-per-sequence-scale` to `linsearch` to extract a k-mer fraction instead of a fixed count ; * Add a random integer to `--local-tmp` path to avoid race conditions if multiple MMseqs2 happen on the same machine; * Add `--max-seqs` to `ungappedprefilter`; * Add `--tax-lineage-mode 2` parameter to print numeric taxids. ## Bugs fixed; * `rbh` workflow was broken due to issues with `filterdb`; * Fix `-a` in RBH search to show alignments; * Fix PDB70 database creation in `databases`; * Fix aria2c download support; * Fix memory issues and MPI in kmermatcher ; * Fix memory issues in `extractorfs` when using AVX2 ; * Fix `--cluster-reassign` to respect `--cov-mode`; * Set-cover supports up to 2^32 sequences (previously crashed with more than 2^31); * Exit correctly if there is not have enough disk space instead of crashing in the next module; * Fix `prefilter` order instability when searching very redundant databases; * Correctly parse keys from data files in `filterdb --filter-file`, this was causing instability in `linsearch`; ",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/12-113e3:2200,down,down,2200,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/12-113e3,1,['down'],['down']
Availability,"k-mers with sequence length (`--kmer-per-seq-scale`); * `rescorediagonal` got two new rescore modes, one for global alignment scoring and one for scoring a quasi global alignment fullfilling a local window criterion ; * Peak memory usage for reading in very large databases is greatly reduced. 128GB nodes should comfortably be able to deal with up to the maximum of 4.2 billion entries ; * Parameters taking byte values support syntax with a SI suffix (e.g., `--split-memory-limit 64G`); * Nucleotide substitution matrices should be user definable ; * Taxonomy report is compatible with [Pavian](https://github.com/fbreitwieser/pavian). Thanks to Florian Breitwieser!; * `cluster` workflow learned a reassignment mode `--cluster-reassign`. This mode corrects errors that occured because of cascaded clustering; * `extractorfs` can directly translate a nucleotide ORF to an amino acid sequence; * `result2stats` can write TSV files; * `createsubdb` supports softlinks instead of always hard copying the whole file to disk; * reduced harddisk space usage for all cascaded clusterings ; * `easy-taxonomy` reports the top hit alignment as a separate output file with the suffix `tophit_aln`; * `createindex` checks if an index needs to be recomputed were improved. ## Bug fixes; * MMseqs2 did not compile on FreeBSD. Please let us know about free continuous integration options to make sure it will keep working in the future; * `proteinaln2nucl` could return wrong coordinates; * `apply` would deadlock when running with multiple threads; * MPI searches are way more reliable, there were various issues around merging the separate results. MPI logic of split and merge is also integrated into the regression tests suite; * `prefilter` splits nucleotide searches if not enough memory is available ; * `kmermatcher` could corrupt memory; * `rescorediagonal` could produce wrong sequence identities when aligning mixed-case sequences; * macOS builds were not actually static (still dynamically link libsyst",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c:3024,error,errors,3024,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c,1,['error'],['errors']
Availability,"lated/translated search) to `createindex`; * Add `convertalis --format-mode 3` HTML output based on MMseqs2 app (app.mmseqs.com); * Improve memory management in `result2msa` and `result2profile` modules; * Add `msa2result` module to create an alignment result db from MSAs; * Add `filterresult` to slim down result dbs with pairwise HHblits filtering #316; * Add `--kmers-per-sequence-scale` to `linsearch` to extract a k-mer fraction instead of a fixed count ; * Add a random integer to `--local-tmp` path to avoid race conditions if multiple MMseqs2 happen on the same machine; * Add `--max-seqs` to `ungappedprefilter`; * Add `--tax-lineage-mode 2` parameter to print numeric taxids. ## Bugs fixed; * `rbh` workflow was broken due to issues with `filterdb`; * Fix `-a` in RBH search to show alignments; * Fix PDB70 database creation in `databases`; * Fix aria2c download support; * Fix memory issues and MPI in kmermatcher ; * Fix memory issues in `extractorfs` when using AVX2 ; * Fix `--cluster-reassign` to respect `--cov-mode`; * Set-cover supports up to 2^32 sequences (previously crashed with more than 2^31); * Exit correctly if there is not have enough disk space instead of crashing in the next module; * Fix `prefilter` order instability when searching very redundant databases; * Correctly parse keys from data files in `filterdb --filter-file`, this was causing instability in `linsearch`; * Allow overwriting string parameters with empty strings; * Fix ASAN issue in `extractorf` when using AVX2; * Microtar would try to seek backwards constantly resulting in horrible gzip read performance; * Avoid lookup writing to corrupt memory if an accession is too long; * Fix various inconsistencies and usability issues in `alignall`:; - `--alignment-mode` inconsistent with `align` module; - `--add-backtrace` did not do anything; * Fix restart of clusterings using reassignment `cluster --cluster-reassign`; * Fix createdb did not correctly read gz/bzip files with `--createdb-mode 1` #323",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/12-113e3:2762,down,download,2762,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/12-113e3,2,"['down', 'redundant']","['download', 'redundant']"
Availability,"oving k-mer extraction; * MMseqs2 consistently creates .source and .lookup files to match from which input file a sequence came from; E.g.: `mmseqs createdb input1.fa input2.fa seqDB` each sequence in seqDB can tell if it came from `input1.fa` or `input2.fa`; * `createdb` learned to index an existing (single-line-seq per entry) FASTA file without copying the FASTA content to a new database; * `align` and `rescorediagonal` learned to align circular sequences; * `align` exposes the z-drop parameter of its Banded Nucleotide alignment algorithm; * `reverseseq` learned to reverse profiles; * `filterdb` can filter rows with value within given percentage of first row; * new `aggragatetax` module to assign a taxonomic label to contigs according to the fragments matched on the contig; * Adjusting `--max-seq-len` is not required anymore, MMseqs2 automatically increases the length now.; * MMseqs2 on Cygwin/Windows uses `nedmalloc` as its memory allocator now and does not massively slow down due to lock contention; * new `tar2db` module to efficiently transform content of `tar` archives to MMseqs2 databases. ## Bug fixes; * `createindex` would create corrupted indices for profile target databases; * `rbh` workflow would create its result DB at an unexpected (wrong) location; * `(easy)-taxonomy --lca-mode 3` (Approx. LCA) was aligning invalid sequences in the second iteration and producing bad results; * `lca` (and `(easy)-taxonomy`) add empty columns for unclassifed sequences to be valid TSVs; * `kmermatcher` uses xxhash for hashing now (faster) ; * `kmermatcher` avoid crash machine has not enough memory to process data at once (affects linclust/cluster); * `kmermatcher` correctly deals with sequences longer than MAX_SHRT now; * `kmermatcher` fixed various edge cases (e.g. alignment of 1-char sequences); * `kmermatcher` hash-shift would be ignored; * `offsetalignment` could produce wrong results in the minus-strand; * `clust` now correctly and consistently handles alignment DB ",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c:3898,down,down,3898,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c,1,['down'],['down']
Availability,"qs-win64.zip) |; | AVX2 | [mmseqs-linux-avx2.tar.gz](https://mmseqs.com/latest/mmseqs-linux-avx2.tar.gz) | [mmseqs-osx-avx2.tar.gz](https://mmseqs.com/latest/mmseqs-osx-avx2.tar.gz) | - |. ## Known Issues; * MMseqs2 on Windows seems to not scale well on multiple threads; * MMseqs2 on Windows can crash when built with AVX2 support (mostly on VMs). ## Features; * `createindex` can precompute split indices to improve runtime when searching against a database that is larger than the system memory. Precomputed databases also require less overhead RAM, since only the required parts are loaded; * `easy-search`, `easy-taxonomy`, `easy-linclust` and `easy-cluster` workflows can take any number of query FASTA or FASTQ files; * MMseqs2 validates database types. It will exit with an error message on wrong input, where it would previously crash; * `kmermatcher` reports the diagonal with the most k-mer matches; * `kmermatcher` scales the number of k-mers with sequence length (`--kmer-per-seq-scale`); * `rescorediagonal` got two new rescore modes, one for global alignment scoring and one for scoring a quasi global alignment fullfilling a local window criterion ; * Peak memory usage for reading in very large databases is greatly reduced. 128GB nodes should comfortably be able to deal with up to the maximum of 4.2 billion entries ; * Parameters taking byte values support syntax with a SI suffix (e.g., `--split-memory-limit 64G`); * Nucleotide substitution matrices should be user definable ; * Taxonomy report is compatible with [Pavian](https://github.com/fbreitwieser/pavian). Thanks to Florian Breitwieser!; * `cluster` workflow learned a reassignment mode `--cluster-reassign`. This mode corrects errors that occured because of cascaded clustering; * `extractorfs` can directly translate a nucleotide ORF to an amino acid sequence; * `result2stats` can write TSV files; * `createsubdb` supports softlinks instead of always hard copying the whole file to disk; * reduced harddisk space usage",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c:2098,error,error,2098,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c,1,['error'],['error']
Availability,"re stable and correctly deals with deleted sequences #272; * Add easy workflow for reciprocal best hit searches `easy-rbh` ; * Add SILVA, Pfam-B, dbCAN2 to `databases`; * `databases` produces taxonomy information for NR; * Replace old greedy incremental clustering with new memory efficient version; * Add `result2dnamsa` module to create MSAs of nucleotide sequences; * Continued progress on profile-profile searching (`result2pp`,`expandaln`,`expand2profile`) , stay tuned!; * Add multi-parameter to support to overwrite sequence type specific parameters: e.g. `--gap-open ""nucl:5,aa:11""` ; * Add ORF information as output options to `convertalis` (`qOrfStart/qOrfEnd, dbOrfStart, dbOrfEnd`); * Speed up sorting using [ips4o](https://github.com/SaschaWitt/ips4o); * Speed up masking through new version of [tantan](http://cbrc3.cbrc.jp/~martin/tantan/) ; * Speed up multi-threaded writing of clustering results; * Speed up reading of database indices and merging target split databases; * Add memory tracking to account for index size when computing available memory (`--split-memory-limit` should be more reliable when searching/clustering billions of sequences).; * Add `--search-type 4` (translated/translated search) to `createindex`; * Add `convertalis --format-mode 3` HTML output based on MMseqs2 app (app.mmseqs.com); * Improve memory management in `result2msa` and `result2profile` modules; * Add `msa2result` module to create an alignment result db from MSAs; * Add `filterresult` to slim down result dbs with pairwise HHblits filtering #316; * Add `--kmers-per-sequence-scale` to `linsearch` to extract a k-mer fraction instead of a fixed count ; * Add a random integer to `--local-tmp` path to avoid race conditions if multiple MMseqs2 happen on the same machine; * Add `--max-seqs` to `ungappedprefilter`; * Add `--tax-lineage-mode 2` parameter to print numeric taxids. ## Bugs fixed; * `rbh` workflow was broken due to issues with `filterdb`; * Fix `-a` in RBH search to show alignment",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/12-113e3:1751,avail,available,1751,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/12-113e3,2,"['avail', 'reliab']","['available', 'reliable']"
Availability,"rk with set-cover or connected-component ; * Short circuit `--cluster-reassign` if nothing can be reassigned; * Fix temporary files not getting removed in `linclust/cluster` with `--remove-tmp--files`; * Fix `kmermatcher` setting user k-mer pattern in auto k-mer selection and breaking; * Krona `taxonomyreport` was not working if no sequence was unclassified; * Make `Matcher::resultToBuffer` buffer sizes consistent (could crash with very long backtraces, needs further refactoring); * Fix multiple locations where `Util::checkAllocation` could never be called as it would have crashed before; * Whitespace containing parameters do not break workflows anymore (e.g. passing whitespaces to `--sub-mat`); * `taxonomyreport` and `addtaxonomy` parameter were not adjustable in `easy-taxonomy`; * E-value parameters are now correctly parsed as doubles instead of floats #379; * Add symlinks to `splitdb` #376; * Increase maximum number of open files in `DBReader`; * Include file size and modified date of inputs in `temporary` file hash calculation #372; * `--cov-mode 5` was not working #371; * Database downloader deals correctly with redirects now; * `result2profile` could crash if target database contained much longer sequences than query database; * Stop symlinking header database (and other ancillary files) in `filterresult`. ## Developer; * Add vector of predefined substitution matrices to add additional matrices in subprojects; * Don't create false `_has_{builtin,attribute}` macros (see https://github.com/simd-everywhere/simde/issues/691#issuecomment-753686859); * Add `USE_SYSTEM_ZSTD` cmake flag to use system provided zstd #411; * Replace texlive with tectonic for faster/prettier userguide; * Add more instructions to `simd.h`; * Add initial fixes to get MMseqs2 working on s390x (work in progress); * Prebuilt macOS binary is now a Universal Mac Binary supporting SSE, AVX and Apple Silicon NEON; * Build ARM64/PPC64LE binaries by cross-compiling; * Add missing licenses and README",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/13-45111:4551,down,downloader,4551,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/13-45111,1,['down'],['downloader']
Availability,"s in various modules. ## Bug fixes; * `covertmsa` does now correctly parses STOCKHOLM files without accession keys; * In `search` when using splits less than `--max-seqs` sequences would be the limit, now correctly computes the limit (max-seqs/Splits + 4*sqrt(max_seqs/Splits)); * Fix bug in MsaFilter where wrong sequences would be filtered; * `swapresults` will add an empty entry if a target entry has no corresponding query match, instead of no entry at all; * `createindex` creates now correctly creates a tmp directory if no directory exists already; * Fix query split runs for small input databases; * `result2stats` was reading the wrong first sequence (from query instead of target database); * `result2repseq` now writes the correct `.dbtype` file; * `convertalis` now reads the correct `dbtype` for the target sequence; * Fix empty REG_EMPTY bug on macOS; * Fix possible memory corruption when searching against database indexed by 'createindex'; * Report error if -DHAVE_MPI was set and MPI is not installed on the system; * Avoid race condition in `kmermatcher` (invalid parallel writing to vector<bool>); * Fix `msa2profile` header output format; * `msa2profile` uses the FASTA readin mode by default now; * Target profile databases and databases build with `--exact-kmer-matching` now correctly extract all k-mers; * Fix identical score computation of alignment if clustering using profiles ; * Nucleotide backtranslation `translateaa` would produce invalid codons for X. ## Others; * removed `--early-exit`; * Output name of program called. ## Experimental new modules; * new fast alignment method `alignbykmer`. ## Developers; * Cmake flag `-DHAVE_GPROF` for profiling MMseqs2 using gprof; * Fixed most warnings ; * SSTR does not use stringstreams anymore ; * Refactored time measuring; * `Debug::INFO/WARNING/ERROR` is now used consistently across the codebase; * If available (shellcheck)[https://github.com/koalaman/shellcheck] will critique shell scripts and fail the compilation",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/4-0b8cc:2551,error,error,2551,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/4-0b8cc,2,"['avail', 'error']","['available', 'error']"
Availability,"s user input. Many MMseqs2 modules use less memory and run faster. The new `databases` module helps to download and setup database. We now have a chat support at [chat.mmseqs.com](https://chat.mmseqs.com). ## Known Issues; * `rbh` crashes due to invalid sorting mode (#290); * Homebrew's macOS version does not use multiple cores (#289); * `prefilter` results can be unstable between different runs for extremely redundant databases (#277); * `linclust`/`cluster` can crash for very small input sets (#274). ## Breaking Changes; * `kmermatcher` `--skip-n-repeat-kmer` parameter was replaced with `--ignore-multi-kmer`; Does not discard whole sequences anymore if a k-mer occured to often, instead it skips the specific k-mers.; Either mode is only used in Plass and not in Linclust; * `--lca-ranks` from `(easy-)taxonomy` and `lca` has to be delimited with semicolons (`;`) instead of colons (`:`); * `--dont-shuffle` flag was renamed to `--shuffle true/false`. ## Features; * new `databases` workflow to list and download common databases. ; Supported databases:; ```; Name 	Type 	Taxonomy	Url; - UniRef100 	Aminoacid 	 yes	https://www.uniprot.org/help/uniref; - UniRef90 	Aminoacid 	 yes	https://www.uniprot.org/help/uniref; - UniRef50 	Aminoacid 	 yes	https://www.uniprot.org/help/uniref; - UniProtKB 	Aminoacid 	 yes	https://www.uniprot.org/help/uniprotkb; - UniProtKB/TrEMBL 	Aminoacid 	 yes	https://www.uniprot.org/help/uniprotkb; - UniProtKB/Swiss-Prot	Aminoacid 	 yes	https://uniprot.org; - NR 	Aminoacid 	 -	https://ftp.ncbi.nlm.nih.gov/blast/db/FASTA; - NT 	Nucleotide	 -	https://ftp.ncbi.nlm.nih.gov/blast/db/FASTA; - PDB 	Aminoacid 	 -	https://www.rcsb.org; - PDB70 	Profile 	 -	https://github.com/soedinglab/hh-suite; - Pfam-A.full 	Profile 	 -	https://pfam.xfam.org; - Pfam-A.seed 	Profile 	 -	https://pfam.xfam.org; - eggNOG 	Profile 	 -	http://eggnog5.embl.de; - Resfinder 	Nucleotide	 -	https://cge.cbs.dtu.dk/services/ResFinder; - Kalamari 	Nucleotide	 yes	https://github.com/lskatz/",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c:1089,down,download,1089,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c,1,['down'],['download']
Availability,"seqs2 taxonomy to assign taxonomic labels to short reads, consider using the `--orf-filter 0` parameter to disable the new filter stage as it can reject too many short query sequences. MMseqs2 is still considerably faster with this parameter set. As our nucleotide-to-nucleotide taxonomic assignment does not support the 2bLCA assignment mode for stable lowest-common-ancestor computation, we previously set MMseqs2 to perform LCA assignment by top-hit (`--lca-mode 4`) as default. Approximate (see manuscript) 2bLCA is now again the default and we automatically switch to top-hit if given nucleotide-to-nucleotide input. ## Breaking changes; * `--slice-search` in now called `--exhaustive-search`; * Unify `--compress` `--summarize` `--omit-consensus` (in `result2msa`) to `--msa-format-mode`. ## Features; * Add GTDB and CDD to databases downloader #410; * Add `nrtotaxmapping` to create taxonomy mapping from NR; * Add `unpackdb` to split a database into separate files #406; * Add `majoritylca` module for majority voting based taxonomy from alignment results; * Add `cpdb` and `lndb`; * Taxonomy information is stored in binary format (a single `db_taxonomy` file, instead of `db_{named,nodes,merged}.dmp,db_mapping`) to speed up read-in. Old format is still supported.; * `--exhaustive-search` is usable with ungapped alignments (`--alignment-mode 4`); * Allow sequence/result database input in `taxonomyreport` #401/#408; * `msa2profile/result` can skip the first sequence with `--skip-query`; * `createtaxdb` can create a taxdb by mapping through `.source` in addition to `.lookup` (`--tax-mapping-mode 1`); * `splitsequence` can create a sequence database with original headers; * `align` can return short cluster format if only identifiers are required `--alignment-output-mode`; * `tar2db` can be used multi-threaded if input allows (e.g. `.tar` containing `.gz` files); * Encode species names in taxonomy blocklist to make sure we don't block random nodes in * e.g. GTDB); * Split non-ind",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/13-45111:1426,down,downloader,1426,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/13-45111,1,['down'],['downloader']
Deployability,"## Breaking changes; * Remove `--add-internal-id` parameter from `result2msa`; * `filterdb --shuffle` is now randomly instead of deterministically shuffled; * Taxonomy expressions in filtertax(seq)db interpret `,` as `||` now #320; * `convertalis` `pident` output field now correctly reports percentage (0-100) sequence identity instead of fraction (0.00-1.00), use `fident` to print the fraction instead. ## Features; * Support nucleotide clustering in `cluster` and `easy-cluster`; * Support other architectures (SSE2/ARM64/POWER8/POWER9/etc) through [SIMDe](https://github.com/simd-everywhere/simde); * Linclust is much faster on systems with a lot of CPU cores; * Clustering update is faster, more stable and correctly deals with deleted sequences #272; * Add easy workflow for reciprocal best hit searches `easy-rbh` ; * Add SILVA, Pfam-B, dbCAN2 to `databases`; * `databases` produces taxonomy information for NR; * Replace old greedy incremental clustering with new memory efficient version; * Add `result2dnamsa` module to create MSAs of nucleotide sequences; * Continued progress on profile-profile searching (`result2pp`,`expandaln`,`expand2profile`) , stay tuned!; * Add multi-parameter to support to overwrite sequence type specific parameters: e.g. `--gap-open ""nucl:5,aa:11""` ; * Add ORF information as output options to `convertalis` (`qOrfStart/qOrfEnd, dbOrfStart, dbOrfEnd`); * Speed up sorting using [ips4o](https://github.com/SaschaWitt/ips4o); * Speed up masking through new version of [tantan](http://cbrc3.cbrc.jp/~martin/tantan/) ; * Speed up multi-threaded writing of clustering results; * Speed up reading of database indices and merging target split databases; * Add memory tracking to account for index size when computing available memory (`--split-memory-limit` should be more reliable when searching/clustering billions of sequences).; * Add `--search-type 4` (translated/translated search) to `createindex`; * Add `convertalis --format-mode 3` HTML output based on MMse",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/12-113e3:679,update,update,679,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/12-113e3,1,['update'],['update']
Deployability,"**At a glance:** The MMseqs2 command line interface is cleaner and validates user input. Many MMseqs2 modules use less memory and run faster. ## Known Issues; * High sensitivity searches (higher than -s 6) with precomputed indices should fail. Pass `--db-load-mode 3` as a workaround to the MMseqs2 call. ## Breaking Changes; * Default taxonomy mode is assigning the same taxonomic label as the top hit. The previous ""approximate 2bLCA"" mode can be used with `--lca-mode 3` or the non-approximated 2bLCA with `--lca-mode 2`; * MMseqs2 will refuse to compile on compilers without OpenMP support (Use `-DREQUIRE_OPENMP=0` to force a single-threaded no OpenMP build); * The confusingly named (and probably non-functional) `--global-alignment` parameter is gone; * File names of the **latest** precompiled binaries changed. All archives contain a copy of the user guide and the MMseqs2 binary in the same subfolder (see further down for binaries of release 10-6d92c):. | SIMD | Linux | macOS | Windows |; |--------|---------------------------|-------------------------|--------------------------|; | SSE4.1 | [mmseqs-linux-sse41.tar.gz](https://mmseqs.com/latest/mmseqs-linux-sse41.tar.gz) | [mmseqs-osx-sse41.tar.gz](https://mmseqs.com/latest/mmseqs-osx-sse41.tar.gz) | [mmseqs-win64.zip](https://mmseqs.com/latest/mmseqs-win64.zip) |; | AVX2 | [mmseqs-linux-avx2.tar.gz](https://mmseqs.com/latest/mmseqs-linux-avx2.tar.gz) | [mmseqs-osx-avx2.tar.gz](https://mmseqs.com/latest/mmseqs-osx-avx2.tar.gz) | - |. ## Known Issues; * MMseqs2 on Windows seems to not scale well on multiple threads; * MMseqs2 on Windows can crash when built with AVX2 support (mostly on VMs). ## Features; * `createindex` can precompute split indices to improve runtime when searching against a database that is larger than the system memory. Precomputed databases also require less overhead RAM, since only the required parts are loaded; * `easy-search`, `easy-taxonomy`, `easy-linclust` and `easy-cluster` workflows can take an",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c:945,release,release,945,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c,1,['release'],['release']
Deployability,"-limit 64G`); * Nucleotide substitution matrices should be user definable ; * Taxonomy report is compatible with [Pavian](https://github.com/fbreitwieser/pavian). Thanks to Florian Breitwieser!; * `cluster` workflow learned a reassignment mode `--cluster-reassign`. This mode corrects errors that occured because of cascaded clustering; * `extractorfs` can directly translate a nucleotide ORF to an amino acid sequence; * `result2stats` can write TSV files; * `createsubdb` supports softlinks instead of always hard copying the whole file to disk; * reduced harddisk space usage for all cascaded clusterings ; * `easy-taxonomy` reports the top hit alignment as a separate output file with the suffix `tophit_aln`; * `createindex` checks if an index needs to be recomputed were improved. ## Bug fixes; * MMseqs2 did not compile on FreeBSD. Please let us know about free continuous integration options to make sure it will keep working in the future; * `proteinaln2nucl` could return wrong coordinates; * `apply` would deadlock when running with multiple threads; * MPI searches are way more reliable, there were various issues around merging the separate results. MPI logic of split and merge is also integrated into the regression tests suite; * `prefilter` splits nucleotide searches if not enough memory is available ; * `kmermatcher` could corrupt memory; * `rescorediagonal` could produce wrong sequence identities when aligning mixed-case sequences; * macOS builds were not actually static (still dynamically link libsystem however); * `lca` module could corrupt memory and crash; * `createdb` does not crash on systems with only 4GB of RAM anymore; * AVX2 and SSE4.1 builds could produce slightly different results; * `summarizeresults` does not crash on empty alignments results anymore; * fix wrong tophit_report in `easy-taxonomy` ; * Precompiled Windows builds were broken; * Precomputed indices of databases with very short sequences could truncate alignments if the query sequences were l",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c:3608,continuous,continuous,3608,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c,2,"['continuous', 'integrat']","['continuous', 'integration']"
Deployability,"At a glance: Improved taxonomy, add colors to user output, improve computation progress bar, small speed ups and many bug fixes. ## Features; * Add support for Kraken style taxonomy reports. Thanks to Florian Breitwieser; * New easy-taxonomy workflow ; * New progress bar to reduce output ; * Colored errors and warnings . ## Bugs; * Fix alignment problem in SSW library https://github.com/mengyao/Complete-Striped-Smith-Waterman-Library/issues/61; * Fix iterative profile search ; * Fix protein nucleotide index issues ; * Fix cluster update workflow; * Fix critical multi threading bug in taxonomy workflow",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/9-d36de:536,update,update,536,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/9-d36de,1,['update'],['update']
Deployability,"Changes since release 3-be8f6. ## New features; * Alternative alignments in search (`--alt-ali`). Find alignments by masking out previously found regions in the target sequence.; * Added `map` workflow for fast near-exact mapping of reads; * Added `easy-linclust` workflow, that works on FASTA files; * Sequence lengths longer than 32k are now supported (default sequence length limit is now 65535); * `createdb` shuffles the order of entries by default (`--dont-shuffle` to disable), useful for database splits, where one split could take much longer than others; * `linclust` now supports MPI; * `linclust` adds one hash for the whole sequence, to improve extract sequence matching; * New sequence identity computation modes, where the normalization happens on the query or target length instead of alignment length; * New `--cov-mode` that computes the coverage only based on sequence lengths (`--cov-mode 3`); * `search`/`cluster`/`linclust` workflows have learned `--alignment-mode 4` for faster ungapped alignments; * Translated `search` sorts now results by E-value and aggregates all ORFs under the corresponding contig identifier; * `prefiltering` can now sort hits with score > 255 correctly; * `convertalis` now works with profiles; * Added generalized database transposition tool `swapdb` (`swapresults` only makes sense for prefiltering/alignment results). ## Performance; * Speedup `extractorf` with vectorization; * Many performance improvements to reduce overhead for web server mode; * `createtsv` writes output in parallel; * Avoid many unnecessary memory allocations in various modules. ## Bug fixes; * `covertmsa` does now correctly parses STOCKHOLM files without accession keys; * In `search` when using splits less than `--max-seqs` sequences would be the limit, now correctly computes the limit (max-seqs/Splits + 4*sqrt(max_seqs/Splits)); * Fix bug in MsaFilter where wrong sequences would be filtered; * `swapresults` will add an empty entry if a target entry has no correspon",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/4-0b8cc:14,release,release,14,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/4-0b8cc,1,['release'],['release']
Deployability,"ce; * `result2stats` can write TSV files; * `createsubdb` supports softlinks instead of always hard copying the whole file to disk; * reduced harddisk space usage for all cascaded clusterings ; * `easy-taxonomy` reports the top hit alignment as a separate output file with the suffix `tophit_aln`; * `createindex` checks if an index needs to be recomputed were improved. ## Bug fixes; * MMseqs2 did not compile on FreeBSD. Please let us know about free continuous integration options to make sure it will keep working in the future; * `proteinaln2nucl` could return wrong coordinates; * `apply` would deadlock when running with multiple threads; * MPI searches are way more reliable, there were various issues around merging the separate results. MPI logic of split and merge is also integrated into the regression tests suite; * `prefilter` splits nucleotide searches if not enough memory is available ; * `kmermatcher` could corrupt memory; * `rescorediagonal` could produce wrong sequence identities when aligning mixed-case sequences; * macOS builds were not actually static (still dynamically link libsystem however); * `lca` module could corrupt memory and crash; * `createdb` does not crash on systems with only 4GB of RAM anymore; * AVX2 and SSE4.1 builds could produce slightly different results; * `summarizeresults` does not crash on empty alignments results anymore; * fix wrong tophit_report in `easy-taxonomy` ; * Precompiled Windows builds were broken; * Precomputed indices of databases with very short sequences could truncate alignments if the query sequences were longer. ## Developers; * Tools using MMseqs2 as a framework do not need to export MMseqs2 modules again anymore; * MMseqs2 uses Azure Pipelines for all platforms to run our regression tests suite and provide precompiled binaries; * MMseqs2 runs under ASan without any issues. We fixed various small memory leaks; * The regression suite is directly linked through a submodule. It can be used by running:; ```; git submo",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c:3939,integrat,integrated,3939,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c,1,['integrat'],['integrated']
Deployability,"e to view single entry in an MMseqs2 database; * `align` module has learned `--min-aln-len` parameter to filter by minimal alignment length; * Alignment modules (`rescorediagonal`, `align`) can align longer sequences now (not limited to 2^15 length); * Input sequences can now be softmasked (lower letter masking) instead of only hard masking (replacing with X) ``--mask-lower-case`. The masking only applies to the prefilter stages `kmermatcher` or `prefilter` and can be combined with `--mask`; * `filterdb` has learned `--filter-expression` parameter and mode that allows filtering by simple mathematical expressions; * `alignbykmer` can be used for nucleotide searches; * MMseqs2 _did-you-mean_ functionality gives better suggestions; * MMseqs2 does not repeat the whole parameter list for each submodule call anymore. ## Bugs; * Default parameters of `map` workflow are now set correctly; * Some modules were using the wrong coverage parameter; * Sliced profile search was losing high E-value hits; * Sliced profile search is now stable; * Profile-Sequence alignment E-values where slightly too high; * `result2msa` was crashing with profiles on the target side; * `result2msa` should not crash with `--alow-deletion` anymore; * Some parameters were never visible (with or without `-h`); * Various issues with MPI were resolved. ## Developers; * Continous integration enforces no compile warnings now; * Continous integration now tries to build AArch64 builds with Docker and Qemu; * We added a first draft of our [developer guide](https://github.com/soedinglab/MMseqs2/wiki/MMseqs2-Developer-Guide) to the wiki. ## References; [1] Müller T & Martin Vingron, Modeling Amino Acid Replacement, J Comput Biol. 2000;7:761–76. doi: 10.1089/10665270050514918. [2] Müller T, Spang R, Vingron M. Estimating amino acid substitution models: a comparison of Dayhoff's estimator, the resolvent approach and a maximum likelihood method. Mol Biol Evol. 2002;19:8–13. doi: 10.1093/oxfordjournals.molbev.a003985",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/8-fac81:3661,integrat,integration,3661,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/8-fac81,2,['integrat'],['integration']
Deployability,"lts are placed in a subfolder based on the hash of all paths and parameters. ## Performance Regressions Fixed; * Fixed regression when multiple mmseqs instances were running at the same time. ## Breaking Command Line Interface Changes; * Incremented index version, old precomputed indices have to be regenerated; * New Profile format, databases generated through `convertprofiledb` and `msa2profile` have to be regenerated; * Clustering workflow is now by default cascaded. We replaced the `--cascaded` flag with `--single-step-clustering`; * Max sequence length of 32768 is now actually validated and enforced; * Each sequence database has now a dbtype file (AA=0, NUC=1, PROFILE=2); * extractorf was reworked:; * `--skip-incomplete` was split into two parameters `--contig-start-mode` and `--contig-end-mode`; * `--longest-orf` was reworked into `--orf-start-mode` ; * removed `--extend-min` parameter. ## Others; * Factor four times faster clustering workflow; * Improve speed of `linclust` by a factor of two; * Remove 'X' from prefilter index (reduces memory and improves speed at the same sensitivity); * Fix bugs for Query coverage mode (`--cov-mode 2`) ; * Clustering is now the same between single and multi threaded version; * Speedup of kmermatcher; * Fix bug in Clust hash. It can now cluster to 1.0 sequence identity; * Improve target profile search, set max-seqs to infinite for alignments. ; * Improve speed of `align` if prefilter result fit into memory; * Many usability improvements; * Improved suggestions of bash completion; * Expert modules are hidden by default, use `-h` flag to show everything; * Speed up `mergeclusters` by a lot; * Fix sequence identity print out bug if the id is less than 10%; * MPI Runner variable can now correctly contain further parameters (RUNNER=""mpirun -np 4"" was not working); * Enforcing GCC 4.6 compatibilty in our continous integration. ## Devlopers; * MMseqs2 can now be included in framework mode to subprojects; * DBReader has a SHUFFLE mode",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/2-23394:3057,integrat,integration,3057,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/2-23394,1,['integrat'],['integration']
Deployability,"s hard copying the whole file to disk; * reduced harddisk space usage for all cascaded clusterings ; * `easy-taxonomy` reports the top hit alignment as a separate output file with the suffix `tophit_aln`; * `createindex` checks if an index needs to be recomputed were improved. ## Bug fixes; * MMseqs2 did not compile on FreeBSD. Please let us know about free continuous integration options to make sure it will keep working in the future; * `proteinaln2nucl` could return wrong coordinates; * `apply` would deadlock when running with multiple threads; * MPI searches are way more reliable, there were various issues around merging the separate results. MPI logic of split and merge is also integrated into the regression tests suite; * `prefilter` splits nucleotide searches if not enough memory is available ; * `kmermatcher` could corrupt memory; * `rescorediagonal` could produce wrong sequence identities when aligning mixed-case sequences; * macOS builds were not actually static (still dynamically link libsystem however); * `lca` module could corrupt memory and crash; * `createdb` does not crash on systems with only 4GB of RAM anymore; * AVX2 and SSE4.1 builds could produce slightly different results; * `summarizeresults` does not crash on empty alignments results anymore; * fix wrong tophit_report in `easy-taxonomy` ; * Precompiled Windows builds were broken; * Precomputed indices of databases with very short sequences could truncate alignments if the query sequences were longer. ## Developers; * Tools using MMseqs2 as a framework do not need to export MMseqs2 modules again anymore; * MMseqs2 uses Azure Pipelines for all platforms to run our regression tests suite and provide precompiled binaries; * MMseqs2 runs under ASan without any issues. We fixed various small memory leaks; * The regression suite is directly linked through a submodule. It can be used by running:; ```; git submodule update --init; ./util/regression/run_regression.sh $PATH_TO_MMSEQS/mmseqs $TMP_DIR; ```",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c:5161,update,update,5161,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c,1,['update'],['update']
Deployability,"s in various modules. ## Bug fixes; * `covertmsa` does now correctly parses STOCKHOLM files without accession keys; * In `search` when using splits less than `--max-seqs` sequences would be the limit, now correctly computes the limit (max-seqs/Splits + 4*sqrt(max_seqs/Splits)); * Fix bug in MsaFilter where wrong sequences would be filtered; * `swapresults` will add an empty entry if a target entry has no corresponding query match, instead of no entry at all; * `createindex` creates now correctly creates a tmp directory if no directory exists already; * Fix query split runs for small input databases; * `result2stats` was reading the wrong first sequence (from query instead of target database); * `result2repseq` now writes the correct `.dbtype` file; * `convertalis` now reads the correct `dbtype` for the target sequence; * Fix empty REG_EMPTY bug on macOS; * Fix possible memory corruption when searching against database indexed by 'createindex'; * Report error if -DHAVE_MPI was set and MPI is not installed on the system; * Avoid race condition in `kmermatcher` (invalid parallel writing to vector<bool>); * Fix `msa2profile` header output format; * `msa2profile` uses the FASTA readin mode by default now; * Target profile databases and databases build with `--exact-kmer-matching` now correctly extract all k-mers; * Fix identical score computation of alignment if clustering using profiles ; * Nucleotide backtranslation `translateaa` would produce invalid codons for X. ## Others; * removed `--early-exit`; * Output name of program called. ## Experimental new modules; * new fast alignment method `alignbykmer`. ## Developers; * Cmake flag `-DHAVE_GPROF` for profiling MMseqs2 using gprof; * Fixed most warnings ; * SSTR does not use stringstreams anymore ; * Refactored time measuring; * `Debug::INFO/WARNING/ERROR` is now used consistently across the codebase; * If available (shellcheck)[https://github.com/koalaman/shellcheck] will critique shell scripts and fail the compilation",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/4-0b8cc:2594,install,installed,2594,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/4-0b8cc,1,['install'],['installed']
Energy Efficiency,"## Breaking changes; * Remove `--add-internal-id` parameter from `result2msa`; * `filterdb --shuffle` is now randomly instead of deterministically shuffled; * Taxonomy expressions in filtertax(seq)db interpret `,` as `||` now #320; * `convertalis` `pident` output field now correctly reports percentage (0-100) sequence identity instead of fraction (0.00-1.00), use `fident` to print the fraction instead. ## Features; * Support nucleotide clustering in `cluster` and `easy-cluster`; * Support other architectures (SSE2/ARM64/POWER8/POWER9/etc) through [SIMDe](https://github.com/simd-everywhere/simde); * Linclust is much faster on systems with a lot of CPU cores; * Clustering update is faster, more stable and correctly deals with deleted sequences #272; * Add easy workflow for reciprocal best hit searches `easy-rbh` ; * Add SILVA, Pfam-B, dbCAN2 to `databases`; * `databases` produces taxonomy information for NR; * Replace old greedy incremental clustering with new memory efficient version; * Add `result2dnamsa` module to create MSAs of nucleotide sequences; * Continued progress on profile-profile searching (`result2pp`,`expandaln`,`expand2profile`) , stay tuned!; * Add multi-parameter to support to overwrite sequence type specific parameters: e.g. `--gap-open ""nucl:5,aa:11""` ; * Add ORF information as output options to `convertalis` (`qOrfStart/qOrfEnd, dbOrfStart, dbOrfEnd`); * Speed up sorting using [ips4o](https://github.com/SaschaWitt/ips4o); * Speed up masking through new version of [tantan](http://cbrc3.cbrc.jp/~martin/tantan/) ; * Speed up multi-threaded writing of clustering results; * Speed up reading of database indices and merging target split databases; * Add memory tracking to account for index size when computing available memory (`--split-memory-limit` should be more reliable when searching/clustering billions of sequences).; * Add `--search-type 4` (translated/translated search) to `createindex`; * Add `convertalis --format-mode 3` HTML output based on MMse",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/12-113e3:980,efficient,efficient,980,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/12-113e3,1,['efficient'],['efficient']
Energy Efficiency,"At a glance: Faster searches and clustering through improved IO and better seeding. More search modes like tblastx, reciprocal best hit and linsearch. New output format SAM. Support for compressed databases to reduce hard disk and memory requirements. . ## Known Issues; * Iterative search only works up to 2 iterations. ## Breaking Changes; * MMseqs2 now saves a lot on IO by not merging result datafiles; There is still a single `.index` file, but the corresponding data files are split into multiple parts (as many as threads were used previously); * MMseqs2 now uses the VTML80 [1,2] substitution matrix to speed up the prefiltering (changeable by `--seed-sub-mat`), the final alignment is still computed with the Blosum62 (still changeable by `--sub-mat`); * All databases have now a `.dbtype` file; * MMseqs2 Docker image is now based on Debian instead of Alpine; * Changed Orf header format to be more space efficent. The new format is now `orignIdentifer startPos(-/+)len flag`; * `prefilter` returns ungapped-alignment scores instead of e-values ; * `createindex` the file extention is now `.idx` instead of the previous `.[s]k[6,7]` format. ## Features; * Support for tblastx-style nucl-nucl translated searches; `mmseqs search nuclDB1 nuclDb2 aln tmp --search-mode 2`; * Support for nucleotide searches; `mmseqs search nuclDB1 nuclDb2 aln tmp --search-mode 3`; * `convertalis` has learned to return SAM formatted output (preview); * Database can be compressed by applying [zstd](https://github.com/facebook/zstd) on each entry (`--compressed 1`); * Also added `compress` and `decompress` modules; * `rbh` workflow for reciprocal best hit searches added ; * `linclust` can now cluster nucleotide sequences on both forward and reverse strand; * Added `linsearch`, a lightning fast search for proteins and nucleotide sequences (preview; easy workflow variant `easy-linsearch` also added); * `createlinindex` computes an index for `linsearch`; * `taxonomy` uses `--orf-start-mode 1` to annotate",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/8-fac81:210,reduce,reduce,210,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/8-fac81,1,['reduce'],['reduce']
Energy Efficiency,"At a glance: Improved taxonomy, add colors to user output, improve computation progress bar, small speed ups and many bug fixes. ## Features; * Add support for Kraken style taxonomy reports. Thanks to Florian Breitwieser; * New easy-taxonomy workflow ; * New progress bar to reduce output ; * Colored errors and warnings . ## Bugs; * Fix alignment problem in SSW library https://github.com/mengyao/Complete-Striped-Smith-Waterman-Library/issues/61; * Fix iterative profile search ; * Fix protein nucleotide index issues ; * Fix cluster update workflow; * Fix critical multi threading bug in taxonomy workflow",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/9-d36de:275,reduce,reduce,275,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/9-d36de,1,['reduce'],['reduce']
Energy Efficiency,"eful for database splits, where one split could take much longer than others; * `linclust` now supports MPI; * `linclust` adds one hash for the whole sequence, to improve extract sequence matching; * New sequence identity computation modes, where the normalization happens on the query or target length instead of alignment length; * New `--cov-mode` that computes the coverage only based on sequence lengths (`--cov-mode 3`); * `search`/`cluster`/`linclust` workflows have learned `--alignment-mode 4` for faster ungapped alignments; * Translated `search` sorts now results by E-value and aggregates all ORFs under the corresponding contig identifier; * `prefiltering` can now sort hits with score > 255 correctly; * `convertalis` now works with profiles; * Added generalized database transposition tool `swapdb` (`swapresults` only makes sense for prefiltering/alignment results). ## Performance; * Speedup `extractorf` with vectorization; * Many performance improvements to reduce overhead for web server mode; * `createtsv` writes output in parallel; * Avoid many unnecessary memory allocations in various modules. ## Bug fixes; * `covertmsa` does now correctly parses STOCKHOLM files without accession keys; * In `search` when using splits less than `--max-seqs` sequences would be the limit, now correctly computes the limit (max-seqs/Splits + 4*sqrt(max_seqs/Splits)); * Fix bug in MsaFilter where wrong sequences would be filtered; * `swapresults` will add an empty entry if a target entry has no corresponding query match, instead of no entry at all; * `createindex` creates now correctly creates a tmp directory if no directory exists already; * Fix query split runs for small input databases; * `result2stats` was reading the wrong first sequence (from query instead of target database); * `result2repseq` now writes the correct `.dbtype` file; * `convertalis` now reads the correct `dbtype` for the target sequence; * Fix empty REG_EMPTY bug on macOS; * Fix possible memory corruption whe",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/4-0b8cc:1464,reduce,reduce,1464,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/4-0b8cc,1,['reduce'],['reduce']
Energy Efficiency,"k-mers with sequence length (`--kmer-per-seq-scale`); * `rescorediagonal` got two new rescore modes, one for global alignment scoring and one for scoring a quasi global alignment fullfilling a local window criterion ; * Peak memory usage for reading in very large databases is greatly reduced. 128GB nodes should comfortably be able to deal with up to the maximum of 4.2 billion entries ; * Parameters taking byte values support syntax with a SI suffix (e.g., `--split-memory-limit 64G`); * Nucleotide substitution matrices should be user definable ; * Taxonomy report is compatible with [Pavian](https://github.com/fbreitwieser/pavian). Thanks to Florian Breitwieser!; * `cluster` workflow learned a reassignment mode `--cluster-reassign`. This mode corrects errors that occured because of cascaded clustering; * `extractorfs` can directly translate a nucleotide ORF to an amino acid sequence; * `result2stats` can write TSV files; * `createsubdb` supports softlinks instead of always hard copying the whole file to disk; * reduced harddisk space usage for all cascaded clusterings ; * `easy-taxonomy` reports the top hit alignment as a separate output file with the suffix `tophit_aln`; * `createindex` checks if an index needs to be recomputed were improved. ## Bug fixes; * MMseqs2 did not compile on FreeBSD. Please let us know about free continuous integration options to make sure it will keep working in the future; * `proteinaln2nucl` could return wrong coordinates; * `apply` would deadlock when running with multiple threads; * MPI searches are way more reliable, there were various issues around merging the separate results. MPI logic of split and merge is also integrated into the regression tests suite; * `prefilter` splits nucleotide searches if not enough memory is available ; * `kmermatcher` could corrupt memory; * `rescorediagonal` could produce wrong sequence identities when aligning mixed-case sequences; * macOS builds were not actually static (still dynamically link libsyst",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c:3289,reduce,reduced,3289,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c,1,['reduce'],['reduced']
Energy Efficiency,"lts are placed in a subfolder based on the hash of all paths and parameters. ## Performance Regressions Fixed; * Fixed regression when multiple mmseqs instances were running at the same time. ## Breaking Command Line Interface Changes; * Incremented index version, old precomputed indices have to be regenerated; * New Profile format, databases generated through `convertprofiledb` and `msa2profile` have to be regenerated; * Clustering workflow is now by default cascaded. We replaced the `--cascaded` flag with `--single-step-clustering`; * Max sequence length of 32768 is now actually validated and enforced; * Each sequence database has now a dbtype file (AA=0, NUC=1, PROFILE=2); * extractorf was reworked:; * `--skip-incomplete` was split into two parameters `--contig-start-mode` and `--contig-end-mode`; * `--longest-orf` was reworked into `--orf-start-mode` ; * removed `--extend-min` parameter. ## Others; * Factor four times faster clustering workflow; * Improve speed of `linclust` by a factor of two; * Remove 'X' from prefilter index (reduces memory and improves speed at the same sensitivity); * Fix bugs for Query coverage mode (`--cov-mode 2`) ; * Clustering is now the same between single and multi threaded version; * Speedup of kmermatcher; * Fix bug in Clust hash. It can now cluster to 1.0 sequence identity; * Improve target profile search, set max-seqs to infinite for alignments. ; * Improve speed of `align` if prefilter result fit into memory; * Many usability improvements; * Improved suggestions of bash completion; * Expert modules are hidden by default, use `-h` flag to show everything; * Speed up `mergeclusters` by a lot; * Fix sequence identity print out bug if the id is less than 10%; * MPI Runner variable can now correctly contain further parameters (RUNNER=""mpirun -np 4"" was not working); * Enforcing GCC 4.6 compatibilty in our continous integration. ## Devlopers; * MMseqs2 can now be included in framework mode to subprojects; * DBReader has a SHUFFLE mode",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/2-23394:2226,reduce,reduces,2226,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/2-23394,1,['reduce'],['reduces']
Energy Efficiency,"oving k-mer extraction; * MMseqs2 consistently creates .source and .lookup files to match from which input file a sequence came from; E.g.: `mmseqs createdb input1.fa input2.fa seqDB` each sequence in seqDB can tell if it came from `input1.fa` or `input2.fa`; * `createdb` learned to index an existing (single-line-seq per entry) FASTA file without copying the FASTA content to a new database; * `align` and `rescorediagonal` learned to align circular sequences; * `align` exposes the z-drop parameter of its Banded Nucleotide alignment algorithm; * `reverseseq` learned to reverse profiles; * `filterdb` can filter rows with value within given percentage of first row; * new `aggragatetax` module to assign a taxonomic label to contigs according to the fragments matched on the contig; * Adjusting `--max-seq-len` is not required anymore, MMseqs2 automatically increases the length now.; * MMseqs2 on Cygwin/Windows uses `nedmalloc` as its memory allocator now and does not massively slow down due to lock contention; * new `tar2db` module to efficiently transform content of `tar` archives to MMseqs2 databases. ## Bug fixes; * `createindex` would create corrupted indices for profile target databases; * `rbh` workflow would create its result DB at an unexpected (wrong) location; * `(easy)-taxonomy --lca-mode 3` (Approx. LCA) was aligning invalid sequences in the second iteration and producing bad results; * `lca` (and `(easy)-taxonomy`) add empty columns for unclassifed sequences to be valid TSVs; * `kmermatcher` uses xxhash for hashing now (faster) ; * `kmermatcher` avoid crash machine has not enough memory to process data at once (affects linclust/cluster); * `kmermatcher` correctly deals with sequences longer than MAX_SHRT now; * `kmermatcher` fixed various edge cases (e.g. alignment of 1-char sequences); * `kmermatcher` hash-shift would be ignored; * `offsetalignment` could produce wrong results in the minus-strand; * `clust` now correctly and consistently handles alignment DB ",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c:3952,efficient,efficiently,3952,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c,1,['efficient'],['efficiently']
Energy Efficiency,"qs-win64.zip) |; | AVX2 | [mmseqs-linux-avx2.tar.gz](https://mmseqs.com/latest/mmseqs-linux-avx2.tar.gz) | [mmseqs-osx-avx2.tar.gz](https://mmseqs.com/latest/mmseqs-osx-avx2.tar.gz) | - |. ## Known Issues; * MMseqs2 on Windows seems to not scale well on multiple threads; * MMseqs2 on Windows can crash when built with AVX2 support (mostly on VMs). ## Features; * `createindex` can precompute split indices to improve runtime when searching against a database that is larger than the system memory. Precomputed databases also require less overhead RAM, since only the required parts are loaded; * `easy-search`, `easy-taxonomy`, `easy-linclust` and `easy-cluster` workflows can take any number of query FASTA or FASTQ files; * MMseqs2 validates database types. It will exit with an error message on wrong input, where it would previously crash; * `kmermatcher` reports the diagonal with the most k-mer matches; * `kmermatcher` scales the number of k-mers with sequence length (`--kmer-per-seq-scale`); * `rescorediagonal` got two new rescore modes, one for global alignment scoring and one for scoring a quasi global alignment fullfilling a local window criterion ; * Peak memory usage for reading in very large databases is greatly reduced. 128GB nodes should comfortably be able to deal with up to the maximum of 4.2 billion entries ; * Parameters taking byte values support syntax with a SI suffix (e.g., `--split-memory-limit 64G`); * Nucleotide substitution matrices should be user definable ; * Taxonomy report is compatible with [Pavian](https://github.com/fbreitwieser/pavian). Thanks to Florian Breitwieser!; * `cluster` workflow learned a reassignment mode `--cluster-reassign`. This mode corrects errors that occured because of cascaded clustering; * `extractorfs` can directly translate a nucleotide ORF to an amino acid sequence; * `result2stats` can write TSV files; * `createsubdb` supports softlinks instead of always hard copying the whole file to disk; * reduced harddisk space usage",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c:2549,reduce,reduced,2549,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c,1,['reduce'],['reduced']
Energy Efficiency,"y information is stored in binary format (a single `db_taxonomy` file, instead of `db_{named,nodes,merged}.dmp,db_mapping`) to speed up read-in. Old format is still supported.; * `--exhaustive-search` is usable with ungapped alignments (`--alignment-mode 4`); * Allow sequence/result database input in `taxonomyreport` #401/#408; * `msa2profile/result` can skip the first sequence with `--skip-query`; * `createtaxdb` can create a taxdb by mapping through `.source` in addition to `.lookup` (`--tax-mapping-mode 1`); * `splitsequence` can create a sequence database with original headers; * `align` can return short cluster format if only identifiers are required `--alignment-output-mode`; * `tar2db` can be used multi-threaded if input allows (e.g. `.tar` containing `.gz` files); * Encode species names in taxonomy blocklist to make sure we don't block random nodes in * e.g. GTDB); * Split non-index parts over additional files in split index case to reduce peak memory use; * `proteinaln2nucl` can now compute scores and e-values; * `createdb` can create a sequence database from a database containing fasta files (e.g. created by `tar2db`); * Add `MMSEQS_FORCE_MERGE` environment variable to force generating fully merged databases; * Improved many descriptions, warnings and error messages. ## Bugs fixed; * Fix `filterresult` off by one issue removing wrong sequences; * Fix `addtaxonomy` always crashing due to invalid check #355; * Reduce numbers of calls to `posix_memalign` to fix lock contention on macOS; * `extractorfs` doesn't flood warnings due to short sequences anymore; * `expand2profile` `--pca` is correctly set to `0`; * `msa2profile` always copies `.lookup/source` files instead of symlinking; * Clustering of clustering input would not work with set-cover or connected-component ; * Short circuit `--cluster-reassign` if nothing can be reassigned; * Fix temporary files not getting removed in `linclust/cluster` with `--remove-tmp--files`; * Fix `kmermatcher` setting user k-",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/13-45111:2640,reduce,reduce,2640,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/13-45111,1,['reduce'],['reduce']
Integrability," with ungapped alignments (`--alignment-mode 4`); * Allow sequence/result database input in `taxonomyreport` #401/#408; * `msa2profile/result` can skip the first sequence with `--skip-query`; * `createtaxdb` can create a taxdb by mapping through `.source` in addition to `.lookup` (`--tax-mapping-mode 1`); * `splitsequence` can create a sequence database with original headers; * `align` can return short cluster format if only identifiers are required `--alignment-output-mode`; * `tar2db` can be used multi-threaded if input allows (e.g. `.tar` containing `.gz` files); * Encode species names in taxonomy blocklist to make sure we don't block random nodes in * e.g. GTDB); * Split non-index parts over additional files in split index case to reduce peak memory use; * `proteinaln2nucl` can now compute scores and e-values; * `createdb` can create a sequence database from a database containing fasta files (e.g. created by `tar2db`); * Add `MMSEQS_FORCE_MERGE` environment variable to force generating fully merged databases; * Improved many descriptions, warnings and error messages. ## Bugs fixed; * Fix `filterresult` off by one issue removing wrong sequences; * Fix `addtaxonomy` always crashing due to invalid check #355; * Reduce numbers of calls to `posix_memalign` to fix lock contention on macOS; * `extractorfs` doesn't flood warnings due to short sequences anymore; * `expand2profile` `--pca` is correctly set to `0`; * `msa2profile` always copies `.lookup/source` files instead of symlinking; * Clustering of clustering input would not work with set-cover or connected-component ; * Short circuit `--cluster-reassign` if nothing can be reassigned; * Fix temporary files not getting removed in `linclust/cluster` with `--remove-tmp--files`; * Fix `kmermatcher` setting user k-mer pattern in auto k-mer selection and breaking; * Krona `taxonomyreport` was not working if no sequence was unclassified; * Make `Matcher::resultToBuffer` buffer sizes consistent (could crash with very long ba",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/13-45111:2973,message,messages,2973,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/13-45111,1,['message'],['messages']
Integrability,"**At a glance:** The MMseqs2 command line interface is cleaner and validates user input. Many MMseqs2 modules use less memory and run faster. ## Known Issues; * High sensitivity searches (higher than -s 6) with precomputed indices should fail. Pass `--db-load-mode 3` as a workaround to the MMseqs2 call. ## Breaking Changes; * Default taxonomy mode is assigning the same taxonomic label as the top hit. The previous ""approximate 2bLCA"" mode can be used with `--lca-mode 3` or the non-approximated 2bLCA with `--lca-mode 2`; * MMseqs2 will refuse to compile on compilers without OpenMP support (Use `-DREQUIRE_OPENMP=0` to force a single-threaded no OpenMP build); * The confusingly named (and probably non-functional) `--global-alignment` parameter is gone; * File names of the **latest** precompiled binaries changed. All archives contain a copy of the user guide and the MMseqs2 binary in the same subfolder (see further down for binaries of release 10-6d92c):. | SIMD | Linux | macOS | Windows |; |--------|---------------------------|-------------------------|--------------------------|; | SSE4.1 | [mmseqs-linux-sse41.tar.gz](https://mmseqs.com/latest/mmseqs-linux-sse41.tar.gz) | [mmseqs-osx-sse41.tar.gz](https://mmseqs.com/latest/mmseqs-osx-sse41.tar.gz) | [mmseqs-win64.zip](https://mmseqs.com/latest/mmseqs-win64.zip) |; | AVX2 | [mmseqs-linux-avx2.tar.gz](https://mmseqs.com/latest/mmseqs-linux-avx2.tar.gz) | [mmseqs-osx-avx2.tar.gz](https://mmseqs.com/latest/mmseqs-osx-avx2.tar.gz) | - |. ## Known Issues; * MMseqs2 on Windows seems to not scale well on multiple threads; * MMseqs2 on Windows can crash when built with AVX2 support (mostly on VMs). ## Features; * `createindex` can precompute split indices to improve runtime when searching against a database that is larger than the system memory. Precomputed databases also require less overhead RAM, since only the required parts are loaded; * `easy-search`, `easy-taxonomy`, `easy-linclust` and `easy-cluster` workflows can take an",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c:42,interface,interface,42,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c,1,['interface'],['interface']
Integrability,"**At a glance:** The MMseqs2 command line interface is cleaner and validates user input. Many MMseqs2 modules use less memory and run faster. The new `databases` module helps to download and setup database. We now have a chat support at [chat.mmseqs.com](https://chat.mmseqs.com). ## Known Issues; * `rbh` crashes due to invalid sorting mode (#290); * Homebrew's macOS version does not use multiple cores (#289); * `prefilter` results can be unstable between different runs for extremely redundant databases (#277); * `linclust`/`cluster` can crash for very small input sets (#274). ## Breaking Changes; * `kmermatcher` `--skip-n-repeat-kmer` parameter was replaced with `--ignore-multi-kmer`; Does not discard whole sequences anymore if a k-mer occured to often, instead it skips the specific k-mers.; Either mode is only used in Plass and not in Linclust; * `--lca-ranks` from `(easy-)taxonomy` and `lca` has to be delimited with semicolons (`;`) instead of colons (`:`); * `--dont-shuffle` flag was renamed to `--shuffle true/false`. ## Features; * new `databases` workflow to list and download common databases. ; Supported databases:; ```; Name 	Type 	Taxonomy	Url; - UniRef100 	Aminoacid 	 yes	https://www.uniprot.org/help/uniref; - UniRef90 	Aminoacid 	 yes	https://www.uniprot.org/help/uniref; - UniRef50 	Aminoacid 	 yes	https://www.uniprot.org/help/uniref; - UniProtKB 	Aminoacid 	 yes	https://www.uniprot.org/help/uniprotkb; - UniProtKB/TrEMBL 	Aminoacid 	 yes	https://www.uniprot.org/help/uniprotkb; - UniProtKB/Swiss-Prot	Aminoacid 	 yes	https://uniprot.org; - NR 	Aminoacid 	 -	https://ftp.ncbi.nlm.nih.gov/blast/db/FASTA; - NT 	Nucleotide	 -	https://ftp.ncbi.nlm.nih.gov/blast/db/FASTA; - PDB 	Aminoacid 	 -	https://www.rcsb.org; - PDB70 	Profile 	 -	https://github.com/soedinglab/hh-suite; - Pfam-A.full 	Profile 	 -	https://pfam.xfam.org; - Pfam-A.seed 	Profile 	 -	https://pfam.xfam.org; - eggNOG 	Profile 	 -	http://eggnog5.embl.de; - Resfinder 	Nucleotide	 -	https://cge.cbs.dtu.dk",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c:42,interface,interface,42,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c,1,['interface'],['interface']
Integrability,"-limit 64G`); * Nucleotide substitution matrices should be user definable ; * Taxonomy report is compatible with [Pavian](https://github.com/fbreitwieser/pavian). Thanks to Florian Breitwieser!; * `cluster` workflow learned a reassignment mode `--cluster-reassign`. This mode corrects errors that occured because of cascaded clustering; * `extractorfs` can directly translate a nucleotide ORF to an amino acid sequence; * `result2stats` can write TSV files; * `createsubdb` supports softlinks instead of always hard copying the whole file to disk; * reduced harddisk space usage for all cascaded clusterings ; * `easy-taxonomy` reports the top hit alignment as a separate output file with the suffix `tophit_aln`; * `createindex` checks if an index needs to be recomputed were improved. ## Bug fixes; * MMseqs2 did not compile on FreeBSD. Please let us know about free continuous integration options to make sure it will keep working in the future; * `proteinaln2nucl` could return wrong coordinates; * `apply` would deadlock when running with multiple threads; * MPI searches are way more reliable, there were various issues around merging the separate results. MPI logic of split and merge is also integrated into the regression tests suite; * `prefilter` splits nucleotide searches if not enough memory is available ; * `kmermatcher` could corrupt memory; * `rescorediagonal` could produce wrong sequence identities when aligning mixed-case sequences; * macOS builds were not actually static (still dynamically link libsystem however); * `lca` module could corrupt memory and crash; * `createdb` does not crash on systems with only 4GB of RAM anymore; * AVX2 and SSE4.1 builds could produce slightly different results; * `summarizeresults` does not crash on empty alignments results anymore; * fix wrong tophit_report in `easy-taxonomy` ; * Precompiled Windows builds were broken; * Precomputed indices of databases with very short sequences could truncate alignments if the query sequences were l",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c:3619,integrat,integration,3619,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c,1,['integrat'],['integration']
Integrability,"ce; * `result2stats` can write TSV files; * `createsubdb` supports softlinks instead of always hard copying the whole file to disk; * reduced harddisk space usage for all cascaded clusterings ; * `easy-taxonomy` reports the top hit alignment as a separate output file with the suffix `tophit_aln`; * `createindex` checks if an index needs to be recomputed were improved. ## Bug fixes; * MMseqs2 did not compile on FreeBSD. Please let us know about free continuous integration options to make sure it will keep working in the future; * `proteinaln2nucl` could return wrong coordinates; * `apply` would deadlock when running with multiple threads; * MPI searches are way more reliable, there were various issues around merging the separate results. MPI logic of split and merge is also integrated into the regression tests suite; * `prefilter` splits nucleotide searches if not enough memory is available ; * `kmermatcher` could corrupt memory; * `rescorediagonal` could produce wrong sequence identities when aligning mixed-case sequences; * macOS builds were not actually static (still dynamically link libsystem however); * `lca` module could corrupt memory and crash; * `createdb` does not crash on systems with only 4GB of RAM anymore; * AVX2 and SSE4.1 builds could produce slightly different results; * `summarizeresults` does not crash on empty alignments results anymore; * fix wrong tophit_report in `easy-taxonomy` ; * Precompiled Windows builds were broken; * Precomputed indices of databases with very short sequences could truncate alignments if the query sequences were longer. ## Developers; * Tools using MMseqs2 as a framework do not need to export MMseqs2 modules again anymore; * MMseqs2 uses Azure Pipelines for all platforms to run our regression tests suite and provide precompiled binaries; * MMseqs2 runs under ASan without any issues. We fixed various small memory leaks; * The regression suite is directly linked through a submodule. It can be used by running:; ```; git submo",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c:3939,integrat,integrated,3939,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c,1,['integrat'],['integrated']
Integrability,"e to view single entry in an MMseqs2 database; * `align` module has learned `--min-aln-len` parameter to filter by minimal alignment length; * Alignment modules (`rescorediagonal`, `align`) can align longer sequences now (not limited to 2^15 length); * Input sequences can now be softmasked (lower letter masking) instead of only hard masking (replacing with X) ``--mask-lower-case`. The masking only applies to the prefilter stages `kmermatcher` or `prefilter` and can be combined with `--mask`; * `filterdb` has learned `--filter-expression` parameter and mode that allows filtering by simple mathematical expressions; * `alignbykmer` can be used for nucleotide searches; * MMseqs2 _did-you-mean_ functionality gives better suggestions; * MMseqs2 does not repeat the whole parameter list for each submodule call anymore. ## Bugs; * Default parameters of `map` workflow are now set correctly; * Some modules were using the wrong coverage parameter; * Sliced profile search was losing high E-value hits; * Sliced profile search is now stable; * Profile-Sequence alignment E-values where slightly too high; * `result2msa` was crashing with profiles on the target side; * `result2msa` should not crash with `--alow-deletion` anymore; * Some parameters were never visible (with or without `-h`); * Various issues with MPI were resolved. ## Developers; * Continous integration enforces no compile warnings now; * Continous integration now tries to build AArch64 builds with Docker and Qemu; * We added a first draft of our [developer guide](https://github.com/soedinglab/MMseqs2/wiki/MMseqs2-Developer-Guide) to the wiki. ## References; [1] Müller T & Martin Vingron, Modeling Amino Acid Replacement, J Comput Biol. 2000;7:761–76. doi: 10.1089/10665270050514918. [2] Müller T, Spang R, Vingron M. Estimating amino acid substitution models: a comparison of Dayhoff's estimator, the resolvent approach and a maximum likelihood method. Mol Biol Evol. 2002;19:8–13. doi: 10.1093/oxfordjournals.molbev.a003985",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/8-fac81:3661,integrat,integration,3661,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/8-fac81,2,['integrat'],['integration']
Integrability,"lts are placed in a subfolder based on the hash of all paths and parameters. ## Performance Regressions Fixed; * Fixed regression when multiple mmseqs instances were running at the same time. ## Breaking Command Line Interface Changes; * Incremented index version, old precomputed indices have to be regenerated; * New Profile format, databases generated through `convertprofiledb` and `msa2profile` have to be regenerated; * Clustering workflow is now by default cascaded. We replaced the `--cascaded` flag with `--single-step-clustering`; * Max sequence length of 32768 is now actually validated and enforced; * Each sequence database has now a dbtype file (AA=0, NUC=1, PROFILE=2); * extractorf was reworked:; * `--skip-incomplete` was split into two parameters `--contig-start-mode` and `--contig-end-mode`; * `--longest-orf` was reworked into `--orf-start-mode` ; * removed `--extend-min` parameter. ## Others; * Factor four times faster clustering workflow; * Improve speed of `linclust` by a factor of two; * Remove 'X' from prefilter index (reduces memory and improves speed at the same sensitivity); * Fix bugs for Query coverage mode (`--cov-mode 2`) ; * Clustering is now the same between single and multi threaded version; * Speedup of kmermatcher; * Fix bug in Clust hash. It can now cluster to 1.0 sequence identity; * Improve target profile search, set max-seqs to infinite for alignments. ; * Improve speed of `align` if prefilter result fit into memory; * Many usability improvements; * Improved suggestions of bash completion; * Expert modules are hidden by default, use `-h` flag to show everything; * Speed up `mergeclusters` by a lot; * Fix sequence identity print out bug if the id is less than 10%; * MPI Runner variable can now correctly contain further parameters (RUNNER=""mpirun -np 4"" was not working); * Enforcing GCC 4.6 compatibilty in our continous integration. ## Devlopers; * MMseqs2 can now be included in framework mode to subprojects; * DBReader has a SHUFFLE mode",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/2-23394:3057,integrat,integration,3057,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/2-23394,1,['integrat'],['integration']
Integrability,"qs-win64.zip) |; | AVX2 | [mmseqs-linux-avx2.tar.gz](https://mmseqs.com/latest/mmseqs-linux-avx2.tar.gz) | [mmseqs-osx-avx2.tar.gz](https://mmseqs.com/latest/mmseqs-osx-avx2.tar.gz) | - |. ## Known Issues; * MMseqs2 on Windows seems to not scale well on multiple threads; * MMseqs2 on Windows can crash when built with AVX2 support (mostly on VMs). ## Features; * `createindex` can precompute split indices to improve runtime when searching against a database that is larger than the system memory. Precomputed databases also require less overhead RAM, since only the required parts are loaded; * `easy-search`, `easy-taxonomy`, `easy-linclust` and `easy-cluster` workflows can take any number of query FASTA or FASTQ files; * MMseqs2 validates database types. It will exit with an error message on wrong input, where it would previously crash; * `kmermatcher` reports the diagonal with the most k-mer matches; * `kmermatcher` scales the number of k-mers with sequence length (`--kmer-per-seq-scale`); * `rescorediagonal` got two new rescore modes, one for global alignment scoring and one for scoring a quasi global alignment fullfilling a local window criterion ; * Peak memory usage for reading in very large databases is greatly reduced. 128GB nodes should comfortably be able to deal with up to the maximum of 4.2 billion entries ; * Parameters taking byte values support syntax with a SI suffix (e.g., `--split-memory-limit 64G`); * Nucleotide substitution matrices should be user definable ; * Taxonomy report is compatible with [Pavian](https://github.com/fbreitwieser/pavian). Thanks to Florian Breitwieser!; * `cluster` workflow learned a reassignment mode `--cluster-reassign`. This mode corrects errors that occured because of cascaded clustering; * `extractorfs` can directly translate a nucleotide ORF to an amino acid sequence; * `result2stats` can write TSV files; * `createsubdb` supports softlinks instead of always hard copying the whole file to disk; * reduced harddisk space usage",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c:2104,message,message,2104,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c,1,['message'],['message']
Modifiability," with ungapped alignments (`--alignment-mode 4`); * Allow sequence/result database input in `taxonomyreport` #401/#408; * `msa2profile/result` can skip the first sequence with `--skip-query`; * `createtaxdb` can create a taxdb by mapping through `.source` in addition to `.lookup` (`--tax-mapping-mode 1`); * `splitsequence` can create a sequence database with original headers; * `align` can return short cluster format if only identifiers are required `--alignment-output-mode`; * `tar2db` can be used multi-threaded if input allows (e.g. `.tar` containing `.gz` files); * Encode species names in taxonomy blocklist to make sure we don't block random nodes in * e.g. GTDB); * Split non-index parts over additional files in split index case to reduce peak memory use; * `proteinaln2nucl` can now compute scores and e-values; * `createdb` can create a sequence database from a database containing fasta files (e.g. created by `tar2db`); * Add `MMSEQS_FORCE_MERGE` environment variable to force generating fully merged databases; * Improved many descriptions, warnings and error messages. ## Bugs fixed; * Fix `filterresult` off by one issue removing wrong sequences; * Fix `addtaxonomy` always crashing due to invalid check #355; * Reduce numbers of calls to `posix_memalign` to fix lock contention on macOS; * `extractorfs` doesn't flood warnings due to short sequences anymore; * `expand2profile` `--pca` is correctly set to `0`; * `msa2profile` always copies `.lookup/source` files instead of symlinking; * Clustering of clustering input would not work with set-cover or connected-component ; * Short circuit `--cluster-reassign` if nothing can be reassigned; * Fix temporary files not getting removed in `linclust/cluster` with `--remove-tmp--files`; * Fix `kmermatcher` setting user k-mer pattern in auto k-mer selection and breaking; * Krona `taxonomyreport` was not working if no sequence was unclassified; * Make `Matcher::resultToBuffer` buffer sizes consistent (could crash with very long ba",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/13-45111:2871,variab,variable,2871,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/13-45111,1,['variab'],['variable']
Modifiability,"b` now can append entries from other databases by looking them up ; * `proteinaln2nucl` maps a protein alignment back to its original nucleotide sequences ; * `taxonomy` now can blacklist nodes (per default the unclassified and others nodes); * tmp folder is automatically created, all workflow intermediate results are placed in a subfolder based on the hash of all paths and parameters. ## Performance Regressions Fixed; * Fixed regression when multiple mmseqs instances were running at the same time. ## Breaking Command Line Interface Changes; * Incremented index version, old precomputed indices have to be regenerated; * New Profile format, databases generated through `convertprofiledb` and `msa2profile` have to be regenerated; * Clustering workflow is now by default cascaded. We replaced the `--cascaded` flag with `--single-step-clustering`; * Max sequence length of 32768 is now actually validated and enforced; * Each sequence database has now a dbtype file (AA=0, NUC=1, PROFILE=2); * extractorf was reworked:; * `--skip-incomplete` was split into two parameters `--contig-start-mode` and `--contig-end-mode`; * `--longest-orf` was reworked into `--orf-start-mode` ; * removed `--extend-min` parameter. ## Others; * Factor four times faster clustering workflow; * Improve speed of `linclust` by a factor of two; * Remove 'X' from prefilter index (reduces memory and improves speed at the same sensitivity); * Fix bugs for Query coverage mode (`--cov-mode 2`) ; * Clustering is now the same between single and multi threaded version; * Speedup of kmermatcher; * Fix bug in Clust hash. It can now cluster to 1.0 sequence identity; * Improve target profile search, set max-seqs to infinite for alignments. ; * Improve speed of `align` if prefilter result fit into memory; * Many usability improvements; * Improved suggestions of bash completion; * Expert modules are hidden by default, use `-h` flag to show everything; * Speed up `mergeclusters` by a lot; * Fix sequence identity print out",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/2-23394:2059,extend,extend-min,2059,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/2-23394,1,['extend'],['extend-min']
Modifiability,"d `(easy)-taxonomy`) add empty columns for unclassifed sequences to be valid TSVs; * `kmermatcher` uses xxhash for hashing now (faster) ; * `kmermatcher` avoid crash machine has not enough memory to process data at once (affects linclust/cluster); * `kmermatcher` correctly deals with sequences longer than MAX_SHRT now; * `kmermatcher` fixed various edge cases (e.g. alignment of 1-char sequences); * `kmermatcher` hash-shift would be ignored; * `offsetalignment` could produce wrong results in the minus-strand; * `clust` now correctly and consistently handles alignment DB input ; * `clusthash` better deals with nucleotide input now and several multi-threaded inefficiencies were resolved; * `(easy-)cluster` `--single-step-clustering` could cluster unrelated sequences due to hash collisions; * `prefilter --diag-score 0` respects `--min-ungapped-score` ; * `createseqfiledb` could print empty sequence lines; * `taxonomyreport` could crash if no sequence was unclassified; * `result2flat` could crash with long sequence input; * `result2msa, result2profile, msa2profile` backport filtering fix from HHblits; * `align` could produce bad alignments if all sequence lenghts in query DB where a lot shorter than in target DB; * `splitsequence` fix issues with splitsequence if combined with compressed; * `result2profile` fix Filter2 bug of [HH-suite](https://github.com/soedinglab/hh-suite/pull/182) in MMseqs2 ; * `apply` would crash due to reading wrong entry lengths; * `filterdb --filter-expression` was not thread safe and could corrupt results; * `filterdb` `--extract-lines` and `--trim-to-one-column` are compatible with each other. ## Developers; * Internal representation of sequences changed from 4-byte per character to 1-byte per character; * Compilation under AppleClang + libomp works now (see `util/build_osx.sh`); * Tools inheriting from MMseqs2 can now add their own citations; * MMseqs2 on macOS compiles with the macOS 10.9 SDK (removed `symlinkat` call; relevant for bioconda)",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c:6174,inherit,inheriting,6174,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c,1,['inherit'],['inheriting']
Modifiability,"lts are placed in a subfolder based on the hash of all paths and parameters. ## Performance Regressions Fixed; * Fixed regression when multiple mmseqs instances were running at the same time. ## Breaking Command Line Interface Changes; * Incremented index version, old precomputed indices have to be regenerated; * New Profile format, databases generated through `convertprofiledb` and `msa2profile` have to be regenerated; * Clustering workflow is now by default cascaded. We replaced the `--cascaded` flag with `--single-step-clustering`; * Max sequence length of 32768 is now actually validated and enforced; * Each sequence database has now a dbtype file (AA=0, NUC=1, PROFILE=2); * extractorf was reworked:; * `--skip-incomplete` was split into two parameters `--contig-start-mode` and `--contig-end-mode`; * `--longest-orf` was reworked into `--orf-start-mode` ; * removed `--extend-min` parameter. ## Others; * Factor four times faster clustering workflow; * Improve speed of `linclust` by a factor of two; * Remove 'X' from prefilter index (reduces memory and improves speed at the same sensitivity); * Fix bugs for Query coverage mode (`--cov-mode 2`) ; * Clustering is now the same between single and multi threaded version; * Speedup of kmermatcher; * Fix bug in Clust hash. It can now cluster to 1.0 sequence identity; * Improve target profile search, set max-seqs to infinite for alignments. ; * Improve speed of `align` if prefilter result fit into memory; * Many usability improvements; * Improved suggestions of bash completion; * Expert modules are hidden by default, use `-h` flag to show everything; * Speed up `mergeclusters` by a lot; * Fix sequence identity print out bug if the id is less than 10%; * MPI Runner variable can now correctly contain further parameters (RUNNER=""mpirun -np 4"" was not working); * Enforcing GCC 4.6 compatibilty in our continous integration. ## Devlopers; * MMseqs2 can now be included in framework mode to subprojects; * DBReader has a SHUFFLE mode",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/2-23394:2912,variab,variable,2912,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/2-23394,1,['variab'],['variable']
Modifiability,"n create a sequence database from a database containing fasta files (e.g. created by `tar2db`); * Add `MMSEQS_FORCE_MERGE` environment variable to force generating fully merged databases; * Improved many descriptions, warnings and error messages. ## Bugs fixed; * Fix `filterresult` off by one issue removing wrong sequences; * Fix `addtaxonomy` always crashing due to invalid check #355; * Reduce numbers of calls to `posix_memalign` to fix lock contention on macOS; * `extractorfs` doesn't flood warnings due to short sequences anymore; * `expand2profile` `--pca` is correctly set to `0`; * `msa2profile` always copies `.lookup/source` files instead of symlinking; * Clustering of clustering input would not work with set-cover or connected-component ; * Short circuit `--cluster-reassign` if nothing can be reassigned; * Fix temporary files not getting removed in `linclust/cluster` with `--remove-tmp--files`; * Fix `kmermatcher` setting user k-mer pattern in auto k-mer selection and breaking; * Krona `taxonomyreport` was not working if no sequence was unclassified; * Make `Matcher::resultToBuffer` buffer sizes consistent (could crash with very long backtraces, needs further refactoring); * Fix multiple locations where `Util::checkAllocation` could never be called as it would have crashed before; * Whitespace containing parameters do not break workflows anymore (e.g. passing whitespaces to `--sub-mat`); * `taxonomyreport` and `addtaxonomy` parameter were not adjustable in `easy-taxonomy`; * E-value parameters are now correctly parsed as doubles instead of floats #379; * Add symlinks to `splitdb` #376; * Increase maximum number of open files in `DBReader`; * Include file size and modified date of inputs in `temporary` file hash calculation #372; * `--cov-mode 5` was not working #371; * Database downloader deals correctly with redirects now; * `result2profile` could crash if target database contained much longer sequences than query database; * Stop symlinking header database (",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/13-45111:3920,refactor,refactoring,3920,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/13-45111,1,['refactor'],['refactoring']
Performance,"## Breaking changes; * Remove `--add-internal-id` parameter from `result2msa`; * `filterdb --shuffle` is now randomly instead of deterministically shuffled; * Taxonomy expressions in filtertax(seq)db interpret `,` as `||` now #320; * `convertalis` `pident` output field now correctly reports percentage (0-100) sequence identity instead of fraction (0.00-1.00), use `fident` to print the fraction instead. ## Features; * Support nucleotide clustering in `cluster` and `easy-cluster`; * Support other architectures (SSE2/ARM64/POWER8/POWER9/etc) through [SIMDe](https://github.com/simd-everywhere/simde); * Linclust is much faster on systems with a lot of CPU cores; * Clustering update is faster, more stable and correctly deals with deleted sequences #272; * Add easy workflow for reciprocal best hit searches `easy-rbh` ; * Add SILVA, Pfam-B, dbCAN2 to `databases`; * `databases` produces taxonomy information for NR; * Replace old greedy incremental clustering with new memory efficient version; * Add `result2dnamsa` module to create MSAs of nucleotide sequences; * Continued progress on profile-profile searching (`result2pp`,`expandaln`,`expand2profile`) , stay tuned!; * Add multi-parameter to support to overwrite sequence type specific parameters: e.g. `--gap-open ""nucl:5,aa:11""` ; * Add ORF information as output options to `convertalis` (`qOrfStart/qOrfEnd, dbOrfStart, dbOrfEnd`); * Speed up sorting using [ips4o](https://github.com/SaschaWitt/ips4o); * Speed up masking through new version of [tantan](http://cbrc3.cbrc.jp/~martin/tantan/) ; * Speed up multi-threaded writing of clustering results; * Speed up reading of database indices and merging target split databases; * Add memory tracking to account for index size when computing available memory (`--split-memory-limit` should be more reliable when searching/clustering billions of sequences).; * Add `--search-type 4` (translated/translated search) to `createindex`; * Add `convertalis --format-mode 3` HTML output based on MMse",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/12-113e3:1168,tune,tuned,1168,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/12-113e3,1,['tune'],['tuned']
Performance,"## New Taxonomy Workflow (new feature and breaking change); We introduce a new taxonomy workflow for assigning taxonomic labels to nucleotide sequences by searching against protein reference databases. For details see:. [Mirdita M, Steinegger M, Breitwieser F, Söding J, Levy Karin E: Fast and sensitive taxonomic assignment to metagenomic contigs. bioRxiv, doi: 10.1101/2020.11.27.401018 (2020)](https://www.biorxiv.org/content/10.1101/2020.11.27.401018v1). The nucleotide-to-protein taxonomic assignment is now much faster and is optimized towards annotation of contigs. If you use MMseqs2 taxonomy to assign taxonomic labels to short reads, consider using the `--orf-filter 0` parameter to disable the new filter stage as it can reject too many short query sequences. MMseqs2 is still considerably faster with this parameter set. As our nucleotide-to-nucleotide taxonomic assignment does not support the 2bLCA assignment mode for stable lowest-common-ancestor computation, we previously set MMseqs2 to perform LCA assignment by top-hit (`--lca-mode 4`) as default. Approximate (see manuscript) 2bLCA is now again the default and we automatically switch to top-hit if given nucleotide-to-nucleotide input. ## Breaking changes; * `--slice-search` in now called `--exhaustive-search`; * Unify `--compress` `--summarize` `--omit-consensus` (in `result2msa`) to `--msa-format-mode`. ## Features; * Add GTDB and CDD to databases downloader #410; * Add `nrtotaxmapping` to create taxonomy mapping from NR; * Add `unpackdb` to split a database into separate files #406; * Add `majoritylca` module for majority voting based taxonomy from alignment results; * Add `cpdb` and `lndb`; * Taxonomy information is stored in binary format (a single `db_taxonomy` file, instead of `db_{named,nodes,merged}.dmp,db_mapping`) to speed up read-in. Old format is still supported.; * `--exhaustive-search` is usable with ungapped alignments (`--alignment-mode 4`); * Allow sequence/result database input in `taxonomyrepor",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/13-45111:532,optimiz,optimized,532,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/13-45111,2,"['optimiz', 'perform']","['optimized', 'perform']"
Performance,")-taxonomy --lca-mode 3` (Approx. LCA) was aligning invalid sequences in the second iteration and producing bad results; * `lca` (and `(easy)-taxonomy`) add empty columns for unclassifed sequences to be valid TSVs; * `kmermatcher` uses xxhash for hashing now (faster) ; * `kmermatcher` avoid crash machine has not enough memory to process data at once (affects linclust/cluster); * `kmermatcher` correctly deals with sequences longer than MAX_SHRT now; * `kmermatcher` fixed various edge cases (e.g. alignment of 1-char sequences); * `kmermatcher` hash-shift would be ignored; * `offsetalignment` could produce wrong results in the minus-strand; * `clust` now correctly and consistently handles alignment DB input ; * `clusthash` better deals with nucleotide input now and several multi-threaded inefficiencies were resolved; * `(easy-)cluster` `--single-step-clustering` could cluster unrelated sequences due to hash collisions; * `prefilter --diag-score 0` respects `--min-ungapped-score` ; * `createseqfiledb` could print empty sequence lines; * `taxonomyreport` could crash if no sequence was unclassified; * `result2flat` could crash with long sequence input; * `result2msa, result2profile, msa2profile` backport filtering fix from HHblits; * `align` could produce bad alignments if all sequence lenghts in query DB where a lot shorter than in target DB; * `splitsequence` fix issues with splitsequence if combined with compressed; * `result2profile` fix Filter2 bug of [HH-suite](https://github.com/soedinglab/hh-suite/pull/182) in MMseqs2 ; * `apply` would crash due to reading wrong entry lengths; * `filterdb --filter-expression` was not thread safe and could corrupt results; * `filterdb` `--extract-lines` and `--trim-to-one-column` are compatible with each other. ## Developers; * Internal representation of sequences changed from 4-byte per character to 1-byte per character; * Compilation under AppleClang + libomp works now (see `util/build_osx.sh`); * Tools inheriting from MMseqs2 ca",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c:4981,multi-thread,multi-threaded,4981,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c,1,['multi-thread'],['multi-threaded']
Performance,"**At a glance:** The MMseqs2 command line interface is cleaner and validates user input. Many MMseqs2 modules use less memory and run faster. ## Known Issues; * High sensitivity searches (higher than -s 6) with precomputed indices should fail. Pass `--db-load-mode 3` as a workaround to the MMseqs2 call. ## Breaking Changes; * Default taxonomy mode is assigning the same taxonomic label as the top hit. The previous ""approximate 2bLCA"" mode can be used with `--lca-mode 3` or the non-approximated 2bLCA with `--lca-mode 2`; * MMseqs2 will refuse to compile on compilers without OpenMP support (Use `-DREQUIRE_OPENMP=0` to force a single-threaded no OpenMP build); * The confusingly named (and probably non-functional) `--global-alignment` parameter is gone; * File names of the **latest** precompiled binaries changed. All archives contain a copy of the user guide and the MMseqs2 binary in the same subfolder (see further down for binaries of release 10-6d92c):. | SIMD | Linux | macOS | Windows |; |--------|---------------------------|-------------------------|--------------------------|; | SSE4.1 | [mmseqs-linux-sse41.tar.gz](https://mmseqs.com/latest/mmseqs-linux-sse41.tar.gz) | [mmseqs-osx-sse41.tar.gz](https://mmseqs.com/latest/mmseqs-osx-sse41.tar.gz) | [mmseqs-win64.zip](https://mmseqs.com/latest/mmseqs-win64.zip) |; | AVX2 | [mmseqs-linux-avx2.tar.gz](https://mmseqs.com/latest/mmseqs-linux-avx2.tar.gz) | [mmseqs-osx-avx2.tar.gz](https://mmseqs.com/latest/mmseqs-osx-avx2.tar.gz) | - |. ## Known Issues; * MMseqs2 on Windows seems to not scale well on multiple threads; * MMseqs2 on Windows can crash when built with AVX2 support (mostly on VMs). ## Features; * `createindex` can precompute split indices to improve runtime when searching against a database that is larger than the system memory. Precomputed databases also require less overhead RAM, since only the required parts are loaded; * `easy-search`, `easy-taxonomy`, `easy-linclust` and `easy-cluster` workflows can take an",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c:255,load,load-mode,255,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c,1,['load'],['load-mode']
Performance,"Changes since 1-c7a89 Release. ## New Features; * Translated searches (blastx and tblastn like search modes); * Improvement splitting input sequences in `kmermatcher` (Less memory needed for `linclust`); * `linclust` supports nucleotide sequences (experimental feature, k-mer length is not yet optimized); * `search` supports nucleotide-nucleotide searches (preview, not stable yet); * `pssm2profile` module to print human readable profiles; * `msa2profile ` has a gap match mode to to convert multiple sequences alignments without representative sequence to profile databases; * Compute sequence identity in a similar way to BLAST if `--alignment-mode 3 ` is used; * `apply` module to execute a arbitrary program on each entry of a mmseqs database. Like map from MapReduce. ; * `extractorf` can use start/stop codons from alternative translation tables; * `filterdb` now can append entries from other databases by looking them up ; * `proteinaln2nucl` maps a protein alignment back to its original nucleotide sequences ; * `taxonomy` now can blacklist nodes (per default the unclassified and others nodes); * tmp folder is automatically created, all workflow intermediate results are placed in a subfolder based on the hash of all paths and parameters. ## Performance Regressions Fixed; * Fixed regression when multiple mmseqs instances were running at the same time. ## Breaking Command Line Interface Changes; * Incremented index version, old precomputed indices have to be regenerated; * New Profile format, databases generated through `convertprofiledb` and `msa2profile` have to be regenerated; * Clustering workflow is now by default cascaded. We replaced the `--cascaded` flag with `--single-step-clustering`; * Max sequence length of 32768 is now actually validated and enforced; * Each sequence database has now a dbtype file (AA=0, NUC=1, PROFILE=2); * extractorf was reworked:; * `--skip-incomplete` was split into two parameters `--contig-start-mode` and `--contig-end-mode`; * `--longest",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/2-23394:294,optimiz,optimized,294,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/2-23394,1,['optimiz'],['optimized']
Performance,"eful for database splits, where one split could take much longer than others; * `linclust` now supports MPI; * `linclust` adds one hash for the whole sequence, to improve extract sequence matching; * New sequence identity computation modes, where the normalization happens on the query or target length instead of alignment length; * New `--cov-mode` that computes the coverage only based on sequence lengths (`--cov-mode 3`); * `search`/`cluster`/`linclust` workflows have learned `--alignment-mode 4` for faster ungapped alignments; * Translated `search` sorts now results by E-value and aggregates all ORFs under the corresponding contig identifier; * `prefiltering` can now sort hits with score > 255 correctly; * `convertalis` now works with profiles; * Added generalized database transposition tool `swapdb` (`swapresults` only makes sense for prefiltering/alignment results). ## Performance; * Speedup `extractorf` with vectorization; * Many performance improvements to reduce overhead for web server mode; * `createtsv` writes output in parallel; * Avoid many unnecessary memory allocations in various modules. ## Bug fixes; * `covertmsa` does now correctly parses STOCKHOLM files without accession keys; * In `search` when using splits less than `--max-seqs` sequences would be the limit, now correctly computes the limit (max-seqs/Splits + 4*sqrt(max_seqs/Splits)); * Fix bug in MsaFilter where wrong sequences would be filtered; * `swapresults` will add an empty entry if a target entry has no corresponding query match, instead of no entry at all; * `createindex` creates now correctly creates a tmp directory if no directory exists already; * Fix query split runs for small input databases; * `result2stats` was reading the wrong first sequence (from query instead of target database); * `result2repseq` now writes the correct `.dbtype` file; * `convertalis` now reads the correct `dbtype` for the target sequence; * Fix empty REG_EMPTY bug on macOS; * Fix possible memory corruption whe",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/4-0b8cc:1436,perform,performance,1436,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/4-0b8cc,1,['perform'],['performance']
Performance,"information as output options to `convertalis` (`qOrfStart/qOrfEnd, dbOrfStart, dbOrfEnd`); * Speed up sorting using [ips4o](https://github.com/SaschaWitt/ips4o); * Speed up masking through new version of [tantan](http://cbrc3.cbrc.jp/~martin/tantan/) ; * Speed up multi-threaded writing of clustering results; * Speed up reading of database indices and merging target split databases; * Add memory tracking to account for index size when computing available memory (`--split-memory-limit` should be more reliable when searching/clustering billions of sequences).; * Add `--search-type 4` (translated/translated search) to `createindex`; * Add `convertalis --format-mode 3` HTML output based on MMseqs2 app (app.mmseqs.com); * Improve memory management in `result2msa` and `result2profile` modules; * Add `msa2result` module to create an alignment result db from MSAs; * Add `filterresult` to slim down result dbs with pairwise HHblits filtering #316; * Add `--kmers-per-sequence-scale` to `linsearch` to extract a k-mer fraction instead of a fixed count ; * Add a random integer to `--local-tmp` path to avoid race conditions if multiple MMseqs2 happen on the same machine; * Add `--max-seqs` to `ungappedprefilter`; * Add `--tax-lineage-mode 2` parameter to print numeric taxids. ## Bugs fixed; * `rbh` workflow was broken due to issues with `filterdb`; * Fix `-a` in RBH search to show alignments; * Fix PDB70 database creation in `databases`; * Fix aria2c download support; * Fix memory issues and MPI in kmermatcher ; * Fix memory issues in `extractorfs` when using AVX2 ; * Fix `--cluster-reassign` to respect `--cov-mode`; * Set-cover supports up to 2^32 sequences (previously crashed with more than 2^31); * Exit correctly if there is not have enough disk space instead of crashing in the next module; * Fix `prefilter` order instability when searching very redundant databases; * Correctly parse keys from data files in `filterdb --filter-file`, this was causing instability in `linsearch`; ",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/12-113e3:2413,race condition,race conditions,2413,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/12-113e3,1,['race condition'],['race conditions']
Performance,"lated/translated search) to `createindex`; * Add `convertalis --format-mode 3` HTML output based on MMseqs2 app (app.mmseqs.com); * Improve memory management in `result2msa` and `result2profile` modules; * Add `msa2result` module to create an alignment result db from MSAs; * Add `filterresult` to slim down result dbs with pairwise HHblits filtering #316; * Add `--kmers-per-sequence-scale` to `linsearch` to extract a k-mer fraction instead of a fixed count ; * Add a random integer to `--local-tmp` path to avoid race conditions if multiple MMseqs2 happen on the same machine; * Add `--max-seqs` to `ungappedprefilter`; * Add `--tax-lineage-mode 2` parameter to print numeric taxids. ## Bugs fixed; * `rbh` workflow was broken due to issues with `filterdb`; * Fix `-a` in RBH search to show alignments; * Fix PDB70 database creation in `databases`; * Fix aria2c download support; * Fix memory issues and MPI in kmermatcher ; * Fix memory issues in `extractorfs` when using AVX2 ; * Fix `--cluster-reassign` to respect `--cov-mode`; * Set-cover supports up to 2^32 sequences (previously crashed with more than 2^31); * Exit correctly if there is not have enough disk space instead of crashing in the next module; * Fix `prefilter` order instability when searching very redundant databases; * Correctly parse keys from data files in `filterdb --filter-file`, this was causing instability in `linsearch`; * Allow overwriting string parameters with empty strings; * Fix ASAN issue in `extractorf` when using AVX2; * Microtar would try to seek backwards constantly resulting in horrible gzip read performance; * Avoid lookup writing to corrupt memory if an accession is too long; * Fix various inconsistencies and usability issues in `alignall`:; - `--alignment-mode` inconsistent with `align` module; - `--add-backtrace` did not do anything; * Fix restart of clusterings using reassignment `cluster --cluster-reassign`; * Fix createdb did not correctly read gz/bzip files with `--createdb-mode 1` #323",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/12-113e3:3492,perform,performance,3492,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/12-113e3,1,['perform'],['performance']
Performance,"re stable and correctly deals with deleted sequences #272; * Add easy workflow for reciprocal best hit searches `easy-rbh` ; * Add SILVA, Pfam-B, dbCAN2 to `databases`; * `databases` produces taxonomy information for NR; * Replace old greedy incremental clustering with new memory efficient version; * Add `result2dnamsa` module to create MSAs of nucleotide sequences; * Continued progress on profile-profile searching (`result2pp`,`expandaln`,`expand2profile`) , stay tuned!; * Add multi-parameter to support to overwrite sequence type specific parameters: e.g. `--gap-open ""nucl:5,aa:11""` ; * Add ORF information as output options to `convertalis` (`qOrfStart/qOrfEnd, dbOrfStart, dbOrfEnd`); * Speed up sorting using [ips4o](https://github.com/SaschaWitt/ips4o); * Speed up masking through new version of [tantan](http://cbrc3.cbrc.jp/~martin/tantan/) ; * Speed up multi-threaded writing of clustering results; * Speed up reading of database indices and merging target split databases; * Add memory tracking to account for index size when computing available memory (`--split-memory-limit` should be more reliable when searching/clustering billions of sequences).; * Add `--search-type 4` (translated/translated search) to `createindex`; * Add `convertalis --format-mode 3` HTML output based on MMseqs2 app (app.mmseqs.com); * Improve memory management in `result2msa` and `result2profile` modules; * Add `msa2result` module to create an alignment result db from MSAs; * Add `filterresult` to slim down result dbs with pairwise HHblits filtering #316; * Add `--kmers-per-sequence-scale` to `linsearch` to extract a k-mer fraction instead of a fixed count ; * Add a random integer to `--local-tmp` path to avoid race conditions if multiple MMseqs2 happen on the same machine; * Add `--max-seqs` to `ungappedprefilter`; * Add `--tax-lineage-mode 2` parameter to print numeric taxids. ## Bugs fixed; * `rbh` workflow was broken due to issues with `filterdb`; * Fix `-a` in RBH search to show alignment",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/12-113e3:1567,multi-thread,multi-threaded,1567,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/12-113e3,1,['multi-thread'],['multi-threaded']
Performance,"release 10-6d92c):. | SIMD | Linux | macOS | Windows |; |--------|---------------------------|-------------------------|--------------------------|; | SSE4.1 | [mmseqs-linux-sse41.tar.gz](https://mmseqs.com/latest/mmseqs-linux-sse41.tar.gz) | [mmseqs-osx-sse41.tar.gz](https://mmseqs.com/latest/mmseqs-osx-sse41.tar.gz) | [mmseqs-win64.zip](https://mmseqs.com/latest/mmseqs-win64.zip) |; | AVX2 | [mmseqs-linux-avx2.tar.gz](https://mmseqs.com/latest/mmseqs-linux-avx2.tar.gz) | [mmseqs-osx-avx2.tar.gz](https://mmseqs.com/latest/mmseqs-osx-avx2.tar.gz) | - |. ## Known Issues; * MMseqs2 on Windows seems to not scale well on multiple threads; * MMseqs2 on Windows can crash when built with AVX2 support (mostly on VMs). ## Features; * `createindex` can precompute split indices to improve runtime when searching against a database that is larger than the system memory. Precomputed databases also require less overhead RAM, since only the required parts are loaded; * `easy-search`, `easy-taxonomy`, `easy-linclust` and `easy-cluster` workflows can take any number of query FASTA or FASTQ files; * MMseqs2 validates database types. It will exit with an error message on wrong input, where it would previously crash; * `kmermatcher` reports the diagonal with the most k-mer matches; * `kmermatcher` scales the number of k-mers with sequence length (`--kmer-per-seq-scale`); * `rescorediagonal` got two new rescore modes, one for global alignment scoring and one for scoring a quasi global alignment fullfilling a local window criterion ; * Peak memory usage for reading in very large databases is greatly reduced. 128GB nodes should comfortably be able to deal with up to the maximum of 4.2 billion entries ; * Parameters taking byte values support syntax with a SI suffix (e.g., `--split-memory-limit 64G`); * Nucleotide substitution matrices should be user definable ; * Taxonomy report is compatible with [Pavian](https://github.com/fbreitwieser/pavian). Thanks to Florian Breitwieser!; * `cluster`",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c:1903,load,loaded,1903,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c,1,['load'],['loaded']
Performance,"ress` `--summarize` `--omit-consensus` (in `result2msa`) to `--msa-format-mode`. ## Features; * Add GTDB and CDD to databases downloader #410; * Add `nrtotaxmapping` to create taxonomy mapping from NR; * Add `unpackdb` to split a database into separate files #406; * Add `majoritylca` module for majority voting based taxonomy from alignment results; * Add `cpdb` and `lndb`; * Taxonomy information is stored in binary format (a single `db_taxonomy` file, instead of `db_{named,nodes,merged}.dmp,db_mapping`) to speed up read-in. Old format is still supported.; * `--exhaustive-search` is usable with ungapped alignments (`--alignment-mode 4`); * Allow sequence/result database input in `taxonomyreport` #401/#408; * `msa2profile/result` can skip the first sequence with `--skip-query`; * `createtaxdb` can create a taxdb by mapping through `.source` in addition to `.lookup` (`--tax-mapping-mode 1`); * `splitsequence` can create a sequence database with original headers; * `align` can return short cluster format if only identifiers are required `--alignment-output-mode`; * `tar2db` can be used multi-threaded if input allows (e.g. `.tar` containing `.gz` files); * Encode species names in taxonomy blocklist to make sure we don't block random nodes in * e.g. GTDB); * Split non-index parts over additional files in split index case to reduce peak memory use; * `proteinaln2nucl` can now compute scores and e-values; * `createdb` can create a sequence database from a database containing fasta files (e.g. created by `tar2db`); * Add `MMSEQS_FORCE_MERGE` environment variable to force generating fully merged databases; * Improved many descriptions, warnings and error messages. ## Bugs fixed; * Fix `filterresult` off by one issue removing wrong sequences; * Fix `addtaxonomy` always crashing due to invalid check #355; * Reduce numbers of calls to `posix_memalign` to fix lock contention on macOS; * `extractorfs` doesn't flood warnings due to short sequences anymore; * `expand2profile` `--pca`",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/13-45111:2399,multi-thread,multi-threaded,2399,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/13-45111,1,['multi-thread'],['multi-threaded']
Performance,"s in various modules. ## Bug fixes; * `covertmsa` does now correctly parses STOCKHOLM files without accession keys; * In `search` when using splits less than `--max-seqs` sequences would be the limit, now correctly computes the limit (max-seqs/Splits + 4*sqrt(max_seqs/Splits)); * Fix bug in MsaFilter where wrong sequences would be filtered; * `swapresults` will add an empty entry if a target entry has no corresponding query match, instead of no entry at all; * `createindex` creates now correctly creates a tmp directory if no directory exists already; * Fix query split runs for small input databases; * `result2stats` was reading the wrong first sequence (from query instead of target database); * `result2repseq` now writes the correct `.dbtype` file; * `convertalis` now reads the correct `dbtype` for the target sequence; * Fix empty REG_EMPTY bug on macOS; * Fix possible memory corruption when searching against database indexed by 'createindex'; * Report error if -DHAVE_MPI was set and MPI is not installed on the system; * Avoid race condition in `kmermatcher` (invalid parallel writing to vector<bool>); * Fix `msa2profile` header output format; * `msa2profile` uses the FASTA readin mode by default now; * Target profile databases and databases build with `--exact-kmer-matching` now correctly extract all k-mers; * Fix identical score computation of alignment if clustering using profiles ; * Nucleotide backtranslation `translateaa` would produce invalid codons for X. ## Others; * removed `--early-exit`; * Output name of program called. ## Experimental new modules; * new fast alignment method `alignbykmer`. ## Developers; * Cmake flag `-DHAVE_GPROF` for profiling MMseqs2 using gprof; * Fixed most warnings ; * SSTR does not use stringstreams anymore ; * Refactored time measuring; * `Debug::INFO/WARNING/ERROR` is now used consistently across the codebase; * If available (shellcheck)[https://github.com/koalaman/shellcheck] will critique shell scripts and fail the compilation",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/4-0b8cc:2627,race condition,race condition,2627,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/4-0b8cc,1,['race condition'],['race condition']
Safety,"**At a glance:** The MMseqs2 command line interface is cleaner and validates user input. Many MMseqs2 modules use less memory and run faster. The new `databases` module helps to download and setup database. We now have a chat support at [chat.mmseqs.com](https://chat.mmseqs.com). ## Known Issues; * `rbh` crashes due to invalid sorting mode (#290); * Homebrew's macOS version does not use multiple cores (#289); * `prefilter` results can be unstable between different runs for extremely redundant databases (#277); * `linclust`/`cluster` can crash for very small input sets (#274). ## Breaking Changes; * `kmermatcher` `--skip-n-repeat-kmer` parameter was replaced with `--ignore-multi-kmer`; Does not discard whole sequences anymore if a k-mer occured to often, instead it skips the specific k-mers.; Either mode is only used in Plass and not in Linclust; * `--lca-ranks` from `(easy-)taxonomy` and `lca` has to be delimited with semicolons (`;`) instead of colons (`:`); * `--dont-shuffle` flag was renamed to `--shuffle true/false`. ## Features; * new `databases` workflow to list and download common databases. ; Supported databases:; ```; Name 	Type 	Taxonomy	Url; - UniRef100 	Aminoacid 	 yes	https://www.uniprot.org/help/uniref; - UniRef90 	Aminoacid 	 yes	https://www.uniprot.org/help/uniref; - UniRef50 	Aminoacid 	 yes	https://www.uniprot.org/help/uniref; - UniProtKB 	Aminoacid 	 yes	https://www.uniprot.org/help/uniprotkb; - UniProtKB/TrEMBL 	Aminoacid 	 yes	https://www.uniprot.org/help/uniprotkb; - UniProtKB/Swiss-Prot	Aminoacid 	 yes	https://uniprot.org; - NR 	Aminoacid 	 -	https://ftp.ncbi.nlm.nih.gov/blast/db/FASTA; - NT 	Nucleotide	 -	https://ftp.ncbi.nlm.nih.gov/blast/db/FASTA; - PDB 	Aminoacid 	 -	https://www.rcsb.org; - PDB70 	Profile 	 -	https://github.com/soedinglab/hh-suite; - Pfam-A.full 	Profile 	 -	https://pfam.xfam.org; - Pfam-A.seed 	Profile 	 -	https://pfam.xfam.org; - eggNOG 	Profile 	 -	http://eggnog5.embl.de; - Resfinder 	Nucleotide	 -	https://cge.cbs.dtu.dk",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c:488,redund,redundant,488,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c,1,['redund'],['redundant']
Safety,"d `(easy)-taxonomy`) add empty columns for unclassifed sequences to be valid TSVs; * `kmermatcher` uses xxhash for hashing now (faster) ; * `kmermatcher` avoid crash machine has not enough memory to process data at once (affects linclust/cluster); * `kmermatcher` correctly deals with sequences longer than MAX_SHRT now; * `kmermatcher` fixed various edge cases (e.g. alignment of 1-char sequences); * `kmermatcher` hash-shift would be ignored; * `offsetalignment` could produce wrong results in the minus-strand; * `clust` now correctly and consistently handles alignment DB input ; * `clusthash` better deals with nucleotide input now and several multi-threaded inefficiencies were resolved; * `(easy-)cluster` `--single-step-clustering` could cluster unrelated sequences due to hash collisions; * `prefilter --diag-score 0` respects `--min-ungapped-score` ; * `createseqfiledb` could print empty sequence lines; * `taxonomyreport` could crash if no sequence was unclassified; * `result2flat` could crash with long sequence input; * `result2msa, result2profile, msa2profile` backport filtering fix from HHblits; * `align` could produce bad alignments if all sequence lenghts in query DB where a lot shorter than in target DB; * `splitsequence` fix issues with splitsequence if combined with compressed; * `result2profile` fix Filter2 bug of [HH-suite](https://github.com/soedinglab/hh-suite/pull/182) in MMseqs2 ; * `apply` would crash due to reading wrong entry lengths; * `filterdb --filter-expression` was not thread safe and could corrupt results; * `filterdb` `--extract-lines` and `--trim-to-one-column` are compatible with each other. ## Developers; * Internal representation of sequences changed from 4-byte per character to 1-byte per character; * Compilation under AppleClang + libomp works now (see `util/build_osx.sh`); * Tools inheriting from MMseqs2 can now add their own citations; * MMseqs2 on macOS compiles with the macOS 10.9 SDK (removed `symlinkat` call; relevant for bioconda)",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c:5854,safe,safe,5854,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c,1,['safe'],['safe']
Safety,"eseq` learned to reverse profiles; * `filterdb` can filter rows with value within given percentage of first row; * new `aggragatetax` module to assign a taxonomic label to contigs according to the fragments matched on the contig; * Adjusting `--max-seq-len` is not required anymore, MMseqs2 automatically increases the length now.; * MMseqs2 on Cygwin/Windows uses `nedmalloc` as its memory allocator now and does not massively slow down due to lock contention; * new `tar2db` module to efficiently transform content of `tar` archives to MMseqs2 databases. ## Bug fixes; * `createindex` would create corrupted indices for profile target databases; * `rbh` workflow would create its result DB at an unexpected (wrong) location; * `(easy)-taxonomy --lca-mode 3` (Approx. LCA) was aligning invalid sequences in the second iteration and producing bad results; * `lca` (and `(easy)-taxonomy`) add empty columns for unclassifed sequences to be valid TSVs; * `kmermatcher` uses xxhash for hashing now (faster) ; * `kmermatcher` avoid crash machine has not enough memory to process data at once (affects linclust/cluster); * `kmermatcher` correctly deals with sequences longer than MAX_SHRT now; * `kmermatcher` fixed various edge cases (e.g. alignment of 1-char sequences); * `kmermatcher` hash-shift would be ignored; * `offsetalignment` could produce wrong results in the minus-strand; * `clust` now correctly and consistently handles alignment DB input ; * `clusthash` better deals with nucleotide input now and several multi-threaded inefficiencies were resolved; * `(easy-)cluster` `--single-step-clustering` could cluster unrelated sequences due to hash collisions; * `prefilter --diag-score 0` respects `--min-ungapped-score` ; * `createseqfiledb` could print empty sequence lines; * `taxonomyreport` could crash if no sequence was unclassified; * `result2flat` could crash with long sequence input; * `result2msa, result2profile, msa2profile` backport filtering fix from HHblits; * `align` could pro",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c:4486,avoid,avoid,4486,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c,1,['avoid'],['avoid']
Safety,"information as output options to `convertalis` (`qOrfStart/qOrfEnd, dbOrfStart, dbOrfEnd`); * Speed up sorting using [ips4o](https://github.com/SaschaWitt/ips4o); * Speed up masking through new version of [tantan](http://cbrc3.cbrc.jp/~martin/tantan/) ; * Speed up multi-threaded writing of clustering results; * Speed up reading of database indices and merging target split databases; * Add memory tracking to account for index size when computing available memory (`--split-memory-limit` should be more reliable when searching/clustering billions of sequences).; * Add `--search-type 4` (translated/translated search) to `createindex`; * Add `convertalis --format-mode 3` HTML output based on MMseqs2 app (app.mmseqs.com); * Improve memory management in `result2msa` and `result2profile` modules; * Add `msa2result` module to create an alignment result db from MSAs; * Add `filterresult` to slim down result dbs with pairwise HHblits filtering #316; * Add `--kmers-per-sequence-scale` to `linsearch` to extract a k-mer fraction instead of a fixed count ; * Add a random integer to `--local-tmp` path to avoid race conditions if multiple MMseqs2 happen on the same machine; * Add `--max-seqs` to `ungappedprefilter`; * Add `--tax-lineage-mode 2` parameter to print numeric taxids. ## Bugs fixed; * `rbh` workflow was broken due to issues with `filterdb`; * Fix `-a` in RBH search to show alignments; * Fix PDB70 database creation in `databases`; * Fix aria2c download support; * Fix memory issues and MPI in kmermatcher ; * Fix memory issues in `extractorfs` when using AVX2 ; * Fix `--cluster-reassign` to respect `--cov-mode`; * Set-cover supports up to 2^32 sequences (previously crashed with more than 2^31); * Exit correctly if there is not have enough disk space instead of crashing in the next module; * Fix `prefilter` order instability when searching very redundant databases; * Correctly parse keys from data files in `filterdb --filter-file`, this was causing instability in `linsearch`; ",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/12-113e3:2407,avoid,avoid,2407,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/12-113e3,1,['avoid'],['avoid']
Safety,"lated/translated search) to `createindex`; * Add `convertalis --format-mode 3` HTML output based on MMseqs2 app (app.mmseqs.com); * Improve memory management in `result2msa` and `result2profile` modules; * Add `msa2result` module to create an alignment result db from MSAs; * Add `filterresult` to slim down result dbs with pairwise HHblits filtering #316; * Add `--kmers-per-sequence-scale` to `linsearch` to extract a k-mer fraction instead of a fixed count ; * Add a random integer to `--local-tmp` path to avoid race conditions if multiple MMseqs2 happen on the same machine; * Add `--max-seqs` to `ungappedprefilter`; * Add `--tax-lineage-mode 2` parameter to print numeric taxids. ## Bugs fixed; * `rbh` workflow was broken due to issues with `filterdb`; * Fix `-a` in RBH search to show alignments; * Fix PDB70 database creation in `databases`; * Fix aria2c download support; * Fix memory issues and MPI in kmermatcher ; * Fix memory issues in `extractorfs` when using AVX2 ; * Fix `--cluster-reassign` to respect `--cov-mode`; * Set-cover supports up to 2^32 sequences (previously crashed with more than 2^31); * Exit correctly if there is not have enough disk space instead of crashing in the next module; * Fix `prefilter` order instability when searching very redundant databases; * Correctly parse keys from data files in `filterdb --filter-file`, this was causing instability in `linsearch`; * Allow overwriting string parameters with empty strings; * Fix ASAN issue in `extractorf` when using AVX2; * Microtar would try to seek backwards constantly resulting in horrible gzip read performance; * Avoid lookup writing to corrupt memory if an accession is too long; * Fix various inconsistencies and usability issues in `alignall`:; - `--alignment-mode` inconsistent with `align` module; - `--add-backtrace` did not do anything; * Fix restart of clusterings using reassignment `cluster --cluster-reassign`; * Fix createdb did not correctly read gz/bzip files with `--createdb-mode 1` #323",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/12-113e3:3168,redund,redundant,3168,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/12-113e3,1,['redund'],['redundant']
Security," 1-c7a89 Release. ## New Features; * Translated searches (blastx and tblastn like search modes); * Improvement splitting input sequences in `kmermatcher` (Less memory needed for `linclust`); * `linclust` supports nucleotide sequences (experimental feature, k-mer length is not yet optimized); * `search` supports nucleotide-nucleotide searches (preview, not stable yet); * `pssm2profile` module to print human readable profiles; * `msa2profile ` has a gap match mode to to convert multiple sequences alignments without representative sequence to profile databases; * Compute sequence identity in a similar way to BLAST if `--alignment-mode 3 ` is used; * `apply` module to execute a arbitrary program on each entry of a mmseqs database. Like map from MapReduce. ; * `extractorf` can use start/stop codons from alternative translation tables; * `filterdb` now can append entries from other databases by looking them up ; * `proteinaln2nucl` maps a protein alignment back to its original nucleotide sequences ; * `taxonomy` now can blacklist nodes (per default the unclassified and others nodes); * tmp folder is automatically created, all workflow intermediate results are placed in a subfolder based on the hash of all paths and parameters. ## Performance Regressions Fixed; * Fixed regression when multiple mmseqs instances were running at the same time. ## Breaking Command Line Interface Changes; * Incremented index version, old precomputed indices have to be regenerated; * New Profile format, databases generated through `convertprofiledb` and `msa2profile` have to be regenerated; * Clustering workflow is now by default cascaded. We replaced the `--cascaded` flag with `--single-step-clustering`; * Max sequence length of 32768 is now actually validated and enforced; * Each sequence database has now a dbtype file (AA=0, NUC=1, PROFILE=2); * extractorf was reworked:; * `--skip-incomplete` was split into two parameters `--contig-start-mode` and `--contig-end-mode`; * `--longest-orf` was rew",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/2-23394:1220,hash,hash,1220,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/2-23394,1,['hash'],['hash']
Security,")-taxonomy --lca-mode 3` (Approx. LCA) was aligning invalid sequences in the second iteration and producing bad results; * `lca` (and `(easy)-taxonomy`) add empty columns for unclassifed sequences to be valid TSVs; * `kmermatcher` uses xxhash for hashing now (faster) ; * `kmermatcher` avoid crash machine has not enough memory to process data at once (affects linclust/cluster); * `kmermatcher` correctly deals with sequences longer than MAX_SHRT now; * `kmermatcher` fixed various edge cases (e.g. alignment of 1-char sequences); * `kmermatcher` hash-shift would be ignored; * `offsetalignment` could produce wrong results in the minus-strand; * `clust` now correctly and consistently handles alignment DB input ; * `clusthash` better deals with nucleotide input now and several multi-threaded inefficiencies were resolved; * `(easy-)cluster` `--single-step-clustering` could cluster unrelated sequences due to hash collisions; * `prefilter --diag-score 0` respects `--min-ungapped-score` ; * `createseqfiledb` could print empty sequence lines; * `taxonomyreport` could crash if no sequence was unclassified; * `result2flat` could crash with long sequence input; * `result2msa, result2profile, msa2profile` backport filtering fix from HHblits; * `align` could produce bad alignments if all sequence lenghts in query DB where a lot shorter than in target DB; * `splitsequence` fix issues with splitsequence if combined with compressed; * `result2profile` fix Filter2 bug of [HH-suite](https://github.com/soedinglab/hh-suite/pull/182) in MMseqs2 ; * `apply` would crash due to reading wrong entry lengths; * `filterdb --filter-expression` was not thread safe and could corrupt results; * `filterdb` `--extract-lines` and `--trim-to-one-column` are compatible with each other. ## Developers; * Internal representation of sequences changed from 4-byte per character to 1-byte per character; * Compilation under AppleClang + libomp works now (see `util/build_osx.sh`); * Tools inheriting from MMseqs2 ca",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c:4748,hash,hash-shift,4748,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c,2,['hash'],"['hash', 'hash-shift']"
Security,"**At a glance:** The MMseqs2 command line interface is cleaner and validates user input. Many MMseqs2 modules use less memory and run faster. ## Known Issues; * High sensitivity searches (higher than -s 6) with precomputed indices should fail. Pass `--db-load-mode 3` as a workaround to the MMseqs2 call. ## Breaking Changes; * Default taxonomy mode is assigning the same taxonomic label as the top hit. The previous ""approximate 2bLCA"" mode can be used with `--lca-mode 3` or the non-approximated 2bLCA with `--lca-mode 2`; * MMseqs2 will refuse to compile on compilers without OpenMP support (Use `-DREQUIRE_OPENMP=0` to force a single-threaded no OpenMP build); * The confusingly named (and probably non-functional) `--global-alignment` parameter is gone; * File names of the **latest** precompiled binaries changed. All archives contain a copy of the user guide and the MMseqs2 binary in the same subfolder (see further down for binaries of release 10-6d92c):. | SIMD | Linux | macOS | Windows |; |--------|---------------------------|-------------------------|--------------------------|; | SSE4.1 | [mmseqs-linux-sse41.tar.gz](https://mmseqs.com/latest/mmseqs-linux-sse41.tar.gz) | [mmseqs-osx-sse41.tar.gz](https://mmseqs.com/latest/mmseqs-osx-sse41.tar.gz) | [mmseqs-win64.zip](https://mmseqs.com/latest/mmseqs-win64.zip) |; | AVX2 | [mmseqs-linux-avx2.tar.gz](https://mmseqs.com/latest/mmseqs-linux-avx2.tar.gz) | [mmseqs-osx-avx2.tar.gz](https://mmseqs.com/latest/mmseqs-osx-avx2.tar.gz) | - |. ## Known Issues; * MMseqs2 on Windows seems to not scale well on multiple threads; * MMseqs2 on Windows can crash when built with AVX2 support (mostly on VMs). ## Features; * `createindex` can precompute split indices to improve runtime when searching against a database that is larger than the system memory. Precomputed databases also require less overhead RAM, since only the required parts are loaded; * `easy-search`, `easy-taxonomy`, `easy-linclust` and `easy-cluster` workflows can take an",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c:67,validat,validates,67,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c,1,['validat'],['validates']
Security,"**At a glance:** The MMseqs2 command line interface is cleaner and validates user input. Many MMseqs2 modules use less memory and run faster. The new `databases` module helps to download and setup database. We now have a chat support at [chat.mmseqs.com](https://chat.mmseqs.com). ## Known Issues; * `rbh` crashes due to invalid sorting mode (#290); * Homebrew's macOS version does not use multiple cores (#289); * `prefilter` results can be unstable between different runs for extremely redundant databases (#277); * `linclust`/`cluster` can crash for very small input sets (#274). ## Breaking Changes; * `kmermatcher` `--skip-n-repeat-kmer` parameter was replaced with `--ignore-multi-kmer`; Does not discard whole sequences anymore if a k-mer occured to often, instead it skips the specific k-mers.; Either mode is only used in Plass and not in Linclust; * `--lca-ranks` from `(easy-)taxonomy` and `lca` has to be delimited with semicolons (`;`) instead of colons (`:`); * `--dont-shuffle` flag was renamed to `--shuffle true/false`. ## Features; * new `databases` workflow to list and download common databases. ; Supported databases:; ```; Name 	Type 	Taxonomy	Url; - UniRef100 	Aminoacid 	 yes	https://www.uniprot.org/help/uniref; - UniRef90 	Aminoacid 	 yes	https://www.uniprot.org/help/uniref; - UniRef50 	Aminoacid 	 yes	https://www.uniprot.org/help/uniref; - UniProtKB 	Aminoacid 	 yes	https://www.uniprot.org/help/uniprotkb; - UniProtKB/TrEMBL 	Aminoacid 	 yes	https://www.uniprot.org/help/uniprotkb; - UniProtKB/Swiss-Prot	Aminoacid 	 yes	https://uniprot.org; - NR 	Aminoacid 	 -	https://ftp.ncbi.nlm.nih.gov/blast/db/FASTA; - NT 	Nucleotide	 -	https://ftp.ncbi.nlm.nih.gov/blast/db/FASTA; - PDB 	Aminoacid 	 -	https://www.rcsb.org; - PDB70 	Profile 	 -	https://github.com/soedinglab/hh-suite; - Pfam-A.full 	Profile 	 -	https://pfam.xfam.org; - Pfam-A.seed 	Profile 	 -	https://pfam.xfam.org; - eggNOG 	Profile 	 -	http://eggnog5.embl.de; - Resfinder 	Nucleotide	 -	https://cge.cbs.dtu.dk",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c:67,validat,validates,67,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c,1,['validat'],['validates']
Security,"Changes since release 3-be8f6. ## New features; * Alternative alignments in search (`--alt-ali`). Find alignments by masking out previously found regions in the target sequence.; * Added `map` workflow for fast near-exact mapping of reads; * Added `easy-linclust` workflow, that works on FASTA files; * Sequence lengths longer than 32k are now supported (default sequence length limit is now 65535); * `createdb` shuffles the order of entries by default (`--dont-shuffle` to disable), useful for database splits, where one split could take much longer than others; * `linclust` now supports MPI; * `linclust` adds one hash for the whole sequence, to improve extract sequence matching; * New sequence identity computation modes, where the normalization happens on the query or target length instead of alignment length; * New `--cov-mode` that computes the coverage only based on sequence lengths (`--cov-mode 3`); * `search`/`cluster`/`linclust` workflows have learned `--alignment-mode 4` for faster ungapped alignments; * Translated `search` sorts now results by E-value and aggregates all ORFs under the corresponding contig identifier; * `prefiltering` can now sort hits with score > 255 correctly; * `convertalis` now works with profiles; * Added generalized database transposition tool `swapdb` (`swapresults` only makes sense for prefiltering/alignment results). ## Performance; * Speedup `extractorf` with vectorization; * Many performance improvements to reduce overhead for web server mode; * `createtsv` writes output in parallel; * Avoid many unnecessary memory allocations in various modules. ## Bug fixes; * `covertmsa` does now correctly parses STOCKHOLM files without accession keys; * In `search` when using splits less than `--max-seqs` sequences would be the limit, now correctly computes the limit (max-seqs/Splits + 4*sqrt(max_seqs/Splits)); * Fix bug in MsaFilter where wrong sequences would be filtered; * `swapresults` will add an empty entry if a target entry has no correspon",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/4-0b8cc:618,hash,hash,618,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/4-0b8cc,1,['hash'],['hash']
Security,"b` now can append entries from other databases by looking them up ; * `proteinaln2nucl` maps a protein alignment back to its original nucleotide sequences ; * `taxonomy` now can blacklist nodes (per default the unclassified and others nodes); * tmp folder is automatically created, all workflow intermediate results are placed in a subfolder based on the hash of all paths and parameters. ## Performance Regressions Fixed; * Fixed regression when multiple mmseqs instances were running at the same time. ## Breaking Command Line Interface Changes; * Incremented index version, old precomputed indices have to be regenerated; * New Profile format, databases generated through `convertprofiledb` and `msa2profile` have to be regenerated; * Clustering workflow is now by default cascaded. We replaced the `--cascaded` flag with `--single-step-clustering`; * Max sequence length of 32768 is now actually validated and enforced; * Each sequence database has now a dbtype file (AA=0, NUC=1, PROFILE=2); * extractorf was reworked:; * `--skip-incomplete` was split into two parameters `--contig-start-mode` and `--contig-end-mode`; * `--longest-orf` was reworked into `--orf-start-mode` ; * removed `--extend-min` parameter. ## Others; * Factor four times faster clustering workflow; * Improve speed of `linclust` by a factor of two; * Remove 'X' from prefilter index (reduces memory and improves speed at the same sensitivity); * Fix bugs for Query coverage mode (`--cov-mode 2`) ; * Clustering is now the same between single and multi threaded version; * Speedup of kmermatcher; * Fix bug in Clust hash. It can now cluster to 1.0 sequence identity; * Improve target profile search, set max-seqs to infinite for alignments. ; * Improve speed of `align` if prefilter result fit into memory; * Many usability improvements; * Improved suggestions of bash completion; * Expert modules are hidden by default, use `-h` flag to show everything; * Speed up `mergeclusters` by a lot; * Fix sequence identity print out",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/2-23394:1765,validat,validated,1765,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/2-23394,1,['validat'],['validated']
Security,"d `--alignment-mode 4` for faster ungapped alignments; * Translated `search` sorts now results by E-value and aggregates all ORFs under the corresponding contig identifier; * `prefiltering` can now sort hits with score > 255 correctly; * `convertalis` now works with profiles; * Added generalized database transposition tool `swapdb` (`swapresults` only makes sense for prefiltering/alignment results). ## Performance; * Speedup `extractorf` with vectorization; * Many performance improvements to reduce overhead for web server mode; * `createtsv` writes output in parallel; * Avoid many unnecessary memory allocations in various modules. ## Bug fixes; * `covertmsa` does now correctly parses STOCKHOLM files without accession keys; * In `search` when using splits less than `--max-seqs` sequences would be the limit, now correctly computes the limit (max-seqs/Splits + 4*sqrt(max_seqs/Splits)); * Fix bug in MsaFilter where wrong sequences would be filtered; * `swapresults` will add an empty entry if a target entry has no corresponding query match, instead of no entry at all; * `createindex` creates now correctly creates a tmp directory if no directory exists already; * Fix query split runs for small input databases; * `result2stats` was reading the wrong first sequence (from query instead of target database); * `result2repseq` now writes the correct `.dbtype` file; * `convertalis` now reads the correct `dbtype` for the target sequence; * Fix empty REG_EMPTY bug on macOS; * Fix possible memory corruption when searching against database indexed by 'createindex'; * Report error if -DHAVE_MPI was set and MPI is not installed on the system; * Avoid race condition in `kmermatcher` (invalid parallel writing to vector<bool>); * Fix `msa2profile` header output format; * `msa2profile` uses the FASTA readin mode by default now; * Target profile databases and databases build with `--exact-kmer-matching` now correctly extract all k-mers; * Fix identical score computation of alignment if clu",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/4-0b8cc:1684,access,accession,1684,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/4-0b8cc,1,['access'],['accession']
Security,"eseq` learned to reverse profiles; * `filterdb` can filter rows with value within given percentage of first row; * new `aggragatetax` module to assign a taxonomic label to contigs according to the fragments matched on the contig; * Adjusting `--max-seq-len` is not required anymore, MMseqs2 automatically increases the length now.; * MMseqs2 on Cygwin/Windows uses `nedmalloc` as its memory allocator now and does not massively slow down due to lock contention; * new `tar2db` module to efficiently transform content of `tar` archives to MMseqs2 databases. ## Bug fixes; * `createindex` would create corrupted indices for profile target databases; * `rbh` workflow would create its result DB at an unexpected (wrong) location; * `(easy)-taxonomy --lca-mode 3` (Approx. LCA) was aligning invalid sequences in the second iteration and producing bad results; * `lca` (and `(easy)-taxonomy`) add empty columns for unclassifed sequences to be valid TSVs; * `kmermatcher` uses xxhash for hashing now (faster) ; * `kmermatcher` avoid crash machine has not enough memory to process data at once (affects linclust/cluster); * `kmermatcher` correctly deals with sequences longer than MAX_SHRT now; * `kmermatcher` fixed various edge cases (e.g. alignment of 1-char sequences); * `kmermatcher` hash-shift would be ignored; * `offsetalignment` could produce wrong results in the minus-strand; * `clust` now correctly and consistently handles alignment DB input ; * `clusthash` better deals with nucleotide input now and several multi-threaded inefficiencies were resolved; * `(easy-)cluster` `--single-step-clustering` could cluster unrelated sequences due to hash collisions; * `prefilter --diag-score 0` respects `--min-ungapped-score` ; * `createseqfiledb` could print empty sequence lines; * `taxonomyreport` could crash if no sequence was unclassified; * `result2flat` could crash with long sequence input; * `result2msa, result2profile, msa2profile` backport filtering fix from HHblits; * `align` could pro",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c:4447,hash,hashing,4447,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c,1,['hash'],['hashing']
Security,"filtering sequence DBs with taxonomy information according to provided taxa; * `--taxon-list` parameter understands expressions. E.g. get all bacterial and human sequences `--taxon-list ""2||9606""`; * `easy-search` and `convertalis` can now output taxonomic information using `--format-output`; ```; taxid Taxonomic identifier; taxname Taxon Name; taxlineage Taxonomic lineage; ```; * speed up in `(easy-)cluster/linclust` by improving k-mer extraction; * MMseqs2 consistently creates .source and .lookup files to match from which input file a sequence came from; E.g.: `mmseqs createdb input1.fa input2.fa seqDB` each sequence in seqDB can tell if it came from `input1.fa` or `input2.fa`; * `createdb` learned to index an existing (single-line-seq per entry) FASTA file without copying the FASTA content to a new database; * `align` and `rescorediagonal` learned to align circular sequences; * `align` exposes the z-drop parameter of its Banded Nucleotide alignment algorithm; * `reverseseq` learned to reverse profiles; * `filterdb` can filter rows with value within given percentage of first row; * new `aggragatetax` module to assign a taxonomic label to contigs according to the fragments matched on the contig; * Adjusting `--max-seq-len` is not required anymore, MMseqs2 automatically increases the length now.; * MMseqs2 on Cygwin/Windows uses `nedmalloc` as its memory allocator now and does not massively slow down due to lock contention; * new `tar2db` module to efficiently transform content of `tar` archives to MMseqs2 databases. ## Bug fixes; * `createindex` would create corrupted indices for profile target databases; * `rbh` workflow would create its result DB at an unexpected (wrong) location; * `(easy)-taxonomy --lca-mode 3` (Approx. LCA) was aligning invalid sequences in the second iteration and producing bad results; * `lca` (and `(easy)-taxonomy`) add empty columns for unclassifed sequences to be valid TSVs; * `kmermatcher` uses xxhash for hashing now (faster) ; * `kmerma",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c:3381,expose,exposes,3381,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c,1,['expose'],['exposes']
Security,"lated/translated search) to `createindex`; * Add `convertalis --format-mode 3` HTML output based on MMseqs2 app (app.mmseqs.com); * Improve memory management in `result2msa` and `result2profile` modules; * Add `msa2result` module to create an alignment result db from MSAs; * Add `filterresult` to slim down result dbs with pairwise HHblits filtering #316; * Add `--kmers-per-sequence-scale` to `linsearch` to extract a k-mer fraction instead of a fixed count ; * Add a random integer to `--local-tmp` path to avoid race conditions if multiple MMseqs2 happen on the same machine; * Add `--max-seqs` to `ungappedprefilter`; * Add `--tax-lineage-mode 2` parameter to print numeric taxids. ## Bugs fixed; * `rbh` workflow was broken due to issues with `filterdb`; * Fix `-a` in RBH search to show alignments; * Fix PDB70 database creation in `databases`; * Fix aria2c download support; * Fix memory issues and MPI in kmermatcher ; * Fix memory issues in `extractorfs` when using AVX2 ; * Fix `--cluster-reassign` to respect `--cov-mode`; * Set-cover supports up to 2^32 sequences (previously crashed with more than 2^31); * Exit correctly if there is not have enough disk space instead of crashing in the next module; * Fix `prefilter` order instability when searching very redundant databases; * Correctly parse keys from data files in `filterdb --filter-file`, this was causing instability in `linsearch`; * Allow overwriting string parameters with empty strings; * Fix ASAN issue in `extractorf` when using AVX2; * Microtar would try to seek backwards constantly resulting in horrible gzip read performance; * Avoid lookup writing to corrupt memory if an accession is too long; * Fix various inconsistencies and usability issues in `alignall`:; - `--alignment-mode` inconsistent with `align` module; - `--add-backtrace` did not do anything; * Fix restart of clusterings using reassignment `cluster --cluster-reassign`; * Fix createdb did not correctly read gz/bzip files with `--createdb-mode 1` #323",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/12-113e3:3552,access,accession,3552,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/12-113e3,1,['access'],['accession']
Security,"lts are placed in a subfolder based on the hash of all paths and parameters. ## Performance Regressions Fixed; * Fixed regression when multiple mmseqs instances were running at the same time. ## Breaking Command Line Interface Changes; * Incremented index version, old precomputed indices have to be regenerated; * New Profile format, databases generated through `convertprofiledb` and `msa2profile` have to be regenerated; * Clustering workflow is now by default cascaded. We replaced the `--cascaded` flag with `--single-step-clustering`; * Max sequence length of 32768 is now actually validated and enforced; * Each sequence database has now a dbtype file (AA=0, NUC=1, PROFILE=2); * extractorf was reworked:; * `--skip-incomplete` was split into two parameters `--contig-start-mode` and `--contig-end-mode`; * `--longest-orf` was reworked into `--orf-start-mode` ; * removed `--extend-min` parameter. ## Others; * Factor four times faster clustering workflow; * Improve speed of `linclust` by a factor of two; * Remove 'X' from prefilter index (reduces memory and improves speed at the same sensitivity); * Fix bugs for Query coverage mode (`--cov-mode 2`) ; * Clustering is now the same between single and multi threaded version; * Speedup of kmermatcher; * Fix bug in Clust hash. It can now cluster to 1.0 sequence identity; * Improve target profile search, set max-seqs to infinite for alignments. ; * Improve speed of `align` if prefilter result fit into memory; * Many usability improvements; * Improved suggestions of bash completion; * Expert modules are hidden by default, use `-h` flag to show everything; * Speed up `mergeclusters` by a lot; * Fix sequence identity print out bug if the id is less than 10%; * MPI Runner variable can now correctly contain further parameters (RUNNER=""mpirun -np 4"" was not working); * Enforcing GCC 4.6 compatibilty in our continous integration. ## Devlopers; * MMseqs2 can now be included in framework mode to subprojects; * DBReader has a SHUFFLE mode",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/2-23394:2457,hash,hash,2457,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/2-23394,1,['hash'],['hash']
Security,"release 10-6d92c):. | SIMD | Linux | macOS | Windows |; |--------|---------------------------|-------------------------|--------------------------|; | SSE4.1 | [mmseqs-linux-sse41.tar.gz](https://mmseqs.com/latest/mmseqs-linux-sse41.tar.gz) | [mmseqs-osx-sse41.tar.gz](https://mmseqs.com/latest/mmseqs-osx-sse41.tar.gz) | [mmseqs-win64.zip](https://mmseqs.com/latest/mmseqs-win64.zip) |; | AVX2 | [mmseqs-linux-avx2.tar.gz](https://mmseqs.com/latest/mmseqs-linux-avx2.tar.gz) | [mmseqs-osx-avx2.tar.gz](https://mmseqs.com/latest/mmseqs-osx-avx2.tar.gz) | - |. ## Known Issues; * MMseqs2 on Windows seems to not scale well on multiple threads; * MMseqs2 on Windows can crash when built with AVX2 support (mostly on VMs). ## Features; * `createindex` can precompute split indices to improve runtime when searching against a database that is larger than the system memory. Precomputed databases also require less overhead RAM, since only the required parts are loaded; * `easy-search`, `easy-taxonomy`, `easy-linclust` and `easy-cluster` workflows can take any number of query FASTA or FASTQ files; * MMseqs2 validates database types. It will exit with an error message on wrong input, where it would previously crash; * `kmermatcher` reports the diagonal with the most k-mer matches; * `kmermatcher` scales the number of k-mers with sequence length (`--kmer-per-seq-scale`); * `rescorediagonal` got two new rescore modes, one for global alignment scoring and one for scoring a quasi global alignment fullfilling a local window criterion ; * Peak memory usage for reading in very large databases is greatly reduced. 128GB nodes should comfortably be able to deal with up to the maximum of 4.2 billion entries ; * Parameters taking byte values support syntax with a SI suffix (e.g., `--split-memory-limit 64G`); * Nucleotide substitution matrices should be user definable ; * Taxonomy report is compatible with [Pavian](https://github.com/fbreitwieser/pavian). Thanks to Florian Breitwieser!; * `cluster`",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c:2051,validat,validates,2051,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c,1,['validat'],['validates']
Security,"rk with set-cover or connected-component ; * Short circuit `--cluster-reassign` if nothing can be reassigned; * Fix temporary files not getting removed in `linclust/cluster` with `--remove-tmp--files`; * Fix `kmermatcher` setting user k-mer pattern in auto k-mer selection and breaking; * Krona `taxonomyreport` was not working if no sequence was unclassified; * Make `Matcher::resultToBuffer` buffer sizes consistent (could crash with very long backtraces, needs further refactoring); * Fix multiple locations where `Util::checkAllocation` could never be called as it would have crashed before; * Whitespace containing parameters do not break workflows anymore (e.g. passing whitespaces to `--sub-mat`); * `taxonomyreport` and `addtaxonomy` parameter were not adjustable in `easy-taxonomy`; * E-value parameters are now correctly parsed as doubles instead of floats #379; * Add symlinks to `splitdb` #376; * Increase maximum number of open files in `DBReader`; * Include file size and modified date of inputs in `temporary` file hash calculation #372; * `--cov-mode 5` was not working #371; * Database downloader deals correctly with redirects now; * `result2profile` could crash if target database contained much longer sequences than query database; * Stop symlinking header database (and other ancillary files) in `filterresult`. ## Developer; * Add vector of predefined substitution matrices to add additional matrices in subprojects; * Don't create false `_has_{builtin,attribute}` macros (see https://github.com/simd-everywhere/simde/issues/691#issuecomment-753686859); * Add `USE_SYSTEM_ZSTD` cmake flag to use system provided zstd #411; * Replace texlive with tectonic for faster/prettier userguide; * Add more instructions to `simd.h`; * Add initial fixes to get MMseqs2 working on s390x (work in progress); * Prebuilt macOS binary is now a Universal Mac Binary supporting SSE, AVX and Apple Silicon NEON; * Build ARM64/PPC64LE binaries by cross-compiling; * Add missing licenses and README",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/13-45111:4478,hash,hash,4478,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/13-45111,1,['hash'],['hash']
Testability,"ce; * `result2stats` can write TSV files; * `createsubdb` supports softlinks instead of always hard copying the whole file to disk; * reduced harddisk space usage for all cascaded clusterings ; * `easy-taxonomy` reports the top hit alignment as a separate output file with the suffix `tophit_aln`; * `createindex` checks if an index needs to be recomputed were improved. ## Bug fixes; * MMseqs2 did not compile on FreeBSD. Please let us know about free continuous integration options to make sure it will keep working in the future; * `proteinaln2nucl` could return wrong coordinates; * `apply` would deadlock when running with multiple threads; * MPI searches are way more reliable, there were various issues around merging the separate results. MPI logic of split and merge is also integrated into the regression tests suite; * `prefilter` splits nucleotide searches if not enough memory is available ; * `kmermatcher` could corrupt memory; * `rescorediagonal` could produce wrong sequence identities when aligning mixed-case sequences; * macOS builds were not actually static (still dynamically link libsystem however); * `lca` module could corrupt memory and crash; * `createdb` does not crash on systems with only 4GB of RAM anymore; * AVX2 and SSE4.1 builds could produce slightly different results; * `summarizeresults` does not crash on empty alignments results anymore; * fix wrong tophit_report in `easy-taxonomy` ; * Precompiled Windows builds were broken; * Precomputed indices of databases with very short sequences could truncate alignments if the query sequences were longer. ## Developers; * Tools using MMseqs2 as a framework do not need to export MMseqs2 modules again anymore; * MMseqs2 uses Azure Pipelines for all platforms to run our regression tests suite and provide precompiled binaries; * MMseqs2 runs under ASan without any issues. We fixed various small memory leaks; * The regression suite is directly linked through a submodule. It can be used by running:; ```; git submo",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c:3906,log,logic,3906,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c,2,"['log', 'test']","['logic', 'tests']"
Testability,"s hard copying the whole file to disk; * reduced harddisk space usage for all cascaded clusterings ; * `easy-taxonomy` reports the top hit alignment as a separate output file with the suffix `tophit_aln`; * `createindex` checks if an index needs to be recomputed were improved. ## Bug fixes; * MMseqs2 did not compile on FreeBSD. Please let us know about free continuous integration options to make sure it will keep working in the future; * `proteinaln2nucl` could return wrong coordinates; * `apply` would deadlock when running with multiple threads; * MPI searches are way more reliable, there were various issues around merging the separate results. MPI logic of split and merge is also integrated into the regression tests suite; * `prefilter` splits nucleotide searches if not enough memory is available ; * `kmermatcher` could corrupt memory; * `rescorediagonal` could produce wrong sequence identities when aligning mixed-case sequences; * macOS builds were not actually static (still dynamically link libsystem however); * `lca` module could corrupt memory and crash; * `createdb` does not crash on systems with only 4GB of RAM anymore; * AVX2 and SSE4.1 builds could produce slightly different results; * `summarizeresults` does not crash on empty alignments results anymore; * fix wrong tophit_report in `easy-taxonomy` ; * Precompiled Windows builds were broken; * Precomputed indices of databases with very short sequences could truncate alignments if the query sequences were longer. ## Developers; * Tools using MMseqs2 as a framework do not need to export MMseqs2 modules again anymore; * MMseqs2 uses Azure Pipelines for all platforms to run our regression tests suite and provide precompiled binaries; * MMseqs2 runs under ASan without any issues. We fixed various small memory leaks; * The regression suite is directly linked through a submodule. It can be used by running:; ```; git submodule update --init; ./util/regression/run_regression.sh $PATH_TO_MMSEQS/mmseqs $TMP_DIR; ```",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c:4922,test,tests,4922,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c,1,['test'],['tests']
Usability," to perform LCA assignment by top-hit (`--lca-mode 4`) as default. Approximate (see manuscript) 2bLCA is now again the default and we automatically switch to top-hit if given nucleotide-to-nucleotide input. ## Breaking changes; * `--slice-search` in now called `--exhaustive-search`; * Unify `--compress` `--summarize` `--omit-consensus` (in `result2msa`) to `--msa-format-mode`. ## Features; * Add GTDB and CDD to databases downloader #410; * Add `nrtotaxmapping` to create taxonomy mapping from NR; * Add `unpackdb` to split a database into separate files #406; * Add `majoritylca` module for majority voting based taxonomy from alignment results; * Add `cpdb` and `lndb`; * Taxonomy information is stored in binary format (a single `db_taxonomy` file, instead of `db_{named,nodes,merged}.dmp,db_mapping`) to speed up read-in. Old format is still supported.; * `--exhaustive-search` is usable with ungapped alignments (`--alignment-mode 4`); * Allow sequence/result database input in `taxonomyreport` #401/#408; * `msa2profile/result` can skip the first sequence with `--skip-query`; * `createtaxdb` can create a taxdb by mapping through `.source` in addition to `.lookup` (`--tax-mapping-mode 1`); * `splitsequence` can create a sequence database with original headers; * `align` can return short cluster format if only identifiers are required `--alignment-output-mode`; * `tar2db` can be used multi-threaded if input allows (e.g. `.tar` containing `.gz` files); * Encode species names in taxonomy blocklist to make sure we don't block random nodes in * e.g. GTDB); * Split non-index parts over additional files in split index case to reduce peak memory use; * `proteinaln2nucl` can now compute scores and e-values; * `createdb` can create a sequence database from a database containing fasta files (e.g. created by `tar2db`); * Add `MMSEQS_FORCE_MERGE` environment variable to force generating fully merged databases; * Improved many descriptions, warnings and error messages. ## Bugs fixed; * Fi",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/13-45111:1889,usab,usable,1889,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/13-45111,1,['usab'],['usable']
Usability,"**At a glance:** The MMseqs2 command line interface is cleaner and validates user input. Many MMseqs2 modules use less memory and run faster. ## Known Issues; * High sensitivity searches (higher than -s 6) with precomputed indices should fail. Pass `--db-load-mode 3` as a workaround to the MMseqs2 call. ## Breaking Changes; * Default taxonomy mode is assigning the same taxonomic label as the top hit. The previous ""approximate 2bLCA"" mode can be used with `--lca-mode 3` or the non-approximated 2bLCA with `--lca-mode 2`; * MMseqs2 will refuse to compile on compilers without OpenMP support (Use `-DREQUIRE_OPENMP=0` to force a single-threaded no OpenMP build); * The confusingly named (and probably non-functional) `--global-alignment` parameter is gone; * File names of the **latest** precompiled binaries changed. All archives contain a copy of the user guide and the MMseqs2 binary in the same subfolder (see further down for binaries of release 10-6d92c):. | SIMD | Linux | macOS | Windows |; |--------|---------------------------|-------------------------|--------------------------|; | SSE4.1 | [mmseqs-linux-sse41.tar.gz](https://mmseqs.com/latest/mmseqs-linux-sse41.tar.gz) | [mmseqs-osx-sse41.tar.gz](https://mmseqs.com/latest/mmseqs-osx-sse41.tar.gz) | [mmseqs-win64.zip](https://mmseqs.com/latest/mmseqs-win64.zip) |; | AVX2 | [mmseqs-linux-avx2.tar.gz](https://mmseqs.com/latest/mmseqs-linux-avx2.tar.gz) | [mmseqs-osx-avx2.tar.gz](https://mmseqs.com/latest/mmseqs-osx-avx2.tar.gz) | - |. ## Known Issues; * MMseqs2 on Windows seems to not scale well on multiple threads; * MMseqs2 on Windows can crash when built with AVX2 support (mostly on VMs). ## Features; * `createindex` can precompute split indices to improve runtime when searching against a database that is larger than the system memory. Precomputed databases also require less overhead RAM, since only the required parts are loaded; * `easy-search`, `easy-taxonomy`, `easy-linclust` and `easy-cluster` workflows can take an",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c:860,guid,guide,860,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c,1,['guid'],['guide']
Usability,"At a glance: Improved taxonomy, add colors to user output, improve computation progress bar, small speed ups and many bug fixes. ## Features; * Add support for Kraken style taxonomy reports. Thanks to Florian Breitwieser; * New easy-taxonomy workflow ; * New progress bar to reduce output ; * Colored errors and warnings . ## Bugs; * Fix alignment problem in SSW library https://github.com/mengyao/Complete-Striped-Smith-Waterman-Library/issues/61; * Fix iterative profile search ; * Fix protein nucleotide index issues ; * Fix cluster update workflow; * Fix critical multi threading bug in taxonomy workflow",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/9-d36de:79,progress bar,progress bar,79,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/9-d36de,2,['progress bar'],['progress bar']
Usability,"Changes since 2-23394 Release. ## New Features; * Create simple workflows fasta/fastq in flat file out for clustering `easy-cluster` and searching `easy-search`; * Add a new clustering greedy incremental clustering algorithm to the `clust` module which needs less memory; * Make the new low memory clustering algorithm default if `--cov-mode 1` is used in `linclust` and `cluster`; * Add `alignall` module for all-against-all alignments of e.g. clusters; * Improved Windows support; * `filterdb` learned new modes. ## Bug fixes; * Fix wrong merging code in `linclust`; * Fix e-value issues in target-split case; * Fix seg. fault in rescore diagonal if 'z' is used; * Fix seg. fault when using masking in `kmermatcher`; * Fix wrong `filterdb` default mode; * `prefilter` overestimated the required amount of memory and refused to run; * `prefilter` scores would saturate to early, now they have the full 2^16 range. ## Others; * Profile searches do create less high scoring false positive through better compositional bias correction and masking of low complexity regions of profiles; * Clustering supports now the whole 2^32 range instead the previously 2^31; * Speed up clustering when using `--cov-mode 1`; * Rework symlinks to the header databaes; * Support profiles on query and target side in `result2profile`",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/3-be8f6:57,simpl,simple,57,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/3-be8f6,2,"['learn', 'simpl']","['learned', 'simple']"
Usability,"Changes since release 3-be8f6. ## New features; * Alternative alignments in search (`--alt-ali`). Find alignments by masking out previously found regions in the target sequence.; * Added `map` workflow for fast near-exact mapping of reads; * Added `easy-linclust` workflow, that works on FASTA files; * Sequence lengths longer than 32k are now supported (default sequence length limit is now 65535); * `createdb` shuffles the order of entries by default (`--dont-shuffle` to disable), useful for database splits, where one split could take much longer than others; * `linclust` now supports MPI; * `linclust` adds one hash for the whole sequence, to improve extract sequence matching; * New sequence identity computation modes, where the normalization happens on the query or target length instead of alignment length; * New `--cov-mode` that computes the coverage only based on sequence lengths (`--cov-mode 3`); * `search`/`cluster`/`linclust` workflows have learned `--alignment-mode 4` for faster ungapped alignments; * Translated `search` sorts now results by E-value and aggregates all ORFs under the corresponding contig identifier; * `prefiltering` can now sort hits with score > 255 correctly; * `convertalis` now works with profiles; * Added generalized database transposition tool `swapdb` (`swapresults` only makes sense for prefiltering/alignment results). ## Performance; * Speedup `extractorf` with vectorization; * Many performance improvements to reduce overhead for web server mode; * `createtsv` writes output in parallel; * Avoid many unnecessary memory allocations in various modules. ## Bug fixes; * `covertmsa` does now correctly parses STOCKHOLM files without accession keys; * In `search` when using splits less than `--max-seqs` sequences would be the limit, now correctly computes the limit (max-seqs/Splits + 4*sqrt(max_seqs/Splits)); * Fix bug in MsaFilter where wrong sequences would be filtered; * `swapresults` will add an empty entry if a target entry has no correspon",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/4-0b8cc:961,learn,learned,961,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/4-0b8cc,1,['learn'],['learned']
Usability,Changes since vNatBiotech Release. ## New Features; * Taxonomy classification workflow with robust 2bLCA computation and fast LCA computation in O(N LogN); * Support reading .bz2 archives for createdb; * Createdb can turn multiple fasta files into one database now; * Extend prefilter score range to improve order of best hits after prefiltering.; * Automatically split input sequence set based on system RAM in kmermatcher. Linclust can now run with less memory.; ; ## Performance Regressions Fixed; * Fixed underperforming iterative-sequence-profile search without a precomputed index table. ## Breaking Command Line Interface Changes; * Iterative-non-profile-search --sens-step-size changed to --sens-steps (Number of Iterations) (Does not break nested workflows anymore). ## Others; * Query coverage mode (--cov-mode 2) for searching; * Clustering is now the same between single and multi threaded version; * Bug fixes in rescorediagonal; * Speedup of kmermatcher; * Speedup and memory reduction of swapresults; * Many usability improvements. ## Devlopers; * MMseqs2 can now be included in framework mode to subprojects,MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/1-c7a89:1023,usab,usability,1023,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/1-c7a89,1,['usab'],['usability']
Usability,"ProtKB 	Aminoacid 	 yes	https://www.uniprot.org/help/uniprotkb; - UniProtKB/TrEMBL 	Aminoacid 	 yes	https://www.uniprot.org/help/uniprotkb; - UniProtKB/Swiss-Prot	Aminoacid 	 yes	https://uniprot.org; - NR 	Aminoacid 	 -	https://ftp.ncbi.nlm.nih.gov/blast/db/FASTA; - NT 	Nucleotide	 -	https://ftp.ncbi.nlm.nih.gov/blast/db/FASTA; - PDB 	Aminoacid 	 -	https://www.rcsb.org; - PDB70 	Profile 	 -	https://github.com/soedinglab/hh-suite; - Pfam-A.full 	Profile 	 -	https://pfam.xfam.org; - Pfam-A.seed 	Profile 	 -	https://pfam.xfam.org; - eggNOG 	Profile 	 -	http://eggnog5.embl.de; - Resfinder 	Nucleotide	 -	https://cge.cbs.dtu.dk/services/ResFinder; - Kalamari 	Nucleotide	 yes	https://github.com/lskatz/Kalamari; ```; * `(easy-)search --slice-search` is now usable. Slice search finds all hits that fulfill the alignment criteria while using only as much disk space as defined by `--disk-space-limit`; * `createdb` and the various `easy-` workflows learned to read query input from `STDIN`; * `taxonomyreport` learned to display the summarized taxonomy result with Krona; * new `filtertaxseqdb` module for filtering sequence DBs with taxonomy information according to provided taxa; * `--taxon-list` parameter understands expressions. E.g. get all bacterial and human sequences `--taxon-list ""2||9606""`; * `easy-search` and `convertalis` can now output taxonomic information using `--format-output`; ```; taxid Taxonomic identifier; taxname Taxon Name; taxlineage Taxonomic lineage; ```; * speed up in `(easy-)cluster/linclust` by improving k-mer extraction; * MMseqs2 consistently creates .source and .lookup files to match from which input file a sequence came from; E.g.: `mmseqs createdb input1.fa input2.fa seqDB` each sequence in seqDB can tell if it came from `input1.fa` or `input2.fa`; * `createdb` learned to index an existing (single-line-seq per entry) FASTA file without copying the FASTA content to a new database; * `align` and `rescorediagonal` learned to align circular sequences; * ",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c:2322,learn,learned,2322,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c,2,['learn'],['learned']
Usability,"aking Changes; * MMseqs2 now saves a lot on IO by not merging result datafiles; There is still a single `.index` file, but the corresponding data files are split into multiple parts (as many as threads were used previously); * MMseqs2 now uses the VTML80 [1,2] substitution matrix to speed up the prefiltering (changeable by `--seed-sub-mat`), the final alignment is still computed with the Blosum62 (still changeable by `--sub-mat`); * All databases have now a `.dbtype` file; * MMseqs2 Docker image is now based on Debian instead of Alpine; * Changed Orf header format to be more space efficent. The new format is now `orignIdentifer startPos(-/+)len flag`; * `prefilter` returns ungapped-alignment scores instead of e-values ; * `createindex` the file extention is now `.idx` instead of the previous `.[s]k[6,7]` format. ## Features; * Support for tblastx-style nucl-nucl translated searches; `mmseqs search nuclDB1 nuclDb2 aln tmp --search-mode 2`; * Support for nucleotide searches; `mmseqs search nuclDB1 nuclDb2 aln tmp --search-mode 3`; * `convertalis` has learned to return SAM formatted output (preview); * Database can be compressed by applying [zstd](https://github.com/facebook/zstd) on each entry (`--compressed 1`); * Also added `compress` and `decompress` modules; * `rbh` workflow for reciprocal best hit searches added ; * `linclust` can now cluster nucleotide sequences on both forward and reverse strand; * Added `linsearch`, a lightning fast search for proteins and nucleotide sequences (preview; easy workflow variant `easy-linsearch` also added); * `createlinindex` computes an index for `linsearch`; * `taxonomy` uses `--orf-start-mode 1` to annotate more sequences ; * Added approx. 2bLCA to speed up computation, this is now the new default. The old mode can be turned on by `--lca-mode 2`; * `createdb` recognizes sequences containing Uracil as DNA sequences; * `createdb` is now faster through speeding up its shuffle operations ; * `view` module to view single entry in an",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/8-fac81:1392,learn,learned,1392,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/8-fac81,1,['learn'],['learned']
Usability,"e to view single entry in an MMseqs2 database; * `align` module has learned `--min-aln-len` parameter to filter by minimal alignment length; * Alignment modules (`rescorediagonal`, `align`) can align longer sequences now (not limited to 2^15 length); * Input sequences can now be softmasked (lower letter masking) instead of only hard masking (replacing with X) ``--mask-lower-case`. The masking only applies to the prefilter stages `kmermatcher` or `prefilter` and can be combined with `--mask`; * `filterdb` has learned `--filter-expression` parameter and mode that allows filtering by simple mathematical expressions; * `alignbykmer` can be used for nucleotide searches; * MMseqs2 _did-you-mean_ functionality gives better suggestions; * MMseqs2 does not repeat the whole parameter list for each submodule call anymore. ## Bugs; * Default parameters of `map` workflow are now set correctly; * Some modules were using the wrong coverage parameter; * Sliced profile search was losing high E-value hits; * Sliced profile search is now stable; * Profile-Sequence alignment E-values where slightly too high; * `result2msa` was crashing with profiles on the target side; * `result2msa` should not crash with `--alow-deletion` anymore; * Some parameters were never visible (with or without `-h`); * Various issues with MPI were resolved. ## Developers; * Continous integration enforces no compile warnings now; * Continous integration now tries to build AArch64 builds with Docker and Qemu; * We added a first draft of our [developer guide](https://github.com/soedinglab/MMseqs2/wiki/MMseqs2-Developer-Guide) to the wiki. ## References; [1] Müller T & Martin Vingron, Modeling Amino Acid Replacement, J Comput Biol. 2000;7:761–76. doi: 10.1089/10665270050514918. [2] Müller T, Spang R, Vingron M. Estimating amino acid substitution models: a comparison of Dayhoff's estimator, the resolvent approach and a maximum likelihood method. Mol Biol Evol. 2002;19:8–13. doi: 10.1093/oxfordjournals.molbev.a003985",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/8-fac81:3830,guid,guide,3830,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/8-fac81,1,['guid'],['guide']
Usability,"eatelinindex` computes an index for `linsearch`; * `taxonomy` uses `--orf-start-mode 1` to annotate more sequences ; * Added approx. 2bLCA to speed up computation, this is now the new default. The old mode can be turned on by `--lca-mode 2`; * `createdb` recognizes sequences containing Uracil as DNA sequences; * `createdb` is now faster through speeding up its shuffle operations ; * `view` module to view single entry in an MMseqs2 database; * `align` module has learned `--min-aln-len` parameter to filter by minimal alignment length; * Alignment modules (`rescorediagonal`, `align`) can align longer sequences now (not limited to 2^15 length); * Input sequences can now be softmasked (lower letter masking) instead of only hard masking (replacing with X) ``--mask-lower-case`. The masking only applies to the prefilter stages `kmermatcher` or `prefilter` and can be combined with `--mask`; * `filterdb` has learned `--filter-expression` parameter and mode that allows filtering by simple mathematical expressions; * `alignbykmer` can be used for nucleotide searches; * MMseqs2 _did-you-mean_ functionality gives better suggestions; * MMseqs2 does not repeat the whole parameter list for each submodule call anymore. ## Bugs; * Default parameters of `map` workflow are now set correctly; * Some modules were using the wrong coverage parameter; * Sliced profile search was losing high E-value hits; * Sliced profile search is now stable; * Profile-Sequence alignment E-values where slightly too high; * `result2msa` was crashing with profiles on the target side; * `result2msa` should not crash with `--alow-deletion` anymore; * Some parameters were never visible (with or without `-h`); * Various issues with MPI were resolved. ## Developers; * Continous integration enforces no compile warnings now; * Continous integration now tries to build AArch64 builds with Docker and Qemu; * We added a first draft of our [developer guide](https://github.com/soedinglab/MMseqs2/wiki/MMseqs2-Developer-Guide",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/8-fac81:2814,learn,learned,2814,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/8-fac81,2,"['learn', 'simpl']","['learned', 'simple']"
Usability,"filtering sequence DBs with taxonomy information according to provided taxa; * `--taxon-list` parameter understands expressions. E.g. get all bacterial and human sequences `--taxon-list ""2||9606""`; * `easy-search` and `convertalis` can now output taxonomic information using `--format-output`; ```; taxid Taxonomic identifier; taxname Taxon Name; taxlineage Taxonomic lineage; ```; * speed up in `(easy-)cluster/linclust` by improving k-mer extraction; * MMseqs2 consistently creates .source and .lookup files to match from which input file a sequence came from; E.g.: `mmseqs createdb input1.fa input2.fa seqDB` each sequence in seqDB can tell if it came from `input1.fa` or `input2.fa`; * `createdb` learned to index an existing (single-line-seq per entry) FASTA file without copying the FASTA content to a new database; * `align` and `rescorediagonal` learned to align circular sequences; * `align` exposes the z-drop parameter of its Banded Nucleotide alignment algorithm; * `reverseseq` learned to reverse profiles; * `filterdb` can filter rows with value within given percentage of first row; * new `aggragatetax` module to assign a taxonomic label to contigs according to the fragments matched on the contig; * Adjusting `--max-seq-len` is not required anymore, MMseqs2 automatically increases the length now.; * MMseqs2 on Cygwin/Windows uses `nedmalloc` as its memory allocator now and does not massively slow down due to lock contention; * new `tar2db` module to efficiently transform content of `tar` archives to MMseqs2 databases. ## Bug fixes; * `createindex` would create corrupted indices for profile target databases; * `rbh` workflow would create its result DB at an unexpected (wrong) location; * `(easy)-taxonomy --lca-mode 3` (Approx. LCA) was aligning invalid sequences in the second iteration and producing bad results; * `lca` (and `(easy)-taxonomy`) add empty columns for unclassifed sequences to be valid TSVs; * `kmermatcher` uses xxhash for hashing now (faster) ; * `kmerma",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c:3181,learn,learned,3181,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c,3,['learn'],['learned']
Usability,"has learned to return SAM formatted output (preview); * Database can be compressed by applying [zstd](https://github.com/facebook/zstd) on each entry (`--compressed 1`); * Also added `compress` and `decompress` modules; * `rbh` workflow for reciprocal best hit searches added ; * `linclust` can now cluster nucleotide sequences on both forward and reverse strand; * Added `linsearch`, a lightning fast search for proteins and nucleotide sequences (preview; easy workflow variant `easy-linsearch` also added); * `createlinindex` computes an index for `linsearch`; * `taxonomy` uses `--orf-start-mode 1` to annotate more sequences ; * Added approx. 2bLCA to speed up computation, this is now the new default. The old mode can be turned on by `--lca-mode 2`; * `createdb` recognizes sequences containing Uracil as DNA sequences; * `createdb` is now faster through speeding up its shuffle operations ; * `view` module to view single entry in an MMseqs2 database; * `align` module has learned `--min-aln-len` parameter to filter by minimal alignment length; * Alignment modules (`rescorediagonal`, `align`) can align longer sequences now (not limited to 2^15 length); * Input sequences can now be softmasked (lower letter masking) instead of only hard masking (replacing with X) ``--mask-lower-case`. The masking only applies to the prefilter stages `kmermatcher` or `prefilter` and can be combined with `--mask`; * `filterdb` has learned `--filter-expression` parameter and mode that allows filtering by simple mathematical expressions; * `alignbykmer` can be used for nucleotide searches; * MMseqs2 _did-you-mean_ functionality gives better suggestions; * MMseqs2 does not repeat the whole parameter list for each submodule call anymore. ## Bugs; * Default parameters of `map` workflow are now set correctly; * Some modules were using the wrong coverage parameter; * Sliced profile search was losing high E-value hits; * Sliced profile search is now stable; * Profile-Sequence alignment E-values where sl",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/8-fac81:2368,learn,learned,2368,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/8-fac81,1,['learn'],['learned']
Usability,"inclust` and `easy-cluster` workflows can take any number of query FASTA or FASTQ files; * MMseqs2 validates database types. It will exit with an error message on wrong input, where it would previously crash; * `kmermatcher` reports the diagonal with the most k-mer matches; * `kmermatcher` scales the number of k-mers with sequence length (`--kmer-per-seq-scale`); * `rescorediagonal` got two new rescore modes, one for global alignment scoring and one for scoring a quasi global alignment fullfilling a local window criterion ; * Peak memory usage for reading in very large databases is greatly reduced. 128GB nodes should comfortably be able to deal with up to the maximum of 4.2 billion entries ; * Parameters taking byte values support syntax with a SI suffix (e.g., `--split-memory-limit 64G`); * Nucleotide substitution matrices should be user definable ; * Taxonomy report is compatible with [Pavian](https://github.com/fbreitwieser/pavian). Thanks to Florian Breitwieser!; * `cluster` workflow learned a reassignment mode `--cluster-reassign`. This mode corrects errors that occured because of cascaded clustering; * `extractorfs` can directly translate a nucleotide ORF to an amino acid sequence; * `result2stats` can write TSV files; * `createsubdb` supports softlinks instead of always hard copying the whole file to disk; * reduced harddisk space usage for all cascaded clusterings ; * `easy-taxonomy` reports the top hit alignment as a separate output file with the suffix `tophit_aln`; * `createindex` checks if an index needs to be recomputed were improved. ## Bug fixes; * MMseqs2 did not compile on FreeBSD. Please let us know about free continuous integration options to make sure it will keep working in the future; * `proteinaln2nucl` could return wrong coordinates; * `apply` would deadlock when running with multiple threads; * MPI searches are way more reliable, there were various issues around merging the separate results. MPI logic of split and merge is also integrated int",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c:2955,learn,learned,2955,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/10-6d92c,1,['learn'],['learned']
Usability,"lated/translated search) to `createindex`; * Add `convertalis --format-mode 3` HTML output based on MMseqs2 app (app.mmseqs.com); * Improve memory management in `result2msa` and `result2profile` modules; * Add `msa2result` module to create an alignment result db from MSAs; * Add `filterresult` to slim down result dbs with pairwise HHblits filtering #316; * Add `--kmers-per-sequence-scale` to `linsearch` to extract a k-mer fraction instead of a fixed count ; * Add a random integer to `--local-tmp` path to avoid race conditions if multiple MMseqs2 happen on the same machine; * Add `--max-seqs` to `ungappedprefilter`; * Add `--tax-lineage-mode 2` parameter to print numeric taxids. ## Bugs fixed; * `rbh` workflow was broken due to issues with `filterdb`; * Fix `-a` in RBH search to show alignments; * Fix PDB70 database creation in `databases`; * Fix aria2c download support; * Fix memory issues and MPI in kmermatcher ; * Fix memory issues in `extractorfs` when using AVX2 ; * Fix `--cluster-reassign` to respect `--cov-mode`; * Set-cover supports up to 2^32 sequences (previously crashed with more than 2^31); * Exit correctly if there is not have enough disk space instead of crashing in the next module; * Fix `prefilter` order instability when searching very redundant databases; * Correctly parse keys from data files in `filterdb --filter-file`, this was causing instability in `linsearch`; * Allow overwriting string parameters with empty strings; * Fix ASAN issue in `extractorf` when using AVX2; * Microtar would try to seek backwards constantly resulting in horrible gzip read performance; * Avoid lookup writing to corrupt memory if an accession is too long; * Fix various inconsistencies and usability issues in `alignall`:; - `--alignment-mode` inconsistent with `align` module; - `--add-backtrace` did not do anything; * Fix restart of clusterings using reassignment `cluster --cluster-reassign`; * Fix createdb did not correctly read gz/bzip files with `--createdb-mode 1` #323",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/12-113e3:3609,usab,usability,3609,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/12-113e3,1,['usab'],['usability']
Usability,"lts are placed in a subfolder based on the hash of all paths and parameters. ## Performance Regressions Fixed; * Fixed regression when multiple mmseqs instances were running at the same time. ## Breaking Command Line Interface Changes; * Incremented index version, old precomputed indices have to be regenerated; * New Profile format, databases generated through `convertprofiledb` and `msa2profile` have to be regenerated; * Clustering workflow is now by default cascaded. We replaced the `--cascaded` flag with `--single-step-clustering`; * Max sequence length of 32768 is now actually validated and enforced; * Each sequence database has now a dbtype file (AA=0, NUC=1, PROFILE=2); * extractorf was reworked:; * `--skip-incomplete` was split into two parameters `--contig-start-mode` and `--contig-end-mode`; * `--longest-orf` was reworked into `--orf-start-mode` ; * removed `--extend-min` parameter. ## Others; * Factor four times faster clustering workflow; * Improve speed of `linclust` by a factor of two; * Remove 'X' from prefilter index (reduces memory and improves speed at the same sensitivity); * Fix bugs for Query coverage mode (`--cov-mode 2`) ; * Clustering is now the same between single and multi threaded version; * Speedup of kmermatcher; * Fix bug in Clust hash. It can now cluster to 1.0 sequence identity; * Improve target profile search, set max-seqs to infinite for alignments. ; * Improve speed of `align` if prefilter result fit into memory; * Many usability improvements; * Improved suggestions of bash completion; * Expert modules are hidden by default, use `-h` flag to show everything; * Speed up `mergeclusters` by a lot; * Fix sequence identity print out bug if the id is less than 10%; * MPI Runner variable can now correctly contain further parameters (RUNNER=""mpirun -np 4"" was not working); * Enforcing GCC 4.6 compatibilty in our continous integration. ## Devlopers; * MMseqs2 can now be included in framework mode to subprojects; * DBReader has a SHUFFLE mode",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/2-23394:2655,usab,usability,2655,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/2-23394,1,['usab'],['usability']
Usability,"mon databases. ; Supported databases:; ```; Name 	Type 	Taxonomy	Url; - UniRef100 	Aminoacid 	 yes	https://www.uniprot.org/help/uniref; - UniRef90 	Aminoacid 	 yes	https://www.uniprot.org/help/uniref; - UniRef50 	Aminoacid 	 yes	https://www.uniprot.org/help/uniref; - UniProtKB 	Aminoacid 	 yes	https://www.uniprot.org/help/uniprotkb; - UniProtKB/TrEMBL 	Aminoacid 	 yes	https://www.uniprot.org/help/uniprotkb; - UniProtKB/Swiss-Prot	Aminoacid 	 yes	https://uniprot.org; - NR 	Aminoacid 	 -	https://ftp.ncbi.nlm.nih.gov/blast/db/FASTA; - NT 	Nucleotide	 -	https://ftp.ncbi.nlm.nih.gov/blast/db/FASTA; - PDB 	Aminoacid 	 -	https://www.rcsb.org; - PDB70 	Profile 	 -	https://github.com/soedinglab/hh-suite; - Pfam-A.full 	Profile 	 -	https://pfam.xfam.org; - Pfam-A.seed 	Profile 	 -	https://pfam.xfam.org; - eggNOG 	Profile 	 -	http://eggnog5.embl.de; - Resfinder 	Nucleotide	 -	https://cge.cbs.dtu.dk/services/ResFinder; - Kalamari 	Nucleotide	 yes	https://github.com/lskatz/Kalamari; ```; * `(easy-)search --slice-search` is now usable. Slice search finds all hits that fulfill the alignment criteria while using only as much disk space as defined by `--disk-space-limit`; * `createdb` and the various `easy-` workflows learned to read query input from `STDIN`; * `taxonomyreport` learned to display the summarized taxonomy result with Krona; * new `filtertaxseqdb` module for filtering sequence DBs with taxonomy information according to provided taxa; * `--taxon-list` parameter understands expressions. E.g. get all bacterial and human sequences `--taxon-list ""2||9606""`; * `easy-search` and `convertalis` can now output taxonomic information using `--format-output`; ```; taxid Taxonomic identifier; taxname Taxon Name; taxlineage Taxonomic lineage; ```; * speed up in `(easy-)cluster/linclust` by improving k-mer extraction; * MMseqs2 consistently creates .source and .lookup files to match from which input file a sequence came from; E.g.: `mmseqs createdb input1.fa input2.fa seqDB` each seque",MatchSource.RELEASES,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c:2131,usab,usable,2131,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/releases/tag/11-e1a1c,1,['usab'],['usable']
