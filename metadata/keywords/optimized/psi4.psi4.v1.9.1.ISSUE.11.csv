quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Performance,"Object_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #54 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #55 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286b70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #56 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32d40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #57 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b32d40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #58 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #59 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #60 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11286ca0, callable=0x7fac0e363370, tstate=0x55ff9515e050); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #61 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11286d30) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #62 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #63 0x000055ff905b2187 in import_find_and_load (abs_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:16564,optimiz,optimized,16564,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"Object_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #79 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #80 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287430, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #81 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6eae0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #82 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6eae0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #83 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #84 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #85 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #86 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; --Type <RET> for more, q to quit, c to continue without paging--; #87 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112875e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #88 _PyEval_EvalFrameDefa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:21462,optimiz,optimized,21462,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"Of all the possible explanations I can think of, that makes the most sense to me. Do you know if there are any published benchmarks for specific open source scientific computing packages such as psi4, pyscf, Qiskit, ect. that might enlighten the performance of these machines for specific applications? That might be interesting to see. It's a shame that most of the information regarding the performance of these machines is almost entirely in the context of non-scientific computing workloads.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-956518612:246,perform,performance,246,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956518612,2,['perform'],['performance']
Performance,"Oh since I mentioned gradients in the title. When I was running some optimizations, gradient behavior did match that of the energy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897#issuecomment-632693068:69,optimiz,optimizations,69,https://psicode.org,https://github.com/psi4/psi4/issues/1897#issuecomment-632693068,1,['optimiz'],['optimizations']
Performance,"Oh, I bet that's it. Because the BLAS/LAPACK API is standard, loading psi4 probably clobbers the namespace occupied by MKL's dependencies. If true, numpy is really calling the system BLAS instead of MKL, and perhaps the instability resides in there? Is there a way we can link psi4 to MKL in the conda build, to test this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311736829:62,load,loading,62,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311736829,1,['load'],['loading']
Performance,"Ok so I think we are reading garbage from `PSIDATADIR/quadratures/1_x/R_avail.bin`:. On amd64 (my notebook):. ```; 588	 R_avail_file.read((char *)R_availp, nR * sizeof(double));; (gdb) ; 590	 auto err_table = std::make_shared<Matrix>(""Error Table (nR x nk)"", nR, nk);; (gdb) p *R_availp; $8 = 2; ```. And on s390x:. ```; 588 R_avail_file.read((char *)R_availp, nR * sizeof(double));; (gdb) ; 590 auto err_table = std::make_shared<Matrix>(""Error Table (nR x nk)"", nR, nk);; (gdb) p *R_availp; $21 = 3.1620201333839779e-322; ```. Not sure how this results in the exception (`indR` is optimized out), but there surely is a problem here. Is there anything odd with the way it is reading that? This looks a bit fragile to me:. ```; R_avail_file.read((char *)R_availp, nR * sizeof(double));; ```. OK, I guess the problem is that we are reading binary data, but there's no provision for big/little endian conversion, so it just gets garbage on other-endian architectures. Those two `*.bin` files in `quadratures/` are rather small, couldn't they be converted to text or what is their purpose?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451697801:582,optimiz,optimized,582,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451697801,1,['optimiz'],['optimized']
Performance,"Ok yes Daniel was right, it was an error writing to file 32 not file 180 (I was misled because the last thing in output.dat was a line about file 180). If nmo increases, the problem can be fixed by just replacing file32 each time SCF finishes. I've implemented this and all test cases pass. If nmo decreases, the scf guess might fail, but in a couple of test cases it seems ok. I'm checking in these changes and adding a new test case that checks what happens when nmo increases during a geometry optimization. Pushing this to the psiworkweek branch but will incorporate into public branch in a few days.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/32#issuecomment-38125711:497,optimiz,optimization,497,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-38125711,1,['optimiz'],['optimization']
Performance,"Ok, @amjames, I'm glad to hear that it's behaving according to my expectations. I wonder if setting `CMAKE_PREFIX_PATH` is still an alternate solution. The thing is, CMake detects GCC libraries implicitly, so it's hard to `rpath` them. . Ugg, python detection. That issue remains, I presume. That's interesting that `CMAKE_PREFIX_PATH` will help python detection; I had never tried that. I agree, there should be some advice to just set all three python variables, if you're going to set any. And an example for anaconda python. You're welcome to add such to [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41), but try to stay compact. Otherwise, I'll add something later. A lot of these python detection problems should be eliminated by The Inversion, because we won't be _embedding_ python, just _linking_, so python can use its own `python-config` tech to load its library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249699749:880,load,load,880,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249699749,1,['load'],['load']
Performance,"Ok, I didn't get the redirect on Chrome until I cleared the cache, but now it works nicely. Firefox, too. I think redirect 'latest' as well as 'master', then that bullet's done, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/112#issuecomment-121372040:60,cache,cache,60,https://psicode.org,https://github.com/psi4/psi4/issues/112#issuecomment-121372040,1,['cache'],['cache']
Performance,"Ok, I think I understand things better now.; * pre #2377, the windows build seemed to be getting `-march=native`. clang-cl does seem to understand `march` (https://reviews.llvm.org/D51806) so it accepts the flag. But it probably doesn't understand `native` (https://lists.llvm.org/pipermail/cfe-commits/Week-of-Mon-20150629/132028.html). Also see quote below from https://stackoverflow.com/a/62493711 . So we were probably getting lucky about building on AVX and supposedly fixing the Win conda binary compatibility problem. > And nothing in MSVC has any support for making binaries optimized to run on the computer you build them on. That makes sense, it's designed for a closed-source binary-distribution model of software development. * nevertheless, from an independent compile someone reported on the forum Win compatibility thread, it does seem that arch AVX, not AVX2, is the solution.; * enter #2377 that probably only changed the situation to me reading the code, not at all to the build product since the `ENABLE_XHOST` was picking up `march=native`.; * me adding `-DCMAKE_CXX_FLAGS=/arch:AVX` in the first commit of this PR led to the unused arg warning below (after also turning on printing for Ninja). I now believe the warning was triggered because clang-cl recognizes march (quote below from link above), doesn't act on it, but does drop arch. At one point, I thought the unused flag was because it was presented in the wrong format, but a section in the clang-cl manual gives a list, and arch is fine (https://clang.llvm.org/docs/UsersManual.html#clang-cl).; > Yes, indeed. The code in clang/lib/Driver/ToolChains/Arch/X86.cpp makes that –march is always parsed, leaving out /arch unused, no matter in which order they appear.; ```; [1/1263] C:\PROGRA~1\LLVM\bin\clang-cl.exe -TP -DUSING_LAPACK_MKL -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include\e",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2384#issuecomment-997100036:583,optimiz,optimized,583,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-997100036,1,['optimiz'],['optimized']
Performance,"Ok, I think this all goes back to the physconst update that introduced a discontinuity in the reference for two points: (wait for full load and jump) https://github.com/psi4/psi4/commit/64ea27fc1afc8fbcaf87eb03304eb8b40e99bf23#diff-4fd9a0a7922adf8bb30dbcc1278ab5d0R12 and following line (6.2 and 6.3 occ). Going to reset the reference unless @robparrish says nay. Also going to set non-zero for 6.5 occ.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/129#issuecomment-123487770:135,load,load,135,https://psicode.org,https://github.com/psi4/psi4/issues/129#issuecomment-123487770,1,['load'],['load']
Performance,"Ok, I've had a chance to poke around a bit and I have found that I can reproduce the issue on an E5-2680 v3 chip, so your hunch that this affects all Haswells is likely correct. I found that putting `#pragma optimize("""", off )` immediately before `OrientationMgr::OrientationMgr(std::shared_ptr<Molecule> mol)` on 3389 and `#pragma optimize("""", on ) ` after that function on line 3418 fixes the issue. I have a very slight preference for this approach because it's unambiguous, but I'm also fine to go with zeroing offending elements out. Thoughts anybody? Either way, this is a very important fix, and we should either merge the current PR or my proposed solution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/678#issuecomment-293376301:208,optimiz,optimize,208,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-293376301,2,['optimiz'],['optimize']
Performance,"Ok, it looks like I didn't read the manual closely enough; the behavior is described on the 'Geometry Optimization' page. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1947#issuecomment-655841373:102,Optimiz,Optimization,102,https://psicode.org,https://github.com/psi4/psi4/issues/1947#issuecomment-655841373,1,['Optimiz'],['Optimization']
Performance,"Ok, so in the `ijij` case I see this difference between s390 and amd64 when parsing the third character, also note the different length and content of `labels`:. amd64:. ```; Breakpoint 3, get_combined_dims_view (labels=0x7fffffffcd20 ""ij\376\376"", iop=0, op=<optimized out>) at numpy/core/src/multiarray/einsum.c.src:2114; 2114	 int label = (signed char)labels[idim];; (gdb) n; 2116	 if (label < 0) {; (gdb) p label; $43 = -2; (gdb) p idim; $44 = 3; (gdb) p labels[idim]; $45 = -2 '\376'; (gdb) p labels; $46 = 0x7fffffffcd20 ""ij\376\376""; ```. s390x:. ```; Breakpoint 7, get_combined_dims_view (labels=0x3ffffffcdf8 ""ij\376\377\375\377\061\340"", iop=0, op=<optimized out>) at numpy/core/src/multiarray/einsum.c.src:2114; 2114 int label = (signed char)labels[idim];; (gdb) n; 2116 if (label < 0) {; (gdb) p label; $278 = -1; (gdb) p idim; $279 = 3; (gdb) p labels[idim]; $280 = 255 '\377'; (gdb) p labels ; $281 = 0x3ffffffcdf8 ""ij\376\377\375\377\061\340""; ```. If I then go on on s390 by mangling the `label` variable, it exits fine. ```; (gdb) set variable label = -2; (gdb) c; Continuing.; 47.048397425357216; [Inferior 1 (process 26977) exited normally]; ```. So I guess the `int label = (signed char)labels[idim];` is to fault here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1465#issuecomment-452063263:260,optimiz,optimized,260,https://psicode.org,https://github.com/psi4/psi4/issues/1465#issuecomment-452063263,2,['optimiz'],['optimized']
Performance,"Ok, the only non-invasive way I see around this is the below in the main CM file (change primary language as needed):. ```; if(CMAKE_CXX_COMPILER_ID MATCHES Intel); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization (with MSVC, it enables AVX2 instructions)"" ON; ""-xHost"" ""-march=native"" ""/arch:AVX2""); else(); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization (with MSVC, it enables AVX2 instructions)"" ON; ""-march=native"" ""-xHost"" ""/arch:AVX2""); endif(); ```. For Intel, `-march=native` might be a near approximation to `-xHost`, but I'd rather use the latter official flag.; Do you want to try this out for Libxc, @susilehtola?. I observed another problem that when conda compilers are present and `-DCMAKE_CXX_COMPILER=icpc` passed, that the `-fno-plt` set in the envvar `CXXFLAGS` by conda env activation was unsupported by Intel and so triggered all three `ENABLE_XHOST` options to fail unless `CXXFLAGS=` explicitly cleared/set beforehand. I had deliberately _not_ made psi4 CMake dependent on envvars, but it looks like CMake started doing that in 3.10, hmpf. https://cmake.org/cmake/help/v3.10/manual/cmake-env-variables.7.html#manual:cmake-env-variables(7)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2023#issuecomment-717371854:224,optimiz,optimization,224,https://psicode.org,https://github.com/psi4/psi4/issues/2023#issuecomment-717371854,2,['optimiz'],['optimization']
Performance,"Okay, @loriab: I have a pretty small fix for this that's much less invasive than a proper grammer. It will first section the input PSIthon script into two classes of segments: those which are preserved exactly (string literals and comments) and those in which substitutions can take place (everything else), and then only perform the PSIthon -> Python replacements on seconds in the second category. PR coming.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/655#issuecomment-287840923:322,perform,perform,322,https://psicode.org,https://github.com/psi4/psi4/issues/655#issuecomment-287840923,1,['perform'],['perform']
Performance,"Okay, I think (hope) I sorted it out. My test was checking the last computed energy, not the last converged IRC point. The latter should be more robust. The mechanism that checks for a minimum runs on the first step of the next IRC-point optimization -- that was the energy being compared. Since the gradient is small so near the minimum, I guess it isn't surprising that that step direction isn't well-defined. My changes are [here](https://github.com/avcopan/psi4/commit/ab07fd3e1c5242ca58bba12230ce7f1077392102). If tests pass on my machine and you approve (@loriab), I'll do a pull request.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/290#issuecomment-189916188:238,optimiz,optimization,238,https://psicode.org,https://github.com/psi4/psi4/issues/290#issuecomment-189916188,1,['optimiz'],['optimization']
Performance,"Okay, here are some other considerations that must be accounted for when constructing the correct DFJK object:. 1. PackedDFJK if do_wK_ else SymmDFJK; 2. SymmDFJK if SymmDFJK->AO_core() else PackedDFJK. Note that the above two will require knowledge of `do_wK_` and `doubles_` **in the JK constructor**. 3. PackedDFJK if procedure relies intrinsically on old DFJK else SymmDFJK. (3.) might be tricky. `DFJK` used `df_ints_io_` to prepare, save, and load the 3-center integrals. Some procedures in Psi4 intrinsically rely on being able to load files produced by DFJK. So not only will we need avoid using SymmDFJK in those procedures, but we might also need to do so in preemptive procedures (such as SCF) so that the files can be properly prepared for use later on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-382594587:449,load,load,449,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-382594587,2,['load'],['load']
Performance,"On Ubuntu, I was able to get Psi4 (with CheMPS2 v1.5) and CheMPS2 (master; separate) to link when I disabled the link-time optimizer option in CheMPS2's CMakeLists.txt. Looks like the option is not fully supported on Ubuntu. ```; diff --git a/CMakeLists.txt b/CMakeLists.txt; index 868a694..9f5d2b2 100644; --- a/CMakeLists.txt; +++ b/CMakeLists.txt; @@ -46,10 +46,10 @@ if (HAS_IPO); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -ipo""); endif (HAS_IPO). -check_cxx_compiler_flag (-flto HAS_FLTO); -if (HAS_FLTO); - set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); -endif (HAS_FLTO); +#check_cxx_compiler_flag (-flto HAS_FLTO); +#if (HAS_FLTO); +# set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); +#endif (HAS_FLTO). if (ENABLE_GENERIC); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -static-libstdc++ -static-libgcc""); ```. I came to this conclusion when I tried to look into libchemps2.a:. ```; % nm libchemps2.a| grep appendNew; nm: CASSCF.cpp.o: plugin needed to handle lto object; nm: CASSCFdebug.cpp.o: plugin needed to handle lto object; nm: CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; nm: ConvergenceScheme.cpp.o: plugin needed to handle lto object; nm: Correlations.cpp.o: plugin needed to handle lto object; nm: Davidson.cpp.o: plugin needed to handle lto object; nm: DIIS.cpp.o: plugin needed to handle lto object; nm: DMRG.cpp.o: plugin needed to handle lto object; nm: DMRGmpsio.cpp.o: plugin needed to handle lto object; nm: DMRGoperators.cpp.o: plugin needed to handle lto object; nm: DMRGSCFindices.cpp.o: plugin needed to handle lto object; nm: DMRGSCFintegrals.cpp.o: plugin needed to handle lto object; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/264#issuecomment-185260019:123,optimiz,optimizer,123,https://psicode.org,https://github.com/psi4/psi4/issues/264#issuecomment-185260019,1,['optimiz'],['optimizer']
Performance,"On another issue, the buildtime configuration now seems to ask for LIBINT_OPT_AM, which AFAIK is the maximum angular momentum for which specially optimized code is generated. It doesn't ask a value for LIBINT_MAX_AM at all, which determines the maximum angular momentum for which evaluation routines are generated. In Ed's upstream release of libint, LIBINT_OPT_AM defaults to (LIBINT_MAX_AM/2 + 1). I believe the scripts should be adjusted to make it possible to set OPT_AM and MAX_AM separately, since a large value of OPT_AM generates huge code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/180#issuecomment-139102907:146,optimiz,optimized,146,https://psicode.org,https://github.com/psi4/psi4/issues/180#issuecomment-139102907,1,['optimiz'],['optimized']
Performance,"On issue #1861 , reading serialized wavefunctions for CASCI/detci computations was solved. However, I wonder if it was also solved for CASSCF calculations, as I get the following error when performing a CASSCF calculation with a given input wavefunction. Here is an example:. ```; import psi4; molecule_string = """"""; O 1.56850 0.10589 0.00001; N -1.39559 -0.02156 0.00004; H -1.62981 0.96110 -0.10622; H -1.86277 -0.51254 -0.75597; H -1.83355 -0.33077 0.86231; H 0.60674 -0.03396 -0.00063; H 1.94052 -0.78000 0.00022; """"""; add_input = ""\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molecule_string + add_input); N_active = 11 # Define the total number of active MOs.; N_frozen = 4 # Define the number of frozen occupied MO; N_virtual = 30 # Define the total number of virtual MOs that will be discarded; psi4.set_options({ 'ACTIVE' : [ N_active ],\; 'FROZEN_DOCC' : [ N_frozen ],\; 'FROZEN_UOCC' : [ N_virtual],\; 'DIAG_METHOD' : 'DAVIDSON',\; 'CI_MAXITER' : 200\; }). # assuming you have stored you scf_wfn into water-ammonia.npy:; original_wfn = psi4.core.Wavefunction.from_file(""water-ammonia""). print(""HF energy:"",original_wfn.energy()); CASCI_energy = psi4.energy('fci', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASCI energy:"",CASCI_energy); CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASSCF :"",CASSCF_energy); ```. This outputs:; ```; HF energy : -130.74589276437956; CASCI energy : -130.7730891288199; ```. and then the error:; ```; ==> Setting up CI strings <==. There are 462 alpha and 462 beta strings; The CI space requires 213444 (2.13E+05) determinants and 1 blocks. ==> Setting up MCSCF integrals <==. Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1871:190,perform,performing,190,https://psicode.org,https://github.com/psi4/psi4/issues/1871,1,['perform'],['performing']
Performance,"One of the root causes for this that you might be able to clean up is that there are two different ""naming conventions"" for custom basis sets.; - The names used as keys in `qcdb.libmintsbasisset.basishorde` are `LOW` and `HIGH`.; - Once the basis set is instantiated, the `name()` of it in C++ is more like `file /path/to/sto-3g.gbs` or `file /path/to/cc-pvdz.gbs`. That's what's behind the trickiness here, because file 180 that we're loading back up contains the C++ name, but to retrive it from the horde, we need the other name. For built-in basis sets, this is done with [by just some fragile string manipulations](https://github.com/psi4/psi4/blob/9d1564e67837bbf7f348c1600aa2c353457671ec/psi4/driver/procrouting/proc.py#L1294-L1295), but this kind of trick doesn't work for custom basis sets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/719#issuecomment-303783502:436,load,loading,436,https://psicode.org,https://github.com/psi4/psi4/issues/719#issuecomment-303783502,1,['load'],['loading']
Performance,"One question, to all core developers, IMHO, we should change the default value for `df_scf_guess` from true to false, since optimized direct algorithms would be faster than density fitting for large systems. What do y'all think?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-937330224:124,optimiz,optimized,124,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-937330224,1,['optimiz'],['optimized']
Performance,"One thing I found before I decided to drop looking into this personally:; Psi rotates the orbitals [pairwise](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libscf_solver/stability.cc#L269). My experience with orbital optimization says the correct thing to do here is multiply the coefficient matrices by a matrix exponential of the unstable vector, and that the current approach will lead to different orbitals depending on what order you apply the pairwise rotations in. It's probably worth reexamining why this pairwise approach is justified, or confirming that it isn't. This calls to mind the Givens rotation approach from the old Sherrill-Krylov paper. And now back to other projects for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1747#issuecomment-549478909:226,optimiz,optimization,226,https://psicode.org,https://github.com/psi4/psi4/issues/1747#issuecomment-549478909,1,['optimiz'],['optimization']
Performance,Open-shell DF-MP2 optimization clarifications,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/106:18,optimiz,optimization,18,https://psicode.org,https://github.com/psi4/psi4/issues/106,1,['optimiz'],['optimization']
Performance,"OptM3 with GC is the Treutler-Ahlrichs M3 mapping with Gauss-Chebyschev (GC) quadrature. This is similar to what psi4 does.; However, the radial points in psi4 are fixed numbers while in ORCA they vary for each element and were optimized against some data set (hence `OptM3 with GC`). For benchmarking interaction energies one wants `defgrid3` in ORCA and ``590/99`` in psi4. . Changing the monomer orientation will also have some influence. Though ORCA has an optional feature that makes grid rotational invariant but I dont know how it works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2304#issuecomment-928914815:228,optimiz,optimized,228,https://psicode.org,https://github.com/psi4/psi4/issues/2304#issuecomment-928914815,1,['optimiz'],['optimized']
Performance,Optimization Crash,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2627:0,Optimiz,Optimization,0,https://psicode.org,https://github.com/psi4/psi4/issues/2627,1,['Optimiz'],['Optimization']
Performance,"Optimization flags come from [another source](https://github.com/AnacondaRecipes/aggregate/blob/master/ctng-compilers-activation-feedstock/recipe/conda_build_config.cos6.x86_64.yaml#L46), but yes, I see what you mean that they look to be clobbered. I can rebuild openblas locally to see if that helps. But I'd be surprised if there were fundamental accuracy errors in the openblas package that weren't noticed by the whole conda-forge-dependent community (where openblas is their default blas_impl) or conda defaults (which still has `nomkl` options)`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-387081840:0,Optimiz,Optimization,0,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-387081840,1,['Optimiz'],['Optimization']
Performance,Optimization/frequency calculations using JSON,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2117:0,Optimiz,Optimization,0,https://psicode.org,https://github.com/psi4/psi4/issues/2117,1,['Optimiz'],['Optimization']
Performance,"Optimize and compute vibrational frequencies of a molecule: ; ```python; # test.py; import psi4. print(psi4.__version__). psi4.geometry('H -0.4 0 0\nH 0.4 0 0'); psi4.opt('HF/3-21G'); _, wfn = psi4.freq('HF/3-21G', return_wfn=True). print(wfn.hessian().to_array()); print(wfn.frequencies().to_array()); print(wfn.normalmodes()); ```. The hessian matrix and frequencies are in `Wafefucntion` object, as expected, but the normal mode vectors are missing, i.e. `wfn.normalmodes()` return `None`. ```bash; $ python test.py ; 1.2a1.dev781. ... skipped ... [[ 4.13907957e-01 -1.38565530e-17 -9.84797134e-18 -4.13907957e-01; 1.38565530e-17 9.84797134e-18]; [-1.38565530e-17 -7.17030485e-05 5.29623161e-18 1.38565530e-17; 7.17030485e-05 -5.29623161e-18]; [-9.84797134e-18 5.29623161e-18 -7.17030485e-05 9.84797134e-18; -5.29623161e-18 7.17030485e-05]; [-4.13907957e-01 1.38565530e-17 9.84797134e-18 4.13907957e-01; -1.38565530e-17 -9.84797134e-18]; [ 1.38565530e-17 7.17030485e-05 -5.29623161e-18 -1.38565530e-17; -7.17030485e-05 5.29623161e-18]; [ 9.84797134e-18 -5.29623161e-18 7.17030485e-05 -9.84797134e-18; 5.29623161e-18 -7.17030485e-05]]; [4658.84858151]; None; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/940:0,Optimiz,Optimize,0,https://psicode.org,https://github.com/psi4/psi4/issues/940,1,['Optimiz'],['Optimize']
Performance,Optimize linalg::triplet matrix multiply,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2053:0,Optimiz,Optimize,0,https://psicode.org,https://github.com/psi4/psi4/pull/2053,1,['Optimiz'],['Optimize']
Performance,Optking assign Mn to P in Writting optimization data to binary file step,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1082:35,optimiz,optimization,35,https://psicode.org,https://github.com/psi4/psi4/issues/1082,1,['optimiz'],['optimization']
Performance,"P2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy (a.u.) : -75.79072957189739; ======================================================================= ; ```. The Lagrangian energy and the final energy now agree perfectly, despite only a tiny change in the Lagrangian energy. However, the key is to note that the lines; ```; 	Orbitals are optimized now.; 	Transforming MOs to the semicanonical basis... ; Switching to the standard DF-MP2 computation... ; ```; are present in the reference output file but not in the output file that I posted. This is due to the if clause [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2648), which requires `std::fabs(DE) >= tol_Eod`, i.e., that the observed delta E is _greater than_ the user-specified convergence criteria. This situation is precisely what the fix to #1143 no longer allows for, so I must conclude that the code in that if suite is what is responsible for the discrepancy. It looks like this code in this if suite is re-computing the energy using the orbitals and T-amplitudes computed during the Lagrangian optimization. Hence the discrepancy is that when the user's energy convergence criteria isn't met, the Lagrangian information was overwritten with the orbital-and-amplitude formalism. Is this correct? Why does this code only run if the user's energy convergence criteria isn't met? Shouldn't we warn the user that these kinds of discrepancies are possible?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509:4039,optimiz,optimization,4039,https://psicode.org,https://github.com/psi4/psi4/issues/1509,1,['optimiz'],['optimization']
Performance,"PR #2388 replaces most of the hand-coded one electron integrals with Libint2 calls, for code cleanliness and performance. However, some of the integrals we need are not provided by that library. We also need to replace the arbitrary order multipole moment integrals in the current implementation because they use an algorithm that is not numerically stable at high orders. Although we could possibly use the existing Obara-Saika recursion code, arbitrary order derivatives of the potential and arbitrary order multipoles are much better handled by McMurchie Davidson code. As a proof of concept, see the [attached Python script](https://github.com/psi4/psi4/files/7938278/integrals.py.zip) that computes these integrals through arbitrary order, as well as linear momemtum and angular momentum integrals. All of those integrals can be computed through arbitrary orbital angular momentum and the entire code to compute them all / compare to existing Psi4 implementation is around 400 lines (with comments). I plan to open a followup PR with this implementation, getting rid of all of the remaining Obara-Saika code afterwards, but welcome comments / opinions on this proposal.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2414:109,perform,performance,109,https://psicode.org,https://github.com/psi4/psi4/issues/2414,1,['perform'],['performance']
Performance,"PRs psi-rking/optking#24 and psi4/psi4#1335 are a pair. Together, they get most optimizations working for Psi. In particular have working:. - [x] ordinary, opt-is-full job optimizations; - [x] collecting all the psivars so psi can read them in. basically, collecting enough to generate a skeleton (mol, basis, psivars) that can be passed back from `psi4.optimize(..., return_wfn=True)`; - [x] inlining optking's logging output into the psi4 output file; - [x] resetting psi4's options on either side of the `optking.run_json_dict()` call. The trouble was that the psi4-s imported by optking were clearing and setting options (as is proper for indep json runs) such that the calling psi4 didn't have its original options in globals upon optking termination; - [x] starting to catch optking errors (str in json) and re-raising them as psi4 errors. Yes, that AlgError vs OptError for exceeding geom_maxiter really stumped me for a while b/c I only got the final error (""dynamic level exceeded"") and I thought it was behaving differently btwn direct optking and psi4 initiated runs. To me it seems clear that if geom_maxiter is exceeded, then optimizer quits directly (though perhaps that's clearer when geom_maxiter=2 than =200). @psi-rking @AlexHeide",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1335#issuecomment-436437450:80,optimiz,optimizations,80,https://psicode.org,https://github.com/psi4/psi4/pull/1335#issuecomment-436437450,4,['optimiz'],"['optimizations', 'optimize', 'optimizer']"
Performance,"Partially, I'm running these tests with `python psi4 --test`:; ```; 2018-12-05T15:54:19.2192346Z ============================= test session starts =============================; 2018-12-05T15:54:19.2192531Z platform win32 -- Python 3.6.6, pytest-4.0.1, py-1.7.0, pluggy-0.8.0 -- C:\tools\miniconda3\python.exe; 2018-12-05T15:54:19.2193957Z cachedir: .pytest_cache; 2018-12-05T15:54:19.2194153Z rootdir: D:\a\1\b\install, inifile:; 2018-12-05T15:54:19.5028575Z collecting ... collected 43 items / 21 deselected; 2018-12-05T15:54:19.5042204Z ; 2018-12-05T15:54:19.5056742Z ..\lib\psi4\tests\test_addons.py::test_gdma SKIPPED [ 4%]; 2018-12-05T15:54:19.5070445Z ..\lib\psi4\tests\test_addons.py::test_mrcc SKIPPED [ 9%]; 2018-12-05T15:54:19.5085682Z ..\lib\psi4\tests\test_addons.py::test_chemps2 SKIPPED [ 13%]; 2018-12-05T15:54:19.5098425Z ..\lib\psi4\tests\test_addons.py::test_dftd3 SKIPPED [ 18%]; 2018-12-05T15:54:19.5111431Z ..\lib\psi4\tests\test_addons.py::test_libefp SKIPPED [ 22%]; 2018-12-05T15:54:19.5124637Z ..\lib\psi4\tests\test_addons.py::test_pcmsolver SKIPPED [ 27%]; 2018-12-05T15:54:19.5137383Z ..\lib\psi4\tests\test_addons.py::test_erd SKIPPED [ 31%]; 2018-12-05T15:54:19.5159968Z ..\lib\psi4\tests\test_addons.py::test_simint SKIPPED [ 36%]; 2018-12-05T15:54:21.2422176Z ..\lib\psi4\tests\test_addons.py::test_json PASSED [ 40%]; 2018-12-05T15:54:21.2458012Z ..\lib\psi4\tests\test_addons.py::test_cfour SKIPPED [ 45%]; 2018-12-05T15:54:21.2473322Z ..\lib\psi4\tests\test_addons.py::test_v2rdm_casscf SKIPPED [ 50%]; 2018-12-05T15:54:21.2488441Z ..\lib\psi4\tests\test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; 2018-12-05T15:54:21.2503496Z ..\lib\psi4\tests\test_addons.py::test_grimme_3c SKIPPED [ 59%]; 2018-12-05T15:54:21.2517677Z ..\lib\psi4\tests\test_addons.py::test_dkh SKIPPED [ 63%]; 2018-12-05T15:54:21.2531717Z ..\lib\psi4\tests\test_addons.py::test_snsmp2 SKIPPED [ 68%]; 2018-12-05T15:54:21.2547307Z ..\lib\psi4\tests\test_addons.py::test_resp SKIPPED [ 72%]; 2018-12",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647:340,cache,cachedir,340,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647,1,['cache'],['cachedir']
Performance,"Parts are arriving for an AMD server in our lab, so this may get more testing. But for now, OpenBLAS is going to go the way of Accelerate (on Mac) and just get a nice Use At Your Own Risk warning. I daresay Psi could use openblas directives better, but the stack of difficulties (wrong fctls, scaling, numpy compatibility, conda compatibility) is too high when there's a free, compatible, and working alternative in place. Glad to revisit periodically. P. S. There might be a further technical choice why the conda openblas package isn't building the Fortran/LAPACK code with optimizations (https://github.com/psi4/psi4/issues/1009#issuecomment-387075271), but an immediate technical reason is that conda gfortran 7.2.0 isn't distributing `omp_lib.[h|mod]`, so threading isn't avail.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-391015669:576,optimiz,optimizations,576,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-391015669,1,['optimiz'],['optimizations']
Performance,Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Lookin,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:2605,Perform,Performing,2605,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance,Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: Ope,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:2564,Perform,Performing,2564,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance,"Perhaps Kirk would be willing to add this feature for us. On Mon, Jun 12, 2017 at 2:32 PM, Lori A. Burns <notifications@github.com>; wrote:. > We have a clear policy (at least for what was originally added) of using; > optimized contractions from EMSL. From Kirk Peterson's website; > <http://tyr0.chem.wsu.edu/%7Ekipeters/basis.html>, we don't have that; > option, so we get what he supplies. Not sure what to do about it, unless; > implement a fn to re-optimize contractions.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/728#issuecomment-307878490>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdij1x5IEyCPr7tRTjpEHhtNZnbNuks5sDYQzgaJpZM4NuweP>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-307880460:219,optimiz,optimized,219,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307880460,2,['optimiz'],"['optimize', 'optimized']"
Performance,"Please check the output for additional information or printouts from the optimizer for the 1-step optimization, or upload the file.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-957965416:73,optimiz,optimizer,73,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957965416,2,['optimiz'],"['optimization', 'optimizer']"
Performance,"Please look at the test result now:. (base) dabu@RES-SHANTIPA:/mnt/c/Users/shantigp/projects/psi4conda/bin$ psi4 --test; numpy.ufunc size changed, may indicate binary incompatibility. Expected 192 from C header, got 216 from PyObject; ================================================= test session starts ==================================================; platform linux -- Python 3.6.8, pytest-4.3.0, py-1.8.0, pluggy-0.9.0 -- /mnt/c/Users/shantigp/projects/psi4conda/bin/python; cachedir: .pytest_cache; rootdir: /mnt/c/Users/shantigp/projects/psi4conda, inifile:; collected 1024 items / 1002 deselected / 22 selected. ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma PASSED [ 4%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED [ 9%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED [ 13%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 FAILED [ 18%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp LIBEFP: parameters for fragment ""NH3"" are already loaded; PASSED [ 22%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:482,cache,cachedir,482,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['cache'],['cachedir']
Performance,"Possible, but I really doubt it, as glibc mismatches aren't usually healable. Usually this is a symptom of packages depending on different versions of a library and symbols getting sometimes loaded one way and sometimes another depending on import order. Often fixable by swapping import order, but in the psi-in-jupyter case, there's simply nothing to swap. I thoroughly expected this to be fixed when I built with the newer compilers and was alarmed when it wasn't. @sergsb, would you want to try the conda env line in https://github.com/psi4/psi4/issues/862#issuecomment-347074303 ? Possibly more defaults packages have been updated to the new compilers since November and healed the problem. Only thing else I can think of is that I'm still linking libc++ statically (which it should be entirely safe to do, being the least-fundamental of the `glibc`, `libgcc_s`, `libstdc++` trio) and that's running into a symbol error with the jupyter stack.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-369640226:191,load,loaded,191,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369640226,1,['load'],['loaded']
Performance,"Possibly we could try/catch the mol name as a Py identifier and thereby fine-tune the allowed names, rather than the current slight mismatch. I'm afraid that garden-variety Psi4 users won't get the block --> geometry idea, though maybe worth saying if the sentence starts ""For those acquainted with Python,"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/650#issuecomment-286907884:77,tune,tune,77,https://psicode.org,https://github.com/psi4/psi4/issues/650#issuecomment-286907884,1,['tune'],['tune']
Performance,"Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.413853	 2.335710; 	 R(1,3) = 4.396402	 2.326476; 	 R(1,4) = 3.793656	 2.007516; 	 R(1,7) = 3.809780	 2.016049; 	 R(4,5) = 2.616159	 1.384412; 	 R(4,13) = 2.668916	 1.412329; 	 R(5,6) = 1.963315	 1.038942; 	 R(5,10) = 2.677145	 1.416684; 	 R(7,8) = 2.602016	 1.376927; 	 R(7,29) = 2.755516	 1.458156; 	 R(8,9) = 1.932195	 1.022473; 	 R(8,26) = 2.645360	 1.399864; 	 R(10,11) = 2.753932	 1.457318; 	 R(10,15) = 2.759721	 1.460381; 	 R(11,12) = 2.041576	 1.080355; 	 R(11,13) = 2.590332	 1.370745; 	 R(13,14) = 2.036558	 1.077700; 	 R(15,16) = 2.659974	 1.407597; 	 R(15,24) = 2.642044	 1.398110; 	 R(16,17) = 2.044694	 1.082006; 	 R(16,18) = 2.630038	 1.391756; 	 R(18,19) = 2.044735	 1.082027; 	 R(18,20) = 2.637386	 1.395644; 	 R(20,21) = 2.038431	 1.078691; 	 R(20,22) = 2.641133	 1.397628; 	 R(22,23) = 2.040026	 1.079535; 	 R(22,24) = 2.631332	 1.392441; 	 R(24,25) = 2.044993	 1.082163; 	 R(26,27) = 2.527061	 1.337263; 	 R(26,31) = 2.792237	 1.477588; 	 R(27,28) = 2.042107	 1.080636; 	 R(27,29) = 2.822048	 1.493363; 	 R(29,30) = 2.100722	 1.111654; 	 R(29,58) = 5.078473	 2.687412; 	 R(31,32) = 2.664874	 1.410191; 	 R(31,40) = 2.651117	 1.402911; 	 R(32,33) = 2.041331	 1.080226; 	 R(32,34) = 2.630156	 1.391819; 	 R(34,35) = 2.045401	 1.082380; 	 R(34,36) = 2.634668	 1.394206; 	 R(36,37) = 2.040435	 1.079752; 	 R(36,38) = 2.640649	 1.397371; 	 R(38,39) = 2.040995	 1.080048; 	 R(38,40) = 2.635383	 1.394585; 	 R(40,41) = 2.041778	 1.080462; 	 R(42,43) = 4.405069	 2.331062; 	 R(42,44) = 4.409579	 2.333449; 	 R(42,45) = 3.790992	 2.006107; 	 R(42,48) = 3.811335	 2.016872; 	 R(45,46) = 2.616045	 1.384352; 	 R(45,54) = 2.676356	 1.416267; 	 R(46,47) = 1.967660	 1.041241; 	 R(46,51) = 2.675888	 1.416019; 	 R(48,49) = 2.600961	 1.376369; 	 R(48,70) = 2.754963	 1.457863; 	 R(49,50) = 1.935929	 1.024450; 	 R(49,67) = 2.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1921:9,optimiz,optimization,9,https://psicode.org,https://github.com/psi4/psi4/issues/1921,2,['optimiz'],['optimization']
Performance,"Props4 does have both labels (my bad), so I'll fix that, @loriab. I _think_ I found a workaround for the Travis problems. The bjam system uses predefined setups to build. When it calls `clang`, it's really getting clang 3.4 (which is broken); loading the clang 3.8 module defines `clang-3.8` in addition to the existing `clang`. I forced bjam to use `clang-3.8` instead by dumping a `user-config.bjam` file to ${HOME}. This is done by a script because YAML has a terrible time with : in environmental variables. That's about an hour of my life I'll never get back.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235179414:243,load,loading,243,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235179414,1,['load'],['loading']
Performance,"Psi currently can't project orbitals across different symmetries. Attempting gives you the error, `Cannot compute projection of different symmetries.` We should be able to project to the proper subgroups. This is a common problem in finite difference computations where read is enabled. For an example file. ```; molecule h2o { ; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; points 3; geom_maxiter 7; full_hess_every 1 ; }. optimize('scf', dertype = 0); ```. This issue is blocking the expected behavior upon fix of #1296. Even when reading orbitals from the original C2v geometry, the orbitals can't be projected to Cs symmetry. #1296 will address problems of poor read orbitals and switching from one proper subgroup of the reference symmetry to another proper subgroup that is not a subgroup of the previous proper subgroup. (Example: A C1 displacement and then a Cs displacement.). Although this causes similar _symptoms_ to #1296, its fix is beyond the scope of modifications to the finite difference code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1297:471,optimiz,optimize,471,https://psicode.org,https://github.com/psi4/psi4/issues/1297,1,['optimiz'],['optimize']
Performance,"Psi4 is fine with cyclic mols, but the optimizer could benefit from a @psi-rking consult. We're in the middle of switching out optimizer implementations, btw. Are you able to post your input file?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2599#issuecomment-1152532615:39,optimiz,optimizer,39,https://psicode.org,https://github.com/psi4/psi4/issues/2599#issuecomment-1152532615,2,['optimiz'],['optimizer']
Performance,PsiException: Could not converge geometry optimization in 50 iterations.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2604:42,optimiz,optimization,42,https://psicode.org,https://github.com/psi4/psi4/issues/2604,1,['optimiz'],['optimization']
Performance,"Quicktests fail on Fedora rawhide i686. The test case output is. Testing pywrap-freq-e-sowreap...; Performing finite difference calculations by energies; 13 displacements needed.; Computation complete.; Frequencies.......................................................PASSED; ZPVE..............................................................PASSED; SP energy.........................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; Testing cc8...; \tFAILED; Testing cc18...; Nuclear repulsion energy..........................................PASSED; SCF energy........................................................PASSED; CCSD correlation energy...........................................PASSED; CCSD total energy.................................................PASSED; \tFAILED; Testing cc19...; \tFAILED; Testing cc28...; \tFAILED; Testing cc49...; \tFAILED. The cc??.test files are empty, but the output.dat's seem sane...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/13:99,Perform,Performing,99,https://psicode.org,https://github.com/psi4/psi4/issues/13,1,['Perform'],['Performing']
Performance,"R is intended to implement VV10 gradients and cache collocation matrices to prevent reconstruction every iteration. The VV10 gradient is on hold until I build a new Grid that uses only atom-centered blocks rather than blocks that possibly contain functions from multiple centers. This is due to the fact that the VV10 nuclear gradient has a component which requires a gradient with respect to centers and not just with respect to the density as there are explicit `1/r` dependance in the VV10 energy. ## Todos; - [x] Cache collocation matrices to remove DFT bottleneck for small molecules.; - [x] Figure out how many blocks to store based on available memory.; - [ ] Implement VV10 gradients; - [x] Orbital VV10 gradient piece implemented; - [ ] Nuclear VV10 gradient piece implemented; - [ ] A DFT Grid that uses only Atom centered blocks. ## Questions; - [ ] Anyone have thoughts on how to figure out how much memory JK and grid caching should receive?. Timing for a small molecule without a cache using TPSS (a MGGA):; ```; | UV: Form V : 22.583u 1.117s 13.702w 15 calls; | | Properties : 12.333u 0.883s 7.756w 10530 calls; | | Functional : 5.617u 0.033s 3.217w 10530 calls; | | V_xc : 4.400u 0.117s 2.567w 10530 calls; ```. With a cache:; ```; | UV: Form V : 13.750u 0.967s 8.316w 15 calls; | | Properties : 4.083u 0.783s 2.422w 10530 calls; | | Functional : 4.950u 0.000s 3.186w 10530 calls; | | V_xc : 4.383u 0.100s 2.564w 10530 calls; ```. Note DFT V matrix takes a good portion of JK time up to ~2k basis functions with our DF code, though this depends on the density of the grid. Cache sizes:. Grid (99, 302); ```; LDA - 6MB/atom; GGA - 24MB/atom; MGGA - 60MB/atom; ```. Grid (120, 590); ```; LDA - 16MB/atom; GGA - 48MB/atom; MGGA - 160MB/atom; ```. A cache of every block point seems to make the computation 40-80% faster. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1233:1016,cache,cache,1016,https://psicode.org,https://github.com/psi4/psi4/pull/1233,1,['cache'],['cache']
Performance,"RGSCFindices::getNVIRT(int) const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:552: undefined reference to `CheMPS2::DMRGSCFindices::getOrigNVIRTstart(int) const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:580: undefined reference to `CheMPS2::DMRGSCFunitary::getNumVariablesX() const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:585: undefined reference to `CheMPS2::DMRGSCFunitary::getNumVariablesX() const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:586: undefined reference to `CheMPS2::DMRGSCFunitary::getNumVariablesX() const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:593: undefined reference to `CheMPS2::DMRGSCFindices::getNORB(int) const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:605: undefined reference to `CheMPS2::EdmistonRuedenberg::EdmistonRuedenberg(CheMPS2::Hamiltonian*, int)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:611: undefined reference to `CheMPS2::DMRGSCFunitary::loadU(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:620: undefined reference to `CheMPS2::DMRGSCFunitary::getNumVariablesX() const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:620: undefined reference to `CheMPS2::DIIS::DIIS(int, int, int)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:623: undefined reference to `CheMPS2::DIIS::loadDIIS(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:637: undefined reference to `CheMPS2::DMRGSCFunitary::getNumVariablesX() const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:646: undefined reference to `CheMPS2::DMRGSCFunitary::updateUnitary(double*, double*, double*, bool, bool)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:655: undefined reference to `CheMPS2::DMRGSCFunitary::getNumVariablesX() const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:655: undefined r",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/264:17990,load,loadU,17990,https://psicode.org,https://github.com/psi4/psi4/issues/264,1,['load'],['loadU']
Performance,"Radial Points = 88; Spherical Points = 434; Total Points = 292072; Total Blocks = 2181; Max Points = 256; Max Functions = 60; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: DEF2-UNIVERSAL-JFIT; Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry C line 170 file /home/manas/psi4conda/share/psi4/basis/def2-universal-jfit.gbs; atoms 3-8 entry H line 17 file /home/manas/psi4conda/share/psi4/basis/def2-universal-jfit.gbs. ==> Integral Setup <==. DFHelper Memory: AOs need 0.007 GiB; user supplied 83.698 GiB. Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: No; wK tasked: No; OpenMP threads: 8; Memory [MiB]: 85706; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 0.0000; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: DEF2-UNIVERSAL-JFIT; Blend: DEF2-UNIVERSAL-JFIT; Number of shells: 60; Number of basis functions: 194; Number of Cartesian functions: 194; Spherical Harmonics?: false; Max angular momentum: 4. Cached 100.0% of DFT collocation blocks in 0.121 [GiB]. Minimum eigenvalue in the overlap matrix is 4.2926659058E-03.; Reciprocal condition number of the overlap matrix is 5.8671564054E-04.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo; -------------------------; A 60 60; -------------------------; Total 60 60; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -78.86898106418064 -7.88690e+01 0.00000e+00; @DF-RKS iter 1: -78.88636762953359 -1.73866e-02 1.49756e-02 DIIS; @DF-RKS iter 2: -78.27124917688414 6.15118e-01 2.18391e-02 DIIS; @DF-RKS iter 3: -79.32381221986704 -1.05256e+00 1.08985e-03 DIIS; @DF-RKS iter 4: -79.32638959495554 -2.57738e-03 2.16014e-04 DIIS; @DF-RKS iter 5: -79.32647363265359 -8.40377e-05 3.30059e-05 DIIS; @DF-RKS iter 6: -79.32647565598309 -2.02333e-06 1.23652e-06 DIIS",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911:6292,Cache,Cached,6292,https://psicode.org,https://github.com/psi4/psi4/issues/2911,1,['Cache'],['Cached']
Performance,"Ran these under memory/cpu profilers (4 cores) and found the following:. B3LYP with MemJK (8.3 GB max, 3 SCF iterations):; ![b3lyp_memjk](https://user-images.githubusercontent.com/1769841/55844039-7d81c280-5b09-11e9-8fd5-c2dc04d71d23.png). wB97X with MemJK (7.1 GB max, 1 SCF iteration):; ![wb97x_diskjk](https://user-images.githubusercontent.com/1769841/55844045-82467680-5b09-11e9-9e20-78204926df8e.png). I could not run these for their full extend on my laptop, but overall it looks like they are staying relatively in-bounds. I can fix the 4% overages on the B3LYP run, I see where that occurs now. A thought is that they slowly leak over time, can you check which optimization iteration these are failing on?. I sadly do not have any local hardware I can run things on these days.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-481493169:669,optimiz,optimization,669,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481493169,1,['optimiz'],['optimization']
Performance,"Reasonably, since this is more than 2 years old, you've deleted the dropbox files. Maybe @psi-rking has the inputs to test if any of the newfangled optimization modes work on these cases. Thanks for reporting, but I'm closing since we probably don't have the info to reconstruct the problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/18#issuecomment-182638550:148,optimiz,optimization,148,https://psicode.org,https://github.com/psi4/psi4/issues/18#issuecomment-182638550,1,['optimiz'],['optimization']
Performance,Renamed for upload; [output.txt](https://github.com/psi4/psi4/files/4668488/output.txt); Yes the gradients were also rohf. I can add an output for the optimization if desired.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897#issuecomment-632711349:151,optimiz,optimization,151,https://psicode.org,https://github.com/psi4/psi4/issues/1897#issuecomment-632711349,1,['optimiz'],['optimization']
Performance,Reorder dfocc:dfmp2 Contractions to Remove Bottleneck,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1726:43,Bottleneck,Bottleneck,43,https://psicode.org,https://github.com/psi4/psi4/issues/1726,1,['Bottleneck'],['Bottleneck']
Performance,"Reproduce with the below env.yml file:. ```yaml; channels:; - conda-forge; - psi4. dependencies:; - python =3.9; - datamol ; - numpy; - scikit-learn; - pytorch >=1.10.2; - tqdm; - jupyterlab; - openmm; - psi4 >=1.6; ```. then `mamba env create -n tmp_psi4 -f env.yml` and the error is. ```; conda-forge/linux-64 Using cache; conda-forge/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change. Looking for: ['python=3.10', 'datamol', 'numpy', 'scikit-learn', ""pytorch[version='>=1.10.2']"", 'tqdm', 'jupyterlab', 'openmm', ""psi4[version='>=1.6']""]. Encountered problems while solving:; - nothing provides intel-openmp needed by psi4-1.6+77475b5-py39hceaf722_0; ```. I tried multiple combination of python and psi4 versions without success. Note that the above has been only tested on a linux machine.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621:318,cache,cache,318,https://psicode.org,https://github.com/psi4/psi4/issues/2621,2,['cache'],['cache']
Performance,"Right now, our SCF instability following algorithm is the following, very dumb one:; * Perform SCF; * Check instability; * If unstable, rotate in the direction of the unstable vector, according to some user-specified magnitude, then repeat; * If unstable _with a new eigenvalue_, increment the magnitude. It must have been bad. We can guess more intelligently. A _smarter_ algorithm would look like:; * Perform SCF; * Check instability; * If unstable, rotate in the direction of the unstable vector, according to some user-specified magnitude, then...; * Do a line fit of the SCF energy in the direction of the unstable vector. The instability analysis gave us the first two terms of the Taylor expansion, analytically. Given that, we can then use the SCF energy at the rotated build to fit the _third_ derivative. It may also be possible to project the SCF gradient into the unstable direction. We can then use both pieces of information to fit the third and fourth derivative. (Some numerical tests will be necessary to determine whether the fourth dimensional fit is worthwhile, and good rotation magnitudes.); * We then find the zeroes of f'(x)/x. This is a quadratic, and we can solve the roots analytically. If both are real, evaluate f at both zeroes to find a guess for the true minimum, and continue SCF at the guess rotation. If both are imaginary, a degree four polynomial fit predicts that f(x) has no zeroes, and our fit is unreliable. Print a warning and the current orbitals.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045:87,Perform,Perform,87,https://psicode.org,https://github.com/psi4/psi4/issues/3045,2,['Perform'],['Perform']
Performance,"Right, I guess I was a bit tired. The Taylor expansion of the energy in the orbital rotation. $$ E(\boldsymbol{\theta})=E_{0}+\boldsymbol{\theta}\cdot\boldsymbol{g}+\frac{1}{2}\boldsymbol{\theta}\cdot\boldsymbol{H}\cdot\boldsymbol{\theta} + \mathcal{O}(\boldsymbol{\theta}^3) $$. where . $$ \boldsymbol{g} = \nabla_{\boldsymbol{\theta}}E\Big|_{\boldsymbol{\theta}=\boldsymbol{0}} $$. is the orbital gradient and. $$ \boldsymbol{H} = \nabla_{\boldsymbol{\theta}}\nabla_{\boldsymbol{\theta}}E\Big|_{\boldsymbol{\theta}=\boldsymbol{0}} $$. is the orbital Hessian reduces to . $$ E(\boldsymbol{\theta}) \approx E_{0} + \frac{1}{2}\boldsymbol{\theta}\cdot\boldsymbol{H}\cdot\boldsymbol{\theta} $$. around a SCF solution determined by $\boldsymbol{g}=\boldsymbol{0}$. Diagonalizing $\boldsymbol{H}$ only gives you directions $\boldsymbol{\theta}$ in which the energy goes up or down, and you need to conduct a line search to find the minimum along a direction of descent. The line search is pretty simple to carry out, though; you can use the quasiperiodicity of the orthogonal rotation matrix to determine a good trial step size, see e.g. our work on self-interaction corrected calculations in [J. Chem. Theory Comput. 12, 3195 (2016)](https://doi.org/10.1021/acs.jctc.6b00347). In my experience, a trial step of 1/5 of the shortest period of oscillation (see [Abrudan et al](https://doi.org/10.1016/j.sigpro.2009.03.015)) works well; this is slightly shorter than the theoretical value of 1/4: since you know that the function value is going down at zero step length (it is a descent direction), the minimum would be at pi/2 which is 1/4. Because of non-linear effects, the actual step should be shorter. Employing this trick is key to achieving robust convergence for orbital rotation techniques, and will be used throughout in my upcoming orbital optimizer library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1707919955:1845,optimiz,optimizer,1845,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1707919955,1,['optimiz'],['optimizer']
Performance,"Right, the psi4 conda package is built to link to Mac native Accelerate blas/lapack, not MKL. The MKL is present in the conda env for numpy's benefit. The reason for this is that until very recently all the supporting language libraries and headers for MKL weren't available on conda – they seem to be now through packages on the Intel conda channel, but I haven't switched over. I was thinking that when psi4 is imported before numpy that the latter may be trying to match symbols in the already loaded Accelerate when it should instead be importing mkl.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311738398:497,load,loaded,497,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311738398,1,['load'],['loaded']
Performance,"Rotational = 10.668 cal/mol-K (symmetry # = 2); - Vibrational = 0.014 cal/mol-K; ```. Q-Chem Input. ```; $molecule; 0 1; O 0.00000000 0.00000000 0.00000000; H 0.00000000 1.93042809 -1.10715266; H 0.00000000 -1.93042809 -1.10715266; $end. $rem; INPUT_BOHR true; BASIS STO-3G; JOBTYPE opt; METHOD hf; $end. @@@. $molecule; read; $end. $rem; INPUT_BOHR true; BASIS STO-3G; JOBTYPE freq; METHOD hf; SCF_GUESS read; ISOTOPES 1; VIBMAN_PRINT 4; THRESH 12; SCF_CONVERGENCE 7; !SYM_IGNORE TRUE; !SYMMETRY FALSE; MEM_TOTAL 1600; MEM_STATIC 512; INTEGRALS_BUFFER 512; MAX_SCF_CYCLES 200; $end. $isotopes; 3 0 ! three loops, both at std temp and pressure; 2; 2 2.014101779; 3 2.014101779; 1; 2 2.014101779; 2; 2 2.014101779; 3 3.01604927; $end; ```. Molpro Input. ```; ***,HCl; memory,100,M; geomtyp=zmat; geometry; O,, 0.00000000 , 0.00000000 , 0.00000000; H2,, 0.00000000 , 1.93042809 , -1.10715266; H3,, 0.00000000 , -1.93042809 , -1.10715266; end. basis=sto-3g; GTHRESH,energy=1.d-8. {HF}; {OPTG}. {frequencies,analytic; thermo,; print,thermo}. mass,init,H=2.014101779,O=15.994914619560; {frequencies,analytic; thermo,; print,thermo}. mass,init,O=15.994914619560,H2=2.014101779,H3=1.007825032070; {frequencies,analytic; thermo,; print,thermo}. mass,init,O=15.994914619560,H2=2.014101779,H3=3.01604927; {frequencies,analytic; thermo,; print,thermo}; ```. NW-Chem Input. ```; start h2o; title Water . memory total 1600 mb noverify. geometry units au autosym; O 0.00000000 0.00000000 0.00000000; H 0.00000000 1.93042809 -1.10715266; H 0.00000000 -1.93042809 -1.10715266; end; basis noprint; H library sto-3g ; O library sto-3g; end; scf; thresh 1e-6; end; driver; tight; end; task scf optimize. scf; thresh 1e-8; print none; end; task scf freq . freq; reuse; temp 4 298.15 300.0 350.0 400.0; end; task scf freq. freq ; reuse; mass H 2.014101779; temp 1 298.15; end; task scf freq. freq; reuse; mass 2 2.014101779; end; task scf freq. freq; reuse; mass 2 2.014101779 ; mass 3 3.01604927; end; task scf freq; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/345:8359,optimiz,optimize,8359,https://psicode.org,https://github.com/psi4/psi4/issues/345,1,['optimiz'],['optimize']
Performance,Run crashing at the end of optimization,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020:27,optimiz,optimization,27,https://psicode.org,https://github.com/psi4/psi4/issues/2020,1,['optimiz'],['optimization']
Performance,"Running CMake on my laptop with Fedora 32 results in; ```; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Failed; -- Performing Test CMAKE_CXX_FLAGS [/arch:AVX2] - Failed; CMake Warning at cmake/psi4OptionsTools.cmake:108 (message):; Option unfulfilled as none of -xHost;-march=native;/arch:AVX2 valid; Call Stack (most recent call first):; cmake/psi4OptionsTools.cmake:162 (add_C_or_CXX_flags); cmake/psi4OptionsTools.cmake:187 (add_CXX_flags); cmake/psi4OptionsTools.cmake:202 (add_flags); CMakeLists.txt:134 (option_with_flags); ```; CMakeError.log is; ```; Performing C SOURCE FILE Test test_option failed with the following output:; Change Dir: /home/work/psi4/objdir/CMakeFiles/CMakeTmp. Run Build Command(s):/usr/bin/gmake cmTC_686f3/fast && /usr/bin/gmake -f CMakeFiles/cmTC_686f3.dir/build.make CMakeFiles/cmTC_686f3.dir/build; gmake[1]: Entering directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_686f3.dir/src.c.o; /usr/lib64/ccache/cc -Dtest_option -xHost -xHost -o CMakeFiles/cmTC_686f3.dir/src.c.o -c /home/work/psi4/objdir/CMakeFiles/CMakeTmp/src.c; cc: error: language Host not recognized; cc: error: language Host not recognized; gmake[1]: *** [CMakeFiles/cmTC_686f3.dir/build.make:86: CMakeFiles/cmTC_686f3.dir/src.c.o] Error 1; gmake[1]: Leaving directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; gmake: *** [Makefile:141: cmTC_686f3/fast] Error 2. Source file was:; int main(void) { return 0; }; ```; making it seem that the CMake files aren't even testing the flags. If I change the order in CMakeLists.txt so that `-march=native` comes first, the output is correct:; ```; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2023:62,Perform,Performing,62,https://psicode.org,https://github.com/psi4/psi4/issues/2023,6,['Perform'],['Performing']
Performance,Running a geometry optimization in direct mode. SCF step reports; ```; ==> DirectJK: Integral-Direct J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Integrals threads: 8; Schwarz Cutoff: 1E-12; ```. whereas gradient step reports; ```; ==> DirectJKGrad: Integral-Direct SCF Gradients <==. Gradient: 1; J tasked: Yes; K tasked: Yes; wK tasked: No; Integrals threads: 8; Schwarz Cutoff: 0E+00; ```. The gradient step should use the same screening as the SCF. This is with; ```; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 undefined . Git: Rev {sadghost} cd5c9b3 dirty; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1540:19,optimiz,optimization,19,https://psicode.org,https://github.com/psi4/psi4/issues/1540,1,['optimiz'],['optimization']
Performance,Running a single point calc on a HCl dimer; [hcl2.zip](https://github.com/psi4/psi4/files/11093879/hcl2.zip); at the CCSD(T)/aug-cc-pvtz level of theory crashes with; ```; Total cached: 139345.9 kB; MRU = 31; LRU = 32; #LRU deletions = 0; #Low-priority deletions = 0; Core max size: 48000000.0 kB; Core used: 47999971.9 kB; Core available: 28.1 kB; Core cached: 139345.9 kB; Locked cached: 139345.9 kB; Most recent entry = 31; Least recent entry = 32; dpd_block_matrix: n = 18 m = 324; Error in: dpd_block_matrix: No memory left.; ```; The program gets allocated 48 Gb of memory and 16 cores. Cache level was set to 1. Any other suggestions?; Script is attached as a zip file.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2913:178,cache,cached,178,https://psicode.org,https://github.com/psi4/psi4/issues/2913,4,"['Cache', 'cache']","['Cache', 'cached']"
Performance,"Running the input; ```; molecule {; -3 1; Mn -5.33522 1.82890 0.00000; C -6.70409 1.81768 0.00000; N -7.86182 1.80819 0.00000; C -3.02385 1.55961 0.00000; N -1.87386 1.42563 0.00000; C -5.32727 1.82534 2.06597; N -5.32130 1.82281 3.22328; C -4.37028 0.58345 0.00000; N -3.66119 -0.33177 0.00000; C -6.06454 2.87238 0.00000; N -6.72779 3.82134 0.00000; C -5.32727 1.82534 -2.06597; N -5.32130 1.82281 -3.22327; }. set basis pcseg-0; set opt_coordinates cartesian; set geom_maxiter 5000; optimize('hf'); ```; I can sometimes trigger a segmentation fault:; ```; $ psi4 -n 4 mncn6.in ; Segmentation fault (core dumped); ```; Backtrace; ```; (gdb) bt; #0 _mm_storeu_pd (__A=..., __P=<optimized out>) at /usr/lib/gcc/x86_64-redhat-linux/10/include/emmintrin.h:173; #1 dgemm_oncopy_HASWELL (m=132, n=24, a=0x7faa67735990, lda=132, b=<optimized out>) at ../kernel/x86_64/dgemm_ncopy_8_skylakex.c:91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:486,optimiz,optimize,486,https://psicode.org,https://github.com/psi4/psi4/issues/2010,5,['optimiz'],"['optimize', 'optimized']"
Performance,SAPT(DFT) MO disk I/O optimization & Exchange-Dispersion scaling scheme update,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481:22,optimiz,optimization,22,https://psicode.org,https://github.com/psi4/psi4/pull/2481,1,['optimiz'],['optimization']
Performance,"Same situation, sadly. GCC builds are much slower than Clang builds, and uploading the cache (unrelated to Ninja or Makefiles) really hurts. We might want to move one Linux pipeline to Azure or Circle CI, at some point...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1748#issuecomment-549383231:87,cache,cache,87,https://psicode.org,https://github.com/psi4/psi4/pull/1748#issuecomment-549383231,1,['cache'],['cache']
Performance,"See if you can check that a proper gcc is being loaded for `psi4/core.so`. That `cxx11::basic_string<char, std::char_traits` brings to mind the pre-/post-gcc-5.1 string issue. Is anything here compiled yourself or is it all conda?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820#issuecomment-335915587:48,load,loaded,48,https://psicode.org,https://github.com/psi4/psi4/issues/820#issuecomment-335915587,1,['load'],['loaded']
Performance,Segfault in RI-HF geometry optimization,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:27,optimiz,optimization,27,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['optimiz'],['optimization']
Performance,Segfault in optimization,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/6:12,optimiz,optimization,12,https://psicode.org,https://github.com/psi4/psi4/issues/6,1,['optimiz'],['optimization']
Performance,"Setting TargetLAPACK_DIR (as you suggested) didn't seem to help: it still couldn't find MathOpenMP. However, adding; `-DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}` to external/downstream/gpu_dfcc seems to do the trick and gpu_dfcc builds OK (within the psi4 tree). It does also need CMAKE_CUDA_COMPILER and CUDA_TOOLKIT_ROOT_DIR defining before it's happy (rather than having defaults). I added them to CMakeCache.txt but presumably they'd work if added to the original cmake command. Once built, it fails when trying to install gpu_dfcc within the tree:; ```; [ 64%] Performing build step for 'gpu_dfcc_external'; [100%] Built target gpu_dfcc; [ 70%] Performing install step for 'gpu_dfcc_external'; [100%] Built target gpu_dfcc; Install the project...; -- Install configuration: ""Release""; -- Up-to-date: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib/gpu_dfcc/gpu_dfcc.so; CMake Error at cmake_install.cmake:61 (file):; file INSTALL cannot find; ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external/__init__.py"". Makefile:84: recipe for target 'install' failed; make[3]: *** [install] Error 1; external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/build.make:73: recipe for target 'external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-install' failed; make[2]: *** [external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-install] Error 2; CMakeFiles/Makefile2:1419: recipe for target 'external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all' failed; make[1]: *** [external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```; It looks like __init__.py isn't being generated from __init__.py.in for some reason. It _could_ be because I've been hacking stuff about: I'll try with a fresh tree (modified with your additions) tomorrow",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400483634:568,Perform,Performing,568,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400483634,2,['Perform'],['Performing']
Performance,"Setting `memory 16 gb` results in; ```; Memory set to 14.901 GiB by Python driver.; ```; but this is not reflected in the calculation:; ```; ==> Integral Setup <==. DFHelper Memory: AOs need 3.981 GiB; user supplied 3.981 GiB. Using in-core AOs.; ```; and; ```; Cached 100.0% of DFT collocation blocks in 12.502 [GiB].; ```; which already amounts to 16.5 GiB, causing the job to crash due to insufficient memory.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1819:262,Cache,Cached,262,https://psicode.org,https://github.com/psi4/psi4/issues/1819,1,['Cache'],['Cached']
Performance,"Shot in the dark here, but what happens if you try `python -c “import numpy”`? That should also load IOMP5, it may or may not hit a OMP lock however.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-404810043:96,load,load,96,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-404810043,1,['load'],['load']
Performance,Should there be an output in the zip? You might try first w/o altering cache settings.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2913#issuecomment-1487557230:71,cache,cache,71,https://psicode.org,https://github.com/psi4/psi4/issues/2913#issuecomment-1487557230,1,['cache'],['cache']
Performance,Shouldn't the mismatch between the total gradient rms (0.04) and the gradient it's decided to consider (1e-7) signal to the optimizer that it doesn't have the full picture? Throw in some Cartesian steps or whatever others do?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-195987054:124,optimiz,optimizer,124,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195987054,1,['optimiz'],['optimizer']
Performance,"Show seg faults, buffer overflows, and doubly linked list errors: https://travis-ci.org/psi4/psi4/jobs/471402754. Azure Gibbs failure looks like:; ```; 2018-12-23T01:04:44.9842835Z 61/142 Test #210: gibbs ............................***Failed 33.09 sec; 2018-12-23T01:04:44.9843015Z Optimizer: Optimization complete!; 2018-12-23T01:04:44.9843106Z 	N2 Gibbs Free Energy..............................................PASSED; 2018-12-23T01:04:44.9843160Z Optimizer: Optimization complete!; 2018-12-23T01:04:44.9843216Z 	H2O Gibbs Free Energy.............................................PASSED; 2018-12-23T01:04:44.9843489Z Optimizer: Optimization complete!; 2018-12-23T01:04:44.9843563Z 	NH3 Gibbs Free Energy.............................................PASSED; 2018-12-23T01:04:44.9843609Z Traceback (most recent call last):; 2018-12-23T01:04:44.9843656Z File ""D:/a/1/b/build/stage/bin/psi4"", line 287, in <module>; 2018-12-23T01:04:44.9843903Z exec(content); 2018-12-23T01:04:44.9843947Z File ""<string>"", line 71, in <module>; 2018-12-23T01:04:44.9843996Z File ""D:\a\1\b\build\stage\lib\psi4\driver\driver.py"", line 1096, in optimize; 2018-12-23T01:04:44.9844066Z moleculeclone.update_geometry(); 2018-12-23T01:04:44.9844095Z ; 2018-12-23T01:04:44.9844134Z RuntimeError: ; 2018-12-23T01:04:44.9844201Z Fatal Error: User specified point group (C2v(Z)) is not a subgroup of the highest detected point group (Cs(Z)). If this is because the symmetry increased, try to start the calculation again from the last geometry, after checking any symmetry-dependent input, such as DOCC.; 2018-12-23T01:04:44.9844301Z Error occurred in file: D:\a\1\s\psi4\src\psi4\libmints\molecule.cc on line: 2016; 2018-12-23T01:04:44.9844337Z ; 2018-12-23T01:04:44.9844403Z Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. as shown in the logs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-449670954:283,Optimiz,Optimizer,283,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-449670954,7,"['Optimiz', 'optimiz']","['Optimization', 'Optimizer', 'optimize']"
Performance,"Similar to pull request #497 but should fix all broken links, not only those to energy/optimize/frequency. Removed unnecessary line break.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/500#issuecomment-258539160:87,optimiz,optimize,87,https://psicode.org,https://github.com/psi4/psi4/pull/500#issuecomment-258539160,1,['optimiz'],['optimize']
Performance,"Since Psi4:; * is primarily a shared library / Python module (to C++/Py folks, respectively) rather than an executable (`bin/psi4` is light script loading Python module);; * is not necessarily at the top of the call stack, and we've heard from projects who would like to import us;; * is benefiting from the non-attaching and permissive licenses of numerous external projects to supplement Psi4's capabilities, and we want to return the favor,. **we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by the the 1.1 release.**. EDIT: now targeting LGPL-3.0, not +, with PR psi4/psi4#690. The current and historical core developers have signed off on this. The historical peripheral developers are discussing this without any initial objections. We now want to get feedback from the GitHub contributor, user, and packaging community (or anyone not in e-mail communication with the core developers). So please reply with any concerns, constraints, preferences, etc. ##### Dependencies licensing situation; * required library dependencies (current & anticipated): PSFL, LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause ; * optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+, LGPL-3.0+; * optional executable dependencies: GPL-1.0+, Custom; * Psi4 plugins: GPL-2.0+, GPL-3.0+; * conda-wise, we'll build an alternate conda package that doesn't link any GPL libraries or plugins. ##### Queries; * Psi4 is a Python module and hence a dynamic library. I don't know right off how to even build a `psi4.a`. With that in mind, does anyone care about license terms for static linking?; * Any concrete problems that would be solved by a permissive license instead of LGPL?; * Anyone care about sublicensing?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/688:147,load,loading,147,https://psicode.org,https://github.com/psi4/psi4/issues/688,1,['load'],['loading']
Performance,"Since the optimization works in the upcoming version, I'm closing the issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2208#issuecomment-868866180:10,optimiz,optimization,10,https://psicode.org,https://github.com/psi4/psi4/issues/2208#issuecomment-868866180,1,['optimiz'],['optimization']
Performance,"Since the problem is that CMake is not detecting the proper flags, this issue also affects all the other options; ```; option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization (with MSVC, it enables AVX2 instructions)"" ON; ""-xHost"" ""-march=native"" ""/arch:AVX2""); option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer""); option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2023#issuecomment-716894798:178,optimiz,optimization,178,https://psicode.org,https://github.com/psi4/psi4/issues/2023#issuecomment-716894798,1,['optimiz'],['optimization']
Performance,"Since we are only interested in the density with a SAD guess we can lower our expectations in terms of accuracy. So lets just do the easy solution: I trimmed `AM=5` out of the Weigend basis to make a `SAD-FIT` basis. While the energy of a given atom can deviate up to 1% (!) due to the errors in the fitting basis the densities look similar. For example, hydrobromic acid/aug-cc-pV5Z:. ```; SAD DF-basis aug-cc-pV5Z-jkfit; @DF-RHF iter 0: -2573.11546127243219 -2.57312e+03 1.30325e-02; @DF-RHF iter 6: -2573.05212026634626 -9.92310e-06 3.01845e-06 DIIS; ```. ```; SAD DF-basis SAD-FIT; @DF-RHF iter 0: -2572.77288633232229 -2.57277e+03 2.28224e-02; @DF-RHF iter 6: -2573.05212044674045 -2.02440e-07 7.83243e-07 DIIS; ```. This represents a worst-case example as the `SAD-FIT` basis is 10x smaller than `aug-cc-pV5Z-jkfit` for bromine. I think this represents a happy medium, 150 orbital basis functions on a single atom runs in about 3 seconds and we neatly circumvent the AM issues (Psi4 minimal AM is 4). As a note this optimization takes 11 iterations with a CORE guess to achieve the same level of convergence. Going to run with this for now. Unless someone has ideas of what went wrong with the CDJK spherical vs cartesian issue I'm just going to rip this out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/400#issuecomment-224644390:1022,optimiz,optimization,1022,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-224644390,1,['optimiz'],['optimization']
Performance,Single-Atom Optimization Not Intercepted,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971:12,Optimiz,Optimization,12,https://psicode.org,https://github.com/psi4/psi4/issues/2971,1,['Optimiz'],['Optimization']
Performance,So now loading `core.so` never loads a potentially-conflicting BLAS. But it still causes numpy to return garbage.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311749561:7,load,loading,7,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311749561,2,['load'],"['loading', 'loads']"
Performance,"So now that this PR and https://github.com/psi4/psi4/pull/2924 have both been approved for adding to the merge queue, my guess is that there will be a merge conflict between the two, at the `SCF_SUBTYPE` docstring in scf_subtype.cc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2926#issuecomment-1527469285:111,queue,queue,111,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1527469285,1,['queue'],['queue']
Performance,"So one does a frequency calc, either by energies or gradients. ```; #! Optimization followed by frequencies H2O HF/cc-pVDZ. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'); #frequencies('scf', dertype='energy') # TOGGLE; frequencies('scf', dertype='gradient') # TOGGLE. eval = psi4.get_frequencies(); eval.print_out(); evec = psi4.get_normalmodes(); evec.print_out(). ref_freqs = psi4.Vector(3) #TEST; ref_freqs.set(0, 0, 1775.65) #TEST; ref_freqs.set(0, 1, 4113.38) #TEST; ref_freqs.set(0, 2, 4212.18) #TEST. fd_freqs = psi4.wavefunction().frequencies() #TEST; compare_vectors(ref_freqs, fd_freqs, 1, ""Reference vs computed frequencies to 0.1 cm^-1"") #TEST; ```. Both versions pass the frequencies check. But if you diff their printed normal modes, as below, the coordinate system seems unaligned. This job doesn't have the sow/reap complication, though it does have the zmat one. Basically, is this expected or correctable?. ```; Frequency: 1775.58 | Frequency: 1775.65; Force constant: 0.1193 Force constant: 0.1193; X Y Z mass X Y Z mass ; O 0.000 0.000 -0.068 15.994915 | O 0.000 0.000 -0.270 15.994915; H 0.000 0.416 0.536 1.007825 | H 0.000 0.417 0.538 1.007825; H 0.000 -0.416 0.536 1.007825 | H 0.000 -0.417 0.538 1.007825. Frequency: 4113.41 | Frequency: 4113.38; Force constant: 0.6403 Force constant: 0.6403; X Y Z mass X Y Z mass ; O 0.000 0.000 0.049 15.994915 | O 0.000 0.000 0.197 15.994915; H 0.000 0.569 -0.392 1.007825 | H 0.000 0.571 -0.393 1.007825; H 0.000 -0.569 -0.392 1.007825 | H 0.000 -0.571 -0.393 1.007825. Frequency: 4212.15 | Frequency: 4212.18; Force constant: 0.6714 Force constant: 0.6714; X Y Z mass X Y Z mass ; O 0.000 0.068 0.000 15.994915 | O 0.000 0.271 0.000 15.994915; H 0.000 -0.537 0.414 1.007825 | H 0.000 -0.539 0.416 1.007825; H 0.000 -0.537 -0.414 1.007825 | H 0.000 -0.539 -0.416 1.007825. ... # # # #; Irrep: 1 Irrep: 1; 1: 1775.5835048 | 1: 1775.6479720; 2: 4113.4094219 | 2: 4113.3793970; 3: 4212",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/225:71,Optimiz,Optimization,71,https://psicode.org,https://github.com/psi4/psi4/issues/225,2,"['Optimiz', 'optimiz']","['Optimization', 'optimize']"
Performance,"Some bottlenecks that should be easy to fix:. 1.) osrecur.cc:998 Allocates (a tiny bit) of space on the heap. Can be fixed with an array on the stack; 2.) The calculate_f function; 3.) It might help to allocate just a contiguous array of memory in ""init_box"", etc. Just changing the allocation of F from heap to stack improved the timings by 10-20% for overlap, up to 50% for ao_potential in my tests (would be interesting if you can verify that). Thread scaling is better, but could still be improved I think. I may need to get timings for bigger tests",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/592#issuecomment-276222956:5,bottleneck,bottlenecks,5,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-276222956,1,['bottleneck'],['bottlenecks']
Performance,"Sometimes ultimate convergence is more important than any maxiter variable; - particularly for speedy methods or initial optimizations. If an; optimization fails in internal coordinates, then one might want the; optimizer to try Cartesians, automatically. The idea of a 'dynamic level'; (whatever its final name or design) is that a user could easily elect the; degree to which the optimizer should try different things to reach; convergence. On Tue, Nov 6, 2018 at 4:47 PM Lori A. Burns <notifications@github.com>; wrote:. > PRs psi-rking/optking#24 <https://github.com/psi-rking/optking/pull/24>; > and #1335 <https://github.com/psi4/psi4/pull/1335> are a pair. Together,; > they get most optimizations working for Psi. In particular have working:; >; > - ordinary, opt-is-full job optimizations; > - collecting all the psivars so psi can read them in. basically,; > collecting enough to generate a skeleton (mol, basis, psivars) that can be; > passed back from psi4.optimize(..., return_wfn=True); > - inlining optking's logging output into the psi4 output file; > - resetting psi4's options on either side of the; > optking.run_json_dict() call. The trouble was that the psi4-s imported; > by optking were clearing and setting options (as is proper for indep json; > runs) such that the calling psi4 didn't have its original options in; > globals upon optking termination; > - starting to catch optking errors (str in json) and re-raising them; > as psi4 errors.; >; > Yes, that AlgError vs OptError for exceeding geom_maxiter really stumped; > me for a while b/c I only got the final error (""dynamic level exceeded""); > and I thought it was behaving differently btwn direct optking and psi4; > initiated runs. To me it seems clear that if geom_maxiter is exceeded, then; > optimizer quits directly (though perhaps that's clearer when geom_maxiter=2; > than =200).; >; > @psi-rking <https://github.com/psi-rking> @AlexHeide; > <https://github.com/AlexHeide>; >; > —; > You are receiving this becau",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1335#issuecomment-436668061:121,optimiz,optimizations,121,https://psicode.org,https://github.com/psi4/psi4/pull/1335#issuecomment-436668061,7,['optimiz'],"['optimization', 'optimizations', 'optimize', 'optimizer']"
Performance,"Sorry @avcopan, I saw all the `@IRC`s in that gist above and thought opt7 was an unlabeled IRC. But that was for opt-irc-2, which should be fixed now. opt7 fails on a few systems (https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01). This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640) looks like the most coherent error message (also copied below), if @psi-rking would like to examine it. ```; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-190956405:447,Optimiz,Optimizer,447,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-190956405,4,['Optimiz'],"['Optimization', 'Optimizer']"
Performance,"Sorry, I don't agree. I'll explain why you need the inverse. The following very similar formula is correct (but different):. `D_AO = C D_MO C^T`. In case of an SCF density matrix `D_MO` is diagonal with occupation numbers on the diagonal.; `C` is not unitary, so you need to perform a matrix inverse to get `D_MO` out of `D_AO`. ---. As I said, I don't like doing the inverse and there are better ways to deal with this, basically solve the following generalized eigenvalue problem:. `S D_AO S C_NO = S C_NO N_NO`. where `S` is the overlap matrix, `C_NO` are the natural orbital coefficients and `N_NO` are the natural occupation numbers. This way, you get the natural orbitals in one step.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1485#issuecomment-456146417:275,perform,perform,275,https://psicode.org,https://github.com/psi4/psi4/issues/1485#issuecomment-456146417,1,['perform'],['perform']
Performance,"Sorry, I only just saw this thread. I don't know if this is useful, but here's some code that computes a DFT wavefunction as a simple way to set up a DFT integration grid. It then uses that integration grid to integrate the electron density at the HF level in this example. Most of this was stolen from @dgasmith ; ``` python; import psi4; import numpy as np; np.set_printoptions(suppress=True, precision=4, linewidth=150). mol = psi4.geometry(""""""; O 0.000000000000 0.000000000000 -0.071143036192; H 0.000000000000 -0.758215806856 0.564545805801; H 0.000000000000 0.758215806856 0.564545805801; symmetry c1; """"""). psi4.set_options({""BASIS"": ""sto-3g"",; ""DFT_BLOCK_MAX_POINTS"": 2048,; ""DFT_BASIS_TOLERANCE"": 1.e-10}). method = ""HF""; e, wfn = psi4.energy(method, return_wfn=True); Da = np.array(wfn.Da()). # Vpot builder; _, wfn_V = psi4.energy(""SVWN"", return_wfn=True, molecule=mol); Vpot = wfn_V.V_potential(). points_func = Vpot.properties()[0]. # Loop over the blocks; nelectrons = 0.0; for b in range(Vpot.nblocks()):. # Metadata; block = Vpot.get_block(b); npoints = block.npoints(); lpos = np.array(block.functions_local_to_global()). # Obtain the grid weight; w = np.array(block.w()). # Compute phi!; points_func.compute_points(block); phi = np.array(points_func.basis_values()[""PHI""])[:npoints, :lpos.shape[0]]. # Build a local density; localDa = wfn.Da().np[(lpos[:, None], lpos)]. # Copmute rho; rho = 2.0 * np.einsum('pm,mn,pn->p', phi, localDa, phi, optimize=True); nelectrons += np.dot(w, rho); print(nelectrons); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311#issuecomment-435946428:1460,optimiz,optimize,1460,https://psicode.org,https://github.com/psi4/psi4/issues/1311#issuecomment-435946428,1,['optimiz'],['optimize']
Performance,"Sorry, busy week for me so I only just got a look at this problem. I got the scan to work with a few changes. First, your initial geometry has a dihedral of 180, but your initial step is 0, so that's an enormous perturbation to introduce through constraints; setting `start_angle = 181.0` sorts that out. I tried 180, but the optimizer seems to have problems when it gets too close to 180. I'm well out of my depth here, but I suspect [these](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/set_params.cc#L719-L732) mysterious constants play a role. What do you think, @psi-rking? I removed the `frozen_dihedral` command, but I don't know if that makes a difference or not. I also added `symmetry c1` to the molecule definition section, to make sure weird things don't happen as the symmetry changes. Your `geom_py` command didn't work, so I changed it to `print(c4h10.save_string_xyz())`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/647#issuecomment-288886460:326,optimiz,optimizer,326,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288886460,1,['optimiz'],['optimizer']
Performance,"Spherical Harmonics?: false; Max angular momentum: 2. ==> DFT Potential <==. => Composite Functional: SVWN <=. Slater exchange; Vosko, Wilk & Nusair (VWN5_RPA); P. A. M. Dirac, Math. Proc. Cambridge Philos. Soc. 26, 376 (1930) (10.1017/S0305004100016108); F. Bloch, Z. Phys. 57, 545 (1929) (10.1007/BF01340281); S. H. Vosko, L. Wilk, and M. Nusair, Can. J. Phys. 58, 1200 (1980) (10.1139/p80-159). Deriv = 1; GGA = FALSE; Meta = FALSE. Exchange Hybrid = FALSE; MP2 Hybrid = FALSE. => Exchange Functionals <=. 1.0000 XC_LDA_X. => Correlation Functionals <=. 1.0000 XC_LDA_C_VWN_RPA. => LibXC Density Thresholds <==. XC_LDA_C_VWN_RPA: 1.00E-15; XC_LDA_X: 1.00E-15. => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = NONE; Nuclear Scheme = TREUTLER. Blocking Scheme = OCTREE; BS radius alpha = 1; Pruning alpha = 1; Radial Points = 88; Spherical Points = 434; Total Points = 292072; Total Blocks = 2181; Max Points = 256; Max Functions = 60; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: DEF2-UNIVERSAL-JFIT; Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry C line 170 file /home/manas/psi4conda/share/psi4/basis/def2-universal-jfit.gbs; atoms 3-8 entry H line 17 file /home/manas/psi4conda/share/psi4/basis/def2-universal-jfit.gbs. ==> Integral Setup <==. DFHelper Memory: AOs need 0.007 GiB; user supplied 83.698 GiB. Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: No; wK tasked: No; OpenMP threads: 8; Memory [MiB]: 85706; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 0.0000; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: DEF2-UNIVERSAL-JFIT; Blend: DEF2-UNIVERSAL-JFIT; Number of shells: 60; Number of basis functions: 194; Number of Cartesian functions: 194; Spherical Harmonics?: false; Max angular momentum: 4. Cached 100.0% of DFT collocation blocks in 0.121 [GiB]. Minimum eigenvalue in the overlap matrix is 4.2926659058E-03.; Reciprocal condition number of the overlap matrix is 5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911:5456,Load,Loading,5456,https://psicode.org,https://github.com/psi4/psi4/issues/2911,1,['Load'],['Loading']
Performance,"Still fails with the current HEAD (Feb 26, 2015). ```; attempted to find atom at; -2.764295 -2.721319 2.493509; atom_map() throwing PsiException; Could not symmetrize geometry in OPT::MOLECULE::SYMMETRIZE_GEOM(). **** Optimization has failed! (in 2 steps) ****; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-189324724:218,Optimiz,Optimization,218,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-189324724,1,['Optimiz'],['Optimization']
Performance,"Suppose we are performing an IRC starting from a transition state that is very tightly converged. An IRC will converge to that transition state, rather than the minima. ## Psi4 Internals Explanation. optking.cc::349 will call the irc_step function beginning opt_data.cc::98. Now proceed to line opt_data.cc::221. The lines below that will return true if the molecule is converged. Because the transition state was tightly converged, the function will return true. **Comparison with a non-bugged case shows this is unexpected behavior.**. converged is true and this is an IRC type optimization, so we enter optking.cc::392, the point_converged function. molecule_irc_step.cc::83 shows this causes an IRC step to be taken immediately - before the energy or the gradient have been updated from the last step. OPTKING then sees we are not at the first step but the gradient is zero and assumes we have truly converged. It terminates the IRC. ## Previous Fix Attempts. I attempted to fix this just by having the IRC return false for Step 0 of an IRC, but in some cases I found that it would converge on Step 1 instead. We'll need a smarter way to make sure we don't converge to a TS, possibly checking for negative Hessian eigenvalues. I would do this myself, but after some of the other Optking issues I've run into this, this is much less of a personal priority. Hopefully, PyOptKing will automatically take care of this. ## Minimal Demonstration Files. Demonstrated for four atoms at the SCF level. Even including the Hessian calculation, this took less than two minutes on our cluster. [input.txt](https://github.com/psi4/psi4/files/1471977/input.txt); [output.txt](https://github.com/psi4/psi4/files/1471978/output.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/859:15,perform,performing,15,https://psicode.org,https://github.com/psi4/psi4/issues/859,2,"['optimiz', 'perform']","['optimization', 'performing']"
Performance,"Suspicious thing: the crash happens when `dpd_block_matrix` is called to allocate a 2612*12544 (~250 MiB) matrix, and it tries to ""Delete cache entries until there's enough memory or no more cache"". But that should not happen to begin with, especially with 16 GB of memory!. This means that _somehow_ this condition `((dpd_main.memory - dpd_main.memused) < size)` is evaluating `true`, when it probably should not. I am not sure why `dpd_block_matrix` uses this expression to check the amount of free memory instead of calling `dpd_memfree`:; ```; extern long int dpd_memfree() {; return dpd_main.memory - (dpd_main.memused - dpd_main.memcache + dpd_main.memlocked);; }; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1247399130:138,cache,cache,138,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1247399130,2,['cache'],['cache']
Performance,"TECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5381,Perform,Performing,5381,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,14,['Perform'],['Performing']
Performance,"TS optimization is possible, and following an excited state is possible. The main difficulty is psi4 is lacking cheap excited state methods with analytic gradients. So no CIS, and TDDFT would use finite-difference gradients. If it's EOM-CC2 or EOM-CCSD (or a well-characterized by docc/socc SCF), Psi can help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3106#issuecomment-1856814920:3,optimiz,optimization,3,https://psicode.org,https://github.com/psi4/psi4/issues/3106#issuecomment-1856814920,1,['optimiz'],['optimization']
Performance,Td Molecule Breaks Symmetry-Alignment with Ref. Axes During Optimization,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1474:60,Optimiz,Optimization,60,https://psicode.org,https://github.com/psi4/psi4/issues/1474,1,['Optimiz'],['Optimization']
Performance,"Thank you for suggesting the dev version. It worked without any further errors or warnings. Cheers!. That is a good point, David. In this case we just wanted to optimize the energy, not the structure, and we already had scripts to do so for larger molecules. Thank you for the heads-up!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995#issuecomment-682599493:161,optimiz,optimize,161,https://psicode.org,https://github.com/psi4/psi4/issues/1995#issuecomment-682599493,1,['optimiz'],['optimize']
Performance,"Thank you for the proposed changes! So the final code would look something like this?. ```; molecule mol_12_butadiene {; 0 1; C -1.743900000 -0.363600000 -0.000000000; C -0.552300000 0.557000000 -0.000100000; C 0.691500000 0.173100000 -0.000000000; C 1.934600000 -0.213400000 -0.000000000; H 2.475000000 -0.380600000 0.924600000; H 2.475400000 -0.380100000 -0.924300000; H -0.756100000 1.624500000 0.000500000; H -2.368000000 -0.187400000 0.878900000; H -1.437400000 -1.407900000 -0.000100000; H -2.368300000 -0.187200000 -0.878700000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; opt_coordinates cartesian; full_hess_every 0; freeze_core true ; }. set_memory(24000000000); try:; optimize('pwpb95-d3bj', hessian_with='pbe0-d3bj/def2-SV(P)'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj', hessian_with='pbe0-d3bj/def2-SV(P)'); E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. Regarding the frequency calculations, will the results be affected by a lower level of theory Hessian in the beginning? Or will the final results still be of desired level of theory?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020#issuecomment-712909670:749,optimiz,optimize,749,https://psicode.org,https://github.com/psi4/psi4/issues/2020#issuecomment-712909670,2,['optimiz'],['optimize']
Performance,"Thank you! I see the confusion. In plane wave methods and DFT textbooks, the DIIS (also known as density mixing) is performed on electron density for faster convergence. But it seems that in quantum chemistry the DIIS is performed on the Hamiltonian, and thus the density mixing (or update damping you mentioned) becomes optional?. In this case, my definition makes little sense, and I might need some reconsideration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3065#issuecomment-1783287520:116,perform,performed,116,https://psicode.org,https://github.com/psi4/psi4/issues/3065#issuecomment-1783287520,2,['perform'],['performed']
Performance,Thanks @andysim! The caching of conda is currently a bit idiotic: I am nuking `p4env` every time after a build succeeds. Probably we want to keep the conda environment in cache and just activate and update it. @loriab does that sound like a reasonable proposition? I'll tackle it in a subsequent PR.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1398#issuecomment-444493550:171,cache,cache,171,https://psicode.org,https://github.com/psi4/psi4/pull/1398#issuecomment-444493550,1,['cache'],['cache']
Performance,"Thanks @loriab for your detailed answer. In fact, I would like to do focal-point analyses for small molecules (including HF, MP2, CC, DBOC, and relativistic corrections) in a somewhat automated form. Psi4, which is able to execute MRCC and CFOUR, seems to me an optimal frame for this purpose (I saw that certain FPA schemes are already implemented in it). . The Psi4/Cfour route looks simpler for me. Basically I will use Cartesian coordinates, but in some cases it would be useful to do CCSD(T) optimizations via CFOUR (requiring internal coordinates). How to execute the solution you posted with Psi4? I tried to put it into a file `test.dat` and run `psi4 test.dat`, but -- after correcting the possible typo [`atomic_result.dict()` instead of `atomicresult.dict()`], I received the following error: . ```; {'error': {'error_message': 'QCEngine Execution Error:\n'; 'Traceback (most recent call last):\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/util.py"", '; 'line 114, in compute_wrapper\n'; ' yield metadata\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/compute.py"", '; 'line 91, in compute\n'; ' output_data = executor.compute(input_data, '; 'config)\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/programs/cfour/runner.py"", '; 'line 71, in compute\n'; ' job_inputs = self.build_input(input_model, '; 'config)\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/programs/cfour/runner.py"", '; 'line 137, in build_input\n'; ' cfourrec[""infiles""][""GENBAS""] = '; 'genbas.read_text()\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1236, in read_text\n'; "" with self.open(mode='r', encoding=encoding, ""; 'errors=errors) as f:\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1222, in open\n'; ' return io.open(self, mode, buffering, '; 'encoding, errors, newline,\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048:497,optimiz,optimizations,497,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048,1,['optimiz'],['optimizations']
Performance,"Thanks all for the feedback. I'll split this one in three: i) Vector/Matrix polish ii) C++14 constructs for pybind11 iii) Actual xtensor stuff (CI doesn't seem very happy about those :weary:) . @fevangelista xtensor is used only in the test for the `doublet`. I initially intended to swap the storage in `Vector` and `Matrix` to use xtensor, but that turned out to be quite hard (due to the extensive use of `pointer` basically everywhere in the code) The strategy now is to rewrite the storage object (I think that's largely done, though copy CTORs, assignment etc are missing) and the symmetry-aware operations (multiplies, diagonalization, etc) unit testing them on the way. The latter will take a bit of time, but it's also something that more people can work on concurrently, I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-449641931:767,concurren,concurrently,767,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-449641931,1,['concurren'],['concurrently']
Performance,"Thanks for a clear exposition of the problem. This is one that will be fixed as part of the in-progress integral overhaul. At one point we had a relatively slow integral transformation routine (which has since been sped up) and I experimented with a flag to allow the AO->SO transformation to incorporate the Cartesian->pure transformation also. That's what the `force_cartesian_` member of the integral code is for. Given that the transformation is no longer a performance concern in the integral code, the `include_pure_transform_` machinery will be remove and the petite list will only handle unitary AO->SO transformations, as originally intended.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1763#issuecomment-560457075:462,perform,performance,462,https://psicode.org,https://github.com/psi4/psi4/issues/1763#issuecomment-560457075,1,['perform'],['performance']
Performance,"Thanks for the clarification @amjames. I think the line at the docstring as you suggested might be better, but it would be even clearer if it explicitly mentions the possibility of non-zero data residing in the file/buffer?. The code I was looking at is here at [line 79-90](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccenergy/mp2_energy.cc). If I understand you though, this code would break if someone set `cachelevel = 0`? It makes no sense to take the dot product or direct product of zero arrays.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267468232:421,cache,cachelevel,421,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267468232,1,['cache'],['cachelevel']
Performance,"Thanks for the feedback, @CDSherrill, I'll fix it tomorrow. One quick point:. There are two ways to fix the geometry optimization issue:; - we can toggle `return_total_data=True` if `ptype != 'energy'` (meaning total G/H are calculated and returned); - or we can add the monomers-in-monomers if `ptype != 'energy'` (meaning E/G/H are available, but interaction energies are returned).; I don't think either of those is consistent with 1.3.2's behaviour, though!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-869894520:117,optimiz,optimization,117,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869894520,1,['optimiz'],['optimization']
Performance,"Thanks for the help!. FYI, I am on windows, but will run this in a Linux terminal if I get it working. I am getting conflicts when I try to install the yml file to a fresh env (see below). Is there an easier work around than this? I was able to pip install torsiondrive, but I get an error message relating to geometric? uninstalling and reinstalling geometric does not solve this. ```; FailedOperation(error=ComputeError(error_type='unknown', error_message='TorsionDrive error at 100:\ngeomeTRIC run_json error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\run_json.py"", line 269, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:687,optimiz,optimize,687,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020,7,"['Optimiz', 'optimiz']","['Optimize', 'optimize', 'optimizeGeometry', 'optimizer']"
Performance,"Thanks for the information!; > ; > orbital-optimized methods in `dfocc` are known for convergence issues, and trying to use frozen core makes them worse. I kinda thought you solved all the the DFOCC convergence issues recently, at great effort.; > ; > If you don't mind me asking, what are you trying to do?. I don't mind it at all, as long as you don't mind a long winded explanation. ;-) Also, I am mostly just poking around, trying to weigh my options.; Essentially I am looking for code that can do open-shell Brueckner coupled-cluster doubles with perturbative triples ( either RBCCD(T) or UBCCD(T) ), using an ROHF reference. We have recently published a [paper](https://doi.org/10.1039/C9CP07007A), where we found that the (T) contribution of BCCD(T) is much more stable than the (T) of CCSD(T) at geometries far from equilibrium, which is what we need a lot (about 1e+5 single point energies) of for our purposes. Unfortunately, open-shell Brueckner or OO coupled cluster does not seem to be a common feature in QC programs, so I am trying to survey which programs have open-shell capable OO methods. Also, a performant OMP2 or OMP2.5 implementation could potentially be useful for us, even if it does not directly solve the lack of an RBCCD(T) implementation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863#issuecomment-611917954:43,optimiz,optimized,43,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-611917954,2,"['optimiz', 'perform']","['optimized', 'performant']"
Performance,"Thanks for the inquiry. My impression has been that distributing a Py/C++ package through pypi was a bad idea b/c (1) if pip decided to compile rather than download, it'd take hours to build all the deps; (2) unless we vendor 1GB libraries, we'd have to maintain Libint2, gau2grid, Libxc all on pypi, all of which are C/C++; (3) no control of LAPACK implementations and no MKL, so unreliable performance. That said, I really haven't reassessed since the advent of wheels. Would your environment enable you to download the installer (an executable bash script like the Miniconda one)? Download, bash it, and psi4 is preinstalled. Or are docker or singularity images workable?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3091#issuecomment-1834765035:392,perform,performance,392,https://psicode.org,https://github.com/psi4/psi4/issues/3091#issuecomment-1834765035,1,['perform'],['performance']
Performance,"Thanks for the pointers from all of you, I feel I have a much better idea what to do. Btw: Great plugin system, but after thinking about it for a bit I am no longer too sure it is the best solution for this case. --. On first sight [snsmp2](https://github.com/DEShawResearch/sns-mp2/blob/master/snsmp2/) seems to be a good example project to orient along. So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:878,load,loaded,878,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584,1,['load'],['loaded']
Performance,"Thanks for the quick response, that makes sense!. >You're interested in MBIS CHARGES as standalone (w/o volumes and extents) to avoid the cost of all the atomic calcs since you don't need the volume?. Sort of the only bit I need is the charges and volumes but not the volume ratio so not the free atom calculations added in #2127. So basically the performance before that PR my idea would be that the ratios are only calculated if something like `MBIS RATIOS` is passed which like you say would also avoid the cost of the extra calculations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2272#issuecomment-896987117:348,perform,performance,348,https://psicode.org,https://github.com/psi4/psi4/issues/2272#issuecomment-896987117,1,['perform'],['performance']
Performance,"Thanks for the quick update! I did try a new conda environment and ran into the same problem, but I had a hunch conda might be using cached packages and I couldn't remember the command to clear them, so I tried using `python=3.7` and that works fine!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1984#issuecomment-678794270:133,cache,cached,133,https://psicode.org,https://github.com/psi4/psi4/issues/1984#issuecomment-678794270,1,['cache'],['cached']
Performance,"Thanks for the reply - I have suspected the existence of an error in DFT gradients for more than a year because I have previously seen unexpected behavior in geomeTRIC / Psi4 geometry optimizations of organic molecules using DFT (B3LYP-D3/DZVP) in which the optimization fails to converge and the structure from the optimization trajectory appears to be tumbling (see attached movie). The behavior is more common when running optimizations with constraints. I suspected the DFT contribution because there is some literature on the lack of rotational invariance in DFT energies due to the grid, but I had not tested a constrained optimization on the same system using HF. I haven't made an issue report for this problem because I felt I lacked a test case that was compelling enough. . I thought the current issue had the same root cause as the organic molecule constrained optimizations, but I might be wrong about that. If you are seeing the gradient error in HF then I agree the current issue is not likely due to the DFT contribution to the energy. . https://github.com/psi4/psi4/assets/1441560/80f2b42d-fed2-4667-809d-f3a2550603fb",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909:184,optimiz,optimizations,184,https://psicode.org,https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909,6,['optimiz'],"['optimization', 'optimizations']"
Performance,"Thanks for the report. I've been able to reproduce the crash. (I observe a fifth decimal place disagreement in DF-RKS SAD energy and a third decimal place disagreement in all iteration energies.) There are two things that worry me here:. 1. The crash itself. I struggle to imagine why the ADIIS optimization problem is so difficult to solve here.; 2. The abhorrent SCF energies. The energy jumps 138 hartrees after the guess! If I remember correctly, the SAD energy isn't the energy corresponding to a particular set of orbitals, but this is still astounding. @susilehtola may have some insight on this. I can poke on this, but the first step will be to try and reproduce this with a smaller system. I don't have access to 14 threads, so I'll have trouble running this repeatedly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1192851164:295,optimiz,optimization,295,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1192851164,1,['optimiz'],['optimization']
Performance,"Thanks for the update, @loriab, I appreciate it. At the moment, I'm running outside of `jupyter` and that is fine for now (I didn't have a chance to try installing `psi4` and `jupyter` into separate environments and then adjusting the latter's path to include `psi4` modules). . At the risk of going off topic, I have a tangentially related question. I'm trying to do a torsion scan to derive a potential energy surface and I believe that `psi4` is running really slowly, although since I don't have experience running `psi4`, I don't have a good baseline. I externally created the structures, so `psi4` is really just doing a geometry optimization with `set optking fixed_dihedral = ...` and single point energy for each file, one at a time. Without going into all the details, I'm running at a pretty low level of theory (in my opinion) of B3LYP/3-21G, and for the structures that converge, I'm seeing ~8 hours per file, after allocating 12 cores and 8 GB of memory to `psi4`. So my question is whether there is any speed or efficiency difference of calling the `psi4` executable directly from bash versus through Python / Psithon. . (As a comparative data point, I did the ""same"" calculation with Gaussian 09 on 16 cores and it completed the scan overnight. I say ""same"" because I let Gaussian do the hard work of scanning the dihedral itself, beginning from the initial coordinates instead of using separate files, and I used HF/6-31G.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-347710296:636,optimiz,optimization,636,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-347710296,1,['optimiz'],['optimization']
Performance,"Thanks kannon92 . I'm actually employing x2c. However, all of my multi-reference (CASPT2, NEVPT2) and DFT results were done with DKH correction. Therefore I would like to use DKH correction for CCSD(T) calculations performed by PSI4 (easy to get scf convergence in comparison to others). Of course the report will be ....",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/149#issuecomment-125218069:215,perform,performed,215,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-125218069,1,['perform'],['performed']
Performance,"Thanks loriab for your quick reply. I am working on a complex that contains Pd metal. It's a bit a large system. My input file looks like:. memory 2 GB; basis mybas{; assign 6-31+G**; assign Pd lanl2dz; }. set{; basis mybas; reference uhf; FREEZE_CORE True; maxiter 200; print_trajectory_xyz_file True; }. molecule {; 0 1; Here are my internal coordinates of the Pd-complex; }; m06_wfn= optimize('M06', return_wfn=True); molden(m06_wfn, 'm06_orbitals_opt.molden')",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1921#issuecomment-639966320:387,optimiz,optimize,387,https://psicode.org,https://github.com/psi4/psi4/issues/1921#issuecomment-639966320,1,['optimiz'],['optimize']
Performance,"Thanks, @jgonthier. Given that the Travis CI tests run every time somebody submits or merges a PR, we're going to be running that test a lot. If we don't see the problem again, it was probably just a strange artifact of the invalid read that was non-deterministic. If we keep seeing it after you have fixed that read, we probably just need to reduce the optimization level for that one routine. Either way, thanks for checking it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182875337:354,optimiz,optimization,354,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182875337,1,['optimiz'],['optimization']
Performance,"Thanks, will do in the future. Let me know if/when you hit snags using; this tool. It think it is far enough along that I should be able to solve; problems.; -Rollin. On Tue, Jul 5, 2016 at 1:42 PM, Daniel Smith notifications@github.com; wrote:. > Cool, this should give us a base to start playing around with automatic; > rigid body optimizations.; > ; > Also note you can do git pull --rebase upstream master to rebase in the; > master branch of upstream. This will help cut down on the number of merges; > that happen. You can always fall back to merging if needed of course.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/432#issuecomment-230565713, or mute; > the thread; > https://github.com/notifications/unsubscribe/ADguTBNCfxO8XJ3qFYJTy2GsyG5LBgPOks5qSqV4gaJpZM4JDw7x; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/432#issuecomment-230573225:334,optimiz,optimizations,334,https://psicode.org,https://github.com/psi4/psi4/pull/432#issuecomment-230573225,1,['optimiz'],['optimizations']
Performance,"That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; so this test case could be added to one of the other test categories, like; longtests, in principle. That said, the quicker the test runs (while testing the desired feature); the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; loosening the convergence criteria. David. On Monday, February 15, 2016, Daniel Smith notifications@github.com wrote:. > The current cap for ctest is 25 minutes on a single core. Is there any; > reason not to do this on a tiny basis like 6-31G or 3-21G?; > ; > This is just if you want the test case to be run routinely, there is; > nothing wrong with having extra long test cases that are only run if; > specifically requested.; > ; > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > ; > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > ; > > -Rollin; > > ; > > ## ; > > ; > > Dr. Rollin A. King; > > Professor and Chair of Chemistry; > > Bethel University; > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > ; > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <notifications@github.com; > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > wrote:; > > ; > > > I just removed opt10 from all ctest labels. Its still present, but will; > > > not run unless you specifically request it.; > > > ; > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > ; > > > > On Feb 15, 2016, at 9:27 AM, Justin Turney <notifications@github.com; > > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > > wrote:; > > > > ; > > > > Yeah, we should have that mechanism to leave it as a longertest.; > > > > Maybe; > > > > that's what @dgasmith https://github.com/dgasmith has already done.; > > > > ; > > > > —; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184429744:927,optimiz,optimization,927,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184429744,1,['optimiz'],['optimization']
Performance,"That does make some sense. And by this, I don't mean that it's ideal, just that it appears consistent about what we know about the chips. The main differences in M1 Pro and Max are not the CPU itself (unless you count the 8-core binned M1 Pro), but other things like the GPU core count and media encoders. The CPU itself is the same for the two chips. It seems like the extra memory bandwidth advertised for the M1 Max is somehow reserved for other parts of the chip, with the CPU memory bandwidth being about the same as that of the Pro. I don't see whether the author of the linked article used the 24 or 32 core GPU M1 Max model. I wonder how the CPU memory bandwidth would differ between the two models. i.e. whether getting the 24 core model ""frees up"" more bandwidth for the CPU or whether the total shared bandwidth is just decreased. Who knows. That seems like it would be a very expensive experiment at the very least. Another interesting question would be whether the M1 Pro CPU can fully utilize all 200 GB/s, or whether that's slashed in half as well. It seems like the 400 GB/s marketing claim has to come with this asterisk. It's a real shame that executives and marketing teams at large companies sometimes get in the way of the innovations their engineering teams produce, to the detriment of consumers and developers. EDIT: I also wonder if the memory bandwidth bottleneck is something that is built into in the silicon, or if somehow the operating system is making decisions as how to allocate memory to different parts of the chip. I think it's now possible to install Linux on M1:https://asahilinux.org/2021/10/progress-report-september-2021/, so I wonder if that would result in memory being allocated to the CPU differently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-956470448:1379,bottleneck,bottleneck,1379,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956470448,1,['bottleneck'],['bottleneck']
Performance,"That's a lot of package managers you've mentioned. :-). Judging from [ubuntu packages](https://packages.ubuntu.com/search?keywords=psi4&searchon=names&suite=all&section=all), the latest version available through `apt-get` is `v1.2.1`. Conda has `v1.3.2`. Unless the Linux package managers have adapted to conda while I wasn't looking, ubuntu is going to be running your system python (probably `/usr/bin/python`) not the conda distribution python. Presuming your apt-get psi4 is using system python, you should be able to apt-get install pytest. You'll want to run something like `which python psi4 pytest` to see if everything's where you expect. You're definitely better off installing a conda psi4 (either ""installer"" or ""conda"" from [here](https://admiring-tesla-08529a.netlify.com/installs/v132/)) because it's newer, optimized for more architectures, and uses a decent BLAS (MKL, not generic). psi4 pulls from the `defaults` and `psi4` channels, not `conda-forge`, but in any case, install time is trivial compared to calculation time. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1705#issuecomment-524453814:823,optimiz,optimized,823,https://psicode.org,https://github.com/psi4/psi4/issues/1705#issuecomment-524453814,1,['optimiz'],['optimized']
Performance,"That's indeed what I had in mind (in my third ansatz). Add a `qc_module` and a `select_adc` branching between `adcc` and the builtin. I guess one can just use `psi4.addons` in `select_adc` to query the availability of `adcc` before going into the branching. That was at least my idea so for. --. > Isn't the `mints.mo_eri` routine becoming quickly a bottleneck?. You mean because it's not parallel at the moment? Yes, that's indeed a problem and was a deal breaker for some of the things we wanted to try in the past ... I have already discussed this with @maxscheurer and he promised to have a look once we have gotten a few other things out of the way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547805180:350,bottleneck,bottleneck,350,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547805180,1,['bottleneck'],['bottleneck']
Performance,"The ""nightly"" build `conda install psi4 -c psi4/label/dev` for Linux/WSL is published and should be compatible with numpy `1.16.3`. I looked in sns-mp2 and didn't see the `np.load` culprit, so should be fine, but please let me know if not. Yeah, the ""nightly"" build _is_ nightly (unless I forget to toggle it on), but it's also an extension of our CI system, so it's catching extra things (in this most recent halt -- the Hessian CPHF threshold) from more tests and ecosystem integration. So appears sporadic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611#issuecomment-487403610:175,load,load,175,https://psicode.org,https://github.com/psi4/psi4/issues/1611#issuecomment-487403610,1,['load'],['load']
Performance,"The Jensen _pc_ basis sets [1-7] are analogous to the Dunning _cc_ basis sets and may be used in their place. They were designed to converge monotonically to the HF basis set limit, and have been shown to do so faster than the _cc_ basis sets for molecular and spectroscopic properties. [8]. Confusingly, the name pc-n actually refers to an n+1-zeta basis set, that is pc-2 is a triple-zeta basis set. aug-pc-n includes diffuse functions. pcseg-n is a segmented version of the pc-n basis sets, thus more computationally expensive. [9]. pcSseg-n is an even larger segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also **confirm** that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. Chem. Phys. 121, 3463 (2004).; [5] Frank Jensen, Polarization consistent basis sets. VI. The elements He, Li, Be, B, Ne, Na, Mg, Al, Ar, J. Phys. Chem. A 111, 11198 (2007).; [6] Frank Jensen, Polarization Consistent Basis Sets. VII. The Elements K, Ca, Ga, Ge, As, Se, B; r and Kr, J. Chem. Phys. 136, 094110 (2012).; [7] Frank Jensen, Polarization Consistent Basis Sets. VIII. The Transition Metals Sc-Zn, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/457#issuecomment-241120477:605,optimiz,optimized,605,https://psicode.org,https://github.com/psi4/psi4/pull/457#issuecomment-241120477,1,['optimiz'],['optimized']
Performance,"The Mac Eco error is probably a fluke -- I don't see any recent changes to dftd4-python. What do you think of defaulting this to OFF for the protection of plugins? I don't quite understand how they're behaving now with this. See below that it's warning but not erroring. I do think the cmake is slightly in error in that i'm not setting CXX_EXTENSIONS=OFF in the inner psi4/CMakeLists.txt. ```; 2024-03-25T14:45:09.8381208Z [67/68] Building Fortran object CMakeFiles/v2rdm_casscf.dir/focas_interface.F90.o; 2024-03-25T14:45:09.8382362Z /home/runner/work/psi4/psi4/objdir/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/src/v2rdm_casscf_external/focas_interface.F90:274:53:; 2024-03-25T14:45:09.8383299Z ; 2024-03-25T14:45:09.8383512Z 274 | max_dim = max(size(integrals_1,dim=1),nnz_d1,maxval(nnz_int)); 2024-03-25T14:45:09.8383966Z | 1; 2024-03-25T14:45:09.8384366Z Warning: GNU Extension: Different type kinds at (1); 2024-03-25T14:45:09.8385389Z /home/runner/work/psi4/psi4/objdir/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/src/v2rdm_casscf_external/focas_interface.F90:161:46:; 2024-03-25T14:45:09.8386144Z ; 2024-03-25T14:45:09.8386330Z 161 | max_dim = max(size(integrals_1,dim=1),maxval(nnz_int)); 2024-03-25T14:45:09.8386747Z | 1; 2024-03-25T14:45:09.8387135Z Warning: GNU Extension: Different type kinds at (1); 2024-03-25T14:45:09.8387546Z [68/68] Linking CXX shared module v2rdm_casscf.so; 2024-03-25T14:45:09.8404861Z [17/19] Performing install step for 'v2rdm_casscf_external'; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2018339447:1469,Perform,Performing,1469,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2018339447,1,['Perform'],['Performing']
Performance,"The MintsHelper function `ao_eri` returns through an internal function `ao_helper`, which does not have multi-thread support currently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3071#issuecomment-1802567966:104,multi-thread,multi-thread,104,https://psicode.org,https://github.com/psi4/psi4/issues/3071#issuecomment-1802567966,1,['multi-thread'],['multi-thread']
Performance,"The Python_EXECUTABLE setting at the top level isn't being propagated down to the libint2 build.; libint2 finds a different Python version and uses it. Multiple Python versions can be installed concurrently, and it is important that the same Python version is used everywhere.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2796:194,concurren,concurrently,194,https://psicode.org,https://github.com/psi4/psi4/issues/2796,1,['concurren'],['concurrently']
Performance,"The SAPT(DFT) module runs correctly using hybrid functionals like PBE0, but cannot be run with GGAs like PBE. I have used the commands:; _set {; scf_type df; sapt_dft_functional PBE; sapt_dft_do_dHF False; sapt_dft_grac_shift_a 0.12589; sapt_dft_grac_shift_b 0.12589; }_. to obtain PBE in this module, but this results in the error message:. _=> Auxiliary Basis Set <=; ; Basis Set: ANONYMOUS400E6A7D; Blend: AUG-CC-PVDZ-JKFIT + MB-SET-RI; Number of shells: 478; Number of basis function: 1452; Number of Cartesian functions: 1697; Spherical Harmonics?: true; Max angular momentum: 4; ; ; Traceback (most recent call last):; File ""/home/alston/Psi4/install/1.2-gcc/bin/psi4"", line 259, in <module>; exec(content); File ""<string>"", line 71, in <module>; File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 234, in run_sapt_dft; cache = sapt_jk_terms.build_sapt_jk_cache(wfn_A, wfn_B, sapt_jk, True); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_jk_terms.py"", line 108, in build_sapt_jk_cache; cache[""K_A""] = jk.K()[0].clone(); ; IndexError: list index out of range; ; *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4._. **Perhaps jk.K() is not filled for a GGA?** While GGAs are not expected to yield accurate SAPT(DFT) interaction energies it will be useful to have the ability to use them, if only for testing and benchmarking purposes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/911:1038,cache,cache,1038,https://psicode.org,https://github.com/psi4/psi4/issues/911,2,['cache'],['cache']
Performance,"The `dfocc` module has had problems converging MOs tightly. My experience with orbital optimization tells me the problem can be cured by coupling the DIIS iterations for orbital steps and amplitude steps, as is done in the `dct` module and in the `occ` module. There should be an option (I'd suggest making this the default option) to couple the DIIS steps, so examples like the following converge:. ```; molecule {; 1 2; units bohr; O 0.000000000000 0.000000000000 -0.143225816552; H 0.000000000000 1.638036840407 1.136548822547; H 0.000000000000 -1.638036840407 1.136548822547; }. set reference uhf ; set basis sto-3g; set MAX_MOGRAD_CONVERGENCE 8; set e_convergence 10. energy('omp2'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2215:87,optimiz,optimization,87,https://psicode.org,https://github.com/psi4/psi4/issues/2215,1,['optimiz'],['optimization']
Performance,"The `pip` numpy probably doesn't use MKL (you'd have to `otool -L` one of numpy's internal `.dylib`s to figure out where it's getting blas and what threading library it's using), so that can interact very badly (wrong answers or n-thread-dependent answers) with a psi4 that does use MKL. If your aim is solely psithon (running psi as executable), you may want to backtrack to before the triple export when ~all the testsuite besides the psiapi (start with json/psi4numpy/python) was working, run `which python psi4` to confirm you're running what you expect, check the multithreaded answers to make sure that's not wrong, then work with that until I get a recent nightly build up. What you're doing (Mac + GCC + indep numpy) should be perfectly do-able, but Psi needs MKL for best performance (and it's easy to get _wrong_ performance from other libs) and that means numpy needs to be MKL (whichever symbols of numpy or psi loaded first are what the other one has to use, so it's best if they're identical) so we encourage the conda groove for numpy. The psi4-dev (w/o --clang/intel/gcc) that Holger mentioned will help compiling with conda python, numpy, libint, etc. But it isn't powerful enough to counteract the gomp that gcc will try to impose.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-614809204:781,perform,performance,781,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614809204,3,"['load', 'perform']","['loaded', 'performance']"
Performance,"The argument would go that the gradient is correct, but the optimizer gives a new geometry that is so unnatural that the SCF can't be easily converged. The optimizer determines the next step based on more than just the current gradient. It also depends on the coordinate system in which it conducts the optimization, which is what setting `opt_coordinates` would change. There are some other things to look for (like messages about being unable to backtransform coordinates), but adding new things to try is premature.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-953189257:60,optimiz,optimizer,60,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953189257,3,['optimiz'],"['optimization', 'optimizer']"
Performance,"The atom vs shell loop structure is an open question of the PR:. > My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?. What is the effort of changing the loop structure and what would be the gain? A small-ish efficiency loss is IMO acceptable if the effort is large.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-992570345:138,perform,perform,138,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-992570345,1,['perform'],['perform']
Performance,"The cc-pVnZ-PP and aug-cc-pVnZ-PP series of basis sets, optimized for heavy elements are not available as built in basis sets.; These basis sets are available for most elements from Y to Rn, with the exceptions of alkali and alkaline earth metals, and lanthanides. They are optimized to be used with a small-core ECP that replaces only the inner core electrons, typically one from the Stuttgart-Köln ECP family. Beyond just adding the relevant basis set and ECP definitions there is also a question of ECP selection. Based on a quick look at the docs, currently ECP-optimized basis sets and ECPs are somewhat tied together. The (aug-)cc-pVnZ-PP series does not really fit into that picture, as there are multiple valid choices of ECP. So there should be some user-facing option for selecting the ECP. Also, many of the elements may not have appropriate auxiliary basis sets available, so if DF is the default for some methods, then they should probably switch to conventional/direct/incore instead of erroring out.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2697:56,optimiz,optimized,56,https://psicode.org,https://github.com/psi4/psi4/issues/2697,3,['optimiz'],['optimized']
Performance,"The code still needs to go through at least one iteration of the CC equations in order to confirm that the wfn it used from disk is actually converged. . ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Dec 5, 2013, at 3:13 AM, sbart76 notifications@github.com wrote:. > Well, there is a progress. I have set the filename and force_restart keywords. This results in:; > ; > ```; > **************************; > * *; > * CCENERGY *; > * *; > **************************; > ; > Nuclear Rep. energy (chkpt) = 327.121621300020024; > SCF energy (chkpt) = -1150.463735394306923; > Reference energy (file100) = -1150.463735394307605; > ; > Input parameters:; > -----------------; > Wave function = CC3; > Reference wfn = RHF; > Memory (Mbytes) = 8192.0; > Maxiter = 50; > R_Convergence = 1.0e-07; > E_Convergence = 1.0e-06; > Restart = Yes; > DIIS = Yes; > AO Basis = NONE; > ABCD = NEW; > Cache Level = 2; > Cache Type = LOW; > Print Level = 5; > Num. of threads = 8; > # Amps to Print = 10; > Print MP2 Amps? = No; > Analyze T2 Amps = No; > Print Pair Ener = No; > Local CC = No; > T3 Ws incore = No; > SCS-MP2 = False; > SCSN-MP2 = False; > SCS-CCSD = False; > ; > Using old T1 amplitudes.; > Solving CC Amplitude Equations; > ------------------------------; > ```; > ; > Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; > ; > ---; > ; > ```; > 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; > ```; > ; > So it seems to reuse the old T1 amplitudes, but still goes to solving the equations anyway - I was rather expecting it to skip this step - as this is the most time consuming part and there is nothing changed in the system since the crash.; > ; > Bartek; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/27#issuecomment-29895339:901,Cache,Cache,901,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29895339,2,['Cache'],['Cache']
Performance,"The community feedback for the GH ""merge queue"" beta is strongly pushing for different sets of ""required"" checks btwn PR and merge-queue into master. Hopefully that gets enacted, then I think the latter would be an excellent occasion to run full tests on local-hosted resources.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1841#issuecomment-1520901434:41,queue,queue,41,https://psicode.org,https://github.com/psi4/psi4/issues/1841#issuecomment-1520901434,2,['queue'],['queue']
Performance,"The context of this issue is that I got a report from @bennybp that a number of QCArchive geometry optimizations were failing, in which geomeTRIC was used to optimize the geometry by calling Psi4 (through QCEngine) for single point energies and gradients. The optimizations are part of a dataset of transition metal complexes with initial structures taken from the CSD / ICSD and pre-minimized with a semiempirical model. . Ben sent the QCArchive job specification to my student @hjnpark who converted it to a Psi4 input file (see attached input.dat in data.zip). Using this I was able to reproduce the optimization failure using geomeTRIC's command line calling Psi4 directly. We weren't sure whether the issue was due to geomeTRIC's optimization algorithm or an inaccuracy in the gradient from Psi4, so I computed the numerical gradient using finite difference of the energy and compared it with the analytic gradient. I found several components of the gradient where the difference exceeds 3e-4 and the largest difference exceeds 1e-3. The result is consistent when I use two different step sizes for the finite difference (1e-3 and 1e-4 a.u., both using central (3-point) finite difference; see fd-ana-grad.txt file in attached data.zip). By contrast, for a different system (a water dimer calculated at HF/STO-3G), the max difference between numerical and analytic gradients using a 1e-3 step size is around 1e-6. I've attached a picture where the numerical gradient, analytic gradient, and the difference are visualized. The difference is mainly on the La and Br atoms, with smaller components on the other atoms. These forces do not appear to be purely translational/rotational, but I think there is a translational/rotational component because the ""trajectory"" of the optimization appears to include some translational/rotational motion as well as distortion (attached qce_optim.xyz in data.zip). ![1](https://github.com/psi4/psi4/assets/1441560/e3dea159-d922-40c8-bad9-868b20f710e3). Although",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3066:99,optimiz,optimizations,99,https://psicode.org,https://github.com/psi4/psi4/issues/3066,5,['optimiz'],"['optimization', 'optimizations', 'optimize']"
Performance,"The correct detection of the D2h subgroup seems to depend on the orientation. In the attached input; are two different geometries at two different orienations, but both Oh symmetry. case 1 was symmetrized using the SYVA code after C1 optimization with DFT (https://www.sciencedirect.com/science/article/pii/S0010465517300310); case 2 was downloaded from a website about symmetry. (see input). input:; [oh.txt](https://github.com/psi4/psi4/files/2320825/oh.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1177:234,optimiz,optimization,234,https://psicode.org,https://github.com/psi4/psi4/issues/1177,1,['optimiz'],['optimization']
Performance,"The current DIIS code used in DF-OCC code fails if the size of the extrapolated quantity exceeds HUGE(int32) (sorry for the fortran syntax...). An example output including additional debug printout is; ```; ============================================================================== ; ================ Performing DF-OREMP iterations... =========================== ; ============================================================================== ; Minimizing DF-REMP-L Functional ; ------------------------------ ; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2 ; ---- --------------- ---------- ----------- ----------- ---------- ; 1 -2211.6030242185 -2.21e+03 1.77e-04 4.91e-03 2.60e-06 ; 2 -2211.6180646887 -1.50e-02 9.31e-05 3.61e-03 1.12e-06 ; Matrix::vector_dot: Size of vector 1: 124357188 ; Matrix::vector_dot: Size of vector 2: 4419324484 . Traceback (most recent call last):; File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 81, in <module>; File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/driver.py"", line 548, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/proc.py"", line 685, in select_lccd; return func(name, **kwargs); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/proc.py"", line 2095, in run_dfocc; dfocc_wfn = core.dfocc(ref_wfn); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/diis.py"", line 375, in extrapolate; coeffs = self.diis_coefficients(); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/diis.py"", line 254, in diis_coefficients; B[i, j] = self.get_dot_product(i, j); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/diis.py"", line 198, in get_dot_product; dot_product += Rix.vector_dot(Rjx). RuntimeError: ; Fatal Error: Matr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2591:305,Perform,Performing,305,https://psicode.org,https://github.com/psi4/psi4/issues/2591,1,['Perform'],['Performing']
Performance,"The current cap for ctest is 25 minutes on a single core. Is there any reason not to do this on a tiny basis like 6-31G or 3-21G?. This is just if you want the test case to be run routinely, there is nothing wrong with having extra long test cases that are only run if specifically requested. > On Feb 15, 2016, at 5:01 PM, Rollin King notifications@github.com wrote:; > ; > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > 1gb of memory. Is that short enough? If so, I'll commit the change.; > ; > -Rollin; > ; > ## ; > ; > Dr. Rollin A. King; > Professor and Chair of Chemistry; > Bethel University; > rking@bethel.edu; > ; > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith notifications@github.com; > wrote:; > ; > > I just removed opt10 from all ctest labels. Its still present, but will; > > not run unless you specifically request it.; > > ; > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > ; > > > On Feb 15, 2016, at 9:27 AM, Justin Turney notifications@github.com; > > > wrote:; > > > ; > > > Yeah, we should have that mechanism to leave it as a longertest. Maybe; > > > that's what @dgasmith https://github.com/dgasmith has already done.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub <; > > > https://github.com/psi4/psi4/issues/253#issuecomment-184228286>.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/253#issuecomment-184233000.; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/253#issuecomment-184413127.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184418683:395,optimiz,optimization,395,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184418683,1,['optimiz'],['optimization']
Performance,"The current code detected 4 different fragments for the extended CH3F.; Then it tried to connect them. It really should have been able to do so.; I don't see why it didn't work, and I'm looking for a bug. On Sun, Mar 13, 2016 at 2:00 PM, Lori A. Burns notifications@github.com; wrote:. > Certainly the flexibility of the optimizer oughtn't be reduced. In the; > absence of fixed/frozen keywords or user supplied/edited intco (do you need; > a keyword to signal do-read-intco instead of accepting any it finds?), it's; > probably reasonable to assume a full optimization is desired. Maybe grep; > '~' needs to catch a gradient.rms(), too, next to the optking-active rms; > gradient.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-196021110.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196036551:321,optimiz,optimizer,321,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196036551,2,['optimiz'],"['optimization', 'optimizer']"
Performance,"The direct link was initially problematic for me, but no longer. I suspect a DNS server got compromised, it was taken down, and now you're dealing with having to wait for the malicious information to clear out of all the various caches...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210019282:229,cache,caches,229,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210019282,1,['cache'],['caches']
Performance,"The driver recognizes optimize('scf') has UHF analytic gradients, but not optimize('uhf'). Make sure the driver can catch other ways of specifying the same computation, like optimize('uhf') or optimize('hf') (or else warn the user about the preferred way to specify things).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103:22,optimiz,optimize,22,https://psicode.org,https://github.com/psi4/psi4/issues/103,4,['optimiz'],['optimize']
Performance,"The easy thing to do is what we do [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/DirectJK.cc#L319) and create an integral computer for each thread in [the offending function](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/potentialint.h#L66-L195). We could get some very easy speed up this way, but it's not perfect. For better scalability, we need to do exactly what you suggest: rewrite the OS recursion code (which is quite ugly, old code that we inherited) and also make sure that the integral object has buffers for each thread, so that we don't have to duplicate them. If you want to pursue that, I think you'll find there's a lot of performance to be gained and I think you're very well suited to the task, given your recent foray into DFT threading.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1280#issuecomment-438256355:369,scalab,scalability,369,https://psicode.org,https://github.com/psi4/psi4/issues/1280#issuecomment-438256355,2,"['perform', 'scalab']","['performance', 'scalability']"
Performance,"The field integrals are not OMP parallel, no (we only ever evaluated them at nuclei before, so they were never a bottleneck). The easiest way to go is to make `buffer_` into a std::vector of buffers instead (one for each thread) and then use the appropriate one for each thread. That would probably be best done on a separate PR, but whatever is easiest for you is fine with me",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1671#issuecomment-505033362:113,bottleneck,bottleneck,113,https://psicode.org,https://github.com/psi4/psi4/pull/1671#issuecomment-505033362,1,['bottleneck'],['bottleneck']
Performance,"The following attempt at an IRC fails. The mode I'm following lowers symmetry from C2v to Cs:; ```import os; import shutil. memory 7 gb. molecule ts {; symmetry csx; 0 3; O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. r1 = 0.966761443523761; r2 = 3.122239629907337; a1 = 51.253600445125215; d1 = 180.000000000000000; r3 = 4.641761974905505; d2 = 0.000000000000000; }. hessname = ""output.ts.{}.hess"".format(os.getpid()); shutil.copy(""FCMFINAL"",hessname). set {; opt_type irc; irc_direction backward; basis aug-cc-pV(D+d)Z; maxiter 300; g_convergence gau_verytight; geom_maxiter 1000; cart_hess_read true; dynamic_level 1; reference uhf; irc_step_size 0.01; ensure_bt_convergence true; normal_modes_write true; print_trajectory_xyz_file true; }. energy = optimize('b3lyp'); ```. The problem is in the following snippet of output:; ```; @IRC; @IRC Point Sphere Step Energy DE MAX Force RMS Force MAX Disp RMS Disp; @IRC -----------------------------------------------------------------------------------------------------------; @IRC 1 1 -549.84523511 -1.42e-05 o 3.60e-03 9.91e-04 4.76e-03 2.20e-03 ~; -----------------------------------------------------------------------------------------------------------. Successfully symmetrized geometry.; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); O 0.0000000000 0.0006522925 -3.0256582351; H 0.0000000000 -0.7545860178 -2.4217783475; O 0.0000000000 0.0004273016 0.0969091320; H 0.0000000000 0.7536033792 -2.4213898491; S 0.0000000000 -0.0000969555 1.6158069683; --------------------------; OPTKING Finished Execution; --------------------------. Structure for next step:; Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. a1 = 51.3453210949; d1 = -180.0000000000; d2 = -0.0000000000; r1 = 0.9654406358; r2 = 3.1225673752; r3 = 4.6414652638. gradient() will perform analyti",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1126:766,optimiz,optimize,766,https://psicode.org,https://github.com/psi4/psi4/issues/1126,1,['optimiz'],['optimize']
Performance,"The following input crashes with a Segfault:. ```; molecule HeLi {; 	0 1; 	He 0.000000000 0.000000000 0.000000000; 	--; 	1 1; 	Li 3.300000000 0.000000000 0.000000000. 	units angstrom; 	no_reorient; }. set globals {; 	basis aug-cc-pVDZ; 	df_basis_scf aug-cc-pVDZ; 	df_basis_sapt aug-cc-pVDZ; 	df_basis_mp2 aug-cc-pVDZ; }. set_memory(32000000000); energy('sapt2+3(ccd)dmp2'); ```. ```; /home/apps/psi/psi4conda/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source ; libpcm.so.1 00002B46FE54BA15 Unknown Unknown Unknown; libpcm.so.1 00002B46FE549637 Unknown Unknown Unknown; ```; etcetera. Output stops suddenly:; ```; <snip>; ==> CCD Dispersion <==. Beginning Monomer A CCD. Iter Energy (H) dE (H) RMS (H); 1 -0.02083174 0.020831739 0.000000000; 2 -0.02587434 0.005042604 0.000504656; 3 -0.02710324 0.001228894 0.000126313; 4 -0.02740459 0.000301348 0.000031758; 5 -0.02747899 0.000074401 0.000008016 DIIS; 6 -0.02750358 0.000024596 0.000002027 DIIS; 7 -0.02750357 -0.000000016 0.000000004 DIIS; 8 -0.02750358 0.000000015 0.000000002 DIIS; 9 -0.02750358 0.000000001 0.000000000 DIIS. Beginning Monomer B CCD; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1564:466,load,loaded,466,https://psicode.org,https://github.com/psi4/psi4/issues/1564,1,['load'],['loaded']
Performance,"The following input file from [forums](http://forum.psicode.org/t/error-in-psio-wt-toclen/2234/5) gives a PSIO error `Error in PSIO_WT_TOCLEN()!` in up-to-date master. Reported said they could also reproduce with CCSD, but I haven't tried this myself. Setting `cachelevel 0` was a workaround, but not one that should be necessary. ```memory 5 gb. molecule = {; 0 2; Cl; O 1 R1; O 2 R2 1 A; R1=2.03230554; R2=1.20810395; A=115.36876732. }. set {; reference rohf; basis aug-cc-pwcvqz; print_MOs true; print 2; scf_type pk; guess sad; freeze_core -2; }. energy(‘bccd’); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261:261,cache,cachelevel,261,https://psicode.org,https://github.com/psi4/psi4/issues/2261,1,['cache'],['cachelevel']
Performance,"The following input segfaults:. ```; memory 16GB; molecule{; 0 2; C -1.309749745 1.180176173 -0.025170341; O -0.725300438 2.155147669 0.452713346; C -2.816719340 1.155998649 -0.110605975; H -3.220628949 1.262541455 0.893082386; H -3.209427538 0.248634016 -0.561900090; H -3.143158132 2.016595633 -0.688893115. units angstrom; symmetry c1; }. set{; basis def2-svp; reference uhf; DFCC False; Freeze_core True; CACHELEVEL 0; scf_type direct; print 2; }; set_num_threads(32). properties('ccsd',properties=['polarizability']); ```. I've been able to reproduce this on a serial run. My initial `lldb` run isn't giving reliable information, because it's confusing the various `MOInfo` objects defined in different `cc` modules.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2310:409,CACHE,CACHELEVEL,409,https://psicode.org,https://github.com/psi4/psi4/issues/2310,1,['CACHE'],['CACHELEVEL']
Performance,"The grepable '@ROHF' in each iteration is printed incorrectly as '@DF-ROHF' if running PK algorithm after a previous DF computation. Example (input file below):; ```; ==> Integral Setup <==. Using in-core PK algorithm.; Calculation information:; Number of atoms: 11; Number of AO shells: 90; Number of primitives: 196; Number of atomic orbitals: 285; Number of basis functions: 250. Integral cutoff 1.00e-12; Number of threads: 8. Performing in-core PK; Using 984422000 doubles for integral storage.; We computed 8218442 shell quartets total.; Whereas there are 8386560 unique shell quartets. ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory [MiB]: 11444; Schwarz Cutoff: 1E-12. OpenMP threads: 8. Minimum eigenvalue in the overlap matrix is 4.0355404199E-04.; Using Symmetric Orthogonalization. SCF Guess: Orbitals guess was supplied from a previous computation. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-ROHF iter 0: -341.07180740631509 -3.41072e+02 3.89250e-08; @DF-ROHF iter 1: -341.07180740660510 -2.90015e-10 2.49267e-06; @DF-ROHF iter 2: -341.07180758006677 -1.73462e-07 2.84695e-07 DIIS; ```; This input file produces the problem (edit: had the wrong molecule name). ```; memory 16 GB. molecule qr3 {; 0 2; O; C 1 1.24816; H 2 1.09517 1 120.2960; C 2 1.40976 1 123.9986 3 180.0; O 4 1.31711 2 123.7177 1 D1; O 5 1.41029 4 117.3948 2 D2; H 6 1.00462 5 103.4812 4 D3; C 4 1.48637 5 112.7653 2 180.0; H 8 1.08795 4 109.7238 2 0.00; H 8 1.09123 9 109.0482 4 -121.2; H 8 1.09132 9 109.0157 4 121.2; }. qr3.D1 = 0.0; qr3.D2 = 0.0; qr3.D3 = 0.0; qr3.update_geometry(). set {; basis cc-pvtz; reference uhf; }. set scf {; scf_type df; stability_analysis follow; soscf true; soscf_max_iter 20; max_attempts 5; }. energy('scf'). set scf {; reference rohf; guess read; stability_analysis none; }. energy('scf'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1503:431,Perform,Performing,431,https://psicode.org,https://github.com/psi4/psi4/issues/1503,1,['Perform'],['Performing']
Performance,"The integration runs some checks on PRs, notably that C++ code style conforms to `.clang-format`. ## Description; [Danger.Systems](http://danger.systems/ruby/) provides a DSL to perform checks on PRs. It's a Ruby gem that runs on Travis, reads the `Dangerfile` and comments on a PR through a bot.; The current version of the `Dangerfile`:; 1. **Fails PR** if C++ code style does not comply with `.clang-format`; 1. **Fails PR** if Python code style does not comply with `.style.yapf`; 2. **Warns** if PR is classed as work in progress, _i.e._ contains `[WIP]` in the title; 3. **Warns** if PR is classed as trivial, _i.e._ contains `#trivial` in the title; 4. **Fails PR** if there are merge commits in the history; 5. **Warns** if PR introduced code changes (in subdirectories `psi4`, `external`, `cmake`) without adding tests and/or docs. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Integrate with Danger.Systems; - [x] Danger checks that C++ code style complies with `.clang-format`; - [x] Clean up `.travis.yml` from now useless PPA; - [x] Ignore `build*` directories; - [x] Danger checks that Python code style complies with `.style.yapf`; - [x] Enabled caching of some dependencies on Travis. ## Questions; 1. I think it's better to pull this in once `clang-format` has been run over the whole code base.; 2. Where is a good place to document the behavior of the bot?; 3. Are the commented sections in `.travis.yml` supposed to be there for future use?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/809:178,perform,perform,178,https://psicode.org,https://github.com/psi4/psi4/pull/809,1,['perform'],['perform']
Performance,"The key is to include `-Wp,-D_GLIBCXX_ASSERTIONS ` in the compile flags. The backtrace is not very informative; ```; (gdb) bt; #0 0x00007fabfd87cb22 in xc_func_init () from /home/susi/.conda/envs/p4env/lib/libxc.so.12; #1 0x00007fac0c8ce261 in psi::LibXCFunctional::LibXCFunctional (this=0x55ff95e75e20, xc_name=..., unpolarized=<optimized out>); at /home/susi/.conda/envs/p4env/lib/gcc/x86_64-conda-linux-gnu/14.1.0/include/c++/bits/unique_ptr.h:193; #2 0x00007fac0c8d632b in psi::SuperFunctional::XC_build (name=..., unpolarized=<optimized out>, tweakers_=...); at /home/susi/.conda/envs/p4env/lib/gcc/x86_64-conda-linux-gnu/14.1.0/include/c++/bits/basic_string.tcc:242; #3 0x00007fac0b82e3cf in pybind11::detail::argument_loader<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::optional<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, double, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > > > const&>::call_impl<std::shared_ptr<psi::SuperFunctional>, std::shared_ptr<psi::SuperFunctional> (*&)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::optional<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, double, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > > > const&), 0ul, 1ul, 2ul, pybind11::detail::void_type>(std::shared_ptr<psi::SuperFunctional> (*&)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::optional<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, double, std::less<std::__cxx11::basic_string<",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:330,optimiz,optimized,330,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"The lines you highlighted are completely valid since within [`dirprod`](https://github.com/psi4/psi4/blob/9618f2716c4ff16a6c48276bcd8e4b96adc29fec/psi4/src/psi4/libdpd/buf4_dirprd.cc#L55) for example:; - **lines 55+56**: memory is allocated for the elements of each tensor (one irrep at a time) , ; - **lines 57+58**: The elements are read from the file and used to populate the memory we just allocated ; - ** line 60**: the operation is performed for the block (irrep) we are working with.; - **line 63**: The modified elements are written back to disk, replacing the data that was read in on line 56; - **lines 64 + 65**: The memory for this irrep is freed. This is why I want to move away from talking about data at all in the comment string, `buf4_init` is not responsible for initializing the ""data"" you are talking about. That is by *design* so that operations can be performed over the tensors in chunks like I have outlined in the part above. The buffer holds the information necessary to get that data, *when it is explicitly told to*. . I am sorry for not being clear, but this stuff is very easy to get lost in. I meant that trying to access tensor elements directly after calling `buf4_init`. Getting back to the subject of this PR: . 1. Lets leave the comments in `file4_init` alone, since the `buf4/file2_init` functions are the ones being used externally, `file4_init`s are usually only found w/in DPD itself as far as I know.. ; 2. In `buf4_init()` and `file2_init()` We can put note/warning separate from the description of `label`, something to the tune of ; > Make sure that you use the correct `label` and `inputfile` if you *intend* to read from or write to an existing quantity on disk. If you *intend* to populate a new quantity on disk, ensure that the `label` is not already used in `inputfile`. PSIO::tocprint(int filenum) can be used to display the current list of labels in use in the outputfile. . BTW: That last hint is particularly useful for debugging I/O related erro",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267512911:439,perform,performed,439,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267512911,2,['perform'],['performed']
Performance,"The occupations in the CC code are just fine; we were fooled by formatting. Here's what I get when I try Holger's input.; ```; IRREP # MOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; Ag 3 0 3 0 0 0 ; B1g 0 0 0 0 0 0 ; B2g 1 0 0 1 0 0 ; B3g 1 0 0 1 0 0 ; Au 0 0 0 0 0 0 ; B1u 3 0 2 0 1 0 ; B2u 1 0 1 0 0 0 ; B3u 1 0 1 0 0 0 ; ```. The formatting is a bit strange, but you can see that all the numbers check out. And comparing against Holger's original report, shift the labels one column right, and everything makes sense again. When I put this in the debugger, it gives me:; ```; * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x0); frame #0: 0x00000001031e2aa6 core.cpython-37m-darwin.so`psi::cchbar::WaBeI_UHF() at Wabei_BABA_UHF.cc:106:66; 103 	 int e = moinfo.bvir_off[Ge] + EE;; 104 	 global_dpd_->buf4_mat_irrep_rd_block(&B, Gef, B.row_offset[Gef][e], moinfo.avirtpi[Gf]);; 105 	 global_dpd_->buf4_mat_irrep_rd_block(&W, Gei, W.row_offset[Gei][e], moinfo.aoccpi[Gi]);; -> 106 	 C_DGEMM('n', 'n', nrows, ncols, nlinks, 1.0, T1.matrix[Gi][0], nlinks, B.matrix[Gef][0], ncols, 1.0,; 107 	 W.matrix[Gei][0], ncols);; 108 	 global_dpd_->buf4_mat_irrep_wrt_block(&W, Gei, W.row_offset[Gei][e], moinfo.aoccpi[Gi]);; 109 	 }; Target 0: (python) stopped.; ```. with the T1 highlighted. So if anybody wants to investigate further, there's a lead for you. Since the occupations are fine, I'm moving this off my to-do list.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1966#issuecomment-661836134:633,queue,queue,633,https://psicode.org,https://github.com/psi4/psi4/issues/1966#issuecomment-661836134,1,['queue'],['queue']
Performance,"The only thing worth hanging onto might be the bakerjcc93. But if we've; got that database otherwise available, then deletion fine with me. On Fri, Apr 22, 2022 at 11:14 AM Lori A. Burns ***@***.***>; wrote:. > after #2549 <https://github.com/psi4/psi4/pull/2549>, the list from python; > tester.py looks like the below. Most of these are easily healed by; > figuring out if they're intended to be a test or not. Nots should be; > removed to an attic or deleted. Also related is #2234; > <https://github.com/psi4/psi4/issues/2234> . don't rely on the below --; > rerun tester.py as needed.; >; > @psi-rking <https://github.com/psi-rking>, do you prefer attic or; > deletion for the un-run optimizer tests?; > Complaints; >; > - 1. cc5: missing cmake directory registration. vi CMakeLists.txt; > - 2. cookbook/manual-sow-reap: missing cmake directory registration. vi; > cookbook/CMakeLists.txt; > - 3. cookbook/manual-sow-reap: missing CMakeLists. vi; > cookbook/manual-sow-reap/CMakeLists.txt; > - 4. dfmp2-freq1: missing cmake directory registration. vi; > CMakeLists.txt; > - 5. dfmp2-freq2: missing cmake directory registration. vi; > CMakeLists.txt; > - 6. dfomp2p5-1: missing ctest registration. vi; > dfomp2p5-1/CMakeLists.txt; > - 7. dfomp2p5-2: missing ctest registration. vi; > dfomp2p5-2/CMakeLists.txt; > - 8. dfomp2p5-grad1: missing ctest registration. vi; > dfomp2p5-grad1/CMakeLists.txt; > - 9. dfomp2p5-grad2: missing ctest registration. vi; > dfomp2p5-grad2/CMakeLists.txt; > - 10. dft-dldf: missing cmake directory registration. vi CMakeLists.txt; > - 11. dft-dsd: missing cmake directory registration. vi CMakeLists.txt; > - 12. dft-pbe0-2: missing cmake directory registration. vi; > CMakeLists.txt; > - 13. explicit-am-basis: mismatched directory (explicit-am-basis) and; > ctest registration name (explicit_am_basis). vi; > explicit-am-basis/CMakeLists.txt; > - 14. fsapt-diff1: missing cmake directory registration. vi; > CMakeLists.txt; > - 15. fsapt-diff1: missing CMakeLists.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:689,optimiz,optimizer,689,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['optimiz'],['optimizer']
Performance,"The optimizer is not creating covalent bond coordinates for the C-H; distances which in the latter geometry are 1.8 Angstroms. The optimizer; tried to loosen the criterian for bonding until everything was bonded to; something, but not successfully coordinating the full system. So the; system is underdetermined in internal coordinates (take a look at the; coordinate list in the output). If one wants to add bonds for unusual distances you can do it with, in this; case,. covalent_connect 1.8 # default is 1.3. For more detailed control, the intco file can be modified. On Sat, Mar 12, 2016 at 2:32 AM, Lori A. Burns notifications@github.com; wrote:. > @psi-rking https://github.com/psi-rking, why is my gradient non-zero at; > the end of a successful geometry optimization, please? Below is runable; > input file with details of problem.; > ; > # these are the conditions, a purely conventional (we're going to be; > ; > # comparing to Q-Chem) MP2/cc-pVTZ optimization; > ; > set basis cc-pvtz; > set g_convergence gau_verytight; > set scf_type pk; > set mp2_type conv; > set guess sad; > set freeze_core false; > ; > # the gradient that any fully optimized molecule should match, more or less; > ; > zerograd = psi4.Matrix(5,3); > refgrad = [; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0]]; > zerograd.set(refgrad); > ; > # this is the first system, a fluoromethane that looks pretty good to the eye; > ; > # zmat version, normz; > ; > molecule normz {; > C; > H 1 1.2; > H 1 1.2 2 104; > H 1 1.2 2 105 3 120; > F 1 1.3 2 106 4 121; > }; > ; > # reference start NRE, E, G; > ; > norm_nre_start = 37.6824945882 # Q-Chem; > norm_e_start = -139.5307182946 # Q-Chem; > norm_g_start = psi4.Matrix(5, 3) # Q-Chem; > contents = [ # have to swap x & y, and -x; > [ -0.07990533, -0.00642920, -0.00348020, 0.04874047, 0.04107426],; > [ -0.04900557, -0.00240633, 0.05677652, -0.03006882, 0.02470420],; > [ -0.06715450, 0.05113530, -0.00508959, -0.0064",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-195966638:4,optimiz,optimizer,4,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638,3,['optimiz'],"['optimization', 'optimizer']"
Performance,"The parallel work in Psi4 was in an Intel development environment, and with that `MKL` reference in your error, looks like that might have been hard-coded. If you don't have MKL to build against, you could also consider the binary that has high-quality math libs baked in (but does have processor optimizations turned off, which may or may not be relevant depending on the age/homogeneity of your HPC env).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/411#issuecomment-226018652:297,optimiz,optimizations,297,https://psicode.org,https://github.com/psi4/psi4/issues/411#issuecomment-226018652,1,['optimiz'],['optimizations']
Performance,"The test `pywrap-opt-sowreap` is failing for me with the following error message:. ```; Performing finite difference calculations; 5 displacements needed ...; An error has occurred Py-side; Traceback:; <type 'exceptions.TypeError'>: 'float' object is not iterable: File ""<string>"", line 25, in <module>. File ""/home/avcopan/Documents/code/github/psi4/share/python/driver.py"", line 1158, in optimize; G, wfn = gradient(name, return_wfn=True, molecule=moleculeclone, **kwargs). ```. I did some poking around and it looks like the problem is that this code (see [here](https://github.com/psi4/psi4/blob/master/share/python/driver.py#L1153)):. ```; def optimize(name, **kwargs):; # ...; G, wfn = gradient(name, return_wfn=True, molecule=moleculeclone, **kwargs); psi4.set_gradient(G); thisenergy = psi4.get_variable('CURRENT ENERGY'); ```. breaks when gradient is called in sow-reap mode because it returns `0.0` rather than a matrix-wavefunction tuple (see [here](https://github.com/psi4/psi4/blob/master/share/python/driver.py#L843)):. ```; def gradient(name, **kwargs):; # ...; if dertype == 1:; # ...; else:; # ...; if (opt_mode.lower() == 'sow'):; optstash.restore(); return 0.0; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/291:88,Perform,Performing,88,https://psicode.org,https://github.com/psi4/psi4/issues/291,3,"['Perform', 'optimiz']","['Performing', 'optimize']"
Performance,"The test case is trying to figure out whether or not a linear dependency messes up the calculation. It appears that the linear dependency is not messing up the calculation and the issue is that the final energies do not match. At some point the optimizer must have changed and as a result the energies no longer match to five decimal places, but rather to only three. I loosened the check to three decimal places. Commit 3bc5f146dfbbc6a09d9ccbe034f2ffdd7d32d6e9 fixes this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/125#issuecomment-121739386:245,optimiz,optimizer,245,https://psicode.org,https://github.com/psi4/psi4/issues/125#issuecomment-121739386,1,['optimiz'],['optimizer']
Performance,"The test that is currently failing is a test in `gcp/pbeh3c/`. This is due to an optking side issue where the `CustomHelper` class being used by optking is not accepting a `psi4.core.Molecule` the type checking was looking for `qcdb.Molecule`. As a backup optking defaulted to psi4's active molecule. This is the call.; `E = optimize('pbeh3c/def2-msvp', molecule=unopethene)`. optking takes the molecule here in the driver and uses a default fallback instead: ; ` opt_object = optking.opt_helper.CustomHelper(molecule, params=optimizer_params)`. The type check will get changed in optking to include `core.Molecule`. An alternative question this raises for me is whether the active_molecule should get updated at some point in the optimization. Updating the active molecule patches the issue but is that desired?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1259849511:325,optimiz,optimize,325,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1259849511,2,['optimiz'],"['optimization', 'optimize']"
Performance,"The two bottlenecks that you have identified are the computation of the ESP at the tesserae and then computing the contribution of the resulting charges back to the Fock matrix. Both terms use the exact same one-electron potential integrals, which are not very efficient in the current version and are computed in serial. The serial performance issue is addressed in #592, but we can probably do even more improvement of the OS recursions to speed up these one electron ints, whose cost is negligible in regular QM calcs. Unlike explicit water QM/MM runs, we can't really do much by way of screening here I don't think, but I haven't pursued that. A simple OpenMP parallelization will go a long we here, however. I'm also looking into how to implement ddCosmo as a backend; although PCMSolver is not the bottleneck here, it'd be really helpful to have analytic gradients with implicit solvent.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1280#issuecomment-438810742:8,bottleneck,bottlenecks,8,https://psicode.org,https://github.com/psi4/psi4/issues/1280#issuecomment-438810742,3,"['bottleneck', 'perform']","['bottleneck', 'bottlenecks', 'performance']"
Performance,"The unfortunate answer is Psi4's support for atoms past krypton (perhaps a bit optimistic) is very limited. In short this stems from our inability to handle effective core potentials. We are currently discussing how to better address this for the next major release of Psi4, which is likely a long ways away; however, in the meantime I think what you want to do is not possible with Psi4. My recommendation is to consider the Q-Chem package, which is also capable of performing SAPT (energy decomposition) and does have support for atoms past krypton.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/76#issuecomment-78986839:467,perform,performing,467,https://psicode.org,https://github.com/psi4/psi4/issues/76#issuecomment-78986839,1,['perform'],['performing']
Performance,"Then may I also suggest turning off the cache entirely? It was a good idea in theory, but it leads to memory fragmentation and eventually calculations crash due to allocation errors. It's possible that this problem is manifested in the crash you're observing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1246009485:40,cache,cache,40,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1246009485,1,['cache'],['cache']
Performance,"There have been reports of troubled SCF optimizations from within @fevangelista's group. As an attempt to put these to rest, I'll be implementing [EDIIS](https://aip.scitation.org/doi/pdf/10.1063/1.1470195) and making DIIS + EDIIS the default. DIIS + EDIIS is a standard SCF convergence technique, used to great effect by a certain code I'm not going to name. Welcome to 2021, Psi4. Due to potential merge conflicts with #2225, that PR should come in first. Because [this week is the target for 1.4](https://github.com/psi4/psi4/pull/2154#issuecomment-870728272), this is slated for 1.5. Pinging @jturney and @susilehtola as other interested parties.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235:40,optimiz,optimizations,40,https://psicode.org,https://github.com/psi4/psi4/issues/2235,1,['optimiz'],['optimizations']
Performance,"There's a rebuild of all the psi4 packages up (build `_2`) including `osx_arm64`. * **Please test `osx_arm64`**. These are build by cross-compile and in a direction that can't be emulated, so they have _never been run_. ; * You can run the full test suite through pytest. Point it at `pytest $CONDA_PREFIX/lib/python*/site-packages/psi4/tests/`. Especially test threaded (but be aware of #2941 expected failures (also cc44, but that's behaving correctly to fail)).; * Be aware that c-f encourages packages to be built against a generic blas/lapack, so the user can select the blas implementation at runtime. (directions at https://conda-forge.org/docs/maintainer/knowledge_base.html#switching-blas-implementation); * Usual archs `linux-64`, `osx-64`, `win-64` _don't_ do as encouraged above and instead link directly to MKL since we didn't want to switch expectations and performance that drastically. But Intel MKL isn't available for `osx-arm64` (quelle suprise). So I did the generic blas/lapack setup for this arch. You can choose `libblas=*=*openblas` or `libblas=*=*accelerate` for this arch. I'd be curious to hear about both. You'll get openblas if you don't specify.; * I've tested openblas on linux-64, and as long as you choose the openmp openblas variant, not the pthreads one, it works correctly (only the openmp variant is available for `osx-arm64`, so all's well). Timings were ~5% slower over MKL, so operable and perfectly respectable. I didn't test the SAPT jobs that iirc were the trouble with openblas before.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1529304015:872,perform,performance,872,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1529304015,1,['perform'],['performance']
Performance,"There's another problem: using the standard Python search, I get the error; ```; -- Found HDF5: /usr/lib64/libhdf5.so;... (found version 1.12.1); -- Performing Test HAS_FLTO; -- Performing Test HAS_FLTO - Success; -- Found pybind11: /usr/include (found version 2.11.1); -- Found CheMPS2: /usr/lib64/libchemps2.so.3 (found version 1.8.9); -- Found gau2grid: /usr/lib64/libgg.so.1 (found version 1.3.1); CMake Error at cmake/FindPythonModule.cmake:82 (if):; if given arguments:; ""STREQUAL"" ""True""; Unknown arguments specified; Call Stack (most recent call first):; external/upstream/qcelemental/CMakeLists.txt:3 (find_python_module); -- Configuring incomplete, errors occurred!; RPM build errors:; error: Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Child return code was: 1; ```; and sure enough ; ```; external/upstream/qcelemental/CMakeLists.txt: include(FindPythonModule); external/downstream/snsmp2/CMakeLists.txt: include(FindPythonModule); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491:149,Perform,Performing,149,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491,2,['Perform'],['Performing']
Performance,"There's some `xrange` that py3 wants converted to `range`. They don't look to be over big lists, so shouldn't hurt py2 performance. Py2 problem is . ```. Transforming MOs to the semicanonical basis; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/proc.py"", line 4340, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 409, in mcscf_solver; build_semicanonical_mos(ciwfn); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 91, in build_semicanonical_mos; Cnew = core.Matrix.doublet(ciwfn.Ca(), U, False, False); RuntimeError: ; Fatal Error: Matrix::doublet: Dimension mismatch; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-304462078:119,perform,performance,119,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304462078,1,['perform'],['performance']
Performance,These are the lowest eigenvalues of the electronic Hessian showing you that you are not in a minimum. ; You can either search for a SCF guess that works or run it as a UHF calculation and use the `follow` keyword. Compiling on mac is fine but multi-threading might not work well. I also use a mac. You might want do this: http://psicode.org/psi4manual/master/conda.html?highlight=advisor#how-to-use-conda-to-compile-psi4-faster-and-easier; The `psi4-dev` package can be installed to your existing psi4 dev version from psi4/label/dev. It installs compilers and needed libraries.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1878#issuecomment-623964793:243,multi-thread,multi-threading,243,https://psicode.org,https://github.com/psi4/psi4/issues/1878#issuecomment-623964793,1,['multi-thread'],['multi-threading']
Performance,"They will be when pyvib2 branch PR goes in. . Sent from my iPhone. > On Mar 19, 2018, at 6:10 AM, Raimondas Galvelis <notifications@github.com> wrote:; > ; > Optimize and compute vibrational frequencies of a molecule:; > ; > # test.py; > import psi4; > ; > print(psi4.__version__); > ; > psi4.geometry('H -0.4 0 0\nH 0.4 0 0'); > psi4.opt('HF/3-21G'); > _, wfn = psi4.freq('HF/3-21G', return_wfn=True); > ; > print(wfn.hessian().to_array()); > print(wfn.frequencies().to_array()); > print(wfn.normalmodes()); > The hessian matrix and frequencies are in Wafefucntion object, as expected, but the normal mode vectors are missing, i.e. wfn.normalmodes() return None.; > ; > $ python test.py ; > 1.2a1.dev781; > ; > ... skipped ...; > ; > [[ 4.13907957e-01 -1.38565530e-17 -9.84797134e-18 -4.13907957e-01; > 1.38565530e-17 9.84797134e-18]; > [-1.38565530e-17 -7.17030485e-05 5.29623161e-18 1.38565530e-17; > 7.17030485e-05 -5.29623161e-18]; > [-9.84797134e-18 5.29623161e-18 -7.17030485e-05 9.84797134e-18; > -5.29623161e-18 7.17030485e-05]; > [-4.13907957e-01 1.38565530e-17 9.84797134e-18 4.13907957e-01; > -1.38565530e-17 -9.84797134e-18]; > [ 1.38565530e-17 7.17030485e-05 -5.29623161e-18 -1.38565530e-17; > -7.17030485e-05 5.29623161e-18]; > [ 9.84797134e-18 -5.29623161e-18 7.17030485e-05 -9.84797134e-18; > 5.29623161e-18 -7.17030485e-05]]; > [4658.84858151]; > None; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/940#issuecomment-374186796:158,Optimiz,Optimize,158,https://psicode.org,https://github.com/psi4/psi4/issues/940#issuecomment-374186796,1,['Optimiz'],['Optimize']
Performance,"This PR solves one clear lack-of-threading problem with MKL. But we've had hints of a more elusive one where threading-or-not depends on MKL library load order. Be on the looking for this. To check both threads issues, I've checked in a timings script (originally Daniel's) [here](https://raw.githubusercontent.com/loriab/psi4/b381e6c0865f3e47986044a409e4c7e7b1f21757/tests/python/threading/input.py) to compare p4 vs np threading and n1 vs nmax threading.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615#issuecomment-279194347:149,load,load,149,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-279194347,1,['load'],['load']
Performance,This adds a CMAke patch to lower the optimization flags for a particular file to work around a compiler crash icc 18.0.1 discussed in #923.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/925:37,optimiz,optimization,37,https://psicode.org,https://github.com/psi4/psi4/pull/925,1,['optimiz'],['optimization']
Performance,"This advice is fine. Try `opt_coordinates = 'cartesian'` (which worked for me); But I just tried with the psi4 on my macbook 1.4rc3.dev3, and the optimization ran perfectly smoothly. Also, there is a confusingly named but powerful keyword `dynamic_level = 1`. This will cause alternative optimization algorithm to run if the first one fails.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2208#issuecomment-868809362:146,optimiz,optimization,146,https://psicode.org,https://github.com/psi4/psi4/issues/2208#issuecomment-868809362,2,['optimiz'],['optimization']
Performance,"This also needs to be marked ""bug fix"". Without this PR, `full_hess_every` is broken for fc-MP2 optimizations because `dertype` isn't propagating correctly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1551#issuecomment-466447944:96,optimiz,optimizations,96,https://psicode.org,https://github.com/psi4/psi4/pull/1551#issuecomment-466447944,1,['optimiz'],['optimizations']
Performance,"This erratic behavior is caused by several problems in the optimizer (one of which being the maximum step size getting needlessly scaled down). However, I believe I've solved all the problems and can now generate a nice, smooth torsional potential curve in C2 symmetry. I'll push the fix soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-202110158:59,optimiz,optimizer,59,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-202110158,1,['optimiz'],['optimizer']
Performance,"This has another annoying consequence, noted on a [forum topic](http://forum.psicode.org/t/problems-with-geometry-convergence-in-dihedral-scan/1808). When attempting the basis guess, it will attempt to read previous orbitals but not find them. The following appears in the output file.; ```; Warning! Guess was READ without Ca set, switching to CORE! ; This option should have been configured at the driver level.; ```; The use of core may be a very terrible choice indeed, which caused the issues in the forum topic. Here's a simplified example:; ```; molecule phenol {; 0 1; H 0.0000000000 0.9803530335 -0.8498671785; O 0.0000000000 0.6988545188 0.0536419016; O 0.0000000000 -0.6988545188 0.0536419016; H 0.0000000000 -0.9803530335 -0.8498671785; }. set {; basis cc-pvdz; }. set scf {; basis_guess true; maxiter 300 ; fail_on_maxiter false; }. dihedrals = [i for i in range(0,185, 5)] ; PES = []. for phi in dihedrals:; my_string = ""1 2 3 4 "" + str(phi); set optking geom_maxiter = 250 ; set opking opt_coordinates = cartesian; set optking fixed_dihedral = $my_string; print(phi); try:; E = optimize('scf'); print(E); PES.append((phi, E)) ; except SCFConvergenceError:; continue ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1492#issuecomment-639150732:1093,optimiz,optimize,1093,https://psicode.org,https://github.com/psi4/psi4/issues/1492#issuecomment-639150732,1,['optimiz'],['optimize']
Performance,"This input file:; ```; memory 5 GB. molecule uf4 {; 0 1; U; F 1 1.7; F 1 1.7 2 90.0; F 1 1.7 3 90.0 2 180.0; F 1 1.7 4 90.0 3 180.0; }. set basis LANL2DZ; set scf_type pk; set guess CORE; optimize('hf'); ```; produces the following output:; ``` ; Writing optimization data to binary file.; Final energy is -448.6902827985336; Final (previous) structure:; Cartesian Geometry (in Angstrom); SI 0.0000000000 0.0000000000 0.0000000000; F 0.0000000000 -1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 -1.4786286784; F 0.0000000000 -1.4770587400 -1.4786286784; Saving final (previous) structure.; Removing binary optimization data file.; --------------------------; OPTKING Finished Execution; --------------------------. Final optimized geometry and variables:; Molecular point group: d2h; Full point group: D2h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. U; F 1 2.089987; F 1 2.089987 2 89.939134; F 1 2.089987 3 90.060866 2 -180.000000; F 1 2.089987 4 89.939134 3 -180.000000. Removing binary optimization data file.; Cleaning optimization helper files. Psi4 stopped on: Tuesday, 31 July 2018 04:29PM; Psi4 wall time for execution: 0:18:57.70. *** Psi4 exiting successfully. Buy a developer a beer!; ```. It seems that Psi4 is treating it as Uranium, as the energy is different from SiF4 at the same geometry, and is therefore just a printing problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1114:188,optimiz,optimize,188,https://psicode.org,https://github.com/psi4/psi4/issues/1114,6,['optimiz'],"['optimization', 'optimize', 'optimized']"
Performance,"This is a follow-up on #504. It's been a while that I looked into this. I managed to write post-SCF natural orbitals to a molden file, but there is still a problem with documentation (http://www.psicode.org/psi4manual/1.2/molden.html):. This is a fully working example:. ```; molecule {; 0 1; O 1.01646 0.05097 0.09714; H 1.98435 0.06069 0.05173; H 0.73761 0.24513 -0.81034; }; set basis cc-pVTZ. E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); nmopi = wfn.nmopi(); Da_so = wfn.Da(); Ca_inv = core.Matrix(""CA inv"", nmopi, nmopi); Ca_inv.copy(wfn.Ca()); Ca_inv.general_invert(); Da_mo = Matrix.triplet(Ca_inv, Da_so, Ca_inv, False, False, True); # Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False) # line from documentation; molden(wfn, 'ccsd_no.molden', density_a=Da_mo); ```. Loading this into Molden gives normals results:. ```. COORDINATES; used for orbitals/density. X Y Z. 1 O -0.103043 0.072862 0.000000; 2 H -0.015287 -1.756185 0.000000; 3 H 1.650657 0.599812 0.000000; ; Mulliken Charges; ================; ; O -0.4661; H 0.2332; H 0.2332; ```. When following the documentation, I got:. ```; COORDINATES; used for orbitals/density. X Y Z. 1 O -0.103043 0.072862 0.000000; 2 H -0.015287 -1.756185 0.000000; 3 H 1.650657 0.599812 0.000000; ; Mulliken Charges; ================; ; O -94.4305; H -12.0740; H -12.0736; ; Sum of Mulliken Charges: ********; ```. (FYI: my actual intention is not to visualize in Molden, but this is just an easy check.). Besides the documentation, there are some additional minor issues. I'll make a list here:. - [ ] Fix docs.; - [ ] When running the input for a second time, the new output is appended to the existing molden file, which is never useful.; - [ ] The current approach is not the most efficient, nor convenient: the user first has to compute a pseudo-inverse and then in the `molden` function a matrix is diagonalized. This can be done in one step by performing a generalized eigenvalue decomposition. This coul",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1485:818,Load,Loading,818,https://psicode.org,https://github.com/psi4/psi4/issues/1485,1,['Load'],['Loading']
Performance,This is a known issue with the Intel compiler and gcc 5+ header files. Even the latest Intel version 16.0.1 is affected. NERSC advises loading in gcc 4.9.x series. References:; [Intel Forum](https://software.intel.com/en-us/forums/intel-c-compiler/topic/565143); [Intel Fourm](https://software.intel.com/en-us/forums/intel-c-compiler/topic/591174); [NERSC](https://www.nersc.gov/users/software/compilers/intel-fortran-c-and-c/intel-bug-reports/intel-c-compiler-error-stl-iterator-base-types-h/),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262#issuecomment-185230186:135,load,loading,135,https://psicode.org,https://github.com/psi4/psi4/issues/262#issuecomment-185230186,1,['load'],['loading']
Performance,"This is a short summary on how to get started with PSI4 and Apple Silicon; ---. Overview:. - Python/Package management options:; - osx-arm64 conda-forge environment: https://github.com/conda-forge/miniforge (untested, limited packages); - homebrew . - BLAS/LAPACK options: ; - Apple's Accelerate: very fast, no inherent threading. But thread-safe.; - OpenBLAS: available on conda-forge and homebrew. _No optimized kernels for M1_. Much slower than Accelerate Framework. (see https://github.com/xianyi/OpenBLAS/issues/2814); - ???; ---. ## homebrew:; requirred brew packages: `cmake eigen numpy`; for OpenMP: `libomp`; optional: `doxygen jupyterlab pytest gcc` (gcc to get a Fortran compiler); Note: numpy will come with a non-threading OpenBLAS library. ### psi4 python packages:; - `pip3 install pydantic pint py-cpuinfo psutil`. ### docs:; - pip3 install Sphinx nbsphinx python-graphviz sphinx-autodoc-typehints sphinx-automodapi ; - custom theme from `git clone https://github.com/psi4/sphinx-psi-theme.git` (`pip3 install .`); - dont get `sphinx-doc` from brew, it has python3.10 dependency. ### basic build with Accelerate Framework and homebrew python:; - `cmake -H. -Bobjdir -DPython_EXECUTABLE=/opt/homebrew/bin/python3 -DCMAKE_INSTALL_PREFIX=<custom>`; - `export CPLUS_INCLUDE_PATH=/opt/homebrew/include` (for libint2 to find a header); - If `libomp` is found correctly, OpenMP is enabled but only explicit C-side openmp sections are threaded AFAIK, not blas.; - builds everything from scratch and _wow it's fast!_. ### caveats; - Mismatch between numpy(=openblas) and psi4(=Accelerate) libraries.; ---; I may have missed a detail.. These notes will be updated over time.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333:404,optimiz,optimized,404,https://psicode.org,https://github.com/psi4/psi4/issues/2333,1,['optimiz'],['optimized']
Performance,"This is an actual representative of the failed (large) optimizations that I; constantly get forwarded to me! :) I don't choose them. Do we not have a; way to leave test cases, even 'longertests' in there without them; interfering in the normal course?. The purpose of this tests is that it has challenging quasi-linear angles in; it. I have no objection to reducing the calculation. Perhaps removing the; polarization functions would be enough?. -Rollin. ## . Dr. Rollin A. King; Professor and Chair of Chemistry; Bethel University; rking@bethel.edu. On Mon, Feb 15, 2016 at 8:04 AM, Daniel Smith notifications@github.com; wrote:. > Ah yes, this is no longer a used test cases in wavefunction_pass.; > @psi-rking is it possible to reduce the basis set to something fairly quick?; > ; > Daniel Smith; > malorian@me.com; > ; > > On Feb 15, 2016, at 9:01 AM, Justin Turney notifications@github.com; > > wrote:; > > ; > > opt10 is too big for a test case: 15 atoms, C1 symmetry, 322 basis; > > functions, requests 32 GB of memory, and performing a transition state; > > geometry optimization with an initial Hessian by finite difference of; > > gradients. The calculation timed out on the 13 of 79 gradient displacements; > > of the initial Hessian. The only thing that does help is that it's a DF-MP2; > > calculation.; > > ; > > —; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4/issues/253#issuecomment-184219439>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-184220315.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184227998:55,optimiz,optimizations,55,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184227998,3,"['optimiz', 'perform']","['optimization', 'optimizations', 'performing']"
Performance,This is error after updating to PSi4 278:; error while loading shared libraries: libifport.so.5: cannot open shared object file: No such file or directory. But I think it can be overcome by adding intel lib into PATH. Thank you Loriab.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/154#issuecomment-126179884:55,load,loading,55,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126179884,1,['load'],['loading']
Performance,"This is fantastic! I really like the design; kudos for coming up with such a clean scheme. I know that these functions will not even be close to becoming a bottleneck but it would be nice to have the `for X in A.keys()` replaced with `for X in A:`. Unless I'm mistaken (likely) the latter is faster, and more Pythonic (this could well have changed with Py3's change to the `keys()` method). I think the shorter version is also easier to read.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922#issuecomment-375711730:156,bottleneck,bottleneck,156,https://psicode.org,https://github.com/psi4/psi4/pull/922#issuecomment-375711730,1,['bottleneck'],['bottleneck']
Performance,"This is great! Could we also get `-O0` into the flags for Debug builds? I think it adds `-g` currently, but allows the compiler to use its default optimization (usually `-O2`), which often trips up debuggers. We can also just defer that for a different time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2159#issuecomment-822602935:147,optimiz,optimization,147,https://psicode.org,https://github.com/psi4/psi4/pull/2159#issuecomment-822602935,1,['optimiz'],['optimization']
Performance,"This is just about as far as this PR is going to go. Fully removing memory_manager would require a way to store how much memory has been ""spent."" Keeping track of that without globals requires a wavefunction. Once the wavefunction is in place to track memory, the MemoryManager can be removed from psimrcc without much hassle. Two issues before potentially merging this:; 1. I want to do some profiling to make sure that none of my pointer -> std::vector replacements hit performance. `.data()` and passing const refs is enough, according to my very preliminary tests, but I'll do some more in-depth ones once I figure out how to use VTune.; 2. Do we want this as a 1.4 target? We really don't need more PR dependencies before 1.4, given that the 1.4 paper is already published, but 1.4 is still not release-ready. If we don't, then let's hold off on the merge until after 1.4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1901#issuecomment-634141409:472,perform,performance,472,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-634141409,1,['perform'],['performance']
Performance,"This is more of a discussion than an issue, but posting here in case this is considered a bug. Issue: Running `psi4` from the command line results in dramatically different performance than calling it from the command line with `qcengine`. Why is that? Is this intended?. `psi4` was installed via `conda`, note the results below. They suggest that `psi4` runs on a single core when called from the command line, yet multiple cores when called from `qcengine`. Is this intended? A bug? The `qcengine` call is ~3.5x faster. ```sh; time qcengine run psi4 caffeine.json > qcng_out.json; qcengine run psi4 caffeine.json > qcng_out.json 44.65s user 1.51s system 574% cpu 8.041 total; time psi4 --qcschema -i caffeine.json -o psi4_out.json ; psi4 --qcschema -i caffeine.json -o psi4_out.json 29.30s user 0.63s system 99% cpu 29.952 total; ```. The outfiles are attached in case helpful. They are .json files, but had to name them .txt so GitHub would allow an upload. [qcng_out.txt](https://github.com/psi4/psi4/files/8880533/qcng_out.txt); [psi4_out.txt](https://github.com/psi4/psi4/files/8880534/psi4_out.txt). Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2600:173,perform,performance,173,https://psicode.org,https://github.com/psi4/psi4/issues/2600,1,['perform'],['performance']
Performance,"This is pure conjecture on my part, but I would assume that the bandwidth is limited by physical partitioning on the M1 Pro/Max. The CPU cluster probably does not have ""enough wires"" going to the memory controller to transfer 400 GB/s, so I would think fusing off a couple of cores in the GPU would not affect the CPU BW. Not sure about the Pro, if they just copy-pasted the CPU part, there is a chance the CPU could use all of the BW on that,. Edit: The undocumented math instructions I mentioned previously, are not executed by the CPU core, but separate SIMD coprocessors, which are technically not part of the CPU core, even though some caches are shared. But given how the big.LITTLE cores all share the ~1/2 BW limit, I doubt using those coprocessors would make much of a difference.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-956493258:641,cache,caches,641,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956493258,1,['cache'],['caches']
Performance,"This is rather an issue of [loriab/libint](https://github.com/loriab/libint), but I open here since it is not allowed there. Steps to reproduce is as follows:; ```console; $ git describe --always; v1.5-45-g2e3b0f2039ff; $ cmake -G Ninja -B build -S . -D BOOST_ROOT:PATH=/path/to/boost -D Eigen3_DIR:PATH=/path/to/eigen3 -D CMAKE_BUILD_TYPE:STRING=RelWithDebInfo; $ cmake --builld build; …; [9/12] Performing build step for 'psi4-core'; [1/1097] Generating version info; Defining development snapshot version: 1.6a1.dev45+2e3b0f2 (computed); 1.6a1.dev45 {master} 2e3b0f2 1.5.0.999 1.5 <-- 1.6a1.dev45+2e3b0f2; [2/1097] Building CXX object src/CMakeFiles/l2export.dir/export_mints.cc.o; FAILED: src/CMakeFiles/l2export.dir/export_mints.cc.o ; /usr/bin/c++ -Ipsi4/include -Ipsi4/src -I/usr/include/python3.9 -Ibuild/stage/include -I/path/to/eigen3 -march=native -O2 -g -DNDEBUG -fPIC -std=c++14 -MD -MT src/CMakeFiles/l2export.dir/export_mints.cc.o -MF src/CMakeFiles/l2export.dir/export_mints.cc.o.d -o src/CMakeFiles/l2export.dir/export_mints.cc.o -c psi4/src/export_mints.cc; In file included from build/stage/include/libint2/solidharmonics.h:38,; from build/stage/include/libint2/cxxapi.h:39,; from build/stage/include/libint2/engine.h:48,; from psi4/src/psi4/libmints/shellpair.h:8,; from psi4/src/psi4/libmints/eri.h:42,; from psi4/src/export_mints.cc:54:; build/stage/include/libint2/cgshell_ordering.h:63: warning: ""INT_NCART"" redefined; 63 | #define INT_NCART(am) ((((am)+2)*((am)+1))>>1); | ; In file included from psi4/src/export_mints.cc:48:; psi4/src/psi4/libmints/integral.h:46: note: this is the location of the previous definition; 46 | #define INT_NCART(am) ((am >= 0) ? ((((am) + 2) * ((am) + 1)) >> 1) : 0); | ; In file included from build/stage/include/libint2/solidharmonics.h:38,; from build/stage/include/libint2/cxxapi.h:39,; from build/stage/include/libint2/engine.h:48,; from psi4/src/psi4/libmints/shellpair.h:8,; from psi4/src/psi4/libmints/eri.h:42,; from psi4/src/export_min",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2427:397,Perform,Performing,397,https://psicode.org,https://github.com/psi4/psi4/issues/2427,1,['Perform'],['Performing']
Performance,This is the first time I've seen the timings. Really impressive stuff; performance boosts on NUMA arch is a really big deal.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-381154469:71,perform,performance,71,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-381154469,1,['perform'],['performance']
Performance,"This is the list of changes made for the wavefunction passing update. This is a very large change that modified virtually every file in Psi4, details of the why and what can be found [here](https://github.com/psi4/psi4public/wiki/Changes-to-Information-Passing-in-Psi4-%28Jan-2016%29). This is slightly long, but please read this fully as there is a decent chance that advanced users will have to make some tweaks to their existing input files. A quick rundown of the changes:; - Energy, gradient, etc now actually return a energy (a number), gradient (a matrix), etc. A good example of these changes is [this](https://github.com/psi4/psi4public/commit/a559003d1e4be8ac36107ba64751ee6db78c8f3b#diff-684250b9cfb2a0fa201f5dc123c90964L48) diff.; - All methods now take new kwargs (python variables):; - `return_wfn` - return the methods wavefunction: `scf_e, scf_wfn = energy('SCF', return_wfn=True)`; - `ref_wfn` - what wavefunction to use as reference: `mp2_e = energy('MP2', ref_wfn=scf_wfn)`; - `molecule` - give a molecule for the calculation to be run on (mostly an internal kwarg); - The global molecule is now only touched/modifed by the input file, the user parameter `activate` and by the optimize function.; - OEProp, cubewriter, and the molden writer all need to be explicitly passed a wavefunction python-side.; - These changes will allow for extremely complex workflows. Check out [`proc.py/run_sapt`](https://github.com/dgasmith/psi4public/blob/wavefunction_pass/share/python/proc.py#L2611) for an interesting case of passing wavefunctions and molecules into primary `proc.py` functions.; - `DF` and `RI` modifiers to methods are no longer valid (e.g., `energy('RI-MP2')`). Please use the `mp2_type` option instead.; - Fixed numerous bugs/oddities and moved everything towards a more object oriented workflow. ---. A few notable issues that people may run into:; - The `psi4/lib` folder has been moved to `psi4/share` please update all `PSIDATADIR` references accordingly.; - `Process::env",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246:1196,optimiz,optimize,1196,https://psicode.org,https://github.com/psi4/psi4/pull/246,1,['optimiz'],['optimize']
Performance,"This is the list of issues tied into wavefunction_pass that should be cleared up before the 1.0 release.; - [x] Methods also take the `molecule` kwarg, it is not clear if `ref_wfn` or `molecule` should supersede the other yet (SCF methods can only take a molecule at the moment. `ref_wfn` supersedes `molecule` in all other methods.).; - [x] Not all methods return wavefunctions yet. For example what does a SAPT wavefunction look like?; - [x] psimrcc Wavefunction; - [x] SAPT Wavefunction; - [x] EFP Wavefunction; - [x] Will just pass through the reference wavefunction with a warning; - [x] If I pass SCF a `ref_wfn` with orbitals, the `ref_wfn` orbitals are not used (Thats fine, see above).; - [ ] We would like a SCF level wavefunction to be able to cast itself back C1 symmetry so that we can run symmetry-based SCF and then use this wavefunction in symmetry intolerant code. These transforms are reimplemented in every symmetry tolerant code. (Moved to another ticket); - [ ] Saving of binary `optking` information may break for very complex optimizations (database, cbs wrapper, etc). Optimization proceeds, but always restarts at the first iteration so convergence is slow. (Moved to another ticket); - [x] Plugin examples are starting to show their age. We probably need to overhaul these.; - [x] The documentation needs to reflect the above changes (see #249).; - [x] DF and RI calls should soft fail with a proper error message.; - [x] Cubeprop, Molden, OEProp etc functions should fail better when not passed a wavefunction.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/259:1049,optimiz,optimizations,1049,https://psicode.org,https://github.com/psi4/psi4/issues/259,2,"['Optimiz', 'optimiz']","['Optimization', 'optimizations']"
Performance,"This is the output I get from running the same system directly through libecpint's main API (with normalised contraction coefficients in the orbital basis). All the results seem to agree with the output you have labelled as `native'. This suggests to me that something is going wrong when the libecpint containers are being created, but I'm struggling to see what exactly it is. It might be worth comparing what your ECP object for argon looks like with one created by libecpint by loading from file. [output.txt](https://github.com/psi4/psi4/files/6173525/output.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-803052000:482,load,loading,482,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-803052000,1,['load'],['loading']
Performance,"This issue has a bit more to it than just removing the line Andy mentioned. The computation dies due to `'psi4.core.variable: Requested variable BRUECKNER CONVERGED was not set!\n'`, rather than the fact that convergence failed. Is there a standard way to represent a convergence error, C-side? `dct` and LMP2 in `cc` throw `ConvergenceError`, failure during an orbital-optimized `occ` computation gets you a generic `PSIEXCEPTION`, and I haven't checked other things.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1864#issuecomment-628803661:370,optimiz,optimized,370,https://psicode.org,https://github.com/psi4/psi4/issues/1864#issuecomment-628803661,1,['optimiz'],['optimized']
Performance,"This issue was fixed by #882. While there is still some non-determinism when the optimizer gets to a minimum, it does not have a common cause with the behavior reported here. It may also be fixed when optking is brought Python-side. For reference, the output I generated demonstrating non-determinism at the mimum was using the test case created in #882, without the early exit condition. If this issue needs to be raised again, it would be a separate issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-352229920:81,optimiz,optimizer,81,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-352229920,1,['optimiz'],['optimizer']
Performance,"This issue was originally about issues with converging an SCF, and now I'm not sure what it's about. I need you to re-focus the issue. Are you saying that for the same geometry, Psi is giving different energies/gradients depending on which optimization run it was part of?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-957955746:240,optimiz,optimization,240,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957955746,1,['optimiz'],['optimization']
Performance,"This looks like a mismatch in the tolerance used to figure out the point group and the tolerance being used within the optimizer. For the HOOH case, adding `symmetry c2` to the molecule specification should be a simple workaround. Also, you can use `SCF_Energy = psi4.get_variable('CURRENT ENERGY')` to avoid running an extra energy calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-201451437:119,optimiz,optimizer,119,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-201451437,1,['optimiz'],['optimizer']
Performance,"This might be an ""issue"" with the new guess. Can you try a `guess core` or `gwh`?. Issue in this case is in quotes as this may be something odd where the guess pushes this unstable optimization to a poor value.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1692#issuecomment-518465242:181,optimiz,optimization,181,https://psicode.org,https://github.com/psi4/psi4/issues/1692#issuecomment-518465242,1,['optimiz'],['optimization']
Performance,This simple run fails to converge in Psi4 1.3.2; ```; molecule {; pubchem:methimazole; }. set basis pcseg-0; optimize('wb97x-d'); ```; The error is; ```. Back-transformation to cartesian coordinates...; The INTCO_EXCEPTion handler:; TORS::compute_val: unable to compute torsion value; Dynamic level is 0.; exc.g_really_quit() is 0. **** Optimization has failed! (in 1 steps) ****; --------------------------; OPTKING Finished Execution ; --------------------------; Removing binary optimization data file.; Cleaning optimization helper files. PsiException: Could not converge geometry optimization in 0 iterations.; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2208:109,optimiz,optimize,109,https://psicode.org,https://github.com/psi4/psi4/issues/2208,5,"['Optimiz', 'optimiz']","['Optimization', 'optimization', 'optimize']"
Performance,"This sounds good, especially as it would seem to enable custom basis sets (e.g., dz on C1, tz on C2, atz on H, user-supplied mybasis on remainder) to be condensed into one name/entity (though could it be re-issued after a new molecule's defined?). What type of info do you think should be cached: atom/basisname or atom/extract_of_gbs_file or atom/BasisSet object (py translation of libmints object)? . Simply adding a member fn to basisset in libmints that returns T/F for a given library basis name and element name is seemingly the easiest way of addressing the issue (though doesn't cover case where C1 and C2 perhaps have different library bases). Having a full BasisSet and BasisParser python classes is the other end of the code-to-add scale. But then, we could have a Molecule respond with its full set of default fitting basis mix, all py-side. (And I could write GENBAS entries w/o libmints.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/46#issuecomment-37953151:289,cache,cached,289,https://psicode.org,https://github.com/psi4/psi4/issues/46#issuecomment-37953151,1,['cache'],['cached']
Performance,"This sounds like in the same class as too many roots for basis. They tend to segfault (example below) so should certainly be handled better. ```; molecule water {; 0 1; O; H 1 1.07; H 1 1.07 2 109.5; symmetry cs; }. set basis sto-3g; set roots_per_irrep [8, 8]. G, wfn = gradient('eom-ccsd', return_wfn=True); ans = wfn.energy(); ```. The user has issued two contradictory requests -- basis set and nroots. And part of the trouble is that psi only knows they're contradictory well into the calculation (e.g., post-GS-CCSD). That complicates issuing a prompt and specific error. I agree that Susi's preferred behavior is most likely what the user wants -- keep the basis set contract and violate the nroots request. A few paths:. 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover. Likely most of this should be moved to an issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885:1122,throughput,throughput,1122,https://psicode.org,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885,1,['throughput'],['throughput']
Performance,"This won't be a comprehensive reply, just a getting-started one. In the beginning, there were lots o' blockers:; * no mkl; * no c++11; * no intel compiler capability for multiarch packages; * psi4 has dependencies that aren't quite vanilla upstream; * psi4 likes to provide addons from projects that aren't released cleanly; * psi4 users have grown accustomed to `-c psi4` and `-c psi4/label/dev`; * we like packages to be least restrictive so that devs can use conda like a package manager and build with their own tooling. That said, many of those blockers have receded, and Windows psi4 is, in fact, c-f -based.; * mkl is in for several years; * c-f gcc is plenty ahead of where psi needs it; * intel is becoming more integral and _maybe_ we could still user multiarch instead of the uniform c-f flag set; * gau2grid and libxc dependencies are now good wrt upstream and are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:956,optimiz,optimization,956,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624,1,['optimiz'],['optimization']
Performance,"This would be **really** nice to get in Psi4. I don't think there is any free quantum chemistry program that can do geometry optimizations with ECPs. I think in principle PySCF can compute gradients, but it doesn't have a geometry optimizer; I just tried out pyberny and geometric and neither worked with modern Python :hankey:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-866421643:125,optimiz,optimizations,125,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-866421643,2,['optimiz'],"['optimizations', 'optimizer']"
Performance,"Time to start the release notes once more. As always please note that these start off as incomplete and gradually fill in over time as they are quite lengthy. If I missed anything or an item is incorrect please comment below. Certainly some items need to be highlighted more and categorical division can be improved. ##. # Major Points of Interest. - The DFT kernels were migrated to use LibXC, Psi4 now has 400+ functionals including modern functionals such as wB97M-V.; - The DFT code was optimized leading up to a 4x speed enhancement on 6 cores.; - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.; - Dozens of additional methods, bug fixes, and performance enhancements. # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`.; - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ##. # New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. # New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). # New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Ge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:491,optimiz,optimized,491,https://psicode.org,https://github.com/psi4/psi4/issues/959,2,"['optimiz', 'perform']","['optimized', 'performance']"
Performance,"Time to start the release notes once more. As always please note that these start off as incomplete and gradually fill in over time as they are quite lengthy. If I missed anything or an item is incorrect please comment below. Certainly some items need to be highlighted more and categorical division can be improved. Note: Psi4 1.3 starts around PR #1065. TODO: Document #1393, . ##. # Major Points of Interest. - Added native Windows compatibility without the WSL requirement.; - DFT collocation grids can now be cache in-memory to avoid extra computation and lowering the total cost of DFT by up to a factor of two (#1233).; - Wavefunctions can now be serialized to disk and back using `Wavefunction.to_file/from_file` (#1304).; - Psi4 is now Python 3.5+ only, Psi4 1.4 will be Python 3.6+ only. Potential:; - A smart SCF solver that can intelligently make a variety of choices depending on local conditions (#1135).; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349). . # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`. ##. # New Methods; - Improved support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1; - VV10 dispersion is now available for UKS references.; - Cubeprop can now compute the `FRONTIER_ORBITALS` and `DUAL_DESCRIPTOR` quantities.; - nZaPa-NR basis sets have been added.; - The recursive driver can now compute N-body gradients and Hessians. # New External Libraries; - [QCElemental](https://github.com/MolSSI/QCElemental) - A library for CODATA, molecule manipulation routines, and periodic table information.; - [HelPME](https://github.com/andysim/helpme) - A particle-mesh Ewald library for long-range electrostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. # First Time Contributors; - @raimis - #1399, #1185, #1183, +70 more!; - @obrien951 #1359, #1222, #1130, #1140, ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406:514,cache,cache,514,https://psicode.org,https://github.com/psi4/psi4/issues/1406,1,['cache'],['cache']
Performance,"Time to start working on the Psi4 1.0 release notes, #hype! Please read through and update as needed @psi4/p4manage. Loosely organized at the moment, feel free to re-do. These notes span from the Psi4 beta5 release to the official Psi4 1.0 release.; ## User improvements; - Created binary linux distribution of Psi4 for users through conda; - Automatic extrapolations at the driver layer: `energy('MP2/aug-cc-pv[D,T]Z')`,`optimize('SCF/cc-pV[D,T,Q]Z')`.; - New N-Body wrapper capable of computing non-CP, CP and VMFC energies and gradients. The `cp` wrapper has been deprecated and CP can now be called as an optional argument to an energy call: `energy('SCF/cc-pVDZ', bsse_type='CP')`.; - New cmake build system for developers; - More sophisticated user input for one-electron property analysis; - More user-friendly error checking: If the user specifies an unknown keyword, the program will print that this keyword is unknown and will suggest possible alternatives that are close in spelling; - Added code to output cube files for orbitals, densities, etc.; - Added automatic defaults for auxiliary basis sets; - Improvements to the reporting of SAPT summary information, and enhancements to obtain SAPT methods reported in doi: 10.1063/1.4867135.; - The `properties` call now has a uniform interface for SCF, DFT, MP2, CI, MCSCF methods; ## Infrastructure improvements; - The Wavefunction object is now returnable for all psi4 methods. This Wavefunction object can be passed to other codes or directly manipulated; - Driver has been refactored into a new recursive scheme (as opposed to the previous nested scheme) to better facilitate more complex calls; - The MOLDEN writer now accepts density matrices for writing natural orbitals; - Added command-line arguments -l to specify PSIDATADIR (for developers) and -s to specify location of scratch directories (overrides PSI_SCRATCH); - Internal upgrades to the direct product decomposition library, libdpd, especially regarding density fitting; - Al",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367:422,optimiz,optimize,422,https://psicode.org,https://github.com/psi4/psi4/issues/367,1,['optimiz'],['optimize']
Performance,"To confirm this explicitly:; * With the changes to method names, the energy docstring needs to be updated, as does the occ/dfocc manual page, which needed to be updated anyways. That is shifting to your responsibility in a future, but pre-1.4 PR.; * In another future PR of yours, QCDB will handle all spin-component quantities. At that time, we'll save singles contributions and spin components to `variables_`. For now, it's enough to remove the spin component globals in preparation for that and as part of the war on globals. We're losing many spin-component-related Psivars in the interim, but this is an acceptable loss. Also, will the future migration of spin-component treatment to QCDB mean `occ` no longer prints spin-component quantities? You implied that it would (""Going that far would necessitate rewriting the occ printing""). If so, then the correct solution to [the spin-redundancy problem](https://github.com/psi4/psi4/pull/1789#discussion_r373811576) is to eliminate the spin-component variables from `occ`. At that time, `occ`'s only use for spin-component scaled quantities is if spin scaling is being used in orbital optimization, which shouldn't require those variables anyways. We might as well get rid of them now, since the repeat typing will be gone before long.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-581142412:1138,optimiz,optimization,1138,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581142412,1,['optimiz'],['optimization']
Performance,"To expand on my request for changes a little more, the wording is problematic since the problem I believe you are getting at has nothing to do with the file being in cache, it has to do with the file-entry existing on disk. . Yes if the quantity is held in cache, the data is accessible right away, but if it is not held in cache you may still be modifying a non-zero quantity depending on how you manipulate the buffer later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267205350:166,cache,cache,166,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267205350,3,['cache'],['cache']
Performance,"To solve:; - find a system that becomes a car wreck while optimizing frozen coords and w/o `no_reorient` & `no_com`. (probably intermolecular optimization). see tests opt-[6789] for frozen opt examples.; - check that opt healed w/`no_reorient` & `no_com`; - around here (https://github.com/psi4/psi4/blob/master/lib/python/driver.py#L1193), test if any of those freeze options were set `psi4.get_option('OPTKING', 'FREEZE<fill in>')` and if so, add. ``` python; molecule.fix_orientation(True); molecule.fix_com(True) ; molecule.update_geometry(); ```; - check all working",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/179#issuecomment-174013642:58,optimiz,optimizing,58,https://psicode.org,https://github.com/psi4/psi4/issues/179#issuecomment-174013642,2,['optimiz'],"['optimization', 'optimizing']"
Performance,"Transferred from [the forums](http://forum.psicode.org/t/geometry-optimization-fails-due-to-changing-comp-point-group/1191) and possibly related to #1177. In the following optimization, Psi quits after reporting a tetrahedral molecule falls from `C2v` to `Cs` molecular point group while maintaining `Td` full point group after the first step. ```; import psi4; mol_string = """""" ; C; H 1 %f; H 1 %f 2 TDA; H 1 %f 2 TDA 3 120; H 1 %f 2 TDA 4 120; """"""; mol = lambda x: mol_string%(x,x,x,x); psi4.set_options({""BASIS"": ""def2-qzvppd"", ""scf_type"": ""df""}); geom = psi4.geometry(mol(1.106)); e,wfn = psi4.optimize(""PBE"",molecule=geom, return_wfn=""yes""); ```. The first step appears to break the alignment of the molecular symmetry axes with the reference axes. For comparison, here are the starting coordinates (Bohr) and the coordinates after step 1:; ```; [[ 0. 0. 0. ]; [ 0. 1.70650814 -1.20668348]; [ 1.70650814 0. 1.20668348]; [-1.70650814 0. 1.20668348]; [ 0. -1.70650814 -1.20668348]]. [[-6.64087882e-10 2.94128033e-09 0.00000000e+00]; [-6.64087882e-10 2.06989822e+00 0.00000000e+00]; [-9.75759370e-01 -6.89966085e-01 1.69006481e+00]; [-9.75759370e-01 -6.89966085e-01 -1.69006481e+00]; [ 1.95151875e+00 -6.89966086e-01 0.00000000e+00]]; ```. The original reporter said this problem was observed with this basis set but not others. To me, this suggests numerical noise determines whether the bug occurs.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1474:66,optimiz,optimization-fails-due-to-changing-comp-point-group,66,https://psicode.org,https://github.com/psi4/psi4/issues/1474,3,['optimiz'],"['optimization', 'optimization-fails-due-to-changing-comp-point-group', 'optimize']"
Performance,"Transition complex optimization (PSI4, V1.3.2)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1921:19,optimiz,optimization,19,https://psicode.org,https://github.com/psi4/psi4/issues/1921,1,['optimiz'],['optimization']
Performance,"Travis CI currently takes 2-6 (average 3) hours to complete depending on the current travis load, which is a bit on the long side. To help with this I am proposing that we reduce the number of build types from 15 to the following:; - Latest clang/gcc with both debug and release flags (4 cases); - Oldest supported clang/gcc with both debug and release flags (4 cases). It should be noted that travis CI typically runs the first 3-6 test cases immediately upon submission and then runs the rest in a general queue. The real time killer is when the 15th CI case does not start to run for 2-5 hours after initial submission. With the proposed changes we will hopefully be running through travis consistently in about an hour. . This will deteriorate our CI coverage a bit; however, I think this keeps with the CI spirit and should catch the corner cases that we really worry about. I am looking a bit into something like Docker in addition to Travis so that we can run a full test suite on a local box at the touch of a button. PS: Fiddling around with commits to practice squashing.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237:92,load,load,92,https://psicode.org,https://github.com/psi4/psi4/pull/237,2,"['load', 'queue']","['load', 'queue']"
Performance,Travis: conda config settings are not saved in cache,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1423:47,cache,cache,47,https://psicode.org,https://github.com/psi4/psi4/pull/1423,1,['cache'],['cache']
Performance,"Tried to run the following keywords, copied directly from examples except for the modification of basis sets & functionals (omitted lengthy molecule which is fine outside of using cubeprop):. `memory 8 Gb. set basis 6-31G; set scf_type df; set freeze_core True; set cubeprop_tasks ['frontier_orbitals']. E, wfn = optimize('b3lyp', return_wfn=True); cubeprop(wfn); `; The following error ensues post successful optimisation:. `Traceback (most recent call last):; File ""/usr/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 65, in <module>; File ""/usr/lib/psi4/driver/p4util/util.py"", line 101, in cubeprop; cp.compute_properties(). RuntimeError: ; Fatal Error: FRONTIER_ORBITALSis an unrecognized PROPERTY_TASKS value; Error occurred in file: /build/psi4-XGp1km/psi4-1.1/psi4/src/psi4/libcubeprop/cubeprop.cc on line: 196; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::CubeProperties::compute_properties(); pybind11::cpp_function::initialize<pybind11::cpp_function::initialize<void, psi::CubeProperties, , pybind11::name, pybind11::is_method, pybind11::sibling, char [10]>(void (psi::CubeProperties::*)(), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [10])::{lambda(psi::CubeProperties*)#1}, void, psi::CubeProperties*, pybind11::name, pybind11::is_method, pybind11::sibling, char [10]>(pybind11::cpp_function::initialize<void, psi::CubeProperties, , pybind11::name, pybind11::is_method, pybind11::sibling, char [10]>(void (psi::CubeProperties::*)(), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [10])::{lambda(psi::CubeProperties*)#1}&&, void (*)(psi::CubeProperties*), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [10])::{lambda(pybind11::detail::function_record*, pybind11::handle, pybind11::detail::funct",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1722:313,optimiz,optimize,313,https://psicode.org,https://github.com/psi4/psi4/issues/1722,1,['optimiz'],['optimize']
Performance,Try stages to warm up cache,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1538:22,cache,cache,22,https://psicode.org,https://github.com/psi4/psi4/pull/1538,1,['cache'],['cache']
Performance,"Trying to install psi4 on MacOS. . I looked at this issue as a starting point #2024. I used the following procedure to install psi4. `conda create -n psi4env python=3.7`; `mamba install ambit=0.5.1=h7778601_3 -c psi4`; `mamba install chemps2=1.8.9 -c psi4`; `mamba install libint=1.2.1 -c psi4`; `mamba install libxc=4.3.4 -c psi4`; `mamba install simint=0.7 -c psi4`; `mamba install psi4=1.4a2.dev1084+9b60184=py37h55c4972_2 -c psi4/label/nofortran`. Then, I tried to test the installation using `psi4 --test`; It gave me this error:. ```; Traceback (most recent call last):; File ""/Users/kianpu/miniconda3/envs/psi4env_37/lib//python3.7/site-packages/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/kianpu/miniconda3/envs/psi4env_37/lib//python3.7/site-packages/psi4/core.cpython-37m-darwin.so, 0x0002): Library not loaded: @rpath/libgg.1.dylib; Referenced from: /Users/kianpu/miniconda3/envs/psi4env_37/lib/python3.7/site-packages/psi4/core.cpython-37m-darwin.so; Reason: tried: '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/python3.7/site-packages/psi4/../../../libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/python3.7/site-packages/psi4/../../../libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/bin/../lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/lib/libgg.1.dylib' (no such file), '/Users/kianpu/miniconda3/envs/psi4env_37/bin/../lib/libgg.1.dylib' (no such file), '/usr/local/lib/libgg.1.dylib' (no such file), '/usr/lib/libgg.1.dylib' (no such file). During handling of the above ex",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2578:858,load,loaded,858,https://psicode.org,https://github.com/psi4/psi4/issues/2578,1,['load'],['loaded']
Performance,"UX); Role: RIFIT; Keyword: DF_BASIS_MP2; atoms 1 entry H line 30 file /home/username/miniconda/share/psi4/basis/aug-cc-pvqz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; UMP2 Wavefunction, 28 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 80; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 0 1 1 45 45 0; BETA 0 0 0 46 46 0; --------------------------------------------------------. Traceback (most recent call last):; File ""/home/username/miniconda/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1052, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 710, in gradient; **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 183, in _process_displacement; derivative, wfn = derivfunc(method, return_wfn=True, molecule=clone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2018, in run_scf; dfmp2_wfn.compute_energy(). RuntimeError:; Fatal Error: There are no occupied orbitals with beta spin.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/dfmp2/mp2.cc on line: 196; The most recent 5 function calls were:. Printing out the relevant lines from the Psithon --> Python processed i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995:1724,optimiz,optimize,1724,https://psicode.org,https://github.com/psi4/psi4/issues/1995,1,['optimiz'],['optimize']
Performance,"Update the SAPT output to conform with the recommendations of our systematic study in ``Levels of Symmetry Adapted Perturbation Theory (SAPT). I. Efficiency and Performance for Interaction Energies,'' T. M. Parker, L. A. Burns, R. M. Parrish, A. G. Ryno, and C. D. Sherrill, J. Chem. Phys. 140, 094106 (2014) [doi: 10.1063/1.4867135 ]",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/37:161,Perform,Performance,161,https://psicode.org,https://github.com/psi4/psi4/issues/37,1,['Perform'],['Performance']
Performance,"Update, MVS error is coming from occupation guess. Ref on the left. ```; -------------------------------------------------------				 -------------------------------------------------------. ==> Integral Setup <==								 ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==						 ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes							 J tasked: Yes; K tasked: No							 K tasked: No; wK tasked: No							 wK tasked: No; OpenMP threads: 1							 OpenMP threads: 1; Integrals threads: 1							 Integrals threads: 1; Memory (MB): 375							 Memory (MB): 375; Algorithm: Core							 Algorithm: Core; Integral Cache: NONE							 Integral Cache: NONE; Schwarz Cutoff: 1E-12							 Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12							 Fitting Condition: 1E-12. => Auxiliary Basis Set <=								 => Auxiliary Basis Set <=. Basis Set: (6-31G AUX)								 Basis Set: (6-31G AUX); Blend: CC-PVDZ-JKFIT								 Blend: CC-PVDZ-JKFIT; Number of shells: 42								 Number of shells: 42; Number of basis function: 131							 Number of basis function: 131; Number of Cartesian functions: 131							 Number of Cartesian functions: 131; Spherical Harmonics?: false								 Spherical Harmonics?: false; Max angular momentum: 3								 Max angular momentum: 3. Minimum eigenvalue in the overlap matrix is 6.8158211762E-02.				 Minimum eigenvalue in the overlap matrix is 6.8158211762E-02.; Using Symmetric Orthogonalization.							 Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.		 SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==									 ==> Iterations <==. Total Energy Delta E RMS |[F,P]|			 Total Energy Delta E RMS |[F,P]|. @DF-UKS iter 0: -71.60680989524471 -7.16068e+01 1.41427e-01 		 |	 @DF-UKS iter 0: -71.93847658446015 -7.19385e+01 1.43012e-01 ; @DF-UKS iter 1: -75.52774517284402 -3.92094e+00 8.33781e-02 		 |	 Occupation by irrep:; @DF-UKS iter 2: -75.47183403287708 5.59111e-02 8.91",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802#issuecomment-383210085:627,Cache,Cache,627,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383210085,2,['Cache'],['Cache']
Performance,"Update: This performance issue was fixed by #2413, which upgraded libint2 from 2.6.0 to 2.7.1. For completeness, here are the timings on the above test case:. | Cores | Psi4 OS<br/>Wall Time (s) | Psi4 OS<br/>Parallel Speedup | Libint 2.6.0<br/>Wall Time (s) | Libint 2.6.0<br/>Parallel Speedup | Libint 2.7.1<br/>Wall Time (s) | Libint 2.7.1<br/>Parallel Speedup |; | :--- | :--- | :--- | :--- | :--- | :--- | :--- |; | 1 | 191.7 | --- | 105.3 | --- | 99.4 | --- |; | 2 | 96.1 | x2.00 | 72.6 | x1.45 | 49.9 | x1.99 |; | 4 | 48.4 | x3.96 | 71.5 | x1.47 | 25.2 | x3.94 |; | 8 | 24.3 | x7.88 | 74.5 | x1.41 | 13.0 | x7.66 |; | 18 | 11.5 | x16.62 | 72.8 | x1.45 | 6.4 | x15.45 |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2491#issuecomment-1077047578:13,perform,performance,13,https://psicode.org,https://github.com/psi4/psi4/issues/2491#issuecomment-1077047578,1,['perform'],['performance']
Performance,"Upgrade your version of Psi4. If you want TD-DFT, I suggest you use the [nightly build here](https://psicode.org/installs/v132/). TD-DFT calculations are being added in version 1.4. You can see a guide on how to perform TD-DFT [here](https://www.youtube.com/watch?v=MmG-g3SEFbk).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2071#issuecomment-748970773:212,perform,perform,212,https://psicode.org,https://github.com/psi4/psi4/issues/2071#issuecomment-748970773,1,['perform'],['perform']
Performance,"Using 080dba6, this input, which doesn't produce any wavefunction data,; ```python; import json. import numpy as np. import psi4; import qcelemental as qcel. bohr2ang = qcel.constants.bohr2angstroms. geometry = (; np.asarray(; [; 0.0,; 0.0,; -0.1294769411935893,; 0.0,; -1.494187339479985,; 1.0274465079245698,; 0.0,; 1.494187339479985,; 1.0274465079245698,; ]; ); / bohr2ang; ). json_input = {; ""schema_name"": ""qc_schema_input"",; ""schema_version"": 1,; ""molecule"": {; ""geometry"": geometry.tolist(),; ""symbols"": [""O"", ""H"", ""H""],; },; ""driver"": ""gradient"",; ""model"": {""method"": ""ccsd"", ""basis"": ""def2-tzvp""},; ""keywords"": {""scf_type"": ""direct"", ""df_scf_guess"": ""false""},; }. ret = psi4.schema_wrapper.run_qcschema(json_input). stub = ""water_ccsd_gradient_psi4""; with open(f""{stub}.qcschema.out"", ""w"") as handle:; handle.write(ret.json()); ```; validated with `qcschema.validate` produces; ```; Traceback (most recent call last):; File ""./qcschema_validate.py"", line 17, in <module>; qcschema.validate(data=json.loads(p.read_text()), schema_type=args.schema_type); File ""/home/eric/development/json/MolSSI_QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/eric/.pyenv/versions/miniconda3-4.7.12/envs/cclib_berquist_37/lib/python3.7/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'object'. Failed validating 'type' in schema['properties']['wavefunction']:; ...; On instance['wavefunction']:; None; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2242:1009,load,loads,1009,https://psicode.org,https://github.com/psi4/psi4/issues/2242,1,['load'],['loads']
Performance,"Very true, @bozkaya, and we've done that. We'd really like to be able to run _any_ molecule through a code, though. If the code absolutely can't handle the case, an error is the way to go. But preferably, if the code's contribution is `0.` or unit matrix or anything predictable, I'd really appreciate it if that trivial return could be programmed in. This would greatly help high-throughput calcs or in @wardence's case, multi-stage single calcs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/893#issuecomment-358041068:381,throughput,throughput,381,https://psicode.org,https://github.com/psi4/psi4/issues/893#issuecomment-358041068,1,['throughput'],['throughput']
Performance,"Was just discussing this with Lori. The underlying primitive functional; were implemented according to the excellent notes at the density functional; repository:. http://www.cse.scitech.ac.uk/ccg/dft/xc-b3lyp.pdf (contains the definition; for vwn3rpa); http://www.cse.scitech.ac.uk/ccg/dft/c-vwn5.pdf; http://www.cse.scitech.ac.uk/ccg/dft/c-vwn5rpa.pdf. We also refer to the VWN paper (; http://www.nrcresearchpress.com/doi/pdf/10.1139/p80-159). In VWN, any; functional with ""RPA"" means that the parameters of their Pade interpolation; formula across r_s are fit to RPA computations, any functional without; means that the same parameters are fit to the QMC data of Ceperley and; Alder. For RPA/non-RPA, VWN perform one Pade fit across r_s for; ferromagnetic limit (EcP), one for the paramagnetic limit (EcF). The RPA; fit is given in the middle of page 1207 in the left column (parameter c =; EcP4 = 42.7198), while the QMC fit is given in Table I on page 1207; (parameter c = EcP4 = 12.9352). The remaining question of the paper is the issue of interpolation across; spin polarization z. This is where VWN 1-5 are defined - they have; different spin-interpolation formulae, and all give the same results for; closed-shell systems. That B3LYP and B3LYP5 differ for closed-shell systems means that the; notation has been bastardized. Clearly B3LYP uses the RPA parameters while; B3LYP5 uses the QMC parameters. But then the question of which VWN is to be; used is less clear. The one currently used in PSI4 comes from the density; functional repository above, which is actually VWN1 with the RPA; parameters. Lori has generously agreed to provide some reference data from other codes; for open-shell systems so we can double-check the choice of VWN for; spin-polarized cases. We'll get this fully cleared up as soon as those; numbers come in. Best,. -Rob. On Tue, Apr 12, 2016 at 8:13 PM, Lori A. Burns notifications@github.com; wrote:. > @robparrish https://github.com/robparrish, any warnings or gui",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/339#issuecomment-209236558:708,perform,perform,708,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-209236558,1,['perform'],['perform']
Performance,"We can certainly shift some of the logic over to Python. It will be a good idea to perhaps construct a mapping of atoms to basis sets that are included in the standard Psi4 basis set library. . The current way that libmints determines if a basis set exists for an atom is to parse the entire basis set file (e.g. cc-pvdz.gbs) for the atom entry. In thinking about this, what libmints does is actually really bad since every time the basis set is loaded in the hard drive is nailed. If basis sets do not use a lot of memory maybe we should keep a global cache for the life of a calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/46#issuecomment-37943521:446,load,loaded,446,https://psicode.org,https://github.com/psi4/psi4/issues/46#issuecomment-37943521,2,"['cache', 'load']","['cache', 'loaded']"
Performance,"We discuss this in the ""geometry optimization"" [page of the documentation](https://psicode.org/psi4manual/master/optking.html). Please check the documentation before filing issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2604#issuecomment-1152921733:33,optimiz,optimization,33,https://psicode.org,https://github.com/psi4/psi4/issues/2604#issuecomment-1152921733,1,['optimiz'],['optimization']
Performance,"We have a clear policy (at least for what was originally added) of using optimized contractions from EMSL. From [Kirk Peterson's website](http://tyr0.chem.wsu.edu/~kipeters/basis.html), we don't have that option, so we get what he supplies. Not sure what to do about it, unless implement a fn to re-optimize contractions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-307878490:73,optimiz,optimized,73,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307878490,2,['optimiz'],"['optimize', 'optimized']"
Performance,"We have an [example](http://forum.psicode.org/t/adiis-minimization-failed-file-a-bug/2524/4) of an ADIIS failure. Based on how _early_ minimization is failing, this looks like something other than numerical finickiness of the underlying numpy algorithm. The ADIIS problem is either 1-by-1 or 2-by-2 (I'd need to check which), and surely we can handle a 2D constrained optimization. ```; memory 5 gb. molecule dimer {; O -2.37598501 -5.25644515 4.84543259; H -2.38171765 -4.38257907 4.44628561; H -2.48821382 -4.94837176 5.80344789; --; @Br 2.24215713 -6.77867982 5.71107037; @Br 0.05511550 -6.05660413 5.30313985; units angstrom; }. set {; basis aug-cc-pvdz; scf_type pk ; sapt_dft_grac_shift_a 0.05731; sapt_dft_grac_shift_b 0.01680; SAPT_DFT_FUNCTIONAL REVSCAN; }. energy('revscan'); ```. ```; ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo; -------------------------; A 113 113; -------------------------; Total 113 113; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RKS iter SAD: -76.04124004396280 -7.60412e+01 0.00000e+00. Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin//psi4"", line 338, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2455, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1670, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; self.iterations(); F",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2609:368,optimiz,optimization,368,https://psicode.org,https://github.com/psi4/psi4/issues/2609,1,['optimiz'],['optimization']
Performance,"We have the following SCF functionality as options:; - guess_read - Uses a previously computed guess orbitals, can cast up; - guess_basis - Computes a small-basis DF guess, can cast up; - broken_symmetry (no test cases, currently disabled); - guess_mix - Conventional orbital guess proceeded by a mixing of orbitals. We can obtain orbitals from:; - Build a guess - HF internal function such as CORE/SAD/etc; - `geuss_Ca/Cb` - HF functions, need to be called before `iterations()`. We can perform the following internal conversions:; - Cast between basis sets, however not between symmetries; - Cast occupations between symmetries; - Build orbitals from a Fock guess. We can set occupation numbers in the following manner:; - Read from Nalpha/Nbeta; - User defined docc/socc; - Broken_symmetry forcing; - Read in occupation. As these are not mutually exclusive options a user can get some strange results for edge cases. Currently the following hierarchy is implemented:; 1. User `DOCC`/`SOCC` always takes precedence (occasionally after the first iteration in SAD/cast examples); 2. `guess_read` occupation values _unless_ the reference has changed; 3. Nalpha/Nbeta as determined by the number of electrons and multiplicity. SCF is a bit strange as it is (effectively) the only wavefunction originator within Psi4 and cannot take in a reference_wavefunction. Some operations could be simplified if SCF could take in a wavefunction and always use the incoming values as its defaults. In addition, the current scheme could lead to some confusion if for example `broken_symmetry` and `DOCC` were both set. Its not overwhelmingly clear to me what the exact hierarchy should be and it may not be possible to catch every invalid input. Those of you who require strict SCF input settings should probably comment on what this logic should look like. As some of this logic has been reworked in the latest commits, difficult test cases should be tried. See issues, #421, #420, and #419.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/483:488,perform,perform,488,https://psicode.org,https://github.com/psi4/psi4/issues/483,1,['perform'],['perform']
Performance,"We need _many_ more details. * What version of Psi4 are you using?; * When you say ""gradient for the point charges,"" do you mean derivative of the energy with respect to nuclear displacements i.e. geometry changes? This is needed for geometry optimizations and frequencies.; * What electronic structure method are you using? Is this some SCF?; * When you say ""failed to find"" do you mean that the gradient was the same with and without the point charges, or just that you can't find a section in the gradient breakdown labeled ""external potentials"" or ""point charges"".; * How are you creating the point charges? A simple input file that displays the problem would be helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2244#issuecomment-879071662:243,optimiz,optimizations,243,https://psicode.org,https://github.com/psi4/psi4/issues/2244#issuecomment-879071662,1,['optimiz'],['optimizations']
Performance,"We used to use files like file11 for subsequent parsing for; finite-difference computations and for analysis of optimization; trajectories. Now we can so easily return the trajectory through python,; this doesn't seem necessary. I presume someone has an eye on what WebMO; parses, or else we do what we want and let WebMO accommodate it. On Mon, Jul 30, 2018 at 12:41 PM, Jonathon Misiewicz <; notifications@github.com> wrote:. > *@JonathonMisiewicz* commented on this pull request.; > ------------------------------; >; > In psi4/driver/driver_findif.py; > <https://github.com/psi4/psi4/pull/1024#discussion_r206260812>:; >; > > + Parameters; > + ----------; > + mol : qcdb.molecule or psi4.core.Molecule; > + The molecule to compute the gradient of.; > + E : list of floats; > + A list of energies of the molecule at displaced geometries.; > +; > + Returns; > + -------; > + gradient : psi4.core.Matrix; > + The gradient in Cartesians, as a matrix with dimensions; > + number-of-atoms by 3. """"""; > +; > + # NOTE: Yes, this returns psi4.core.Matrix, not an ndarray.; > + # Due to GradientWriter, the function internally needs the gradient as a psi4.core.Matrix.; > + # TODO: Move GradientWriter py-side, as well? This function would simplify nicely.; >; > Another picky question: We currently write multiple gradients to the same; > file. See fd-gradient test for an example. Keep this behavior or scrap it?; > My vote would be to have one gradient for one file, but there may be some; > use case I'm not seeing.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/1024#discussion_r206260812>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTGtFQb77YTjJUaUeJbULz7OyWJ5mks5uL0VVgaJpZM4UFStn>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1024#issuecomment-408957866:112,optimiz,optimization,112,https://psicode.org,https://github.com/psi4/psi4/pull/1024#issuecomment-408957866,1,['optimiz'],['optimization']
Performance,"We were using the following code for teaching students geometry optimization:; ![image](https://github.com/psi4/psi4/assets/16979577/f1c07929-cf0b-436d-8dc6-aba6a89aa760). Unfortunately, the xyz is no longer printed. . Our current PSI4 version is 1.7 but it looks like it doesn't work in 1.8.2 either https://forum.psicode.org/t/changes-to-output-of-optimization-and-frequency-calculationsfor-convenience/2894",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3074:64,optimiz,optimization,64,https://psicode.org,https://github.com/psi4/psi4/issues/3074,2,['optimiz'],"['optimization', 'optimization-and-frequency-calculationsfor-convenience']"
Performance,We're also struggling with performance issues here in developing methods to predict tautomer ratios and pKas. Parallelization would be super helpful!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1280#issuecomment-439131012:27,perform,performance,27,https://psicode.org,https://github.com/psi4/psi4/issues/1280#issuecomment-439131012,1,['perform'],['performance']
Performance,"Well in that case: ; So far everything is going smoothly on my end, but I did notice a couple of inconsistencies in detecting python/complier versions and incorrectly using a different library. On one of our clusters using the module system I have loaded gcc-5.2.0 and Anaconda with python 2.7.10. (these modules define envars $ANACONDA_LIB and $GCC_LIB, which I will refer to below. They also modify the $LD_LIBRARY_PATH variable when they are loaded.) . If I set the python executable and don't do anything to `CMAKE_PREFIX_PATH` the executable is set up correctly but the `PYTHON_INCLUDE_DIR` and `PYTHON_LIBRARY` find the ones that live in the system paths `/usr/lib/python2.6.so` and `/usr/include/python2.6` which causes problems in the linking step with undefined references to some python stuff. . Also if I set the C/CXX compiler, but again don't do anything to the `CMAKE_PREFIX_PATH` I can build + link fine, but at runtime I will get errors like this:. ```; /usr/lib64/libstdc++.so.6: version ``GLIBCXX_X.X.XX' not found ; ```. Which seems to be that cmake is linking to the libstdc++ version for the system gcc which is 4.7.2, instead of the correct library version for the compiler I am using. . If I add `-DCMAKE_PREFIX_PATH=$GCC_LIB:$ANACONDA_LIB` to my cmake command it will fix both issues are corrected. The python library is detected as `$ANACONDA_LIB/python2.7.so` and I don't have any problems with linking. And there is no errors at runtime either. In both cases cmake seems to detect the versions correctly since it has the correct executable. . So when it comes time to document the new build system for users, it may be prudent to mention they should either use the `CMAKE_PREFIX_PATH` argument, or check that cmake has detected the correct library paths for the python/compiler they actually meant to use if they are working in a environment where multiple python/compilers installed. Most clusters will have some way of swapping these out with a system default installed gl",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249621149:248,load,loaded,248,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249621149,2,['load'],['loaded']
Performance,"Well, @dgasmith, it's not even really crashing due to the PSIO errors...the job continues to run after failing to write the binary optimization data, and finally fails after exceeding the number of allotted optimization iterations. But, it's the manner in which that happens which is the issue: the optimizer is failing to take steps after the first failure of PSIO, I expect because it can't read the optimization data from binary file. Below is a brief overview of the structure within the job. - Take some number of good optimization steps, with structure:; 1) SCF; - Compute SCF wavefunction & gradient; 2) OPTKING; - Read optimization data from binary file ; - Take optimization step; - Write optimization data to binary file; - Sets geometry for next step; - First error step:; 1) SCF wfn & grad computed successfully; 2) OPTKING; - Read data & take step successfully; - PSIO error when attempting to write data to binary file; - Sets geometry for next step; - All subsequent steps (until `geom_maxiter` reached):; 1) SCF wfn, grad computed successfully; 2) OPTKING; - Second PSIO error occurs; - **No optimization step taken**; - Geometry for next step is set to the same as in first error step. So, once the first PSIO error occurs, there's no progress made by the optimizer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/789#issuecomment-325800423:131,optimiz,optimization,131,https://psicode.org,https://github.com/psi4/psi4/issues/789#issuecomment-325800423,10,['optimiz'],"['optimization', 'optimizer']"
Performance,"Well, I was really hoping to keep the build matrix fairly simple to prevent build # explosions. What if we do the following:; - clang 3.5, 3.7 (release); - gcc 4.8, 5.2 (release); - gcc 5.2 (debug). I don think building intermediate compiler releases is as important and we manage to stay at the 5 concurrent build number.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182887045:298,concurren,concurrent,298,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182887045,1,['concurren'],['concurrent']
Performance,"Well, there is a progress. I have set the filename and force_restart keywords. This results in:. <pre>; **************************; * *; * CCENERGY *; * *; **************************; Nuclear Rep. energy (chkpt) = 327.121621300020024; SCF energy (chkpt) = -1150.463735394306923; Reference energy (file100) = -1150.463735394307605; Input parameters:; -----------------; Wave function = CC3; Reference wfn = RHF; Memory (Mbytes) = 8192.0; Maxiter = 50; R_Convergence = 1.0e-07; E_Convergence = 1.0e-06; Restart = Yes; DIIS = Yes; AO Basis = NONE; ABCD = NEW; Cache Level = 2; Cache Type = LOW; Print Level = 5; Num. of threads = 8; # Amps to Print = 10; Print MP2 Amps? = No; Analyze T2 Amps = No; Print Pair Ener = No; Local CC = No; T3 Ws incore = No; SCS-MP2 = False; SCSN-MP2 = False; SCS-CCSD = False; Using old T1 amplitudes.; Solving CC Amplitude Equations; ------------------------------; Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; ---- --------------------- --------- ---------- ---------- ---------- --------; 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; </pre>. So it seems to reuse the old T1 amplitudes, but still goes to solving the equations anyway - I was rather expecting it to skip this step - as this is the most time consuming part and there is nothing changed in the system since the crash. Bartek",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/27#issuecomment-29878672:557,Cache,Cache,557,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29878672,2,['Cache'],['Cache']
Performance,"What I meant was that that may be just fine. If what's being cached is `$HOME/miniconda/bin` and `$HOME/miniconda/packages`, then you've preserved all the heavy stuff (mkl w/i the packages dir). A new `conda create -n p4dev` that goes into `$HOME/miniconda/envs/p4dev` is trivial compared to downloading all the packages. I'd prefer the env to be re-solved each time, so I'm not advocating caching p4dev env.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1398#issuecomment-444523572:61,cache,cached,61,https://psicode.org,https://github.com/psi4/psi4/pull/1398#issuecomment-444523572,1,['cache'],['cached']
Performance,"What single function in psi4 would you wish compiler optimization not to break? At first testing, it seems that the latest (release 2, Feb 2016) Intel compilers break `C_DGEMM`. The code compiles fine, but not much runs. Below are three dgemm calls that break. Not all dgemm calls break. Possibly 'N'/'T' are fine but 'N'/'N' break. If anyone wants to investigate, you can start with my ""dftfix"" branch (https://github.com/loriab/psi4/tree/dftfix). By commenting out Mulliken analysis and File 180 printing, I've gotten the jk & out_of_core algorithms in test case scf5 working on that branch. https://github.com/loriab/psi4/commit/9bcd03959d1901e89ecea0274e0c086b0da397fa#diff-e30bd7727a15aa5a70e322a84a385291R2903. https://github.com/loriab/psi4/commit/9bcd03959d1901e89ecea0274e0c086b0da397fa#diff-ada70c1f1cf0a80abbdbacbfb7716abbR690. https://github.com/loriab/psi4/commit/9bcd03959d1901e89ecea0274e0c086b0da397fa#diff-be25444186a5073fb47c3ac4667533baR473",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321:53,optimiz,optimization,53,https://psicode.org,https://github.com/psi4/psi4/issues/321,1,['optimiz'],['optimization']
Performance,"What was the solution to this? We probably do want to save the optimized orbitals to the wfn. Did you have to turn that off, Ugur?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/127#issuecomment-121957186:63,optimiz,optimized,63,https://psicode.org,https://github.com/psi4/psi4/issues/127#issuecomment-121957186,1,['optimiz'],['optimized']
Performance,"When I run a df-mp3 geometry opt job I got the following error:. An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 44, in <module>. File ""/usr/local/programs/psi4intel/share/psi4/python/driver.py"", line 1019, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs). File ""/usr/local/programs/psi4intel/share/psi4/python/driver.py"", line 588, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs). File ""/usr/local/programs/psi4intel/share/psi4/python/procedures/proc.py"", line 364, in select_mp3_gradient; return func(name, **kwargs). File ""/usr/local/programs/psi4intel/share/psi4/python/procedures/proc.py"", line 1381, in run_dfocc_gradient; dfocc_wfn = psi4.dfocc(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/ubgroup/psi4/src/lib/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const_, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const_, char_, unsigned long, psi::psio_address, psi::psio_address_); psi::PSIO::read_entry(unsigned int, char const_, char_, unsigned long); psi::dfoccwave::Tensor2d::read(boost::shared_ptrpsi::PSIO, unsigned int). @loriab",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/428:255,optimiz,optimize,255,https://psicode.org,https://github.com/psi4/psi4/issues/428,1,['optimiz'],['optimize']
Performance,"When I run psi4 on a remote computer with `psi4 & disown` and exit before the job is complete, it crashes with messages like the following. ```; Traceback (most recent call last):; File ""/path/to/conda/envs/p4env/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 49, in <module>; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1360, in optimize print('Optimizer: Optimization complete!'); ```. ```; Traceback (most recent call last):; File ""/path/to/conda/envs/p4env/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1727, in frequency; H, wfn = hessian(name, return_wfn=True, molecule=molecule, **kwargs); File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1466, in hessian; return driver_cbs._cbs_gufunc(hessian, name.lower(), **kwargs, ptype=""hessian""); File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver_cbs.py"", line 1955, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs)File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1562, in hessian; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1562, in hessian; _process_displacement(; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 167, in _process_displacement; sys.stdout.flush(); ```. It seems to work if I add a redirect of the output to /dev/null, `psi4 > /dev/null & disown`, but I was wondering if there would be a way to fix this inside of psi4 (might require the removal of all print statements). It took me way too long to figure out this problem, so if nothing else, I hope that posting this issue will help others with this problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1983:400,optimiz,optimize,400,https://psicode.org,https://github.com/psi4/psi4/issues/1983,3,"['Optimiz', 'optimiz']","['Optimization', 'Optimizer', 'optimize']"
Performance,"When I use ECP correction basis set like lanl2dz, Optking assign Mn to P in Writting optimization data to binary file step. [Mn2-dzvp.txt](https://github.com/psi4/psi4/files/2177450/Mn2-dzvp.txt); [Mn2-lanl2dz.txt](https://github.com/psi4/psi4/files/2177451/Mn2-lanl2dz.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1082:85,optimiz,optimization,85,https://psicode.org,https://github.com/psi4/psi4/issues/1082,1,['optimiz'],['optimization']
Performance,"When I've only made changes to the optimizer, I always do a 'ctest -L opt'. So, yes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/328#issuecomment-202667624:35,optimiz,optimizer,35,https://psicode.org,https://github.com/psi4/psi4/pull/328#issuecomment-202667624,1,['optimiz'],['optimizer']
Performance,"When a symmetric molecule is run explicitly in `C1` symmetry the `fnocc` DF-CCSD(T) calculations seems to initialise [Mintshelper](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/mintshelper.cc#L168) when accessing the 1e-integrals given the output below (molecule+detailed basis set info are printed). CONV-CCSD(T) does not print this, but its 1e-ints come from IWL files I think.; For DF-CC they are requested here:; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/df_ccsd.cc#L727. Maybe a problem with missing cached integrals and the re-computation triggers the Mintshelper init?. DF-CCSD(T) output example:; ```; ...; ==> Input parameters <==. Freeze core orbitals? no; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 0; Number of active occupied orbitals: 5; Number of active virtual orbitals: 8; Number of frozen virtual orbitals: 0. Molecular point group: c1; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.079135765818 15.994914619570; H 0.000000000000 -0.707106781187 0.627971015369 1.007825032230; H 0.000000000000 0.707106781187 0.627971015369 1.007825032230. -AO BASIS SET INFORMATION:; Name = 3-21G; Blend = 3-21G; Total number of shells = 9; Number of primitives = 15; ...; ```. example input:; ```; molecule mol {; symmetry c1; O; H 1 R; H 1 R 2 A; }; mol.R = 1.0; mol.A = 90.0. set cc_type df; energy('fno-ccsd(t)/3-21g'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1957:542,cache,cached,542,https://psicode.org,https://github.com/psi4/psi4/issues/1957,1,['cache'],['cached']
Performance,"When multiplying three matrices `A`, `B`, and `C` together in Psi4, the matrix multiplication is always performed as `((AB)C)`:; https://github.com/psi4/psi4/blob/2f085df4cab054b8b01c3e5c0bc1e1270c2e7bf2/psi4/src/psi4/libmints/matrix.cc#L3404-L3409; In some cases, this might result in more overall work than the equivalent `(A(BC))`. We should probably check for this, and choose the cheaper ordering.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2052:104,perform,performed,104,https://psicode.org,https://github.com/psi4/psi4/issues/2052,1,['perform'],['performed']
Performance,"When performing a B3LYP-D2 single point, with custom basis sets, I am getting different behavior from the conda binary (version: 1.2a1.dev458) and the source build (version: 1.2a1.dev458) on OS X with the exact same input file. . The conda binary produces the first few iterations and does not converge: ; ```; @DF-RKS iter 0: -2879.17610215408513 -2.87918e+03 1.22721e-02 ; @DF-RKS iter 1: -2858.84066999046217 2.03354e+01 1.56850e-03 ; @DF-RKS iter 2: -2827.41152127256692 3.14291e+01 5.78505e-03 DIIS; ``` . My source build produces the first few iterations and does converge: ; ```; @DF-RKS iter 0: -2879.11745920690237 -2.87912e+03 2.36222e-02; @DF-RKS iter 1: -2858.74896735363154 2.03685e+01 3.85843e-03; @DF-RKS iter 2: -2830.12148835513381 2.86275e+01 1.21879e-02 DIIS; ```. Diffing the outputs reveals nothing unexpected other than the RKS iterations. I have attached the input and basis sets for completeness. [binary_vs_source.zip](https://github.com/psi4/psi4/files/1183857/binary_vs_source.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/773:5,perform,performing,5,https://psicode.org,https://github.com/psi4/psi4/issues/773,1,['perform'],['performing']
Performance,When running a calculation using. optimize('pwpb95-d3bj'). The program will try to open a file in my home directory rather than the scratch directory and crashes:; RuntimeError: [Errno 13] Permission denied: '/home/s/spoel/dftd3_092b616a'. A workaround is to use in my script; export HOME=$PSI_SCRATCH,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1724:34,optimiz,optimize,34,https://psicode.org,https://github.com/psi4/psi4/issues/1724,1,['optimiz'],['optimize']
Performance,"When running both version 1.1 and 1.2rc1 psi4 compiled with intel compilers a dftd3 optimization (optimize('pbe0-d3bj')) hangs at the SCF grad start, also I can see cpu usage falls from all cpus to only one.; if i set -n 1 it runs fine. . This problem I didn't have with psi4 compiled with gcc. Any ideas as to why this happens, and what I can do?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1007:84,optimiz,optimization,84,https://psicode.org,https://github.com/psi4/psi4/issues/1007,2,['optimiz'],"['optimization', 'optimize']"
Performance,"When the comment says perform a phase change on _all_ the eigenvectors, that includes eigenvector 0. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2829:22,perform,perform,22,https://psicode.org,https://github.com/psi4/psi4/pull/2829,1,['perform'],['perform']
Performance,"When you say that the memory usage doesn't go above 70%, what do you mean precisely, and how is it measured? `vmstat -S M` during a run may help us see the breakdown of memory usage a bit. I think the concern is that when using large files, the OS will try to keep (parts of) the files in memory for faster access later. Then these pages may get swapped (or just having them in memory causes other things to get swapped). I'm not sure if/why the kernel would choose to swap rather than free some memory from the page cache (cached data is already on a disk...), but I'm far from a kernel memory expert. Last note: Psi4 is mostly written in C++, and therefore can't always use `posix_fadvise`, since there's no (standard) way to get a `FILE*` or file descriptor from an `std::fstream`. Others can comment about how memory management in psi4 works, but I think it is pretty rudimentary and doesn't interact with the OS at all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/424#issuecomment-228791186:517,cache,cache,517,https://psicode.org,https://github.com/psi4/psi4/issues/424#issuecomment-228791186,2,['cache'],"['cache', 'cached']"
Performance,Where can I find the plugin cache?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271928177:28,cache,cache,28,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271928177,1,['cache'],['cache']
Performance,"Whew, I'd be alarmed if the hint variable wasn't doing its job. The cmake isn't set up to use $MKLROOT (I might have tried but that mkl and iomp5 aren't in the same place in a typical intel installation, as you noted). The complication is that this has to work even for `ExternalProject`s or across different computers and the purpose of TargetLAPACK is to provide a single entity to hand to subprojects without duplicating all the math detection machinery and all the cmake and envvars that influence it. I'm not sure current reworking is optimized, but I can live with one cmake hint var. The iomp5 detection works with GNU in conda b/c all the libs are gathered together so the second `find_library()` w/o `NO_DEFAULT_PATH` catches it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396753319:540,optimiz,optimized,540,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396753319,1,['optimiz'],['optimized']
Performance,"While I appreciate that tests are now passing, I still request changes.; * Comments that refer to methods that no longer exist need to be removed.; * The comment on dfhelper's release_AO is vague. What does it mean to ""release AO""? Are you clearing memory used to store some AO-basis quantity?; * Naming a method ""release_AO"" that does not actually release AO is confusing. You need to change this.; * The title of this PR is misleading. This PR is not just optimizing I/O. This PR is _changing the values that Psi gives for SAPT(DFT)_ due to the options edits. Are these edits supposed to be part of the PR or not? That's going to determine how the rest of this review process goes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1106499269:458,optimiz,optimizing,458,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1106499269,1,['optimiz'],['optimizing']
Performance,"While PSI4 can perform PCM calculations, it does not have built in support for state of the art solvation models, like the SMD method by Cramer et al.; Paper:; http://pubs.acs.org/doi/abs/10.1021/jp810292n",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/227:15,perform,perform,15,https://psicode.org,https://github.com/psi4/psi4/issues/227,1,['perform'],['perform']
Performance,"While it's worth asking @psi-rking to confirm, this looks like a standard issue that's going to get the standard response:; Set `opt_coordinates` to `both` or `cartesian`. The new optimizer will be smart enough so that you won't need to do any manual key setting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2208#issuecomment-868798412:180,optimiz,optimizer,180,https://psicode.org,https://github.com/psi4/psi4/issues/2208#issuecomment-868798412,1,['optimiz'],['optimizer']
Performance,"While trying to optimize the geometry for conformers of the ligand in the 2vx0 pdb structure I am also running into memory issues. Our cluster is running with cgroups and I ask for 10GB, but tell psi4 to use only 8gb. In that case most of the calculations fail >374 out of 500 conformers. To make it work I have to ask for 20GB and use only 4GB in psi4. The strange thing is these 500 runs have the same number of atoms and the same basis set, just different atomic positions. But some fail during the first SCF, some complete a few optimization cycles and a few complete. I have seen this behavior with the wB97x and the B3LYP functionals.; I have seen this with the conda installed 1.3rc2 and with a hand compiled version of 1.3rc2.; I have attached my input file and one of the smallest failed output files. I hope this helps pinning this down.; Thanks for working on Psi4, I love it!. [singlePsi4_rec290_pid12029.log](https://github.com/psi4/psi4/files/2911797/singlePsi4_rec290_pid12029.log); [singlePsi4_rec290_pid12029.txt](https://github.com/psi4/psi4/files/2911798/singlePsi4_rec290_pid12029.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1532#issuecomment-467980525:16,optimiz,optimize,16,https://psicode.org,https://github.com/psi4/psi4/issues/1532#issuecomment-467980525,2,['optimiz'],"['optimization', 'optimize']"
Performance,"While trying to reproduce some gaussian calculations with psi4, I noticed that the frequencies dependent on the dertype setting to a larger extend than anticipated: ; ```; molecule h2o {; units angstrom; H 0.000000 0.760300 -0.196100; O 0.000000 0.000000 0.392200; H 0.000000 -0.760300 -0.196100; }. set basis 6-311G**; set e_convergence 9; set g_convergence gau_verytight; set scf_type pk. optimize('scf', molecule=h2o). scf_e, scf_wfn = frequencies('scf', dertype='energy', return_wfn=True); scf_e, scf_wfn = frequencies('scf', dertype='gradient', return_wfn=True); scf_e, scf_wfn = frequencies('scf', dertype='hessian', return_wfn=True); ```; This generated the following frequencies:; ```; $ grep -A 3 'Vib. Freq' 'hf-6-311Gstarstar-freq.out'; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1750.943 2519.214; 2 4142.104 5959.557; 3 4237.400 6096.666; --; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1750.925 2519.188; 2 4142.111 5959.567; 3 4237.427 6096.704; --; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1731.766 2491.623; 2 4136.243 5951.124; 3 4232.474 6089.579; ```; For reference these are the gaussian g09 frequencies:; ```; Frequencies -- 1750.9454 4142.1029 4237.3716; ```. I am using:; ```; $ rpm -qif /usr/bin/psi4 | egrep '^Version|^Source'; Version : 1.1; Source RPM : psi4-1.1-2.add49b9git.fc26.src.rpm; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/901:391,optimiz,optimize,391,https://psicode.org,https://github.com/psi4/psi4/issues/901,1,['optimiz'],['optimize']
Performance,"With `ENABLE_bse`, BSE tries to install in the wrong place; ```; [ 11%] Installing Psi4-detected BLAS/LAPACK; [ 11%] Performing build step for 'bse_external'; -- Install configuration: ""Release""; [ 11%] Built target lapack_external; /usr/lib/python3.11/site-packages/setuptools/dist.py:530: UserWarning: Normalizing 'v1.8+60.gdf9a0dd5b' to '1.8+60.gdf9a0dd5b'; warnings.warn(tmpl.format(**locals())); running build; running build_py; UPDATING build/lib/basis_set_exchange/_version.py; set build/lib/basis_set_exchange/_version.py to 'v1.8+60.gdf9a0dd5b'; [ 17%] Performing install step for 'bse_external'; /usr/lib/python3.11/site-packages/setuptools/dist.py:530: UserWarning: Normalizing 'v1.8+60.gdf9a0dd5b' to '1.8+60.gdf9a0dd5b'; warnings.warn(tmpl.format(**locals())); running install; /usr/lib/python3.11/site-packages/setuptools/command/install.py:34: SetuptoolsDeprecationWarning: setup.py install is deprecated. Use build and pip and other standards-based tools.; warnings.warn(; running build; running build_py; UPDATING build/lib/basis_set_exchange/_version.py; set build/lib/basis_set_exchange/_version.py to 'v1.8+60.gdf9a0dd5b'; running install_lib; copying build/lib/basis_set_exchange/_version.py -> /home/work/psi4/objdir/stage/lib/basis_set_exchange; byte-compiling /home/work/psi4/objdir/stage/lib/basis_set_exchange/_version.py to _version.cpython-311.pyc; running install_data; copying LICENSE -> /usr/local/; error: could not create '/usr/local/LICENSE': Permission denied; make[2]: *** [external/upstream/bse/CMakeFiles/bse_external.dir/build.make:105: external/upstream/bse/bse_external-prefix/src/bse_external-stamp/bse_external-install] Error 1; make[1]: *** [CMakeFiles/Makefile2:11190: external/upstream/bse/CMakeFiles/bse_external.dir/all] Error 2; make: *** [Makefile:146: all] Error 2; (p4env) [susi@lenovo objdir]$ ccmake . ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3067:117,Perform,Performing,117,https://psicode.org,https://github.com/psi4/psi4/issues/3067,2,['Perform'],['Performing']
Performance,"With apologies for the vague title, there are some issues with the `compute_gradient` function. They're connected, so it's best to have a single topic for these:. 1. Not all modules that support gradients support the `compute_gradient` API. `dct` and Rob's `dfmp2` do, but most other modules don't. We learned in #2200 that RHF wavefunctions don't, though `SCFDeriv` and `Dispersion` ""wavefunctions"" seem to. (See `scfgrad` and `libdisp`, respectively.); 2. The `compute_gradient` calls coming out of `dct` and `dfmp2` don't even work without crashing! Minimal not-working example:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. wfn = energy('mp2/sto-6g', return_wfn=True)[1] # Can switch ""mp2"" to ""dct"" and get a similar crash; wfn.compute_gradient(); ```; 3. Computing a derivative _reliably_ requires assumptions about what intermediates are available and what the Hamiltonian is. For example, we need to know that the file of ""T"" amplitudes is the same as that optimized during the energy computation, and that the energy was computed without relativistic corrections. We currently store whether the relativistic global is _currently_ enabled, but not whether relatvistic terms were added during the compute step. I'm open to alternatives, but I favor taking `compute_gradient` out of the API entirely. It's not consistently in the API, it doesn't get simple cases right when it's there, and the assumptions required by such a code don't make it a good candidate for being in the API in the first place.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2223:969,optimiz,optimized,969,https://psicode.org,https://github.com/psi4/psi4/issues/2223,1,['optimiz'],['optimized']
Performance,"With early CMake I had the impression that it didn't collect compilers and flags from ""standard"" envvars (it doesn't say it will before 3.12 https://cmake.org/cmake/help/v3.12/variable/CMAKE_LANG_FLAGS.html), so I wasn't concerned with the Conda flag set. Also, all the psi4's native build knobs get appended to `CMAKE_CXX_FLAGS`, so many of the conda ones are superseded. For actual psi conda package builds, any gnu flags not recognized by the Intel compiler will also be discarded. I can see how there might be modest performance concerns with some of the conda flags like `FORTIFY_SOURCE=2`, but I'm not sure they're worth the trouble of resisting. If you've found otherwise, I'd be interested to hear. It's assuring to learn that Fedora also imposes some of those flags.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2416#issuecomment-1026023875:521,perform,performance,521,https://psicode.org,https://github.com/psi4/psi4/issues/2416#issuecomment-1026023875,1,['perform'],['performance']
Performance,"With the following input file:; ```; memory 500 mb; set basis cc-pVDZ. molecule mol {; 4. O 0.0 0.0 0.0; H 0.0 0.0 0.96; H 0.76 0.76 0.0; H -0.76 0.76 0.0; }. set optking {; # Freeze the dihedral angle between atoms 1, 2, 3, and 4 at 90 degrees; frozen_dihedral = [(1, 2, 3, 4, 100.0)]; }. # Perform the optimization with the frozen dihedral constraint; optimize('b3lyp'); ```; running psi4 v1.9.1 gives me a segfault: 'psi4 inp.dat' terminated by signal SIGSEGV (Address boundary error); I have tried a few other ways using keywords: fixed_dihedral, and ranged_dihedral, no luck. Thanks.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3242:292,Perform,Perform,292,https://psicode.org,https://github.com/psi4/psi4/issues/3242,3,"['Perform', 'optimiz']","['Perform', 'optimization', 'optimize']"
Performance,"With this example molecule, optKING fails to generate the internal coordinates, and the only way I can optimize is with cartesian and dynamic turned off. I am using latest stable (tags/v1.3.2); ```; molecule mol {; 0 1; C	3.4581937559 -1.4112107502 0.6628195511; N	2.3821384470 -0.8016830488 0.6668723530; S	4.2544548310 -1.9352085140 0.7141164692; C	0.0280306717 -0.2718210489 0.2142030812; C	1.4218510657 0.1094955364 0.2323938153; C	-0.8935306288 0.6217951694 -0.3937996518; C	0.8749866134 2.2505177854 -0.7685419788; C	1.8279888898 1.3582013966 -0.2135637897; C	-0.4555887744 -1.4910996529 0.7799513422; C	-0.4434092186 1.8876824244 -0.8862861414; C	-2.2687193610 0.2375554697 -0.4984111660; C	-1.7875187142 -1.8176564012 0.6992850376; C	-2.7005499370 -0.9522869380 0.0312086031; H	1.2191387380 3.2257308775 -1.1130222609; H	2.8687615759 1.6638420009 -0.1549213082; H	0.2506882454 -2.1490136705 1.2871205466; H	-1.1675172916 2.5561147866 -1.3473002913; H	-2.9594867982 0.9074639926 -1.0076319073; H	-2.1654431803 -2.7365522813 1.1434359441; H	-3.7445689295 -1.2520671337 -0.0481282482; }; mol.update_geometry(); mol.symmetrize(0.001). set reference rks; set scf_type df; set basis def2-SV(P); set DYNAMIC_LEVEL 1. E = optimize('pbe'). ```. final output:; ```; 			-----------------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------; At level 1: Red. Int., RFO, no backsteps, dynamic trust; 	At level 1: Red. Int., RFO, no backsteps, dynamic trust. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3; 	 2 : 1 3 5; 	 3 : 1 2; 	 4 : 5 6 9; 	 5 : 2 4 8; 	 6 : 4 10 11; 	 7 : 8 10 14; 	 8 : 5 7 15; 	 9 : 4 12 16; 	 10 : 6 7 17; 	 11 : 6 13 18; 	 12 : 9 13 19; 	 13 : 11 12 20; 	 14 : 7; 	 15 : 8; 	 16 : 9; 	 17 : 10; 	 18 : 11; 	 19 : 12; 	 20 : 13. BEND::BEND() Atom",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1703:103,optimiz,optimize,103,https://psicode.org,https://github.com/psi4/psi4/issues/1703,1,['optimiz'],['optimize']
Performance,Would it make sense to add a `qc_module adcc` in this case?; Then a new `select_adc` in proc.py could manage both the (old) `run_adc` and `run_adcc`. . Though having an optional/external `qc_module` is unprecedented I think. --. Isn't the `mints.mo_eri` routine becoming quickly a bottleneck?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547800055:281,bottleneck,bottleneck,281,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547800055,1,['bottleneck'],['bottleneck']
Performance,"Would it make sense to add the SNS-MP2 plugin to any of the psi4 conda packages concurrent with this, to make it easier to access for users? (I'm not sure if that's standard practice for ""endorsed plugins"" or not.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/850#issuecomment-344706017:80,concurren,concurrent,80,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-344706017,1,['concurren'],['concurrent']
Performance,"Would you mind teaching me if I have this right because I don't actually know and this is how far I got, I still can't seem to get intensities out. . ```python. import psi4; import textwrap; import numpy as np. psi4.core.set_num_threads(8); psi4.set_memory('30000mb'). psi4.set_options({; 'scf_type': 'df',; 'g_convergence': 'gau_tight',; 'reference': 'rhf',; 'freeze_core': 'true',; }). psi4.core.set_output_file('water.out', False). def run_calculation(molecule):; ; universe = psi4.geometry(molecule); universe.update_geometry(); mass = np.asarray([16.01, 1.0, 1.0]); geometry = np.asarray(universe.geometry()); irrep_labels = universe.irrep_labels(); dipole_derivatives = None; project_translation = True; project_rotation = True; symbols = [universe.symbol(at) for at in range(universe.natom())]; theory = 'mp2/aug-cc-pvdz'; ; energy, wave_function = psi4.optimize(; 'hf/6-31g*',; return_wfn = 'yes',; molecule=universe; ). hessian, wave_function_2 = psi4.hessian(; theory,; ref_gradient=wave_function.gradient(),; return_wfn= True; ). basisset = wave_function_2.basisset(). wave_function_2.hessian().print_out(). vibinfo, vibtext = psi4.driver.qcdb.vib.harmonic_analysis(; np.array(hessian),; geometry,; mass,; basisset,; irrep_labels,; dipole_derivatives,; project_translation,; project_rotation; ). print(vibtext); print(psi4.driver.qcdb.vib.print_vibs(vibinfo, shortlong=True, normco='q', atom_lbl=symbols)). if __name__ == '__main__':. water_zmatrix = '''\; O; H 1 0.9894093; H 1 0.9894093 2 100.02688; '''; run_calculation(textwrap.dedent(water_zmatrix)). ```. The output from the script for water is:. ```python. Vibration 7 8 9 ; Freq [cm^-1] 1563.0797 4068.4404 4208.3554 ; Irrep ; Reduced mass [u] 1.0740 1.0365 1.0684 ; Force const [mDyne/A] 1.5461 10.1080 11.1487 ; Turning point v=0 [a0] 0.2678 0.1690 0.1636 ; RMS dev v=0 [a0 u^1/2] 0.1962 0.1216 0.1196 ; Char temp [K] 2248.9237 5853.5800 6054.8864 ; --------------------------------------------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2698#issuecomment-1226632650:861,optimiz,optimize,861,https://psicode.org,https://github.com/psi4/psi4/issues/2698#issuecomment-1226632650,1,['optimiz'],['optimize']
Performance,"X 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.291143 ( 0, 2) 7AA 8AX 9AB ; * 3 -0.291143 ( 2, 0) 7AB 8AX 9AA ; * 4 0.206936 ( 2, 2) 8AX 9AX ; * 5 0.015212 ( 1, 1) 7AX 9AX ; * 6 0.000000 ( 1, 0) 7AX 8AB 9AA ; * 7 0.000000 ( 0, 1) 7AX 8AA 9AB ; * 8 -0.000000 ( 1, 2) 7AA 8AB 9AX ; * 9 -0.000000 ( 2, 1) 7AB 8AA 9AX ; *******************************************************************; *******************************************************************. As you can see, there is typically the same kind of sign for some determinants sharing a similar coefficient. For example, for the groundstate we have : 0.691216 ( 0, 1) 7AX 8AA 9AB and 0.691216 ( 1, 0) 7AX 8AB 9AA. However, in the context of a singlet spin symmetry, these determinants should present opposite signs. To check this, I used a personal code to build up from scratch the frozen core Hamiltonian associated to the (4,3) active space. I used for this the resulting Optimized MO coeff matrix obtained from SA-CASSCF Psi4. Diagonalizing this Hamiltonian gives the following two lowest states expressed in the active space : ; | Psi_0 > = 0.149|011011⟩ - 0.149|100111⟩ - 0.691|110110⟩ + 0.691|111001⟩; | Psi_1 > = 0.207|001111⟩ - 0.291|011110⟩ + 0.291|101101⟩ + 0.015|110011⟩ - 0.887|111100⟩; (NB : the HF determinant is |111100⟩ ). With this diagonalization, we clearly find same coefficients but with opposite signs. As a double check, I also computed the energy of these states and obtained : ; E_0 = -93.93144865003578 Ha; E_1 = -93.90255033754423 Ha. Which exactly coincides with the energy obtained in the Psi4 OUTPUT. Do you have a clue why such a pb arises in the Psi4 output ?. Thanks a lot for you answer",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008:2881,Optimiz,Optimized,2881,https://psicode.org,https://github.com/psi4/psi4/issues/2008,1,['Optimiz'],['Optimized']
Performance,"Yay!. Ok, back to IntelCache.cmake. `set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu- --sysroot=/home/termo/miniconda3/envs/p4dev35/x86_64-conda_cos6-linux-gnu/sysroot"" CACHE STRING """")`. Do a line like the above for each of C, CXX, Fortran.; Clear away `objdir/`; Try the `psi4-path-advisor --intel` again",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386739654:222,CACHE,CACHE,222,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386739654,1,['CACHE'],['CACHE']
Performance,"Yea, scratching my head over that one too. I was knee deep in `lsof` loads and thought we should check the simple things. The other weird thing is you can export either MKL or OMP threads and it fixes the error. I wonder what the precedence for`mkl/omp_set_num_threads/environ` is. It could help track down who is setting what.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311756543:69,load,loads,69,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311756543,1,['load'],['loads']
Performance,"Yeah sylabs would definitely work but only allows for storing .sif images. We could consider only offering `docker` containers and having `apptainer` users pull from `dockerhub`. See https://apptainer.org/docs/user/main/docker_and_oci.html#docker-hub. I know Jet loves using docker dev containers and I'm guessing others on the dev team do too. . As an explicit example from apptainers docs: ; pull tensorflow and run with the host's amd gpu libraries loaded into the container. MPI is essentially the same.; ```; $ apptainer pull docker://rocm/tensorflow:latest; $ apptainer run --rocm tensorflow_latest.sif; ```. As described in the link I referenced there are a few peculiarities that we would have to work through so that our docker containers will run properly with `apptainer`. Off the top of my head the two main things would be:. * making sure nothing is being installed in `/root` or `/home` by default (easy); * making sure that a writable filesystem is being mounted (The user would ultimately need to ensure that a scratch directory is available or that they're running from a directory/volume with disk space available). If we wanted, it might be nice to convert the docker containers explicitly to apptainer format and upload to sylabs? A new user at a super-computing institute probably wouldn't check dockerhub. For building apptainer containers, I normally start by pulling base images from dockerhub to work with. I haven't tried pulling and running docker containers directly though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2951#issuecomment-1536683682:452,load,loaded,452,https://psicode.org,https://github.com/psi4/psi4/issues/2951#issuecomment-1536683682,1,['load'],['loaded']
Performance,"Yeah, for larger / more diffuse basis functions, it's often hard to converge w/ incremental fock. I've already mentioned this in the [docs](https://psicode.org/psi4manual/master/scf.html#cosx-exchange). In general, incremental fock gets you only a very small speedup with COSX. This is because the last SCF iteration (performed on a large grid) is much more expensive than the other iterations (performed on a small grid), and the last iteration can't be done with a difference density matrix. For this reason, I generally set the `COSX_INCFOCK` option to `FALSE` when I use the JK algorithm, and I had meant to make this the default behavior.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1215622859:318,perform,performed,318,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1215622859,2,['perform'],['performed']
Performance,"Yeah, it seems like the simple REST interface doesn't require a queue for simple tasks; substructure searches and conformer stuff seems to generate a ticket, as before. I learned all I know from scanning the document linked above, so I'm far from an expert. I did a little testing with both Python versions and it _seems_ to be ok.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/507#issuecomment-258979667:64,queue,queue,64,https://psicode.org,https://github.com/psi4/psi4/pull/507#issuecomment-258979667,1,['queue'],['queue']
Performance,"Yeah, it's perfectly fine to split things up into multiple PRs. One sensible order I can come up with is:. 1. Edit the incremental Fock in the derived `DirectJK` class so that it is efficient and maintainable (no SCF iteration counts associated with the object, minimal number of matrices cached on the object, etc.) [some other PR]; 2. Move this improved incremental Fock to the parent `JK` class. [this PR]. In a previous comment, I suggested doing away with the cached `J`/`K`/`wK`/`dJ`/`dK`/`dwK` matrices by changing the behavior of the `JK` object so that the buffers aren't cleared between SCF iterations. If you find that difficult to do, I think an acceptable compromise would be to retain those cached matrices, but initialize them in the SCF driver (rather than make them a property of the JK object).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1231764838:289,cache,cached,289,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1231764838,3,['cache'],['cached']
Performance,"Yeah, that ""fc not implemented for oo"" message is of module scope. That's not unreasonable for a module author to write, but it is harder to interpret b/c of the known connection btwn occ/dfocc. And reasonably impossible for an outsider who sees psi as a cohesive entity to interpret. Some mention in the docs would be nice. But the scalable way forward as I see it is to add ae/fc to managed methods like https://github.com/psi4/psi4/pull/1850/files#diff-dbf22cd80d16f6d8ef8250145a6d91bfR153 and to expand explicit testing for NYI https://github.com/psi4/psi4/pull/1850/files#diff-ac285870f28f146a56a93bd3592ff776R154. That way, a user who doesn't specify a module will get a ""can't do"" at the driver level and module authors can stay module-local in their messaging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863#issuecomment-612132054:333,scalab,scalable,333,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-612132054,1,['scalab'],['scalable']
Performance,"Yeah, this is just too big a problem for DETCI's poor CISD capabilities. I answered this in the forums. Basically, if you optimize the code to do full CI very efficiently, you can wind up with an algorithm that creates intermediate data that is small enough to work fine for full CI, but blows up for CISD and makes the code run out of memory. And indeed, that's how I wrote the code, because we didn't care about CISD when we wrote it. I'm pretty sure the molecule reported here is big enough to run into this problem. I issued a PR to update the documentation to warn users away from DETCI CISD unless it's a tiny molecule (with a small basis).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1685#issuecomment-515615749:122,optimiz,optimize,122,https://psicode.org,https://github.com/psi4/psi4/issues/1685#issuecomment-515615749,1,['optimiz'],['optimize']
Performance,"Yep I agree. Thank you for linking this issue to the optking repo as well and bringing to our attention. I'm trying to look at more github issues for optking since you all have put so much effort into nicely labeling everything for us - still looking at this one. Any more discussion on the actual torsion issue will likely be at psi-rking/optking#63 or in slack once I've actually done some poking around. I'll make sure to reference the eventual fix here. The quick fix for running the optimization is to use Cartesian coordinates. For debugging purposes I'll just be running HF, good to know that guess=read is not currently supported - thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2213#issuecomment-870974855:488,optimiz,optimization,488,https://psicode.org,https://github.com/psi4/psi4/issues/2213#issuecomment-870974855,1,['optimiz'],['optimization']
Performance,"Yes, I started by copying Ugur's Tensor code. His code/syntax with these constructions is easily understandable. But then I also had to make changes in what seems quite fundamental code pieces to psi4 (libciomr) about block matrices and arrays.; With my limited C++ understanding I was forced to make sometimes copies with `_float` added:; https://github.com/psi4/psi4/pull/1261/files#diff-4345139288e2ce7d0f6fea4a51fb2ea1R140; which perhaps can be solved smarter as well. In these single-precision algorithms one will need some mixing of doubles with floats as it is best for the accuracy-performance compromise to selectively change the precision for only specific terms. Not sure if this is entirely solvable without cloning some blocks of physics code.; But not needing to clone his entire tensor class would be good!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1261#issuecomment-424609821:590,perform,performance,590,https://psicode.org,https://github.com/psi4/psi4/pull/1261#issuecomment-424609821,1,['perform'],['performance']
Performance,"Yes, I think the original idea of ""quicktests"" was that the developer could; quickly tell whether or not Psi4 was plausibly working correctly (so, a few; tests of major functionality, rather than the idea that all tests that are; quick would go here). Eventually we crammed in quite a few small tests; here because people started getting lazy and only ever ran quicktests, so; coverage started to become a more major issue. If we are now running most; of the tests nightly, this is less of an issue than it was, so the coverage; could be scaled back. With regard to Daniel's suggested breakdown, we might try that but with; different names that might be even clearer:; - mintests - Minimal checking of psi; small number of tests, all of which; are short; - shorttests - Best coverage possible in a 20 minute envelope; - normaltests - Tests that would run automatically each night (could also; be nightlytests); - longtests - Any extra-long tests that were useful in debugging or; performance evaluation, but that are too long to reasonably run every night; (my understanding is that's what we mean now by this label). On Mon, Nov 21, 2016 at 12:44 PM, Daniel Smith notifications@github.com; wrote:. > I may not be impartial, but I like the CMake colors a lot. LGTM; > ; > We have been tossing around the idea of moving tests around to make a bit; > more sense.; > - quicktests - Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp; > only; > - normaltests - Best coverage possible in a 20 minute envelope. (10; > minutes on 2-thread travis); > - longtests - Anything that runs in 15 minutes; > - no modifier - All psi tests; > ; > Obviously not in this PR, but something to ponder.; > ; > @robertodr https://github.com/robertodr I found the colors on; > Stackoverflow, so I would say yes :); > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262012104, or mute;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/524#issuecomment-262017312:980,perform,performance,980,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262017312,1,['perform'],['performance']
Performance,"Yes, I think this is sound. Cache the miniconda, cache the packages, don't cache the environment or the environment solution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1536#issuecomment-464392694:28,Cache,Cache,28,https://psicode.org,https://github.com/psi4/psi4/pull/1536#issuecomment-464392694,3,"['Cache', 'cache']","['Cache', 'cache']"
Performance,"Yes, I think you're both right. the numpy_helpers `np.load` is serializing ordinary floats for Matrix/Vector, so np machinery, not pickle, used. Then the python_helpers `np.load` is forming the custom Matrix/Vector objects themselves, so they do need pickle True, and >=16.3 need it explicitly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1607#issuecomment-485810151:54,load,load,54,https://psicode.org,https://github.com/psi4/psi4/pull/1607#issuecomment-485810151,2,['load'],['load']
Performance,"Yes, I wrote the original version of `libpsio`, and this I/O structure was an important part of its use for many years. Indeed, it was intended to replicate some of the key performance features of an earlier I/O library (long since removed) contained within the old `libciomr` that have infrastructure for about four different types of I/O. However, at some point in the development of Psi4, someone wrote the new, much more complicated code for building the file paths, they broke this capability. Chesterton's fence strikes again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2725#issuecomment-1257288803:173,perform,performance,173,https://psicode.org,https://github.com/psi4/psi4/issues/2725#issuecomment-1257288803,1,['perform'],['performance']
Performance,"Yes, `print_out()`s vastly outnumber `printf`s or `print()`s, but there are still a few, with options errors (""Did you mean ...?"") and optimization reports being the most likely encountered. They were left because they were thought helpful for non-background runs and there weren't downsides. Looks like you've found one. (I guess I always redirect with background & disown.) The optimization printing should go away with the switch to pyoptking and the ddd driver. Sounds like considering a purge of other direct printing then would be good, too. Good to leave this open. Thanks for the report.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1983#issuecomment-676629074:135,optimiz,optimization,135,https://psicode.org,https://github.com/psi4/psi4/issues/1983#issuecomment-676629074,2,['optimiz'],['optimization']
Performance,"Yes, please post your `conda list`. The yaml load isn't in psi4 itself, so I'm guessing that the dask compatible with py37 uses the plain load syntax but pyyaml 6 is in your env that uses the new syntax. py37-based packages may not be getting built anymore. I'd use py38 or py39 or add `pyyaml<6` to your env to force a solve with the plain load syntax.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2510#issuecomment-1080993168:45,load,load,45,https://psicode.org,https://github.com/psi4/psi4/issues/2510#issuecomment-1080993168,3,['load'],['load']
Performance,"Yes, that's what I was expecting -- 50% cached and fits ~10gb should fit in memory. Further problem?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1819#issuecomment-593637795:40,cache,cached,40,https://psicode.org,https://github.com/psi4/psi4/issues/1819#issuecomment-593637795,1,['cache'],['cached']
Performance,"Yes, the 1 electron integral routines are getting a very significant rewrite after that pull request is in; they will use libint2, and will be screened for overlap. The original 1e integral code was really written with the standard core hamiltonian in mind, where performance is never an issue. Parallelization of that rewritten code should be relatively easy. I haven't quite decided the best order to reconcile the changes to the integral engine with #1946 yet, but we'll get that merged as soon as we can. Thanks for posting this issue so that we can all coordinate - hopefully everything will be much easier when all of the old integral code is ripped out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2007#issuecomment-692972528:264,perform,performance,264,https://psicode.org,https://github.com/psi4/psi4/issues/2007#issuecomment-692972528,1,['perform'],['performance']
Performance,"Yes, the move to c-f-based is still planned (indeed, one of our build machines just quit, so it has special urgency). #2791 was as far as I got this cycle. It was needed to use more c-f packages instead of psi-specialized ones, and because those are the most popular non-required deps. Are there particular packages you'd need besides required, optimization, and dispersion? Or is simply a c-f-based psi4 package that solves your primary goal?. Many of the deps are compiled or psi is using a slight fork or need windows work. do you have specialties? :-). Roughly, my plan is to start compiling psi4 locally with c-f conditions and the very basic deps and post them to a `psi4/label/cf` channel. Libint2 must still pull from psi4 channel for the forseeable future. Glad to talk strategy, esp. after 12 Dec.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621#issuecomment-1336507776:345,optimiz,optimization,345,https://psicode.org,https://github.com/psi4/psi4/issues/2621#issuecomment-1336507776,1,['optimiz'],['optimization']
Performance,"You can fix the `MKL FATAL ERROR` by `LD_PRELOAD=/path/to/libmkl_rt.so psi4`. Yes, #563 or a near relative will fix that properly w/o the preload. When you run the `bin/psi4` ""executable"", it hunts down its `lib/psi4/__init__.py` to load psi4 as a python module. I wouldn't have expected it to be confused by a symlink, but I suppose it's possible. I'll have to try it out. Glad the python detection seems to be working consistently now. Your CMake logs look good (the unnerving ""detached HEAD"" is just because we pin to tags or commits for dependencies). The odd python3.4 detection in the pybind11 CMake config is to be expected, since none of the environment was passed over to pybind11 because it doesn't matter at that stage. On the now-healed compilation, I was just warned today (@bennybp) that CMake _does_ search your install (not stage, install) dir for dependencies, so perhaps your hunch was right.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273738266:233,load,load,233,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273738266,1,['load'],['load']
Performance,"You mean @avcopan should adjust the compare_values test for opt7 to the last-optimized-irc-point from the last structure, similar to what was done for opt-irc-1 & -2, @dgasmith? I think I agree.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-190761069:77,optimiz,optimized-irc-point,77,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-190761069,1,['optimiz'],['optimized-irc-point']
Performance,"Your system has got us confused as to why GCC isn't picked up (at all, hence the `-- Found base compiler version `) much less incorrectly, as everything you've printed looks ideal. 1. Make _sure_ you're deleting `objdir/` btwn cmake attempts; 2. Make _sure_ you're `conda activate p4dev35` (sure looks like you are); 3. `printenv`, please; 4. See the commented out `#set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """")` in the file you just `cat`-ed? Paste the full path it has to the trio of `set(CMAKE_*_FLAGS ...` above and try again.; 5. Try a simple compile.; ```; >>>icpc -gnu-prefix=x86_64-conda_cos6-linux-gnu- hello.cc -o hello && ./hello; Hello, World!; GCC: 7.2.0; Intel: 1800; ```. hello.cc; ```; #include <iostream>; using namespace std;. int main() ; {; cout << ""Hello, World!"" << endl;; cout << ""GCC: "" << __GNUC__ << ""."" << __GNUC_MINOR__ << ""."" << __GNUC_PATCHLEVEL__ << endl;; #ifdef __INTEL_COMPILER; cout << ""Intel: "" << __INTEL_COMPILER << endl;; #endif. return 0;; }; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386634031:470,CACHE,CACHE,470,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386634031,1,['CACHE'],['CACHE']
Performance,"[Easybuild](https://hpcugent.github.io/easybuild/) is not an alternative to CMake or autoconf. The idea is to have an easy way to make reproducible builds and modules. Everything in the stack should also be optimally build, meaning utilizing the hardware to its full extend (for example, if AVX2 or infiniband is available, we will use it). Easybuild will take care of all dependencies. It will avoid using the OS installed (old) versions of software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after building a compiler (GCC/intel/...) from scratch. We also patch out any problem. Psi4 for example hard codes it's build path for the generation of new plugins. This is not desirable on a HPC system. Some software is also not adjusted to be build by anything other than GCC. We make it work with intel too. Some software doesn't even have a real build system other than a list of makefiles that usually don't work out of the box. We fix that so the build is reproducible. . It's primarily meant for HPC sites. If somebody adds support for a piece of software, other people can reuse it with one command. I use it to build Psi4 in production. If you're developing, Easybuild is useful for building all up to date versions of dependencies. On our systems, if I run: module load PSI, I get a psi4 (a git version from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for example GCC-5.1, it takes one command. Adding a GCC subproject to Psi sounds like a bad idea. Building GCC is not a trivial task.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105224328:1285,load,load,1285,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105224328,1,['load'],['load']
Performance,[Feature request carried forward from forums](http://forum.psicode.org/t/using-psi4-for-excited-state-optimization-with-root-following/2546/6). Some technology in Psi's excited state methods to follow a particular state. See QChem methods in the link.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2630:102,optimiz,optimization-with-root-following,102,https://psicode.org,https://github.com/psi4/psi4/issues/2630,1,['optimiz'],['optimization-with-root-following']
Performance,"[GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. # First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf exte",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:2986,bottleneck,bottlenecks,2986,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['bottleneck'],['bottlenecks']
Performance,[QUESTION] No concurrency when running psi4 from command line?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2600:14,concurren,concurrency,14,https://psicode.org,https://github.com/psi4/psi4/issues/2600,1,['concurren'],['concurrency']
Performance,"[Recovered from the forums.](http://forum.psicode.org/t/segfault-projecting-wfn-onto-new-basis/945). User attempted a manual basis guess, with the following input file.; ```; molecule {; 0 5; FE 0.000000000000 0.000000000000 0.123274779640; F 1.565379000000 0.000000000000 -0.647320000000; F -0.000000000000 -1.700830000000 0.639825000000; F 0.000000000000 1.700830000000 0.639825000000; F -1.565379000000 -0.000000000000 -0.647320000000; }. set {; basis sto-3g; guess sad; scf_type direct; reference uhf; }. energy('hf'). basis {; assign 6-31++G**; assign Fe 6-31G**; }. set guess read; optimize('hf'); ```. The PSIO error that results is difficult to interpret. Can we catch the case of switching basis sets without cleaning and tell the user to either clean explicitly or use the `basis_guess` option, depending on what they're trying to do?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1329:588,optimiz,optimize,588,https://psicode.org,https://github.com/psi4/psi4/issues/1329,1,['optimiz'],['optimize']
Performance,"[Recovered from the forums.](http://forum.psicode.org/t/thermodynamic-analysis/1014/2). The post-frequency vibrational information is difficult to get at in-file with a Psithon (not PsiAPI). See the original topic for a listing of the difficulties. User reports that `thermo` did not return a dict, but `git blame` says the return value of `thermo` has been a dict for quite some time. In the end, Lori recommended not getting the information through thermo in the first place, but loading the vibrational record.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1331:482,load,loading,482,https://psicode.org,https://github.com/psi4/psi4/issues/1331,1,['load'],['loading']
Performance,"[Spin-component scaling](https://pubs.acs.org/doi/pdf/10.1021/jp105647c) (eq. 5, 8, 9) and [spin-opposite-scaling](https://aip.scitation.org/doi/10.1063/1.2718952) (eq. 1, 5) seem to be defined such that the scaling _should_ be included in the Lagrangian and thus the orbital optimization. I can't speak to what behavior was intended when `occ` was coded.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1751#issuecomment-551931052:276,optimiz,optimization,276,https://psicode.org,https://github.com/psi4/psi4/issues/1751#issuecomment-551931052,1,['optimiz'],['optimization']
Performance,"[This](https://github.com/psi4/psi4/files/866534/torsion.pdf) is the sort of geometry I get, which is very reasonable looking. If you compare the 'good' and 'bad' geometries, is the different in the orientation of the methyl hydrogens? If so, it's likely that your starting guess has them oriented with steric clashes, but the barrier to rotation is too high for the optimizer to be able to overcome.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/647#issuecomment-288899587:367,optimiz,optimizer,367,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288899587,1,['optimiz'],['optimizer']
Performance,"],; [ 0.0, 0.0, 0.0],; [ 0.0, 0.0, 0.0]]; zerograd.set(refgrad). # this is the first system, a fluoromethane that looks pretty good to the eye; # zmat version, normz. molecule normz {; C; H 1 1.2; H 1 1.2 2 104; H 1 1.2 2 105 3 120; F 1 1.3 2 106 4 121; }. # reference start NRE, E, G. norm_nre_start = 37.6824945882 # Q-Chem; norm_e_start = -139.5307182946 # Q-Chem; norm_g_start = psi4.Matrix(5, 3) # Q-Chem; contents = [ # have to swap x & y, and -x; [ -0.07990533, -0.00642920, -0.00348020, 0.04874047, 0.04107426],; [ -0.04900557, -0.00240633, 0.05677652, -0.03006882, 0.02470420],; [ -0.06715450, 0.05113530, -0.00508959, -0.00643364, 0.02754243]]; norm_g_start.set(zip(*contents)); norm_rmsg_start = 0.041309 # Q-Chem; # Full Analytical Gradient of MP2 Energy (in au.); # 1 2 3 4 5; # 1 -0.04900557 -0.00240633 0.05677652 -0.03006882 0.02470420; # 2 0.07990533 0.00642920 0.00348020 -0.04874047 -0.04107426; # 3 -0.06715450 0.05113530 -0.00508959 -0.00643364 0.02754243. # reference optimized NRE, E (G should be 0). nre_opt = 37.5276022922 # Q-Chem; e_opt = -139.5573922 # Q-Chem; #norm_g_opt # Q-Chem; # Full Analytical Gradient of MP2 Energy (in au.); # 1 2 3 4 5; # 1 0.00000025 -0.00000001 -0.00000021 -0.00000007 0.00000005; # 2 0.00000010 0.00000008 0.00000000 0.00000001 -0.00000020; # 3 0.00000038 -0.00000005 -0.00000006 -0.00000023 -0.00000003. def test_norm_start(mol):; g0 = gradient('mp2', molecule=mol); compare_values(norm_nre_start, mol.nuclear_repulsion_energy(), 3, 'start nre'); compare_values(norm_e_start, get_variable('CURRENT ENERGY'), 5, 'start ene'); compare_values(norm_rmsg_start, g0.rms(), 4, 'start rms grad'); compare_matrices(norm_g_start, g0, 3, 'start grad'). def test_zero_grad(mol):; e, wfn = optimize('mp2', return_wfn=True, molecule=mol); g = wfn.gradient(); g.print_out(); compare_values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); compare_values(e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene'); compare_matrices(zerograd, g, 3, 'opt ZER",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:1563,optimiz,optimized,1563,https://psicode.org,https://github.com/psi4/psi4/issues/310,1,['optimiz'],['optimized']
Performance,"]>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::scf::HF>), std::shared_ptr<psi::Matrix> (*)(std::shared_ptr<psi::scf::HF>), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, pybind11::arg const&, char const (&) [61])::{lambda(pybind11::detail::function_call&)#1}::_FUN(pybind11::detail::function_call&) () at /usr/include/pybind11/pybind11.h:224. #19 0x00007f21a8441138 in pybind11::cpp_function::dispatcher (self=0x7f2185ffe790, args_in=0x7f21476cd000, ; kwargs_in=0x0) at /usr/include/pybind11/pybind11.h:946; #20 0x000056022a991401 in cfunction_call (func=0x7f2186005210, args=0x7f21476cd000, kwargs=0x0); at /usr/local/src/conda/python-3.12.5/Objects/methodobject.c:537; #21 0x000056022a97109b in _PyObject_MakeTpCall (tstate=0x56022ae03058 <_PyRuntime+459704>, ; callable=0x7f2186005210, args=<optimized out>, nargs=1, keywords=0x0); at /usr/local/src/conda/python-3.12.5/Objects/call.c:240; #22 0x000056022a877f65 in _PyEval_EvalFrameDefault (tstate=<optimized out>, frame=0x7f21b9ea9af0, ; throwflag=<optimized out>) at Python/bytecodes.c:2714; #23 0x000056022aa2bece in PyEval_EvalCode (co=co@entry=0x56025a2e86d0, globals=globals@entry=0x7f21abff9900, ; locals=locals@entry=0x7f21abff9900) at /usr/local/src/conda/python-3.12.5/Python/ceval.c:578; #24 0x000056022aa50d9a in run_eval_code_obj (tstate=tstate@entry=0x56022ae03058 <_PyRuntime+459704>, ; co=co@entry=0x56025a2e86d0, globals=globals@entry=0x7f21abff9900, locals=locals@entry=0x7f21abff9900); at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:1722; --Type <RET> for more, q to quit, c to continue without paging--; #25 0x000056022aa4bf4b in run_mod (mod=mod@entry=0x56025a306440, ; filename=filename@entry=0x56022ad98b00 <_PyRuntime+24160>, globals=globals@entry=0x7f21abff9900, ; locals=locals@entry=0x7f21abff9900, flags=flags@entry=0x7ffc67b366b8, arena=arena@entry=0x7f215015b370); at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:1743; #26 0x000056022aa3ccb2 in PyRun_StringFla",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969:5304,optimiz,optimized,5304,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969,2,['optimiz'],['optimized']
Performance,"_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #303 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fac0e0fe470, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #304 PyImport_ImportModuleLevelObject (name=0x7fac0e0fe470, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #305 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #306 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #307 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fac0e0f68c0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #308 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fac0e0f68c0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #309 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0ae880, callargs=0x7fac0e0f68c0, func=0x7fac0e3989a0, trace_info=0x7fff1128b870, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #310 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e32fc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #311 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e32fc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #312 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:64874,optimiz,optimized,64874,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"__P=<optimized out>) at /usr/lib/gcc/x86_64-redhat-linux/10/include/emmintrin.h:173; #1 dgemm_oncopy_HASWELL (m=132, n=24, a=0x7faa67735990, lda=132, b=<optimized out>) at ../kernel/x86_64/dgemm_ncopy_8_skylakex.c:91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0x7ffdc830b470, N=N@entry=0x7ffdc830b474, ; K=K@entry=0x7ffdc830b46c, alpha=alpha@entry=0x7ffdc830b460, a=0x5589d9053d00, ldA=0x7ffdc830b4a0, b=0x7faa663ab010, ldB=0x7ffdc830b490, beta=0x7ffdc830b458, c=0x7faa7c13b010, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k=<optimized out>, alpha=<optimized out>, a=<optimized out>, ; lda=<optimized out>, b=0x5589d9053d00, ldb=<optimized out>, beta=<optimized out>, c=0x7faa7c13b010, ldc=<op",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:1612,optimiz,optimized,1612,https://psicode.org,https://github.com/psi4/psi4/issues/2010,5,['optimiz'],['optimized']
Performance,"__________. def test_json():; """"""json/energy""""""; ; import numpy as np; ; # Generate JSON data; json_data = {}; json_data[""molecule""] = """"""He 0 0 0\n--\nHe 0 0 1""""""; json_data[""driver""] = ""gradient""; json_data[""args""] = 'SCF'; json_data[""kwargs""] = {}; json_data[""options""] = {""BASIS"": ""STO-3G""}; json_data[""return_output""] = True; ; psi4.json_wrapper.run_json(json_data); ; assert psi4.compare_strings(""STO-3G"", json_data[""options""][""BASIS""], ""Options test""); > assert psi4.compare_integers(True, json_data[""success""], ""Success""). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:644: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . expected = True, computed = False, label = 'Success'. def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite.; ; """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	Success: computed value (0) does not match (1). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/p4util/util.py:244: TestComparisonError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Options test......................................................PASSED; ____________________________________________________________________ test_dkh ____________________________________________________________________. @using_dkh; def test_dkh():; """"""dkh/molpro-2order""""""; ; Ne = psi4.geometry(""""""; 0 1; Ne; """"""); ; psi4.set_options({; 'reference': 'rhf',; 'basis': 'cc-pvtz-dk',; 'relativistic': 'dkh',; 'dkh_order': 2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:17650,Perform,Performs,17650,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Perform'],['Performs']
Performance,"_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::shared_ptr<psi::Matrix> (*)(std::shared_ptr<psi::Wavefunction>), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, char const (&) [61])::{lambda(pybind11::detail::function_call&)#3}::_FUN(pybind11::detail::function_call&) (); at /usr/include/pybind11/pybind11.h:137; #20 0x00007faaae20b610 in pybind11::cpp_function::dispatcher (self=<optimized out>, args_in=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), ; kwargs_in=0x0) at /usr/include/pybind11/pybind11.h:624; #21 0x00007faabd65df8a in cfunction_call_varargs (func=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, ; args=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), kwargs=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:742; #22 0x00007faabd64e681 in _PyObject_MakeTpCall (callable=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, args=<optimized out>, nargs=<optimized out>, keywords=0x0); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:159; #23 0x00007faabd64b53c in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:125; #24 _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:115; #25 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #26 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3469; #27 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; --Type <RET> for more, q to quit, c to continue without paging-- f=Frame",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:6308,optimiz,optimized,6308,https://psicode.org,https://github.com/psi4/psi4/issues/2010,2,['optimiz'],['optimized']
Performance,"_ptr_base.h:1324; #14 0x00007faaaed967ba in psi::scfgrad::scfgrad (ref_wfn=..., options=...) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/wrapper.cc:46; #15 0x00007faaae1ebe2a in py_psi_scfgrad (ref_wfn=std::shared_ptr<class psi::Wavefunction> (use count 5, weak count 1) = {...}) at /usr/include/c++/10/ext/atomicity.h:100; #16 0x00007faaae20f796 in pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call_impl<std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), 0ul, pybind11::detail::void_type>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::integer_sequence<unsigned long, 0ul>, pybind11::detail::void_type&&) && (f=<optimized out>, f=<optimized out>, this=0x7ffdc830c010) at /usr/include/c++/10/ext/atomicity.h:100; #17 pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call<std::shared_ptr<psi::Matrix>, pybind11::detail::void_type, std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>)>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>)) && (f=<optimized out>, this=0x7ffdc830c010) at /usr/include/pybind11/cast.h:1954; #18 pybind11::cpp_function::initialize<std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Wavefunction>, pybind11::name, pybind11::scope, pybind11::sibling, char [61]>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::shared_ptr<psi::Matrix> (*)(std::shared_ptr<psi::Wavefunction>), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, char const (&) [61])::{lambda(pybind11::detail::function_call&)#3}::operator()(pybind11::detail::function_call&) const (this=0x0, call=...) at /usr/include/pybind11/pybind11.h:160; #19 pybind11::cpp_function::initialize<std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Wavefunction>, p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:4319,optimiz,optimized,4319,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['optimiz'],['optimized']
Performance,"_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf SKIPPED; test_addons.py::test_grimme_3c SKIPPED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. =============================================== 15 passed, 4 skipped, 1 xpassed in 124.33 seconds ================================================; ```. Running `pytest -v -k 'not test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/current` is a symlink to `miniconda3`, gives me:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py XPASS; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/pyth",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:2049,cache,cachedir,2049,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['cache'],['cachedir']
Performance,"_stack=0x712c327ea368) at Python/ceval.c:4058; #14 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #15 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91b94db9b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=1, kws=0x92f85c8, kwcount=1, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #16 0x00006a91c388e3fa in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x712c327ea568, func=0x6a91b8cca488) at Python/ceval.c:4131; #17 call_function (oparg=<optimized out>, pp_stack=0x712c327ea568) at Python/ceval.c:4056; #18 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #19 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91c45356b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=0, kws=0x0, kwcount=0, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #20 0x00006a91c388fed2 in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at Python/ceval.c:669; #21 0x00006a91c38ae38c in run_mod (arena=0x93cee40, flags=<optimized out>, locals=0x6a91c4610d70, globals=0x6a91c4610d70, filename=0x6a91c38de42d ""<string>"", mod=<optimized out>) at Python/pythonrun.c:1371; #22 PyRun_StringFlags (. ```; str=0x92f8a04 ""from psi4 import *\nfrom p4const import *\nfrom p4util import *\nfrom molutil import *\nfrom aliases import *\npsi4_io = psi4.IOManager.shared_object()\npsi4.efp_init()\npsi4_io.set_default_path(\""/app/scienc""..., ; start=257, globals=0x6a91c4610d70, locals=0x6a91c4610d70, flags=<optimized out>) at Python/pythonrun.c:1334; ```; #23 0x000000000555a8aa in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) (); #24 0x0000000000a67f25 in psi::Python::run(_IO_FILE*) (); #25 0x00000000009937e0 in main (). (gdb) . the input file:. memory 2500 mb. molecule struct {; symmetry c1; no_reorient #; no_com # whether to move the origin ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:3360,optimiz,optimized,3360,https://psicode.org,https://github.com/psi4/psi4/issues/153,3,['optimiz'],['optimized']
Performance,"`. As this function has other responsibilities, `trans_one` is preserved. Compared to the previous interface, there are three key changes.; 1. Callers can pass in blocks of the OPDM/Lagrangian. This gives callers flexibility to pass in `oo` and `vv` and `ov` and `vo` blocks separately if available, and to not pass in a block that is conjugate to another block already passed in. This is frequently the case.; 2. Callers pass in these blocks as a map from orbital space labels to a SharedMatrix containing the relevant block and are responsible for attaching this to the wavefunction object via the `Da`, `Db`, and `X` member variables. This is the most important point for this section! All codes except `cc` already store the OPDM/Lagrangian as `SharedMatrix` objects, so this is the path of least resistance. The one holdout predates `libmints` and instead uses a `libmints` `Matrix`-like structure. (See discussion in Step Four.) Existing code had to perform many an astounding number of type conversions to ultimately convert back to the type we had originally. `dct`, for instance, went `SharedMatrix` -> `file2` -> QTOrdered Block Matrix -> PSIO Entry -> Lower Triangle -> Block Matrix -> Lower Triangle -> PSIO Entry -> `SharedMatrix`. We now stay in a `SharedMatrix` the entire time. This type change is why `integraltransform_oei.cc:trans_one` is not used in the new version. When you use a `Matrix`, the transformation reduces to a `linalg::triplet` call.; 3. Lastly, prefactors. Because it's ambiguous what you call the Lagrangian, I'm going to use as a point of reference ""the thing you contract against the overlap derivatives"", because that is pefectly unambiguous. In the old code, you'd send -2 times that thing. Now, you send -1 times that thing. This is necessary for consistency with how the SCF code determines the value of the Lagrangian on a wavefunction object. If you want an example for how this works, see the newly added code in `dct_gradient_UHF.cc:compute_ewdm_odc`. Wi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1745:1585,perform,perform,1585,https://psicode.org,https://github.com/psi4/psi4/pull/1745,1,['perform'],['perform']
Performance,"`; I can sometimes trigger a segmentation fault:; ```; $ psi4 -n 4 mncn6.in ; Segmentation fault (core dumped); ```; Backtrace; ```; (gdb) bt; #0 _mm_storeu_pd (__A=..., __P=<optimized out>) at /usr/lib/gcc/x86_64-redhat-linux/10/include/emmintrin.h:173; #1 dgemm_oncopy_HASWELL (m=132, n=24, a=0x7faa67735990, lda=132, b=<optimized out>) at ../kernel/x86_64/dgemm_ncopy_8_skylakex.c:91; #2 0x00007faa9b34501f in inner_thread (args=0x7ffdc8105610, range_m=<optimized out>, range_n=0x7ffdc8105aa8, sa=0x7faa98bba000, sb=<optimized out>, mypos=0) at level3_thread.c:382; #3 0x00007faa9b47e5b1 in exec_threads (buf_index=<optimized out>, queue=0x7ffdc8105eb0) at blas_server_omp.c:300; #4 exec_blas._omp_fn.0 () at blas_server_omp.c:345; #5 0x00007faa9b0daf46 in GOMP_parallel (fn=fn@entry=0x7faa9b47e4d0 <exec_blas._omp_fn.0>, data=data@entry=0x7ffdc81055c0, num_threads=4, num_threads@entry=0, flags=flags@entry=0); at ../../../libgomp/parallel.c:171; #6 0x00007faa9b47eab5 in exec_blas (num=num@entry=4, queue=queue@entry=0x7ffdc8105eb0) at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0x7ffdc830b470, N=N@entry=0x7ffdc830b474, ; K=K@entry=0x7ffdc830b46c, alpha=alpha@entry=0x7ffdc830b460, a=0x5589d9053d00, ldA=0x7ffdc830b4a0, b=0x7faa663ab010, ldB=0x7ffdc830b490, beta=0x7ffdc830b458, c=0x7faa7c13b010, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:1508,queue,queue,1508,https://psicode.org,https://github.com/psi4/psi4/issues/2010,2,['queue'],['queue']
Performance,"`; Name: DEF2-TZVP; Role: ORBITAL; Keyword: BASIS; atoms 1-2, 5-7, 10 entry C line 123 file /apps/psi4conda/share/psi4/basis/def2-tzvp.gbs; atoms 3-4, 8-9, 11-13 entry O line 189 file /apps/psi4conda/share/psi4/basis/def2-tzvp.gbs; atoms 14-21 entry H line 15 file /apps/psi4conda/share/psi4/basis/def2-tzvp.gbs. Reading orbitals from file /tmp/citric_acid_B3LYP-D3_def2-tzvp_psi4_geom_opt.py.dimer_0_0.23437.180.npy, no projection. ==> Integral Setup <==. DFHelper Memory: AOs need 1.457 GiB; user supplied 24.990 GiB. Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 20; Memory [MiB]: 25589; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 19.8770; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (DEF2-TZVP AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 373; Number of basis functions: 1133; Number of Cartesian functions: 1345; Spherical Harmonics?: true; Max angular momentum: 4. Cached 100.0% of DFT collocation blocks in 2.950 [GiB]. Minimum eigenvalue in the overlap matrix is 1.9770003531E-04.; Reciprocal condition number of the overlap matrix is 2.3108928958E-05.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Orbitals guess was supplied from a previous computation. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 451 451 50 50 50 0; -------------------------------------------------------; Total 451 451 50 50 50 0; -------------------------------------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -756.64880960182893 -7.56649e+02 4.38886e-03; @DF-RKS iter 1: -756.47890146930581 1.69908e-01 5.20818e-03 DIIS; @DF-RKS iter 2: -697.36076163484927 5.91181e+01 1.70568e-02 DIIS; @DF-RKS iter 3: -757.82971261323712 -6.04690e+01 5.09847e-03 DIIS; @DF-RKS iter 4: -757.19091118720712 6.38801e-01 4.14460e",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-952880914:4101,Cache,Cached,4101,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-952880914,1,['Cache'],['Cached']
Performance,`Atom not in list` bug with geometric optimizer,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2871:38,optimiz,optimizer,38,https://psicode.org,https://github.com/psi4/psi4/issues/2871,1,['optimiz'],['optimizer']
Performance,`TypeError: load()` during frequency calculation,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2510:12,load,load,12,https://psicode.org,https://github.com/psi4/psi4/issues/2510,1,['load'],['load']
Performance,"```; # cubane Transition State CСSD(T)/cc-pVDZ geometry optimization. memory 2 Gb. molecule cubane {; 0 1; H -1.460 -1.409 -1.325; C -0.747 -0.790 -0.779; H -1.460 -1.409 1.325; C -0.747 -0.790 0.779; H -1.388 1.387 -1.426; C -0.772 0.772 -0.772; H 1.460 -1.460 -1.475; C 0.725 -0.725 -1.177; H -1.388 1.387 1.426; C -0.772 0.772 0.772; H 1.460 -1.460 1.475; C 0.725 -0.725 1.177; H 1.409 1.460 -1.325; C 0.790 0.747 -0.779; H 1.409 1.460 1.325; C 0.790 0.747 0.779; }. set {; basis cc-pVDZ; opt_type ts; }. set_num_threads(2). optimize('ccsd(t)'); ```. ---. Initial molecule has Molecular point group: cs, Full point group: Cs; after couple of step geometry optimization atomic coordinates changed to; Center X Y Z; ------------ ----------------- ----------------- -----------------; H -1.473705914299 -1.435393855860 -1.358489164213; C -0.797159999078 -0.797004109009 -0.746661382504; H -1.476630117570 -1.415339339271 1.362245194949; C -0.797740772644 -0.782869624563 0.746875065611; H -1.403399626888 1.397804298812 -1.532486210635; C -0.816065575433 0.813208518621 -0.796372487595; H 1.564836624106 -1.553887853367 -0.825942923699; C 0.782186226366 -0.785194185540 -0.703283447355; H -1.398864375817 1.398697058928 1.533459031552; C -0.813477696736 0.814494835084 0.795484014989; H 1.543644549536 -1.569635373854 0.822765427607; C 0.785442354192 -0.778370034240 0.690456922666; H 1.425099138027 1.481569438277 -1.355017034180; C 0.789948918555 0.800919182066 -0.744361460399; H 1.425889588787 1.478227539320 1.363344118168; C 0.793832546892 0.798935970506 0.747984335038; but Molecular point group didn't - cs; error issued; ERROR: Symmetry operation 1 did not map atom 7 to another atom:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10:56,optimiz,optimization,56,https://psicode.org,https://github.com/psi4/psi4/issues/10,3,['optimiz'],"['optimization', 'optimize']"
Performance,```; (p4dev35) termo@Ubuntu16:/media/BIGdisk/psi4$ /home/termo/miniconda3/envs/p4dev35/bin/cmake -H. -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsCache.cmake -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsMKLCache.cmake -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake -Bobjdir; loading initial cache file /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsCache.cmake; loading initial cache file /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsMKLCache.cmake; loading initial cache file /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; -- The C compiler identification is Intel 18.0.2.20180210; -- The CXX compiler identification is Intel 18.0.2.20180210; -- Check for working C compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icc; -- Check for working C compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icpc; -- Check for working CXX compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- The Fortran compiler identification is Intel 18.0.2.20180210; -- Check for working Fortran compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort; -- Check for working Fortran compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /home/termo/intel/compilers_and_libraries_2018.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883:344,load,loading,344,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883,6,"['cache', 'load']","['cache', 'loading']"
Performance,"```; >>> grep -ir simint_VECTOR .; ./CMakeCache.txt:SIMINT_VECTOR:STRING=sse; ./external/upstream/simint/CMakeFiles/simint_external.dir/build.make:	cd /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external-build && /Users/loriab/linux/miniconda3/envs/p4dev36/bin/cmake -DCMAKE_INSTALL_PREFIX=/usr/local/psi4 -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_INCLUDEDIR=include -DBUILD_SHARED_LIBS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DSIMINT_STANDALONE=OFF -DENABLE_TESTS=OFF -DSIMINT_VECTOR=sse -DSIMINT_MAXAM=6 -C/Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/tmp/simint_external-cache-Release.cmake ""-GUnix Makefiles"" /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external; ./external/upstream/simint/simint_external-prefix/src/simint_external-build/CMakeCache.txt:SIMINT_VECTOR:STRING=sse; ./external/upstream/simint/simint_external-prefix/src/simint_external-build/simintConfig.cmake:set(simint_VECTOR sse); ./external/upstream/simint/simint_external-prefix/tmp/simint_external-cfgcmd.txt:cmd='/Users/loriab/linux/miniconda3/envs/p4dev36/bin/cmake;-DCMAKE_INSTALL_PREFIX=/usr/local/psi4;-DCMAKE_BUILD_TYPE=Release;-DCMAKE_C_COMPILER=/usr/bin/clang;-DCMAKE_CXX_COMPILER=/usr/bin/clang++;-DCMAKE_INSTALL_LIBDIR=lib;-DCMAKE_INSTALL_INCLUDEDIR=include;-DBUILD_SHARED_LIBS=OFF;-DCMAKE_POSITION_INDEPENDENT_CODE=ON;-DSIMINT_STANDALONE=OFF;-DENABLE_TESTS=OFF;-DSIMINT_VECTOR=sse;-DSIMINT_MAXAM=6;-C/Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/tmp/simint_external-cache-$<CONFIG>.cmake;-GUnix Makefiles;/Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external'; ./stage/usr/local/psi4/share/cmake/simint/simintConfig.cmake:set(simint_VECTOR sse); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-356840364:2634,cache,cache,2634,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-356840364,1,['cache'],['cache']
Performance,"```; [ 22%] Performing configure step for 'psi4-core'; cd /usr/ports/science/psi4/work/.build/psi4-core-prefix/src/psi4-core-build && /usr/local/bin/cmake -DCMAKE_INSTALL_PREFIX=/usr/ports/science/psi4/work/.build/stage -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=/usr/bin/c++ ""-DCMAKE_CXX_FLAGS=-O2 -pipe -fno-omit-frame-pointer -fstack-protector -isystem /usr/local/include -fno-strict-aliasing -fno-omit-frame-pointer -isystem /usr/local/include -march=native"" -DCMAKE_C_COMPILER=/usr/bin/cc ""-DCMAKE_C_FLAGS=-O2 -pipe -fno-omit-frame-pointer -fstack-protector -isystem /usr/local/include -fno-strict-aliasing -march=native"" -DCMAKE_CXX_STANDARD=14 -DCMAKE_CXX_STANDARD_REQUIRED=ON -DCMAKE_CXX_EXTENSIONS=OFF -DCMAKE_Fortran_COMPILER= -DCMAKE_Fortran_FLAGS= -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_BINDIR=bin -DCMAKE_INSTALL_DATADIR=share -DCMAKE_INSTALL_INCLUDEDIR=include -DCMAKE_INSTALL_MESSAGE=LAZY -DPYMOD_INSTALL_LIBDIR=/ -DMAX_AM_ERI=5 -DPYTHON_EXECUTABLE=/usr/local/bin/python3.6 -DPYTHON_INCLUDE_DIR=/usr/local/include/python3.6m -DPYTHON_LIBRARY=/usr/local/lib/libpython3.6m.so -DPSI4_ROOT=/usr/ports/science/psi4/work/psi4-1.3-60-ga5d3586e9 -DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF -DENABLE_dkh=OFF -DENABLE_libefp=OFF -DENABLE_erd=OFF -DENABLE_simint=OFF -DENABLE_gdma=OFF -DENABLE_PCMSolver=OFF -DENABLE_OPENMP=ON -DTargetLAPACK_DIR=/usr/ports/science/psi4/work/.build/stage/share/cmake/TargetLAPACK -DTargetHDF5_DIR= -Dambit_DIR= -DCheMPS2_DIR= -Ddkh_DIR= -Dlibefp_DIR= -Derd_DIR= -Dgau2grid_DIR=/usr/local/share/cmake/gau2grid -Dgdma_DIR= -DLibint_DIR= -DPCMSolver_DIR= -Dpybind11_DIR=/usr/local/share/cmake/pybind11 -Dpylibefp_DIR= -Dsimint_DIR= -DLibxc_DIR= -DFortran_ENABLED= -DLIBC_INTERJECT= -DRESTRICT_KEYWORD= -DFC_SYMBOL=2 -DOpenMP_LIBRARY_DIRS= -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -C/usr/ports/science/psi4/work/.build/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake ""-GUnix Makefiles"" /usr/ports/science/psi4/work/psi4-1.3-60-ga5d3586e9/psi4; loading initial cache ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1588:12,Perform,Performing,12,https://psicode.org,https://github.com/psi4/psi4/issues/1588,1,['Perform'],['Performing']
Performance,"```; molecule {; He; }. optimize(""scf/cc-pvdz""); ```. on `1.8a1.dev57` gives. ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin//psi4"", line 345, in <module>; exec(content); File ""<string>"", line 22, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 1272, in optimize; opt_object.take_step(); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/optking/opt_helper.py"", line 174, in take_step; self.dq, self.step_str = self.opt_manager.take_step(self.fq, self._Hq, self.E, return_str=True); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/optking/optimize.py"", line 232, in take_step; achieved_dq, returned_str = self.opt_method.take_step(fq, H, energy, return_str=True). ValueError: not enough values to unpack (expected 2, got 0); ```. Something is wrong (or outright missing) for the single-atom case, which should be a straight ""no geometry to optimize.""",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971:24,optimiz,optimize,24,https://psicode.org,https://github.com/psi4/psi4/issues/2971,4,['optimiz'],['optimize']
Performance,"```CFLAGS=""${CF}"" FFLAGS=""-frecursive""```; LOL. The Fortran code is compiled without any optimizations? :laughing:. And no, OpenMP is not enabled. ```USE_THREAD=1``` is the pthreads version. The OpenMP version would have ```USE_THREAD=1 USE_OPENMP=1```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-387075271:89,optimiz,optimizations,89,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-387075271,1,['optimiz'],['optimizations']
Performance,"```psi4 --version``` prints correct version. ```qcengine info``` fails:; ```; $ qcengine info psi4; Traceback (most recent call last):; File ""/usr/local/bin/qcengine"", line 33, in <module>; sys.exit(load_entry_point('qcengine==0.26.0', 'console_scripts', 'qcengine')()); File ""/usr/local/bin/qcengine"", line 25, in importlib_load_entry_point; return next(matches).load(); File ""/usr/local/lib/python3.9/importlib/metadata.py"", line 86, in load; module = import_module(match.group('module')); File ""/usr/local/lib/python3.9/importlib/__init__.py"", line 127, in import_module; return _bootstrap._gcd_import(name[level:], package, level); File ""<frozen importlib._bootstrap>"", line 1030, in _gcd_import; File ""<frozen importlib._bootstrap>"", line 1007, in _find_and_load; File ""<frozen importlib._bootstrap>"", line 972, in _find_and_load_unlocked; File ""<frozen importlib._bootstrap>"", line 228, in _call_with_frames_removed; File ""<frozen importlib._bootstrap>"", line 1030, in _gcd_import; File ""<frozen importlib._bootstrap>"", line 1007, in _find_and_load; File ""<frozen importlib._bootstrap>"", line 986, in _find_and_load_unlocked; File ""<frozen importlib._bootstrap>"", line 680, in _load_unlocked; File ""<frozen importlib._bootstrap_external>"", line 850, in exec_module; File ""<frozen importlib._bootstrap>"", line 228, in _call_with_frames_removed; File ""/usr/local/lib/python3.9/site-packages/qcengine/__init__.py"", line 5, in <module>; from . import config, exceptions; File ""/usr/local/lib/python3.9/site-packages/qcengine/config.py"", line 340, in <module>; _load_defaults(); File ""/usr/local/lib/python3.9/site-packages/qcengine/config.py"", line 173, in _load_defaults; test_paths = [os.getcwd(), os.path.join(os.path.expanduser(""~""), "".qcarchive"")]; FileNotFoundError: [Errno 2] No such file or directory; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2830#issuecomment-1343732561:364,load,load,364,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343732561,2,['load'],['load']
Performance,"`delta` is the cutoff that any basis extents (the bounds of a basis function) are considered zero. BlockOPoints automatically figures out which basis functions do not contribute to the to a given points. You quickly find gaussians are incredibly local in nature. A good example, consider two atoms 5,000 Bohr apart (non-interacting). If I want to compute the a density on a grid of a single atom only the basis functions at that atom make a difference. . The following tutorial may be useful: https://github.com/psi4/psi4numpy/blob/master/Tutorials/04_Density_Functional_Theory/4b_LDA_kernel.ipynb. Note you can grab the ""active"" block of PHI like so:; ```; npoints = blockopoints.npoints(); lpos = np.array(blockopoints.functions_local_to_global()). phi = np.array(funcsbasis_values()[""PHI""])[:npoints, :lpos.shape[0]]; ```. The grid code is packed to optimal for performance and as such becomes somewhat opaque. I think I have improved readability over time, but I very much welcome suggestions and pull requests :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1051#issuecomment-399608499:865,perform,performance,865,https://psicode.org,https://github.com/psi4/psi4/issues/1051#issuecomment-399608499,1,['perform'],['performance']
Performance,"`dfocc` was better off. `dfocc` doesn't have problems 1, 2, or 4. Not sure about 5 because I'm rusty on converting DF integrals to conventional, but if it did have that problem, it would show up in the gradients. 3 is a problem in `dfocc`. I can deal with it if you'd like, but I assumed nobody would use that algorithm for orbital optimization, and it wasn't worth adding to the #1390 nightmare. Good catch on the comment. I'll update that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1829#issuecomment-594647283:332,optimiz,optimization,332,https://psicode.org,https://github.com/psi4/psi4/pull/1829#issuecomment-594647283,1,['optimiz'],['optimization']
Performance,`max_iter` is always a hard limit in all of Psi4/optimizers/conjugate gradients/etc codes. It seems that this is a high level user expectation that should be obeyed.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1335#issuecomment-436754712:49,optimiz,optimizers,49,https://psicode.org,https://github.com/psi4/psi4/pull/1335#issuecomment-436754712,1,['optimiz'],['optimizers']
Performance,"`opt10` is too big for a test case: 15 atoms, C1 symmetry, 322 basis functions, requests 32 GB of memory, and performing a transition state geometry optimization with an initial Hessian by finite difference of gradients. The calculation timed out on the 13 of 79 gradient displacements of the initial Hessian. The only thing that does help is that it's a DF-MP2 calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184219439:110,perform,performing,110,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184219439,2,"['optimiz', 'perform']","['optimization', 'performing']"
Performance,"a 0.0000000000 19.7419600000 2.8202800000 ; Cl 2.8202800000 19.7419600000 2.8202800000 ; Na 2.8202800000 11.2811200000 2.8202800000 ; Na 0.0000000000 14.1014000000 2.8202800000 ; Cl 2.8202800000 14.1014000000 2.8202800000 ; Na 2.8202800000 5.6405600000 2.8202800000 ; Na 0.0000000000 8.4608400000 2.8202800000 ; Cl 2.8202800000 8.4608400000 2.8202800000 ; Na 2.8202800000 0.0000000000 2.8202800000 ; Na 0.0000000000 2.8202800000 2.8202800000 ; Cl 2.8202800000 2.8202800000 2.8202800000 ; """""". set maxiter 1000; set fail_on_maxiter false. set scf{; #soscf true; #soscf_max_iter 100; #basis_guess true; #damping_percentage 20; }. set optking frozen_cartesian $freeze_list. set cubeprop_tasks ['frontier_orbitals']; set cubic_grid_overage 10; E, wfn = optimize('b3lyp-d3', return_wfn=True) # psicode.org/psi4manual/master/opt.html; cubeprop(wfn)--------------------------------------------------------------------------. Memory set to 23.283 GiB by Python driver. Scratch directory: PATH; gradient() will perform analytic gradient computation. *** tstart() called on Logray; *** at Tue Aug 30 11:57:29 2022. => Loading Basis Set <=. Name: 6-31G; Role: ORBITAL; Keyword: BASIS; atoms 1-4, 9-12, 21-24, 33-34 entry H line 26 file PATH\Anaconda3\envs\psi4\lib\share\psi4\basis\6-31g.gbs ; atoms 5-8, 13-20, 25-32, 35-36 entry C line 87 file PATH\Anaconda3\envs\psi4\lib\share\psi4\basis\6-31g.gbs ; atoms 37-38, 41-42, 45-46, 49-50, 53-54, 57-58, 61-62, 65-66, 69-70, 73-74, 77-78, 81-82, 85-86, 89-90, 93-94, 97-98 entry CL line 294 file PATH\Anaconda3\envs\psi4\lib\share\psi4\basis\6-31g.gbs ; atoms 39-40, 43-44, 47-48, 51-52, 55-56, 59-60, 63-64, 67-68, 71-72, 75-76, 79-80, 83-84, 87-88, 91-92, 95-96, 99-100 entry NA line 162 file PATH\Anaconda3\envs\psi4\lib\share\psi4\basis\6-31g.gbs . => B3LYP-D3: Empirical Dispersion <=. Grimme's -D3 (zero-damping) Dispersion Correction; Grimme S.; Antony J.; Ehrlich S.; Krieg H. (2010), J. Chem. Phys., 132: 154104. s6 = 1.000000; s8 = 1.703000; sr6 = 1.261",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2709:9020,perform,perform,9020,https://psicode.org,https://github.com/psi4/psi4/issues/2709,1,['perform'],['perform']
Performance,"a.u.) : -0.16666563305500; DF-MP3 Total Energy (a.u.) : -75.79855149249789; DF-MP2.5 Correlation Energy (a.u.) : -0.15954101575872; DF-MP2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy (a.u.) : -75.79072957189739; ======================================================================= ; ```. The Lagrangian energy and the final energy now agree perfectly, despite only a tiny change in the Lagrangian energy. However, the key is to note that the lines; ```; 	Orbitals are optimized now.; 	Transforming MOs to the semicanonical basis... ; Switching to the standard DF-MP2 computation... ; ```; are present in the reference output file but not in the output file that I posted. This is due to the if clause [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2648), which requires `std::fabs(DE) >= tol_Eod`, i.e., that the observed delta E is _greater than_ the user-specified convergence criteria. This situation is precisely what the fix to #1143 no longer allows for, so I must conclude that the code in that if suite is what is responsible for the discrepancy. It looks like this code in this if suite is re-computing the energy using the orbitals and T-amplitudes computed during the Lagrangian optimization. Hence the discrepancy is that when the user's energy convergence criteria isn't met, the Lagrangian information was overwritten with the orbital-and-amplitude formalism. Is this correct? Why does this code ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509:3284,optimiz,optimized,3284,https://psicode.org,https://github.com/psi4/psi4/issues/1509,1,['optimiz'],['optimized']
Performance,"a/python-3.10.14/Include/internal/pycore_ceval.h:46; #30 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #31 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #32 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; --Type <RET> for more, q to quit, c to continue without paging--; #33 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #34 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286660, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #35 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8697300, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #36 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8697300, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #37 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #38 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #39 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:12054,optimiz,optimized,12054,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"abd84ecdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #21 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabd84ecdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #22 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112862e0, locals=locals@entry=0x7fabd7bced00, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #23 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd78907c0, globals=globals@entry=0x7fabd7bced00, locals=locals@entry=0x7fabd7bced00); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #24 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd7bced00, globals=0x7fabd7bced00, source=0x7fabd78907c0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #25 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #26 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd7888dd8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #27 0x000055ff90677205 in do_call_core (kwdict=0x7fabd7bce4c0, callargs=0x7fabd7888dc0, func=0x7fac0e398e00, trace_info=0x7fff112864b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #28 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8949cf0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #29 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8949cf0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #30 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:10244,optimiz,optimized,10244,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"abd8903a70, f=0x7fabdcdb7a00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #186 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabdcdb7a00, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #187 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabdcdb7a00, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #188 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112894b0, locals=locals@entry=0x7fabd8903bc0, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #189 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8a87940, globals=globals@entry=0x7fabd8903bc0, locals=locals@entry=0x7fabd8903bc0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #190 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd8903bc0, globals=0x7fabd8903bc0, source=0x7fabd8a87940); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #191 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #192 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd8a8a4d8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #193 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8903b00, callargs=0x7fabd8a8a4c0, func=0x7fac0e398e00, trace_info=0x7fff11289680, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #194 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95d41d50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; --Type <RET> for more, q to quit, c to continue without paging--; #195 0x000055ff90681a2c in _PyEval_EvalFrame (thr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:42248,optimiz,optimized,42248,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"abd8928580, f=0x7fac0e074610, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #260 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e074610, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #261 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e074610, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #262 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128aae0, locals=locals@entry=0x7fabdcd7a300, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #263 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8a86550, globals=globals@entry=0x7fabdcd7a300, locals=locals@entry=0x7fabdcd7a300); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #264 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabdcd7a300, globals=0x7fabdcd7a300, source=0x7fabd8a86550); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #265 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #266 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e0e6fd8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #267 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8902480, callargs=0x7fac0e0e6fc0, func=0x7fac0e398e00, trace_info=0x7fff1128acb0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #268 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8fa8550, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #269 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8fa8550, tstate=0x55ff9515e050) at /usr/local/s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:56572,optimiz,optimized,56572,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"abd8fa9cf0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #67 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8fa9cf0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #68 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112870b0, locals=locals@entry=0x7fabd8887400, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #69 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd88826b0, globals=globals@entry=0x7fabd8887400, locals=locals@entry=0x7fabd8887400); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #70 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd8887400, globals=0x7fabd8887400, source=0x7fabd88826b0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #71 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #72 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd88851d8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #73 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8887300, callargs=0x7fabd88851c0, func=0x7fac0e398e00, trace_info=0x7fff11287280, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #74 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c49700, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #75 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c49700, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #76 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:19198,optimiz,optimized,19198,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ac0e136530, f=0x7fac0e16ec00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #372 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16ec00, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #373 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16ec00, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #374 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128cd30, locals=locals@entry=0x7fac0e071580, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #375 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fac0e06f7e0, globals=globals@entry=0x7fac0e071580, locals=locals@entry=0x7fac0e071580); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #376 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e071580, globals=0x7fac0e071580, source=0x7fac0e06f7e0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #377 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #378 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e041e18, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #379 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e071540, callargs=0x7fac0e041e00, func=0x7fac0e398e00, trace_info=0x7fff1128cf00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #380 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16a3b0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #381 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16a3b0, tstate=0x55ff9515e050) at /usr/local/s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:78361,optimiz,optimized,78361,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ac0e308030, f=0x7fac0e1fccc0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #326 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e1fccc0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #327 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e1fccc0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #328 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128bf60, locals=locals@entry=0x7fac0e072700, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #329 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fac0e1b7050, globals=globals@entry=0x7fac0e072700, locals=locals@entry=0x7fac0e072700); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #330 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e072700, globals=0x7fac0e072700, source=0x7fac0e1b7050); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; --Type <RET> for more, q to quit, c to continue without paging--; #331 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #332 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e1a1898, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #333 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0728c0, callargs=0x7fac0e1a1880, func=0x7fac0e398e00, trace_info=0x7fff1128c130, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #334 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16bb50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #335 0x000055ff90681a2c in _PyEval_EvalFrame (thr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:69361,optimiz,optimized,69361,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"achines; * a package built after switching the ENABLE_XHOST from `/arch:AVX2` to `/arch:AVX` seemed to work for all; * even before #2377, that flag wasn't active: https://dev.azure.com/psi4/psi4/_build/results?buildId=3455&view=logs&j=f31c9f97-4411-58e7-49ac-fc73f645e6b6&t=37c784ef-3eed-5b43-b403-e5baa44c3c05&l=32; ```; 2021-11-28T04:42:21.6163025Z -- The CXX compiler identification is Clang 13.0.0 with MSVC-like command-line; 2021-11-28T04:42:25.0744510Z -- Check for working C compiler: C:/Program Files/LLVM/bin/clang-cl.exe - skipped; 2021-11-28T04:42:25.4493255Z -- Check for working CXX compiler: C:/Program Files/LLVM/bin/clang-cl.exe - skipped; 2021-11-28T04:42:26.3103349Z -- Setting option ENABLE_XHOST: ON; 2021-11-28T04:42:26.6553541Z -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```; * this PR at first commit that adds `/arch:AVX` to CMAKE_CXX_FLAGS generates a bunch of the below; ```; 2021-12-16T22:33:46.0792776Z -- Build files have been written to: D:/a/1/b/build/psi4-core-prefix/src/psi4-core-build; 2021-12-16T22:33:46.0793909Z [6/9] Performing build step for 'psi4-core'; 2021-12-16T22:33:50.7743244Z [1/1263] Building CXX object src\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_row_zero.cc.obj; 2021-12-16T22:33:50.8074886Z clang-cl: warning: argument unused during compilation: '/arch:AVX' [-Wunused-command-line-argument]; 2021-12-16T22:33:50.8077002Z [2/1263] Building CXX object src\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_row_wrt.cc.obj; 2021-12-16T22:33:50.8080336Z clang-cl: warning: argument unused during compilation: '/arch:AVX' [-Wunused-command-line-argument]; 2021-12-16T22:33:50.8416165Z [3/1263] Building CXX object src\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_row_init.cc.obj; ```. So perhaps the original #2292 fix was a dud, and we've just gotten lucky about being built on older AVX nodes where march=native does the trick. (We may have been helped for this by using an old build env that they're about to retire.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2384#issuecomment-997024098:1258,Perform,Performing,1258,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-997024098,1,['Perform'],['Performing']
Performance,adding temporary timers in psipcm.cc could help identifying the bottleneck.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1280#issuecomment-438242744:64,bottleneck,bottleneck,64,https://psicode.org,https://github.com/psi4/psi4/issues/1280#issuecomment-438242744,1,['bottleneck'],['bottleneck']
Performance,"adient of MP2 Energy (in au.); # 1 2 3 4 5; # 1 -0.04900557 -0.00240633 0.05677652 -0.03006882 0.02470420; # 2 0.07990533 0.00642920 0.00348020 -0.04874047 -0.04107426; # 3 -0.06715450 0.05113530 -0.00508959 -0.00643364 0.02754243. # reference optimized NRE, E (G should be 0). nre_opt = 37.5276022922 # Q-Chem; e_opt = -139.5573922 # Q-Chem; #norm_g_opt # Q-Chem; # Full Analytical Gradient of MP2 Energy (in au.); # 1 2 3 4 5; # 1 0.00000025 -0.00000001 -0.00000021 -0.00000007 0.00000005; # 2 0.00000010 0.00000008 0.00000000 0.00000001 -0.00000020; # 3 0.00000038 -0.00000005 -0.00000006 -0.00000023 -0.00000003. def test_norm_start(mol):; g0 = gradient('mp2', molecule=mol); compare_values(norm_nre_start, mol.nuclear_repulsion_energy(), 3, 'start nre'); compare_values(norm_e_start, get_variable('CURRENT ENERGY'), 5, 'start ene'); compare_values(norm_rmsg_start, g0.rms(), 4, 'start rms grad'); compare_matrices(norm_g_start, g0, 3, 'start grad'). def test_zero_grad(mol):; e, wfn = optimize('mp2', return_wfn=True, molecule=mol); g = wfn.gradient(); g.print_out(); compare_values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); compare_values(e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene'); compare_matrices(zerograd, g, 3, 'opt ZERO grad'). def test_odd_start(mol):; g0 = gradient('mp2', molecule=mol); compare_values(odd_nre_start, mol.nuclear_repulsion_energy(), 1, 'start nre'); compare_values(odd_e_start, get_variable('CURRENT ENERGY'), 3, 'start ene'); compare_values(odd_rmsg_start, g0.rms(), 4, 'start rms grad'); compare_matrices(odd_g_start, g0, 3, 'start grad'). def test_badodd_grad(mol):; e, wfn = optimize('mp2', return_wfn=True, molecule=mol); g = wfn.gradient(); g.print_out(); compare_values(odd_nre_opt, mol.nuclear_repulsion_energy(), 2, 'opt nre nogood'); compare_values(odd_e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene nogood'); compare_values(odd_rmsg_opt, g.rms(), 4, 'opt grad nogood'). test_norm_start(normz); test_zero_grad(normz). # And behold,",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:2309,optimiz,optimize,2309,https://psicode.org,https://github.com/psi4/psi4/issues/310,1,['optimiz'],['optimize']
Performance,"adient; > **kwargs); > File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 183, in _process_displacement; > derivative, wfn = derivfunc(method, return_wfn=True, molecule=clone, **kwargs); > File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 556, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2018, in run_scf; > dfmp2_wfn.compute_energy(); >; > RuntimeError:; > Fatal Error: There are no occupied orbitals with beta spin.; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/dfmp2/mp2.cc on line: 196; > The most recent 5 function calls were:; >; >; >; >; > Printing out the relevant lines from the Psithon --> Python processed input file:; > core.set_global_option(""DFT_SPHERICAL_POINTS"", 434); > core.set_global_option(""DFT_RADIAL_POINTS"", 85); > core.set_global_option(""REFERENCE"", ""uhf""); > set_memory(100000000000); > try:; > --> optimize('pwpb95-d3bj'); > except SCFConvergenceError as e:; > unconverged_scf_wfn = e.wfn; > unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); > core.set_global_option(""GUESS"", ""read""); > optimize('pwpb95-d3bj'); >; > Psi4 stopped on: Friday, 21 August 2020 04:21PM; > Psi4 wall time for execution: 0:00:04.47; >; > *** Psi4 encountered an error. Buy a developer more coffee!; > *** Resources and help at github.com/psi4/psi4.; >; > As I am fairly new to quantum chemistry, I do not really know how to; > interpret this error.; >; > Any pointers are appreciated.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1995>, or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5SWSSKR4VM2JNJYNU3SC2AEXANCNFSM4QNFCNKQ>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879:3952,optimiz,optimize,3952,https://psicode.org,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879,2,['optimiz'],['optimize']
Performance,"after #2549, the list from `python tester.py` looks like the below. Most of these are easily healed by figuring out if they're intended to be a test or not. Nots should be removed to an attic or deleted. Also related is #2234 . don't rely on the below -- rerun tester.py as needed. @psi-rking, do you prefer attic or deletion for the un-run optimizer tests?. Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt`; - [ ] 4. dfmp2-freq1: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 5. dfmp2-freq2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 6. dfomp2p5-1: missing ctest registration. `vi dfomp2p5-1/CMakeLists.txt`; - [ ] 7. dfomp2p5-2: missing ctest registration. `vi dfomp2p5-2/CMakeLists.txt`; - [ ] 8. dfomp2p5-grad1: missing ctest registration. `vi dfomp2p5-grad1/CMakeLists.txt`; - [ ] 9. dfomp2p5-grad2: missing ctest registration. `vi dfomp2p5-grad2/CMakeLists.txt`; - [ ] 10. dft-dldf: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 11. dft-dsd: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 12. dft-pbe0-2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 13. explicit-am-basis: mismatched directory (explicit-am-basis) and ctest registration name (explicit_am_basis). `vi explicit-am-basis/CMakeLists.txt`; - [ ] 14. fsapt-diff1: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 15. fsapt-diff1: missing CMakeLists. `vi fsapt-diff1/CMakeLists.txt`; - [ ] 16. gcp/hf3c-gradient: mismatched marks ctest () and pytest (gradient). `vi gcp/hf3c-gradient/CMakeLists.txt gcp/hf3c-gradient/test_input.py`; - [ ] 17. gcp/hf3c-hessian: mismatched marks ctest () and pytest (hessian). `vi gcp/hf3c-hessian/CMakeLists.txt gcp/hf3c-hessian/test_in",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:341,optimiz,optimizer,341,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['optimiz'],['optimizer']
Performance,"aging--; #33 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #34 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286660, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #35 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8697300, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #36 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8697300, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #37 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #38 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #39 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #40 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #41 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286810, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #42 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8890fc0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #43 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8890fc0, tstate=0x55ff9515e050) at /usr/local/src/conda/pyt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:12810,optimiz,optimized,12810,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132; #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0; #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0; #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084; #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283; #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086; #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679; #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); at Python/ceval.c:3433; #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); at Python/ceval.c:4378; #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720; #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433; #2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:4539,optimiz,optimized,4539,https://psicode.org,https://github.com/psi4/psi4/issues/12,1,['optimiz'],['optimized']
Performance,"ail::function::function_buffer&) (); #7 0x000000000555699d in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); #8 0x0000000000a6d6f5 in boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke(boost::detail::function::function_buffer&, boost::python::detail::exception_handler const&, boost::function0<void> const&) (); #9 0x0000000005556d54 in boost::python::handle_exception_impl(boost::function0<void>) (); #10 0x000000000554d0fe in function_call (); #11 0x00006a91c37de333 in PyObject_Call (func=0x9231260, arg=<optimized out>, kw=<optimized out>) at Objects/abstract.c:2529; #12 0x00006a91c388d4b2 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x712c327ea368, func=0x9231260) at Python/ceval.c:4253; #13 call_function (oparg=<optimized out>, pp_stack=0x712c327ea368) at Python/ceval.c:4058; #14 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #15 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91b94db9b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=1, kws=0x92f85c8, kwcount=1, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #16 0x00006a91c388e3fa in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x712c327ea568, func=0x6a91b8cca488) at Python/ceval.c:4131; #17 call_function (oparg=<optimized out>, pp_stack=0x712c327ea568) at Python/ceval.c:4056; #18 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #19 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91c45356b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=0, kws=0x0, kwcount=",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:2228,optimiz,optimized,2228,https://psicode.org,https://github.com/psi4/psi4/issues/153,2,['optimiz'],['optimized']
Performance,"al/src/conda/python-3.10.14/Python/ceval.c:6018; #140 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95dcd100, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #141 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x55ff95dcd100, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #142 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112886e0, locals=locals@entry=0x7fac0e0f83c0, args=args@entry=0x0, argcount=argcount@entry=0, ; --Type <RET> for more, q to quit, c to continue without paging--; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #143 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8882550, globals=globals@entry=0x7fac0e0f83c0, locals=locals@entry=0x7fac0e0f83c0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #144 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e0f83c0, globals=0x7fac0e0f83c0, source=0x7fabd8882550); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #145 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #146 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e0d4c58, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #147 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8938500, callargs=0x7fac0e0d4c40, func=0x7fac0e398e00, trace_info=0x7fff112888b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #148 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95e324c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #149 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95e324c0, tstate=0x55ff9515e050) at /usr/local/s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:33314,optimiz,optimized,33314,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"al_EvalCodeEx (co=0x6a91b94db9b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=1, kws=0x92f85c8, kwcount=1, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #16 0x00006a91c388e3fa in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x712c327ea568, func=0x6a91b8cca488) at Python/ceval.c:4131; #17 call_function (oparg=<optimized out>, pp_stack=0x712c327ea568) at Python/ceval.c:4056; #18 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #19 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91c45356b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=0, kws=0x0, kwcount=0, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #20 0x00006a91c388fed2 in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at Python/ceval.c:669; #21 0x00006a91c38ae38c in run_mod (arena=0x93cee40, flags=<optimized out>, locals=0x6a91c4610d70, globals=0x6a91c4610d70, filename=0x6a91c38de42d ""<string>"", mod=<optimized out>) at Python/pythonrun.c:1371; #22 PyRun_StringFlags (. ```; str=0x92f8a04 ""from psi4 import *\nfrom p4const import *\nfrom p4util import *\nfrom molutil import *\nfrom aliases import *\npsi4_io = psi4.IOManager.shared_object()\npsi4.efp_init()\npsi4_io.set_default_path(\""/app/scienc""..., ; start=257, globals=0x6a91c4610d70, locals=0x6a91c4610d70, flags=<optimized out>) at Python/pythonrun.c:1334; ```; #23 0x000000000555a8aa in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) (); #24 0x0000000000a67f25 in psi::Python::run(_IO_FILE*) (); #25 0x00000000009937e0 in main (). (gdb) . the input file:. memory 2500 mb. molecule struct {; symmetry c1; no_reorient #; no_com # whether to move the origin to the center of masses; units angstrom; 0 1 ; C 0.008240 0.001327 0.000310; C 1.553694 0.001373 0.000036; N -0.700795 -1.157242 -0.001319; N -2.008585 -1.428031 0.002174;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:3507,optimiz,optimized,3507,https://psicode.org,https://github.com/psi4/psi4/issues/153,2,['optimiz'],['optimized']
Performance,"all.c:305; #234 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8e6c550, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #235 0x000055ff90677205 in do_call_core (kwdict=0x7fabd89038c0, callargs=0x7fabd8e6c550, func=0x7fac0e3989a0, trace_info=0x7fff1128a240, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #236 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b81240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #237 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b81240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #238 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #239 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #240 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #241 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #242 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a3f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #243 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2ca240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #244 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2ca240, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:51668,optimiz,optimized,51668,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"all.c:305; #308 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fac0e0f68c0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #309 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0ae880, callargs=0x7fac0e0f68c0, func=0x7fac0e3989a0, trace_info=0x7fff1128b870, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #310 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e32fc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #311 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e32fc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #312 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #313 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #314 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #315 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #316 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ba20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #317 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c6db10, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #318 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c6db10, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:65992,optimiz,optimized,65992,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"als=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #218 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #219 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #220 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #221 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289d40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #222 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4288610, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #223 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4288610, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #224 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #225 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #226 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11289e70, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #227 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:48521,optimiz,optimized,48521,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"als=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #246 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #247 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #248 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #249 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a5a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #250 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4df3880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #251 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4df3880, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #252 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #253 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #254 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128a6d0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #255 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:53845,optimiz,optimized,53845,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"alue<double const&>, double (_)()> (rc=..., f=<optimized out>) ; > > at /usr/include/boost/python/detail/invoke.hpp:75 ; > > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223 ; > > #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (_)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38 ; > > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0 ; > > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const () ; > > from /usr/lib/libboost_python3.so.1.54.0 ; > > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...) ; > > at /usr/include/boost/python/detail/translate_exception.hpp:48 ; > > #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&> > (f=..., a=<synthetic pointer>, this=<optimized out>) at /usr/include/boost/bind/bind.hpp:382 ; > > #15 operator()<boost::python::detail::exception_handler, boost::function0<void> > (a2=..., a1=..., this=<optimized out>) ; > > at /usr/include/boost/bind/bind_template.hpp:102 ; > > #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, b",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:3398,optimiz,optimized,3398,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,1,['optimiz'],['optimized']
Performance,"alueError(""No scan!""); Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want to build another [Engine](https://github.com/leeping/geom",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:2528,optimiz,optimize,2528,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792,1,['optimiz'],['optimize']
Performance,"always the layered scheme (https://software.intel.com/en-us/node/528508) rather than `libmkl_rt.so`; * said scheme just uses Accelerate libs for Mac, again just fine; * said scheme can find ACML after heavy hinting; * there is a FindLapack CMake module, but either we haven't tried hard enough or it can't find ACML. It also will only find shared MKL libs. #### Complications and Bandaids; * conda pkg building needs _static_ mkl libs back from math detection (except for a couple). We've [patched this within the Bast math detection](https://github.com/psi4/psi4/blob/master/cmake/math/MathLibsFunctions.cmake#L59-L73) if triggered by a cmake var.; * MKL in general needs `-Wl,--start-group` and `-Wl,--end-group` passed to the linker around the math libs to resolve circular dependencies. Supposedly this can be conveyed to cmake directly with https://cmake.org/cmake/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication could be conda pkgs (even numpy) that are already in env and complicating the link loader's tasks. But we really shouldn't be telling ppl about preloading, which is bad practice for non-dire situations. @ryanmrichard [put in something](https://github.com/psi4/psi4/pull/513/files#diff-bb0d8c2ec987bfc58b4a943e453ea132L147) to preferentially detect the runtime lib as a bandaid to this.; * People for whom Bast math detection works fine but cmake FindLapack doesn't (na",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537:1441,optimiz,optimize,1441,https://psicode.org,https://github.com/psi4/psi4/issues/537,1,['optimiz'],['optimize']
Performance,"am getting conflicts when I try to install the yml file to a fresh env (see below). Is there an easier work around than this? I was able to pip install torsiondrive, but I get an error message relating to geometric? uninstalling and reinstalling geometric does not solve this. ```; FailedOperation(error=ComputeError(error_type='unknown', error_message='TorsionDrive error at 100:\ngeomeTRIC run_json error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\run_json.py"", line 269, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\compute.py"", line 105, in compute\n output_data = executor.co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:1150,optimiz,optimize,1150,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020,1,['optimiz'],['optimize']
Performance,"ambda(pybind11::detail::function_call&)#3}::_FUN(pybind11::detail::function_call&) (); at /usr/include/pybind11/pybind11.h:137; #20 0x00007faaae20b610 in pybind11::cpp_function::dispatcher (self=<optimized out>, args_in=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), ; kwargs_in=0x0) at /usr/include/pybind11/pybind11.h:624; #21 0x00007faabd65df8a in cfunction_call_varargs (func=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, ; args=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), kwargs=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:742; #22 0x00007faabd64e681 in _PyObject_MakeTpCall (callable=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, args=<optimized out>, nargs=<optimized out>, keywords=0x0); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:159; #23 0x00007faabd64b53c in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:125; #24 _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:115; #25 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #26 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3469; #27 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; --Type <RET> for more, q to quit, c to continue without paging-- f=Frame 0x5589d8c417d0, for file /home/work/psi4/install.susi/lib/psi4/driver/procrouting/proc.py, line 2354, in run_scf_gradient (name='hf', kwargs={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, dft_fu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:6497,optimiz,optimized,6497,https://psicode.org,https://github.com/psi4/psi4/issues/2010,2,['optimiz'],['optimized']
Performance,"ames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #354 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c640, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #355 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #356 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #357 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; --Type <RET> for more, q to quit, c to continue without paging--; #358 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #359 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #360 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #361 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c7f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #362 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e1d18a0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #363 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e1d18a0, tstate=0x55f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:74860,optimiz,optimized,74860,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"approaching the surface of an aromatic ring. There are 3 in the structure. I want to perform UV excitation on them to get an initial wavelength but running into problems. Is my error so far. My code looks something like this:. ```python. psi4.set_options({; 'scf_type': 'df',; 'g_convergence': 'gau',; 'freeze_core': 'true',; 'reference': 'uhf',; 'save_jk': True,; 'fail_on_maxiter': 'false'; }). molecule = 'X'. energy, wave_function = psi4.energy(; 'hf/6-311g',; return_wfn=True,; molecule=self.molecule; ). rpa = tdscf_excitations(wave_function, states=[10]); poles = [r[""EXCITATION ENERGY""] for r in rpa]; opa_residues = [np.linalg.norm(r[""ELECTRIC DIPOLE TRANSITION MOMENT (LEN)""])**2 for r in rpa]; ecd_residues = [r[""ROTATORY STRENGTH (LEN)""] for r in rpa]; opa_spectrum = spectrum(poles=poles, residues=opa_residues, gamma=0.01, out_units=""nm""); ```. Stacktrace Error:. ```python; File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/procrouting/response/scf_response.py"", line 720, in tdscf_excitations; res_1 = _solve_loop(wfn, ptype, solve_function, singlets_per_irrep, maxiter, restricted, ""singlet""); File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/procrouting/response/scf_response.py"", line 326, in _solve_loop; ret = solve_function(engine, nstates, guess_, maxiter); File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/procrouting/response/scf_response.py"", line 690, in rpa_solver; return solvers.hamiltonian_solver(engine=e,; File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/p4util/solvers.py"", line 989, in hamiltonian_solver; raise RuntimeError(msg); RuntimeError: The H2 matrix is not Positive Definite. This means the reference state is not stable.; ```. Running things I would maybe predict at UHF is not right and I don't think this is a coordinate optimization problem. Or what do y'all think?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3134:1999,optimiz,optimization,1999,https://psicode.org,https://github.com/psi4/psi4/issues/3134,1,['optimiz'],['optimization']
Performance,are all the test plugins building ok upon first compilation? What does your (staged or installed) [plugin cache](https://github.com/psi4/psi4/blob/master/psi4/psi4PluginCache.cmake.in) look like?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271921477:106,cache,cache,106,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271921477,1,['cache'],['cache']
Performance,"as.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; blas.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapk:; lapk.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; lapk.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapk.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;...; ```. If I try to build, it eventually bails out with:; ```; Scanning dependencies of target psi4-core; [ 78%] Creating directories for 'psi4-core'; [ 81%] No download step for 'psi4-core'; [ 84%] No update step for 'psi4-core'; [ 87%] No patch step for 'psi4-core'; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041:2335,Perform,Performing,2335,https://psicode.org,https://github.com/psi4/psi4/issues/1041,4,"['Perform', 'cache', 'load']","['Performing', 'cache', 'cache-Release', 'loading']"
Performance,"ase update all `PSIDATADIR` references accordingly.; - `Process::environment.wavefunction` no longer exists. This will break any input side `psi4.wavefunction` and `psi4.set_wavefunciton` calls. Please use the `return_wfn` and `ref_wfn` kwargs on methods instead.; - A consequence of this is we broke all of the plugins! Don't worry the fix is very simple please change your C++ signature from: ; `PsiReturnType skeleton(Options& options)`; to:; `SharedWavefunction skeleton(SharedWavefunction ref_wfn, Options& options)`; Every method in Psi4 now takes a Wavefunction and Options objects, this is to make plugins consistent as well. The python-side signature is now `psi4.plugin('skeleton.so', ref_wfn)`. Options passing has not yet been handled, but thats next up on the list. ---. Below is a list of outstanding issues. Please note that these will likely not all be cleaned up here. Outstanding issues will be moved to a ticket:; - [x] Methods also take the `molecule` kwarg, it is not clear if `ref_wfn` or `molecule` should supersede the other yet.; - [x] Not all methods return wavefunctions yet. For example what does a SAPT wavefunction look like?; - [x] psimrcc Wavefunction; - [x] SAPT Wavefunction; - [x] EFP Wavefunction; - [x] If I pass SCF a `ref_wfn` with orbitals, the `ref_wfn` orbitals are not used.; - [x] We would like a SCF level wavefunction to be able to cast itself back C1 symmetry so that we can run symmetry-based SCF and then use this wavefunction in symmetry intolerant code. These transforms are reimplemented in every symmetry tolerant code.; - [x] Saving of binary `optking` information may break for very complex optimizations (database, cbs wrapper, etc). Optimization proceeds, but always restarts at the first iteration so convergence is slow.; - [x] Plugin examples are starting to show their age. We probably need to overhaul these.; - [x] The documentation needs to reflect the above changes.; - [x] DF and RI calls should soft fail with a proper error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246:3579,optimiz,optimizations,3579,https://psicode.org,https://github.com/psi4/psi4/pull/246,2,"['Optimiz', 'optimiz']","['Optimization', 'optimizations']"
Performance,"at blas_server_omp.c:334; #7 0x00007faa9b345a8d in gemm_driver (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=sa@entry=0x7faa98bba000, sb=<optimized out>, nthreads_m=<optimized out>, ; nthreads_n=1) at level3_thread.c:714; #8 0x00007faa9b345be4 in dgemm_thread_nn (args=<optimized out>, range_m=<optimized out>, range_n=<optimized out>, sa=0x7faa98bba000, sb=<optimized out>, mypos=<optimized out>); at level3_thread.c:771; #9 0x00007faa9b24f798 in dgemm_ (TRANSA=TRANSA@entry=0x7ffdc830b478 ""N\004"", TRANSB=TRANSB@entry=0x7ffdc830b47c ""N"", M=M@entry=0x7ffdc830b470, N=N@entry=0x7ffdc830b474, ; K=K@entry=0x7ffdc830b46c, alpha=alpha@entry=0x7ffdc830b460, a=0x5589d9053d00, ldA=0x7ffdc830b4a0, b=0x7faa663ab010, ldB=0x7ffdc830b490, beta=0x7ffdc830b458, c=0x7faa7c13b010, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k=<optimized out>, alpha=<optimized out>, a=<optimized out>, ; lda=<optimized out>, b=0x5589d9053d00, ldb=<optimized out>, beta=<optimized out>, c=0x7faa7c13b010, ldc=<optimized out>); at /home/work/psi4/psi4.susi/psi4/src/psi4/libqt/blas_intfc23.cc:327; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:461; #12 0x00007faaaeddcf40 in psi::scfgrad::DFJKGrad::compute_gradient (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:245; #13 0x00007faaaedc01e5 in psi::scfgrad::SCFDeriv::compute_gradient (this=this@entry=0x7ffdc830ba00) at /usr/include/c++/10/bits/shared_ptr_base.h:1324; #14 0x00007faaaed967ba in psi::scfgrad::scfgrad (ref_wfn=..., options=...) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/wrapper.cc:46; #15 0x00007faaae1ebe2a in py_psi_scfgrad (ref_wfn=std::shared_ptr<class psi::Wavefunction> (use count 5, weak count 1) = {...}) at /usr/include/c++/10/ext/atomicity.h:100; #16 0x0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:2426,optimiz,optimized,2426,https://psicode.org,https://github.com/psi4/psi4/issues/2010,11,['optimiz'],['optimized']
Performance,"ate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11286d30) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #62 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #63 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd784bdb0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #64 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd8887530, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fabd887f290, level=1); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #65 0x000055ff9067536b in import_name (level=0x7fac0e3000f0, fromlist=0x7fabd887f290, name=0x7fabd8887530, f=0x7fabd8fa9cf0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #66 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8fa9cf0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #67 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8fa9cf0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #68 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112870b0, locals=locals@entry=0x7fabd8887400, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #69 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd88826b0, globals=globals@entry=0x7fabd8887400, locals=locals@entry=0x7fabd8887400); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #70 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd8887400, globals=0x7fabd8887400, source=0x7fabd88826b0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #71 builtin_exec (module=<optimized out>, args=<optimized ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:18206,optimiz,optimized,18206,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"ather related to PSI4 than dmrg. Just look at; > the example you provided for water molecule :; > ; > Number of atoms: 3; > Number of AO shells: 9; > Number of SO shells: 7; > Number of primitives: 22; > Number of atomic orbitals: 13; > Number of basis functions: 13; > ; > Number of irreps: 4; > Integral cutoff 0.00e+00; > Number of functions per irrep: [ 7 0 4 2 ]; > ; > OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; > stored in file 35.; > ; > Computing two-electron integrals...done; > Computed 1270 non-zero two-electron integrals.; > Stored in file 33.; > ; > Calling plugin fcidump.so.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 1; > Transforming the one-electron integrals and constructing Fock matrices; > Starting first half-transformation.; > Sorting half-transformed integrals.; > First half integral transformation complete.; > Starting second half-transformation.; > Two-electron integral transformation complete.; > Created the file H2O.631G.FCIDUMP; > ; > As you see a full 2- electron integral calculation is performed for ALL; > basis functions (13) and stored, just BEFORE fcidump starts with dumping !!!; > I would like to circumvent this heavy calculation for the case of larger; > molecules.; > ; > Any way i try your advice but may i know at which line of fcidump.cc i; > have to copy and paste; > 781-811 and 814-858 lines of dmrgscf.cc ?; > ; > Furthermore may i know what is the x matrix : ""Number of variables in the; > x-matrix = 1032""; > and what is nbuckets in : "" SO Ints (nn|nn) nbuckets = 78""; > ; > ALL THE BEST; > LUCA; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/98#issuecomment-105341330. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105429617:2049,perform,performed,2049,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105429617,1,['perform'],['performed']
Performance,"atures - done; -- Checking whether CXX compiler has -isysroot; -- Checking whether CXX compiler has -isysroot - yes; -- Checking whether CXX compiler supports OSX deployment target flag; -- Checking whether CXX compiler supports OSX deployment target flag - yes; -- Check for working CXX compiler: /usr/local/bin/g++-8; -- Check for working CXX compiler: /usr/local/bin/g++-8 -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option ENABLE_MSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 14; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Setting (unspecified) op",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:4217,Perform,Performing,4217,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308,1,['Perform'],['Performing']
Performance,"ave noticed an inconsistency that should either be fixed in the build system or removed from the documentation. . The comment section [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L47) seems to imply that you can download libefp/libint, build them, and then provide the directory containing the appropriate directory containing libintConfig.cmake/libefpConfig.cmake to CMake in the following way. ```shell; cmake -H. -Bobjdir … -Dlibint_DIR=/path/to/libint/share/cmake/libint -Dlibefp_DIR=/path/to/libefp/share/cmake/libefp; ```. Then cmake will detect the previously installed libint/libefp and skip their building. . However, this does not completely work. The initial cmake will indicate `found libint`, then when you go to the build directory and run `make` the `libint_DIR `and `libefp_DIR` argurments are not passed on to cmake for psi4_core and the build errors out with the following message:. ```shell; Performing configure step for 'psi4_core'; loading initial cache file /home/amjames2/newriver/psi4-builds/new-debug/psi4_core-prefix/tmp/psi4_core-cache.cmake; -- The C compiler identification is GNU 5.2.0; -- The CXX compiler identification is GNU 5.2.0; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.co",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/516:1033,Perform,Performing,1033,https://psicode.org,https://github.com/psi4/psi4/issues/516,4,"['Perform', 'cache', 'load']","['Performing', 'cache', 'loading']"
Performance,"base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128d780) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #414 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #415 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fac0e1341f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #416 PyImport_ImportModuleLevelObject (name=name@entry=0x7fac0e1341f0, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x55ff908c17e0 <_Py_NoneStruct>, level=0); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #417 0x000055ff9067536b in import_name (level=0x7fac0e3000d0, fromlist=0x55ff908c17e0 <_Py_NoneStruct>, name=0x7fac0e1341f0, f=0x7fac0e329a40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #418 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e329a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #419 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e329a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #420 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128db00, locals=locals@entry=0x7fac0e241bc0, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #421 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fac0e2b80e0, globals=globals@entry=0x7fac0e241bc0, locals=locals@entry=0x7fac0e241bc0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #422 0x000055ff9074512a in run_eval_code_obj (tstate=tstate@entry=0x55ff9515e050, co=co@entry=0x7fac0e2b80e0, globals=globals@entry=0x7fac0e241bc0, locals=locals@entry=0x7fac0e241bc0); at /usr/local/src/conda/python-3.10.14/Python/pythonrun.c:1291; #423 0x00005",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:86578,optimiz,optimized,86578,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"bd8a583d0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; --Type <RET> for more, q to quit, c to continue without paging--; #115 0x000055ff90677205 in do_call_core (kwdict=0x7fabd88870c0, callargs=0x7fabd8a583d0, func=0x7fac0e3989a0, trace_info=0x7fff11287e40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #116 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95de00f0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #117 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95de00f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #118 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #119 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #120 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #121 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #122 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287ff0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #123 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95ddd860, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #124 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95ddd860, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:28410,optimiz,optimized,28410,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"bject. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ X ] Addition of computed_shells_ member to JK object, which keeps track of number of shells computed during the JK build process.; - [ X ] Addition of computed_shells_per_iter_ member to HF wavefunction objects, which keep track of number of shells computed during each SCF iteration. This information can be accessed by the user via Python.; - [ X ] Modification of density screening tests in test_erisieve.py using the above class changes to allow the tests to run without construction of an ERI object. ## Questions; - [ ] Currently, only the density screening tests in test_erisieve.py use the new computed_shells_per_iter_ framework to test screening. Other tests in test_erisieve.py perform their tests using a generated ERI object. Should use of computed_shells_per_iter_ comparisons be applied to other tests in test_erisieve.py, as well?. ## Checklist; - [ X ] Tests added for any new features; - [ X ] Docs added for any new features; - [ X ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ X ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547:3106,perform,perform,3106,https://psicode.org,https://github.com/psi4/psi4/pull/2547,1,['perform'],['perform']
Performance,"boost::function0<void> const&) const (); #8 0x0000000000a6d6f5 in boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke(boost::detail::function::function_buffer&, boost::python::detail::exception_handler const&, boost::function0<void> const&) (); #9 0x0000000005556d54 in boost::python::handle_exception_impl(boost::function0<void>) (); #10 0x000000000554d0fe in function_call (); #11 0x00006a91c37de333 in PyObject_Call (func=0x9231260, arg=<optimized out>, kw=<optimized out>) at Objects/abstract.c:2529; #12 0x00006a91c388d4b2 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x712c327ea368, func=0x9231260) at Python/ceval.c:4253; #13 call_function (oparg=<optimized out>, pp_stack=0x712c327ea368) at Python/ceval.c:4058; #14 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #15 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91b94db9b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=1, kws=0x92f85c8, kwcount=1, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #16 0x00006a91c388e3fa in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x712c327ea568, func=0x6a91b8cca488) at Python/ceval.c:4131; #17 call_function (oparg=<optimized out>, pp_stack=0x712c327ea568) at Python/ceval.c:4056; #18 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #19 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91c45356b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=0, kws=0x0, kwcount=0, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #20 0x00006a91c388fed2 in PyEval_EvalCode (co=<optimiz",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:2355,optimiz,optimized,2355,https://psicode.org,https://github.com/psi4/psi4/issues/153,1,['optimiz'],['optimized']
Performance,bug fix of prevention of zero target optimization values by the evil atof(),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/535:37,optimiz,optimization,37,https://psicode.org,https://github.com/psi4/psi4/pull/535,1,['optimiz'],['optimization']
Performance,"build constructors by following instructions https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md. * edit tag and hash; * clear package cache; * `python run.py`; * check for noarch (BAD); * upload to vergil. generate the download site; * create new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md mind the edition string `v13rc2` for this and future filenames; * copy and edit new https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; * enter `scripts/` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; * run the `install-generator.py` in place. it will dump new files into `data/installs/` _subdirs_. be sure to `git add` them.; * installer page is ready. if wanted, edit the desination of the `Download` nav button https://github.com/psi4/psicode-hugo-website/blob/master/config.toml#L35; * pays to test; * installer on Mac and Linux; * that download button and `curl` downloading register on the download counters on vergil",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-464912733:179,cache,cache,179,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-464912733,1,['cache'],['cache']
Performance,"c.optimize.ParseConstraints(M, constraints_string); > ; > ; > # Set up the internal coordinate system; > coordsys = input_opts.get('coordsys', 'tric'); > CoordSysDict = {; > 'cart': (geometric.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],op",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:2733,optimiz,optimizer,2733,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275,1,['optimiz'],['optimizer']
Performance,"careful with SCAN though.I don't know how Q-chem implemented this functional, but the Turbomole implementation requires quite a hefty increase in radial grid points to get gradients usable for optimizations. Angular grid is unproblematic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/962#issuecomment-382385597:193,optimiz,optimizations,193,https://psicode.org,https://github.com/psi4/psi4/issues/962#issuecomment-382385597,1,['optimiz'],['optimizations']
Performance,"ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #47 0x00007faabd6bfe79 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, ; kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4327; #48 0x00007faabd6bfe3b in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:718; #49 0x00007faabd6e1068 in run_eval_code_obj (co=0x7faa87377d40, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, pre",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:15083,optimiz,optimized,15083,https://psicode.org,https://github.com/psi4/psi4/issues/2010,3,['optimiz'],['optimized']
Performance,"ci'); ```. ```; @ROHF iter 32: -342.84910912994206 -1.13687e-13 7.97882e-15 DIIS; @ROHF iter 33: -342.84910912994206 0.00000e+00 5.47136e-15 DIIS; ```. ```; Psi4 symmetry group was found to be <cs>.; wfn_irrep = 1; wfn_multp = 2; numOrbitals = [ 47 , 9 ]; R(O)HF DOCC = [ 28 , 4 ]; R(O)HF SOCC = [ 0 , 1 ]; frozen_docc = [ 9 , 0 ]; active = [ 38 , 9 ]; virtual = [ 0 , 0 ]; nElectrons = 65; nEl. active = 47; ###########################################################; ### ###; ### DMRG-SCF ###; ### ###; ### CheMPS2 by Sebastian Wouters ###; ### https://github.com/SebWouters/CheMPS2 ###; ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; ### ###; ###########################################################. Number of variables in the x-matrix = 342; CheMPS2 output is temporarily written to the file susi2.out.chemps2 and will be copied here.; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 1; Transforming the one-electron integrals and constructing Fock matrices; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete.; CheMPS2 output is temporarily written to the file susi2.out.chemps2 and will be copied here.; EdmistonRuedenberg::Optimize : Cost function at start = 11.6978759080747; Cost function at stop = 39.88912832949; Gradient norm = 1.14176119927824e-09 after 14 iterations.; EdmistonRuedenberg::FiedlerExchange : Cost function at start = 855.317140538854; EdmistonRuedenberg::FiedlerExchange : Cost function at end = 13.7691914991716; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete.; Rotated the active space to localized orbitals, sorted according to the exchange matrix.; CheMPS2 output is temporarily written to the file ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/464#issuecomment-244580097:2877,Optimiz,Optimize,2877,https://psicode.org,https://github.com/psi4/psi4/issues/464#issuecomment-244580097,1,['Optimiz'],['Optimize']
Performance,"clang 4.0 / ifort 15.0.3 / MKL on macOS 10.12. After compiling from source code (tag v1.1), with ENABLE_gdma=ON, the following command quits without any output.; ```bash; python -c 'import psi4; print(psi4.__file__)'; ```; Running; ```bash; python -v -c ""import psi4""; ```; The last few lines of output are; ```bash; import psi4 # precompiled from /path/psi4-gdma/lib/psi4/__init__.pyc; dlopen(""/path/psi4-gdma/lib/psi4/core.so"", 2);; import psi4.core # dynamically loaded from /path/psi4-gdma/lib/psi4/core.so; ```; No error message. Modifying the following code; https://github.com/psi4/psi4/blob/master/psi4/src/core.cc#L1219-L1221; to; ```cpp; #ifdef INTEL_Fortran_ENABLED; static int argc = 1;; static char* argv = (char*) """";; for_rtl_init_(&argc, &argv);; #endif; ```; solves the problem. Any comments?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/771:466,load,loaded,466,https://psicode.org,https://github.com/psi4/psi4/issues/771,1,['load'],['loaded']
Performance,"collocation_=0) at remote 0x7faa8737cf90>,), kwargs=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:742; #22 0x00007faabd64e681 in _PyObject_MakeTpCall (callable=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, args=<optimized out>, nargs=<optimized out>, keywords=0x0); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:159; #23 0x00007faabd64b53c in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:125; #24 _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:115; #25 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #26 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3469; #27 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; --Type <RET> for more, q to quit, c to continue without paging-- f=Frame 0x5589d8c417d0, for file /home/work/psi4/install.susi/lib/psi4/driver/procrouting/proc.py, line 2354, in run_scf_gradient (name='hf', kwargs={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, dft_func=False, optstash=<OptionsState(data={('SCF_TYPE',): <OptionState(option='SCF_TYPE', module=None, value_global='PK', haschanged_global=False, value_local=None, haschanged_local=None, value_used=None, haschanged_used=None) at remote 0x7faa8737d4c0>, ('REFERENCE', 'SCF'): <OptionState(option='REFERENCE', module='SCF', value_global='RHF', haschanged_global=False, value_local='RHF', haschanged_local=False, value_used='RHF', haschanged_used=False) at remote 0x7faa8737d2e0>}) at remote 0x7faa8737d190>, ref_wfn=<psi4.core.RHF(memory_jk_=49152000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:7035,optimiz,optimized,7035,https://psicode.org,https://github.com/psi4/psi4/issues/2010,2,['optimiz'],['optimized']
Performance,compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2153,Perform,Performing,2153,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,"conda/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1052, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 710, in gradient; **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 183, in _process_displacement; derivative, wfn = derivfunc(method, return_wfn=True, molecule=clone, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2018, in run_scf; dfmp2_wfn.compute_energy(). RuntimeError:; Fatal Error: There are no occupied orbitals with beta spin.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/dfmp2/mp2.cc on line: 196; The most recent 5 function calls were:. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DFT_SPHERICAL_POINTS"", 434); core.set_global_option(""DFT_RADIAL_POINTS"", 85); core.set_global_option(""REFERENCE"", ""uhf""); set_memory(100000000000); try:; --> optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); core.set_global_option(""GUESS"", ""read""); optimize('pwpb95-d3bj'). Psi4 stopped on: Friday, 21 August 2020 04:21PM; Psi4 wall time for execution: 0:00:04.47. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. As I am fairly new to quantum chemistry, I do not really know how to interpret this error. Any pointers are appreciated.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995:2976,optimiz,optimize,2976,https://psicode.org,https://github.com/psi4/psi4/issues/1995,2,['optimiz'],['optimize']
Performance,"count=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #189 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8a87940, globals=globals@entry=0x7fabd8903bc0, locals=locals@entry=0x7fabd8903bc0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #190 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd8903bc0, globals=0x7fabd8903bc0, source=0x7fabd8a87940); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #191 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #192 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd8a8a4d8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #193 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8903b00, callargs=0x7fabd8a8a4c0, func=0x7fac0e398e00, trace_info=0x7fff11289680, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #194 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95d41d50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; --Type <RET> for more, q to quit, c to continue without paging--; #195 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95d41d50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #196 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #197 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #198 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<opti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:42925,optimiz,optimized,42925,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"count=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #263 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8a86550, globals=globals@entry=0x7fabdcd7a300, locals=locals@entry=0x7fabdcd7a300); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #264 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabdcd7a300, globals=0x7fabdcd7a300, source=0x7fabd8a86550); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #265 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #266 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e0e6fd8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #267 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8902480, callargs=0x7fac0e0e6fc0, func=0x7fac0e398e00, trace_info=0x7fff1128acb0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #268 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8fa8550, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #269 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8fa8550, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #270 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #271 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #272 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510, tstate=0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:57249,optimiz,optimized,57249,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"count=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #375 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fac0e06f7e0, globals=globals@entry=0x7fac0e071580, locals=locals@entry=0x7fac0e071580); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #376 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e071580, globals=0x7fac0e071580, source=0x7fac0e06f7e0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #377 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #378 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e041e18, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #379 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e071540, callargs=0x7fac0e041e00, func=0x7fac0e398e00, trace_info=0x7fff1128cf00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #380 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16a3b0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #381 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16a3b0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #382 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #383 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #384 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510, tstate=0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:79038,optimiz,optimized,79038,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,crash in Geometry Optimization,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:18,Optimiz,Optimization,18,https://psicode.org,https://github.com/psi4/psi4/issues/153,1,['Optimiz'],['Optimization']
Performance,"ct.c:543; #233 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fabd8e6c550, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #234 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8e6c550, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #235 0x000055ff90677205 in do_call_core (kwdict=0x7fabd89038c0, callargs=0x7fabd8e6c550, func=0x7fac0e3989a0, trace_info=0x7fff1128a240, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #236 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b81240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #237 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b81240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #238 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #239 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #240 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #241 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #242 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a3f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #243 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2ca240, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:51431,optimiz,optimized,51431,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct.c:543; #307 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fac0e0f68c0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #308 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fac0e0f68c0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #309 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0ae880, callargs=0x7fac0e0f68c0, func=0x7fac0e3989a0, trace_info=0x7fff1128b870, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #310 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e32fc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #311 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e32fc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #312 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #313 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #314 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #315 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #316 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ba20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #317 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c6db10, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:65755,optimiz,optimized,65755,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct.h:99; #11 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #12 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286030, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #13 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff96063c70, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #14 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff96063c70, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #15 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fabd8177800, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #16 _PyFunction_Vectorcall (func=0x7fabd81777f0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #17 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd84ecf40, callable=0x7fabd81777f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #18 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd84ecf40, callable=0x7fabd81777f0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #19 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112861e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #20 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd84ecdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #21 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabd84ecdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/pyt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:8482,optimiz,optimized,8482,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0 ; > > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const () ; > > from /usr/lib/libboost_python3.so.1.54.0 ; > > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...) ; > > at /usr/include/boost/python/detail/translate_exception.hpp:48 ; > > #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&> > (f=..., a=<synthetic pointer>, this=<optimized out>) at /usr/include/boost/bind/bind.hpp:382 ; > > #15 operator()<boost::python::detail::exception_handler, boost::function0<void> > (a2=..., a1=..., this=<optimized out>) ; > > at /usr/include/boost/bind/bind_template.hpp:102 ; > > #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132 ; > > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0 ; > > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084 ; > > #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optim",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:4005,optimiz,optimized,4005,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,1,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #199 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #200 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289830, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #201 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c373d0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #202 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c373d0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #203 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #204 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #205 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #206 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #207 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112899e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #208 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6cdd0, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:44770,optimiz,optimized,44770,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #315 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #316 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ba20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #317 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c6db10, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #318 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c6db10, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #319 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3634a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #320 _PyFunction_Vectorcall (func=0x7fac0e363490, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #321 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=3, args=0x7fff1128bb50, callable=0x7fac0e363490, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #322 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363490, vargs=0x7fff1128bbe0) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #323 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9a80 <PyId__handle_fromlist.13>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #324 0x000055ff905b230b in PyImport_ImportModuleLevelObject (name=name@entry=0x7fac0e308030, globals=<optimized",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:67092,optimiz,optimized,67092,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #121 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #122 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287ff0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #123 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95ddd860, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #124 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95ddd860, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #125 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #126 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #127 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #128 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #129 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112881a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #130 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b83040, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:29510,optimiz,optimized,29510,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #213 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #214 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289b90, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #215 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #216 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #217 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #218 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #219 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #220 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #221 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289d40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #222 _PyEval_EvalFram",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:47444,optimiz,optimized,47444,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #174 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #175 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288f70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #176 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891a240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #177 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd891a240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #178 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #179 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #180 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff112890a0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #181 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11289130) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #182 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #183 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd8928940, tstate=0x55ff9515e050) at /usr/local/src",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:39847,optimiz,optimized,39847,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #100 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #101 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287940, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #102 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32020, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #103 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b32020, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #104 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #105 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #106 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11287a70, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #107 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11287b00) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #108 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #109 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd887f0f0, tstate=0x55ff9515e050) at /usr/local/src",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:25523,optimiz,optimized,25523,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #287 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #288 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b1c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #289 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2ae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #290 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2ae40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #291 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #292 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #293 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #294 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #295 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b370, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #296 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2b040, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:61768,optimiz,optimized,61768,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #294 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #295 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b370, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #296 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2b040, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #297 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2b040, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #298 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #299 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #300 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128b4a0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #301 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128b530) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #302 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #303 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fac0e0fe470, tstate=0x55ff9515e050) at /usr/local/src",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:63105,optimiz,optimized,63105,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #153 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #154 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288a60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #155 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c4a880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #156 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c4a880, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #157 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #158 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #159 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #160 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #161 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288c10, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #162 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6f680, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:35770,optimiz,optimized,35770,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #206 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #207 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112899e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #208 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6cdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #209 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6cdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #210 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #211 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #212 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #213 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #214 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289b90, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #215 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918a40, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:46107,optimiz,optimized,46107,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #160 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #161 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288c10, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #162 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6f680, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #163 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6f680, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #164 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #165 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #166 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #167 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #168 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288dc0, tstate=<optimized out>); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #169 _PyEval_EvalFram",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:37107,optimiz,optimized,37107,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #280 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #281 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b010, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #282 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4289b60, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #283 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4289b60, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #284 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #285 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #286 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #287 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #288 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b1c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #289 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2ae40, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:60431,optimiz,optimized,60431,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #128 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #129 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112881a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #130 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b83040, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #131 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b83040, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #132 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #133 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #134 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff112882d0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #135 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11288360) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #136 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #137 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd884ea30, tstate=0x55ff9515e050) at /usr/local/src",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:30847,optimiz,optimized,30847,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #346 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #347 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c490, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #348 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e074420, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #349 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e074420, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #350 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #351 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #352 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #353 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #354 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c640, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #355 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb840, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:73220,optimiz,optimized,73220,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #360 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #361 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c7f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #362 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e1d18a0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #363 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e1d18a0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #364 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #365 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #366 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128c920, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #367 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128c9b0) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #368 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #369 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fac0e079f30, tstate=0x55ff9515e050) at /usr/local/src",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:75960,optimiz,optimized,75960,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #241 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #242 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a3f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #243 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2ca240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #244 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2ca240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #245 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #246 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #247 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #248 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #249 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a5a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #250 _PyEval_EvalFram",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:52768,optimiz,optimized,52768,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #406 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #407 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d5c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #408 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #409 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cae40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #410 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #411 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; --Type <RET> for more, q to quit, c to continue without paging--; #412 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128d6f0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #413 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128d780) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #414 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #415 0x000055ff905b2187 in import_find_and_load ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:84894,optimiz,optimized,84894,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #399 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #400 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d410, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #401 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #402 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #403 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #404 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #405 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #406 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #407 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d5c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #408 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cae40, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:83557,optimiz,optimized,83557,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #353 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #354 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c640, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #355 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #356 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #357 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; --Type <RET> for more, q to quit, c to continue without paging--; #358 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #359 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #360 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #361 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c7f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #362 _PyEval_EvalFram",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:74557,optimiz,optimized,74557,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #392 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #393 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d260, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #394 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3bf870, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #395 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3bf870, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #396 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #397 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #398 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #399 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #400 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d410, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #401 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb240, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:82220,optimiz,optimized,82220,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #339 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #340 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c2e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #341 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3c5000, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #342 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3c5000, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #343 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #344 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #345 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #346 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #347 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c490, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #348 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e074420, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:71883,optimiz,optimized,71883,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,cting C compiler ABI info - done; -- The Fortran compiler identification is Intel 15.0.0.20140723; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90 -- yes; -- Fortran ENABLED; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : **restrict**; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found MPI_C: /opt/intel/impi/5.0.1.035/intel64/lib/libmpifort.so;/opt/intel/impi/5.0.1.035/intel64/lib/release/libmpi.so;/opt/intel/impi/5.0.1.035/intel64/lib/libmpigi.a;/usr/lib64/libdl.so;/usr/lib64/librt.so;/usr/lib64/libpthread.so; -- Found MPI_CXX: /opt/intel/impi/5.0.1.035/intel64/lib/libmpicxx.so;/opt/intel/impi/5.0.1.035/intel64/lib/libmpifort.so;/opt/intel/impi/5.0.1.035/intel64/lib/release/libmpi.so;/opt/intel/impi/5.0.1.035/intel64/lib/libmpigi.a;/usr/lib64/libdl.so;/usr/lib64/librt.so;/usr/lib64/libpthread.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:13148,Perform,Performing,13148,https://psicode.org,https://github.com/psi4/psi4/issues/201,10,['Perform'],['Performing']
Performance,"ction (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286030, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #13 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff96063c70, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #14 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff96063c70, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #15 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fabd8177800, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #16 _PyFunction_Vectorcall (func=0x7fabd81777f0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #17 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd84ecf40, callable=0x7fabd81777f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #18 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd84ecf40, callable=0x7fabd81777f0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #19 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112861e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #20 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd84ecdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #21 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabd84ecdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #22 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112862e0, locals=locals@entry=0x7fabd7bced00, args=args@entry=0x0, argcount=a",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:8681,optimiz,optimized,8681,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ction (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286660, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #35 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8697300, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #36 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8697300, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #37 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #38 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #39 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #40 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #41 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286810, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #42 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8890fc0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #43 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8890fc0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #44 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:13009,optimiz,optimized,13009,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ction (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286810, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #42 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8890fc0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #43 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8890fc0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #44 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #45 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #46 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #47 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #48 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112869c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #49 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd88a0a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #50 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd88a0a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #51 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:14339,optimiz,optimized,14339,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ction (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112869c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #49 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd88a0a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #50 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd88a0a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #51 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #52 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #53 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #54 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #55 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286b70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #56 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32d40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #57 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b32d40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #58 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:15669,optimiz,optimized,15669,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ction (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287430, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #81 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6eae0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #82 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6eae0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #83 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #84 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #85 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #86 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; --Type <RET> for more, q to quit, c to continue without paging--; #87 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112875e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #88 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b7c840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #89 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b7c840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #90 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:21897,optimiz,optimized,21897,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ction (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112875e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #88 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b7c840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #89 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b7c840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #90 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #91 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #92 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #93 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #94 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287790, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #95 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918c40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #96 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918c40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #97 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:23293,optimiz,optimized,23293,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ction (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287790, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #95 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918c40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #96 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918c40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #97 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #98 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #99 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #100 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #101 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287940, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #102 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32020, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #103 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b32020, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #104 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050);",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:24623,optimiz,optimized,24623,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ction object is now returnable for all psi4 methods. This Wavefunction object can be passed to other codes or directly manipulated; - Driver has been refactored into a new recursive scheme (as opposed to the previous nested scheme) to better facilitate more complex calls; - The MOLDEN writer now accepts density matrices for writing natural orbitals; - Added command-line arguments -l to specify PSIDATADIR (for developers) and -s to specify location of scratch directories (overrides PSI_SCRATCH); - Internal upgrades to the direct product decomposition library, libdpd, especially regarding density fitting; - All code improvements now go through a review process on `github.com/psi4/psi4` in addition to a continuous integration server to ensure code quality; ## New methods; - Added quadratic convergence algorithms for RHF, UHF, ROHF; - Added DF-CCSD gradients (RHF references); - Added conventional and DF RASSCF and CASSCF energies; - Added X2C scalar relativistic corrections; - Added QM/MM computations with MM point charges: energies and gradients; - Added UHF/UHF stability analysis for non-PK integrals; - Added density cumulant functional theory methods DC-12, ODC-12, and ODC-13; - Added UHF DF-MP2 gradients and DF-MP3 energies; - Added CCD treatment of dispersion in SAPT; - Added DF orbital-optimized MP2.5 energies and gradients; - Added GUESS_MIX keyword to UHF/UKS to generate broken-symmetry guesses; - Added STO-3G, 3-21G, and def2 basis sets through radon; - Added DF (O)MP2/2.5/3 energies and gradients; ## Geometry optimization; - Improved support for frozen coordinates and fixed coordinates; - Dynamic level algorithm tries increasingly robust optimization approaches for difficult systems; - Added Cartesian coordinate optimizations; - Ability to freeze selected Cartesian coordinates; - Added iterative, restricted-step method to RFO geometry optimizations; - Added delocalized internal coordinate optimizations; ## External features; - Added EFP energies added via libEF",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367:2695,optimiz,optimized,2695,https://psicode.org,https://github.com/psi4/psi4/issues/367,1,['optimiz'],['optimized']
Performance,"ctrons = 4; Nalpha = 2; Nbeta = 2. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: AUG-CC-PVTZ; Number of shells: 14; Number of basis function: 46; Number of Cartesian functions: 55; Spherical Harmonics?: true; Max angular momentum: 3. ==> Pre-Iterations <==. ---. ```; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; ```. ---. ```; Ag 11 11 0 0 0 0; B1g 3 3 0 0 0 0; B2g 3 3 0 0 0 0; B3g 3 3 0 0 0 0; Au 2 2 0 0 0 0; B1u 8 8 0 0 0 0; B2u 8 8 0 0 0 0; B3u 8 8 0 0 0 0; ```. ---. ```; Total 46 46 2 2 2 0; ```. ---. Starting with a DF guess... OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. ```; J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 12; Integrals threads: 12; Memory (MB): 34332; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12; ```. => Auxiliary Basis Set <=. Basis Set:; Number of shells: 30; Number of basis function: 104; Number of Cartesian functions: 131; Spherical Harmonics?: true; Max angular momentum: 4. Minimum eigenvalue in the overlap matrix is 2.5053959051E-02.; Using Symmetric Orthogonalization.; SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. ```; Total Energy Delta E RMS |[F,P]|; ```. @DF-RHF iter 1: -23.49398571874617 -2.34940e+01 7.47577e-02; @DF-RHF iter 2: -24.22630554723446 -7.32320e-01 7.13952e-03 DIIS; @DF-RHF iter 3: -24.23662538410707 -1.03198e-02 7.21912e-04 DIIS; @DF-RHF iter 4: -24.23681435257776 -1.88968e-04 6.97945e-05 DIIS; @DF-RHF iter 5: -24.23681649173431 -2.13916e-06 2.93127e-06 DIIS; @DF-RHF iter 6: -24.23681649645996 -4.72565e-09 1.53123e-07 DIIS; @DF-RHF iter 7: -24.23681649646912 -9.16245e-12 1.38238e-09 DIIS. DF guess converged. ==> Integral Setup <==. MINTS: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170152270:4296,Cache,Cache,4296,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270,1,['Cache'],['Cache']
Performance,"cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > > > const&), std::shared_ptr<psi::SuperFunctional> (*)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::optional<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, double, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > > > const&), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, pybind11::arg const&, pybind11::arg const&, pybind11::arg_v const&, char const (&) [43])::{lambda(pybind11::detail::function_call&)#1}::operator()(pybind11::detail::function_call&) const (__closure=<optimized out>, call=...) at /home/susi/.conda/envs/p4env/include/pybind11/pybind11.h:297; #6 0x00007fac0b7a3925 in pybind11::cpp_function::dispatcher (self=<optimized out>, args_in=0x7fabd7888e00, kwargs_in=0x0) at /home/susi/.conda/envs/p4env/include/pybind11/pybind11.h:987; #7 0x000055ff906815a6 in cfunction_call (func=0x7fac0e0cdb20, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; --Type <RET> for more, q to quit, c to continue without paging--; #8 0x000055ff9067aa6b in _PyObject_MakeTpCall (tstate=0x55ff9515e050, callable=callable@entry=0x7fac0e0cdb20, args=args@entry=0x55ff96063ea0, nargs=2, keywords=keywords@entry=0x0); at /usr/local/src/conda/python-3.10.14/Objects/call.c:215; #9 0x000055ff906769d6 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=<optimized out>, callable=0x7fac0e0cdb20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:112; #10 _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20, tstate=<optimized out>); at /usr/local/src/conda/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:6464,optimiz,optimized,6464,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,d I wanted to see if that would redirect. It does not re-direct but none of the CSS elements associated with the manual are being loaded properly. I see the manual appearing as plain HTML. The same thing happens if I navigate to the manual from the psicode.org homepage. The console in chrome and safari are showing 404 errors for js and css:. http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/doctools.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/underscore.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of 404 (Not Found); index.html:368 Uncaught ReferenceError: $ is not defined; http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210015028:1240,load,load,1240,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028,1,['load'],['load']
Performance,"d amplitudes to python](https://github.com/psi4/psi4/pull/1061) available satisfying the constraints and comments offered by @dgasmith and @amjames.; Exposing the T and Lambda amplitudes to the Python layer will have a series of beneficial consequences:; - It will be possible to experiment with these quantities easily.; - Writing and reading amplitudes to file ([HDF5](https://portal.hdfgroup.org/display/support), [Zarr](https://zarr.readthedocs.io/en/stable/), or any other format) is more easily managed from Python, especially if we need to preserve compatibility with Windows.; - Restart capabilities.; ## Summary of proposed changes (incomplete); ### cc* modules; - Create a single `cc` folder where all the other `cc*` folders will live as subfolders.; - Provide a top-level `CCWavefunction` class, partly modeled on the existing `CIWavefunction` class to overtake the whole implementation of the CC functionality.; - The class will manage `MOInfo`,` Params`, `DPD` as local data members. This will ensure that the lifetime of these objects is tied to a particular instance of a CC calculation.; - The class will contain the various steps in a CC calculation as methods. ; - Move from tstart-tstop to the new timers timer_on-timer_off; ### DPD Library ; - Remove use of static global machinery from DPD member functions. ; - Implement proper copy/move assign/construct for the DPD object. ; - Implement internal structs with proper constructors as needed.; - Replace c-style arrays/raw pointers with appropriate smart pointer/containers ; - Refactor shared state (shared by multiple DPD instances, currently dpd_gbl struct) into singleton(s). ; - **Note**: Memory tracking in its current form is not thread safe and relies on the client code properly locking calls to function that need to perform allocations with a mutex.; - DPD will handle opening/closing of psio files instead of requiring the user to do so. For visibility: @lothian @CDSherrill @andysim @jturney @fevangelista @dgasmith",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247:1987,perform,perform,1987,https://psicode.org,https://github.com/psi4/psi4/issues/1247,1,['perform'],['perform']
Performance,"d be handled. This PR addresses both of the above issues by changing DFJLinK to use the same incremental Fock formalism as DFJCOSK. Using the DFJCOSK incremental Fock formalism is preferred because DFJCOSK stores fewer matrices in the DFJCOSK class for incremental Fock usage, reducing memory requirements from a practical perspective, and lowering the amount of state contained in DFJLinK from a code design perspective. In standardizing the DFJLinK and DFJCOSK incremental Fock processes, the next CompositeJK PR will be smoother, and CompositeJK development can continue parallel to the developments discussed in https://github.com/psi4/psi4/pull/2682. Additionally, this PR serves as a first step the to decomposition of https://github.com/psi4/psi4/pull/2682 as discussed in that PR's comments, allowing for the full standardization of IncFock among integral-direct JK subclasses. For reviewers, since this PR is the bottleneck for two different routes of JK development (CompositeJK and IncFock standardization), it should be considered the highest-priority JK development PR to merge into Psi4 at the moment. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [X] Switches DFJLinK to using the incremental Fock build implementation used in DFJCOSK. This change standardizes the incremental Fock implementation between DFJLinK and DFJCOSK and improves the memory usage of DFJLinK in the process.; - [X] Changes LinK machinery to support new incremental Fock formalism. ## Questions; - [ ] Since this PR specifically focuses on changes to DFJLinK, there are still a couple of small differences in IncFock between DFJLinK and DFJCOSK, mainly, refactorings and the aforementioned bells and whistles that DFJLinK has that DFJCOSK doesn't. Would it be better to make adjustments to DFJCOSK in this PR as well, to further standardize the two; or is it preferrable to punt that down to the next CompositeJK PR, when DFJLinK and DFJCOSK are combined into the pilot CompositeJK implementa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2792:2482,bottleneck,bottleneck,2482,https://psicode.org,https://github.com/psi4/psi4/pull/2792,1,['bottleneck'],['bottleneck']
Performance,"d distribute with Psi4, much; like we do Boost?. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 25, 2015 8:22 AM, ""wpoely86"" notifications@github.com wrote:. > Easybuild https://hpcugent.github.io/easybuild/ is not an alternative; > to CMake or autoconf. The idea is to have an easy way to make reproducible; > builds and modules. Everything in the stack should also be optimally build,; > meaning utilizing the hardware to its full extend (for example, if AVX2 or; > infiniband is available, we will use it). Easybuild will take care of all; > dependencies. It will avoid using the OS installed (old) versions of; > software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after; > building a compiler (GCC/intel/...) from scratch. We also patch out any; > problem. Psi4 for example hard codes it's build path for the generation of; > new plugins. This is not desirable on a HPC system. Some software is also; > not adjusted to be build by anything other than GCC. We make it work with; > intel too. Some software doesn't even have a real build system other than a; > list of makefiles that usually don't work out of the box. We fix that so; > the build is reproducible .; > ; > It's primarily meant for HPC sites. If somebody adds support for a piece; > of software, other people can reuse it with one command. I use it to build; > Psi4 in production. If you're developing, Easybuild is useful for building; > all up to date versions of dependencies.; > ; > On our systems, if I run: module load PSI, I get a psi4 (a git version; > from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and; > mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for; > example GCC-5.1, it takes one command.; > ; > Adding a GCC subproject to Psi sounds like a bad idea. Building GCC is not; > a trivial task.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/97#issuecomment-105224328.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105251086:1800,load,load,1800,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105251086,1,['load'],['load']
Performance,"d on the flag situation. Points:. * we were getting reports at the forum that the Win conda package (built during the Azure CI) wasn't working for some machines; * a package built after switching the ENABLE_XHOST from `/arch:AVX2` to `/arch:AVX` seemed to work for all; * even before #2377, that flag wasn't active: https://dev.azure.com/psi4/psi4/_build/results?buildId=3455&view=logs&j=f31c9f97-4411-58e7-49ac-fc73f645e6b6&t=37c784ef-3eed-5b43-b403-e5baa44c3c05&l=32; ```; 2021-11-28T04:42:21.6163025Z -- The CXX compiler identification is Clang 13.0.0 with MSVC-like command-line; 2021-11-28T04:42:25.0744510Z -- Check for working C compiler: C:/Program Files/LLVM/bin/clang-cl.exe - skipped; 2021-11-28T04:42:25.4493255Z -- Check for working CXX compiler: C:/Program Files/LLVM/bin/clang-cl.exe - skipped; 2021-11-28T04:42:26.3103349Z -- Setting option ENABLE_XHOST: ON; 2021-11-28T04:42:26.6553541Z -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```; * this PR at first commit that adds `/arch:AVX` to CMAKE_CXX_FLAGS generates a bunch of the below; ```; 2021-12-16T22:33:46.0792776Z -- Build files have been written to: D:/a/1/b/build/psi4-core-prefix/src/psi4-core-build; 2021-12-16T22:33:46.0793909Z [6/9] Performing build step for 'psi4-core'; 2021-12-16T22:33:50.7743244Z [1/1263] Building CXX object src\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_row_zero.cc.obj; 2021-12-16T22:33:50.8074886Z clang-cl: warning: argument unused during compilation: '/arch:AVX' [-Wunused-command-line-argument]; 2021-12-16T22:33:50.8077002Z [2/1263] Building CXX object src\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_row_wrt.cc.obj; 2021-12-16T22:33:50.8080336Z clang-cl: warning: argument unused during compilation: '/arch:AVX' [-Wunused-command-line-argument]; 2021-12-16T22:33:50.8416165Z [3/1263] Building CXX object src\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_row_init.cc.obj; ```. So perhaps the original #2292 fix was a dud, and we've just gotten lucky about bein",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2384#issuecomment-997024098:925,Perform,Performing,925,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-997024098,1,['Perform'],['Performing']
Performance,"d out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #276 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c483c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; --Type <RET> for more, q to quit, c to continue without paging--; #277 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #278 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #279 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #280 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #281 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b010, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #282 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4289b60, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #283 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4289b60, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #284 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #285 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:59735,optimiz,optimized,59735,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"d out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #356 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #357 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; --Type <RET> for more, q to quit, c to continue without paging--; #358 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #359 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #360 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #361 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c7f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #362 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e1d18a0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #363 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e1d18a0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #364 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #365 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:75264,optimiz,optimized,75264,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"d out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #381 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16a3b0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #382 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #383 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #384 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510, tstate=0x55ff9515e050); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #385 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #386 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d0b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #387 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16dc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #388 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16dc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #389 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #390 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:80187,optimiz,optimized,80187,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"d out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; --Type <RET> for more, q to quit, c to continue without paging--; #195 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95d41d50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #196 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #197 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #198 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #199 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #200 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289830, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #201 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c373d0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #202 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c373d0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #203 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #204 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:44074,optimiz,optimized,44074,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #119 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #120 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #121 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #122 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287ff0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #123 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95ddd860, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #124 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95ddd860, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #125 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #126 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #127 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #128 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e363",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:29184,optimiz,optimized,29184,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #151 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #152 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #153 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #154 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288a60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #155 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c4a880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #156 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c4a880, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #157 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #158 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #159 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #160 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:35444,optimiz,optimized,35444,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #197 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #198 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #199 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #200 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289830, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #201 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c373d0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #202 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c373d0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #203 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #204 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #205 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #206 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:44444,optimiz,optimized,44444,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #239 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #240 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #241 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #242 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a3f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #243 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2ca240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #244 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2ca240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #245 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #246 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #247 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #248 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e363",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:52442,optimiz,optimized,52442,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #271 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #272 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #273 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #274 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ae60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #275 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c483c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #276 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c483c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; --Type <RET> for more, q to quit, c to continue without paging--; #277 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #278 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #279 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #280 PyObject_Vectorcall (kwnames=0x0,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:58702,optimiz,optimized,58702,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #313 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #314 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #315 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #316 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ba20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #317 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c6db10, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #318 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c6db10, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #319 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3634a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #320 _PyFunction_Vectorcall (func=0x7fac0e363490, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #321 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=3, args=0x7fff1128bb50, callable=0x7fac0e363490, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #322 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363490, vargs=0x7fff1128",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:66766,optimiz,optimized,66766,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #337 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #338 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #339 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #340 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c2e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #341 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3c5000, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #342 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3c5000, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #343 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #344 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #345 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #346 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:71557,optimiz,optimized,71557,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #211 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #212 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #213 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #214 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289b90, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #215 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #216 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #217 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #218 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #219 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #220 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e363",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:47118,optimiz,optimized,47118,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #285 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #286 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #287 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #288 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b1c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #289 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2ae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #290 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2ae40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #291 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #292 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #293 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #294 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e363",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:61442,optimiz,optimized,61442,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #351 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #352 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #353 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #354 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c640, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #355 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #356 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #357 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; --Type <RET> for more, q to quit, c to continue without paging--; #358 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #359 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #360 PyObject_Vectorcall (kwnames=0x0,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:74231,optimiz,optimized,74231,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #397 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #398 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #399 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #400 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d410, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #401 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #402 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #403 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #404 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #405 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #406 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e363",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:83231,optimiz,optimized,83231,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #126 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #127 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #128 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #129 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112881a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #130 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b83040, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #131 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b83040, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #132 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #133 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #134 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff112882d0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #135 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:30521,optimiz,optimized,30521,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #172 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #173 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #174 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #175 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288f70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #176 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891a240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #177 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd891a240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #178 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #179 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #180 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff112890a0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #181 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:39521,optimiz,optimized,39521,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #292 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #293 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #294 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #295 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b370, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #296 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2b040, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #297 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2b040, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #298 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #299 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #300 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128b4a0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #301 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:62779,optimiz,optimized,62779,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #404 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #405 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #406 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #407 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d5c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #408 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #409 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cae40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #410 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #411 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; --Type <RET> for more, q to quit, c to continue without paging--; #412 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128d6f0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #413 object_vacall (tstate=tstate@entry=0x55ff9515e0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:84568,optimiz,optimized,84568,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #158 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #159 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #160 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #161 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288c10, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #162 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6f680, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #163 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6f680, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #164 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #165 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #166 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #167 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e362",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:36781,optimiz,optimized,36781,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #204 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #205 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #206 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #207 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112899e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #208 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6cdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #209 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6cdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #210 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #211 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #212 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #213 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e362",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:45781,optimiz,optimized,45781,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #278 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #279 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #280 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #281 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b010, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #282 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4289b60, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #283 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4289b60, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #284 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #285 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #286 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #287 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e362",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:60105,optimiz,optimized,60105,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #344 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #345 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #346 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #347 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c490, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #348 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e074420, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #349 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e074420, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #350 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #351 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #352 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #353 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e362",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:72894,optimiz,optimized,72894,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #390 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #391 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #392 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #393 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d260, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #394 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3bf870, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #395 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3bf870, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #396 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #397 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #398 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #399 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e362",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:81894,optimiz,optimized,81894,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,d properly. I see the manual appearing as plain HTML. The same thing happens if I navigate to the manual from the psicode.org homepage. The console in chrome and safari are showing 404 errors for js and css:. http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/doctools.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/underscore.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of 404 (Not Found); index.html:368 Uncaught ReferenceError: $ is not defined; http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/psi4.css F,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210015028:1375,load,load,1375,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028,1,['load'],['load']
Performance,"d that github is also being intercepted. I could imagine; how our DNS might have been hijacked, etc., but not how the github link; could have been... David. On Thu, Apr 14, 2016 at 11:54 AM, Andrew James notifications@github.com; wrote:. > I am also being re-directed from search engines. The top site shows; > psicode.org but will redirect if I click on it. Typing psicode.org into a; > browser will bring me to the correct page, but I am noticing that the; > “manual” link is not working properly.; > ; > I have that bookmarked and I wanted to see if that would redirect. It does; > not re-direct but none of the CSS elements associated with the manual are; > being loaded properly. I see the manual appearing as plain HTML. The same; > thing happens if I navigate to the manual from the psicode.org homepage.; > ; > The console in chrome and safari are showing 404 errors for js and css:; > ; > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210017774:1143,load,load,1143,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774,1,['load'],['load']
Performance,"d.; ...; [ 50%] No patch step for 'pybind11_external'; [ 53%] No update step for 'pybind11_external'; [ 57%] Performing configure step for 'pybind11_external'; -- The CXX compiler identification is GNU 7.3.0; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:1474,Perform,Performing,1474,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966,2,['Perform'],['Performing']
Performance,"d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); > at Python/ceval.c:3433; > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); > at Python/ceval.c:4378; > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720; > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433; > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433; > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@en",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:5756,optimiz,optimized,5756,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,2,['optimiz'],['optimized']
Performance,"d; MD; 3 ! Number of dets; 0.972011 1 0 ! c_1 ; group label for simultaneous optimization ; opt-flag (0 - False; 1 - True); -0.166123 2 1 ! c_2 ; group label for simultaneous optimization ; opt-flag; -0.166123 2 1 ! c_3 ; group label for simultaneous optimization ; opt-flag; DET 2 1 PR 2 1 4 1 ! 2-nd det, up-electron ; PRomote electron from 2-nd orb to 4-th; DET 2 2 PR 2 1 4 1 ! 2-nd det, down-electron ; PRomote electron from 2-nd orb to 4-th; DET 3 1 PR 2 1 5 1 ! 3-nd det, up-electron ; PRomote electron from 2-nd orb to 5-th; DET 3 2 PR 2 1 5 1 ! 3-nd det, down-electron ; PRomote electron from 2-nd orb to 5-th; END MDET. ```; 1. comments behind ! are ignored; 2. Not required c_1<sup>2</sup> + c_2<sup>2</sup> + c_3<sup>2</sup> to be equal to one, only relative weights.; 3. This file defines the following wave function if orbital order in MOLDEN file is: ψ1, ψ2, ψ3 (ROHF case) and r<sub>1</sub>-r<sub>3</sub> for up-electrons, r<sub>4</sub>, r<sub>5</sub> for down-electrons in boron atom:. 0.972011 * |ψ1(r<sub>1</sub>), ψ2(r<sub>2</sub>), ψ3(r<sub>3</sub>)| * |ψ1(r<sub>4</sub>), ψ2(r<sub>5</sub>)|; -0.166123 * |ψ1(r<sub>1</sub>), ψ4(r<sub>2</sub>), ψ3(r<sub>3</sub>)| * |ψ4(r<sub>4</sub>), ψ2(r<sub>5</sub>)|; -0.166123 * |ψ1(r<sub>1</sub>), ψ5(r<sub>2</sub>), ψ3(r<sub>3</sub>)| * |ψ5(r<sub>4</sub>), ψ2(r<sub>5</sub>)|; ; PRomotion replace the specified orbital at its original position with the requested orbital.; ; Thus, if the MSCF calculation is performed for CASINO, it is necessary simultaneously with the molden file create correlation.data. If PSI4 using configuration state function (**CSF**), then group of determinants for each **CSF** should be labeled for simultaneous optimization like the 2nd and 3rd determinants in the example above. The opt-flag for all determinants except the first one should be equal to 1. PSI4 [output](https://github.com/user-attachments/files/17463891/output.txt) on the basis of which the above-described file could be generated. Vladimir.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3235:2420,perform,performed,2420,https://psicode.org,https://github.com/psi4/psi4/issues/3235,2,"['optimiz', 'perform']","['optimization', 'performed']"
Performance,"d_ptr`s in favor of `std::make_shared`.; 2. it uses `auto` on the left-hand side of the `std::shared_ptr` declarations.; 3. it replaces occurrences of `NULL`, signalling the null pointer, with `nullptr`.; These are changes suggested by the modern C++ best-practices and are explained in detail in Scott Meyers' [Effective Modern C++]. . ## Why?; #### Prefer `std::make_shared` to direct use of `new`; Using `std::make_shared`:; 1. Reduces code verbosity, especially when coupled with `auto`:; ```; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); // Type information written down 3 TIMES!!!; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!!!!; ```; 2. Ensures exception safety and prevents resource leaks.; 3. Improves efficiency:; ```; // Performs TWO allocations; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); ; // Performs ONE allocation; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); ; ```. _Reference_: Item 21 in [Effective Modern C++].; #### Prefer `auto` to explicit type declarations; Using `auto` reduces and/or avoids:; 1. Verbosity in variable declarations:; ```; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!; ```; 2. Problems with uninitialized variables. `auto` works like template type deduction, hence the right-hand side of the declaration **needs to have** an initializer:; ```; int x1; // fine, but initialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized; ```; 3. Problems with unintended type casts and type mismatches that are hard to impossible to catch:; ```; std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/836:1040,Perform,Performs,1040,https://psicode.org,https://github.com/psi4/psi4/pull/836,2,['Perform'],['Performs']
Performance,"db7a00, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #187 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabdcdb7a00, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #188 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112894b0, locals=locals@entry=0x7fabd8903bc0, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #189 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8a87940, globals=globals@entry=0x7fabd8903bc0, locals=locals@entry=0x7fabd8903bc0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #190 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd8903bc0, globals=0x7fabd8903bc0, source=0x7fabd8a87940); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #191 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #192 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd8a8a4d8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #193 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8903b00, callargs=0x7fabd8a8a4c0, func=0x7fac0e398e00, trace_info=0x7fff11289680, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #194 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95d41d50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; --Type <RET> for more, q to quit, c to continue without paging--; #195 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95d41d50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #196 _PyEval_Vector (kwnames=<optimized out>, argcount=",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:42428,optimiz,optimized,42428,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"dd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:461; #12 0x00007faaaeddcf40 in psi::scfgrad::DFJKGrad::compute_gradient (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:245; #13 0x00007faaaedc01e5 in psi::scfgrad::SCFDeriv::compute_gradient (this=this@entry=0x7ffdc830ba00) at /usr/include/c++/10/bits/shared_ptr_base.h:1324; #14 0x00007faaaed967ba in psi::scfgrad::scfgrad (ref_wfn=..., options=...) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/wrapper.cc:46; #15 0x00007faaae1ebe2a in py_psi_scfgrad (ref_wfn=std::shared_ptr<class psi::Wavefunction> (use count 5, weak count 1) = {...}) at /usr/include/c++/10/ext/atomicity.h:100; #16 0x00007faaae20f796 in pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call_impl<std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), 0ul, pybind11::detail::void_type>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::integer_sequence<unsigned long, 0ul>, pybind11::detail::void_type&&) && (f=<optimized out>, f=<optimized out>, this=0x7ffdc830c010) at /usr/include/c++/10/ext/atomicity.h:100; #17 pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call<std::shared_ptr<psi::Matrix>, pybind11::detail::void_type, std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>)>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>)) && (f=<optimized out>, this=0x7ffdc830c010) at /usr/include/pybind11/cast.h:1954; #18 pybind11::cpp_function::initialize<std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Wavefunction>, pybind11::name, pybind11::scope, pybind11::sibling, char [61]>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::shared_ptr<psi::Matrix> (*)(std::shared_ptr<psi::Wavefunction>), py",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:3930,optimiz,optimized,3930,https://psicode.org,https://github.com/psi4/psi4/issues/2010,2,['optimiz'],['optimized']
Performance,"dded QM/MM computations with MM point charges: energies and gradients; - Added UHF/UHF stability analysis for non-PK integrals; - Added density cumulant functional theory methods DC-12, ODC-12, and ODC-13; - Added UHF DF-MP2 gradients and DF-MP3 energies; - Added CCD treatment of dispersion in SAPT; - Added DF orbital-optimized MP2.5 energies and gradients; - Added GUESS_MIX keyword to UHF/UKS to generate broken-symmetry guesses; - Added STO-3G, 3-21G, and def2 basis sets through radon; - Added DF (O)MP2/2.5/3 energies and gradients; ## Geometry optimization; - Improved support for frozen coordinates and fixed coordinates; - Dynamic level algorithm tries increasingly robust optimization approaches for difficult systems; - Added Cartesian coordinate optimizations; - Ability to freeze selected Cartesian coordinates; - Added iterative, restricted-step method to RFO geometry optimizations; - Added delocalized internal coordinate optimizations; ## External features; - Added EFP energies added via libEFP; - Added PCM implicit solvent added for SCF; - Added interface to DMRG-CI and DMRG-SCF code in CheMPS2; - Added code to do potential energy scans via the WebMO interface; ## Performance optimization; - Sped up integrals computation by optimizing lib mints layer; - The PK JK builder has received significant performance improvements; - SAD guess has been improved dramatically, now default for all RHF computations; ## Bug fixes; - Various bug fixes and improvements to optimizer and IRC code; - Fixed a bug with DF-K in systems with only one occupied orbital; - Fixed an integer overflow bug in DF-CCSD(T); - Fixed modules that crashed when not finding full integral files available (because DF-HF was run instead of conventional HF); - Fixed problem with double hybrid DFT total energies not being printed; - Fixed crash caused by changing number of MO's during optimization (changes in number of MO's dropped due to linear dependencies); - Innumerable additional bug fixes and tweaks",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367:2927,optimiz,optimization,2927,https://psicode.org,https://github.com/psi4/psi4/issues/367,11,"['Perform', 'optimiz', 'perform']","['Performance', 'optimization', 'optimizations', 'optimizer', 'optimizing', 'performance']"
Performance,"dreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. # New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). # New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. # First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Develope",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:2008,optimiz,optimizations,2008,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['optimiz'],['optimizations']
Performance,"e ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1362, in scf_helper; > e_scf = scf_wfn.compute_energy(); > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 93, in scf_compute_energy; > raise e; > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; > self.iterations(); > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 358, in scf_iterate; > raise ConvergenceError(""""""SCF iterations"""""", self.iteration_); >; > ConvergenceError: Could not converge SCF iterations in 4 iterations.; >; > Psi4 stopped on: Wednesday, 08 August 2018 05:42PM; > Psi4 wall time for execution: 0:00:01.01; >; > *** Psi4 encountered an error. Buy a developer more coffee!; > *** Resources and help at github.com/psi4/psi4.; >; > It looks like die_if_not_converged; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsi4util/process.cc#L105-L113>; > toggled print-error-msg/die+traceback previously for SCF and DETCI, with; > defaulting toward print-error-msg. I think it's better to default toward; > die (which this PR now does) and ppl can catch the error if they want; > print-error-msg.; >; > For a long time we had geometry optimizations exit smoothly even if failed; > for iterations exceeded. That caused some problems (I think @dsirianni; > <https://github.com/dsirianni> hit them), so we switched toward the; > die+traceback. Now SCF will behave like optimizations.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/1130#issuecomment-411567479>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdvbzSmwMSXIINgOIb089mSzOfCS1ks5uO2AMgaJpZM4V0pOZ>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1130#issuecomment-411580303:2432,optimiz,optimizations,2432,https://psicode.org,https://github.com/psi4/psi4/pull/1130#issuecomment-411580303,2,['optimiz'],['optimizations']
Performance,"e a harder time converging within the default number of iterations (100). One of the molecules which never converged and stood out to me was ammonia (for aug-cc-pVQZ). The optimization of the structure was quick and easy, but the frequency calculation never converged due to the density matrix criterium (got down to ~10e-7, but never 10e-8). The atom coordinates I initially used was retrieved from a force field calculation. As these coordinates didn't work (even after increasing the number of iterations), I then changed the coordinates of ammonia to [this reference](https://www.researchgate.net/figure/Cartesian-coordinates-and-atomic-masses-of-ammonia_tbl2_259630381), but it still didn't do the trick as it got stuck at other atomic displacements instead. After playing around with these coordinates for a while, I finally got my run to converge. Questions is, is there a better (automated) way to achieve this kind of convergence, instead of doing this manually for the other remaining molecules? Changing the number of iterations feels a bit naive (and inefficient) and randomly displacing the atoms pre-Psi4 could mean a huge increase in CPU hours (especially for molecules > 100 Da). How would lowering the density matrix criterium (e.g. 10e-7) affect the results?. All tips appreciated! . Example of the ammonia Psi4 infile that finally worked:; ```; molecule mol_ammonia {; 0 1; H 0.000000000 0.000000000 1.208000000; N 0.000000000 0.000000000 0.000000000; H 1.150353000 0.000000000 -0.536000000; H -0.67517600 -1.0230290000 -0.536000000. units angstrom; no_reorient; }. set globals {; 	basis aug-cc-pVQZ; 	dft_spherical_points 434; 	dft_radial_points 85; }. set_memory(80000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2016:1986,optimiz,optimize,1986,https://psicode.org,https://github.com/psi4/psi4/issues/2016,2,['optimiz'],['optimize']
Performance,"e buffer holds the information necessary to get that data, *when it is explicitly told to*. . I am sorry for not being clear, but this stuff is very easy to get lost in. I meant that trying to access tensor elements directly after calling `buf4_init`. Getting back to the subject of this PR: . 1. Lets leave the comments in `file4_init` alone, since the `buf4/file2_init` functions are the ones being used externally, `file4_init`s are usually only found w/in DPD itself as far as I know.. ; 2. In `buf4_init()` and `file2_init()` We can put note/warning separate from the description of `label`, something to the tune of ; > Make sure that you use the correct `label` and `inputfile` if you *intend* to read from or write to an existing quantity on disk. If you *intend* to populate a new quantity on disk, ensure that the `label` is not already used in `inputfile`. PSIO::tocprint(int filenum) can be used to display the current list of labels in use in the outputfile. . BTW: That last hint is particularly useful for debugging I/O related errors. Also, If you intend … better than it will be loaded… since it indicates this may or may not be done, and it does **not** happen now. . The case where an tensor is held in core via the cache system does not need to be mentioned since it does not change any of this behavior. To go on to your question about the inputfile, label relationship. The file is one of those defined in [psifiles.h](https://github.com/psi4/psi4/blob/master/psi4/include/psi4/psifiles.h), and these macros provide an easy way to know which number file a quantity belongs in. Thinking of the file as a dictionary is not so far from reality, and will serve for the purpose of explaining. The label is going to be used to lookup the offset into the file (number of bytes from the beginning) where some numbers (the elements of the tensor) are found. If writing it will replace these, if reading they used in any operations involving the buffer we are using to manage all of this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267512911:2050,load,loaded,2050,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267512911,2,"['cache', 'load']","['cache', 'loaded']"
Performance,"e rhf; set e_convergence 1e-12; set d_convergence 1e-12; set ints_tolerance 0.0. optimize('b3lyp'); ```. When you run the geometry optimization in the /tmp folder, the geometry of the SCF doesn't get updated:. First SCF:. ```; Geometry (in Bohr), charge = 0, multiplicity = 1:. Center X Y Z ; ------------ ----------------- ----------------- -----------------; C -0.000000000000 1.855000000000 0.000000000000; C 0.000000000000 -1.855000000000 0.000000000000; C 1.606477124020 0.927500000000 0.000000000000; C 1.606477124020 -0.927500000000 0.000000000000; C -1.606477124020 0.927500000000 0.000000000000; C -1.606477124020 -0.927500000000 0.000000000000; H -0.000000000000 3.289000000000 0.000000000000; H 0.000000000000 -3.289000000000 0.000000000000; H 2.848357553047 1.644500000000 0.000000000000; H 2.848357553047 -1.644500000000 0.000000000000; H -2.848357553047 1.644500000000 0.000000000000; H -2.848357553047 -1.644500000000 0.000000000000; ```. At the end of optking:. ```; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); C -0.0000000000 0.9816237969 0.0000000000; C 0.0000000000 -0.9816237969 0.0000000000; C 0.8501111451 0.4908118984 0.0000000000; C 0.8501111451 -0.4908118984 0.0000000000; C -0.8501111451 0.4908118984 0.0000000000; C -0.8501111451 -0.4908118984 0.0000000000; H -0.0000000000 1.7404639720 0.0000000000; H 0.0000000000 -1.7404639720 -0.0000000000; H 1.5072860141 0.8702319860 0.0000000000; H 1.5072860141 -0.8702319860 0.0000000000; H -1.5072860141 0.8702319860 0.0000000000; H -1.5072860141 -0.8702319860 0.0000000000; ```. The new SCF:. ```; Geometry (in Bohr), charge = 0, multiplicity = 1:. Center X Y Z ; ------------ ----------------- ----------------- -----------------; C -0.000000000000 1.855000000000 0.000000000000; C 0.000000000000 -1.855000000000 0.000000000000; C 1.606477124020 0.927500000000 0.000000000000; C 1.606477124020 -0.927500000000 0.000000000000; C -1.606477124020 0.927500000000 0.0000000000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/66:1454,optimiz,optimization,1454,https://psicode.org,https://github.com/psi4/psi4/issues/66,1,['optimiz'],['optimization']
Performance,"e server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/doctools.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/underscore.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of 404 (Not Found); index.html:368 Uncaught ReferenceError: $ is not defined; http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); Is anyone else seeing this problem? Possibly related?. —AJ. On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (notifications@github.com) wrote:. I'm not observing any of this behavior, so just to clarify: doe",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210015028:1665,load,load,1665,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028,1,['load'],['load']
Performance,"e to `CheMPS2::DMRGSCFunitary::getLog(double*, double*, double*) const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:660: undefined reference to `CheMPS2::DIIS::appendNew(double*, double*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:661: undefined reference to `CheMPS2::DIIS::calculateParam(double*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:662: undefined reference to `CheMPS2::DMRGSCFunitary::updateUnitary(double*, double*, double*, bool, bool)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:677: undefined reference to `CheMPS2::DMRGSCFunitary::saveU(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:678: undefined reference to `CheMPS2::DIIS::saveDIIS(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:695: undefined reference to `CheMPS2::EdmistonRuedenberg::Optimize(double*, double*, bool, double, int)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:696: undefined reference to `CheMPS2::EdmistonRuedenberg::FiedlerExchange(int, double*, double*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:697: undefined reference to `CheMPS2::EdmistonRuedenberg::getUnitary()'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:697: undefined reference to `CheMPS2::CASSCF::fillLocalizedOrbitalRotations(CheMPS2::DMRGSCFunitary*, CheMPS2::DMRGSCFindices*, double*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:698: undefined reference to `CheMPS2::DMRGSCFunitary::rotateActiveSpaceVectors(double*, double*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:729: undefined reference to `CheMPS2::DMRG::DMRG(CheMPS2::Problem*, CheMPS2::ConvergenceScheme*, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:731: undefined reference to `CheMPS2::DMRG::n",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/264:20290,Optimiz,Optimize,20290,https://psicode.org,https://github.com/psi4/psi4/issues/264,1,['Optimiz'],['Optimize']
Performance,"e-15 2.48440e-16 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 4.440892099E-16; @S^2 Expected: 0.000000000E+00; @S^2 Observed: 4.440892099E-16; @S Expected: 0.000000000E+00; @S Observed: 0.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.903583 . Alpha Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Beta Occupied: . 1A -0.903583 . Beta Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Final Occupation by Irrep:; A ; DOCC [ 1 ]; SOCC [ 0 ]. @DF-UHF Final Energy: -2.83568850042064. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -3.8642104942204210; Two-Electron Energy = 1.0285219937997820; Total Energy = -2.8356885004206389. UHF NO Occupations:; HONO-0 : 1 A 2.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000. Computation Completed. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SCF //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: JUN-CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 46 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/jun-cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.481692970000 4.002603254130. Running in c1 symmetry. Rotational constants: A = ************ B = 0.95920 C = 0.95920 [cm^-1]; Rotational constants: A = ************ B = 28755.98304 C = 28755.98304 [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplic",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:5355,Load,Loading,5355,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,1,['Load'],['Loading']
Performance,"e. the shape for **each atom** comes up to: `(60, num_basis_fn, num_basis_fn)`. ; this agrees with their explanation just below eqn 14, where their choice of `n` (and hence `gamma`) leads to a total of `16 x 1 + 8 x 3 + 4 x 5 = 60` unique functions for their ""auxiliary Gaussian-type basis functions"" in eqn 14. an important detail, is that I just want the matrix for a **single atom for each element**, which is why `num_basis_fn` is just counting all the basis functionsfor 1 atom. and they shouldn't depend on the context of the atom (i.e. what molecule it is part of). . to be extra clear, i've uploaded their published 3-index overlap integral pytorch tensor here: https://drive.google.com/file/d/1aF2QvfL4GTu17W35Rzv7yLo2gI_05Wx5/view?usp=share_link ; it is a dictionary indexed by the element symbols. their basis set is the semi-empirical tight-binding`GFN1-xTB`. for example, hydrogen has 2 basis functions in `GFN1-xTB`, so the shape of their 3-index integral matrix is `(60, 2, 2)`.; ```python; import torch; three_idx_integrals = torch.load(""orbnet2_overlap3idx.pt""); print(three_idx_integrals[""H""].shape); >> torch.Size([60, 2, 2]); ```. I think the best way to go about this would be to just re-implement the formulae for calculating these 3-index integrals, in python (since i'm most familiar with python), but to allow setting the `gamma` parameter so that I can create as many rows as I want for the 1st dimension. This should be easier than trying to change some inner part of `psi4` just to have this functionality. Could anyone give any advice, or point me into some possible reference code to start things off? as you can tell, i'm not a quantum physics expert, so all this is a learning curve for me. any help would be very much appreciated! i cannot ask the authors too much, due to conflict of interest with their company. (ref 85 is their proprietary software, which I haven't found much luck using); Sorry that this post came up to be quite long. Thank you so much!; Cheers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2892:2575,load,load,2575,https://psicode.org,https://github.com/psi4/psi4/issues/2892,1,['load'],['load']
Performance,"e/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:586: undefined reference to `CheMPS2::DMRGSCFunitary::getNumVariablesX() const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:593: undefined reference to `CheMPS2::DMRGSCFindices::getNORB(int) const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:605: undefined reference to `CheMPS2::EdmistonRuedenberg::EdmistonRuedenberg(CheMPS2::Hamiltonian*, int)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:611: undefined reference to `CheMPS2::DMRGSCFunitary::loadU(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:620: undefined reference to `CheMPS2::DMRGSCFunitary::getNumVariablesX() const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:620: undefined reference to `CheMPS2::DIIS::DIIS(int, int, int)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:623: undefined reference to `CheMPS2::DIIS::loadDIIS(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:637: undefined reference to `CheMPS2::DMRGSCFunitary::getNumVariablesX() const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:646: undefined reference to `CheMPS2::DMRGSCFunitary::updateUnitary(double*, double*, double*, bool, bool)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:655: undefined reference to `CheMPS2::DMRGSCFunitary::getNumVariablesX() const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:655: undefined reference to `CheMPS2::DIIS::DIIS(int, int, int)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:657: undefined reference to `CheMPS2::DMRGSCFunitary::makeSureAllBlocksDetOne(double*, double*)'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:659: undefined reference to `CheMPS2::DMRGSCFunitary::getLog(double*, double*, double*) const'; /home/seba/software/psi4-0.5/src/bin/dmrg/dmrgscf.cc:660: undefined reference to `CheMPS2::DIIS",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/264:18429,load,loadDIIS,18429,https://psicode.org,https://github.com/psi4/psi4/issues/264,1,['load'],['loadDIIS']
Performance,"e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #164 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #165 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #166 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #167 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #168 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288dc0, tstate=<optimized out>); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #169 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891aa40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #170 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd891aa40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #171 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #172 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #173 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:37921,optimiz,optimized,37921,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #22 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112862e0, locals=locals@entry=0x7fabd7bced00, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #23 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd78907c0, globals=globals@entry=0x7fabd7bced00, locals=locals@entry=0x7fabd7bced00); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #24 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd7bced00, globals=0x7fabd7bced00, source=0x7fabd78907c0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #25 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #26 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd7888dd8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #27 0x000055ff90677205 in do_call_core (kwdict=0x7fabd7bce4c0, callargs=0x7fabd7888dc0, func=0x7fac0e398e00, trace_info=0x7fff112864b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #28 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8949cf0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #29 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8949cf0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #30 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #31 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<opti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:10486,optimiz,optimized,10486,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #68 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112870b0, locals=locals@entry=0x7fabd8887400, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #69 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd88826b0, globals=globals@entry=0x7fabd8887400, locals=locals@entry=0x7fabd8887400); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #70 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd8887400, globals=0x7fabd8887400, source=0x7fabd88826b0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #71 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #72 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd88851d8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #73 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8887300, callargs=0x7fabd88851c0, func=0x7fac0e398e00, trace_info=0x7fff11287280, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #74 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c49700, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #75 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c49700, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #76 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #77 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<opti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:19440,optimiz,optimized,19440,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"e470, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #305 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #306 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #307 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fac0e0f68c0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #308 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fac0e0f68c0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #309 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0ae880, callargs=0x7fac0e0f68c0, func=0x7fac0e3989a0, trace_info=0x7fff1128b870, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #310 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e32fc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #311 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e32fc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #312 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #313 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #314 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510, tstate=0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:65313,optimiz,optimized,65313,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"e; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. # First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:2872,cache,cache-level,2872,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['cache'],['cache-level']
Performance,"e=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #146 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e0d4c58, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #147 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8938500, callargs=0x7fac0e0d4c40, func=0x7fac0e398e00, trace_info=0x7fff112888b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #148 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95e324c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #149 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95e324c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #150 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #151 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #152 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #153 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #154 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288a60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #155 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c4a880, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:34433,optimiz,optimized,34433,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"e=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #266 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e0e6fd8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #267 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8902480, callargs=0x7fac0e0e6fc0, func=0x7fac0e398e00, trace_info=0x7fff1128acb0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #268 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8fa8550, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #269 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8fa8550, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #270 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #271 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #272 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #273 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #274 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ae60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #275 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c483c0, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:57691,optimiz,optimized,57691,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"e=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #332 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e1a1898, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #333 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0728c0, callargs=0x7fac0e1a1880, func=0x7fac0e398e00, trace_info=0x7fff1128c130, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #334 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16bb50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #335 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16bb50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #336 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #337 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #338 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #339 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #340 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c2e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #341 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3c5000, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:70546,optimiz,optimized,70546,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"e=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #378 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e041e18, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #379 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e071540, callargs=0x7fac0e041e00, func=0x7fac0e398e00, trace_info=0x7fff1128cf00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #380 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16a3b0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #381 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16a3b0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #382 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #383 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #384 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510, tstate=0x55ff9515e050); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #385 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #386 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d0b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #387 _PyEval_EvalFram",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:79480,optimiz,optimized,79480,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"e_local=None, haschanged_local=None, value_used=None, haschanged_used=None) at remote 0x7faa8737d4c0>, ('REFERENCE', 'SCF'): <OptionState(option='REFERENCE', module='SCF', value_global='RHF', haschanged_global=False, value_local='RHF', haschanged_local=False, value_used='RHF', haschanged_used=False) at remote 0x7faa8737d2e0>}) at remote 0x7faa8737d190>, ref_wfn=<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #28 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa87365d18, ; kwargs=0x7faa8746fd98, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='run_scf_gradient', qualname='run_scf_gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #29 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa8746fd90, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #30 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa8748c1f0>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #31 0x00007faabd6481e9 in do_call_core (kwdict={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, callargs=('hf',), func=<function at remote 0x7faa8748c1f0>, ; tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #32 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #33 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8c47070, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 973, in gradient (name='hf', kwargs={'opt_iter': True}, gradient_type='conventional', dert",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:8626,optimiz,optimized,8626,https://psicode.org,https://github.com/psi4/psi4/issues/2010,3,['optimiz'],['optimized']
Performance,"ector_impl_data> = {_M_start = 0x55555a4eab60,; _M_finish = 0x55555a4eadb0, _M_end_of_storage = 0x55555a4eadb0}, <No data fields>}}, <No data fields>}; occ_off = {<std::_Vector_base<int, std::allocator<int> >> = {; _M_impl = {<std::allocator<int>> = {<__gnu_cxx::new_allocator<int>> = {<No data fields>}, <No data fields>}, <std::_Vector_base<int, std::allocator<int> >::_Vector_impl_data> = {_M_start = 0x5555565de240,; _M_finish = 0x5555565de244, _M_end_of_storage = 0x5555565de244}, <No data fields>}}, <No data fields>}; vir_off = {<std::_Vector_base<int, std::allocator<int> >> = {; _M_impl = {<std::allocator<int>> = {<__gnu_cxx::new_allocator<int>> = {<No data fields>}, <No data fields>}, <std::_Vector_base<int, std::allocator<int> >::_Vector_impl_data> = {_M_start = 0x555556e9c820,; _M_finish = 0x555556e9c824, _M_end_of_storage = 0x555556e9c824}, <No data fields>}}, <No data fields>}; transspaces = {<std::_Vector_base<std::shared_ptr<psi::MOSpace>, std::allocator<std::shared_ptr<psi::MOSpace> > >> = {; _M_impl = {<std::allocator<std::shared_ptr<psi::MOSpace> >> = {<__gnu_cxx::new_allocator<std::shared_ptr<psi::MOSpace> >> = {<No data fields>}, <No data fields>}, <std::_Vector_base<std::shared_ptr<psi::MOSpace>, std::allocator<std::shared_ptr<psi::MOSpace> > >::_Vector_impl_data> = {_M_start = 0x555556f30e70, _M_finish = 0x555556f30e90, _M_end_of_storage = 0x555556f30e90}, <No data fields>}}, <No data fields>}; ints = 0x55555bfe4090; presort_predone = false; efzc = 0; spaces = {<std::_Vector_base<psi::DPDMOSpace, std::allocator<psi::DPDMOSpace> >> = {; _M_impl = {<std::allocator<psi::DPDMOSpace>> = {<__gnu_cxx::new_allocator<psi::DPDMOSpace>> = {<No data fields>}, <No data fields>}, <std::_Vector_base<psi::DPDMOSpace, std::allocator<psi::DPDMOSpace> >::_Vector_impl_data> = {_M_start = 0x555556910470, _M_finish = 0x555556910520, _M_end_of_storage = 0x555556910520}, <No data fields>}}, <No data fields>}; cachefiles = 0x555556ef4190; cachelist = 0x55555c01bc90; eref = 1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277:29500,cache,cachefiles,29500,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277,2,['cache'],"['cachefiles', 'cachelist']"
Performance,"ed out>) at Python/ceval.c:4161 ; > > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084 ; > > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433 ; > > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0) ; > > at Python/ceval.c:771 ; > > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; > > locals=locals@entry=0x7ffff7ed07a0, flags=flags@entry=0x0, arena=arena@entry=0x28ca640) at Python/pythonrun.c:1981 ; > > #35 0x00007ffff5168335 in PyRun_StringFlags (str=<optimized out>, start=257, globals=0x7ffff7ed07a0, locals=0x7ffff7ed07a0, flags=0x0) ; > > at Python/pythonrun.c:1914 ; > > #36 0x00007ffff66a3f45 in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) () ; > > from /usr/lib/libboost_python3.so.1.54.0 ; > > #37 0x00000000006fcad7 in psi::Python::run (this=<optimized out>, input=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/python.cc:1446 ; > > #38 0x000000000069a8ae in main (argc=2, argv=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/psi4.cc:111 ; > > Any suggestions on what I could do to track this down further? I looked in ccenergy/pair_energies.cc and there was nothing immediately obvious. ; > > ; > > Thanks! ; > > ; > >  ; > > Reply to this email directly or view it on GitHub. ; > > ; > > ; > > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:7711,optimiz,optimized,7711,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,4,['optimiz'],['optimized']
Performance,"ed to pass `CMAKE_<LANG>_COMPILER_ARG1` through to psi4 subproject and all other externals.; - [x] let ctest tests run whether old or new d3 and gcp implementations present.; - [x] don't expect a pylibefpConfig.cmake for libefp detection. this is the case with the c-f package -- I'll probably put it back later when libefp/pylibefp repos combine.; - [x] I was using inconsistent naming for basis_set_exchange detection/import, so fix that.; - [x] adapt docs build so that it can use Ninja (or presumably any non-Makefiles) generator. The special thing about Makefiles is that it works as expected for glob depends. So we can tell the basis table to regenerate if any of the gbs files change. Other generators won't understand this. But most docs builds are one-off, not continuous development anyways, so it's worth no globs and yes flexibility. ADDED: switched to ninja for docs and docs-pr (ok memory-wise at max parallelism b/c debug build). ADDED 12 Nov; - [x] update ecosystem and docs GHA and linux azure to use the path-advisor env/cache procedure. this helps keep the path-advisore procedure tested and keeps testing envs up-to-date. alternate testing can still be imposed by `sed`ing the envs.; - [x] in azure linux, use the three testing lanes to go beyond quicktests. apart from some longer tests, we're now hitting all but stdsuite non-quick. ; - [x] fixed the windows nightly build through azure, which was many layers of bugs. the improved path handling in psi4 & psi4/__init__.py from May technically didn't play nicely with the build-and-copy-into-place of the azure file cmake_install_*-paths-wise, and the recent (Oct) trick to get a fast `psi4 --version` tripped the problem, hence the `sed`.; - [x] Strengthened the default to Release so that it works for windows, too. Ninja was setting Debug as-was.; - [x] Updated the buildrun.yaml files from path-advisor; - [x] Update the docs build for py312 by fixing the non-raw strings having backspace chars.; - [x] removed the pb11=2.10",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:3795,cache,cache,3795,https://psicode.org,https://github.com/psi4/psi4/pull/3021,1,['cache'],['cache']
Performance,"een... David. On Thu, Apr 14, 2016 at 11:54 AM, Andrew James notifications@github.com; wrote:. > I am also being re-directed from search engines. The top site shows; > psicode.org but will redirect if I click on it. Typing psicode.org into a; > browser will bring me to the correct page, but I am noticing that the; > “manual” link is not working properly.; > ; > I have that bookmarked and I wanted to see if that would redirect. It does; > not re-direct but none of the CSS elements associated with the manual are; > being loaded properly. I see the manual appearing as plain HTML. The same; > thing happens if I navigate to the manual from the psicode.org homepage.; > ; > The console in chrome and safari are showing 404 errors for js and css:; > ; > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210017774:1286,load,load,1286,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774,1,['load'],['load']
Performance,"eference rhf; > set e_convergence 1e-12; > set d_convergence 1e-12; > set ints_tolerance 0.0; > ; > optimize('b3lyp'); > ; > When you run the geometry optimization in the /tmp folder, the geometry of; > the SCF doesn't get updated:; > ; > First SCF:; > ; > Geometry (in Bohr), charge = 0, multiplicity = 1:; > ; > Center X Y Z; > ; > ---; > ; > ```; > C -0.000000000000 1.855000000000 0.000000000000; > C 0.000000000000 -1.855000000000 0.000000000000; > C 1.606477124020 0.927500000000 0.000000000000; > C 1.606477124020 -0.927500000000 0.000000000000; > C -1.606477124020 0.927500000000 0.000000000000; > C -1.606477124020 -0.927500000000 0.000000000000; > H -0.000000000000 3.289000000000 0.000000000000; > H 0.000000000000 -3.289000000000 0.000000000000; > H 2.848357553047 1.644500000000 0.000000000000; > H 2.848357553047 -1.644500000000 0.000000000000; > H -2.848357553047 1.644500000000 0.000000000000; > H -2.848357553047 -1.644500000000 0.000000000000; > ```; > ; > At the end of optking:; > ; > ```; > Writing optimization data to binary file.; > Structure for next step:; > Cartesian Geometry (in Angstrom); > C -0.0000000000 0.9816237969 0.0000000000; > C 0.0000000000 -0.9816237969 0.0000000000; > C 0.8501111451 0.4908118984 0.0000000000; > C 0.8501111451 -0.4908118984 0.0000000000; > C -0.8501111451 0.4908118984 0.0000000000; > C -0.8501111451 -0.4908118984 0.0000000000; > H -0.0000000000 1.7404639720 0.0000000000; > H 0.0000000000 -1.7404639720 -0.0000000000; > H 1.5072860141 0.8702319860 0.0000000000; > H 1.5072860141 -0.8702319860 0.0000000000; > H -1.5072860141 0.8702319860 0.0000000000; > H -1.5072860141 -0.8702319860 0.0000000000; > ```; > ; > The new SCF:; > ; > Geometry (in Bohr), charge = 0, multiplicity = 1:; > ; > Center X Y Z; > ; > ---; > ; > ```; > C -0.000000000000 1.855000000000 0.000000000000; > C 0.000000000000 -1.855000000000 0.000000000000; > C 1.606477124020 0.927500000000 0.000000000000; > C 1.606477124020 -0.927500000000 0.000000000000; > C -1.60647",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/66#issuecomment-73061426:1800,optimiz,optimization,1800,https://psicode.org,https://github.com/psi4/psi4/issues/66#issuecomment-73061426,1,['optimiz'],['optimization']
Performance,"efs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); at Python/ceval.c:3433; #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); at Python/ceval.c:4378; #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720; #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433; #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433; #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0); at Python/ceval.c:771; #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; locals=locals@entry=0x7ffff7ed07a0, flag",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:5657,optimiz,optimized,5657,https://psicode.org,https://github.com/psi4/psi4/issues/12,3,['optimiz'],['optimized']
Performance,"el-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 1681, in frequency; H, wfn = hessian(lowername, return_wfn=True, molecule=molecule, **kwargs); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 1332, in hessian ; fmaster.write(p4util.format_options_for_input(moleculeclone, **kwargs)). TypeError: a bytes-like object is required, not 'str'; ```. The culprit is exactly what the traceback says: fmaster is opened in binary mode and format_options_for_input returns a string. Python 2 would let you write a string to a binary file, but Python 3 expects bytes. I can fix this locally by adding the required .encode('utf-8') calls to that line as well as several lines afterwards, starting around 1370. If that was all, I would just fix this myself, but sowing is useless without reaping, and the reaping bug is trickier. The displacement files include bytes encoded from UTF-8 and also bytes dumped from pickle (the gradient kwargs). In general, pickle bytes will not be intelligible in any text encoding scheme. Python 2's naive approach to bytes means this is not a problem. When you try to run one of those files with Python 3-compiled Psi4, however... ```Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/usr/local/psi4/bin/psi4"", line 230, in <module>; content = f.read(); File ""/usr/local/Cellar/python3/3.6.3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/codecs.py"", line 321, in decode; (result, consumed) = self._buffer_decode(data, self.errors, final); UnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 440: invalid start byte; ```. Python 3 tries to read all the bytes as UTF-8. This fails for the pickled bytes, so Psi4 crashes. Even if you read the file as binary, you would still have to (somehow) instruct Python 3 which parts of the file should be UTF-8 decoded and which parts should be pickle-loaded.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/833:2690,load,loaded,2690,https://psicode.org,https://github.com/psi4/psi4/issues/833,1,['load'],['loaded']
Performance,"em– they affect you.; 2. To build Psi4 you now will need to do something along the lines of (in the top-level of the cloned source code):; ; ``` .sh; cmake -H. -Bbuild ; cd build && make; make install; ```; - In the configure step (the first line) there are a large number of CMake variables you can set to fine tune the build. See the top-level `CMakeLists.txt` for the more common ones. For example to change the C++ compiler add: `-DCMAKE_CXX_COMPILER=/path/to/compiler` after `-Bbuild`; - Anything not part of Psi4 proper is now in external and is expected to have its own build files. Paths where CMake should look for dependencies should now be passed to these external projects via `CMAKE_PREFIX_PATH`. ; - Installing is now a thing for Psi4. In theory you can run Psi4 from the build directory, but you'll quickly find it annoying (I'll leave it to you to learn why). Tests should still work from the build directory and can be performed from there before installing. They should be performed using `ctest` as normal. ; 3. Within the next week anyone who compiles Psi4 regularly (as opposed to just using the Conda package) should clone this branch and try it out. Please do it sooner rather than later because of the following points.; 4. Once this PR is merged, git operations on forks and clones of the current master repo will likely cease to work without a ton of effort. This is because of the size and amount of changes in this PR. Instead of fighting to rebase on top of it, there are two options:; 1. If you have some small changes you want to make in the near future [fork my fork](https://github.com/ryanmrichard/psi4), add your changes, submit a PR to me; 2. Wait until after my PR is merged into Psi4's master repo, make a fresh fork, and manually copy/paste any files you are working on into that fresh fork; 5. Since the history is getting messed up anyways, there are plans to rip Boost out after merging this PR. We don't really need Boost anymore, it adds to our compile tim",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236723542:1460,perform,performed,1460,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236723542,1,['perform'],['performed']
Performance,"en using H+ as the compound in a SAPT calculation it crashes with a divide by zero error:. ```; File ""/var/spool/slurm/d/job333055/slurm_script"", line 21, in <module>; myener = psi4.energy(""sapt2+(ccd)dmp2""); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/driver.py"", line 525, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 4581, in run_sapt; monomerA_wfn = scf_helper('RHF', molecule=monomerA, **kwargs); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1887, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 99, in scf_compute_energy; scf_energy = self.finalize_energy(); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 692, in scf_finalize_energy; self.print_energies(); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 804, in scf_print_energies; self.set_variable(""HF VIRIAL RATIO"", - potential / ke) # P::e SCF; ZeroDivisionError: float division by zero; ```. The script to reproduce this is below. ```; #!/usr/bin/env python3; import os; import numpy as np; import psi4 as psi4; psi4.core.set_num_threads(4); psi4.set_options({""cachelevel"": 1, ""print"": 1}); psi4.set_memory(12000000000); psi4_io = psi4.core.IOManager.shared_object(); psi4.core.set_output_file('hcl-sapt.log', False); geometry= """"""; 1 1; H -0.0 0.0 -1.36; --; -1 1; Cl 0.0 0.0 1; """"""; geom = psi4.geometry(geometry); psi4.basis_helper(""""""; assign aug-cc-pvtz; """"""); myener = psi4.energy(""sapt2+(ccd)dmp2""); for ener in [ 'SAPT ELST ENERGY', 'SAPT EXCH ENERGY', 'SAPT IND ENERGY', 'SAPT DISP ENERGY', 'SAPT TOTAL ENERGY' ]:; print(""%s %g"" % ( ener, psi4.variable(ener) )); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3156:1488,cache,cachelevel,1488,https://psicode.org,https://github.com/psi4/psi4/issues/3156,1,['cache'],['cachelevel']
Performance,"enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: AUG-PCSEG-0; Blend: AUG-PCSEG-0; Number of shells: 37; Number of basis function: 73; Number of Cartesian functions: 76; Spherical Harmonics?: true; Max angular momentum: 2. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 73 73 0 0 0 0; -------------------------------------------------------; Total 73 73 17 17 17 0; -------------------------------------------------------. ==> Integral Setup <==. Using in-core PK algorithm.; Calculation information:; Number of atoms: 5; Number of AO shells: 37; Number of primitives: 64; Number of atomic orbitals: 76; Number of basis functions: 73. Integral cutoff 1.00e-12; Number of threads: 1. Performing in-core PK; Using 7298102 doubles for integral storage.; We computed 235045 shell quartets total.; Whereas there are 247456 unique shell quartets.; ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory (MB): 375; Schwarz Cutoff: 1E-12. OpenMP threads: 1; Minimum eigenvalue in the overlap matrix is 1.5687182609E-03.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter 0: -802.88132998346850 -8.02881e+02 1.33370e-02 ; @RHF iter 1: -787.60962084475932 1.52717e+01 5.31297e-03 ; @RHF iter 2: -784.61065630353232 2.99896e+00 2.74010e-02 DIIS; @RHF iter 3: -787.81386527066320 -3.20321e+00 1.99984e-03 DIIS; @RHF iter 4: -787.84423605872018 -3.03708e-02 3.17913e-04 DIIS; @RHF iter 5: -787.84661751791953 -2.38146e-03 1.61048e-04 DIIS; @RHF iter 6: -787.84753550465541 -9.17987e-04 8.58328e-05 DIIS; @RHF iter 7: -787.84773333581302 -1.97831e-04 4.22806e-05 DIIS; @R",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339418202:4027,Perform,Performing,4027,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202,1,['Perform'],['Performing']
Performance,"ene'); compare_values(odd_rmsg_start, g0.rms(), 4, 'start rms grad'); compare_matrices(odd_g_start, g0, 3, 'start grad'). def test_badodd_grad(mol):; e, wfn = optimize('mp2', return_wfn=True, molecule=mol); g = wfn.gradient(); g.print_out(); compare_values(odd_nre_opt, mol.nuclear_repulsion_energy(), 2, 'opt nre nogood'); compare_values(odd_e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene nogood'); compare_values(odd_rmsg_opt, g.rms(), 4, 'opt grad nogood'). test_norm_start(normz); test_zero_grad(normz). # And behold, the initial gradient matches Q-Chem, the optimization; # progresses nicely, the RMS Force column goes to zero, and the gradient; # at the end is zero. # start nre.........................................................PASSED; # start ene.........................................................PASSED; # start rms grad....................................................PASSED; # start grad........................................................PASSED; #Optimizer: Optimization complete!; # opt nre...........................................................PASSED; # opt ene...........................................................PASSED; # opt ZERO grad.....................................................PASSED. # --------------------------------------------------------------------------------------------------------------- ~; # Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; # --------------------------------------------------------------------------------------------------------------- ~; # 1 -139.530718293045 -139.530718293045 0.05695995 0.03625240 0.19767161 0.12159384 ~; # 2 -139.555614729326 -0.024896436281 0.02341593 0.00968824 0.06857406 0.03977721 ~; # 3 -139.556998324542 -0.001383595215 0.00950087 0.00516674 0.02878292 0.01662559 ~; # 4 -139.557349947407 -0.000351622866 0.00371412 0.00163364 0.01005622 0.00527025 ~; # 5 -139.557391640737 -0.000041693330 0.00051457 0.00018711 0.00138018 0.00067210 ~; # 6 -139.557392223903 -0.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:3776,Optimiz,Optimizer,3776,https://psicode.org,https://github.com/psi4/psi4/issues/310,2,['Optimiz'],"['Optimization', 'Optimizer']"
Performance,"ent but experimental (require `set qc_module occ`) until further optimized); - [x] uhf cd-ccd E; - [x] uhf cd-ccsd E; - [x] uhf cd-ccsd(t) E (present but experimental (require `set qc_module occ`) until further optimized); - [x] uhf cd a-ccsd(t) E (present but experimental (require `set qc_module occ`) until further optimized). ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] pick over canonical methods and run some basic timings tests; - [x] TODO: kill `new` pass; - [x] TODO: there might be UHF CCD in there, too.; - [x] TODO: merge #2731 first. it has a lot of stdsuite changes that I don't want to rebase through. nevertheless, stdsuite on the new methods is working fine locally. the azure errors are that uhf cc methods are running rather than throwing NYI as it expects.; - [x] TODO: df ccsd(t) gradients need to be marked experimental and semi-hidden until optimization. REVISED 25 Oct; ```; Module comparison timings [s] for CCSD & CCSD(T) energy & gradient; * Benzene, C6H6; * Either aug-cc-pVDZ (192 nbf) or cc-pVDZ (119 nbf); all-electron; * Same singlet system run as RHF & UHF; * CC converged to 1e-7; * 20 GiB, 8 threads. GRADIENT ENERGY; symm c1 symm c1; ---- ---- ---- ----; <<< CCSD/aug-cc-pVDZ >>>. cfour (vcc) rhf conv 132 1650 52 1202 ; ccenergy rhf conv 266 2037 92 1099; dfocc rhf df n/a 420 n/a 230; fnocc rhf df n/a 149. cfour uhf conv 225 3473 90 2413 ; ccenergy uhf conv 463 5196 222 2576; dfocc uhf df n/a 1545 n/a 826. cfour u/r ratio 1.7 2.1 1.7 2.0 ; ccenergy u/r ratio 1.7 2.5 2.4 2.3; dfocc u/r ratio n/a 3.7 n/a 3.6; ```. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2739:1729,optimiz,optimization,1729,https://psicode.org,https://github.com/psi4/psi4/pull/2739,1,['optimiz'],['optimization']
Performance,"eqing/intel/oneapi/mkl/latest/lib/intel64:$LD_LIBRARY_PATH""; export EIGEN3_ROOT=""/home/yuyeqing/software/eigen3/include""; ```. cmake output the result log like this:. ```; -- Building using CMake 3.26.4 Generator Unix Makefiles; -- Setting option BUILD_SHARED_LIBS: OFF; -- Setting option CMAKE_BUILD_TYPE: Release; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting option ENABLE_OPENMP: ON; -- Setting option ENABLE_AUTO_BLAS: ON; -- Setting option ENABLE_AUTO_LAPACK: ON; -- Setting option ENABLE_PLUGIN_TESTING: OFF; -- Setting option ENABLE_CYTHONIZE: OFF; -- Setting option ENABLE_CODE_COVERAGE: OFF; -- Setting option ENABLE_BOUNDS_CHECK: OFF; -- Setting option ENABLE_ASAN: OFF; -- Setting option ENABLE_TSAN: OFF; -- Setting option ENABLE_UBSAN: OFF; -- Setting option ENABLE_MSAN: OFF; -- Setting option MAX_AM_ERI: 5; -- Setting option FC_SYMBOL: 2; -- Setting option BUILD_FPIC: ON; -- Setting option CMAKE_INSTALL_LIBDIR: lib; -- Setting option PYMOD_INSTALL_LIBDIR: /; -- Setting option psi4_INSTALL_CMAKEDIR: share/cmake/psi4; -- Setting option TargetLAPACK_INSTALL_CMAKEDIR: share/cmake/TargetLAPACK; -- Setting option TargetHDF5_INSTALL_CMAKEDIR: share/cmake/TargetHDF5; -- Setting option ENABLE_GENERIC: OFF; -- Setting option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting option psi4_CXX_STANDARD: 17; -- Setting option psi4_CXX_STANDARD_Libint2: 17; -- Setting option SIMINT_VECTOR: avx; -- Setting option SPHINX_THEME: sphinx_psi_theme; -- Setting option SPHINXMAN_STRICT: OFF; -- Setting option BUILD_Libint2_GENERATOR: OFF; -- Setting option psi4_SHGAUSS_ORDERING: gaussian; -- Psi4 install: /mnt/f/psi4/build_linux/install; -- Found Python 3.10: /home/yuyeqing/software/miniconda3/envs/psi/bin/python3.10 (found version 3.10.11); -- Psi4 staging: /mnt/f/psi4/build_linux/stage; -- CMAKE_CXX_FLAGS: -march=native; -- Could NOT find iomp5 -- con",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:819,Perform,Performing,819,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119,2,['Perform'],['Performing']
Performance,"er of Cartesian functions: 260; > Spherical Harmonics?: true; > Max angular momentum: 2; > ; > ## ==> Pre-Iterations <==; > ; > Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; > ; > ---; > ; > A 246 246 0 0 0 0; > ; > ---; > ; > Total 246 246 47 47 47 0; > ; > ---; > ; > Starting with a DF guess...; > ; > OEINTS: Wrapper to libmints.; > by Justin Turney; > ; > Calculation information:; > Number of atoms: 24; > Number of AO shells: 114; > Number of SO shells: 114; > Number of primitives: 358; > Number of atomic orbitals: 260; > Number of basis functions: 246; > ; > Number of irreps: 1; > Number of functions per irrep: [ 246 ]; > ; > Overlap, kinetic, potential, dipole, and quadrupole integrals; > stored in file 35.; > ; > ==> Integral Setup <==; > ; > ==> DFJK: Density-Fitted J/K Matrices <==; > ; > J tasked: Yes; > K tasked: Yes; > wK tasked: No; > OpenMP threads: 1; > Integrals threads: 1; > Memory (MB): 3576; > Algorithm: Core; > Integral Cache: NONE; > Schwarz Cutoff: 1E-12; > Fitting Condition: 1E-12; > ; > => Auxiliary Basis Set <=; > ; > Basis Set: CC-PVDZ-JKFIT; > Number of shells: 426; > Number of basis function: 1210; > Number of Cartesian functions: 1384; > Spherical Harmonics?: true; > Max angular momentum: 3; > ; > Minimum eigenvalue in the overlap matrix is 5.4113217503E-05.; > Using Symmetric Orthogonalization.; > SCF Guess: Core (One-Electron) Hamiltonian.; > ; > ==> Iterations <==; > ; > ```; > Total Energy Delta E RMS |[F,P]|; > ```; > ; > @DF-RHF iter 1: -408.79982050385229 -4.08800e+02 3.62257e-02; > @DF-RHF iter 2: -355.09647973844881 5.37033e+01 4.41837e-02 DIIS; > @DF-RHF iter 3: -503.82195227805050 -1.48725e+02 2.30091e-02 DIIS; > @DF-RHF iter 4: -521.88187925493912 -1.80599e+01 1.74498e-02 DIIS; > @DF-RHF iter 5: -531.29208626043282 -9.41021e+00 8.08186e-03 DIIS; > @DF-RHF iter 6: -532.44139862133784 -1.14931e+00 8.76099e-03 DIIS; > @DF-RHF iter 7: -535.74682106965861 -3.30542e+00 2.34149e-03 DIIS; > @DF-RHF iter 8: -535.91483788818550 -1.68017e-01 1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61#issuecomment-58650322:7347,Cache,Cache,7347,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322,1,['Cache'],['Cache']
Performance,"er/procrouting/proc.py, line 2354, in run_scf_gradient (name='hf', kwargs={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, dft_func=False, optstash=<OptionsState(data={('SCF_TYPE',): <OptionState(option='SCF_TYPE', module=None, value_global='PK', haschanged_global=False, value_local=None, haschanged_local=None, value_used=None, haschanged_used=None) at remote 0x7faa8737d4c0>, ('REFERENCE', 'SCF'): <OptionState(option='REFERENCE', module='SCF', value_global='RHF', haschanged_global=False, value_local='RHF', haschanged_local=False, value_used='RHF', haschanged_used=False) at remote 0x7faa8737d2e0>}) at remote 0x7faa8737d190>, ref_wfn=<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #28 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa87365d18, ; kwargs=0x7faa8746fd98, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='run_scf_gradient', qualname='run_scf_gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #29 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa8746fd90, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #30 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa8748c1f0>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #31 0x00007faabd6481e9 in do_call_core (kwdict={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, callargs=('hf',), func=<function at remote 0x7faa8748c1f0>, ; tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #32 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:8204,optimiz,optimized,8204,https://psicode.org,https://github.com/psi4/psi4/issues/2010,6,['optimiz'],['optimized']
Performance,er: /usr/bin/clang -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- The Fortran compiler identification is GNU; -- Check for working Fortran compiler: /usr/local/bin/gfortran; -- Check for working Fortran compiler: /usr/local/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /usr/local/bin/gfortran supports Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:1569,Perform,Performing,1569,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance,"ere two threads try to access-write (since [key] fills if key is not found), and the slightly slower thread ends up in a Bad State where it thinks there is a value but ends up infinitely looping on the lookup (the program will hang on `[]`). This only happens once every several thousand runs, and only when running with a high degree of parallelism in a system with many atoms. I cannot induce it in captivity, but I have observed it in the wild. Anyway, `[]` accesses on std::map aren't thread-safe if you aren't super-duper sure the map is fully filled for all keys you'd ever look up, which *should* be the case if `initialize_lebedev` was ever called anywhere. But it wasn't, and that was Bad. Now it's called exactly once (thanks, c++11's `call_once`! I do see that this isn't used anywhere else in the code, but I do see mutex is imported in several files, so I don't think I'm adding any new deps here). The hangs should be gone, though I'll have to churn through another several thousand runs to likely be sure (as, again, it is a very rare kind of hang). This will take me a few days to confirm, but given all debugging efforts point to this being the problem, I'm like 99% confident this will do the trick. That said, as far as I can tell, besides one print function the resulting order_ that's assigned to is never *used*. Maybe a candidate to be axed in the future?. ## Description; Actually invokes initialize_lebedev before accessing lebedev_mapping_ to ensure the mapping has values, and prevents a deadlock when running in parallel. ## User API & Changelog headlines; Prevents a nasty, rare hang. ## Dev notes & details; See the main PR body. ## Questions; - [x] What does `order_` actually do in SphericalGrid? It never appears to be used anywhere except one print function that also appears unused. ## Checklist; - [x] No tests needed -- no observable changes and it's hard to write a test for a very rare race condition :). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736:2199,race condition,race condition,2199,https://psicode.org,https://github.com/psi4/psi4/pull/2736,1,['race condition'],['race condition']
Performance,erforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLA,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5160,Perform,Performing,5160,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,1,['Perform'],['Performing']
Performance,erforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3190,Perform,Performing,3190,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,erforming Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX fl,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5119,Perform,Performing,5119,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,1,['Perform'],['Performing']
Performance,erforming Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missin,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3149,Perform,Performing,3149,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,"ersion in the module structure of the driver. What I think was happening was that the `psi4/driver/driver.py` was the nexus, and any wrappers or utilites that it happened to import became the API. The folder psi4/driver didn't really function as a module. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python thinking it a little irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" types that were outlining driver code in input files, but this could influence p4n. The driver imports are a non-trivial change and could use discussion and maybe relegation to 1.5. But they are necessary for a clean docs build w/o hacks. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new feat",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2162:1419,optimiz,optimize,1419,https://psicode.org,https://github.com/psi4/psi4/pull/2162,1,['optimiz'],['optimize']
Performance,"erver responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/underscore.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of 404 (Not Found); index.html:368 Uncaught ReferenceError: $ is not defined; http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); Is anyone else seeing this problem? Possibly related?. —AJ. On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (notifications@github.com) wrote:. I'm not observing any of this behavior, so just to clarify: does anyone; actually get this ""redirection"" when you enter ""psicode.org"" on your URL; bar? Or do you just get this when you search for PSI4 on; Google/Yahoo/Bing? NB: When I put ""PSI4"" in those search engines, I get; only our correct site for the first page of hits (except for th",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210015028:1948,load,load,1948,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028,1,['load'],['load']
Performance,"es to be from a tightly converged/optimized calc, then loosen the comparison check to accommodate the default/existing conv crit (https://psicode.org/psi4manual/master/add_tests.html#test-contents). Tests checking opt status at a certain cycle exempt of course. That's the principle, but do feel free to change as you see fit --- the reference values (agreed, preferred thing to change if the ref is the culprit) or the comparison crit (if it's the optimizer behavior that's the instigator). > Explanation:; I've expanded the number of tests I'm running since I started cleaning up core.cc. In the opt specific tests the convergence is usually tight enough that the nuclear repulsion energies match the reference values just fine for both optimizers. There are some tests like cc1-3 that are failing due to being just above threshold. atol = 0.001 the difference is ~ 0.0017. These tests are using the default qchem convergence criteria ~ 3e-4 max_force. Both optimizers finish well below the criteria and geometries match to 1e-4 Angstroms and 0.001 degrees. Geometries are the same. There are around 5 or 6 tests failing like this. Thanks for the explanation. I'd view reference NRE values as less venerable. For one thing, only those that caused trouble were even updated when physical constants changed, iirc. > Would y'all like this PR to include updated output.ref files for the tests or would a separate test updating PR be better? I don't see anything in the"" adding tests documentation"" about reference log files. I can include those as well if desired. It will just greatly increase the number of lines changed in this PR. Separate, please. Like updating `samples/`, better to keep the not-for-visual-inspection changes aside. Update: I see Jonathon thinks differently. Including is ok with me, now that GH allows files to be folded up rather than scrolled through. Is `.log` where all the optking detailed output goes now? I guess we ought to start collecting them. `output.log`, perhaps. B",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262549464:1470,optimiz,optimizers,1470,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262549464,1,['optimiz'],['optimizers']
Performance,"es. The top site shows; > psicode.org but will redirect if I click on it. Typing psicode.org into a; > browser will bring me to the correct page, but I am noticing that the; > “manual” link is not working properly.; > ; > I have that bookmarked and I wanted to see if that would redirect. It does; > not re-direct but none of the CSS elements associated with the manual are; > being loaded properly. I see the manual appearing as plain HTML. The same; > thing happens if I navigate to the manual from the psicode.org homepage.; > ; > The console in chrome and safari are showing 404 errors for js and css:; > ; > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resourc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210017774:1428,load,load,1428,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774,1,['load'],['load']
Performance,"escription. @lothian, I was looking at the qcvars set by the Brueckner methods. For review, cc* module has been storing the HF energy of the first Brueckner iteration as `SCF TOTAL ENERGY` and the quantities from the final B iteration as `CCSD TOTAL ENERGY`, `CCSD(T) TOTAL ENERGY`, and `(T) CORRECTION ENERGY`. In the below, I've reworked it so:; * final B energies get their own qcvars `(BCCD|BCCD(T)) (TOTAL|CORRELATION) ENERGY` in accordance with the principle that `energy(mtd)` should set `mtd TOTAL ENERGY`; * MP2 and CCSD qcvars are now collected from the first B iteration, not the last, so they have canonical values. `SCF TOTAL ENERGY` still from first B iteration.; * `(BCCD|BCCD(T)) CORRELATION ENERGY` now defined as total E of last B iteration minus HF of first B iteration. This is in accordance with the pattern that `mtd CORRELATION ENERGY` = `mtd TOTAL ENERGY` - `SCF TOTAL ENERGY`, but it is admittedly wacky when applied to Brueckner. It is, however, the same way the orbital-optimized methods of occ/dfocc have been handled. The OO methods additionally set a `mtd REFERENCE CORRECTION ENERGY` so that one can recover the ref/corl split of the final OO iteration. That could be added to the BCCD methods. Does the above sound ok, or does it need further reworking? I also tightened up the B r_conv formula a bit because the standard tests (not shown in PR) weren't matching (to 1.e-6) the highly converged values under default conditions (e_conv = 6 --> brueckner_r_conv =4). I've also been on a rampage of late to better (and automatically) document what methods are available under what detailed conditions (e.g., dertype, reference, conv/df/cd type, all-electron/frozen-core). I'd like to add the table snapshotted below to the main [CC docs page](https://psicode.org/psi4manual/master/cc.html). Unfortunately, it doesn't cover excited states or properties, so it can't replace the existing summary table, but it does provide more detail. Does it look ok, and are there any cc*",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2708:1001,optimiz,optimized,1001,https://psicode.org,https://github.com/psi4/psi4/pull/2708,1,['optimiz'],['optimized']
Performance,"escription; In this PR, we implement a pilot version of least squares tensor hypercontraction (LS-THC)... factoring 4-index ERIs (O(N^4)) into two-index quantities (i.e. $(mn|rs) = x_{m}^{P}x_{n}^{P}Z^{PQ}x_{r}^{Q}x_{s}^{Q}$). In the LS-THC formulation, $P$ and $Q$ are derived from grid points, and. $x_{m}^{P} = w_{P}^{\frac{1}{4}} \phi_{m}(x_{P}, y_{P}, z_{P})$,; $E^{PQ} = x_{m}^{P}x_{n}^{P}(mn|rs)x_{r}^{Q}x_{s}^{Q}$; $S^{PP'} = (x_{m}^{P}x_{m}^{P'})^{2}$; $Z^{PQ} = (S^{PP'})^{-1} E^{P'Q'} (S^{QQ'})^{-1}$. This is based off of the work of [Parrish et al. (2012)](https://pubs.aip.org/aip/jcp/article/137/22/224106/194901/Tensor-hypercontraction-II-Least-squares). These quantities can be constructed integral-direct and non-iteratively. No four or even three-index quantities are stored, thereby allowing for the future development of efficient, low-memory quantum chemistry algorithms in Psi. This is a PR in a series of planned PRs that will involve:; 1.) LS-THC-JK (integral-direct SCF without recomputing ERIs every iteration and faster K construction); 2.) LS-THC-MP2; 3.) Local grid implementation of LS-THC to allow for use in local correlation methods (DLPNO-MP2, DLPNO-CCSD/(T)). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Added Python interface (Pybind) for building LS-THC quantities that allow for rapid prototyping of new methods involving THC; - [x] Developed infrastructure for the development of alternate ways to perform THC (i.e. PF-THC). ## Dev notes & details; - [x] Implemented LS-THC C/Py-side for future QC methods. ## Questions; - [x] Is this the proper way to export this object Py-side?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3157:1571,perform,perform,1571,https://psicode.org,https://github.com/psi4/psi4/pull/3157,1,['perform'],['perform']
Performance,"etail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132; > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0; > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084; > #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283; > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086; > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); > at Python/ceval.c:3433; > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); > at Python/ceval.c:4378; > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:4615,optimiz,optimized,4615,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,1,['optimiz'],['optimized']
Performance,"evel'; (whatever its final name or design) is that a user could easily elect the; degree to which the optimizer should try different things to reach; convergence. On Tue, Nov 6, 2018 at 4:47 PM Lori A. Burns <notifications@github.com>; wrote:. > PRs psi-rking/optking#24 <https://github.com/psi-rking/optking/pull/24>; > and #1335 <https://github.com/psi4/psi4/pull/1335> are a pair. Together,; > they get most optimizations working for Psi. In particular have working:; >; > - ordinary, opt-is-full job optimizations; > - collecting all the psivars so psi can read them in. basically,; > collecting enough to generate a skeleton (mol, basis, psivars) that can be; > passed back from psi4.optimize(..., return_wfn=True); > - inlining optking's logging output into the psi4 output file; > - resetting psi4's options on either side of the; > optking.run_json_dict() call. The trouble was that the psi4-s imported; > by optking were clearing and setting options (as is proper for indep json; > runs) such that the calling psi4 didn't have its original options in; > globals upon optking termination; > - starting to catch optking errors (str in json) and re-raising them; > as psi4 errors.; >; > Yes, that AlgError vs OptError for exceeding geom_maxiter really stumped; > me for a while b/c I only got the final error (""dynamic level exceeded""); > and I thought it was behaving differently btwn direct optking and psi4; > initiated runs. To me it seems clear that if geom_maxiter is exceeded, then; > optimizer quits directly (though perhaps that's clearer when geom_maxiter=2; > than =200).; >; > @psi-rking <https://github.com/psi-rking> @AlexHeide; > <https://github.com/AlexHeide>; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/1335#issuecomment-436437450>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTHzCC2j_z9TFbx5ofRV3X4D0BTSDks5ushF5gaJpZM4YQL0t>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1335#issuecomment-436668061:1778,optimiz,optimizer,1778,https://psicode.org,https://github.com/psi4/psi4/pull/1335#issuecomment-436668061,1,['optimiz'],['optimizer']
Performance,"ew python optking driver. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] RN 1 The fixed_* optimization keywords have been changed to ranged_* options; - [x] RN 2 output will be changed. Check output.dat for simple convergence / step info. output.log for detailed info; - [x] RN 3 IRC convergence behavior different for minima and substep. ; - [x] Downstream plugin users who were still getting wfn from globals will find it has now departed. Please follow the advice it's been issuing for years to do wfn passing. [LAB added]. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] New optimizer. Most of driver is very similar; - [x] Hessian Updating and optimization logic is in optking as much as possible; - [x] Restarting optimizations now supported. Optking can write entire state to disc (json); - [x] Driver attempts to symmetrize geometries; - [x] New keywords added. Some removed / updated. ; - [x] old optking removed from CMakeLists.txt from `/psi4/src/psi4`; - [x] optking py_funcs removed from core.cc; - [x] All tests have been verified for equal or better convergence. (except opt-irc-2); - [x] globals legacy gradient, wfn, and molecule removed [LAB added]. ## Questions; - [ ] A document describing differences between the optimzers may be necessary; - [ ] Unclear if I have fully removed old optking and building with new optking is fully working. ## Checklist; - [x] test15 tests restart; - [x] Can remove old deprecated set_gradient; - [x] ctest -L opt run. ## Status; - [x] Ready for review; - [ ] Ready for merge. For documentation on the new optimizer please see https://optking.readthedocs.io/en/latest/; The lines changed is almost entirely due to new test output.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727:1981,optimiz,optimizer,1981,https://psicode.org,https://github.com/psi4/psi4/pull/2727,1,['optimiz'],['optimizer']
Performance,"explicitly np.load(..., allow_pickle=True) since we're building objects",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1607:14,load,load,14,https://psicode.org,https://github.com/psi4/psi4/pull/1607,1,['load'],['load']
Performance,"extern1 test fails for me (Arch Linux, gcc (GCC) 6.3.1, native BLAS/LAPACK):; ```; Output:; ----------------------------------------------------------; Performing finite difference calculations; 19 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19; Finite difference (3-pt.) vs. analytic gradient to 10^-5..........PASSED; Finite difference energy..........................................PASSED; Analytic energy...................................................PASSED; Exit Status: infile ( -6 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.12 sec; ----------------------------------------------------------; Test Failed.; ""extern1"" end time: Jan 30 20:51 CET; ""extern1"" time elapsed: 00:00:29; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276186318:152,Perform,Performing,152,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276186318,1,['Perform'],['Performing']
Performance,"f 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resource: the server responded with a status of 404 (Not Found); > index.html:368 Uncaught ReferenceError: $ is not defined; > http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > Is anyone else seeing this problem? Possibly related?; > ; > —AJ; > ; > On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (; > notifications@github.com) wrote:; > ; > I'm not obse",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210017774:2162,load,load,2162,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774,1,['load'],['load']
Performance,"f MP2 Energy (in au.); # 1 2 3 4 5; # 1 -0.06704124 0.03019136 0.05220334 -0.00529778 -0.01005568; # 2 0.09718540 -0.00309814 -0.00309734 -0.00009178 -0.09089814; # 3 -0.11760428 0.07849561 0.06595344 -0.00926729 -0.01757747; odd_g_start = psi4.Matrix(5, 3) # Q-Chem; contents = [ # have to swap x & y, and -x; [ -0.09718540, 0.00309814, 0.00309734, 0.00009178, 0.09089814],; [ -0.06704124, 0.03019136, 0.05220334, -0.00529778, -0.01005568],; [ -0.11760428, 0.07849561, 0.06595344, -0.00926729, -0.01757747]]; odd_g_start.set(zip(*contents)); odd_rmsg_start = 0.058156. # optimized reference should be same as norm, but in practice is this. odd_nre_opt = 33.838291620; odd_e_opt = -139.301327453; odd_rmsg_opt = 0.0422103431176. # should be able to pass starting gradient at new geometry, then zero grad final structure. test_odd_start(oddz) # works; #test_zero_grad(oddz) # should work; test_badodd_grad(oddz) # works b/c I'm testing against the bad results. # qu-est-ce que c-est? By RMS Force the optimization looks to proceed ; # nicely. But look at that final gradient with unmoveable large gradient; # components. It's not orientation, as input is zmat and it's the same with cartesian ; # coordinates in a couple orientations. It's not corruption associated; # with wavefunction pass, as I've tested an older version. It's not a local ; # minimum as the total gradient wouldn't be so large. It's not too distorted a ; # starting structure, as q-chem and molpro converge to the real minimum promptly. It's not; # symmetry constrained, as it's c1. I'm at a loss. # for oddz; # start; # 25.7790013416; # -139.174980786; # 0.0581560524872; # Optimizer: Optimization complete!; # opt; # 33.8382916197; # -139.301327453; # 0.0422103431176; #gradient = [; # [ -0.01135649578523, -0.02871892445843, -0.05475995417434],; # [ 0.00216387360216, 0.04113784938512, 0.07821983299617],; # [ 0.00215642675781, 0.04114952366672, 0.07824201651882],; # [ 0.00563414370780, -0.03413386327141, -0.06481576207381],;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:6647,optimiz,optimization,6647,https://psicode.org,https://github.com/psi4/psi4/issues/310,1,['optimiz'],['optimization']
Performance,"f84a0fdd000 rw-p 01631000 fd:02 203799116 /home/psilocaluser/miniconda3/envs/p4dev36/lib/libmkl_intel_thread.so; 7f84a0fe3000-7f84a103a000 rw-p 01a8b000 fd:02 203799116 /home/psilocaluser/miniconda3/envs/p4dev36/lib/libmkl_intel_thread.so; 7f84a103a000-7f84a1810000 r-xp 00000000 fd:02 203799115 /home/psilocaluser/miniconda3/envs/p4dev36/lib/libmkl_intel_lp64.so; 7f84a1810000-7f84a1a10000 ---p 007d6000 fd:02 203799115 /home/psilocaluser/miniconda3/envs/p4dev36/lib/libmkl_intel_lp64.so; 7f84a1a10000-7f84a1a11000 r--p 007d6000 fd:02 203799115 /home/psilocaluser/miniconda3/envs/p4dev36/lib/libmkl_intel_lp64.so; 7f84a1a11000-7f84a1a22000 rw-p 007d7000 fd:02 203799115 /home/psilocaluser/miniconda3/envs/p4dev36/lib/libmkl_intel_lp64.so; 7f84a1a27000-7f84a1a5c000 rw-p 008ff000 fd:02 203799115 /home/psilocaluser/miniconda3/envs/p4dev36/lib/libmkl_intel_lp64.so; ```. * Case B, the MKL RT; * NumPy from intel channel linked to mkl_rt.so; * Psi4 linked to MKL runtime dynamically; * Result: Both n before p and p before n thread, and both load the same libraries. ```; (idp3) objdir-idp3-4: >>> ldd stage/usr/local/psi4/lib/psi4/core.so | grep mkl; 	libmkl_rt.so => /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_rt.so (0x00007f3db8ab8000). (idp3) >>> ldd ~/miniconda3/envs/idp3/lib/python3.5/site-packages/numpy/core/multiarray.cpython-35m-x86_64-linux-gnu.so | grep mkl; 	libmkl_rt.so => /home/psilocaluser/miniconda3/envs/idp3/lib/python3.5/site-packages/numpy/core/../../../../libmkl_rt.so (0x00007fa3164df000). (idp3) >>> head -13 thread.py ; import os; import time. # none for psithon. # good psiapi; import numpy as np; import psi4. # bad psiapi; #import psi4; #import numpy as np. (idp3) >>> PYTHONPATH=/home/psilocaluser/gits/hrw-lab/objdir-idp3-4/stage/usr/local/psi4/lib python thread.py ; Threads set to 1 by Python driver.; Time for threads 1, size 200: Psi4: 0.000581 NumPy: 0.000603; Time for threads 1, size 500: Psi4: 0.008048 NumPy: 0.008170; Time for threads 1, size 2000: Psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/755#issuecomment-313016394:7640,load,load,7640,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-313016394,1,['load'],['load']
Performance,"f8a in cfunction_call_varargs (func=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, ; args=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), kwargs=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:742; #22 0x00007faabd64e681 in _PyObject_MakeTpCall (callable=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, args=<optimized out>, nargs=<optimized out>, keywords=0x0); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:159; #23 0x00007faabd64b53c in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:125; #24 _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:115; #25 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #26 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3469; #27 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; --Type <RET> for more, q to quit, c to continue without paging-- f=Frame 0x5589d8c417d0, for file /home/work/psi4/install.susi/lib/psi4/driver/procrouting/proc.py, line 2354, in run_scf_gradient (name='hf', kwargs={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, dft_func=False, optstash=<OptionsState(data={('SCF_TYPE',): <OptionState(option='SCF_TYPE', module=None, value_global='PK', haschanged_global=False, value_local=None, haschanged_local=None, value_used=None, haschanged_used=None) at remote 0x7faa8737d4c0>, ('REFERENCE', 'SCF'): <OptionState(option='REFERENCE', module='SCF', value_global='RHF', haschanged_global=False, value_local='RHF', hasc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:6866,optimiz,optimized,6866,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['optimiz'],['optimized']
Performance,"f9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #83 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #84 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #85 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #86 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; --Type <RET> for more, q to quit, c to continue without paging--; #87 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112875e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #88 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b7c840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #89 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b7c840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #90 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #91 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #92 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:22338,optimiz,optimized,22338,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"f=0x7fabd8949cf0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #29 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8949cf0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #30 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #31 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #32 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; --Type <RET> for more, q to quit, c to continue without paging--; #33 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #34 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286660, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #35 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8697300, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #36 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8697300, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #37 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #38 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized o",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:11882,optimiz,optimized,11882,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"f=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #112 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #113 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fabd8a583d0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #114 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8a583d0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; --Type <RET> for more, q to quit, c to continue without paging--; #115 0x000055ff90677205 in do_call_core (kwdict=0x7fabd88870c0, callargs=0x7fabd8a583d0, func=0x7fac0e3989a0, trace_info=0x7fff11287e40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #116 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95de00f0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #117 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95de00f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #118 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #119 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #120 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #121 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:27847,optimiz,optimized,27847,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"fabd891abf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #167 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #168 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288dc0, tstate=<optimized out>); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #169 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891aa40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #170 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd891aa40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #171 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #172 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #173 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #174 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #175 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288f70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #176 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891a240, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:38510,optimiz,optimized,38510,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"fabe42887a0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #220 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #221 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289d40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #222 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4288610, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #223 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4288610, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #224 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #225 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #226 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11289e70, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #227 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11289f00) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #228 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #229 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd8928710, tstate=0x55ff9515e050) at /usr/local/src",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:48847,optimiz,optimized,48847,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"fabe4df3a10, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #248 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #249 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a5a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #250 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4df3880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #251 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4df3880, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #252 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #253 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #254 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128a6d0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #255 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128a760) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #256 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #257 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd89285d0, tstate=0x55ff9515e050) at /usr/local/src",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:54171,optimiz,optimized,54171,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"fac0e16ddc8, callable=0x7fac0e361510, tstate=0x55ff9515e050); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #385 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #386 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d0b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #387 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16dc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #388 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16dc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #389 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #390 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #391 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #392 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #393 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d260, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #394 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3bf870, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:80883,optimiz,optimized,80883,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"features. Std managed pointers are high on the list.; - [x] Switch Psi4 from a binary to a library; - [x] Allow more flexible external libraries; - [x] Remove C-side python calls. DFT-D3, DFT functionals, BasisSet parsing, etc.; - [x] Add a dictionary to the Wavefunction object thats holds the current Psi Variables.; ## Medium; - [ ] Rewrite LibOptions as a property map or just a general dictionary. Needs to be more object oriented, less global, and capable of encompassing all QCDB.; - [x] Full Python3 support. This is mostly done, but small sections are not Python3 compatible.; - [ ] Ability to combine DF fitting sets via partial decomposition of a expanded Coulomb metric.; - [x] ECP would be a great addition.; - [ ] Purge all `char*` from Psi4. Issues with dropping pointers and python exportation.; - [ ] A smarter SCF solver that can change iterations based on current conditions, see #211.; ## Low; - [ ] More flexibility in compilation of integrals. For example compiling 3-index and Coulomb metric integrals at a higher AM than the conventional basis set.; - [x] 4th CMake rewrite. Currently overly cautious about what needs to be recompiled.; Our CMake files should ensure that the compilers support all the features that we need. ; - [ ] EFP Gradients: https://github.com/psi4/psi4private/issues/70; - [ ] Uniform space setter for DMRG/CI/MCSCF/etc computations.; - [ ] `change_file_namespace` should be able to tie multiple files together and should return the status rather than `None`, #645.; - [x] Molecule parser can accept atomic numbers instead of symbols, #418. (fixed by #953); - [ ] DETCI for more than 256 orbitals; - [ ] Automatic choice between `rhf/uhf/rohf/cuhf` for input molecules.; - [ ] Potenital integral derivative performance can be improved, see #3.; - [ ] Allow a DECON keyword to basis sets #43.; - [ ] Remove `char *` for `std::string`. Modify, expand, delete as desired. If you take up a feature make sure to post here so that we do not duplicate effort.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402:2204,perform,performance,2204,https://psicode.org,https://github.com/psi4/psi4/issues/402,1,['perform'],['performance']
Performance,"ference value is the way to go but I want to have some record of asking before I start slightly changing reference values. > Secondarily, should the reference values be updated in general at some point so that users don't stumble across an instance where the value is slightly off and wonder why?. General guidance to for ref values to be from a tightly converged/optimized calc, then loosen the comparison check to accommodate the default/existing conv crit (https://psicode.org/psi4manual/master/add_tests.html#test-contents). Tests checking opt status at a certain cycle exempt of course. That's the principle, but do feel free to change as you see fit --- the reference values (agreed, preferred thing to change if the ref is the culprit) or the comparison crit (if it's the optimizer behavior that's the instigator). > Explanation:; I've expanded the number of tests I'm running since I started cleaning up core.cc. In the opt specific tests the convergence is usually tight enough that the nuclear repulsion energies match the reference values just fine for both optimizers. There are some tests like cc1-3 that are failing due to being just above threshold. atol = 0.001 the difference is ~ 0.0017. These tests are using the default qchem convergence criteria ~ 3e-4 max_force. Both optimizers finish well below the criteria and geometries match to 1e-4 Angstroms and 0.001 degrees. Geometries are the same. There are around 5 or 6 tests failing like this. Thanks for the explanation. I'd view reference NRE values as less venerable. For one thing, only those that caused trouble were even updated when physical constants changed, iirc. > Would y'all like this PR to include updated output.ref files for the tests or would a separate test updating PR be better? I don't see anything in the"" adding tests documentation"" about reference log files. I can include those as well if desired. It will just greatly increase the number of lines changed in this PR. Separate, please. Like updating `samp",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262549464:1249,optimiz,optimizers,1249,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262549464,1,['optimiz'],['optimizers']
Performance,"fff1128d6f0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #413 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128d780) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #414 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #415 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fac0e1341f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #416 PyImport_ImportModuleLevelObject (name=name@entry=0x7fac0e1341f0, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x55ff908c17e0 <_Py_NoneStruct>, level=0); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #417 0x000055ff9067536b in import_name (level=0x7fac0e3000d0, fromlist=0x55ff908c17e0 <_Py_NoneStruct>, name=0x7fac0e1341f0, f=0x7fac0e329a40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #418 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e329a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #419 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e329a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #420 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128db00, locals=locals@entry=0x7fac0e241bc0, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #421 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fac0e2b80e0, globals=globals@entry=0x7fac0e241bc0, locals=locals@entry=0x7fac0e241bc0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #422 0x000055ff9074512a in run_eval_code_obj (tstate=tstate@entry=0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:86462,optimiz,optimized,86462,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"first 2 questions:; Can try - this was my first psi4 optimization. 3:; ""exception"" related definitively to ""new linear angles"": . ```; Energy change for the previous step:; Projected : -0.0009583389; Actual : -0.0004424593. Performing BFGS update.; Previous computed or guess Hessian on step 1.; Steps to be used in Hessian update: 24 23; Taking RFO optimization step.; Going to follow RFO solution 1.; Using RFO vector 1.; Norm of target step-size 0.47532; Projected energy change by RFO approximation: -0.0041167176; Newly linear bends that need to be incoporated into the internal coordinates: 1 3 11; 2 9 13; The INTCO_EXCEPTion handler:; New linear angles; Dynamic level is 0.; exc.g_really_quit() is 0.; New linear angles; ```. There are 1825 geometries in the output.dat file (it is about 22mb in size).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153#issuecomment-124906121:53,optimiz,optimization,53,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-124906121,3,"['Perform', 'optimiz']","['Performing', 'optimization']"
Performance,"fixed_dihedral is at least allowing the calculation to run, but it appears as soon as the next optimization cycle starts the following error code pops up ""Process finished with exit code -1073741819 (0xC0000005)"". wondering if the scratch data is the cause? ""Scratch directory: C:\Users\vike\AppData\Local\Temp/"". Is there a way to specify the scratch directory?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1485964679:95,optimiz,optimization,95,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1485964679,1,['optimiz'],['optimization']
Performance,for working CXX compiler: /usr/bin/clang++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- The Fortran compiler identification is GNU; -- Check for working Fortran compiler: /usr/local/bin/gfortran; -- Check for working Fortran compiler: /usr/local/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /usr/local/bin/gfortran supports Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performi,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:1735,Perform,Performing,1735,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance,forming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTE,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2941,Perform,Performing,2941,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,forming Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2900,Perform,Performing,2900,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,"four SKIPPED; test_addons.py::test_v2rdm_casscf SKIPPED; test_addons.py::test_grimme_3c SKIPPED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. =============================================== 15 passed, 4 skipped, 1 xpassed in 124.33 seconds ================================================; ```. Running `pytest -v -k 'not test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`, where `/home/joao/current` is a symlink to `miniconda3`, gives me:. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_aaa_profiling.py XPASS; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py SKIPPED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py PASSED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver <- minicon",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:2078,cache,cache,2078,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['cache'],['cache']
Performance,full_hess_every optimization corruption,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1298:16,optimiz,optimization,16,https://psicode.org,https://github.com/psi4/psi4/issues/1298,1,['optimiz'],['optimization']
Performance,"func); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Performing finite difference calculations; 5 displacements needed ... 1; ________________________________________________________________ test_psi4_dfmp2 _________________________________________________________________. def test_psi4_dfmp2():; """"""dfmp2-1""""""; #! Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy; #! using automatic counterpoise correction. Monomers are specified using Cartesian coordinates.; ; Enuc = 235.946620315069168; Ecp = -0.0224119246; ; formic_dim = psi4.geometry(""""""; 0 1; C -1.888896 -0.179692 0.000000; O -1.493280 1.073689 0.000000; O -1.170435 -1.166590 0.000000; H -2.979488 -0.258829 0.000000; H -0.498833 1.107195 0.000000; --; 0 1; C 1.888896 0.179692 0.000000; O 1.493280 -1.073689 0.000000; O 1.170435 1.166590 0.000000; H 2.979488 0.258829 0.000000; H 0.498833 -1.107195 0.000000; units angstrom; no_reorient; """"""); ; psi4.set_options({; 'basis': 'cc-pvdz',; 'df_basis_scf'",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:31852,Perform,Performing,31852,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Perform'],['Performing']
Performance,"function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Nuclear repulsion energy..........................................PASSED; =============================================================== 1 tests deselected ===============================================================; =================================== 10 failed, 4 passed, 4 skipped, 1 deselected, 1 xpassed in 193.31 seconds ====================================; ```. I excluded the `test_gdma` there because it's even weirder, as it crashes without output (`pytest -v -k 'test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`):. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py [joao@computer02 tests]$ ; ```. I would accept if you tell me that I should not be using symlinks, but I would appreciate any feedback possible :). Thanks,; João",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:44143,cache,cachedir,44143,https://psicode.org,https://github.com/psi4/psi4/issues/820,2,['cache'],"['cache', 'cachedir']"
Performance,"g noise in nearly all Psi4 gradients, and I have not taken; the time to follow up on it. It puzzles me, because we never saw stuff; like this in Psi3... those gradients were already symmetric and did not; need a ""symmetrize"" function to be called.... The only part of Psi that; I've checked that seems immune to this problem is Daniel Crawford's CC; gradients, which are perfectly symmetric. On Wed, Jan 30, 2019 at 10:40 AM Jonathon Misiewicz <; notifications@github.com> wrote:. > Discovered while remedying test cases where reference numbers needed to be; > changed due to my upcoming #1143; > <https://github.com/psi4/psi4/issues/1143> fix. DFOCC gradients are not; > symmetrized. If you'd like an example, just look in the reference output; > files; > <https://github.com/psi4/psi4/blob/master/tests/dfomp3-grad2/output.ref#L603-L604>!; > Symmetry of the overlap gradient is broken in the seventh decimal place.; > The other terms have some errors, but much smaller. That the overlap; > gradient is most afflicted is unsurprising, since the overlap integrals are; > contracted against one of the many ""generalized Fock matrices"". This one; > depends on the 1RDM and 2RDM, which are not currently symmetrized.; >; > I'm hoping to include this in 1.3 with the #1143; > <https://github.com/psi4/psi4/issues/1143> fix, since this bug could lead; > to optimizations failing, as we saw with DFMP2 two weeks ago (#1483; > <https://github.com/psi4/psi4/pull/1483>). Because individual terms are; > printed, the individual terms need to be symmetrized, and it may take me; > some time to find where the symmetrize calls need to be placed. If it; > takes too long, I'm fine with delaying to 1.4.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1504>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdjLHuk3Pa0yVJNLncI2ChdXedn-Rks5vIbzcgaJpZM4aad4X>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1504#issuecomment-458993782:1440,optimiz,optimizations,1440,https://psicode.org,https://github.com/psi4/psi4/issues/1504#issuecomment-458993782,1,['optimiz'],['optimizations']
Performance,"g things there unless absolutely necessary for my research. > Unfortunately, open-shell Brueckner or OO coupled cluster does not seem to be a common feature in QC programs, so I am trying to survey which programs have open-shell capable OO methods. Also, a performant OMP2 or OMP2.5 implementation could potentially be useful for us, even if it does not directly solve the lack of an RBCCD(T) implementation. I don't know if your Robosurfer can use this, but depending on your orbital-optimized method, once you have the energy, the gradient is free. All the orbital-optimized methods in Psi have this property. > o_O No, in fact I would have completely missed that! I checked the method table [here](http://www.psicode.org/psi4manual/master/notes_c.html#alternate-implementations) and thought Psi4 cannot do BCCD(T) at all. Perhaps BCCD and BCCD(T) could be added as methods to that docpage?. That page is for methods that _multiple modules_ support, so you can straighten out which module you want given your specific use for a method. That said, is there a place in the manual where we list all the methods we have? I genuinely don't think so. We should add it, if there isn't one. If you want to see all the energy keywords that Psi recognizes, you can find it in the code [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc_table.py#L41). I'd be remiss if I didn't point out that the `dct` module _also_ has some orbital optimized methods. The best one is the default upon entering `energy(dct)`, ODC-12. Use of the others is not recommended for _any_ purpose other than benchmarking. We also have density-fitting for ODC-12. I'll warn you that there is some slight error in the DF gradients, on the order of E-5. That is _also_ on my to-fix list, but given some other papers I need to write, I don't expect to get to that until Winter 2020. The other potential dealbreaker is that method _also_ lacks frozen core support, DF or not. Fixing that is a Spring 2021 target.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863#issuecomment-612018450:1736,optimiz,optimized,1736,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-612018450,1,['optimiz'],['optimized']
Performance,"g. Also fixes Hessian symmetrization (py-side; haven't moved it back c-side). ~This isn't a final product. I only re-hooked-back-up one conventional freq test case. There's plenty of organizational, naming, storage (want both freq and normco in Wfn? and if so, only vibs, not RT? and how ID imag freq if we're float and don't want `-`?) choices yet. What this does have is a substantial py test case with 6 Hessian readouts from Cfour and 6 matching p4 findif-by-grad vibrational analyses to help debug some analytic Hessian errors at wwdc.~. ~And watch out – any change to `findif.h` recompiles most of psi.~. In the end, this added a py-side vib analysis, identified two Hessian bugs, upgraded the two Molecule classes, added Molecule serialization everywhere except initial string input parsing, added alignment and BFS tools, and lots more – see below. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - This PR includes Joe's psi4/psi4#772; - adds an optional history object to the optimize output. This object contains energies, gradients, and coordinates for the molecule at each step of the optimization. Hooked up to MDT.; - ~adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.~; - Adds handling of several one-electron properties to the API and saves them to the wavefunction.; - `qcdb.Molecule`; - Fix some bugs, including C3/D3 symmetry detection w/o verbose and printing for Q-Chem when dummy (or ghost?, don't remember which) present; - Simplify rotational_constants, add rotational_symmetry_number, add axis_representation (probably should double-check this with a spectroscopy book); - Optimize instantiation (really, update_geometry) of large systems by a couple orders of magnitude (now ~1 min for 6000 atoms, w/symmetry); - Hook up Trent Parker's linear-scaling BFS algorithm to qcdb.Molecule or through just np arrays. Has ""seed"" argument so you can forcibly split intr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:1272,optimiz,optimize,1272,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['optimiz'],['optimize']
Performance,"g<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > > > const&), std::shared_ptr<psi::SuperFunctional>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::optional<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, double, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > > > const&, pybind11::name, pybind11::scope, pybind11::sibling, pybind11::arg, pybind11::arg, pybind11::arg_v, char [43]>(std::shared_ptr<psi::SuperFunctional> (*&)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::optional<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, double, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > > > const&), std::shared_ptr<psi::SuperFunctional> (*)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::optional<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, double, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > > > const&), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, pybind11::arg const&, pybind11::arg const&, pybind11::arg_v const&, char const (&) [43])::{lambda(pybind11::detail::function_call&)#1}::operator()(pybind11::detail::function_call&) const (__closure=<optimized out>, call=.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:6306,optimiz,optimized,6306,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"g=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633 ; > > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084 ; > > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0) ; > > at Python/ceval.c:4378 ; > > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720 ; > > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433 ; > > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161 ; > > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084 ; > > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433 ; > > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0) ; > > at Python/ceval.c:771 ; > > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; > > locals=locals@entry=0x7ffff7ed07a0, flags=flags@entry=0x0, arena=arena@entry=0x28ca640) at Python/pythonrun.c:1981 ; > > #35",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:6655,optimiz,optimized,6655,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,1,['optimiz'],['optimized']
Performance,"ge from OMP:; ```; OMP: Error #15: Initializing libiomp5.so, but found libiomp5.so already initialized.; OMP: Hint: This means that multiple copies of the OpenMP runtime have been linked into the program. That is dangerous, since it can degrade performance or cause incorrect results. The best thing to do is to ensure that only a single OpenMP runtime is linked into the process, e.g. by avoiding static linking of the OpenMP runtime in any library. As an unsafe, unsupported, undocumented workaround you can set the environment variable KMP_DUPLICATE_LIB_OK=TRUE to allow the program to continue to execute, but that may cause crashes or silently produce incorrect results. For more information, please see http://www.intel.com/software/products/support/.; Aborted (core dumped); ```; To force running psi4, I follow OMP error message's suggestion (`export KMP_DUPLICATE_LIB_OK=TRUE`), but dft-custom-gga does not work (failed due to the same reason - not converged ). From my several trials, this problem seems not to be related to OMP libraries. Regardless of using either `gomp` or `iomp`, dft-custom-gga test fails under single thread. In other words, whenever multi-thread is used for calculations, it gives good SCF convergence within few iterations, which seems similar with the issue #994 @hokru reported. I thought it might be problem of incompatibilities between GCC compiler and Intel OMP libraries. Like @loriab setting, I changed to use icpc intel compiler (v 18.0.3), instead of gcc (v5.4.0). Re-built '<objdir>' by cmake. Then, opened '<objdir>/psi4-core-prefix/src/psi4-core-build/src/CMakeFiles/core.dir/link.txt' and added '/opt/intel/lib/intel64' (basically intel 64bit libraries) to set library folder path.; Then, Intel Compiler + Intel OMP libraries works even single thread calculation for dft-custom-gga test. Anyway, I am not sure why only dft-custom-gga test failed under single thread, so the way to change compiler could relieve the issue. I thank you for all your help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809:1473,multi-thread,multi-thread,1473,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809,1,['multi-thread'],['multi-thread']
Performance,geometry optimization converges prematurely,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1947:9,optimiz,optimization,9,https://psicode.org,https://github.com/psi4/psi4/issues/1947,1,['optimiz'],['optimization']
Performance,"ger effort fails, it's still a small value add. > I am happy to get the ball rolling, but I do need some direction on which package(s) would be good starting point(s) and maybe in which order. Thanks for the help, @mattwthompson. I think CheMPS2 might be a good one to start with.; * source is LTS; * it's been a psi4 add-on since pre-1.0, so expected to be around; * C++, so some challenge, but not Fortran; * requires LAPACK and probably needs different build config for MKL (all psi4 needs) and OpenBLAS; * does have a python interface, pychemps2, that psi4 packages for completeness but doesn't itself use. the psi4 recipe is set up to produce one C++ library package and n * Py python module packages pinned to the C++ pkg, but at least for gau2grid, I failed to get c-f's system to not produce n * Py C++ library packages, so the multiple-output form of the psi4 recipe may not be suitable for c-f. If after looking at the table, you see lower-hanging fruit that you'd like to try, feel free. I'll note that gcp/dftd3/dftd4 are all sort of the same case. Historically (and what you'll see in the psi4 recipes repo), I took the venerable Fortran tarballs, added CMake and built them with Intel. The Grimme group, notably @awvwgk has been rewriting some of the older code (with tests!) and setting up meson builds of the new packages on c-f. Lately, he's been adding CMake as an alternate buildsys, which is friendlier (in my view) to MKL and Mac/Win. I just tried a `conda create -n d3test python=3.9 simple-dftd3 dftd4-python gcp-correction blas=*=mkl -c conda-forge` on Mac and it solved correctly and didn't bring anything objectionable (openblas or gomp). If that's the case for Linux, too, (to which I don't have access today) I tentatively think psi4 can use those packages directly from c-f for Mac/Linux, and the psi4 recipes can be abandoned. (Caveats: Windows, adapting qcengine for any miniscule changes in interface btwn venerable and rewritten versions, performance from multiarch?)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791:2239,perform,performance,2239,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791,1,['perform'],['performance']
Performance,"globals@entry=0x7fac0e241bc0, locals=locals@entry=0x7fac0e241bc0); at /usr/local/src/conda/python-3.10.14/Python/pythonrun.c:1291; #423 0x000055ff90740523 in run_mod (mod=mod@entry=0x55ff952b55d8, filename=filename@entry=0x7fac0e29b2d0, globals=globals@entry=0x7fac0e241bc0, locals=locals@entry=0x7fac0e241bc0, ; flags=flags@entry=0x7fff1128dce8, arena=arena@entry=0x7fac0e303b90) at /usr/local/src/conda/python-3.10.14/Python/pythonrun.c:1312; #424 0x000055ff905d76f5 in pyrun_file (fp=fp@entry=0x55ff95162c40, filename=filename@entry=0x7fac0e29b2d0, start=start@entry=257, globals=globals@entry=0x7fac0e241bc0, ; locals=locals@entry=0x7fac0e241bc0, closeit=closeit@entry=1, flags=0x7fff1128dce8) at /usr/local/src/conda/python-3.10.14/Python/pythonrun.c:1208; #425 0x000055ff9073a9fe in _PyRun_SimpleFileObject (fp=0x55ff95162c40, filename=0x7fac0e29b2d0, closeit=1, flags=0x7fff1128dce8); at /usr/local/src/conda/python-3.10.14/Python/pythonrun.c:456; #426 0x000055ff9073a594 in _PyRun_AnyFileObject (fp=0x55ff95162c40, filename=filename@entry=0x7fac0e29b2d0, closeit=closeit@entry=1, flags=flags@entry=0x7fff1128dce8); at /usr/local/src/conda/python-3.10.14/Python/pythonrun.c:90; #427 0x000055ff9073778b in pymain_run_file_obj (skip_source_first_line=0, filename=0x7fac0e29b2d0, program_name=0x7fac0e299d10) at /usr/local/src/conda/python-3.10.14/Modules/main.c:357; #428 pymain_run_file (config=0x55ff95142180) at /usr/local/src/conda/python-3.10.14/Modules/main.c:376; #429 pymain_run_python (exitcode=0x7fff1128dce4) at /usr/local/src/conda/python-3.10.14/Modules/main.c:591; #430 Py_RunMain () at /usr/local/src/conda/python-3.10.14/Modules/main.c:670; #431 0x000055ff907081f7 in Py_BytesMain (argc=<optimized out>, argv=<optimized out>) at /usr/local/src/conda/python-3.10.14/Modules/main.c:1090; #432 0x00007fac1bfc1088 in __libc_start_call_main () from /lib64/libc.so.6; #433 0x00007fac1bfc114b in __libc_start_main_impl () from /lib64/libc.so.6; #434 0x000055ff907080f1 in _start (); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:89168,optimiz,optimized,89168,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"gradient('mp2', molecule=mol); > compare_values(norm_nre_start, mol.nuclear_repulsion_energy(), 3, 'start nre'); > compare_values(norm_e_start, get_variable('CURRENT ENERGY'), 5, 'start ene'); > compare_values(norm_rmsg_start, g0.rms(), 4, 'start rms grad'); > compare_matrices(norm_g_start, g0, 3, 'start grad'); > ; > def test_zero_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); > compare_values(e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene'); > compare_matrices(zerograd, g, 3, 'opt ZERO grad'); > ; > def test_odd_start(mol):; > g0 = gradient('mp2', molecule=mol); > compare_values(odd_nre_start, mol.nuclear_repulsion_energy(), 1, 'start nre'); > compare_values(odd_e_start, get_variable('CURRENT ENERGY'), 3, 'start ene'); > compare_values(odd_rmsg_start, g0.rms(), 4, 'start rms grad'); > compare_matrices(odd_g_start, g0, 3, 'start grad'); > ; > def test_badodd_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(odd_nre_opt, mol.nuclear_repulsion_energy(), 2, 'opt nre nogood'); > compare_values(odd_e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene nogood'); > compare_values(odd_rmsg_opt, g.rms(), 4, 'opt grad nogood'); > ; > test_norm_start(normz); > test_zero_grad(normz); > ; > # And behold, the initial gradient matches Q-Chem, the optimization; > ; > # progresses nicely, the RMS Force column goes to zero, and the gradient; > ; > # at the end is zero.; > ; > # start nre.........................................................PASSED; > ; > # start ene.........................................................PASSED; > ; > # start rms grad....................................................PASSED; > ; > # start grad........................................................PASSED; > ; > #Optimizer: Optimization complete!; > ; > # opt nre.........................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-195966638:3884,optimiz,optimize,3884,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638,1,['optimiz'],['optimize']
Performance,"gsf=2, args=0x7fff1128b4a0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #301 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128b530) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #302 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #303 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fac0e0fe470, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #304 PyImport_ImportModuleLevelObject (name=0x7fac0e0fe470, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #305 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #306 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #307 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fac0e0f68c0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #308 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fac0e0f68c0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #309 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0ae880, callargs=0x7fac0e0f68c0, func=0x7fac0e3989a0, trace_info=0x7fff1128b870, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #310 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e32fc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:64521,optimiz,optimized,64521,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"gstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.481692970000 4.002603254130. Running in c1 symmetry. Rotational constants: A = ************ B = 0.95920 C = 0.95920 [cm^-1]; Rotational constants: A = ************ B = 28755.98304 C = 28755.98304 [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 2; Nalpha = 1; Nbeta = 1. ==> Algorithm <==. SCF Algorithm Type is MEM_DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: JUN-CC-PVDZ; Blend: JUN-CC-PVDZ; Number of shells: 6; Number of basis function: 10; Number of Cartesian functions: 10; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (JUN-CC-PVDZ AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry HE line 39 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/def2-qzvpp-jkfit.gbs . Computing basis projection from 3-21G to JUN-CC-PVDZ. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 0 0 0 0; -------------------------------------------------------; Total 10 10 1 1 1 0; -------------------------------------------------------. ==> Integral Setup <==. DFHelper Memory: AOs need 0.000 GiB; user supplied 0.366 GiB. Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Memory [MiB]: 375; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 0.0000; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (JUN-CC-PVDZ AUX); Blend: DEF2-QZVPP-JKFIT; Number of shells: 18; Num",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:6843,Load,Loading,6843,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,1,['Load'],['Loading']
Performance,"gstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; Gh(LI) 0.000000000000 0.000000000000 -1.000000000000 7.016003436600; H 0.000000000000 0.000000000000 1.000000000000 1.007825032230. Running in c1 symmetry. Rotational constants: A = ************ B = 2.10095 C = 2.10095 [cm^-1]; Rotational constants: A = ************ B = 62984.77227 C = 62984.77227 [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is MEM_DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: AUG-CC-PVDZ; Blend: AUG-CC-PVDZ; Number of shells: 14; Number of basis function: 32; Number of Cartesian functions: 34; Spherical Harmonics?: true; Max angular momentum: 2. => Loading Basis Set <=. Name: (AUG-CC-PVDZ AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1 entry LI line 59 file /home/filip/software/psi4-1.4rc/share/psi4/basis/def2-qzvpp-jkfit.gbs ; atoms 2 entry H line 70 file /home/filip/software/psi4-1.4rc/share/psi4/basis/aug-cc-pvdz-jkfit.gbs . Computing basis projection from 3-21G to AUG-CC-PVDZ. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 32 32 0 0 0 0; -------------------------------------------------------; Total 32 32 1 0 0 1; -------------------------------------------------------. ==> Integral Setup <==. DFHelper Memory: AOs need 0.001 GiB; user supplied 0.715 GiB. Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Memory [MiB]: 732; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 0.0000; Fitting Condition: 1E-10. => Auxiliar",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:7175,Load,Loading,7175,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Load'],['Loading']
Performance,"h, so the find-the-iomp5-lib cmake cmd needed to change, too, for sapt.cc to compile.; - [x] wow, fixing Eco (M) GHA was not what I expected. To recap, without psi4 code changing or the binaries of any of our QC dependencies changing, Mac builds (Intel or Silicon) started issuing ""Illegal Instruction"" on Hartree--Fock water. :-( This affected any fresh conda env; for instance updating a ""working"" python 3.12.3 env to 3.12.4 was accompanied by many other package updates and led to a ""illegal instruction"" env upon recompiling psi. I know c-f has been updating how they handle the c stdlib (https://github.com/conda-forge/conda-forge.github.io/issues/2102). New environments apparently hit the new fundamental libraries, and those insert a breakpoint if you try to access out of bounds. So fixed the bounds error. :-). ```; (lldb) settings set -- target.run-args ""stage/bin/psi4"" ""../tests/tu1-h2o-energy/input.dat""; (lldb) run; Process 22217 launched: '/Users/loriab/linux/miniconda-silicon/envs/p4dev312cf_clone/bin/python' (arm64); Process 22217 stopped; * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BREAKPOINT (code=1, subcode=0x11819b7e4); frame #0: 0x000000011819b7e4 core.cpython-312-darwin.so`std::__1::vector<double, std::__1::allocator<double> >::operator[][abi:fe180100](this=0x00000001013e5378 size=27, __n=27) at vector:1393:3; 1390	template <class _Tp, class _Allocator>; 1391	_LIBCPP_CONSTEXPR_SINCE_CXX20 inline _LIBCPP_HIDE_FROM_ABI typename vector<_Tp, _Allocator>::reference; 1392	vector<_Tp, _Allocator>::operator[](size_type __n) _NOEXCEPT {; -> 1393	 _LIBCPP_ASSERT_VALID_ELEMENT_ACCESS(__n < size(), ""vector[] index out of bounds"");; 1394	 return this->__begin_[__n];; 1395	}; 1396	; Target 0: (python) stopped.; (lldb) bt; * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BREAKPOINT (code=1, subcode=0x11819b7e4); * frame #0: 0x000000011819b7e4 core.cpython-312-darwin.so`std::__1::vector<double, std::__1::allocator<double> >::operator[][a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3194:1494,queue,queue,1494,https://psicode.org,https://github.com/psi4/psi4/pull/3194,1,['queue'],['queue']
Performance,"handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132; > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0; > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084; > #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283; > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086; > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); > at Python/ceval.c:3433; > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); > at Python/ceval.c:4378; > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720; > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:4856,optimiz,optimized,4856,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,1,['optimiz'],['optimized']
Performance,"hars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), ; locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), flags=0x7ffdc830ce40); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1034; #52 0x00007faabd6c3bf6 in builtin_exec_impl (module=<optimized out>, ; ```; Looks like the problem occurs within OpenBLAS, but it might be a good idea to double-check the Psi4 code at; ```; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:461; ```; i.e.; https://github.com/psi4/psi4/blob/f9ccef7676ce0549f5d18b82d9e13ae83c99532e/psi4/src/psi4/scfgrad/jk_grad.cc#L461. since raw calls to BLAS routines are easy to mess up... maybe there'd be a way to code these up with the built-in wrappers that always use the correct size arguments?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:22070,optimiz,optimized,22070,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['optimiz'],['optimized']
Performance,"has the advantage that the; CC numbering will work well for CIS, TDDFT, etc. So that we can easily loop over things, I favor any lists of energies or; dipoles as also including the ground state (state 0). So, we can have. CI/CC ROOT 0 ENERGY [or whatever it's called, I forget]; CI/CC ROOT 1 ENERGY; etc. as well as. CI/CC ROOT 0 DIPOLE x; CI/CC ROOT 1 DIPOLE x. Including ROOT 0 in the lists above will remove unnecessary annoying logic; when looping over roots for processing/printing output. For CI use cases,; we will always want to loop over all roots including ROOT 0. For the ground state only, we can also duplicate the ROOT 0 information; into variable names without the ""ROOT n"" designation, which is what people; will want to grab if they just want g.s. info. CI/CC DIPOLE x. (Actually, strictly speaking, the root number that should go here should; probably be FOLLOW_ROOT, which defaults to ROOT1 (now should be ->; ROOT0)... FOLLOW_ROOT is supposed to allow you to optimize an excited state; instead of the ground state in an MCSCF or geometry opt). The CI code has always assumed numbering starts with 1 in the user; interface, so any input options regarding roots will need to have -1 added; (except the total number of roots, obviously). Best,; David. On Fri, Nov 11, 2016 at 10:27 PM, Andy Simmonett notifications@github.com; wrote:. > This is great; I really like that you've addressed the inconsistency; > between CI and CC, which I didn't notice before. The scheme in your last; > message looks good to me. I think that numbering the first excited state 1,; > and the second 2, _etc._ makes the most sense, for obvious reasons. Zero; > basing the excited states would lead to an off-by-one error in the cardinal; > and ordinal notation. LGTM.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/506#issuecomment-260098726, or mute; > the thread; > https://github.com",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-260126337:2059,optimiz,optimize,2059,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260126337,1,['optimiz'],['optimize']
Performance,"hat we should:; - allow the `roos-ano-[dt]z` basis sets into CBS as well; - are the `pcseg-[0-4]` basis sets (double- to six-zeta, I believe) the segmented versions of `pc-X` bases? There might be an argument in letting those in as well, based on the Neese paper. I don't suppose we can handle the generally contracted ANO's in Psi4? They're not included in our basis set library anyway. In terms of coefficients, I probably don't understand exactly what's going on, but:; - for `corl_xtpl_helgaker_2` we use a hard-coded `beta = 3`, which is the physically correct exponent, but for extrapolation between from `[DT]` basis sets the value of `2.46` seems more appropriate. There is currently no way to supply a custom value; - for `scf_xtpl_helgaker_2` (both of these should really be called `scf_xtpl_halkier_[2,3]`): we use the exponential form which seems to perform a lot better than the power form according to Halkier et al. The `alpha=1.63` seems to be a general parameter here, however a zeta-based `alpha` seems to perform better (as it is fitted). The interface to supply `alpha` is in the function, but doesn't seem to be plugged into the CBS machinery; - the ""power form"" for SCF extrapolation is not implemented in Psi4, but the coefficent `alpha` seems to be very system and basis and zeta dependent, as shown by both Halkier et al. and Neese and Valeev. @loriab My suggestions for myself for this PR, in addition to allowing the two basis set classes above, would be:; - [ ] add power form for SCF extrapolation (eg. `scf_xtpl_power_2`) with user-supplied `alpha`, a sane default is `alpha=3.54` from Halkier et al.; - [ ] add ability to supply custom `beta` for `corl_xtpl_helgaker_2` for better performance with [DT]'s; - [ ] wire up `scf_xtpl_helgaker_2` parameter `alpha` and the other two from above with the rest of the CBS machinery, perhaps using `scf_alpha` and `corl_beta` parameters to `cbs()`. The `cc-pVXZ-PP` issue can certainly wait. The user can combine their own basis ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/963#issuecomment-381392778:1093,perform,perform,1093,https://psicode.org,https://github.com/psi4/psi4/pull/963#issuecomment-381392778,1,['perform'],['perform']
Performance,"hat your background is, so I'm going to write this explanation at a level accessible for a first-year graduate student, though it will still be dense. Many matrices in electronic structure theory are indexed by two orbitals. Each orbital will change in a different way under symmetry operations of the molecule (like rotation, reflection), and we call each classification an irreducible representation (irrep). Now, our matrices further have the property that A_mn = 0 unless the symmetries of m and n are somehow related. Our matrix then only needs to store ""blocks"" where for all orbitals m of irreducible representation h, the only non-zero elements of A are A_mn where n is an orbital of irreducible representation i. Because we use this block structure, it isn't enough to make sure that the total dimensions of the matrix agree (what your code does). We need the dimensions of each symmetry block to agree on the three points mentioned in the original issue. This validation should be performed for each irreducible representation. For reference, the code that Susi linked does the following:; ```; for each irreducible representation of the first index of A, Ha:; 	Hb is the irreducible representation of the first index of the B block that can multiply with the A block; Hc is the irreducible representation of the first index of the new matrix (if we're multiplying by A, this is just Ha, otherwise this is the irreducible representation of the second index for the block with first index Ha); 	m is the number of orbitals with the irreducible representation for the first index in this block of the new matrix; 	n is the number of orbitals with the irreducible representation for the second index in this block of the new matrix; 	k is the number of orbitals with the irreducible representation for the second index in this block of A, which is also the number of orbitals with the irreducible representation for the first index in this block of B; 	lda is the number of columns of matrix A;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2729#issuecomment-1260925688:1005,perform,performed,1005,https://psicode.org,https://github.com/psi4/psi4/pull/2729#issuecomment-1260925688,1,['perform'],['performed']
Performance,"he PSI_SCRATCH envvar section. Can probably steal some text/code from conda.rst.; - [x] In docs, show an example of a threaded pbs job file. Here's one to work from. See @loriab about any parts that are obscure. ```; #!/bin/tcsh; ## this file auto-generated by submit4 ...; #PBS -j oe ; #PBS -l walltime=80:00:00:00; #PBS -l pmem=2120mb; #PBS -N SSI-084TYR-095LEU-1-dimer; #PBS -V. setenv OMP_NUM_THREADS 4; setenv MKL_NUM_THREADS 4; cd $PBS_O_WORKDIR; setenv myscratch /scratch/loriab/psi4.$PBS_JOBID. cat $PBS_NODEFILE; foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end; unsetenv PSI4DATADIR; unsetenv PSIDATADIR; if ! ( $?PYTHONPATH ) setenv PYTHONPATH """"; setenv PYTHONPATH /theoryfs2/ds/cdsgroup/psi4aux:$PYTHONPATH; setenv PSI_SCRATCH $myscratch; setenv PATH /theoryfs2/ds/cdsgroup/miniconda/bin:${PATH}; setenv PATH /theoryfs2/ds/cdsgroup/scripts/bin:${PATH}; setenv PATH /theoryfs2/ds/loriab/chem/psi4_trials/c4/c4v2/cfour_v2.00beta/bin:${PATH}; setenv PATH /theoryfs2/ds/cdsgroup/psi4-compile/mrcc:${PATH}; setenv PSIDATADIR /theoryfs2/ds/cdsgroup/psi4-install/psi3930/share/psi4; source /theoryfs2/common/software/intel2016/bin/compilervars.csh intel64; /theoryfs2/ds/cdsgroup/scripts/bin/runpsi.py -i SSI-084TYR-095LEU-1-dimer.in -o SSI-084TYR-095LEU-1-dimer.out. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end; ```; - [x] On wiki, create FAQ on https://github.com/psi4/psi4/wiki/8_FAQ_Contents about how do i set scratch, how do i use psi4 in a pbs queue, etc. Questions go in the 8_FAQ_Contents page, answers can link back to the sphinx docs themselves, then index the questions in the https://github.com/psi4/psi4/wiki/0_FAQ.; - [x] Edit the link on page https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/tutorial.rst in sentence ""For your convenience"" to point to something you created.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/109:2195,queue,queue,2195,https://psicode.org,https://github.com/psi4/psi4/issues/109,1,['queue'],['queue']
Performance,"herical Points = 302; Total Points = 1908346; Total Blocks = 13882; Max Points = 256; Max Functions = 485; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (6-31G AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-4, 9-12, 21-24, 33-34 entry H line 51 file PATH\envs\psi4\lib\share\psi4\basis\cc-pvdz-jkfit.gbs ; atoms 5-8, 13-20, 25-32, 35-36 entry C line 121 file PATH\envs\psi4\lib\share\psi4\basis\cc-pvdz-jkfit.gbs ; atoms 37-38, 41-42, 45-46, 49-50, 53-54, 57-58, 61-62, 65-66, 69-70, 73-74, 77-78, 81-82, 85-86, 89-90, 93-94, 97-98 entry CL line 667 file PATH\envs\psi4\lib\share\psi4\basis\cc-pvdz-jkfit.gbs ; atoms 39-40, 43-44, 47-48, 51-52, 55-56, 59-60, 63-64, 67-68, 71-72, 75-76, 79-80, 83-84, 87-88, 91-92, 95-96, 99-100 entry NA line 498 file PATH\envs\psi4\lib\share\psi4\basis\def2-universal-jkfit.gbs . ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 4; Integrals threads: 4; Memory [MiB]: 16093; Algorithm: Disk; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (6-31G AUX); Blend: CC-PVDZ-JKFIT + DEF2-UNIVERSAL-JKFIT; Number of shells: 2894; Number of basis functions: 10676; Number of Cartesian functions: 10676; Spherical Harmonics?: false; Max angular momentum: 4. Cached 10.0% of DFT collocation blocks in 1.635 [GiB]. Minimum eigenvalue in the overlap matrix is 6.3023278892E-05.; Reciprocal condition number of the overlap matrix is 6.1027737192E-06.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo ; -------------------------; A 1058 1058 ; -------------------------; Total 1058 1058; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -20768.03616751698792 -2.07680e+04 0.00000e+00 ; @DF-RKS iter 1: -20765.62327420",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2709:19797,Cache,Cache,19797,https://psicode.org,https://github.com/psi4/psi4/issues/2709,1,['Cache'],['Cache']
Performance,"hich can be installed;; └─ python 3.9.7 would require; └─ openssl >=1.1.1l,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.10 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.10']. pkgs/main/linux-64 Using cache; pkgs/main/noarch Using cache; pkgs/r/linux-64 Using cache; pkgs/r/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change; Could not solve for environment specs; The following packages are incompatible; └─ psi4 is installable with the potential options; ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ └─ pychemps2 >=1.7.1 with the potential options; │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ └─ blas 1.0 mkl, which can be installed;; │ ├─ pychemps2 1.7.1 would require; │ │ └─ chemps2 1.7.1 , which requires; │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.8.3 would require; │ └─ chemps2 1.8.3 , which requires; │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ └─ python 2.7* with the potential options; │ ├─ python [2.7.13|2.7.14] would require; │ │ └─ openssl 1.0.* , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2n,<1.0.3a , which can be installed;; │",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:7142,cache,cache,7142,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966,4,['cache'],['cache']
Performance,"ho2tau2=0x0, v4rhosigma3=0x0, v4rhosigma2lapl=0x0, v4rhosigma2tau=0x0, v4rhosigmalapl2=0x0, v4rhosigmalapltau=0x0, ; > v4rhosigmatau2=0x0, v4rholapl3=0x0, v4rholapl2tau=0x0, v4rholapltau2=0x0, v4rhotau3=0x0, v4sigma4=0x0, v4sigma3lapl=0x0, v4sigma3tau=0x0, v4sigma2lapl2=0x0, v4sigma2lapltau=0x0, v4sigma2tau2=0x0, v4sigmalapl3=0x0, v4sigmalapl2tau=0x0, v4sigmalapltau2=0x0, v4sigmatau3=0x0, v4lapl4=0x0, v4lapl3tau=0x0, v4lapl2tau2=0x0, v4lapltau3=0x0, ; > v4tau4=0x0) at /psi/gits/libxc/src/mix_func.c:119; > #5 0x00007fffecf71998 in xc_gga (func=0x555556ca7500, np=255, rho=0x555556e575c0, sigma=0x555556ccda80, zk=0x555556771300, vrho=0x55555e164460, vsigma=0x555556c12720, v2rho2=0x0, v2rhosigma=0x0, v2sigma2=0x0, v3rho3=0x0, v3rho2sigma=0x0, v3rhosigma2=0x0, v3sigma3=0x0, v4rho4=0x0, v4rho3sigma=0x0, v4rho2sigma2=0x0, v4rhosigma3=0x0, v4sigma4=0x0); > at /psi/gits/libxc/src/gga.c:126; > #6 0x00007fffecf71b16 in xc_gga_exc_vxc (p=<optimized out>, np=<optimized out>, rho=<optimized out>, sigma=<optimized out>, zk=<optimized out>, vrho=<optimized out>, vsigma=0x555556c12720) at /psi/gits/libxc/src/gga.c:160; > #7 0x00007fffef1a9541 in psi::LibXCFunctional::compute_functional (this=0x896d, in=..., out=..., npoints=-1, deriv=1) at /psi/gits/hrw-demo/psi4/src/psi4/libfunctional/LibXCfunctional.cc:549; > #8 0x00007fffef1b899f in psi::SuperFunctional::compute_functional (this=0x896d, vals=..., npoints=6) at /psi/gits/hrw-demo/psi4/src/psi4/libfunctional/superfunctional.cc:633; > #9 0x00007fffef1737ba in psi::RV::compute_V (this=0x896d, ret=<error reading variable: Cannot access memory at address 0x896d>) at /psi/gits/hrw-demo/psi4/src/psi4/libfock/v.cc:1350; > #10 0x00007fffef7752c3 in psi::scf::RHF::form_V (this=0x896d) at /psi/gits/hrw-demo/psi4/src/psi4/libscf_solver/rhf.cc:180; > #11 0x00007fffef77451b in psi::scf::RHF::form_G (this=0x896d) at /psi/gits/hrw-demo/psi4/src/psi4/libscf_solver/rhf.cc:185; > ```; > ; > Please let me know when is a good point to try Psi4+Libxc 5.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754743798:2651,optimiz,optimized,2651,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754743798,6,['optimiz'],['optimized']
Performance,"hon-3.10.14/Include/internal/pycore_ceval.h:46; #357 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; --Type <RET> for more, q to quit, c to continue without paging--; #358 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #359 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #360 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #361 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c7f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #362 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e1d18a0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #363 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e1d18a0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #364 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #365 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #366 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128c920, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/lo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:75437,optimiz,optimized,75437,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"hon-3.10.14/Include/internal/pycore_ceval.h:46; #382 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #383 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #384 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510, tstate=0x55ff9515e050); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #385 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #386 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d0b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #387 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16dc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #388 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16dc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #389 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #390 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #391 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630, tstate=0x55ff9515e05",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:80360,optimiz,optimized,80360,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"hon-3.10.14/Include/internal/pycore_ceval.h:46; --Type <RET> for more, q to quit, c to continue without paging--; #277 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #278 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #279 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #280 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #281 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b010, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #282 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4289b60, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #283 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4289b60, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #284 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #285 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #286 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0, tstate=0x55ff9515e05",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:59908,optimiz,optimized,59908,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"hon3.6/site-packages/snsmp2/snsmp2.py:81: in run_sns_mp2; m1mhigh = c.compute('m1', 'm', 'high', mp2=True, mp2_dm=True); miniconda3/envs/psi/lib/python3.6/site-packages/snsmp2/wavefunctioncache.py:386: in compute; self._init_ns(calc); miniconda3/envs/psi/lib/python3.6/site-packages/snsmp2/wavefunctioncache.py:143: in _init_ns; return self._init_upcast_C(oldcalc=candidate, calc=calc); miniconda3/envs/psi/lib/python3.6/site-packages/snsmp2/wavefunctioncache.py:172: in _init_upcast_C; new_wfn = self._basis_projection(oldcalc, calc); miniconda3/envs/psi/lib/python3.6/site-packages/snsmp2/wavefunctioncache.py:187: in _basis_projection; old_wfn = core.Wavefunction.from_file(read_filename); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/p4util/python_helpers.py:156: in _core_wavefunction_from_file; wfn_data = np.load(wfn_data).item(); miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/npyio.py:447: in load; pickle_kwargs=pickle_kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. fp = <_io.BufferedReader name='pytest_output.m1-m-low.14086.180.npy'>, allow_pickle = False; pickle_kwargs = {'encoding': 'ASCII', 'fix_imports': True}. def read_array(fp, allow_pickle=False, pickle_kwargs=None):; """"""; Read an array from an NPY file. Parameters; ----------; fp : file_like object; If this is not a real file object, then this may take extra memory; and time.; allow_pickle : bool, optional; Whether to allow writing pickled data. Default: False. .. versionchanged:: 1.16.3; Made default False in response to CVE-2019-6446. pickle_kwargs : dict; Additional keyword arguments to pass to pickle.load. These are only; useful when loading object arrays saved on Python 2 when using; Python 3. Returns; -------; array : ndarray; The array from the data on disk. Raises; ------; ValueError; If the data is invalid, or allow_pickle=False and the file contains; an object array. """"""; version = read_magic(fp)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611:1710,load,load,1710,https://psicode.org,https://github.com/psi4/psi4/issues/1611,1,['load'],['load']
Performance,"hooked-back-up one conventional freq test case. There's plenty of organizational, naming, storage (want both freq and normco in Wfn? and if so, only vibs, not RT? and how ID imag freq if we're float and don't want `-`?) choices yet. What this does have is a substantial py test case with 6 Hessian readouts from Cfour and 6 matching p4 findif-by-grad vibrational analyses to help debug some analytic Hessian errors at wwdc.~. ~And watch out – any change to `findif.h` recompiles most of psi.~. In the end, this added a py-side vib analysis, identified two Hessian bugs, upgraded the two Molecule classes, added Molecule serialization everywhere except initial string input parsing, added alignment and BFS tools, and lots more – see below. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - This PR includes Joe's psi4/psi4#772; - adds an optional history object to the optimize output. This object contains energies, gradients, and coordinates for the molecule at each step of the optimization. Hooked up to MDT.; - ~adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.~; - Adds handling of several one-electron properties to the API and saves them to the wavefunction.; - `qcdb.Molecule`; - Fix some bugs, including C3/D3 symmetry detection w/o verbose and printing for Q-Chem when dummy (or ghost?, don't remember which) present; - Simplify rotational_constants, add rotational_symmetry_number, add axis_representation (probably should double-check this with a spectroscopy book); - Optimize instantiation (really, update_geometry) of large systems by a couple orders of magnitude (now ~1 min for 6000 atoms, w/symmetry); - Hook up Trent Parker's linear-scaling BFS algorithm to qcdb.Molecule or through just np arrays. Has ""seed"" argument so you can forcibly split intramolecularly or close-bound intermol.; - Selected steps (for performance) are now in numpy, as a result, `geometry(np",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:1384,optimiz,optimization,1384,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['optimiz'],['optimization']
Performance,"http://sirius.chem.vt.edu/psi4manual/latest/basissets_byelement.html#apdx-basiselement. my molecule complex have 'I' atom, ; the complex was optimized by g09 at MP2/AUG-CC-PVDZ,and the 'I' (AUG-CC-PVDZ-PP),. NOW I want to decompose the interact energy by the psi4 software,but it didn't have basis set support the 'I' element. can you give me some suggestions?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/76:141,optimiz,optimized,141,https://psicode.org,https://github.com/psi4/psi4/issues/76,1,['optimiz'],['optimized']
Performance,"i was trying to run this .py file https://drive.google.com/file/d/1ANj_pWq6d2fDPu9p-SiASfDNyfhjBsBc/view?usp=sharing to optimize a structure, but in the .out file it said:; PsiException: Could not converge geometry optimization in 50 iterations. this is the .out file: https://drive.google.com/file/d/1bCCWFvOhAA1z6tezxysS-ktDSD0_88UC/view?usp=sharing; how can i solve this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2604:120,optimiz,optimize,120,https://psicode.org,https://github.com/psi4/psi4/issues/2604,2,['optimiz'],"['optimization', 'optimize']"
Performance,"i4/driver/procrouting/proc.py:1289: in scf_helper; old_wfn = core.Wavefunction.from_file(read_filename); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/p4util/python_helpers.py:156: in _core_wavefunction_from_file; wfn_data = np.load(wfn_data).item(); miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/npyio.py:447: in load; pickle_kwargs=pickle_kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. fp = <_io.BufferedReader name='/tmp/pytest_output.default.14086.180.npy'>, allow_pickle = False; pickle_kwargs = {'encoding': 'ASCII', 'fix_imports': True}. def read_array(fp, allow_pickle=False, pickle_kwargs=None):; """"""; Read an array from an NPY file. Parameters; ----------; fp : file_like object; If this is not a real file object, then this may take extra memory; and time.; allow_pickle : bool, optional; Whether to allow writing pickled data. Default: False. .. versionchanged:: 1.16.3; Made default False in response to CVE-2019-6446. pickle_kwargs : dict; Additional keyword arguments to pass to pickle.load. These are only; useful when loading object arrays saved on Python 2 when using; Python 3. Returns; -------; array : ndarray; The array from the data on disk. Raises; ------; ValueError; If the data is invalid, or allow_pickle=False and the file contains; an object array. """"""; version = read_magic(fp); _check_version(version); shape, fortran_order, dtype = _read_array_header(fp, version); if len(shape) == 0:; count = 1; else:; count = numpy.multiply.reduce(shape, dtype=numpy.int64). # Now read the actual data.; if dtype.hasobject:; # The array contained Python objects. We need to unpickle the data.; if not allow_pickle:; > raise ValueError(""Object arrays cannot be loaded when ""; ""allow_pickle=False""); E ValueError: Object arrays cannot be loaded when allow_pickle=False. miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/format.py:692: ValueError; ```. Just a report.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611:5876,load,load,5876,https://psicode.org,https://github.com/psi4/psi4/issues/1611,4,['load'],"['load', 'loaded', 'loading']"
Performance,"i::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>); > at /usr/include/boost/python/detail/invoke.hpp:75; > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223; > #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (_)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38; > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0; > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); > from /usr/lib/libboost_python3.so.1.54.0; > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); > at /usr/include/boost/python/detail/translate_exception.hpp:48; > #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&> > (f=..., a=<syntheti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:2404,optimiz,optimized,2404,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,3,['optimiz'],['optimized']
Performance,"ia the `ElectrostaticInt` class). I've attached a plugin that computes a large number of these OEI integrals with both classes, modeled after a naive semi-numerical exchange code. Here's the pseudocode of this plugin:. ```; # pragma omp parallel for; for grid_point_block in quadrature (B); ; thread = omp_get_thread(); ; for bra in basis (u); for ket in basis (v); for grid point in B (g); ; // integral_computer[thread] is either an ElectrostaticInt or MultipolePotentialInt; integral_computer[thread].compute(u, v, g); ```. Note that the above pseudocode is parallelized over blocks of ~64 grid points. This pseudocode follows the description of the original chain of spheres (COSX) semi-numerical exchange algorithm described [here](https://www.sciencedirect.com/science/article/pii/S0301010408005089). ### Results. Below are timings of the naive semi-numerical integral loop using both the old psi4 integrals and the new libint2 integrals. This benchmark was performed on a butane molecule in a cc-pVDZ basis set and a standard 302/75 quadrature grid. Wall times are the minimum of five trials. | Cores | Old Integral<br/>Wall Time (s) | Old Integral<br/>Parallel Speedup | New Integral<br/>Wall Time (s) | New Integral<br/>Parallel Speedup |; | :--- | :--- | :--- | :--- | :--- |; | 1 | 191.7 | --- | 105.3 | --- |; | 2 | 96.1 | x2.00 | 72.6 | x1.45 |; | 4 | 48.4 | x3.96 | 71.5 | x1.47 |; | 8 | 24.3 | x7.88 | 74.5 | x1.41 |; | 18 | 11.5 | x16.62 | 72.8 | x1.45 |. Note that with one core, the new libint2 integrals (105.3s) are faster than the old OS integrals (191.7s) by almost a factor of two, which is to be expected. Part of the reason for deprecating the old, hand-coded integral code for the libint2 interface is that libint2 is a specialized library and therefore should have more efficient routines. The integral routine using the old OS code scales almost perfectly all the way through 18 cores. This is also to be expected: the work being done in the integral routine is embarrassi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2491:1921,perform,performed,1921,https://psicode.org,https://github.com/psi4/psi4/issues/2491,1,['perform'],['performed']
Performance,"ibraries_2016.0.109/linux/bin/intel64/icpc; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2016.0.109/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2016.0.109/linux/bin/intel64/icc; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2016.0.109/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl; -- Found BLAS: MKL (-Wl,--start-group;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_intel_thread.so;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_core.so;/usr/lib/x86_64-linux-gnu/libpthread.so;/usr/lib/x86_64-linux-gnu/libm.so;-openmp;-Wl,--end-grou",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262:865,Perform,Performing,865,https://psicode.org,https://github.com/psi4/psi4/issues/262,8,['Perform'],['Performing']
Performance,"ic.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ```; > ; > You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py). This is super helpful, thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:3205,optimiz,optimizer,3205,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275,16,['optimiz'],"['optimize', 'optimizer']"
Performance,"iconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/p4util/python_helpers.py:156: in _core_wavefunction_from_file; wfn_data = np.load(wfn_data).item(); miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/npyio.py:447: in load; pickle_kwargs=pickle_kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. fp = <_io.BufferedReader name='pytest_output.m1-m-low.14086.180.npy'>, allow_pickle = False; pickle_kwargs = {'encoding': 'ASCII', 'fix_imports': True}. def read_array(fp, allow_pickle=False, pickle_kwargs=None):; """"""; Read an array from an NPY file. Parameters; ----------; fp : file_like object; If this is not a real file object, then this may take extra memory; and time.; allow_pickle : bool, optional; Whether to allow writing pickled data. Default: False. .. versionchanged:: 1.16.3; Made default False in response to CVE-2019-6446. pickle_kwargs : dict; Additional keyword arguments to pass to pickle.load. These are only; useful when loading object arrays saved on Python 2 when using; Python 3. Returns; -------; array : ndarray; The array from the data on disk. Raises; ------; ValueError; If the data is invalid, or allow_pickle=False and the file contains; an object array. """"""; version = read_magic(fp); _check_version(version); shape, fortran_order, dtype = _read_array_header(fp, version); if len(shape) == 0:; count = 1; else:; count = numpy.multiply.reduce(shape, dtype=numpy.int64). # Now read the actual data.; if dtype.hasobject:; # The array contained Python objects. We need to unpickle the data.; if not allow_pickle:; > raise ValueError(""Object arrays cannot be loaded when ""; ""allow_pickle=False""); E ValueError: Object arrays cannot be loaded when allow_pickle=False. miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/format.py:692: ValueError; _____________________________________________________ test_psi4_cc _____________________________________________________. @pytest.ma",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611:2476,load,load,2476,https://psicode.org,https://github.com/psi4/psi4/issues/1611,1,['load'],['load']
Performance,ict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2820,Perform,Performing,2820,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,"ies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0) ; > > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99 ; > > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307 ; > > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171 ; > > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429 ; > > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>) ; > > at /usr/include/boost/python/detail/invoke.hpp:75 ; > > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223 ; > > #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (_)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38 ; > > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0 ; > > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const () ; > > from /usr/lib/libboost_python3.so.1.54.0 ; > > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...) ; > > at /usr/include/boost/python/detail/translate_exception.hpp:48 ; > > #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:2843,optimiz,optimized,2843,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,3,['optimiz'],['optimized']
Performance,"il.set_options`. Returns; -------; Dict[str, Any]; Dictionary where keys are keyword names, either plain for those to be; set globally or mangled ""module__keyword"" for those to be set locally,; and values are keyword values. """"""; flat_options = {}; has_changed_snapshot = {module: core.options_to_python(module) for module in _modules}. for opt in core.get_global_option_list():; handled_locally = False; ghoc = core.has_global_option_changed(opt); opt_snapshot = {k: v[opt] for k, v in has_changed_snapshot.items() if opt in v}; for module, (lhoc, ohoc) in opt_snapshot.items():; if ohoc:; if lhoc:; key = module + '__' + opt; val = core.get_local_option(module, opt); else:; key = opt; val = core.get_global_option(opt); handled_locally = True; flat_options[key] = val. if ghoc and not handled_locally:; # some options are globals section (not level) so not in any module; flat_options[opt] = core.get_global_option(opt). # The normal machinery to forward plugin options to Psi goes through 'plugin_load'.; # Forte doesn't use this. Pending a larger options rewrite (move to a Python dictionary?),; # we need the following dirty hack. try:; import forte # Needed for Forte options to run.; except ImportError:; pass; else:; # Initialization tasks with Psi options; psi_options = core.get_options(); current_module = psi_options.get_current_module(); # Get the current Forte options from Forte; forte_options = forte.ForteOptions(); forte.register_forte_options(forte_options); psi_options.set_current_module(""FORTE""); try:; forte_options.get_options_from_psi4(psi_options); except RuntimeError:; # If we're in this case, Forte hasn't pushed its options to Psi.; pass; else:; # Load changed Forte options into `flat_options`; for name, metadata in forte_options.dict().items():; if metadata[""value""] != metadata[""default_value""]:; flat_options[f""forte__{name.lower()}""] = metadata[""value""]; finally:; # Restore current module; psi_options.set_current_module(current_module); return flat_options; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3010#issuecomment-1631488686:2150,Load,Load,2150,https://psicode.org,https://github.com/psi4/psi4/issues/3010#issuecomment-1631488686,1,['Load'],['Load']
Performance,"ill a problem with documentation (http://www.psicode.org/psi4manual/1.2/molden.html):. This is a fully working example:. ```; molecule {; 0 1; O 1.01646 0.05097 0.09714; H 1.98435 0.06069 0.05173; H 0.73761 0.24513 -0.81034; }; set basis cc-pVTZ. E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); nmopi = wfn.nmopi(); Da_so = wfn.Da(); Ca_inv = core.Matrix(""CA inv"", nmopi, nmopi); Ca_inv.copy(wfn.Ca()); Ca_inv.general_invert(); Da_mo = Matrix.triplet(Ca_inv, Da_so, Ca_inv, False, False, True); # Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False) # line from documentation; molden(wfn, 'ccsd_no.molden', density_a=Da_mo); ```. Loading this into Molden gives normals results:. ```. COORDINATES; used for orbitals/density. X Y Z. 1 O -0.103043 0.072862 0.000000; 2 H -0.015287 -1.756185 0.000000; 3 H 1.650657 0.599812 0.000000; ; Mulliken Charges; ================; ; O -0.4661; H 0.2332; H 0.2332; ```. When following the documentation, I got:. ```; COORDINATES; used for orbitals/density. X Y Z. 1 O -0.103043 0.072862 0.000000; 2 H -0.015287 -1.756185 0.000000; 3 H 1.650657 0.599812 0.000000; ; Mulliken Charges; ================; ; O -94.4305; H -12.0740; H -12.0736; ; Sum of Mulliken Charges: ********; ```. (FYI: my actual intention is not to visualize in Molden, but this is just an easy check.). Besides the documentation, there are some additional minor issues. I'll make a list here:. - [ ] Fix docs.; - [ ] When running the input for a second time, the new output is appended to the existing molden file, which is never useful.; - [ ] The current approach is not the most efficient, nor convenient: the user first has to compute a pseudo-inverse and then in the `molden` function a matrix is diagonalized. This can be done in one step by performing a generalized eigenvalue decomposition. This could happen inside the `molden` function, but then the API would need to change, because that would require the density matrix in the AO basis as input.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1485:1941,perform,performing,1941,https://psicode.org,https://github.com/psi4/psi4/issues/1485,1,['perform'],['performing']
Performance,"im/anaconda3/include"" ../configure --enable-eri=2 --enable-eri3=2 --enable-eri2=2 --with-eri-max-am=5 --with-eri2-max-am=6 --with-eri3-max-am=6 --with-shgauss-ordering=gaussian --prefix=/u/andysim/programming/libint/installdir3 --enable-eri2-pure-sh --enable-eri3-pure-sh`. 3. `make install` (this will take a *very* long time). 4. `make export` - this will generate a tarball that can be used to build a version for Psi4 called `libint-2.7.0-beta.1.tgz`. 5. Untar that tarball somewhere else and modify the file `include/libint2_params.h` to read; ```; #ifndef LIBINT2_MAX_AM_default; # define LIBINT2_MAX_AM_default 4; #endif. #ifndef LIBINT2_MAX_AM_default1; # define LIBINT2_MAX_AM_default1 LIBINT2_MAX_AM_default; #endif. #ifndef LIBINT2_MAX_AM_default2; # define LIBINT2_MAX_AM_default2 LIBINT2_MAX_AM_default; #endif; ```; from line 81 onwards. 6. Make a `build` subdir and from there `cmake .. -DCMAKE_INSTALL_PREFIX=/u/andysim/programming/libint/installdir_2.6 -DLIBINT2_SHGAUSS_ORDERING=gaussian -DCMAKE_CXX_FLAGS=""-fPIC""` The fPIC flag is needed, or you'll get some nasty link errors. 7. Now you can build Psi4. Yay! `cmake .. -DCMAKE_BUILD_TYPE=Debug -DLibint2_DIR=/u/andysim/programming/libint/installdir_2.6/lib/cmake/libint2 -DLibint_DIR=/u/andysim/programming/libint1/installdir/share/cmake/Libint -DCMAKE_CXX_FLAGS=""-g -O0 -gxx-name=/v/apps/gcc/5.4.0/bin/g++ $CXXFLAGS""` The libint1 should be the hacked version with the `Libint_t` changed to `Libint1_t`. Also I strongly recommend adding the `-O0` flag to the compiler flags, because our CMake debug build doesn't do this (we should change that) and the code takes a _very_ long time to compile with optimization. A lot of this will be streamlined in the not so distant future, and much of the complication will be eased when we nuke libint1. Until then, the above command should be sufficient to get you up and running with a development build. Please try it out - I'd love to have some help with getting the derivatives working :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-537945417:2200,optimiz,optimization,2200,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-537945417,1,['optimiz'],['optimization']
Performance,"imized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38 ; > > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0 ; > > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const () ; > > from /usr/lib/libboost_python3.so.1.54.0 ; > > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...) ; > > at /usr/include/boost/python/detail/translate_exception.hpp:48 ; > > #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&> > (f=..., a=<synthetic pointer>, this=<optimized out>) at /usr/include/boost/bind/bind.hpp:382 ; > > #15 operator()<boost::python::detail::exception_handler, boost::function0<void> > (a2=..., a1=..., this=<optimized out>) ; > > at /usr/include/boost/bind/bind_template.hpp:102 ; > > #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132 ; > > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0 ; > > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=a",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:3838,optimiz,optimized,3838,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,1,['optimiz'],['optimized']
Performance,"imized out>, args_in=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), ; kwargs_in=0x0) at /usr/include/pybind11/pybind11.h:624; #21 0x00007faabd65df8a in cfunction_call_varargs (func=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, ; args=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), kwargs=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:742; #22 0x00007faabd64e681 in _PyObject_MakeTpCall (callable=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, args=<optimized out>, nargs=<optimized out>, keywords=0x0); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:159; #23 0x00007faabd64b53c in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:125; #24 _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:115; #25 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #26 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3469; #27 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; --Type <RET> for more, q to quit, c to continue without paging-- f=Frame 0x5589d8c417d0, for file /home/work/psi4/install.susi/lib/psi4/driver/procrouting/proc.py, line 2354, in run_scf_gradient (name='hf', kwargs={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, dft_func=False, optstash=<OptionsState(data={('SCF_TYPE',): <OptionState(option='SCF_TYPE', module=None, value_global='PK', haschanged_global=False, value_local=None, haschanged_local=None, value_used=None,",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:6686,optimiz,optimized,6686,https://psicode.org,https://github.com/psi4/psi4/issues/2010,2,['optimiz'],['optimized']
Performance,"import_find_and_load (abs_name=0x7fac0e0fe470, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #304 PyImport_ImportModuleLevelObject (name=0x7fac0e0fe470, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #305 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #306 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #307 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fac0e0f68c0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #308 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fac0e0f68c0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #309 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0ae880, callargs=0x7fac0e0f68c0, func=0x7fac0e3989a0, trace_info=0x7fff1128b870, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #310 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e32fc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #311 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e32fc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #312 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #313 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:65093,optimiz,optimized,65093,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Checking whether CXX compiler has -isysroot; -- Checking whether CXX compiler has -isysroot - yes; -- Checking whether CXX compiler supports OSX deployment target flag; -- Checking whether CXX compiler supports OSX deployment target flag - yes; -- Check for working CXX compiler: /usr/local/bin/g++-8; -- Check for working CXX compiler: /usr/local/bin/g++-8 -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option ENABLE_MSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 14; -- Setti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:4146,Perform,Performing,4146,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308,1,['Perform'],['Performing']
Performance,info - done; -- The Fortran compiler identification is GNU; -- Check for working Fortran compiler: /usr/local/bin/gfortran; -- Check for working Fortran compiler: /usr/local/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /usr/local/bin/gfortran supports Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:1854,Perform,Performing,1854,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance,ing module mdi. Install package if necessary to enable tests.) [ 76%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py::test_spacious_option PASSED [ 78%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 80%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 83%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 85%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 87%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [ 89%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py::test_psi4_basic PASSED [ 90%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py::test_psi4_cc XFAIL (no AtomicInput optimization) [ 92%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py::test_psi4_cas PASSED [ 94%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py::test_psi4_dfmp2 PASSED [ 96%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py::test_psi4_sapt PASSED [ 98%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py::test_psi4_scfproperty PASSED [100%]. ============================================================================ warnings summary =============================================================================; psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:599: 3 warnings; psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:701: 3 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py: 2700 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py: 1773 warnings; psi4conda/envs/psi4env/lib/site-packages/p,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:8158,optimiz,optimization,8158,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['optimiz'],['optimization']
Performance,"ing>"", line 30, in <module>; File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 2008, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1362, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 93, in scf_compute_energy; raise e; File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; self.iterations(); File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 358, in scf_iterate; raise ConvergenceError(""""""SCF iterations"""""", self.iteration_). ConvergenceError: Could not converge SCF iterations in 4 iterations. Psi4 stopped on: Wednesday, 08 August 2018 05:42PM; Psi4 wall time for execution: 0:00:01.01. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. It looks like [`die_if_not_converged`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsi4util/process.cc#L105-L113) toggled print-error-msg/die+traceback previously for SCF and DETCI, with defaulting toward print-error-msg. I think it's better to default toward die (which this PR now does) and ppl can catch the error if they want print-error-msg. For a long time we had geometry optimizations exit smoothly even if failed for iterations exceeded. That caused some problems (I think @dsirianni hit them), so we switched toward the die+traceback. Now SCF will behave like optimizations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1130#issuecomment-411567479:2116,optimiz,optimizations,2116,https://psicode.org,https://github.com/psi4/psi4/pull/1130#issuecomment-411567479,2,['optimiz'],['optimizations']
Performance,"inter>, trace_info=0x7fff112861e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #20 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd84ecdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #21 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabd84ecdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #22 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112862e0, locals=locals@entry=0x7fabd7bced00, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #23 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd78907c0, globals=globals@entry=0x7fabd7bced00, locals=locals@entry=0x7fabd7bced00); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #24 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd7bced00, globals=0x7fabd7bced00, source=0x7fabd78907c0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #25 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #26 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd7888dd8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #27 0x000055ff90677205 in do_call_core (kwdict=0x7fabd7bce4c0, callargs=0x7fabd7888dc0, func=0x7fac0e398e00, trace_info=0x7fff112864b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #28 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8949cf0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #29 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8949cf0, tstate=0x55ff9515e050) at /usr/local/src/con",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:10065,optimiz,optimized,10065,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,interfragment optimizations with 3 test cases,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/432:14,optimiz,optimizations,14,https://psicode.org,https://github.com/psi4/psi4/pull/432,1,['optimiz'],['optimizations']
Performance,"ion (#1760, #1817, #1824 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349, #1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) . ## New External Libraries; - [QCEngine](https://github.com/MolSSI/QCEngine) - A QCSchema runner is now a required dependency since we use it for several interfaces (#1577); - DFTD3; - MP2D; - gCP; - CPPE - Polarizable embedding with environment modeled by multi-center multipole expansion with dipole-dipole polarizabilities at the expansion sites (#1401) ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to Libxc5 (#1101, #2113, #2169, #2191) . ## Additional Non-Core Contributors to v1.4. @ramis, @jwaldrop107, @obrien951, @dsirianni, @Dpgibney, @derekmetcalf, @alenaizan, @susilehtola, @tovestra, @jeffschriber, @zachglick, @maxscheurer, @chapincavender, @PhillCli, @mdamer, @katrinleinweber, @mfherbst, @edeprince3, @konpat, @kcpearce, @Icyyork, @timostrunk, @shivupa, @taylor-a-barnes, @shannonhouck, @bennybp, @tomspur, @jgonthier, @sjrl, @kis-gergely-dzsi, @ferchault, @andyj10224, @psi-rking, @SimonBoothroyd, @yxie326, @VHchavez, @nlk36701, @edeustua, @leeping, @mquevill, @lazaroid, @sgoodlett. ## Performance Optimizations; - omega exchange can now be computed with `MemJK` algorith",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:2168,optimiz,optimizer,2168,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['optimiz'],['optimizer']
Performance,"ions of `pc-X` bases? There might be an argument in letting those in as well, based on the Neese paper. I don't suppose we can handle the generally contracted ANO's in Psi4? They're not included in our basis set library anyway. In terms of coefficients, I probably don't understand exactly what's going on, but:; - for `corl_xtpl_helgaker_2` we use a hard-coded `beta = 3`, which is the physically correct exponent, but for extrapolation between from `[DT]` basis sets the value of `2.46` seems more appropriate. There is currently no way to supply a custom value; - for `scf_xtpl_helgaker_2` (both of these should really be called `scf_xtpl_halkier_[2,3]`): we use the exponential form which seems to perform a lot better than the power form according to Halkier et al. The `alpha=1.63` seems to be a general parameter here, however a zeta-based `alpha` seems to perform better (as it is fitted). The interface to supply `alpha` is in the function, but doesn't seem to be plugged into the CBS machinery; - the ""power form"" for SCF extrapolation is not implemented in Psi4, but the coefficent `alpha` seems to be very system and basis and zeta dependent, as shown by both Halkier et al. and Neese and Valeev. @loriab My suggestions for myself for this PR, in addition to allowing the two basis set classes above, would be:; - [ ] add power form for SCF extrapolation (eg. `scf_xtpl_power_2`) with user-supplied `alpha`, a sane default is `alpha=3.54` from Halkier et al.; - [ ] add ability to supply custom `beta` for `corl_xtpl_helgaker_2` for better performance with [DT]'s; - [ ] wire up `scf_xtpl_helgaker_2` parameter `alpha` and the other two from above with the rest of the CBS machinery, perhaps using `scf_alpha` and `corl_beta` parameters to `cbs()`. The `cc-pVXZ-PP` issue can certainly wait. The user can combine their own basis sets into user-supplied `.gbs`'s (which is what I was doing for my systems anyway) and the CBS function will happily use them, as long as they match the regex.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/963#issuecomment-381392778:1781,perform,performance,1781,https://psicode.org,https://github.com/psi4/psi4/pull/963#issuecomment-381392778,1,['perform'],['performance']
Performance,"iption of the PR's purpose here. -->. This is a snapshot in which all n-body tests pass using QCManyBody locally. There's lots of code to be erased and reworked yet. And qcmb isn't installed in CI, so tests aren't expected to pass. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Internal code has been replaced by an external Python module, QCManyBody; - [x] Several n-body efficiency improvements and a new option `supersystem_ie_only` that computes the IE rather than MBE, useful for trimers and larger.; - [x] bug fix for gradient or Hessian vmfc for max_nbody >=3. ## Dev notes & details; * Unrelated; - [x] updated basis_set_exchange to v0.10 and probably fixed the internal build; - [x] switched internal build of optking to a tag that can work with py312; - [x] qcvar `GEOMETRY ITERATIONS` wasn't actually getting set. `OPTIMIZATION ITERATIONS` is actually listed in the docs glossary, so switched to that and set it.; - [x] added `resp` to the codedeps now that it's on c-f, and thus to the ecosystem testing; - [x] fixed previously excused docs links to qcfractal; - [x] added back dftd4 to ecosystem for py312; * QCManyBody: build; - [x] Adds a new pure-python required dependency, `qcmanybody`, available from c-f or pypi; * QCManyBody: BSSE efficiency improvements/bug fixes; - [x] `bsse_type=cp` + `return_total_data=True` (not default for energy) will now no longer do every species in both supersystem (for cp) and natural (for uncp) basis sets. It will do everything in the supersystem basis (since cp requested) and only monomers in the monomer basis (for rtd=T).; - [x] `driver=g/h` + `return_total_data=False`, an unlikely combination, won't just fail with syntax error; - [x] `bsse_type=vmfc` + `driver=g/h + `max_nbody`>2 are now computed correctly. Previously (at least since v1.6), only the two highest-body terms were getting summed into the contribut",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3160:995,OPTIMIZ,OPTIMIZATION,995,https://psicode.org,https://github.com/psi4/psi4/pull/3160,1,['OPTIMIZ'],['OPTIMIZATION']
Performance,"is is more than we started with.; - [x] 1. `-DECONTRACT` handled c-side was fine as an initial hack. but I'd rather implement that function py-side so as to hand back the full basis set dictionary, just so they're treated like everything else. also, right now, this decontracts _everything_, that is orbital/fitting alike unless you explicitly specify them all.; - [x] 2. also, rename rel_basis. only proximity to other dkh/relativisitc keywords indicates that that's what it means.; - [x] 3. show how to build your own _named_ basis for orbital or fitting roles a la mints9; - [x] 4. prove that a `basis mybas {...}` -defined basis can work for a `db()` calc, that is, the basis isn't anonymous and can be reapplied to multiple molcules. fitting, too.; - [x] 5. see if any of the times moldules call pyconstruct_aux if they want to forcibly apply the puream of the orbital to the aux basis. i think scf does this but nowhere else.; - [x] 6. the python side of pyconstruct generates a nice compact summary of where basis functions are loaded from (like below). this would be very handle to print in output once per basis. problem is modules read basis sets over and over. so either that needs curtailing or pass a printornot flag to pyconstruct. ```; => Loading Basis Set <=. Role: BASIS; Keyword: BASIS; Name: CC-PVDZ; atoms 1 entry C line 130 file /Users/loriab/linux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; atoms 2 entry O line 190 file /Users/loriab/linux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; atoms 3-4 entry H line 20 file /Users/loriab/linux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; ```; - [x] 7. soon after all the new basis stuff went in Nov 2014, Jet added another layer in qcdb pyconstruct to make CABS basis sets work. unfortunately, this broke one of the key principles/advantages of the new scheme. not that i remember exactly what that principle was, though it was probably that the basis could be re-constituted by `basis mybas {...}` mybas name; - [x] 8. fix the 5-zeta and 6-z",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/43#issuecomment-189541354:1473,load,loaded,1473,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-189541354,1,['load'],['loaded']
Performance,"is not a real file object, then this may take extra memory; and time.; allow_pickle : bool, optional; Whether to allow writing pickled data. Default: False. .. versionchanged:: 1.16.3; Made default False in response to CVE-2019-6446. pickle_kwargs : dict; Additional keyword arguments to pass to pickle.load. These are only; useful when loading object arrays saved on Python 2 when using; Python 3. Returns; -------; array : ndarray; The array from the data on disk. Raises; ------; ValueError; If the data is invalid, or allow_pickle=False and the file contains; an object array. """"""; version = read_magic(fp); _check_version(version); shape, fortran_order, dtype = _read_array_header(fp, version); if len(shape) == 0:; count = 1; else:; count = numpy.multiply.reduce(shape, dtype=numpy.int64). # Now read the actual data.; if dtype.hasobject:; # The array contained Python objects. We need to unpickle the data.; if not allow_pickle:; > raise ValueError(""Object arrays cannot be loaded when ""; ""allow_pickle=False""); E ValueError: Object arrays cannot be loaded when allow_pickle=False. miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/format.py:692: ValueError; _____________________________________________________ test_psi4_cc _____________________________________________________. @pytest.mark.smoke; def test_psi4_cc():; """"""cc1""""""; #! RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psi4.core.clean(); h2o = psi4.geometry(""""""; O; H 1 0.97; H 1 0.97 2 103.0; """"""). psi4.set_options({""basis"": '6-31G**'}). > psi4.optimize('ccsd'). miniconda3/envs/psi/lib/python3.6/site-packages/psi4/tests/test_psi4.py:39:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/driver.py:1052: in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/driver.py:69",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611:3154,load,loaded,3154,https://psicode.org,https://github.com/psi4/psi4/issues/1611,2,['load'],['loaded']
Performance,"issue raised on the forum: http://forum.psicode.org/t/memory-usage-using-jupyter-writing-cubes/2151/3?u=hokru; A comp chem lab notebook with repeated cube file generation. > Just as an example, the whole notebook (including optimization and scan along bond-length, and visualization with NGLview) takes ~700MB (Cl2) or ~450MB (Li2), where nearly half of the memory usage happens at cubeprop().",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2181:224,optimiz,optimization,224,https://psicode.org,https://github.com/psi4/psi4/issues/2181,1,['optimiz'],['optimization']
Performance,"it off completely past a certain convergence of the density matrix. This PR refactors the inc. Fock framework in the `DFJCOSK` class with the inc. Fock framework from #2155. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Replace old inc. fock. code from `DFJCOSK` PR with the one from #2155; - [x] Move incfock logic from DirectJK to JK; - [x] Cleans up incfock logic by removing extraneous variables like `initial_iteration_`. ## Questions; - [x] What is the best way to handle JK classes that should never use `incfock` (i.e. `MemDFJK`, `CDJK`, etc.) What I currently do is to just set incfock to false in those cases no matter what. Is there a better way?; - [x] Should DirectJK use `incfock` by default or not?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge. Example of incfock use in with refactor (Hexane/jun-cc-pVDZ):; Iterations in which inc. Fock is performed has `INCFOCK` appended to the end.; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter SAD: -234.79902648013046 -2.34799e+02 0.00000e+00; @RHF iter 1: -235.11334205670366 -3.14316e-01 3.59965e-03 DIIS/ADIIS; @RHF iter 2: -235.33614986245553 -2.22808e-01 1.58174e-03 DIIS/ADIIS/INCFOCK; @RHF iter 3: -235.38008939725930 -4.39395e-02 2.83807e-04 DIIS/ADIIS/INCFOCK; @RHF iter 4: -235.38291465805983 -2.82526e-03 4.64337e-05 DIIS/INCFOCK; @RHF iter 5: -235.38297663987922 -6.19818e-05 1.50376e-05 DIIS/INCFOCK; @RHF iter 6: -235.38298211805841 -5.47818e-06 2.18669e-06 DIIS; @RHF iter 7: -235.38298224217732 -1.24119e-07 6.25234e-07 DIIS; Energy and wave function converged with early screening.; Performing final iteration with tighter screening. @RHF iter 8: -235.38489215328417 -1.90991e-03 8.02480e-05 DIIS; Energy and wave function converged.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682:1551,perform,performed,1551,https://psicode.org,https://github.com/psi4/psi4/pull/2682,2,"['Perform', 'perform']","['Performing', 'performed']"
Performance,"ithm or an inaccuracy in the gradient from Psi4, so I computed the numerical gradient using finite difference of the energy and compared it with the analytic gradient. I found several components of the gradient where the difference exceeds 3e-4 and the largest difference exceeds 1e-3. The result is consistent when I use two different step sizes for the finite difference (1e-3 and 1e-4 a.u., both using central (3-point) finite difference; see fd-ana-grad.txt file in attached data.zip). By contrast, for a different system (a water dimer calculated at HF/STO-3G), the max difference between numerical and analytic gradients using a 1e-3 step size is around 1e-6. I've attached a picture where the numerical gradient, analytic gradient, and the difference are visualized. The difference is mainly on the La and Br atoms, with smaller components on the other atoms. These forces do not appear to be purely translational/rotational, but I think there is a translational/rotational component because the ""trajectory"" of the optimization appears to include some translational/rotational motion as well as distortion (attached qce_optim.xyz in data.zip). ![1](https://github.com/psi4/psi4/assets/1441560/e3dea159-d922-40c8-bad9-868b20f710e3). Although the gradient difference in this case is larger than geomeTRIC's convergence criterion for the RMS / max gradient, a smaller difference of 1e-5 to 1e-4 could still cause a failure to converge by causing the optimizer to take incorrect steps with step sizes larger than the convergence criterion for the displacement. I suspect these subtle errors are also occurring in DFT calculations on organic molecules, but because the errors are smaller there, the convergence failures do not happen consistently but only occasionally. (I can provide another example for an organic molecule if needed.). As an aside, I ran the geometry optimization in Q-Chem with the same settings (except Q-Chem does not use DF-SCF) and the optimization converged in 83 steps (a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3066:1776,optimiz,optimization,1776,https://psicode.org,https://github.com/psi4/psi4/issues/3066,1,['optimiz'],['optimization']
Performance,"ized out>, args=0x7fabd8a583d0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #114 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8a583d0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; --Type <RET> for more, q to quit, c to continue without paging--; #115 0x000055ff90677205 in do_call_core (kwdict=0x7fabd88870c0, callargs=0x7fabd8a583d0, func=0x7fac0e3989a0, trace_info=0x7fff11287e40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #116 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95de00f0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #117 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95de00f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #118 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #119 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #120 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #121 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #122 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287ff0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #123 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95ddd860, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:28173,optimiz,optimized,28173,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"jects are used throughout the codebase via calls to `JK::compute()`. In SCF, many calls to `JK::compute()` are made interspersed with updates to the object's orbitals. `JK::compute()` does a [few things](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/jk.cc#L550): performs sanity checks, creates densities from the orbitals, zeroes out the object's `J`/`K`/`wK` matrices, and finally calls the virtual function `compute_JK()`, which is where each child class implements some algorithm to fill `J`/`K`/`wK`. Now consider incremental Fock construction. Instead of recomputing `J`/`K`/`wK` each SCF iteration, the previous iteration's `J`/`K`/`wK` are added to a `J`/`K`/`wK` computed with the difference in densities between the current and previous iterations. As [implemented in the `DirectJK` class](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/jk.h#L724-L734), this accomplished by storing the entire `J`/`K`/`wK` matrices of the previous iteration, computing the difference density update to `J`/`K`/`wK`, adding the two together, and storing in the `JK` objects `J`/`K`/`wK` matrices. This requires a lot of [convoluted bookkeeping](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/DirectJK.cc#L138-L217). Future JK classes that would want to do incremental Fock build would have to duplicate a lot of code, too. Instead, a much simpler approach would be this: The call to `JK::compute()` doesn't zero out the `J`/`K`/`wK` matrices. Instead, the child JK class can choose to zero out their `J`/`K`/`wK` matrices (if performing a normal Fock build) or leave them as-is from the previous iteration and add to them (if performing an incremental Fock build). This way no previous iterations' `J`/`K`/`wK` matrices have to be saved, and the logic in `compute_JK` becomes much simpler. . > Is `early_screening_` for this ""semi-numerical exchange,"" or something else? How close is this other PR to completion. Yes, this is used in semi-numerical exchange.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2529#issuecomment-1089141879:2172,perform,performing,2172,https://psicode.org,https://github.com/psi4/psi4/pull/2529#issuecomment-1089141879,2,['perform'],['performing']
Performance,"jects/typeobject.c:955; 955 ++ tstate->trash_delete_nesting;; Missing separate debuginfos, use: debuginfo-install atlas-3.8.4-8.fc19.x86_64 blas-3.4.2-2.fc19.x86_64 keyutils-libs-1.5.5-4.fc19.x86_64 krb5-libs-1.11.3-1.fc19.x86_64 libcom_err-1.42.7-2.fc19.x86_64 libselinux-2.1.13-15.fc19.x86_64 pcre-8.32-7.fc19.x86_64; (gdb) bt full; #0 subtype_dealloc (self=<Molecule at remote 0x1110c8c0>) at /usr/src/debug/Python-2.7.5/Objects/typeobject.c:955; type = 0x10d7f9c0; base = <optimized out>; basedealloc = <optimized out>; tstate = 0x0; #1 0x00007ffff6b92cb2 in xdecref<_object> (p=<optimized out>) at boost/python/refcount.hpp:36; p = <optimized out>; #2 reset (this=0x1107b438) at boost/python/handle.hpp:249; No locals.; #3 boost::python::converter::shared_ptr_deleter::operator() (this=0x1107b438) at libs/python/src/converter/builtin_converters.cpp:35; No locals.; #4 0x0000000000710812 in psi::Process::Environment::~Environment() (); No symbol table info available.; #5 0x000000374f2390a9 in __run_exit_handlers (status=0, listp=0x374f5b96e8 <__exit_funcs>, run_list_atexit=run_list_atexit@entry=true) at exit.c:77; atfct = <optimized out>; onfct = <optimized out>; cxafct = <optimized out>; f = <optimized out>; #6 0x000000374f2390f5 in __GI_exit (status=<optimized out>) at exit.c:99; No locals.; #7 0x000000374f221b7c in __libc_start_main (main=0x699720 <main>, argc=2, ubp_av=0x7fffffffdb38, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffdb28); at libc-start.c:292; result = <optimized out>; unwind_buf = {cancel_jmp_buf = {{jmp_buf = {0, -420104691260379722, 7149040, 140737488345904, 0, 0, 420104692152085942, -412673899392062026}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, ; 0x1c22e20 <__libc_csu_init>, 0x7fffffffdb38}, data = {prev = 0x0, cleanup = 0x0, canceltype = 29503008}}}; not_first_call = <optimized out>; #8 0x00000000006d1619 in _start (); ```. Is this a crash in python/boost misusing python/psi misusing boost and python?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/8:1342,optimiz,optimized,1342,https://psicode.org,https://github.com/psi4/psi4/issues/8,10,['optimiz'],['optimized']
Performance,"k behind the scene by running the 3 SCF and handling all relevant files. If you want to feed orbitals into the SCF, you need to do all of that directly in the input file. That is not really pretty, and right now we are changing some things in Psi4 infrastructure, which means the same input file might need tweaking in future versions. Below is an example with the molecule you had above. The symmetry c1, no_reorient and no_com options _must_ be there, I also assumed you had the orbital files at hand already. molecule dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561; symmetry c1; no_reorient; no_com; }. set {; basis jun-cc-pvdz; scf_type df; e_convergence 10; guess read; }. dimer = psi4.get_active_molecule(); psi4.IO.set_default_namespace('dimer'); psi4.set_local_option('SCF', 'SAPT', '2-dimer'); psi4.set_global_option('DF_INTS_IO', 'SAVE'). energy('scf',restart_file='./psi.15065.dimer.180'). psi4.set_global_option('DF_INTS_IO', 'LOAD'). monomerA = dimer.extract_subsets(1, 2); psi4.IO.change_file_namespace(97, 'dimer', 'monomerA'); psi4.IO.set_default_namespace('monomerA'); psi4.set_local_option('SCF', 'SAPT', '2-monomer_A'). energy('scf',restart_file='./psi.15065.monomerA.180'). monomerB = dimer.extract_subsets(2, 1); psi4.IO.change_file_namespace(97, 'monomerA', 'monomerB'); psi4.IO.set_default_namespace('monomerB'); psi4.set_local_option('SCF', 'SAPT', '2-monomer_B'). energy('scf',restart_file='./psi.15065.monomerB.180'). psi4.IO.change_file_namespace(p4const.PSIF_SAPT_MONOMERA, 'monomerA', 'dimer'); psi4.IO.change_file_namespace(p4const.PSIF_SAPT_MONOMERB, 'monomerB', 'dimer'). activate(dimer); psi4.IO.set_default_namespace('dimer'); psi4.set_local_option('SAPT', 'E_CONVERGENCE', 10e-10); psi4.set_local_option('SAPT', 'D_CONVERGENCE', 10e-10); psi4.set_local_option('SAPT', 'SAPT_LEVEL', 'SAPT0'). psi4.sapt()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/51#issuecomment-180678000:1152,LOAD,LOAD,1152,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-180678000,1,['LOAD'],['LOAD']
Performance,"ke/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication could be conda pkgs (even numpy) that are already in env and complicating the link loader's tasks. But we really shouldn't be telling ppl about preloading, which is bad practice for non-dire situations. @ryanmrichard [put in something](https://github.com/psi4/psi4/pull/513/files#diff-bb0d8c2ec987bfc58b4a943e453ea132L147) to preferentially detect the runtime lib as a bandaid to this.; * People for whom Bast math detection works fine but cmake FindLapack doesn't (namely, @psi-rking and [this fellow](http://forum.psicode.org/t/problem-with-building-from-source-according-to-cmakelists-txt/352/10) are having problems with libefp and CheMPS2 because different (or no) math libs are being inserted from those dependencies. I can forward the Bast libs to those external projects, but that'll cause some complications with the exported targets. I can fix that, but I fear that cmake will optimize away my start/end-groups again if they appear more than once. I am _not_ working on this right now, but I will have to, at a minimum, apply more bandaids soon, so I wanted to know from @robertodr and @bast if they're any solutions from the past two years. At a maximum, I'm tempted to default to `mkl_rt`, have ConfigMath export a target, and train libefp and CheMPS2 to detect it in preference to FindLapck. This is the state of affairs.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537:2885,optimiz,optimize,2885,https://psicode.org,https://github.com/psi4/psi4/issues/537,1,['optimiz'],['optimize']
Performance,keep_intcos works for successful optimization,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2188:33,optimiz,optimization,33,https://psicode.org,https://github.com/psi4/psi4/pull/2188,1,['optimiz'],['optimization']
Performance,"kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at Python/ceval.c:3930; #15 0x00007ffff7a02f1e in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f9e660, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8, args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=0, defs=0x0,; defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3959; #16 0x00007ffff7a02f4b in PyEval_EvalCode (co=co@entry=0x7ffff7f9e660, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8) at Python/ceval.c:524; #17 0x00007ffff7a369e2 in run_mod (arena=0x7ffff7fc42d0, flags=0x7fffffffcf50, locals=0x7ffff7ecd1f8, globals=0x7ffff7ecd1f8, filename=0x7fffeffc0870, mod=0x6440f0) at Python/pythonrun.c:1035; #18 PyRun_FileExFlags (fp=fp@entry=0x67eb60, filename_str=filename_str@entry=0x7ffff7f89110 ""simple.2.py"", start=start@entry=257, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8, closeit=closeit@entry=1,; flags=0x7fffffffcf50) at Python/pythonrun.c:988; #19 0x00007ffff7a36b55 in PyRun_SimpleFileExFlags (fp=fp@entry=0x67eb60, filename=<optimized out>, closeit=closeit@entry=1, flags=flags@entry=0x7fffffffcf50) at Python/pythonrun.c:429; #20 0x00007ffff7a36ff3 in PyRun_AnyFileExFlags (fp=fp@entry=0x67eb60, filename=<optimized out>, closeit=closeit@entry=1, flags=flags@entry=0x7fffffffcf50) at Python/pythonrun.c:84; #21 0x00007ffff7a58d27 in pymain_run_file (p_cf=0x7fffffffcf50, filename=0x603520 L""simple.2.py"", fp=0x67eb60) at Modules/main.c:427; #22 pymain_run_filename (cf=0x7fffffffcf50, pymain=0x7fffffffd030) at Modules/main.c:1627; #23 pymain_run_python (pymain=0x7fffffffd030) at Modules/main.c:2877; #24 pymain_main (pymain=pymain@entry=0x7fffffffd030) at Modules/main.c:3038; #25 0x00007ffff7a58fab in _Py_UnixMain (argc=<optimized out>, argv=<optimized out>) at Modules/main.c:3073; #26 0x00007ffff6978505 in __libc_start_main () from /lib64/libc.so.6; #27 0x00000000004008ce in _start (); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878:5646,optimiz,optimized,5646,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878,4,['optimiz'],['optimized']
Performance,"l (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283; > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086; > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); > at Python/ceval.c:3433; > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); > at Python/ceval.c:4378; > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720; > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433; > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > args=args@entry=0x0,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:5438,optimiz,optimized,5438,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,3,['optimiz'],['optimized']
Performance,"l = pyscf.M(; atom=xyzFilename, ; basis=""def2-svp"",; symmetry=False,; verbose=4,; cart=True,; ); # mol.max_memory = 10_000; mf = dft.rks.RKS(mol, xc=""svwn"").density_fit(auxbasis='def2-universal-jfit'); mf.init_guess = 'vsap'; mf.grids.level = 7; mf.conv_tol = 1e-7; mf.kernel(); print('Nuc-Nuc PySCF= ', mol.energy_nuc()); print('One electron integrals energy',mf.scf_summary['e1']); print('Coulomb energy ',mf.scf_summary['coul']); print('EXC ',mf.scf_summary['exc']); ```; The XYZ file for ethane is here; ```; 8; Ethane; C -0.759130 0.027045 -0.000000; C 0.759130 -0.027045 -0.000000; H -1.125990 0.306235 1.010150; H -1.171340 -0.966695 -0.274750; H -1.109050 0.781825 -0.735390; H 1.109040 -0.781815 0.735390; H 1.171340 0.966695 0.274760; H 1.125990 -0.306235 -1.010150; ```; The following is my output:; Psi4; ```; Memory set to 111.759 GiB by Python driver.; Threads set to 8 by Python driver. Scratch directory: /tmp/. *** tstart() called on xxx; *** at Tue Mar 28 17:20:51 2023. => Loading Basis Set <=. Name: DEF2-SVP; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry C line 90 file /home/manas/psi4conda/share/psi4/basis/def2-svp.gbs; atoms 3-8 entry H line 15 file /home/manas/psi4conda/share/psi4/basis/def2-svp.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RKS Reference; 8 Threads, 114440 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; C -0.759130000000 0.027045000000 0.000000000000 12.000000000000; C 0.759130000000 -0.027045000000 0.000000000000 12.000000000000; H -1.125990000000 0.306235000000 1.010150000000 1.007825032230; H -1.171340000000 -0.966695000000 -0.274750000000 1.007825032230; H -1.109050000000 0.781825000000 -0.735390000000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911:2601,Load,Loading,2601,https://psicode.org,https://github.com/psi4/psi4/issues/2911,1,['Load'],['Loading']
Performance,"l, to reduce dependence on psi objects; * use more numpy, less Matrix; * consolidate printing so can go to logging; * start to pass finite difference options (points, steps, projection) as kwargs rather than having findif consult global options; - [x] added in the dipder from dipole but it's not used; - closes #1683; - [x] along the way, psimrcc-fd-freq1 failed. as far as I can judge now, this is an existing bug. part of the old output is below. psi is evaulating the gradient, finding it over the cutoff, and so recommending not projecting rotations. then, because of https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1613, that setting of FD_PROJECT gets tossed, and findif runs projecting rotations, and the test passes. I'm calling this a bug and setting fd_project in the input to force the array dimensions to match and the test to pass. glad to hear other interpretations. ```. Based on options and gradient (rms=3.60E-02), recommend projecting translations and not projecting rotations.; hessian() will perform frequency computation by finite difference of analytic energies. ----------------------------------------------------------; FINDIF; R. A. King and Jonathon Misiewicz; ---------------------------------------------------------. Using finite-differences of gradients to determine vibrational frequencies and; normal modes. Resulting frequencies are only valid at stationary points.; Generating geometries for use with 5-point formula.; Displacement size will be 1.00e-02.; Number of atoms is 2.; Number of irreps is 8.; Number of SALCs is 1.; Translations projected? 1. Rotations projected? 1.; Index of SALCs per irrep:; ```; - [x] ADDED: moved the write_hessian fn and collected write_gradient into a matching fn. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2552:1435,perform,perform,1435,https://psicode.org,https://github.com/psi4/psi4/pull/2552,1,['perform'],['perform']
Performance,l/impi/5.0.1.035/intel64/bin/mpicc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- The Fortran compiler identification is Intel 13.1.0.20130121; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90 -- yes; -- Fortran ENABLED; -- Buggy compiler support for C++11. Using older standard.; -- Checking for restrict keyword; -- keyword found : **restrict**; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -openmp; -- Found MPI_C: /opt/intel/impi/5.0.1.035/intel64/lib/libmpifort.so;/opt/intel/impi/5.0.1.035/intel64/lib/release/libmpi.so;/opt/intel/impi/5.0.1.035/intel64/lib/libmpigi.a;/usr/lib64/libdl.so;/usr/lib64/librt.so;/usr/lib64/libpthread.so; -- Found MPI_CXX: /opt/intel/impi/5.0.1.035/intel64/lib/libmpicxx.so;/opt/intel/impi/5.0.1.035/intel64/lib/libmpifort.so;/opt/intel/impi/5.0.1.035/intel64/lib/release/libmpi.so;/opt/intel/impi/5.0.1.035/intel64/lib/libmpigi.a;/usr/lib64/libdl.so;/usr/lib64/librt.so;/usr/lib64/libpthread.so; -- Found MPI_Fortran: /opt/intel/impi/5.0.1.035/intel64/lib/libmpifort.so;/opt/intel/impi/5.0.1.035/intel64/lib/release/libmpi.so;/opt/intel/impi/5.0.1.035/intel64/lib/libmpigi.a;/usr/lib64/libdl.so;/usr/lib64/l,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:6395,Perform,Performing,6395,https://psicode.org,https://github.com/psi4/psi4/issues/201,8,['Perform'],['Performing']
Performance,"l: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on shukla-pc.localdomain at Thu Oct 16 11:16:51 2014; Module time:; user time = 522.41 seconds = 8.71 minutes; system time = 15.59 seconds = 0.26 minutes; total time = 594 seconds = 9.90 minutes; Total time:; user time = 522.41 seconds = 8.71 minutes; system time = 15.59 seconds = 0.26 minutes; total time = 594 seconds = 9.90 minutes. **\* tstart() called on shukla-pc.localdomain; **\* at Thu Oct 16 11:16:51 2014. ```; **************************************************; * TRANSQT2: Program to transform integrals from *; * the SO basis to the MO basis. *; * *; * Daniel, David, & Justin *; **************************************************. Input parameters:; -----------------; Wave function = SCF; Backtransform = No; Print Level = 1; Print TEIs = No; Reference wfn = RHF; Derivative = None; Delete TEI File = Yes; Memory (Mbytes) = 5000.0; Cache Level = 2; Cache Type = LRU; Chkpt Parameters:; --------------------; Number of irreps = 1; Number of SOs = 246; Number of MOs = 246; Number of active MOs = 246. Label # SOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; A 246 14 33 0 199 0. Nuclear Rep. energy (chkpt) = 697.11317829643781; SCF energy (chkpt) = -535.97469065986911. Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (pq,rs) nbuckets = 2; Frozen-core energy = 0.000000000000000; Starting first half-transformation.; Sorting half-transformed integrals.; Starting second half-transformation.; Two-electron integral transformation complete.; ```. **\* tstop() called on shukla-pc.localdomain at Thu Oct 16 11:29:13 2014; Module time:; user time = 259.08 seconds = 4.32 minutes; system time = 51.47 seconds = 0.86 minutes; total time = 742 seconds = 12.37 minutes; Total time:; user time = 781.49 seconds = 13.02 minutes; system time = 67.06 seconds = 1.12 minutes; total time = 1336 seconds = 22.27 minutes. **\* tstart() called on shukla-pc.localdomain; **\",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/62:13962,Cache,Cache,13962,https://psicode.org,https://github.com/psi4/psi4/issues/62,2,['Cache'],['Cache']
Performance,"l=0, haschanged_global=False, value_local=0, haschanged_local=False, value_used=0, haschanged_used=False) at remote 0x7faaaffd1d60>, ('CART_HESS_READ', 'OPTKING'): <OptionState(option='CART_HESS_READ', module='OPTKING', value_global=0, haschanged_g...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #40 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x5589d8ccc008, ; kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='optimize', qualname='optimize') at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #41 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x5589d8ccc000, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:13636,optimiz,optimized,13636,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['optimiz'],['optimized']
Performance,"l=False, value_local='RHF', haschanged_local=False, value_used='RHF', haschanged_used=False) at remote 0x7faa8737d2e0>}) at remote 0x7faa8737d190>, ref_wfn=<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #28 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa87365d18, ; kwargs=0x7faa8746fd98, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='run_scf_gradient', qualname='run_scf_gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #29 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa8746fd90, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #30 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa8748c1f0>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #31 0x00007faabd6481e9 in do_call_core (kwdict={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, callargs=('hf',), func=<function at remote 0x7faa8748c1f0>, ; tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #32 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #33 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8c47070, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 973, in gradient (name='hf', kwargs={'opt_iter': True}, gradient_type='conventional', dertype=1, optstash=<OptionsState(data={('E_CONVERGENCE', 'SCF'): <OptionState(option='E_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f890>, haschanged_global=False, value_local=<float at r",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:8878,optimiz,optimized,8878,https://psicode.org,https://github.com/psi4/psi4/issues/2010,2,['optimiz'],['optimized']
Performance,lain HTML. The same; > thing happens if I navigate to the manual from the psicode.org homepage.; > ; > The console in chrome and safari are showing 404 errors for js and css:; > ; > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resource: the server responded with a status of 404 (Not Found); > index.html:368 Uncaught ReferenceError: $ is not defined; > http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/ps,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210017774:1859,load,load,1859,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774,1,['load'],['load']
Performance,"lations on the N and F atoms result in segmentation faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file:; > ; > molecule f { ; > f 0.00 0.00 0.00; > }; > set basis cc-pVTZ; > set scf reference uhf ; > energy('ccsd'); > (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault).; > ; > Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem.; > ; > Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc.; > ; > Full backtrace from gdb:; > ; > (gdb) where; > #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6; > #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134; > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630); > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50; > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>); > at /usr/include/boost/python/detail/invoke.hpp:75; > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223; > #9 boost::python::ob",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:1219,optimiz,optimized,1219,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,1,['optimiz'],['optimized']
Performance,"le contains; an object array. """"""; version = read_magic(fp); _check_version(version); shape, fortran_order, dtype = _read_array_header(fp, version); if len(shape) == 0:; count = 1; else:; count = numpy.multiply.reduce(shape, dtype=numpy.int64). # Now read the actual data.; if dtype.hasobject:; # The array contained Python objects. We need to unpickle the data.; if not allow_pickle:; > raise ValueError(""Object arrays cannot be loaded when ""; ""allow_pickle=False""); E ValueError: Object arrays cannot be loaded when allow_pickle=False. miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/format.py:692: ValueError; _____________________________________________________ test_psi4_cc _____________________________________________________. @pytest.mark.smoke; def test_psi4_cc():; """"""cc1""""""; #! RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psi4.core.clean(); h2o = psi4.geometry(""""""; O; H 1 0.97; H 1 0.97 2 103.0; """"""). psi4.set_options({""basis"": '6-31G**'}). > psi4.optimize('ccsd'). miniconda3/envs/psi/lib/python3.6/site-packages/psi4/tests/test_psi4.py:39:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/driver.py:1052: in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/driver.py:691: in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:784: in select_ccsd_gradient; return func(name, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2314: in run_ccenergy_gradient; ccwfn = run_ccenergy(name, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2262: in run_ccenergy; ref_wfn = scf_helper(name, **kwargs) # C1 certified; miniconda",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611:3716,optimiz,optimize,3716,https://psicode.org,https://github.com/psi4/psi4/issues/1611,1,['optimiz'],['optimize']
Performance,"lib.h>; #include <unistd.h>; #include <pthread.h>; #include <errno.h>; #include ""threadpool.h"". #include ""forreent.h"". #define NUM_THREADS 12; #define NUM_JOBS 10. /* definitions for Fortran Runtime library init/finalize */; extern void for_rtl_init_ (int *, char **);; extern int for_rtl_finish_ ( );; extern int for_set_reentrancy (int *);. /* declare the external Fortran function 'fpa' */; extern void fpa(int io, char *filename); . void job_thread(void *arg1, void *arg2);. int main(int argc, char **argv); {; threadpool tp;; int i;; int *reent ;; int fstat;. char filenames[NUM_JOBS][100];; int io[NUM_JOBS];. int io_status;; /* Call the Fortran Runtime library for initialization */; for_rtl_init_ (&argc, argv);; *reent = FOR_K_REENTRANCY_THREADED;; fstat = for_set_reentrancy( reent );; printf (""fstat %i \n"", fstat);. /* Create a thread pool of 12 threads */; tp = create_threadpool(NUM_THREADS);. for (i = 0; i < NUM_JOBS; i++); {; /* Create a unique file name i.e. ""./Files/file1.txt"" */; sprintf(&filenames[i][0], ""/home/spd/rwgreen/quad/rwgreen/forums/81088/file%d.txt"", i+1);. /* Create a unique file I/O unit */; io[i] = 10+i;. /* Add file name and I/O unit to threadpool job queue */; printf(""Main: queueing %s\n"", &filenames[i][0]);; dispatch_job(tp, job_thread, (void *) &filenames[i][0], &io[i]);; }. /* Wait a while for all the threads to do their thing */; printf(""Main: sleeping 20 secs...\n"");; sleep(20);; printf(""Main: waking up and destroying threadpool...\n"");. /* Clean up threadpool */; destroy_threadpool(tp);. /* close the Fortran Runtime */; io_status = for_rtl_finish_ () ;. printf(""Main: exiting...\n"");; return 0;; }. /* Thread job function */; void job_thread(void *arg1, void *arg2); {; char *filename = (char *) arg1;; int *io = (int *) arg2;; unsigned int len = strlen(filename);. char string[len+1];; sprintf(string, ""%s"", filename);. fpa(*io, string); . printf(""->Thread %ld: Opened %s (len=%d) on I/O unit %d\n"", pthread_self(), filename, len, *io);; }; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/604:2331,queue,queue,2331,https://psicode.org,https://github.com/psi4/psi4/pull/604,2,['queue'],"['queue', 'queueing']"
Performance,"lib/libciomr/int_array.cc:134; #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630); at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50; #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (*)()> (rc=..., f=<optimized out>); at /usr/include/boost/python/detail/invoke.hpp:75; #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223; #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (*)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38; #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object*, _object*) const () from /usr/lib/libboost_python3.so.1.54.0; #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); from /usr/lib/libboost_python3.so.1.54.0; #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); at /usr/include/boost/python/detail/translate_exception.hpp:48; #14 operator()<bool, boost::python::detail::trans",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:1845,optimiz,optimized,1845,https://psicode.org,https://github.com/psi4/psi4/issues/12,2,['optimiz'],['optimized']
Performance,"libstdc++.so.6.0. 00007F6F8C6B535A Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B53C5 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B5658 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B5A129 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B69438 _ZN3psi4PSIO2rwEm Unknown Unknown; core.cpython-310- 00007F6F88B6B963 _ZN3psi4PSIO5writ Unknown Unknown; core.cpython-310- 00007F6F88B566E9 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6DFBF4 Unknown Unknown Unknown; libpthread-2.28.s 00007F6F9C8FC14A Unknown Unknown Unknown; libc-2.28.so 00007F6F9BEA1DC3 clone Unknown Unknown; /var/spool/slurm/slurmd/job83930/slurm_script: line 27: 2245656 Aborted (core dumped); ```. I used conda to install psi4 in a new environment.; ```; psi4 1.7+6ce35a5 py310h769327c_1 psi4; ```. Below is the full log, which includes the geometry:. <details>. ```. Memory set to 7.451 GiB by Python driver.; Threads set to 4 by Python driver. Scratch directory: /scratch/njzjz/83930/; gradient() will perform analytic gradient computation. *** tstart() called on aerosol-020; *** at Fri May 26 20:10:38 2023. => Loading Basis Set <=. Name: DEF2-TZVPPD; Role: ORBITAL; Keyword: BASIS; atoms 1-33 entry C line 144 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 34-89 entry H line 14 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 90-101 entry N line 181 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 102-106 entry O line 218 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs . => WB97M-D3BJ: Empirical Dispersion <=. Grimme's -D3 (BJ-damping) Dispersion Correction; Grimme S.; Ehrlich S.; Goerigk L. (2011), J. Comput. Chem., 32: 1456; Parametrisation from: A. Najib, L. Goerigk, J. Comput. Theory Chem.,14, 5725, 2018. s6 = 1.000000; s8 = 0.390800; a1 = 0.566000; a2 = 3.128000. ---------------------------------------------------------; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:1572,perform,perform,1572,https://psicode.org,https://github.com/psi4/psi4/issues/2970,1,['perform'],['perform']
Performance,"lobals=globals@entry=0x7fabd7bced00, locals=locals@entry=0x7fabd7bced00); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #24 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd7bced00, globals=0x7fabd7bced00, source=0x7fabd78907c0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #25 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #26 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd7888dd8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #27 0x000055ff90677205 in do_call_core (kwdict=0x7fabd7bce4c0, callargs=0x7fabd7888dc0, func=0x7fac0e398e00, trace_info=0x7fff112864b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #28 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8949cf0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #29 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8949cf0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #30 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #31 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #32 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; --Type <RET> for more, q to quit, c to continue without paging--; #33 PyObject_Vectorcall (kwnames=0x0, narg",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:10854,optimiz,optimized,10854,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"lobals=globals@entry=0x7fabd8887400, locals=locals@entry=0x7fabd8887400); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #70 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd8887400, globals=0x7fabd8887400, source=0x7fabd88826b0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #71 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #72 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd88851d8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #73 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8887300, callargs=0x7fabd88851c0, func=0x7fac0e398e00, trace_info=0x7fff11287280, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #74 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c49700, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #75 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c49700, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #76 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #77 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #78 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #79 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510) ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:19808,optimiz,optimized,19808,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,ls: 3								 Number of shells: 3; Number of ECP primitives: 13						 Number of ECP primitives: 13; Number of ECP core electrons: 10						 Number of ECP core electrons: 10; Max angular momentum: 2							 Max angular momentum: 2; 									 >; => Loading Basis Set <=							 => Loading Basis Set <=; 									 >; Name: (LANL2DZ AUX)								 Name: (LANL2DZ AUX); Role: JKFIT									 Role: JKFIT; Keyword: DF_BASIS_SCF							 Keyword: DF_BASIS_SCF; atoms 1-2 entry H line 18 file /Users/runner/work/psi4	 |	 atoms 1-2 entry H line 18 file D:\a\psi4\psi4\install\; atoms 3 entry O line 318 file /Users/runner/work/psi4	 |	 atoms 3 entry O line 318 file D:\a\psi4\psi4\install\; atoms 4 entry CA line 1250 file /Users/runner/work/psi4	 |	 atoms 4 entry CA line 1250 file D:\a\psi4\psi4\install\; 									 >; ==> Integral Setup <==							 ==> Integral Setup <==; 									 >; ==> DiskDFJK: Density-Fitted J/K Matrices <==					 ==> DiskDFJK: Density-Fitted J/K Matrices <==; 									 >; J tasked: Yes						 J tasked: Yes; K tasked: Yes						 K tasked: Yes; wK tasked: No						 wK tasked: No; OpenMP threads: 1						 OpenMP threads: 1; Integrals threads: 1						 Integrals threads: 1; Memory [MiB]: 375						 Memory [MiB]: 375; Algorithm: Core						 Algorithm: Core; Integral Cache: LOAD						 Integral Cache: LOAD; Schwarz Cutoff: 1E-12						 Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12						 Fitting Condition: 1E-12; 									 >; => Auxiliary Basis Set <=							 => Auxiliary Basis Set <=; 									 >; Basis Set: (LANL2DZ AUX)							 Basis Set: (LANL2DZ AUX); Blend: DEF2-UNIVERSAL-JKFIT							 Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 81							 Number of shells: 81; Number of basis functions: 336						 Number of basis functions: 336; Number of Cartesian functions: 336						 Number of Cartesian functions: 336; Spherical Harmonics?: false							 Spherical Harmonics?: false; Max angular momentum: 4							 Max angular momentum: 4; 									 >; Minimum eigenvalue in the overlap matrix is 3.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3072:5172,Cache,Cache,5172,https://psicode.org,https://github.com/psi4/psi4/issues/3072,4,"['Cache', 'LOAD']","['Cache', 'LOAD']"
Performance,"ls=globals@entry=0x7fabd8903bc0, locals=locals@entry=0x7fabd8903bc0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #190 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd8903bc0, globals=0x7fabd8903bc0, source=0x7fabd8a87940); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #191 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #192 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd8a8a4d8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #193 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8903b00, callargs=0x7fabd8a8a4c0, func=0x7fac0e398e00, trace_info=0x7fff11289680, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #194 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95d41d50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; --Type <RET> for more, q to quit, c to continue without paging--; #195 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95d41d50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #196 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #197 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #198 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #199 PyObject_Vectorcall (kwnames=0x0,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:43041,optimiz,optimized,43041,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"ls=globals@entry=0x7fabdcd7a300, locals=locals@entry=0x7fabdcd7a300); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #264 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabdcd7a300, globals=0x7fabdcd7a300, source=0x7fabd8a86550); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #265 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #266 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e0e6fd8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #267 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8902480, callargs=0x7fac0e0e6fc0, func=0x7fac0e398e00, trace_info=0x7fff1128acb0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #268 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8fa8550, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #269 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8fa8550, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #270 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #271 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #272 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #273 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:57365,optimiz,optimized,57365,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"ls=globals@entry=0x7fac0e071580, locals=locals@entry=0x7fac0e071580); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #376 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e071580, globals=0x7fac0e071580, source=0x7fac0e06f7e0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #377 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #378 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e041e18, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #379 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e071540, callargs=0x7fac0e041e00, func=0x7fac0e398e00, trace_info=0x7fff1128cf00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #380 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16a3b0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #381 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16a3b0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #382 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #383 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #384 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510, tstate=0x55ff9515e050); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #385 PyObject_Vectorcall (kwnames=0x0,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:79154,optimiz,optimized,79154,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"ls=globals@entry=0x7fac0e0f83c0, locals=locals@entry=0x7fac0e0f83c0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #144 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e0f83c0, globals=0x7fac0e0f83c0, source=0x7fabd8882550); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #145 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #146 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e0d4c58, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #147 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8938500, callargs=0x7fac0e0d4c40, func=0x7fac0e398e00, trace_info=0x7fff112888b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #148 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95e324c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #149 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95e324c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #150 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #151 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #152 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #153 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:34107,optimiz,optimized,34107,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"lse; 401: Max angular momentum: 1; 401: ; 401: => Loading Basis Set <=; 401: ; 401: Name: (6-31G AUX); 401: Role: JKFIT; 401: Keyword: DF_BASIS_SCF; 401: atoms 1 entry O line 221 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/cc-pvdz-jkfit.gbs ; 401: atoms 2-3 entry H line 51 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/cc-pvdz-jkfit.gbs ; 401: ; 401: ==> Pre-Iterations <==; 401: ; 401: -------------------------------------------------------; 401: Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; 401: -------------------------------------------------------; 401: A1 7 7 0 0 0 0; 401: A2 0 0 0 0 0 0; 401: B1 2 2 0 0 0 0; 401: B2 4 4 0 0 0 0; 401: -------------------------------------------------------; 401: Total 13 13 5 5 5 0; 401: -------------------------------------------------------; 401: ; 401: ==> Integral Setup <==; 401: ; 401: ==> DiskDFJK: Density-Fitted J/K Matrices <==; 401: ; 401: J tasked: Yes; 401: K tasked: Yes; 401: wK tasked: No; 401: OpenMP threads: 1; 401: Integrals threads: 1; 401: Memory (MB): 375; 401: Algorithm: Core; 401: Integral Cache: NONE; 401: Schwarz Cutoff: 1E-12; 401: Fitting Condition: 1E-12; 401: ; 401: => Auxiliary Basis Set <=; 401: ; 401: Basis Set: (6-31G AUX); 401: Blend: CC-PVDZ-JKFIT; 401: Number of shells: 42; 401: Number of basis function: 131; 401: Number of Cartesian functions: 131; 401: Spherical Harmonics?: false; 401: Max angular momentum: 3; 401: ; 401: Minimum eigenvalue in the overlap matrix is 7.3923847722E-02.; 401: Using Symmetric Orthogonalization.; 401: ; 401: SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.; 401: ; 401: ==> Iterations <==; 401: ; 401: Total Energy Delta E RMS |[F,P]|; 401: ; 401: @DF-RHF iter 0: -75.81834558928526 -7.58183e+01 1.82810e-01 ; 401: @DF-RHF iter 1: -75.95433899771382 -1.35993e-01 2.85222e-02 ; 401: @DF-RHF iter 2: -75.97384127453083 -1.95023e-02 1.55795e-02 DIIS; 401: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174:4564,Cache,Cache,4564,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174,1,['Cache'],['Cache']
Performance,"m, a fluoromethane that looks pretty good to the eye; > ; > # zmat version, normz; > ; > molecule normz {; > C; > H 1 1.2; > H 1 1.2 2 104; > H 1 1.2 2 105 3 120; > F 1 1.3 2 106 4 121; > }; > ; > # reference start NRE, E, G; > ; > norm_nre_start = 37.6824945882 # Q-Chem; > norm_e_start = -139.5307182946 # Q-Chem; > norm_g_start = psi4.Matrix(5, 3) # Q-Chem; > contents = [ # have to swap x & y, and -x; > [ -0.07990533, -0.00642920, -0.00348020, 0.04874047, 0.04107426],; > [ -0.04900557, -0.00240633, 0.05677652, -0.03006882, 0.02470420],; > [ -0.06715450, 0.05113530, -0.00508959, -0.00643364, 0.02754243]]; > norm_g_start.set(zip(*contents)); > norm_rmsg_start = 0.041309 # Q-Chem; > ; > # Full Analytical Gradient of MP2 Energy (in au.); > ; > # 1 2 3 4 5; > ; > # 1 -0.04900557 -0.00240633 0.05677652 -0.03006882 0.02470420; > ; > # 2 0.07990533 0.00642920 0.00348020 -0.04874047 -0.04107426; > ; > # 3 -0.06715450 0.05113530 -0.00508959 -0.00643364 0.02754243; > ; > # reference optimized NRE, E (G should be 0); > ; > nre_opt = 37.5276022922 # Q-Chem; > e_opt = -139.5573922 # Q-Chem; > #norm_g_opt # Q-Chem; > ; > # Full Analytical Gradient of MP2 Energy (in au.); > ; > # 1 2 3 4 5; > ; > # 1 0.00000025 -0.00000001 -0.00000021 -0.00000007 0.00000005; > ; > # 2 0.00000010 0.00000008 0.00000000 0.00000001 -0.00000020; > ; > # 3 0.00000038 -0.00000005 -0.00000006 -0.00000023 -0.00000003; > ; > def test_norm_start(mol):; > g0 = gradient('mp2', molecule=mol); > compare_values(norm_nre_start, mol.nuclear_repulsion_energy(), 3, 'start nre'); > compare_values(norm_e_start, get_variable('CURRENT ENERGY'), 5, 'start ene'); > compare_values(norm_rmsg_start, g0.rms(), 4, 'start rms grad'); > compare_matrices(norm_g_start, g0, 3, 'start grad'); > ; > def test_zero_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); > compare_values(e_opt, get_variable('CURRE",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-195966638:2396,optimiz,optimized,2396,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638,1,['optimiz'],['optimized']
Performance,"master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of 404 (Not Found); index.html:368 Uncaught ReferenceError: $ is not defined; http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); Is anyone else seeing this problem? Possibly related?. —AJ. On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (notifications@github.com) wrote:. I'm not observing any of this behavior, so just to clarify: does anyone; actually get this ""redirection"" when you enter ""psicode.org"" on your URL; bar? Or do you just get this when you search for PSI4 on; Google/Yahoo/Bing? NB: When I put ""PSI4"" in those search engines, I get; only our correct site for the first page of hits (except for the Wikipedia; page on ""Psi4 Aurigae""). And yes, we have control of the domain via; godaddy.com. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Thu, Apr 14, 2016 at 11:33 AM, Ben Pritchard notifications@github.com; wrote:. > Also confirming here, also on yahoo/bing. Can someone make sure we still; > have control of the domain name? Whois is still showing it registered to; > David Sherrill, and it still shows it going to godaddy, but it won't hurt; > to make sure; > ; > —; > You are re",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210015028:2420,load,load,2420,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028,1,['load'],['load']
Performance,"master/cmake/math/MathLibsFunctions.cmake#L59-L73) if triggered by a cmake var.; * MKL in general needs `-Wl,--start-group` and `-Wl,--end-group` passed to the linker around the math libs to resolve circular dependencies. Supposedly this can be conveyed to cmake directly with https://cmake.org/cmake/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication could be conda pkgs (even numpy) that are already in env and complicating the link loader's tasks. But we really shouldn't be telling ppl about preloading, which is bad practice for non-dire situations. @ryanmrichard [put in something](https://github.com/psi4/psi4/pull/513/files#diff-bb0d8c2ec987bfc58b4a943e453ea132L147) to preferentially detect the runtime lib as a bandaid to this.; * People for whom Bast math detection works fine but cmake FindLapack doesn't (namely, @psi-rking and [this fellow](http://forum.psicode.org/t/problem-with-building-from-source-according-to-cmakelists-txt/352/10) are having problems with libefp and CheMPS2 because different (or no) math libs are being inserted from those dependencies. I can forward the Bast libs to those external projects, but that'll cause some complications with the exported targets. I can fix that, but I fear that cmake will optimize away my start/end-groups again if they appear more than once. I am _not_ working on this right now, but I will have to, at a minimum, apply ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537:2081,load,loader,2081,https://psicode.org,https://github.com/psi4/psi4/issues/537,1,['load'],['loader']
Performance,"mentation_2018/en/debugger//gdb-igfx/info/; CC=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-cc; XDG_RUNTIME_DIR=/run/user/1000; READELF=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-readelf; GCC_AR=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-gcc-ar; OBJDUMP=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-objdump; LESSCLOSE=/usr/bin/lesspipe %s %s; GPROF=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-gprof; FFLAGS=-fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe; GXX=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-g++; I_MPI_ROOT=/home/termo/intel/compilers_and_libraries_2018.2.199/linux/mpi; _=/usr/bin/printenv; ```. cat /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; ```; # psi4DepsIntelCache.cmake; # ------------------------; #; # This module sets some likely variable values to initialize the CMake; # cache for dependencies to build your Psi4 source.; # Note that this uses user-provided (non-conda) tools.; #; # See ``psi4-path-advisor`` (or cmake command below) for use.; #; # >>> /home/termo/miniconda3/envs/p4dev35/bin/cmake \; # -H. \; # -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake \; # -Bobjdir; #. set(CMAKE_C_COMPILER ""icc"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""icpc"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER ""ifort"" CACHE STRING """"). set(CMAKE_C_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_Fortran_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"). #set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448:10066,cache,cache,10066,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448,1,['cache'],['cache']
Performance,merge queue preparation,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2922:6,queue,queue,6,https://psicode.org,https://github.com/psi4/psi4/pull/2922,1,['queue'],['queue']
Performance,"metric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:2928,optimiz,optimizer,2928,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792,16,['optimiz'],"['optimize', 'optimizer']"
Performance,"mizationInput, QCInputSpecification; import qcengine; from openff.units import unit; import numpy. def log_memory_usage():; process = psutil.Process(); print(f""Memory Usage: {process.memory_info().rss / 1024 ** 2} MB"", flush=False). def xtb_ff_opt(qc_mol: QCMolecule) -> QCMolecule:; """"""; Runs an xtb ff optimisation on the conformer using the qc_engine wrapper. . Parameters; ----------; conformer_no; The conformer number in the molecule to run the optimisation on. . Returns; -------; The ff optimised conformer. ; """"""; xtb_model = Model(method=""gfn2-xtb"", basis=None); keywords = {""verbosity"": ""muted""}; return qcengine_opt(; qc_mol=qc_mol, model=xtb_model, program=""xtb"", spec_keywords=keywords; ). def qcengine_opt(qc_mol: QCMolecule, model: Model, program: str, spec_keywords: dict[str, str]) -> QCMolecule:; """"""; A general function to run an optimisation via qcengine.; """"""; spec = QCInputSpecification(model=model, keywords=spec_keywords, driver=""gradient""); opt_spec = OptimizationInput(; initial_molecule=qc_mol,; input_specification=spec,; keywords={""coordsys"": ""dlc"", ; ""program"": program; } ; ); opt = qcengine.compute_procedure(opt_spec, ""geometric"", local_options = { ""memory"": 4, ; ""ncores"": 1}, ; raise_error=True); print(opt); return opt.final_molecule. def generate_grid(molecule: Molecule ,conformer: unit.Quantity, grid_settings: LatticeGridSettings) -> unit.Quantity:; """"""; Generates the grid for the ESP. . Parameters; ----------; conformer; The conformer which the grid needs to be generated on. Returns; -------; The grid. ; """"""; grid = GridGenerator.generate(molecule, conformer, grid_settings); #returns grid in Angstrom; return grid. def main():; ; smiles_list = ['CCO',; 'CC#N',; 'CCCN',; 'CCCOC',; 'CCOCC',; 'c1ccccc1C',; 'Cc1ccccc1C',; 'c1ccc(cc1)C#N',; 'CN(C=O)C',; 'C1=CC=CO1',; 'c1ccccc1N',; 'CCCO',; 'CC(C)CC',; 'CN',; 'CC(C)=O',; 'CC(O)C',; 'CS(=O)C',; 'CCS',; 'CCF',; 'CC(F)(F)F',; 'CCC(C)Cl',; 'CC(Cl)CCl',; 'CCCBr',; 'CCC(Br)(C)(C)',; 'C(C)(C)(Br)C',; 'C(F)(F)(",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3146:6019,Optimiz,OptimizationInput,6019,https://psicode.org,https://github.com/psi4/psi4/issues/3146,1,['Optimiz'],['OptimizationInput']
Performance,"mize()` function. In addition, a dictionary of GeomeTRIC-specific keywords and options (like constraints) may be passed to the optimizer. The `test_h2o_constrained` pytest demonstrates how this is done. . ```; e = optimize(..., engine=`geometric`, optimizer_keywords={...}); ```; Output is consistent with Psi4's default geometry optimization:; <details><summary>Example result </summary>; <p>. ```; >>> grep ""~"" output.dat. ==> GeomeTRIC Optimizer <== ~; Psi4 convergence criteria QCHEM not recognized by GeomeTRIC, switching to GAU_TIGHT ~; Measures of convergence in internal coordinates in au. ~; Criteria marked as inactive (o), active & met (*), and active & unmet ( ). ~; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 1.50e-05 1.00e-05 6.00e-05 4.00e-05 ~; --------------------------------------------------------------------------------------------- ~; 0 -7.64427364e+01 -------- 5.01e-02 4.03e-02 -------- -------- ~; 1 -7.64446505e+01 -1.91e-03 2.68e-03 1.95e-03 3.06e-02 2.16e-02 ~; 2 -7.64446681e+01 -1.77e-05 5.27e-04 4.17e-04 4.22e-03 3.98e-03 ~; 3 -7.64446684e+01 -3.06e-07 * 2.27e-05 2.03e-05 4.11e-04 2.93e-04 ~; 4 -7.64446684e+01 6.91e-10 * 3.28e-06 * 2.74e-06 * 1.78e-05 * 1.49e-05 * ~; Optimization converged! ~. ```. </p>; </details>. ## Todos; - [x] Working GeomeTRIC interface; - [x] Improved printing and error handling; - [x] Pytest(s); - [x] Constrained optimizations; - [x] Process GeomeTRIC keywords in Psi4 input; - [x] Composite energy calls (CBS, etc.); - [x] Documentation. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813:1666,Optimiz,Optimization,1666,https://psicode.org,https://github.com/psi4/psi4/pull/1813,2,"['Optimiz', 'optimiz']","['Optimization', 'optimizations']"
Performance,"mize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/driver.py:691: in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:784: in select_ccsd_gradient; return func(name, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2314: in run_ccenergy_gradient; ccwfn = run_ccenergy(name, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2262: in run_ccenergy; ref_wfn = scf_helper(name, **kwargs) # C1 certified; miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1289: in scf_helper; old_wfn = core.Wavefunction.from_file(read_filename); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/p4util/python_helpers.py:156: in _core_wavefunction_from_file; wfn_data = np.load(wfn_data).item(); miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/npyio.py:447: in load; pickle_kwargs=pickle_kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. fp = <_io.BufferedReader name='/tmp/pytest_output.default.14086.180.npy'>, allow_pickle = False; pickle_kwargs = {'encoding': 'ASCII', 'fix_imports': True}. def read_array(fp, allow_pickle=False, pickle_kwargs=None):; """"""; Read an array from an NPY file. Parameters; ----------; fp : file_like object; If this is not a real file object, then this may take extra memory; and time.; allow_pickle : bool, optional; Whether to allow writing pickled data. Default: False. .. versionchanged:: 1.16.3; Made default False in response to CVE-2019-6446. pickle_kwargs : dict; Additional keyword arguments to pass to pickle.load. These are only; useful when loading object arrays saved on Python 2 when using; Python 3. Returns; -------; array : ndarray; The array",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611:5008,load,load,5008,https://psicode.org,https://github.com/psi4/psi4/issues/1611,1,['load'],['load']
Performance,"mized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #321 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=3, args=0x7fff1128bb50, callable=0x7fac0e363490, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #322 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363490, vargs=0x7fff1128bbe0) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #323 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9a80 <PyId__handle_fromlist.13>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #324 0x000055ff905b230b in PyImport_ImportModuleLevelObject (name=name@entry=0x7fac0e308030, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fac0e1aede0, ; level=1) at /usr/local/src/conda/python-3.10.14/Python/import.c:1694; #325 0x000055ff9067536b in import_name (level=0x7fac0e3000f0, fromlist=0x7fac0e1aede0, name=0x7fac0e308030, f=0x7fac0e1fccc0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #326 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e1fccc0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #327 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e1fccc0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #328 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128bf60, locals=locals@entry=0x7fac0e072700, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #329 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fac0e1b7050, globals=globals@entry=0x7fac0e072700, locals=locals@entry=0x7fac0e072700); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #330 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, local",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:68428,optimiz,optimized,68428,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"mized out>, args=<optimized out>, locals=0x0, con=0x7fabd8177800, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #16 _PyFunction_Vectorcall (func=0x7fabd81777f0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #17 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd84ecf40, callable=0x7fabd81777f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #18 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd84ecf40, callable=0x7fabd81777f0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #19 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112861e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #20 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd84ecdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #21 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabd84ecdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #22 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112862e0, locals=locals@entry=0x7fabd7bced00, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #23 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd78907c0, globals=globals@entry=0x7fabd7bced00, locals=locals@entry=0x7fabd7bced00); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #24 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd7bced00, globals=0x7fabd7bced00, source=0x7fabd78907c0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #25 builtin_exec (module=<optimized out>, args=<optimized ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:9252,optimiz,optimized,9252,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"mized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #77 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #78 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #79 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #80 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287430, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #81 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6eae0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #82 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6eae0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #83 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #84 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #85 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #86 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630) ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:21138,optimiz,optimized,21138,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"mized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #45 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #46 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #47 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #48 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112869c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #49 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd88a0a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #50 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd88a0a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #51 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #52 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #53 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #54 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0) ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:14910,optimiz,optimized,14910,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"mized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #91 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #92 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #93 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #94 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287790, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #95 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918c40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #96 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918c40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #97 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #98 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #99 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #100 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:23864,optimiz,optimized,23864,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"mized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #52 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #53 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #54 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #55 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286b70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #56 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32d40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #57 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b32d40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #58 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #59 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #60 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11286ca0, callable=0x7fac0e363370, tstate=0x55ff9515e050); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #61 object_vacall (tstate=tstate@entry=0x55ff9515e050, b",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:16240,optimiz,optimized,16240,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"mized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #38 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #39 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #40 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #41 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286810, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #42 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8890fc0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #43 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8890fc0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #44 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #45 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #46 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #47 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0) ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:13580,optimiz,optimized,13580,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"molecule {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; }. set basis def2-sv(p). optimize('pbe0'). With the lastest numpy 1.16.3 from conda, I get ""; Traceback (most recent call last):; File ""/home/psi4/envs/psi4/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1052, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 691, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2064, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2002, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 1289, in scf_helper; old_wfn = core.Wavefunction.from_file(read_filename); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/psi4/driver/p4util/python_helpers.py"", line 156, in _core_wavefunction_from_file; wfn_data = np.load(wfn_data).item(); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/numpy/lib/npyio.py"", line 447, in load; pickle_kwargs=pickle_kwargs); File ""/home/psi4/envs/psi4/lib//python3.6/site-packages/numpy/lib/format.py"", line 692, in read_array; raise ValueError(""Object arrays cannot be loaded when "". ValueError: Object arrays cannot be loaded when allow_pickle=False; "". When I downgrade to 1.16.2, I get no error. Release note of numpy 1.16.3: ; ""The most noticeable change in this release is that unpickling object arrays; when loading *.npy or *.npz files now requires an explicit opt-in.; This backwards incompatible ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1610:136,optimiz,optimize,136,https://psicode.org,https://github.com/psi4/psi4/issues/1610,2,['optimiz'],['optimize']
Performance,"my 2 cents on this:; The geometry you posted looks broken to me (too long 'bonds'). I'd guess the optimizer had some troubles displacing the geometry correctly.; Often it is enough to set `opt_coordinates both`, which mixes cartesian and redundant coordinates.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-953037136:98,optimiz,optimizer,98,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953037136,1,['optimiz'],['optimizer']
Performance,"n I use two different step sizes for the finite difference (1e-3 and 1e-4 a.u., both using central (3-point) finite difference; see fd-ana-grad.txt file in attached data.zip). By contrast, for a different system (a water dimer calculated at HF/STO-3G), the max difference between numerical and analytic gradients using a 1e-3 step size is around 1e-6. I've attached a picture where the numerical gradient, analytic gradient, and the difference are visualized. The difference is mainly on the La and Br atoms, with smaller components on the other atoms. These forces do not appear to be purely translational/rotational, but I think there is a translational/rotational component because the ""trajectory"" of the optimization appears to include some translational/rotational motion as well as distortion (attached qce_optim.xyz in data.zip). ![1](https://github.com/psi4/psi4/assets/1441560/e3dea159-d922-40c8-bad9-868b20f710e3). Although the gradient difference in this case is larger than geomeTRIC's convergence criterion for the RMS / max gradient, a smaller difference of 1e-5 to 1e-4 could still cause a failure to converge by causing the optimizer to take incorrect steps with step sizes larger than the convergence criterion for the displacement. I suspect these subtle errors are also occurring in DFT calculations on organic molecules, but because the errors are smaller there, the convergence failures do not happen consistently but only occasionally. (I can provide another example for an organic molecule if needed.). As an aside, I ran the geometry optimization in Q-Chem with the same settings (except Q-Chem does not use DF-SCF) and the optimization converged in 83 steps (attached qchem/ subfolder in data.zip). It would be really great if the development team could look at this. An improvement in the accuracy of DFT gradients would lead to great improvements in geometry optimization performance. . Thanks,. - Lee-Ping. [data.zip](https://github.com/psi4/psi4/files/13192796/data.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3066:2208,optimiz,optimizer,2208,https://psicode.org,https://github.com/psi4/psi4/issues/3066,5,"['optimiz', 'perform']","['optimization', 'optimizer', 'performance']"
Performance,"n constraints_dict:; raise ValueError(""No scan!""); Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want to build another [Engine](htt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:2506,optimiz,optimizer,2506,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792,1,['optimiz'],['optimizer']
Performance,"n faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file: ; > > ; > > molecule f { ; > > f 0.00 0.00 0.00 ; > > } ; > > set basis cc-pVTZ ; > > set scf reference uhf ; > > energy('ccsd') ; > > (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault). ; > > ; > > Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem. ; > > ; > > Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc. ; > > ; > > Full backtrace from gdb: ; > > ; > > (gdb) where ; > > #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6 ; > > #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134 ; > > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630) ; > > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50 ; > > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0) ; > > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99 ; > > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307 ; > > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171 ; > > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429 ; > > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>) ; > > at /usr/include/boost/python/detail/invoke.hpp:75 ; > > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:1628,optimiz,optimized,1628,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,1,['optimiz'],['optimized']
Performance,"n gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:784: in select_ccsd_gradient; return func(name, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2314: in run_ccenergy_gradient; ccwfn = run_ccenergy(name, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2262: in run_ccenergy; ref_wfn = scf_helper(name, **kwargs) # C1 certified; miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1289: in scf_helper; old_wfn = core.Wavefunction.from_file(read_filename); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/p4util/python_helpers.py:156: in _core_wavefunction_from_file; wfn_data = np.load(wfn_data).item(); miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/npyio.py:447: in load; pickle_kwargs=pickle_kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. fp = <_io.BufferedReader name='/tmp/pytest_output.default.14086.180.npy'>, allow_pickle = False; pickle_kwargs = {'encoding': 'ASCII', 'fix_imports': True}. def read_array(fp, allow_pickle=False, pickle_kwargs=None):; """"""; Read an array from an NPY file. Parameters; ----------; fp : file_like object; If this is not a real file object, then this may take extra memory; and time.; allow_pickle : bool, optional; Whether to allow writing pickled data. Default: False. .. versionchanged:: 1.16.3; Made default False in response to CVE-2019-6446. pickle_kwargs : dict; Additional keyword arguments to pass to pickle.load. These are only; useful when loading object arrays saved on Python 2 when using; Python 3. Returns; -------; array : ndarray; The array from the data on disk. Raises; ------; ValueError; If the data is invalid, or allow_pickle=False and the file contains; an object array. """"""; version = read_magic",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611:5106,load,load,5106,https://psicode.org,https://github.com/psi4/psi4/issues/1611,1,['load'],['load']
Performance,"n removed, as have ""MP2"" variables from double-hybrid DFT final return (#1445); - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY` (#1445); - Dunning basis updates for Li, Be, Na, Mg (#1559); - S^Inf 2nd-order Dispersion and Exchange-Dispersion for SAPT (#1490); - Enable LGTM static analysis; - Add qcvars to wavefunction (not just globals) for CI, CheMPS2, PsiMRCC, DFT, scf_helper, DFMP2, OEPROP, DETCI. Add functional-including qcvars for DFT (#1570, #1445); - Add option `PARENT_SYMMETRY` to replace a global. Don't use it directly (#1575); - Driver sow/reap for optimize, database which never worked for py3 removed (#1583); - Add 6-311G(2df, <any>) for 2nd row atoms (#1531); - Improve printing and guess for r_e for the `diatomic` procedure (#1601); - Response code cleaned to use Hessian-vector products (#1550); - Enable running pytest in parallel via `psi4 --test -n<N>` if package `pytest-xdist` installed (#1612); - Considerable code-cleanup at LGTM's prompting (#1618, #1633, #1631, #1616, #1617, #1624, #1620, #1622, #1627, #1639, #1630, #1629, #1636, #1632, #1626, #1619, #1625, #1623, #1634, #1650, #1651, #1621, #1655); - Considerable memory-leak cleanup at CPPCHECK's prompting (#1534) and a bit more at valgrind's prompting (#1755); - moved code to QCA; - molecule alignment code (#1644); - `QCAspect` refined into `qcel.Datum` (#1654); - use code from QCA; - testing functions dropped in favor of wrapping qcelemental testing functions. also, can choose between conventional Psi4 testing API and QCA API (#1644); - Windows testing and build (#1648); - Add CSAM screening to ERISieve as alternative to Schwarz. Turn on with `set screening csam` (#1499); - New Bragg-Slater (BS) radii change DFT total energies slightly (#1591); - Extend `SAD_SCF_TYPE` to all usual `SCF_TYPE` types by using exact or DF integrals under the hood (#1477).; - Implement quadrature weights cutoff at 1.e-15, which together with p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:4794,optimiz,optimize,4794,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['optimiz'],['optimize']
Performance,"n, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018) (10.1016/j.softx.2017.11.002). => Composite Functional: B3LYP-D3ZERO <= . B3LYP-d3zero Hyb-GGA Exchange-Correlation Functional. P. J. Stephens, F. J. Devlin, C. F. Chabalowski, and M. J. Frisch, J. Phys. Chem. 98, 11623 (1994) (10.1021/j100096a001). Deriv = 1; GGA = TRUE; Meta = FALSE. Exchange Hybrid = TRUE; MP2 Hybrid = FALSE. => Exchange Functionals <=. 0.0800 Slater exchange; 0.7200 Becke 88. => Exact (HF) Exchange <=. 0.2000 HF . => Correlation Functionals <=. 0.1900 Vosko, Wilk & Nusair (VWN5_RPA); 0.8100 Lee, Yang & Parr. => LibXC Density Thresholds <==. XC_HYB_GGA_XC_B3LYP: 1.00E-15 . => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = NONE; Nuclear Scheme = TREUTLER. Blocking Scheme = OCTREE; BS radius alpha = 1; Pruning alpha = 1; Radial Points = 75; Spherical Points = 302; Total Points = 1908346; Total Blocks = 13882; Max Points = 256; Max Functions = 485; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (6-31G AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-4, 9-12, 21-24, 33-34 entry H line 51 file PATH\envs\psi4\lib\share\psi4\basis\cc-pvdz-jkfit.gbs ; atoms 5-8, 13-20, 25-32, 35-36 entry C line 121 file PATH\envs\psi4\lib\share\psi4\basis\cc-pvdz-jkfit.gbs ; atoms 37-38, 41-42, 45-46, 49-50, 53-54, 57-58, 61-62, 65-66, 69-70, 73-74, 77-78, 81-82, 85-86, 89-90, 93-94, 97-98 entry CL line 667 file PATH\envs\psi4\lib\share\psi4\basis\cc-pvdz-jkfit.gbs ; atoms 39-40, 43-44, 47-48, 51-52, 55-56, 59-60, 63-64, 67-68, 71-72, 75-76, 79-80, 83-84, 87-88, 91-92, 95-96, 99-100 entry NA line 498 file PATH\envs\psi4\lib\share\psi4\basis\def2-universal-jkfit.gbs . ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 4; Integrals threads: 4; Memory [MiB]: 16093; Algorithm: Disk; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (6-31G AUX);",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2709:18900,Load,Loading,18900,https://psicode.org,https://github.com/psi4/psi4/issues/2709,1,['Load'],['Loading']
Performance,"n-3.10.14/Objects/call.c:734; #108 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #109 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd887f0f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #110 PyImport_ImportModuleLevelObject (name=0x7fabd887f0f0, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #111 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #112 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #113 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fabd8a583d0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #114 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8a583d0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; --Type <RET> for more, q to quit, c to continue without paging--; #115 0x000055ff90677205 in do_call_core (kwdict=0x7fabd88870c0, callargs=0x7fabd8a583d0, func=0x7fac0e3989a0, trace_info=0x7fff11287e40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #116 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95de00f0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #117 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95de00f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #118 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:27226,optimiz,optimized,27226,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"n-3.10.14/Objects/call.c:734; #228 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #229 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd8928710, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #230 PyImport_ImportModuleLevelObject (name=0x7fabd8928710, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #231 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #232 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #233 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fabd8e6c550, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #234 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8e6c550, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #235 0x000055ff90677205 in do_call_core (kwdict=0x7fabd89038c0, callargs=0x7fabd8e6c550, func=0x7fac0e3989a0, trace_info=0x7fff1128a240, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #236 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b81240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #237 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b81240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #238 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:50550,optimiz,optimized,50550,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"n/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option PSI4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.3"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so (found suitable version ""2.7.3"", minimum required is ""2"") ; -- Suitable pybind11 could not be located, building one instead.; -- Suitable libint could not be located, building one instead.; -- Suitable libefp could not be located, building one instead.; -- Try OpenMP C flag = [-qope",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261733153:1175,Perform,Performing,1175,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153,2,['Perform'],['Performing']
Performance,"n3.6/site-packages/psi4/driver/driver.py:556: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/snsmp2/snsmp2.py:81: in run_sns_mp2; m1mhigh = c.compute('m1', 'm', 'high', mp2=True, mp2_dm=True); miniconda3/envs/psi/lib/python3.6/site-packages/snsmp2/wavefunctioncache.py:386: in compute; self._init_ns(calc); miniconda3/envs/psi/lib/python3.6/site-packages/snsmp2/wavefunctioncache.py:143: in _init_ns; return self._init_upcast_C(oldcalc=candidate, calc=calc); miniconda3/envs/psi/lib/python3.6/site-packages/snsmp2/wavefunctioncache.py:172: in _init_upcast_C; new_wfn = self._basis_projection(oldcalc, calc); miniconda3/envs/psi/lib/python3.6/site-packages/snsmp2/wavefunctioncache.py:187: in _basis_projection; old_wfn = core.Wavefunction.from_file(read_filename); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/p4util/python_helpers.py:156: in _core_wavefunction_from_file; wfn_data = np.load(wfn_data).item(); miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/npyio.py:447: in load; pickle_kwargs=pickle_kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. fp = <_io.BufferedReader name='pytest_output.m1-m-low.14086.180.npy'>, allow_pickle = False; pickle_kwargs = {'encoding': 'ASCII', 'fix_imports': True}. def read_array(fp, allow_pickle=False, pickle_kwargs=None):; """"""; Read an array from an NPY file. Parameters; ----------; fp : file_like object; If this is not a real file object, then this may take extra memory; and time.; allow_pickle : bool, optional; Whether to allow writing pickled data. Default: False. .. versionchanged:: 1.16.3; Made default False in response to CVE-2019-6446. pickle_kwargs : dict; Additional keyword arguments to pass to pickle.load. These are only; useful when loading object arrays saved on Python 2 when using; Python 3. Returns; -------; array : ndarray; The array fro",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611:1612,load,load,1612,https://psicode.org,https://github.com/psi4/psi4/issues/1611,1,['load'],['load']
Performance,"n::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132 ; > > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0 ; > > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084 ; > > #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283 ; > > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086 ; > > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0) ; > > at Python/ceval.c:3433 ; > > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633 ; > > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084 ; > > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0) ; > > at Python/ceval.c:4378 ; > > #27 PyEval_EvalFrameEx (f=",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:5099,optimiz,optimized,5099,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,1,['optimiz'],['optimized']
Performance,"na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283 ; > > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086 ; > > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0) ; > > at Python/ceval.c:3433 ; > > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633 ; > > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084 ; > > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0) ; > > at Python/ceval.c:4378 ; > > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720 ; > > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433 ; > > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161 ; > > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084 ; > > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:5942,optimiz,optimized,5942,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,3,['optimiz'],['optimized']
Performance,"nalysis to disk in a "".vibrec"" file; ​; # molecule h2odim {; # O -1.551007 -0.114520 0.000000; # H -1.934259 0.762503 0.000000; # H -0.599677 0.040712 0.000000; # --; # 0 1; # O 1.350625 0.111469 0.000000; # H 1.680398 -0.373741 -0.758561; # H 1.680398 -0.373741 0.758561; # units angstrom; # }; ​; # set basis sto-3g; # set e_convergence 9; # set g_convergence gau_verytight; ​; # optimize('mp2', molecule=h2odim); ​; ​; # e, wfn = freq('mp2', molecule=h2odim, return_wfn=True); ​; # set hessian_write on; # vibanal_wfn(wfn, molecule=h2odim); ​; # # A. print all the vib-related info from original `e, wfn = freq()` call; # for k, v in wfn.frequency_analysis.items():; # print(v); ​; # # B. `set hessian_write on` above wrote all the vib- & thermo-related info from last analysis.; # # now, print all the vib- & thermo-related info from that file; # with open(core.get_writer_file_prefix(h2odim.name()) + "".vibrec"") as handle:; # import json; # jsondata = json.load(handle); # jsondata = {k: (v if k in ['molecule', 'hessian'] else json.loads(v)) for k, v in jsondata.items()}; ​; # for k, v in jsondata.items():; # print(k, v); ​; ​; # In[ ]:; ​; ​; import json; with open(""freq_demo.h2odim.6436.vibrec"") as fp:; vibs = json.load(fp); ​; ​; # In[ ]:; ​; ​; # See all the vibrational analysis contents; vibs; ​; ​; # In[ ]:; ​; ​; vibs; vibs[""molecule""][""elez""]; nat = len(vibs[""molecule""][""elez""]); ndof = nat * 3; vibs[""molecule""][""geom""]; ​; ​; # In[ ]:; ​; ​; # load Cartesian normal modes matrix into numpy and reshape it; import numpy as np; import qcelemental as qcel; from qcelemental import Datum; datum_x = json.loads(vibs[""x""])[""data""]; len(datum_x); datum_x = np.array(datum_x).reshape((ndof, ndof)).T.round(2); datum_x; ​; ​; # In[ ]:; ​; ​; # form ugly XYZ file strings for each mode where; # * first col is atomic symbol,; # * cols 2-4 are geometry in Ang,; # * and 5-7 are displacement; # * note that XYZ file strings are in list `xyzs` that is 1-indexed; geom = np.array(vibs[""molec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131:1658,load,load,1658,https://psicode.org,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131,1,['load'],['load']
Performance,"ncs; 4 from .backends.api import (; 5 load_dataarray,. [/usr/local/lib/python3.7/dist-packages/xarray/tutorial.py](https://localhost:8080/#) in <module>(); 11 import numpy as np; 12 ; ---> 13 from .backends.api import open_dataset as _open_dataset; 14 from .backends.rasterio_ import open_rasterio as _open_rasterio; 15 from .core.dataarray import DataArray. [/usr/local/lib/python3.7/dist-packages/xarray/backends/__init__.py](https://localhost:8080/#) in <module>(); 4 formats. They should not be used directly, but rather through Dataset objects.; 5 """"""; ----> 6 from .cfgrib_ import CfGribDataStore; 7 from .common import AbstractDataStore, BackendArray, BackendEntrypoint; 8 from .file_manager import CachingFileManager, DummyFileManager, FileManager. [/usr/local/lib/python3.7/dist-packages/xarray/backends/cfgrib_.py](https://localhost:8080/#) in <module>(); 14 _normalize_path,; 15 ); ---> 16 from .locks import SerializableLock, ensure_lock; 17 from .store import StoreBackendEntrypoint; 18 . [/usr/local/lib/python3.7/dist-packages/xarray/backends/locks.py](https://localhost:8080/#) in <module>(); 11 ; 12 try:; ---> 13 from dask.distributed import Lock as DistributedLock; 14 except ImportError:; 15 DistributedLock = None. [/usr/local/lib/python3.7/dist-packages/dask/distributed.py](https://localhost:8080/#) in <module>(); 1 # flake8: noqa; 2 try:; ----> 3 from distributed import *; 4 except ImportError:; 5 msg = (. [/usr/local/lib/python3.7/dist-packages/distributed/__init__.py](https://localhost:8080/#) in <module>(); 1 from __future__ import print_function, division, absolute_import; 2 ; ----> 3 from . import config; 4 from dask.config import config; 5 from .actor import Actor, ActorFuture. [/usr/local/lib/python3.7/dist-packages/distributed/config.py](https://localhost:8080/#) in <module>(); 18 ; 19 with open(fn) as f:; ---> 20 defaults = yaml.load(f); 21 ; 22 dask.config.update_defaults(defaults). TypeError: load() missing 1 required positional argument: 'Loader'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2510:7477,load,load,7477,https://psicode.org,https://github.com/psi4/psi4/issues/2510,3,"['Load', 'load']","['Loader', 'load']"
Performance,"nction_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke(boost::detail::function::function_buffer&, boost::python::detail::exception_handler const&, boost::function0<void> const&) (); #9 0x0000000005556d54 in boost::python::handle_exception_impl(boost::function0<void>) (); #10 0x000000000554d0fe in function_call (); #11 0x00006a91c37de333 in PyObject_Call (func=0x9231260, arg=<optimized out>, kw=<optimized out>) at Objects/abstract.c:2529; #12 0x00006a91c388d4b2 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x712c327ea368, func=0x9231260) at Python/ceval.c:4253; #13 call_function (oparg=<optimized out>, pp_stack=0x712c327ea368) at Python/ceval.c:4058; #14 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #15 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91b94db9b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=1, kws=0x92f85c8, kwcount=1, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #16 0x00006a91c388e3fa in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x712c327ea568, func=0x6a91b8cca488) at Python/ceval.c:4131; #17 call_function (oparg=<optimized out>, pp_stack=0x712c327ea568) at Python/ceval.c:4056; #18 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #19 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91c45356b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=0, kws=0x0, kwcount=0, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #20 0x00006a91c388fed2 in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at Python/ceval.c:669; #21 0x00006",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:2447,optimiz,optimized,2447,https://psicode.org,https://github.com/psi4/psi4/issues/153,2,['optimiz'],['optimized']
Performance,"nd fills in defaults, emitting a standardized (to become MolSSI JSON) molrec dict. Plain fn produces dict. `psi4.core.Molecule.from_arrays` and `qcdb.Molecule.from_arrays` go a step further and return a Mol.; - Function `validate_and_fill_chgmult` addresses current problems (1) create_mol_from_string's problem of not allowing overall chgmult to be set, defaulting all frag to `0 1`, and defaulting overall to fragA, (2) physical reasonableness (chg/mult/#elec compatible) not being tested for fragments at all and for overall not until the SCF code, (3) problems like psi4/psi4#114, and (4) overall and frag chgmult getting out of whack upon set_chg/mult, extract_subsets, not having frag chgmult editable, scf singlet/doublet defaulting. Taking given tot/frag chg/mult info and reasoning out the missing info would have been massive logic for chg/mult/#elec simultaneously, so this just codes up the rules and the defaults and throw `itertools.product` at it. Slows down a bit by 10 frag, but there's room for performance optimization. Ideally we'd call this at every reinterpret_coordentry, but that's not feasible for psi4 Mol. A good newdev starter project would be (for impossible reconciliations) to keep track of the least offending combo, and print out a summary of what rules it's violating.; - Function `reconcile_nucleus` addresses problems (1) can't specify atoms by atomic number, (2) can't specify masses by mass number, (3) faced with A, Z, E, real/ghost, and label `@C_special@12.1`, all as inputs, need to make sure (a) extracting as much user info as possible, (b) not allowing contradictory info, and (c) filling in everything else from periodictable. Like chgmult, fn handles this by defining rules and candidate values, and letting itertools do the rest. Expand atom label spec so can specify isotope and atomic number e.g., `Gh(27@58.933)` or `2H_deut`.; - Validates atoms-too-close all at once, rather than per-atom, which can run into units, coordsys, and? old CoordEntry tr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:5992,perform,performance,5992,https://psicode.org,https://github.com/psi4/psi4/pull/834,2,"['optimiz', 'perform']","['optimization', 'performance']"
Performance,"nda/python-3.10.14/Objects/call.c:824; #109 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd887f0f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #110 PyImport_ImportModuleLevelObject (name=0x7fabd887f0f0, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #111 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #112 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #113 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fabd8a583d0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #114 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8a583d0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; --Type <RET> for more, q to quit, c to continue without paging--; #115 0x000055ff90677205 in do_call_core (kwdict=0x7fabd88870c0, callargs=0x7fabd8a583d0, func=0x7fac0e3989a0, trace_info=0x7fff11287e40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #116 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95de00f0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #117 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95de00f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #118 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #119 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nar",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:27445,optimiz,optimized,27445,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"nda/python-3.10.14/Objects/call.c:824; #229 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd8928710, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #230 PyImport_ImportModuleLevelObject (name=0x7fabd8928710, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #231 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #232 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #233 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fabd8e6c550, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #234 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8e6c550, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #235 0x000055ff90677205 in do_call_core (kwdict=0x7fabd89038c0, callargs=0x7fabd8e6c550, func=0x7fac0e3989a0, trace_info=0x7fff1128a240, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #236 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b81240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #237 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b81240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #238 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #239 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:50769,optimiz,optimized,50769,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ne; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so ; -- Using pybind11: /usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/include (version 2.0.0 for Py2.7.12 and -std=c++11) ; -- Using Python 2.7: /usr/bin/python ; -- Looking for include file pthread.h ; -- Looking for include file pthread.h - found ; -- Looking for pthread_create ; -- Looking for pthread_create - found ; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; -- Disabled CheMPS2 ; -- Disabled dkh ; -- Using libefp: /usr/qc/psi4.bin/lib/libefp.a (version 1.3.0) ; -- Disabled erd ; -- Disabled gdma ; -- Using libint: /usr/qc/psi4.bin/lib/libint.a (version 1.1.6) ; -- Configuring done ; -- Generating done ; ``` . And just for completeness the pybind11 part:. ```; [ 12%] Performing download step (git clone) for 'pybind11_external'; Cloning into 'pybind11_external'...; Note: checking out 'v2.0.0'. You are in 'detached HEAD' state. You can look around, make experimental; changes and commit them, and you can discard any commits you make in this; state without impacting any branches by performing another checkout. If you want to create a new branch to retain commits you create, you may; do so (now or later) by using -b with the checkout command again. Example:. git checkout -b <new-branch-name>. HEAD is now at e33ef9c... v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273732640:2350,Perform,Performing,2350,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640,1,['Perform'],['Performing']
Performance,"new basis elements for the singlet block all take the form (i->a α + i->a β) / sqrt(2), while the new basis elements for the triplet block take form (i->a α - i->a β) / sqrt(2).; 2. The electron potential is spin-free. Because the coulomb J and exchange K terms are expectation values of this, the associated integrals are spin free, assuming spin does not integrate to zero. For J, spin only integrates to zeroes if there is a spin mismatch in either the bra or the ket. Because we only consider Sz preserving excitations, no spin mismatches are possible. For K, a bra orbital needs to have the same spin as a ket orbital. Because both bra orbitals have the same spin, and both ket orbitals have the same spin, this requires that _all_ orbitals have the same spin. Meanwhile, the DFT V terms are second derivatives of the DFT energy with respect to orbital rotation generators. These are not spin-free.; 3. Now let's combine the two above facts. After performing the spin-integration in the triplet case, you end up with [(α|α) - (α|β) - (β|α) + (β|β)]. Upon exploiting spin-restriction, this reduces to [(α|α) - (α|β)]. For J, the second term is equal to the first, so the two cancel. For K, the second term is zero, so you have the first integral. For V, the two terms are neither equal nor zero. The V term cannot be neglected, even though it's normally added to the J term, which here is zero. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] V is still bundled with J, but the RSCF products now mark that they may need to get a J-like term. This is no longer equivalent to being singlet or not.; - [x] Several methods have been modified to have a singlet flag, necessary to pass to compure_Vx whether to compute the singlet or triplet term.; - [x] HF classes no longer have a `potential_` attribute. Ind",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2885:2213,perform,performing,2213,https://psicode.org,https://github.com/psi4/psi4/pull/2885,1,['perform'],['performing']
Performance,"ng C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Checking whether CXX compiler has -isysroot; -- Checking whether CXX compiler has -isysroot - yes; -- Checking whether CXX compiler supports OSX deployment target flag; -- Checking whether CXX compiler supports OSX deployment target flag - yes; -- Check for working CXX compiler: /usr/local/bin/g++-8; -- Check for working CXX compiler: /usr/local/bin/g++-8 -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option ENABLE_MSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:4094,Perform,Performing,4094,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308,1,['Perform'],['Performing']
Performance,"ng(psi::Options&) () from /u/en/taube/c7dpr/prefixes/psi4/1.3.2-desres03-c7/lib/psi4/core.cpython-37m-x86_64-linux-gnu.so; #3 0x00007fffdf472f9f in py_psi_optking() () from /u/en/taube/c7dpr/prefixes/psi4/1.3.2-desres03-c7/lib/psi4/core.cpython-37m-x86_64-linux-gnu.so; #4 0x00007fffdf48fe51 in void pybind11::cpp_function::initialize<int (*&)(), int, , pybind11::name, pybind11::scope, pybind11::sibling, char [58]>(int (*&)(), int (*)(), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, char const (&) [58])::{lambda(pybind11::detail::function_call&)#1}::_FUN(pybind11::detail::function_call&) () from /u/en/taube/c7dpr/prefixes/psi4/1.3.2-desres03-c7/lib/psi4/core.cpython-37m-x86_64-linux-gnu.so; #5 0x00007fffdeff6104 in pybind11::cpp_function::dispatcher(_object*, _object*, _object*) () from /u/en/taube/c7dpr/prefixes/psi4/1.3.2-desres03-c7/lib/psi4/core.cpython-37m-x86_64-linux-gnu.so; #6 0x00007ffff7919e63 in _PyMethodDef_RawFastCallKeywords (method=0x99e900, self=<optimized out>, args=0x110b5f8, nargs=0, kwnames=<optimized out>) at Objects/call.c:690; #7 0x00007ffff7919ee5 in _PyCFunction_FastCallKeywords (func=0x7fffeffd03a8, args=<optimized out>, nargs=<optimized out>, kwnames=<optimized out>) at Objects/call.c:730; #8 0x00007ffff78f2178 in call_function (kwnames=0x0, oparg=0, pp_stack=<synthetic pointer>) at Python/ceval.c:4568; #9 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3093; #10 0x00007ffff7a02dec in _PyEval_EvalCodeWithName (_co=0x7fffc6816db0, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, argcount=1, kwnames=0x7fffeffadb58, kwargs=0x7ffff7f76b70, kwcount=3, kwstep=1, defs=0x0,; defcount=0, kwdefs=0x0, closure=0x0, name=0x7ffff7fc1830, qualname=0x7ffff7fc1830) at Python/ceval.c:3930; #11 0x00007ffff7919966 in _PyFunction_FastCallKeywords (func=<optimized out>, stack=<optimized out>, nargs=<optimized out>, kwnames=<optimized out>) at Objects/call.c:433; #12 0x0000",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878:3034,optimiz,optimized,3034,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878,2,['optimiz'],['optimized']
Performance,"nge the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ X ] Addition of computed_shells_ member to JK object, which keeps track of number of shells computed duri",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547:1522,perform,performed,1522,https://psicode.org,https://github.com/psi4/psi4/pull/2547,1,['perform'],['performed']
Performance,"no numbers, i just restarted the webserver some time ago and there was something about psi4 in the forwarded email. It brakes occasionally and I am still responsible for it. I will probably test the methods once it goes to the master. the choice of the scf algorithm was purely for practical reasons of getting the best performance in ORCA and/or Turbomole, i believe. RI-J combined with exact exchange is pretty good for these methods and their target molecule size.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/630#issuecomment-283086573:320,perform,performance,320,https://psicode.org,https://github.com/psi4/psi4/pull/630#issuecomment-283086573,1,['perform'],['performance']
Performance,"normal template, with default dummy parameters and many template specializations. This solution is very verbose (often orders of magnitude more lines of code than the variadic version) and is limited to about 10-20 parameters (depending on the compiler). In fact the lack of variadic templates is why the boost tuple is limited to 10 parameters. Although 10 is often more than enough, there are reasons to need more, particularly for loop unrolling and extensive logic trees. For example I was able to replace 118 lines of logic (assigning atomic names/masses/ etc.) with about 4 thanks to variadic templates. I think the latter is far easier to read and maintain. I know I get a lot of hate about my love of variadic templates so perhaps this analogy will help: anytime you have used a Python tuple, the only true equivalent is a variadic template. Rvalue references are probably the only other feature I'd label as an essential C++11 feature. Not supporting them can lead to needing extensive code redesign or major performance hits when objects interact. With foresight, rvalue references can be simulated by unique pointers (available in Boost), but the reality is it is often hard to have such foresight. As for the other main C++11 features, standard library implementations of shared/unique pointers, the new chrono and random number generator libraries are all in Boost, a dependency I foresee us having forever. Lamdas are syntactic sugar for static functions. Strong enums are just little wrapper classes around a primitive type . Initializer lists are perhaps borderline essential, but ultimately I think are not needed when you realize that they have always existed for primitive data types, and a constructor is meant to provide essentially the same support for user created objects. The auto keyword is an abomination and should never be used [there is a big difference between you knowing what type something is and the compiler knowing what type something is; the compiler has caught m",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/85#issuecomment-97772824:2207,perform,performance,2207,https://psicode.org,https://github.com/psi4/psi4/issues/85#issuecomment-97772824,1,['perform'],['performance']
Performance,"nstraints"": {; ""set"": [; {""type"": ""distance"", ""indices"": [0, 1], ""value"": 1},; ]; },; # ""program"": ""psi4"",; ""program"": ""mopac"",; },; ""input_specification"": {; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6-d3""},; # ""model"": {""method"": ""b3lyp-d3"", ""basis"": ""sto-3g""},; },; ""initial_molecule"": mol_uc2.dict(),; }. # Set a temporary logger to capture output; log_stream = geometric.nifty.RawStreamHandler(stream=sys.stdout); #log_stream = geometric.nifty.RawStreamHandler(stream=StringIO()); logger = geometric.nifty.logger; logger.addHandler(log_stream). # Parse JSON; input_opts = geometric.run_json.parse_input_json_dict(input_data); M, engine = geometric.optimize.get_molecule_engine(**input_opts). # Handle constraints; constraints_dict = input_opts.get('constraints', {}); constraints_string = geometric.run_json.make_constraints_string(constraints_dict); Cons, CVals = None, None; if constraints_string:; if 'scan' in constraints_dict:; raise ValueError(""No scan!""); Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:1579,optimiz,optimize,1579,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792,1,['optimiz'],['optimize']
Performance,"nt (*&)(), int (*)(), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, char const (&) [58])::{lambda(pybind11::detail::function_call&)#1}::_FUN(pybind11::detail::function_call&) () from /u/en/taube/c7dpr/prefixes/psi4/1.3.2-desres03-c7/lib/psi4/core.cpython-37m-x86_64-linux-gnu.so; #5 0x00007fffdeff6104 in pybind11::cpp_function::dispatcher(_object*, _object*, _object*) () from /u/en/taube/c7dpr/prefixes/psi4/1.3.2-desres03-c7/lib/psi4/core.cpython-37m-x86_64-linux-gnu.so; #6 0x00007ffff7919e63 in _PyMethodDef_RawFastCallKeywords (method=0x99e900, self=<optimized out>, args=0x110b5f8, nargs=0, kwnames=<optimized out>) at Objects/call.c:690; #7 0x00007ffff7919ee5 in _PyCFunction_FastCallKeywords (func=0x7fffeffd03a8, args=<optimized out>, nargs=<optimized out>, kwnames=<optimized out>) at Objects/call.c:730; #8 0x00007ffff78f2178 in call_function (kwnames=0x0, oparg=0, pp_stack=<synthetic pointer>) at Python/ceval.c:4568; #9 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3093; #10 0x00007ffff7a02dec in _PyEval_EvalCodeWithName (_co=0x7fffc6816db0, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, argcount=1, kwnames=0x7fffeffadb58, kwargs=0x7ffff7f76b70, kwcount=3, kwstep=1, defs=0x0,; defcount=0, kwdefs=0x0, closure=0x0, name=0x7ffff7fc1830, qualname=0x7ffff7fc1830) at Python/ceval.c:3930; #11 0x00007ffff7919966 in _PyFunction_FastCallKeywords (func=<optimized out>, stack=<optimized out>, nargs=<optimized out>, kwnames=<optimized out>) at Objects/call.c:433; #12 0x00007ffff78f2e32 in call_function (kwnames=0x7fffeffadb40, oparg=<optimized out>, pp_stack=<synthetic pointer>) at Python/ceval.c:4616; #13 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3139; #14 0x00007ffff7a02dec in _PyEval_EvalCodeWithName (_co=_co@entry=0x7ffff7f9e660, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8, args=args@entry=0x0, argcount=a",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878:3441,optimiz,optimized,3441,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878,2,['optimiz'],['optimized']
Performance,"nt 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; __________________________________________________________________ test_psi4_cc __________________________________________________________________. def test_psi4_cc():; """"""cc1""""""; #! RHF-CCSD 6-31G** all-electron optimization of the H2O molecule; ; h2o = psi4.geometry(""""""; O; H 1 0.97; H 1 0.97 2 103.0; """"""); ; psi4.set_options({""basis"": '6-31G**'}); ; > psi4.optimize('ccsd'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:63: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:1050: in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:697: in gradient; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:752: in select_ccsd; return func(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2953: in run_detci; ref_wfn = scf_helper(",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:28425,optimiz,optimize,28425,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['optimiz'],['optimize']
Performance,"ntegral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 3-21G; Blend: 3-21G; Number of shells: 7; Number of basis function: 11; Number of Cartesian functions: 11; Spherical Harmonics?: false; Max angular momentum: 1. => Loading Basis Set <=. Name: (3-21G AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1 entry LI line 59 file /home/filip/software/psi4-1.4rc/share/psi4/basis/def2-svp-jkfit.gbs ; atoms 2 entry H line 23 file /home/filip/software/psi4-1.4rc/share/psi4/basis/def2-svp-jkfit.gbs . ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 11 11 0 0 0 0; -------------------------------------------------------; Total 11 11 1 0 0 1; -------------------------------------------------------. ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory [MiB]: 732; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (3-21G AUX); Blend: DEF2-SVP-JKFIT; Number of shells: 23; Number of basis function: 80; Number of Cartesian functions: 80; Spherical Harmonics?: false; Max angular momentum: 3. Minimum eigenvalue in the overlap matrix is 1.9324024167E-01.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter SAD: -0.34299486696379 -3.42995e-01 0.00000e+00 ; @DF-UHF iter 1: -0.48778126858064 -1.44786e-01 7.18202e-03 DIIS; @DF-UHF iter 2: -0.49627418123381 -8.49291e-03 2.58017e-03 DIIS; @DF-UHF iter 3: -0.49762079007351 -1.34661e-03 1.09982e-04 DIIS; @DF-UHF iter 4: -0.49762397190176 -3.18183e-06 1.60614e-05 DIIS; @DF-UHF iter 5: -0.49762403062183 -5.87201e-08 1.47415e-06 DIIS; @DF-UHF iter 6: -0.49762403115935 -5.37526e-10 6.69153e-08 DIIS; @DF-UHF ite",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:3206,Cache,Cache,3206,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Cache'],['Cache']
Performance,"ntified two Hessian bugs, upgraded the two Molecule classes, added Molecule serialization everywhere except initial string input parsing, added alignment and BFS tools, and lots more – see below. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - This PR includes Joe's psi4/psi4#772; - adds an optional history object to the optimize output. This object contains energies, gradients, and coordinates for the molecule at each step of the optimization. Hooked up to MDT.; - ~adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.~; - Adds handling of several one-electron properties to the API and saves them to the wavefunction.; - `qcdb.Molecule`; - Fix some bugs, including C3/D3 symmetry detection w/o verbose and printing for Q-Chem when dummy (or ghost?, don't remember which) present; - Simplify rotational_constants, add rotational_symmetry_number, add axis_representation (probably should double-check this with a spectroscopy book); - Optimize instantiation (really, update_geometry) of large systems by a couple orders of magnitude (now ~1 min for 6000 atoms, w/symmetry); - Hook up Trent Parker's linear-scaling BFS algorithm to qcdb.Molecule or through just np arrays. Has ""seed"" argument so you can forcibly split intramolecularly or close-bound intermol.; - Selected steps (for performance) are now in numpy, as a result, `geometry(np_out=True)` and `xyz(np_out=True)` are avail to skip the cast-back-to-list step. Also, `to_arrays` returns geom, mass, elez, etc. as numpy arrays, rather than needing to iterate over natom.; - `psi4.core.Molecule`; - add rotational_symmetry_number; - export rotor_type; - faster BFS algorithm hooked up to psi4.Mol, too. Depending on Mol type, returns numpy split arrays, single large Mol with atoms rearranged and fragmentation embedded, and/or list of indiv Mols, one for each fragment. Radically pare down auto_fragments/old BFS code.; - `un",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:1939,Optimiz,Optimize,1939,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['Optimiz'],['Optimize']
Performance,"ntry=0x55ff96063ea0, nargs=2, keywords=keywords@entry=0x0); at /usr/local/src/conda/python-3.10.14/Objects/call.c:215; #9 0x000055ff906769d6 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=<optimized out>, callable=0x7fac0e0cdb20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:112; #10 _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:99; #11 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #12 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286030, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #13 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff96063c70, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #14 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff96063c70, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #15 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fabd8177800, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #16 _PyFunction_Vectorcall (func=0x7fabd81777f0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #17 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd84ecf40, callable=0x7fabd81777f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #18 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd84ecf40, callable=0x7fabd81777f0) ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:7922,optimiz,optimized,7922,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"nverge didn't look quite right. Here is a script I used:. ```python; #! Torsion scan of butane. molecule c4h10 {; 0 1; H -1.781487710695 -1.339015245276 -0.924843604480; H -2.809655081231 -0.316498366521 0.106834552942; H -1.696171739547 -1.492504703619 0.844458676121; C -1.808280241011 -0.768304160325 0.019321692974; H -0.781385143240 0.870036270346 0.998325840230; H -0.865561341910 1.021940295457 -0.757790563119; C -0.705914797210 0.292313565545 0.058091534575; H 0.782112955956 -0.867612327944 -1.001664537213; H 0.864488252487 -1.023755932239 0.754159895630; C 0.705817366890 -0.292132845559 -0.060119676721; H 1.697771204799 1.493890140835 -0.841405738393; H 2.809791237804 0.316266152249 -0.104120355409; H 1.780184254006 1.337108071239 0.927741879375; C 1.808370373970 0.768135672436 -0.017435993935; }. # Now generate torsion scan . steps = 36; start_angle = 0.001; step_size = 10. table = Table(rows=[""D""], cols=[""E(SCF)""]). for counter in range(0, steps):; # set smaller basis for geometry optimization; set{; basis 6-31G*; scf_type df; guess sad; }. dihedral = 1.0 * counter * step_size + start_angle; dihedral_string = ""4 7 10 14 %.5f"" % dihedral. set optking{; frozen_dihedral = """"; fixed_dihedral = $dihedral_string; }. optimize('scf') #geometry optimization with HF; geom = c4h10.geometry(); geom.print_out() # Print out optimized geometry. # Print to screen; print('-------------------------------------------'); print('| Optimized geometry for dihedral %.2f |' % dihedral); print('-------------------------------------------'); geom_py = mat2arr(geom); print(geom_py). for atom in range(c4h10.natom()):; print(""""""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; c4h10.Z(atom), # atomic number; c4h10.symbol(atom), # element symbol; c4h10.label(atom), # input element label; c4h10.charge(atom), # element charge; c4h10.x(atom), # x-coordinate; c4h10.y(atom), # y-coordinate; c4h10.z(atom), # z-coordinate; c4h10.mass(atom), # mass; )). energy('scf') # HF sin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/647:1132,optimiz,optimization,1132,https://psicode.org,https://github.com/psi4/psi4/issues/647,1,['optimiz'],['optimization']
Performance,"o unpickle the data.; if not allow_pickle:; > raise ValueError(""Object arrays cannot be loaded when ""; ""allow_pickle=False""); E ValueError: Object arrays cannot be loaded when allow_pickle=False. miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/format.py:692: ValueError; _____________________________________________________ test_psi4_cc _____________________________________________________. @pytest.mark.smoke; def test_psi4_cc():; """"""cc1""""""; #! RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psi4.core.clean(); h2o = psi4.geometry(""""""; O; H 1 0.97; H 1 0.97 2 103.0; """"""). psi4.set_options({""basis"": '6-31G**'}). > psi4.optimize('ccsd'). miniconda3/envs/psi/lib/python3.6/site-packages/psi4/tests/test_psi4.py:39:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/driver.py:1052: in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/driver.py:691: in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:784: in select_ccsd_gradient; return func(name, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2314: in run_ccenergy_gradient; ccwfn = run_ccenergy(name, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2262: in run_ccenergy; ref_wfn = scf_helper(name, **kwargs) # C1 certified; miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1289: in scf_helper; old_wfn = core.Wavefunction.from_file(read_filename); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/p4util/python_helpers.py:156: in _core_wavefunction_from_file; wfn_data = np.load(wfn_data).item(); miniconda3/envs/psi/lib/python3.6/si",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611:4011,optimiz,optimize,4011,https://psicode.org,https://github.com/psi4/psi4/issues/1611,1,['optimiz'],['optimize']
Performance,ocal/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:2229,Perform,Performing,2229,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance,"ode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of 404 (Not Found); index.html:368 Uncaught ReferenceError: $ is not defined; http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); Is anyone else seeing this problem? Possibly related?. —AJ. On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (notifications@github.com) wrote:. I'm not observing any of this behavior, so just to clarify: does anyone; actually get this ""redirection"" when you enter ""psicode.org"" on your URL; bar? Or do you just get this when you search for PSI4 on; Google/Yahoo/Bing? NB: When I put ""PSI4"" in those search engines, I get; only our correct site for the first page of hits (except for the Wikipedia; page on ""Psi4 Aurigae""). And yes, we have control of the domain via; godaddy.com. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Thu, Apr 14, 2016 at 11:33 AM, Ben Pritchard notifications@github.com; wrote:. > Also confirming here, also on yahoo/bing. Can someone make sure we still; > have control of the domain name? Wh",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210015028:2286,load,load,2286,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028,1,['load'],['load']
Performance,"odim {; # O -1.551007 -0.114520 0.000000; # H -1.934259 0.762503 0.000000; # H -0.599677 0.040712 0.000000; # --; # 0 1; # O 1.350625 0.111469 0.000000; # H 1.680398 -0.373741 -0.758561; # H 1.680398 -0.373741 0.758561; # units angstrom; # }; ​; # set basis sto-3g; # set e_convergence 9; # set g_convergence gau_verytight; ​; # optimize('mp2', molecule=h2odim); ​; ​; # e, wfn = freq('mp2', molecule=h2odim, return_wfn=True); ​; # set hessian_write on; # vibanal_wfn(wfn, molecule=h2odim); ​; # # A. print all the vib-related info from original `e, wfn = freq()` call; # for k, v in wfn.frequency_analysis.items():; # print(v); ​; # # B. `set hessian_write on` above wrote all the vib- & thermo-related info from last analysis.; # # now, print all the vib- & thermo-related info from that file; # with open(core.get_writer_file_prefix(h2odim.name()) + "".vibrec"") as handle:; # import json; # jsondata = json.load(handle); # jsondata = {k: (v if k in ['molecule', 'hessian'] else json.loads(v)) for k, v in jsondata.items()}; ​; # for k, v in jsondata.items():; # print(k, v); ​; ​; # In[ ]:; ​; ​; import json; with open(""freq_demo.h2odim.6436.vibrec"") as fp:; vibs = json.load(fp); ​; ​; # In[ ]:; ​; ​; # See all the vibrational analysis contents; vibs; ​; ​; # In[ ]:; ​; ​; vibs; vibs[""molecule""][""elez""]; nat = len(vibs[""molecule""][""elez""]); ndof = nat * 3; vibs[""molecule""][""geom""]; ​; ​; # In[ ]:; ​; ​; # load Cartesian normal modes matrix into numpy and reshape it; import numpy as np; import qcelemental as qcel; from qcelemental import Datum; datum_x = json.loads(vibs[""x""])[""data""]; len(datum_x); datum_x = np.array(datum_x).reshape((ndof, ndof)).T.round(2); datum_x; ​; ​; # In[ ]:; ​; ​; # form ugly XYZ file strings for each mode where; # * first col is atomic symbol,; # * cols 2-4 are geometry in Ang,; # * and 5-7 are displacement; # * note that XYZ file strings are in list `xyzs` that is 1-indexed; geom = np.array(vibs[""molecule""][""geom""]).reshape((-1, 3)); print(geom); geom_ang",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131:1734,load,loads,1734,https://psicode.org,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131,1,['load'],['loads']
Performance,"odule=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #26 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd7888dd8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #27 0x000055ff90677205 in do_call_core (kwdict=0x7fabd7bce4c0, callargs=0x7fabd7888dc0, func=0x7fac0e398e00, trace_info=0x7fff112864b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #28 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8949cf0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #29 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8949cf0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #30 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #31 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #32 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; --Type <RET> for more, q to quit, c to continue without paging--; #33 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #34 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286660, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #35 _PyEval_EvalFrameDefa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:11178,optimiz,optimized,11178,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"odule=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #72 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd88851d8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #73 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8887300, callargs=0x7fabd88851c0, func=0x7fac0e398e00, trace_info=0x7fff11287280, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #74 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c49700, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #75 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c49700, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #76 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #77 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #78 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #79 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #80 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287430, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #81 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6eae0, throwflag=<optimize",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:20132,optimiz,optimized,20132,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"oduleLevelObject (name=0x7fabd887f0f0, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #111 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #112 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #113 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fabd8a583d0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #114 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8a583d0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; --Type <RET> for more, q to quit, c to continue without paging--; #115 0x000055ff90677205 in do_call_core (kwdict=0x7fabd88870c0, callargs=0x7fabd8a583d0, func=0x7fac0e3989a0, trace_info=0x7fff11287e40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #116 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95de00f0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #117 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95de00f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #118 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #119 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #120 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:27731,optimiz,optimized,27731,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ok, @bwb314, concurrence on killing off the `libxc/` subfolder.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/880#issuecomment-369789472:13,concurren,concurrence,13,https://psicode.org,https://github.com/psi4/psi4/pull/880#issuecomment-369789472,1,['concurren'],['concurrence']
Performance,"ok, do you know of any code capable of performing eom-cc2, eom-ccsd with DF for excited states + frozen core and orbital virtual approximation for both closed and open shell molecules ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/462#issuecomment-240190955:39,perform,performing,39,https://psicode.org,https://github.com/psi4/psi4/issues/462#issuecomment-240190955,1,['perform'],['performing']
Performance,ole in chrome and safari are showing 404 errors for js and css:. http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/doctools.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/underscore.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of 404 (Not Found); index.html:368 Uncaught ReferenceError: $ is not defined; http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); Is anyone else seeing this problem? Possibly related?. —AJ. On Ap,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210015028:1519,load,load,1519,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028,1,['load'],['load']
Performance,"oml#L14) and making links seem broken for psicode.org/psi4manual .; * the combination of progressing Sphinx development and stagnant cloud theme development (from which the sphinx_psi_theme is derived) eventually robbed us of the ""search"" bar and the homing logo. That got minimally revived through https://github.com/psi4/sphinx-psi-theme/commit/feda2119994519c6dc1eb0979686c9cdbf916acc , so use the v1.1 now. But there's a few modest improvements here, especially to allow anyone so inspired to switch the docs theme and figure out new customizations. Apart from a certain fondness for the colors and an insistence that tables like https://psicode.org/psi4manual/master/introduction.html#id59 not be mangled, I'd be pleased if anyone wanted to overhaul the docs theme. Some things to know:; * psi4 colors and specializations are https://github.com/psi4/sphinx-psi-theme/blob/master/sphinx_psi_theme/themes/sphinx_psi_theme/theme.conf#L37; * to use a different theme, pass `-DSPHINX_THEME=another_theme` to cmake (or edit it in the cache); * build with `cmake --build . --target sphinxman`; * built docs will be in `<objdir>/doc/sphinxman/html/`. that html dir can be tarred and sent anywhere to load in a browser. ## Dev notes & details; - [x] the two sphinx extensions that were in the sphinx_psi_theme are now stored here in the repo. this lets them be used by any theme, which is important for the QCVariables one that otherwise emits thousands of warnings.; - [x] more logic around `@SPHINX_THEME@` in the controlling docs/sphinxman/source/conf.py.in so that one can use options and configuration particular to different themes. feel free to add more. tried themes are psi, cloud, basic, furo, and pydata. beware that some modern themes take a looong time to build (e.g., 40m instead of 5m) and increase the docs size 10-fold. at least one culprit is trying to put the whole TOC in the sidebar (incl. 1400 options), so there's stuff to be solved to try to transition themes.; - [x] I thought htt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3053:1351,cache,cache,1351,https://psicode.org,https://github.com/psi4/psi4/pull/3053,1,['cache'],['cache']
Performance,"ompiler ABI info - done; -- Checking whether /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Enabling Fortran; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Success, Appending; -- Performing Test CMAKE_Fortran_FLAGS [-xHost] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option ENABLE_MSAN: OFF; -- Setting option MAX_AM_ERI: 6; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /home/termo/miniconda3/envs/p4dev35/bin/python (found suitable version ""3.5.5"", minimum required is ""2.7"") ; -- Found PythonLibs: /home/termo/miniconda3/envs/p4dev35/lib/libpython3.5m.so; -- Found Python 3.5: /home/termo/miniconda3/envs/p4dev35/bin/python (found version 3.5.5); -- Foun",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883:2528,Perform,Performing,2528,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883,6,['Perform'],['Performing']
Performance,"on Energy = 0.0000000000000000; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -128.7930501140547506. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: [D]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. *** tstop() called on scychon-OptiPlex-7010 at Wed Jun 13 11:12:27 2018; Module time:; user time = 0.92 seconds = 0.02 minutes; system time = 0.03 seconds = 0.00 minutes; total time = 1 seconds = 0.02 minutes; Total time:; user time = 0.92 seconds = 0.02 minutes; system time = 0.03 seconds = 0.00 minutes; total time = 1 seconds = 0.02 minutes; Ne: PBE...........................................................PASSED. *** tstart() called on scychon-OptiPlex-7010; *** at Wed Jun 13 11:12:27 2018. => Loading Basis Set <=. Name: CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry NE line 258 file /root/psi4/build/stage/share/psi4/share/psi4/basis/cc-pvdz.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RKS Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; NE 0.000000000000 0.000000000000 0.000000000000 19.992440175420. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DIRECT.; DI",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:8500,Load,Loading,8500,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['Load'],['Loading']
Performance,"on Energy = 0.0000000000000000; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -128.8948561506526289. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: [D]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. *** tstop() called on scychon-OptiPlex-7010 at Wed Jun 13 11:12:28 2018; Module time:; user time = 0.92 seconds = 0.02 minutes; system time = 0.02 seconds = 0.00 minutes; total time = 1 seconds = 0.02 minutes; Total time:; user time = 1.84 seconds = 0.03 minutes; system time = 0.05 seconds = 0.00 minutes; total time = 2 seconds = 0.03 minutes; Ne: BLYP..........................................................PASSED. *** tstart() called on scychon-OptiPlex-7010; *** at Wed Jun 13 11:12:28 2018. => Loading Basis Set <=. Name: CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry NE line 258 file /root/psi4/build/stage/share/psi4/share/psi4/basis/cc-pvdz.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RKS Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; NE 0.000000000000 0.000000000000 0.000000000000 19.992440175420. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DIRECT.; DI",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:13534,Load,Loading,13534,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['Load'],['Loading']
Performance,"on:; 1. I wrote an extensive list of changes at the top of this PR. Read them– they affect you.; 2. To build Psi4 you now will need to do something along the lines of (in the top-level of the cloned source code):; ; ``` .sh; cmake -H. -Bbuild ; cd build && make; make install; ```; - In the configure step (the first line) there are a large number of CMake variables you can set to fine tune the build. See the top-level `CMakeLists.txt` for the more common ones. For example to change the C++ compiler add: `-DCMAKE_CXX_COMPILER=/path/to/compiler` after `-Bbuild`; - Anything not part of Psi4 proper is now in external and is expected to have its own build files. Paths where CMake should look for dependencies should now be passed to these external projects via `CMAKE_PREFIX_PATH`. ; - Installing is now a thing for Psi4. In theory you can run Psi4 from the build directory, but you'll quickly find it annoying (I'll leave it to you to learn why). Tests should still work from the build directory and can be performed from there before installing. They should be performed using `ctest` as normal. ; 3. Within the next week anyone who compiles Psi4 regularly (as opposed to just using the Conda package) should clone this branch and try it out. Please do it sooner rather than later because of the following points.; 4. Once this PR is merged, git operations on forks and clones of the current master repo will likely cease to work without a ton of effort. This is because of the size and amount of changes in this PR. Instead of fighting to rebase on top of it, there are two options:; 1. If you have some small changes you want to make in the near future [fork my fork](https://github.com/ryanmrichard/psi4), add your changes, submit a PR to me; 2. Wait until after my PR is merged into Psi4's master repo, make a fresh fork, and manually copy/paste any files you are working on into that fresh fork; 5. Since the history is getting messed up anyways, there are plans to rip Boost out after merg",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236723542:1405,perform,performed,1405,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236723542,1,['perform'],['performed']
Performance,"onally terminates the output file with two consecutive ""Buy a developer a beer!"" statements as you can see here:. ```; Psi4 stopped on: Sunday, 12 August 2018 05:55PM; Psi4 wall time for execution: 0:00:50.18. *** Psi4 exiting successfully. Buy a developer a beer!; ecution: 0:00:50.91. *** Psi4 exiting successfully. Buy a developer a beer!; ```. The worst output was that one time I got two summaries for CBS energies at the end of the file, and the results were different. ```; ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / aug-cc-pvqz -1007.18544968 xtpl_highest_1; corl mp2 / aug-cc-pv[tq]z -3.93422466 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pvdz -0.15577370 xtpl_highest_1; total CBS -1011.27544804; ---------------------------------------------------------------------------------------------------------; => Loading Basis Set <=. Name: DEF2-SVP; Role: ORBITAL; Keyword: BASIS; atoms 1, 3, 5, 13, 15, 17 entry N line 110 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 2, 4, 6, 14, 16, 18 entry C line 90 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 7, 9, 11, 19, 21, 23 entry O line 130 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 8, 10, 12, 20, 22, 24 entry H line 15 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs. Psi4 stopped on: Tuesday, 18 September 2018 03:03PM; Psi4 wall time for execution: 1 day, 4:22:27.10. *** Psi4 exiting successfully. Buy a developer a beer!; --------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ----------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1279:1131,Load,Loading,1131,https://psicode.org,https://github.com/psi4/psi4/issues/1279,1,['Load'],['Loading']
Performance,"ons@github.com wrote:. > Hello,; > One of our users hit a problem last year on our supercomputer with his; > SAPT (energy('sapt2+3-ct')) jobs. Our sysadmins flagged low cpu utilisation; > for his jobs for which we decided that 4 cpus would give him optimum; > efficiency. However, the jobs were large enough as to take > 1000 hours; > (also frowned upon by our sysadmins) so I was asked to look into whether he; > could make better parallel use of the processors. We had some teething; > problems bringing our new supercomputer on line last year so I wanted to; > rule out issues on our side and I think I have now ruled out issues with; > IO, memory and threading (that had affected other programs).; > Furthermore, during the investigations we noticed that ""top"" showed an; > almost equal alternation between one cpu and maximum cpus thus averaging; > above/below 50% use no matter how many cpus were requested. Roger Amos and; > I had a quick look at the SAPT papers and decided there wasn't anything; > intrinsic about the method that wouldn't allow it to parallel or would; > cause this behaviour (note I initially thought it might be a load imbalance; > between monomer basis and dimer basis calculations but it isn't). Also,; > subsequently we were asked to look into the performance of; > energy('fno-df-ccsd(t)') and that doesn't show this serial/parallel; > alternation.; > Do you have any thoughts on this and have suggestions for determining; > optimum number of processors (does it depend on memory?) for this sort of; > calculation?; > Thanks.; > Rika; > PS Do you need an input deck for this? Originally, the smallest case he; > had showing this behaviour took 230 hrs (seemed to be ok for his 60 hr SAPT; > job) but since then I think I have a 48 hr test case that will also display; > this behaviour. I'll need to ask the user for permission to pass it on; > first though.; > ; > —; > Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/57; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/57#issuecomment-41629946:1990,load,load,1990,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-41629946,2,"['load', 'perform']","['load', 'performance']"
Performance,"onte Carlo (QMC) electronic structure calculations. Third-party codes are required to generate trial wave function. Support for Gaussian basis set quantum chemistry code is provided through the **[molden2qmc](https://github.com/Konjkov/molden2qmc)** utility by Mike Deible and Vladimir Konjkov, which can convert files written in the quasi-standard MOLDEN format into casino’s gwfn.data format.; But in the case of a multideterminant wave function additional data described in [CASINO documentation](https://casinoqmc.net/casino_manual_dir/casino_manual.pdf) **7.4.5 Excitations and multideterminant-expansion coefficients** are required.; The data has the following form and is written to a file **correlation.data**. ```; START MDET; Title; multideterminant WFN generated from Psi4 output data. ! some title; ! empty string or ignored; MD; 3 ! Number of dets; 0.972011 1 0 ! c_1 ; group label for simultaneous optimization ; opt-flag (0 - False; 1 - True); -0.166123 2 1 ! c_2 ; group label for simultaneous optimization ; opt-flag; -0.166123 2 1 ! c_3 ; group label for simultaneous optimization ; opt-flag; DET 2 1 PR 2 1 4 1 ! 2-nd det, up-electron ; PRomote electron from 2-nd orb to 4-th; DET 2 2 PR 2 1 4 1 ! 2-nd det, down-electron ; PRomote electron from 2-nd orb to 4-th; DET 3 1 PR 2 1 5 1 ! 3-nd det, up-electron ; PRomote electron from 2-nd orb to 5-th; DET 3 2 PR 2 1 5 1 ! 3-nd det, down-electron ; PRomote electron from 2-nd orb to 5-th; END MDET. ```; 1. comments behind ! are ignored; 2. Not required c_1<sup>2</sup> + c_2<sup>2</sup> + c_3<sup>2</sup> to be equal to one, only relative weights.; 3. This file defines the following wave function if orbital order in MOLDEN file is: ψ1, ψ2, ψ3 (ROHF case) and r<sub>1</sub>-r<sub>3</sub> for up-electrons, r<sub>4</sub>, r<sub>5</sub> for down-electrons in boron atom:. 0.972011 * |ψ1(r<sub>1</sub>), ψ2(r<sub>2</sub>), ψ3(r<sub>3</sub>)| * |ψ1(r<sub>4</sub>), ψ2(r<sub>5</sub>)|; -0.166123 * |ψ1(r<sub>1</sub>), ψ4(r<sub>2</sub>), ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3235:1126,optimiz,optimization,1126,https://psicode.org,https://github.com/psi4/psi4/issues/3235,1,['optimiz'],['optimization']
Performance,"ontinue without paging--; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #143 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8882550, globals=globals@entry=0x7fac0e0f83c0, locals=locals@entry=0x7fac0e0f83c0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #144 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e0f83c0, globals=0x7fac0e0f83c0, source=0x7fabd8882550); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #145 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #146 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e0d4c58, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #147 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8938500, callargs=0x7fac0e0d4c40, func=0x7fac0e398e00, trace_info=0x7fff112888b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #148 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95e324c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #149 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95e324c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #150 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #151 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #152 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510, tstate=0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:33991,optimiz,optimized,33991,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ooked at this ~D3h Mn(NO)(CO)4 complex. It is pathologically interesting.; 1. There are no reasonable torsions defined among the bonded atoms in this molecule, as each of the 5 spokes out from the metal involve 2 ~collinear atoms.; 2. The reason that optking was trying to use torsions is that the input geometry is so crowded that the covalent radii * 1.3 formula was bonding the Mn to the atom once removed (beta?). That is, in the linear Mn-N-O, both Mn-N and Mn-O bonds were being created. So I tried covalent_connect=1.2, which results in only linear bends being defined and no torsions. This raises the question of whether we should use something beyond a linear scaling, or count on the user to provide a reasonable structure. (The clean tool in Spartan lengthened the Mn-N bond by 25%.). For the moment, I am not changing. ; 3. Using these coordinates (all stretches and bends), the first step blew up to 100 Angstroms Cartesian step. This was not due to forces, which were large but not that ridiculous.; 4. The numerical test of the B matrix passed. (a non-trivial accomplishment for this thing); 5. I figured out that the pseudoinverse of (B B^T) was blowing up, due to inversion of very small values. It is customary to invert only those eigenvalues whose magnitude is >1e-10 or so. A numerical problem was introduced when my custom linear algebra function was replaced by numpy.linalg.pinv which uses a default of 1e-14. I'm actually surprised if this threshold isn't causing problems more commonly. Anyway, I increased this to 1e-12 and added a keyword to increase it further. More testing is needed to see if we can make the default larger. This particular case needs 1e-8 and then the optimization iterates successfully downhill. The geometry is very far from equilibrium and may be changing electronic states, so I'm not pursuing its STO-3G to a minimum whatever that might be.; So I am going to commit some related things but I'm not going to attend to this particular case further.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2213#issuecomment-1583231316:1710,optimiz,optimization,1710,https://psicode.org,https://github.com/psi4/psi4/issues/2213#issuecomment-1583231316,1,['optimiz'],['optimization']
Performance,"oost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3<boost::arg<1>, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132; #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0; #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0; #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084; #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283; #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086; #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679; #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); at Python/ceval.c:3433; #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); at Python/ceval.c:4378; #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:4302,optimiz,optimized,4302,https://psicode.org,https://github.com/psi4/psi4/issues/12,1,['optimiz'],['optimized']
Performance,"operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38; > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0; > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); > from /usr/lib/libboost_python3.so.1.54.0; > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); > at /usr/include/boost/python/detail/translate_exception.hpp:48; > #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&> > (f=..., a=<synthetic pointer>, this=<optimized out>) at /usr/include/boost/bind/bind.hpp:382; > #15 operator()<boost::python::detail::exception_handler, boost::function0<void> > (a2=..., a1=..., this=<optimized out>); > at /usr/include/boost/bind/bind_template.hpp:102; > #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132; > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0; > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:3378,optimiz,optimized,3378,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,1,['optimiz'],['optimized']
Performance,optimization using solvent model,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3178:0,optimiz,optimization,0,https://psicode.org,https://github.com/psi4/psi4/issues/3178,1,['optimiz'],['optimization']
Performance,optimize('uhf') doesn't realize it has analytic gradients,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103:0,optimiz,optimize,0,https://psicode.org,https://github.com/psi4/psi4/issues/103,1,['optimiz'],['optimize']
Performance,"optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161 ; > > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084 ; > > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433 ; > > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0) ; > > at Python/ceval.c:771 ; > > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; > > locals=locals@entry=0x7ffff7ed07a0, flags=flags@entry=0x0, arena=arena@entry=0x28ca640) at Python/pythonrun.c:1981 ; > > #35 0x00007ffff5168335 in PyRun_StringFlags (str=<optimized out>, start=257, globals=0x7ffff7ed07a0, locals=0x7ffff7ed07a0, flags=0x0) ; > > at Python/pythonrun.c:1914 ; > > #36 0x00007ffff66a3f45 in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) () ; > > from /usr/lib/libboost_python3.so.1.54.0 ; > > #37 0x00000000006fcad7 in psi::Python::run (this=<optimized out>, input=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/python.cc:1446 ; > > #38 0x000000000069a8ae in main (argc=2, argv=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/psi4.cc:111 ; > > Any suggestions on what I could do to track this down further? I looked in ccenergy/pair_energies.cc and there was nothing immediately obvious. ; > > ; > > Thanks! ; > > ; > >  ; > > Reply to this email directly or view it on",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:7429,optimiz,optimized,7429,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,1,['optimiz'],['optimized']
Performance,"optimized out>, nargs=<optimized out>, kwnames=<optimized out>) at Objects/call.c:730; #8 0x00007ffff78f2178 in call_function (kwnames=0x0, oparg=0, pp_stack=<synthetic pointer>) at Python/ceval.c:4568; #9 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3093; #10 0x00007ffff7a02dec in _PyEval_EvalCodeWithName (_co=0x7fffc6816db0, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, argcount=1, kwnames=0x7fffeffadb58, kwargs=0x7ffff7f76b70, kwcount=3, kwstep=1, defs=0x0,; defcount=0, kwdefs=0x0, closure=0x0, name=0x7ffff7fc1830, qualname=0x7ffff7fc1830) at Python/ceval.c:3930; #11 0x00007ffff7919966 in _PyFunction_FastCallKeywords (func=<optimized out>, stack=<optimized out>, nargs=<optimized out>, kwnames=<optimized out>) at Objects/call.c:433; #12 0x00007ffff78f2e32 in call_function (kwnames=0x7fffeffadb40, oparg=<optimized out>, pp_stack=<synthetic pointer>) at Python/ceval.c:4616; #13 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3139; #14 0x00007ffff7a02dec in _PyEval_EvalCodeWithName (_co=_co@entry=0x7ffff7f9e660, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8, args=args@entry=0x0, argcount=argcount@entry=0, kwnames=kwnames@entry=0x0,; kwargs=0x0, kwcount=0, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at Python/ceval.c:3930; #15 0x00007ffff7a02f1e in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f9e660, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8, args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=0, defs=0x0,; defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3959; #16 0x00007ffff7a02f4b in PyEval_EvalCode (co=co@entry=0x7ffff7f9e660, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8) at Python/ceval.c:524; #17 0x00007ffff7a369e2 in run_mod (arena=0x7ffff7fc42d0, flags=0x7fffffffcf50, locals=0x7ffff7ecd1f8, globals=0x7ff",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878:4197,optimiz,optimized,4197,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878,2,['optimiz'],['optimized']
Performance,option to freeze all rotatable bonds during geometry optimization [feature request],MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3170:53,optimiz,optimization,53,https://psicode.org,https://github.com/psi4/psi4/issues/3170,1,['optimiz'],['optimization']
Performance,"optking was aborting prematurely. I just pushed the fix to the problem. For this case I found consecutive_backsteps = 2 [or more], as well as dynamic_level = 1 to now be helpful. (Don't use both at once as that is somewhat redundant.) Sometime I will type up some tips on problematic optimizations. But now optking will at least move you substantially closer to the minimum. Though one may always have to restart an optimization, these options will minimize the manual effort necessary.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153#issuecomment-127808983:284,optimiz,optimizations,284,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-127808983,2,['optimiz'],"['optimization', 'optimizations']"
Performance,"org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of 404 (Not Found); index.html:368 Uncaught ReferenceError: $ is not defined; http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); Is anyone else seeing this problem? Possibly related?. —AJ. On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (notifications@github.com) wrote:. I'm not observing any of this behavior, so just to clarify: does anyone; actually get this ""redirection"" when you enter ""psicode.org"" on your URL; bar? Or do you just get this when you search for PSI4 on; Google/Yahoo/Bing? NB: When I put ""PSI4"" in those search engines, I get; only our correct site for the first page of hits (except for the Wikipedia; page on ""Psi4 Aurigae""). And yes, we have control of the domain via; godaddy.com. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Thu, Apr 14, 2016 at 11:33 AM, Ben Pritchard notificat",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210015028:2148,load,load,2148,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028,1,['load'],['load']
Performance,orking C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performin,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2279,Perform,Performing,2279,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,"ort.c:1522; #230 PyImport_ImportModuleLevelObject (name=0x7fabd8928710, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #231 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #232 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #233 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fabd8e6c550, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #234 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8e6c550, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #235 0x000055ff90677205 in do_call_core (kwdict=0x7fabd89038c0, callargs=0x7fabd8e6c550, func=0x7fac0e3989a0, trace_info=0x7fff1128a240, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #236 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b81240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #237 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b81240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #238 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #239 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #240 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510, tstate=0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:50989,optimiz,optimized,50989,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,ortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /usr/local/bin/gfortran supports Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Per,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:2065,Perform,Performing,2065,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance,"ory Comput. in press (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 09:00PM. Process ID: 25797; PSIDATADIR: /usr/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; -1 1; Sc -1.7965316343 1.5540711104 0.6577410753; Li -3.8411511549 1.3293390591 3.1887862983; Li 0.7306020220 3.4504713202 1.4667051175; Li -0.7149951920 -1.4193774032 -0.1334886497; Li -3.3605940408 2.8558659134 -1.8910238414; }. set basis aug-pcseg-0; set reference rhf; set ci_maxiter 100; set scf_type pk; set nat_orbs true. scf_e, scf_wfn = energy('scf', return_wfn = True); ci_e, ci_wfn = energy('cisd', ref_wfn = scf_wfn, return_wfn = True); --------------------------------------------------------------------------. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:37 2017. => Loading Basis Set <=. Name: AUG-PCSEG-0; Role: ORBITAL; Keyword: BASIS; atoms 1 entry SC line 478 file /usr/share/psi4/basis/aug-pcseg-0.gbs ; atoms 2-5 entry LI line 30 file /usr/share/psi4/basis/aug-pcseg-0.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = -1, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; SC 0.000001136523 -0.000001388204 -0.000001405076 44.955911909000; LI -2.044618384077 -0.224733439504 2.531043817924 7.016004548000; LI 2.527134792823 1.896398821596 0.808962637124 7.016004548000; LI 1.081537578823 -2.973449901804 -0.791231130076 7.016004548000; LI -1.564061269977 1.301793414796 -2.548766321776 7.016004548000. Running in c1 symmetry",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339418202:1744,Load,Loading,1744,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202,1,['Load'],['Loading']
Performance,"ory Usage: 4168.171875 MB; memory use after geom opt; Memory Usage: 4168.171875 MB; --; ````. At the last point the calculation then hangs indefinitely, with 5gb memory set on the whole node. Although the memory usage does not completely go up at every step, the memory accumulates throughout the job. Psi4Errors printed above when a particular molecule fails to optimize, leading to the calculation to skip to the next molecule Other job input parameters are 1 node, 16 cores. . I have attempted to produce a minimal example of the context I running my program and where the memory leaks occur. ```; from openff.recharge.grids import LatticeGridSettings, GridGenerator; import psutil; import psi4; from openff.toolkit.topology import Molecule; from psi4.core import GeometryUnits; from openff.units.elements import SYMBOLS; from qcelemental.models.common_models import Model; from qcelemental.models import Molecule as QCMolecule; from qcelemental.models.procedures import OptimizationInput, QCInputSpecification; import qcengine; from openff.units import unit; import numpy. def log_memory_usage():; process = psutil.Process(); print(f""Memory Usage: {process.memory_info().rss / 1024 ** 2} MB"", flush=False). def xtb_ff_opt(qc_mol: QCMolecule) -> QCMolecule:; """"""; Runs an xtb ff optimisation on the conformer using the qc_engine wrapper. . Parameters; ----------; conformer_no; The conformer number in the molecule to run the optimisation on. . Returns; -------; The ff optimised conformer. ; """"""; xtb_model = Model(method=""gfn2-xtb"", basis=None); keywords = {""verbosity"": ""muted""}; return qcengine_opt(; qc_mol=qc_mol, model=xtb_model, program=""xtb"", spec_keywords=keywords; ). def qcengine_opt(qc_mol: QCMolecule, model: Model, program: str, spec_keywords: dict[str, str]) -> QCMolecule:; """"""; A general function to run an optimisation via qcengine.; """"""; spec = QCInputSpecification(model=model, keywords=spec_keywords, driver=""gradient""); opt_spec = OptimizationInput(; initial_molecule=qc_mol",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3146:5036,Optimiz,OptimizationInput,5036,https://psicode.org,https://github.com/psi4/psi4/issues/3146,1,['Optimiz'],['OptimizationInput']
Performance,"ory and basis set are consistent. . I have been playing around with both `frequency()` and `hessian()`. I chose the hessian last night because of this:. https://psicode.org/psi4manual/master/api/psi4.driver.qcdb.vib.harmonic_analysis.html#psi4.driver.qcdb.vib.harmonic_analysis. https://psicode.org/psi4manual/master/freq.html. Where the harmonic analysis is documented showing the IR intensities. The first parameter was a hessian matrix so I went back to go look at how to produce that. Maybe I went down a different rabbit hole. . https://github.com/psi4/psi4/blob/821134f62396ba27f9bcb8fbfa93ea2c370b7616/tests/pytests/test_vibanalysis.py. Line 17-40 I kind of copied your guys test to get the code running. I was actually confused with dipole derivatives and how to produce them and pass them in appropriately. . Ah okay! the frequency has it built in and I can see it. I got confused on the docs. . ```python; theory = 'hf/6-31g*'; ; energy, wave_function = psi4.optimize(; theory,; return_wfn = 'yes',; molecule=universe; ). frequencies = psi4.frequencies(; theory,; ref_gradient=wave_function.gradient(),; molecule=universe. ); ```. Ouput:. ```python; Freq [cm^-1] 1557.5017 4053.2831 4197.9898 ; Irrep A1 A1 B2 ; Reduced mass [u] 1.0830 1.0449 1.0829 ; Force const [mDyne/A] 1.5478 10.1143 11.2435 ; Turning point v=0 [a0] 0.2672 0.1686 0.1627 ; RMS dev v=0 [a0 u^1/2] 0.1966 0.1219 0.1198 ; IR activ [km/mol] 92.6794 13.8599 85.5429 ; Char temp [K] 2240.8982 5831.7720 6039.9727 ; ----------------------------------------------------------------------------------; 1 O 0.00 -0.00 -0.07 0.00 -0.00 0.05 0.00 -0.07 -0.00 ; 2 H -0.00 0.43 0.56 0.00 0.59 -0.39 0.00 0.56 -0.43 ; 3 H 0.00 -0.43 0.56 0.00 -0.59 -0.39 0.00 0.56 0.43 ; ```. So I want to make sure I understand this correctly, the IR active means it is my epsilon in beer-lambert's law and all I would need to do to get absorbance is times it by the path length of my cell, and the concentration of my sample. And then calculate tr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2698#issuecomment-1227099808:1213,optimiz,optimize,1213,https://psicode.org,https://github.com/psi4/psi4/issues/2698#issuecomment-1227099808,1,['optimiz'],['optimize']
Performance,"ost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke(boost::detail::function::function_buffer&, boost::python::detail::exception_handler const&, boost::function0<void> const&) (); #9 0x0000000005556d54 in boost::python::handle_exception_impl(boost::function0<void>) (); #10 0x000000000554d0fe in function_call (); #11 0x00006a91c37de333 in PyObject_Call (func=0x9231260, arg=<optimized out>, kw=<optimized out>) at Objects/abstract.c:2529; #12 0x00006a91c388d4b2 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x712c327ea368, func=0x9231260) at Python/ceval.c:4253; #13 call_function (oparg=<optimized out>, pp_stack=0x712c327ea368) at Python/ceval.c:4058; #14 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #15 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91b94db9b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=1, kws=0x92f85c8, kwcount=1, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #16 0x00006a91c388e3fa in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x712c327ea568, func=0x6a91b8cca488) at Python/ceval.c:4131; #17 call_function (oparg=<optimized out>, pp_stack=0x712c327ea568) at Python/ceval.c:4056; #18 PyEval_EvalFrameEx (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:2681; #19 0x00006a91c388fdbe in PyEval_EvalCodeEx (co=0x6a91c45356b0, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=0, kws=0x0, kwcount=0, defs=0x0, defcount=0, closure=0x0) at Python/ceval.c:3267; #20 0x00006a91c388fed2 in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at Python/ceval.c:669; #21 0x00006a91c38ae38c in run_mod (arena=0x93cee40, flags=<optimized out>, locals=0x6a91c4610d70, globals=0x6a91c4610d70, filename=0x6a91c38de42d ""<string>"", mod=<optimized o",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:2587,optimiz,optimized,2587,https://psicode.org,https://github.com/psi4/psi4/issues/153,3,['optimiz'],['optimized']
Performance,"ost::function0<void> > (a2=..., a1=..., this=<optimized out>); at /usr/include/boost/bind/bind_template.hpp:102; #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3<boost::arg<1>, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132; #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0; #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0; #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084; #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283; #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086; #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679; #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); at Python/ceval.c:3433; #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:4169,optimiz,optimized,4169,https://psicode.org,https://github.com/psi4/psi4/issues/12,3,['optimiz'],['optimized']
Performance,"ostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. # First Time Contributors; - @raimis - #1399, #1185, #1183, +70 more!; - @obrien951 #1359, #1222, #1130, #1140, #1100, #1097; - @zachglick #1453, #1304, #1291; - @tovrstra #1510, #1506, #1500; - @timostrunk #1133, #1128, #1127; - @mdav2 #1374, #1142; - @chapincavender #1364; - @janisozaur #1321; - @rainli323 #1131; - @yxie326 #1083. # Additional Non-Core Contributors to v1.3. - @JonathonMisiewicz #1517, #1487, #1379, #1424, #1435, #1378, #1352, #1337, #1336, #1289, #1310, #1299, #1214, #1150, #1024, #1139, #1108; - @susilehtola #1475, #1493, #1481, #1479, #1472, #1458, #1460, #1468, #1456, #1452, #1451, #1260; - @PeterKraus #1470, #1350, #1405, #1235, #1303, #1262, #1232, #1138, #1123, #1119, #1109; - @hokru #1320, #1377, #1346, #1300, #1244, #1241; - @alenaizan #1365, #1042, #1294; - @tyzhang1993 #1437; - @tomspur #1257. # Performance Optimizations; - NYI. # Psi Developer Upgrade Guide; - Psi4 now requires C++14 (up from C++11); - The C++ code base was reformatted using clang-format and the provided format file (many PRs). # Developer Interests; - Cleans up the Matrix class for non-totally symmetric irrupts (#1383).; - Psi4 is now C++17 compatible (#1345).; - DFT grid generation is now threaded (#1291).; - `findif` is now ""metadata""-based to allow for greater serialization (#1289).; - Additional documentation and notes on alpha/beta for DFT functionals (#1260).; - `dpd.gbl` has been removed (#1254).; - The CC* modules are moving to a CCWavefunction based solution (#1253).; - CBS has been reworked to be dictionary based to allow for greater flexibility (#1235).; - Updated conversion factors to CODATA 2014 (#1213).; - `pthreads` has been removed from Psi4 (shall not return, #1199).; - Empirical Dispersion has been refactored to a new unified interface (#1151).; - OEProp has been split into many small modules allowing gre",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406:2725,Perform,Performance,2725,https://psicode.org,https://github.com/psi4/psi4/issues/1406,2,"['Optimiz', 'Perform']","['Optimizations', 'Performance']"
Performance,"otifications@github.com wrote:; > ; > That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; > so this test case could be added to one of the other test categories, like; > longtests, in principle.; > ; > That said, the quicker the test runs (while testing the desired feature); > the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; > loosening the convergence criteria.; > ; > David; > ; > On Monday, February 15, 2016, Daniel Smith notifications@github.com wrote:; > ; > > The current cap for ctest is 25 minutes on a single core. Is there any; > > reason not to do this on a tiny basis like 6-31G or 3-21G?; > > ; > > This is just if you want the test case to be run routinely, there is; > > nothing wrong with having extra long test cases that are only run if; > > specifically requested.; > > ; > > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > > ; > > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > > ; > > > -Rollin; > > > ; > > > ## ; > > > ; > > > Dr. Rollin A. King; > > > Professor and Chair of Chemistry; > > > Bethel University; > > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > > ; > > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > wrote:; > > > ; > > > > I just removed opt10 from all ctest labels. Its still present, but will; > > > > not run unless you specifically request it.; > > > > ; > > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > > ; > > > > > On Feb 15, 2016, at 9:27 AM, Justin Turney <notifications@github.com; > > > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > > > wrote:; > > > > > ; > > > > > Yeah, we should have that mechanism t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184433294:1206,optimiz,optimization,1206,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184433294,1,['optimiz'],['optimization']
Performance,"otifications@github.com; wrote:. > That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; > so this test case could be added to one of the other test categories, like; > longtests, in principle.; > ; > That said, the quicker the test runs (while testing the desired feature); > the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; > loosening the convergence criteria.; > ; > David; > ; > On Monday, February 15, 2016, Daniel Smith notifications@github.com; > wrote:; > ; > > The current cap for ctest is 25 minutes on a single core. Is there any; > > reason not to do this on a tiny basis like 6-31G or 3-21G?; > > ; > > This is just if you want the test case to be run routinely, there is; > > nothing wrong with having extra long test cases that are only run if; > > specifically requested.; > > ; > > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > > ; > > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores); > > > with; > > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > > ; > > > -Rollin; > > > ; > > > ## ; > > > ; > > > Dr. Rollin A. King; > > > Professor and Chair of Chemistry; > > > Bethel University; > > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > > ; > > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <; > > > notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > wrote:; > > > ; > > > > I just removed opt10 from all ctest labels. Its still present, but; > > > > will; > > > > not run unless you specifically request it.; > > > > ; > > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > > ; > > > > > On Feb 15, 2016, at 9:27 AM, Justin Turney <; > > > > > notifications@github.com; > > > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > > > wrote:; > > > > > ; > > > > > Y",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184432870:1179,optimiz,optimization,1179,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184432870,1,['optimiz'],['optimization']
Performance,"ously available in DirectJK. LinK was previously available for use in Psi4 via DirectJK, but was always disrecommended due to its combination with a normal DirectJK implementation for J construction. In conjunction with Direct DF-J to form the Coulomb matrix, LinK performs much better. Some benchmarks comparing the Direct DF-J + LinK algorithm combination to other JK options in Psi4, for water clusters of varying sizes at the cc-pVDZ basis set, are attached:. ![Timing Plots of Water Clusters at cc-pVDZ](https://user-images.githubusercontent.com/26306559/198107808-42f3b855-13f0-4e14-8a50-c0402c16b94f.png). Small, non-diffuse basis sets are the specialty of Direct DF-J + LinK, and it reflects here, with DFJLinK outperforming the other integral-direct JK options for most of the water clusters, and being the fastest JK option tested overall for large water clusters. For specific comparisons to Direct DF-J + COSX, the closest current analogue in Psi4, DFJCOSK performs better for larger basis sets or more complex systems, while DFJLinK performs better for smaller basis sets and less complex systems from my testing. It may be worth noting that the DFJLinK in the listed benchmarks used a different implementation of Direct DF-J compared to the one in this PR, but I don't expect the results would change much because of that. The full of CompositeJK is planned to be done in 3 PRs. This PR is the first one. The second PR in the CompositeJK process is the combining of the DFJLinK and DFJCOSK subclasses into the initial ""CompositeJK"" subclass and the implementation of the planned CompositeJK User API/user-facing end. The final CompositeJK PR will be the refactoring of the CompositeJK backend to truly support arbitrary mixing and matching of J/K build algorithms. ## User API & Changelog headlines; - [x] The DO_LINK option has been removed.; - [x] The SCF_TYPE option ""LINK"" has been added, enabling use of the integral-direct density-fitted J + Linear Exchange K algorithm combinatio",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2762:2922,perform,performs,2922,https://psicode.org,https://github.com/psi4/psi4/pull/2762,2,['perform'],['performs']
Performance,"out of bounds. So fixed the bounds error. :-). ```; (lldb) settings set -- target.run-args ""stage/bin/psi4"" ""../tests/tu1-h2o-energy/input.dat""; (lldb) run; Process 22217 launched: '/Users/loriab/linux/miniconda-silicon/envs/p4dev312cf_clone/bin/python' (arm64); Process 22217 stopped; * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BREAKPOINT (code=1, subcode=0x11819b7e4); frame #0: 0x000000011819b7e4 core.cpython-312-darwin.so`std::__1::vector<double, std::__1::allocator<double> >::operator[][abi:fe180100](this=0x00000001013e5378 size=27, __n=27) at vector:1393:3; 1390	template <class _Tp, class _Allocator>; 1391	_LIBCPP_CONSTEXPR_SINCE_CXX20 inline _LIBCPP_HIDE_FROM_ABI typename vector<_Tp, _Allocator>::reference; 1392	vector<_Tp, _Allocator>::operator[](size_type __n) _NOEXCEPT {; -> 1393	 _LIBCPP_ASSERT_VALID_ELEMENT_ACCESS(__n < size(), ""vector[] index out of bounds"");; 1394	 return this->__begin_[__n];; 1395	}; 1396	; Target 0: (python) stopped.; (lldb) bt; * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BREAKPOINT (code=1, subcode=0x11819b7e4); * frame #0: 0x000000011819b7e4 core.cpython-312-darwin.so`std::__1::vector<double, std::__1::allocator<double> >::operator[][abi:fe180100](this=0x00000001013e5378 size=27, __n=27) at vector:1393:3; frame #1: 0x00000001196d0a7c core.cpython-312-darwin.so`psi::BasisSet::update_l2_shells(this=0x00000001013e5128, embed_normalization=true) at basisset.cc:876:80; ```; - [x] For now GHA has both Intel and Silicon runners, so might as well test both. The Eco runners are also running ctest quick for now to get some regular testing in since those aren't covered by Azure. ; - [x] add adcc and forte tests to smoke. forte not tested in ecosystem yet.; - [x] fix docs GHA by forgiving FixedSize; - [x] fix docs again by restraining sphinx<8 b/c of an interaction with documenting pydantic v1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://ps",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3194:2202,queue,queue,2202,https://psicode.org,https://github.com/psi4/psi4/pull/3194,1,['queue'],['queue']
Performance,"own Unknown Unknown; python3.7 000055D7E221129D PyRun_StringFlags Unknown Unknown; python3.7 000055D7E21B5EB4 Unknown Unknown Unknown; python3.7 000055D7E213E789 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AA795 _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D7E20EE714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055D7E20EE73C PyEval_EvalCode Unknown Unknown; python3.7 000055D7E2205F14 Unknown Unknown Unknown; python3.7 000055D7E2210331 PyRun_FileExFlags Unknown Unknown; python3.7 000055D7E2210523 PyRun_SimpleFileE Unknown Unknown; python3.7 000055D7E2211655 Unknown Unknown Unknown; python3.7 000055D7E221177C _Py_UnixMain Unknown Unknown; libc-2.27.so 00007FB2DA614B97 __libc_start_main Unknown Unknown; python3.7 000055D7E21B5FF0 Unknown Unknown Unknown; Aborted (core dumped); ```. The last lines in the generated outfile:. ```; 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 2.845538	 1.505794; 	 R(1,8) = 2.064055	 1.092251; 	 R(1,9) = 2.056683	 1.088350; 	 R(1,10) = 2.064136	 1.092294; 	 R(2,3) = 2.459853	 1.301698; 	 R(2,7) = 2.053717	 1.086780; 	 R(3,4) = 2.460043	 1.301799; 	 R(4,5) = 2.048304	 1.083916; 	 R(4,6) = 2.048052	 1.083782; 	 B(1,2,3) = 2.184425	 125.158344; 	 B(1,2,7) = 2.039946	 116.880293; 	 B(2,1,8) = 1.932206	 110.707222; 	 B(2,1,9) = 1.943108	 111.331905; 	 B(2,1,10) = 1.932189	 110.706283; 	 L(2,3,4) = 3.139524	 179.881489; 	 l(2,3,4) = 3.141593	 180.000000; 	 B(3,2,7) = 2.058814	 117.961348; 	 B(3,4,5) = 2.119850	 121.458466; 	 B(3,4,6) = 2.120178	 121.477254; 	 B(5,4,6) = 2.043155	 117.064152; 	 B(8,1,9) = 1.892072	 108.407726; 	 B(8,1,10) = 1.869872	 107.135787; 	 B(9,1,10) = 1.892170	 108.413330; 	 D(3,2,1,8) = 2.105760	 120.651167; 	 D(3,2,1,9) = -0.000265	 -0.015201; 	 D(3,2,1,10)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020:3408,optimiz,optimization,3408,https://psicode.org,https://github.com/psi4/psi4/issues/2020,1,['optimiz'],['optimization']
Performance,"paper](https://doi.org/10.1016/j.chemphys.2008.10.036) and [this paper](https://doi.org/10.1063/1.3646921) as ""Chain of Spheres"" exchange or COSK. The implementation is added to a new `JK` class, `DFJCOSK`, which combines COSK with a simple direct density-fitted J algorithm. COSK is easily parallelized, completely in-core, and has good scaling--between O(N^1) and O(N^2)--making it ideal for HF/DFT calculations on large systems, particularly calculations for which the `DF` algorithm must store integrals on disk. The low scaling comes at the cost of a large pre-factor, so it shouldn't be used on small systems. In my benchmarking, `DFJCOSK` is almost always faster than `DIRECT` (even with density screening and incremental fock construction). The crossover between `DFJCOSK` and `DF` is dependent on the system, basis, CPU, memory, etc. but I've observed it as early as <3000 basis functions. I've attached a performance comparison of the `DFJCOSK`, `DIRECT`, and `DF` algorithms on a set of linear alkanes in which it's clear that `DFJCOSK` outperforms the other two algorithms for large systems. ![alkanes](https://user-images.githubusercontent.com/16376046/166322946-172d8fee-3ce3-4811-9633-db094219d17e.png). An encouraging fact about these results is that this implementation is far from optimal. The cost of the COSK algorithm is dominated by the evaluation of one-electron integrals on a quadrature grid. Therefore, there are a number of improvements to be made, in order of increasing difficulty:. - Do a better job at screening small integrals before they're computed (like [these](https://aip.scitation.org/doi/pdf/10.1063/1.5048491)); - Use better grids (such as [here](https://aip.scitation.org/doi/full/10.1063/1.5049435)); - Compute individual integrals faster. This could be done by reusing intermediates in the recursion for integrals involving the same shell-pair and different grid points. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will acc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567:1037,perform,performance,1037,https://psicode.org,https://github.com/psi4/psi4/pull/2567,1,['perform'],['performance']
Performance,"pendencies are, where his include directories are, whether they need to be used just to compile <module> or whether they need to be used by a consuming project, what compile definitions should be carried along. If all that gets packaged up in a target, then the consuming project need only `target_link_libraries(<tgt> <module>)` and not worry about the other stuff. * CMake tries to be too smart. The items that get put into `target_link_libraries()`, it (pretty reasonably) treats according to the rules of linking libraries and makes bold to rearrange them. Only problem is that when we put linker directives (start-group, as-needed, etc.) and especially when they get repeated in the grand final linking, CMake optimizes them away. So `-la -Wl,--whole-archive -lb, -Wl,--no-whole-archive -lc -Wl,--whole-archive -ld -Wl,--no-whole-archive` merrily becomes `-la -lb, -lc -Wl,--whole-archive -ld -Wl,--no-whole-archive` which is Bad Indeed. However, CMake promises (somewhere) to keep target link libraries properties intact and not to optimize across them. * I think https://github.com/eruffaldi/cmakego/blob/master/cmakego.cmake is a rather nice pattern, and I've emulated it a bit in the external/common/TargetLAPACK. * Targets make all the external projects we link to in psi4 look fairly clean. Below are all the CMakeLists.txt interactions. ```; >>> grep -r '::' psi4/ | grep CMakeList; psi4/CMakeLists.txt: get_property(_loc TARGET CheMPS2::chemps2 PROPERTY LOCATION); psi4/CMakeLists.txt: get_property(_loc TARGET dkh::dkh PROPERTY LOCATION); psi4/CMakeLists.txt:get_property(_loc TARGET libefp::efp PROPERTY LOCATION); psi4/CMakeLists.txt: get_property(_loc TARGET erd::erd PROPERTY LOCATION); psi4/CMakeLists.txt: get_property(_loc TARGET gdma::gdma PROPERTY LOCATION); psi4/CMakeLists.txt:get_property(_loc TARGET libint::int PROPERTY LOCATION); psi4/CMakeLists.txt: #get_property(_loc TARGET PCMSolver::PCMSolver PROPERTY LOCATION); psi4/src/CMakeLists.txt:if(TARGET dkh::dkh); psi4/src/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276178223:1967,optimiz,optimize,1967,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276178223,1,['optimiz'],['optimize']
Performance,pis4--version returns:. /psi4/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.1.1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/936#issuecomment-373024315:87,load,loaded,87,https://psicode.org,https://github.com/psi4/psi4/issues/936#issuecomment-373024315,1,['load'],['loaded']
Performance,"plain won't load the basis file. I think some extra checks get turned on during the conda build. Hence [this knowledge](http://psicode.org/psi4manual/master/manage_git.html#how-to-locate-non-ascii-characters-in-the-codebase). Agree that it'd be nice to allow non-ascii. And probably much easier now that we're py3-only. I just haven't investigated the codecs stuff. ```; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1543347940767/work/build/stage/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 859, in construct; names[index] = parser.load_file(fullfilename); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1543347940767/work/build/stage/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsbasissetparser.py"", line 78, in load_file; contents = infile.readlines(); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1543347940767/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.6/encodings/ascii.py"", line 26, in decode; return codecs.ascii_decode(input, self.errors)[0]. UnicodeDecodeError: 'ascii' codec can't decode byte 0xce in position 169: ordinal not in range(128); Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 3.43 sec; ----------------------------------------------------------; Test Failed.; ""cbs-xtpl-energy"" end time: Nov 27 14:59 EST; ""cbs-xtpl-energy"" time elapsed: 00:00:03; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1380#issuecomment-442458119:12,load,load,12,https://psicode.org,https://github.com/psi4/psi4/pull/1380#issuecomment-442458119,1,['load'],['load']
Performance,"port logging.config; > import sys; > ; > mol_uc2 = qcel.models.Molecule.from_data(; > """"""; > O 0 0 0; > H 0 0 1; > H 0 1 0; > """"""; > ); > ; > input_data = {; > ""keywords"": {; > ""convergence_set"": ""GAU_LOOSE"",; > ""coordsys"": ""tric"",; > ""maxiter"": 25,; > ""enforce"": 0.1,; > ""constraints"": {; > ""set"": [; > {""type"": ""distance"", ""indices"": [0, 1], ""value"": 1},; > ]; > },; > # ""program"": ""psi4"",; > ""program"": ""mopac"",; > },; > ""input_specification"": {; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6-d3""},; > # ""model"": {""method"": ""b3lyp-d3"", ""basis"": ""sto-3g""},; > },; > ""initial_molecule"": mol_uc2.dict(),; > }; > ; > ; > ; > # Set a temporary logger to capture output; > log_stream = geometric.nifty.RawStreamHandler(stream=sys.stdout); > #log_stream = geometric.nifty.RawStreamHandler(stream=StringIO()); > logger = geometric.nifty.logger; > logger.addHandler(log_stream); > ; > ; > # Parse JSON; > input_opts = geometric.run_json.parse_input_json_dict(input_data); > M, engine = geometric.optimize.get_molecule_engine(**input_opts); > ; > # Handle constraints; > constraints_dict = input_opts.get('constraints', {}); > constraints_string = geometric.run_json.make_constraints_string(constraints_dict); > Cons, CVals = None, None; > if constraints_string:; > if 'scan' in constraints_dict:; > raise ValueError(""No scan!""); > Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string); > ; > ; > # Set up the internal coordinate system; > coordsys = input_opts.get('coordsys', 'tric'); > CoordSysDict = {; > 'cart': (geometric.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:1373,optimiz,optimize,1373,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275,1,['optimiz'],['optimize']
Performance,problematic geometry optimization with DF-SCF,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1095:21,optimiz,optimization,21,https://psicode.org,https://github.com/psi4/psi4/issues/1095,1,['optimiz'],['optimization']
Performance,"ptimized out>) at Objects/call.c:690; #7 0x00007ffff7919ee5 in _PyCFunction_FastCallKeywords (func=0x7fffeffd03a8, args=<optimized out>, nargs=<optimized out>, kwnames=<optimized out>) at Objects/call.c:730; #8 0x00007ffff78f2178 in call_function (kwnames=0x0, oparg=0, pp_stack=<synthetic pointer>) at Python/ceval.c:4568; #9 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3093; #10 0x00007ffff7a02dec in _PyEval_EvalCodeWithName (_co=0x7fffc6816db0, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, argcount=1, kwnames=0x7fffeffadb58, kwargs=0x7ffff7f76b70, kwcount=3, kwstep=1, defs=0x0,; defcount=0, kwdefs=0x0, closure=0x0, name=0x7ffff7fc1830, qualname=0x7ffff7fc1830) at Python/ceval.c:3930; #11 0x00007ffff7919966 in _PyFunction_FastCallKeywords (func=<optimized out>, stack=<optimized out>, nargs=<optimized out>, kwnames=<optimized out>) at Objects/call.c:433; #12 0x00007ffff78f2e32 in call_function (kwnames=0x7fffeffadb40, oparg=<optimized out>, pp_stack=<synthetic pointer>) at Python/ceval.c:4616; #13 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3139; #14 0x00007ffff7a02dec in _PyEval_EvalCodeWithName (_co=_co@entry=0x7ffff7f9e660, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8, args=args@entry=0x0, argcount=argcount@entry=0, kwnames=kwnames@entry=0x0,; kwargs=0x0, kwcount=0, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at Python/ceval.c:3930; #15 0x00007ffff7a02f1e in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f9e660, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8, args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=0, defs=0x0,; defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3959; #16 0x00007ffff7a02f4b in PyEval_EvalCode (co=co@entry=0x7ffff7f9e660, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8) at Python/ceval.c:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878:4094,optimiz,optimized,4094,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878,1,['optimiz'],['optimized']
Performance,"ptimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #60 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11286ca0, callable=0x7fac0e363370, tstate=0x55ff9515e050); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #61 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11286d30) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #62 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #63 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd784bdb0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #64 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd8887530, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fabd887f290, level=1); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #65 0x000055ff9067536b in import_name (level=0x7fac0e3000f0, fromlist=0x7fabd887f290, name=0x7fabd8887530, f=0x7fabd8fa9cf0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #66 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8fa9cf0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #67 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8fa9cf0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #68 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112870b0, locals=locals@entry=0x7fabd8887400, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #69 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd888",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:17807,optimiz,optimized,17807,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"ptr<psi::Wavefunction>), std::shared_ptr<psi::Matrix> (*)(std::shared_ptr<psi::Wavefunction>), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, char const (&) [61])::{lambda(pybind11::detail::function_call&)#3}::operator()(pybind11::detail::function_call&) const (this=0x0, call=...) at /usr/include/pybind11/pybind11.h:160; #19 pybind11::cpp_function::initialize<std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Wavefunction>, pybind11::name, pybind11::scope, pybind11::sibling, char [61]>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::shared_ptr<psi::Matrix> (*)(std::shared_ptr<psi::Wavefunction>), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, char const (&) [61])::{lambda(pybind11::detail::function_call&)#3}::_FUN(pybind11::detail::function_call&) (); at /usr/include/pybind11/pybind11.h:137; #20 0x00007faaae20b610 in pybind11::cpp_function::dispatcher (self=<optimized out>, args_in=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), ; kwargs_in=0x0) at /usr/include/pybind11/pybind11.h:624; #21 0x00007faabd65df8a in cfunction_call_varargs (func=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, ; args=(<psi4.core.RHF(memory_jk_=49152000, memory_collocation_=0) at remote 0x7faa8737cf90>,), kwargs=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:742; #22 0x00007faabd64e681 in _PyObject_MakeTpCall (callable=<built-in method scfgrad of PyCapsule object at remote 0x7faaaff6a120>, args=<optimized out>, nargs=<optimized out>, keywords=0x0); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:159; #23 0x00007faabd64b53c in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8c41a08, callable=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:125; #24 _PyObject_Vectorcall (kwnames=0x0, n",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:5701,optimiz,optimized,5701,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['optimiz'],['optimized']
Performance,"pybind11.h:297; #6 0x00007fac0b7a3925 in pybind11::cpp_function::dispatcher (self=<optimized out>, args_in=0x7fabd7888e00, kwargs_in=0x0) at /home/susi/.conda/envs/p4env/include/pybind11/pybind11.h:987; #7 0x000055ff906815a6 in cfunction_call (func=0x7fac0e0cdb20, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; --Type <RET> for more, q to quit, c to continue without paging--; #8 0x000055ff9067aa6b in _PyObject_MakeTpCall (tstate=0x55ff9515e050, callable=callable@entry=0x7fac0e0cdb20, args=args@entry=0x55ff96063ea0, nargs=2, keywords=keywords@entry=0x0); at /usr/local/src/conda/python-3.10.14/Objects/call.c:215; #9 0x000055ff906769d6 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=<optimized out>, callable=0x7fac0e0cdb20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:112; #10 _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:99; #11 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #12 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286030, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #13 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff96063c70, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #14 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff96063c70, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #15 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fabd8177800, tstate=0x55ff9515e050); at /usr/local/s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:7351,optimiz,optimized,7351,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"python 3.8, 3.9, & 3.10 all failing. also removed the '-rt'. `; mamba install psi4 psi4 python=3.8 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.8']. pkgs/main/linux-64 Using cache; pkgs/main/noarch Using cache; pkgs/r/linux-64 Using cache; pkgs/r/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change; Could not solve for environment specs; The following packages are incompatible; ├─ psi4 is installable with the potential options; │ ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ │ └─ pychemps2 >=1.7.1 with the potential options; │ │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:810,cache,cache,810,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966,4,['cache'],['cache']
Performance,"python::objects::function::call(_object*, _object*) const () from /usr/lib/libboost_python3.so.1.54.0; #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); from /usr/lib/libboost_python3.so.1.54.0; #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); at /usr/include/boost/python/detail/translate_exception.hpp:48; #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&> > (f=..., a=<synthetic pointer>, this=<optimized out>) at /usr/include/boost/bind/bind.hpp:382; #15 operator()<boost::python::detail::exception_handler, boost::function0<void> > (a2=..., a1=..., this=<optimized out>); at /usr/include/boost/bind/bind_template.hpp:102; #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3<boost::arg<1>, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132; #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0; #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0; #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084; #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceva",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:3241,optimiz,optimized,3241,https://psicode.org,https://github.com/psi4/psi4/issues/12,1,['optimiz'],['optimized']
Performance,"qc/psi4.bin/lib/libint.a (version 1.1.6) ; -- Configuring done ; -- Generating done ; ``` . And just for completeness the pybind11 part:. ```; [ 12%] Performing download step (git clone) for 'pybind11_external'; Cloning into 'pybind11_external'...; Note: checking out 'v2.0.0'. You are in 'detached HEAD' state. You can look around, make experimental; changes and commit them, and you can discard any commits you make in this; state without impacting any branches by performing another checkout. If you want to create a new branch to retain commits you create, you may; do so (now or later) by using -b with the checkout command again. Example:. git checkout -b <new-branch-name>. HEAD is now at e33ef9c... v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /usr/bin/python3.4 (found version ""3.4.5"") ; -- Found PythonLibs: /usr/lib64/libpython3.4m.so; -- pybind11 v2.0.0; -- Configuring done; -- Generating done; -- Build files have been written to: /usr/qc/psi4.git/objdir/external/upstrea",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273732640:3248,Perform,Performing,3248,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640,1,['Perform'],['Performing']
Performance,"query.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resource: the server responded with a status of 404 (Not Found); > index.html:368 Uncaught ReferenceError: $ is not defined; > http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > Is anyone else seeing this problem? Possibly related?; > ; > —AJ; > ; > On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (; > notifications@github.com) wrote:; > ; > I'm not observing any of this behavior, so just to clarify: does anyone; > actually get this ""redirection"" when you enter ""psicode.org"" on your URL; > bar? Or do you just get this when you search for PSI4 on; > Google/Yahoo/Bing? NB: When I put ""PSI4"" in those search engines, I get; > only our correct site for the first page of hits (except for the Wikipedia; > page on ""Psi4 Aurigae""). And yes, we have control of the domain via; > godaddy.com.; > ; > -TDC; > ; > ## ; > ; > Prof. T. Daniel Crawford; > crawdad@vt.edu; > ; > On Thu, Apr 14, 2016 at 11:33 AM, Ben Pritchard notifications@github.com; > wrote:; > ; > > Also confirming here, also on yaho",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210017774:2802,load,load,2802,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774,1,['load'],['load']
Performance,"r: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_check_all; -- Performing Test has_check_all - Success; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for incl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:10598,Perform,Performing,10598,https://psicode.org,https://github.com/psi4/psi4/issues/581,10,['Perform'],['Performing']
Performance,"r__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <type at remote 0x5589d8149500>, 'store': <type at remote 0x5589d8149500>, 'store_const': <type at remote 0x5589d81498b0>, 'store_true': <t...(truncated), flags=<optimized out>, arena=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/pythonrun.c:1147; #51 0x00007faabd6ddffd in PyRun_StringFlags (str=<optimized out>, start=257, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'argparse': <module at remote 0x7faab0111360>, 'RawTextHelpFormatter': <type at remote 0x5589d81469f0>, 'Path': <type at remote 0x5589d81226d0>, 'parser': <ArgumentParser(description='Psi4: Open-Source Quantum Chemistry', argument_default=None, prefix_chars='-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:19636,optimiz,optimized,19636,https://psicode.org,https://github.com/psi4/psi4/issues/2010,2,['optimiz'],['optimized']
Performance,"raits<char>, std::allocator<char> >, bool, std::optional<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, double, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > > > const&), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, pybind11::arg const&, pybind11::arg const&, pybind11::arg_v const&, char const (&) [43])::{lambda(pybind11::detail::function_call&)#1}::operator()(pybind11::detail::function_call&) const (__closure=<optimized out>, call=...) at /home/susi/.conda/envs/p4env/include/pybind11/pybind11.h:297; #6 0x00007fac0b7a3925 in pybind11::cpp_function::dispatcher (self=<optimized out>, args_in=0x7fabd7888e00, kwargs_in=0x0) at /home/susi/.conda/envs/p4env/include/pybind11/pybind11.h:987; #7 0x000055ff906815a6 in cfunction_call (func=0x7fac0e0cdb20, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; --Type <RET> for more, q to quit, c to continue without paging--; #8 0x000055ff9067aa6b in _PyObject_MakeTpCall (tstate=0x55ff9515e050, callable=callable@entry=0x7fac0e0cdb20, args=args@entry=0x55ff96063ea0, nargs=2, keywords=keywords@entry=0x0); at /usr/local/src/conda/python-3.10.14/Objects/call.c:215; #9 0x000055ff906769d6 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=<optimized out>, callable=0x7fac0e0cdb20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:112; #10 _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:99; #11 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20) at /usr/local/src/conda/python-3.10",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:6652,optimiz,optimized,6652,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,ran compiler: /usr/local/bin/gfortran; -- Check for working Fortran compiler: /usr/local/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /usr/local/bin/gfortran supports Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Perfo,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:1939,Perform,Performing,1939,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance,"ray.cc:134; > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630); > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50; > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>); > at /usr/include/boost/python/detail/invoke.hpp:75; > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223; > #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (_)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38; > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0; > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); > from /usr/lib/libboost_python3.so.1.54.0; > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); > at /usr/include/boost/python/detail/translate_exception.hpp:48; > #14 operator()<bool, boost::pyth",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:2128,optimiz,optimized,2128,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,2,['optimiz'],['optimized']
Performance,"rd; -----------------------------------------------------------------------. Psi4 started on: Mon Aug 22 01:48:05 2016. Process ID: 28503; PSI4DATADIR: /usr/local/psi4/share/psi4; Memory level set to 256.000 MB. ==> Input File <==. --------------------------------------------------------------------------; #! Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. ; # Print; # the path to a trajectory file for visualization; # in Jmol.; # grep '@IRC' on the output to see a nice printout; # of the progress of your IRC computation. molecule h2o2 {; H 0.0000000000 0.9803530335 -0.8498671785; O 0.0000000000 0.6988545188 0.0536419016; O 0.0000000000 -0.6988545188 0.0536419016; H 0.0000000000 -0.9803530335 -0.8498671785; }. # g_convergence needs to be tight for IRCs:; set g_convergence gau_verytight. set {; basis dzp; opt_type irc; geom_maxiter 50; irc_direction backward; }. frequencies('scf'). # Lower point group from C2v to C2; h2o2.reset_point_group('c2'). energy = optimize('scf'). compare_values(-150.8200278868627, energy, 5, ""Energy of last IRC point"") #TEST; --------------------------------------------------------------------------; hessian() will perform analytic frequency computation.; There are an even number of electrons - assuming singlet.; Specify the multiplicity in the molecule input block. *** tstart() called on mrabsence-Ubuntu; *** at Mon Aug 22 01:48:07 2016. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 1 Threads, 256 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H -0.000000000000 0.980353033500 -0.849954236217 1.007825032070; O -0.000000000000 0.698854518800 0.053554843883 15.994914619560; O 0.00000000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/463:1995,optimiz,optimize,1995,https://psicode.org,https://github.com/psi4/psi4/issues/463,1,['optimiz'],['optimize']
Performance,"re (kwdict=0x7fabd7bce4c0, callargs=0x7fabd7888dc0, func=0x7fac0e398e00, trace_info=0x7fff112864b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #28 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8949cf0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #29 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8949cf0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #30 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #31 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #32 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; --Type <RET> for more, q to quit, c to continue without paging--; #33 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #34 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286660, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #35 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8697300, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #36 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8697300, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #37 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:11613,optimiz,optimized,11613,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"re (kwdict=0x7fabd8887300, callargs=0x7fabd88851c0, func=0x7fac0e398e00, trace_info=0x7fff11287280, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #74 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c49700, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #75 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c49700, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #76 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #77 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #78 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #79 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #80 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287430, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #81 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6eae0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #82 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6eae0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #83 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:20567,optimiz,optimized,20567,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"re_matrices(odd_g_start, g0, 3, 'start grad'); > ; > def test_badodd_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(odd_nre_opt, mol.nuclear_repulsion_energy(), 2, 'opt nre nogood'); > compare_values(odd_e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene nogood'); > compare_values(odd_rmsg_opt, g.rms(), 4, 'opt grad nogood'); > ; > test_norm_start(normz); > test_zero_grad(normz); > ; > # And behold, the initial gradient matches Q-Chem, the optimization; > ; > # progresses nicely, the RMS Force column goes to zero, and the gradient; > ; > # at the end is zero.; > ; > # start nre.........................................................PASSED; > ; > # start ene.........................................................PASSED; > ; > # start rms grad....................................................PASSED; > ; > # start grad........................................................PASSED; > ; > #Optimizer: Optimization complete!; > ; > # opt nre...........................................................PASSED; > ; > # opt ene...........................................................PASSED; > ; > # opt ZERO grad.....................................................PASSED; > ; > # --------------------------------------------------------------------------------------------------------------- ~; > ; > # Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; > ; > # --------------------------------------------------------------------------------------------------------------- ~; > ; > # 1 -139.530718293045 -139.530718293045 0.05695995 0.03625240 0.19767161 0.12159384 ~; > ; > # 2 -139.555614729326 -0.024896436281 0.02341593 0.00968824 0.06857406 0.03977721 ~; > ; > # 3 -139.556998324542 -0.001383595215 0.00950087 0.00516674 0.02878292 0.01662559 ~; > ; > # 4 -139.557349947407 -0.000351622866 0.00371412 0.00163364 0.01005622 0.00527025 ~; > ; > # 5 -139.557391640737 -0.000041693330 0.0005",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-195966638:4774,Optimiz,Optimizer,4774,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638,2,['Optimiz'],"['Optimization', 'Optimizer']"
Performance,rforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3317,Perform,Performing,3317,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,rforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3445,Perform,Performing,3445,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,11,['Perform'],['Performing']
Performance,rforming Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specif,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3276,Perform,Performing,3276,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,"rger segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also confirm that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. Chem. Phys. 121, 3463 (2004).; [5] Frank Jensen, Polarization consistent basis sets. VI. The elements He, Li, Be, B, Ne, Na, Mg, Al, Ar, J. Phys. Chem. A 111, 11198 (2007).; [6] Frank Jensen, Polarization Consistent Basis Sets. VII. The Elements K, Ca, Ga, Ge, As, Se, B; r and Kr, J. Chem. Phys. 136, 094110 (2012).; [7] Frank Jensen, Polarization Consistent Basis Sets. VIII. The Transition Metals Sc-Zn, J. Chem. Phys. 138, 014107 (2013).; [8] Teobald Kupka, Carmay Lim, Polarization-Consistent versus Correlation-Consistent Basis Sets in Predicting Molecular and Spectroscopic Properties, J. Phys. Chem. A. 111m 1927 (2007).; [9] Frank Jensen, Unifying General and Segmented Contracted Basis Sets. Segmented Polarization Consistent Basis Sets., Journal of Chemical Theory and Computation 10, 1074-1085 (2014) DOI: 10.1021/ct401026a.; [10] Frank Jensen, Segmented Contracted Basis Sets Optimized for Nuclear Magnetic Shielding, J. Chem. Theory Comp. 11, 132 (2015).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/475:3040,Optimiz,Optimized,3040,https://psicode.org,https://github.com/psi4/psi4/pull/475,1,['Optimiz'],['Optimized']
Performance,"rgy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 25.59060766929188; CD-HF Energy (a.u.) : -129.25927206477397; REF Energy (a.u.) : -129.25927206477397; Alpha-Alpha Contribution (a.u.) : -0.03921205696199; Alpha-Beta Contribution (a.u.) : -0.20476196654188; Beta-Beta Contribution (a.u.) : -0.03692010667753; Scaled_SS Correlation Energy (a.u.): -0.02537738787984; Scaled_OS Correlation Energy (a.u.): -0.24571435985026; CD-SCS-MP2 Total Energy (a.u.) : -129.53036381250408; CD-SOS-MP2 Total Energy (a.u.) : -129.52546262127842; CD-SCSN-MP2 Total Energy (a.u.) : -129.39326467277954; CD-MP2 Correlation Energy (a.u.) : -0.28089413018141; CD-MP2 Total Energy (a.u.) : -129.54016619495539; =======================================================================. Number of alpha independent-pairs:172; Number of beta independent-pairs :157. ==============================================================================; ================ Performing CD-OMP2 iterations... ============================; ==============================================================================; Minimizing CD-MP2-L Functional; ------------------------------; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2; ---- --------------- ---------- ----------- ----------- ----------; 1 2171897840405125233095316875881590551467307175332860142219670350830780702696283291230457729657914921746891661667264776735054294112163359650172177568018543474023361651834998812756231127668278305330007498940536320077394375160362584676926576578513365418212288803914428069938462720.0000000000 2.17e+276 inf 1.41e+183 8.10e+89; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 40, in <module>. File ""/build/psi4-lIOjn9/psi4-1.0~rc/share/python/driver.py"", line 444, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""/build/psi4-lIOjn9/psi4-1.0~rc/share/pyt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391:1121,Perform,Performing,1121,https://psicode.org,https://github.com/psi4/psi4/issues/391,1,['Perform'],['Performing']
Performance,rid = TRUE; X_Alpha = 2.500000E-01; X_Omega = 0.000000E+00; C_LRC = FALSE; C_Hybrid = FALSE; C_Alpha = 0.000000E+00; C_Omega = 0.000000E+00. => Exchange Functionals <=. 0.7500 PBE_X; 0.2500 HF . => Correlation Functionals <=. 1.0000 PBE_C. => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = FLAT; Nuclear Scheme = TREUTLER. BS radius alpha = 1; Pruning alpha = 1; Radial Points = 75; Spherical Points = 302; Total Points = 65565; Total Blocks = 69; Max Points = 4576; Max Functions = 19. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 19 19 0 0 0 0; -------------------------------------------------------; Total 19 19 5 5 5 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 8; Integrals threads: 8; Memory (MB): 183; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12. => Auxiliary Basis Set <=. Basis Set: ; Number of shells: 42; Number of basis function: 131; Number of Cartesian functions: 131; Spherical Harmonics?: false; Max angular momentum: 3. => External Potential Field: <= . > Charges [a.u.] < . Z x y z; -1.30623 -0.64897 0.00000 1.10730; 0.35181 -0.75342 -0.00000 1.26252; 0.86636 -0.77880 0.13229 1.13268; -1.30623 -0.90864 -0.00000 1.15806; 0.10177 -0.80418 0.00000 1.00285; 0.86636 -0.77880 -0.13229 1.13268; 0.51285 -0.79652 0.76410 1.73167; -1.74409 -0.67784 0.64529 1.64918; 0.85696 -0.68947 0.82229 1.58969; 0.51285 -0.53684 0.76410 1.68091; -0.59896 -0.65552 0.88291 1.76340; 0.67348 -0.64389 0.70591 1.82290; 0.51285 -0.79652 -0.76410 1.73167; -0.59896 -0.65552 -0.88291 1.76340; 0.85696 -0.68947 -0.82229 1.58969; 0.51285 -0.53684 -0.76410 1.68091; -1.74409 -0.67784 -0.64529 1.64918; 0.67348 -0.64389 -0.70591 1.82289. Old nuclear repulsion = 9.147,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182660528:5664,Cache,Cache,5664,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528,1,['Cache'],['Cache']
Performance,rming Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3404,Perform,Performing,3404,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,"rom /u/en/taube/c7dpr/prefixes/psi4/1.3.2-desres03-c7/lib/psi4/core.cpython-37m-x86_64-linux-gnu.so; #4 0x00007fffdf48fe51 in void pybind11::cpp_function::initialize<int (*&)(), int, , pybind11::name, pybind11::scope, pybind11::sibling, char [58]>(int (*&)(), int (*)(), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, char const (&) [58])::{lambda(pybind11::detail::function_call&)#1}::_FUN(pybind11::detail::function_call&) () from /u/en/taube/c7dpr/prefixes/psi4/1.3.2-desres03-c7/lib/psi4/core.cpython-37m-x86_64-linux-gnu.so; #5 0x00007fffdeff6104 in pybind11::cpp_function::dispatcher(_object*, _object*, _object*) () from /u/en/taube/c7dpr/prefixes/psi4/1.3.2-desres03-c7/lib/psi4/core.cpython-37m-x86_64-linux-gnu.so; #6 0x00007ffff7919e63 in _PyMethodDef_RawFastCallKeywords (method=0x99e900, self=<optimized out>, args=0x110b5f8, nargs=0, kwnames=<optimized out>) at Objects/call.c:690; #7 0x00007ffff7919ee5 in _PyCFunction_FastCallKeywords (func=0x7fffeffd03a8, args=<optimized out>, nargs=<optimized out>, kwnames=<optimized out>) at Objects/call.c:730; #8 0x00007ffff78f2178 in call_function (kwnames=0x0, oparg=0, pp_stack=<synthetic pointer>) at Python/ceval.c:4568; #9 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3093; #10 0x00007ffff7a02dec in _PyEval_EvalCodeWithName (_co=0x7fffc6816db0, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, argcount=1, kwnames=0x7fffeffadb58, kwargs=0x7ffff7f76b70, kwcount=3, kwstep=1, defs=0x0,; defcount=0, kwdefs=0x0, closure=0x0, name=0x7ffff7fc1830, qualname=0x7ffff7fc1830) at Python/ceval.c:3930; #11 0x00007ffff7919966 in _PyFunction_FastCallKeywords (func=<optimized out>, stack=<optimized out>, nargs=<optimized out>, kwnames=<optimized out>) at Objects/call.c:433; #12 0x00007ffff78f2e32 in call_function (kwnames=0x7fffeffadb40, oparg=<optimized out>, pp_stack=<synthetic pointer>) at Python/ceval.c:4616; #13 _PyEval_EvalFrameDefault (f=<opti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878:3206,optimiz,optimized,3206,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878,3,['optimiz'],['optimized']
Performance,"round is, so I'm going to write this explanation at a level accessible for a first-year graduate student, though it will still be dense.; > ; > Many matrices in electronic structure theory are indexed by two orbitals. Each orbital will change in a different way under symmetry operations of the molecule (like rotation, reflection), and we call each classification an irreducible representation (irrep). Now, our matrices further have the property that A_mn = 0 unless the symmetries of m and n are somehow related. Our matrix then only needs to store ""blocks"" where for all orbitals m of irreducible representation h, the only non-zero elements of A are A_mn where n is an orbital of irreducible representation i.; > ; > Because we use this block structure, it isn't enough to make sure that the total dimensions of the matrix agree (what your code does). We need the dimensions of each symmetry block to agree on the three points mentioned in the original issue. This validation should be performed for each irreducible representation.; > ; > For reference, the code that Susi linked does the following:; > ; > ```; > for each irreducible representation of the first index of A, Ha:; > 	Hb is the irreducible representation of the first index of the B block that can multiply with the A block; > Hc is the irreducible representation of the first index of the new matrix (if we're multiplying by A, this is just Ha, otherwise this is the irreducible representation of the second index for the block with first index Ha); > 	m is the number of orbitals with the irreducible representation for the first index in this block of the new matrix; > 	n is the number of orbitals with the irreducible representation for the second index in this block of the new matrix; > 	k is the number of orbitals with the irreducible representation for the second index in this block of A, which is also the number of orbitals with the irreducible representation for the first index in this block of B; > 	lda is the num",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2729#issuecomment-1261945010:1021,perform,performed,1021,https://psicode.org,https://github.com/psi4/psi4/pull/2729#issuecomment-1261945010,1,['perform'],['performed']
Performance,rtran compiler ABI info - done; -- Checking whether /usr/local/bin/gfortran supports Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Per,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:2106,Perform,Performing,2106,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance,"run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; __________________________________________________________________ test_psi4_cc __________________________________________________________________. def test_psi4_cc():; """"""cc1""""""; #! RHF-CCSD 6-31G** all-electron optimization of the H2O molecule; ; h2o = psi4.geometry(""""""; O; H 1 0.97; H 1 0.97 2 103.0; """"""); ; psi4.set_options({""basis"": '6-31G**'}); ; > psi4.optimize('ccsd'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:63: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:1050: in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:697: in gradient; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:752: i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:28276,optimiz,optimization,28276,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['optimiz'],['optimization']
Performance,"ryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); psi::psio_write_entry(unsigned long, char const*, char*, unsigned long); ```; This then results in a second PSIO error upon each subsequent optimization iteration, when attempting to read the binary optimization data from file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::psio_error(unsigned long, unsigned long); psi::PSIO::open(unsigned long, int); psi::psio_open(unsigned long, int); opt::opt_io_is_present(); ```; This finally results in the optimizer spinning its wheels for the remainder of the allotted iterations. The usual PSIO error-culprit, an un-touchable filesystem, was ruled out for both machines on which this behavior was observed. Input:; ```; # index A24-7-dimer label Dimer from ammmonia_methane_C3v. memory 14000 mb. molecule mol {; units Angstrom; no_com; no_reorient; 0 1; N 0.001106462041 -0.000130846927 1.849133409958; H 0.938627974105 -0.000139345380 2.221618285244; H -0.467316580071 -0.811849948182 2.222477040520; H -0.467307391010 0.811579719379 2.222474714333; H -0.000457075852 -0.000011938197 -0.942103507206; C -0.001019750816 0.000109523659 -2.027776337389; H 0.509840850903 0.885353515687 -2.394362733084; H 0.509834400679 -0.885039296153 -2.394623104348; H -1.023308879978 0.000128616114 -2.393761958029. }. set e_convergence 11; set basis cc-pvtz; set scf guess sad; set scf dft_radial_points 150; set scf scf_type df; set scf dft_spherical_points 434; se",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/789:1273,optimiz,optimizer,1273,https://psicode.org,https://github.com/psi4/psi4/issues/789,1,['optimiz'],['optimizer']
Performance,"s = 302; Total Points = 238643; Total Blocks = 1822; Max Points = 256; Max Functions = 111; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (VDZP AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1, 3-8 entry C line 198 file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 2, 9-11 entry H line 18 file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/def2-universal-jkfit.gbs . ==> Integral Setup <==. DFHelper Memory: AOs need 0.163 GiB; user supplied 0.163 GiB. ; Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: Yes; Omega: 3.000E-01; OpenMP threads: 1; Memory [MiB]: 167; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 3.8471; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (VDZP AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 199; Number of basis functions: 597; Number of Cartesian functions: 703; Spherical Harmonics?: true; Max angular momentum: 4. Cached 25.0% of DFT collocation blocks in 0.155 [GiB]. Minimum eigenvalue in the overlap matrix is 5.5224744543E-04.; Reciprocal condition number of the overlap matrix is 8.7845130506E-05.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo ; -------------------------; A 111 111 ; -------------------------; Total 111 111; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -40.20742626722070 -4.02074e+01 0.00000e+00 ; @DF-RKS iter 1: -41.85372076056422 -1.64629e+00 4.64946e-03 DIIS/ADIIS; @DF-RKS iter 2: -42.00985523463992 -1.56134e-01 2.18407e-03 DIIS/ADIIS; @DF-RKS iter 3: -42.04248981983608 -3.26346e-02 7.08822e-04 DIIS/ADIIS; @DF-RKS iter 4: -42.04528563064348 -2.79581e-03 3.01721e-04 DIIS/ADIIS; @DF-RKS iter 5: -42.04589556301210 -6.09932e-04 8.40052e-05 DIIS; @DF-RKS iter 6: -42.0459464131240",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:22478,Cache,Cached,22478,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Cache'],['Cached']
Performance,"s = 75; Spherical Points = 302; Total Points = 281815; Total Blocks = 2159; Max Points = 256; Max Functions = 305; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (DEF2-TZVPPD AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1, 4, 6 entry O line 318 file .../share/psi4/basis/def2-universal-jkfit.gbs ; atoms 2-3, 9-13 entry H line 18 file .../share/psi4/basis/def2-universal-jkfit.gbs ; atoms 5, 7-8 entry C line 198 file .../share/psi4/basis/def2-universal-jkfit.gbs . ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: Yes; Omega: 3.000E-01; OpenMP threads: 1; Integrals threads: 1; Memory [MiB]: 243; Algorithm: Disk; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (DEF2-TZVPPD AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 192; Number of basis functions: 582; Number of Cartesian functions: 686; Spherical Harmonics?: true; Max angular momentum: 4. Cached 2.7% of DFT collocation blocks in 0.139 [GiB]. Minimum eigenvalue in the overlap matrix is 7.9030311415E-06.; Reciprocal condition number of the overlap matrix is 5.7126628552E-07.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo ; -------------------------; A 350 350 ; -------------------------; Total 350 350; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -266.76788027937141 -2.66768e+02 0.00000e+00 ; @DF-RKS iter 1: -267.44459096234198 -6.76711e-01 2.70804e-03 DIIS/ADIIS; @DF-RKS iter 2: -266.62712078236223 8.17470e-01 4.29888e-03 DIIS/ADIIS; @DF-RKS iter 3: 222.21931934020711 4.88846e+02 3.68763e-02 DIIS/ADIIS; @DF-RKS iter 4: -220.14524491052583 -4.42365e+02 1.39645e-02 DIIS/ADIIS; @DF-RKS iter 5: 105.97080762091727 3.26116e+02 3.43637e-02 DIIS/ADIIS; @DF-RKS iter 6: -197.93937",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051:7328,Cache,Cached,7328,https://psicode.org,https://github.com/psi4/psi4/issues/3051,1,['Cache'],['Cached']
Performance,"s alpha = 1; Pruning alpha = 1; Radial Points = 99; Spherical Points = 590; Total Points = 912458; Total Blocks = 6145; Max Points = 256; Max Functions = 640; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (DEF2-TZVPPD AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-6, 13-18 entry C line 198 file [REMOVED BASE DIRECTORY]/psi4/basis/def2-universal-jkfit.gbs ; atoms 7-12, 19-24 entry H line 18 file [REMOVED BASE DIRECTORY]/psi4/basis/def2-universal-jkfit.gbs . ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: Yes; Omega: 3.000E-01; OpenMP threads: 14; Integrals threads: 14; Memory [MiB]: 337; Algorithm: Disk; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (DEF2-TZVPPD AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 372; Number of basis functions: 1116; Number of Cartesian functions: 1308; Spherical Harmonics?: true; Max angular momentum: 4. Cached 0.1% of DFT collocation blocks in 0.036 [GiB]. Minimum eigenvalue in the overlap matrix is 7.2890634209E-11.; Reciprocal condition number of the overlap matrix is 1.8442944048E-12.; Using canonical orthogonalization.; Overall, 27 of 648 possible MOs eliminated. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo ; -------------------------; A 648 621 ; -------------------------; Total 648 621; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -212.57868470845432 -2.12579e+02 0.00000e+00 ; @DF-RKS iter 1: -74.64880419187541 1.37930e+02 2.89342e-02 DIIS/ADIIS; @DF-RKS iter 2: -104.73618075758787 -3.00874e+01 2.89040e-02 DIIS/ADIIS. Traceback (most recent call last):; File ""[REMOVED BASE DIRECTORY]/bin/psi4"", line 347, in <module>; exec(content); File ""<string>"", line 66, in <module>; File ""[REMOVED BASE DIRECTORY]/lib/psi4/dr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641:10519,Cache,Cached,10519,https://psicode.org,https://github.com/psi4/psi4/issues/2641,1,['Cache'],['Cached']
Performance,"s); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/driver.py"", line 739, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2485, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2390, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1607, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 93, in scf_compute_energy; raise e; File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; self.iterations(); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 473, in scf_iterate; raise SCFConvergenceError(""""""SCF iterations"""""", self.iteration_, self, Ediff, Dnorm). psi4.driver.p4util.exceptions.SCFConvergenceError: Could not converge SCF iterations in 100 iterations. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""MAXITER"", 100); core.set_global_option(""G_CONVERGENCE"", ""gau""); core.set_global_option(""SOSCF"", ""true""); core.set_global_option(""SOSCF_MAX_ITER"", 40); set_num_threads(20); --> E, wfn = optimize('B3LYP-D3', bsse_type='cp', return_wfn=True); fchk(wfn, 'citric_acid_bsse_cp.fchk'); def saveFile(name, string):; f=open(name, 'w'); f.write(string); f.close(). !-------------------------------------------------------!; ! !; ! Could not converge SCF iterations in 100 iterations. !; ! !; !-------------------------------------------------------!. Psi4 stopped on: Tuesday, 26 October 2021 02:03PM; Psi4 wall time for execution: 3:28:16.19; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338:16968,optimiz,optimize,16968,https://psicode.org,https://github.com/psi4/psi4/issues/2338,1,['optimiz'],['optimize']
Performance,"s, ultimately, to create a new JK class (_CompositeJK_) that offers a proper framework for combining separate J and K algorithms for use in JK construction. Such a class will provide a home for any new separate J and K algorithm that gets added to Psi4 in the future (such as the in-progress CFMM). Additionally, the CompositeJK class will be designed in such as a way to enable arbitrary combinations of any available separate J and K build algorithm through a single JK subclass. This arbitrary mixing and matching is planned to be accesible in a user-friendly way. DFJLinK is the first step to this process. DFJLinK, itself, is a new JK subclass that combines the integral-direct density fitted J build algorithm from DFJCOSK with the LinK algorithm previously available in DirectJK. LinK was previously available for use in Psi4 via DirectJK, but was always disrecommended due to its combination with a normal DirectJK implementation for J construction. In conjunction with Direct DF-J to form the Coulomb matrix, LinK performs much better. Some benchmarks comparing the Direct DF-J + LinK algorithm combination to other JK options in Psi4, for water clusters of varying sizes at the cc-pVDZ basis set, are attached:. ![Timing Plots of Water Clusters at cc-pVDZ](https://user-images.githubusercontent.com/26306559/198107808-42f3b855-13f0-4e14-8a50-c0402c16b94f.png). Small, non-diffuse basis sets are the specialty of Direct DF-J + LinK, and it reflects here, with DFJLinK outperforming the other integral-direct JK options for most of the water clusters, and being the fastest JK option tested overall for large water clusters. For specific comparisons to Direct DF-J + COSX, the closest current analogue in Psi4, DFJCOSK performs better for larger basis sets or more complex systems, while DFJLinK performs better for smaller basis sets and less complex systems from my testing. It may be worth noting that the DFJLinK in the listed benchmarks used a different implementation of Direct DF-J comp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2762:2218,perform,performs,2218,https://psicode.org,https://github.com/psi4/psi4/pull/2762,1,['perform'],['performs']
Performance,"s/unix/sysv/linux/raise.c:55. 55 return INLINE_SYSCALL (tgkill, 3, pid, selftid, sig);; (gdb) where; #0 0x00006a91c31f18d7 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:55; #1 0x00006a91c31f353a in __GI_abort () at abort.c:89; #2 0x00000000014c2e4f in opt::optking(psi::Options&) (); #3 0x0000000000a4c2fc in py_psi_optking() (); #4 0x0000000000a8993e in boost::python::objects::caller_py_function_impl<boost::python::detail::caller<int (*)(), boost::python::default_call_policies, boost::mpl::vector1<int> > >::operator()(_object_, _object_) (); #5 0x000000000554b96e in boost::python::objects::function::call(_object_, _object_) const (); #6 0x000000000554b6a5 in boost::detail::function::void_function_ref_invoker0<boost::python::objects::(anonymous namespace)::bind_return, void>::invoke(boost::detail::function::function_buffer&) (); #7 0x000000000555699d in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); #8 0x0000000000a6d6f5 in boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke(boost::detail::function::function_buffer&, boost::python::detail::exception_handler const&, boost::function0<void> const&) (); #9 0x0000000005556d54 in boost::python::handle_exception_impl(boost::function0<void>) (); #10 0x000000000554d0fe in function_call (); #11 0x00006a91c37de333 in PyObject_Call (func=0x9231260, arg=<optimized out>, kw=<optimized out>) at Objects/abstract.c:2529; #12 0x00006a91c388d4b2 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x712c327ea368, func=0x9231260) at Python/ceval.c:4253; #13 call_function (oparg=<optimized out>, pp_stack=0x712c327ea368) at Python/ceval.c:4058; #14 Py",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:2125,optimiz,optimized,2125,https://psicode.org,https://github.com/psi4/psi4/issues/153,2,['optimiz'],['optimized']
Performance,"s=0x0, nargsf=2, args=0x7fff112882d0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #135 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11288360) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #136 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #137 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd884ea30, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #138 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd887ef60, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fabd8a587f0, level=2); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #139 0x000055ff9067536b in import_name (level=0x7fac0e300110, fromlist=0x7fabd8a587f0, name=0x7fabd887ef60, f=0x55ff95dcd100, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #140 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95dcd100, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #141 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x55ff95dcd100, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #142 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112886e0, locals=locals@entry=0x7fac0e0f83c0, args=args@entry=0x0, argcount=argcount@entry=0, ; --Type <RET> for more, q to quit, c to continue without paging--; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #143 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8882550, globals=globals@entry=0x7fac0e0f83c0, locals=locals@entry=0x7fac0e0f83c0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #144 0x00",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:32315,optimiz,optimized,32315,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"s=0x0, nargsf=2, args=0x7fff112890a0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #181 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11289130) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #182 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #183 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd8928940, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #184 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd8903a70, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fabd8e6e320, level=1); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #185 0x000055ff9067536b in import_name (level=0x7fac0e3000f0, fromlist=0x7fabd8e6e320, name=0x7fabd8903a70, f=0x7fabdcdb7a00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #186 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabdcdb7a00, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #187 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabdcdb7a00, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #188 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112894b0, locals=locals@entry=0x7fabd8903bc0, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #189 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8a87940, globals=globals@entry=0x7fabd8903bc0, locals=locals@entry=0x7fabd8903bc0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #190 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, local",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:41315,optimiz,optimized,41315,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"s=0x0, nargsf=2, args=0x7fff1128a6d0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #255 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128a760) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #256 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #257 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd89285d0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #258 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd8928580, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fabe4291420, level=1); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #259 0x000055ff9067536b in import_name (level=0x7fac0e3000f0, fromlist=0x7fabe4291420, name=0x7fabd8928580, f=0x7fac0e074610, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #260 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e074610, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #261 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e074610, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #262 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128aae0, locals=locals@entry=0x7fabdcd7a300, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #263 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8a86550, globals=globals@entry=0x7fabdcd7a300, locals=locals@entry=0x7fabdcd7a300); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #264 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, local",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:55639,optimiz,optimized,55639,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"s=0x0, nargsf=2, args=0x7fff1128c920, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #367 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128c9b0) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #368 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #369 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fac0e079f30, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #370 PyImport_ImportModuleLevelObject (name=name@entry=0x7fac0e136530, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fac0e104d90, level=1); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #371 0x000055ff9067536b in import_name (level=0x7fac0e3000f0, fromlist=0x7fac0e104d90, name=0x7fac0e136530, f=0x7fac0e16ec00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #372 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16ec00, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #373 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16ec00, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #374 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128cd30, locals=locals@entry=0x7fac0e071580, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #375 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fac0e06f7e0, globals=globals@entry=0x7fac0e071580, locals=locals@entry=0x7fac0e071580); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #376 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, local",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:77428,optimiz,optimized,77428,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: ERD; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:26 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.000000000000 0.550000000000 15.994914619560. Running in d2h symmetry. Rotational constants: A = ************ B = 1.74204 C = 1.74204 [cm^-1]; Rotational constants: A = ************ B = 52225.17395 C = 52225.17395 [MHz]; Nuclear repulsion = 30.788492136145454. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:9356,Load,Loading,9356,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Load'],['Loading']
Performance,seg fault possibly caused by or related to collocation grid cache build,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1366:60,cache,cache,60,https://psicode.org,https://github.com/psi4/psi4/issues/1366,1,['cache'],['cache']
Performance,"separate J build algorithm of choice, and _K_alg_ is the separate K algorithm of choice. As of now, the two CompositeJK options available are `DIRECTDFJ+LINK` representing the old DFJLinK class, and `DIRECTDFJ+COSX` representing the old DFJCOSK class. The key here, is that the ""+"" delimiter in SCF_TYPE serves as a signal to Psi4 that a CompositeJK algorithm is being used. ; - Back end. Basically all of the back-end changes can be classified into two categories - merging DFJLinK and DFJCOSK into the initial CompositeJK implementation, and modifications of functions where necessary to support the above front-end changes. . ## User API & Changelog headlines; - [X] The ""COSX"" keyword for ""SCF_TYPE"" has been replaced with ""DIRECTDFJ+COSX"".; - [X] The ""LINK"" keyword for ""SCF_TYPE"" has been replaced with ""DIRECTDFJ+LINK"". ## Dev notes & details; - [X] Refactors the DFJLinK and DFJCOSK classes into the combined CompositeJK JK subclass. CompositeJK can perform the computations previously performed by both DFJLinK and DFJCOSK within a single JK subclass. These changes are largely localized to the commits f0c4f6c8e31696f6690e101d71bef1863bcf324c - ca66c91976cb5e8c42c8292fcf90c6d28b885fd0, with bfdff974dbfbb9513c85a460b00495598e5f240e also counting. ; - [X] Implements a new scheme for ""SCF_TYPE"" names associated with CompositeJK algorithm combinations. This scheme uses the ""+"" delimiter in conjunction with the names of the separate J and K algorithms present in CompositeJK to use a specific combination of separate J and K build algorithms. ; - [X] Changes functionalities in DFJLinK and DFJCOSK, as well of the JK base class itself, as necessary to support the standardized ""SCF_TYPE"" naming scheme and the general flexibility and ease of expansion that CompositeJK is aiming for.; - [X] Updates relevant tests and documentation. ## To-do; - [x] Update CompositeJK methods with comments on paper references.; - [x] Update CompositeJK::num_computed_shells() function. ## Questions; - [ ] ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2833:3323,perform,perform,3323,https://psicode.org,https://github.com/psi4/psi4/pull/2833,2,['perform'],"['perform', 'performed']"
Performance,"sform>, std::shared_ptr<psi::MOSpace>, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; double Econstant = wfn->molecule()->nuclear_repulsion_energy();; ^; In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; ^; /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ```; The output generated by `psi4-path-advisor --gcc` is; ```; /home/shouck/miniconda3/envs/p4dev/bin/cmake \; -H. \; -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; -Bobjdir; ```; @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to `ON` in psi4DepsCache.cmake by default; changing it to; ```; set(ENABLE_CheMPS2 OFF CACHE BOOL """"); set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); ```; allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!. [CMakeError.log](https://github.com/psi4/psi4/files/1515094/CMakeError.log); [CMakeOutput.log](https://github.com/psi4/psi4/files/1515095/CMakeOutput.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/871:1844,CACHE,CACHE,1844,https://psicode.org,https://github.com/psi4/psi4/issues/871,2,['CACHE'],['CACHE']
Performance,"shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::scf::HF>), std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::scf::HF>, pybind11::name, pybind11::scope, pybind11::sibling, pybind11::arg, char [61]>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::scf::HF>), std::shared_ptr<psi::Matrix> (*)(std::shared_ptr<psi::scf::HF>), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, pybind11::arg const&, char const (&) [61])::{lambda(pybind11::detail::function_call&)#1}::_FUN(pybind11::detail::function_call&) () at /usr/include/pybind11/pybind11.h:224. #19 0x00007f21a8441138 in pybind11::cpp_function::dispatcher (self=0x7f2185ffe790, args_in=0x7f21476cd000, ; kwargs_in=0x0) at /usr/include/pybind11/pybind11.h:946; #20 0x000056022a991401 in cfunction_call (func=0x7f2186005210, args=0x7f21476cd000, kwargs=0x0); at /usr/local/src/conda/python-3.12.5/Objects/methodobject.c:537; #21 0x000056022a97109b in _PyObject_MakeTpCall (tstate=0x56022ae03058 <_PyRuntime+459704>, ; callable=0x7f2186005210, args=<optimized out>, nargs=1, keywords=0x0); at /usr/local/src/conda/python-3.12.5/Objects/call.c:240; #22 0x000056022a877f65 in _PyEval_EvalFrameDefault (tstate=<optimized out>, frame=0x7f21b9ea9af0, ; throwflag=<optimized out>) at Python/bytecodes.c:2714; #23 0x000056022aa2bece in PyEval_EvalCode (co=co@entry=0x56025a2e86d0, globals=globals@entry=0x7f21abff9900, ; locals=locals@entry=0x7f21abff9900) at /usr/local/src/conda/python-3.12.5/Python/ceval.c:578; #24 0x000056022aa50d9a in run_eval_code_obj (tstate=tstate@entry=0x56022ae03058 <_PyRuntime+459704>, ; co=co@entry=0x56025a2e86d0, globals=globals@entry=0x7f21abff9900, locals=locals@entry=0x7f21abff9900); at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:1722; --Type <RET> for more, q to quit, c to continue without paging--; #25 0x000056022aa4bf4b in run_mod (mod=mod@entry=0x56025a306440, ; filename=filename@entry=0x56022ad98b00 <_PyRuntime+24160>, globals=globals@entry=0x7f21abff9900, ; locals=local",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969:5146,optimiz,optimized,5146,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969,1,['optimiz'],['optimized']
Performance,"si4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to rebuild. > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1). * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. Notes. * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular momentum error on mac binary.; * simint max is AM7 both past and near future. Only libint is changing.; * Between higher AM and optimizing for multiple architectures, the new libint pkg is heavy, >120mb zipped. For psi4 CI, I'm planning to pull the old AM6 to lessen the strain on Travis. This won't help downstream projects that summon a built psi4 to test their addon.; * I haven't posted the AM8 package yet, as I want the stack to finish building, and I wanted to give you all a heads-up. I'll post to this issue when the package goes up. Will only be in -c psi4/label/dev for now, not -c psi4. —; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub<https://github.com/psi4/psi4/issues/1533>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AArOJyuo4E3GnVs6-g7y6p4rUmgxalOsks5vNL55gaJpZM4a6ozS>.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:3384,optimiz,optimizing,3384,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773,1,['optimiz'],['optimizing']
Performance,"si::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134; > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630); > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50; > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>); > at /usr/include/boost/python/detail/invoke.hpp:75; > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223; > #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (_)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38; > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0; > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); > from /usr/lib/libboost_python3.so.1.54.0; > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); > at /usr/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:2034,optimiz,optimized,2034,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,1,['optimiz'],['optimized']
Performance,"si_theme is derived) eventually robbed us of the ""search"" bar and the homing logo. That got minimally revived through https://github.com/psi4/sphinx-psi-theme/commit/feda2119994519c6dc1eb0979686c9cdbf916acc , so use the v1.1 now. But there's a few modest improvements here, especially to allow anyone so inspired to switch the docs theme and figure out new customizations. Apart from a certain fondness for the colors and an insistence that tables like https://psicode.org/psi4manual/master/introduction.html#id59 not be mangled, I'd be pleased if anyone wanted to overhaul the docs theme. Some things to know:; * psi4 colors and specializations are https://github.com/psi4/sphinx-psi-theme/blob/master/sphinx_psi_theme/themes/sphinx_psi_theme/theme.conf#L37; * to use a different theme, pass `-DSPHINX_THEME=another_theme` to cmake (or edit it in the cache); * build with `cmake --build . --target sphinxman`; * built docs will be in `<objdir>/doc/sphinxman/html/`. that html dir can be tarred and sent anywhere to load in a browser. ## Dev notes & details; - [x] the two sphinx extensions that were in the sphinx_psi_theme are now stored here in the repo. this lets them be used by any theme, which is important for the QCVariables one that otherwise emits thousands of warnings.; - [x] more logic around `@SPHINX_THEME@` in the controlling docs/sphinxman/source/conf.py.in so that one can use options and configuration particular to different themes. feel free to add more. tried themes are psi, cloud, basic, furo, and pydata. beware that some modern themes take a looong time to build (e.g., 40m instead of 5m) and increase the docs size 10-fold. at least one culprit is trying to put the whole TOC in the sidebar (incl. 1400 options), so there's stuff to be solved to try to transition themes.; - [x] I thought https://sphinx-tabs.readthedocs.io/en/latest/ would be a nice way to show psithon/psiapi/qcschema syntax, so I added that requirement to the docs build along with a quick example. ## ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3053:1515,load,load,1515,https://psicode.org,https://github.com/psi4/psi4/pull/3053,1,['load'],['load']
Performance,"side libint, etc. and that simint is avxfma. And it is those simint headers that show up in `./psi4-core-prefix/src/psi4-core-build/src/psi4/libmints/CMakeFiles/mints.dir/CXX.includecache` and are presumably defining SIMINT_AVX and thus triggering the offending `intrinsics_avx.h` inclusion. In the end, the same trouble as with multiple pybind11's – CMake can't trump native C++ header-seeking, so one has to keep any interferences out of sight. Resolved, sorry for the wild goose chase. ```; #pragma once; #define SIMINT_SSE; ```. ```; >>> grep -ir simint_VECTOR .; ./CMakeCache.txt:SIMINT_VECTOR:STRING=sse; ./external/upstream/simint/CMakeFiles/simint_external.dir/build.make:	cd /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external-build && /Users/loriab/linux/miniconda3/envs/p4dev36/bin/cmake -DCMAKE_INSTALL_PREFIX=/usr/local/psi4 -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_INCLUDEDIR=include -DBUILD_SHARED_LIBS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DSIMINT_STANDALONE=OFF -DENABLE_TESTS=OFF -DSIMINT_VECTOR=sse -DSIMINT_MAXAM=6 -C/Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/tmp/simint_external-cache-Release.cmake ""-GUnix Makefiles"" /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external; ./external/upstream/simint/simint_external-prefix/src/simint_external-build/CMakeCache.txt:SIMINT_VECTOR:STRING=sse; ./external/upstream/simint/simint_external-prefix/src/simint_external-build/simintConfig.cmake:set(simint_VECTOR sse); ./external/upstream/simint/simint_external-prefix/tmp/simint_external-cfgcmd.txt:cmd='/Users/loriab/linux/miniconda3/envs/p4dev36/bin/cmake;-DCMAKE_INSTALL_PREFIX=/usr/local/psi4;-DCMAKE_BUILD_TYPE=Release;-DCMAKE_C_COMPILER=/usr/bin/clang;-DCMAKE_CXX_COMPILER=/usr/bin/clang++;-DCMAKE_INSTALL_LIBDIR=l",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-356840364:1653,cache,cache-Release,1653,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-356840364,1,['cache'],['cache-Release']
Performance,"since_last_hessian=0, hessian_with_method='hf', optstash=<OptionsState(data={('INTRAFRAG_STEP_LIMIT', 'OPTKING'): <OptionState(option='INTRAFRAG_STEP_LIMIT', module='OPTKING', value_global=<float at remote 0x7faa8746f6d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746fe10>, haschanged_local=False, value_used=<float at remote 0x7faa8746fad0>, haschanged_used=False) at remote 0x7faaaffd1cd0>, ('HESSIAN_WRITE', 'FINDIF'): <OptionState(option='HESSIAN_WRITE', module='FINDIF', value_global=0, haschanged_global=False, value_local=0, haschanged_local=False, value_used=0, haschanged_used=False) at remote 0x7faaaffd1d60>, ('CART_HESS_READ', 'OPTKING'): <OptionState(option='CART_HESS_READ', module='OPTKING', value_global=0, haschanged_g...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #40 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x5589d8ccc008, ; kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='optimize', qualname='optimize') at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #41 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x5589d8ccc000, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:13019,optimiz,optimized,13019,https://psicode.org,https://github.com/psi4/psi4/issues/2010,8,['optimiz'],"['optimize', 'optimized']"
Performance,"sity Thresholds <==. XC_HYB_MGGA_XC_WB97M_V: 1.00E-13 . => VV10 Non-Local Parameters <=. VV10 B = 6.0000E+00; VV10 C = 1.0000E-02. => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = NONE; Nuclear Scheme = TREUTLER. Blocking Scheme = OCTREE; BS radius alpha = 1; Pruning alpha = 1; Radial Points = 75; Spherical Points = 302; Total Points = 281815; Total Blocks = 2159; Max Points = 256; Max Functions = 305; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (DEF2-TZVPPD AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1, 4, 6 entry O line 318 file .../share/psi4/basis/def2-universal-jkfit.gbs ; atoms 2-3, 9-13 entry H line 18 file .../share/psi4/basis/def2-universal-jkfit.gbs ; atoms 5, 7-8 entry C line 198 file .../share/psi4/basis/def2-universal-jkfit.gbs . ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: Yes; Omega: 3.000E-01; OpenMP threads: 1; Integrals threads: 1; Memory [MiB]: 243; Algorithm: Disk; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (DEF2-TZVPPD AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 192; Number of basis functions: 582; Number of Cartesian functions: 686; Spherical Harmonics?: true; Max angular momentum: 4. Cached 2.7% of DFT collocation blocks in 0.139 [GiB]. Minimum eigenvalue in the overlap matrix is 7.9030311415E-06.; Reciprocal condition number of the overlap matrix is 5.7126628552E-07.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo ; -------------------------; A 350 350 ; -------------------------; Total 350 350; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -266.76788027937141 -2.66768e+02 0.00000e+00 ; @DF-RKS iter 1: -267.44459096234198 -6.76711e-01 2.70804e-03 DIIS/ADIIS; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051:7036,Cache,Cache,7036,https://psicode.org,https://github.com/psi4/psi4/issues/3051,1,['Cache'],['Cache']
Performance,"sively parallel fashion, including utilization of multiple nodes via MPI, and GPU support. Of more interest to this PR, GauXC contains an implementation of the sn-LinK algorithm, a seminumerical method very similar to COSX for computing the exact exchange term (i.e., the K matrix). Like the XC components of GauXC, sn-LinK also has support for GPU execution. At PsiCon 2023, it was noted that GauXC's sn-LinK algorithm could be interfaced to Psi4 through the `CompositeJK` framework. This would give Psi4 its first-ever instance of noncommercial GPU support for the JK construction process. And that is the goal of this PR - interfacing Psi4 to GauXC's sn-LinK code via `CompositeJK`. This interface is implemented primarily via a new `SplitJK` derived class, `snLinK`, which contains the guts of the interface to GauXC. The `snLinK` constructor parameterizes and constructs the `GauXC::XCIntegrator` object and all related objects (e.g., load balancer, molecular weights partitioner), as well as other auxiliary work such as defining the GauXC execution space. `snLinK::build_G_component` constructs the K matrix from the input density via the GauXC integrator's `eval_exx` function. `build_G_component` also handles fundamental pre- and post-processing required for the involved matrices - Spherical Harmonic integral reordering permutations if `psi4_SHGAUSS_ORDERING` is set to the default option of gaussian , and Spherical-to-Cartesian transforms, if required, to enable GPU support (also forcible via the `SNLINK_FORCE_CARTESIAN` keyword). As a `SplitJK` instance, sn-LinK can be called within Psi4 via `SCF_TYPE = J_ALGO+SNLINK`, with `J_ALGO` being the J construction algorithm of choice (currently only `DFDIRJ`). If GPU support is enabled, the `SNLINK_USE_GPU` keyword can be turned on to run the sn-LinK algorithm using GPUs. Construction of the GauXC interface is specified at compile-time, using the `ENABLE_gauxc` flag. Psi4 can either build an internal instance of GauXC, or hook up t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150:1129,load,load,1129,https://psicode.org,https://github.com/psi4/psi4/pull/3150,1,['load'],['load']
Performance,"so the environment is solvable on Linux:; ```conda create -n amber ambertools=20.9 python=3.7 blas=*=mkl gau2grid psi4/label/dev::libxc psi4/label/dev::psi4=1.4a2.dev1058 -c conda-forge -c defaults -c psi4/label/dev```. on Mac, I agree that `libgfortran` is the problem. it comes about b/c conda-forge pins on gfortran v4 and defaults on gfortran v3 (then there's various soversions and libgfortran versions, too). once upon a time, the pinning that was applied by run_exports was >3.0.1, but that's been narrowed to >3.0.1,<4.0.0 . there's still some old add-on packages with the former, so if I suppress the libgfortran pinning on psi4 itself (psi4=1.4a2.dev1084 for py37 at https://anaconda.org/psi4/psi4/files), then I can get an environment to solve with it and ambertools=20. of course, then the libgfortran.3.dylib is missing, but if I symlink (!) that to libgfortran.4.dylib, I can get some psi4 test cases to pass (gdma fails to load lib, while some dft is off a bit). altogether, not a satisfactory or safe fix. and libxc is both required and fortran, so I can't just build you a non-fortran psi4. so unless I think of something else, I think you just can't mix fortran dependencies when compiled against a mix of c-f and defaults pinnings. sorry.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2024#issuecomment-722811014:938,load,load,938,https://psicode.org,https://github.com/psi4/psi4/issues/2024#issuecomment-722811014,1,['load'],['load']
Performance,"so.6.0. 00007F6F8C6B5658 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B5A129 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B69438 _ZN3psi4PSIO2rwEm Unknown Unknown; core.cpython-310- 00007F6F88B6B963 _ZN3psi4PSIO5writ Unknown Unknown; core.cpython-310- 00007F6F88B566E9 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6DFBF4 Unknown Unknown Unknown; libpthread-2.28.s 00007F6F9C8FC14A Unknown Unknown Unknown; libc-2.28.so 00007F6F9BEA1DC3 clone Unknown Unknown; /var/spool/slurm/slurmd/job83930/slurm_script: line 27: 2245656 Aborted (core dumped); ```. I used conda to install psi4 in a new environment.; ```; psi4 1.7+6ce35a5 py310h769327c_1 psi4; ```. Below is the full log, which includes the geometry:. <details>. ```. Memory set to 7.451 GiB by Python driver.; Threads set to 4 by Python driver. Scratch directory: /scratch/njzjz/83930/; gradient() will perform analytic gradient computation. *** tstart() called on aerosol-020; *** at Fri May 26 20:10:38 2023. => Loading Basis Set <=. Name: DEF2-TZVPPD; Role: ORBITAL; Keyword: BASIS; atoms 1-33 entry C line 144 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 34-89 entry H line 14 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 90-101 entry N line 181 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 102-106 entry O line 218 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs . => WB97M-D3BJ: Empirical Dispersion <=. Grimme's -D3 (BJ-damping) Dispersion Correction; Grimme S.; Ehrlich S.; Goerigk L. (2011), J. Comput. Chem., 32: 1456; Parametrisation from: A. Najib, L. Goerigk, J. Comput. Theory Chem.,14, 5725, 2018. s6 = 1.000000; s8 = 0.390800; a1 = 0.566000; a2 = 3.128000. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RKS Reference; 4 Threads, 7629 MiB Core; -------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:1683,Load,Loading,1683,https://psicode.org,https://github.com/psi4/psi4/issues/2970,1,['Load'],['Loading']
Performance,"sorry, yes I use PBE with def2-SV(P) - with basis_guess I can get the first 2 or 3 iterations to converge but then it also fails SCF converge. without basis_guess it fails on first iteration. and like the other example HF converges fine a full optimization.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-432221848:244,optimiz,optimization,244,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-432221848,1,['optimiz'],['optimization']
Performance,"specified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option PSI4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.3"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so (found suitable version ""2.7.3"", minimum required is ""2"") ; -- Suitable pybind11 could not be located, building one instead.; -- Suitable libint could not be located, building one instead.; -- Suitable libefp could not be located, building one instead.; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; this build won't work without GCC intervention:; https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; Call Stack (most recent call first):; CMakeLists.txt:119 (include). -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found BLAS: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/i",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261733153:2460,Perform,Performing,2460,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153,4,['Perform'],['Performing']
Performance,"sr/local/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; #! 6-31G** H2O+ Test CISD Energy Point. refnuc = 8.8046866186391 #TEST; refscf = -75.6213422266812 #TEST; refci = -75.7850671871149 #TEST; refcorr = refci - refscf #TEST. molecule h2o {; 0 1; O; H 1 1.00; H 1 1.00 2 103.1; }. set {; # reference rohf; basis 6-31G**; freeze_core true; # icore 0; }. thisenergy = energy('cisd'). #compare_values(refnuc, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST ; #compare_values(refscf, get_variable(""SCF total energy""), 7, ""SCF energy"") #TEST; #compare_values(refci, thisenergy, 7, ""CI energy"") #TEST; #compare_values(refcorr, get_variable(""CI CORRELATION ENERGY""), 7, ""CI correlation energy"") #TEST; --------------------------------------------------------------------------. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. => Loading Basis Set <=. Name: 6-31G**; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 149 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs ; atoms 2-3 entry H line 44 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.069592187390 15.994914619560; H 0.000000000000 -0.783151105291 0.552239257844 1.007825032070; H 0.000000000000 0.783151105291 0.552239257844 1.007825032070. Running in c2v symmetry. Rotational consta",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339412812:2102,Load,Loading,2102,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812,1,['Load'],['Loading']
Performance,"st recent call last):; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/driver.py"", line 577, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/procrouting/sapt/sapt_proc.py"", line 255, in run_sapt_dft; sapt_dft(dimer_wfn, wfn_A, wfn_B, sapt_jk=sapt_jk, data=data, print_header=False); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/procrouting/sapt/sapt_proc.py"", line 421, in sapt_dft; fdds_disp = sapt_mp2_terms.df_fdds_dispersion(primary_basis, aux_basis, cache, is_hybrid, x_alpha); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/procrouting/sapt/sapt_mp2_terms.py"", line 146, in df_fdds_dispersion; Rtinv_A = np.linalg.pinv(R_A, rcond=1.e-13).transpose(); File ""<__array_function__ internals>"", line 6, in pinv; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 2003, in pinv; u, s, vt = svd(a, full_matrices=False, hermitian=hermitian); File ""<__array_function__ internals>"", line 6, in svd; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2178:3121,cache,cache,3121,https://psicode.org,https://github.com/psi4/psi4/issues/2178,1,['cache'],['cache']
Performance,"std::integer_sequence<unsigned long, 0ul, 1ul, 2ul>, pybind11::detail::void_type&&) && (f=<optimized out>, this=0x7fff11285af0); at /home/susi/.conda/envs/p4env/lib/gcc/x86_64-conda-linux-gnu/14.1.0/include/c++/bits/char_traits.h:350; #4 pybind11::detail::argument_loader<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::optional<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, double, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > > > const&>::call<std::shared_ptr<psi::SuperFunctional>, pybind11::detail::void_type, std::shared_ptr<psi::SuperFunctional> (*&)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::optional<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, double, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > > > const&)>(std::shared_ptr<psi::SuperFunctional> (*&)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::optional<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, double, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > > > const&)) && (this=0x7fff11285af0, ; f=<optimized out>) at /home/susi/.conda/envs/p4env/include/pybind11/cast.h:1600; #5 pybind11::cpp_function::initialize<std::shared_ptr<psi::SuperFunctional> (*&)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::optional",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:3934,optimiz,optimized,3934,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"stdlib, third_party, and first_party blocks and then alphabetizes the imports within. It also effectively tests the fragility of the import structure by jumbling them all into alphabetical order. Attempts in past years to run isort led to circular imports and a retreat. This time I was able to fix the single one that came about. Third pass is that I ran `autoflake` on the driver to remove unused stdlib imports. It also removed some `pass` on empty fns that weren't needed because the docstring suffices for the syntax. ## User notes; - [x] the import structure has changed. you might need to add standard library imports to your input files if you use them (e.g., `import math` before `math.pi`) that previously were preloaded by psi4. ## Dev notes & details; - [x] switched import style to relative imports, ran isort, ran autoflake; - [x] actual material changes:; * stop importing `molutil` into `sapt_proc`. this is the main one that allows killing off the embarrassing `temp_circular_import_blocker` fn. https://github.com/psi4/psi4/compare/master...loriab:psi4:import_slayer?expand=1#diff-f3e93ffa6125dd1f79abad7630bbf259bb1daeee89e983d2889b68af6038875aL35; * delay loading fisapt_proc until runtime in sapt_util. this releases the main circular import in procrouting. https://github.com/psi4/psi4/compare/master...loriab:psi4:import_slayer?expand=1#diff-b3bc4df41c2c04c815d7a8a9b374c88759487db4a68e9dc962785dae8cb4b73cR268; * delay loading driver_findif in empirical_dispersion. https://github.com/psi4/psi4/compare/master...loriab:psi4:import_slayer?expand=1#diff-6c949ad06bfcc0f8d646a54c79a427c47e008cbdae82ca148b0f0af1e1319a63R379; * kill off circular_import blocker from python_helpers and molutil https://github.com/psi4/psi4/compare/master...loriab:psi4:import_slayer?expand=1#diff-f1bd68ebb5a84a2a1bfea1cce073adda3b39a3146012026cb7841280ef8ca25dL658. ## Checklist; - ~tests added for any new features~; - [x] full tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3033:1970,load,loading,1970,https://psicode.org,https://github.com/psi4/psi4/pull/3033,2,['load'],['loading']
Performance,still merge queue config,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2923:12,queue,queue,12,https://psicode.org,https://github.com/psi4/psi4/pull/2923,1,['queue'],['queue']
Performance,sweeeet: ; `psi4-path-advisor --intel`; ```; loading initial cache file /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsCache.cmake; loading initial cache file /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsMKLCache.cmake; loading initial cache file /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; -- The C compiler identification is Intel 18.0.2.20180210; -- The CXX compiler identification is Intel 18.0.2.20180210; -- Check for working C compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icc; -- Check for working C compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icpc; -- Check for working CXX compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- The Fortran compiler identification is Intel 18.0.2.20180210; -- Check for working Fortran compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort; -- Check for working Fortran compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Enabling Fortran; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524:45,load,loading,45,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524,6,"['cache', 'load']","['cache', 'loading']"
Performance,"symmetry, switch symmetry off and check if I'm still at a stable solution. However, I find I'm unable to change my molecule for symmetry constraints (or charge/multiplicity for that matter). The following input; ```; molecule sym {; 0 1; H 0.459619 0.000000 0.000000; H 0.000000 0.459619 0.000000; }. set basis STO-3G; energy('scf'). molecule nosym {; 0 1; H 0.459619 0.000000 0.000000; H 0.000000 0.459619 0.000000; }. set scf guess read; energy('scf'); ```; runs the first SCF, but crashes on the second with; ```; RuntimeError: ; Fatal Error: SCF guess was set to SAD, but sad_basissets_ was empty!. Error occurred in file: /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/sad.cc on line: 659; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::scf::HF::compute_SAD_guess(); psi::scf::HF::guess(); psi::scf::HF::initialize(); psi::scf::HF::compute_energy(); ```; Oddly, it appear that while in the second run; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is READ.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00; ```; the initialization uses; ```; ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 375; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12. => Auxiliary Basis Set <=. Basis Set: file /home/work/psi4/install/share/psi4/basis/def2-svp-jkfit.gbs; Number of shells: 12; Number of basis function: 36; Number of Cartesian functions: 40; Spherical Harmonics?: true; Max angular momentum: 2. Minimum eigenvalue in the overlap matrix is 2.8114045453E-01.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.; ```; followed by the crash.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/586:1683,Cache,Cache,1683,https://psicode.org,https://github.com/psi4/psi4/issues/586,1,['Cache'],['Cache']
Performance,"sysroot; -- Checking whether CXX compiler has -isysroot - yes; -- Checking whether CXX compiler supports OSX deployment target flag; -- Checking whether CXX compiler supports OSX deployment target flag - yes; -- Check for working CXX compiler: /usr/local/bin/g++-8; -- Check for working CXX compiler: /usr/local/bin/g++-8 -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option ENABLE_MSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 14; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Setting (unspecified) option SPHINX_THEME: sphinx_psi_theme; -- Psi4 install: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:4271,Perform,Performing,4271,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308,1,['Perform'],['Performing']
Performance,"t /usr/local/src/conda/python-3.12.5/Python/bltinmodule.c:1121; #28 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>, ; kwnames=<optimized out>) at /usr/local/src/conda/python-3.12.5/Python/clinic/bltinmodule.c.h:586; #29 0x000056022a986246 in cfunction_vectorcall_FASTCALL_KEYWORDS (func=<optimized out>, args=0x7f21b9ea9078, ; nargsf=<optimized out>, kwnames=0x0) at /usr/local/src/conda/python-3.12.5/Objects/methodobject.c:438; #30 0x000056022a985fcf in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=9223372036854775809, ; args=0x7f21b9ea9078, callable=0x7f21abf9c770, tstate=0x56022ae03058 <_PyRuntime+459704>); at /usr/local/src/conda/python-3.12.5/Include/internal/pycore_call.h:92; #31 PyObject_Vectorcall (callable=0x7f21abf9c770, args=0x7f21b9ea9078, nargsf=9223372036854775809, ; kwnames=0x0) at /usr/local/src/conda/python-3.12.5/Objects/call.c:325; --Type <RET> for more, q to quit, c to continue without paging--; #32 0x000056022a877f65 in _PyEval_EvalFrameDefault (tstate=<optimized out>, frame=0x7f21b9ea9020, ; throwflag=<optimized out>) at Python/bytecodes.c:2714; #33 0x000056022aa2bece in PyEval_EvalCode (co=co@entry=0x560259e3fbd0, globals=globals@entry=0x7f21abff9900, ; locals=locals@entry=0x7f21abff9900) at /usr/local/src/conda/python-3.12.5/Python/ceval.c:578; #34 0x000056022aa50d9a in run_eval_code_obj (tstate=tstate@entry=0x56022ae03058 <_PyRuntime+459704>, ; co=co@entry=0x560259e3fbd0, globals=globals@entry=0x7f21abff9900, locals=locals@entry=0x7f21abff9900); at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:1722; #35 0x000056022aa4bf4b in run_mod (mod=mod@entry=0x560259ddd528, filename=filename@entry=0x7f21abe2c090, ; globals=globals@entry=0x7f21abff9900, locals=locals@entry=0x7f21abff9900, ; flags=flags@entry=0x7ffc67b36bd0, arena=arena@entry=0x7f21abf1bcb0); at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:1743; #36 0x000056022aa64bd0 in pyrun_file (fp=fp@entry=0x560259cb7470, filename=filename@entry=0x7",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969:7951,optimiz,optimized,7951,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969,2,['optimiz'],['optimized']
Performance,"t can intelligently make a variety of choices depending on local conditions (#1135).; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349). . # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`. ##. # New Methods; - Improved support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1; - VV10 dispersion is now available for UKS references.; - Cubeprop can now compute the `FRONTIER_ORBITALS` and `DUAL_DESCRIPTOR` quantities.; - nZaPa-NR basis sets have been added.; - The recursive driver can now compute N-body gradients and Hessians. # New External Libraries; - [QCElemental](https://github.com/MolSSI/QCElemental) - A library for CODATA, molecule manipulation routines, and periodic table information.; - [HelPME](https://github.com/andysim/helpme) - A particle-mesh Ewald library for long-range electrostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. # First Time Contributors; - @raimis - #1399, #1185, #1183, +70 more!; - @obrien951 #1359, #1222, #1130, #1140, #1100, #1097; - @zachglick #1453, #1304, #1291; - @tovrstra #1510, #1506, #1500; - @timostrunk #1133, #1128, #1127; - @mdav2 #1374, #1142; - @chapincavender #1364; - @janisozaur #1321; - @rainli323 #1131; - @yxie326 #1083. # Additional Non-Core Contributors to v1.3. - @JonathonMisiewicz #1517, #1487, #1379, #1424, #1435, #1378, #1352, #1337, #1336, #1289, #1310, #1299, #1214, #1150, #1024, #1139, #1108; - @susilehtola #1475, #1493, #1481, #1479, #1472, #1458, #1460, #1468, #1456, #1452, #1451, #1260; - @PeterKraus #1470, #1350, #1405, #1235, #1303, #1262, #1232, #1138, #1123, #1119, #1109; - @hokru #1320, #1377, #1346, #1300, #1244, #1241; - @alenaizan #1365, #1042, #1294; - @tyzhang1993 #1437; - @tomspur #1257. # Performance Optimizations; - NYI. # Psi Developer Upgrade Guide; - Psi4 now requires C++14 (up from C++11); -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406:1859,optimiz,optimization,1859,https://psicode.org,https://github.com/psi4/psi4/issues/1406,1,['optimiz'],['optimization']
Performance,"t file:. ```; molecule mol_12_butadiene {; 0 1; C -1.743900000 -0.363600000 -0.000000000; C -0.552300000 0.557000000 -0.000100000; C 0.691500000 0.173100000 -0.000000000; C 1.934600000 -0.213400000 -0.000000000; H 2.475000000 -0.380600000 0.924600000; H 2.475400000 -0.380100000 -0.924300000; H -0.756100000 1.624500000 0.000500000; H -2.368000000 -0.187400000 0.878900000; H -1.437400000 -1.407900000 -0.000100000; H -2.368300000 -0.187200000 -0.878700000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(24000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. The program starts the optimization and produces an error:. ```; Performing finite difference calculations; 49 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB2D549510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007FB2DA9F68A0 Unknown Unknown Unknown; libc-2.27.so 00007FB2DA631F47 gsignal Unknown Unknown; libc-2.27.so 00007FB2DA6338B1 abort Unknown Unknown; core.cpython-37m- 00007FB2D7A0D3D7 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6563E2D Unknown Unknown Unknown; core.cpython-37m- 00007FB2D657D2C1 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6040FF6 Unknown Unknown Unknown; python3.7 000055D7E213E914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AAEBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D7E213E107 _PyFu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020:1078,Perform,Performing,1078,https://psicode.org,https://github.com/psi4/psi4/issues/2020,1,['Perform'],['Performing']
Performance,"t was read in on line 56; - **lines 64 + 65**: The memory for this irrep is freed. This is why I want to move away from talking about data at all in the comment string, `buf4_init` is not responsible for initializing the ""data"" you are talking about. That is by *design* so that operations can be performed over the tensors in chunks like I have outlined in the part above. The buffer holds the information necessary to get that data, *when it is explicitly told to*. . I am sorry for not being clear, but this stuff is very easy to get lost in. I meant that trying to access tensor elements directly after calling `buf4_init`. Getting back to the subject of this PR: . 1. Lets leave the comments in `file4_init` alone, since the `buf4/file2_init` functions are the ones being used externally, `file4_init`s are usually only found w/in DPD itself as far as I know.. ; 2. In `buf4_init()` and `file2_init()` We can put note/warning separate from the description of `label`, something to the tune of ; > Make sure that you use the correct `label` and `inputfile` if you *intend* to read from or write to an existing quantity on disk. If you *intend* to populate a new quantity on disk, ensure that the `label` is not already used in `inputfile`. PSIO::tocprint(int filenum) can be used to display the current list of labels in use in the outputfile. . BTW: That last hint is particularly useful for debugging I/O related errors. Also, If you intend … better than it will be loaded… since it indicates this may or may not be done, and it does **not** happen now. . The case where an tensor is held in core via the cache system does not need to be mentioned since it does not change any of this behavior. To go on to your question about the inputfile, label relationship. The file is one of those defined in [psifiles.h](https://github.com/psi4/psi4/blob/master/psi4/include/psi4/psifiles.h), and these macros provide an easy way to know which number file a quantity belongs in. Thinking of the file as a ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267512911:1568,tune,tune,1568,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267512911,1,['tune'],['tune']
Performance,"t(); compare_values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); compare_values(e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene'); compare_matrices(zerograd, g, 3, 'opt ZERO grad'). def test_odd_start(mol):; g0 = gradient('mp2', molecule=mol); compare_values(odd_nre_start, mol.nuclear_repulsion_energy(), 1, 'start nre'); compare_values(odd_e_start, get_variable('CURRENT ENERGY'), 3, 'start ene'); compare_values(odd_rmsg_start, g0.rms(), 4, 'start rms grad'); compare_matrices(odd_g_start, g0, 3, 'start grad'). def test_badodd_grad(mol):; e, wfn = optimize('mp2', return_wfn=True, molecule=mol); g = wfn.gradient(); g.print_out(); compare_values(odd_nre_opt, mol.nuclear_repulsion_energy(), 2, 'opt nre nogood'); compare_values(odd_e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene nogood'); compare_values(odd_rmsg_opt, g.rms(), 4, 'opt grad nogood'). test_norm_start(normz); test_zero_grad(normz). # And behold, the initial gradient matches Q-Chem, the optimization; # progresses nicely, the RMS Force column goes to zero, and the gradient; # at the end is zero. # start nre.........................................................PASSED; # start ene.........................................................PASSED; # start rms grad....................................................PASSED; # start grad........................................................PASSED; #Optimizer: Optimization complete!; # opt nre...........................................................PASSED; # opt ene...........................................................PASSED; # opt ZERO grad.....................................................PASSED. # --------------------------------------------------------------------------------------------------------------- ~; # Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; # --------------------------------------------------------------------------------------------------------------- ~; # 1 -139.530718293045 -139.530718293045 0.0569",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:3361,optimiz,optimization,3361,https://psicode.org,https://github.com/psi4/psi4/issues/310,1,['optimiz'],['optimization']
Performance,"t.h:114; #40 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #41 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286810, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #42 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8890fc0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #43 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8890fc0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #44 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #45 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #46 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #47 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #48 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112869c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #49 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd88a0a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #50 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd88a0a40, tstate=0x55ff9515e050) at /usr/local/src/conda/pyt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:14140,optimiz,optimized,14140,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"t.h:114; #47 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #48 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112869c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #49 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd88a0a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #50 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd88a0a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #51 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #52 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #53 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #54 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #55 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286b70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #56 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32d40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #57 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b32d40, tstate=0x55ff9515e050) at /usr/local/src/conda/pyt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:15470,optimiz,optimized,15470,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"t.h:114; #54 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #55 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286b70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #56 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32d40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #57 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b32d40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #58 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #59 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #60 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11286ca0, callable=0x7fac0e363370, tstate=0x55ff9515e050); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #61 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11286d30) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #62 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #63 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd784bdb0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #64 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd8887530, globals=<optimized ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:16800,optimiz,optimized,16800,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"t.h:114; #79 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #80 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287430, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #81 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6eae0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #82 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6eae0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #83 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #84 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #85 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #86 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; --Type <RET> for more, q to quit, c to continue without paging--; #87 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112875e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #88 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b7c840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #89 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:21698,optimiz,optimized,21698,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"t.h:114; #93 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #94 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287790, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #95 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918c40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #96 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918c40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #97 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #98 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #99 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #100 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #101 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287940, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #102 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32020, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #103 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b32020, tstate=0x55ff9515e050) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:24424,optimiz,optimized,24424,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"t::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>); > at /usr/include/boost/python/detail/invoke.hpp:75; > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223; > #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (_)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38; > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0; > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); > from /usr/lib/libboost_python3.so.1.54.0; > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); > at /usr/include/boost/python/detail/translate_exception.hpp:48; > #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&> > (f=..., a=<synthetic pointer>, this=<optimized out>) at /usr/include/boost/bind/bind.hpp:382; > #15 operator()<boost::python::detail::exception_handler, boost::function0<void> > (a2=..., a1=..., this=<optimized out>); > at /usr/include/boost/bind/bind_template.hpp:102; > #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:2944,optimiz,optimized,2944,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,1,['optimiz'],['optimized']
Performance,"t>, Zarr<https://zarr.readthedocs.io/en/stable/>, or any other format) is more easily managed from Python, especially if we need to preserve compatibility with Windows.; * Restart capabilities. Summary of proposed changes (incomplete); cc* modules. * Create a single cc folder where all the other cc* folders will live as subfolders.; * Provide a top-level CCWavefunction class, partly modeled on the existing CIWavefunction class to overtake the whole implementation of the CC functionality.; * The class will manage MOInfo,Params, DPD as local data members. This will ensure that the lifetime of these objects is tied to a particular instance of a CC calculation.; * The class will contain the various steps in a CC calculation as methods.; * Move from tstart-tstop to the new timers timer_on-timer_off. DPD Library. * Remove use of static global machinery from DPD member functions.; * Implement proper copy/move assign/construct for the DPD object.; * Implement internal structs with proper constructors as needed.; * Replace c-style arrays/raw pointers with appropriate smart pointer/containers; * Refactor shared state (shared by multiple DPD instances, currently dpd_gbl struct) into singleton(s).; * Note: Memory tracking in its current form is not thread safe and relies on the client code properly locking calls to function that need to perform allocations with a mutex.; * Insert a layer of abstraction between DPD and psio. (slated for deprecation/replacement). For visibility: @lothian<https://github.com/lothian> @CDSherrill<https://github.com/CDSherrill> @andysim<https://github.com/andysim> @jturney<https://github.com/jturney> @fevangelista<https://github.com/fevangelista> @dgasmith<https://github.com/dgasmith>. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/psi4/psi4/issues/1247>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AC9Qdt-9Cic7AcHOMo2bMq1iF3Nyc5FZks5uc6dJgaJpZM4WyQ3->.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247#issuecomment-423216907:3072,perform,perform,3072,https://psicode.org,https://github.com/psi4/psi4/issues/1247#issuecomment-423216907,1,['perform'],['perform']
Performance,"t>, kwnames=0x7faa873651d8, ; kwargs=0x7faa874b9f18, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='gradient', qualname='gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #35 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa874b9f10, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #36 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa87366e50>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #37 0x00007faabd6481e9 in do_call_core (kwdict={'return_wfn': True, 'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': 1}, callargs=('hf',), ; func=<function at remote 0x7faa87366e50>, tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #38 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #39 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8cda850, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 1824, in optimize (name='hf', kwargs={'opt_iter': 1}, engine='optking', lowername='hf', custom_gradient=False, return_wfn=False, return_history=False, full_hess_every=-1, steps_since_last_hessian=0, hessian_with_method='hf', optstash=<OptionsState(data={('INTRAFRAG_STEP_LIMIT', 'OPTKING'): <OptionState(option='INTRAFRAG_STEP_LIMIT', module='OPTKING', value_global=<float at remote 0x7faa8746f6d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746fe10>, haschanged_local=False, value_used=<float at remote 0x7faa8746fad0>, haschanged_used=False) at remote 0x7faaaffd1cd0>, ('HESSIAN_WRITE', 'FINDIF'): <OptionState(option='HESSIAN_WRITE', module='FINDIF', value_global=0, haschanged_global=False, value_local=0, haschanged_local=Fals",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:11705,optimiz,optimized,11705,https://psicode.org,https://github.com/psi4/psi4/issues/2010,2,['optimiz'],['optimized']
Performance,"tack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #47 0x00007faabd6bfe79 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, ; kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4327; #48 0x00007faabd6bfe3b in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:718; #49 0x00007faabd6e1068 in run_eval_code_obj (co=0x7faa87377d40, ; globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <SourceFileLoader(name='__main__', path='/home/work/psi4/install.susi/bin/psi4') at remote 0x7faab03387f0>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7faab0360090>, '__file__': '/home/work/psi4/install.susi/bin/psi4', '__cached__': None, 'atexit': <module at remote 0x7faab020ba40>, 'sys': <module at remote 0x7faab0355e00>, 'os': <module at remote 0x7faab030b9a0>, 'json': <module at remote 0x7faab0305a40>, 'datetime': <type at remote 0x7faab01b4740>, 'ar",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:14775,optimiz,optimized,14775,https://psicode.org,https://github.com/psi4/psi4/issues/2010,6,['optimiz'],['optimized']
Performance,"takes in dressed xyz files. The script shows how to turn psi4's exported results into the dressed xyz files. I should write something so the format is available directly. Or this’d be a nice opportunity for a jupyter widget, which @armcdona might try. And @fevangelista has a widget for vib vector arrows that could probably be animated. ```; #!/usr/bin/env python; # coding: utf-8; ​; # In[ ]:; ​; ​; # note the capital ""D"". obtain by `conda install py3dmol -c conda-forge`; import py3Dmol; print(py3Dmol.__version__); ​; ​; # In[ ]:; ​; ​; # run an optfreq calc and write the vibrational analysis to disk in a "".vibrec"" file; ​; # molecule h2odim {; # O -1.551007 -0.114520 0.000000; # H -1.934259 0.762503 0.000000; # H -0.599677 0.040712 0.000000; # --; # 0 1; # O 1.350625 0.111469 0.000000; # H 1.680398 -0.373741 -0.758561; # H 1.680398 -0.373741 0.758561; # units angstrom; # }; ​; # set basis sto-3g; # set e_convergence 9; # set g_convergence gau_verytight; ​; # optimize('mp2', molecule=h2odim); ​; ​; # e, wfn = freq('mp2', molecule=h2odim, return_wfn=True); ​; # set hessian_write on; # vibanal_wfn(wfn, molecule=h2odim); ​; # # A. print all the vib-related info from original `e, wfn = freq()` call; # for k, v in wfn.frequency_analysis.items():; # print(v); ​; # # B. `set hessian_write on` above wrote all the vib- & thermo-related info from last analysis.; # # now, print all the vib- & thermo-related info from that file; # with open(core.get_writer_file_prefix(h2odim.name()) + "".vibrec"") as handle:; # import json; # jsondata = json.load(handle); # jsondata = {k: (v if k in ['molecule', 'hessian'] else json.loads(v)) for k, v in jsondata.items()}; ​; # for k, v in jsondata.items():; # print(k, v); ​; ​; # In[ ]:; ​; ​; import json; with open(""freq_demo.h2odim.6436.vibrec"") as fp:; vibs = json.load(fp); ​; ​; # In[ ]:; ​; ​; # See all the vibrational analysis contents; vibs; ​; ​; # In[ ]:; ​; ​; vibs; vibs[""molecule""][""elez""]; nat = len(vibs[""molecule""][""elez""]); ndof = n",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131:1078,optimiz,optimize,1078,https://psicode.org,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131,1,['optimiz'],['optimize']
Performance,"tarting gradient at new geometry, then zero grad final structure.; > ; > test_odd_start(oddz) # works; > #test_zero_grad(oddz) # should work; > test_badodd_grad(oddz) # works b/c I'm testing against the bad results; > ; > # qu-est-ce que c-est? By RMS Force the optimization looks to proceed; > ; > # nicely. But look at that final gradient with unmoveable large gradient; > ; > # components. It's not orientation, as input is zmat and it's the same with cartesian; > ; > # coordinates in a couple orientations. It's not corruption associated; > ; > # with wavefunction pass, as I've tested an older version. It's not a local; > ; > # minimum as the total gradient wouldn't be so large. It's not too distorted a; > ; > # starting structure, as q-chem and molpro converge to the real minimum promptly. It's not; > ; > # symmetry constrained, as it's c1. I'm at a loss.; > ; > # for oddz; > ; > # start; > ; > # 25.7790013416; > ; > # -139.174980786; > ; > # 0.0581560524872; > ; > # Optimizer: Optimization complete!; > ; > # opt; > ; > # 33.8382916197; > ; > # -139.301327453; > ; > # 0.0422103431176; > ; > #gradient = [; > ; > # [ -0.01135649578523, -0.02871892445843, -0.05475995417434],; > ; > # [ 0.00216387360216, 0.04113784938512, 0.07821983299617],; > ; > # [ 0.00215642675781, 0.04114952366672, 0.07824201651882],; > ; > # [ 0.00563414370780, -0.03413386327141, -0.06481576207381],; > ; > # [ 0.00140205171291, -0.01943458532669, -0.03688613326736]]; > ; > # --------------------------------------------------------------------------------------------------------------- ~; > ; > # Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; > ; > # --------------------------------------------------------------------------------------------------------------- ~; > ; > # 1 -139.174980785934 -139.174980785934 0.08977532 0.06906505 0.39164409 0.25000003 ~; > ; > # 2 -139.237253751032 -0.062272965098 0.08963832 0.05551392 0.44053120 0.25000000 ~; > ; > # 3 -139.282037341604 -0.0447",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-195966638:8592,Optimiz,Optimizer,8592,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638,2,['Optimiz'],"['Optimization', 'Optimizer']"
Performance,"tate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128b530) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #302 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #303 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fac0e0fe470, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #304 PyImport_ImportModuleLevelObject (name=0x7fac0e0fe470, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #305 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #306 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #307 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fac0e0f68c0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #308 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fac0e0f68c0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #309 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0ae880, callargs=0x7fac0e0f68c0, func=0x7fac0e3989a0, trace_info=0x7fff1128b870, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #310 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e32fc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #311 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e32fc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:64716,optimiz,optimized,64716,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"te=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #165 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #166 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #167 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #168 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288dc0, tstate=<optimized out>); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #169 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891aa40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #170 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd891aa40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #171 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #172 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #173 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #174 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e363",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:38184,optimiz,optimized,38184,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"te=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #383 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #384 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510, tstate=0x55ff9515e050); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #385 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #386 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d0b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #387 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16dc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #388 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16dc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #389 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #390 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #391 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #392 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:80557,optimiz,optimized,80557,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"te=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; --Type <RET> for more, q to quit, c to continue without paging--; #358 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #359 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #360 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #361 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c7f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #362 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e1d18a0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #363 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e1d18a0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #364 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #365 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #366 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128c920, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #367 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:75634,optimiz,optimized,75634,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"tes for the molecule at each step of the optimization. Hooked up to MDT.; - ~adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.~; - Adds handling of several one-electron properties to the API and saves them to the wavefunction.; - `qcdb.Molecule`; - Fix some bugs, including C3/D3 symmetry detection w/o verbose and printing for Q-Chem when dummy (or ghost?, don't remember which) present; - Simplify rotational_constants, add rotational_symmetry_number, add axis_representation (probably should double-check this with a spectroscopy book); - Optimize instantiation (really, update_geometry) of large systems by a couple orders of magnitude (now ~1 min for 6000 atoms, w/symmetry); - Hook up Trent Parker's linear-scaling BFS algorithm to qcdb.Molecule or through just np arrays. Has ""seed"" argument so you can forcibly split intramolecularly or close-bound intermol.; - Selected steps (for performance) are now in numpy, as a result, `geometry(np_out=True)` and `xyz(np_out=True)` are avail to skip the cast-back-to-list step. Also, `to_arrays` returns geom, mass, elez, etc. as numpy arrays, rather than needing to iterate over natom.; - `psi4.core.Molecule`; - add rotational_symmetry_number; - export rotor_type; - faster BFS algorithm hooked up to psi4.Mol, too. Depending on Mol type, returns numpy split arrays, single large Mol with atoms rearranged and fragmentation embedded, and/or list of indiv Mols, one for each fragment. Radically pare down auto_fragments/old BFS code.; - `units` no longer exported as a property. has getter/setter, and the getter returns strings, not `Molecule::GeometryUnits` objects.; - _Both_ psi4.core.Molecule && qcdb.Molecule; - Enhanced `add_atom` to take label (in add'n to symbol) and mass number, so is a full fledged CoordEntry entry point; - Add `mass_number` storage and accessor. In Psi, this is just a pass-through – nothing done with it. Stores isotope mass number if mass corresponds to valid nuc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:2287,perform,performance,2287,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['perform'],['performance']
Performance,"thanks. I've redirected the link from current psicode.org. Didn't realize we weren't going to get the domain transferred for a while. And Radovan Bast has sent me a loadtime analysis of the new site, so I should be able to speed that up dramatically.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1584#issuecomment-475874507:165,load,loadtime,165,https://psicode.org,https://github.com/psi4/psi4/issues/1584#issuecomment-475874507,1,['load'],['loadtime']
Performance,"there is no dummy atom in the z-matrix.; However, when I added a dummy atom in the z-matrix, the geometries are updated correctly. ; I have attached the input and output files with a dummy atom. . Thank you. Yiling . Input ; ```; # water and na, R is the distance variable for Rvals; memory 1000 mb. molecule dimer {; 0 1; O1 4.70071 0.00000 0.00000; H1 4.11483 0.00000 0.75695; H2 4.11483 0.00000 -0.75695; --; 1 1; X O1 R H1 125.25 H2 180.0; NA X 0.1 O1 180.0 H2 180.0; }. # set the scan variable of R above, ex: distance, manually/automatically assign; # ----------------------------------------------------------------; def frange(start, stop, step): ## do not change the section of def frange; 	i = start; 	while i < stop:; 		yield i; 		i += step; # ----------------------------------------------------------------; # Rvals=[2.5, 3.0, 4.0] ## manually assign the variable, ex: distance at 2.5, 3.0 and 4.0 anstrom; Rvals=[]; for j in frange(1.4, 1.9, 0.1): ## automatically assign the variable; the endpoint will not be performed; 	Rvals.append(round(j,2)) ## decimal is 2. ; # basis set; # ----------------------------------------------------------------; ##set basis <basisset>; set basis 6-31G(d). set guess sad; set scf_type df; set freeze_core false ## false for ions; ####cp(""df-mp2"") ## moved to below. # get the energy at each variable; # ----------------------------------------------------------------------------; # Initialize a blank dictionary of counterpoise corrected energies; # (Need this for the syntax below to work). ecp = {}; for R in Rvals:; dimer.R = R; ecp[R] = energy(""mp2"", bsse_type = ""cp"") ## for new version; #ecp[R] = cp(""df-mp2"") ## for beta version; e= ecp[R] * psi_hartree2kcalmol; psi4.print_out(""R, E_int [kcal/mol]: %3.1f %10.6f\n"" % (R, e)). # print out all the energies; # ----------------------------------------------------------------------------; psi4.print_out(""\n""); psi4.print_out(""CP-corrected interaction energies\n\n""); psi4.print_out("" R [Ang] E_i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2880:1112,perform,performed,1112,https://psicode.org,https://github.com/psi4/psi4/issues/2880,1,['perform'],['performed']
Performance,"this PR is ready to go; - fix uninitialized variables in dfocc affecting UHF calcs. @bozkaya should review; - fix bug where default `cepa(0)` was routing to qcisd instead of cepa; - fix bug where dfocc `cepa(0)` with `DF` was getting orbital-optimized; - added test case that compares mp2 calcs btwn occ/fnocc/detci/dfmp2. rohf conv still broken btwn detci and occ, but not addressed here",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/270:242,optimiz,optimized,242,https://psicode.org,https://github.com/psi4/psi4/pull/270,1,['optimiz'],['optimized']
Performance,"this error message:; ```; 			-----------------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3 4 5 6; 	 2 : 1; 	 3 : 1; 	 4 : 1; 	 5 : 1; 	 6 : 1. 	---Fragment 1 Geometry and Gradient---; 	 P -0.0023608120 0.0035185828 -0.0004777490; 	 CL -0.0327154829 4.0184477322 -0.0498581826; 	 CL -0.0112576427 -4.0192302534 0.0560609672; 	 CL 1.8729977331 -0.0589160789 -3.3343855050; 	 CL -3.8346895047 -0.0142013792 0.0750942888; 	 CL 2.0077559933 0.0707833845 3.2535115991; 	 0.0005829612 0.0007979689 -0.0000766467; 	 -0.0000438567 -0.0088149216 0.0011960655; 	 -0.0004768815 0.0083220457 -0.0009627395; 	 -0.0039049377 -0.0010136595 0.0075335979; 	 0.0080187099 -0.0002965760 -0.0001586710; 	 -0.0042975334 0.0010502310 -0.0074582594. 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.015348	 2.124830; 	 R(1,3) = 4.023156	 2.128962; 	 R(1,4) = 3.825678	 2.024461; 	 R(1,5) = 3.833115	 2.028397; 	 R(1,6) = 3.825381	 2.024305; 	 L(2,1,3) = 3.131665	 179.431194; 	 l(2,1,3) = 3.141593	 180.000000; 	 B(2,1,4) = 1.580103	 90.533252; 	 B(2,1,5) = 1.568103	 89.845687; 	 B(2,1,6) = 1.567648	 89.819597; 	 B(3,1,4) = 1.567809	 89.828837; 	 B(3,1,5) = 1.563686	 89.592600; 	 B(3,1,6) = 1.577586	 90.389033; 	 B(4,1,5) = 2.102739	 120.478052; 	 B(4,1,6) = 2.076003	 118.946205; 	 B(5,1,6) = 2.104437	 120.575361. 	Current energy : -2642.5785393886. 	Generating empirical Hessian (Schlegel '84) for each fragment.; 	Taking RFO optimization step.; 	Going to follow RFO solution 1.; 	Using RFO vector 1.; 	Norm of target step-size 0.09446; 	Projected energy change by RFO approximation: -0.0037947424. 	Back-transformation to cartesian coordina",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265:1470,optimiz,optimization,1470,https://psicode.org,https://github.com/psi4/psi4/issues/1265,1,['optimiz'],['optimization']
Performance,this example with Bismuth. ```; molecule mol {; 0 1; O 2.92770 0.06060 -0.10810; Bi 2.42590 -1.82250 0.36000; O 1.18530 -0.57340 0.62950; C 0.28120 0.33690 0.82590; C 0.90790 1.68810 0.95220; O -0.93190 0.11800 0.90030; H 1.58840 1.65300 1.79070; H 0.16190 2.44800 1.16540; H 1.41360 1.98520 0.04650; }. set reference rks; set scf_type df; set basis def2-SV(P); E = optimize('pbe'). ```; fails to add ECP gradient terms. from log output:; ```; ==> Adding ECP gradient terms (computed numerically) <==; Failed to converge:; Failed to converge:; Failed to converge:; Failed to converge:; Failed to converge:; Failed to converge:; Failed to converge:; Failed to converge:; Failed to converge:; Failed to converge:; Failed to converge:; Failed to converge:; Failed to converge:; Failed to converge:; Failed to converge:; Failed to converge:; Failed to converge:; ```. Which I guess is leading to the failure of the optimization in the end.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1704:366,optimiz,optimize,366,https://psicode.org,https://github.com/psi4/psi4/issues/1704,2,['optimiz'],"['optimization', 'optimize']"
Performance,tializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Per,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2656,Perform,Performing,2656,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,"tibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #9 0x00007ffff568762b in psi::DPD::buf4_sort(psi::dpdbuf4*, int, psi::indices, int, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (); from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #10 0x00007ffff568fbde in psi::DPD::buf4_sort(psi::dpdbuf4*, int, psi::indices, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #11 0x00007ffff4be5fae in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #12 0x00007ffff4bcd5b3 in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #13 0x00007ffff406c5ab in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #14 0x00007ffff40e5ccb in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #15 0x00007ffff40d4b39 in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #16 0x00007ffff40c71ad in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #17 0x00007ffff40c7235 in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #18 0x00007ffff408bb20 in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #19 0x00005555556d68f4 in cfunction_call (func=0x7fffb13e0cc0, args=<optimized out>, kwargs=<optimized out>) at /opt/conda/conda-bld/python-split_1654083059479/work/Objects/methodobject.c:543; #20 0x000055555569047f in _PyObject_MakeTpCall (tstate=0x555555920e40, callable=0x7fffb13e0cc0, args=<optimized out>, nargs=<optimized out>, keywords=<optimized out>); at /opt/conda/conda-bld/python-split_1654083059479/work/Objects/call.c:191; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1226460109:3061,optimiz,optimized,3061,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226460109,5,['optimiz'],['optimized']
Performance,"tility by Mike Deible and Vladimir Konjkov, which can convert files written in the quasi-standard MOLDEN format into casino’s gwfn.data format.; But in the case of a multideterminant wave function additional data described in [CASINO documentation](https://casinoqmc.net/casino_manual_dir/casino_manual.pdf) **7.4.5 Excitations and multideterminant-expansion coefficients** are required.; The data has the following form and is written to a file **correlation.data**. ```; START MDET; Title; multideterminant WFN generated from Psi4 output data. ! some title; ! empty string or ignored; MD; 3 ! Number of dets; 0.972011 1 0 ! c_1 ; group label for simultaneous optimization ; opt-flag (0 - False; 1 - True); -0.166123 2 1 ! c_2 ; group label for simultaneous optimization ; opt-flag; -0.166123 2 1 ! c_3 ; group label for simultaneous optimization ; opt-flag; DET 2 1 PR 2 1 4 1 ! 2-nd det, up-electron ; PRomote electron from 2-nd orb to 4-th; DET 2 2 PR 2 1 4 1 ! 2-nd det, down-electron ; PRomote electron from 2-nd orb to 4-th; DET 3 1 PR 2 1 5 1 ! 3-nd det, up-electron ; PRomote electron from 2-nd orb to 5-th; DET 3 2 PR 2 1 5 1 ! 3-nd det, down-electron ; PRomote electron from 2-nd orb to 5-th; END MDET. ```; 1. comments behind ! are ignored; 2. Not required c_1<sup>2</sup> + c_2<sup>2</sup> + c_3<sup>2</sup> to be equal to one, only relative weights.; 3. This file defines the following wave function if orbital order in MOLDEN file is: ψ1, ψ2, ψ3 (ROHF case) and r<sub>1</sub>-r<sub>3</sub> for up-electrons, r<sub>4</sub>, r<sub>5</sub> for down-electrons in boron atom:. 0.972011 * |ψ1(r<sub>1</sub>), ψ2(r<sub>2</sub>), ψ3(r<sub>3</sub>)| * |ψ1(r<sub>4</sub>), ψ2(r<sub>5</sub>)|; -0.166123 * |ψ1(r<sub>1</sub>), ψ4(r<sub>2</sub>), ψ3(r<sub>3</sub>)| * |ψ4(r<sub>4</sub>), ψ2(r<sub>5</sub>)|; -0.166123 * |ψ1(r<sub>1</sub>), ψ5(r<sub>2</sub>), ψ3(r<sub>3</sub>)| * |ψ5(r<sub>4</sub>), ψ2(r<sub>5</sub>)|; ; PRomotion replace the specified orbital at its original position with the re",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3235:1202,optimiz,optimization,1202,https://psicode.org,https://github.com/psi4/psi4/issues/3235,1,['optimiz'],['optimization']
Performance,"timized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x5589d8ccc008, ; kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='optimize', qualname='optimize') at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #41 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x5589d8ccc000, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #42 0x00007faabd64624d in _PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x5589d8ccc000, callable=<function at remote 0x7faa87367040>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Include/cpython/abstract.h:127; #43 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, tstate=0x5589d803e680) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4963; #44 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3500; #45 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, f=Frame 0x5589d8ccbe90, for file <string>, line 295, in <module> ()); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x0, ; kwcount=<optimized out>, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #47 0x00007faabd6bfe79 in PyEval_EvalCodeEx (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kws=<optimized out>, ; kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:14006,optimiz,optimized,14006,https://psicode.org,https://github.com/psi4/psi4/issues/2010,2,['optimiz'],['optimized']
Performance,ting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2194,Perform,Performing,2194,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,"ting tripped up because in the past I was able to install rdkit into a env with psi4 but not now apparently. from `mamba install psi4 psi4-rt python=3.6 -c psi4'; `. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4-rt', 'python=3.6']. pkgs/main/linux-64 Using cache; pkgs/main/noarch Using cache; pkgs/r/linux-64 Using cache; pkgs/r/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change; Could not solve for environment specs; The following packages are incompatible; ├─ psi4 is installable with the potential options; │ ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ │ └─ pychemps2 >=1.7.1 with the potential options; │ │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a6",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912:1187,cache,cache,1187,https://psicode.org,https://github.com/psi4/psi4/issues/2912,4,['cache'],['cache']
Performance,"tion0<void> > (a2=..., a1=..., this=<optimized out>); > at /usr/include/boost/bind/bind_template.hpp:102; > #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132; > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0; > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084; > #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283; > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086; > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); > at Python/ceval.c:3433; > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:4480,optimiz,optimized,4480,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,3,['optimiz'],['optimized']
Performance,"tion='D_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f8d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746f530>, haschanged_local=False, value_used=<float at remote 0x7faa8746f8b0>, haschanged_used=False) at remote 0x7faa8737d460>, ('E_CONVERGENCE',): <OptionState(option='E_CONVERGENCE', module=None, value_global=<float at remote 0x7faa8746f990>, haschanged_global=False, value_local=None, haschanged_local=N...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #34 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x7faa873651d8, ; kwargs=0x7faa874b9f18, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='gradient', qualname='gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #35 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa874b9f10, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #36 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa87366e50>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #37 0x00007faabd6481e9 in do_call_core (kwdict={'return_wfn': True, 'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': 1}, callargs=('hf',), ; func=<function at remote 0x7faa87366e50>, tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #38 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #39 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8cda850, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 1824, in optimize (name='hf', kwargs={'opt_iter': 1}, engine='optking', l",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:11017,optimiz,optimized,11017,https://psicode.org,https://github.com/psi4/psi4/issues/2010,3,['optimiz'],['optimized']
Performance,"top of output file for psi4 version (I'm using psi4 in WSL, reinstalled today by running the commands on http://www.psicode.org/downloads.html):; ```; Psi4 1.3.2 release. Git: Rev {HEAD} ecbda83 ; ```. towards the end of the output:; ```; ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------------------------------------------; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ; ---------------------------------------------------------------------------------------------; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o; ---------------------------------------------------------------------------------------------; 2 -232.08477729 -4.57e-04 2.31e-04 * 9.07e-05 o 6.20e-04 * 2.31e-04 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 2 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -232.084319861329 -232.084319861329 0.00763634 0.00254450 0.02132377 0.00710535 ~; 2 -232.084777290884 -0.000457429555 0.00023074 0.00009069 0.00061967 0.00023101 ~; --------------------------------------------------------------------------------------------------------------- ~; ```. If change the convergence criteria by adding to my input file; ```; set {; max_energy_g_convergence 1e-6; }; ```. or ; ```; set {; g_convergence MOLPRO; }; ```. the optimization goes for three steps before converging properly:; ```; ==> Convergence Check <==. Measures of convergence in internal coordin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1947:1635,Optimiz,Optimization,1635,https://psicode.org,https://github.com/psi4/psi4/issues/1947,1,['Optimiz'],['Optimization']
Performance,"torcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #134 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff112882d0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #135 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11288360) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #136 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #137 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd884ea30, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #138 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd887ef60, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fabd8a587f0, level=2); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #139 0x000055ff9067536b in import_name (level=0x7fac0e300110, fromlist=0x7fabd8a587f0, name=0x7fabd887ef60, f=0x55ff95dcd100, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #140 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95dcd100, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #141 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x55ff95dcd100, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #142 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112886e0, locals=locals@entry=0x7fac0e0f83c0, args=args@entry=0x0, argcount=argcount@entry=0, ; --Type <RET> for more, q to quit, c to continue without paging--; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:32030,optimiz,optimized,32030,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"torcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #180 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff112890a0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #181 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11289130) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #182 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #183 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd8928940, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #184 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd8903a70, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fabd8e6e320, level=1); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #185 0x000055ff9067536b in import_name (level=0x7fac0e3000f0, fromlist=0x7fabd8e6e320, name=0x7fabd8903a70, f=0x7fabdcdb7a00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #186 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabdcdb7a00, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #187 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabdcdb7a00, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #188 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112894b0, locals=locals@entry=0x7fabd8903bc0, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #189 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:41030,optimiz,optimized,41030,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"torcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #254 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128a6d0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #255 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128a760) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #256 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #257 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd89285d0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #258 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd8928580, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fabe4291420, level=1); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #259 0x000055ff9067536b in import_name (level=0x7fac0e3000f0, fromlist=0x7fabe4291420, name=0x7fabd8928580, f=0x7fac0e074610, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #260 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e074610, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #261 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e074610, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #262 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128aae0, locals=locals@entry=0x7fabdcd7a300, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #263 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:55354,optimiz,optimized,55354,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"torcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #366 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128c920, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #367 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128c9b0) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #368 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #369 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fac0e079f30, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #370 PyImport_ImportModuleLevelObject (name=name@entry=0x7fac0e136530, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fac0e104d90, level=1); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #371 0x000055ff9067536b in import_name (level=0x7fac0e3000f0, fromlist=0x7fac0e104d90, name=0x7fac0e136530, f=0x7fac0e16ec00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #372 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16ec00, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #373 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16ec00, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #374 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128cd30, locals=locals@entry=0x7fac0e071580, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #375 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:77143,optimiz,optimized,77143,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"tp://psicode.org/psi4manual/1.1/conda.html?highlight=conda) with `conda create -n p4env python=3.6 psi4 psi4-rt -c psi4/label/dev -c psi4`. I can `import psi4` correctly using the python interactive shell. ```bash; $ source activate p4env; $ python; ```; ```python; Python 3.6.3 | packaged by conda-forge | (default, Nov 4 2017, 10:10:56) ; [GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import sys; >>> sys.executable; '/home/xxx/data/applications/anaconda3/envs/p4env/bin/python'; >>> sys.path; ['', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python36.zip', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/lib-dynload', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages']; >>> import psi4; /home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; ```. If I run inside a notebook, `sys.path` and `sys.executable` are the same, but when I `import psi4`, I get a message ""The kernel appears to have died. It will restart automatically."" In the terminal, I see: ; ```; [I 17:41:23.834 NotebookApp] Adapting to protocol v5.1 for kernel 56076279-b2b7-4f6a-8fb0-83b5b1f774c4; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; terminate called after throwing an instance of 'std::bad_cast'; what(): std::bad_cast; [I 17:41:41.146 NotebookApp] KernelRestarter: restarting kernel (1/5); ```. I think the first three lines are unrelated. The kernel never recovers and I can't import the module. Should I expect that Psi4 will work inside a `jupyter notebook` and if so, is there any way to get more information about what's going wrong?. **Edit:** I should add that to get `jupyter notebook` to see the `p4env` conda environment, I executed `con",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862:1297,load,loaded,1297,https://psicode.org,https://github.com/psi4/psi4/issues/862,1,['load'],['loaded']
Performance,"traints_string:; if 'scan' in constraints_dict:; raise ValueError(""No scan!""); Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:2472,optimiz,optimize,2472,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792,1,['optimiz'],['optimize']
Performance,"trons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: AUG-CC-PVTZ; Number of shells: 14; Number of basis function: 46; Number of Cartesian functions: 55; Spherical Harmonics?: true; Max angular momentum: 3. ==> Pre-Iterations <==. ---. ```; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; ```. ---. ```; Ag 11 11 0 0 0 0; B1g 3 3 0 0 0 0; B2g 3 3 0 0 0 0; B3g 3 3 0 0 0 0; Au 2 2 0 0 0 0; B1u 8 8 0 0 0 0; B2u 8 8 0 0 0 0; B3u 8 8 0 0 0 0; ```. ---. ```; Total 46 46 5 5 5 0; ```. ---. Starting with a DF guess... OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. ```; J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 12; Integrals threads: 12; Memory (MB): 34332; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12; ```. => Auxiliary Basis Set <=. Basis Set:; Number of shells: 30; Number of basis function: 104; Number of Cartesian functions: 131; Spherical Harmonics?: true; Max angular momentum: 4. Minimum eigenvalue in the overlap matrix is 2.8456599490E-02.; Using Symmetric Orthogonalization.; SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. ```; Total Energy Delta E RMS |[F,P]|; ```. @DF-RHF iter 1: -84.75156121243363 -8.47516e+01 4.62678e-01; @DF-RHF iter 2: -84.57553975935072 1.76021e-01 1.57599e-01 DIIS; @DF-RHF iter 3: -95.37276589956019 -1.07972e+01 2.29222e-01 DIIS; @DF-RHF iter 4: -98.17150610513394 -2.79874e+00 1.13514e-01 DIIS; @DF-RHF iter 5: -99.36228201796470 -1.19078e+00 2.49350e-02 DIIS; @DF-RHF iter 6: -99.44980963420196 -8.75276e-02 2.84013e-03 DIIS; @DF-RHF iter 7: -99.45076800401445 -9.58370e-04 5.43402e-04 DIIS; @DF-RHF iter 8: -99.45080520800713 -3.72040e-05 3.28",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:4655,Cache,Cache,4655,https://psicode.org,https://github.com/psi4/psi4/issues/204,1,['Cache'],['Cache']
Performance,"try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'energy', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}, ...}; verbose = 1. def dftd3_driver(jobrec, verbose=1):; """"""Drive the jobrec@i (input) -> dftd3rec@i -> dftd3rec@io -> jobrec@io (returned) process. Input Fields; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec) # updates jobrec. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:183:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'energy', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}, ...}; dftd3rec = {'command': ['dftd3', 'dftd3_geometry.xyz'], 'dashlevel': 'd3bj', 'dashparams': {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}, 'dashparams_citation': False, ...}. def dftd3_harvest(jobrec, dftd3rec):; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:13899,load,loads,13899,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['load'],['loads']
Performance,"try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'gradient', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}, ...}; verbose = 1. def dftd3_driver(jobrec, verbose=1):; """"""Drive the jobrec@i (input) -> dftd3rec@i -> dftd3rec@io -> jobrec@io (returned) process. Input Fields; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec) # updates jobrec. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:183:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'gradient', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}, ...}; dftd3rec = {'command': ['dftd3', 'dftd3_geometry.xyz', '-grad'], 'dashlevel': 'd2', 'dashparams': {'alpha6': 20.0, 's6': 1.05, 'sr6': 1.1}, 'dashparams_citation': '', ...}. def dftd3_harvest(jobrec, dftd3rec):; """"",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:5064,load,loads,5064,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['load'],['loads']
Performance,ts Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:2188,Perform,Performing,2188,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['Perform'],['Performing']
Performance,"ts/runtest.py"" ""/Users/bsenjean/Documents/Git_repositories/psi4/tests/nbody-convergence/input.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/testresults.log"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4"" ""false"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence/output.dat"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/share/psi4"" ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/""; Directory: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/tests/nbody-convergence; ""nbody-convergence"" start time: Apr 16 15:44 CEST; Output:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 55, in <module>; from . import core; ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Reason: image not found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/bin/psi4"", line 184, in <module>; import psi4; File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Library not loaded: @rpath/libiomp5.dylib; Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; Reason: image not found; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 0.40 sec. Test Failed.; ""nbody-convergence"" end t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870:1908,load,loaded,1908,https://psicode.org,https://github.com/psi4/psi4/issues/1870,1,['load'],['loaded']
Performance,"ts_dict:; > raise ValueError(""No scan!""); > Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string); > ; > ; > # Set up the internal coordinate system; > coordsys = input_opts.get('coordsys', 'tric'); > CoordSysDict = {; > 'cart': (geometric.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:2658,optimiz,optimizer,2658,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275,1,['optimiz'],['optimizer']
Performance,"tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #31 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #32 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; --Type <RET> for more, q to quit, c to continue without paging--; #33 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #34 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286660, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #35 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8697300, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #36 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8697300, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #37 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #38 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #39 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #40 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630) ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:12250,optimiz,optimized,12250,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #84 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #85 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #86 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; --Type <RET> for more, q to quit, c to continue without paging--; #87 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112875e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #88 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b7c840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #89 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b7c840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #90 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #91 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #92 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #93 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0) ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:22534,optimiz,optimized,22534,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11288360) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #136 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #137 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd884ea30, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #138 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd887ef60, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fabd8a587f0, level=2); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #139 0x000055ff9067536b in import_name (level=0x7fac0e300110, fromlist=0x7fabd8a587f0, name=0x7fabd887ef60, f=0x55ff95dcd100, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #140 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95dcd100, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #141 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x55ff95dcd100, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #142 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112886e0, locals=locals@entry=0x7fac0e0f83c0, args=args@entry=0x0, argcount=argcount@entry=0, ; --Type <RET> for more, q to quit, c to continue without paging--; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #143 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8882550, globals=globals@entry=0x7fac0e0f83c0, locals=locals@entry=0x7fac0e0f83c0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #144 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e0f83c0, globals=0x7fac0e0f83c0, source=0x7fabd8882550); at /usr/local/src/conda/python-3.10.14/Python/bltinmod",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:32431,optimiz,optimized,32431,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11289130) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #182 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #183 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd8928940, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #184 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd8903a70, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fabd8e6e320, level=1); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #185 0x000055ff9067536b in import_name (level=0x7fac0e3000f0, fromlist=0x7fabd8e6e320, name=0x7fabd8903a70, f=0x7fabdcdb7a00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #186 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabdcdb7a00, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #187 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabdcdb7a00, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #188 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112894b0, locals=locals@entry=0x7fabd8903bc0, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #189 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8a87940, globals=globals@entry=0x7fabd8903bc0, locals=locals@entry=0x7fabd8903bc0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #190 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd8903bc0, globals=0x7fabd8903bc0, source=0x7fabd8a87940); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #191 builtin_exec (module=<optimized out>, args=<optim",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:41431,optimiz,optimized,41431,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128a760) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #256 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #257 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd89285d0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #258 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd8928580, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fabe4291420, level=1); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #259 0x000055ff9067536b in import_name (level=0x7fac0e3000f0, fromlist=0x7fabe4291420, name=0x7fabd8928580, f=0x7fac0e074610, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #260 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e074610, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #261 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e074610, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #262 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128aae0, locals=locals@entry=0x7fabdcd7a300, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #263 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8a86550, globals=globals@entry=0x7fabdcd7a300, locals=locals@entry=0x7fabdcd7a300); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #264 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabdcd7a300, globals=0x7fabdcd7a300, source=0x7fabd8a86550); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #265 builtin_exec (module=<optimized out>, args=<optim",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:55755,optimiz,optimized,55755,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128c9b0) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #368 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #369 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fac0e079f30, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #370 PyImport_ImportModuleLevelObject (name=name@entry=0x7fac0e136530, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fac0e104d90, level=1); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #371 0x000055ff9067536b in import_name (level=0x7fac0e3000f0, fromlist=0x7fac0e104d90, name=0x7fac0e136530, f=0x7fac0e16ec00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #372 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16ec00, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #373 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16ec00, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #374 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128cd30, locals=locals@entry=0x7fac0e071580, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #375 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fac0e06f7e0, globals=globals@entry=0x7fac0e071580, locals=locals@entry=0x7fac0e071580); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #376 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e071580, globals=0x7fac0e071580, source=0x7fac0e06f7e0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #377 builtin_exec (module=<optimized out>, args=<optim",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:77544,optimiz,optimized,77544,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"ues of ; `E_CONVERGENCE`,`MAX_MOGRAD_CONVERGENCE`, `RMS_MOGRAD_CONVERGENCE` does not produce the expected behavior. . Rather than requiring `RMS_MOGRAD <= RMS_MOGRAD_CONVERGENCE`, `MAX_MOGRAD <= MAX_MOGRAD_CONVERGENCE`, `DE <= E_CONVERGENCE` to ALL evaluate to `True`, convergence is declared if EITHER `DE <= E_CONVERGENCE` or the MOGRAD convergence is met. . This leads to situations where tightening `MAX_MOGRAD_CONVERGENCE` has no effect on the result of the calculation, and convergence is declared when `MAX_MOGRAD` is higher than the convergence criterion. As far as I can tell, the offending lines of code are in occ_iterations.cc L279:282:; ```; if (wfn_type_ != ""DF-OLCCD"") {; if (rms_wog < tol_grad && biggest_mograd < mograd_max) break;; if (std::fabs(DE) <= tol_Eod) break;; }; ```. Removing these lines fixes my issue, but as I am unclear about the purpose of this code block perhaps that is not the best fix. With original code:; ```; ==============================================================================; ================ Performing DF-OMP2 iterations... ============================; ==============================================================================; Minimizing DF-MP2-L Functional; ------------------------------; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2; ---- --------------- ---------- ----------- ----------- ----------; 1 -76.2055179040 -1.60e-03 3.84e-04 1.53e-03 5.38e-05; 2 -76.2055243130 -6.41e-06 3.88e-05 2.04e-04 5.14e-06. ==============================================================================; ======================== DF-OMP2 ITERATIONS ARE CONVERGED ====================; ==============================================================================; ```. With lines removed/commented (EXECUTING LOOP print statements added by me during debugging, ignore them):; ```; ==============================================================================; ================ Performing DF-OMP2 iterations... ============================; ===",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1143:1086,Perform,Performing,1086,https://psicode.org,https://github.com/psi4/psi4/issues/1143,1,['Perform'],['Performing']
Performance,"uh-oh, it's finding pedantic errors in integratorxx now `/include/integratorxx/generators/s2_factory.hpp:24:2: error: extra ‘;’ [-Wpedantic]` . this would be a fault of our appending to `CMAKE_CXX_FLAGS`, which wasn't so outrageous back in the day. thinking about it, there would be a lot more of these interferences with other projects if the CI wasn't detecting so much as pre-built. which means that developers building deps from source will likely have builds fail since force_pydantic defualts to ON and if the dep projects aren't pedantic clean. so this was probably a lucky block to the merge. I'm not sure right off if there's a quick+good solution. you could move the option to here https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L222 _after_ the externals have been added. and maybe turn the default to OFF but add it (`-D`) as ON to the azure CI. I'm going to put a needs-changes block so I remember it isn't just a spurious test fail in the merge queue. lmk if you disagree with any of my hasty conclusions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2015930547:968,queue,queue,968,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2015930547,1,['queue'],['queue']
Performance,"uild; Constructing a list of tests; Done constructing a list of tests; Updating test list for fixtures; Added 0 tests to meet fixture requirements; Checking test dependency graph...; Checking test dependency graph end; test 401; Start 401: json-schema_0_properties. 401: Test command: /shared/raimis/opt/miniconda/envs/psi4/bin/python ""/home/raimis/psi4.git/tests/runtest.py"" ""/home/raimis/psi4.git/tests/json/schema_0_properties/input.dat"" ""/home/raimis/psi4.git/linux_build/testresults.log"" ""false"" ""/home/raimis/psi4.git"" ""false"" ""/home/raimis/psi4.git/linux_build/tests/json/json-schema_0_properties/output.dat"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/bin/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/lib/""; 401: Test timeout computed to be: 1500; 401: ; 401: *** tstart() called on computer06; 401: *** at Mon Jul 9 14:44:29 2018; 401: ; 401: => Loading Basis Set <=; 401: ; 401: Name: 6-31G; 401: Role: ORBITAL; 401: Keyword: BASIS; 401: atoms 1 entry O line 117 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/6-31g.gbs ; 401: atoms 2-3 entry H line 26 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/6-31g.gbs ; 401: ; 401: ; 401: ---------------------------------------------------------; 401: SCF; 401: by Justin Turney, Rob Parrish, Andy Simmonett; 401: and Daniel Smith; 401: RHF Reference; 401: 1 Threads, 500 MiB Core; 401: ---------------------------------------------------------; 401: ; 401: ==> Geometry <==; 401: ; 401: Molecular point group: c2v; 401: Full point group: C2v; 401: ; 401: Geometry (in Bohr), charge = 0, multiplicity = 1:; 401: ; 401: Center X Y Z Mass ; 401: ------------ ----------------- ----------------- ----------------- -----------------; 401: O 0.000000000000 0.000000000000 -0.129476941194 15.99491",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174:1425,Load,Loading,1425,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174,1,['Load'],['Loading']
Performance,"ult (tstate=<optimized out>, f=0x55ff95c373d0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #202 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c373d0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #203 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #204 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #205 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #206 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #207 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112899e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #208 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6cdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #209 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6cdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #210 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #211 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:45411,optimiz,optimized,45411,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x55ff95ddd860, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #124 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95ddd860, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #125 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #126 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #127 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #128 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #129 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112881a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #130 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b83040, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #131 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b83040, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #132 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #133 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:30151,optimiz,optimized,30151,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x55ff95de00f0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #117 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95de00f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #118 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #119 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #120 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #121 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #122 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287ff0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #123 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95ddd860, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #124 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95ddd860, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #125 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #126 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:28814,optimiz,optimized,28814,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x55ff95e324c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #149 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95e324c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #150 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #151 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #152 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #153 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #154 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288a60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #155 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c4a880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #156 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c4a880, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #157 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #158 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:35074,optimiz,optimized,35074,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fabd8918a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #216 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #217 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #218 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #219 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #220 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #221 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289d40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #222 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4288610, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #223 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4288610, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #224 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #225 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:48085,optimiz,optimized,48085,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fabd891aa40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #170 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd891aa40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #171 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #172 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #173 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #174 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #175 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288f70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #176 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891a240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #177 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd891a240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #178 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #179 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:39151,optimiz,optimized,39151,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fabd8c2ae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #290 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2ae40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #291 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #292 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #293 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #294 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #295 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b370, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #296 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2b040, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #297 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2b040, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #298 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #299 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:62409,optimiz,optimized,62409,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fabd8c4a880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #156 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c4a880, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #157 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #158 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #159 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #160 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #161 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288c10, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #162 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6f680, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #163 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6f680, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #164 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #165 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:36411,optimiz,optimized,36411,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fabd8f6cdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #209 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6cdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #210 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #211 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #212 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #213 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #214 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289b90, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #215 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #216 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #217 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #218 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:46748,optimiz,optimized,46748,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fabd8f6f680, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #163 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6f680, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #164 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #165 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #166 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #167 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #168 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288dc0, tstate=<optimized out>); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #169 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891aa40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #170 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd891aa40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #171 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #172 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:37748,optimiz,optimized,37748,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fabd8fa8550, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #269 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8fa8550, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #270 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #271 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #272 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #273 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #274 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ae60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #275 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c483c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #276 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c483c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; --Type <RET> for more, q to quit, c to continue without paging--; #277 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #278 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:58332,optimiz,optimized,58332,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fabe4289b60, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #283 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4289b60, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #284 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #285 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #286 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #287 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #288 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b1c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #289 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2ae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #290 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2ae40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #291 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #292 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:61072,optimiz,optimized,61072,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fabe4b81240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #237 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b81240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #238 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #239 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #240 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #241 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #242 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a3f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #243 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2ca240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #244 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2ca240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #245 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #246 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:52072,optimiz,optimized,52072,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fac0e074420, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #349 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e074420, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #350 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #351 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #352 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #353 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #354 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c640, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #355 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #356 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #357 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; --Type <RET> for more, q to quit, c to continue without paging--; #358 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:73861,optimiz,optimized,73861,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fac0e16bb50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #335 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16bb50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #336 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #337 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #338 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #339 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #340 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c2e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #341 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3c5000, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #342 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3c5000, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #343 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #344 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:71187,optimiz,optimized,71187,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fac0e16dc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #388 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16dc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #389 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #390 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #391 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #392 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #393 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d260, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #394 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3bf870, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #395 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3bf870, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #396 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #397 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:81524,optimiz,optimized,81524,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fac0e2ca240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #244 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2ca240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #245 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #246 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #247 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #248 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #249 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a5a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #250 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4df3880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #251 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4df3880, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #252 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #253 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:53409,optimiz,optimized,53409,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fac0e2cb240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #402 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #403 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #404 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #405 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #406 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #407 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d5c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #408 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #409 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cae40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #410 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #411 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:84198,optimiz,optimized,84198,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fac0e32fc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #311 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e32fc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #312 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #313 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #314 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #315 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #316 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ba20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #317 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c6db10, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #318 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c6db10, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #319 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3634a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #320 _PyFunction_Vectorcall (func=0x7fac0e363490, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:66396,optimiz,optimized,66396,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fac0e3bf870, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #395 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3bf870, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #396 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #397 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #398 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #399 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #400 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d410, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #401 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #402 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #403 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #404 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:82861,optimiz,optimized,82861,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fac0e3c5000, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #342 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3c5000, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #343 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #344 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #345 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #346 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #347 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c490, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #348 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e074420, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #349 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e074420, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #350 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #351 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:72524,optimiz,optimized,72524,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"unc=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); > at Python/ceval.c:4378; > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720; > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433; > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433; > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0); > at Python/ceval.c:771; > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; > locals=locals@entry=0x7ffff7ed07a0, flags=flags@entry=0x0, arena=arena@entry=0x28ca640) at Python/pythonrun.c:1981; > #35 0x00007ffff5168335 in PyR",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:6134,optimiz,optimized,6134,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,1,['optimiz'],['optimized']
Performance,"unction_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); at Python/ceval.c:4378; #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720; #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433; #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433; #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0); at Python/ceval.c:771; #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; locals=locals@entry=0x7ffff7ed07a0, flags=flags@entry=0x0, arena=arena@entry=0x28ca640) at Python/pythonrun.c:1981; #35 0x00007ffff5168335 in PyRun_StringFlags (str",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:5795,optimiz,optimized,5795,https://psicode.org,https://github.com/psi4/psi4/issues/12,1,['optimiz'],['optimized']
Performance,"unctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; __________________________________________________________________ test_psi4_cc __________________________________________________________________. def test_psi4_cc():; """"""cc1""""""; #! RHF-CCSD 6-31G** all-electron optimization of the H2O molecule; ; h2o = psi4.geometry(""""""; O; H 1 0.97; H 1 0.97 2 103.0; """"""); ; psi4.set_options({""basis"": '6-31G**'}); ; > psi4.optimize('ccsd'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:63: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:1050: in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:697: in gradient; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:752: in select_ccsd; return func(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2953: in run_detci; ref_wfn = scf_helper(name, **kwargs) # C1 certified; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:28752,optimiz,optimize,28752,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['optimiz'],['optimize']
Performance,und following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Perfo,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2530,Perform,Performing,2530,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,unicorn 21.2.0 py39h2804cbe_0 conda-forge; h5py 3.9.0 nompi_py39he9c2634_101 conda-forge; hdf4 4.2.15 h1a38d6a_5 conda-forge; hdf5 1.14.1 nompi_h3aba7b3_100 conda-forge; icu 72.1 he12128b_0 conda-forge; idna 3.3 pyhd8ed1ab_0 conda-forge; importlib-metadata 4.11.2 py39h2804cbe_0 conda-forge; importlib_metadata 4.11.2 hd8ed1ab_0 conda-forge; importlib_resources 5.4.0 pyhd8ed1ab_0 conda-forge; ipykernel 6.9.1 py39h32adebf_0 conda-forge; ipython 8.0.1 py39h2804cbe_2 conda-forge; ipython_genutils 0.2.0 py_1 conda-forge; ipywidgets 7.6.5 pyhd8ed1ab_0 conda-forge; itsdangerous 2.1.2 pyhd8ed1ab_0 conda-forge; jedi 0.18.1 py39h2804cbe_0 conda-forge; jinja2 3.0.3 pyhd8ed1ab_0 conda-forge; joblib 1.3.0 pyhd8ed1ab_1 conda-forge; jpeg 9e h1c322ee_1 conda-forge; jsonschema 4.4.0 pyhd8ed1ab_0 conda-forge; jupyter_client 7.1.2 pyhd8ed1ab_0 conda-forge; jupyter_core 4.9.2 py39h2804cbe_0 conda-forge; jupyterlab_pygments 0.1.2 pyh9f0ad1d_0 conda-forge; jupyterlab_widgets 1.0.2 pyhd8ed1ab_0 conda-forge; khronos-opencl-icd-loader 2022.09.30 h1a8c8d9_2 conda-forge; kiwisolver 1.4.2 py39h2c803a9_1 conda-forge; krb5 1.21.2 h92f50d5_0 conda-forge; lcms2 2.12 had6a04f_0 conda-forge; lerc 3.0 hbdafb3b_0 conda-forge; libabseil 20220623.0 cxx17_h28b99d4_6 conda-forge; libaec 1.0.6 hb7217d7_1 conda-forge; libarrow 11.0.0 h0b9b5d1_5_cpu conda-forge; libblas 3.9.0 13_osxarm64_openblas conda-forge; libbrotlicommon 1.0.9 h3422bc3_6 conda-forge; libbrotlidec 1.0.9 h3422bc3_6 conda-forge; libbrotlienc 1.0.9 h3422bc3_6 conda-forge; libcblas 3.9.0 13_osxarm64_openblas conda-forge; libcrc32c 1.1.2 hbdafb3b_0 conda-forge; libcurl 8.3.0 hc52a3a8_0 conda-forge; libcxx 15.0.7 h75e25f2_0 conda-forge; libdeflate 1.10 h3422bc3_0 conda-forge; libecpint 1.0.7 habece42_9 conda-forge; libedit 3.1.20191231 hc8eb9b7_2 conda-forge; libev 4.33 h642e427_1 conda-forge; libevent 2.1.10 h7673551_4 conda-forge; libexpat 2.5.0 hb7217d7_1 conda-forge; libffi 3.4.2 h3422bc3_5 conda-forge; libgfortran 5.0.0 12_2_0_hd922786_31 co,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306:4953,load,loader,4953,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306,1,['load'],['loader']
Performance,"unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); psi::psio_write_entry(unsigned long, char const*, char*, unsigned long); ```; This then results in a second PSIO error upon each subsequent optimization iteration, when attempting to read the binary optimization data from file:; ```; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/sirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::psio_error(unsigned long, unsigned long); psi::PSIO::open(unsigned long, int); psi::psio_open(unsigned long, int); opt::opt_io_is_present(); ```; This finally results in the optimizer spinning its wheels for the remainder of the allotted iterations. The usual PSIO error-culprit, an un-touchable filesystem, was ruled out for both machines on which this behavior was observed. Input:; ```; # index A24-7-dimer label Dimer from ammmonia_methane_C3v. memory 14000 mb. molecule mol {; units Angstrom; no_com; no_reorient; 0 1; N 0.001106462041 -0.000130846927 1.849133409958; H 0.938627974105 -0.000139345380 2.221618285244; H -0.467316580071 -0.811849948182 2.222477040520; H -0.467307391010 0.811579719379 2.222474714333; H -0.000457075852 -0.000011938197 -0.942103507206; C -0.001019750816 0.000109523659 -2.027776337389; H 0.509840850903 0.885353515687 -2.394362733084; H 0.509834400679 -0.885039296153 -2.394623104348; H -1.023308879978 0.000128616114 -2.393761958029. }. set e_convergence 11; set basis cc-pvtz; set scf guess sad; set scf dft_radial_points 150; set scf scf_type df; set scf dft_spherical_points 434; set scf maxiter 100; set guess_persist true; set geom_maxiter 300. set optking {; dynamic_level=1; full_hess_every 0; max_energy_g_convergence 1e-6; max_force_g_convergence 1.5e-5; rms_force_g_convergence 1e-5; max_disp_g_convergence 6e-4; rms_disp_g_convergence 4e-4; }. optimize('m05-2x'); ``` . Thanks in advance for any assistance, everyone!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/789:2491,optimiz,optimize,2491,https://psicode.org,https://github.com/psi4/psi4/issues/789,1,['optimiz'],['optimize']
Performance,"up the internal coordinate system; > coordsys = input_opts.get('coordsys', 'tric'); > CoordSysDict = {; > 'cart': (geometric.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ```; > ; > You may want to bu",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:2764,Optimiz,Optimizer,2764,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275,1,['Optimiz'],['Optimizer']
Performance,"up-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 7, 9, 11, 19, 21, 23 entry O line 130 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 8, 10, 12, 20, 22, 24 entry H line 15 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs. Psi4 stopped on: Tuesday, 18 September 2018 03:03PM; Psi4 wall time for execution: 1 day, 4:22:27.10. *** Psi4 exiting successfully. Buy a developer a beer!; --------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / aug-cc-pvqz -1007.18544968 xtpl_highest_1; corl mp2 / aug-cc-pv[tq]z -3.93422466 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pvdz -4.79308051 xtpl_highest_1; total CBS -1015.91275485; ---------------------------------------------------------------------------------------------------------; => Loading Basis Set <=. Name: DEF2-SVP; Role: ORBITAL; Keyword: BASIS; atoms 1, 3, 5, 13, 15, 17 entry N line 110 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 2, 4, 6, 14, 16, 18 entry C line 90 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 7, 9, 11, 19, 21, 23 entry O line 130 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 8, 10, 12, 20, 22, 24 entry H line 15 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs. Psi4 stopped on: Tuesday, 18 September 2018 01:43PM; Psi4 wall time for execution: 1 day, 3:02:31.40. *** Psi4 exiting successfully. Buy a developer a beer!; ```. Note that the latter output, which is wrong, supposedly finished before the former. I have seen this behavior when running 6-core jobs in various different ma",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1279:2481,Load,Loading,2481,https://psicode.org,https://github.com/psi4/psi4/issues/1279,1,['Load'],['Loading']
Performance,"upation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 6-31G**; Blend: 6-31G**; Number of shells: 12; Number of basis function: 25; Number of Cartesian functions: 25; Spherical Harmonics?: false; Max angular momentum: 2. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A1 12 12 0 0 0 0; A2 2 2 0 0 0 0; B1 4 4 0 0 0 0; B2 7 7 0 0 0 0; -------------------------------------------------------; Total 25 25 5 5 5 0; -------------------------------------------------------. ==> Integral Setup <==. Using in-core PK algorithm.; Calculation information:; Number of atoms: 3; Number of AO shells: 12; Number of primitives: 25; Number of atomic orbitals: 25; Number of basis functions: 25. Integral cutoff 1.00e-12; Number of threads: 1. Performing in-core PK; Using 105950 doubles for integral storage.; We computed 3081 shell quartets total.; Whereas there are 3081 unique shell quartets.; ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory (MB): 375; Schwarz Cutoff: 1E-12. OpenMP threads: 1; Minimum eigenvalue in the overlap matrix is 2.3361254517E-02.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter 0: -75.89338120057249 -7.58934e+01 1.07730e-01 ; @RHF iter 1: -75.98060436750765 -8.72232e-02 1.95692e-02 ; @RHF iter 2: -76.00861798186263 -2.80136e-02 1.04925e-02 DIIS; @RHF iter 3: -76.01673061204843 -8.11263e-03 1.56037e-03 DIIS; @RHF iter 4: -76.01722494225463 -4.94330e-04 5.00914e-04 DIIS; @RHF iter 5: -76.01729299826569 -6.80560e-05 1.02319e-04 DIIS; @RHF iter 6: -76.01729647642517 -3.47816e-06 1.57456e-05 DIIS; @RHF iter 7: -76.01729655361160 -7.71864e-08 2.57884e-06 DIIS; @RHF iter 8:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339412812:4409,Perform,Performing,4409,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812,1,['Perform'],['Performing']
Performance,"upation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 3-21G; Blend: 3-21G; Number of shells: 4; Number of basis function: 4; Number of Cartesian functions: 4; Spherical Harmonics?: false; Max angular momentum: 0. => Loading Basis Set <=. Name: (3-21G AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry HE line 39 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/def2-svp-jkfit.gbs . ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 4 4 0 0 0 0; -------------------------------------------------------; Total 4 4 1 1 1 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory [MiB]: 375; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (3-21G AUX); Blend: DEF2-SVP-JKFIT; Number of shells: 18; Number of basis function: 50; Number of Cartesian functions: 50; Spherical Harmonics?: false; Max angular momentum: 2. Minimum eigenvalue in the overlap matrix is 4.0357381281E-01.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter SAD: -2.83568135919461 -2.83568e+00 0.00000e+00 ; @DF-UHF iter 1: -2.83568840083719 -7.04164e-06 9.00011e-05 DIIS; @DF-UHF iter 2: -2.83568849893678 -9.80996e-08 1.09058e-05 DIIS; @DF-UHF iter 3: -2.83568850042063 -1.48385e-09 4.55093e-08 DIIS; @DF-UHF iter 4: -2.83568850042064 -1.28786e-14 1.52740e-10 DIIS; @DF-UHF iter 5: -2.83568850042064 -8.88178e-16 9.96306e-12 DIIS; @DF-UHF iter 6: -2.83568850042064 2.22045e-15 2.48440e-16 DIIS; Energy and w",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:3433,Cache,Cache,3433,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,1,['Cache'],['Cache']
Performance,"using intel-gdb I am getting a segfault at:; `0x00002aaac4d3f06e in std::local_Rb_tree_decrement (__x=0x2aaaae4b3ff0 <psi::SphericalGrid::lebedev_mapping_+8>)`. Possibly multi-threading related, since I have not seen an error for single-threaded _yet_.; edit: Also no error for a `debug` compilation yet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1366#issuecomment-441222929:170,multi-thread,multi-threading,170,https://psicode.org,https://github.com/psi4/psi4/issues/1366#issuecomment-441222929,1,['multi-thread'],['multi-threading']
Performance,"ut>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; --Type <RET> for more, q to quit, c to continue without paging--; #87 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112875e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #88 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b7c840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #89 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b7c840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #90 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #91 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #92 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #93 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #94 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287790, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #95 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918c40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #96 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918c40, tstate=0x55ff9515e050) at /usr/local/src/conda/pyt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:23094,optimiz,optimized,23094,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ut>, kwnames=0x7faa87365d18, ; kwargs=0x7faa8746fd98, kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='run_scf_gradient', qualname='run_scf_gradient'); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #29 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, stack=0x7faa8746fd90, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:435; #30 0x00007faabd65ca90 in PyVectorcall_Call (callable=<function at remote 0x7faa8748c1f0>, tuple=<optimized out>, kwargs=<optimized out>); at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Objects/call.c:199; #31 0x00007faabd6481e9 in do_call_core (kwdict={'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': True}, callargs=('hf',), func=<function at remote 0x7faa8748c1f0>, ; tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #32 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #33 0x00007faabd6453f4 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8c47070, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 973, in gradient (name='hf', kwargs={'opt_iter': True}, gradient_type='conventional', dertype=1, optstash=<OptionsState(data={('E_CONVERGENCE', 'SCF'): <OptionState(option='E_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f890>, haschanged_global=False, value_local=<float at remote 0x7faa8746f830>, haschanged_local=False, value_used=<float at remote 0x7faa8746f870>, haschanged_used=False) at remote 0x7faa8737d490>, ('D_CONVERGENCE', 'SCF'): <OptionState(option='D_CONVERGENCE', module='SCF', value_global=<float at remote 0x7faa8746f8d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746f530>, haschanged_local=False, value_used=<float at remote 0x7faa8746f8b0>, haschanged_used=False) at remote 0x7faa8737d46",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:9297,optimiz,optimized,9297,https://psicode.org,https://github.com/psi4/psi4/issues/2010,2,['optimiz'],['optimized']
Performance,"ux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; atoms 2 entry O line 190 file /Users/loriab/linux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; atoms 3-4 entry H line 20 file /Users/loriab/linux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; ```; - [x] 7. soon after all the new basis stuff went in Nov 2014, Jet added another layer in qcdb pyconstruct to make CABS basis sets work. unfortunately, this broke one of the key principles/advantages of the new scheme. not that i remember exactly what that principle was, though it was probably that the basis could be re-constituted by `basis mybas {...}` mybas name; - [x] 8. fix the 5-zeta and 6-zeta orbital defaulting to quad-zeta fitting as in noted in #144 ; - [x] 9. Switch out Pople basis fitting bases to appropriate-zeta def2-*-ri/jkfit, rather than Dunning ri/jkfit, as former has fewer element holes. (as noted in #144); - [x] 10. Create (maybe?) another layer of defaulting so that aug-cc-pvdz orbital uses aug-cc-pvdz-ri/jkfit when available (as at present), then def2-tzvp-ri/jkfit (not at present), then the ultimate default def2-qzvpp-ri/jkfit (as at present). This way don't get high AM cost on supposedly cheap orbital basis sets. (as noted in #144); - [x] 11. drop DUAL and pick up perhaps others in http://psicode.org/psi4manual/master/basissets_byfamily.html; - [x] 12. thoroughly update basisset.rst, especially examples; - [x] 13. reexamine the PSIPATH basis load ordering and make sure that there's a way to install new basissets in the conda package w/o overwriting library files; - [x] 14. the python object name (mybas in above) is the key handle by which a user-def basis can be reapplied to new molecules, but this can be anonymous (if mybas omitted definitely; and maybe if defined conventionally through ""set basis"" if all turned into functions). would be handy to have a name to print in the output file (some sort of aug-cc-pvdz+cc-pvdz+6-31g) as well as the handle by which it's retrievable. That's all I can think of for now. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/43#issuecomment-189541354:3223,load,load,3223,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-189541354,1,['load'],['load']
Performance,v nfc: 1 occ*.....................................PASSED; 	mp2 grad rhf conv nfc: 1 occ*.....................................PASSED; 	mp2 grad rhf df fc: 2 occ.........................................PASSED; 	mp2 grad rhf df fc: 2 occ.........................................PASSED; 	mp2 grad rhf df fc: 2 occ.........................................PASSED; 	mp2 grad rhf df fc: 2 dfmp2*......................................PASSED; 	mp2 grad rhf df fc: 2 dfmp2*......................................PASSED; 	mp2 grad rhf df fc: 2 dfmp2*......................................PASSED; 	mp2 grad rhf df nfc: 2 occ........................................PASSED; 	mp2 grad rhf df nfc: 2 occ........................................PASSED; 	mp2 grad rhf df nfc: 2 occ........................................PASSED; 	mp2 grad rhf df nfc: 2 dfmp2*.....................................PASSED; 	mp2 grad rhf df nfc: 2 dfmp2*.....................................PASSED; 	mp2 grad rhf df nfc: 2 dfmp2*.....................................PASSED; 	mp2 grad uhf conv nfc: 1 occ*.....................................PASSED; 	mp2 grad uhf conv nfc: 1 occ*.....................................PASSED; 	mp2 grad uhf conv nfc: 1 occ*.....................................PASSED; 	mp2 grad uhf conv nfc: 1 occ*.....................................PASSED; 	mp2 grad uhf df fc: 1 occ*........................................PASSED; 	mp2 grad uhf df fc: 1 occ*........................................PASSED; 	mp2 grad uhf df fc: 1 occ*........................................PASSED; 	mp2 grad uhf df nfc: 1 occ*.......................................PASSED; 	mp2 grad uhf df nfc: 1 occ*.......................................PASSED; 	mp2 grad uhf df nfc: 1 occ*.......................................PASSED; Performing finite difference calculations; 13 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13; 	mp2 grad rohf df nfc: findif......................................PASSED; ...; *** findif gradient passes ***; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-276218358:2682,Perform,Performing,2682,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276218358,1,['Perform'],['Performing']
Performance,"val.h:46; #142 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112886e0, locals=locals@entry=0x7fac0e0f83c0, args=args@entry=0x0, argcount=argcount@entry=0, ; --Type <RET> for more, q to quit, c to continue without paging--; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #143 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8882550, globals=globals@entry=0x7fac0e0f83c0, locals=locals@entry=0x7fac0e0f83c0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #144 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e0f83c0, globals=0x7fac0e0f83c0, source=0x7fabd8882550); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #145 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #146 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e0d4c58, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #147 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8938500, callargs=0x7fac0e0d4c40, func=0x7fac0e398e00, trace_info=0x7fff112888b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #148 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95e324c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #149 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95e324c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #150 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #151 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:33737,optimiz,optimized,33737,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"val.h:46; #328 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128bf60, locals=locals@entry=0x7fac0e072700, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #329 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fac0e1b7050, globals=globals@entry=0x7fac0e072700, locals=locals@entry=0x7fac0e072700); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #330 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e072700, globals=0x7fac0e072700, source=0x7fac0e1b7050); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; --Type <RET> for more, q to quit, c to continue without paging--; #331 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #332 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e1a1898, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #333 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0728c0, callargs=0x7fac0e1a1880, func=0x7fac0e398e00, trace_info=0x7fff1128c130, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #334 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16bb50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #335 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16bb50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #336 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #337 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:69850,optimiz,optimized,69850,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); > compare_values(e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene'); > compare_matrices(zerograd, g, 3, 'opt ZERO grad'); > ; > def test_odd_start(mol):; > g0 = gradient('mp2', molecule=mol); > compare_values(odd_nre_start, mol.nuclear_repulsion_energy(), 1, 'start nre'); > compare_values(odd_e_start, get_variable('CURRENT ENERGY'), 3, 'start ene'); > compare_values(odd_rmsg_start, g0.rms(), 4, 'start rms grad'); > compare_matrices(odd_g_start, g0, 3, 'start grad'); > ; > def test_badodd_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(odd_nre_opt, mol.nuclear_repulsion_energy(), 2, 'opt nre nogood'); > compare_values(odd_e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene nogood'); > compare_values(odd_rmsg_opt, g.rms(), 4, 'opt grad nogood'); > ; > test_norm_start(normz); > test_zero_grad(normz); > ; > # And behold, the initial gradient matches Q-Chem, the optimization; > ; > # progresses nicely, the RMS Force column goes to zero, and the gradient; > ; > # at the end is zero.; > ; > # start nre.........................................................PASSED; > ; > # start ene.........................................................PASSED; > ; > # start rms grad....................................................PASSED; > ; > # start grad........................................................PASSED; > ; > #Optimizer: Optimization complete!; > ; > # opt nre...........................................................PASSED; > ; > # opt ene...........................................................PASSED; > ; > # opt ZERO grad.....................................................PASSED; > ; > # --------------------------------------------------------------------------------------------------------------- ~; > ; > # Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; > ; > # -------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-195966638:4316,optimiz,optimization,4316,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638,1,['optimiz'],['optimization']
Performance,variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2779,Perform,Performing,2779,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,"ved on Python 2 when using; Python 3. Returns; -------; array : ndarray; The array from the data on disk. Raises; ------; ValueError; If the data is invalid, or allow_pickle=False and the file contains; an object array. """"""; version = read_magic(fp); _check_version(version); shape, fortran_order, dtype = _read_array_header(fp, version); if len(shape) == 0:; count = 1; else:; count = numpy.multiply.reduce(shape, dtype=numpy.int64). # Now read the actual data.; if dtype.hasobject:; # The array contained Python objects. We need to unpickle the data.; if not allow_pickle:; > raise ValueError(""Object arrays cannot be loaded when ""; ""allow_pickle=False""); E ValueError: Object arrays cannot be loaded when allow_pickle=False. miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/format.py:692: ValueError; _____________________________________________________ test_psi4_cc _____________________________________________________. @pytest.mark.smoke; def test_psi4_cc():; """"""cc1""""""; #! RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psi4.core.clean(); h2o = psi4.geometry(""""""; O; H 1 0.97; H 1 0.97 2 103.0; """"""). psi4.set_options({""basis"": '6-31G**'}). > psi4.optimize('ccsd'). miniconda3/envs/psi/lib/python3.6/site-packages/psi4/tests/test_psi4.py:39:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/driver.py:1052: in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/driver.py:691: in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:784: in select_ccsd_gradient; return func(name, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2314: in run_ccenergy_gradient; ccwfn = run_c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611:3554,optimiz,optimization,3554,https://psicode.org,https://github.com/psi4/psi4/issues/1611,1,['optimiz'],['optimization']
Performance,"ver responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/doctools.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/underscore.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of 404 (Not Found); index.html:368 Uncaught ReferenceError: $ is not defined; http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); Is anyone else seeing this problem? Possibly related?. —AJ. On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (notifications@github.com) wrote:. I'm not observing any of this behavior, so just to clarify: does anyone; actually get this ""redirection"" when you enter ""psicode.org"" on your URL; bar? Or do you just get this when you search for PSI4 on; G",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210015028:1808,load,load,1808,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028,1,['load'],['load']
Performance,"wdict=0x7fabd88870c0, callargs=0x7fabd8a583d0, func=0x7fac0e3989a0, trace_info=0x7fff11287e40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #116 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95de00f0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #117 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95de00f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #118 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #119 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #120 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #121 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #122 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287ff0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #123 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95ddd860, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #124 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95ddd860, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #125 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:28610,optimiz,optimized,28610,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"wdict=0x7fabd8902480, callargs=0x7fac0e0e6fc0, func=0x7fac0e398e00, trace_info=0x7fff1128acb0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #268 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8fa8550, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #269 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8fa8550, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #270 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #271 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #272 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #273 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #274 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ae60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #275 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c483c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #276 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c483c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; --Type <RET> for more, q to quit, c to continue without paging--; #277 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<opti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:58128,optimiz,optimized,58128,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"wdict=0x7fabd89038c0, callargs=0x7fabd8e6c550, func=0x7fac0e3989a0, trace_info=0x7fff1128a240, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #236 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b81240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #237 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b81240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #238 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #239 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #240 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #241 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #242 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a3f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #243 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2ca240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #244 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2ca240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #245 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:51868,optimiz,optimized,51868,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"wdict=0x7fabd8938500, callargs=0x7fac0e0d4c40, func=0x7fac0e398e00, trace_info=0x7fff112888b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #148 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95e324c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #149 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95e324c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #150 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #151 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #152 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #153 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #154 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288a60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #155 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c4a880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #156 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c4a880, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #157 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:34870,optimiz,optimized,34870,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"wdict=0x7fac0e0728c0, callargs=0x7fac0e1a1880, func=0x7fac0e398e00, trace_info=0x7fff1128c130, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #334 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16bb50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #335 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16bb50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #336 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #337 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #338 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #339 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #340 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c2e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #341 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3c5000, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #342 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3c5000, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #343 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:70983,optimiz,optimized,70983,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"wdict=0x7fac0e0ae880, callargs=0x7fac0e0f68c0, func=0x7fac0e3989a0, trace_info=0x7fff1128b870, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #310 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e32fc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #311 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e32fc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #312 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #313 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #314 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #315 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #316 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ba20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #317 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c6db10, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #318 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c6db10, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #319 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3634a0, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:66192,optimiz,optimized,66192,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"well, COSX was developed for ORCA :-); Very high accuracy needs rather large grids in my experience, but that is fine. Not needed for most cases. Turbomole showed the implementation can be tuned as well. I like the method a lot, but I don't think I will have time to implement it. Maybe the existing pseudo-spectral code makes an implementation easier, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1669#issuecomment-503735519:189,tune,tuned,189,https://psicode.org,https://github.com/psi4/psi4/issues/1669#issuecomment-503735519,1,['tune'],['tuned']
Performance,"wfn': True, 'molecule': <psi4.core.Molecule at remote 0x7faa8737c400>, 'opt_iter': 1}, callargs=('hf',), ; func=<function at remote 0x7faa87366e50>, tstate=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:5010; #38 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:3559; #39 0x00007faabd644d54 in PyEval_EvalFrameEx (throwflag=0, ; f=Frame 0x5589d8cda850, for file /home/work/psi4/install.susi/lib/psi4/driver/driver.py, line 1824, in optimize (name='hf', kwargs={'opt_iter': 1}, engine='optking', lowername='hf', custom_gradient=False, return_wfn=False, return_history=False, full_hess_every=-1, steps_since_last_hessian=0, hessian_with_method='hf', optstash=<OptionsState(data={('INTRAFRAG_STEP_LIMIT', 'OPTKING'): <OptionState(option='INTRAFRAG_STEP_LIMIT', module='OPTKING', value_global=<float at remote 0x7faa8746f6d0>, haschanged_global=False, value_local=<float at remote 0x7faa8746fe10>, haschanged_local=False, value_used=<float at remote 0x7faa8746fad0>, haschanged_used=False) at remote 0x7faaaffd1cd0>, ('HESSIAN_WRITE', 'FINDIF'): <OptionState(option='HESSIAN_WRITE', module='FINDIF', value_global=0, haschanged_global=False, value_local=0, haschanged_local=False, value_used=0, haschanged_used=False) at remote 0x7faaaffd1d60>, ('CART_HESS_READ', 'OPTKING'): <OptionState(option='CART_HESS_READ', module='OPTKING', value_global=0, haschanged_g...(truncated)) at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:741; #40 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=0x0, kwargs=0x5589d8ccc008, ; kwcount=<optimized out>, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='optimize', qualname='optimize') at /usr/src/debug/python3-3.8.5-5.fc32.x86_64/Python/ceval.c:4298; #41 0x00007faabd653e23 in _PyFunction_Vectorcall (func=<optimized out>, sta",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:11979,optimiz,optimize,11979,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['optimiz'],['optimize']
Performance,"x-gnu-g++; I_MPI_ROOT=/home/termo/intel/compilers_and_libraries_2018.2.199/linux/mpi; _=/usr/bin/printenv; ```. cat /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; ```; # psi4DepsIntelCache.cmake; # ------------------------; #; # This module sets some likely variable values to initialize the CMake; # cache for dependencies to build your Psi4 source.; # Note that this uses user-provided (non-conda) tools.; #; # See ``psi4-path-advisor`` (or cmake command below) for use.; #; # >>> /home/termo/miniconda3/envs/p4dev35/bin/cmake \; # -H. \; # -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake \; # -Bobjdir; #. set(CMAKE_C_COMPILER ""icc"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""icpc"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER ""ifort"" CACHE STRING """"). set(CMAKE_C_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_Fortran_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"). #set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); ```; --> same error at same place as earlier... icpc -gnu-prefix=x86_64-conda_cos6-linux-gnu- hello.cc -o hello && ./hello; ```; In file included from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/x86_64-conda_cos6-linux-gnu/bits/os_defines.h(39),; from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/x86_64-conda_cos6-linux-gnu/bits/c++config.h(533),; from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/iostream(38),; from hello.cc(1):; /usr/include/features.h(367): catastrophic error: cannot open source file ""sys/cdefs.h""; # include <sys/cdefs.h>; ^. compilation ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448:10653,CACHE,CACHE,10653,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448,3,['CACHE'],['CACHE']
Performance,"x-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_XHOST. -- Build files have been written to: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/libint2_external-build; [ 82%] Performing build step for 'libint2_external'; Scanning dependencies of target int-obj; [ 0%] Building CXX object CMakeFiles/int-obj.dir/Unity/unity_2001_cxx.cxx.o; ...; ```. Full outputs of cmake and make are attached. There is furthermore an issue with the adcc plugin. This plugin cannot be built anymore with -DENABLE_adcc=ON as on one hand, PSI4 requires a C++-17 compiler (and this standard seems to be enforced), on the other hand, there is code in the adcc plugin which violates the C++-17 standard (some `throw()` with variable error message) which leads to compilation errors. Best; Stefan. [make.log](https://github.com/psi4/psi4/files/8651531/make.log); [cmake.log](https://github.com/psi4/psi4/files/8651538/cmake.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2572:2175,Perform,Performing,2175,https://psicode.org,https://github.com/psi4/psi4/issues/2572,1,['Perform'],['Performing']
Performance,"x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #300 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128b4a0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #301 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128b530) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #302 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #303 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fac0e0fe470, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #304 PyImport_ImportModuleLevelObject (name=0x7fac0e0fe470, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #305 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #306 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #307 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fac0e0f68c0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #308 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fac0e0f68c0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #309 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0ae880, callargs=0x7fac0e0f68c0, func=0x7fac0e3989a0, trace_info=0x7fff1128b870, tstate=<optimiz",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:64277,optimiz,optimized,64277,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"y.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resource: the server responded with a status of 404 (Not Found); > index.html:368 Uncaught ReferenceError: $ is not defined; > http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > Is anyone else seeing this problem? Possibly related?; > ; > —AJ; > ; > On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (; > notifications@github.com) wrote:; > ; > I'm not observing any of this behavior, so just to clarify: does anyone; > actually get this ""redirection"" when you enter ""psicode.org"" on your URL; > bar? Or do you just get this when you search for PSI4 on; > Google/Yahoo/Bing? NB: When I put ""PSI4"" in those search engines, I get; > only our correct site for the first page of hits (except for the Wikipedia; > page on ""Psi4 Aurigae""). And yes, we have control of the domain via; > godaddy.com.; > ; > -TDC; > ; > ## ; > ; > Prof. T. Daniel Crawford; > crawd",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210017774:2662,load,load,2662,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774,1,['load'],['load']
Performance,"y=0, kwdefs=0x0, closure=0x0) ; > > at Python/ceval.c:3433 ; > > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633 ; > > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084 ; > > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0) ; > > at Python/ceval.c:4378 ; > > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720 ; > > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433 ; > > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161 ; > > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084 ; > > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433 ; > > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0) ; > > at Python/ceval.c:771 ; > > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:6512,optimiz,optimized,6512,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,3,['optimiz'],['optimized']
Performance,"y=0x560259cb7470, filename=filename@entry=0x7f21abe2c090, ; start=start@entry=257, globals=globals@entry=0x7f21abff9900, locals=locals@entry=0x7f21abff9900, ; closeit=closeit@entry=1, flags=0x7ffc67b36bd0); at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:1643; #37 0x000056022aa6420e in _PyRun_SimpleFileObject (fp=0x560259cb7470, filename=0x7f21abe2c090, closeit=1, ; flags=0x7ffc67b36bd0) at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:433; #38 0x000056022aa63ee4 in _PyRun_AnyFileObject (fp=0x560259cb7470, filename=filename@entry=0x7f21abe2c090, ; closeit=closeit@entry=1, flags=flags@entry=0x7ffc67b36bd0); at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:78; #39 0x000056022aa5cf42 in pymain_run_file_obj (skip_source_first_line=0, filename=0x7f21abe2c090, ; program_name=0x7f21abe2c270) at /usr/local/src/conda/python-3.12.5/Modules/main.c:360; --Type <RET> for more, q to quit, c to continue without paging--; #40 pymain_run_file (config=0x56022ada5c38 <_PyRuntime+77720>); at /usr/local/src/conda/python-3.12.5/Modules/main.c:379; #41 pymain_run_python (exitcode=0x7ffc67b36ba4) at /usr/local/src/conda/python-3.12.5/Modules/main.c:633; #42 Py_RunMain () at /usr/local/src/conda/python-3.12.5/Modules/main.c:713; #43 0x000056022aa147e7 in Py_BytesMain (argc=<optimized out>, argv=<optimized out>); at /usr/local/src/conda/python-3.12.5/Modules/main.c:767; #44 0x00007f21b9bd3088 in __libc_start_call_main (main=main@entry=0x56022aa14720 <main>, argc=argc@entry=6, ; argv=argv@entry=0x7ffc67b36e38) at ../sysdeps/nptl/libc_start_call_main.h:58; #45 0x00007f21b9bd314b in __libc_start_main_impl (main=0x56022aa14720 <main>, argc=6, argv=0x7ffc67b36e38, ; init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7ffc67b36e28); at ../csu/libc-start.c:360; #46 0x000056022aa14681 in _start (); (gdb) ; ```; which corresponds to; https://github.com/psi4/psi4/blob/3484122eaaec9e185bc33581c6cdef4669f21534/psi4/src/psi4/libmints/eribase.cc#L241",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969:10178,optimiz,optimized,10178,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969,5,['optimiz'],['optimized']
Performance,"y_analysis.items():; # print(v); ​; # # B. `set hessian_write on` above wrote all the vib- & thermo-related info from last analysis.; # # now, print all the vib- & thermo-related info from that file; # with open(core.get_writer_file_prefix(h2odim.name()) + "".vibrec"") as handle:; # import json; # jsondata = json.load(handle); # jsondata = {k: (v if k in ['molecule', 'hessian'] else json.loads(v)) for k, v in jsondata.items()}; ​; # for k, v in jsondata.items():; # print(k, v); ​; ​; # In[ ]:; ​; ​; import json; with open(""freq_demo.h2odim.6436.vibrec"") as fp:; vibs = json.load(fp); ​; ​; # In[ ]:; ​; ​; # See all the vibrational analysis contents; vibs; ​; ​; # In[ ]:; ​; ​; vibs; vibs[""molecule""][""elez""]; nat = len(vibs[""molecule""][""elez""]); ndof = nat * 3; vibs[""molecule""][""geom""]; ​; ​; # In[ ]:; ​; ​; # load Cartesian normal modes matrix into numpy and reshape it; import numpy as np; import qcelemental as qcel; from qcelemental import Datum; datum_x = json.loads(vibs[""x""])[""data""]; len(datum_x); datum_x = np.array(datum_x).reshape((ndof, ndof)).T.round(2); datum_x; ​; ​; # In[ ]:; ​; ​; # form ugly XYZ file strings for each mode where; # * first col is atomic symbol,; # * cols 2-4 are geometry in Ang,; # * and 5-7 are displacement; # * note that XYZ file strings are in list `xyzs` that is 1-indexed; geom = np.array(vibs[""molecule""][""geom""]).reshape((-1, 3)); print(geom); geom_ang = geom * 0.529; ​; xyzs = [None]; for mod in range(ndof):; nmode = datum_x[mod].reshape((-1, 3)); print(nmode); smode = [str(nat), f""vib mode {mod+1}""]; for iat, (atg, atd) in enumerate(zip(geom_ang, nmode)):; atln = [*atg, *atd]; atln = "" "".join([str(at) if abs(at)>1.e-8 else ""0.0"" for at in atln]); atln = vibs[""molecule""][""elem""][iat] + "" "" + atln; smode.append(atln); smode = (""\n"".join(smode)).lstrip(); print(smode); xyzs.append(smode); ​; ​; # In[ ]:; ​; ​; # view mode number 9 (xyzs[9]); xyzview = py3Dmol.view(width=400,height=400); xyzview.addModel(xyzs[9],'xyz',{'vibrate': {'frames",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131:2319,load,loads,2319,https://psicode.org,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131,1,['load'],['loads']
Performance,"yes I want to optimize this molecule, but even:; ```; set scf_type df; set BASIS def2-SV(P); energy('pbe'); ```; fail to converge.; with ""set basis_guess True"" it will converge energy (but not in optimization after 2-3 iterations); optimize('HF') converges fine",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-432321135:14,optimiz,optimize,14,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-432321135,3,['optimiz'],"['optimization', 'optimize']"
Performance,"ython; import qcengine as qcng; import qcelemental as qcel; import geometric; import pkg_resources; import logging.config; import sys. mol_uc2 = qcel.models.Molecule.from_data(; """"""; O 0 0 0; H 0 0 1; H 0 1 0; """"""; ). input_data = {; ""keywords"": {; ""convergence_set"": ""GAU_LOOSE"",; ""coordsys"": ""tric"",; ""maxiter"": 25,; ""enforce"": 0.1,; ""constraints"": {; ""set"": [; {""type"": ""distance"", ""indices"": [0, 1], ""value"": 1},; ]; },; # ""program"": ""psi4"",; ""program"": ""mopac"",; },; ""input_specification"": {; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6-d3""},; # ""model"": {""method"": ""b3lyp-d3"", ""basis"": ""sto-3g""},; },; ""initial_molecule"": mol_uc2.dict(),; }. # Set a temporary logger to capture output; log_stream = geometric.nifty.RawStreamHandler(stream=sys.stdout); #log_stream = geometric.nifty.RawStreamHandler(stream=StringIO()); logger = geometric.nifty.logger; logger.addHandler(log_stream). # Parse JSON; input_opts = geometric.run_json.parse_input_json_dict(input_data); M, engine = geometric.optimize.get_molecule_engine(**input_opts). # Handle constraints; constraints_dict = input_opts.get('constraints', {}); constraints_string = geometric.run_json.make_constraints_string(constraints_dict); Cons, CVals = None, None; if constraints_string:; if 'scan' in constraints_dict:; raise ValueError(""No scan!""); Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:1240,optimiz,optimize,1240,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792,1,['optimiz'],['optimize']
Performance,"ythonrun.c:1722; --Type <RET> for more, q to quit, c to continue without paging--; #25 0x000056022aa4bf4b in run_mod (mod=mod@entry=0x56025a306440, ; filename=filename@entry=0x56022ad98b00 <_PyRuntime+24160>, globals=globals@entry=0x7f21abff9900, ; locals=locals@entry=0x7f21abff9900, flags=flags@entry=0x7ffc67b366b8, arena=arena@entry=0x7f215015b370); at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:1743; #26 0x000056022aa3ccb2 in PyRun_StringFlags (; str=str@entry=0x56025a2d4098 ""\nimport psi4\nfrom psi4 import *\nfrom psi4.core import *\nfrom psi4.driver.diatomic import anharmonicity\nfrom psi4.driver.gaussian_n import *\nfrom psi4.driver.frac import ip_fitting, frac_traverse\nfrom ""..., start=start@entry=257, globals=globals@entry=0x7f21abff9900, ; locals=locals@entry=0x7f21abff9900, flags=flags@entry=0x7ffc67b366b8); at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:1618; #27 0x000056022aa47f97 in builtin_exec_impl (module=<optimized out>, closure=<optimized out>, ; locals=0x7f21abff9900, globals=0x7f21abff9900, source=0x56025a2d4070); at /usr/local/src/conda/python-3.12.5/Python/bltinmodule.c:1121; #28 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>, ; kwnames=<optimized out>) at /usr/local/src/conda/python-3.12.5/Python/clinic/bltinmodule.c.h:586; #29 0x000056022a986246 in cfunction_vectorcall_FASTCALL_KEYWORDS (func=<optimized out>, args=0x7f21b9ea9078, ; nargsf=<optimized out>, kwnames=0x0) at /usr/local/src/conda/python-3.12.5/Objects/methodobject.c:438; #30 0x000056022a985fcf in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=9223372036854775809, ; args=0x7f21b9ea9078, callable=0x7f21abf9c770, tstate=0x56022ae03058 <_PyRuntime+459704>); at /usr/local/src/conda/python-3.12.5/Include/internal/pycore_call.h:92; #31 PyObject_Vectorcall (callable=0x7f21abf9c770, args=0x7f21b9ea9078, nargsf=9223372036854775809, ; kwnames=0x0) at /usr/local/src/conda/python-3.12.5/Objects/call.c:325; --Type <RET> for more, q to qui",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969:6813,optimiz,optimized,6813,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969,2,['optimiz'],['optimized']
Performance,"zed out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #98 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #99 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #100 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #101 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287940, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #102 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32020, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #103 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b32020, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #104 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #105 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #106 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11287a70, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #107 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:25197,optimiz,optimized,25197,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"ı think it should be ""Added density-fitted and Cholesky decomposed orbital-optimized MP2"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367#issuecomment-221835606:75,optimiz,optimized,75,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-221835606,1,['optimiz'],['optimized']
Safety,"	 Coordinate Previous Force Change New ; 	 ---------- -------- ------ ------ ------; 	 1 R(1,2) = 2.124830 0.072797 0.020582 2.145412; 	 2 R(1,3) = 2.128962 0.068599 0.020146 2.149109; 	 3 R(1,4) = 2.024461 0.069553 17.524433 19.548895; 	 4 R(1,5) = 2.028397 0.066233 17.556204 19.584601; 	 5 R(1,6) = 2.024305 0.070720 17.517231 19.541535; 	 6 L(2,1,3) = 179.431194 0.000053 -1.744105 177.687089; 	 7 l(2,1,3) = 180.000000 -0.000770 0.000000 180.000000; 	 8 B(2,1,4) = 90.533252 -0.000595 -1.113535 89.419717; 	 9 B(2,1,5) = 89.845687 -0.000107 -1.005547 88.840140; 	 10 B(2,1,6) = 89.819597 0.000658 1.944389 91.763985; 	 11 B(3,1,4) = 89.828837 -0.000257 2.088415 91.917251; 	 12 B(3,1,5) = 89.592600 -0.000007 -0.737452 88.855147; 	 13 B(3,1,6) = 90.389033 0.000309 -1.148076 89.240958; 	 14 B(4,1,5) = 120.478052 -0.000026 0.003564 120.481615; 	 15 B(4,1,6) = 118.946205 0.000056 0.000429 118.946634; 	 16 B(5,1,6) = 120.575361 -0.000030 -0.003611 120.571750; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F4BEF0B510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F4C029A7FB0 Unknown Unknown Unknown; libc-2.27.so 00007F4C0260DEAB gsignal Unknown Unknown; libc-2.27.so 00007F4C025F85B9 abort Unknown Unknown; core.cpython-36m- 00007F4BF2B2E25A Unknown Unknown Unknown; core.cpython-36m- 00007F4BF15542FD Unknown Unknown Unknown; core.cpython-36m- 00007F4BF1570541 Unknown Unknown Unknown; core.cpython-36m- 00007F4BF0FFE806 Unknown Unknown Unknown; python3.6 0000556FBA8799E4 _PyCFunction_Fast Unknown Unknown; python3.6 0000556FBA906DFC Unknown Unknown Unknown; python3.6 0000556FBA92B94A _PyEval_EvalFrame Unknown Unknown; python3.6 0000556FBA900206 Unknown Unknown Unknown; python3.6 0000556FBA9011CF Unknown Unknown Unknown; python3.6 0000556FBA906ED5 Unknown Unknown Unknown; python3.6 0000556FBA92B94A _PyEval_EvalFrame Unknown Unknown; python3.6 0000556FBA901CB9 PyEval_EvalCodeEx Unknown Unknown; python3.6 0000556FBA902A4C PyEval_Eval",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265:3689,Abort,Abort,3689,https://psicode.org,https://github.com/psi4/psi4/issues/1265,1,['Abort'],['Abort']
Safety, -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=gnu++98 -mkl=parallel -openmp -O3 -no-prec-div -DNDEBUG -xHost; -- C compiler flags : -restrict -DRESTRICT=**restrict** -std=c99 -fPIC -mkl=parallel -openmp -O3 -ip -DNDEBUG -xHost; -- Fortran compiler flags: -w -fpp -assume byterecl -DVAR_IFORT -fPIC -nosave -mkl=parallel -openmp -O3 -ip -xHost; -- Libraries : -mkl=parallel; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAVE_MKL_BLAS;HAVE_MKL_LAPACK;HAVE_MPI;HAVE_DKH; -- The CXX compiler identification is Intel 13.1.0.20130121; -- The C compiler identification is Intel 13.1.0.20130121; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicc; -- Check for working C compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- The Fortran compiler identification is Intel 13.1.0.20130121; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90 -- yes; -- Fortran ENABLED; -- Buggy compiler support for C++11. Using older standard.; -- Checking for restrict keyword; -- keyword found : **restrict**; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:5419,Detect,Detecting,5419,https://psicode.org,https://github.com/psi4/psi4/issues/201,2,['Detect'],['Detecting']
Safety," 840] (https://doi.org/10.1016/S0009-2614(99)00206-7). . So, I looked at this 90 degrees twisted C2H4 example, expecting the lower-energy symmetry-broken solution to give an unphysical dipole moment. What I found surprised me. The problem here is that the ""symmetric solution"" that we've been discussing is actually a symmetry-broken solution. At 90 degrees, the true symmetry of the molecule is D2d. Since this is a non-Abelian group, Psi4 (and most codes) can't run it as D2d, so it gets run in a subgroup. Here, there are 2 choices for subgroups, C2v and D2. Psi4 picks C2v, very unfortunately, and in that subgroup, it finds a wavefunction that is very symmetry broken (compared to the full symmetry D2d), and it gets a really large, totally unphysical dipole moment of 3.2 debye. . I haven't yet managed to convince Psi4 that D2 is an acceptable subgroup at the 90 degrees geometry, but if I set the torsion angle to just off of 90 degrees (say, 89.9 deg), the code correctly detects D2 symmetry, and gets a much lower energy solution of -77.87817, which is the same one Daniel and Bert are finding for their computations that turn symmetry off (difference is because of my slightly perturbed geometry). And the dipole moment is pleasantly 0.000 debye, like it's supposed to be. . So, you guys are actually finding a symmetric solution when you use C1 (which is what's supposed to happen), and it's the correct-symmetry solution, unlike the C2v solution that Psi4 is falling into at this geometry. I take some small consolation in the fact that Q-Chem also finds the same C2v solution at 90 degrees, in my quick tests (with or without symmetry turned on). I don't know of a general strategy to teach Psi4 that D2 is a better choice in this case than C2v, because both are legitimate subgroups. And I don't think the idea of running everything in C1 is necessarily a good idea either, since then one is opened up to the possibility of getting unphysical symmetry breaking solutions like in the cas",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349737355:1888,detect,detects,1888,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349737355,1,['detect'],['detects']
Safety," = 2.028397 0.066233 17.556204 19.584601; 	 5 R(1,6) = 2.024305 0.070720 17.517231 19.541535; 	 6 L(2,1,3) = 179.431194 0.000053 -1.744105 177.687089; 	 7 l(2,1,3) = 180.000000 -0.000770 0.000000 180.000000; 	 8 B(2,1,4) = 90.533252 -0.000595 -1.113535 89.419717; 	 9 B(2,1,5) = 89.845687 -0.000107 -1.005547 88.840140; 	 10 B(2,1,6) = 89.819597 0.000658 1.944389 91.763985; 	 11 B(3,1,4) = 89.828837 -0.000257 2.088415 91.917251; 	 12 B(3,1,5) = 89.592600 -0.000007 -0.737452 88.855147; 	 13 B(3,1,6) = 90.389033 0.000309 -1.148076 89.240958; 	 14 B(4,1,5) = 120.478052 -0.000026 0.003564 120.481615; 	 15 B(4,1,6) = 118.946205 0.000056 0.000429 118.946634; 	 16 B(5,1,6) = 120.575361 -0.000030 -0.003611 120.571750; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F4BEF0B510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F4C029A7FB0 Unknown Unknown Unknown; libc-2.27.so 00007F4C0260DEAB gsignal Unknown Unknown; libc-2.27.so 00007F4C025F85B9 abort Unknown Unknown; core.cpython-36m- 00007F4BF2B2E25A Unknown Unknown Unknown; core.cpython-36m- 00007F4BF15542FD Unknown Unknown Unknown; core.cpython-36m- 00007F4BF1570541 Unknown Unknown Unknown; core.cpython-36m- 00007F4BF0FFE806 Unknown Unknown Unknown; python3.6 0000556FBA8799E4 _PyCFunction_Fast Unknown Unknown; python3.6 0000556FBA906DFC Unknown Unknown Unknown; python3.6 0000556FBA92B94A _PyEval_EvalFrame Unknown Unknown; python3.6 0000556FBA900206 Unknown Unknown Unknown; python3.6 0000556FBA9011CF Unknown Unknown Unknown; python3.6 0000556FBA906ED5 Unknown Unknown Unknown; python3.6 0000556FBA92B94A _PyEval_EvalFrame Unknown Unknown; python3.6 0000556FBA901CB9 PyEval_EvalCodeEx Unknown Unknown; python3.6 0000556FBA902A4C PyEval_EvalCode Unknown Unknown; python3.6 0000556FBA97EC44 Unknown Unknown Unknown; python3.6 0000556FBA97ECDD PyRun_StringFlags Unknown Unknown; python3.6 0000556FBA929312 Unknown Unknown Unknown; python3.6 0000556FBA879921 _PyCFunction_Fast Unknown Unknow",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265:3947,abort,abort,3947,https://psicode.org,https://github.com/psi4/psi4/issues/1265,1,['abort'],['abort']
Safety," = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. =============================================== short test summary info ================================================; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:633: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:21012,detect,detecting,21012,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,4,['detect'],['detecting']
Safety," Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 0.00000000000000 0.01448679231786; 2 0.00000000000000 0.00000000000000 0.00650780527423; 3 0.00000000000000 0.00000000000000 -0.01467048755060; 4 -0.00257410227128 0.00000000000000 -0.00298989706945; 5 0.00257410227128 0.00000000000000 -0.00298989706945; 6 -0.00015309842746 -0.00478900518843 -0.00008607897565; 7 -0.00015309842746 0.00478900518843 -0.00008607897565; 8 0.00015309842746 0.00478900518843 -0.00008607897565; 9 0.00015309842746 -0.00478900518843 -0.00008607897565; ```. and thse for wB97X-D:; ```; ## Total Gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 0.00000000000000 -0.02530663408790; 2 0.00000000000000 -0.00000000000000 0.06073552407916; 3 0.00000000000000 -0.00000000000000 -0.01910268412068; 4 0.00053727899697 0.00000000000000 0.00185002606365; 5 -0.00053727899697 -0.00000000000000 0.00185002606365; 6 -0.00554076664310 -0.01384288220048 -0.00500656449972; 7 -0.00554076664310 0.01384288220048 -0.00500656449972; 8 0.00554076664310 0.01384288220048 -0.00500656449972; 9 0.00554076664310 -0.01384288220048 -0.00500656449972. ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 0.00000000000000 -0.02530648968490; 2 0.00000000000000 0.00000000000000 0.06073503270434; 3 0.00000000000000 0.00000000000000 -0.01910251844802; 4 0.00053728999275 0.00000000000000 0.00185009324839; 5 -0.00053728999275 0.00000000000000 0.00185009324839; 6 -0.00554074931312 -0.01384287705163 -0.00500655276705; 7 -0.00554074931312 0.01384287705163 -0.00500655276705; 8 0.00554074931312 0.01384287705163 -0.00500655276705; 9 0.00554074931312 -0.01384287705163 -0.00500655276705; ```. I'd actually expect slightly better agreement out of a 5 point finite difference stencil, but I'm willing to say that the gradient bug was fixed and we just never removed the safety check. I know I'm asking you to go way back here, @robparrish , but is this consistent with your memory of this code development?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-351148891:3848,safe,safety,3848,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351148891,1,['safe'],['safety']
Safety, PASSED [ 95%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [100%]; ============================================================== short test summary info ===============================================================; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:170: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:329: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:628: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:798: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:909: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:925: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Ps,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:3668,detect,detecting,3668,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['detect'],['detecting']
Safety, SKIP [1] lib\psi4\tests\test_addons.py:100: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8040544Z SKIP [1] lib\psi4\tests\test_addons.py:125: Psi4 not compiled with CheMPS2. Rebuild with -DENABLE_CheMPS2; 2018-12-05T15:55:39.8041756Z SKIP [1] lib\psi4\tests\test_addons.py:173: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8042653Z SKIP [1] lib\psi4\tests\test_addons.py:333: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; 2018-12-05T15:55:39.8043475Z SKIP [1] lib\psi4\tests\test_addons.py:392: Psi4 not compiled with PCMSolver. Rebuild with -DENABLE_PCMSolver; 2018-12-05T15:55:39.8044251Z SKIP [1] lib\psi4\tests\test_addons.py:634: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; 2018-12-05T15:55:39.8045164Z SKIP [1] lib\psi4\tests\test_addons.py:643: Psi4 not compiled with simint. Rebuild with -DENABLE_simint; 2018-12-05T15:55:39.8046429Z SKIP [1] lib\psi4\tests\test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8046725Z SKIP [1] lib\psi4\tests\test_addons.py:720: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; 2018-12-05T15:55:39.8047954Z SKIP [1] lib\psi4\tests\test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; 2018-12-05T15:55:39.8048914Z SKIP [1] lib\psi4\tests\test_addons.py:810: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8050115Z SKIP [1] lib\psi4\tests\test_addons.py:838: Psi4 not compiled with dkh. Rebuild with -DENABLE_dkh; 2018-12-05T15:55:39.8051342Z SKIP [1] lib\psi4\tests\test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); 2018-12-05T15:55:39.8052689Z SKIP [1] lib\psi4\tests\test_addons.py:940: Psi4 not detecting plugin resp. Build plugin if necessary and add to envv,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647:3814,detect,detecting,3814,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647,1,['detect'],['detecting']
Safety," Test #369: dft-custom-gga ................... Passed 31.04 sec; 389/401 Test #386: python-pubchem ................... Passed 26.22 sec; 390/401 Test #366: dft-custom-dhdf .................. Passed 42.54 sec; 391/401 Test #277: opt-irc-2 ........................ Passed 128.92 sec; 392/401 Test #236: ocepa-freq1 ...................... Passed 211.47 sec; 393/401 Test #368: dft-custom-mgga .................. Passed 56.55 sec; 394/401 Test #102: dcft-grad1 ....................... Passed 432.70 sec; 395/401 Test #383: cookbook-rohf-orb-rot ............ Passed 107.12 sec; 396/401 Test #354: tu6-cp-ne2 ....................... Passed 135.55 sec; 397/401 Test #301: pywrap-checkrun-rohf ............. Passed 191.40 sec; 398/401 Test #302: pywrap-checkrun-uhf .............. Passed 214.75 sec; 399/401 Test #300: pywrap-checkrun-rhf .............. Passed 230.50 sec; 400/401 Test #370: dft-bench-ionization ............. Passed 1997.14 sec; 401/401 Test #371: dft-bench-interaction ............***Timeout 3000.02 sec. 99% tests passed, 5 tests failed out of 401. Label Time Summary:; adc = 52.87 sec*proc (2 tests); autotest = 974.60 sec*proc (25 tests); cart = 5503.53 sec*proc (123 tests); cas = 24.29 sec*proc (1 test); casscf = 80.51 sec*proc (11 tests); cbs = 1351.37 sec*proc (10 tests); cc = 3972.16 sec*proc (64 tests); cdomp2 = 26.61 sec*proc (2 tests); cepa = 116.08 sec*proc (7 tests); ci = 68.29 sec*proc (8 tests); cisd = 82.46 sec*proc (7 tests); cookbook = 107.12 sec*proc (1 test); cubeprop = 17.29 sec*proc (2 tests); dcft = 1551.98 sec*proc (13 tests); df = 720.18 sec*proc (38 tests); dfccd = 2.40 sec*proc (1 test); dfccd-grad = 6.11 sec*proc (1 test); dfccdl = 2.42 sec*proc (1 test); dfccsd = 3.17 sec*proc (1 test); dfccsd-grad = 22.59 sec*proc (1 test); dfccsd-t-grad = 19.43 sec*proc (1 test); dfccsdat = 13.82 sec*proc (1 test); dfccsdl = 3.14 sec*proc (1 test); dfccsdt = 3.87 sec*proc (1 test); dfep2 = 5.30 sec*proc (2 tests); dfmp2 = 89.76 sec*proc (11 tests); dfomp2 = 27",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:37328,Timeout,Timeout,37328,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Timeout'],['Timeout']
Safety," Yes, this seems good from reading the code, but I haven’t tried it in the real world. Sorry I didn’t get around to fixing this myself, but your solution(s) seem much better than whatever hack I would have come up with. ; > ; > Especially like the isocontour that contains XX% of the electron density PDF modification. When will that make it into the master? ; > ; > From: Daniel Smith [mailto:notifications@github.com] ; > Sent: Sunday, November 26, 2017 8:22 AM ; > To: psi4/psi4 <psi4@noreply.github.com> ; > Cc: Bell, Ian (Fed) <ian.bell@nist.gov>; Mention <mention@noreply.github.com> ; > Subject: Re: [psi4/psi4] Cube file units? (#815) ; > ; > ; > Fixed in #864<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fpull%2F864&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=ovNTIVz57LVNsjcGLTnY7x6FdVA6LrnzFfr8rODv8jM%3D&reserved=0>. @ianhbell<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fianhbell&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=BbgIavE%2BOpBG2nShMTB9WmFqu1z1Oy10YPHDlbWHK4Q%3D&reserved=0> please let us know if that works for you. Closing for now. ; > ; > — ; > You are receiving this because you were mentioned. ; > Reply to this email directly, view it on GitHub<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fissues%2F815%23issuecomment-347015726&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=6LFqXLzB8E2v9UgPYsuvVSjQh7PY0s6mhRGYe7bL3hg%3D&reserved=0>, or mute the thread<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FALaZLRBPKhKV-XYnDzyf891po65sdy-Cks5s6YH7gaJpZM4Ppvfg&data=02%7C01%7Cian.bell%40nist.gov%7Cd0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/815#issuecomment-347029051:1196,safe,safelinks,1196,https://psicode.org,https://github.com/psi4/psi4/issues/815#issuecomment-347029051,1,['safe'],['safelinks']
Safety," and LAPACK. Somewhat related to the previous point, Psi4 proper needs to know the mangling for LAPACK and BLAS. All distributions of BLAS have a header `cblas.h` (or `mkl-cblas.h` if you are using MKL), which does this for you. Similarly, all versions of LAPACK provide `lapacke.h` (again MKL makes things difficult and calls the header `mkl-lapacke.h`). Hence we really should be using these headers and not the stuff in `libqt` (or we should rewrite `libqt` in terms of those header files). One of the other gotchas of BLAS/LAPACK is detecting the actual libraries. The names are non-standardized and the CMake find_package for them is archaic. For the moment I am using the scripts the old build used to find BLAS/LAPACK. They are somewhat touchy, and overly verbose for my liking, but better than me having to write my own. ~~To my knowledge they don't worry about the Mac Accelerate framework so this is again an issue.~~ @jturney and @dgasmith have both independently confirmed that enabling accelerate is not necessary, because the BLAS and LAPACK the math detection finds on Mac are actually (static links to?) the libraries behind the accelerate framework.; ## Minor Points Not Worth a Paragraph; - exception.h has been moved into libpsi4util to be with its source file; - process.h has been moved into libparallel to be with its source file; - `src/bin/psi4` is now `src/bin/psi4_main` to avoid name conflicts; - `src/bin/efp` is now `src/bin/efp_interface` to avoid name conflicts; - Most ConfigX files are gone. From what I can tell, these files are what should be in the CMakeLists.txt wrapping project X. That's where they now reside. ; - Some options are now gone; - ENABLE_MPI Psi4 proper contains no MPI now, if external projects want to include it that's fine; - ENABLE_OMP I never understood this one, just make it not required; - ~~ENABLE_ACCELERATE FindLAPACK knows about accelerate, if you want to use it ensure it is in your `CMAKE_PREFIX_PATH` variable~~; - Accomplishes #355",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:10927,detect,detection,10927,https://psicode.org,https://github.com/psi4/psi4/pull/442,3,"['avoid', 'detect']","['avoid', 'detection']"
Safety," cmake -H. -Bobjdir … -Dlibint_DIR=/path/to/libint/share/cmake/libint -Dlibefp_DIR=/path/to/libefp/share/cmake/libefp; ```. Then cmake will detect the previously installed libint/libefp and skip their building. . However, this does not completely work. The initial cmake will indicate `found libint`, then when you go to the build directory and run `make` the `libint_DIR `and `libefp_DIR` argurments are not passed on to cmake for psi4_core and the build errors out with the following message:. ```shell; Performing configure step for 'psi4_core'; loading initial cache file /home/amjames2/newriver/psi4-builds/new-debug/psi4_core-prefix/tmp/psi4_core-cache.cmake; -- The C compiler identification is GNU 5.2.0; -- The CXX compiler identification is GNU 5.2.0; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.conda/envs/py3/lib/libpython3.so; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; CMake Error at CMakeLists.txt:35 (find_package):; Could not find a package configuration file provided by ""libefp"" with any; of the following names:. libefpConfig.cmake; li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/516:1447,Detect,Detecting,1447,https://psicode.org,https://github.com/psi4/psi4/issues/516,4,['Detect'],['Detecting']
Safety, gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:688: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:16289,detect,detecting,16289,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety," lib\psi4\tests\test_addons.py:125: Psi4 not compiled with CheMPS2. Rebuild with -DENABLE_CheMPS2; 2018-12-05T15:55:39.8041756Z SKIP [1] lib\psi4\tests\test_addons.py:173: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8042653Z SKIP [1] lib\psi4\tests\test_addons.py:333: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; 2018-12-05T15:55:39.8043475Z SKIP [1] lib\psi4\tests\test_addons.py:392: Psi4 not compiled with PCMSolver. Rebuild with -DENABLE_PCMSolver; 2018-12-05T15:55:39.8044251Z SKIP [1] lib\psi4\tests\test_addons.py:634: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; 2018-12-05T15:55:39.8045164Z SKIP [1] lib\psi4\tests\test_addons.py:643: Psi4 not compiled with simint. Rebuild with -DENABLE_simint; 2018-12-05T15:55:39.8046429Z SKIP [1] lib\psi4\tests\test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8046725Z SKIP [1] lib\psi4\tests\test_addons.py:720: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; 2018-12-05T15:55:39.8047954Z SKIP [1] lib\psi4\tests\test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; 2018-12-05T15:55:39.8048914Z SKIP [1] lib\psi4\tests\test_addons.py:810: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8050115Z SKIP [1] lib\psi4\tests\test_addons.py:838: Psi4 not compiled with dkh. Rebuild with -DENABLE_dkh; 2018-12-05T15:55:39.8051342Z SKIP [1] lib\psi4\tests\test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); 2018-12-05T15:55:39.8052689Z SKIP [1] lib\psi4\tests\test_addons.py:940: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp); 2018-12-05T15:55:39.8053679Z ; 2018-12-05T15:55:39.8055000Z ============ 7 passed, 15 skipped, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647:3953,detect,detecting,3953,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647,1,['detect'],['detecting']
Safety," modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:702: 3 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py: 707 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py: 477 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py: 24 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py: 651 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 633 warnings; `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json; Using `psi4.json_wrapper.run_json` instead of `psi4.schema_wrapper.run_qcschema` is deprecated, and in 1.5 it will stop working. -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================= short test summary info =========================================================================; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:13: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:162: Not detecting module mrcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\en",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:11506,safe,safe,11506,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['safe'],['safe']
Safety, package if necessary to enable tests.) [ 34%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp_2 SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 36%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary to enable...) [ 38%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enable tests.) [ 40%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cct3 SKIPPED (Not detecting module cct3. Install package if necessary to enable tests.) [ 41%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psixas SKIPPED (Not detecting module psixas. Install package if necessary to enable tests.) [ 43%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_ipi_broker1 SKIPPED (Not detecting module ipi. Install package if necessary to...) [ 47%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to...) [ 49%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enabl...) [ 50%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dftd3 PASSED [ 52%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to e...) [ 54%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_pcmsolver SKIPPED (Not detecting module pcmsolve,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:4509,detect,detecting,4509,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety," provides a more useful error message when the issue described in https://github.com/psi4/psi4/issues/2890 is encountered. In short, the COSX K build method breaks with certain grid configurations - specifically, grid configurations which result in negative grid weights. How to best handle that issue - removing such grid configurations from Psi4 entirely, handling negative grid weights differently within COSX itself - is still under discussion, and this PR is _not_ meant to be a final fix to the aforementioned issue. Rather, this PR is meant to provide a more informative error message in the case that an end user _does_ encounter this error. Currently, when this error is encountered, it shows up as either a DGESV error (if the initial COSX grid has negative weights) or an ADIIS minimization error (if the final COSX grid has negative weights). These error outputs don't help the end user figure out what is wrong at all. So, what this PR does, is add sanity checks to ensure that the COSX grids don't have negative weights, and throw an exception if they do. The sanity check exceptions explain to the user what the error is and how they can fix it (i.e., changing the grid pruning scheme and/or number of spherical points). Again, I want to emphasize that this is _not_ intended to be a full fix to https://github.com/psi4/psi4/issues/2890. Rather, it is an intermediate step that is designed to better help end users avoid the problem if they run into it themselves. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [X] Add sanity checks to COSX to ensure that neither of the COSX grids have negative grid weights. An exception is thrown if either of the grids do. ## Questions; - [x] Probably better discussed on https://github.com/psi4/psi4/issues/2890, but how do we want to officially solve this problem? There has been some discussion on simply removing grid configurations which lead to negative weights, as well as discussions on reformulating the X matrix (the m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2906:985,sanity check,sanity checks,985,https://psicode.org,https://github.com/psi4/psi4/pull/2906,1,['sanity check'],['sanity checks']
Safety," psi4-0.5 with g++ and chemps2. ```; seba@seb-desktop:~/software/psi4-0.5/objects$ CXX=g++ CC=gcc cmake .. -DENABLE_PLUGINS=ON -DENABLE_CHEMPS2=ON; -- The CXX compiler identification is GNU 5.2.1; -- The C compiler identification is GNU 5.2.1; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl; -- Found BLAS: MKL (-Wl,--start-group;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_gf_lp64.so;/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl/lib/intel64/libmkl_gnu_thread.so;/opt/intel/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/264:413,Detect,Detecting,413,https://psicode.org,https://github.com/psi4/psi4/issues/264,8,['Detect'],['Detecting']
Safety," segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also **confirm** that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. Chem. Phys. 121, 3463 (2004).; [5] Frank Jensen, Polarization consistent basis sets. VI. The elements He, Li, Be, B, Ne, Na, Mg, Al, Ar, J. Phys. Chem. A 111, 11198 (2007).; [6] Frank Jensen, Polarization Consistent Basis Sets. VII. The Elements K, Ca, Ga, Ge, As, Se, B; r and Kr, J. Chem. Phys. 136, 094110 (2012).; [7] Frank Jensen, Polarization Consistent Basis Sets. VIII. The Transition Metals Sc-Zn, J. Chem. Phys. 138, 014107 (2013).; [8] Teobald Kupka, Carmay Lim, Polarization-Consistent versus Correlation-Consistent Basis Sets in Predicting Molecular and Spectroscopic Properties, J. Phys. Chem. A. 111m 1927 (2007).; [9] Frank Jensen, Unifying General and Segmented Contracted Basis Sets. Segmented Polarization Consistent Basis Sets., Journal of Chemical Theory and Computation 10, 1074-1085 (2014) DOI: 10.1021/ct401026a.; [10] Frank Jensen, Segmented Contracted Basis Sets Optimized for Nuclear Magnetic Shielding, J. Chem. Theory Comp. 11, 132 (2015).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/457#issuecomment-241120477:2136,Predict,Predicting,2136,https://psicode.org,https://github.com/psi4/psi4/pull/457#issuecomment-241120477,1,['Predict'],['Predicting']
Safety," that compiled all Fortran libraries. Consequentially this does _NOT_ necessarily provide you with the correct mangling for externally compiled Fortran libraries. For Fortran libraries that we may are building, like ERD, DKH, etc. the name mangling should go through the CMake mangling detection mechanisms and the resulting header file included with the library. This allows other projects to link to these libraries without having to know the mangling scheme.; ## BLAS and LAPACK. Somewhat related to the previous point, Psi4 proper needs to know the mangling for LAPACK and BLAS. All distributions of BLAS have a header `cblas.h` (or `mkl-cblas.h` if you are using MKL), which does this for you. Similarly, all versions of LAPACK provide `lapacke.h` (again MKL makes things difficult and calls the header `mkl-lapacke.h`). Hence we really should be using these headers and not the stuff in `libqt` (or we should rewrite `libqt` in terms of those header files). One of the other gotchas of BLAS/LAPACK is detecting the actual libraries. The names are non-standardized and the CMake find_package for them is archaic. For the moment I am using the scripts the old build used to find BLAS/LAPACK. They are somewhat touchy, and overly verbose for my liking, but better than me having to write my own. ~~To my knowledge they don't worry about the Mac Accelerate framework so this is again an issue.~~ @jturney and @dgasmith have both independently confirmed that enabling accelerate is not necessary, because the BLAS and LAPACK the math detection finds on Mac are actually (static links to?) the libraries behind the accelerate framework.; ## Minor Points Not Worth a Paragraph; - exception.h has been moved into libpsi4util to be with its source file; - process.h has been moved into libparallel to be with its source file; - `src/bin/psi4` is now `src/bin/psi4_main` to avoid name conflicts; - `src/bin/efp` is now `src/bin/efp_interface` to avoid name conflicts; - Most ConfigX files are gone. From w",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:10399,detect,detecting,10399,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['detect'],['detecting']
Safety," the radius of convergence of DIIS, unless the problem is fundamentally ill-behaved (which you again can solve efficiently using GDM). If the DIIS error is in the range `1e-3, ..., 1e-2`, i.e. `log error = [-3, -2]`, then the DIIS solution likely has some truth in it, but it should still be guided by the ADIIS/EDIIS solution. Then you weigh the ADIIS/EDIIS and the C2DIIS solutions by linear interpolation from full ADIIS to `1e-2`, then linear interpolation to full C2DIIS at `1e-3`. Orbital rotation methods like GDM are often also quite good at finding a local minimum. Moreover, if you have analytical orbital derivatives, you can implement an analytical, numerically accurate line search very easily. When you use an exact line search, you're less likely to get stuck on local minima compared to DIIS. For instance, the reason why I found that PP theory breaks sigma-pi symmetry in the acenes was that compared to previous work that had ""showed"" it preserves sigma-pi symmetry, the line search implemented in my code actually just went close to the symmetry preserving saddle point solution, and then recovered from it to decrease the energy quite a lot to break the sigma-pi symmetry. There's often enough of numerical noise so that your solution vector picks up some component of the symmetry breaking dimension. In DIIS you can make these problems converge by increasing the DIIS history length, but then you often see that the SCF is actually going up in energy in the later calculation. Increasing the history length from the default (I think mine is 5, 6, or 7 iterations) to something like 15-25 allows the DIIS procedure to find enough linearly independent vectors to enforce that the resulting orbitals are going to belong to an extremal point. However, these points often then turn out to be saddle points, in which you can decrease the energy slightly (or a lot more) by moving some weight from an orbital to another... Then you have the true second-order schemes, like Newton-Raphs",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568:3961,recover,recovered,3961,https://psicode.org,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568,1,['recover'],['recovered']
Safety," type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json; Using `psi4.json_wrapper.run_json` instead of `psi4.schema_wrapper.run_qcschema` is deprecated, and in 1.5 it will stop working. -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================= short test summary info =========================================================================; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:13: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:162: Not detecting module mrcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:186: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:233: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if neces",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:12549,detect,detecting,12549,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,"""api"" tests fail with the timeout error:; ```; ==================================================================================== test session starts =====================================================================================; platform freebsd13 -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0; Using --randomly-seed=3542811706; rootdir: /disk-samsung/freebsd-ports/science/psi4/work/psi4-1.7, configfile: pytest.ini; plugins: cov-2.9.0, randomly-3.12.0, timeout-2.1.0, rerunfailures-10.1, flaky-3.7.0, xdist-2.5.0, env-0.6.2, freezegun-0.4.2, mock-1.10.4, forked-1.4.0, hypothesis-6.56.2; collected 1337 items / 19 errors . =========================================================================================== ERRORS ===========================================================================================; ________________________________________________________________________ ERROR collecting tests/pytests/test_adcc.py _________________________________________________________________________; test_adcc.py:9: in <module>; from addons import using; addons.py:9: in <module>; from qcengine.testing import _programs as _programs_qcng; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:173: in <module>; ""psi4"": is_program_new_enough(""psi4"", ""1.2""),; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:62: in is_program_new_enough; candidate_version = qcng.get_program(program).get_version(); /usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py:90: in get_version; exc[""proc""].wait(timeout=30); /usr/local/lib/python3.9/subprocess.py:1189: in wait; return self._wait(timeout=timeout); /usr/local/lib/python3.9/subprocess.py:1909: in _wait; raise TimeoutExpired(self.args, timeout); E subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds; ```. I think that most tests themselves pass, but there's something wrong with the python test harness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097:26,timeout,timeout,26,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097,8,"['Timeout', 'timeout']","['TimeoutExpired', 'timeout', 'timeout-']"
Safety,"# PsiPEP2: Rationalize Variable Access. Pursuant to #883, common driver migration, the War Against Globals, and [QCSchema](https://github.com/molssi/qcschema), we want clear programmatic access to QC quantities, and we want them on the Wfn/JSONrec, not off `Process.environment.globals`. First step toward this is duplication of `P::e.globals` onto `Wfn`. Unfortunately, the syntax and methods don't align (see table below). Also unfortunately, we have many redundant `get_`s. This PsiPEP proposes the following syntax changes and additions. ### Final Proposal (dynamic). * **W-C** means C-side access to `psi4.core.Wavefunction`; * **W-Py** means Py-side access to `psi4.core.Wavefunction`; * **G-Py** means Py-side access to `psi4.core` globals. | Now `Wavefunction` | Now `psi4.core` | Proposed Both | W-C | W-Py | G-Py | doc |; |-----|----|----|---|---|---|---|; | | has_variable | has_scalar_variable |y|y|y| is float var set ? |; | get_variable | get_variable | scalar_variable |y|y|y| return float var value |; | set_variable | set_variable | set_scalar_variable |y|y|y | set float var value |; | | | del_scalar_variable |y|y|y | unset float var |; | variables | get_variables | scalar_variables |y|y|y| return dict of all float vars |; | |; | | | has_array_variable |y|y|y| is array var set ? |; | get_array | get_array_variable | array_variable |y|y|y| return array var value |; | set_array | set_array_variable | set_array_variable |y|y|y| set array var value |; | | | del_array_variable |y|y|y| unset array var |; | arrays | get_array_variables | array_variables |y|y|y| return dict of all array vars |; | |; | | | has_variable |–|y|y| is any float or array var set ?|; | | | variable |–|y|y| return float or array var value |; | | | set_variable |–|y|y| set float/Matrix/ndarray var value |; | | | del_variable |–|y|y| unset float or array var |; | | | variables |–|y|y| return dict of all float or array vars |; | | clean_variables | clean_variables |–|–|y| unset all float or array vars ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1375:458,redund,redundant,458,https://psicode.org,https://github.com/psi4/psi4/issues/1375,1,['redund'],['redundant']
Safety,"## Description. A series of updates to the Psi4 driver. Very large PR's is not my favorite thing to do on git, but unfortunately driver changes are complex and strongly tied together. Putting this up now as a way to help track everything this fixes.; ## Todos; - [x] General cleanup and reorganization of the driver.; - [x] Reorganized procedures into a single folder.; - [x] Reworking CBS and N-Body wrappers for easier use.; - [x] Above changes broke some of pywrap, need to get these fixed.; - [x] More canonical python raise error printing.; - [x] Reorganizes OEProp to use `D_subset_helper` instead of `Da_subset` to avoid pulling density matrices from multiple sources. Closes #193; - [x] Reworks how OEProp is called for SCF, DFT, DF-MP2, CI, and MCSCF. The full OEProp suite works for these now through the properties driver.; - [x] New test case for the above OEProp (scf_properties, mp2_properties, ci_properties), closes #356.; - [x] Freeze COM/ORIENT for FREEZE COORDINATE option and closes #179 ; ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/365:622,avoid,avoid,622,https://psicode.org,https://github.com/psi4/psi4/pull/365,1,['avoid'],['avoid']
Safety,"## Description. Accumulated fixes from Mac binary build round; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] fix some ambit import and temporarily reroute source location until @jturney around to process cmake changes; - [x] in an effort to standardize internal builds as using static libraries and detected builds as using shared, **boost detection now looks for shared**; - [x] install `psi4.so` to site-packages rather than bin; - [x] fix mollerplesset plugin; - [x] misc. cleanup; - [x] switched Intel to `-qopenmp`; - [x] added a couple include paths so plugin includes so that plugins can be compiled against installed instead of source psi4; - [x] fix imports and iwl checks in plugin templates; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/413:342,detect,detected,342,https://psicode.org,https://github.com/psi4/psi4/pull/413,2,['detect'],"['detected', 'detection']"
Safety,## Description. Allows BCCD with ROHF starting orbitals.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Added BCCD and BCCD_T to the list of ROHF semicanonicalize cases in `src/bin/cc*`.; - [x] Added a BCCD ROHF test case; - [x] Added a BCCD_MAXITER keyword instead of using an arbitrary value; - [x] Removed redundant `proc.py:run_bccdt`; ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/295:352,redund,redundant,352,https://psicode.org,https://github.com/psi4/psi4/pull/295,1,['redund'],['redundant']
Safety,"## Description. Fixed incorrect B matrix for 'interfragment coordinates'. These coordinates are not used by default, but the user can specify them to create very specific coordinates. They may be useful, e.g., in combination with 'freeze_intrafrag' for fixed-body optimizations. When symmetry is turned on, there is a difficulty with the symmetry detection in combination with the way in which the displacements are carried out for these coordinates. A loosening of the symmetry tolerance when computing the symmetrized geometry usually works and has been implemented. In the future, it may be best to carry out the displacements in these coordinates iteratively and numerically as they are for redundant intrafrag coordinates. However, this approach would be more hazardous with no upside in C1, and I don't have time to implement it right now anyway.; - [ ] Feature1; Reference atoms can now be specified by the user with a standard multi-dimensional python list. The test cases illustrate this. Probably, this utility will stimulate more use cases for further development of the code.; ## Questions; - [ ] Question1; ## Status; - [X] Ready to go; All tests, including the 3 new ones pass for me.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/432:347,detect,detection,347,https://psicode.org,https://github.com/psi4/psi4/pull/432,3,"['detect', 'hazard', 'redund']","['detection', 'hazardous', 'redundant']"
Safety,"## Description. SCF Gradients are now symmetrized by swiping some code from Andy's Deriv module and placing it in `scfgrad`. Generally we wouldn't want to duplicate code, but there isn't a great way to avoid this at the moment. Discussion in issue #298 for reasoning behind this simple solution.; ## Todos; - [x] SCF Gradient is now symmetrized.; - [x] Fixed the `opt7` convergence tolerance issue the failing cases now does an additional 6 iterations.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/301:202,avoid,avoid,202,https://psicode.org,https://github.com/psi4/psi4/pull/301,1,['avoid'],['avoid']
Safety,"## Description. The main motivation for these changes is to make the pending #1061 available satisfying the constraints and comments offered by @dgasmith and @amjames.; This mainly amounts to localizing state to a suitable CC wavefunction object and we tried doing that within the scope of #1061, but quickly recognized that some form of rewrite of the CC infrastructure would be more helpful in general. See also #1247 . This PR makes the first step of moving the various `cc*` folders inside a top-level `cc` folder which contains the `ccwave.h` and top-level implementation files. This is thus mostly aesthetics, but avoids drowning the (hopefully!) good stuff to come in a large diff. ~Hold off merging until #1203, #1206, #1251, and #1252 are in. I'll keep rebasing this one accordingly.~. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Moved `cc{energy,hbar,lambda,density,eom,response}` under `cc` folder.; - [x] Moved `ccwave.h` header file to top-level `cc` folder. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1253:620,avoid,avoids,620,https://psicode.org,https://github.com/psi4/psi4/pull/1253,1,['avoid'],['avoids']
Safety,"## Description. The main motivation for these changes is to make the pending #1061 available satisfying the constraints and comments offered by @dgasmith and @amjames.; This mainly amounts to localizing state to a suitable CC wavefunction object and we tried doing that within the scope of #1061, but quickly recognized that some form of rewrite of the CC infrastructure would be more helpful in general. We are preparing a more thoroughly motivated outline of the changes we propose, which will be posted as an issue. In the meantime, this PR makes the first step of moving the various `cc*` folders inside a top-level `cc` folder which contains the `ccwave.h` and top-level implementation files. This is thus mostly aesthetics, but avoids drowning the (hopefully!) good stuff to come in a large diff. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Moved `cc{energy,hbar,lambda,density,eom,response}` under `cc` folder.; - [x] Moved `ccwave.h` header file to top-level `cc` folder.; - [x] Cherry-picked some of the changes by @tomspur; * Changes suggested by valgrind and cppcheck; * Matrix CTOR from `dpdbuf4` @amjames could you check that setting `symmetry_` is done correctly?. Aesthetics; - [x] Run `clang-format` on `ccenergy`. Supersedes #1203, see #1144 ; - [x] Run `clang-format` on `ccdensity`. Supersedes #1202, see #1144 ; - [x] Run `clang-format` on `cclambda`. Supersedes #1206, see #1144 ; - [x] Run `clang-format` on `cctriples`. Supersedes #1209, see #1144 ; - [x] Remove `void` from function argument lists in the `cc*` folders. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1243:734,avoid,avoids,734,https://psicode.org,https://github.com/psi4/psi4/pull/1243,1,['avoid'],['avoids']
Safety,"## Description. There was a race condition in the parallel calculation of ESP over grid in memory. This was fixed in PR #1900.; This made the computation of ESP serial and quite slow (as mentioned in #1614 for example).; This PR brings back the OpenMP parallelization, the race condition is avoided by allowing each thread to hold its own copy of the `ElectrostaticInt` object. Thanks to @JonathonMisiewicz for the initial hint. ## User API & Changelog headlines; - [x] Significant acceleration of the calculation of ESP over grid in memory. ## Dev notes & details; - [x] Created a vector of thread-specific `<ElectrostaticInt>` and `<Matrix>` objects for computing the ESP at a given grid point; - [x] Added `#pragma omp parallel for schedule(dynamic)` to parallelize the outer loop over grid points. ## Questions; - [ ] While working on this part of the code I noticed that `cubeprop` uses a scheme different from the one used by `oeprop` to compute ESP on a grid. I am not sure this is documented. Should it be?; - [ ] Initially my goal was to parallelize the computation of `compute_esp_over_grid` function which reads the grid from `grid.dat` file. The way it is designed now, the grid is read iteratively, so one grid point read->one ESP point computed->one ESP point written to the output `grid_esp.dat` file. This is not parallelizible. However, if one would read grid points in batches - this can be parallelized. What do you think? . ## Checklist; - [x] Tests added for any new features => [mints14](https://github.com/psi4/psi4/tree/master/tests/python/mints14) test already in place; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2891:291,avoid,avoided,291,https://psicode.org,https://github.com/psi4/psi4/pull/2891,1,['avoid'],['avoided']
Safety,"## Description. This PR is a reboot of https://github.com/psi4/psi4/pull/2695. That PR hasn't been kept up-to-date with the many changes to JK since, so I decided to reimplement it from scratch. The motivation and ideas are the same, however, so I will copy-paste the description here:. This PR is the second in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object, with PR https://github.com/psi4/psi4/pull/2547 being the first such PR. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. The primary purposes of this PR are twofold:. First, this PR introduce the shell_significant() framework to the JK class. The shell_significant() framework starts with a shell_significant() virtual function that exists in the base JK class. The shell_significant() function can then be redefined specifically for different JK derived classes as needed. The existence of shell_significant() provides a unified framework for performing screening for any JK method, and it also provides the method by which density screening can be added directly to the relevant JK classes.; Second, this PR uses the shell_significant() framework to reimplement screening for certain JK methods. Most significantly, as implied in the first point, the biggest change in this regard was the removal of shell_significant_density() from TwoBodyAOInt into the domain and its reimplementation into the JK shell_significant() definitions. With this change, density screening is now the domain of individual JK classes rather than the TwoBodyAOInt class, which was one of the primary goals of this overall refactor PR set in the first place. Additionally, another method that was subject to slight changes from the shell_significant() framework was",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3098:558,risk,risk,558,https://psicode.org,https://github.com/psi4/psi4/pull/3098,1,['risk'],['risk']
Safety,"## Description. docs and licenses and castup, oh my; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] few tweaks to the energy/grad docstring tables, #249 ; - [x] improve molecule and fn return docs, #351 & #352 ; - [x] update licenses in plugin template dir, since those are mixed py/c++ and awkward to do by script; - [x] hesitant replacement of cast-up with pyconstruct basis machinery. no differences detected in relevant output files (castup1/2/3, sapt2/4/5, pywrap-all), #285 ; - [x] do `[s]` on seconds in sapt; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/364:445,detect,detected,445,https://psicode.org,https://github.com/psi4/psi4/pull/364,1,['detect'],['detected']
Safety,"## Description; #1532 identified problem with memory leaks. Using cppcheck, I've found a number of possible candidates. My idea is to slowly work through all of them and replace all alloc/dealloc pairs with an RAII solution. Feel free to chime in if you disagree with the and design decisions. I'll do one object at a time so allow easy reverting, so this will eventually need to be squashed. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Fix leaks identified in #1532 by avoiding explicit allocation and deallocation. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1534:524,avoid,avoiding,524,https://psicode.org,https://github.com/psi4/psi4/pull/1534,1,['avoid'],['avoiding']
Safety,"## Description; #2476 and #2594 indicate a major problem in Psi's SCF code: the simplistic formula `nalphapi = doccpi + soccpi` and `nbetapi = doccpi` is incapable of describing references where there are more beta than alpha orbitals of a given irrep. This occurs in MOM (where we instead use ugly hacks) and in UHF (where we crash). Furthermore, storing all of these irrep quantities is redundant. This PR remedies the situation by only storing `nalphapi` and `nbetapi`. `doccpi` and `soccpi` can be computed from these when needed. The Py-side API is unchanged `doccpi(), soccpi()`, while the C-side API changes from `doccpi_, soccpi_` to `doccpi(), soccpi()`. While we are doing some extra work to compute docc and socc every time they're needed, the computational cost is negligible in comparison to Fock diagonalizations, integral transforms, and tensor contractions. . To prevent scope creep, this PR aims solely to change the wavefunction. **This is a major undertaking and should not be done lightly.** A subsequent PR will fix the linked issues (if not fixed by this PR) and add them as test cases once the fix is confirmed. Obligatory @susilehtola ping. ## Todos; - [x] DOCC and SOCC are now computed rather than stored; - [x] MOM simplified; - [x] Lots of docc/socc replaced with alphapi/betapi where more appropriate; - [x] More auto; - [x] More dimension, fewer raw arrays . ## Checklist; - [x] Passes ctest and pytest (all, except addons). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2619:389,redund,redundant,389,https://psicode.org,https://github.com/psi4/psi4/pull/2619,1,['redund'],['redundant']
Safety,## Description; - Update to adcc 0.15.0 and adapt interface (plural forms of keys have been deprecated).; - Add PE-ADC test as adcc now automatically detects PE ground states and includes appropriate corrections. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1914:150,detect,detects,150,https://psicode.org,https://github.com/psi4/psi4/pull/1914,1,['detect'],['detects']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. --> This switches from detecting the config.cmake file from a cppe library to detecting the python module. It's more realistic about what psi4 actually needs. By chance, this detection worked ok with internal builds or with c-f cppe or with psi4 cppe+pycppe. . `adcc-formaldehyde-pe-adc2` still failing with `catching classes that do not inherit from BaseException is not allowed` on `InvalidReference`. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2391:98,detect,detecting,98,https://psicode.org,https://github.com/psi4/psi4/pull/2391,3,['detect'],"['detecting', 'detection']"
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; - [x] Something about how CMake detects NumPy during FindPython is different between NumPy 1.22 and 1.23; only on Windows. No apparent changes in CMake FindPython. No apparent changes in conda NumPy recipe. All header files in the same places in a Windows c-f 1.22 and 1.23 NumPy distribution. Linux builds fine with a c-f NumPy 1.23. I don't know what's the real change, so we'll tell CMake where to look in the Azure recipe and pass the hint on to psi4/CM for the second `find_package(Python ...)`.; - [x] My other theory for solving the Azure problem was that my patched `anaconda-client` was behind the times. That wasn't the problem, but it's updated to v1.10.0 anyways.; - [x] Pinned qcelemental and qcengine in Windows recipe; * There's upcoming changes to those packages such that all of psi4 should be pinned and then advanced with the changes. This does that for the Windows recipe.; * fixes #2614 where Windows conda package had _no_ qcel pinning, so depending on channel order, sometimes took a really old qcel and pydantic. after this, channel order shouldn't matter. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2624:122,detect,detects,122,https://psicode.org,https://github.com/psi4/psi4/pull/2624,1,['detect'],['detects']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] It turns out one can build a psi4 with Fortran extensions (detected, not compiled) w/o a Fortran compiler by letting the CXX compiler handle the linking. This is very useful on Windows where we want a `clang-cl` C/CXX compiler, but the only cohesive Fortran-including stack is the ming (gcc/g++/gfortran) one. So this adds an option `psi4_SKIP_ENABLE_Fortran` to _not_ enable Fortran when the code otherwise would. It doesn't check that the circumstances are suitable (that is, all detected, none to-be-compiled). Works great on Windows (that's how the conda pkg has dkh); haven't tried it on Linux.; - [x] Increasingly, where the <project>Config.cmake files get installed to is configurable, esp. as there's no one place cmake looks for linux/mac/win. So adding that option `psi4_INSTALL_CMAKEDIR`. You won't see a change unless you were customizing `CMAKE_INSTALL_DATADIR`.; - [x] also fix a couple install locations that were obvious for windows install.; - [x] stop testing the extra cli qcf tests for qcf master since those are run on mac, and it hangs. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2946:414,detect,detected,414,https://psicode.org,https://github.com/psi4/psi4/pull/2946,2,['detect'],['detected']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; - [x] Upstream maintained and developed software for Grimme empirical dispersion corrections is now interfaced. The longstanding slight forks maintained by Psi4 folks still work and will be maintained until there's a reason not to. All are still run through QCEngine. Psi4 chooses automatically based on what's detected, so no change to input files needed. Package names and locations are a little different -- see table below. package | provides | pre-PR | post-PR; ---- | ---- | ---- | ----; D3; `psi4::dftd3` | `bin/dftd3` | preferred | works; `conda-forge::dftd3-python` | `import dftd3` | nyi | preferred; (dep) `conda-forge::simple-dftd3` | `bin/simple-dftd3` |; D4; `psi4::dftd4` | `bin/dftd4`, `import dftd4` | preferred | works; `conda-forge::dftd4-python` | `import dftd4` | nyi | preferred; (dep) `conda-forge::dftd4` | `bin/dftd4` | ; GCP; `psi4::gcp` | `bin/gcp` | preferred | works; `conda-forge::gcp-correction` | `bin/mctc-gcp` | nyi | preferred. - [x] Capabilities changed slightly between `dftd3` and `s-dftd3`. In particular, the former can also do -D2 and the latter can do 3-body -D3 in the same call as 2-body -D3. All Psi4 calls will continue to do only 2-body -D3 as default (regardless of `dftd3` or `s-dftd3` engine). That is, `-d3` is still an alias to `-d3zero` which is now an alias to a new extension `-d3zero2b`, which can now be given explicitly disallow 3-body as a tweakable parameter (internally, `s9:=0.0`). When `s-dftd3` is the engine, another set of new extensions, e.g., `-d3atm` alias of `-d3zeroatm` turns on 3-body (`s9=1.0`) and allows user tweaks. This latter is the same behavior as -D4, which turns on 3-body by default. If this seems confusing, state what calc you want — e.g., `energy(""b3lyp-d3atm"")` — and Psi4 will figure out if you have the right engine to do the job.; - [x] Previous to QCEngine v0.26.0 (required by this Psi4 PR), t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2791:426,detect,detected,426,https://psicode.org,https://github.com/psi4/psi4/pull/2791,1,['detect'],['detected']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] fix bug where final findif and nbody quantities are computed and probe-able but not printed or logged.; - [x] update CI for c-f based; - [x] add docs warnings about out-of-dateness for build; - [x] work around windows console not liking strikethrough; - [x] psi4.addons() isn't the definitive word on ecosys availability -- testing.using is -- but it's simpler. This updates the Grimme addons to detect the favored distributions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2959:883,detect,detect,883,https://psicode.org,https://github.com/psi4/psi4/pull/2959,1,['detect'],['detect']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] I think CI is hitting a brownout to deprecate the non-redundant mambaforge, so completing the switch. I've done it at other repos; - [x] windows nightly builds are in great demand, I don't have much more to delete to create space for them, and I'm tired of build always looking like it's failing at master. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3233:307,redund,redundant,307,https://psicode.org,https://github.com/psi4/psi4/pull/3233,1,['redund'],['redundant']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. Collect SAPT changes in the progress of SAPT consolidation. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] avoid stumbling into memdf with disk algorithem. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3131:313,avoid,avoid,313,https://psicode.org,https://github.com/psi4/psi4/pull/3131,1,['avoid'],['avoid']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. `Molecule::atom_at_position` is supposed to return the index of the atom found in a specified radius of a specified point in 3D space, or -1 if no atom is found in the radius. The current implementation assumes there is never more than one atom within the given radius, and returns the index of the first atom found to be within the tolerance.; This can hypothetically happen in two ways: the atoms are either extremely close, or the tolerance is set to a large value. The new implementation behaves more like one would expect it to behave: under the aforementioned extreme circumstances it throws an exception and informs the user with an error message. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Detect corner case and throw error if encountered; - [x] Update docstrings to better describe implementation. ## Questions; - [x] Apparently, `qcdb.Molecule` has its own independent Python implementation of `atom_at_position`. As is, this PR means that calling `qcdb.Molecule.atom_at_position` and `psi4.core.Molecule.atom_at_position` from a Python program may return different results for the same geometry, if the aforementioned corner case happens.; Not sure what to do about this, at first glance it would be neater if both `qcdb.Molecule.atom_at_position` and `psi4.core.Molecule.atom_at_position` ended up calling the same C++ implementation, but I am not sure how feasible that would be.; Thoughts?. ## Checklist; - [x] No new features; - [x] `ctest -j24` and `make pytest` both passed locally. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465:842,Detect,Detect,842,https://psicode.org,https://github.com/psi4/psi4/pull/2465,1,['Detect'],['Detect']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Detci still has a few places where error termination is effected through printf+abort(). This PR replaces the calls to abort() in with `throw PSIEXCEPTION(msg)`. The rest of the codebase has more of this pattern, those are subject to future PRs to keep this one small. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] A few error terminations in the detci module now print a more detailed error information to the console, instead of just the error message in the output file. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Calls to `abort()` in detci are replaced with `throw PSIEXCEPTION(msg)`, where `msg` is the relevant error message taken from the context of the `abort()`. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3168:160,abort,abort,160,https://psicode.org,https://github.com/psi4/psi4/pull/3168,4,['abort'],['abort']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Improvements discussed in a comment to #3043. The 64-character limit may not be valid on all architectures; this PR should avoid having to revisit the patch. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3044:203,avoid,avoid,203,https://psicode.org,https://github.com/psi4/psi4/pull/3044,1,['avoid'],['avoid']
Safety,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Minor cleanups to `find_occupation` as well as the introduction of sanity checks for #2476 to prevent sudden changes of the spin state during the calculation. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2488:147,sanity check,sanity checks,147,https://psicode.org,https://github.com/psi4/psi4/pull/2488,1,['sanity check'],['sanity checks']
Safety,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Psi4 isn't checking that basis sets are given in a sensible format at the moment. This pull fixes the issue somewhat. Closes #2253 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Corrupt basis sets are detected instead of used. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2254:343,detect,detected,343,https://psicode.org,https://github.com/psi4/psi4/pull/2254,1,['detect'],['detected']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Running ip_tunning clogs stdout by emitting non-silenced printouts, and red-herring warnings.; `ip_tune` does set charge/multiplicity via `set_molecular_charge` and `set_multiplicity`:; * https://github.com/psi4/psi4/blob/master/psi4/driver/frac.py#L609; * https://github.com/psi4/psi4/blob/master/psi4/driver/frac.py#L610C5-L610C37. so it should be safe to keep them out. An example:; ```log; ...; c: [1.0, 0]; fc: [0.0]; m: [2]; fm: [3]; Following warning is harmless if you've altered chgmult through `set_molecular_change` or `set_multiplicity`. Such alterations are an expert feature. Specifying in the original molecule string is preferred. Nonphysical masses may also trigger the warning. c: [1.0, 0]; fc: [0.0]; m: [2]; fm: [3]; Following warning is harmless if you've altered chgmult through `set_molecular_change` or `set_multiplicity`. Such alterations are an expert feature. Specifying in the original molecule string is preferred. Nonphysical masses may also trigger the warning. c: [1.0, 0]; fc: [0.0]; m: [2]; fm: [3]; Following warning is harmless if you've altered chgmult through `set_molecular_change` or `set_multiplicity`. Such alterations are an expert feature. Specifying in the original molecule string is preferred. Nonphysical masses may also trigger the warning. c: [1.0, 0]; fc: [0.0]; m: [2]; fm: [3]; Following warning is harmless if you've altered chgmult through `set_molecular_change` or `set_multiplicity`. Such alterations are an expert feature. Specifying in the original molecule string is preferred. Nonphysical masses may also trigger the warning.; ...; ```. ```; c: [1.0, 0]; fc: [0.0]; m: [2]; fm: [3]; ```; steems from https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/molecule.py#L1646. and can be silenced by setting `verbose=-1`,; the other is 4 lines below:. https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/molecule.py#L1650. This PR, adds `quiet` param to ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3229:430,safe,safe,430,https://psicode.org,https://github.com/psi4/psi4/pull/3229,1,['safe'],['safe']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; These functions are relics from Psi3 (or before?) and they have many issues, unfortunately one of them is their function signature. Stemming from the awful interface, users of `rsp(...)` and `sq_rsp(...)` never check if the diagonalization failed, because they _cannot_. To keep the promise of not randomly breaking API without fair warning, this PR deprecates said functions but keeps them usable. After #2776, `rsp(...)` has no internal callers left. As for `sq_rsp(...)`:. - many former callers of `sq_rsp(...)` have turned out to be unused functions and have been removed; - If #2686 is merged the vast majority of remaining callers are migrated to a new wrapper around DSYEV; - The remaining call sites of `sq_rsp(...)` will all be in `dfocc`, which is not touched for the time being to avoid causing merge conflicts for the many pending PRs for that module. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] `PSI_API` function `void rsp(int nm, int n, int nv, double *array, double *evals, int matz, double **evecs, double toler)` is deprecated and 1.7 will be the last release with it present.; - [x] `PSI_API` function `void sq_rsp(int nm, int n, double **array, double *evals, int matz, double **evecs, double toler)` is deprecated and 1.7 will be the last release with it present. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Added deprecation notices to `rsp(...)` and `sq_rsp(...)`. ## Checklist; - [x] No new features; - [x] Tests pass as per Lori. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2798:872,avoid,avoid,872,https://psicode.org,https://github.com/psi4/psi4/pull/2798,1,['avoid'],['avoid']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR reworks and simplifies `libqt/probabil.cc`. Excessive conditionals are removed, sanity checks now throw instead of returning zero, and the `double` kludge is supplanted by `uint64_t`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `factorial` and `combinations` now return `uint64_t` instead of `double`, and take `const uint64_t` instead of `int`; - [x] `factorial` now throws if the result would overflow; - [x] `combinations` now throws if computing n-choose-k is impossible. ## Checklist; - [x] No new features; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2907:168,sanity check,sanity checks,168,https://psicode.org,https://github.com/psi4/psi4/pull/2907,1,['sanity check'],['sanity checks']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This corresponds to L2 at https://github.com/evaleev/libint/pull/233 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switches psi4 to use a Libint2 forked from upstream in 2022, not in 2019; - [x] changes a couple cmake knobs and changes the required components to EFV's preferred syntax (`g5` -> `eri_c4_d1_l5`); - [x] avoided grid points discrepancies that I had hit by implementing Holger's suggestion.; - [x] I and others have reported needing `pybind11::headers` in extra places, so adding those; - [x] The defines `INT_NCART` and `INT_CARTINDEX` in psi https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L46-L64 are also in L2. They used to be `#define` in the current/2019 fork of L2, but now in L2 master, it’s an inline function. To avoid errors like the below, they're namespaced and inlined here now, too. ```; < namespace libint2 {; < inline int INT_NCART(int am) { return ((am + 2) * (am + 1)) >> 1; }; < }; < LIBINT_DEPRECATED(""please use libint2::INT_NCART instead""); < inline int INT_NCART(int am) { return libint2::INT_NCART(am); }; ---; > #define INT_NCART(am) ((((am)+2)*((am)+1))>>1); ```; With that situation (define in psi and inlined in L2), I get lots of; ```; In file included from /psi/gits/hrw-pybind/psi4/src/psi4/libmints/integral.cc:28:; /psi/gits/libint2-efv/install-p01/include/libint2/cgshell_ordering.h:104:12: error: expected unqualified-id before 'int'; 104 | inline int INT_CARTINDEX(unsigned int am, int i, int j) {; | ^~~~~~~~~~~~~; ```; I can fix the problem by renaming in psi to `INT_NCART_PSI` and `INT_CARTINDEX_PSI`. What's a cleaner solution than renaming? Should we inline? Or add to the `psi {}` namespace?. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-sub",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2413:461,avoid,avoided,461,https://psicode.org,https://github.com/psi4/psi4/pull/2413,2,['avoid'],"['avoid', 'avoided']"
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is an implementation of the fitted version of the SAP guess, described in [J. Chem. Phys. 152, 144105 (2020)](https://doi.org/10.1063/5.0004046). The repulsive potential on every atom is fit in terms of error function potentials, which means that the guess can be evaluated with few two-electron integrals; namely. $$ {\bf F}^\text{SAP} = {\bf H} + {\bf V}^\text{SAP} $$. $$ V_{\mu \nu}^\text{SAP} = \sum_{A} (A|\mu \nu) $$. where $A$ is a fully contracted $1s$ function on each atom. The implementation is not optimal, since I use `ao_eri` to compute the integrals. An optimal implementation would accumulate the auxiliary functions' integrals on-the-fly; however, optimization can be safely left to a later stage... Closes #2054 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Implement scheme and get something that matches ERKALE. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3039:771,safe,safely,771,https://psicode.org,https://github.com/psi4/psi4/pull/3039,1,['safe'],['safely']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is for after #2861. ## User API & Changelog headlines. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Add option `psi4_SHGAUSS_ORDERING` to use `sss` (all CCA standard orderings internally). expert only! all tests will pass (this pulls over Andy Simmonett's fchk fix from #2537) except mints3, and this adds alternate refs for that, too. This by no means means that all exported formats are safe -- only the ones we test :-) ; - [x] Uses a new commit for dkh that has some build updates. also passes it blas that it uses and I apparently missed before. closes #2537. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) These changes fixed all test on a different branch. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2949:669,safe,safe,669,https://psicode.org,https://github.com/psi4/psi4/pull/2949,1,['safe'],['safe']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; `DPD::buf4_sort(...)` has some problems, the main scope of the function is quite ~~polluted~~ cluttered and it is a behemoth of a function.; This PR attempts to improve that by moving the incore/out-of-core decision logic into a separate function and file. `DPD::buf4_sort_axpy(...)` had the same code duplicated. The new function uses `const` wherever possible, its integers are now `int64_t` (with the exception of irrep numbers - having >2 billion irreps seems unlikely) and the `incore` variable is now a `bool`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `DPD::buf4_sort(...)` and `DPD::buf4_sort_axpy(...)` are slightly easier to read and debug; - [x] Code duplication between `DPD::buf4_sort(...)` and `DPD::buf4_sort_axpy(...)` is reduced; - [x] Possible reduction in `int` overflow risk via `int64_t`. ## Checklist; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2717:935,risk,risk,935,https://psicode.org,https://github.com/psi4/psi4/pull/2717,1,['risk'],['risk']
Safety,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; ~for now must enable with `-D ENABLE_IntegratorXX=ON`. recc installing catch2 first to avoid downloading each time.~. ~CI will fail because I added a integratorxx header to a file for trial, but haven't enabled the addon in the buildsys everywhere.~. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] optionally build integratorXX with `-D ENABLE_IntegratorXX=ON`. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3041:167,avoid,avoid,167,https://psicode.org,https://github.com/psi4/psi4/pull/3041,1,['avoid'],['avoid']
Safety,"## Description; @bennybp pointed out [here](https://github.com/psi4/erd/pull/5) that we need to be paying attention to thread safety in called libraries, even if they don't have OpenMP, because Psi4 does. This is trying to follow the guidance in [the venerable document (search `ifcoremt`)](https://software.intel.com/en-us/articles/threading-fortran-applications-for-parallel-performance-on-multi-core-systems). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adds rtl_init and rtl_finalize calls. According to the sample code below, also supposed to set reentrancy, but I don't know what to do about that.; - [x] Drops clang-3.9 travis test that's a little slow. I'm told that clang 3.9 is the same as Mac/Distelli is running anyways.; * **User-Facing for Release Notes**. ## Questions; - [x] I don't know much about this, but it appears harmless, at least for Intel compilers. Going to let Travis test other build systems. Any thoughts?. ## Status; - [x] Ready to go. ```; /*; * Multithreaded C-Fortran mixed language test program; */. #include <stdio.h>; #include <stdlib.h>; #include <unistd.h>; #include <pthread.h>; #include <errno.h>; #include ""threadpool.h"". #include ""forreent.h"". #define NUM_THREADS 12; #define NUM_JOBS 10. /* definitions for Fortran Runtime library init/finalize */; extern void for_rtl_init_ (int *, char **);; extern int for_rtl_finish_ ( );; extern int for_set_reentrancy (int *);. /* declare the external Fortran function 'fpa' */; extern void fpa(int io, char *filename); . void job_thread(void *arg1, void *arg2);. int main(int argc, char **argv); {; threadpool tp;; int i;; int *reent ;; int fstat;. char filenames[NUM_JOBS][100];; int io[NUM_JOBS];. int io_status;; /* Call the Fortran Runtime library for initialization */; for_rtl_init_ (&argc, argv);; *reent = FOR_K_REENTRANCY_THREADED;; fstat = for_set_reentrancy( reent );; printf (""fstat %i \n"", fstat);. /* Create a thread pool of 12 thre",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/604:126,safe,safety,126,https://psicode.org,https://github.com/psi4/psi4/pull/604,1,['safe'],['safety']
Safety,"## Description; According to [clang source](http://llvm.org/svn/llvm-project/cfe/trunk/lib/Frontend/InitPreprocessor.cpp) (about half way down the page), clang always reports version 4.2.1 when using ```__GNUC__```, ```__GNUC_MINOR__```, ```__GNUC_PATCHLEVEL__```. This PR updates the version tester to use ```__clang_major__```, ```__clang_minor__```, ```__clang_patchlevel__``` when clang is detected. This issue appeared when using Intel compilers on a Mac. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/579:394,detect,detected,394,https://psicode.org,https://github.com/psi4/psi4/pull/579,1,['detect'],['detected']
Safety,"## Description; Add HF- and PBEh-3c capabilities, now that the former have been verified from Orca and the latter through S. Grimme private communications. ## Todos; * **Developer Interest**; - [x] gcp smoke tests going to pytest PR; - [x] write a bit of docs; - [x] So this is where my compare_values improvements ran off to. Now have a toggle to fail or not and can check mismatch by val, not just by order of magnitude value.; - [x] Add `gcp` interface, but not as advanced as `dftd3` b/c not writing to a file, just takes one of the pre-def values. ; * **User-Facing for Release Notes**; - [x] Semi-semiempirical methods HF-3c and PBEh-3c of Grimme can now be accessed (with `dftd3` and `gcp` executables detectable in PATH). Access through `energy('hf3c')` and `energy('pbeh3c')`. Can run with or without preferred basis set specified (minix and def2-msvp, respectively). ## Questions; * @dgasmith, this'll need a little adaption for 1.2. ## Status; - [x] Ready to go. Not averse to a squash.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/630:709,detect,detectable,709,https://psicode.org,https://github.com/psi4/psi4/pull/630,1,['detect'],['detectable']
Safety,## Description; Adds reference files for the FCHK pytest.; Changing geometry of test molecules to avoid degenerate orbitals. ## Checklist; - [x] fchk pytest works on a different machine. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2047:98,avoid,avoid,98,https://psicode.org,https://github.com/psi4/psi4/pull/2047,1,['avoid'],['avoid']
Safety,"## Description; Adds the DLPNO-MP2 method to Psi4. Callable as `energy('dlpno-mp2')`. DLPNO-MP2 (or domain-based local pair natural orbital MP2) is the method described in the following paper:. [Pinski, Peter, et al. ""Sparse maps—A systematic infrastructure for reduced-scaling electronic structure methods. I. An efficient and simple linear scaling local MP2 method that uses an intermediate basis of pair natural orbitals."" The Journal of chemical physics 143.3 (2015): 034108](https://doi.org/10.1063/1.4926879); ; DLPNO-MP2 recovers about 99.9% of the DF-MP2 correlation energy, and scales much better in both time and memory. The following graph compares this implementation with Psi4's DF-MP2 code on linear alkanes (18 core i9-10980XE, 200 GB, cc-pVTZ basis):. ![alkanes](https://user-images.githubusercontent.com/16376046/105784584-b38e7180-5f3e-11eb-97ce-9e5d05896d82.png). ## Todos; - [x] Implement DLPNO-MP2; - [x] Add tests; - [x] Add docs. ## Questions; - [x] Are there any other ways that this calculation should be routed? In particular, should `DLPNO` be an option for the `MP2_TYPE` keyword? Should DLPNO be an option for `QC_MODULE`?; - [x] Related to the previous question, suppose a user wants to run a SCS DLPNO-MP2 calculation. How should that be parsed? Not a big deal if that isn't supported.; - [x] How best to handle DLPNO options? There are many thresholds associated with this method, but the error and cost of the method are primarily controlled by just two of them: `T_CUT_DO` and `T_CUT_PNO`. Should the other options be user-facing at all? For now, I've marked them expert. Opinions from anyone with experience running local correlation methods are welcome here. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2093:528,recover,recovers,528,https://psicode.org,https://github.com/psi4/psi4/pull/2093,1,['recover'],['recovers']
Safety,"## Description; Adds the nZaPa basis sets that converge faster for SCF and correlation energies than many others. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] nZaPa-NR basis sets for n=2,3,4,5,6,7; - [x] RI and JKFIT definitions for nZaPa and cc-pVnZ-F12; - [x] `[23]ZaPa-NR` bracket detection for CBS. ## Checklist; - [x] Tests added for any new features; - [x] relevant fraction of full tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1346:337,detect,detection,337,https://psicode.org,https://github.com/psi4/psi4/pull/1346,1,['detect'],['detection']
Safety,## Description; Adds timers for SAPT(DFT) procedure to track bottle-necks for improving performance. Information printed into `timer.dat`. A few other minor modifications are also done (see below). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Added step-wise timers for SAPT(DFT).; - [x] Appended missing dimer SCF step for FISAPT timer.; - [x] Exported timer functions to python-side.; - [x] Fixed a few typos in SAPT(DFT) procedure `sapt_proc.py`.; - [x] Expanded output width for `timer.dat` to avoid overflowing. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ## Attachment; [timer_dat.txt](https://github.com/psi4/psi4/files/2203735/timer_dat.txt); Seems that github doesn't like .dat files so I renamed it.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1083:568,avoid,avoid,568,https://psicode.org,https://github.com/psi4/psi4/pull/1083,1,['avoid'],['avoid']
Safety,"## Description; All the basis set stuff that simply had to be done for 1.1 to be at least as capable as 1.0. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixes psi4/psi4#617; - From psi4/psi4#43, fixes; - [x] 1. `decontract` now py-side and signaled by `-decon`. This was done some time ago.; - [x] 2. `basis_rel` also now `basis_relativistic`, etc. Also some time ago; - [x] 3. user-def basis sets have names/handles and are recallable as shown in mints9 and python/mints9. docs corrected and elaborated on this point; - [x] 7. got taken out last fall, and its replacement has not been added.; - [x] 12. fixed up the basisset.rst docs; - [x] 14. covered by comments at 6; - [x] fixed mints9 and enabled symmetry detection to show through to C-side mol; - [x] assigned a rough zeta to most built-in basis sets. * **User-Facing for Release Notes**; - [x] Extends `basis <opt_name> {...}` blocks to PsiAPI via `psi4.basis_helper(name='mybas', key='DF_BASIS_JKFIT', block=""""""; assign ...; """""")`; - From psi4/psi4#43, fixes; - [x] 4. didn't try it on a `db()`, but basis blocks aren't anonymous and can be reused at will. Even `basis mybas {....}; energy('hf/mybas')`; - [x] 6. vastly improved basis printing by always printing file and line origin on each basis set load (called in the driver so no longer mass rebuilding of basissets). separated name into a name field that is the handle by which it can be recalled (that is, the BASIS* keyword value) and a composition that'll look like `aug-cc-pvdz + cc-pvdz + 6-31g`; - [x] 8. fixed. now if first-preference fitting basis not avail and orbitals basis is _known_ to be >quad-zeta, _won't_ default to def2-qz* fitting sets. ## Questions; - [ ] @WDerricotte, there was that decon example in the manual that we agreed was wrong. Can you fix that?; - [ ] PsiAPI folks: getting a lot of these ""helper"" functionals for processing input blocks: pcm_helper, basis_helper. Shall we settle o",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/649:783,detect,detection,783,https://psicode.org,https://github.com/psi4/psi4/pull/649,1,['detect'],['detection']
Safety,"## Description; At the risk of gaining a reputation for single-character PR's, I think I have a fix for #1596. The extra character in the error message looked suspicious, so I nuked it and the `adc` tests still pass. I'll show the output of the OP's calculation below. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a probable typo in ADC, which introduced a bug. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1599:23,risk,risk,23,https://psicode.org,https://github.com/psi4/psi4/pull/1599,1,['risk'],['risk']
Safety,"## Description; Changes a setting in the COSX JK algorithm to a more conservative default. Previously, the incremental fock option (`cosx_incfock`) was enabled by default. This gave a minor speedup, but it came at the risk of possible SCF convergence issues when using diffuse basis sets. This PR disables this option, so the COSX algorithm will be slightly slower, but more robust by default. ## Todos; - [x] Changed `cosx_incfock` default. ## Checklist; - [x] COSX tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2689:218,risk,risk,218,https://psicode.org,https://github.com/psi4/psi4/pull/2689,1,['risk'],['risk']
Safety,"## Description; Cleans up CMake so that external dependencies can be linked to libraries in `psi4/src/psi4` and then inherited by `core` without invoking `target_link_libraries`/`target_include_directories` again. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Bump CMake minimum requirement to 3.8; - [x] Rewrote `psi4_add_module` CMake macro. Now it takes `bin` or `lib` argument, name of module, and list of sources. Note that the macro:; - Now defines **two** global lists of libraries `core` will link to, one for `bin`s and one for `lib`s. This is needed because `lib`s need to appear last in the link line to avoid missing symbols.; - Sets source file properties to generate position-independent code with symbols hidden by default.; - [x] Rewrote downstream `CMakeLists.txt` so that: ; - Sources are in a list, with one source file per line, for easier diff inspection.; - External dependencies are linked where they are used first.; - [x] Reordered `include`s in _some_ files according to the hierarchy: ; - For class implementation sources: header corresponding to current source file first (_.i.e._ `#include ""myself.h""` in `myself.cc`); - C++ standard headers, including `<omp.h>`; - Psi4 higher-level headers, _i.e._ `psi4/psifiles.h` &co.; - Psi4 headers in subdirectories _i.e._ `psi4/libmints/matrix.h` &co.; - Headers in current directory _without full path_.; - [x] `psi4/src/psi4/liboptions/liboptions_python.h` moved to `psi4/src/python_data_type.h` and ; `psi4/src/psi4/liboptions/python.cc` moved to `psi4/src/python_data_type.cc`. These are now compiled and linked as part of `core`, rather than `liboptions`. ## Questions; I note that `mrcc.cc` and `civect.h` include `pybind11.h`. It might be a good idea to move those bindings one level up, directly into `core` without spreading the dependency too deep in the code. Opinions?. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1358:667,avoid,avoid,667,https://psicode.org,https://github.com/psi4/psi4/pull/1358,1,['avoid'],['avoid']
Safety,"## Description; Cleanup EOM CC3 code a bit. ## Todos; - [x] Catchup the code with psifiles, etc., so that EOM_DEBUG toggle can be used; - [x] Change restart behavior in EOM CC3 computations to avoid odd bug. ## Checklist; - [x] No additional tests should be needed.; - [x] Tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2085:193,avoid,avoid,193,https://psicode.org,https://github.com/psi4/psi4/pull/2085,1,['avoid'],['avoid']
Safety,## Description; Closes issue #2559 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Removed redundant work in parallel TwoBodyAOInt construction. ## Questions. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2581:152,redund,redundant,152,https://psicode.org,https://github.com/psi4/psi4/pull/2581,1,['redund'],['redundant']
Safety,"## Description; Continues from psi4/psi4#850 in getting sns-mp2 integrated into psi as an endorsed plugin. Also various infrastructure additions to accommodate downstream and python projects. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] First downstream project buildable during superbuild; - [x] First pure python project buildable during superbuild. That is, `setup.py`, not `addonConfig.cmake`, so opt-in/detect-from machinery a lot shakier. Have to use FindPythonModule adapted from internet, rather than sturdy `find_package()`. For where-module?, relying totally on :envvar:PYTHONPATH. Seems to be behaving sensibly, but report oddities.; - [x] Add some dev docs for how to do workflows with addons; - [x] Adapt some snsmp2 test to work with psi ctest and pytest; - [x] Fix up tests/pytest/test_numpy_views so that it runs with pytest and doesn't interfere when `memory_profiler` not installed; - [x] ~Until https://github.com/DEShawResearch/sns-mp2/pull/2 goes in, pulling from my fork~; - [x] Adds some (mildly tested) versioning capabilities to FindPythonModule; * **User-Facing for Release Notes**; - [x] Enable [sns-mp2](https://github.com/DEShawResearch/sns-mp2) to be built at build-time via `cmake -DENABLE_snsmp2=ON`. Can also detect it if you put an external snsmp2 in PYTHONPATH (but as it's an optional runtime dependency, latter's only really useful for testing); - [x] Fix nasty bug that made the number of points computed for cube file dependent on rounding error. Could show up as differences in cube files btwn compilers. Tightened down cubefile checking. ## Questions; - [x] @rmcgibbo, I'd still like to know about getting the version from the imported plugin. Also, it'd be nice to get pytest in the sns-mp2 repo working in its own right.; - [x] @shannonhouck, there'll probably be a few more docs to add, if you don't mind. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/865:478,detect,detect-from,478,https://psicode.org,https://github.com/psi4/psi4/pull/865,2,['detect'],"['detect', 'detect-from']"
Safety,"## Description; Docs still failed even after the last PR. My current suspicion is that the problem is [this line](https://github.com/psi4/psi4/runs/5253940040?check_suite_focus=true#step:9:248), which results when [an over-active Perl scraper thinks ""LEFT-RIGHT"" is a psivar](https://github.com/psi4/psi4/blob/master/doc/sphinxman/document_psivariables.pl#L213-L224). I don't particularly feel like learning enough Perl to implement the regex properly, so we're just going to avoid it. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2448:476,avoid,avoid,476,https://psicode.org,https://github.com/psi4/psi4/pull/2448,1,['avoid'],['avoid']
Safety,"## Description; During the L2 upgrade, I missed the function that handles diffuse external multipoles. In constructing a test case to avoid a repeat, I found some normalization problems (and a lack of gradients) which will be addressed in a followup PR. H/T to @g-andres and his group for pointing the problem out. ## Todos; - [ ] Fixes energies with external diffuse potentials. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2068:134,avoid,avoid,134,https://psicode.org,https://github.com/psi4/psi4/pull/2068,1,['avoid'],['avoid']
Safety,"## Description; Extracts some miscellaneous, uncontroversial and minor, changes from #1443 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Use `pybind11_add_module` to declare the Python module at the CMake level. This follows suggestions from the pybind11 project. Note that I had to deactivate the link-time optimization (the `NO_EXTRAS` flag). I'd get `Aborted (core dumped)` otherwise with GCC (tested with versions 5, 6, and 7); - [x] More `auto`-izing and switch to the free functions in the `linalg` namespace. . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1595:408,Abort,Aborted,408,https://psicode.org,https://github.com/psi4/psi4/pull/1595,1,['Abort'],['Aborted']
Safety,"## Description; Fix the mismatch issue on Github (#2258) and on the forum [http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693/4](http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693/4).; A more efficient way to obtain the CI coefficients after a redundant orbital rotation would be a direct transformation without solving the CI again, see [https://doi.org/10.1063/1.479573](https://doi.org/10.1063/1.479573). There might be two related issue:; - `H0block_` in DETCI keeps filling up during the MCSCF macro iteration. This will lead to repeated entries during the MCSCF iterations and sometimes lead to uncertain numerical behavior.; - The `""DFILE""` CI guess for the CI after orbital canonicalization is directly related to this issue. Using this guess leads to very slow convergence for the CI. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2259:366,redund,redundant,366,https://psicode.org,https://github.com/psi4/psi4/pull/2259,1,['redund'],['redundant']
Safety,"## Description; Fixes #1288. The trouble was that Bozkaya's code used libtrans to transform integrals, and those were written to disk in their antisymmetrized, redundancy-free form, as libtrans does. The DCT code gets different integrals from libtrans but then sorts those to get the same blocks as Bozkaya wrote earlier in the redundant form. Because the DCT-sorted integral block had antisymmetry redundancies, it was larger than the libtrans block that did not have those redundancies. Fixed by changing the code to use a block without those redundancies. I imagine this is of interest to @amjames and @ssh2. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes 1288. ## Checklist; - [x] DCFT tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1336:160,redund,redundancy-free,160,https://psicode.org,https://github.com/psi4/psi4/pull/1336,5,['redund'],"['redundancies', 'redundancy-free', 'redundant']"
Safety,## Description; Fixes #655 and some other possibly nasty issues that come from; - Psithon->Python replacements being executed on literal strings; - Truncation of lines with literal python strings that contain a hash character (`#`). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Improved handling of literal strings inside `inputparser.py` to avoid regex replacements being attempted inside Python literals.; * **User-Facing for Release Notes**; - None. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/658:412,avoid,avoid,412,https://psicode.org,https://github.com/psi4/psi4/pull/658,1,['avoid'],['avoid']
Safety,"## Description; Fixes a segfault discovered by @mfherbst while developing #2767.; It was caused by adding `#include ""psi4/libmints/potentialint.h""` in `mintshelper.cc`, because `potentialint.h` included L2's `engine.h`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fix ""future"" segfault by reorganizing PCM functors (moved to `.cc` files to avoid L2 `engine.h` include). See discussion in #2767 . ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2770:536,avoid,avoid,536,https://psicode.org,https://github.com/psi4/psi4/pull/2770,1,['avoid'],['avoid']
Safety,"## Description; Fixes many compiler warnings by no longer passing redundant arguments to Matrix constructors. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fixes 83 compiler warnings, 81 of which were coming from `dct`. ## Checklist; - [x] quick tests and dct tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3175:66,redund,redundant,66,https://psicode.org,https://github.com/psi4/psi4/pull/3175,1,['redund'],['redundant']
Safety,"## Description; Fixes up the OpenMP problems. This still needs some tidying, but you can start to take a look. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Mostly this polishes the new OpenMP/Math interface/detection by expanding it to C/CXX/Fortran (thanks, v2rdm, for playing your persistent role of complicating things) and making sure vars are propagated among the externalprojects. Key cmake option is `OpenMP_LIBRARY_DIRS` which is a `;`-sep PATH-like var to search for omp libs if not naturally found. closes #1041 ; - [x] fix a few DISK_DF in driver and add some long-awaited (really, look at the milestone history for that ticket) freq docs in #350 ; - [x] fatal_error's ERD; - [x] bump various upstream/downstream; - [x] get ambit back (can't readily test it except by building plugin). ## Questions; - [x] Roberto and Radovan should look over the CMake. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1053:277,detect,detection,277,https://psicode.org,https://github.com/psi4/psi4/pull/1053,1,['detect'],['detection']
Safety,"## Description; Furthers the generality of integral transformations and enables a special workflow, `DIRECT_iaQ`, to alleviate disk IO when transforming to `pqQ` forms. Timings comparing the `DIRECT_iaQ` and `DIRECT` methods are inbound. Edit: Here are some tests that (almost comically) display the efficacy of `DIRECT_iaQ` over `DIRECT` + `pqQ`. 1. Test1: ; [input.txt](https://github.com/psi4/psi4/files/1740970/input.txt); [timer.txt](https://github.com/psi4/psi4/files/1740977/timer.txt). 2. Test2: ; [input.txt](https://github.com/psi4/psi4/files/1740966/input.txt); [timer.txt](https://github.com/psi4/psi4/files/1740974/timer.txt). Notice the difference between the `DFH: MO to disk` timers. . Edit2: I added a reduction on `max_val` in `prepare_sparsity` to ensure thread safety. This was incorrect before. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - DF_Helper now has three methods for integral transformations:; `STORE`: Contracts metric with AO integrals, stores, then transforms.; `DIRECT`: Transforms integrals, contracts with metric.; `DIRECT_iaQ`: Optimized `DIRECT` workflow when using `pqQ` transformed integrals. - DF_Helper outputs any transformed integral form you want: `Qpq`, `pQq`, or `pqQ`. The following can be used for each of the respective methods listed above:; `STORE`: `Qpq`, `pQq`, or (ill-advised) `pqQ`; `DIRECT`: `Qpq`, `pQq`, or (ill-advised) `pqQ`; `DIRECT_iaQ`: `pqQ`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/913:781,safe,safety,781,https://psicode.org,https://github.com/psi4/psi4/pull/913,1,['safe'],['safety']
Safety,"## Description; Get Ambit back. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] This includes some changes I salvaged from the old clean-python branch.; - [x] Ambit builds with `ENABLE_ambit` as directed from the `external/upstream/ambit/CM`.; - [x] Ambit _does not_ link into Psi4, as Psi4 doesn't use it. So it's more like Psi4's build system carries it along.; - [x] The ambit plugin template _is_ in working build order (if you check out the plugin manually; the skeleton plugins are _not_ in working order). It detects the ambit package and links it in. It _doesn't_ however run. See error below that I bet @jturney can patch up in no time.; - [x] This is associated with branch `cmakelab2` in the main Jet ambit repo. If you haven't already hunted it down, below is the way to work on psi4 repo and ambit repo locally simultaneously. ```; #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG cmakelab2; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone""; ```. * **User-Facing for Release Notes**. ## Questions; - [x] This is not ambit in full working order. This is ambit reintegrated to the point that ambit people can patch it up a bit and return it to full working order. ; - [x] @jturney, I didn't renovate the ambit CMake like on some other external projects. If you've a mind to do so, CheMPS2 is quite similar to Ambit in build artifacts and [my CheMPS2 branch config6](https://github.com/loriab/CheMPS2/tree/config6) is current state of the art. ```; Attention! This SCF may be density-fitted.; Traceback (most recent call last):; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/lib//psi4/driver/driver.py"", li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/593:583,detect,detects,583,https://psicode.org,https://github.com/psi4/psi4/pull/593,1,['detect'],['detects']
Safety,"## Description; Honestly, this started as just updating pybind11 to detect via config. It got out of hand, but to good results. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `exception.message` --> `str(exception)` since former sometimes raises an error in the course of handling another.; - [x] fix python/json testing when PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/554:68,detect,detect,68,https://psicode.org,https://github.com/psi4/psi4/pull/554,3,['detect'],"['detect', 'detection']"
Safety,"## Description; I hit a system that was raising [putenv and setenv not avail](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsi4util/process.cc#L136). Rather than solve it, decided (with support) to clean environment variables out of `P::e`. Only active uses were PSI_SCRATCH and PSIDATADIR. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Replaced all the PSI_SCRATCH with calls directly to psio.get_default_path(). Also cleared that fn out so it truly defaults to `/tmp/`, not TMP, TEMP, TMPDIR, then /tmp/.; - [x] Once all the parsing's py-side might be able to drop PSIDATADIR entirely. But for now, moved it to its own slot as `P::e.[gs]et_datadir()`; - [x] Can't tell if you're dealing with Clang or AppleClang by `#defines`, so lowered cxxstandard cutoff to permit Intel + !AppleClang to pass.; - [x] `FindOpenMP.cmake` attaches a lib to try_run that isn't needed just to extract versions. Shift OMP detection so cxxstandard doesn't complain about unfindable lib; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/826:986,detect,detection,986,https://psicode.org,https://github.com/psi4/psi4/pull/826,1,['detect'],['detection']
Safety,"## Description; I tracked down a seg fault during a largish cc2 calculation to an integer overflow in the value of `size` in DPD::buf4_scmcopy(). I think it was triggered because I allocated a large amount of RAM so a huge chunk of data was to be copied in one go rather than in bits. In my case,; `size = rowtot*coltot = 47252*47252 = -2062215792`; Funnily enough, memcpy wasn't very happy being called with a negative size to copy!. It's a simple case of `int*int` being larger than an int!. Changing `size` to a `long int` and adding some casts matches other sections of the file (although perhaps replacing them all with `size_t` might be better?). ## Questions; This fix got my calculation past the point where it caused the seg fault (although it's still running: it might take a few days!). This bug probably only got triggered by large jobs with a lot of RAM so the in-core copy was performed: there could be similar overflows to track down (similar to that [recently found in the SAPT code](http://forum.psicode.org/t/sapt2-calculation-segmentation-fault-during-exch12-computation/415/6)). I guess a safer option would be test the values for overflow (I've not thought how it behaves 32 vs 64 bit!). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/685:1109,safe,safer,1109,https://psicode.org,https://github.com/psi4/psi4/pull/685,1,['safe'],['safer']
Safety,"## Description; Implemented a pair of functions,; - `void start_skip_timers()`; - `void stop_skip_timers()`; to skip all nested `timer_on` and `timer_off` calls and avoid complicated timing output. ## Todos; - [x] Implement two functions. ## Status; - [x] Ready to go. ## Example; By the following modification to `/psi4/psi4/src/psi4/libscf_solver/sad.cc`:; ```; void SADGuess::compute_guess(); {. timer_on(""SAD Guess"");; start_skip_timers(); // Added new line.; form_D();; form_C();; stop_skip_timers(); // Added new line.; timer_off(""SAD Guess"");; }; ```; the output `timer.dat` shows:; ```; HF: Form H : 0.000u 0.017s 0.019w 2 calls; HF: Form S/X : 0.000u 0.000s 0.000w 2 calls; HF: Guess : 0.400u 0.000s 0.247w 2 calls; | SAD Guess : 0.400u 0.000s 0.238w 2 calls; HF: Form G : 2.267u 0.000s 1.363w 31 calls; | JK: D : 0.000u 0.000s 0.000w 31 calls; | JK: USO2AO : 0.000u 0.000s 0.000w 31 calls; | JK: JK : 2.267u 0.000s 1.361w 31 calls; | JK: AO2USO : 0.000u 0.000s 0.000w 31 calls; HF: Form F : 0.000u 0.000s 0.000w 31 calls; HF: DIIS : 0.000u 0.000s 0.019w 31 calls; | DIISManager::add_entry : 0.000u 0.000s 0.011w 29 calls; | DIISManager::extrapolate : 0.000u 0.000s 0.006w 27 calls; | | DIISManager::extrapolate: bMatrix setup: 0.000u 0.000s 0.002w 27 calls; | | DIISManager::extrapolate: bMatrix pseudoinverse: 0.000u 0.000s 0.001w 27 calls; | | DIISManager::extrapolate: form new data: 0.000u 0.000s 0.002w 27 calls; HF: Form C : 0.000u 0.000s 0.004w 31 calls; HF: Form D : 0.000u 0.000s 0.000w 31 calls; ```; which is much more concise than originally:; ```; HF: Form H : 0.000u 0.033s 0.019w 2 calls; HF: Form S/X : 0.000u 0.000s 0.000w 2 calls; HF: Guess : 0.417u 0.000s 0.251w 2 calls; | SAD Guess : 0.383u 0.000s 0.242w 2 calls; | | JK: (A|mn) : 0.033u 0.000s 0.007w 4 calls; | | JK: (A|Q)^-1/2 : 0.100u 0.000s 0.072w 4 calls; | | JK: (Q|mn) : 0.000u 0.000s 0.000w 4 calls; | | JK: D : 0.000u 0.000s 0.000w 18 calls; | | JK: USO2AO : 0.000u 0.000s 0.000w 18 calls; | | JK: JK : 0.000u ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/762:165,avoid,avoid,165,https://psicode.org,https://github.com/psi4/psi4/pull/762,1,['avoid'],['avoid']
Safety,"## Description; Implements a basic . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ *] Adds a smart solver class that can easily share data with a wfn object during SCF iterations. ; - [ *] Provides a platform for quickly adding new smart solving capabilities.; - [ *] With a metric for detecting oscillation, a dynamic damping function can be turned on to limit changes in Drms to a target value. * **User-Facing for Release Notes**; - [ *] With SMART_SCF set to `true`, SOSCF is automatically turned on when trailing convergence is detected, the initial oscillations in SAD, GWH, and CORE guess are damped at 70%. ## Questions; - [ *] What can be changed about the structure of the smart_solver class for ease of readability and use?; - [ *] This code leaves out 'macroiterations', i.e. restarting the SCF upon failure with updated initial conditions and options. Do we want this functionality in this PR, or another?; ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ *] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1134:353,detect,detecting,353,https://psicode.org,https://github.com/psi4/psi4/pull/1134,2,['detect'],"['detected', 'detecting']"
Safety,"## Description; Implements density screening into the direct SCF Algorithm, no incremental Fock build currently, but incremental Fock build will be a future addition. Reference paper: https://onlinelibrary.wiley.com/doi/abs/10.1002/jcc.540100111. ## Notable Features; - [x] Improve the efficiency (less time) of the direct SCF Algorithm without compromising accuracy. ## Checklist; - [x] Passes Sanity Check for Water Molecule, will include a Google Sheets link as I include more tests; - [x] Passes Tests Using The Benzene, Naphthalene, etc... series; - [x] Code works with multithreading; - [x] Code works with reaction energies, interaction energies, conformation energies; - [x] Code works on open-shelled systems; - [x] Code tested on a diverse set of molecules. ## Status; - [x] Rough Draft Phase; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2062:395,Sanity Check,Sanity Check,395,https://psicode.org,https://github.com/psi4/psi4/pull/2062,1,['Sanity Check'],['Sanity Check']
Safety,"## Description; Improvements to basis set handling, including; - elimination of duplicate code and introducing array size checks via use of std::string in gshell; - sanity checks for angular momentum parsing, eliminating segfaults; - support for explicit definition of angular momentum in the basis set input (fixes #628). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Eliminated duplicate code and introduced array size checks via std::string in gshell.; - [x] Introduced angular momentum checks in the basis set parser.; - [x] Added support for L=n format into the basis set parser. ## Questions; - [x] The basis set parser is doing regexp validation for the shell entry. Thanks to @PhillCli for supplying a working regexp. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1994:165,sanity check,sanity checks,165,https://psicode.org,https://github.com/psi4/psi4/pull/1994,1,['sanity check'],['sanity checks']
Safety,"## Description; Kudos to @andysim for pointing out in January the exact 13 lines of code to change for the vast preponderance of the gaussian to standard ordering switch. As far as timeline, there's no particular reason this needs to be in for v1.6. But if we _could_ avoid hosting forever one fewer set of L2 packages for a single release, that'd be kind of nice. But fixing the output formats (i.e., fchk, qcsk, molden, fcidump) is likely to take some careful work. If anyone would like to tackle a part of this, go for it. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] current test status (pretty impressive, imo); - after g2g commit; - ctest: `99% tests passed, 3 tests failed out of 487`; - pytest: `12 failed, 2971 passed, 270 skipped, 269 xfailed`; - after first solidharmonics.cc commit; - ctest: ~`90% tests passed, 50 tests failed out of 487`~; - pytest: ~`43 failed, 2911 passed, 208 skipped, 269 xfailed`~; - [ ] only Linux in CI b/c only it has an appropriate L2 conda package built. - categories to examine; - [x] tdscf; - [x] cubeprop; - [ ] fchk; - [ ] qcsk atomicresult.wavefunction; - [x] mbis; - [ ] molden; - [ ] fcidump; - [ ] nbo. - fails pytest; - [x] tdscf; - [x] dft_block_schemes; - [ ] mcmurchie_davidson_consistency_angmom (fails because ref data are deposited in Gaussian ordering); - [ ] test_rhf_fchk[df-rhf-dft)]; - [ ] test_rhf_fchk[conv-rhf-dct]; - [ ] test_rhf_fchk[df-rhf-omp2]; - [ ] test_uhf_fchk[df-uhf-mp2]; - [ ] test_rhf_fchk[conv-rhf-ccsd] ; - [ ] test_uhf_fchk[df-uhf-dft]; - [ ] test_uhf_fchk[conv-uhf-ccsd]; - [ ] test_rhf_fchk[df-rhf-mp2]; - [ ] test_uhf_fchk[df-uhf]; - [ ] test_rhf_fchk[df-rhf)]; - [ ] test_rhf_fchk[conv-rhf-cc2]. - fails ctest; - [x]	103 - cubeprop (Failed); - [x]	104 - cubeprop-frontier (Failed); - [x]	123 - density-screen-2 (Timeout); - [x]	161 - dft-grad-lr1 (Failed); - [x]	162 - dft-grad-lr2 (Failed); - [x]	163 - dft-grad-lr3 (Failed); - [x]	168 - dft-b2plyp (Fail",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2537:268,avoid,avoid,268,https://psicode.org,https://github.com/psi4/psi4/pull/2537,1,['avoid'],['avoid']
Safety,"## Description; Longawaited maintenance on physconst and duplicate naming. ## Todos; * **Developer Interest**; - [x] There was dir driver/procedures and dict procedures['energy']... Renamed the former to procrouting to avoid future trouble. Note that all plugins will need [this line](https://github.com/edeprince3/v2rdm_casscf/blob/master/pymodule.py#L28) fixed by `procedures` --> `procrouting`.; - [x] Move i/fsapt test cases higher in list, so they can backfill.; * **User-Facing for Release Notes**; - [x] Physical constants in PsiAPI are now `psi4.constants.amu2kg` instead of `psi4.p4const.psi_amu2kg`. In Psithon, still `psi_amu2kg`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/632:219,avoid,avoid,219,https://psicode.org,https://github.com/psi4/psi4/pull/632,1,['avoid'],['avoid']
Safety,"## Description; Lots o' stuff. **I recommend reviewing commit-by-commit.**. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix ""write() argument must be str, not bytes"" error that occurs in new NumPy; - [x] QCDB: migrate Hungarian alg from hungarian module to hacked scipy. now ""align"" tests should pass w/o incident or add'l software; - [x] Mol: migrate Molecule.to_string() back from QCDB. not used, but may as well be handy.; - [x] QCDB: squash some printing. migrate some changes back from QCDB.; - [x] AddOns: Don't let scipy missing (for snsmp2) pass silently.; - Discovered faulty logic where snsmp2 will rebuild more than necessary b/c detection involves ""import psi4"" which probably doesn't exist at the start of a psi4 build. not fixed.; - [x] AddOns: Bump pybind11 to 2.2.3; - [x] AddOns: renegotiate the psi vs. libefp options compromise. We generally try to follow addon's naming conventions unless they directly contradict our own. For SAPT we do have our own, but when libefp was implemented, we used our sapt for two (elst & exch) and let libefp win on (pol). I've since put a translation of input and printing system into pylibefp. that isn't active here, but thought may as well change keywords now.; ```; 'psi': {; 'elec': 'elst',; 'pol': 'ind',; 'xr': 'exch',; 'elec_damp': 'elst_damping',; 'pol_damp': 'ind_damping',; 'disp_damp': 'disp_damping',; 'pol_driver': 'ind_driver',; 'ai_elec': 'ai_elst',; 'ai_pol': 'ai_ind',; 'ai_xr': 'ai_exch',; ```; - [x] Add warnings accumulated so far -- ECP, DFT-SAPT, DFT; - [x] set up plugins via native conda gxx; - [x] AddOns: bump libefp to 1.5.0, chemps2 to 1.8.7; - [x] returns align tests to quicktest; - [x] adds `psi4 --test` to travis to test psiapi and addons coverage; - [x] switches MINIX to spherical as advocated [here](https://github.com/psi4/psi4/pull/961#issuecomment-385644036). ## Questions; - [ ] I took the warn DFT functionals from tests and notes, not o",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/993:712,detect,detection,712,https://psicode.org,https://github.com/psi4/psi4/pull/993,1,['detect'],['detection']
Safety,"## Description; Make `core.Matrix.np_write(filename=None)` safer. The method returns a `dict` whose values are `np.ndarray`s. Currently, those arrays are views of memory owned by the `core.Matrix`, which means code like this is actually broken:. ```; def function():; matrix = function_that_returns_a_core_Matrix(); return matrix.np_write(filename=None); ```. This PR changes `np_write` to return copies of the data when `filename=None`, so it's less of a footgun. Eventually the need for this might go away, once the numpy->core.Matrix reference counting integration is accomplished, but that's much tricker. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/750:59,safe,safer,59,https://psicode.org,https://github.com/psi4/psi4/pull/750,1,['safe'],['safer']
Safety,"## Description; Make `psi4.test()` safe to run. And beer safe to grep. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] The psi4 vs numpy threading test is more likely to work if run first, so moved it there. But since that's still no guarantee, made it an expected failure, so it doesn't count against pytest either way.; - [x] with `ENABLE_GENERIC`, blas/lapack detection looks for dynamic libm.; * **User-Facing for Release Notes**; - [x] Geometry optimizations that exceed maxiter no longer just print a warning and exit successfully (beer). Now they exit unsuccesfully (coffee) and raise a `psi4.ConvergenceError`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/638:35,safe,safe,35,https://psicode.org,https://github.com/psi4/psi4/pull/638,3,"['detect', 'safe']","['detection', 'safe']"
Safety,"## Description; Make psi safe for py38. The basic conda pkg does build, but I haven't done full stack yet. For practical reasons, no use turning on a CI lane for 38 until conda pkg available. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] req'd mods for python 3.8; - [x] avoid ""DeprecationWarning: In future, it will be an error for 'np.bool_' scalars to be interpreted as an index"" in `Molecule.from_dict`; - [x] more killing off travis. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1776:25,safe,safe,25,https://psicode.org,https://github.com/psi4/psi4/pull/1776,2,"['avoid', 'safe']","['avoid', 'safe']"
Safety,"## Description; Make tests run reliably and a bit cleaner. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] @JonathonMisiewicz, @amjames so the continuation of the `cc3` saga is that it continued flaky, usually running clean but sometimes throwing PSIO errors at first findif freq, sometimes throwing PSIO errors at second findif freq. Finally figured out that the G0 calc was leaving scratch files before findif launched and findif was only cleaning _after_ each displacement. Previously this was nearly always safe b/c G0 had full symmetry and first findif displacement was totally symmetric (bet we were never testing partial freq on a susceptible mol). But now findif displacements appear in random order, and if the first one up has a lower irrep, it doesn't like those totally symmetric leftovers, so PSIO error. There's any number of places one could put the `clean` -- I chose least obtrusive.; - [x] `gcp` calcs weren't deleting their directories in scratch, so made them. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests less bench run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1326:561,safe,safe,561,https://psicode.org,https://github.com/psi4/psi4/pull/1326,1,['safe'],['safe']
Safety,"## Description; Misc. ## Todos; * **Developer Interest**; - [x] CI: Removes align tests that require hungarian package from quicktests; - [x] Allow basis set blocks to be names ""custom"", ""special"", ""general"" w/o spewing a page of errors at you.; - [x] CMake: upgrade versioner to avoid hard-coded project version. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/974:280,avoid,avoid,280,https://psicode.org,https://github.com/psi4/psi4/pull/974,1,['avoid'],['avoid']
Safety,"## Description; Misc. cleanup related to SCF densities. Marking function returns const, removing redundant class members, and condensing variable declarations and variable definitions. ## Checklist; - [x] Quicktests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2425:97,redund,redundant,97,https://psicode.org,https://github.com/psi4/psi4/pull/2425,1,['redund'],['redundant']
Safety,"## Description; More build changes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] enable py3 testing; - [x] fix versioning at releases, allow conda build to get version before build; - [x] fix case where Fortran compilers required, but not detectable, have to be passed in; - [x] dashboard back. ## Questions; - [x] After these two PRs, just waiting on plugins from @jturney . ## Status; - [x] Ready to go **after oct_cmake**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/488:283,detect,detectable,283,https://psicode.org,https://github.com/psi4/psi4/pull/488,1,['detect'],['detectable']
Safety,"## Description; Mostly, get psi4 up-to-date with pybind again, remove extraneous python linking, and sanitize chemps2 & pcmsolver test case names and ctest labels. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] add message-coloring module, useable by all, and used to warn about <4.9 GCC and highlight addon detection; - [x] make autodocing tools aware of the detci properties psivars that are now set py-side; - [x] re-work some list casting that (with pybind11 Nov 16 updates) broke our array options; - [x] dropped the versioned code object library in psi4/src/CM; - [x] documented python/pybind linking a bit; - [x] ctest `shorttests` gone and `minitests` in; * **User-Facing for Release Notes**; - [x] `dmrg` tests and label now accessed through `chemps2`; - [x] `pcmsolver` tests dropped ""pcm"" prefix; - [x] tests involving external code now accessible with label `addon` rather than `ext-exe-dep`; - [x] no longer linking to libpython. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/524:376,detect,detection,376,https://psicode.org,https://github.com/psi4/psi4/pull/524,1,['detect'],['detection']
Safety,"## Description; My debugging efforts indicate the problem with #1325 is that when attempting to clone a molecule with an atom with ZMAT and Cartesian coordinates, when that ZMatrixEntry atom is cloned, its `rto_`, `ato_`, `dto_` CoordEntries are Cartesian. This somehow leads to the parent ZMatrixEntry having `computed_` true, but not for `rto_` and friends. So, we somehow have a bug in molecule creation. To avoid creating new bugs, I want to understand exactly what is going on before trying to implement a fix. Unfortunately, this part of the code is not in great shape. I'll hopefully include a fix for the bug in here, but in the meantime, I'm submitting the code cleanup I'm doing as I try to follow this part of the code. We do not want `libmints` changes to escape a thorough vetting process. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Cleanup `CoordValue` and `CoordEntry`; - [x] Document `add_atom` and `add_unsettled_atom`; - [x] Actually fix #1325 . ## Checklist; - [ ] Is it worth adding a test for this bugfix? This should be a quick one to test, but it looks like we're seeing timeouts due to test overload again.; - [x] Tested this fixes #1325 ; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) obsessively - everything in ctest except the dft benchmarks and python-vibanalysis. ## Status; - [x] Ready for review; - [ ] Ready for merge. (After the question of whether to add a test.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1379:411,avoid,avoid,411,https://psicode.org,https://github.com/psi4/psi4/pull/1379,2,"['avoid', 'timeout']","['avoid', 'timeouts']"
Safety,"## Description; New PR for [PR#990](https://github.com/psi4/psi4/pull/990) to avoid a mess of merge conflicts. Thanks to @robertodr for the help. Provides a remedy for [#909](https://github.com/psi4/psi4/issues/909). `Molecule::mass` and `Molecule::Z` show inconsistent behavior for ghosts. This PR requires a new argument `bool zero_ghost` on the C++ side and optionally in the Python layer which gives a choice for behavior. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Required C++ argument `bool zero_ghost` for `Molecule::mass`; - [x] Optional python argument `bool zero_ghost` for `Molecule::mass` (default false); - [x] Required argument `bool zero_ghost` for `Molecule::Z`; - [x] Optional python argument `bool zero_ghost` for `Molecule::Z` (default true); - [x] Optional C++/python argument `bool zero_ghost` for `Molecule::center_of_mass`; - [x] Optional C++/python argument `bool zero_ghost` for `Molecule::inertia_tensor`; - [x] Check all C++ calls for ""intended behavior""; * **User-Facing for Release Notes**; - [x] New optional python arguments for `Molecule.mass()`, `Molecule.Z()`, `Molecule.center_of_mass`, and `Molecule.inertia_tensor`. ## Questions; - For clarity: ""previous behavior"" is that `mass` returns non-zero for ghost atoms (equivalent to `zero_ghost = false`), and `Z` returns zero for ghost atoms (`zero_ghost = true`).; - `Molecule::mass` and `Molecule::Z` on the C++ side now need to be passed either `True` or `False`, for whether or not to return zero for ghost atoms. I'm defaulting to previous behavior in most cases, though there are some (such as `optrot.cc`) that likely need to be changed. See the discussion in [#909](https://github.com/psi4/psi4/issues/909).; - May also need a logic pass of `center_of_mass` and `inertia_tensor` in a separate PR?; - Suggestions for changes C++ side or py-side are greatly encouraged. ; - This is a good chance to consider changing some `Z` calls to `tru",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1355:78,avoid,avoid,78,https://psicode.org,https://github.com/psi4/psi4/pull/1355,1,['avoid'],['avoid']
Safety,"## Description; OpenMP detection is very finely balanced to compensate for LAPACK demands, `libgomp` self aggrandizement, and psi4's need to sanely and transparently impose the psi4-compile-omp status on any derived plugins. Unfortunately, #1348 disturbed some of that for the particular case of plugins with fewer active languages than their parent psi4. A plugin (dfmp2) wasn't inheriting openmp from psi4 and thus was giving unknown openmp pragma warnings upon compile. This wasn't getting caught on linux because I was only checking that iomp5/gomp/omp weren't mixing, not that at least one was present. By happenstance, this did trigger an error on Mac in the course of building `psi4-dev`. This seems to patch things up on Linux. Will use this branch to try out Mac again. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1520:23,detect,detection,23,https://psicode.org,https://github.com/psi4/psi4/pull/1520,1,['detect'],['detection']
Safety,"## Description; Optimizes the integral transformation step of SAPT(DFT), in which the transformed MO needs to be written to the disk. The `STORE` scheme in `src/psi4/lib3index/dfhelper.cc` has problem in writing blocks of integrals efficiently, and this PR changes it to `direct_iaQ` to optimize the writing process. Also fixed a few memory related bugs and modified a few timer tags.; The deafult scaling scheme of SAPT(DFT) exchange-dispersion energy is now changed from `DISP` to `FIXED`. It scales the uncoupled Exch-Disp2 by 0.769848. Deeper details are discussed in the paper [Y. Xie, D. G. A. Smith, and C. D. Sherrill, J. Chem. Phys. **157**, 024801 (2022)].; The SAPT(DFT) procedure is also optimized for the case that `SAPT_DFT_FUNCTIONAL = HF`, i.e. running SAPT0 with the SAPT(DFT) driver, to avoid redundant SCF calculations. ## Todos. - [ ] Optimization of disk I/O in SAPT(DFT) integral transformation; - [ ] Fixed minor memory related bugs and modified timer tags; - [ ] Switched default exch-disp scaling scheme to FIXED (default factor 0.769848); - [ ] Optimization of SAPT(HF) procedure. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481:805,avoid,avoid,805,https://psicode.org,https://github.com/psi4/psi4/pull/2481,2,"['avoid', 'redund']","['avoid', 'redundant']"
Safety,"## Description; Part of #1144. DFOCC was already formatted in #797, so there's very few changes. DMRG we want to avoid formatting so can easily diff with the plugin in the CheMPS2 repo. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1392:113,avoid,avoid,113,https://psicode.org,https://github.com/psi4/psi4/pull/1392,1,['avoid'],['avoid']
Safety,"## Description; Part of #1144. Way too long to scroll through. No PRs open on occ, so safe to format. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1391:86,safe,safe,86,https://psicode.org,https://github.com/psi4/psi4/pull/1391,1,['safe'],['safe']
Safety,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Bump CheMPS2 to v1.8.4; - [x] Bump Libint to Ninja-able version, v1.2.1+2; - [x] Bump Pybind11 to v2.2.2. Note that this invokes symbol hiding, so ...; - [x] Include Jet's `PSI_API` macro to re-expose classes for plugins.; * **User-Facing for Release Notes**; - [x] Note that anyone wanting to re-use an `objdir` will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; - `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; - `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; - `<objdir> rm -rf external/upstream/pybind11`. ## Status; - [x] Ready for review; - [x] Ready for merge. @psi4/editors, these should be quick and uncontroversial. Getting this in would help the PR assembly line.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/950:562,detect,detectability,562,https://psicode.org,https://github.com/psi4/psi4/pull/950,1,['detect'],['detectability']
Safety,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Makes `psiapi.ipynb` build friendlier by not executing notebook (safe on Mac, highly uncertain on Linux) and by bypassing the nbsphinx altogether if not installed. Pre-executed notebook.; - [x] Starts a `conda/` dir and tidies the conda versioning file into it.; - [x] Suppress output from `_psi4_which` upon loading external exe, hopefully fixing psi4/psi4#656 ; * **User-Facing for Release Notes**; - [x] Set up Linux plugins through conda by preempting PluginCache. Plus docs.; - [x] skipping extern1/2 for py3.6 since fail. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/659:250,safe,safe,250,https://psicode.org,https://github.com/psi4/psi4/pull/659,1,['safe'],['safe']
Safety,## Description; Put helPME into build and testing. I know OpenMP detection isn't there and prob have to pass `FFTW_ROOT`. ## Todos. ## Questions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1357:65,detect,detection,65,https://psicode.org,https://github.com/psi4/psi4/pull/1357,1,['detect'],['detection']
Safety,## Description; Remove some unused files. Bump qcel -- the 0.19 isn't strictly needed but it'll avert some bad qcel+pydantic combinations in the wild. Bump v2rdm -- @hokru noticed an incompatibility after #2100 . . ## Questions; - [ ] May as well wait on this PR until determine if safe to update reference of fchk+dct test. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2128:282,safe,safe,282,https://psicode.org,https://github.com/psi4/psi4/pull/2128,1,['safe'],['safe']
Safety,"## Description; Repercussions from trying to fix #1986 . I think this fixes #1939, fixes #1978, fixes #2011. ## Todos; - [x] standardize pytests on `@using(""<addon>"")` rather than `@using_<addon>`. addon detection is more runtime than compiletime; - [x] start a smoke tests suite of running through `psi4 --qcschema` to live alongside psithon and psiapi; - [x] finally fix the need for pe/pcm to manually set fix_com/fix_reorient. I have a strategy locally.; - [ ] expand `Mol._initial_cartesian` to other ways to construct a Mol; - [x] snsmp2 1.0.4; - [x] pybind11 2.6.1; - [x] pcmsolver ~1.3.?~ 1.3 having some numerical issues with psi, so going back to a patched v1.2.1. ## Questions; - [ ] Opening the discussion to how to deal with methods that needs no_com/no_reorient/symmetry c1 _from_the_beginning_. Many of our present symmetry tolerant methods just need their parts consistent (e.g., dimer, monoA, monoB); whereas, cppe needs the exact input Cart to match the potfile. (Fun fact: a Mol can go from fix_com T -> F but not the reverse.) The sol'n in this PR is to carry the input Cartesians along as `Mol._initial_cartesians` (so long as not a variable or zmat Mol), which can then be used to reset through `set_geometry()` if the method demands it. This member is akin to the `Mol.EFP` object that gets carried along. Presently this is implemented for just the molecule constructors that psithon/psiapi `psi4.geometry()` and qcsk `Mol.from_schema()` use, but should probably be expanded if adopted. Thoughts on whether this is the best way to solve the problem?; - [ ] @robertodr PCMSolver: I'm only imposing c1, not fix_com/orient based on your slack reply. ok? I've removed all those lines from your ctest and pytest examples (except for alpha that needed it for matching). There's a new pcm mode test in test_addons_qcschema.py. It's writing the input file for pcm input, which is a little questionable in the schema-running world, but it's working for now. Any concerns?; - [ ] @maxsche",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2037:204,detect,detection,204,https://psicode.org,https://github.com/psi4/psi4/pull/2037,1,['detect'],['detection']
Safety,"## Description; Requiring libefp was rather a holdover from the early days of code-in-repo add-ons. This PR makes it slightly easier on packagers and enables us to have only three required compile-in dependencies in the figure in the paper (libint, blas/lapack, pybind11). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `#ifdef`-ing the EFP code probably could have been done to varying degrees of thoroughness. But since EFP is tied into `P::e` _and_ Molecule _and_ it's own interface, none of which I wanted to rexamine, this is the one that requires a minimum of recompilation if you change `ENABLE_libefp` ON/OFF. When OFF, the EFP object still exists, but only the constructor, destructor, and nfragments method (that returns 0 fragments). This way the driver needs no mods (which is a good thing, since we can't `#ifdef` python).; - If you build w/o libefp and try an efp-containing molecule, throws a runtime error with text `EFP fragments detected but are not available`.; - [x] slight fix of passing `pybind11_DIR` to plugin cache. helps with mixed install/staged psi4/pybind11. we'll see how this goes, as I'm not sure it's the best fix.; - [x] more thoroughly test cmake variable for PCMSolver path (`if ""@ENABLE_PCMSolver@"".upper() in [""1"", ""ON"", ""YES"", ""TRUE"", ""Y""]`); - Hope this helps a bit on packaging, @susilehtola ; * **User-Facing for Release Notes**; - [x] Psi4 can be build without libefp add-on. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/623:1015,detect,detected,1015,https://psicode.org,https://github.com/psi4/psi4/pull/623,1,['detect'],['detected']
Safety,"## Description; Rewrite of CCHBAR's Wabei algorithm for UHF reference. The old algorithm did quite a bit of unnecessary I/O. The replacement has been designed to compute as many sub-intermedates in the target order to avoid storage of additional intermediate terms, and to avoid expensive sorting of ov^3 buffers. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] TDC has requested I take any integral sorts that were required within the Wabei_XXXX functions and move them to some setup function so that they are all preformed before any of the functions run. ; - [x] I also need to remove the first commit that I added from #513 that let me build + run on our cluster. ; * **User-Facing for Release Notes**; This change results in a performance boost, but no end-user changes should be noticed. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/540:218,avoid,avoid,218,https://psicode.org,https://github.com/psi4/psi4/pull/540,2,['avoid'],['avoid']
Safety,"## Description; Several general fixes, esp. for PsiAPI mode. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Turning off gnu C++ extensions. This means that `-std=gnu++11` will never get passed, even if CMake can detect that your compiler supports it. Instead will get a `-std=c++11` from pybind11 and possibly another `-std=c++11` if cmake detects that your compiler supports.; - [x] Put docs in order wrt threading; - [x] Make `psi4/__init__.py` pay attention to `PSI_SCRATCH`. Otherwise scratch is non-adjustible in PsiAPI mode.; - [x] Default to serial execution in `psi4/__init__.py`. Can be overruled in Psithon mode through `-nN` or `set_num_threads(N)`. Can be overruled in PsiAPI mode through `set_num_threads(N)`.; - [x] Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627:280,detect,detect,280,https://psicode.org,https://github.com/psi4/psi4/pull/627,2,['detect'],"['detect', 'detects']"
Safety,"## Description; So in the course of working on DDD/pydantic, a fix I needed triggered the dreaded ""circular import"" error, which anyone who's tried to alter the driver's fragile import structure has probably seen, too. Being sick of this, I located https://medium.com/brexeng/avoiding-circular-imports-in-python-7c35ec8145ed with advice to do `from .driver import energy`, not `from psi4.driver.driver import energy`. So that's the first pass on the driver imports. This fixes my circular import problem and makes it easier to find others. Since all the imports are churned anyways, I set up `isort` (that is, you can run isort on the repo, not that it's enforced on the repo). This is a utility (https://pycqa.github.io/isort/index.html) that sorts all the imports at the top of the file into stdlib, third_party, and first_party blocks and then alphabetizes the imports within. It also effectively tests the fragility of the import structure by jumbling them all into alphabetical order. Attempts in past years to run isort led to circular imports and a retreat. This time I was able to fix the single one that came about. Third pass is that I ran `autoflake` on the driver to remove unused stdlib imports. It also removed some `pass` on empty fns that weren't needed because the docstring suffices for the syntax. ## User notes; - [x] the import structure has changed. you might need to add standard library imports to your input files if you use them (e.g., `import math` before `math.pi`) that previously were preloaded by psi4. ## Dev notes & details; - [x] switched import style to relative imports, ran isort, ran autoflake; - [x] actual material changes:; * stop importing `molutil` into `sapt_proc`. this is the main one that allows killing off the embarrassing `temp_circular_import_blocker` fn. https://github.com/psi4/psi4/compare/master...loriab:psi4:import_slayer?expand=1#diff-f3e93ffa6125dd1f79abad7630bbf259bb1daeee89e983d2889b68af6038875aL35; * delay loading fisapt_proc until runti",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3033:276,avoid,avoiding-circular-imports-in-python-,276,https://psicode.org,https://github.com/psi4/psi4/pull/3033,1,['avoid'],['avoiding-circular-imports-in-python-']
Safety,"## Description; Some Psi4-side fixes to getting @bennybp's simint AddOn added. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Includes all commits of #533 ; - [x] Temporarily based off private repo https://github.com/loriab/simint branch config6 until the integration settles down, and we can return to tarballs. Note that if you want to test this branch, you may need to supply your GH credentials during the build to clone simint.; - [x] Adds all the pre-built detection, target referencing, docs, standardized variable names, tests that we expect from an addon to simint; - [x] Continued general documentation on addons.; - [x] Modestly tested- static and dynamic on Linux, dynamic on Mac; * **User-Facing for Release Notes**; - [x] New integral library available with `-DENABLE_simint`. ## Questions for @bennybp ; - [ ] There's some questions in external/upstream/simint/CMakeLists.txt; - [ ] I've made the simint on my acct private and just added you and some core developers who may want to test it. If you don't mind it being public, as a temp repo, that'd be a little easier.; - [ ] There are spots where I supply at most separate home, docs, and source links for addons. I've got your website, http://www.bennyp.org/research/simint/, for all three at the moment, so let me know if there are more specifics.; - [ ] I filled in the installing and configuring sections of simint.rst according to the template. Other addons (http://psicode.org/psi4manual/master/interfacing.html) often have middle sections about interacting with the code. Fill in anything you like.; - [ ] Got the following unexpected failing test cases on Linux and partially confirmed on Mac, all segfaulted. Could you take a look? None are in quicktests.; ```; The following tests FAILED:; 	 16 - cbs-xtpl-wrapper (Failed); 	144 - dft-b2plyp (Failed); 	269 - pywrap-checkrun-rhf (Failed); 	270 - pywrap-checkrun-rohf (Failed); 	271 - pywrap-checkrun-uhf (F",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625:531,detect,detection,531,https://psicode.org,https://github.com/psi4/psi4/pull/625,1,['detect'],['detection']
Safety,"## Description; The Hessian code can be cleaned up by using the SCF class's hessian-vector products. To avoid the need to cast pointers inside the orbital response code, this PR specializes the response class for each reference type, and removes some junk symmetry code. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Specialize response code by reference; - [x] Simplify dipole derivative handling; - [x] Remove symmetry code from response; - [x] Use the `Hx` functions from the SCF class to solve CPHF. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1550:104,avoid,avoid,104,https://psicode.org,https://github.com/psi4/psi4/pull/1550,1,['avoid'],['avoid']
Safety,## Description; The IWL integrals are calculated but apparently not needed for DF-DCFT. Added IF/ELSE clause to avoid this. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/912:112,avoid,avoid,112,https://psicode.org,https://github.com/psi4/psi4/pull/912,1,['avoid'],['avoid']
Safety,"## Description; The PCMsolver interface takes as input nuclear charges (`mol.Z(i)`) to identify the elements, but did not account for ghost atoms.; Change asks now for the atomic number and thus also avoids`mol.fZ(i)=0`. **This forms the cavity also around the ghost atoms**, which I think is the expected behaviour. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] fixes #1656 . ## Checklist; - [x ] `ctest -R pcm` passes; - [x] The `charges` array no longer contains zeros for ghost atoms (manual inspection). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1977:200,avoid,avoids,200,https://psicode.org,https://github.com/psi4/psi4/pull/1977,1,['avoid'],['avoids']
Safety,"## Description; The `JK_deriv2` function exists to compute the overlap-derivative-times-TEI part of the right side of the CPHF equation. It's a J-term and a K-like term. with overlap derivative integrals instead of a density.[1] The previous algorithm to do this first computed the alpha spin part in one function call, and then the beta spin part in another function call. This approach was redundant. The first function call had all the intermediates _necessary_ to compute the beta part, but didn't use them. As a result, the function re-computed JK. This PR refactors `JK_deriv2` so it computes both spin cases in a single function call. [1] = There's also a Vx term, but its implementation was both unused and buggy. Now it's just unused. Trying to use it in the _old_ way would be even more redundant. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The UHF hessian algorithm has been slightly adjusted, which should lead to slightly faster computations. Please report any errors. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Refactored `JK_deriv2` to compute both spin cases in a single function call.; - [x] Makes UKS LDA hessians much less ugly.; - [x] Makes `JK_deriv2` comply with `compute_Vx`'s expected function signature . ## Checklist; - [x] `ctest -R scf-hess` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2994:392,redund,redundant,392,https://psicode.org,https://github.com/psi4/psi4/pull/2994,2,['redund'],['redundant']
Safety,"## Description; The final step of the CompositeJK saga. The previous PR in this chain, https://github.com/psi4/psi4/pull/2833, introduced the CompositeJK framework to Psi4, a class by which to enable arbitrary mixing and matching of different algorithms for constructing the J and K matrices separately, with front-end changes to match. The big issue with the current formulation of CompositeJK, is that every single separate J or K build algorithm in Psi4 (currently DF-DirJ, LinK, and COSX) is contained within CompositeJK itself. This runs a high risk of CompositeJK becoming monolithic, especially as more separate J/K build methods are added (e.g., CFMM). This PR is meant to be the solution to that issue. Rather than storing every separate J or K build algorithm in CompositeJK itself, they are now implemented as derived classes of a new base class, SplitJK. SplitJK features the `build_G_component` member function, which derived classes of SplitJK then implement to execute their own algorithm for building one of J or K. CompositeJK is reworked to match, featuring a pair of shared_ptrs to SplitJK classes, one representing the J algorithm, and one representing the K algorithm. Actual machinery for computing J or K, as well as other functionalities such as header printing, is then done through calling corresponding functions from the SplitJK pointers. My thought is for this PR to be added in v1.9. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [x] Implements the SplitJK class for representing algorithms that build one of J or K.; - [x] Refactors DF-DirJ, LinK, and COSX as derived classes of SplitJK.; - [x] Reworks the CompositeJK class to execute in terms of SplitJK derived classes. ## Questions; - [ ] Is passing the eri_computers variable to COSX::build_G_component() as an argument acceptable, even though it is unused in that function? My logic, for now, is that the SplitJK implementation allows for a universal interface for calling different SplitJK der",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2955:550,risk,risk,550,https://psicode.org,https://github.com/psi4/psi4/pull/2955,1,['risk'],['risk']
Safety,"## Description; The main things to get over our docs troubles happened elsewhere:; * hosting the built `html/` through GH pages avoids the `/` anchors that netlify was dropping into our href links that were in turn confusing the psicode.org redirects (https://github.com/psi4/psicode-hugo-website/blob/master/netlify.toml#L14) and making links seem broken for psicode.org/psi4manual .; * the combination of progressing Sphinx development and stagnant cloud theme development (from which the sphinx_psi_theme is derived) eventually robbed us of the ""search"" bar and the homing logo. That got minimally revived through https://github.com/psi4/sphinx-psi-theme/commit/feda2119994519c6dc1eb0979686c9cdbf916acc , so use the v1.1 now. But there's a few modest improvements here, especially to allow anyone so inspired to switch the docs theme and figure out new customizations. Apart from a certain fondness for the colors and an insistence that tables like https://psicode.org/psi4manual/master/introduction.html#id59 not be mangled, I'd be pleased if anyone wanted to overhaul the docs theme. Some things to know:; * psi4 colors and specializations are https://github.com/psi4/sphinx-psi-theme/blob/master/sphinx_psi_theme/themes/sphinx_psi_theme/theme.conf#L37; * to use a different theme, pass `-DSPHINX_THEME=another_theme` to cmake (or edit it in the cache); * build with `cmake --build . --target sphinxman`; * built docs will be in `<objdir>/doc/sphinxman/html/`. that html dir can be tarred and sent anywhere to load in a browser. ## Dev notes & details; - [x] the two sphinx extensions that were in the sphinx_psi_theme are now stored here in the repo. this lets them be used by any theme, which is important for the QCVariables one that otherwise emits thousands of warnings.; - [x] more logic around `@SPHINX_THEME@` in the controlling docs/sphinxman/source/conf.py.in so that one can use options and configuration particular to different themes. feel free to add more. tried themes are psi, clo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3053:128,avoid,avoids,128,https://psicode.org,https://github.com/psi4/psi4/pull/3053,1,['avoid'],['avoids']
Safety,"## Description; The resurrection of #2543. This PR refactors my LinK code (#2359) and Zach's semi-numerical K (#2567) code into the CompositeJK framework (to allow mixing and matching of J and K types). The DirectDFJ implementation here is derived from Zach's semi-numerical K PR. This framework is robust and allows for the rapid development of new J/K methods and combinations in the future, and avoids code duplication. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Creates composite JK framework to allow for mixing and matching of different J/K types; - [x] Makes LinK usable with the DirectDFJ algorithm. ## Questions; - [x] To call my LinK code, `SCF_TYPE` is set to `LINK`, should it be `DFJ_LINK` instead?. ## Checklist; - [x] Tests added for any new features; - [x] Passing pytests for COSK (from Zach) and LinK; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2588:398,avoid,avoids,398,https://psicode.org,https://github.com/psi4/psi4/pull/2588,1,['avoid'],['avoids']
Safety,"## Description; The support for matrices with `symmetry() != 0` is flawed in several places in the matrix class. While *some* operations are only valid if the matrix is totally symmetric, most do not have this requirement. . These issues have long gone unnoticed because the majority of places where the object is used the quantity will be totally symmetric. I started noticing these flaws while working on TDDFT which will require most of the changes made here in order to work properly. ## FYI; - Comments/error messages/variables names have been updated to make meaning more precise.; - In general the non-zero block of the matrix found at `matrix_[h]` has shape `{rowspi_[h], colspi_[h^symmetry_]}` **not** `{rowspi_[h], colspi_[h]}`. The two are coincidentally the same when `symmetry_ == 0` (This was the cause of many segfaults/incorrectly raised errors).; - I have aggressively applied DRY to avoid issues. Example (`add`, `subtract`, and `axpy`) all lead to different calls to `C_DAXPY`, however `axpy` computed the size incorrectly and led to a segfault. ; - I have added unit tests for the matrix class to avoid reintroducing any of the bugs I root out. ## Todos; - [x] python bindings for non-totally symmetric constructor; - [x] consolidate `axpy` type operations, fix size issue; - [x] consolidate `gemm` type operations, fix A/B/C block logic. ## Questions; - [ ] If anyone has noticed problems, missing/bugged functionality that I have missed now is a good time to point them out. . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1383:901,avoid,avoid,901,https://psicode.org,https://github.com/psi4/psi4/pull/1383,2,['avoid'],['avoid']
Safety,"## Description; The user-supplied occupation arrays weren't sanity checked, which caused segfaults. This PR makes psi4 give an error message instead. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/602:60,sanity check,sanity checked,60,https://psicode.org,https://github.com/psi4/psi4/pull/602,1,['sanity check'],['sanity checked']
Safety,"## Description; This PR aims to implement computation of multipole potential integrals up to a desired; order. Such integrals are used for EFP and PE (#1401), where for EFP, the integrals; are already implemented, but are always computed through third order (octupoles). For PE, often parameters are only available up to quadrupoles, so I'd like to avoid computation; of higher order integrals all the time. ~~The code is copied from `efpmultipolepotential`, so probably one should decide on whether; to keep `efpmultipolepotential` or to use the new code to avoid code duplication.~~. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] enable octupole moments as well; - [x] change ordering of cartesian components to Cartesian; - [x] use `multipolepotential` for EFP (`ao_efp_multipole_potential` calls `ao_multipole_potential` and does the remapping of components in `mintshelper.cc`); - [x] remove `efpmultipolepotential.{hh,cc}`; - [x] tests of the actual integrals using finite differences. ## Questions; - [x] ~~Switch to `multipolepotentials` for EFP in another PR?~~. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1657:349,avoid,avoid,349,https://psicode.org,https://github.com/psi4/psi4/pull/1657,2,['avoid'],['avoid']
Safety,"## Description; This PR changes the code to fix the majority of combinations of `SCF_TYPE`/`SCF_SUBTYPE`/`SCREENING` keywords which were previously broken. It was discovered that there were a lot of combinations of `SCF_TYPE`, `SCF_SUBTYPE`, and `SCREENING` keywords (e.g., `SCF_TYPE = {CompositeJK}` with `SCREENING = NONE`) that would break upon use, either with an exception or with a hard error such as a segfault. PR https://github.com/psi4/psi4/pull/2978 added testing to detect these broken combinations. This PR actually fixes the broken combinations detected through the added test. The most notable change as a result of fixing these issues is the handling of how certain variables within the `TwoBodyAOInt` class are initialized. To enable universal support of JK builds with `SCREENING = NONE`, an option has been added to manually call the `TwoBodyAOInt::create_sieve_pair_info()` function via the new wrapper function `TwoBodyAOInt::initialize_sieve()`. Multiple JK builds rely on values of variables initialized via `create_sieve_pair_info()` , and `initialize_sieve()` is now used to initialize the required variables if `SCREENING = NONE` is set. In this way, `SCREENING = NONE` can exist with the benefits it provides, while still working with all JK builds. Also, changes are made to ensure that no screening actually occurs in JK builds when `SCREENING` is set to `NONE`. In line with the above, some tests have been expanded. `test_comprehensive_jk_screening.py` has been changed to account for the `SCF_TYPE`/`SCF_SUBTYPE`/`SCREENING` combinations that were fixed. `test_erisieve.py` has been updated to more thoroughly test `SCREENING=NONE`. It is worth noting that, unfortunately, `TwoBodyAOInt::initialize_sieve()` must be defined per integral engine, and so the fixes of this PR only work with Libint2. The issues this PR tries to fix, still persist if Simint is used instead. ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [X] Adds a new function to",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3060:478,detect,detect,478,https://psicode.org,https://github.com/psi4/psi4/pull/3060,2,['detect'],"['detect', 'detected']"
Safety,"## Description; This PR contains a refactored version of the Dimension class in which data is no longer stored in a `int*` array but on `std::vector<int>`. This eliminates a potential bug of the old code (memory was potentially freed even for a zero-length vector). After working on this PR I realized that the dependency on `int*` runs pretty deep in Psi4. It affects major libraries (dpd, libtrans, libfock,...). So I still had to leave a way to get a `int*` to the data stored in the class member `std::vector<int>` object. Things are slightly complicated also by the fact that Wavefunction exposes Dimension objects via functions that return constant references. Some work was done to reduce the number of Dimension->int* casts. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] Modernize the Dimension class.; - [X] Fixes a potential problem with memory.; - [X] Adds exceptions to operations that could potentially involve Dimension objects of different dimensions.; - [X] Avoids exposing non-const Dimension objects.; - [X] Refactors MatrixFactory to use Dimension objects. ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/571:1043,Avoid,Avoids,1043,https://psicode.org,https://github.com/psi4/psi4/pull/571,1,['Avoid'],['Avoids']
Safety,"## Description; This PR enables CCSD calculations with the PCM in the [PTED (Perturbation-To-Energy-and-Density) approximation](http://dx.doi.org/10.1063/1.3245400). The PCM potential is calculated from the CCSD _density_. Thus macroiterations are introduced to solve the CCSD amplitude **and** multiplier equations, obtain the CCSD density and update the PCM potential. @jH0ward the macroiterations are handled in the Python layer. . ~There are two test cases, both currently failing, and the code is quite ugly.~. ## Todos; * **User-Facing for Release Notes**; - [x] For SCF, the PCM potential is now added on top of the Fock matrix in `form_F()`. I added a `std::vector<SharedMatrix> external_potentials_` to the HF base class. External potentials are stored there and then added on top `Fa_` and `Fb_` in the implementation of `form_F()` for the RHF, UHF and ROHF subtypes. This was necessary to get ROHF to work with PCM.; - [x] `compute_E()` for the RHF, UHF, ROHF and CUHF subtypes of the abstract HF type now use the one- and two-electron matrices to compute the energy, instead of `Fa_` and `Fb_`. This avoids ambiguities when external potentials, such as PCM, have been/will have to be added to the Fock matrix. ; - [x] CCSD with the PCM in the PTED approximation.; - [x] Final report of energy clearly reports polarization and correlation components for the PTE and PTED schemes.; - [x] Added tests for RHF and UHF references.; - [x] Updated version of PCMSolver. ## Known problems; - The HeH+ test case (`pcmsolver-ccsd-pted-heh+`) doesn't work when setting a ROHF reference. I suspect the problem is in the [`update_Fock_matrix_rhf` function in `ccdensity/ccdensity.cc`](https://github.com/psi4/psi4/pull/810/files#diff-ed90974ac2a85f17445ff27956c7d6dfR791). ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/810:1112,avoid,avoids,1112,https://psicode.org,https://github.com/psi4/psi4/pull/810,1,['avoid'],['avoids']
Safety,"## Description; This PR entirely removes the Obara-Saika code for one-electron integrals. Note that, as explained in #2473, the *unique* `PseudoSpectralInt` functionality (erf integrals) is not used anywhere in Psi right now, so it can be safely removed. Once the problems with L2 (which currently put #2473 on hold) are sorted out, this functionality will become available. **Merge button click** reserved for @andysim. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Remove `osrecur.{cc,h}`; - [x] Remove `PseudoSpectralInt` (will be reconciled in #2473). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2517:239,safe,safely,239,https://psicode.org,https://github.com/psi4/psi4/pull/2517,1,['safe'],['safely']
Safety,"## Description; This PR exposes the two functions `compute_orbitals` and `compute_density` from `CubeProperties` to the Python layer. This allows for more flexible dumping of cube files. Example Code:; ```Python; import psi4; import numpy as np. def test_cube_files(expected, computed):; expected = np.genfromtxt(expected, skip_header=9, skip_footer=1); computed = np.genfromtxt(computed, skip_header=9, skip_footer=1); np.testing.assert_allclose(expected, computed, atol=1e-14). mol = psi4.geometry(""""""; O 0 0 0; H 0 0 1.795239827225189; H 1.693194615993441 0 -0.599043184453037; symmetry c1; units au; """"""). psi4.core.be_quiet(); psi4.set_options({'basis': ""sto-3g"",; 'scf_type': 'pk',; 'cubeprop_tasks': ['density', 'orbitals']}); scf_e, wfn = psi4.energy('SCF', return_wfn=True); psi4.cubeprop(wfn). cubegen = psi4.core.CubeProperties(wfn). dt = wfn.Da(); dt.add(wfn.Db()); cubegen.compute_density(dt, ""hf_density""). # obtain alpha coefficients; orbs = wfn.Ca_subset(""AO"", ""OCC"").np; # select the two highest occupied orbitals; occs = orbs[:, -2:]; occs_pm = psi4.core.Matrix.from_array(occs); cubegen.compute_orbitals(occs_pm, [0, 1], [""homo-1"", ""homo""], ""orbital""). test_cube_files(""Dt.cube"", ""hf_density.cube""); test_cube_files(""Psi_a_5_5-A.cube"", ""orbital_2_homo.cube""); test_cube_files(""Psi_a_4_4-A.cube"", ""orbital_1_homo-1.cube""); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] export functions . ## Questions; - [x] ~~Should some tests be added for this? Like in the example code above to be 100% safe?~~ I added a simple test like in the example script to be safe. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1917:1564,safe,safe,1564,https://psicode.org,https://github.com/psi4/psi4/pull/1917,2,['safe'],['safe']
Safety,"## Description; This PR fixes a bug in the UHF gradients for systems with no beta electrons (1-electron systems).; On line 463 of `psi4/src/psi4/scfgrad/jk_grad.cc` I couldn't avoid skipping this operation because this buffer is read somewhere else (and it practically does not matter for 1-electron systems).; ```C++; // > Stripe < //; psio_->write(unit_b_, ""(A|ij)"", (char*)Aijp[0], sizeof(double) * np * nb * nb, next_Aijb, &next_Aijb);; ```; ## Todos; - [x] Fixes logic in `scf_grad` code. ## Checklist; - [x] Added a test of the UHF gradient for H2+.; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2344:176,avoid,avoid,176,https://psicode.org,https://github.com/psi4/psi4/pull/2344,1,['avoid'],['avoid']
Safety,"## Description; This PR follows the change of PR #2064. To avoid compilation errors for any downstream packages, `Lagrangian()` and `X()` in the `Wavefunction` class have been marked deprecated instead of removing them. Future code should use lowercase `lagrangian()` and `set_lagrangian()` to obtain and set the orbital Lagrangian matrix (both C++ and Python), respectively. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2066:59,avoid,avoid,59,https://psicode.org,https://github.com/psi4/psi4/pull/2066,1,['avoid'],['avoid']
Safety,"## Description; This PR implements the partial Cholesky orthogonalization procedure I've recently described in https://arxiv.org/abs/1911.10372, which can be used to avoid pathological linear dependencies in the basis set. This is the simple version of the algorithm which just hides the pathological functions; the more sophisticated one is already available in ERKALE but it is limited to fixed geometries. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Partial Cholesky decomposition implemented; - [x] Calculation of basis function extents via `r^2` value implemented; - [x] Basis functions sorted so that steep ones get treated first by the decomposition. ## Questions; - [x] How to handle the sorting of basis functions in the presence of symmetry? AFAIK each SO basis functions is a superposition of identical functions on different atoms; this means that the corresponding symmetry-blocked `r^2` values could just be one of these.; - [x] Although matrix.cc already implements pivoted Cholesky, it's also available in LAPACK as `dpstrf()`. Maybe the implementation should be replaced with a call to LAPACK?; - [ ] Would it be possible to make Psi4 drop the irrelevant shells altogether from the basis set to make calculations more efficient? This would need to be done at every geometry... ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1760:166,avoid,avoid,166,https://psicode.org,https://github.com/psi4/psi4/pull/1760,1,['avoid'],['avoid']
Safety,"## Description; This PR is an effort to move towards canonical C++11 usage: ; 1. it removes use of `new` when creating `std::shared_ptr`s in favor of `std::make_shared`.; 2. it uses `auto` on the left-hand side of the `std::shared_ptr` declarations.; 3. it replaces occurrences of `NULL`, signalling the null pointer, with `nullptr`.; These are changes suggested by the modern C++ best-practices and are explained in detail in Scott Meyers' [Effective Modern C++]. . ## Why?; #### Prefer `std::make_shared` to direct use of `new`; Using `std::make_shared`:; 1. Reduces code verbosity, especially when coupled with `auto`:; ```; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); // Type information written down 3 TIMES!!!; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!!!!; ```; 2. Ensures exception safety and prevents resource leaks.; 3. Improves efficiency:; ```; // Performs TWO allocations; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); ; // Performs ONE allocation; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); ; ```. _Reference_: Item 21 in [Effective Modern C++].; #### Prefer `auto` to explicit type declarations; Using `auto` reduces and/or avoids:; 1. Verbosity in variable declarations:; ```; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!; ```; 2. Problems with uninitialized variables. `auto` works like template type deduction, hence the right-hand side of the declaration **needs to have** an initializer:; ```; int x1; // fine, but initialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized; ```; 3. Problems with unintended type casts and type mismatches that are hard to impossible to catch:; ```; s",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/836:970,safe,safety,970,https://psicode.org,https://github.com/psi4/psi4/pull/836,1,['safe'],['safety']
Safety,"## Description; This PR is something of an independent project, although it is also a precursor of the continuation of https://github.com/psi4/psi4/pull/2695, as agreed upon by discussion there. This PR completely eliminates the `ERISieve` class, and replaces all of its old functionalities with that of `TwoBodyAOInt`. `ERISieve` is a class in libmints that does many of the same things as `TwoBodyAOInt`. The amount of features that `ERISieve` has, that `TwoBodyAOInt` doesn't, is minimal. It's really just absolute redundancy. Currently, `ERISieve` _only_ finds use within the PKJK class and its subalgorithms. As mentioned, this PR eliminates `ERISieve` and replaces it with `TwoBodyAOInt` in all of the former's previous use cases. Any previously-utilized functionality that was present in `ERISieve` and not in `TwoBodyAOInt` (a couple functions determining basis function significance) were added to `TwoBodyAOInt`. Furthermore, any adjustments needed to support `TwoBodyAOInt` within the PKJK code were made. With all of this, `ERISieve` was also ripped out of the code entirely. Maybe it could go into the attic. ## User API & Changelog headlines; - [X] The core.ERISieve class has been removed, along with its associated functions core.ERISieve.build and core.ERISieve.shell_significant. The removed functionalities, specifically shell_significant, can be accessed via the construction of a TwoBodyAOInt object. ## Dev notes & details; - [X] The `ERISieve` class in libmints has been removed from Psi4 and replaced with `TwoBodyAOInt`.; - [X] Functionalities in `ERISieve` that were not in `TwoBodyAOInt` and were required in the code, were added to `TwoBodyAOInt`.; - [X] The PKJK files have been adjusted as necessary to support the use of `TwoBodyAOInt`. ## TODO; - [ ] Remove ERISieve from all other external plugins (currently focusing on v2rdm_casscf). ## Questions; - [ ] I guess `ERISieve` can go into the attic now?. ## Checklist; - [X] Tests added for any new features; - [X] [All ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2933:518,redund,redundancy,518,https://psicode.org,https://github.com/psi4/psi4/pull/2933,1,['redund'],['redundancy']
Safety,"## Description; This PR is the first in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the ch",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547:214,risk,risk,214,https://psicode.org,https://github.com/psi4/psi4/pull/2547,1,['risk'],['risk']
Safety,"## Description; This PR is the second in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object, with PR #2547 being the first such PR. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. The primary purposes of this PR are twofold:; 1. First, this PR introduce the shell_significant() framework to the JK class. The shell_significant() framework starts with a shell_significant() virtual function that exists in the base JK class. The shell_significant() function can then be redefined specifically for different JK derived classes as needed. The existence of shell_significant() provides a unified framework for performing screening for any JK method, and it also provides the method by which density screening can be added directly to the relevant JK classes.; 2. Second, this PR uses the shell_significant() framework to reimplement screening for certain JK methods. Most significantly, as implied in the first point, the biggest change in this regard was the removal of shell_significant_density() from TwoBodyAOInt into the domain and its reimplementation into the DirectJK shell_significant() definition. With this change, density screening is now the domain of individual JK classes rather than the TwoBodyAOInt class, which was one of the primary goals of this overall refactor PR set in the first place. Additionally, another method that was subject to slight changes from the shell_significant() framework was the Yoshimine PKJK algorithm, in which its test for shell significance was implemented using the shell_significant() framework. ## Notes; I wanted to outline what the next steps were for this chain of PRs, since this one accomplishes one of the main goals of the refactor in the first place:;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2695:254,risk,risk,254,https://psicode.org,https://github.com/psi4/psi4/pull/2695,1,['risk'],['risk']
Safety,"## Description; This PR moves the Polarizable Embedding (PE) tests using CPPE py-side in `test_cppe.py`.; The tests can now be run independently of the configure step (`ENABLE_cppe`) due to runtime detection of CPPE.; As such, the CI pipeline will run the PE tests from now on 😄 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Move tests; - [x] Nuke old (cmake) tests. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2140:198,detect,detection,198,https://psicode.org,https://github.com/psi4/psi4/pull/2140,1,['detect'],['detection']
Safety,"## Description; This PR removes some convergence checks in the `dct` module that are redundant (when formulated correctly) and currently not implemented correctly. In the current `dct` code, my threaded computations with near linear dependencies were taking a variable number of iterations to converge, due to the condition `update_scf_density_RHF() < orbitals_threshold_` being false. That check is _intended_ to enforce convergence of the orbitals, which change iteration-to-iteration. `update_SCF_density_RHF` returns a measure of how much the reference density changed but does not treat it with an orthogonalizer, so in the near linearly-dependent case, numerical noise leads to the computation proceeding even after all other convergence metrics are flat. Given the choice between fixing the check or removing it, this PR removes it.; * In the case where orbitals are optimized to _satisfy a commutator equation_, all of our orbital convergence metrics are motivated by SCF. We already have the SCF check for small orbital residual elsewhere in the code. We don't check that the absolute change in the density is small in the SCF case, so we shouldn't check it here, either.; * In the case where orbitals are optimized to _minimize the energy_, there is no theoretical justification for this check. We have existing checks that the residual of the orbital gradient is small. ## Todos; - [x] Removes an unnecessary, buggy `dct` convergence metric. ## Checklist; - [x] `dct` tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2381:85,redund,redundant,85,https://psicode.org,https://github.com/psi4/psi4/pull/2381,1,['redund'],['redundant']
Safety,"## Description; This PR updates options for CPPE (new release is out, including linear-scaling FMM); and adds PE(ECP) repulsive potentials to avoid electron spill-out (https://doi.org/10.1021/acs.jctc.9b01162). ~**Still work in progress....**~. Thanks @loriab for helping with the basis set customization!. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] options for FMM; - [x] bump CPPE version; - [x] option to enable PE(ECP); - [x] add basis set file for ECPs; - [x] add tests for PE(ECP). ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2025:142,avoid,avoid,142,https://psicode.org,https://github.com/psi4/psi4/pull/2025,1,['avoid'],['avoid']
Safety,"## Description; This adds new DF basis files for dzvp. dgauss-dzvp-autoaux was generated using the autoaux program (courtesy Susi Lehtola). This is a short-term solution for the current problem that there is no working DF basis for dzvp, as it is an all-electron basis for elements going beyond Kr. dgauss-dzvp-mix contains a mixture of the previous default, def2-qzvpp-jkfit for H-Br, and dgauss-dzvp-autoaux for heavier elements. The purpose of this DF basis is to avoid the performance decrease (without affecting accuracy) that comes with using dgauss-dzvp-autoaux for all elements. `basislistother.py` has also been updated to use dgauss-dzvp-mix for jkfit and dgauss-dzvp-autoaux for rifit. ## Status; - [x] Ready for review; - [x] Ready for merge. ## Benchmark of basis sets and DF basis sets for conformational energies; [combined-results.pdf](https://github.com/psi4/psi4/files/6167929/combined-results.pdf)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2134:467,avoid,avoid,467,https://psicode.org,https://github.com/psi4/psi4/pull/2134,1,['avoid'],['avoid']
Safety,## Description; This factors the code in the `CMakeLists.txt` of the various plugin templates into one function to avoid; copy/paste. Within this function it then ensures that `CMAKE_PREFIX_PATH` is properly passed to each build in turn allowing the user to build plugins and use externally built Psi4 dependencies. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adding additional plugin templates to the build system is dramatically simplified; * **User-Facing for Release Notes**; - [x] You can now use external versions of libraries that Psi4 normally compiles with plugins. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/582:115,avoid,avoid,115,https://psicode.org,https://github.com/psi4/psi4/pull/582,1,['avoid'],['avoid']
Safety,"## Description; This is a part of *Psi4* porting to Windows (#933). The last element of `array` is `array[n-1]`, so the access of `array[n]` is not correct:; https://github.com/psi4/psi4/blob/62bb956ccfb38cad1bef7e6227aac70ddb1172f7/psi4/src/psi4/libmoinfo/moinfo_base.cc#L281-L285; It is better to use pointer arithmetics: `array + n`. This is not a bug, just it gives a false positive in memory error detection. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix memory error in `MOInfoBase::convert_int_array_to_vector`. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1480:403,detect,detection,403,https://psicode.org,https://github.com/psi4/psi4/pull/1480,1,['detect'],['detection']
Safety,"## Description; This is a stab at fixing #537. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Kills off `BLAS_LIBRARIES`, `LAPACK_LIBRARIES`, `LAPACKBLAS_LIBRARIES` in favor of finding math libs, making a target for them and installing it into the stage tree. By using a target instead of a var:; * Any linker `-Wl,` directives (start/end-group, as-needed) should be invulnerable to CMake link line optimization that rearranges them beyond usefulness.; * targets can be passed into externals so that psi4 and externals use exactly same math libs.; - [x] Same thing with HDF5. Both now in `external/common`; - [x] Added `-liomp5` into MKL detection.; - [ ] Haven't dealt with GCC+MKL OMP; - [ ] Haven't looked at how this may change exporting Psi4 as target; * **User-Facing for Release Notes**; - [x] OpenBLAS now found by the math detection system thanks to a patch from a friendly sysadmin; - [x] Unless `ENABLE_GENERIC` is on, math detection for MKL searches for `mkl_rt.so` before any layered multi-lib scheme. Adapted from @ryanmrichard PRs. Also tacks on `-ldl` to the end of BLAS patterns, since the link-line advisor says so. ## Questions; - @robertodr, @bast, anyone who knows CMake, comments welcome. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591:706,detect,detection,706,https://psicode.org,https://github.com/psi4/psi4/pull/591,3,['detect'],['detection']
Safety,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Reduce the number of tests on Appveyor to reduce timeouts. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1249:213,timeout,timeouts,213,https://psicode.org,https://github.com/psi4/psi4/pull/1249,1,['timeout'],['timeouts']
Safety,"## Description; This is part of *Psi4* porting to Windows (#933). Appveyor is falling, because the new version (2019.0) of MKL is not detected. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Lock MKL version. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1240:134,detect,detected,134,https://psicode.org,https://github.com/psi4/psi4/pull/1240,1,['detect'],['detected']
Safety,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Replace `bzero` with `memset`; - [x] Match function signatures; - [x] Move a function to avoid a forward-declaration; - [x] Fix PSI_API usage; - [x] Add missing header; - [x] `and` --> `&&`; - [x] Disable system/user timer; - [x] Move `<sys/timers.h>` porting to a separate header (after #1078 merged); ; ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077:268,avoid,avoid,268,https://psicode.org,https://github.com/psi4/psi4/pull/1077,1,['avoid'],['avoid']
Safety,"## Description; This is part of an ongoing PR series to centralize the code for density-fitted correlated gradients into `libmints`, just like the code for correlated gradients with conventional integrals. This is a subproject of #1736. This PR eliminates the file `ref_grad.cc` from `dfocc`. It was introduced [when `dfocc` was first created](https://github.com/psi4/psi4archive/commit/79e61e76d60b2ef5e1d7b4574788c61e24d02c25#diff-ea59ef1daf3141c3d76dee8823286b82) and is dead code. It looks like it was created for DF-SCF gradients. That is the task of [scfgrad](https://github.com/psi4/psi4/tree/master/psi4/src/psi4/scfgrad), so is not needed. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Eliminates an entire file of dead code. ## Questions; - [x] @bozkaya, can you confirm `ref_grad.cc` is safe to delete?. ## Checklist; - [x] `ctest -L df` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1915:850,safe,safe,850,https://psicode.org,https://github.com/psi4/psi4/pull/1915,1,['safe'],['safe']
Safety,"## Description; This pull request fixes #1899 . Multithreaded computation of the ESP potential was invalid, because a buffer_ object was not thread-safe. This pull request disables multithreaded calculation of the ESP on grid for the moment and also adds a unit test to check.; ## Todos; No Todos, this is really just a trivial disable. ## Questions; No question. ## Checklist; - [X] Tests added for any new features. ; - [X] I ran the libmints tests (http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [X] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1900:148,safe,safe,148,https://psicode.org,https://github.com/psi4/psi4/pull/1900,1,['safe'],['safe']
Safety,"## Description; This simplifies some CAS machinery and fixes UKS GGA XC derivatives. ## Todos; * **Developer Interest**; - [x] UKS XC derivates are now (likely) correct through GGA's.; - [x] Fixes silly bug where SCF-level linear response would fail if no OEProp quantities were specified. @ashutoshvt brought this issue up.; - [x] Freezes molecular geometry when setting a variable for cartesian coordinates. @loriab please check this out. Closes #759 and closes #59. If we like this we need fix the odd zmat/cart combined cases.; - [x] Adds SAPT midbond functions for @konpat @loriab ; - [x] Fixes HF3C gradients.; - [x] Makes building molecules slightly safer, closes #765. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/760:657,safe,safer,657,https://psicode.org,https://github.com/psi4/psi4/pull/760,1,['safe'],['safer']
Safety,"## Description; Try to get PCMSolver reintegrated. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; <!--; - [x] This is atop lapack and PR, so you'll want to look only at later commits; - [x] Switched to PCMSolverConfig imported target.; - [x] Based on https://github.com/loriab/pcmsolver.git branch config6; - [x] target `PCMSolver::PCMSolver` -> `PCMSolver::pcm`; - [x] no longer using pcm_placeholder, instead add to path in run_psi4.py; - [x] I'd rather have pcmsolver as a proper module containing __init__, pcmsolver, getkw, etc., but that would mess with other codes use of pcmsolver, I suspect; - [x] This runs with py27 and all tests pass; - [x] this PR is continues from #594 ; - [x] still need to resolve Fortran/-recursive/libifcoremt/OpenMP issue; -->; - [x] Fix some HDF5 detection problems; - [x] Adds some colored ""MKL"" and ""AM"" to CMake output for lapack and libint, respectively, for ready diagnosis.; - [x] Fixes rpath on Mac by setting it to `@loader_path/${_rel}""`; - [x] Some host_writer changes to modernize PCMSolver; * **User-Facing for Release Notes**; - [x] Re-enables PCMSolver via `-DENABLE_PCMSolver`. No longer hint with `PCMSOLVER_ROOT` but with `PCMSolver_DIR`. Pins to `v1.1.9`.; - [x] Bumps CMake requirement to 3.2; - [x] upstream PCMSolver needs py3 compatibility, PCMSolver/pcmsolver#39; - [x] anyone building with Intel and native gcc < 4.9 needs to have the gcc-name and gxx-name in `CMAKE_Fortran_FLAGS`, too, just like `CMAKE_CXX_FLAGS`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/599:846,detect,detection,846,https://psicode.org,https://github.com/psi4/psi4/pull/599,1,['detect'],['detection']
Safety,"## Description; Updates Libint 1.2.0 @ evaleev/libint <-- libint 1.1.6 @ psi4/libint, evaleev/libint#77. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] All your Psi4 build will start building Libint again b/c wrong version detected until your pre-compiled libints get updated.; * **User-Facing for Release Notes**; - [x] Now using github.com/evaleev/libint (branch v1) rather than our own github.com/psi4/libint after pushing some CMake build details upstream. The evaleev repo didn't have CMake before v1.2.0, so that version is now required. Also, the project name changed from `libint` to `Libint` and CMake cares about this, so Psi4 repo and libint repo will have to be carefully matched for a bit. ## Status; - [x] Ready to go – Go ahead and review, but I want to look at travis/distelli before quite ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/695:291,detect,detected,291,https://psicode.org,https://github.com/psi4/psi4/pull/695,1,['detect'],['detected']
Safety,"## Description; Uses `clang-tidy` to find and fix uses of redundant `void` argument in functions. Fixes applied with:; ```; cd <build-dir>/psi4-core-prefix/src/psi4-core-build; run-clang-tidy.py -header-filter='.*' -checks='-*,modernize-redundant-void-arg' -fix; ```; Based on #1312 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] `clang-tidy` find and fix with `modernize-redundant-void-arg`. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1317:58,redund,redundant,58,https://psicode.org,https://github.com/psi4/psi4/pull/1317,3,['redund'],"['redundant', 'redundant-void-arg']"
Safety,"## Description; With #591, math detection on Mac became vulnerable to picking up `mkl_rt.so` from a conda env in preference to native Accelerate libs. That builds, but gives _very_ bad results at runtime. So this PR treats Accelerate as the default on Mac. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; * **User-Facing for Release Notes**; - [x] On Mac, selects Accelerate BLAS/LAPACK libs in preference to any other detected. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/611:32,detect,detection,32,https://psicode.org,https://github.com/psi4/psi4/pull/611,2,['detect'],"['detected', 'detection']"
Safety,"## Description; With Intel compiler, current master throws:. ```; /psi/gits/hrw-pybind/psi4/src/psi4/libfock/DirectJK.cc(1015): internal error: null pointer; }; ^. compilation aborted for /psi/gits/hrw-pybind/psi4/src/psi4/libfock/DirectJK.cc (code 4); ```. ~The `size_t` is in the header, so I don't know why it should need it again, but it seems to want it. All the below fail, too. I'm glad to try any more rational variations.~; ```; # out-of-date # all throw with above; # out-of-date num_computed_shells_ = 0L;; # out-of-date num_computed_shells_ = 0;; # out-of-date num_computed_shells_ = std::size_t{ 0 };; ```. FYI @andyj10224 who has also hit this and @davpoolechem since it came about in #2547. ~EDIT: nevermind, this only lets it build but kills off the threading and doesn't count ints. Ignore PR for now.~. EDIT: ok, this works, though I don't see why Intel should have complained about the original. Throw seen on 2021.4 and 2021.6, btw. ## Checklist; - Tests added for any new features; - [x] ~ran smoke~ ran full tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2625:176,abort,aborted,176,https://psicode.org,https://github.com/psi4/psi4/pull/2625,1,['abort'],['aborted']
Safety,"## Description; `sq_rsp(...)` is an ancient diagonalizer function from Psi3 with many issues. While its innards could be improved, the function signature is horrid. It should be deprecated and replaced with something better.; Stemming from the awful interface, users of `sq_rsp(...)` never check if the diagonalization failed, because they _cannot_. This is now rectified by adding failure checks wherever the new DSYEV wrappers are called.; Checks against non-square matrices are also added where there is both a row and column count at the call site. Some of the call sites would be dfocc territory, this PR does not include them to avoid conflicts with the dfocc overhaul.; This is another shard of the https://github.com/psi4/psi4/pull/2642 mega-PR that can be merged after PR #2678 and #2738 are in. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implement two new wrapper functions around DSYEV to replace `sq_rsp(...)` with. The new wrappers have a much cleaner interface, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; Please note that unlike `sq_rsp(...)`, the new functions do not take a ""tolarence"" value, but this is actually a null change as that parameter has been set-but-unused in `sq_rsp(...)` since ~forever ago when `sq_rsp(...)` switched to calling DSYEV internally.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure and guard against non-square matrices.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2686:635,avoid,avoid,635,https://psicode.org,https://github.com/psi4/psi4/pull/2686,1,['avoid'],['avoid']
Safety,"## Description; address build issues for FreeBSD packaging @yurivict . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Killed off the Apple `environ` setting that wasn't being used anymore; * **User-Facing for Release Notes**; - [x] AddOns now have a `CMAKE_INSIST_FIND_PACKAGE_${AddON}` variable whereby you can fail configuration when the right package not detected. That is, no falling back to internal build. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/856:426,detect,detected,426,https://psicode.org,https://github.com/psi4/psi4/pull/856,1,['detect'],['detected']
Safety,"## Description; avoid Win/Linux filesystem conventions by moving selected operations to python. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Moves fisapt driver py-side; - [x] Moves writing arrays and filesystem parts of fisapt py-side; - [x] There were some options with names `sSAPT`. There's machinery that thinks all option names are all-caps, so that wasn't good.; - [x] Moves filesys in libcubeprop/cubeprop.cc py-side; - [x] ~Currently can't run cmake multiple times w/o hitting `fsapt/` dir exists~ Now just overwrites existing dirs; - [x] Adds Molecule docstrings and fixes spelling mistakes. ## Questions; - [x] @jturney what’s this supposed to do when directory already exists? https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfilesystem/path.cc#L53 According to `mkdir` docs, it should throw `EEXIST` error? that’s the behavior i’ve imitated in python. but if that’s the case, how has ctest be working on re-run all this time.; - [ ] Rob was exporting `FISAPT.scalars()` as direct map. I changed to map& to match FISAPTSCF. Rob was never using this in code, but since it was exported to python, possibly scirpts are affected?. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1098:16,avoid,avoid,16,https://psicode.org,https://github.com/psi4/psi4/pull/1098,1,['avoid'],['avoid']
Safety,## Description; gau2grid now provides spherical basis sets in `gaussian` _or_ `cca` ordering. let's make sure we get the right one!. ~**This won't work until a PR comes into g2g and versions/git tags get bumped here.**~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] detect/build the gaussian g2g; - [x] bump min g2g version so the components are there. ## Checklist; - [x] ran quicktests against g2g dgasmith/gau2grid#11; - [x] full tests pass locally. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1035:336,detect,detect,336,https://psicode.org,https://github.com/psi4/psi4/pull/1035,1,['detect'],['detect']
Safety,"## Description; misc. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] MKL _can_ link with libgomp on Linux+Gnu, but it can link with libiomp5 everywhere, incl. Mac (icpc, g++, clang++) and Linux (icpc, g++). Moreover in practice, Mac+Gnu+MKL+gomp leads to n-thread-dependent energies (note that none of our testing can catch this). So switching clang and gnu to intel interface and thread libraries when built with MKL. Note that the `-fno-openmp` is b/c gnu takes that slight provocation as signal to link in libgomp, and then you get _two_ threading libraries!; * **User-Facing for Release Notes**. ## Questions; - [x] Notice to @robertodr that math detection getting shaken up again. ## Status; - [x] Ready to go --- Nope, I just want to see what CI thinks of this",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/767:719,detect,detection,719,https://psicode.org,https://github.com/psi4/psi4/pull/767,1,['detect'],['detection']
Safety,"## Description; more misc. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CMake: patches OMP detection for conda GCC, coderefinery/autocmake#247; - [x] Adds a script to probe threading; - [x] Mol: output ghosts from E(Gh) --> Gh(E) closes #1016 ; - [x] Fix up some license headers; - [x] repoints GH:loriab/libxc --> GH:psi4/libxc. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1017:161,detect,detection,161,https://psicode.org,https://github.com/psi4/psi4/pull/1017,1,['detect'],['detection']
Safety,## Description; move dft-bench and vibanalysis tests to pytest. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] move the 4 dft-bench tests to pytest with parameterization; - [x] move the vibanalysis test to pytest; - [x] add IR intensity benchmarks from Cfour so #1382 has something to test against; - [x] delete the ctest versions; - [x] add in `pytest.mark.long` to avoid running some bench routinely. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1414:418,avoid,avoid,418,https://psicode.org,https://github.com/psi4/psi4/pull/1414,1,['avoid'],['avoid']
Safety,"## Description; part III of let there be conda after the recent merge flurry. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] As it is, downstream plugins won't find Python.h . This passes the right include dir so they can and prompts updating cmake so new detection can be used. naturally, v2rdm showed this up.; - [x] bump minimum gcc to 6. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2096:316,detect,detection,316,https://psicode.org,https://github.com/psi4/psi4/pull/2096,1,['detect'],['detection']
Safety,"## Description; technical improvements to docs, part 2. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] **bug fix and energy change** these changes to RI basis for sto-3g, sto-6g, 3-21g https://github.com/psi4/psi4/pull/2146/files#diff-343949bff4fe0802df72641969d7aceb07a122625e5b70d95c6e2757e4ee3c92R435 now refer to a real basis set, so in practice, calcs will use the svp now rather than the qzvpp. tests sapt-ecp and nbody-levels have been tweaked to pass. this will lead to real numbers changes in psi4 runs, though hopefully they'll be a little quicker, too. apparently hunting docs ref errors can fix real bugs; - [x] docs now pass `sphinx-build -b linkcheck`, meaning that all the external hyperlinks in the docs are ok or redirect, none broken (except for a few that are excused in conf.py.in). 300 -> 0 broken links!; - [x] started on the `sphinx-build -b html -n` nitpicky mode. 1300 -> 1000; - [x] fixed all the `docstring of psi4.core.PyCapsule.dfh:: WARNING: py:class reference target not found: psi::DFHelper`; - these happen when exports use or return a class that hasn't yet been pb11 exported, https://pybind11.readthedocs.io/en/stable/advanced/misc.html?highlight=docstring#avoiding-c-types-in-docstrings; - `OneBodySOInt` and `psio_entry` added; - a couple docstrings edited to figure out how parser wants str enums in docstring; - all other export_ and core.cc changes are rearrangements only. ## Checklist; - [ ] ~Tests added for any new features~; - [x] full tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2146:1252,avoid,avoiding-c-types-in-docstrings,1252,https://psicode.org,https://github.com/psi4/psi4/pull/2146,1,['avoid'],['avoiding-c-types-in-docstrings']
Safety,"## Description; very much misc. ## Todos; - [x] update CheMPS2 target to v1.8.9. update min to 1.8.7. I've no evidence that the old min doesn't work, but there have been some build commits since then.; - [x] fill in missing tests comment lines; - [x] since the same feature has broken v2rdm _twice_ in the past month, let's back up the target commit and avoid it.; - [x] update some plugin template syntax, add missing v2rdm7 syntax. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1515:354,avoid,avoid,354,https://psicode.org,https://github.com/psi4/psi4/pull/1515,1,['avoid'],['avoid']
Safety,"## Todos; * **Developer Interest**; - [x] fixed `CMAKE_DISABLE_FIND_PACKAGE_Addon` so that proj builds internally and only that build used; - [x] by analogy to psi4/meta, splitting up `LICENSE` and `CITATION` should allow GH to detect us and put a license box on page; - [x] pybind11 bumped; - [x] `qc_module` as local option is ineffective, so forced `cisd-h2o-clpse` to test detci, not fnocc.; - [x] py3-ed the share/scripts; * **User-Facing for Release Notes**; - [x] tag CheMPS2 at `1.8.3`. ## Questions; - [x] @amjames, look over the ""CC ROOT"" commit, please. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/519:228,detect,detect,228,https://psicode.org,https://github.com/psi4/psi4/pull/519,1,['detect'],['detect']
Safety,"## Todos; - [x] This prevents partial frequencies from hanging (causing ctest timeout) when analytic freq are available and user hasn't specified a findif.; - [x] Clarifies extrapolations syntax with e.g., aug-cc-pv(d+d)z basis sets used; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/451:78,timeout,timeout,78,https://psicode.org,https://github.com/psi4/psi4/pull/451,1,['timeout'],['timeout']
Safety,"### Upgrade Guide. * `property(...)` --> `properties(...)`; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959#issuecomment-381256278:694,detect,detectability,694,https://psicode.org,https://github.com/psi4/psi4/issues/959#issuecomment-381256278,1,['detect'],['detectability']
Safety,"#2158 failed all azure - Win with a mdi failure at test time and Lin with Py detection failures at Psi configure time. So far this one is ok. It's beyond the configure, but this one is using cmake 3.19. 2158 was using cmake 3.20 which has changes to Py detection. I'm keeping an eye on both PRs, but it's hardly caused by the PR changes themselves.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2159#issuecomment-822611626:77,detect,detection,77,https://psicode.org,https://github.com/psi4/psi4/pull/2159#issuecomment-822611626,2,['detect'],['detection']
Safety,"#include mkl.h` (that defines `__INTEL_MKL__`) and the [very important `mkl_set_num_threads()`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libparallel/process.cc#L91-L93) were guarded by `HAVE_MKL` ifdefs. Then, on the fateful 23 Jun 2016 (https://github.com/psi4/psi4/commit/e07d645ea7acc85ae90d8c60a30f3426c977fc26) in the course of CMR, ConfigMath was blown away and all the `HAVE_MKL`s were replaced by `__INTEL_MKL__`. But that's circular because the mkl.h inclusions, which define `__INTEL_MKL__` were guarded by `__INTEL_MKL__` ifdefs. So Psi4 hasn't been threading MKL (though OMP threading has still been present). Story continues in bullet below. Identification and debugging of this issue by @dgasmith and Matt Schieber. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~~This PR identifies which of MKL, OPENBLAS, etc. has been detected by ConfigMath.~~ Identify MKL-or-not by searching for ""mkl"" in the full lapack library list, whether detected math or passed-in math. Colors ""MKL LAPACK"" to screen if ""on"". If MKL, attaches the `USING_LAPACK_MKL` compiler definition to the `tgt::lapack` target that every module of Psi4 is linked with. Thus we're getting MKL threading again.; - [x] Adds min version tags for dkh, gdma, erd; - [x] Adjusts where the required check comes in for hdf5 so we don't get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In general tests where MKL found. Has compare_values, but really better suited for running by hand and judging results, as `-jN` defeats the purpose.; - [x] Added some CCSD(T) table docs requested by @CDSherrill ; * **User-Facing for Release Notes**; - [x] Cha",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615:1284,detect,detected,1284,https://psicode.org,https://github.com/psi4/psi4/pull/615,1,['detect'],['detected']
Safety,"(base) C:\Users\erikc>conda create -n p4envnew python=3.8 psi4 -c psi4/label/dev; Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: \; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; Examining @/win-64::__win==0=0: 80%|████████████████████████████████████████████████████████████████████████████▊ | 4/5 [00:00<00:00, 14.60it/s]-failed. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> msgpack-python -> python[version='>=2.7,<2.8.0a0|>=3.6,<3.7.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0|>=3.7,<3.8.0a0|>=3.5,<3.6.0a0|>=3.6|>=3.5|>=3.6.0']; psi4 -> python=3.8; python=3.8. I dont think it is the environment name",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1979#issuecomment-874814114:425,abort,abort,425,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-874814114,1,['abort'],['abort']
Safety,"* I think the old versions of routines we want to outright delete (when some cutting edge LAPACK comes out w/o those symbols, we want to be able to link to it).; * Agree that there's no way we want to get math detection involved.; * I think the new versions of routines should be added, checked that they link properly against a `DGGSVD3`-capable LAPACK, then commented out, and a note left in developers wish list to check travis periodically for reactivation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1314#issuecomment-433952171:210,detect,detection,210,https://psicode.org,https://github.com/psi4/psi4/pull/1314#issuecomment-433952171,1,['detect'],['detection']
Safety,"* Psi4 `v1.2rc3.dev1` compile pure GCC 7.2.0 w/`libgomp` for threading.; * OpenBLAS `v0.2.20-453-gf5959f2` compile pure GCC 5.2 w/`libgomp` for threading (except for line 5, which is conda 0.2.20, 9ac9557`).; * No Intel compilers or `libiomp5` available or in `ldd -v`. NumPy is still the conda nomkl NumPy, but its links to openblas are unresolved, so tests are either not hitting that submodule or it's using the below-described libopenblas loaded by psi. | openblas compilation | psiapi speedup `-n4` | psithon speedup `-n4` | ion pass `-n1` | ion pass `-n4` |; | :--- | ---: | ---: | :---: | :---: |; | `USE_THREAD=0 USE_OPENMP=0` | 1.00 | 1.54 | yes | yes |; | `USE_THREAD=1 USE_OPENMP=0` | 0.90 | warn + 0.85 | no | no |; | `USE_THREAD=1 USE_OPENMP=0 USE_SIMPLE_THREADED_LEVEL3=1` | 1.20 | warn + 1.40 | no | no |; | `USE_THREAD=1 USE_OPENMP=1` | 1.04 | 2.27 | yes | no |; | CONDA `USE_THREAD=1 USE_OPENMP=0` | ? | warn + ?| no | no |; | EDIT: `USE_THREAD=1 USE_OPENMP=1 NUM_PARALLEL=4` | 1.00 | 1.77 | yes | no |. * ""warn"": oodles of ""OpenBLAS Warning : Detect OpenMP Loop and this application may hang. Please rebuild the library with USE_OPENMP=1 option."". * full OpenBLAS compile command for row 4; ```; make CC=gcc FC=gfortran DYNAMIC_ARCH=1 BINARY=64 NO_LAPACK=0 NO_AFFINITY=1 USE_THREAD=1 USE_OPENMP=1 NUM_THREADS=128 CFLAGS=""-march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -O2 -pipe"" FFLAGS=""-fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -O2 -pipe""; ```. Unless someone sees a problem with my build configs, it's not looking too encouraging, except for wholly unthreaded. Troubling also that this contradicts @hokru's findings of good behavior for `USE_OPENMP=1` from source build.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390869229:1061,Detect,Detect,1061,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390869229,1,['Detect'],['Detect']
Safety,"* Yes, this sounds like a pybind11 update issue. Any pybind11 update requires a _full_ recompile. But it sounds like you've got that taken care of with the fresh objdir. Fortunately, now that pybind has hit 2.0, we plan to stick with that version, so these problems will be fewer.; * Very observant on the compilers detected for pybind. But it really doesn't matter because ""compilation"" and installation of pybind is just copying a dozen files into place.; * On the python detection, there's two places this could be happening, and one, like the above is irrelevant. It's the second one (in the psi4-core target) that really matters. Could you send me your analogs of the CMake output snippets below? Or send me the whole thing, but it'll have to be both the initial CMake configuration and the psi4-core configuration that runs during the course of the compilation. Psi4 and pybind11 use exactly the same Python detection scheme, so I'm surprised and would like to understand what's happening in your setup.; * As far as actually telling psi4 and cmake what Python to use w/o editing CMakeCache's, I'd recc setting one (EXE) or all of https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41 . But my impression is that you shouldn't have to. Main CMake configuration; ```; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Found Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; -- Suitable CheMPS2 could not be located, Building CheMPS2 instead.; -- Suitable dkh could not be located, Building dkh instead.; -- Found libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (found version 1.3.0); -- Found gdma: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/li",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273512333:316,detect,detected,316,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273512333,3,['detect'],"['detected', 'detection']"
Safety,"* these four mols https://github.com/MolSSI/QCEngine/blob/master/qcengine/programs/tests/standard_suite_ref.py#L12-L40; * rhf for hf & h2o. uhf/rohf for bh3p & nh2.; * cc-pvdz for hf & bh2p. aug-cc-pvdz & cfour-qz2p for h2o & nh2.; * conv, df, cd, though conv only is a fine start; * all-electron (ae) and frozen-core (fc); * lccd, olccd, lccsd all appreciated, though maybe your code doesn't cover the last; * energies and energy components of first priority, but should you have dipoles, gradients, etc., glad to collect them now. You don't have to do any of this -- I can take values from existing psi modules -- but an independent reference implementation is not to be sniffed at, and you can ensure psi will fail if it doesn't match you from here out. * either send me numbers (non-redundant; that is, corl, not corl and tot) or PR directly to qcengine (just that one standard_suite_ref.py file); * I'm only testing to 1.e-6 but refs generated with https://github.com/psi4/psi4/blob/master/tests/pytests/standard_suite_runner.py#L60-L63. I'll merge this PR",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1909#issuecomment-635391683:787,redund,redundant,787,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-635391683,1,['redund'],['redundant']
Safety,"**TL;DR** If conda psi4 is acting up, update libint, too: `conda update libint -c psi4/label/dev`. If locally compiled psi4 is acting up, trigger a partial recompile: `cd objdir && rm -rf external/upstream/libint/ && make`. We've been planning for a while to distribute conda psi4 with libint compiled at `MAX_AM_ERI` 8, not 6. I have rebuilt the `libint` package and now the `v1.3rc1` will be the first `psi4` package with extended AM. Unfortunately, both **libint of different AM are not hot-swappable** and **AM not detectable at runtime**. That is, a built psi4 is perfectly happy to link (in the `ldd` sense) to a `libint.so` that is inconsistent with fixed data dimensions in psi4 _libmints_, and libmints can't even throw an error for enlightenment. . I could throw additional constraints on the psi4 pkg to make sure it picked the right libint build, but that would be misusing the tools a bit, would constrain things in future, and would only solve a third of the problem. I believe you can handle this transition manually with a couple commands. ### which `libint`s are out there?; `conda list`; ```; # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old; ```. ### what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install `conda update psi4 libint -c psi4/label/dev` will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the `_4` (see above) AM6 libint, which is trouble. Easy to solve by updating libint: `conda update libint -c psi4/label/dev`. After that, your `conda list` should say `_5`.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533:519,detect,detectable,519,https://psicode.org,https://github.com/psi4/psi4/issues/1533,1,['detect'],['detectable']
Safety,"**psi4** uses the LAPACK routine `dtzrqf`. However, at least in the current LAPACK 3.8.0, the routine `dtzrqf` is marked as deprecated, the [suggested alternative](http://www.netlib.org/lapack/explore-html/da/dba/group__double_o_t_h_e_rcomputational_ga2d309addf953bcdd497d58608a7f7935.html) being `dtzrzf`. As a result, the default build of LAPACK 3.8.0 (<del>as well as of OpenBLAS 0.3.3</del> EDITED) does not contain `dtzrqf`anymore and fails to provide the necessary dependency. Perhaps **psi4** could use the alternative routine to avoid this problem?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1290:537,avoid,avoid,537,https://psicode.org,https://github.com/psi4/psi4/issues/1290,1,['avoid'],['avoid']
Safety,*proc (1 test); dfccsd-grad = 22.59 sec*proc (1 test); dfccsd-t-grad = 19.43 sec*proc (1 test); dfccsdat = 13.82 sec*proc (1 test); dfccsdl = 3.14 sec*proc (1 test); dfccsdt = 3.87 sec*proc (1 test); dfep2 = 5.30 sec*proc (2 tests); dfmp2 = 89.76 sec*proc (11 tests); dfomp2 = 275.42 sec*proc (7 tests); dfomp2.5 = 77.71 sec*proc (4 tests); dfomp3 = 93.16 sec*proc (4 tests); dfscf = 28.72 sec*proc (1 test); dft = 5528.80 sec*proc (26 tests); docs = 1.34 sec*proc (2 tests); ecp = 37.52 sec*proc (2 tests); fci = 6.48 sec*proc (2 tests); fcidump = 3.69 sec*proc (1 test); findif = 602.21 sec*proc (5 tests); fnocc = 58.18 sec*proc (4 tests); freq = 856.94 sec*proc (6 tests); gradient = 547.45 sec*proc (16 tests); json = 14.48 sec*proc (8 tests); longtests = 835.25 sec*proc (5 tests); mcscf = 3.12 sec*proc (3 tests); minitests = 31.52 sec*proc (3 tests); mints = 35.52 sec*proc (14 tests); misc = 272.90 sec*proc (16 tests); mp2 = 205.17 sec*proc (13 tests); nbody = 52.21 sec*proc (2 tests); numpy = 0.63 sec*proc (1 test); ocepa = 324.78 sec*proc (6 tests); omp = 326.64 sec*proc (18 tests); opt = 769.80 sec*proc (21 tests); prop = 1.60 sec*proc (1 test); properties = 84.77 sec*proc (10 tests); psi = 20501.24 sec*proc (400 tests); psi4numpy = 13.93 sec*proc (6 tests); psimrcc = 70.67 sec*proc (8 tests); python = 880.26 sec*proc (10 tests); pywrap = 1339.53 sec*proc (12 tests); quicktests = 2290.03 sec*proc (137 tests); rasci = 37.96 sec*proc (3 tests); sapt = 1420.73 sec*proc (20 tests); scf = 5859.53 sec*proc (51 tests); shorttests = 39.46 sec*proc (4 tests); smoketests = 89.98 sec*proc (11 tests); stability = 5.90 sec*proc (2 tests); tutorial = 165.22 sec*proc (6 tests); x2c = 34.46 sec*proc (3 tests). Total Test time (real) = 3000.09 sec. The following tests FAILED:; 	360 - cubeprop-esp (Failed); 	371 - dft-bench-interaction (Timeout); 	373 - pywrap-align (Failed); 	374 - pywrap-align-chiral (Failed); 	401 - json-schema_0_properties (Failed); Errors while running CTest; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:39904,Timeout,Timeout,39904,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Timeout'],['Timeout']
Safety,", as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -m pytest [-v -s]`. From staged or installed, `python -c ""import psi4; psi4.test()""` or `psi4 --test`. From objdir, `make pytest`. ## Questions; - [ ] I can work around the 3.3 cmake. It'll just be less tidy and won't ward off the HDF5 version detection issue. Speak up if there are objections.; - [ ] Everyone should make sure you're ok with the table below. No envvar control over parallelism anymore.; - [ ] Everyone read 12cd carefully, as I'm a bit nervous about this. Searched the code and Options object is cleared _nowhere_ except for a commented out in read_options. So I think it's safe to commandeer this function. And it works to completely reset options.; - [ ] The threading test is now in test_psi4_profiling.py. It works fine as the only pytest, but it's threading is still messed up when in the whole pytest suite. Anyone have a guess why? I haven't read anything about pytest controlling threads. ## Status; - [x] Ready to go. `OMP_NUM_THREADS` | `MKL_NUM_THREADS` | `-nN` | `psi4.set_num_threads()` | PsiAPI | Psithon; --- | --- | --- | --- | --- | ---; _ | _ | _ | _ | _111 | 1111; 1 | _ | _ | _ | _111 | 1111; 3 | _ | _ | _ | _111 | 1111; _ | 1 | _ | _ | _111 | 1111; _ | 3 | _ | _ | _111 | 1111; _ | _ | 1 | _ | N/A | 1111; _ | _ | 3 | _ | N/A | 3333; _ | _ | _ | 1 | _111 | 1111; _ | _ | _ | 3 | _333 | 1333; _ | _ | 4 | 2 | _222 | 4222. Where the four numbers are extracted from the output file: threads in psi4 header, threads in MintsHelper, threads in SCF header, threads used by JK. The first of these in inapplicable in PsiAPI mode.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627:3389,safe,safe,3389,https://psicode.org,https://github.com/psi4/psi4/pull/627,1,['safe'],['safe']
Safety,"- Configuring done; -- Generating done; -- Build files have been written to: /home/seba/software/psi4-0.5/objects; ```. Point where it fails:. ```; [ 45%] Building CXX object src/lib/libmints/CMakeFiles/mints.dir/basisset.cc.o; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; /usr/include/c++/5/bits/stl_iterator_base_types.h(154): error: name followed by ""::"" must be a class or namespace name; typedef typename _Iterator::iterator_category iterator_category;; ^; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; detected during:; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; instantiation of class ""std::__iterator_traits<_Iterator, void> [with _Iterator=int]"" at line 163; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; instantiation of class ""std::iterator_traits<_Iterator> [with _Iterator=int]"" at line 98 of ""/home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/regex_token_iterator.hpp""; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262:6621,detect,detected,6621,https://psicode.org,https://github.com/psi4/psi4/issues/262,1,['detect'],['detected']
Safety,"- I never had the plugins working yet. I was going to do that after I had the external projects all working (still working on chemps2).; - I go back and forth on what to do with external dependencies. Fully installing them is certainly an option. On the other hand I like the idea of keeping it somewhat separate in case the user wants to later install a hand optimized version of that library,.; - We already should be able to detect them if they were compiled statically. For the libraries I wrapped we certainly can force static builds, but it may be hard for other libraries if they don't support that.; - I'll take a look at the new python based version and see if I can get it to work",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235604777:428,detect,detect,428,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235604777,1,['detect'],['detect']
Safety,"- No S^2 vs S^Inf is, in some ways, a different level theory.; - S^2/S^Inf are separate quantities; - Mixing is as safe as any other mixing in SAPT. Our current version is fine, but S^Inf should help more for charged complexes. Exch/Ind-Exch at S^Inf and Disp-Exch at S^2 is probably quite reasonable.; - Yes and no. S^Inf is limited to SAPT0 for the time being, higher levels could get quite complex. One more person to ping and can correct me: @ajmisquitta",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/921#issuecomment-366112364:115,safe,safe,115,https://psicode.org,https://github.com/psi4/psi4/pull/921#issuecomment-366112364,1,['safe'],['safe']
Safety,"- [ ] Examine the autofunction signatures in energy, opt, freq, prop.rst in doc/sphinxman/source. These have arguments in the correct order. Rearrange the argument order in the docstrings of the respective functions in share/python/driver.py; - [ ] modify section ""PSI variables & return values"" in doc/sphinxman/source/psithoninput.rst; - separate out the last paragraph into a new section ""return values""; - include in it the gist of the signatures description at http://forum.psicode.org/t/detecting-optimization-failure/203/4?u=loriab .; - also mention getting G & H back as return values or extracting them from Wavefunction and a couple things you can do with them like print_out(), rms(), convert to np.array",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/352:493,detect,detecting-optimization-failure,493,https://psicode.org,https://github.com/psi4/psi4/issues/352,1,['detect'],['detecting-optimization-failure']
Safety,"- [ ] Implement potential-based small-basis guess as described in [Chem Phys Lett 531, 229 (2012)](http://dx.doi.org/10.1016/j.cplett.2012.02.012). The method avoids doing projections altogether, but the main problem is that one needs cross-basis Coulomb and exchange integrals (IJ|kl) and (Ik|Jl) where IJ are in the new, large basis and kl are in the small input basis. For DFT, the density variables would be evaluated in the small basis, and the quadrature would be done in the new basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-508700421:159,avoid,avoids,159,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-508700421,1,['avoid'],['avoids']
Safety,"- [ ] dft functionals in https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/dft/libxc_functionals.py pull all their citation metadata from libxc, thus avoiding duplicated work. Functionals that need separate X & C from libxc currently have metadata redefined in psi. Change this so that where X & C pulled separately from libxc have the same citation, this gets adopted as total citation. discussed a bit in https://github.com/psi4/psi4/pull/1597",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-485650099:165,avoid,avoiding,165,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-485650099,1,['avoid'],['avoiding']
Safety,"- [x] bump cmake to 3.15 from 3.8 (to get decent FindPython with NumPy); - [x] switch out Python detection to fix #2060. note that all the CM vars now start `Python_`, not `PYTHON_`; - [x] use prebuilt g2g for Windows Azure; - [x] bump g2g to 2.0.7; - [ ] ~added some fn redefs for Windows in psi4-dec.h . right place?~; - [x] get windows conda package building through azure. Ok, Windows conda package was the original aim of this PR, but that's also in the Libxc5 PR that uses prebuilt g2g & libxc & libint2. This PR switched to using the new Python detection advocated by pb11: https://pybind11.readthedocs.io/en/stable/compiling.html#findpython-mode . This means we're not using the FindPythonLibsNew that psi4 has a copy of from pb11 and which in turn we install for the benefit of plugins. Of course that means we need to use cmake 3.15+ (released July 2019). That's quite a leap from the 3.8+ we had before, and lgtm doesn't have it, hence that failure. We can drop a lot of explicit properties on `core` since pb11 is providing them (see https://github.com/pybind/pybind11/blob/master/tools/pybind11NewTools.cmake and https://github.com/pybind/pybind11/blob/master/tools/pybind11Common.cmake), but I'm not sure if this is the right time to make the leap. I'm also a bit surprised that `add_library(... MODULE)` seems to be working with the plugin tests where before we used `SHARED` to appear like a linux lib. Glad of opinions here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2048:97,detect,detection,97,https://psicode.org,https://github.com/psi4/psi4/pull/2048,2,['detect'],['detection']
Safety,"-- Checking whether C compiler has -isysroot; -- Checking whether C compiler has -isysroot - yes; -- Checking whether C compiler supports OSX deployment target flag; -- Checking whether C compiler supports OSX deployment target flag - yes; -- Check for working C compiler: /usr/local/bin/gcc-8; -- Check for working C compiler: /usr/local/bin/gcc-8 -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Checking whether CXX compiler has -isysroot; -- Checking whether CXX compiler has -isysroot - yes; -- Checking whether CXX compiler supports OSX deployment target flag; -- Checking whether CXX compiler supports OSX deployment target flag - yes; -- Check for working CXX compiler: /usr/local/bin/g++-8; -- Check for working CXX compiler: /usr/local/bin/g++-8 -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option ENABLE_MSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:3725,Detect,Detecting,3725,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308,1,['Detect'],['Detecting']
Safety,"-packages/psi4/tests/test_psi4_qcschema.py::test_psi4_scfproperty PASSED [100%]. ============================================================================ warnings summary =============================================================================; psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:599: 3 warnings; psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:701: 3 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py: 2700 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py: 1773 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py: 92 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py: 2330 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 2270 warnings; `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:698: 3 warnings; psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:699: 3 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py: 1414 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py: 954 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py: 48 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py: 1302 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 1266 warnings; `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When repl",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:9548,safe,safe,9548,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['safe'],['safe']
Safety,. -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsCache.cmake -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsMKLCache.cmake -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake -Bobjdir; loading initial cache file /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsCache.cmake; loading initial cache file /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsMKLCache.cmake; loading initial cache file /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; -- The C compiler identification is Intel 18.0.2.20180210; -- The CXX compiler identification is Intel 18.0.2.20180210; -- Check for working C compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icc; -- Check for working C compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icpc; -- Check for working CXX compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- The Fortran compiler identification is Intel 18.0.2.20180210; -- Check for working Fortran compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort; -- Check for working Fortran compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /home/termo/intel/compilers,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883:1005,Detect,Detecting,1005,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883,4,['Detect'],['Detecting']
Safety,". As it so happens, I was running `mrccsdt` not too long ago on the CCQC cluster. What I see looks like ; ```; Generating fort.55 integral file...done.; Generating fort.56 input file...done. *** tstop() called on n081 at Sun Mar 8 14:10:25 2020; Module time: ; user time = 1.90 seconds = 0.03 minutes; system time = 0.87 seconds = 0.01 minutes; total time = 2 seconds = 0.03 minutes; Total time: ; user time = 164.68 seconds = 2.74 minutes; system time = 15.26 seconds = 0.25 minutes; total time = 2719 seconds = 45.32 minutes. ===== Begin fort.56 input for MRCC ======; 3 1 0 0 1 0 0 1 0 1 1 1 0 0 0 6 0 0 0.00 0 60000 ; ex.lev,nsing,ntrip, rest,CC/CI, dens,conver, symm, diag, CS,spatial, HF,ndoub, nacto, nactv, tol,maxex, sacc, freq,dboc, mem; 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ; ===== End fort.56 input for MRCC ======; **********************************************************************; MRCC program system; **********************************************************************; ; Written by; Mihaly Kallay, Zoltan Rolik, Jozsef Csontos, Istvan Ladjanszki,; Lorant Szegedy, Bence Ladoczki, Gyula Samu, Klara Petrov,; Mate Farkas, Peter Nagy, David Mester, and Bence Hegely; ; Department of Physical Chemistry and Materials Science; Budapest University of Technology and Economics; Budapest P.O.Box 91, H-1521 Hungary; ; www.mrcc.hu. ************************ 2020-03-08 14:10:25 *************************; Executing goldstone...; ```. The calculation goes on, but the important point is that MRCC is supposed to execute `goldstone` immediately and not even try to read input from the MINP file. My interpretation of the situation is that something in the new MRCC has broken Psi's direct interface, which avoided MINP input entirely. I'm not planning to get further involved in this issue, but I'm fairly sure we mentioned the MRCC interface in the paper, so this is bad. Curse you, upstream!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1866:3892,avoid,avoided,3892,https://psicode.org,https://github.com/psi4/psi4/issues/1866,1,['avoid'],['avoided']
Safety,. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to enable tests.) [ 32%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 34%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp_2 SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 36%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary to enable...) [ 38%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enable tests.) [ 40%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cct3 SKIPPED (Not detecting module cct3. Install package if necessary to enable tests.) [ 41%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psixas SKIPPED (Not detecting module psixas. Install package if necessary to enable tests.) [ 43%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_ipi_broker1 SKIPPED (Not detecting module ipi. Install package if necessary to...) [ 47%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to...) [ 49%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enabl...) [ 50%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:4158,detect,detecting,4158,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,".2.199/linux/mpi; _=/usr/bin/printenv; ```. cat /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; ```; # psi4DepsIntelCache.cmake; # ------------------------; #; # This module sets some likely variable values to initialize the CMake; # cache for dependencies to build your Psi4 source.; # Note that this uses user-provided (non-conda) tools.; #; # See ``psi4-path-advisor`` (or cmake command below) for use.; #; # >>> /home/termo/miniconda3/envs/p4dev35/bin/cmake \; # -H. \; # -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake \; # -Bobjdir; #. set(CMAKE_C_COMPILER ""icc"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""icpc"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER ""ifort"" CACHE STRING """"). set(CMAKE_C_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_Fortran_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"). #set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); ```; --> same error at same place as earlier... icpc -gnu-prefix=x86_64-conda_cos6-linux-gnu- hello.cc -o hello && ./hello; ```; In file included from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/x86_64-conda_cos6-linux-gnu/bits/os_defines.h(39),; from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/x86_64-conda_cos6-linux-gnu/bits/c++config.h(533),; from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/iostream(38),; from hello.cc(1):; /usr/include/features.h(367): catastrophic error: cannot open source file ""sys/cdefs.h""; # include <sys/cdefs.h>; ^. compilation aborted for hello.cc (code 4). ```; now we are getting somewhere :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448:11734,abort,aborted,11734,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448,1,['abort'],['aborted']
Safety,".3rc1 psi4 and the `_4` (see above) AM6 libint, which is trouble. Easy to solve by updating libint: `conda update libint -c psi4/label/dev`. After that, your `conda list` should say `_5`.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: `conda install libint=1.2.1=h87b9b30_4 -c psi4`. ### what can go wrong with locally-built psi4?. * A major use of the `libint` conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the `$CONDA_PREFIX/lib/libint.so` to which a psi4 `core.so` is linked suddenly changes identity, psi4 will be deranged.; * To fix this, `cmake` needs to detect the new libint headers and a half-dozen psi4 files need to rebuild.; ```; > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1); ```; * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. ### Notes; * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular momentum error on mac binary.; * `simint` max is AM7 both past and near future. Only `libint` is changing.; * Between higher AM and optimizing for multiple architectures, the new libint pkg is _heavy_, >120mb zipped. For psi4 CI, I'm planning to pull the old AM6 to lessen the strain on Travis. This won't help downstream projects that summon a built psi4 to test their addon.; * I haven't posted the AM8 package yet, as I want the stack to finish building, and I wanted to give you all a heads-up. I'll post to this issue when the package goes up. Will only be in `-c psi4/label/dev` for now, not `-c psi4`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533:2764,avoid,avoid,2764,https://psicode.org,https://github.com/psi4/psi4/issues/1533,1,['avoid'],['avoid']
Safety,".o): In function `boost::mpi::communicator::as_intercommunicator() const':; communicator.cpp:(.text+0xdc2): undefined reference to `MPI_Comm_test_inter'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(communicator.o): In function `boost::mpi::communicator::as_graph_communicator() const':; communicator.cpp:(.text+0xef4): undefined reference to `MPI_Topo_test'; communicator.cpp:(.text+0xf40): undefined reference to `MPI_Topo_test'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(communicator.o): In function `boost::mpi::communicator::has_cartesian_topology() const':; communicator.cpp:(.text+0x1195): undefined reference to `MPI_Topo_test'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(communicator.o): In function `boost::mpi::communicator::abort(int) const':; communicator.cpp:(.text+0x1200): undefined reference to `MPI_Abort'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(communicator.o): In function `void boost::mpi::communicator::send<boost::mpi::content>(int, int, boost::mpi::content const&) const':; communicator.cpp:(.text+0x1272): undefined reference to `MPI_Send'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(communicator.o): In function `boost::mpi::status boost::mpi::communicator::recv<boost::mpi::content const>(int, int, boost::mpi::content const&) const':; communicator.cpp:(.text+0x12f1): undefined reference to `MPI_Recv'; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/boost-1.61.0-deyw7xs6bmycmara46vfwnd3xnpbivxe/lib/libboost_mpi-mt.a(communicator.o): In function `boost::mpi::request boost::mpi::communicator::isend<b",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/411:15099,abort,abort,15099,https://psicode.org,https://github.com/psi4/psi4/issues/411,1,['abort'],['abort']
Safety,"/4.1.0, impi/4.1.0-ofa, impi/5.0.1, impi/5.0.1-ofa. openmpi/1.5.5-gcc, openmpi/1.5.5-icc, openmpi/1.8.4-gcc, openmpi/1.8.4-icc, openmpi/1.6.5-gcc, openmpi/1.6.5-icc. I choosed impi/5.0.1 and mkl/11.2.0.; I have tried to use both intel compiler versions to compile ""master"" and ""0.3 release from 5 Aug 2015"" versions. All times I have failed. With the intel/15.0.090 compilers it even fails on the ./setup script as follows:. CMake Error: Unable to find the executable at any of:; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/check_cxx11/cxx11 _regex/CMakeFiles/CMakeTmp/cmTC_e39a7; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/check_cxx11/cxx11 _regex/CMakeFiles/CMakeTmp/Debug/cmTC_e39a7; /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3/objdir/check_cxx11/cxx11 _regex/CMakeFiles/CMakeTmp/Development/cmTC_e39a7. And with the intel/13.1.0 compilers ./setup runs successfully. To avoid crushes I have changed -std=g++98 to -std=c++11 in the CMAKE_CXX_FLAGS:STRING in the CMakeCache.txt and followed the post http://forum.psicode.org/t/undefined-git-version/61/3 in case of ""0.3 release"". Thus in case of both versions of psi4 using the intel/13.1.0 compilers I have ended with:. ..........; [ 99%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/export_efp.cc.o; [ 99%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/export_cubeprop.cc.o; [100%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/clean.cc.o; [100%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/create_new_plugin.cc.o; [100%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/script.cc.o; [100%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/set_memory.cc.o; [100%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/read_options.cc.o; [100%] Building CXX object src/bin/psi4/CMakeFiles/psi4.dir/export_libparallel.cc.o; [100%] Linking CXX executable ../../../bin/psi4; ld: cannot find -lboost_mpi-1_57; [100%] Built target psi4. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:1224,avoid,avoid,1224,https://psicode.org,https://github.com/psi4/psi4/issues/201,1,['avoid'],['avoid']
Safety,/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:798: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:909: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:925: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp). ================================================================== warnings summary ==================================================================; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if d,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:4576,detect,detecting,4576,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['detect'],['detecting']
Safety,"/master/api/psi4.core.SADGuess.html?highlight=print#psi4.core.SADGuess . but I can't seem to run the function `compute_guess()` - it causes my kernel/terminal to crash. . here's a code snippet:; ```python; import psi4; from psi4.core import SADGuess. psi4_geo = psi4.geometry(; """"""; N 4.772900 -0.101700 0.597500; C 3.609000 0.210800 -0.023400; N 2.441000 -0.094000 0.403800; C 1.450300 0.286400 -0.465100; C 0.060400 0.012200 -0.121600; C -0.194400 -0.845100 0.972200; C -1.466300 -1.163000 1.375400; C -2.519900 -0.599700 0.659100; N -3.868100 -0.691400 0.784500; N -4.506700 0.042900 -0.138700; C -3.594600 0.620800 -0.875800; C -2.289700 0.266400 -0.439100; C -0.987700 0.572700 -0.830400; C 1.902300 0.904400 -1.593400; S 3.625400 1.027300 -1.594500; H 4.694900 -0.362900 1.566900; H 5.594000 0.417600 0.335500; H 0.659700 -1.250100 1.491400; H -1.645700 -1.820500 2.212500; H -4.398300 -1.217800 1.458900; H -3.875900 1.263700 -1.685800; H -0.814500 1.239900 -1.659800; H 1.351700 1.280600 -2.430000; symmetry C1; """"""; ); psi4.set_options({""scf__reference"": ""rhf""}). basis = psi4.core.BasisSet.build(psi4_geo, key=""BASIS"", target='def2-svp', return_atomlist=False); basis_atoms = psi4.core.BasisSet.build(psi4_geo, key=""BASIS"", target='def2-svp', return_atomlist=True). mol_sadguess = SADGuess.build_SAD(basis, basis_atoms); SADGuess.set_print(mol_sadguess, 2); # kernel/terminal crashes here!!! :(; SADGuess.compute_guess(mol_sadguess); ```. the other alternative is to run a ""dummy"" SCF calculation, but set `maxiter = 0` and `fail_on_maxiter = False`. but i don't know if this will give me the actual initial guess or it would have undergone some further transformations. and it is also not as fast as i'd like, it takes 7 secs on 8 threads for the above mol with 23 atoms. i'd suspect doing the full SCF calculation has a lot of overhead in setting up different parts of the SCF procedure, which I'd like to avoid. (i have millions of molecules I need to get the `SADGuess` for). thank you!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2897:2102,avoid,avoid,2102,https://psicode.org,https://github.com/psi4/psi4/issues/2897,1,['avoid'],['avoid']
Safety,"/test_psi4.py: 651 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 633 warnings; `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json; Using `psi4.json_wrapper.run_json` instead of `psi4.schema_wrapper.run_qcschema` is deprecated, and in 1.5 it will stop working. -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================= short test summary info =========================================================================; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:13: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:162: Not detecting module mrcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:186: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:233: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:12233,detect,detecting,12233,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,/test_psi4.py::test_psi4_basic PASSED [ 77%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 86%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 95%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [100%]; ============================================================== short test summary info ===============================================================; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:170: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:329: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:628: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:798: Psi4 not detecti,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:3208,detect,detecting,3208,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['detect'],['detecting']
Safety,"000.000000; 72 500000000.000000; 73 700000000.000000; 74 1000000000.000000; 75 2000000000.000000; 76 3000000000.000000; 77 4000000000.000000; 78 5000000000.000000; 79 6000000000.000000; 80 7000000000.000000; 81 10000000000.000000; 82 20000000000.000000; 83 30000000000.000000; 84 40000000000.000000; 85 50000000000.000000; 86 70000000000.000000; 87 100000000000.000000; 88 200000000000.000000; 89 300000000000.000000; 90 400000000000.000000; 91 500000000000.000000; 92 700000000000.000000; 93 1000000000000.000000; 94 2000000000000.000000; 95 3000000000000.000000; 96 4000000000000.000000; 97 5000000000000.000000; 98 7000000000000.000000; ```; [error file](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/quadratures/1_x/error.bin), 5247 doubles read into a Matrix. many zeros; ```; 0 0 0.0212800000000000; 0 1 0.0435800000000000; 0 2 0.0596000000000000; 0 3 0.0707500000000000; 0 4 0.0782500000000000; 0 5 0.0828800000000000; 0 6 0.0851600000000000; 0 7 0.0855600000000000; 0 8 0.0855600000000000; 0 9 0.0000000000000000; 0 10 0.0000000000000000; 0 11 0.0000000000000000; 0 12 0.0000000000000000; ...; ```. [This block](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/denominator.cc#L566-L595) reads those bin files. It occurs three times in denominator.cc, once for each flavor of `*LaplaceDenominator.decompose()`, so refactoring into calling a free function is perhaps in order. After the arrays are filled, both are used to make sure the system can be fit w/i the availability and accuracy of the stored quadratures, https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/denominator.cc#L196-L209. decompose happens once per SAPT calc, so perhaps ok to make text file? or alternate big-endian file? or better to detect host-endianness and read little-endian file accordingly? routine goes on to regex read a single quadrature file of <100 lines, so while this isn't time consuming compared to SAPT calc, the `.bin` files are larger than those in rest of dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451726050:3313,detect,detect,3313,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451726050,1,['detect'],['detect']
Safety,"0000000000 0.01566508504775; 3 -0.00000000000000 -0.00000000000000 -0.01592565050467; 4 -0.00087629381335 -0.00000000000000 -0.00080744525748; 5 0.00087629381335 0.00000000000000 -0.00080744525748; 6 -0.00150497205043 -0.00584776113735 -0.00140352222961; 7 -0.00150497205043 0.00584776113735 -0.00140352222961; 8 0.00150497205043 0.00584776113735 -0.00140352222961; 9 0.00150497205043 -0.00584776113735 -0.00140352222961. ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 0.00000000000000 0.00759155743061; 2 0.00000000000000 0.00000000000000 0.01575348711316; 3 0.00000000000000 0.00000000000000 -0.01604218334710; 4 -0.00080458046709 0.00000000000000 -0.00083578684600; 5 0.00080458046709 0.00000000000000 -0.00083578684600; 6 -0.00151233457098 -0.00586107718524 -0.00140782187617; 7 -0.00151233457098 0.00586107718524 -0.00140782187617; 8 0.00151233457098 0.00586107718524 -0.00140782187617; 9 0.00151233457098 -0.00586107718524 -0.00140782187617; ```; By disabling [this safety check](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/scfgrad/jk_grad.cc#L185) I can make the DF version run, which is clearly wrong:; ```; ## Total Gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 -0.00000000000000 -0.34802063969605; 2 0.00000000000000 -0.00000000000000 0.51455817020357; 3 0.00000000000000 0.00000000000000 0.04263207395510; 4 -0.03687141420968 -0.00000000000000 -0.01196133113197; 5 0.03687141420968 0.00000000000000 -0.01196133113197; 6 -0.06383887601370 -0.11505211473982 -0.04636560808797; 7 -0.06383887601370 0.11505211473982 -0.04636560808797; 8 0.06383887601370 0.11505211473982 -0.04636560808797; 9 0.06383887601370 -0.11505211473982 -0.04636560808797. ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 0.00000000000000 0.00759612379921; 2 0.00000000000000 0.00000000000000 0.01575853518631; 3 0.00000000000000 0.00000000000000 -0.01609636966124; 4 -0.00080665975793 0.00000000000000 -0.0008163383",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-351422094:1341,safe,safety,1341,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351422094,1,['safe'],['safety']
Safety,00[fa]fa fa; 0x0c068006f8d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c068006f8e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c068006f8f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c068006f900: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c068006f910: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07 ; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==10081==ABORTING; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). =================================================================; ==10025==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 282802 byte(s) in 124 object(s) allocated from:; #0 0x7f0f92dd6afc in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_malloc_linux.cc:62; #1 0x557f1794b8b3 in PyObject_Malloc (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0xe88b3). Direct leak of 2 byte(s) in 2 object(s) allocated from:; #0 0x7f0f92dd6afc in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_malloc_linux.cc:62; #1 0x557f17949fe0 in _PyObject_Alloc.isra.0 (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0xe6fe0). Indirect leak of 19819 byte(s) in 22 object(s) allocated from:; #0 0x7f0f92dd6afc in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_malloc_linux.cc:62; #1 0x557f1794b8b3 in PyObject_Malloc (/shared/raim,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756:17760,detect,detected,17760,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756,1,['detect'],['detected']
Safety,0; -- Check for working C compiler: /usr/bin/clang; -- Check for working C compiler: /usr/bin/clang -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- The Fortran compiler identification is GNU; -- Check for working Fortran compiler: /usr/local/bin/gfortran; -- Check for working Fortran compiler: /usr/local/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /usr/local/bin/gfortran supports Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenM,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:606,Detect,Detecting,606,https://psicode.org,https://github.com/psi4/psi4/issues/36,6,['Detect'],['Detecting']
Safety,"1. I was thinking about the broader optimization literature, not just SCF instabilities. The closest analogy to this problem may be where one is trying to start an IRC path from a saddle point, so the geometry optimization literature might have some ideas.; The machine learning folks have also been thinking about saddle point avoidance. [This paper](https://proceedings.neurips.cc/paper_files/paper/2014/file/17e23e50bedc63b4095e3d8204ce063b-Paper.pdf) discusses a generalized trust region method (they call it the ""saddle-free Newton""), which may be interesting, although it is more about not converging to saddle points, rather than starting out from them. 2. I was thinking about how trust region methods adjust their step size based on the mismatch between predicted and actual change in function value. I think in sufficiently flat regions numerical issues can hamstring any optimization method. 3. I think that is subjective to some extent, for me it sounded conceptually simpler. Amount of new code required is probably comparable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1706963056:328,avoid,avoidance,328,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706963056,2,"['avoid', 'predict']","['avoidance', 'predicted']"
Safety,11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;ENABLE_CHEMPS2=1;HAVE_MM_MALLOC_H;HAVE_DKH;HAVE_GDMA;HAVE_PCMSOLVER=1; -- The CXX compiler identification is GNU 4.8.2; -- The C compiler identification is GNU 4.8.2; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++; -- Check for working CXX compiler: /cluster/apps/gcc/4.8.2/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc; -- Check for working C compiler: /cluster/apps/gcc/4.8.2/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- The Fortran compiler identification is GNU 4.8.2; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran; -- Check for working Fortran compiler: /cluster/apps/gcc/4.8.2/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90; -- Checking whether /cluster/apps/gcc/4.8.2/bin/gfortran supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- l,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:9753,Detect,Detecting,9753,https://psicode.org,https://github.com/psi4/psi4/issues/581,4,['Detect'],['Detecting']
Safety,"3.6 -DPYTHON_INCLUDE_DIR=/usr/local/include/python3.6m -DPYTHON_LIBRARY=/usr/local/lib/libpython3.6m.so -DPSI4_ROOT=/usr/ports/science/psi4/work/psi4-1.3-60-ga5d3586e9 -DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF -DENABLE_dkh=OFF -DENABLE_libefp=OFF -DENABLE_erd=OFF -DENABLE_simint=OFF -DENABLE_gdma=OFF -DENABLE_PCMSolver=OFF -DENABLE_OPENMP=ON -DTargetLAPACK_DIR=/usr/ports/science/psi4/work/.build/stage/share/cmake/TargetLAPACK -DTargetHDF5_DIR= -Dambit_DIR= -DCheMPS2_DIR= -Ddkh_DIR= -Dlibefp_DIR= -Derd_DIR= -Dgau2grid_DIR=/usr/local/share/cmake/gau2grid -Dgdma_DIR= -DLibint_DIR= -DPCMSolver_DIR= -Dpybind11_DIR=/usr/local/share/cmake/pybind11 -Dpylibefp_DIR= -Dsimint_DIR= -DLibxc_DIR= -DFortran_ENABLED= -DLIBC_INTERJECT= -DRESTRICT_KEYWORD= -DFC_SYMBOL=2 -DOpenMP_LIBRARY_DIRS= -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -C/usr/ports/science/psi4/work/.build/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake ""-GUnix Makefiles"" /usr/ports/science/psi4/work/psi4-1.3-60-ga5d3586e9/psi4; loading initial cache file /usr/ports/science/psi4/work/.build/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL=, LANG=CXX, C/CXX/Fortran=Clang/Clang/; -- Found OpenMP_CXX: -fopenmp=libomp ; -- Found OpenMP: TRUE found components: CXX ; -- Using LAPACK: /usr/local/lib/libopenblas.so;...; -- Disabled HDF5; -- Using pybind11: /usr/local/include (version 2.2.4 for Py3.6.8 and -std=c++14); -- Using Python 3.6: /usr/local/bin/python3.6; -- Disabled ambit; -- Disabled CheMPS2; -- Disabled dkh; -- Disabled libefp; -- Disabled erd; -- Using gau2grid: /usr/local/lib/libgg.so.1 (version 1.3.1); -- Disabled gdma; CMake Error at CMakeLists.txt:132 (find_package):; Could not find a package configuration file provided by ""Libint"" (requested; version 1.2.0) with any of the following names:. LibintConfig.cmake; libint-config.cmake; ```. I have both ```libint-1.2.1_1``` and ```libint2-2.5.0.b.2.20_3``` installed, but neither of them provide cmake files. OS: FreeBSD 11.2.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1588:2097,Detect,Detecting,2097,https://psicode.org,https://github.com/psi4/psi4/issues/1588,1,['Detect'],['Detecting']
Safety,3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED [ 72%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 77%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 86%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 95%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [100%]; ============================================================== short test summary info ===============================================================; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:170: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:329: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:628: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build pl,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:3051,detect,detecting,3051,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['detect'],['detecting']
Safety,30 -0.003611 120.571750; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F4BEF0B510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F4C029A7FB0 Unknown Unknown Unknown; libc-2.27.so 00007F4C0260DEAB gsignal Unknown Unknown; libc-2.27.so 00007F4C025F85B9 abort Unknown Unknown; core.cpython-36m- 00007F4BF2B2E25A Unknown Unknown Unknown; core.cpython-36m- 00007F4BF15542FD Unknown Unknown Unknown; core.cpython-36m- 00007F4BF1570541 Unknown Unknown Unknown; core.cpython-36m- 00007F4BF0FFE806 Unknown Unknown Unknown; python3.6 0000556FBA8799E4 _PyCFunction_Fast Unknown Unknown; python3.6 0000556FBA906DFC Unknown Unknown Unknown; python3.6 0000556FBA92B94A _PyEval_EvalFrame Unknown Unknown; python3.6 0000556FBA900206 Unknown Unknown Unknown; python3.6 0000556FBA9011CF Unknown Unknown Unknown; python3.6 0000556FBA906ED5 Unknown Unknown Unknown; python3.6 0000556FBA92B94A _PyEval_EvalFrame Unknown Unknown; python3.6 0000556FBA901CB9 PyEval_EvalCodeEx Unknown Unknown; python3.6 0000556FBA902A4C PyEval_EvalCode Unknown Unknown; python3.6 0000556FBA97EC44 Unknown Unknown Unknown; python3.6 0000556FBA97ECDD PyRun_StringFlags Unknown Unknown; python3.6 0000556FBA929312 Unknown Unknown Unknown; python3.6 0000556FBA879921 _PyCFunction_Fast Unknown Unknown; python3.6 0000556FBA906DFC Unknown Unknown Unknown; python3.6 0000556FBA92B94A _PyEval_EvalFrame Unknown Unknown; python3.6 0000556FBA901CB9 PyEval_EvalCodeEx Unknown Unknown; python3.6 0000556FBA902A4C PyEval_EvalCode Unknown Unknown; python3.6 0000556FBA97EC44 Unknown Unknown Unknown; python3.6 0000556FBA97F041 PyRun_FileExFlags Unknown Unknown; python3.6 0000556FBA97F244 PyRun_SimpleFileE Unknown Unknown; python3.6 0000556FBA982D24 Py_Main Unknown Unknown; python3.6 0000556FBA84A75E main Unknown Unknown; libc-2.27.so 00007F4C025FA11B __libc_start_main Unknown Unknown; python3.6 0000556FBA93247B Unknown Unknown Unknown; ^C; [1]+ Aborted (imagem do núcleo gravada)psi4 PCl5.in; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265:5593,Abort,Aborted,5593,https://psicode.org,https://github.com/psi4/psi4/issues/1265,1,['Abort'],['Aborted']
Safety,3: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:15781,detect,detecting,15781,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,"3N-6 = 30 SALCs. There is no symmetry to exploit, as recognized or not by libmints. Here are the 3 point formulas O(1/h^2):; For diagonal:; [f(1,0) + f(-1,0) - 2f(0,0)]/(h^2); Off-diagonal; [f(1,1)+f(-1,-1)+2f(0,0) -f(1,0) -f(-1,0) -f(0,1) -f(0,-1)]/(2h^2). So the diagonal of the Hessian costs 30*2 = 60.; The off-diagonal costs an additional (29 \* 30 / 2 = 465 entries) times 2 = 870.; If there is an error, it is in libmints symmetry detection - not findif.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/145#issuecomment-122013214:438,detect,detection,438,https://psicode.org,https://github.com/psi4/psi4/issues/145#issuecomment-122013214,1,['detect'],['detection']
Safety,"4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):. In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; /usr/include/c++/5/bits/stl_iterator_base_types.h(156): error: name followed by ""::"" must be a class or namespace name; typedef typename _Iterator::difference_type difference_type;; ^; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; detected during:; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; instantiation of class ""std::__iterator_traits<_Iterator, void> [with _Iterator=int]"" at line 163; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive.hpp(18),; from /home/seba/software/psi4-0.5/src/lib/libmints/basisset.cc(29):; instantiation of class ""std::iterator_traits<_Iterator> [with _Iterator=int]"" at line 98 of ""/home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/regex_token_iterator.hpp""; In file included from /home/seba/software/psi4-0.5/objects/boost/include/boost/xpressive/xpressive_static.hpp(30),; from /home/seba/software/psi4-0.5/objects/boost/include",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262:10359,detect,detected,10359,https://psicode.org,https://github.com/psi4/psi4/issues/262,1,['detect'],['detected']
Safety,"42) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:1595,safe,safe,1595,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['safe'],['safe']
Safety,"49, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1). # Developer Interests; - Now uses LibXC for DFT XC kernels (#69",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:3099,avoid,avoid,3099,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['avoid'],['avoid']
Safety,6020053; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try Open,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:1194,Detect,Detecting,1194,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,4,['Detect'],['Detecting']
Safety,60721; -- The C compiler identification is Intel 17.0.0.20160721; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- The Fortran compiler identification is Intel 17.0.0.20160721; -- Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort; -- Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/629:6207,Detect,Detecting,6207,https://psicode.org,https://github.com/psi4/psi4/issues/629,2,['Detect'],['Detecting']
Safety,"682 changed files! GitHub struggled with this one. I think the risk we introduce by delaying and making merges harder is far greater than the couple of failing tests, so I'm going to say LGTM. Fantastic work to make this happen; sorry I couldn't help out. Hopefully I'll be able to help the hunt for cc14's issue soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/481#issuecomment-254349150:63,risk,risk,63,https://psicode.org,https://github.com/psi4/psi4/pull/481#issuecomment-254349150,1,['risk'],['risk']
Safety,"73100000 -0.000000000; C 1.934600000 -0.213400000 -0.000000000; H 2.475000000 -0.380600000 0.924600000; H 2.475400000 -0.380100000 -0.924300000; H -0.756100000 1.624500000 0.000500000; H -2.368000000 -0.187400000 0.878900000; H -1.437400000 -1.407900000 -0.000100000; H -2.368300000 -0.187200000 -0.878700000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(24000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. The program starts the optimization and produces an error:. ```; Performing finite difference calculations; 49 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB2D549510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007FB2DA9F68A0 Unknown Unknown Unknown; libc-2.27.so 00007FB2DA631F47 gsignal Unknown Unknown; libc-2.27.so 00007FB2DA6338B1 abort Unknown Unknown; core.cpython-37m- 00007FB2D7A0D3D7 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6563E2D Unknown Unknown Unknown; core.cpython-37m- 00007FB2D657D2C1 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6040FF6 Unknown Unknown Unknown; python3.7 000055D7E213E914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AAEBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D7E213E107 _PyFunction_FastC Unknown Unknown; python3.7 000055D7E21A64B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unk",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020:1308,Abort,Abort,1308,https://psicode.org,https://github.com/psi4/psi4/issues/2020,1,['Abort'],['Abort']
Safety,"7380 3.2257308775 -1.1130222609; H	2.8687615759 1.6638420009 -0.1549213082; H	0.2506882454 -2.1490136705 1.2871205466; H	-1.1675172916 2.5561147866 -1.3473002913; H	-2.9594867982 0.9074639926 -1.0076319073; H	-2.1654431803 -2.7365522813 1.1434359441; H	-3.7445689295 -1.2520671337 -0.0481282482; }; mol.update_geometry(); mol.symmetrize(0.001). set reference rks; set scf_type df; set basis def2-SV(P); set DYNAMIC_LEVEL 1. E = optimize('pbe'). ```. final output:; ```; 			-----------------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------; At level 1: Red. Int., RFO, no backsteps, dynamic trust; 	At level 1: Red. Int., RFO, no backsteps, dynamic trust. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3; 	 2 : 1 3 5; 	 3 : 1 2; 	 4 : 5 6 9; 	 5 : 2 4 8; 	 6 : 4 10 11; 	 7 : 8 10 14; 	 8 : 5 7 15; 	 9 : 4 12 16; 	 10 : 6 7 17; 	 11 : 6 13 18; 	 12 : 9 13 19; 	 13 : 11 12 20; 	 14 : 7; 	 15 : 8; 	 16 : 9; 	 17 : 10; 	 18 : 11; 	 19 : 12; 	 20 : 13. BEND::BEND() Atoms defining bend are not unique.; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source ; libgdma.so 00007F7B32CCF0DC for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F7B36A4A890 Unknown Unknown Unknown; core.cpython-37m- 00007F7B34813B00 Unknown Unknown Unknown; core.cpython-37m- 00007F7B34811B65 Unknown Unknown Unknown; core.cpython-37m- 00007F7B33D0BACD Unknown Unknown Unknown; core.cpython-37m- 00007F7B33D2109A Unknown Unknown Unknown; core.cpython-37m- 00007F7B3383BB3F Unknown Unknown Unknown; python3.7 000055AADA9716E4 _PyMethodDef_RawF Unknown Unknown; python3.7 000055AADA971801 _PyCFunction_Fast Unknown Unknown; python3.7 000055AADA9CD2BC _PyEval_EvalFrame Unknown Unknown; python3.7 000055AADA90E4F9 _PyEval_EvalCodeW Unknown Unknown;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1703:1609,Detect,Detected,1609,https://psicode.org,https://github.com/psi4/psi4/issues/1703,1,['Detect'],['Detected']
Safety,"8843 -0.00008607897565; > 9 0.00015309842746 -0.00478900518843 -0.00008607897565; >; > and thse for wB97X-D:; >; > ## Total Gradient (Symmetry 0) ##; > Irrep: 1 Size: 9 x 3; >; > 1 2 3; >; > 1 0.00000000000000 0.00000000000000 -0.02530663408790; > 2 0.00000000000000 -0.00000000000000 0.06073552407916; > 3 0.00000000000000 -0.00000000000000 -0.01910268412068; > 4 0.00053727899697 0.00000000000000 0.00185002606365; > 5 -0.00053727899697 -0.00000000000000 0.00185002606365; > 6 -0.00554076664310 -0.01384288220048 -0.00500656449972; > 7 -0.00554076664310 0.01384288220048 -0.00500656449972; > 8 0.00554076664310 0.01384288220048 -0.00500656449972; > 9 0.00554076664310 -0.01384288220048 -0.00500656449972; >; >; >; > ## F-D gradient (Symmetry 0) ##; > Irrep: 1 Size: 9 x 3; >; > 1 2 3; >; > 1 0.00000000000000 0.00000000000000 -0.02530648968490; > 2 0.00000000000000 0.00000000000000 0.06073503270434; > 3 0.00000000000000 0.00000000000000 -0.01910251844802; > 4 0.00053728999275 0.00000000000000 0.00185009324839; > 5 -0.00053728999275 0.00000000000000 0.00185009324839; > 6 -0.00554074931312 -0.01384287705163 -0.00500655276705; > 7 -0.00554074931312 0.01384287705163 -0.00500655276705; > 8 0.00554074931312 0.01384287705163 -0.00500655276705; > 9 0.00554074931312 -0.01384287705163 -0.00500655276705; >; > I'd actually expect slightly better agreement out of a 5 point finite; > difference stencil, but I'm willing to say that the gradient bug was fixed; > and we just never removed the safety check. I know I'm asking you to go way; > back here, @robparrish <https://github.com/robparrish> , but is this; > consistent with your memory of this code development?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/867#issuecomment-351148891>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdl5lqVefV1QILD-ityM84jvv2zgUks5s_smZgaJpZM4QonpI>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-351166112:4968,safe,safety,4968,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351166112,1,['safe'],['safety']
Safety,"9261be8f in pybind11::cpp_function::dispatcher(_object*, _object*, _object*) /home/raimis/opt/conda/envs/psi4/include/python3.6m/pybind11/pybind11.h:627; #16 0x7fa9b5205cbc in _PyCFunction_FastCallDict Objects/methodobject.c:231. SUMMARY: AddressSanitizer: heap-buffer-overflow /home/raimis/prj/psi4.git/psi4/src/psi4/cc/cctriples/EaT_RHF.cc:206 in psi::cctriples::EaT_RHF(); Shadow bytes around the buggy address:; 0x0c1080007420: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c1080007430: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c1080007440: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c1080007450: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c1080007460: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 00; =>0x0c1080007470:[fa]fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c1080007480: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c1080007490: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c10800074a0: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa; 0x0c10800074b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c10800074c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07 ; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==29447==ABORTING; ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Rename `psi::cctriples::thread_data` (in `EaT_RHF.cc`) to `psi::cctriples::EaT_RHF_thread_data`; - [x] Rename `psi::cctriples::thread_data` (in `ET_RHF.cc`) to `psi::cctriples::ET_RHF_thread_data`. ## Checklist; - [x] ~~Tests added for any ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1438:12379,ABORT,ABORTING,12379,https://psicode.org,https://github.com/psi4/psi4/pull/1438,1,['ABORT'],['ABORTING']
Safety,"9923 136.786876 142.021408; 	 462 R(3,10) = 4.421241 -0.017502 87.218679 91.639920; 	 463 R(3,59) = 3.917839 0.129694 117.366756 121.284594; 	 464 R(26,42) = 5.126758 -0.254383 106.705426 111.832184; 	 465 R(27,42) = 5.013692 -0.066414 135.796477 140.810169; 	 466 R(27,43) = 3.922541 0.040579 56.026763 59.949304; 	 467 R(31,42) = 4.773179 -0.049073 86.931871 91.705050; 	 468 R(36,42) = 5.289417 -0.215249 119.067163 124.356580; 	 469 R(38,42) = 4.228544 -0.108830 108.926322 113.154866; 	 470 R(38,48) = 3.625076 0.487672 45.283805 48.908881; 	 471 R(40,42) = 3.912528 0.142787 93.032857 96.945385; 	 472 R(40,43) = 3.961431 -0.231133 75.232676 79.194108; 	 473 R(43,51) = 4.402298 -0.008954 137.557753 141.960051; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB33148410F for__signal_handl Unknown Unknown; libpthread-2.31.s 00007FB3362A83C0 Unknown Unknown Unknown; libc-2.31.so 00007FB3360E718B gsignal Unknown Unknown; libc-2.31.so 00007FB3360C6859 abort Unknown Unknown; core.cpython-37m- 00007FB3339FF4C7 Unknown Unknown Unknown; core.cpython-37m- 00007FB332555F1D Unknown Unknown Unknown; core.cpython-37m- 00007FB33256F3B1 Unknown Unknown Unknown; core.cpython-37m- 00007FB3320330E6 Unknown Unknown Unknown; python3.7 000055D780EDE114 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D780EDE231 _PyCFunction_Fast Unknown Unknown; python3.7 000055D780F42A5D _PyEval_EvalFrame Unknown Unknown; python3.7 000055D780E976F9 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D780EDD917 _PyFunction_FastC Unknown Unknown; python3.7 000055D780F3F0A6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055D780E976F9 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D780E985F4 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055D780E9861C PyEval_EvalCode Unknown Unknown; python3.7 000055D780F99974 Unknown Unknown Unknown; python3.7 000055D780FA4BDD PyRun_StringFlags Unknown Unknown; python3.7 000055D780F4D854 Unknown Unknown Unknown; python3.7 000055D78",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1921:48357,abort,abort,48357,https://psicode.org,https://github.com/psi4/psi4/issues/1921,1,['abort'],['abort']
Safety,": Target ""psi4so"" has EXCLUDE_FROM_ALL set and will not be built by default but an install rule has been provided for it. CMake does not define behavior for this case.; -- The CXX compiler identification is GNU 5.2.0; -- The C compiler identification is GNU 5.2.0; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : **restrict**; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/lib64/libblas.so); -- Found LAPACK: SYSTEM_NATIVE (/lib64/liblapack.so); -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /us",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/312:2876,Detect,Detecting,2876,https://psicode.org,https://github.com/psi4/psi4/issues/312,8,['Detect'],['Detecting']
Safety,"://cmake.org/cmake/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication could be conda pkgs (even numpy) that are already in env and complicating the link loader's tasks. But we really shouldn't be telling ppl about preloading, which is bad practice for non-dire situations. @ryanmrichard [put in something](https://github.com/psi4/psi4/pull/513/files#diff-bb0d8c2ec987bfc58b4a943e453ea132L147) to preferentially detect the runtime lib as a bandaid to this.; * People for whom Bast math detection works fine but cmake FindLapack doesn't (namely, @psi-rking and [this fellow](http://forum.psicode.org/t/problem-with-building-from-source-according-to-cmakelists-txt/352/10) are having problems with libefp and CheMPS2 because different (or no) math libs are being inserted from those dependencies. I can forward the Bast libs to those external projects, but that'll cause some complications with the exported targets. I can fix that, but I fear that cmake will optimize away my start/end-groups again if they appear more than once. I am _not_ working on this right now, but I will have to, at a minimum, apply more bandaids soon, so I wanted to know from @robertodr and @bast if they're any solutions from the past two years. At a maximum, I'm tempted to default to `mkl_rt`, have ConfigMath export a target, and train libefp and CheMPS2 to detect it in preference to FindLapck. This is the s",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537:2339,detect,detect,2339,https://psicode.org,https://github.com/psi4/psi4/issues/537,1,['detect'],['detect']
Safety,":1001 ] Searching for CHRONO_LIBRARY_RELEASE: boost_chrono-mt-1_59;boost_chrono-mt;boost_chrono-mt-1_59;boost_chrono-mt;boost_chrono; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:1037 ] Searching for CHRONO_LIBRARY_DEBUG: boost_chrono-mt-d-1_59;boost_chrono-mt-d;boost_chrono-mt-d-1_59;boost_chrono-mt-d;boost_chrono-mt;boost_chrono; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:1001 ] Searching for THREAD_LIBRARY_RELEASE: boost_thread-mt-1_59;boost_thread-mt;boost_thread-mt-1_59;boost_thread-mt;boost_thread; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:1037 ] Searching for THREAD_LIBRARY_DEBUG: boost_thread-mt-d-1_59;boost_thread-mt-d;boost_thread-mt-d-1_59;boost_thread-mt-d;boost_thread-mt;boost_thread; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:1088 ] Boost_FOUND = 1; ```. ... after this point if hombrew boost _is unlinked_:. ```; -- Could NOT find Boost ; Could not find the following static Boost libraries:; boost_filesystem; boost_regex; boost_serialization; boost_system; boost_timer; boost_chrono; boost_thread; ```. ... and if hombrew boost _is linked_: . ```; Boost version: 1.59.0 ; Boost include path: /Users/admin/anaconda/envs/psi4-py2.7/include; -- Boost version: 1.59.0; -- Found the following Boost libraries:; -- filesystem; -- python; -- regex; -- serialization; -- system; -- timer; -- chrono; -- thread; ```. My main concern is CMake reporting Boost version 1.59.0, but then using library paths that point to a different version. I don't know if I would have been able to figure out what was going on if I didn't recognize the linker errors as the boost 1.60.0 incompatibility issue. ; (Good thing I have been reading the issues I guess! :tongue: ). But since `Boost_FOUND = 1` is set in both cases, why is the prepackaged boost being built? ; ### Temporary workaround. Using `-DBUILD_CUSTOM_BOOST=ON` will avoid the issue completely and still build successfully.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/313:11066,avoid,avoid,11066,https://psicode.org,https://github.com/psi4/psi4/issues/313,1,['avoid'],['avoid']
Safety,":56); ==98805== by 0x29697716: test (plugin.cc:134); ==98805== by 0x5FDD804: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5FE0666: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5F6A896: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x4FDC86: cfunction_call (methodobject.c:543); ==98805== by 0x4F741A: _PyObject_MakeTpCall (call.c:215); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:112); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:99); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:123); ==98805== by 0x4F34C5: UnknownInlinedFun (ceval.c:5893); ==98805== by 0x4F34C5: _PyEval_EvalFrameDefault (ceval.c:4181); ==98805== by 0x4FE0CE: UnknownInlinedFun (pycore_ceval.h:46); ==98805== by 0x4FE0CE: UnknownInlinedFun (ceval.c:5067); ==98805== by 0x4FE0CE: _PyFunction_Vectorcall (call.c:342); ==98805== If you believe this happened as a result of a stack; ==98805== overflow in your program's main thread (unlikely but; ==98805== possible), you can try to increase the size of the; ==98805== main thread stack using the --main-stacksize= flag.; ==98805== The main thread stack size used in this run was 8388608.; ==98805== ; ==98805== HEAP SUMMARY:; ==98805== in use at exit: 20,461,418 bytes in 40,150 blocks; ==98805== total heap usage: 393,696 allocs, 353,546 frees, 108,089,532 bytes allocated; ==98805== ; ==98805== LEAK SUMMARY:; ==98805== definitely lost: 0 bytes in 0 blocks; ==98805== indirectly lost: 0 bytes in 0 blocks; ==98805== possibly lost: 480,565 bytes in 454 blocks; ==98805== still reachable: 19,980,817 bytes in 39,694 blocks; ==98805== suppressed: 36 bytes in 2 blocks; ==98805== Rerun with --leak-check=full to see details of leaked memory; ==98805== ; ==98805== For lists of detected and suppressed errors, rerun with: -s; ==98805== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0); Segmentation fault (core dumped); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3200:4486,detect,detected,4486,https://psicode.org,https://github.com/psi4/psi4/issues/3200,1,['detect'],['detected']
Safety,":recursive62; - #2552 ; - #2557; - [ ] #2516. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Create compute classes for nbody, CBS and findif; - [ ] Integrate QCArchive. ## Release Notes; - `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - python 3.8 requires pint 0.10; - add a logging file, presently `file.log` that currently is continuously appended; - any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351:1546,safe,safety,1546,https://psicode.org,https://github.com/psi4/psi4/pull/1351,1,['safe'],['safety']
Safety,:test_psixas SKIPPED (Not detecting module psixas. Install package if necessary to enable tests.) [ 43%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_ipi_broker1 SKIPPED (Not detecting module ipi. Install package if necessary to...) [ 47%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to...) [ 49%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enabl...) [ 50%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dftd3 PASSED [ 52%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to e...) [ 54%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_pcmsolver SKIPPED (Not detecting module pcmsolver. Install package if necessar...) [ 56%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[libint2] PASSED [ 58%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[simint] SKIPPED (Not detecting module simint. Install package if nec...) [ 60%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_json PASSED [ 61%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if ne...) [ 63%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_grimme_3c PASSED [ 65%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_d,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:5306,detect,detecting,5306,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,"; - int atom_at_position1(double*, double tol = 0.05) const;; - int atom_at_position2(Vector3&, double tol = 0.05) const;; - int atom_at_position3(const std::array<double, 3>&, const double tol = 0.05) const;; + int atom_at_position1(double*, double tol = 1.e-6) const;; + int atom_at_position2(Vector3&, double tol = 1.e-6) const;; + int atom_at_position3(const std::array<double, 3>&, const double tol = 1.e-6) const;; /// @}; ; /// Do we reinterpret coordentries during a call to update_geometry?; @@ -505,7 +505,7 @@ class PSI_API Molecule {; * Force the molecule to have the symmetry specified in pg_.; * This is to handle noise coming in from optking.; */; - void symmetrize(double tol = 0.05, bool suppress_mol_print_in_exc = false);; + void symmetrize(double tol = 1.e-6, bool suppress_mol_print_in_exc = false);; /// @}; ; /**; @@ -668,7 +668,7 @@ class PSI_API Molecule {; /// Returns the Schoenflies symbol; std::string schoenflies_symbol() const;; /// Check if current geometry fits current point group; - bool valid_atom_map(double tol = 0.05) const;; + bool valid_atom_map(double tol = 1.e-6) const;; /// Return point group name such as C3v or S8.; std::string full_point_group() const;; /// Return point group name such as Cnv or Sn.; ```. input; ```; import psi4. mol = psi4.core.Molecule.from_arrays(; elez=[2, 4, 2],; #fix_com=True,; #fix_orientation=True,; fix_symmetry='c1',; tooclose=1.e-6,; real=[True, False, True],; geom=[; 1.0, 0.0, -0.01,; 1.0, 0.0, 0.0,; 1.0, 0.0, 0.01]); activate(mol). set basis cc-pvdz #ugbs; energy('scf'). # fix_symmetry needed to avoid:; #Program received signal SIGFPE, Arithmetic exception.; #0x00007fffe1b5700e in psi::PetiteList::init (this=0x0, tol=0) at /home/psilocaluser/gits/hrw-direct/psi4/src/psi4/libmints/petitelist.cc:567; #567 lamij_[ij] = (char)(ng_ / nij);. # now ends with; #Fatal Error: SOBasis::SOBasis: shell changed; #Error occurred in file: /home/psilocaluser/gits/hrw-direct/psi4/src/psi4/libmints/sobasis.cc on line: 257; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1843#issuecomment-595893879:3469,avoid,avoid,3469,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595893879,1,['avoid'],['avoid']
Safety,; 2B2g 26.177 211129.5 47.4 0.961977 0.0000 0.0000 0.0000 0.000000E+00; 3B2g 30.589 246713.1 40.5 1.124108 0.0000 0.0000 0.0000 0.000000E+00; 4B2g 36.015 290484.5 34.4 1.323545 0.0000 0.0000 0.0000 0.000000E+00; 1B3g 19.495 157235.3 63.6 0.716417 0.0000 0.0000 0.0000 0.000000E+00; 2B3g 19.585 157966.1 63.3 0.719747 0.0000 0.0000 0.0000 0.000000E+00; 3B3g 19.612 158178.3 63.2 0.720713 0.0000 0.0000 0.0000 0.000000E+00; 4B3g 19.626 158297.8 63.2 0.721258 0.0000 0.0000 0.0000 0.000000E+00; 1 Au 28.127 226859.8 44.1 1.033649 0.0000 0.0000 0.0000 0.000000E+00; 2 Au 38.607 311383.0 32.1 1.418765 0.0000 0.0000 0.0000 0.000000E+00; 3 Au 40.680 328106.5 30.5 1.494963 0.0000 0.0000 0.0000 0.000000E+00; 4 Au 46.518 375194.6 26.7 1.709513 0.0000 0.0000 0.0000 0.000000E+00; 1B1u 13.809 111376.2 89.8 0.507467 0.3270 0.0000 0.0000 2.705606E+09; 2B1u 26.345 212486.8 47.1 0.968161 0.2787 0.0000 0.0000 8.394111E+09; 3B1u 28.418 229205.6 43.6 1.044338 0.0041 0.0000 0.0000 1.426430E+08; 4B1u 34.059 274701.9 36.4 1.251634 0.0003 0.0000 0.0000 1.670003E+07; 1B2u 13.809 111376.2 89.8 0.507467 0.3270 0.0000 0.0000 2.705606E+09; 2B2u 26.345 212486.8 47.1 0.968161 0.2787 0.0000 0.0000 8.394111E+09; 3B2u 28.418 229205.6 43.6 1.044338 0.0041 0.0000 0.0000 1.426430E+08; 4B2u 34.059 274701.9 36.4 1.251634 0.0003 0.0000 0.0000 1.670003E+07; 1B3u 12.527 101040.6 99.0 0.460375 0.3114 0.0000 0.0000 2.120269E+09; 2B3u 15.263 123102.2 81.2 0.560895 0.1514 0.0000 0.0000 1.530130E+09; 3B3u 20.039 161623.1 61.9 0.736409 0.1214 0.0000 0.0000 2.114615E+09; 4B3u 25.716 207413.4 48.2 0.945045 0.0341 0.0000 0.0000 9.774464E+08; ```. I do notice some nonsense is being printed in the `Excited State -> Excited State Transitions` section. Looks similar to what you have above:. ```; 1B1g->1B2g 0.000 0.0 86055398391528.6 0.000000 0.0000 0.0000 0.0000 0.000000E+00; ```. We should probably put something in to detect degeneracy and print something that indicates that or at least gracefully handle the conversion to nm.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/521#issuecomment-261612983:2817,detect,detect,2817,https://psicode.org,https://github.com/psi4/psi4/issues/521#issuecomment-261612983,1,['detect'],['detect']
Safety,"; 388/401 Test #374: pywrap-align-chiral ..............***Failed 1.21 sec; 389/401 Test #300: pywrap-checkrun-rhf .............. Passed 972.11 sec; 390/401 Test #289: psimrcc-pt2 ...................... Passed 1.88 sec; 391/401 Test #283: psimrcc-ccsd_t-1 ................. Passed 2.04 sec; 392/401 Test #285: psimrcc-ccsd_t-3 ................. Passed 2.10 sec; 393/401 Test #284: psimrcc-ccsd_t-2 ................. Passed 2.22 sec; 394/401 Test #290: psimrcc-sp1 ...................... Passed 3.41 sec; 395/401 Test #296: pywrap-all ....................... Passed 973.84 sec; 396/401 Test #86: cepa1 ............................ Passed 4.52 sec; 397/401 Test #391: python-vibanalysis ............... Passed 976.98 sec; 398/401 Test #360: cubeprop-esp .....................***Failed 6.53 sec; 399/401 Test #18: cbs-xtpl-func .................... Passed 1096.76 sec; 400/401 Test #370: dft-bench-ionization ............. Passed 2039.20 sec; 401/401 Test #371: dft-bench-interaction ............***Timeout 3000.03 sec. 99% tests passed, 5 tests failed out of 401. Label Time Summary:; adc = 61.70 sec*proc (2 tests); autotest = 1698.69 sec*proc (25 tests); cart = 9530.61 sec*proc (123 tests); cas = 29.65 sec*proc (1 test); casscf = 157.01 sec*proc (11 tests); cbs = 2162.96 sec*proc (10 tests); cc = 9085.75 sec*proc (64 tests); cdomp2 = 59.27 sec*proc (2 tests); cepa = 203.58 sec*proc (7 tests); ci = 83.42 sec*proc (8 tests); cisd = 109.67 sec*proc (7 tests); cookbook = 222.55 sec*proc (1 test); cubeprop = 14.38 sec*proc (2 tests); dcft = 3348.62 sec*proc (13 tests); df = 1824.24 sec*proc (38 tests); dfccd = 3.69 sec*proc (1 test); dfccd-grad = 13.83 sec*proc (1 test); dfccdl = 8.06 sec*proc (1 test); dfccsd = 4.58 sec*proc (1 test); dfccsd-grad = 43.20 sec*proc (1 test); dfccsd-t-grad = 38.87 sec*proc (1 test); dfccsdat = 20.44 sec*proc (1 test); dfccsdl = 4.62 sec*proc (1 test); dfccsdt = 10.41 sec*proc (1 test); dfep2 = 7.13 sec*proc (2 tests); dfmp2 = 121.95 sec*proc (11 tests); dfom",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:37342,Timeout,Timeout,37342,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Timeout'],['Timeout']
Safety,; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[simint] SKIPPED (Not detecting module simint. Install package if nec...) [ 60%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_json PASSED [ 61%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if ne...) [ 63%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_grimme_3c PASSED [ 65%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable ...) [ 67%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to e...) [ 69%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enabl...) [ 70%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary ...) [ 72%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enabl...) [ 74%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_mdi.py::test_mdi_water SKIPPED (Not detecting module mdi. Install package if necessary to enable tests.) [ 76%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py::test_spacious_option PASSED [ 78%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 80%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 83%]; psi4conda/envs/psi4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:6667,detect,detecting,6667,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,"= 179.050978 0.000006 0.918241 179.969219; 	 458 D(80,79,81,82) = -0.723483 -0.000001 0.699743 -0.023740; 	 459 R(1,57) = 4.556972 0.028391 82.812579 87.369551; 	 460 R(1,59) = 4.234547 -0.016108 88.866233 93.100780; 	 461 R(1,61) = 5.234532 -0.079923 136.786876 142.021408; 	 462 R(3,10) = 4.421241 -0.017502 87.218679 91.639920; 	 463 R(3,59) = 3.917839 0.129694 117.366756 121.284594; 	 464 R(26,42) = 5.126758 -0.254383 106.705426 111.832184; 	 465 R(27,42) = 5.013692 -0.066414 135.796477 140.810169; 	 466 R(27,43) = 3.922541 0.040579 56.026763 59.949304; 	 467 R(31,42) = 4.773179 -0.049073 86.931871 91.705050; 	 468 R(36,42) = 5.289417 -0.215249 119.067163 124.356580; 	 469 R(38,42) = 4.228544 -0.108830 108.926322 113.154866; 	 470 R(38,48) = 3.625076 0.487672 45.283805 48.908881; 	 471 R(40,42) = 3.912528 0.142787 93.032857 96.945385; 	 472 R(40,43) = 3.961431 -0.231133 75.232676 79.194108; 	 473 R(43,51) = 4.402298 -0.008954 137.557753 141.960051; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB33148410F for__signal_handl Unknown Unknown; libpthread-2.31.s 00007FB3362A83C0 Unknown Unknown Unknown; libc-2.31.so 00007FB3360E718B gsignal Unknown Unknown; libc-2.31.so 00007FB3360C6859 abort Unknown Unknown; core.cpython-37m- 00007FB3339FF4C7 Unknown Unknown Unknown; core.cpython-37m- 00007FB332555F1D Unknown Unknown Unknown; core.cpython-37m- 00007FB33256F3B1 Unknown Unknown Unknown; core.cpython-37m- 00007FB3320330E6 Unknown Unknown Unknown; python3.7 000055D780EDE114 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D780EDE231 _PyCFunction_Fast Unknown Unknown; python3.7 000055D780F42A5D _PyEval_EvalFrame Unknown Unknown; python3.7 000055D780E976F9 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D780EDD917 _PyFunction_FastC Unknown Unknown; python3.7 000055D780F3F0A6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055D780E976F9 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D780E985F4 PyEval_EvalCodeEx Unknown Unknown",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1921:48099,Abort,Abort,48099,https://psicode.org,https://github.com/psi4/psi4/issues/1921,1,['Abort'],['Abort']
Safety,=========== short test summary info =========================================================================; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:13: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:162: Not detecting module mrcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:186: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:233: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:13028,detect,detecting,13028,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,=========================== short test summary info ===============================================================; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:170: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:329: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:628: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:798: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:909: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:925: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp). ================================================================== warnings summary ===========================================================,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:3827,detect,detecting,3827,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['detect'],['detecting']
Safety,"============================== warnings summary ===================================================; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:599; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:701; `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:698; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:699; `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:702; `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!; =================================== 3950 deselected, 5 warnings, 1 error in 20.79s ====================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542:5747,safe,safe,5747,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542,1,['safe'],['safe']
Safety,"================================================ test session starts ===========================================================================; platform win32 -- Python 3.8.10, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- C:\Users\erikc\psi4conda\envs\psi4env\python.exe; cachedir: .pytest_cache; rootdir: C:\Users\erikc; collected 3356 items / 3301 deselected / 55 selected. psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enable tests.) [ 1%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker1 PASSED [ 3%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker2 PASSED [ 5%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED (Not detecting module mrcc. Install package if necessary to enable tests.) [ 7%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to enable t...) [ 9%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED (Not detecting module erd. Install package if necessary to enable tests.) [ 18%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_simint SKIPPED (Not detecting module simint. Install package if necessa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:1310,detect,detecting,1310,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,"> ...Well, thanks Molpro. We have a legitimate ambiguity after all. :-). > cepa(0) stays lccsd for energy, gradient, etc. purposes. sounds good -- can avoid deprecation warnings. > Any time cepa(0) appears in an output file, we clarify what we're talking about. Explicitly saying ""Linearized CCD"" or ""Linearized CCSD"" is ideal. If we need to abbreviate, I've seen some Bartlett papers where they use LinCCD. Crawford has a good point about LCCD referring to localization. If we try to eliminate cepa(0) meaning lccd entirely, we create havoc with Bozkaya's papers. If we have a logging module, we print out a warning there too. * overall sounds good to add very specific text clarifying CCD/CCSD. I'm less concerned about linearized/local since psi has none of the latter.; * should try to keep output of cepa-0,1,2,etc. cohesive for fnocc; * I'd like to not disrupt the qcvars, presently e.g., `LCCD OPPOSITE-SPIN CORRELATION ENERGY`, `LCCSD TOTAL ENERGY`, but I'm not adamant.; * I'm less concerned about cohesiveness with UB papers. After all, once upon a time, the occ/dfocc code was ""using lccd for non-orbital-optimized and ocepa0 for orbital-optimized"". Any firm connections btwn code and paper can be cemented by pasting some DOIs. IMO, psi should try to be cohesive from the face, not from the lit perspective. > cepa is eliminated from dct. Andy put that in there years ago to facilitate comparison between Kutzelnigg's first stab at DCT and LCCD. Without getting into the theory weeds, that's not a useful comparison now, and it's going to be an even less useful comparison after I've published my next two papers. It's an awkward addition given the DCT logic. It's easiest to get rid of it and direct users to occ, dfocc, or fnocc. sounds good.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1872#issuecomment-616909231:151,avoid,avoid,151,https://psicode.org,https://github.com/psi4/psi4/issues/1872#issuecomment-616909231,1,['avoid'],['avoid']
Safety,"> ; > ; > FWIW, I cannot make the input fail with mkl2020.1 on my Ryzen (gen1) workstation.; > It has instructions till AVX2. MKL and any binaries generated by Intel compilers are almost always detecting CPU vendors based on vendor first and instruction support second. Something like this:; ```; if ( CPU_VENDOR == Intel){; if ( CPU_HAS_AVX_512 ) <call AVX-512 version of the function>; if ( CPU_HAS_AVX2 ) <call AVX2 version of the function>; ...; else <call SSE2 version of the function>; } else { //non-Intel CPU; <call SSE2 version of the function>; }; ```; So this means that unless one adds some some unofficial hacks before compiling the binaries, all AMD CPUs, regardless of their AVX support, will be running SSE2 (or similarly unoptimized) codepaths only.; This unfair CPU dispatch function can be overridden at runtime for the MKL using an unofficial debug environmental variable, but if the binary was compiled with an Intel compiler, then all parts touched by the auto-vectorizer are probably still going to execute the SSE2 (or a similarly unoptimized) path on AMD CPUs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1896#issuecomment-633666655:194,detect,detecting,194,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633666655,1,['detect'],['detecting']
Safety,"> ; > ; > my 2 cents on this: The geometry you posted looks broken to me (too long 'bonds'). I'd guess the optimizer had some troubles displacing the geometry correctly. Often it is enough to set `opt_coordinates both`, which mixes cartesian and redundant coordinates. If the fault does lie in the bonds being stretched (the first two CC bonds start off at 1.52 ang, and end up at 1.65 ang, chemistry tells us single c-c bonds are around 1.54 ang), and the first scf round does converge(it does), then wouldn't the fault end up being with the gradient calculation, since I am assuming, this is what is used to make the coordinate adjustment? I am not sure how to counter this if that is the issue. Can I damp the geometry optimization step?. I am trying with the `opt_coordinates` mixed coordinates, as well as waiting on the `guess_persist` results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-953185581:246,redund,redundant,246,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953185581,1,['redund'],['redundant']
Safety,"> > @hokru For ωB97M-V, it doesn't seem to be possible to change the ω parameter directly from the psithon interface—there's a check at; > > https://github.com/psi4/psi4/blob/d9093c75c71c2b33fbe86f32b25d138675ac22eb/psi4/src/psi4/libfunctional/LibXCfunctional.cc#L218; > > ; > > that disallows it. I want to be on the safe side and not manually change it without knowing why the limitation is put in place.; > ; > @susilehtola? It looks like this code was added as part of Psi adopting LIbXC in May 2017, so this may be as simple as ""it's perfectly legitimate to change omega here; the code needs to be modernized already."". Looks like hacky code. I'll send a patch",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1194210633:318,safe,safe,318,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1194210633,1,['safe'],['safe']
Safety,"> > Iirc, @andysim said that the old libmints solidharmonics.cc code is outdated anyways, and the Helgaker recursions are better. Feel free to comment Andy.; > ; > Both codes use regular solid harmonics with the exact same normalization (assuming that your Helgaker recursions match that code that I sent to you a while ago, Andy). The code in libmints is stuff that was taken from MPQC, but becomes painfully slow around L=9 or so. We had to reduce the default maximum L a while ago because it was dramatically slowing the Psi4 startup time. So I think that, if it turns out not to be a huge task, replacing the libmints code with smarter recursions is probably not a bad idea. Failing that, the Helgaker version is not really introducing any redundancy because the libmints version won't be able to support high enough a.m. efficiently. Since the Helgaker code is more efficient, should I do that replacement in this PR or the next? Also, does that mean we need to just move everything in libfmm to libmints? @jturney thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2665#issuecomment-1209579441:744,redund,redundancy,744,https://psicode.org,https://github.com/psi4/psi4/pull/2665#issuecomment-1209579441,1,['redund'],['redundancy']
Safety,"> > It looks like the diff is not clean: there are changes that don't appear to arise from this pull. There's also a merge conflict.; > ; > Yes, we're working on it. Much history in this branch. Ugh, just spent all night rebasing, should be ready now. I will test my code again tomorrow as a sanity check :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2187#issuecomment-854300953:292,sanity check,sanity check,292,https://psicode.org,https://github.com/psi4/psi4/pull/2187#issuecomment-854300953,1,['sanity check'],['sanity check']
Safety,> > The `Array2d` class needs to go. Happy to see even a bit of it be destroyed.; > ; > I'm not familiar with this class (or the `occ` module for that matter). What's the motivation for getting rid of it?. Redundancy. It's essentially a symmetry-less Matrix.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2679#issuecomment-1215513953:206,Redund,Redundancy,206,https://psicode.org,https://github.com/psi4/psi4/pull/2679#issuecomment-1215513953,1,['Redund'],['Redundancy']
Safety,"> > would you have any thoughts/concerns on doing the SAD guessing in `PySCF` and then doing the row/col re-ordering?; > ; > What do you need the guesses for? PySCF can also be used to run similar calculations as Psi4.; > ; > I don't know if there are differences between the basis function conventions between Psi4 and PySCF. Unfortunately, quantum chemistry programs are not interoperable. I'm trying to build a ML model that can predict the converged density matrix. To verify whether the model is of any value, I wish to plug the predictions into a quantum chemistry program. . The problem is that the dataset I'm using (`QMugs`) has used `psi4` to calculate ""groundtruth"" energies & density matrices at the DFT level. So, my ML model is learning to output density matrices with the ordering convention used by `psi4`. If I wish to plug it into a different software, like `PySCF`, I believe I'll have to do some re-ordering or transformations... Would simply re-ordering the rows/columns not work? (my understanding was that if the basis set was identical, but just that one program uses say `px py pz` vs another using `pz py px` a reordering would suffice, but I'm not exactly a quantum chemistry expert...). Similarly, I wish to compare the convergence rates of my ML model's predicted density matrices against default initial guesses, and also just look at the matrices themselves to compare how they look like (for my own understanding/analysis)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2897#issuecomment-1470128276:432,predict,predict,432,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1470128276,3,['predict'],"['predict', 'predicted', 'predictions']"
Safety,"> @JonathonMisiewicz the test in question is `dfmp2-ecp` which has been unreliable for some time, way before #1456 was merged. See #1433. I can't tell if we're disagreeing about facts or best practices. Peter added new tests of SCF energies to `dfmp2-ecp`. A few days ago, his new tests passed. Before the force-push, his tests failed. This tipped us off that _some_ other PR changed the energy to which frozen core ECP computations converge. Peter was able to reproduce the change in energies on a non-PR branch, confirming it. The first problem is that unless I missed something, there _shouldn't_ have been a PR that would change those energies. Apparently, there is one, and we don't know how many computations it afflicts. Probably just frozen core ECP, but there is a question mark on that one. Second, one of these two answers has to be wrong. I cannot believe this is a case of computations being insufficiently converged or landing on different states. If Psi is giving or was giving wrong answers, then at the absolute minimum, we have an obligation to let people know. And if this test is just meant to detect changes in energies without worrying about why, that needs to be said in the test itself.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-452670933:1114,detect,detect,1114,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-452670933,1,['detect'],['detect']
Safety,"> @hokru For ωB97M-V, it doesn't seem to be possible to change the ω parameter directly from the psithon interface—there's a check at; > ; > https://github.com/psi4/psi4/blob/d9093c75c71c2b33fbe86f32b25d138675ac22eb/psi4/src/psi4/libfunctional/LibXCfunctional.cc#L218; > that disallows it. I want to be on the safe side and not manually change it without knowing why the limitation is put in place. @susilehtola? It looks like this code was added as part of Psi adopting LIbXC in May 2017, so this may be as simple as ""it's perfectly legitimate to change omega here; the code needs to be modernized already.""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1194172697:310,safe,safe,310,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1194172697,1,['safe'],['safe']
Safety,"> A couple thoughts before a more thorough review:; > ; > Can you add some test cases to verify that this doesn't change the SCF energy? That set of test molecules from yesterday would be good, plus a few larger molecules; > ; > Could you do some timing to verify that this does in fact speed the SCF code up? A comparison of system size, density threshold, timing, and energy error would be good.; > ; > It appears that you're calculating integrals within the master loop and doing redundant work, possibly more than the original algorithm. I think you want to calculate all (NM|NM) shells outside of the loop and use those integrals within the loop. I will run a variety of tests and include that as a Google Sheets link. And your point about redundancy is good. I will get that fixed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2062#issuecomment-743354001:483,redund,redundant,483,https://psicode.org,https://github.com/psi4/psi4/pull/2062#issuecomment-743354001,2,['redund'],"['redundancy', 'redundant']"
Safety,"> AFAIK, currently the only safe way to call OpenBLAS BLAS/LAPACK routines from OMP parallel regions, is to use an OpenBLAS build compiled with USE_OPENMP=1. This is correct. OpenBLAS used to spam `stderr` (i think) with a warning everytime you call a pthreaded BLAS inside an openmp region. I was expecting to see it for my test with the ""wrong"" openblas library, but maybe psi4 redirects it. Or i accidentally used USE_OPENMP=1 for both tests..",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390199490:28,safe,safe,28,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390199490,1,['safe'],['safe']
Safety,"> After further discussion, including with Dr. Sherrill, we have decided to keep the current atom-blocking structure of LinK, since we can avoid situations ""of too-small workloads in the inner loops"" in the words of Dr. Sherrill when we run DirectJK in parallel. Changing the linK code to shell-blocking instead of atom-blocking would be outside the scope of this PR. Whether ""changing the linK code to shell-blocking instead of atom-blocking would be outside the scope of this PR"" is a definition game. Is the goal of this PR ""implement a linK derivative with atom-blocking"" or ""implement the most efficient linK derivative we can think of""? If it's the former, then it's out-of-scope, and if it's the latter, then it's in-scope. Since you are not implementing the Ochsenfeld algorithm but a derivative thereof, give me a pseudocode version of your linK derivative that tells me _exactly_ what the loops are, what's getting parallelized, whether your screening is atom-based or shell-based, and what integrals you're computing based on your screening. My chief concern is this: It looks to me like you are computing integrals that you already know are insignificant (if the shell pair was screened out, but some other shell pair on the atom pair was not) because you can parallelize more efficiently. Parallelization efficiency is not the primary metric we care about, runtime is. It isn't clear to me how giving ourselves extra work is reducing runtime. If it's more efficient to screen out irrelevant shell pairs but distribute all relevant shell pairs between two atoms to a single thread, go for it: we're not computing extra integrals in that case. But if we distribute all shell pairs between relevant atoms to a single thread... that could be a lot of extra work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-999662496:139,avoid,avoid,139,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-999662496,1,['avoid'],['avoid']
Safety,"> Also, how have you verified correctness? While I'm not familiar with these methods, ""can induce an energy difference of over 2 _hartrees_ even at conservative cutoffs"" does not seem safe. I have extensively verified the correctness of this approach, across many different molecules, basis sets, etc. I have never observed an error of ""2 Hartrees"". The worst I have ever observed is on the order of 1.0e-5 Hartrees, better than density fitting. Here is a link to my ""benzene case study"". https://docs.google.com/spreadsheets/d/1HDMZ5PV6GhnK4i68Y1t86VhauTwqMP_X2kII21GCsiY/edit?usp=sharing. I empirically discovered that the best screening threshold given an energy convergence of 1.0e-n is 1.0e-(n+3) for non-augmented basis sets and 1.0e-(n+5) for augmented basis sets. For example, for an e_convergence of 1.0e-8 in cc-pVTZ, the ideal threshold is 1.0e-11, while it is 1.0e-13 in aug-cc-pVTZ.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821189029:184,safe,safe,184,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821189029,1,['safe'],['safe']
Safety,> Are there any known methods of getting to build Numpy/Scipy from source using Accelerate to avoid the mismatch? (I think support might have been dropped altogether.). When I was looking for it recently I only found that Numpy dropped support of Accelerate some time ago because it only provided an old lapack version. This was pre-M1 as far as I know. ; Maybe it is possible to build numpy regardless of support with some manual interventions.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-956060090:94,avoid,avoid,94,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956060090,1,['avoid'],['avoid']
Safety,"> Could we catch the case where users request multiple roots and stop the program? Fewer and fewer people look at the actual output files.; > ; > I would also support the more extreme solution of just fully disabling the internal adc. Better some potential inconvenience than wrong results. 1. This is possible in principle, but I don't know _exactly_ what conditions trigger the bug, so there may be some single-root cases that also trigger it.; 2. Removing the buggy internal ADC was my original proposal on the January conference call, but @fevangelista disapproved without a deprecation period first. I was hoping to avoid an argument about ""remove vs deprecate"" as not a good use of my time, but if we're going to have the argument anyways, I'm on the remove side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2419#issuecomment-1029193405:621,avoid,avoid,621,https://psicode.org,https://github.com/psi4/psi4/pull/2419#issuecomment-1029193405,1,['avoid'],['avoid']
Safety,"> Hi @susilehtola, I've been following Libxc v5.1 https://gitlab.com/libxc/libxc/-/issues/186 with interest. When I compiled this branch (after rebase; including your fixes from the spring, thanks!) in late December against the the Libxc 5.0 branch, I got about the same Psi4 test results as recorded above -- lots of `Matrix::power: C_DSYEV failed`.; > ; > However, when I compile this branch against the new Libxc 5.1 hotfix branch, I don't even get that far. After disabling OpenMP, I get segfaults (dft-psivar):; > ; > ```; > (gdb) bt; > #0 0x00007ffff78351d7 in raise () from /lib64/libc.so.6; > #1 0x00007ffff78368c8 in abort () from /lib64/libc.so.6; > #2 0x00007ffff782e146 in __assert_fail_base () from /lib64/libc.so.6; > #3 0x00007ffff782e1f2 in __assert_fail () from /lib64/libc.so.6; > #4 0x00007fffed70db12 in xc_mix_func (func=func@entry=0x555556ca7500, np=np@entry=255, rho=rho@entry=0x555556e575c0, sigma=sigma@entry=0x555556ccda80, lapl=lapl@entry=0x0, tau=tau@entry=0x0, zk=0x555556771300, vrho=0x55555e164460, vsigma=0x555556c12720, vlapl=0x0, vtau=0x0, v2rho2=0x0, v2rhosigma=0x0, v2rholapl=0x0, v2rhotau=0x0, v2sigma2=0x0, ; > v2sigmalapl=0x0, v2sigmatau=0x0, v2lapl2=0x0, v2lapltau=0x0, v2tau2=0x0, v3rho3=0x0, v3rho2sigma=0x0, v3rho2lapl=0x0, v3rho2tau=0x0, v3rhosigma2=0x0, v3rhosigmalapl=0x0, v3rhosigmatau=0x0, v3rholapl2=0x0, v3rholapltau=0x0, v3rhotau2=0x0, v3sigma3=0x0, v3sigma2lapl=0x0, v3sigma2tau=0x0, v3sigmalapl2=0x0, v3sigmalapltau=0x0, v3sigmatau2=0x0, ; > v3lapl3=0x0, v3lapl2tau=0x0, v3lapltau2=0x0, v3tau3=0x0, v4rho4=0x0, v4rho3sigma=0x0, v4rho3lapl=0x0, v4rho3tau=0x0, v4rho2sigma2=0x0, v4rho2sigmalapl=0x0, v4rho2sigmatau=0x0, v4rho2lapl2=0x0, v4rho2lapltau=0x0, v4rho2tau2=0x0, v4rhosigma3=0x0, v4rhosigma2lapl=0x0, v4rhosigma2tau=0x0, v4rhosigmalapl2=0x0, v4rhosigmalapltau=0x0, ; > v4rhosigmatau2=0x0, v4rholapl3=0x0, v4rholapl2tau=0x0, v4rholapltau2=0x0, v4rhotau3=0x0, v4sigma4=0x0, v4sigma3lapl=0x0, v4sigma3tau=0x0, v4sigma2lapl2=0x0, v4sigma2lapltau",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754743798:626,abort,abort,626,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754743798,1,['abort'],['abort']
Safety,"> Hm, is there a requirement on the ordering used in Libint2? This may complicate packaging... Yes, there's ordering requirements at two different levels. The cartgauss_ordering has to be chosen at code-generation time, but fortunately psi4 uses `standard`. The spgauss_ordering can be selected at code-compile time, and here psi4 uses `gaussian` (not default). So for binary distribution, yes, there's going to be packaging complications. I've translated both stages of libint2 build to cmake and added in `find_package(..., COMPONENTS ...)` selectors https://github.com/evaleev/libint/pull/148/files#diff-4cfbbb105ca3b371b7251a6e37a56f74R41 so that downstream programs can avoid detecting unsuitable installations. Of course that doesn't help non-cmake downstreams much ...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-685960414:675,avoid,avoid,675,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-685960414,2,"['avoid', 'detect']","['avoid', 'detecting']"
Safety,"> I am not planning to look at this code until your other two PRs (#2155 and #2187) are closer to acceptance but am leaving some ""triage"" comments.; > ; > * Labels in the title are an eyesore, and GitHub has its own labels feature. I've added them as proper labels instead. Similarly, in future, please mark a PR as draft rather than add a ""[Work in Progress]"" text tag.; > * It isn't clear to me if there's anything in particular you want to get by submitting this PR when it's not even marked for review. Did you submit this to get feedback on the ""Do we need a new JK object?"" question?; > * I am going to ask that _in future_, you have more descriptive git commits rather than whatever words are currently on your mind. As somebody who has to debug Psi decently often, commit histories are often an invaluable clue to figuring out what the intention behind some obscure piece of code is. I'd _prefer_ if you cleaned up the commit messages for this PR, but I'm not going to insist on it. Also, I opened this PR early in order to a) Update the Psi developers on the progress of the new CFMM code, and b) To get y'all to start thinking about the future of the JK class, and potential design choices for if a user would like to run, per se DF-J + linK, CFMM-J + chain-of-spheres K, etc. Also, most of my ""non-sense"" PR messages result from the fact that I have to change branches, so I make a quick push to GH before I switch to another project, and can be safely ignored, as they don't mean anything. I will avoid doing such a thing in the future though, and add more descriptive Git messages :) However, the descriptive commit messages DO mean something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2311#issuecomment-933583054:1457,safe,safely,1457,https://psicode.org,https://github.com/psi4/psi4/pull/2311#issuecomment-933583054,2,"['avoid', 'safe']","['avoid', 'safely']"
Safety,"> I am using the latest git snapshot of the master branch. gtk. [this](https://anaconda.org/psi4/psi4-dev/files) is what I was talking about. It hides dependency tracking from many psi builders and seeds cmake configuration. I was hoping that could carry most builds until FindMPFR called by Libint2Config and I come to terms. Are you building libint2 through psi or using the libint2 conda-package or detecting other pre-built (will need to silence find_apckage(... components) in that case)? For now, I'd add `find_package(eigen)` and hack cmake_module_path as needed. And this should stay open until I get it patched correctly upstream. ```; ambit >=0.5.1,<0.6.0a0, chemps2 >=1.8.9,<1.8.10.0a0, cmake >=3.8, dkh >=1.2,<1.3.0a0, eigen, gau2grid >=2.0.3,<3.0a0, gcc_linux-64 7.*, gdma >=2.2.6,<2.2.7.0a0, gfortran_linux-64 7.*, gxx_linux-64 7.*, hdf5 >=1.10.6,<1.10.7.0a0, libint2 2.6.0 hc9558a2_9, libxc >=4.3.4,<5.0a0, mkl-devel 2019.*, mpfr, msgpack-python, networkx >=2.4, numpy >=0.12.0, pcmsolver >=1.2.1,<1.2.2.0a0, pybind11-headers >=2.5.0,<2.6.0a0, pytest, pytest-xdist, python >=3.8,<3.9.0a0, qcelemental >=0.17.0,<1.0, qcengine >=0.17.0,<1.0, simint >=0.7,<0.8.0a0; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2046#issuecomment-737400507:402,detect,detecting,402,https://psicode.org,https://github.com/psi4/psi4/issues/2046#issuecomment-737400507,1,['detect'],['detecting']
Safety,"> I finished the `lmp2_iterations` function, and I have a much better feel for how the code works now.; > ; > Zach, do you want me to keep going, or do you want to respond to what I've already flooded you with? I'd rather wait for you to catch up, to avoid having many comment chains at once. Thanks for the super thorough review. You've given me plenty to work through if you want to turn your attention to other things for a bit. I can ping you once I've responded to everything.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2093#issuecomment-908779460:251,avoid,avoid,251,https://psicode.org,https://github.com/psi4/psi4/pull/2093#issuecomment-908779460,1,['avoid'],['avoid']
Safety,"> I honestly don't recognize what you're trying to contribute. Are you proposing a course of action? Are you listing potentially relevant considerations for a more robust solution? Are you trying to say that ""algorithms that are both more robust and harder to implement exist""?. I was trying to bounce some ideas off the community, in the hope that it would ultimately lead to a better solution. To some extent that included all three of the above. I am sorry if that was frustrating, will try to clarify. In my first post:; 1. I proposed an alternative algorithm, which I guess is a course of action.; 2. I highlighted two potential problems with my alternative algorithm.; 3. I suggested that looking for existing algorithms in the literature may lead to something better than any of the proposals here, mine included. In my second post:; 1. I interpreted your response as ""SCF instability literature is unlikely to have anything better"". So I tried to clarify that I meant that the broader literature might contain useful ideas, not just SCF instability literature, but also the geometry optimization literature and possibly even the machine learning literature.; 2. I suggested a particular paper and algorithm, which claims to be able to minimize functions effectively, while avoiding saddle points. This is the ""both more robust and harder to implement"" part. The idea that I should have explicitly written out, is that if it could be implemented as an SOSCF method, it may greatly reduce the chances of getting an unstable solution in the first place, which would make having smart SCF instability following less important.; 3. I was trying to explain what thought process has lead me to believe that using the predicted/actual SCF energy may be a good idea for checking the quality of the Taylor expansion. I hope no offense was caused.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470:1281,avoid,avoiding,1281,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470,2,"['avoid', 'predict']","['avoiding', 'predicted']"
Safety,"> I kinda thought you solved all the the DFOCC convergence issues recently, at great effort. OCC convergence issues, not DFOCC convergence issues. The same trick should solve the convergence issues in DFOCC, but DFOCC is a much more difficult module to work with, so I'm avoiding fixing things there unless absolutely necessary for my research. > Unfortunately, open-shell Brueckner or OO coupled cluster does not seem to be a common feature in QC programs, so I am trying to survey which programs have open-shell capable OO methods. Also, a performant OMP2 or OMP2.5 implementation could potentially be useful for us, even if it does not directly solve the lack of an RBCCD(T) implementation. I don't know if your Robosurfer can use this, but depending on your orbital-optimized method, once you have the energy, the gradient is free. All the orbital-optimized methods in Psi have this property. > o_O No, in fact I would have completely missed that! I checked the method table [here](http://www.psicode.org/psi4manual/master/notes_c.html#alternate-implementations) and thought Psi4 cannot do BCCD(T) at all. Perhaps BCCD and BCCD(T) could be added as methods to that docpage?. That page is for methods that _multiple modules_ support, so you can straighten out which module you want given your specific use for a method. That said, is there a place in the manual where we list all the methods we have? I genuinely don't think so. We should add it, if there isn't one. If you want to see all the energy keywords that Psi recognizes, you can find it in the code [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc_table.py#L41). I'd be remiss if I didn't point out that the `dct` module _also_ has some orbital optimized methods. The best one is the default upon entering `energy(dct)`, ODC-12. Use of the others is not recommended for _any_ purpose other than benchmarking. We also have density-fitting for ODC-12. I'll warn you that there is some slight error in the DF grad",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863#issuecomment-612018450:271,avoid,avoiding,271,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-612018450,1,['avoid'],['avoiding']
Safety,"> I made all of the requested changes, barring the `iteration_` variable, which I personally believe is necessary. If you have a workaround, please let me know :).This PR should be _really_ close to being finalized. At risk of being grumpy, please don't say you made all the requested changes unless you actually have. There were many of my comments that still haven't been addressed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-937754577:219,risk,risk,219,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-937754577,1,['risk'],['risk']
Safety,"> I may be not quite following the INSIST_FIND_PACKAGE reasoning. ENABLE_PkgName=ON/OFF turns it off completely. And I would like to control bundling. I want cmake to fail when external package isn't found. I am trying to create the FreeBSD port for psi4. Package build infrastructure is all automated, and is very rigorous. So if the package is chosen to be installed externally, there is no reason to even try to download it from github. It's besides the point here, but such downloads are also a security risk, because you don't check the downloaded file's fingerprints.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343778164:508,risk,risk,508,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343778164,1,['risk'],['risk']
Safety,"> I think for a locally compiled psi4 you also have to remove the install dir, if one exists. You're right in general that cmake can find deps in the psi4 installation, which may be unexpected behavior. And it never hurts to remove the install dir. But in this case, should be safe b/c switching out the libint will be in the conda env, so the `libintConfig.cmake` will be there, too. The troublesome scenario I can think of is you have a conda env with libint and libxc, where you're only using the latter in the psi4 build. your libint is a local or cmake compile at am6. then you upgrade the pkgs in the conda env. if, in either the objdir or the install the rpath on the `core.so` isn't set so that the local is before the conda env, then even though cmake got it right, the runtime psi4 will get it wrong. of course, my imagination isn't strong enough to guess _all_ the ways this could go wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533#issuecomment-463848418:277,safe,safe,277,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463848418,1,['safe'],['safe']
Safety,"> I think in that case the output should be adapted to avoid confusion as there are warnings printed. Maybe also 'regular algorithm' can have a different name, but it's what other programs do, I suppose. Yes, there's some graphs to prove it I should dig up. Thanks for reading the printouts -- I glanced at the logic but not the warnings. Now memory and algorithm are printed with ""high-memory""/""low-memory"" labels and without efficiency judgements.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2003#issuecomment-687637537:55,avoid,avoid,55,https://psicode.org,https://github.com/psi4/psi4/pull/2003#issuecomment-687637537,1,['avoid'],['avoid']
Safety,"> I think the risk of `compute_phi` changing is minimal, so I'm not opposed to exposing it. ""Useful for grid-based approaches"" is too vague for me to be _for_ it, but I don't need to be. An example of ""grid-based approaches"" would include a psi4numpy implementation of seminumerical methods like chain-of-spheres exchange.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2210#issuecomment-877857422:14,risk,risk,14,https://psicode.org,https://github.com/psi4/psi4/pull/2210#issuecomment-877857422,1,['risk'],['risk']
Safety,"> I think the risk of `compute_phi` changing is minimal, so I'm not opposed to exposing it. ""Useful for grid-based approaches"" is too vague for me to be _for_ it, but I don't need to be. Hi Jonathon, I just made all of your suggested changes. Everything compiled and ran properly :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2210#issuecomment-877864950:14,risk,risk,14,https://psicode.org,https://github.com/psi4/psi4/pull/2210#issuecomment-877864950,1,['risk'],['risk']
Safety,"> I would strongly prefer if Psi4 retained at least some compatibility with BLAS/LAPACK implementations beyond MKL/Accelerate, like OpenBLAS which does implement extensions like daxpby. Oh, yes, I agree that Psi4 should continue to/strive to work with a range of implementations. Right now it's not bad at detection. But non-MKL doesn't get tried out too often. I'll see how OpenBLAS fares again soon when I try c-f psi4. There, the recc is to compile against netlib, then let user choose the backend at runtime. Alternately, one can hard-code MKL, etc. It's good to see that OpenBLAS with OpenMP is now an option (https://github.com/conda-forge/openblas-feedstock/blob/main/recipe/meta.yaml#L20). I think it was pthreads only a few years ago. My comment on ""works only for MKL or Accelerate"" was meant for only the daxpby check, so we're not blocking the Accelerate folks. > It is disappointing that Apple's budget does not seem to cover updating their LAPACK library with contemporary extensions. Hear, hear! And fix bugs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2895#issuecomment-1468730524:306,detect,detection,306,https://psicode.org,https://github.com/psi4/psi4/pull/2895#issuecomment-1468730524,1,['detect'],['detection']
Safety,"> I'd like some confidence that these changes really are essential preparation for work-in-progress in the CDS group that you expect to be submtited soon. Both of these changes are necessary for semi-numerical exchange, which I plan to submit in the next week or two. Because these changes touch important parts of the SCF/JK code but shouldn't change any existing behavior, I thought it would be best to submit them separately. > Can you give me an outline, or a draft PR, of how this responsibility transfer simplifies Incremeental Fock?. Sure, I'll do my best to explain. As you probably know, `JK` objects are used throughout the codebase via calls to `JK::compute()`. In SCF, many calls to `JK::compute()` are made interspersed with updates to the object's orbitals. `JK::compute()` does a [few things](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/jk.cc#L550): performs sanity checks, creates densities from the orbitals, zeroes out the object's `J`/`K`/`wK` matrices, and finally calls the virtual function `compute_JK()`, which is where each child class implements some algorithm to fill `J`/`K`/`wK`. Now consider incremental Fock construction. Instead of recomputing `J`/`K`/`wK` each SCF iteration, the previous iteration's `J`/`K`/`wK` are added to a `J`/`K`/`wK` computed with the difference in densities between the current and previous iterations. As [implemented in the `DirectJK` class](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/jk.h#L724-L734), this accomplished by storing the entire `J`/`K`/`wK` matrices of the previous iteration, computing the difference density update to `J`/`K`/`wK`, adding the two together, and storing in the `JK` objects `J`/`K`/`wK` matrices. This requires a lot of [convoluted bookkeeping](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/DirectJK.cc#L138-L217). Future JK classes that would want to do incremental Fock build would have to duplicate a lot of code, too. Instead, a much simpler approac",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2529#issuecomment-1089141879:893,sanity check,sanity checks,893,https://psicode.org,https://github.com/psi4/psi4/pull/2529#issuecomment-1089141879,1,['sanity check'],['sanity checks']
Safety,"> I'd protest against code duplication in options, but I hope to see liboptions retirement, so not worth dev time for consolidation. Yeah I don't like it either, but it looks like it already has plenty of it going on and I couldn't think of a way to avoid it... is there a way to write both unsafe and safe versions of a function without code duplication?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1477#issuecomment-498756844:250,avoid,avoid,250,https://psicode.org,https://github.com/psi4/psi4/pull/1477#issuecomment-498756844,3,"['avoid', 'safe', 'unsafe']","['avoid', 'safe', 'unsafe']"
Safety,"> I'm building Libint2 via Psi4; I wouldn't have this error otherwise ;). The hartree-fock++ test case won't happen, but the eigen3 detection can still be a problem even with pre-built because the l2 c++ interface needs it to compile p4 against. > I'm waiting on Ed to release a stable updated version of Libint2, so that I can package it in Fedora. I've seen some clues that he's waiting on this. I need to get the mpfr and eigen3 detection fixed before I can start ready-to-merge negotiations. Also, I don't know if EFV is planning the sph-ordering-as-runtime-option for the 2.7 release so that psi can use the Fedora distribution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2046#issuecomment-737442203:132,detect,detection,132,https://psicode.org,https://github.com/psi4/psi4/issues/2046#issuecomment-737442203,2,['detect'],['detection']
Safety,"> I'm fine defaulting it to `OFF`, to be honest! Probably safer that way, in regards to unforeseen errors/issues. sounds good. I think it's worth turning on in azure, if that wasn't already in your plans.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2018364039:58,safe,safer,58,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2018364039,1,['safe'],['safer']
Safety,"> I'm trying to build a ML model that can predict the converged density matrix. To verify whether the model is of any value, I wish to plug the predictions into a quantum chemistry program. Well, I've worked on initial guesses in [J. Chem. Theory Comput. 15, 1593 (2019)](https://doi.org/10.1021/acs.jctc.8b01089) and [J. Chem. Phys. 152, 144105 (2020)](https://doi.org/10.1063/5.0004046); I hope you are aware of these works, the first one being especially topical for what you want to do. If you need quantum chemistry expertise, feel free to reach out. I honestly don't know if it would just be a question of reordering px, py, and pz, or whether there are also differences in the basis functions' normalization and phase.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2897#issuecomment-1470573935:42,predict,predict,42,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1470573935,2,['predict'],"['predict', 'predictions']"
Safety,"> Ideally, the list of functionals in Psi4 would depend on the version of libxc available. Not to be snarky, but when there are two upstream libxc-s that can build and are API compatible with Psi, I can probably arrange for varying functional lists. For present, I yearn for one. (I may be misunderstanding your point.) . > And yes, it would be nice to be able to compile Psi4 without modifications against the distribution version of libint. The Fedora package supports very large angular momentum, whereas the default libint that's automatically compiled by Psi4 can't handle density fitting basis sets for transition metals... And the trouble is that Psi4 only detects via the cmake interface whereas other libint downstreams in Fedora require pkgconfig? iirc, Psi uses libint's cmake to also set some AM compile defs, not just location detection, so pkgconfig detection insufficient. Would having libint's cmake write out the pkgconfig files (as libxc now does) allow the cmake libint to work for everyone?. I agree I wouldn't ship a production distribution with the default angmom. I like 7 locally and soon I'll make conda use the 8 pkg (now optional) by default instead of the lighter 6. Only potential trouble for you is that libderiv AM = libint AM – 1. If you're going _really_ high for libint, deriv may not cooperate. -----------. I was misremembering when I wrote https://github.com/psi4/psi4/issues/1302#issuecomment-450762992 .; * cmake was why Psi v1.1 couldn't use upstream libxc 3 (so we forked 3 and added cmake).; * functional tweakers not in public API was why Psi v1.2 couldn't use libxc 4 w/o losing functionality (so we forked libxc 4.0 and added the rejected [MR 62](https://gitlab.com/libxc/libxc/merge_requests/62) plus a few merged build MRs). The same libxc ~4.0 is the current state of Psi master.; * The missing tweakers of rejected MR 62 were replaced in merged [MR 67](https://gitlab.com/libxc/libxc/merge_requests/67) but that's a different API (solved by #1101) and ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451132442:664,detect,detects,664,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451132442,3,['detect'],"['detection', 'detects']"
Safety,"> Iirc, @andysim said that the old libmints solidharmonics.cc code is outdated anyways, and the Helgaker recursions are better. Feel free to comment Andy. Both codes use regular solid harmonics with the exact same normalization (assuming that your Helgaker recursions match that code that I sent to you a while ago, Andy). The code in libmints is stuff that was taken from MPQC, but becomes painfully slow around L=9 or so. We had to reduce the default maximum L a while ago because it was dramatically slowing the Psi4 startup time. So I think that, if it turns out not to be a huge task, replacing the libmints code with smarter recursions is probably not a bad idea. Failing that, the Helgaker version is not really introducing any redundancy because the libmints version won't be able to support high enough a.m. efficiently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2665#issuecomment-1209572192:735,redund,redundancy,735,https://psicode.org,https://github.com/psi4/psi4/pull/2665#issuecomment-1209572192,1,['redund'],['redundancy']
Safety,"> Immediate questions: @davpoolechem - Is JK stable enough for this PR, or do you need a hold on this while refactoring? @jturney - Does this sound more like a new library of its own, or something that belongs in `libmints`? @andyj10224 - Can you comment on what the difference is between `libffm` and `fmm tree`?. CFMM requires two parts: Multipole operations, as well as an octree structure.; FMMTree implements the octree structure needed for CFMM, and there is a lot of code there, so I am splitting this into three parts to aid the review process and to avoid too large a PR. The `FMMTree` class will be in `libfmm` as well. For the record, this PR will not affect `libfock` or any `JK` classes. That will happen in Part 3 (when JK is more stable)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2665#issuecomment-1208368845:559,avoid,avoid,559,https://psicode.org,https://github.com/psi4/psi4/pull/2665#issuecomment-1208368845,1,['avoid'],['avoid']
Safety,"> Including the _order of magnitude_ in a corner of the plot is highly non-standard and leads to the confusion I just went through. Choose units that are of the proper order of magnitude, and include any needed decimals on the axis directly. According to your axes, you have 2 hartree error, which is utterly unacceptable. 0.2 microhartree error is much more reasonable.; > ; > What you're describing confirms that the error is small. That is different from confirming correctness. Are you able to compare the numbers to some other implementation and show agreement? Is there some rare property that the exact scheme has, which you can numerically reproduce?. Ah, the energy convergence criteria itself is 1.0e-6, and the errors are well below that number, so I strongly believe that we are safe. It may not be a good idea to compare to another implementation since every implementation has different tricks thrown in. Rather, if the energy difference is less than the e_convergence criteria, we are definitely safe. Though we could try to reproduce something like MBIS charges to check if we are safe.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821197961:791,safe,safe,791,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821197961,3,['safe'],['safe']
Safety,"> My vote is to either end or temporarily pause this PR and open a new PR just for swapping out the solid harmonics technology. Of course, @jturney's judgment overrides mine. I do think we can essentially move the methods in the `HarmonicCoefficients` class to `libmints/solidharmonics.cc`. But I agree that would be 2 PRs. In that case, having a separate `libfmm` would be useful, to avoid the clutter already present in `libmints`. Of course, waiting for @jturney's judgement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2665#issuecomment-1209843989:385,avoid,avoid,385,https://psicode.org,https://github.com/psi4/psi4/pull/2665#issuecomment-1209843989,1,['avoid'],['avoid']
Safety,"> Potentially print the symmetrized molecule and abort after that. Implementing that would require reworking the callers of `atom_at_position`, as it is a fairly low-level function that is not only called when we are trying to symmetrize. Throwing an exception in `atom_at_position` after the warning, and catching it in the symmetrization function may be feasible, other callers would not catch it and the uncaught exception would terminate execution. > But I imagine in practice the error could occur if a user tries to symmetrize a molecule with a questionably large tolerance.; This is the primary reason why I am reworking this, although I also tend to abuse QC programs with thousands of extreme geometries. A third option would be to raise an error in `atom_at_position` by default, but add an expert option to turn the error into a warning.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1064088333:49,abort,abort,49,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1064088333,1,['abort'],['abort']
Safety,"> So far I think this looks great - type safe python with a lot of testing, and a great modular design for the solvers. . All AJ's work!. > I really like the line broadening plot generation. . Thanks, it took me an embarrassingly long amount of time to check that units of measure all made sense... > If there's some kind of provenance info that can be added to the json reference data file that would be handy. I have the raw G09 input and output files, together with the notebook that extracts the data from the formatted checkpoint files. Should I include that in the `pytests` folder?. @loriab I'm seeing some funny behavior (or most likely I don't understand what the normal behavior actually is); ```; molecule {; 0 1; O 0.000000 0.695000 -0.092486; O -0.000000 -0.695000 -0.092486; H -0.388142 0.895249 0.739888; H 0.388142 -0.895249 0.739888; }. set {; tdscf_states 10; scf_type pk; }. energy('td-scf/cc-pvdz'); ```; I'd expect this to converge the wavefunction to `D_CONVERGENCE` 1e-6 and then compute the 10 states to `TDSCF_R_CONVERGENCE` 1e-4 The thresholds seems however to be 1e-8 (and 1e-6) respectively. I can't figure out where `D_CONVERGENCE` gets tightened from what stated in the [table](http://psicode.org/psi4manual/master/scf.html#convergence-and-algorithm-defaults)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-644236820:41,safe,safe,41,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644236820,1,['safe'],['safe']
Safety,"> So unless there are complications like funding agencies not allowing grant funds to be spent at arbitrary server providers, I think one can get more bulk compute for less money, compared to Amazon. Of course on-demand EC2 is very good for doing short bursts of compute, but for job marathons I don't think Amazon is all that competitive, not even with their own ARM CPUs. Fair points all, and you're right that the original claim was too strong. For the situation we're in, burstable cloud compute makes by far the most sense. I know AWS is pretty commonly used for quantum chemistry in pharma, although you're right that ""Tier 1"" hyperscalers (AWS, Google Cloud, Azure) are almost always more expensive than ""Tier 2"" cloud providers like Digital Ocean, Vultr, Linode, etc. Frankly, if you want to run years of sustained workloads, you're probably better off avoiding the cloud altogether... But the broader point stands that ARM compute seems to be cheaper than x86 compute, at least as far as I've seen across different cloud providers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3198#issuecomment-2286357658:861,avoid,avoiding,861,https://psicode.org,https://github.com/psi4/psi4/issues/3198#issuecomment-2286357658,1,['avoid'],['avoiding']
Safety,"> Tarballs downloaded from GitHub are not git repositories. We use them in FreeBSD ports.; Nothing important should be hard-wired to Git during build/tests. I agree broadly, though I'd sacrifice it to get fine-grain versioning for cross-project communication if needed :-). The way psi is set up now, if the buildsys detects that it's not a git repo, it substitutes some generic most-recent-tag info and proceeds, so that one gets a working build. When I try, it works as planned:. acquire tarball; ```; > curl -L https://github.com/psi4/psi4/tarball/master -o psi4_v17.tgz; ```; configure and build -- it detects ""no git""; ```; # configure (all req'd deps detected except optking to be build from src); > cmake --build . -j12; ...; [ 88%] Performing build step for 'psi4-core'; [ 1%] Generating version info; [ 1%] Building CXX object src/psi4/lib3index/CMakeFiles/3index.dir/dftensor.cc.o; ...; [ 2%] Building CXX object src/CMakeFiles/l2export.dir/export_mints.cc.o; Blindly (no git) accepting release version: 1.7+6ce35a5 (recorded); 1.7 {} 6ce35a5 1.7.0.0 release 1.7 <-- 1.7+6ce35a5; [ 2%] Built target update_version; [ 2%] Building CXX object src/psi4/libciomr/CMakeFiles/ciomr.dir/dsyev_ascending.cc.o; ...; ```; version computes and simple test, distributed driver tests, and dftd3 addon tests work ok; ```; > stage/bin/psi4 --psiapi # execute results; >>> stage/bin/psi4 --version; 1.7; >>> ctest -R tu1; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 426: tu1-h2o-energy; 1/1 Test #426: tu1-h2o-energy ................... Passed 1.65 sec. 100% tests passed, 0 tests failed out of 1; >>> ctest -R ddd; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 479: ddd-deriv; 1/2 Test #479: ddd-deriv ........................ Passed 13.18 sec; Start 481: ddd-function-kwargs; 2/2 Test #481: ddd-function-kwargs .............. Passed 170.20 sec. 100% tests passed, 0 tests failed out of 2; >>> ctest -R dftd3; Test project /psi/gits/tarbuild/psi4-psi4-4d94",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826:317,detect,detects,317,https://psicode.org,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826,3,['detect'],"['detected', 'detects']"
Safety,"> The action item here is to have some way to adjust the symmetrization threshold. I think updating the docs would also be a good idea. > The symmetry detection does not try to symmetrize the geometry to my knowledge.; > But there is a symmetrize function than can be explicitly called. It has been a while, but I cannot recall seeing this anywhere when I was reading the docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2463#issuecomment-1152922722:151,detect,detection,151,https://psicode.org,https://github.com/psi4/psi4/issues/2463#issuecomment-1152922722,1,['detect'],['detection']
Safety,"> The energy of H2C-C5-CH2 is computed to be -43.4074821405164926 Eh, and the energy of heptatriyne is computed to be -42.0459519798808898, leading to a predicted ∆E of -854 kcal/mol. The ""correct"" high-level value is -14.30 kcal/mol, and the authors of the wB97X-3c paper report an energy of -13.17 kcal/mol for this system. With psi4 1.9.1 from conda I get -43.40752609176465 for H2C-C5-CH2 and -42.04595200805039 for heptatriyne. My numbers are oddly different from yours, but they do show a difference of 854 kcal/mol.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221#issuecomment-2407578665:153,predict,predicted,153,https://psicode.org,https://github.com/psi4/psi4/issues/3221#issuecomment-2407578665,1,['predict'],['predicted']
Safety,"> Then in main psi4/CM, either libraries get detected or the dummy lib gets added to psi4?. Not sure this is exactly correct. If enabled (or psi4 requires it), doesn't the psi4 core always try to find the library? There is no dummy library at this point. This part somewhat confusing, but I think the entire purpose of the dummy external project INTERFACE libraries is for dependency resolution (ie build order). Then, the psi4 core always finds them itself (if needed). Note 1: If an addon isn't enabled, adding the dummy target isn't strictly required. But then you'd have to selectively add them to the dependency list, rather than always adding it. Note 2: Shouldn't the result of optional_plugin be nothing if enable_addon is false?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238060504:45,detect,detected,45,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238060504,1,['detect'],['detected']
Safety,"> There is 1 algorithmic difference I'd be concerned about, from looking at the two outputs. New optking doesn't consider the most recent step in the hessian updating procedure - cpp-optking did. I've found three pieces of logic that explicitly or implicitly prevent updating with the most recent step in all or specific cases. I'd have to ask @psi-rking if this is a bug or was changed due to some stability concern. Interesting. This does not ring a bell for me. I take the question to be ""given a hessian and the current forces (beyond the first step) should you update the hessian with those forces before using them to calculate the step?"" Can you point to the code? IDK, probably best answer is whatever works better in practice and doesn't cause problems. Actually, it's possible I did this because I learned to avoid hessian updating when displacements are very small (or the geometries are very close). Perhaps I didn't want to update hessian until I knew the step size.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262708139:819,avoid,avoid,819,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262708139,1,['avoid'],['avoid']
Safety,"> There is no upstream deprecation for this one, so comments and discussion is welcome. gtk, thanks. > I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. Quite right, I think it was for downstream C++ plugins that the full export set was intended. Python exports (relatively newfangled c. 2016) have been as-needed. > The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. Agree on the daunting. In the same category as the libqt exports are the CMake LAPACK detection and testing with other LAPACK distributions. Right now, I'm hardwiring the psi4 conda-forge recipe to MKL, but it'd be nice in future to relax that to normal usage (compile against a generic interface, then allow runtime selection of distribution) if we could do so with assurance (last time OpenBLAS was tried, we had threading oversubscription for SAPT iirc). > I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672:1138,detect,detection,1138,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672,1,['detect'],['detection']
Safety,"> This can hypothetically happen in two ways: the atoms are either extremely close, or the tolerance is set to a large value. unphysical close atoms should be acceptable as input, even if mostly of academic interest. But I imagine in practice the error could occur if a user tries to symmetrize a molecule with a questionably large tolerance.; Then the question is if we should indeed abort or still try to symmetrize hoping to get lucky?; Potentially print the symmetrized molecule and abort after that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1064071052:385,abort,abort,385,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1064071052,2,['abort'],['abort']
Safety,"> This reminds me, there _is_ a technique to avoid recomputing every `N` iterations. Namely, I think Ahlrichs(?) described a procedure where one keeps track of the change of the density matrix from the reference one by setting `D_0=0` and `D_i = D_{i-1} + max{|Duv|}` where `Duv` is the difference density matrix at iteration `i` and `D_i` tracks the changes. Instead of doing the reset every `N` iterations, one does a full rebuild when `D_i >= eps` because by then sufficient numerical error may have creeped into the calculation. Thank you for telling me about this! This is an intriguing idea overall. Essentially, instead of hard-setting a number of iterations to fully recompute the Fock matrix, one does it dynamically based on how much the density matrix has changed over time. While I don't think this PR is the right place to implement such a scheme (with 1.7 is right around the corner; and since such a scheme would break standardization of IncFock between the different integral-direct JK builds Psi4 has currently, assuming we implement it only in DFJCOSK for this PR), it could be worth investigating in the future. The potential for removing a human-set parameter (INCFOCK_FULL_FOCK_EVERY in this case) is always appealing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2816#issuecomment-1337458155:45,avoid,avoid,45,https://psicode.org,https://github.com/psi4/psi4/pull/2816#issuecomment-1337458155,1,['avoid'],['avoid']
Safety,"> Three hours and nine minutes, according to the timestamps I have for relevant events. I believe the build ran on a 32-thread (16-core) intel broadwell (with ample memory to avoid paging, for however much that helps), and the build was the only event happening on the machine at that time. (I am a little unsure, though, as it's a build-server, and I don't have any way of telling who else might've submitted a build job to the machine at that time. It was ~1AM on a Saturday, though, so probably just me). Also, the .so file generated was 925MB, if that's of any interest. Thanks for the info. It must be the Intel compiler and multiarch flags that lengthen my builds by an order of magnitude. > Should I worry at all that the tarball represents a WIP in terms of the actual integral files? Or does the trial status only regard the configuration?. I expect the integral files in that tarball to be perfectly good. I've checked my local diff again, and nothing else should be harmful. One caveat is that the integrals author generally dissuades building AM>7, so I had to defeat those checks, but I know people who have built higher than that tarball (albeit different versions of the code) without known ill effects. If you've got an `.so`, and psi4 passes a few tests, I think you're good to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2586#issuecomment-1133805493:175,avoid,avoid,175,https://psicode.org,https://github.com/psi4/psi4/issues/2586#issuecomment-1133805493,1,['avoid'],['avoid']
Safety,"> Wait, why do we want to ""turn off the incremental build once a preset level of `D_CONVERGENCE` is achieved""? Is the idea that the numerical creep is within the `D_CONVERGENCE` tolerance?. I would maybe turn it off when the final `D_CONVERGENCE` has been reached, and then do full rebuild(s) until SCF convergence has been achieved. It's been almost a decade since I worked with the equations for direct SCF; wasn't there some cutoff parameter that's used to discard ""small"" elements to the Fock matrix? This may not be accurate enough so it's always safer to do a full build at the end. Again, the point about resets is just to prevent numerical creep, which might require several more costly full rebuilds.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-940988917:552,safe,safer,552,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-940988917,1,['safe'],['safer']
Safety,"> Wow, a lot of PYTHON->Python for you to track down there. Is that syntax change a recent thing? LGTM!. I guess long, long ago, cmake's native python's detection had no notion of finding matching interpreter/library pairs. That reported its results as `PYTHON_FOUND` and friends. Hence numpy/pb11/us used the `FindPythonLibsNew` module that had mixed c++/py in mind and also reported as `PYTHON_*`. But the cmake native detection has been much revamped, reformed, and componentized, enough to [inspire pybind11 to switch over](https://github.com/pybind/pybind11/pull/2370/files). The new setup reports as `Python_*`. The long time it's taken to get cmake's new detection modules hammered out leads to the big jump to 3.15. There may still be plugin and docs build follow-up items, but I think I've caught most of the `Python`s. Main thing ppl have to do is edit their setup scripts if they're hinting the `PYTHON_EXECUTABLE`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2048#issuecomment-764963688:153,detect,detection,153,https://psicode.org,https://github.com/psi4/psi4/pull/2048#issuecomment-764963688,3,['detect'],['detection']
Safety,"> You also have `find_package(Libint ...)` that can't work because libint2 doesn't provide cmake files, and you don't provide them either. libint2 does (or at least can) provide cmake files, even with the 2.6.x releases, but it's somewhat tricky. I don't think anything besides psi4 uses them, and for psi4 they are broken/much bigger issues (see above). As I mentioned in https://github.com/evaleev/libint/issues/190#issuecomment-1003936604 libint2 (experimental Debian 2.7.1 package) gets detected fine, but there are build errors later on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2398#issuecomment-1008119932:491,detect,detected,491,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008119932,1,['detect'],['detected']
Safety,"> [psi4-test.txt](https://github.com/psi4/psi4/files/8883628/psi4-test.txt) contains the results of `psi4 --test` kindly let me know if this mean that psi4 is in functional state. Here is the `conda list` output in case it is needed. [psi4-env_conda-list.txt](https://github.com/psi4/psi4/files/8883643/psi4-env_conda-list.txt). Yes, the base Psi4 is functional. All the messages about skipped tests indicate that there are addons that Psi4 _has_ but that your Psi4 installation isn't detecting as installed. Based on your conda list, these are probably not installed, so this behavior is expected. Let us know if there are addons that you need but don't know how to get. (Examples: `dftd4` for DFT dispersion corrections, `cct3` for some exotic coupled cluster variants, `cppe` for polarizable embedding.). > Now I have some compatibility issues against python3.8 but that's with other packages I am trying to use.; > ; > Just to make sure, psi4 is no longer supported on python3.7, right?. The latest Psi4 is no longer supported on Python 3.7, correct. If you need 3.7 support, dropping down to Psi4 1.5 is technically an option.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2598#issuecomment-1152920803:485,detect,detecting,485,https://psicode.org,https://github.com/psi4/psi4/issues/2598#issuecomment-1152920803,1,['detect'],['detecting']
Safety,"> ah, was this choking in `OEProp` when you pushed an EOM wfn? or was it computing properly and just giving the redundant name? regardless, good catch. Computing properly and not giving the expected `CCSD DIPOLE`. This led to an error when I fixed a bug in AJ's code. That should be fixed in the next `cc` series PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2533#issuecomment-1089317532:112,redund,redundant,112,https://psicode.org,https://github.com/psi4/psi4/pull/2533#issuecomment-1089317532,1,['redund'],['redundant']
Safety,"> error: process exited with status -1 (cannot attach to process due to System Integrity Protection); > (lldb). Are you using the system python? I have SIP disabled but I would not be surprised if you can't attach the debugger to an executable that falls under that protection. . To disable SIP you need to reboot into recovery mode, then reboot again for it to take effect.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/491#issuecomment-258535598:319,recover,recovery,319,https://psicode.org,https://github.com/psi4/psi4/issues/491#issuecomment-258535598,1,['recover'],['recovery']
Safety,> is there any reason not to grab this variable from the incoming wavefunction?. I think that's a safe solution nowadays.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2305#issuecomment-929220194:98,safe,safe,98,https://psicode.org,https://github.com/psi4/psi4/issues/2305#issuecomment-929220194,1,['safe'],['safe']
Safety,"> the default settings we chose are not to avoid breaking tests but because tighter settings are wholly unnecessary (and often exceedingly difficult to achieve) for transition properties. > may be useful to separate the convergence criteria for the t's and lambdas, if not already done. The running plan is to rename `r_convergence` to `lambda_convergence` or somesuch within `cclambda`, with some logic to auto-set `lambda_convergence` is that is _not_ set but `r_convergence` _is_. `occ` and `dfocc` use a similar trick. For context, ""exceedingly difficult to achieve"" means [you're trying to solve ill-conditioned equations](https://github.com/psi4/psi4/issues/2519#issuecomment-1089612589). I'm expecting to be the one who picks this up, and when the time comes, I'll do a quick convergence study to double-check the sensitivity of properties to this parameter.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2520#issuecomment-1089636980:43,avoid,avoid,43,https://psicode.org,https://github.com/psi4/psi4/issues/2520#issuecomment-1089636980,1,['avoid'],['avoid']
Safety,"> tol=14 or 15, everyone?. I have the impression PSI4 always leans on the conservative side of thresholds, instead of tuning things for speed. Also, perhaps for floppy frequencies or similarly sensitive calculations one wants to be as safe as possible. Then tol=15 might be the safe choice. But..on the other hand it is DFT and the error from the quadrature itself is larger except for impractically large grids, I suppose. The often tight gradients and frequencies tests of psi4 pass with the current tolerance of 14. A dynamic adjustment of the threshold could be envisioned, but I think that would be overkill.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1581#issuecomment-498769923:235,safe,safe,235,https://psicode.org,https://github.com/psi4/psi4/pull/1581#issuecomment-498769923,2,['safe'],['safe']
Safety,"> uh-oh, it's finding pedantic errors in integratorxx now `/include/integratorxx/generators/s2_factory.hpp:24:2: error: extra ‘;’ [-Wpedantic]` . this would be a fault of our appending to `CMAKE_CXX_FLAGS`, which wasn't so outrageous back in the day.; > ; > thinking about it, there would be a lot more of these interferences with other projects if the CI wasn't detecting so much as pre-built. which means that developers building deps from source will likely have builds fail since force_pydantic defualts to ON and if the dep projects aren't pedantic clean. so this was probably a lucky block to the merge.; > ; > I'm not sure right off if there's a quick+good solution. you could move the option to here https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L222 _after_ the externals have been added. and maybe turn the default to OFF but add it (`-D`) as ON to the azure CI. I'm going to put a needs-changes block so I remember it isn't just a spurious test fail in the merge queue. lmk if you disagree with any of my hasty conclusions. Yeah, I feel like I ran into this issue previously with Einsums. It's part of why I was so concerned about this PR in the first place, and whether `FORCE_PEDANTIC` should be on by default. I can definitely toy around and see if I can get the pedantic flag to only apply to Psi-side code, like you suggested. Worst-case scenario, we just turn `FORCE_PEDANTIC` off by default?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2017950145:363,detect,detecting,363,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2017950145,1,['detect'],['detecting']
Safety,"> what about `guided`?. All that matters is that we avoid `static`, which can lead to an uneven distribution of work across threads. `guided` is about as good as `dynamic` here. `dynamic` has optimal load balancing at the cost of slightly more overhead than `guided`. The work/iteration is large for these loops, making this additional overhead is negligible. . Here's a comparison of the different schedules (wall time in seconds, large alkane on an 18 core CPU):. | Code | `static` | `guided` | `dynamic` |; |------|-----------|--------|---------|; | Numerical Integration (Loop 1) | 36.9 | 36.9 | 36.7 |; | DF Integrals (Loop 2) | 299.0 | 278.7 | 279.7 |; | PNO Transform (Loop 3) | 80.9 | 80.4 | 78.4 |; | PNO Overlap (Loop 4) | 29.8 | 29.3 | 24.4 |; | Total DLPNO-MP2 | 528.2 | 506.6 | 498.2 |. You can see that `dynamic` is possibly a hair better than `guided`, but both are better than `static`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2378#issuecomment-989020297:52,avoid,avoid,52,https://psicode.org,https://github.com/psi4/psi4/pull/2378#issuecomment-989020297,1,['avoid'],['avoid']
Safety,"@JonathonMisiewicz ; Thanks for you reply. Your comments summarized my questions very nicely. Now, I am just focusing on the CASSCF part first. ; I realized that there was a mistake in the 'docc' assignment in my previous run. The docc part should be: [3, 0, 0, 0, 0, 1, 1, 0]. I thought that I needed to exclude the restricted_docc in the docc input.; After correcting this mistake, I started calculating the potential energy curves (the lowest 6 Pi_g symmetry). However, I obtained some mysterious roots that I initially did not know what they were, but now I think these extra roots are the quintet (S=2) states that somehow show up in the calculation results, even though I asked for only the singlet (S=0) . In the figure titled as Singlet_pig, the blue dots are the singlet states and the yellow dots are what I believe the quintet states. Note that straight from the calculations, there are two states that converge to the lowest C+C dissociation limit (triplet P+triplet P). This can't happen because triplet P+triplet P dissociation channel correlates with only one singlet Pi_g state. Now, the red curves are from a calculation that explicitly calculates quintet Pi_g states. The red curves overlap well with the yellow dots (except for one curve, which I don't understand). If I took out the quintet states (by looking at the coefficients of the CI determinants), the remaining singlet potential energy curves (Pi_g +Phi_g symmetry) agree with CASSCF calculations from Molpro (provided by my collaborator; I was trying to reproduce his curves). I am wondering why do those quintet states show up in the calculation of singlet states. Similar things happen when I tried to calculate the triplet Pi_g states. More importantly, what should I do to avoid having higher multiplicity states from the calculation? Is there a keyword that I missed?. ![singlet_Pigs](https://user-images.githubusercontent.com/65833552/83825292-c1c90e00-a68d-11ea-9a30-1c0d8cdbdfe3.png)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1907#issuecomment-639202060:1756,avoid,avoid,1756,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-639202060,1,['avoid'],['avoid']
Safety,"@JonathonMisiewicz I'm not using conda at all, as described above, i started from a clean directory, cloned the source, ran cmake and make. The libint is the one that is automatically downloaded if no libint was found:; ```; -- Suitable Libint2 could not be located, Building Libint2 5-4-3-6-5-4 instead.; ```; in the cmake step and; ```; [ 10%] Performing download step (download, verify and extract) for 'libint2_external'; [ 12%] Performing download step (download, verify and extract) for 'pybind11_external'; -- Downloading...; dst='/scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/Libint2-export-5-4-3-6-5-4_mm4f12ob2.tgz'; timeout='none'; inactivity timeout='none'; -- Using src='https://github.com/loriab/libint/releases/download/v0.1/Libint2-export-5-4-3-6-5-4_mm4f12ob2.tgz'; -- Downloading...; ``` ; in the make step. @loriab Thanks for the quick reply, i will try and report back.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2572#issuecomment-1121208944:681,timeout,timeout,681,https://psicode.org,https://github.com/psi4/psi4/issues/2572#issuecomment-1121208944,2,['timeout'],['timeout']
Safety,"@JonathonMisiewicz Yeah, I realized that I was doing redundant work. I fixed this issue. Great catch, thank you for pointing that out. Please continue review :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1035839142:53,redund,redundant,53,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1035839142,1,['redund'],['redundant']
Safety,"@JonathonMisiewicz; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 238aecf08 has been issued to your PR branch; * the commit updates 96 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin jonathonmisiewicz-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin jonathonmisiewicz-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/5 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911:607,avoid,avoid,607,https://psicode.org,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911,1,['avoid'],['avoid']
Safety,"@MartinBeseda, there's a chance you don't have the same problem as the OP but just have the same error message. If you've got an existing gau2grid installation (which can only be built through cmake or setup.py (that runs cmake behind the scenes) and thus always installs `gau2gridConfig.cmake`), but psi4 or another downstream with `find_package(gau2grid CONFIG)` isn't detecting it and is printing the error in the issue, you can pass `-Dgau2grid_DIR=/path/to/dir/of/gau2gridConfig.cmake` to the downstream build to guide it. https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L62. If you're looking to compile but not package, also note that you can get all the deps pre-build from conda https://admiring-tesla-08529a.netlify.com/installs/v13/ (select ""source"").",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1588#issuecomment-482921785:371,detect,detecting,371,https://psicode.org,https://github.com/psi4/psi4/issues/1588#issuecomment-482921785,1,['detect'],['detecting']
Safety,"@PeterKraus thanks for this helpful update. This will eliminate some redundant computations, which is helpful (especially for people who just want a dimer IE). Thanks also for testing the gradients. I have one quibble with the user interface. What happens if a user tries to run an optimization but only uses bsse_type=['cp']? The monomer energies in the monomer basis sets need to be calculated so that we have total energies... trying to optimize the interaction energy only, without some special constraints in the optimizer to keep the monomers frozen (a capability we do not have automated right now), will give garbage. 99% of users will not be clever enough to realize that if they want the counterpoise-corrected geometry of a dimer, they need to include ""nocp"" in their bsse_type list. Can you solve this by forcibly adding monomers (and perhaps option ""nocp"" internally, if you want) when an optimization is requested? I would like to head off a lot of posts on the user forum about CP-corrected optimizations that went wrong :). Minor question about printing. I agree that things that are not total energies should not be printed in the total energy column. However, what are you doing if bsse_type='cp'? Leaving it blank? That might cause a problem for anyone trying to scrape the output file. Should there be something there, like ""n/a"" or something?. Also, when you do print the total energy, it's the same total energy as before your PR, right? The total energy of a dimer should be E_AB(AB) minus the Boys-Bernardi estimate of the BSSE, which is [E_A(AB) - E_A(A) + E_B(AB) - E_B(B)]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254:69,redund,redundant,69,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254,1,['redund'],['redundant']
Safety,"@TiborGY *Conda* package for *Windows* have to be built with VS 2015 (https://conda.io/docs/user-guide/tutorials/build-windows.html#microsoft-visual-studio). So I'm doing that to avoid compatibility problems and make later deployment easy. @tonigi I hacked a bit `psi::libfilesystem` to compile, but is making a lot of test to segment fault. Yes, I also found `std::experimental::filesystem` and it looks as good option.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-404166121:179,avoid,avoid,179,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-404166121,1,['avoid'],['avoid']
Safety,"@cdsgroup; Based upon a build of the documentation target (`make sphinxman` locally with Sphinx installed at CMake configuration time):; * an automated commit has been issued to your PR branch; * this updates `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin <prbranch>` to synchronize your local branch with GH; * an automated pull request has been issued to the docs website repo previewing `<objdir>/doc/sphinxman/html`; * preview docs changes at https://github.com/psi4/psi4docs/pull/2; * further action on auto pull request not required",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2148#issuecomment-814590009:320,avoid,avoid,320,https://psicode.org,https://github.com/psi4/psi4/pull/2148#issuecomment-814590009,1,['avoid'],['avoid']
Safety,"@dgasmith Uggh. And to think that DFT-SAPT is worse ... For reference, alpha is presently incorporated into the psivar name (https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/psivardefs.py#L42). The way I'd frame the question is:; * Is `S^2`/`S^inf` an _option_ that modifies the infinite-precision value of the same physical quantity (like `PK`/`DF` `HF TOTAL ENERGY`)?; * or Are `S^2`/`S^inf` terms distinctly different physical quantities computed (e.g., Ind20/Ind30 or singlet/triplet MP2 correlation energy). * Another point, is there ever safe mixing of s2/sinf?; * Can we compute Sinf terms and incorporate them into post-0 SAPT?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/921#issuecomment-366087579:553,safe,safe,553,https://psicode.org,https://github.com/psi4/psi4/pull/921#issuecomment-366087579,1,['safe'],['safe']
Safety,@dgasmith do you not have density thresholding in the dft code? It appears to be a common trick to make dft integration faster to avoid calculating zeros... I think NaNs should be sieved out in the output.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/863#issuecomment-345818205:130,avoid,avoid,130,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345818205,1,['avoid'],['avoid']
Safety,"@hokru For ωB97M-V, it doesn't seem to be possible to change the ω parameter directly from the psithon interface—there's a check at https://github.com/psi4/psi4/blob/d9093c75c71c2b33fbe86f32b25d138675ac22eb/psi4/src/psi4/libfunctional/LibXCfunctional.cc#L218 that disallows it. I want to be on the safe side and not manually change it without knowing why the limitation is put in place. . As for DFT_VV10_POSTSCF—it does make things faster by quite a bit, but when I move to nonstandard values of (b,c), it yields deviations ≥ 0.1 Hartree in energy calculations (e.g. using the above geometry with b = 0.5 and c unchanged, I go from -456.38 to -456.17 when I turn on DFT_VV10_POSTSCF).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1194156054:298,safe,safe,298,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1194156054,1,['safe'],['safe']
Safety,"@jturney Fixing this pull request has not been at the top of my priority list, for reasons you can probably guess. The metadata has been added to the ANO0 basis file. This is the only ANO basis set Psi4 has, so I didn't need to add the metadata to any other files. To be safe, I ran the entire file through a diff-checker against the EMSL file. They match. I've used my own timestamp for the metadata.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/825#issuecomment-339744853:271,safe,safe,271,https://psicode.org,https://github.com/psi4/psi4/pull/825#issuecomment-339744853,1,['safe'],['safe']
Safety,"@jturney It seems that CMake is not aware of any compiler features for the Intel compilers...; How do you handle this? Or you never tried to compile your other projects with Intel?; I found some ""custom"" extensions for the Intel compilers, but that would just move the maintenance work from the current detection system to another...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/188#issuecomment-161354287:303,detect,detection,303,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-161354287,1,['detect'],['detection']
Safety,@jturney should've written this and called it JetPACK. I'm not sure there's a more central location; the libqt library (math routines from the original 'quantum trio') is about as central a math library as we have. I agree that avoiding duplication would be very good though.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1347#issuecomment-438494932:228,avoid,avoiding,228,https://psicode.org,https://github.com/psi4/psi4/pull/1347#issuecomment-438494932,1,['avoid'],['avoiding']
Safety,"@loriab . I have rebuilt with system BLAS/LAPACK, instead of MKL. Now all tests passes:. ```; $ ctest -j 8 -E dft-bench --timeout 3600; Test project /home/raimis/psi4.git/linux_build; Start 394: python-vibanalysis; Start 162: dft-grad-lr3; Start 103: dcft-grad1; Start 178: fsapt1; Start 227: mp2-def2; Start 45: cc3; Start 110: dcft4; Start 182: isapt1; 1/411 Test #45: cc3 .............................. Passed 181.10 sec; Start 300: pywrap-all; 2/411 Test #110: dcft4 ............................ Passed 232.06 sec; Start 145: dfomp2-grad3; 3/411 Test #103: dcft-grad1 ....................... Passed 301.39 sec; Start 304: pywrap-checkrun-rhf; 4/411 Test #145: dfomp2-grad3 ..................... Passed 139.18 sec; Start 306: pywrap-checkrun-uhf; 5/411 Test #300: pywrap-all ....................... Passed 191.66 sec; Start 39: cc24; 6/411 Test #227: mp2-def2 ......................... Passed 397.60 sec; Start 40: cc25; 7/411 Test #162: dft-grad-lr3 ..................... Passed 412.33 sec; Start 38: cc23; 8/411 Test #182: isapt1 ........................... Passed 416.77 sec; Start 76: cc7; 9/411 Test #304: pywrap-checkrun-rhf .............. Passed 243.61 sec; Start 36: cc21; 10/411 Test #39: cc24 ............................. Passed 229.63 sec; Start 35: cc2; 11/411 Test #76: cc7 .............................. Passed 204.63 sec; Start 240: ocepa-freq1; 12/411 Test #40: cc25 ............................. Passed 228.58 sec; Start 41: cc26; 13/411 Test #38: cc23 ............................. Passed 232.18 sec; Start 42: cc27; 14/411 Test #306: pywrap-checkrun-uhf .............. Passed 316.81 sec; Start 111: dcft5; 15/411 Test #394: python-vibanalysis ............... Passed 760.31 sec; Start 18: cbs-xtpl-func; 16/411 Test #36: cc21 ............................. Passed 216.12 sec; Start 181: fsapt-allterms; 17/411 Test #41: cc26 ............................. Passed 181.93 sec; Start 193: fd-freq-energy-large; 18/411 Test #35: cc2 .............................. Passed 207.82 sec; St",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:122,timeout,timeout,122,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['timeout'],['timeout']
Safety,"@loriab . Reverted the elimination of `title_`. Although I still don't believe it _should_ exist, we need more density matrix standardization before I can safely eliminate it, and I can't standardize density matrices until after this PR is in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2534#issuecomment-1090483411:155,safe,safely,155,https://psicode.org,https://github.com/psi4/psi4/pull/2534#issuecomment-1090483411,1,['safe'],['safely']
Safety,"@loriab As you suggest `-DOpenMP_CXX_LIBRARY_DIRS=/path/to/iomp5/dir` with cmake (v3.11.3), I try it and my cmake does not recognize the option:; ```; CMake Warning:; Manually-specified variables were not used by the project:. OpenMP_CXX_LIBRARY_DIRS. ```; The second way to edit link.txt gives error message from OMP:; ```; OMP: Error #15: Initializing libiomp5.so, but found libiomp5.so already initialized.; OMP: Hint: This means that multiple copies of the OpenMP runtime have been linked into the program. That is dangerous, since it can degrade performance or cause incorrect results. The best thing to do is to ensure that only a single OpenMP runtime is linked into the process, e.g. by avoiding static linking of the OpenMP runtime in any library. As an unsafe, unsupported, undocumented workaround you can set the environment variable KMP_DUPLICATE_LIB_OK=TRUE to allow the program to continue to execute, but that may cause crashes or silently produce incorrect results. For more information, please see http://www.intel.com/software/products/support/.; Aborted (core dumped); ```; To force running psi4, I follow OMP error message's suggestion (`export KMP_DUPLICATE_LIB_OK=TRUE`), but dft-custom-gga does not work (failed due to the same reason - not converged ). From my several trials, this problem seems not to be related to OMP libraries. Regardless of using either `gomp` or `iomp`, dft-custom-gga test fails under single thread. In other words, whenever multi-thread is used for calculations, it gives good SCF convergence within few iterations, which seems similar with the issue #994 @hokru reported. I thought it might be problem of incompatibilities between GCC compiler and Intel OMP libraries. Like @loriab setting, I changed to use icpc intel compiler (v 18.0.3), instead of gcc (v5.4.0). Re-built '<objdir>' by cmake. Then, opened '<objdir>/psi4-core-prefix/src/psi4-core-build/src/CMakeFiles/core.dir/link.txt' and added '/opt/intel/lib/intel64' (basically intel 64bit libr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809:695,avoid,avoiding,695,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809,2,"['avoid', 'unsafe']","['avoiding', 'unsafe']"
Safety,"@loriab I think setting `CMAKE_PREFIX_PATH` can help with detecting anything usinga `find_package` call. ; Setting `CMAKE_PREFIX_PATH` has the search to prioritize the directories listed in that variable. I actually have no python detection problems if I set `-DCMAKE_PREFIX_PATH=${ANACONDA_LIB}:${ANACONDA_INC}`, but only setting one or the other means either the wrong headers or the wrong library is found instead. Just slightly less typing than setting two separate `PYTHON_…` variables. ---. Also worth mentioning: It looks like [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L110) we are only setting the major python version as a requirement, so I am not getting any cmake errors if I remove anaconda from my env, and let the system python be detected (in my case 2.6.9, which is okay I think). But in the cmake output I see a message like: . ```; — Found PythonInterp: /usr/bin/python (found version ""2.6.9); — Found PythonLibs: /usr/lib64/libpython2.6.so (found sutable version 2.6.9, minimum required is ""2""); ```. Is that going to go ahead and build if the python version is `2.(anything)`? Last I remember we needed python 2.6.9 or later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249711681:58,detect,detecting,58,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249711681,3,['detect'],"['detected', 'detecting', 'detection']"
Safety,@loriab I'm confused about the test results. The ctest returns:; ```; The following tests FAILED:; 	184 - fcidump (Failed); 	359 - dft-custom-dhdf (Failed); 	363 - dft-cation (Timeout); 	364 - dft-water-dimer (Timeout); 	384 - chemps2-caspt2-n2 (Failed); ```; where the `dft-` and `fcidump` tests failing are expected as your PR that fixes them is not yet pulled in. The `chemps2/caspt-n2` test passes when I run it manually and passed in the test log file (see attached); [testresults.log](https://github.com/psi4/psi4/files/1889030/testresults.log),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/949#issuecomment-379675367:176,Timeout,Timeout,176,https://psicode.org,https://github.com/psi4/psi4/pull/949#issuecomment-379675367,2,['Timeout'],['Timeout']
Safety,"@loriab If the threading flag you mentioned refers to `USE_OPENMP=1`, then I am reasonably sure that is essential. As far as I understand, OpenBLAS is not stateless/thread-safe when compiled to use its native threading. So if there is an OMP parallel section in Psi4, and multiple Psi4 threads call BLAS/LAPACK subrutines at the same time, AND OpenBLAS is also doing those operations in parallel, then you get undefined behaviour. This is probably not going to be reliably mitigated by setting OpenBLAS to only use 1 thread at runtime, it may still cause UB.; AFAIK, currently the only safe way to call OpenBLAS BLAS/LAPACK routines from OMP parallel regions, is to use an OpenBLAS build compiled with `USE_OPENMP=1`. This disables the native/pthreads parallelism, and uses OMP instead, this way you get thread safety and nested parallelism should also work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390192476:172,safe,safe,172,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390192476,3,['safe'],"['safe', 'safety']"
Safety,@loriab Looks like Pybind11 #1121 is clearing up. Do you have thoughts on getting this or should I tweak up gau2grid to avoid 2.2 features?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/814#issuecomment-347012820:120,avoid,avoid,120,https://psicode.org,https://github.com/psi4/psi4/pull/814#issuecomment-347012820,1,['avoid'],['avoid']
Safety,"@loriab No success, unfortunately. The option is recognized (initial cmake); ```; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Building using CMake 3.19.4 Generator Unix Makefiles; -- Setting option BUILD_SHARED_LIBS: ON <=================; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; ```; but somehow does not get passed to the libint2 build step (make):; ```; [ 73%] No update step for 'libint2_external'; [ 75%] No patch step for 'libint2_external'; [ 77%] Performing configure step for 'libint2_external'; loading initial cache file /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/tmp/libint2_external-cache-Release.cmake; -- Version: Full 2.7.1 Numeric 2.7.1; -- SO Version: Full 2:3:0 Major 2; -- The CXX compiler identification is GNU 11.2.1; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/g++-11 - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting option CMAKE_BUILD_TYPE: Release; -- Setting option REQUIRE_CXX_API: ON; -- Setting option REQUIRE_CXX_API_COMPILED: OFF; -- Setting option ENABLE_FORTRAN: OFF; -- Setting (unspecified) option ENABLE_MPFR: OFF; -- Setting option BUILD_SHARED_LIBS: OFF <==================; -- Setting (unspecified) option LIBINT2_BUILD_SHARED_AND_STATIC_LIBS: OFF; -- Setting (unspecified) option LIBINT_LOCAL_Eigen3_INSTALL: OFF; ```. The error message is exactly the same.; I wiped the build directory completely in between, so there were no leftovers that might have influenced the build process.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2572#issuecomment-1121326370:85,Detect,Detecting,85,https://psicode.org,https://github.com/psi4/psi4/issues/2572#issuecomment-1121326370,6,['Detect'],['Detecting']
Safety,"@loriab OK, cool. I am now wondering how the problem came to be in the first place. Is the conda builder automatically checking out the latest commit from PCMSolver's own GitHub repository? It might then be safer (and save you some headaches) to hook it up to a given tag or commit you know works with Psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/409#issuecomment-226419237:207,safe,safer,207,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-226419237,1,['safe'],['safer']
Safety,"@loriab Ok, after some problems getting everything to work together, and setting `which python` to the correct Python, here is what I see (still Ubuntu 16.04.1 LTS, gcc 5.4.0, Python 3.5.2):; - with ATLAS (v. 3.10.2), the following tests fail:; 77 - cdomp2-2 (Failed); 125 - dfmp2-grad2 (Failed); 127 - dfmp2-grad4 (Failed); 129 - dfomp2-2 (Failed); 131 - dfomp2-4 (Failed); 188 - mints9 (Failed); - with Intel MKL (v. 2017.0.098), I have two Failed and one Timeout:; 188:mints9 (Failed); 243:opt13 (Timeout); 329:libefp-qmefp-moldomains (Failed); - with openBLAS (v. 0.2.18), I have one Failed and one Timeout:; 188:mints9 (Failed); 243:opt13 (Timeout). All were compiled with optimization (release version). Note that ATLAS does not time out on opt13, which seems to indicate it's a bit faster than the other two, but then it fails for the cdomp2/dfomp2 tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391#issuecomment-278449042:458,Timeout,Timeout,458,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-278449042,4,['Timeout'],['Timeout']
Safety,"@loriab Shoot, nooooo. This is exactly what I was trying to avoid. After I'm done recompiling, I'll try your fix on #644.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/585#issuecomment-286619723:60,avoid,avoid,60,https://psicode.org,https://github.com/psi4/psi4/pull/585#issuecomment-286619723,1,['avoid'],['avoid']
Safety,"@loriab This issue isn't so much a problem with not understanding how to use DPD, as I am sure the author of each module was aware of what the code they wrote would do. This is more a fundamental issue with DPD and how it poorly manages shared state. In this case the entry that triggers the psio error already exists and has a smaller size than the data that is being written in its place, but there is no mechanism for gracefully avoiding that situation. . I am working on a better model that avoids a lot of these problems with shared state. I have so far worked out (on paper) how map objects to the regions where their data is stored on disk and keep everything from overwriting each other. The last piece of the puzzle is how to allow *some* shared ownership to exist, for example you would like the DCFT module or the OMP2 module to be ""aware"" if integrals have already been transformed, and then avoid doing the transformation again but because they were given an object that points to a particular location on disk, not because they looked in some predetermined location and found *something* there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288#issuecomment-435197522:432,avoid,avoiding,432,https://psicode.org,https://github.com/psi4/psi4/issues/1288#issuecomment-435197522,3,['avoid'],"['avoid', 'avoiding', 'avoids']"
Safety,"@loriab can discuss this more, but the largest issue is if NumPy and Psi4 have different OMP runtimes via BLAS. GOMP and IOMP do not play well together. So naively you would either need to use GCC as this is likely what NumPy's BLAS is linked against or build your own NumPy and link it against the same Intel BLAS you plan to use with Psi4. At this point I think we highly recommend using a conda environment or our [binaries](http://vergil.chemistry.gatech.edu/psicode-download/1.1.html). Both are ICC compiled with MKL and are optimized for multiple architectures from SSE2 (?) to AVX-512. If you really want to compile Psi4 yourself we recommend using the p4dev environment with the built in path-manager, see [here](http://www.psicode.org/psi4manual/master/conda.html#how-to-use-conda-to-compile-psi4-faster-and-easier) to help avoid these conflicts. Lots of fun intricacies to make something like Python really work with large C++ backends :). LAB EDIT: the 1.1 binaries use statically linked MKL in psi4 and are potentially susceptible to the problems mentioned. binaries after mid-July 2017 are safe (provided numpy is MKL RT)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1007#issuecomment-387872100:833,avoid,avoid,833,https://psicode.org,https://github.com/psi4/psi4/issues/1007#issuecomment-387872100,2,"['avoid', 'safe']","['avoid', 'safe']"
Safety,@loriab if I understood correctly the EXPLICIT_LIB change is to avoid having explicit libs baked into the math detection and I agree that it is good to separate these. We have also done this in other codes.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615#issuecomment-279339056:64,avoid,avoid,64,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-279339056,2,"['avoid', 'detect']","['avoid', 'detection']"
Safety,"@loriab, with the new DMRG changes, I am not able to compile this directory anymore. Hold off on merging. It seems that CheMPS2 has not updated. I get an error that it can't find chemps2/caspt2.h and when I look at the chemps2 directory, there does not exist a CASPT2 file. However, the new CheMPS2 has this include file. . Well, it looks like the new DMRG detection ran into some trouble. I forgot to remove a usr/local instance of libchemps2 that I have not used in a very long time. The cmake build would not build CheMPS2 if it found this library so I believe this was the root of my problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/405#issuecomment-225029668:357,detect,detection,357,https://psicode.org,https://github.com/psi4/psi4/pull/405#issuecomment-225029668,1,['detect'],['detection']
Safety,"@loriab. I think `-DOpenMP_LIBRARY_DIRS` is a good solution. I just think that if the detection is not going to be truly automatic (i.e. combinations such as gcc + MKL, which is a very common free combination of software, is not properly detected) it probably should be more obvious to the user that such options _have_ to be passed to CMake. With that in mind, improving the error message suggesting to use `-DOpenMP_LIBRARY_DIRS` would be awesome. And thank you for your time by the way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1118#issuecomment-410473052:86,detect,detection,86,https://psicode.org,https://github.com/psi4/psi4/issues/1118#issuecomment-410473052,2,['detect'],"['detected', 'detection']"
Safety,"@loriab: I found a small problem with this PR that I was thinking you might know best how to fix. At the 5z level for Na and Mg, Pracher (2011) mention [1] that it's _not_ the case that the cc-pwCV5Z basis is formed simply by adding the tight functions to the cc-pV5Z basis. i.e. the contractions in cc-pwCV5Z are not a strict superset of the contractions in cc-pV5Z for these elements. [1]; > To avoid near linear-dependence in the s functions at the quintuple-z level for Na and Mg, an additional four s functions are uncontracted from the Hartree–Fock set and take the place of the usual optimized tight s functions for core-valence correlation. Is there a way to handle this with the psi machinery?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-306291837:397,avoid,avoid,397,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-306291837,1,['avoid'],['avoid']
Safety,"@loriab; Based upon a build of the documentation target (`make sphinxman` locally with Sphinx installed at CMake configuration time):; * an automated commit has been issued to your PR branch; * this updates `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin <prbranch>` to synchronize your local branch with GH; * an automated pull request has been issued to the docs website repo previewing `<objdir>/doc/sphinxman/html`; * preview docs changes at https://github.com/psi4/psi4docs/pull/1; * further action on auto pull request not required",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2146#issuecomment-814506587:318,avoid,avoid,318,https://psicode.org,https://github.com/psi4/psi4/pull/2146#issuecomment-814506587,1,['avoid'],['avoid']
Safety,"@loriab; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit bc7a25bc0 has been issued to your PR branch; * the commit updates 80 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin loriab-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin loriab-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/4 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131:574,avoid,avoid,574,https://psicode.org,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131,1,['avoid'],['avoid']
Safety,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 5aa048b39 has been issued to your PR branch; * this updates 4 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin ghadocs3` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/1 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2146#issuecomment-816883319:340,avoid,avoid,340,https://psicode.org,https://github.com/psi4/psi4/pull/2146#issuecomment-816883319,1,['avoid'],['avoid']
Safety,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit b4247d841 has been issued to your PR branch; * this updates 80 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin loriab-patch-1` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/3 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574:341,avoid,avoid,341,https://psicode.org,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574,1,['avoid'],['avoid']
Safety,"@lothain commented via email and it seems to have been lost in cyberspace:. >I know that Rollin's calculation ran with both codes, but I do not believe we have confirmed that the disk space requirements of cctranssort are reasonable. I was able to run the calculations that his comment refers to, both using cctransort and using ccsort/transqt2. The disk requirements for the transformation/sorting integrals were identical, so I believe we are safe in moving ccsort/transqt2 to the attic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/527#issuecomment-262287350:445,safe,safe,445,https://psicode.org,https://github.com/psi4/psi4/pull/527#issuecomment-262287350,1,['safe'],['safe']
Safety,"@medvedev-m, /tmp is just fine when it's big enough. Often, default Linux/Unix installations have only a limited amount of space available in /tmp. The singlet B atom computation you had crash is actually very small and doesn't require much space, so I think your /tmp must have been filled by some of your earlier computations that crashed. Many quantum chemistry programs, including Psi4, leave some of their temporary files around if they crash, so you have to delete them up to avoid filling the directory. Anything in /tmp should be automatically removed by the operating system, eventually, but I don't know how often that happens --- they might not be cleaned up that quickly. NFS-attached disks are very slow and you should never use them as scratch disks in a quantum chemistry computation. Otherwise, you'll cripple the network with all the data you're sending over it, people will have trouble accessing their files, and your system administrator will be very unhappy with you. So if /tmp is a problem and if NFS-attached disks are a problem, what do you do? Anyone running serious quantum chemistry computations (beyond tiny molecules with cheap methods) normally takes special steps to set up their computer such that is has one or more large hard drives in it that can be used for the temporary files (""scratch space""). For very large computations, it is advisable to get 2-3 hard drives and stripe them together in a ""RAID0"" configuration for maximum speed. It's good to have several hundreds of gibabytes available, at least, and for really big computations it's good to have a terabyte or more. . You might be able to get by using /tmp if you keep it cleaned of any files from crashed calculations, and if you're lucky it might be big enough for some decent computations if they're not too large. Ramdisks are great if your computations are quite small so that they will fit. David",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170252262:482,avoid,avoid,482,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170252262,1,['avoid'],['avoid']
Safety,"@psi-rking, you're one of the two people I know for whom this PR will actually solve a problem. That is, with this version of the code, Psi4's math detection should properly find your ACML libraries and forward them on to CheMPS2 and libefp without you fiddling with `LAPACKBLAS_LIBRARIES` or pointing to any special upstream branches. If you have a chance, I'd like to know if this works for you. Easiest way to get the code is a fresh checkout `git clone https://github.com/loriab/psi4.git` followed by branch switch `git checkout lapack`, then build as normal, giving none to minimal math hints. Also, don't use a `CMAKE_INSTALL_PREFIX` that has an existing psi4 in it (CMake's shown itself overzealous in finding and using old pybind11's). And, if you would, add `ENABLE_CheMPS2=ON` (you'll need hdf5 somewhere) to test that AddON + ACML, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276672405:148,detect,detection,148,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276672405,1,['detect'],['detection']
Safety,"@robashaw I'm really sorry to hear that. You should focus on your health, of course, and I wish you a speedy recovery. I have been able to follow your examples very easily, so getting the library shoehorned into Psi4 is going very well so far. Even without derivatives it will be a big boost for us because of the efficiency gains from screening, so thanks for taking the time to write this and make it available. Thanks also for providing clear examples for me to follow. All the best. Andy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1340#issuecomment-439522526:109,recover,recovery,109,https://psicode.org,https://github.com/psi4/psi4/pull/1340#issuecomment-439522526,1,['recover'],['recovery']
Safety,"@ryanmrichard , so are you always adding dummy/placeholder INTERFACE libraries for all the add-ons? In externals dir, either an external proj gets built or a dummy lib gets created. Then in main psi4/CM, either libraries get detected or the dummy lib gets added to psi4?. | `addon_found` | `enable_addon` | outcome in external/addon/CM | outcome in psi4/CM optional_plugin() | net result |; | --- | --- | --- | --- | --- |; | T | T | add_lib | append libs | use prebuilt detected |; | T | F | add_lib | add_lib | use dummy interface lib |; | F | T | extproj_add | append libs | use superbuild detected |; | F | F | add_lib | add_lib | use dummy interface lib |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238059409:225,detect,detected,225,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238059409,3,['detect'],['detected']
Safety,@ryanmrichard Is this something that can be fixed with the parallel printer so that we might avoid this in the future?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/319#issuecomment-198355431:93,avoid,avoid,93,https://psicode.org,https://github.com/psi4/psi4/pull/319#issuecomment-198355431,1,['avoid'],['avoid']
Safety,"@ryanmrichard, where convenient, we may want to use cmake modules from https://github.com/coderefinery/autocmake/tree/master/modules. Though potentially nice, I don't think we want to wholesale adopt @robertodr and Co.'s autocmake project (http://autocmake.readthedocs.io/en/latest/index.html) just now because this cmake rewrite is focused on CMake linking of `ExternalProject_Add` / modularity / superbuild, which isn't autocmake's focus. In particular, I'm using their safeguards (https://github.com/coderefinery/autocmake/blob/master/modules/safeguards.cmake) since the Psi4Macros one didn't actually prevent in-source builds (`STREQUAL` vs. `==`) and even with that fixed , the extra feature of Psi4Macros creating a requested build dir (`cmake -DCMAKE_BINARY_DIR=objdir2`) ran into later cmake path errors. So, as it stands (in libint), this should guide toward `cmake -H. -Bobjdir` syntax. In general, I'll be testing thoroughly in libint, then just copying into main psi4 w/o testing, so let me know of any problems you find that travis and distelli don't. Huh, cmake automatically forces two spaces after a period in their message() printing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236387131:472,safe,safeguards,472,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236387131,2,['safe'],['safeguards']
Safety,"@salarfaji My workaround was to call `set opt_coordinates cartesian` before calling `optimize()`. It seems like something goes wrong with using internal coordinates, but Cartesian have worked for me. (You could also try different coordinate options, as `set opt_coordinates both` also avoided this crash.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1921#issuecomment-640677559:285,avoid,avoided,285,https://psicode.org,https://github.com/psi4/psi4/issues/1921#issuecomment-640677559,1,['avoid'],['avoided']
Safety,"@susilehtola After further discussion, including with Dr. Sherrill, we have decided to keep the current atom-blocking structure of LinK, since we can avoid situations ""of too-small workloads in the inner loops"" in the words of Dr. Sherrill when we run DirectJK in parallel. Changing the linK code to shell-blocking instead of atom-blocking would be outside the scope of this PR. I have also added new comments to my linK code, and explained my code in the context of the Oschenfeld paper. I will attach the LinK algorithm's pseudocode for the reviewers for reference. <img width=""669"" alt=""Linear Exchange Algorithm"" src=""https://user-images.githubusercontent.com/60559795/146979417-70931487-df27-4c59-841e-0336bba36757.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-998996631:150,avoid,avoid,150,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-998996631,1,['avoid'],['avoid']
Safety,"@susilehtola Ah, I see thank you. Is there a way to detect this in LibXC 4.0?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/863#issuecomment-345263623:52,detect,detect,52,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345263623,1,['detect'],['detect']
Safety,"@tomspur @andysim @dgasmith . I added another commit to this that largely does away with the options dict passed to `ipi_broker`. chg/mult weren't being used and should be read off the molecule anyway to avoid input clash. LOT is now a req'd option so the fn looks a lot more like `energy`. (It's returning a broker object, so I didn't work it into `energy()` itself.) Any concerns, particularly if I'm impairing its intended usage?. Also, at present any calls to `ipi_broker` with `import ipi` unavailable run just fine as ordinary psi4 calls. I was a little surprised by this compensating for user's expressed intent. Is this the wanted behavior?. If there aren't actually any wanted changes, I have another commit to make for lgtm and to remove the `@using_ipi` that aren't strictly needed, then it's rtg.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1057#issuecomment-653148607:204,avoid,avoid,204,https://psicode.org,https://github.com/psi4/psi4/pull/1057#issuecomment-653148607,1,['avoid'],['avoid']
Safety,"A [recent PR](https://github.com/psi4/psi4/pull/2780#event-7959038316) changed `detci` so that it crashes when the user specified more roots than the basis set allows. @susilehtola proposed that instead, `detci` take as many roots as possible. What do we want to do?. I'll quote Lori's analysis of our options. > 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; > ; > 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); > ; > 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2825:871,detect,detects,871,https://psicode.org,https://github.com/psi4/psi4/issues/2825,2,"['detect', 'recover']","['detects', 'recover']"
Safety,"A couple of options: 1) use [find_executable()]( https://docs.python.org/3.5/distutils/apiref.html#module-distutils.spawn) to figure it out or 2) have CMake inject the python executable path that it detected, using something like [configure_file](https://cmake.org/cmake/help/latest/command/configure_file.html).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1709#issuecomment-526620503:199,detect,detected,199,https://psicode.org,https://github.com/psi4/psi4/pull/1709#issuecomment-526620503,1,['detect'],['detected']
Safety,"A couple thoughts before a more thorough review:. Can you add some test cases to verify that this doesn't change the SCF energy? That set of test molecules from yesterday would be good, plus a few larger molecules. Could you do some timing to verify that this does in fact speed the SCF code up? A comparison of system size, density threshold, timing, and energy error would be good. It appears that you're calculating integrals within the master loop and doing redundant work, possibly more than the original algorithm. I think you want to calculate all (NM|NM) shells outside of the loop and use those integrals within the loop.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2062#issuecomment-743352546:462,redund,redundant,462,https://psicode.org,https://github.com/psi4/psi4/pull/2062#issuecomment-743352546,1,['redund'],['redundant']
Safety,"A few notes:; 1) Why does the dispersion string need to be expanded? Not opposed just curious.; 2) Im not a fan of the transparent assumptions of what HF alpha and MP2 components should be. Would prefer if we specific them explicitly in other parts of the spec. On this note it is a bit hard to pick up something like `HYB_MGGA_X_MN15` and auto detect the need to pull parameters from the underlying function. In addition, what happens if someone does a silly operation like mixing multiple HYB functionals? We likely want to specify *something* to indicate that we should pull exchange parameters from a given functional.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/920#issuecomment-366111314:345,detect,detect,345,https://psicode.org,https://github.com/psi4/psi4/issues/920#issuecomment-366111314,1,['detect'],['detect']
Safety,"A number of issues have come up and been bandaid-ed over regarding detecting math libs, propagating math libs, preloading math libs, statically linking math libs, etc. This issue is mainly an FYI to all and a query to @robertodr and @bast to make sure we're not trying to solve things that they've already done. #### Current State; * psi4 uses Radovan Bast's detection scheme circa 2014 or so; * said scheme finds MKL just fine- usually the shared lib versions and always the layered scheme (https://software.intel.com/en-us/node/528508) rather than `libmkl_rt.so`; * said scheme just uses Accelerate libs for Mac, again just fine; * said scheme can find ACML after heavy hinting; * there is a FindLapack CMake module, but either we haven't tried hard enough or it can't find ACML. It also will only find shared MKL libs. #### Complications and Bandaids; * conda pkg building needs _static_ mkl libs back from math detection (except for a couple). We've [patched this within the Bast math detection](https://github.com/psi4/psi4/blob/master/cmake/math/MathLibsFunctions.cmake#L59-L73) if triggered by a cmake var.; * MKL in general needs `-Wl,--start-group` and `-Wl,--end-group` passed to the linker around the math libs to resolve circular dependencies. Supposedly this can be conveyed to cmake directly with https://cmake.org/cmake/help/v3.0/prop_tgt/LINK_INTERFACE_MULTIPLICITY.html . Problem with the start/end-group is that cmake will optimize them out of position if more than one set are included in a link line formed from cmake vars. We patched this in Psi4 by [combining blas and lapack targets](https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L111) so that one set can sandwich both. Supposedly if these come into the link line through a target rather than a cmake var, then cmake won't mess with them.; * Even though psi4 builds and links fine, we're having to advise more and more people to LD_PRELOAD various mkl libraries or mkl_rt.so. part of the complication cou",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537:67,detect,detecting,67,https://psicode.org,https://github.com/psi4/psi4/issues/537,4,['detect'],"['detecting', 'detection']"
Safety,"Actually, in addition to the basis set parser, there's something else wrong. Namely, removing the `L=9` functions from the basis, Psi4 crashes:; ```; $ psi4 h2.in . malloc(): corrupted top size; Aborted (core dumped); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1992#issuecomment-681077930:195,Abort,Aborted,195,https://psicode.org,https://github.com/psi4/psi4/issues/1992#issuecomment-681077930,1,['Abort'],['Aborted']
Safety,"Actually, there are more failures; ```; (gdb) bt; #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0); at pthread_kill.c:44; #1 0x00007f21b9c426d3 in __pthread_kill_internal (threadid=<optimized out>, signo=6) at pthread_kill.c:78; #2 0x00007f21b9be9c4e in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26; #3 0x00007f21b9bd1902 in __GI_abort () at abort.c:79; #4 0x00007f21862e80af in std::__glibcxx_assert_fail (file=<optimized out>, line=<optimized out>, ; function=<optimized out>, condition=<optimized out>); at ../../../../../libstdc++-v3/src/c++11/assert_fail.cc:41; #5 0x00007f21aa275614 in std::vector<double const*, libint2::detail::ext_stack_allocator<double const*, 121ul> >::operator[] (this=0x56025b76c988, __n=6) at /usr/include/c++/14/bits/stl_vector.h:1149; #6 0x00007f21aa2a709b in psi::Libint2TwoElectronInt::compute_shell_deriv1 (this=0x56025b7bb980, s1=0, s2=0, ; s3=0, s4=0) at /home/work/psi4-1.9.1/psi4/src/psi4/libmints/eribase.cc:3245; #7 0x00007f21a9f71d73 in _ZN3psi11MintsHelper11metric_gradERSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt10shared_ptrINS_6MatrixEESt4lessIS7_ESaISt4pairIKS7_SA_EEERSE_._omp_fn.0(void) (); at /home/work/psi4-1.9.1/psi4/src/psi4/libmints/mintshelper.cc:2343; #8 0x00007f219d9a89c4 in __kmp_api_GOMP_parallel_40_alias (); from /home/susi/.conda/envs/p4env/lib/libgomp.so.1; #9 0x00007f21a9f5f757 in psi::MintsHelper::metric_grad (this=0x56025ac87f20, D=..., aux_name=...); at /home/work/psi4-1.9.1/psi4/src/psi4/libmints/mintshelper.cc:2335; #10 0x00007f21a9b85c92 in psi::scfgrad::DFJKGrad::build_AB_x_terms (this=0x56025a8b4200); at /home/work/psi4-1.9.1/psi4/src/psi4/scfgrad/jk_grad.cc:862; #11 0x00007f21a9b818c2 in psi::scfgrad::DFJKGrad::compute_gradient (this=0x56025a8b4200); --Type <RET> for more, q to quit, c to continue without paging--; at /home/work/psi4-1.9.1/psi4/src/psi4/scfgrad/jk_grad.cc:257; #12 0x00007f21a9b7595c in psi::scfgrad::SCFDeriv:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969:412,abort,abort,412,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969,1,['abort'],['abort']
Safety,Add missing sanity check.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1982:12,sanity check,sanity check,12,https://psicode.org,https://github.com/psi4/psi4/pull/1982,1,['sanity check'],['sanity check']
Safety,"Adds the ability to compile and link [Ambit](https://github.com/jturney/ambit) v0.1-alpha into Psi4. The interface is disabled by default but can be enabled with either `setup --ambit=on` or `cmake -DENABLE_AMBIT=ON`. Even though the interface is disabled by default both states have been tested in Travis: [disabled](https://travis-ci.org/jturney/psi4/builds/109861480) and [enabled](https://travis-ci.org/jturney/psi4/builds/109700703). A new plugin template has also been added, `psi4 --new-plugin mycode +ambit`, which shows how to use Ambit with added Psi4 functionality. This PR also includes fixing a typo in Wavefunction and renaming the macro NotImplementedException to NOT_IMPLEMENTED_EXCEPTION to avoid conflicts with Ambit. This PR is ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/265:708,avoid,avoid,708,https://psicode.org,https://github.com/psi4/psi4/pull/265,1,['avoid'],['avoid']
Safety,"Agreed, checking that the sys has at least as many bodies as the nbody requests would be a good sanity check. Mol.nfragments() is the fn, I think. run_sapt in proc.py does something similar.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1649#issuecomment-493675525:96,sanity check,sanity check,96,https://psicode.org,https://github.com/psi4/psi4/issues/1649#issuecomment-493675525,1,['sanity check'],['sanity check']
Safety,"Ah wonderful! Yes, `sup.set_vv10_b()` is what I was looking for. I also (finally) found [api/psi4.core.SuperFunctional](http://www.psicode.org/psi4manual/master/api/psi4.core.SuperFunctional.html); for a good overview what is accessible. DFT-NL (nl=non-local) is just like DFT-D, where the _b_ parameter of the VV10 kernel is fitted to an arbitrary functional. Ideally I would like to add an automatic detection similar to the -D dashparam in superfuncs.py to an eventual PR.; Though I am wondering if it is a good idea to piggy-back on the -D part and extent it to -NL or to make something separate. It would make sense to add the non-local dispersion to the 'empirical' dispersion. This is mostly a design choice, i suppose. Thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/870#issuecomment-348128880:402,detect,detection,402,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-348128880,1,['detect'],['detection']
Safety,"Ah yes, this is an issue. Neither of the three works as one would expect them to work: the first two don't do anything as the fctl stage is not specified, and the third one does a full extrapolation. I'm not sure what the first two cases should return - neither of those requests anything resembling a ""total energy""; ; - aborting with a warning would be in order, ; - or we can do the same as for correlated methods, where the fctl step is implied as a non-extrapolated one with highest. For the third case, this is clearly a bug which I'll work on fixing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-965333017:322,abort,aborting,322,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-965333017,1,['abort'],['aborting']
Safety,"Ah, of course. I forgot that was already in upstream. Btw, in general if anyone wants to avoid ""undefined"" version, just `git fetch upstream` to get the tags. Undefined version doesn't hurt a thing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/725#issuecomment-305321675:89,avoid,avoid,89,https://psicode.org,https://github.com/psi4/psi4/pull/725#issuecomment-305321675,1,['avoid'],['avoid']
Safety,"Ah, ok. I didn't realize that. Might be worth mentioning that somewhere to avoid confusion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2479#issuecomment-1069338336:75,avoid,avoid,75,https://psicode.org,https://github.com/psi4/psi4/pull/2479#issuecomment-1069338336,1,['avoid'],['avoid']
Safety,"Ah, yes, c-f vs. defaults is a likely cause. There are a couple ways to deal with mixing psi4 and c-f deps, but none that's simple, robust, and a one-liner. Whatever you do, `blas=*=mkl` is a must with c-f and psi. Then you can (1) maintain two channels for the two bases and mix them at the PYTHONPATH level, (2) start an env with a defaults + psi4 install, then install additional packages from c-f, (3) use an env spec file mixes a known safe combination of psi4 and c-f packages. This is admittedly aggravating for an ordinary request. It should get better soon, as I'm working on c-f packaging (there have been dependency blocks up until about a month ago). I can try to interpret any roadblocks you hit in the meantime. > reluctant to have a separate conda installation). Just to be clear, you wouldn't need a separate conda _installation_; only a separate conda _environment_.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742:441,safe,safe,441,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742,1,['safe'],['safe']
Safety,"Aha, Psi's CD algorithm is not parallelized and is probably why I was seeing CD tensor generation taking longer than the iterations in some cases. We could fix that, it would be nice to avoid an auxiliary basis. Yea, thats something to consider; however, one thing I have noted is that projecting orbitals that result from a partial Cholesky of the SAD density results in some degradation in the accuracy of the SAD guess itself. This is kind of weird, but might come from the interplay of the projection and how Cholesky weights vectors. Right now the SAD guess takes a small fraction of the SCF time (even for dimers) so I didnt see a need to look into this. Ill add this functionality back in so someone can play with it if they want.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/400#issuecomment-223759128:186,avoid,avoid,186,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-223759128,1,['avoid'],['avoid']
Safety,All but two of the files in `bin` are specific to the old configure.ac build system. The other two: `psi4-config.in` I do not think it is used and is a left over of the old plugin system and `git_list_authors.sh` was just a toy script that someone put in. The files in `bin` should be safe to remove.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/187#issuecomment-156849608:285,safe,safe,285,https://psicode.org,https://github.com/psi4/psi4/issues/187#issuecomment-156849608,1,['safe'],['safe']
Safety,All test but these pass:; ```; 368 - dft-custom-gga (Failed) (see https://github.com/psi4/psi4/issues/994); 370 - dft-bench-interaction (Timeout); 372 - pywrap-align (Failed); 373 - pywrap-align-chiral (Failed). ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/914#issuecomment-385654990:137,Timeout,Timeout,137,https://psicode.org,https://github.com/psi4/psi4/pull/914#issuecomment-385654990,1,['Timeout'],['Timeout']
Safety,"All the symmetry detection in the Molecule class is through `tol` arguments for individual methods. For the Molecule as a whole, this is controlled by `DEFAULT_SYM_TOL`, which is compiled in. This means one can't just dial down the symmetry tolerance for an entire optimization. For this ticket, make the `tol` parameter not a preprocessor option but a bit of member data. Make a set function for this. Export it to python.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/232:17,detect,detection,17,https://psicode.org,https://github.com/psi4/psi4/issues/232,1,['detect'],['detection']
Safety,"All worked well. I'll check with the student to make sure he is happy too. So this is my mindless list of commands, including the suggested correction and a few small changes to install inside the p4dev environment:. ```; wget 'https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh'; chmod +x Miniconda3-latest-Linux-x86_64.sh; ./Miniconda3-latest-Linux-x86_64.sh -b; source miniconda3/bin/activate; conda create -n p4dev psi4-dev python=3.7 -c psi4/label/dev -y; conda activate p4dev; conda install libint am8 -c psi4/label/dev -y; git clone https://github.com/psi4/psi4.git && cd psi4; `psi4-path-advisor --gcc` -DMAX_AM_ERI=8 -DENABLE_simint=OFF -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} -DPYMOD_INSTALL_LIBDIR=/python3.7/site-packages; cd objdir && make install -j`getconf _NPROCESSORS_ONLN`; ```. Few notes for the casual reader:. - The suggested option ` -DENABLE_simint=OFF` may no longer be needed at some point in the future.; - Installing in `${CONDA_PREFIX}` is only safe when you don't install the PSI4 package with conda in the same environment. Edits:; - Added activate line.; - Added -y options; - Updated to py3.7; - Install Python modules in the canonical location.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-437007249:991,safe,safe,991,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-437007249,1,['safe'],['safe']
Safety,"All, I've gone back and forth on how to do the testing. The problem is that Psi4 has paths baked in at compile time, which need to point to the install locations to work correctly at installation. Like Lori said, I originally deemed the risk of everything breaking upon installing being a real problem for Psi4. I'm now leaning more towards what @jturney said, i.e. the canonical make cycle. I'm actually tweaking it as we speak so that it works that way (and hopefully also fixing this linking error I introduced with the math detection...). I think there's a happy medium here, where we only manually set the PSIDATADIR for tests and the install runs off the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235916559:237,risk,risk,237,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235916559,2,"['detect', 'risk']","['detection', 'risk']"
Safety,"Alrighty, this one should be ready to go now. I tried to cook up a simple test using f orbitals, but they're all too costly; in the end I just added a permutation to the atom ordering in our existing cc-pVDZ water test, because this is enough to reveal the bug. The fact that we've always had a working cc-pVDZ test case shows how subtle the bug is; the affected d components in water must be zero by symmetry. I did have a distorted water in my test suite to check that case, but didn't detect problems. Oh well, live and learn I guess. This should be a trivial review, and it clearly helps to address a couple of high priority tickets, so please have at it whenever you get a chance. Sorry again for the error. Next time you see me, I'll be at a chalkboard, writing ""I will not cut and paste"", à la Bart in the Simpsons opening credits. Except, instead of writing it, I'll be cutting and pasting it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/903#issuecomment-361080182:488,detect,detect,488,https://psicode.org,https://github.com/psi4/psi4/pull/903#issuecomment-361080182,1,['detect'],['detect']
Safety,"Also, how have you verified correctness? While I'm not familiar with these methods, ""can induce an energy difference of over 2 _hartrees_ even at conservative cutoffs"" does not seem safe.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821086361:182,safe,safe,182,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821086361,1,['safe'],['safe']
Safety,"And regarding the shared state issue. I did not realize that we were looking at orbital optimized methods so the example of avoiding work by intentionally sharing state here is a bad one. but the issue is still related. . The error arises when you run the modules one after the other, because the `DCFT` module is making some assumptions, probably unintentionally about the state of various psio files. However the `OMP2` module has modified that state and the assumptions `DCFT` is making are no longer valid. In this case the assumption is that the `MO Ints (OO|OV)` entry either does not exist, or if it exists it is the correct size to hold `O,O,O,V`. This is not a case of sloppy programing by the authors of either module, it is a consequence of DPD creating global state in a difficult to predict way (due to a lack of documentation), and not providing the means to program defensively around it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288#issuecomment-435217365:124,avoid,avoiding,124,https://psicode.org,https://github.com/psi4/psi4/issues/1288#issuecomment-435217365,2,"['avoid', 'predict']","['avoiding', 'predict']"
Safety,"And, yes, the reason for using tee so extensively in my Travis scripts is twofold: a) making the output stream continuous so that we don't timeout, as @jturney said, and b) allowing us to filter extraneous output to ensure we don't print too much.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/247#issuecomment-183717105:139,timeout,timeout,139,https://psicode.org,https://github.com/psi4/psi4/pull/247#issuecomment-183717105,1,['timeout'],['timeout']
Safety,"Another, and generally safer, option is to use `nohup psi4 &` on remote machines as this will always decouple `stdout` from the job, something `disown` is not doing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1983#issuecomment-677268394:23,safe,safer,23,https://psicode.org,https://github.com/psi4/psi4/issues/1983#issuecomment-677268394,1,['safe'],['safer']
Safety,"Any chance at all that there's an old (what p4 used until maybe a month ago) pybind11 2.2.0 anywhere conceivably detectable, including in a conda env where other p4 dependencies are detected? CMake is perfectly capable of finding the pb11 you want and then C++ header detection takes over and finds the pb11 you _don't_ want. EDIT: **2.0.0**, not 2.2.0; Further EDIT: it does look like gcc7 is the highest they regularly test https://travis-ci.org/pybind/pybind11/builds/375778661?utm_source=github_status&utm_medium=notification",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1013#issuecomment-388214831:113,detect,detectable,113,https://psicode.org,https://github.com/psi4/psi4/issues/1013#issuecomment-388214831,3,['detect'],"['detectable', 'detected', 'detection']"
Safety,Apparently very easy to fall into endless recursion with MBIS volumes due to some necessary inputs also calculated by `oeprop()` and involving calls to `energy()`. You're interested in MBIS CHARGES as standalone (w/o volumes and extents) to avoid the cost of all the atomic calcs since you don't need the volume?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2272#issuecomment-896976501:241,avoid,avoid,241,https://psicode.org,https://github.com/psi4/psi4/issues/2272#issuecomment-896976501,1,['avoid'],['avoid']
Safety,"Are both solutions stable ? For UHF computations, it seems to me always; more safe to do a stability analysis. In some cases, it allowed me to; eliminate the higher energy solution as unstable. However, in other cases, both solutions are actually SCF minima... Trying; with different guesses then seems the only way to find the lowest energy; solution. 2016-01-14 2:42 GMT-05:00 Rob Parrish notifications@github.com:. > I have seen this before (for this exact system) - the SAD guess converges; > to the correct root, but Core does not. Not really much more to it than; > that.; > ; > -Rob; > ; > On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; > notifications@github.com> wrote:; > ; > > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > > gives very different energies.; > > The following input with the core guess gives a total energy of; > > -75.5488580481183476; > > ; > > memory 250 mb; > > molecule h2o {; > > symmetry c1; > > 1 2; > > O 0.0000000000 0.0000000000 -0.2249058930; > > H 1.4523499293 0.0000000000 0.8996235720; > > H -1.4523499293 0.0000000000 0.8996235720; > > units bohr; > > no_reorient; > > no_com; > > }; > > ; > > set {; > > basis cc-pVDZ; > > scf_type direct; > > guess core; > > reference uhf; > > e_convergence 7; > > d_convergence 7; > > }; > > ; > > energy_scf1 = energy('scf'); > > ; > > while this input with the SAD guess gives a total energy of; > > -75.6330881795159655; > > ; > > memory 250 mb; > > molecule h2o {; > > symmetry c1; > > 1 2; > > O 0.0000000000 0.0000000000 -0.2249058930; > > H 1.4523499293 0.0000000000 0.8996235720; > > H -1.4523499293 0.0000000000 0.8996235720; > > units bohr; > > no_reorient; > > no_com; > > }; > > ; > > set {; > > basis cc-pVDZ; > > scf_type direct; > > guess sad; > > reference uhf; > > e_convergence 7; > > d_convergence 7; > > }; > > ; > > energy_scf1 = energy('scf'); > > ; > > Of course, the initial guess has always a huge impact on the calculation,; > > but is the reported difference ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211#issuecomment-171646769:78,safe,safe,78,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171646769,1,['safe'],['safe']
Safety,Are there any known methods of getting to build Numpy/Scipy from source using Accelerate to avoid the mismatch? (I think support might have been dropped altogether.),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-955805258:92,avoid,avoid,92,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-955805258,1,['avoid'],['avoid']
Safety,"Are there any special concerns needed to prevent linear dependencies from causing problems in the EDIIS/ADIIS extrapolation, or am I safe to use linearly dependent SO basis quantities?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235#issuecomment-937770538:133,safe,safe,133,https://psicode.org,https://github.com/psi4/psi4/issues/2235#issuecomment-937770538,1,['safe'],['safe']
Safety,"Are you building Psi4 for packaging or for single-deployment use?. Psi4 does check for external packages at CMake configure time and will find any you specify with the variables in ""CMake Variables"" section in http://psicode.org/psi4manual/master/libint.html#how-to-configure-libint-for-building-psi4 and similar variables for other packages. Note that the external packages must have been built to export a CMake target (that is, `LibintConfig.cmake`). The CMake config should be reporting a colored Found or Building for each package. When Psi4 itself is packaged, it always uses externally built packages of its dependencies so that none of other packages' files get installed (except pybind11 headers, just because it's safer to keep the right version internally). For single-deployment Psi4 builds, it'll just build and install whatever's needed, as you observed, for the user's convenience. Do you think the existing scheme can work for you? I'm glad to explain it further if you need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343715845:724,safe,safer,724,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343715845,1,['safe'],['safer']
Safety,"Are you trying to use a Libint2 release? Keep in mind that Psi4 needs changes to the upstream buildsystem (these can be worked around) and changes to the default upstream build configuration (such that a built library won't work with any other open-source QC package). I'll collect some links here since it's worth having an issue open on this for packagers to consult (hence pinging @mbanck, @susilehtola). * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; - [x] transition psi4 TEI #1721; - [ ] reconcile LAB's l2 cmake (that psi uses at present) https://github.com/loriab/libint/tree/l2cmake with EFV's adaptations https://github.com/evaleev/libint/pull/205; - [ ] merge https://github.com/evaleev/libint/pull/205 and release; - [ ] expand current integrals config requirements beyond current set in notes (needed before #2388); - [ ] transition psi4 OEI #2388 ; - [ ] transition psi4 integral ordering from `gss` to `sss`; - [ ] coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. If I'm off base @yurivict and you're already using a psi-configured l2 and this is simply a detection issue, let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498:1560,detect,detection,1560,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498,1,['detect'],['detection']
Safety,"Are you using a detected pre-build pybind11? Pybind11 changes so often just now (we usually update to their HEAD once a month and need to adapt the Psi4 code) that we can't guarantee that any but the [tag](https://github.com/psi4/psi4/blob/master/external/pybind11/CMakeLists.txt#L11) works. In case you're alarmed by the fork, the alterations are just changes to the build, not to pybind.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261727164:16,detect,detected,16,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261727164,1,['detect'],['detected']
Safety,"Arrrgghhh...schoolboy error! Oops!. Now:. `cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/usr/local/psi4 -DOpenMP_CXX_LIBRARY_DIRS=/opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64_lin/`; gives:. ```; -- Math lib search order is MKL;OPENBLAS;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl; -- Found BLAS: MKL (/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so); -- LAPACK will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl; -- Found LAPACK: MKL (/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so); -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; MathOpenMP iomp5 0 ; MathOpenMP iomp5 A /opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64_lin/libiomp5.so; MathOpenMP iomp5 B /opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64_lin/libiomp5.so; MathOpenMP -Wl,--as-needed 0 ; MathOpenMP -Wl,--as-needed A _lib-NOTFOUND; MathOpenMP -Wl,--as-needed B _lib-NOTFOUND; MathOpenMP_LIBRARIES /opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64_lin/libiomp5.so;-Wl,--as-needed; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; -- Found MathOpenMP: Found MathOpenMP: /opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64_lin/libiomp5.so;-Wl,--as-needed ; -- ; Properties for TARGET tgt::MathOpenMP:; tgt::MathOpenMP.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/int",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396748980:860,Detect,Detecting,860,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396748980,1,['Detect'],['Detecting']
Safety,"Assume I have the electron density represented as the expansion coefficients under an DF auxiliary basis (which come from machine learning prediction). Although the kinetic energy cannot be evaluated without an AO basis, theoretically the Kohn-Sham effective potential has no kinetic term and should be able to be constructed from DF density (assume we are using PBE). Then we might restart the DFT from this effective potential. Is this possible for psi4? And if so, may I have some hints on how to do this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3070:139,predict,prediction,139,https://psicode.org,https://github.com/psi4/psi4/issues/3070,1,['predict'],['prediction']
Safety,"At risk of encouraging procrastination, the alignment of error codes in `config.h` has been lost.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1170#issuecomment-415861364:3,risk,risk,3,https://psicode.org,https://github.com/psi4/psi4/pull/1170#issuecomment-415861364,1,['risk'],['risk']
Safety,"At the bottom of the output, after 3 steps, many of the torsions are very close to 180. Is the structure exactly planar? I'm not surprised if you are not able to converge this tightly. You could try Cartesian coordinates to avoid all these discontinuities (not just in the value of the torsion, but in its derivative too). 	 D(7,11,6,18) = -3.129372	 -179.299795; 	 D(8,6,11,10) = -3.133590	 -179.541496; 	 D(8,12,9,21) = 3.130680	 179.374777; 	 D(9,7,11,10) = 3.130802	 179.381713; 	 D(9,12,8,20) = 3.137161	 179.746078; 	 D(10,4,2,14) = -3.130400	 -179.358722",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858#issuecomment-344082701:224,avoid,avoid,224,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344082701,1,['avoid'],['avoid']
Safety,"At the moment, the only advantage would be the cleaner separation of intra- and inter- fragment motions which could result in better convergence behavior, particularly for weakly bound complexes. My plan has been to exploit this separation by doing some fancier things such as steepest descent in the inter- modes at the same time as reliable molecular methods (like RFO) for the intra- modes. Another needed feature is a better guess for the inter- modes based on Leonard-Jones potentials or molecular mechanics, etc.. But since these have not been implemented, there is perhaps limited point to using 'multi' at present. The overall motivation is that the methods that are ideal for intra- motions (redundant internals based on chemical bonding, RFO, BFGS...) do not work well for inter- motions with flat potentials.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/680#issuecomment-295755959:701,redund,redundant,701,https://psicode.org,https://github.com/psi4/psi4/issues/680#issuecomment-295755959,1,['redund'],['redundant']
Safety,Avoid Disk algorithm of MemDF,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3131:0,Avoid,Avoid,0,https://psicode.org,https://github.com/psi4/psi4/pull/3131,1,['Avoid'],['Avoid']
Safety,Avoid Psithon processing of literal expressions and comments. Fixes #655,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/658:0,Avoid,Avoid,0,https://psicode.org,https://github.com/psi4/psi4/pull/658,1,['Avoid'],['Avoid']
Safety,Avoid hungarian,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/974:0,Avoid,Avoid,0,https://psicode.org,https://github.com/psi4/psi4/pull/974,1,['Avoid'],['Avoid']
Safety,Basis set input is not sanity checked,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2253:23,sanity check,sanity checked,23,https://psicode.org,https://github.com/psi4/psi4/issues/2253,1,['sanity check'],['sanity checked']
Safety,"Been a while, but I think we don't have character table for non-Abelian point groups. https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/maketab.cc. Symmetry detection happens in molecule.cc, so we do have non-Abelian there, but only for reporting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1474#issuecomment-454255838:171,detect,detection,171,https://psicode.org,https://github.com/psi4/psi4/issues/1474#issuecomment-454255838,1,['detect'],['detection']
Safety,"Between plain calcs, user-specified-occ-calcs, successive calcs, calcs involving pre-SCF-cycles, wavefunction reloading, restarts, etc., getting the SCF initialization info from places in the right priority is fraught and, I fear, not defensively tested. So it'd be useful to understand the circumstances and reasoning behind the proposed changes. I'm all for more sanity checks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2488#issuecomment-1073970696:365,sanity check,sanity checks,365,https://psicode.org,https://github.com/psi4/psi4/pull/2488#issuecomment-1073970696,1,['sanity check'],['sanity checks']
Safety,"Build the shared library with `make psi4so`, and it builds just fine but then segfaults when you try to set options. @bennybp, Boost/fpic notwithstanding, I know you've got a shared library of psi4 in working order. Could you send me or post the `src/bin/psi4/CMakeLists.txt` and any changes to the `MAKE_PYTHON_MODULE` sections? I didn't see that you had a fork of psi4 with changes. ``` python; Python 2.7.10 |Anaconda 2.1.0 (x86_64)| (default, May 28 2015, 17:04:42) ; [GCC 4.2.1 (Apple Inc. build 5577)] on darwin; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; Anaconda is brought to you by Continuum Analytics.; Please check out: http://continuum.io/thanks and https://binstar.org; >>> import sys; >>> sys.path.insert(1, '/Users/loriab/linux/psihub/publicface/psi4/objdir/bin'); >>> import psi4; >>> psi4.set_global_option('BASIS', 'CC_PVDZ'). Error: option BASIS is not contained in the list of available options.; Assertion failed: (px != 0), function operator->, file /Users/loriab/linux/psihub/publicface/psi4/objdir/boost/include/boost/smart_ptr/shared_ptr.hpp, line 648.; Abort trap: 6; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/251:1109,Abort,Abort,1109,https://psicode.org,https://github.com/psi4/psi4/issues/251,1,['Abort'],['Abort']
Safety,"By finite-difference test, I mean ""there is some property that we can compute either by finite difference of energies or by contracting appropriately defined densities against derivative integrals,"" e.g., geometry gradients and dipoles. By checking that both routes predict the same result, we can be much more confident that the densities are correctly implemented. (I recall a sign error in the CASPT2 gradients of another package. This error went uncaught for decades because the impact on calculations was relatively small.). I don't know if this is an option for transition densities. I'm not sure if EOM-CC transition properties are defined by some variational criteria, some variational criteria but neglecting orbital relaxation, or something else altogether. EDIT: The '93 Stanton and Bartlett paper explicitly says orbital relaxation is neglected, so I imagine the finite difference test is not an option. I'm not sure if there's some other technique to validate the correctness of the transition densities, other than matching other code. I know ""matching other code"" is done in the test suite.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2541#issuecomment-1094528284:266,predict,predict,266,https://psicode.org,https://github.com/psi4/psi4/pull/2541#issuecomment-1094528284,1,['predict'],['predict']
Safety,"By the way, MKL/Intel compiler performance is actually reasonably good on recent AMD Ryzen/Epyc CPUs, the only thing that may need to be done, is to patch the binaries with [this tool](https://github.com/jimenezrick/patch-AuthenticAMD). What it does, is look for CPU detection checks, and disable the ""cripple_AMD()"" paths that MKL, and Intel compilers often tend to insert. When this is done, AMD CPUs will get to run the same, optimized/vectorized code paths that an Intel CPU would run, instead of the unoptimized/less optimized path that is intended to be run by non-Intel CPUs. This is just fine, since Ryzen CPUs are actually very happy to run code optimized for Haswell, in fact IIRC for a long time the best --march= flag to use with GCC on Ryzen has been ironically --march=haswell.; So using MKL and Intel compiled binaries are just fine on Ryzen systems, just make sure to patch the MKL and compiled binaries. PS: we are in the process of acquiring some Ryzen systems, so in a couple months I will be able to provide actual test results",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390958853:267,detect,detection,267,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390958853,1,['detect'],['detection']
Safety,"C compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icpc; -- Check for working CXX compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- The Fortran compiler identification is Intel 18.0.2.20180210; -- Check for working Fortran compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort; -- Check for working Fortran compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Enabling Fortran; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Success, Appending; -- Performing Test CMAKE_Fortran_FLAGS [-xHost] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (u",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883:1850,Detect,Detecting,1850,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883,4,['Detect'],['Detecting']
Safety,"CC DIPOLE X"")` you are really getting what you would expect should be listed as `psi4.get_variable(""EOM-CC ROOT {last_root} DIPOLE X"")`. In addition to that you can't get the ground state dipole components at all since they were overwritten in the psivars dict with subsequent calls to the `psi4.core.ccdensity->psi::ccdensity::dipole->OEprop` chain.; - see [psi::ccdensity::dipole](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L61) code and follow into [OEProp](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) to see what I mean if you didn't follow the explanation above. . I think this very confusing when you look at how the dipole components for different roots can be grabbed with `psi4.get_variable` in the [ci-property tests](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) for example. . I propose ( and volunteer to make) the following changes in order to implement the test here, and avoid confusion in the future:; - For the 0th root (only one for non EOM-CC calculations) ccdensity will behave as is. ; - For any root after that it will pass `EOM-CC ROOT {root #}` into `oe->set_title()` [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L107) so that the confusing behavior with the variables dict is no longer as strange. ; - To test the original modification that this PR introduced I will: ; 1. extend `tests/cc54` to return the wfn which should now have Da/Db set to the CCSD OPDM. Get the `CC DIPOLE/QUADRUPOLE` components from the first pass. Run OEProp again (python side) with the wfn holding the CCSD OPDM, and make sure it gives the same `DIPOLE/QUADRUPOLE` components. ; 2. extend `tests/cc49` to do the same thing as before but just to be sure that the ground-state density is the only one being put back in ref_wfn, and at the same time confirm that the other roots are not over-writing the `CC DIPOLE/QUADRUPOLE` entries in the variables dict an",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-259597050:1483,avoid,avoid,1483,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259597050,1,['avoid'],['avoid']
Safety,CFOUR Driver with Displacements Fails Sanity Check,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1784:38,Sanity Check,Sanity Check,38,https://psicode.org,https://github.com/psi4/psi4/issues/1784,1,['Sanity Check'],['Sanity Check']
Safety,"CMAKE_INSTALL_LIBDIR: lib; -- Setting option PYMOD_INSTALL_LIBDIR: /; -- Setting option psi4_INSTALL_CMAKEDIR: share/cmake/psi4; -- Setting option TargetLAPACK_INSTALL_CMAKEDIR: share/cmake/TargetLAPACK; -- Setting option TargetHDF5_INSTALL_CMAKEDIR: share/cmake/TargetHDF5; -- Setting option ENABLE_GENERIC: OFF; -- Setting option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting option psi4_CXX_STANDARD: 17; -- Setting option psi4_CXX_STANDARD_Libint2: 17; -- Setting option SIMINT_VECTOR: avx; -- Setting option SPHINX_THEME: sphinx_psi_theme; -- Setting option SPHINXMAN_STRICT: OFF; -- Setting option BUILD_Libint2_GENERATOR: OFF; -- Setting option psi4_SHGAUSS_ORDERING: gaussian; -- Psi4 install: /mnt/f/psi4/build_linux/install; -- Found Python 3.10: /home/yuyeqing/software/miniconda3/envs/psi/bin/python3.10 (found version 3.10.11); -- Psi4 staging: /mnt/f/psi4/build_linux/stage; -- CMAKE_CXX_FLAGS: -march=native; -- Could NOT find iomp5 -- consider adding full directory path to OpenMP_LIBRARY_DIRS; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX, C/CXX/Fortran=GNU/GNU/; -- Found LAPACK MKL: /home/yuyeqing/intel/oneapi/mkl/latest/lib/intel64/libmkl_rt.so;...; -- Performing Test HAS_FLTO; -- Performing Test HAS_FLTO - Success; -- Found pybind11: /mnt/f/psi4/build_linux/stage/include (found version 2.10.3); -- Found gau2grid: /mnt/f/psi4/build_linux/stage/lib/libgg.a (found version 2.0.7); -- Found Eigen3: /home/yuyeqing/software/eigen3/include/eigen3 (Required is at least version ""3.0.0""); -- Boost detected. satisfied by headers bundled with Libint2 distribution; -- Libint2Config components requested: CXX_ho;eri_c2_d0_l4;eri_c2_d1_l3;eri_c2_d2_l3;eri_c3_d0_l4;eri_c3_d1_l3;eri_c3_d2_l3;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d2_l2;impure_sh;onebody_d0_l4;onebody_d1_l3;onebody_d2_l3;sss; -- Libint2Config components found: CXX_ho;C;eri_c2_d0_l2;eri_c2_d0_l3;eri_c2_d0_l4;eri_c2_d0_l5;eri_c2_d0_l6;eri_c2_d1_l2;eri_c2_d1_l3;eri_c2_d1_l4;eri_c2_d1_l5;eri_c2_d2_l2;eri_c2_d2_l3;eri_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:2525,Detect,Detecting,2525,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119,1,['Detect'],['Detecting']
Safety,CMake could probably auto-detect libiomp5 using LD_LIBRARY_PATH,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2806:26,detect,detect,26,https://psicode.org,https://github.com/psi4/psi4/issues/2806,1,['detect'],['detect']
Safety,"Can be fixed with a bigger basis like cc-pvdz. The gradient is fine, so I think the trouble is in predicting the next geom step, so may be of interest to @psi-rking . ```; molecule { ; 0 1; C -0.167039 -0.712374 -0.022325; O 0.119573 0.677072 0.056530; H -0.453842 -0.989160 -1.036819; H -0.997038 -0.962046 0.638968; H 0.691232 -1.312038 0.284396; H 0.775814 0.817745 0.757350; }. set optking { ; frozen_dihedral = (""; 5 1 2 6; 4 1 2 6; 3 1 2 6; ""); }; #set {; # geom_maxiter 2; # g_convergence GAU_LOOSE; #}; #memory 6GB; #set_num_threads(6); #psi4_io.set_default_path(""/home/phy/Desktop/projects/2021/amoeba/test/poltype/scratch/Psi4-methanol""); #for _ in range(1):; # try:; # optimize('hf/3-21G'); # break; # except OptimizationConvergenceError:; # break; # else:; # try:; # set opt_coordinates cartesian; # optimize('hf/3-21G'); # break; # except OptimizationConvergenceError:; # pass; #clean(). optimize(""hf/3-21G"") # segfaults; #optimize(""hf/cc-pvdz"") # 4 iter; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2084#issuecomment-761275679:98,predict,predicting,98,https://psicode.org,https://github.com/psi4/psi4/issues/2084#issuecomment-761275679,1,['predict'],['predicting']
Safety,"Carried forward from [forums](http://forum.psicode.org/t/cfour-outfile-inconsistent-with-cfour-grd/1642). I haven't run this myself, but the output file the reporter gave is from 1.3.2 release, and I don't think the CFOUR driver has been touched since then. @loriab, correct me if I'm wrong. See the following input file:; ```; memory 2 gb. molecule co2 {; C; O 1 1.163; O 1 1.163 2 180; }. set basis aug-cc-pvdz; set CFOUR_ABCDTYPE AOBASIS; set CFOUR_CC_PROGRAM ecc; set cfour_anharmonic VIBROT; set cfour_vibration findif. optimize('c4-ccsd(t)'); ```. Psi will do a sanity check at the end of the computation, that the nuclear repulsion energy harvested from CFOUR output agrees with the same as computed from CFOUR's GRD file. In this case, they disagree. The output harvested quantity is the _undisplaced geometry_, where the GRD harvest is the last displacement to run, which is a _displaced geometry_. Unsurprisingly, the nuclear repulsion energies disagree between the two, and Psi reports a [validation error](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/cfour.py#L597).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1784:568,sanity check,sanity check,568,https://psicode.org,https://github.com/psi4/psi4/issues/1784,1,['sanity check'],['sanity check']
Safety,"Carried forward from [forums](http://forum.psicode.org/t/psi4-crashes-abort-trap-signal-with-no-information/1806/5). The following input file; ```; molecule { ; -1 1; N 1.105000 0.080000 -0.002000; O 0.484000 -0.993000 -0.081000; O 0.484000 1.153000 0.078000; O 2.347000 0.080000 -0.002000; }; set {; g_convergence GAU_LOOSE; geom_maxiter 3; }; memory 700MB; optimize('wb97x/6-31G*'); ```; leads optking to abort the computation on [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/optking.cc#L578). It looks like an error was raised somewhere else, but there's no indication of where.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1924:70,abort,abort-trap-signal-with-no-information,70,https://psicode.org,https://github.com/psi4/psi4/issues/1924,2,['abort'],"['abort', 'abort-trap-signal-with-no-information']"
Safety,Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found ve,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/629:6543,Detect,Detecting,6543,https://psicode.org,https://github.com/psi4/psi4/issues/629,2,['Detect'],['Detecting']
Safety,Cleanup to find_occupation and more sanity checks,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2488:36,sanity check,sanity checks,36,https://psicode.org,https://github.com/psi4/psi4/pull/2488,1,['sanity check'],['sanity checks']
Safety,"Closes #2735 . Previously, `initialize_lebedev` was never called, and in fact was getting optimized out of the module completely upon compilation. When `lebedev_mappping_[]` is then accessed across multiple OpenMP threads, the std::map is empty, and a deadlock can happen where two threads try to access-write (since [key] fills if key is not found), and the slightly slower thread ends up in a Bad State where it thinks there is a value but ends up infinitely looping on the lookup (the program will hang on `[]`). This only happens once every several thousand runs, and only when running with a high degree of parallelism in a system with many atoms. I cannot induce it in captivity, but I have observed it in the wild. Anyway, `[]` accesses on std::map aren't thread-safe if you aren't super-duper sure the map is fully filled for all keys you'd ever look up, which *should* be the case if `initialize_lebedev` was ever called anywhere. But it wasn't, and that was Bad. Now it's called exactly once (thanks, c++11's `call_once`! I do see that this isn't used anywhere else in the code, but I do see mutex is imported in several files, so I don't think I'm adding any new deps here). The hangs should be gone, though I'll have to churn through another several thousand runs to likely be sure (as, again, it is a very rare kind of hang). This will take me a few days to confirm, but given all debugging efforts point to this being the problem, I'm like 99% confident this will do the trick. That said, as far as I can tell, besides one print function the resulting order_ that's assigned to is never *used*. Maybe a candidate to be axed in the future?. ## Description; Actually invokes initialize_lebedev before accessing lebedev_mapping_ to ensure the mapping has values, and prevents a deadlock when running in parallel. ## User API & Changelog headlines; Prevents a nasty, rare hang. ## Dev notes & details; See the main PR body. ## Questions; - [x] What does `order_` actually do in SphericalGrid",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736:770,safe,safe,770,https://psicode.org,https://github.com/psi4/psi4/pull/2736,1,['safe'],['safe']
Safety,"Code updated to use a C++ class as a wrapper to the Python interface. The result is _very _ similar to the old interface, but I was able to eliminate redundant arguments. There's more ripping out of old `libdiis` tech that I could do (`diisentry.cc` is now unused), but I'll wait to hear that the current interface looks good before gutting any more code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2369#issuecomment-986822136:150,redund,redundant,150,https://psicode.org,https://github.com/psi4/psi4/pull/2369#issuecomment-986822136,1,['redund'],['redundant']
Safety,"Compiling psi4 on -O3 with icc 18.0.1 seems to trigger a crash in the compiler. The crash is not observed with the icc 17.0.2 with -O3, nor is it observed with icc 18.0.1 if I turn the optimization flag down to -O1. ```; /u/nyc/mcgibbon/gerrit/psi4-gerrit/psi4/src/psi4/dcft/dcft_gradient_UHF.cc(3903) (col. 72): internal error: 20000_6805. [ 85%] Building CXX object src/psi4/optking/CMakeFiles/optking.dir/opt_data_io.cc.o; compilation aborted for <prefix>/psi4/src/psi4/dcft/dcft_gradient_UHF.cc (code 4); make[5]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/dcft_gradient_UHF.cc.o] Error 4; make[4]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/all] Error 2; make[4]: *** Waiting for unfinished jobs....; ```. With 18.0.1, I can fix the error by turning down the optimization flag for that file in particular by adding the following snippet to psi4/src/psi4/dcft/CMakeLists.txt:; ```; if (CMAKE_CXX_COMPILER_ID STREQUAL ""Intel"" AND; CMAKE_CXX_COMPILER_VERSION VERSION_LESS 18.1 AND; CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 18.0). message(WARNING ""Intel C++ (ICC) 18.0 fails to compile dcft_gradient_UHF.cc with aggressive optimization flags""); set_source_files_properties(dcft_gradient_UHF.cc PROPERTIES; COMPILE_FLAGS -O1); endif (); ```. Has anyone else tried using icc 18.0.1? Is there precedent for adding compiler- and file-specific flags in the CMakeLists? I'm not sure if this is suitable as a PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923:438,abort,aborted,438,https://psicode.org,https://github.com/psi4/psi4/issues/923,1,['abort'],['aborted']
Safety,"Completed. And Psi4 now pulls from evaleev/libint branch v1, rather than psi4/libint. The latter will be made private at some point to avoid confusion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/693#issuecomment-301566033:135,avoid,avoid,135,https://psicode.org,https://github.com/psi4/psi4/issues/693#issuecomment-301566033,1,['avoid'],['avoid']
Safety,"Conda pkgs are 0.2.20, so safe in that respect. Either I need to pay closer attn to omp flags in my p4 compilation against conda openblas or the missing threading flag in the conda openblas recipe is indeed fatal to psi. . Your dft-bench test was definitely run with -n, @hokru? Ctest runs individual tests single threaded.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390186458:26,safe,safe,26,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390186458,1,['safe'],['safe']
Safety,"Crash replicated. Almost certainly what's going on is that a fundamental library (gcc, mkl are the usual suspects) is in conflict between jupyter's `ldd` and psi4's (`envname/lib/pythonx.x/site-packages/psi4/core.so`). The usual hack is to switch around import order between psi4, numpy, matplotlib, etc, until one works. Indeed, if I install psi4 the way you listed into `p4env` and then create _another_ env into which I install jupyter (and same version of python; all from conda-forge) and then adjust the path (`sys.path.append('/path/to/p4env/lib/python3.6/site-packages/`), I can `import psi4` just fine. Next problem is that `psi4.test()` or any molecule specification just fails. This one is new to me, and 20 min hacking did not solve it. One suspicion is that regex is involved, and regex is the big reason psi4 ships with its own gcc (5.2) rather than the longstanding conda default of 4.8. But on the other hand, everything c++ is supposed to be statically linked in to avoid such troubles. So you've found a real problem, and I don't have a ready solution. The medium-term solution is to go with the new compilers that conda is rolling out (7.2). Then psi can rejoin the common gcc track of the rest of the conda ecosystem. Fortunately, I was working on that this week. Copying people who have had related problems. @dsirianni, @j3mdamas, Pascal (hit a `bad_cast` error)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-345402467:983,avoid,avoid,983,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345402467,1,['avoid'],['avoid']
Safety,Cs symmetry is not detected,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2463:19,detect,detected,19,https://psicode.org,https://github.com/psi4/psi4/issues/2463,1,['detect'],['detected']
Safety,"Dear Pis4 developers. I've got in issue when link psi4 binary:. ```; /usr/local/lib/libpython2.7.a(posixmodule.o): In function `posix_tmpnam':; /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7515: warning: the use of `tmpnam_r' is dangerous, better use `mkstemp'; /usr/local/lib/libpython2.7.a(posixmodule.o): In function `posix_tempnam':; /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7462: warning: the use of `tempnam' is dangerous, better use `mkstemp'; /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `boost::python::converter::(anonymous namespace)::slot_rvalue_from_python<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, boost::python::; builtin_converters.cpp:(.text+0x1286): undefined reference to `PyUnicodeUCS4_AsWideChar'; /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `encode_string_unaryfunc':; builtin_converters.cpp:(.text+0x455): undefined reference to `PyUnicodeUCS4_FromEncodedObject'; collect2: error: ld returned 1 exit status; make[2]: *** [bin/psi4] Ошибка 1; make[1]: *** [src/bin/psi4/CMakeFiles/psi4.dir/all] Ошибка 2; make: *** [all] Ошибка 2; ```. I'm running on Ubuntu 14.04 with cmake installed from ppa:george-edison55/cmake-3.x. Since the default version available in 14.04 is boost-1.54, used to compile boost_1_57_0.tar.bz2 that included in distro.; http://packages.ubuntu.com/trusty/libboost-all-dev. My python interpreter support UCS-4. python -c ""import sys; print(sys.maxunicode)""; returns 1114111. python3 -c ""import sys; print(sys.maxunicode)""; returns 1114111. Could you clarify my issue or can I compile Psi4 without puthon support to avoid this issue?; in particular, I only need to generate MOLDEN file from SCF calculations. With respect, Vladimir.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/94:1729,avoid,avoid,1729,https://psicode.org,https://github.com/psi4/psi4/issues/94,1,['avoid'],['avoid']
Safety,"Dear Sebastian, . I really appreciate your hints and helps, but i have to say that after some days of intense testing and checking, it seems to me that unfortunately DMRG is difficult to apply on large molecules (400 atoms) unless full 2-electron integral calculation is avoided. Furthermore i observe that CHEMPS2 becomes very slow once you choose a better basis set (cc-pvtz vs cc-pvdz) . ""The cost reduction is achieved by not performing the total O(n^5) two-electron integral rotation."". How can i achieve this ? By following those hints in your previous answers ? ; I think, avoiding two-electron integral rotations is some thing which should be done in PSI4 rather than in the fcidump plugin modification. Best wishes; Luca",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105440640:271,avoid,avoided,271,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105440640,2,['avoid'],"['avoided', 'avoiding']"
Safety,"Dear Sebastian, ; Thanks a lot for the detailed answer, but the problem with the FCIDUMP file is that i have no idea; how to tell PSI4 to give the final FCIDUMP after the HF calculation for a desired active space, as i see from the test examples provided in CHEMPS2 , it gives automatically a FCIDUMP for 28 orbitals and all 14 electrons of N2 molecule, but i would like to take into account only 8 electrons in 8 orbitals, for instance. . How can i obtain a FCIDUMP for a desired active space using fcidump.cc plugin ???; You mention here : http://sebwouters.github.io/CheMPS2/inoutput.html ; ""The σ-orbitals are kept frozen at the RHF/6-31G level of theory, and the active space consists of 28 RHF/6-31G π-orbitals"" but how did you keep the sigma orbitals frozen ?. This is for example done in molpro by :; {fci,core, 18,occ, 24; dump; }; But unfortunately in molpro it performs a full 2 electron calculation for all basis functions before giving the fcidump, some thing that i would like very much to avoid. . Bests; Luca",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105182036:1004,avoid,avoid,1004,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105182036,1,['avoid'],['avoid']
Safety,"Dear all, . I am trying to compile the latest version of the PSI4 package on a cluster with OpenSuse; however I end up with the following linking error : . Linking CXX shared library core.so; /usr/bin/ld: BFD (GNU Binutils; openSUSE 12.3) 2.23.1 internal error, aborting at ../../bfd/reloc.c line 444 in bfd_get_reloc_size. /usr/bin/ld: Please report this bug. collect2: error: ld returned 1 exit status; make[5]: *** [src/core.so] Error 1; make[5]: *** Deleting file `src/core.so' ; make[4]: *** [src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ; -----------------------------------------------------------------------------------------------------------------------------------------; Any idea how to get rid of it?. Best,; LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/785:262,abort,aborting,262,https://psicode.org,https://github.com/psi4/psi4/issues/785,1,['abort'],['aborting']
Safety,"Definitely. The only roadblock was in handling all of the printing. I used `be_quiet()` and `reopen_outfile()`, which fail during testing in the windows build. Interestingly, these functions aren't used in the code elsewhere, so they seem not to be windows-safe at all. I think a workaround shouldn't be too hard, but suggestions welcome. The printing of each atomic calculation should never be that excessive (since its only unique elements/basis), so simple solution is to just print all of the atomic outputs",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2127#issuecomment-815296254:257,safe,safe,257,https://psicode.org,https://github.com/psi4/psi4/pull/2127#issuecomment-815296254,1,['safe'],['safe']
Safety,Definitions : USE_FCMANGLE_H;SYS_LINUX;HAS_CXX11;HAS_CXX11_FUNC;HAS_CXX11_AUTO;HAS_CXX11_AUTO_RET_TYPE;HAS_CXX11_CONSTEXPR;HAS_CXX11_CSTDINT_H;HAS_CXX11_DECLTYPE;HAS_CXX11_INITIALIZER_LIST;HAS_CXX11_LAMBDA;HAS_CXX11_LONG_LONG;HAS_CXX11_NULLPTR;HAS_CXX11_LIB_REGEX;HAS_CXX11_RVALUE_REFERENCES;HAS_CXX11_SIZEOF_MEMBER;HAS_CXX11_STATIC_ASSERT;HAS_CXX11_VARIADIC_TEMPLATES;HAVE_MKL_BLAS;HAVE_MKL_LAPACK;HAVE_MPI;HAVE_DKH; -- The CXX compiler identification is Intel 15.0.0.20140723; -- The C compiler identification is Intel 15.0.0.20140723; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicc; -- Check for working C compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- The Fortran compiler identification is Intel 15.0.0.20140723; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77; -- Check for working Fortran compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90; -- Checking whether /opt/intel/impi/5.0.1.035/intel64/bin/mpif77 supports Fortran 90 -- yes; -- Fortran ENABLED; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : **restrict**; -- Performing Test ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:12543,Detect,Detecting,12543,https://psicode.org,https://github.com/psi4/psi4/issues/201,2,['Detect'],['Detecting']
Safety,Detect non-operational functionals ahead of time.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/863#issuecomment-345265139:0,Detect,Detect,0,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345265139,1,['Detect'],['Detect']
Safety,Detect what? Libxc 4 has SCAN.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/863#issuecomment-345264267:0,Detect,Detect,0,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345264267,1,['Detect'],['Detect']
Safety,"Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /opt/local/bin/python (found suitable version ""3.6.1"", minimum required is ""2.7"") ; -- Found PythonLibs: /opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib; -- Found Python 3.6:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:1279,Detect,Detecting,1279,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,4,['Detect'],['Detecting']
Safety,"Diazonium, I believe your assessment is correct and I have little to add here unfortunately. While thread safety in the pthread code has been improved recently, OpenMP is still considered the safer option. (Though you could try a pthread build - ideally of the current ""develop"" branch that should soon become the 0.3.0 release - with USE_SIMPLE_THREADED_LEVEL3=1 which should work around at least some of the remaining bugs.) ; Please create issues for any OpenBLAS bugs you find, ideally with some standalone code that makes it easy to reproduce and track down the problem. I am anything but an expert on multithreading, but at least there are powerful debugging tools available now that simply did not exist when K.Goto wrote; the library that OpenBLAS builds upon. ; (Incidentally my own involvement with OpenBLAS came about through dft as well, though in my case it is condensed matter codes like Elk and Wien2k)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390436926:106,safe,safety,106,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390436926,2,['safe'],"['safer', 'safety']"
Safety,"Did you put the sph/cart flag at the top of the basis file? MolSSI's new library does it automatically if you select ""psi4"" format, but it has to be by hand for the old one. It at least runs for me -- output is below for a sanity check. ```; >>> head stage/share/psi4/basis/ano-rcc.gbs; cartesian. !----------------------------------------------------------------------; ! Basis Set Exchange; ! Version v0.7.0; ! https://www.basissetexchange.org; !----------------------------------------------------------------------; ! Basis set: ANO-RCC; ! Description: Full ANO-RCC basis; ! Role: orbital; ```. ```>>> cat toon.out . -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.4a1.dev99 . Git: Rev {cphfconv} bddb364 dirty. R. M. Parrish, L. A. Burns, D. G. A. Smith, A. C. Simmonett,; A. E. DePrince III, E. G. Hohenstein, U. Bozkaya, A. Yu. Sokolov,; R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). Additional Contributions by; P. Kraus, H. Kruse, M. H. Lechner, M. C. Schieber, R. A. Shaw,; A. Alenaizan, R. Galvelis, Z. L. Glick, S. Lehtola, and J. P. Misiewicz. -----------------------------------------------------------------------. Psi4 started on: Monday, 29 April 2019 11:26AM. Process ID: 25534; Host: psinet; PSIDATADIR: /home/psilocaluser/gits/hrw-quaternary/objdir37/stage/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; H; }. set {; scf_type pk; basis ano-rcc; relativistic x2c; reference uhf; }. energy('hf'). --------------------------------------------------------------------------. ***",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:223,sanity check,sanity check,223,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168,1,['sanity check'],['sanity check']
Safety,"Do we need to break down and insist that people specify the python to use; via some kind of flag? It seems that cmake picking up the wrong one is a; problem that just won't go away. And/or perhaps a little test script that; might check the settings and verify that they will work with the user's; PATH?. At the very least, we do certainly need updated documentation on the latest; iteration of the build system, if we don't have it yet. On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; wrote:. > Glad rpath behavior is making more sense, @jgonthier; > https://github.com/jgonthier . Unless all dependencies are isolated; > behind one environment (conda strategy) or each dependency is isolated in; > its own environment (a programming-using-conda strategy, but hard when; > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > path. I regularly have to edit mine to get the right HDF5 linked. As I; > don't know a winning strategy, I think we can't guarantee the built exe/lib; > will run, only that the conda ones will. This does show we need better; > notes on the matter so people can diagnose and correct.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252927823:849,predict,predict,849,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252927823,2,"['predict', 'safe']","['predict', 'safe']"
Safety,"E '<' not supported between instances of 'tuple' and 'int' (type=type_error); ================================================== warnings summary ===================================================; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:599; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:701; `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:698; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:699; `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:702; `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!; ===========================",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542:5190,safe,safe,5190,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542,1,['safe'],['safe']
Safety,"Eco failure is, quite predictably, because it breaks `v2rdm`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2619#issuecomment-1162453607:22,predict,predictably,22,https://psicode.org,https://github.com/psi4/psi4/pull/2619#issuecomment-1162453607,1,['predict'],['predictably']
Safety,"Every time this has happened, the problems have started when I've tried to push changes to the branch from my local git repo to find out that the branch has changed on github. When I pull the changes into my branch, I get conflicts, that I then try to resolve. The end result appears to be a big mess every time. Why is this happening and how can I avoid it??",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1460#issuecomment-452418446:349,avoid,avoid,349,https://psicode.org,https://github.com/psi4/psi4/pull/1460#issuecomment-452418446,1,['avoid'],['avoid']
Safety,"F -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_LIBERD=OFF -DENABLE_JKFACTORY=OFF -DENABLE_GPU_DFCC=OFF -DENABLE_DUMMY_PLUGIN=OFF -DENABLE_PCMSOLVER=OFF -DENABLE_CHEMPS2=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DENABLE_AUTO_BLAS=ON -DENABLE_AUTO_LAPACK=ON -DMKL_FLAG=""-mkl=parallel"" -DMKL_FLAG_SET=ON -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DCMAKE_INSTALL_PREFIX=/mnt/data/users/dm4/vol12/medvedevmg_1708/bin/psi4 -DCMAKE_BUILD_TYPE=release /mnt/data/users/dm4/vol12/medvedevmg_1708/bin/tmp/psi4public-0.3. -- User set explicit MKL flag which is passed to the compiler and linker: -mkl=parallel; -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=gnu++98 -mkl=parallel -openmp -O3 -no-prec-div -DNDEBUG -xHost; -- C compiler flags : -restrict -DRESTRICT=**restrict** -std=c99 -fPIC -mkl=parallel -openmp -O3 -ip -DNDEBUG -xHost; -- Fortran compiler flags: -w -fpp -assume byterecl -DVAR_IFORT -fPIC -nosave -mkl=parallel -openmp -O3 -ip -xHost; -- Libraries : -mkl=parallel; -- Definitions : USE_FCMANGLE_H;SYS_LINUX;HAVE_MKL_BLAS;HAVE_MKL_LAPACK;HAVE_MPI;HAVE_DKH; -- The CXX compiler identification is Intel 13.1.0.20130121; -- The C compiler identification is Intel 13.1.0.20130121; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx; -- Check for working CXX compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicxx -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicc; -- Check for working C compiler: /opt/intel/impi/5.0.1.035/intel64/bin/mpicc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- The Fortran compiler identification ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201:4487,detect,detection,4487,https://psicode.org,https://github.com/psi4/psi4/issues/201,1,['detect'],['detection']
Safety,"FOUND>; lapk.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_; ```; Maybe cmake is looking for libiomp5.so under $MKLROOT (/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl for me), when it is actually is in $MKLROOT/../compiler/lib/intel64/ (or other relevant architecture)?. It looks a lot more promising. Building now... Edit: Build failed at the same point as before during ""Performing configure step for 'psi4-core':""; ```; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; MathOpenMP iomp5 0 ; MathOpenMP iomp5 A _lib-NOTFOUND; MathOpenMP iomp5 B _lib-NOTFOUND; MathOpenMP_LIBRARIES MathOpenMP_LIBRARIES-NOTFOUND; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:99 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package); ```; It looks like OpenMP_CXX_LIBRARY_DIRS doesn't get passed",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396748980:4102,Detect,Detecting,4102,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396748980,2,['Detect'],['Detecting']
Safety,"FYI, I think this has hampered python detection for the conda build. Doing sad things like:. ```; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/bin/python (found version ""2.7.10"") ; -- Found Python: /usr/lib64/libpython2.7.so ; ```. at cmake configure time until I told the conda recipe explicitly where to get its library from:. ```; -DPYTHON_INTERPRETER=${PYTHON} \; + -DPYTHON_LIBRARY=/theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/lib/libpython2.7.so \; ```. Ugly hack but stable for now. Just be aware the Python detection still not ideal.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-134687960:38,detect,detection,38,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-134687960,2,['detect'],['detection']
Safety,"Few more notes:; - external projects currently installed in `install/externals/proj_name`. How about installing them ""on top"" of psi4 so that the external project bins go in `install/bin`, headers go in `install/include/proj_name`, etc. ?; - external projects look to be built as static libs. will want to be able to build and detect as shared libs; - py-side replacement for `psi4_main/create_new_plugin.cc` is checked in. Right now, the cmake variable substitution works equally not at all for C++ and Python versions. Will need to consider how to call in pre-Inversion period.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235532620:327,detect,detect,327,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235532620,1,['detect'],['detect']
Safety,"File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 304, in popen\n ret = {""proc"": subprocess.Popen(args, **popen_kwargs)}\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\subprocess.py"", line 858, in __init__\n self._execute_child(args, executable, preexec_fn, close_fds,\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\subprocess.py"", line 1251, in _execute_child\n args = list2cmdline(args)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\subprocess.py"", line 553, in list2cmdline\n for arg in map(os.fsdecode, seq):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\os.py"", line 818, in fsdecode\n filename = fspath(filename) # Does type-checking of `filename`.\nTypeError: expected str, bytes or os.PathLike object, not NoneType\n\n')); ```; From yml install; ```; Collecting package metadata (repodata.json): done; Solving environment: |; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; Examining python=3.9: 43%|██████████████████████████▏ | 6/14 [00:19<00:29, 3.66s/it]|Examining conflict for geometric torsiondrive matplotlib qcengine python qcelemental psi4: 57%|▌| 8/14 [00:22<00:10, \Examining conflict for geometric torsiondrive matplotlib qcengine python qcelemental gau2grid psi4: : 19it [01:02, 3.49Examining conflict for geometric torsiondrive matplotlib qcengine python qcelemental gau2grid psi4: : 20it [01:02, 3.71Examining conflict for matplotlib python: : 20it [01:07, 3.71s/it] failed -; Solving environment: /; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; Examining python=3.9: 43%|██████████████████████████▏ | 6/14 [00:20<00:30, 3.87s/it]|Examining libblas[build=*mkl]: 64%|█████████████████████████████████▍ | 9/14 [00:30<00:24, 4.99s/it]|Examining conflict for geometric torsiondrive: 43%|███████████████▍ | 6/14 [00:16<00:10, 1.28s/it]\Examining conflict for matplotlib psi4 geometric tor",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:3595,abort,abort,3595,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020,1,['abort'],['abort']
Safety,FindPythonInterp/FindPythonLibs/FindPythonLibsNew should never be called after the switch in https://github.com/psi4/psi4/issues/3020#issuecomment-1667105438 to `find_package(Python`. Can you determine what's still calling the old detection? One guess is that not just top-level/CM but top-level/psi4/CM needs the adjustment and the call has to come before pb11 detection https://github.com/psi4/psi4/blob/b0e621fc287b60010275fbe22f7e9337e855e1df/psi4/CMakeLists.txt#L60 .,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1676479960:231,detect,detection,231,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676479960,2,['detect'],['detection']
Safety,"FindPythonLibsNew should be removed from the repo -- I guess we left it as a transition. Since https://github.com/psi4/psi4/pull/2048 for v1.4, it's been replaced by the cmake native detection. Is it feasible to apply that to v1.3.2 as a patch? If a fresh edit is easier, switching `find_package(3.7 PythonLibsNew)` for `find_package(Python 3.7 EXACT COMPONENTS Interpreter Development REQUIRED)` in two places (top-level CM and psi4/CM) and replacing all `PYTHON_` with `Python_` in CM files should do most of the trick. Good news is that there's no other active distutils in master, so there should be a workaround to anything else from 1.3.2 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1667105438:183,detect,detection,183,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1667105438,1,['detect'],['detection']
Safety,"First, you've `s/PYTHON_EXECUTABLE/Python_EXECUTABLE/g cmake/FindPythonModule.cmake` already probably. maybe patch it with to get more info out of the error. ```; diff --git a/cmake/FindPythonModule.cmake b/cmake/FindPythonModule.cmake; index 2b6f93172..b2061b8a6 100644; --- a/cmake/FindPythonModule.cmake; +++ b/cmake/FindPythonModule.cmake; @@ -77,8 +77,10 @@ macro(find_python_module module); print(parse_version('${${module}_VERSION}') ${_op} parse_version('${${module}_tgtver}'))""; RESULT_VARIABLE _${module}_verenuf_status; OUTPUT_VARIABLE _${module}_verenuf; - ERROR_QUIET; + #ERROR_QUIET; OUTPUT_STRIP_TRAILING_WHITESPACE); + message(""_${module}_verenuf_status ${_${module}_verenuf_status}""); + message(""_${module}_verenuf ${_${module}_verenuf}""); if(NOT ${_${module}_verenuf_status}); if(${_${module}_verenuf} STREQUAL ""True""); set(_${module}_requested_version_found ""${Python_EXECUTABLE}""); ```. and kill off the `QUIET` in external/upstream/qcelemental/CM. ```; if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); include(FindPythonModule); find_python_module(qcelemental ATLEAST 0.24.0 QUIET); endif(); ```. But really, assuming you're detecting a qcel in path, the only part of external/upstream/qcelemental/CM that further cmake cares about is ` add_library(qcelemental_external INTERFACE) # dummy`, so you could set that and bypass the FindPythonModule.cmake entirely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1668622213:1150,detect,detecting,1150,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668622213,1,['detect'],['detecting']
Safety,Fix Numpy Python detection in Windows for new NumPy,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2624:17,detect,detection,17,https://psicode.org,https://github.com/psi4/psi4/pull/2624,1,['detect'],['detection']
Safety,"Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to these variables.; - [x] Added `psi4 --psiapi-path` command-line argument. This prints the bash commands you need to execute to set up python interp and pythonpath in your shell to `python -c ""import psi4""`; - [x] Psi4 molecule strings passed to `psi4.geometry()` no longer balk at python-style comments, as these are filtered out.; - [x] Added a `psi4.clean_options()` fn (alongside `psi4.clean()` and `psi4.clean_variables()`) to reset the `P::e.options` object to its initial state. This is necessary for independent tests in pytest and will probably be useful for psiapi sessions.; - [x] Add pytest smoke tests for psi4 itself and psi4+addons (addon tests skip if addon not enabled or detectable). From source, `cd tests/pytest && python -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627:1790,detect,detection,1790,https://psicode.org,https://github.com/psi4/psi4/pull/627,2,['detect'],"['detect', 'detection']"
Safety,"Fixes #2493 . ## Description; <!-- Provide a brief description of the PR's purpose here. -->. For memory safety, the integrals in libmints should be returned as unique_ptrs rather than raw pointers. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] All integrals in libmints now return a unique_ptr rather than a raw pointer; - [x] Call sites refactored to match; ## Questions; - [x] Are my refactors to the call sites correct? Many are just an immediate release of the unique_pointer, with the assumption that the memory management / pointer deletion occurs elsewhere; - [x] Should iterators eg `CartesianIter` also return unique_ptrs?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2775:105,safe,safety,105,https://psicode.org,https://github.com/psi4/psi4/pull/2775,1,['safe'],['safety']
Safety,"For a simple S2 molecule I get a failure to converge (in the default 100 iterations at least) when using XC functionals (tested with PBE and BP86), but not with hybrid (tested with PBE0). [S2_PBE.log](https://github.com/psi4/psi4/files/2131171/S2_PBE.log). sample input file:; ```; molecule mol {; 0 1; S 0.0000000000 0.0000000000 -0.9555689065; S 0.0000000000 0.0000000000 0.9555689065; }. mol.update_geometry(); mol.symmetrize(0.01). set scf_type df; set basis pcsseg-1. set DYNAMIC_LEVEL 1; #E, wfn = optimize('PBE0',return_wfn=True) # works; E, wfn = optimize('PBE',return_wfn=True) # fails; ```; Any ideas to why this happens, and what I can do to help avoid this problem?. (also tested on v1.2-rc3, same issue)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1054:658,avoid,avoid,658,https://psicode.org,https://github.com/psi4/psi4/issues/1054,1,['avoid'],['avoid']
Safety,For anyone else running into this. Having some packages from `-c conda-forge` and some from the main channel can lead to this issue. I had -c conda-forge set as a preferred channel and had to turn it off to resolve this issue. Create a new environment in conda and install psi4 separately to avoid relying on other packages from -c conda-forge.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2294#issuecomment-1054328789:292,avoid,avoid,292,https://psicode.org,https://github.com/psi4/psi4/issues/2294#issuecomment-1054328789,1,['avoid'],['avoid']
Safety,"For history, back when Python detection in cmake was very broken (exe and lib weren't matching pair), numpy made their own alternate find python cmake file and pybind11 used numpy's and psi4 used pybind11's. I hear cmake has totally rewritten theirs, and pybind11 is now amenable to either (https://github.com/pybind/pybind11/pull/2370, I think). So, yes, upgrade now reasonable. Note that psi, in turn, installs the python finder module so that plugins can use it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2060#issuecomment-743297163:30,detect,detection,30,https://psicode.org,https://github.com/psi4/psi4/issues/2060#issuecomment-743297163,1,['detect'],['detection']
Safety,"For methods (or methods in certain circumstances, say reference or conv/df) only available through an external add-on, do we want those opt-in? That is, certainly the external must be (1) installed and detectable. But do we also want to (2) require the user to `set qc_module=mrcc|adcc|chemps2` ? CheMPS2 has a long history of not requiring (2). ADCC has a shorter history of being the preferred backend and automatic choice, if present. I just switched MRCC syntax in #2731 to yes require (2). That was in keeping with the user opt-ing in via `energy(""mrccsd"")`. I can go either way, and I guess I'm now leaning toward not requiring (2) and adjusting MRCC accordingly. But it seems like something to discuss and settle on a consistent treatment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2737#issuecomment-1268969031:202,detect,detectable,202,https://psicode.org,https://github.com/psi4/psi4/pull/2737#issuecomment-1268969031,1,['detect'],['detectable']
Safety,"For the M11, can you try removing the whole `x_hf` subdirectory? The long range part should be just 0.572. If removing that helps, then the sanity checking function needs updating - it shouldn't allow two ""use_libxc"" parameters through.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802#issuecomment-383211336:140,sanity check,sanity checking,140,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383211336,1,['sanity check'],['sanity checking']
Safety,"Full overview of default cutoffs and generating python file can be found here: https://gist.github.com/hokru/546307545c7bf0d96de5cf867e036cae. Currently the best way forward, I think, is leaving density screening **off** by default to avoid setting too tight thresholds for certain components leading to unintuitive behaviour. ; I will update the PR accordingly unless another direction is wanted.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1860#issuecomment-616657858:235,avoid,avoid,235,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-616657858,1,['avoid'],['avoid']
Safety,"Generally psi4 is supposed to catch those and still finish gracefully, and with upcoming psi4 v1.4 one gets also more visible error messages (see PR https://github.com/psi4/psi4/pull/1862). But here psi4 is aborted which is indeed not user friendly.; I dont know the exceptions machinery well enough to say why but it happens also in the current developer version.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-760128241:207,abort,aborted,207,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-760128241,1,['abort'],['aborted']
Safety,"Git-hooks is probably a non-starter, so +1 for avoiding that. Another +1 for clang-format, I use it internally quite a bit with Google style and 4 spaces. Im kind of on the fence about this. A few notes:. Pros:; - Completely uniform style. Cons:; - We are constantly avoided errors, the `# pyflakes` and `# noqa` messages are messier than most of our python errors IMO.; - Plenty of times when we want something other than pep8 formatting (e.g. `VARH`).; - Completely uniform style (see previous point).; - If we override a single error in pyflakes, pyflakes will continue to fail for all further commits. It would become very easy just to ignore this test. Dont get me wrong, we should do periodic style cleanups. This is needed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/530#issuecomment-263272403:47,avoid,avoiding,47,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263272403,2,['avoid'],"['avoided', 'avoiding']"
Safety,"Github also complicates things regarding private/public. It doesn’t allow mixing public and private branches in a repository. And it doesn’t allow you to make private a fork of a public repo, though there does seem to be an alternative: https://help.github.com/articles/duplicating-a-repository/ https://help.github.com/articles/duplicating-a-repository/ . And in the beginning we didn’t want everyone to have to pay for storing private repositories if they wanted private forks (moot now since github offers private storage for scientists). That’s more of the history of how the current scheme came to be. I’m open to better schemes, but I think most of our problems can be solved by an automated public/private master sync when safe. Lori. > On May 3, 2015, at 12:18 PM, andysim notifications@github.com wrote:; > ; > It’s not really an SVN/CVS thing, IMHO. We were using Git for a very long time before making the public/private split and the core developers are extremely familiar with Git’s distributed nature. The old way of developing Psi was to have a private repo (which used to be CVS, then SVN, then Git/SVN, before switching completely to Git) and to only release static tarballs every now and then. Lori touched on the reason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them.; > ; > The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working toget",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/88#issuecomment-98501924:730,safe,safe,730,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98501924,1,['safe'],['safe']
Safety,"Glad rpath behavior is making more sense, @jgonthier . Unless all dependencies are isolated behind one environment (conda strategy) or each dependency is isolated in its own environment (a programming-using-conda strategy, but hard when `/usr/` involved), it can be impossible for cmake to predict a safe `rpath` path. I regularly have to edit mine to get the right HDF5 linked. As I don't know a winning strategy, I think we can't guarantee the built exe/lib will run, only that the conda ones will. This does show we need better notes on the matter so people can diagnose and correct.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252908695:290,predict,predict,290,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252908695,2,"['predict', 'safe']","['predict', 'safe']"
Safety,"Good catch. Yes, the ambit plugin wasn't even doing anything with ambit until c274b18e825bff404cd828c39fa3f840be6d9579. Please switch the check from `AMBIT_FOUND` to `ENABLE_AMBIT`, as that will catch both detect-external and build-internal ambits.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/436#issuecomment-230487517:206,detect,detect-external,206,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230487517,1,['detect'],['detect-external']
Safety,"Good detective work!. Fixing this issue wouldn't require `freeze_core $n` support, only changing the default behavior when the core level isn't the same as in the neutral species. I'll suggest this as a possible new developer issue at the conference today. _That said_, it would also be really nice to be able to set the core level for individual atoms, rather than going through the clunky and somewhat obscure `num_frozen_docc` and `frozen_docc`. We have a project in my research group that requires correlating an extra level of electrons just for neutral calcium.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1271#issuecomment-437576328:5,detect,detective,5,https://psicode.org,https://github.com/psi4/psi4/issues/1271#issuecomment-437576328,1,['detect'],['detective']
Safety,"Good detective work, @JonathonMisiewicz. @andysim, @jturney, sharing `CoordEntry`s between `atoms_` and `full_atoms_` sounds like it could cause trouble and could undermine `update_geometry` as the one-stop-shop for Molecule self-consistency. Do you anticipate problems with this sol'n?. @JonathonMisiewicz, which `reinterpret_coordentry(False)` in the driver for findif did you have in mind as necessitating this work-around?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1108#issuecomment-408879404:5,detect,detective,5,https://psicode.org,https://github.com/psi4/psi4/pull/1108#issuecomment-408879404,1,['detect'],['detective']
Safety,"Good idea, @loriab. We're OK for now, because the problems (apart from Boost detection) seem to be fixed, but I suspect this isn't the last bug we'll ever deal with...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235151364:77,detect,detection,77,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235151364,1,['detect'],['detection']
Safety,Good move fixing the `PYTHON_LIBRARY` CMake variable; mixed detection of Python interpreter/library/headers is definitely a scourge of Psi4 compilation. But I set that variable all the time and don't get an actual link to `libpython`. So I think it is just the version you're building is before we stopped linking explicitly.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-275141079:60,detect,detection,60,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275141079,1,['detect'],['detection']
Safety,"Good point -- if we had one guess vector per irrep, that should be; enough... but I'm supposing our code doesn't actually construct guess; vectors with a specified symmetry. In which case we would probably need; ~nirrep * 2 or 3 to be safer. On Tue, Aug 14, 2018 at 5:52 AM Susi Lehtola <notifications@github.com>; wrote:. > Is that enough, or should it be nirrep times a reasonable minimum number?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1125#issuecomment-412818109>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdvJZU_E0PhuDamD3Fp8FFetLUrTdks5uQp3ggaJpZM4VwqTR>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1125#issuecomment-412880582:235,safe,safer,235,https://psicode.org,https://github.com/psi4/psi4/issues/1125#issuecomment-412880582,1,['safe'],['safer']
Safety,"Good to know on the `CMAKE_PREFIX_PATH` for python detection. That should probably become the preferred way to detect Anaconda python. To have multiple items in that var, use something like `-DCMAKE_PREFIX_PATH=""${PFXE}/install-libefp-so;${PFXE}/install-libint-6-so;${PFXE}/install-pcmsolver""`, in case you hadn't already worked that out. Quite right about 2.7. At some point I stopped adapting my dictionary comprehensions for the 2.6 folks. I'm guessing it will build/link, but you'd get driver errors at runtime. Should be detecting a 2.7 minimum in cmake. One thing we want to do really soon is allow/switch to 3.5, switch to pythonlibsnew cmake module, and probably to offload python library detection to pybind11, so don't spend too much time playing around with the current python cmake, except for your own edification. Do feel free to switch that line you linked to to 2.7 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249720030:51,detect,detection,51,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249720030,4,['detect'],"['detect', 'detecting', 'detection']"
Safety,"Good to know the cause. In the cmake rewrite, psi4 and all add-ons are getting safeguards that catch attempts to build in place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/460#issuecomment-239645645:79,safe,safeguards,79,https://psicode.org,https://github.com/psi4/psi4/issues/460#issuecomment-239645645,1,['safe'],['safeguards']
Safety,"Great, glad it's working. I'll get your OpenBLAS patch added in, and it'll make its way back upstream to autocmake one day. Your `ldd` looks good. Only thing strikes me as odd is `libpython.so`. We stopped actually linking to this and now only require the interpreter, not the library. But maybe you're compiling 1.1a1 and the change happened afterward. In any case, when you update someday, don't be alarmed if that goes away. On the `#!/cluster/apps/python/2.7.12/x86_64/bin/python`, we go back and forth on whether to embed the specific compile-time version or a more generic `/usr/bin/env python2` or `usr/bin/env python3`. Advantages of the former: (a) user can be oblivious to what or if python in path at all, (b) conda does it this way. Advantages of the latter: (a) it's what Linux users expect to be happening, (b) avoids trouble of psi4 still using compile environment if you have separate compile and run-time environments. We've stuck with the former since it's friendlier to the inexperienced. Go right ahead and edit that line to a `/usr/bin/env` if it's more suited to your cluster, but I do recommend doing `python2` since the python2/3 headers are used during the build. By the way, on testing, there's `share/psi4/samples/*/test.in` files that'll print `SUCCESS`/`FAILED` to the screen and are handy for testing (or run `ctest -L quick -j4`)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-275136191:825,avoid,avoids,825,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275136191,1,['avoid'],['avoids']
Safety,"Hard to say. Psi links omp libraries based on whether it finds a library with ""mkl"" in the name. Flexiblas could cover that up and apply its own gomp here: https://gitlab.mpi-magdeburg.mpg.de/software/flexiblas-release/-/blob/master/cmake/FindMklOpenMP.cmake#L12-27 . I'm thinking Flexiblas will be most common in Fedora for now. Our conda builds mostly hard-code the blas libraries list to bypass the math detection cmake. I'd feel a little better if flexiblas was behind MKL in priority since MKL is our special case, but I don't know of any definite disruptions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2246#issuecomment-880252991:407,detect,detection,407,https://psicode.org,https://github.com/psi4/psi4/pull/2246#issuecomment-880252991,1,['detect'],['detection']
Safety,Have you been using a Windows target path for all the externals find_project() detection in stage? 3rd line in:. ```; <prefix>/ (W); <prefix>/(cmake|CMake)/ (W); <prefix>/<name>*/ (W); <prefix>/<name>*/(cmake|CMake)/ (W); <prefix>/(lib/<arch>|lib|share)/cmake/<name>*/ (U); <prefix>/(lib/<arch>|lib|share)/<name>*/ (U); <prefix>/(lib/<arch>|lib|share)/<name>*/(cmake|CMake)/ (U); <prefix>/<name>.framework/Resources/ (A); <prefix>/<name>.framework/Resources/CMake/ (A); <prefix>/<name>.framework/Versions/*/Resources/ (A); <prefix>/<name>.framework/Versions/*/Resources/CMake/ (A); <prefix>/<name>.app/Contents/Resources/ (A); <prefix>/<name>.app/Contents/Resources/CMake/ (A); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238169003:79,detect,detection,79,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238169003,1,['detect'],['detection']
Safety,"Haven't checked, but that's a redundant input, isn't it? `basis cc-pvdz` + `relativistic x2c` triggers the primary basis to decontract. That said, the answer in the docs for the x2c example is known wrong. Were you going to address that, @WDerricotte?. Let me know if I'm mistaken about any of this, as I don't run relativistic regularly. And if there's something that _should_ work, please make a test case of it so it will continue to work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/662#issuecomment-288812442:30,redund,redundant,30,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288812442,1,['redund'],['redundant']
Safety,"Hello!. I'm trying to compile Psi4 on my laptop and I have a problem. As described here [https://github.com/psi4/psi4/wiki/3_Building#builddetailed], I've run setup script, then I've entered $top/objdir and typed 'make -j8'. Compilation was successful, but I've got a linking error. Operating system is ArchLinux 4.2.5. I have Python2.7 and Python3.5 both installed on my computer, LAPACK, BLAS, boost, perl are also installed. It seems like ld cannot link psi4 with boost::regex. When I didn't specified usage of Python2 in the setup script command line, there were linking errors due to different versions of python in Psi (python3) and python in boost (python2). Without specifying '--chemps2 off' the compilation also fails to start. To help setup script in detecting boost libraries on my computer, I've tried to run setup with '--boost-incdir=/usr/include --boost-libdir=/usr/lib' options. I've also tried to find in automatically generated makefiles the invocation of ld (I wanted to add option '-lboost_regex' to linker), but I have not found.; Could you tell me, please, what is wrong? How can I fix this problem?. Thank you very much!; Alexander. Output of the 'setup' script:; [piton@avo psi4]$ ./setup --chemps2 off --python=/usr/bin/python2; cmake -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DENABLE_MPI=OFF -DENABLE_SGI_MPT=OFF -DENABLE_OMP=ON -DENABLE_VECTORIZATION=OFF -DENABLE_CSR=OFF -DENABLE_SCALAPACK=OFF -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_CHEMPS2=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DPYTHON_INTERPRETER=/usr/bin/python2 -DCMAKE_INSTALL_PREFIX=/usr/local/psi4 -DCMAKE_BUILD_TYPE=release /home/piton/gitdir/psi4. -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused; -- C compiler flags : -std=c99 -DRESTRICT=**restrict** -DFUNDERSCORE=1 -fPIC -fopenmp -O3",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/312:762,detect,detecting,762,https://psicode.org,https://github.com/psi4/psi4/issues/312,1,['detect'],['detecting']
Safety,"Hello, . When building psi4 from source and python development packages are not installed compilation fails (Linux Fedora). Once I installed python-dev all complete successfully.; The complaint from source files was along the lines. #include<Pyhon.h> not found and then aborts during compilation,. Ideally (IMO) cmake should check during the configuration phase if all relevant and required package are installed and abort if not. Perhaps there are more dependencies, but I may already have had them already installed. . I no longer have the build machine to replicate all the steps, but I suspect amending the root cmake adding find_package with python-dev as REQUIRED (or perhaps via pkg_config) ; and abort immediately during the cmake configuration phase if not found, not halfway through the compilation when running make. Perhaps this will also help. https://cmake.org/cmake/help/latest/module/FindPython.html. Cheers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2060:270,abort,aborts,270,https://psicode.org,https://github.com/psi4/psi4/issues/2060,3,['abort'],"['abort', 'aborts']"
Safety,"Hello,. We have developed software around psi4 to perform potential energy scans. We submit psi4 jobs to our cluster. Our cluster architecture is allocated where each node has 64 cores with each core having 1 thread enabled. My psi4 is installed pythonically. . When I submit jobs I request how many predicted cores I need:. ```bash; -pe smp 64; ```. Initially, when I submitted the jobs, I would pass this flag into `psi4.set_num_threads` but since each core has 1 thread it only used 1 the whole scan. Which would not work for our purpose, it's too slow. . When reading the documentation I can set the OMP and MKL flags prior to running the script. ```bash; export MKL_NUM_THREADS=48; export OMP_NUM_THREADS=48; ```. I saw that psi4 started spreading the loads across the cores but it looks like there are spikes where it clocks over the 48 requested cores that I thought is what tell psi4 what is available to it. . We record our results on ganglia on the performance and here are the screenshots down below:. ![n131](https://user-images.githubusercontent.com/11812946/195706024-72bf740f-be03-4348-8a08-8f7e5d90178c.png). So my question is how do I control pythonically psi4, it's allocation to cores, and set the limit where it doesn't spike a node. If that makes sense?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2747:300,predict,predicted,300,https://psicode.org,https://github.com/psi4/psi4/issues/2747,1,['predict'],['predicted']
Safety,"Hello. I was trying to build Psi4 onto a cluster and I encountered this error:. ```; $psisource/src/lib/libmints/oeprop.h(116): error: data member initializer is not allowed; int max_noon_ = 3;. compilation aborted for /work/kimt33/sources/psi4/src/lib/libmints/local.cc (code 2); make[2]: *** [src/lib/libmints/CMakeFiles/mints.dir/local.cc.o] Error 2; make[1]: *** [src/lib/libmints/CMakeFiles/mints.dir/all] Error 2; make: *** [all] Error 2; ```. I was told by my Linux guru to try different compilers and libraries in case that the code is incompatible with my system. I was building using Intel compilers 12.1.3, mkl 10.3.9, openmpi 1.6.2, cmake 3.3.2, python 2.7.8, and boost 1.57.0. I'm not too sure what the error means, but maybe this is a bug. Let me know if you'd like more information. Thanks,; David",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/188:207,abort,aborted,207,https://psicode.org,https://github.com/psi4/psi4/issues/188,1,['abort'],['aborted']
Safety,"Here, I kind of feel like for the returned `jobrec` the dispersion energy is the correct thing for the current energy. I would hazard that this is an issue in reintegration of this energy down the line.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1470#issuecomment-455797642:127,hazard,hazard,127,https://psicode.org,https://github.com/psi4/psi4/pull/1470#issuecomment-455797642,1,['hazard'],['hazard']
Safety,"Hi @loriab,. I promise I will find a consolidation way to reduce the source code as much as possible when I find a free time to work on it. Presently, I am more focused on the implementation and adding some new features to DFOCC. Even If we suppose that there are some redundant codes in DFOCC, it is a not big problem. It may just take a few more minutes of building time and a slightly additional storage. Further, I think the relatively large body of DFOCC w.r.t. some other modules is understandable since DFOCC includes many post-HF methods (standard and OO) including energies and gradients, and most of them are implemented for RHF and UHF refs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/382#issuecomment-221381893:269,redund,redundant,269,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-221381893,1,['redund'],['redundant']
Safety,"Hi @msaitow, I don't believe we ever corresponded directly back when you were adding ADC to Psi4, but I did want to thank you on behalf of all the Psi4 developers for the longstanding functionality. I think your contribution of the ADC module was one of the first prompts to this community that we could develop software in a delocalized fashion and that the early Psi4 codebase could be understood and be a good development platform. There have been a few issues detected with ADC and a capable replacement in ADCC, so I wanted to let you know that we're removing the ADC module with #2737. The code will still be available in https://github.com/psi4/psi4attic and in any version of Psi4 through v1.6.1 . Thanks again!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1033#issuecomment-1273741984:464,detect,detected,464,https://psicode.org,https://github.com/psi4/psi4/issues/1033#issuecomment-1273741984,1,['detect'],['detected']
Safety,"Hi @susilehtola, I've been following Libxc v5.1 https://gitlab.com/libxc/libxc/-/issues/186 with interest. When I compiled this branch (after rebase; including your fixes from the spring, thanks!) in late December against the the Libxc 5.0 branch, I got about the same Psi4 test results as recorded above -- lots of `Matrix::power: C_DSYEV failed`. However, when I compile this branch against the new Libxc 5.1 hotfix branch, I don't even get that far. After disabling OpenMP, I get segfaults (dft-psivar):; ```; (gdb) bt; #0 0x00007ffff78351d7 in raise () from /lib64/libc.so.6; #1 0x00007ffff78368c8 in abort () from /lib64/libc.so.6; #2 0x00007ffff782e146 in __assert_fail_base () from /lib64/libc.so.6; #3 0x00007ffff782e1f2 in __assert_fail () from /lib64/libc.so.6; #4 0x00007fffed70db12 in xc_mix_func (func=func@entry=0x555556ca7500, np=np@entry=255, rho=rho@entry=0x555556e575c0, sigma=sigma@entry=0x555556ccda80, lapl=lapl@entry=0x0, tau=tau@entry=0x0, zk=0x555556771300, vrho=0x55555e164460, vsigma=0x555556c12720, vlapl=0x0, vtau=0x0, v2rho2=0x0, v2rhosigma=0x0, v2rholapl=0x0, v2rhotau=0x0, v2sigma2=0x0, ; v2sigmalapl=0x0, v2sigmatau=0x0, v2lapl2=0x0, v2lapltau=0x0, v2tau2=0x0, v3rho3=0x0, v3rho2sigma=0x0, v3rho2lapl=0x0, v3rho2tau=0x0, v3rhosigma2=0x0, v3rhosigmalapl=0x0, v3rhosigmatau=0x0, v3rholapl2=0x0, v3rholapltau=0x0, v3rhotau2=0x0, v3sigma3=0x0, v3sigma2lapl=0x0, v3sigma2tau=0x0, v3sigmalapl2=0x0, v3sigmalapltau=0x0, v3sigmatau2=0x0, ; v3lapl3=0x0, v3lapl2tau=0x0, v3lapltau2=0x0, v3tau3=0x0, v4rho4=0x0, v4rho3sigma=0x0, v4rho3lapl=0x0, v4rho3tau=0x0, v4rho2sigma2=0x0, v4rho2sigmalapl=0x0, v4rho2sigmatau=0x0, v4rho2lapl2=0x0, v4rho2lapltau=0x0, v4rho2tau2=0x0, v4rhosigma3=0x0, v4rhosigma2lapl=0x0, v4rhosigma2tau=0x0, v4rhosigmalapl2=0x0, v4rhosigmalapltau=0x0, ; v4rhosigmatau2=0x0, v4rholapl3=0x0, v4rholapl2tau=0x0, v4rholapltau2=0x0, v4rhotau3=0x0, v4sigma4=0x0, v4sigma3lapl=0x0, v4sigma3tau=0x0, v4sigma2lapl2=0x0, v4sigma2lapltau=0x0, v4sigma2tau2=0x0, v4sigmala",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754391084:605,abort,abort,605,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754391084,1,['abort'],['abort']
Safety,"Hi Lori,. In one of the functions, ccsd_WabefT2_cd(), I use CD factors for (ab|cd) integrals while for all the other 4-index integrals DF factors are used. In the second function, ccsd_WabefT2(), I use only DF factors for all 4-index integrals. Further, the explicit form of W_abef tensors are different for each functions. Hence, although both functions looks repeating each other, they are not in fact. At the theoretical point of view, there are significant differences between them. Hence, I prefer to keep them separate. However, it is possible to merge them. But in that case I will need if-else blocks at several places. Of course, I create common functions if I need something repeatedly. However, if I see theoretically significant difference between two functions, then I prefer separate functions. For example, instead of merged CCD and CCSD codes, I prefer to keep them separate, which looks me better organised. Alternatively, it is possible to merge all MP2, MP3, MP2.5, LCCD, and CCD into CCSD code with many if-else blocks or switch-case blocks. For each different method creating different functions appears to me more systematic and better organised. . I agree with you about avoiding repetitive codes for the sake of maintenance and build time. Presently, I am busy with CCSD(T) gradients. When I get some free time I will try to reduce repetitive codes if there are any, except for the similarities between high-order and lower-order methods, such as CCSD and MP3. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/382#issuecomment-220426701:1194,avoid,avoiding,1194,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-220426701,1,['avoid'],['avoiding']
Safety,"Hi Luca,. It might not be the most readable code, but lines 635-660 of https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc define different orbital spaces to perform transformations in. Also: If you really want to keep orbitals doubly occupied, it is better to take Coulomb and exchange contributions into account in a different way. Typically:; 1. Calculate the 1-RDM of docc orbitals in MO space (diagonal matrix with 2's and 0's).; 2. Rotate the 1-RDM to AO space with the orbital coefficients; 3. Contract the 1-RDM in AO space with the 2-electron integrals in AO space to the JK contribution of the Fock operator in the AO space; 4. Rotate the JK contribution in AO space to MO space with the orbital coefficients. This is done to avoid rotation of the 2-electron integrals from the AO space to the docc MO space. What I described above is implemented in the routines; 1. buildQmatOCC - https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L219; 2. buildJK - https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L153. If you want a FCIDUMP file for an active space, I think the easiest would be to strip off the DMRG calculation from the dmrgscf.cc plugin, and copy paste the FCIDUMP print statements from the fcidump.cc plugin. The active space CASCI/DMRGCI Hamiltonian can be found in the HamDMRG object just AFTER line 778: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L778. And the localized active space CASCI/DMRGCI Hamiltonian can be found in the HamDMRG object just AFTER line 811: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L811, if you specified ""LOC"" as the active space type. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105167250:767,avoid,avoid,767,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105167250,1,['avoid'],['avoid']
Safety,"Hi Rollin,. Yes, some tips in the manual about difficult optimizations would be helpful!. David. On Tue, Aug 4, 2015 at 9:02 PM, Rollin King notifications@github.com; wrote:. > optking was aborting prematurely. I just pushed the fix to the problem.; > For this case I found consecutive_backsteps = 2 [or more], as well as; > dynamic_level = 1 to now be helpful. (Don't use both at once as that is; > somewhat redundant.) Sometime I will type up some tips on problematic; > optimizations. But now optking will at least move you substantially closer; > to the minimum. Though one may always have to restart an optimization,; > these options will minimize the manual effort necessary.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/153#issuecomment-127808983.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153#issuecomment-128100571:189,abort,aborting,189,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-128100571,2,"['abort', 'redund']","['aborting', 'redundant']"
Safety,"Hi all, I added integral hashing to the direct JK class for separate J and K matrix builds, to avoid doing redundant, expensive ERI computations when building linK and then building J. I also reran all the C tests (all passing).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-981225085:95,avoid,avoid,95,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-981225085,2,"['avoid', 'redund']","['avoid', 'redundant']"
Safety,"Hi all,. I am trying Psi4 4.0.0-beta4 today, but encountered a problem when parsing input and fetching corresponding basis set info. Here is a sample input file,; # =======================; # ! sample input. memory 500 mb. molecule test {; Li 0.000 0.000 0.000; }. set reference uhf; set globals = {; scf_type direct; basis 6-31G; e_convergence 10; }. this_energy = energy('scf'); # =======================. running with Psi 4.0.0-beta4 on Linux, compiled with intel composer xe 2013 (x86-64). The error message is: ; # =======================. Traceback (most recent call last):; File ""<string>"", line 36, in <module>; File ""/home/ren/soft/Psi4/share/psi/python/driver.py"", line 526, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 489, in run_scf; scf_helper(name, **kwargs); File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 707, in scf_helper; e_scf = PsiMod.scf(precallback, postcallback); RuntimeError: sanity check failed! Gaussian94BasisSetParser::parser: Unable to find the basis set for LI; file: /home/ren/soft/psi4.0b4/src/lib/libmints/basisset_parser.cc; line: 339; # =======================. Is it a but or am I wrong anywhere?; I appreciate any help and suggestions,; Hao",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/7:992,sanity check,sanity check,992,https://psicode.org,https://github.com/psi4/psi4/issues/7,1,['sanity check'],['sanity check']
Safety,"Hi all,. I've tried to build psi4-0.5 with the intel compiler but it fails. Config:. ```; CXX=icpc CC=icc cmake .. -DENABLE_PLUGINS=ON -DENABLE_CHEMPS2=ON; -- The CXX compiler identification is Intel 16.0.0.20150815; -- The C compiler identification is Intel 16.0.0.20150815; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2016.0.109/linux/bin/intel64/icpc; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2016.0.109/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2016.0.109/linux/bin/intel64/icc; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2016.0.109/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl; -- Found BLAS: MKL (-Wl,--start-group;/opt/intel/compilers_an",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262:498,Detect,Detecting,498,https://psicode.org,https://github.com/psi4/psi4/issues/262,2,['Detect'],['Detecting']
Safety,"Hi all,. Running the following per the docs works as expected:; ```; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env; >>> psi4 --version; 1.6.1; ```. And I'm able to use psi4 in PsiAPI mode as expected (can run the h2o geometry opt and freq calcs) after entering a python shell. However, when I try to use Psi4 in Psithon mode like so, I obtain an error:. ```; >>> psi4 -i input.dat -o output.dat; A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.23.1; ```. Is this a compile issue in the Psi4 executable on conda?. In case it's helpful, I'm using a Mac (v.11.3.1) and running conda (4.12.0) with python 3.9.13. The input file I was trying to use contains:. ```; memory 600 mb. molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```. The tests module ran 92 / 4121 tests, and two failed (test_gdma and test_psi4_cc), but these seem unrelated to the current issue.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2661:491,detect,detected,491,https://psicode.org,https://github.com/psi4/psi4/issues/2661,1,['detect'],['detected']
Safety,"Hi everyone!. It was [my forum thread](http://forum.psicode.org/t/building-with-high-am/936) that Toon linked in the first comment of this GitHub Issue. I never got a response there, so I never ended up using Psi4. Today I searched on Google to see if anything changed in the last 4.5 years, and found this page for the first time. I wonder why Toon, and then Lori, continued the discussion here rather than in that forum thread (or why no link to this page was provided there), because for that reason I didn't see this until more than 4 years later. Anyway, it looks like unresolved issues remained in May 2022. **Does anyone have a set of instructions for building with `AM=10`, that is safe for 2023 (preferably without Conda)?** I just need to calculate energies (no need for the Hessian, for example). Is it not possible to just install Psi4 with a sequence like the one below, that I use to install OpenMolcas?; ```; cmake .. ; make -j; ```; Or like the command that is used for MRCC:; ```; build.mrcc Intel -pOMP; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-1374142428:690,safe,safe,690,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-1374142428,1,['safe'],['safe']
Safety,"Hi loriab,. Sorry for asking that many questions. v1.1a1 requires GCC 4.9 or newer. Most software on our cluster is compiled with GCC 4.8.2 and I would like to avoid recompiling Python, HDF5, GSL etc. with a newer compiler version. The reason for compiling a newer version of psi4 is the the following post from Robert (SAPT bug in 1.0 rc1):. http://forum.psicode.org/t/problem-in-sapt2-3-dmp2-calculation/395. In your reply to the post you mentioned that there was a clean up of the SAPT code in july:. ""Your input worked just fine on my current Psi4. There've been a lot of changes to Psi4 since 1.0rc, and there was a clean-up of SAPT printing in July, so I recommend you update to current Psi4 which is ~700 commits ahead of where you're at. Especially since you're running SAPT. Did you build your own or do you want to try the conda binary?"". Is there are psi4 version with the new SAPT code, which builds with GCC 4.8.2 ?. Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274027886:160,avoid,avoid,160,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274027886,1,['avoid'],['avoid']
Safety,"Hi loriab,. Thank you for your reply. I already have access to GCC 5.2.0 and 6.2.0 on the cluster. I currently try to compile psi4 with GCC 5.2.0. I am currently struggling with specifying the BLAS library. I would like to use OpenBLAS 0.2.13, but somehow cmake has problems to automatically detecting it and I also don't know how I can specify the explicit path to the library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib/libopenblas.so). I already tried setting. export MATH_ROOT=/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib. and. export MATH_ROOT=/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_5.2.0. but in both cases OpenBLAS is not detected. If I disable the ENABLE_AUTO_BLAS and the ENABLE_AUTO_LAPACK settings, how can I specify the absolute path to the library ?. Thank you for your help. @andysim:; According to https://gcc.gnu.org/projects/cxx-status.html#cxx11:. ""GCC 4.8.1 was the first feature-complete implementation of the 2011 C++ standard, previously known as C++0x."". Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274478774:292,detect,detecting,292,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274478774,2,['detect'],"['detected', 'detecting']"
Safety,"Hi!; thank you, this is an interesting point and I am sure other code developers will raise the same issue. One of the main goals of TREXIO is to make it easy for different codes to exchange data. However, I understand that Psi4 may have specific needs that may not be included in the current version of TREXIO. One solution could be to use HDF5 for temporary files and store the final results with TREXIO. . But:; a better option is to fork TREXIO and extend it to fit Psi4's specific needs.; You could add your personal temporary arrays in a specific group named `psi4` for example, and link your own library with psi4. Additionally, if any modifications prove to be useful to other codes, they can be submitted as pull requests to the official library. The good thing with this strategy is that as long as you don't remove anything from the `trex.org` file, the files that you will produce will be detected as valid TREXIO files. Of course, there will be no way to access your specific data with the official library, but the files will be compatible with both the official and the custom library. @q-posev : We could think of a mechanism to generalize the possibility to extend the library for private data. Instead of reading only `trex.json`, we could let the script handle multiple json files to allow users to extend the library with custom groups. It could probably be integrated at the level of the configure script. In this way, @JonathonMisiewicz would only need to keep a JSON file in the git repo of psi4 to extend TREXIO instead of maintaining a fork of TREXIO and keeping his fork in sync with the official one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906:901,detect,detected,901,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906,1,['detect'],['detected']
Safety,"Hi,. I'm using DiskJK in a plugin: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgci.cc#L292 . Does it reuse the existing disk AO integrals or does it recompute them? In case of the latter: How do I avoid this? Is there a way to fetch the JK from the wavefunction object or the environment?. Thank you for your time and answer!; Best,; Sebastian",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/65:228,avoid,avoid,228,https://psicode.org,https://github.com/psi4/psi4/issues/65,1,['avoid'],['avoid']
Safety,"Hi,. we were recently reviving a PSI4 plugin that was used with an older version of PSI4. Now, we wanted to adapt it to the current development version and realized that the AOIntegralsIterator is hidden (?) in the library. Our fix was to add PSI_API to the class definition in `src/psi4/libmints/integral.h` . . However, for us, it would be easier if it would be accessible by default (mainly to use the conda install and avoid compilation every time). Is there a specific reason, why that class is excluded or hidden in the library? If no, we would be very grateful, if a developer would add it to the header file. . Thank you!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2239:423,avoid,avoid,423,https://psicode.org,https://github.com/psi4/psi4/issues/2239,1,['avoid'],['avoid']
Safety,"Hi,; could you take a look at the attached runs. The tar.gz file includes three geometry optmmization jobs of the same molecule from three different starting conformations. They all fail on our cluster due to memory issues. The cluster is using cgroups. I am asking slurm for 10gb and specifying ```memory 8.0 Gb```. Two of the jobs are have the following error message (rec19_4405620.log, rec284_4405895.log):; ```slurmstepd: error: Detected 1 oom-kill event(s) in step 4405620.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler. ```. while the third has this error (rec24_4405625.log):; ```Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1550197239473/work/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::tocwrite(unsigned long); ```. - One job (rec284_pid139597.out) was killed before the first scf even started.; - the other two were killed during the first gradient evaluation (rec19_pid139597.out, rec24_pid139597.out) . These are just three jobs out of 500 similar ones that failed. I picked them to show a couple of divers failures. The input files are included as well (*.dat).; I tried the same thing with B3LYP and it worked.; Psi4 used: ```Psi4 1.3rc2```. Any ideas?; Thanks,; Alberto; [psi4.wb97.tar.gz](https://github.com/psi4/psi4/files/3040711/psi4.wb97.tar.gz)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590:434,Detect,Detected,434,https://psicode.org,https://github.com/psi4/psi4/issues/1590,1,['Detect'],['Detected']
Safety,"Hi~. Thanks for the responses. I create an environment and I run the command as you recommend ([link](https://psicode.org/installs/v15/)). `conda install psi4 python=3.9 -c psi4 `. But it still shows:. ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: \ ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; python=3.9; psi4 -> libxc[version='>=5.1.5,<6.0a0'] -> python[version='3.4.*|>=3.10,<3.11.0a0|>=3.6|>=3.5|>=3.7|>=3.6.0|>=3.6,<3.7|>=3.4']The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability.; ```. Is there anything wrong with my Ubuntu machine?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2390#issuecomment-1004659467:723,abort,abort,723,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1004659467,1,['abort'],['abort']
Safety,"Hmm, I wonder if some other dependency was detected in /usr such that it got baked into rpath at a high position. Depending on rpath/runpath, LD_LIBRARY_PATH may or may not trump it. Otherwise, I quite agree that you are typing sensibly and the computer is behaving not. `source activate` only works with bash– could that be the problem with that command? If you're on psi4/psi4 (CMR-KTB) and anything besides `psimrcc-fd-freq2` fails, yes, post it here. If you're on dgasmith/psi4 inversion (CMR-KTB-INV), then we're only up to 92% passing anyways.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252823348:43,detect,detected,43,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252823348,1,['detect'],['detected']
Safety,"Hmm, I'm not seeing what you describe. At least the 2.2.3 version that psi builds by default installs correctly into `<objdir>/stage/`, not `/usr/local`. One thing that's concerning is your ""Built target pybind11_tests"". I don't know where that's coming from since https://github.com/psi4/psi4/blob/master/external/upstream/pybind11/CMakeLists.txt#L22 . ```; -- Suitable pybind11 could not be located, Building pybind11 instead.; ...; [ 50%] No patch step for 'pybind11_external'; [ 53%] No update step for 'pybind11_external'; [ 57%] Performing configure step for 'pybind11_external'; -- The CXX compiler identification is GNU 7.3.0; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:885,Detect,Detecting,885,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966,4,['Detect'],['Detecting']
Safety,"Hmm, your right it might be good to doc the SuperFunctional class somewhere accessible. VV10 is automatically detected for full LibXC superfunctionals which contain VV10 parameters. However, -D and -NL and disparate enough that they likely need to be handled separately. What kind of automatic detection where you thinking about? Tagging `-V` to a functional will not work unless fit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/870#issuecomment-348223488:110,detect,detected,110,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-348223488,2,['detect'],"['detected', 'detection']"
Safety,"Hmm. I agree it is probably not worth spending a lot of time on, but for CMake noobs like me `-D SIMINT_VECTOR=...` not having any effect on its own is definitely surprising.; Looking at https://github.com/psi4/psi4/blob/ce8ce9a5e0fad4ebd2d5dee9b6d06b01047574b1/external/upstream/simint/CMakeLists.txt#L8; it appears as if there is a variable that already contains the string describing the vectorization type of the found simint binary. I have no idea how `simint_VECTOR` is (correctly) getting set to SSE, but _something_ must be somehow detecting that it is not the AVX default value set at ; https://github.com/psi4/psi4/blob/7afd2276795993fcfc7a769e5c2568d108678fc5/CMakeLists.txt#L167",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2480#issuecomment-1069404135:540,detect,detecting,540,https://psicode.org,https://github.com/psi4/psi4/issues/2480#issuecomment-1069404135,1,['detect'],['detecting']
Safety,"How about something like this:. - Perform SCF; - Check instability; - If unstable, rotate in the direction of the most unstable vector, according to some user-specified magnitude then...; - Compute the deviation of the new SCF energy from the 2nd order Taylor prediction, as well as the new SCF gradient; - If the 2nd order Taylor prediction was accurate enough (within some user-specified tolerance), and the magnitude of the gradient is within a comfortable range (another pair of parameters sadly...), then start SOSCF which should hopefully start going downhill.; - If the gradient is too low, increase the rotation magnitude, if too large decrease it. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, decrease rotation magnitude. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, **and** the gradient is too low, accept the orbital rotation, recompute the orbital Hessian at the new location (which is no longer exactly a saddle point), and repeat the entire follow process, until we find a point we can start SOSCF from. This could of course get quite expensive if a lot of Hessian recomputes are required, and relies on SOSCF not climbing back up to the saddle point, but to me it sounds easier to implement. With that said, I cannot help but feel like we are trying to reinvent a wheel. Surely, one would think that other people have already spent a lot of time thinking about the best ways to climb down from saddle points.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277:260,predict,prediction,260,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277,4,['predict'],['prediction']
Safety,"How did `TargetHDF5Config.cmake`, etc. even get into `/usr/local/` except through a Psi4 install? Or possibly libefp or CheMPS2 install? Those are just CMake target wrappings around HDF5 and LAPACK detections. If you're not wanting Psi to install those (they're mainly for info sharing w/i the Psi cmake superbuild), then libefp and chemps2 shouldn't be installing them either. Just in case it's unclear, every package gets internally installed to `<builddir>/stage/${CMAKE_PREFIX_PATH}`, which is a full-fledged psi installation. The result of user `make install` is to just bodily copy the `stage/` dir into the filesystem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/855#issuecomment-343778590:198,detect,detections,198,https://psicode.org,https://github.com/psi4/psi4/issues/855#issuecomment-343778590,1,['detect'],['detections']
Safety,"How did you get gau2grid (psi4 dependency) compiled without `mpmath`? There are ways around it, but simplest precaution is to make sure the python psi4 cmake is detecting (look in `<objdir>/CMakeCache.txt`; influence through `cmake -DPYTHON_EXECUTABLE=/full/path/to/bin/python`) and any conda-supplied psi dependencies are in the *same* conda environment and that that's active throughout cmake configure, `make`, `make install`, and runtime.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-382181608:161,detect,detecting,161,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-382181608,1,['detect'],['detecting']
Safety,"I [understand](http://stackoverflow.com/a/12665408) the GCC folks selected a limited definition of ""feature-complete"" when they wrote that sentence about 4.8. I use MKL so exclusively that I can only offer tentative advice on the Math detection. Check [this bit](https://github.com/psi4/psi4/blob/master/cmake/math/MathLibs.cmake#L18-L28) of code and make sure OpenBlas's headers are matching up. Then maybe change the libs from `blas` to `openblas` and try again with MATH_ROOT. Even if it detects properly for Psi4, you may still hit a block with math libs for libefp. Been working on solving that problem this weekend. I've no experience with the quality of OpenBLAS. But if it's not better than a system native distribution, you may prefer the binary that has high-quality math libs baked in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274524821:235,detect,detection,235,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274524821,2,['detect'],"['detection', 'detects']"
Safety,"I _was_ meaning SCS(N)-type variables, but after reading your comments, I've changed my mind again. While the number of spin-related variables on OCC's wavefunction object is _bad_, defining the same quantities multiple times throughout OCC is _worse_. That risks inconsistencies in the definitions and is another thing you need to check for when moving to qcdb. So the current plan (which is what I'll go with pending your objections) is to just use the variables already saved to OCC rather than re-computing them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-581686480:258,risk,risks,258,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581686480,1,['risk'],['risks']
Safety,"I agree that `cclambda` should honor the user's `r_convergence` choice, but the default settings we chose are not to avoid breaking tests but because tighter settings are wholly unnecessary (and often exceedingly difficult to achieve) for transition properties. The `cc55` test case just revealed the problem on certain hardware.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2520#issuecomment-1089609984:117,avoid,avoid,117,https://psicode.org,https://github.com/psi4/psi4/issues/2520#issuecomment-1089609984,1,['avoid'],['avoid']
Safety,"I agree that compatibility is nice, and will press ahead with adding the symmetry back in if that's the consensus. My hesitation to do so stems from the fact that only `OUT_OF_CORE` can use the symmetry, and it's the worst algorithm we have in JK. Symmetrizing is a lot more work than using `transform()` to transform the matrices (which doesn't seem to play nicely with mixed symmetric/c1 matrices), because the perturbations themselves must also be transformed to SALCs. None of that is hard, but it does make the response code messier; I currently check to see if the JK engine runs in C1 anyway, and avoid symmetrization for those cases.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-234099704:604,avoid,avoid,604,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-234099704,1,['avoid'],['avoid']
Safety,"I agree that option B is the best. The effect of the fix will be very minor. This can be easily tested by comparing to DCT code with conventional integrals (and we have done this in the past). Also, current version of the code should recover the exact DCT energy and gradient when using a very large auxiliary basis set.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1579#issuecomment-474901373:234,recover,recover,234,https://psicode.org,https://github.com/psi4/psi4/issues/1579#issuecomment-474901373,1,['recover'],['recover']
Safety,"I agree with all of the above, especially a sanity check on the number of points provided and the use of the minimum as a guess. One very minor correction: the ""bottom of the well"" dissociation energy `De` is the difference between the minimized energy and the dissociated products. The zero-point corrected value (which is what's really measured in experiments, because the molecule cannot reach the bottom of the well), is `D0` and comes from subtracting the `ZPVE(nu)` value reported in the dictionary from `De`. For the record, that ZPVE is `0.5 we - 0.25 wexe`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1600#issuecomment-483629512:44,sanity check,sanity check,44,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483629512,1,['sanity check'],['sanity check']
Safety,"I always get the non-sym solution with the given input, but I should not (technically) ?. Isnt the MOM procedure meant to calculate non-ground state SCF solutions? Does it avoid breaking the symmetry? The given twisted ethylene here is triplet?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349553820:172,avoid,avoid,172,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349553820,1,['avoid'],['avoid']
Safety,"I always use a fresh build directory. I found 2 cmake related issues. 1) I noticed 'pybind11_external' is build with the gcc 4.8( system default) instead of the locally installed gcc 5.4. So I added . ```; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER} ; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER} . ```. to [CMakeLists.txt](https://github.com/psi4/psi4/blob/master/external/upstream/pybind11/CMakeLists.txt) like it is done for the libint cmake file. 2) The second issue is that pybind11 auto-detects python3.4 and psi4 detected python2.7 on my workstation. I fixed it by changing the python version in the CMakeCache.txt file for pybind11 by hand, since I don't know how to tell cmake that. After rebuilding pybind11 the compilation of psi4 finishes normally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273472426:486,detect,detects,486,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273472426,2,['detect'],"['detected', 'detects']"
Safety,"I am getting `forrtl: error (76): Abort trap signal` error. Is that from that line?; It stops while printing the internal coordinate overview after printing the last angle value.; Presumably it tries to print a 4-center angle, there are 4 atoms after all, but no out-of-plane angle is found in the `intco` file. In C1 symmetry there should an out-of-plane angle coordinate.; The input works for a symmetrized Cs (planar) molecule that eliminates the out-of-plane mode. I cannot track it down further for now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1924#issuecomment-641876079:34,Abort,Abort,34,https://psicode.org,https://github.com/psi4/psi4/issues/1924#issuecomment-641876079,1,['Abort'],['Abort']
Safety,I am not really sure about all the LIBINT commands as I try to avoid dealing with the integral routines. I typically just pass a --max-am-eri=7 to my setup script so I can compile with higher angular momentum.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/180#issuecomment-139112245:63,avoid,avoid,63,https://psicode.org,https://github.com/psi4/psi4/issues/180#issuecomment-139112245,1,['avoid'],['avoid']
Safety,"I am running the following input on Ubuntu : ; ---------------; memory 12 Gb. molecule ab { ; 0 1; Cu 0.00000 0.00000 0.00000; Cu 2.35000 0.00000 0.00000; units ang; }. set basis aug-cc-pvtz ; set scf_type df; set reference rhf; set e_convergence 1e-06; set d_convergence 1e-06; set ints_tolerance 1e-08. set frozen_uocc [5,5,5,5,5,5,5,5]; set freeze_core true; set roots_per_irrep [2,2,2,2,2,2,2,2]; set maxiter 100000; ccsd_energy, wfn = properties('eom-ccsd', properties=['oscillator_strength'],return_wfn=True). ------------------------. and I get the following error : . 	Projections for excited state, irrep Ag, root 1:; 	<0|Le^(-T)|0><0|Re^T|0> = 0.0000000000; 	<0|Le^(-T)|S><S|Re^T|0> = 0.9021404202; 	<0|Le^(-T)|D><D|Re^T|0> = 0.0978595968; 	Sum of above = 1.0000000170; 	Approx. excitation level = 1.0978596138; PSIO_ERROR: Attempt to write into next entry: 121, LIJAB; PSIO_ERROR: unit = 121, errval = 18; PSIO_ERROR: 18 (Incorrect block end address); terminate called after throwing an instance of 'psi::PsiException'; what(): ; Fatal Error: PSIO Error; Error occurred in file: /home/luca/Desktop/psi4_max/psi4-master/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). ./bash.sh: line 7: 10101 Aborted (core dumped) /home/luca/Desktop/psi4_max/psi4-master/bi/stage/usr/local/psi4/bin/psi4 cu2.dat cu2.out; ------------------------------------------------------------------------------------------------------------------. I have no idea what's going wrong. LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/786:1616,Abort,Aborted,1616,https://psicode.org,https://github.com/psi4/psi4/issues/786,1,['Abort'],['Aborted']
Safety,"I am trying to build a psi4 plugin but I am getting pybind11 related error in cmake.; using`psi4 --plugin-name myplugin --plugin-template aointegrals`, followed by `cmake .`, I get the following error:; ```; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Psi4 script: /home/akumar1/newriver/installed/psi4/latest_psi4/bin/psi4; -- Psi4 headers: /home/akumar1/newriver/installed/psi4/latest_psi4/include; -- Psi4 library: /home/akumar1/newriver/installed/psi4/latest_psi4/lib//psi4/core.so; -- Psi4 components: ; -- Python executable: /home/akumar1/newriver/installed/python/bin/python3. CMake Error at ; /home/akumar1/newriver/installed/psi4/latest_psi4/share/cmake/psi4/psi4Config.cmake:142 ; (find_package):; Could not find a package configuration file provided by ""pybind11"" with any; of the following names:. pybind11Config.cmake; pybind11-config.cmake; ; Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed.; Call Stack (most recent call first):; CMakeLists.txt:35 (find_package); ```; I am up to date with the psi4's source code. Do I need to set a `CMAKE_PREFIX_PATH` specfically for locating pybind11 ? Please let me know if you need any more information.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/775:397,Detect,Detecting,397,https://psicode.org,https://github.com/psi4/psi4/issues/775,4,['Detect'],['Detecting']
Safety,"I am trying to install Psi4 with Conda on a Linux machine with Python 3.11. However, it does not seem like Python 3.11 is supported at this time despite the README badge showing 3.11. Are there plans to add a Python 3.11 Conda build in the near future?; ; ```; conda create --name psi4 python=3.11; conda activate psi4; conda install psi4 -c psi4; ```. ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: -; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError: The following specifications were found; to be incompatible with the existing python installation in your environment:. Specifications:. - psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.10,<3.11.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0|>=3.7,<3.8.0a0|>=3.6,<3.7.0a0|>=3.5,<3.6.0a0']. Your python: python=3.11. If python is on the left-most side of the chain, that's the version you've asked for.; When python appears to the right, that indicates that the thing on the left is somehow; not available for the python version you are constrained to. Note that conda will not; change your python version to a different minor version unless you explicitly specify; that. The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.35=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']; - python=3.11 -> libgcc-ng[version='>=11.2.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.35; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3031:873,abort,abort,873,https://psicode.org,https://github.com/psi4/psi4/issues/3031,1,['abort'],['abort']
Safety,"I believe I know exactly what you have experienced, please correct me if I am wrong. . It is easy to come to the conclusion that buf4_init is like a constructor. Leading to the conclusion that when you pass a `dpdbuf4` to the `buf4_init` function you get a brand new instance of a class with data initialized to zero. However these are not objects in a proper OOP sense, and for that reason the when/why of data moving into `buffer->matrix` can be confusing. The comments here should have some warning that the data that *will be* pointed to by`buffer->matrix`, will only be ""blank"" if the tensor that this (`filenumber`, `label`) combination refers to does not exist. Exist here has a very broad scope since you may be referring to an entry in a file which was written by some other module, and often it is up to the programmer to know ""This quantity was written by module A, and it is safe for me to assume that it will be on disk when the code I am writing in module B will run because I made sure that module A runs before module B in the driver"". If you expect/want a tensor to be zero-ed out you should always do that explicitly when manipulating the data. This detail is easy to overlook since common operations using the `contractXXX` methods may be doing that without you realizing it. For example by setting the pre-factor on the target to zero. . There are plans in the works for a fairly major overhaul of libDPD to address various problems, one being that the interface is very cumbersome. Hopefully those efforts will make it much easier to get comfortable writing code that uses DPD.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267204006:887,safe,safe,887,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267204006,1,['safe'],['safe']
Safety,"I believe this PR fixes the bug in #976 correctly, without adverse side effects (famous last words). Does the overall charge (from the charge/multiplicity entries) affect `Z` values of the component atoms? What happens when one would - perhaps foolishly - try to do a ""frozen core"" `Li^2+` calculation?. However, I am wondering whether our approach to core freezing is perhaps a bit simplistic: a point was raised on the forums that one might want to be able to automatically detect when the valence shell is empty (eg. alkali metal cations), and then perhaps unfreeze the previous shell. Similarly, some other QM packages allow freezing up to `N-th` previous rare gas shell (the current behaviour is `N=1`).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/978#issuecomment-385869940:476,detect,detect,476,https://psicode.org,https://github.com/psi4/psi4/pull/978#issuecomment-385869940,1,['detect'],['detect']
Safety,"I believe we have had this problem in the past. Take a symmetric molecule who's optimal wavefunction should contain less symmetry:. ```python; import numpy as np. mol = psi4.geometry(""""""; 0 1; C 0.0 0.0 0.673055; C 0.0 0.0 -0.673055; H 0.0 0.934981 1.246807; H 0.0 -0.934981 1.246807; H 0.934981 0.0 -1.246807; H -0.934981 0.0 -1.246807; symmetry c1; """"""). # Set reference and guess.; psi4.set_options({; ""reference"": ""rhf"",; ""guess"": ""sad"",; ""basis"": ""DZP"",; ""soscf"": ""true"",; # ""sad_frac_occ"": ""true""; }). e_scf = energy('scf'); if np.allclose(e_scf, -77.87781349420317):; print(""Found non-symmetric minima! Success!""); elif np.allclose(e_scf, -77.84789770426966):; print(""Found symmetric minima... failure.""); else:; print(""You found something... wrong.""); ```. The `-77.847` result should be found when the molecule is constrained to symmetry. However, without that constraint there is a lower SCF result to be found. The kicker is even without the symmetry restraint (computation in `c1`) we fairly consistently end up with a symmetric wavefunction. Any ideas on how to avoid this?. Note 1: The stability analysis is showing that it is indeed finding the wrong answer and there are negative eigenvalues present. We should be able to follow these once the py-scf iterations are finished. Note 2: This is not deterministic for which result we land in (whoo!). Note 3: Moving an atom out of place by 1e-14 or so seems to ensure we find the correct energy. Really any noise lets the diagonalizer break out of its self-imposed symmetry constraints.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875:1075,avoid,avoid,1075,https://psicode.org,https://github.com/psi4/psi4/issues/875,1,['avoid'],['avoid']
Safety,"I bet this is an issue with mismatched `new`/`malloc` and `free`/`delete` in the legacy parts of the code. The newer code uses smart pointers to avoid this. The mismatched free and deletes can be tracked down using valgrind, which will also help to identify where the largest leaks are. Anybody who tackles this should consider replacing the various explicit allocations with smart pointers to avoid this mess. I'll take a pass through when I get chance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1532#issuecomment-463195111:145,avoid,avoid,145,https://psicode.org,https://github.com/psi4/psi4/issues/1532#issuecomment-463195111,2,['avoid'],['avoid']
Safety,"I bet you're using a broken version of OpenBLAS. Funny things are prone to happen if you call a non-OpenMP version of the library within OpenMP parallel code. This is why I don't like conda. There's no quality in the packages. Even though I filed a bug months ago, the OpenBLAS package still hasn't been compiled with runtime cpu detection.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-387067351:330,detect,detection,330,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-387067351,1,['detect'],['detection']
Safety,"I can confirm @robertodr's error. But it does away with CMake 3.3 (even though I can't see what the change was from the [release notes](https://cmake.org/cmake/help/v3.7/release/3.3.html)). I've sort of been wanting 3.3 because that detects the HDF5 version number, and I, at least, am susceptible to mixed 1.8.16 and 1.8.17 compilations, which the build system can now avoid. So shall we bump again?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281106134:233,detect,detects,233,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281106134,2,"['avoid', 'detect']","['avoid', 'detects']"
Safety,"I can confirm it on other relatively new Intel processors. Didn't try on my ancient AMD's, but I think we can safely assume it's Psi4 and not some hardware quirk.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1366#issuecomment-441168130:110,safe,safely,110,https://psicode.org,https://github.com/psi4/psi4/issues/1366#issuecomment-441168130,1,['safe'],['safely']
Safety,"I can confirm that I can now build a freshly checked-out tree without needing to edit anything. (I did have to use -DOpenMP_LIBRARY_DIRS to point at the Intel version of libiomp5.so.). I did get:. `No such TARGET ""OpenMP::OpenMP_C""` and `No such TARGET ""OpenMP::OpenMP_Fortran""`. in the cmake output but it built and (the few tests before I killed it) ran fine. As a further test, I've also tried enabling lots of other optional bits (ambit, CheMPS2, dkh, libefp, simint, gdma, PCMSolver, and snsmp2) to check whether the fortran error caused any issues with them. It looks like everything builds apart from ambit (which looks like it was only just re-enabled and so probably needs tweaking somewhere). Building ambit bails out with the same lack of MathOpenMP that I was seeing before #1053:. ```; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=C;CXX;Fortran, C/CXX/Fortran=GNU/GNU/; -- Found TargetOpenMP: 1 ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /var/tmp/build/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:108 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /var/tmp/build/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:44 (find_dependency); cmake/FindTargetLAPACK.cmake:30 (find_package); CMakeLists.txt:90 (find_package). -- Configuring incomplete, errors occurred!; See also ""/var/tmp/build/psi4/objdir/external/upstream/ambit/ambit_external-prefix/src/ambit_external-build/CMakeFiles/CMakeOutput.log"".; See also ""/var/tmp/build/psi4/objdir/external/upstream/ambit/ambit_external-prefix/src/ambit_external-build/CMakeFiles/CMakeError.log"".; external/upstream/ambit/CMakeFiles/ambit_external.dir/bu",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400326280:802,Detect,Detecting,802,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400326280,1,['Detect'],['Detecting']
Safety,"I can now finally explain why this bug is happening:; Assume you're cloning a ZMAT atom. [This line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/coordentry.h#L372) I added in #1108 enforces that if ZMAT coordinates were computed for the parent, they be computed for the clone atom. When giving a ZMAT atom coordinates in space, the reference atoms need to already have coordinates in space computed. Psi checks this, naturally enough, with`CoordEntry.computed_` (via a getter). Because of that line in #1108, `computed_` will always be set correctly for ZMAT atoms, so if you only ever use ZMAT atoms, all is well. However, there is no mechanism in place to compute coordinates for Cartesians as well, so those are listed as not computed when Psi checks `computed_`. The fix seems clear enough to me: add a `compute` call in `CartesianEntry::clone` to mirror the one in `ZMatrixEntry::clone`. Because changes in `molecule` can have wide-reaching repercussions, I'll hold off on testing the fix until @loriab is done fixing the full test suite, so I can use it to safety check this PR. And with that realization, I am quite hopeful to get this in Psi 1.3 after all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1379#issuecomment-448234589:1083,safe,safety,1083,https://psicode.org,https://github.com/psi4/psi4/pull/1379#issuecomment-448234589,1,['safe'],['safety']
Safety,I can:; ```; (psi4-pbe_xtpl) kraus@dorje:~/psi4/i2309::psi4 -n 1 input.dat ; corrupted size vs. prev_size; Aborted (core dumped); ```; [coredump.txt](https://github.com/psi4/psi4/files/7313127/coredump.txt); [bt.txt](https://github.com/psi4/psi4/files/7313137/bt.txt),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2309#issuecomment-938891510:107,Abort,Aborted,107,https://psicode.org,https://github.com/psi4/psi4/issues/2309#issuecomment-938891510,1,['Abort'],['Aborted']
Safety,"I cannot install psi4 v1.8 from conda. I get the following error. I'm on Ubuntu 22.04. Is this a known issue? Workarounds?. ```sh; ❯ conda create --name psi4-2 --channel conda-forge 'psi4==1.8' 35s  base; Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: | ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Package qcengine conflicts for:; psi4==1.8 -> qcengine[version='>=0.26.0,<0.27.0a0']; Package libint conflicts for:; psi4==1.8 -> libint=2.7.3dev1; Package _openmp_mutex conflicts for:; psi4==1.8 -> _openmp_mutex[version='*,>=4.5',build=*_llvm]; Package python_abi conflicts for:; psi4==1.8 -> python_abi[version='3.10.*|3.11.*|3.8.*|3.9.*',build='*_cp311|*_cp310|*_cp38|*_cp39']; Package libxc-c conflicts for:; psi4==1.8 -> libxc-c[version='>=6.1.0,<7.0a0',build=cpu_*]; Package qcelemental conflicts for:; psi4==1.8 -> qcelemental[version='>=0.25.1,<0.26.0a0']; Package python conflicts for:; psi4==1.8 -> python[version='>=3.10,<3.11.0a0|>=3.11,<3.12.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; Package pytest conflicts for:; psi4==1.8 -> pytest[version='>=7.0.1']; Package pyddx conflicts for:; psi4==1.8 -> pyddx[version='>=0.4.1']; Package pymdi conflicts for:; psi4==1.8 -> pymdi[version='>=1.2']; Package mkl conflicts for:; psi4==1.8 -> mkl[version='>=2022.2.1,<2023.0a0']; Package dkh conflicts for:; psi4==1.8 -> dkh[version='>=1.2,<1.3.0a0']; Package adcc conflicts for:; psi4==1.8 -> adcc[version='>=0.15.16']; Package networkx conflicts for:; psi4==1.8 -> networkx; Package numpy conflicts for:; psi4==1.8 -> numpy; Package libblas conflicts for:; psi4==1.8 -> libblas=[build=*mkl]; Package pybind11-abi conflicts for:; psi4==1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1697915972:550,abort,abort,550,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1697915972,1,['abort'],['abort']
Safety,"I compiled psi4, got coffee, and cmake decided it was time to recompile from scratch in case someone ninja edited my build. Cmake always has your back. . -Daniel Smith; Sent from my iPhone. . > On Apr 18, 2016, at 19:16, Lori A. Burns notifications@github.com wrote:; > ; > It would be valuable to developers, nightly builds, and CI testing if libint could be compiled once, then linked in as needed, like we can do for Boost. Much developer anger when CMake spontaneously decides the integrals need recompiling could be soothed! We could test molecules larger than He with density-fitted quad-zeta! The next NSF green initiative could applaud our energy savings!; > ; > Who dares to decouple libint from our build system such that it could become a detectable ExternalProject_Add CMake module? I think we need to be able to pass in MAX_AM, and it would be nice to have it build both static and shared libraries.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/355#issuecomment-211638331:750,detect,detectable,750,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-211638331,1,['detect'],['detectable']
Safety,"I compiled this PR with clang, ran `gibbs`, and still got the exact same error as Travis reports. ```; Structure for next step:; Cartesian Geometry (in Angstrom); C 0.0000000000 0.0000000000 0.0000000000; H 0.0000000000 0.8836649185 -0.6248454599; H 0.8836649185 0.0000000000 0.6248454599; H -0.8836649185 0.0000000000 0.6248454599; H 0.0000000000 -0.8836649185 -0.6248454599; ; Fatal Error: User specified point group (C2v(Z)) is not a subgroup of the highest detected point group (Cs(Z)). If this is because the symmetry increased, try to start the calculation again from the last geometry, after checking any symmetry-dependent input, such as DOCC.; ```. This problem is not specific to gcc compilers, and it looks to be a bug in finding the highest point group. I'm puzzled how the original test didn't run into this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-449682307:461,detect,detected,461,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-449682307,1,['detect'],['detected']
Safety,I consider that aspect of 3.6 very interesting. We wouldn't have to manually add `-std=c++11` and could avoid a repeated compiler warning about overwriting `-std=c++11` by ~`-std=gnuc++11` when cmake _is_ >=3.6 . But 3.6 is quite a leap just for our convenience.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281112355:104,avoid,avoid,104,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281112355,1,['avoid'],['avoid']
Safety,"I didn't find the right fedora build log yesterday, so if it's online and you want a minimal patch, I'd appreciate a link. But, if you don't mind a heavy patch, the below for external/upstream/qcelemental/CMakeLists.txt worked fine locally for me just now. That is, psi4 (master) configured, _didn't_ build qcel, and detected it fine at runtime. ```; #if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); # include(FindPythonModule); # find_python_module(qcelemental ATLEAST 0.24.0 QUIET); #endif(); #; #if(${qcelemental_FOUND}); # message(STATUS ""${Cyan}Found qcelemental${ColourReset}: ${PY_qcelemental} (found version ${qcelemental_VERSION})""); add_library(qcelemental_external INTERFACE) # dummy; #; #else(); # if(${CMAKE_INSIST_FIND_PACKAGE_qcelemental}); # message(FATAL_ERROR ""Suitable qcelemental could not be externally located as user insists""); # endif(); #; # include(ExternalProject); # message(STATUS ""Suitable qcelemental could not be located, ${Magenta}Building qcelemental${ColourReset} instead.""); #; # file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib); #; # ExternalProject_Add(qcelemental_external; # BUILD_ALWAYS 1; # URL https://github.com/MolSSI/QCElemental/archive/v0.25.1.tar.gz; # CONFIGURE_COMMAND """"; # UPDATE_COMMAND """"; # BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; # BUILD_IN_SOURCE 1; # INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; # --record=record.txt; # --single-version-externally-managed; # --install-lib=${_install_lib}); #endif(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967:317,detect,detected,317,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967,1,['detect'],['detected']
Safety,"I didn't know about the molecule member, but I vote that we go with the algorithm that assumes nothing about the orientation. We don't use symmetry unless the molecule is in the standard orientation, but I still think it's best to be safe. Especially when that safety comes without any extra computational cost. I think you're right about having a central location to handle this for gradients, hessians, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/298#issuecomment-191950504:234,safe,safe,234,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191950504,2,['safe'],"['safe', 'safety']"
Safety,I don't have access any more to large memory systems and I haven't found the time to look at more recent version of PSI4. Yet the concern remains: you want to avoid that a system starts swapping.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/424#issuecomment-274321046:159,avoid,avoid,159,https://psicode.org,https://github.com/psi4/psi4/issues/424#issuecomment-274321046,1,['avoid'],['avoid']
Safety,"I don't like the error message.; 1. ""nuclear fusion"" makes me think of the process that happens in a reactor, and ""near nuclear fusion"" is confusing. Please reword.; 2. This function should have no reference to symmetry detection tolerance. It's more abstract than that.; 3. There should be a comma between the words ""error"" and ""please.""; 4. I do not approve the ""please open an issue"" error message here. There are many possible features somebody could ask for Psi, and developer time is very limited. I read this message as promising to give ""turn error into warning"" priority for development if anybody requests. That's not a promise I want to fulfill when I'm not even convinced that ""turn error into warning"" is a good idea. I would much prefer removing that part of the error message entirely and leaving it to the user to post a feature request _without_ special encouragement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547:220,detect,detection,220,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547,1,['detect'],['detection']
Safety,"I had a bit of time to work on Windows build. Current status of dependencies:; - *libint*: with some hacking (https://github.com/raimis/libint/tree/win) I have manged to build it (https://ci.appveyor.com/project/raimis/libint). There are no tests, so high probability of not detected issues.; - *libxc*: with some more hacking (https://github.com/raimis/libxc/tree/win) I have to managed to build it too (https://ci.appveyor.com/project/raimis/libxc).; - *gau2grid*: it need just a few changes (https://github.com/raimis/gau2grid/tree/win) to compile (https://ci.appveyor.com/project/raimis/gau2grid). Though I have not managed to make the test to work. It seems, `ctypes` behave differently on Windows. Finally, I have reached a point to stat building *Psi4* (https://github.com/raimis/psi4/tree/win) and got stuck with MKL configuration and other `cmake` related problems (https://ci.appveyor.com/project/raimis/psi4). @loriab, for Linux builds, do you use MKL from `conda` or install it manually?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-390236786:275,detect,detected,275,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-390236786,1,['detect'],['detected']
Safety,"I had a crash for a geometry optimization, this is the stack track:. Reading symbols from /app/miniconda/bin/psi4...(no debugging symbols found)...done.; [New LWP 7474]; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib64/libthread_db.so.1"".; Core was generated by `psi4'.; Program terminated with signal SIGABRT, Aborted.; #0 0x00006a91c31f18d7 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:55. 55 return INLINE_SYSCALL (tgkill, 3, pid, selftid, sig);; (gdb) where; #0 0x00006a91c31f18d7 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:55; #1 0x00006a91c31f353a in __GI_abort () at abort.c:89; #2 0x00000000014c2e4f in opt::optking(psi::Options&) (); #3 0x0000000000a4c2fc in py_psi_optking() (); #4 0x0000000000a8993e in boost::python::objects::caller_py_function_impl<boost::python::detail::caller<int (*)(), boost::python::default_call_policies, boost::mpl::vector1<int> > >::operator()(_object_, _object_) (); #5 0x000000000554b96e in boost::python::objects::function::call(_object_, _object_) const (); #6 0x000000000554b6a5 in boost::detail::function::void_function_ref_invoker0<boost::python::objects::(anonymous namespace)::bind_return, void>::invoke(boost::detail::function::function_buffer&) (); #7 0x000000000555699d in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); #8 0x0000000000a6d6f5 in boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke(boost::detail::function::function_buffer&, boost::python::detail::exception_handler const&, boost::function0<void> const&) (); #9 0x0000000005556d54 in boost::python::handle_exception_impl(boost::fun",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:349,Abort,Aborted,349,https://psicode.org,https://github.com/psi4/psi4/issues/153,2,"['Abort', 'abort']","['Aborted', 'abort']"
Safety,"I had to write some code recently using the Dimension object and I was thinking that it would be useful to support initialization from a list, for example:; ```; Dimension orbs({3,0,1,1}); ```; This is particularly useful when working with Slices to avoid doing this:; ```; auto start_dim = psi::Dimension(1);; start_dim[0] = start;; ```; I think it might already be supported on the python side. Another useful thing would be to have direct access to the underlying std::vector object, or const iterators for it. That way, one could use Dimensions in loops more naturally. I was wondering, since you are modifying the class, would you be able to implement these changes as well?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2953#issuecomment-1808185903:250,avoid,avoid,250,https://psicode.org,https://github.com/psi4/psi4/pull/2953#issuecomment-1808185903,1,['avoid'],['avoid']
Safety,"I hadn't seen exactly this manifestation of the BLAS issue, but yes, it's why I was strongly advising against statically linking MKL in the other thread. . * ""MKL Trio"" := `mkl_intel_lp64` `mkl_intel_thread` `mkl_core`; * ""MKL RT"" := `libmkl_rt`; * if the Psi4 CMake can find MKL RT, that's what it'll link to for BLAS rather than MKL trio; * current NumPy from defaults conda channel links against MKL RT. (until recently, it linked against MKL Trio, which was why we sometimes advised getting numpy from the Intel conda channel, which has long linked against RT); * so it's safe to get psi4 & numpy via `conda install psi4 -c psi4/label/dev` because that'll pull numpy from defaults and psi4 from psi4 and both have the same BLAS linking. (may want to `conda update numpy` to make sure your numpy is the recent build.) can always `ldd` them to inspect.; * for the same reasons as above, it's safe to build psi4 from source against the conda `psi4-dev` package. That package provides MKL from conda and instructs psi4 cmake to use MKL RT. It also provides NumPy which (so long as recent build) uses MKL RT.; * unless you want to build NumPy yourself, the numpy you have pretty much determines how you must build or use psi4. So it's dangerous to:; * use statically linked MKL in psi4 and use NumPy with dynamically linked MKL; * use system BLAS like Apple's Accelerate with psi4 and use NumPy with dynamically linked MKL; * use MKL RT with psi4 and use NumPy with MKL trio. Since PPA probably doesn't have license to distribute MKL, it's likely that Psi4 w/MKL RT plus their NumPy is also dangerous. What are they linked against, if you can find out easily through `ldd` (have to burrow pretty deep into numpy to find a `.so`)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1007#issuecomment-387922677:576,safe,safe,576,https://psicode.org,https://github.com/psi4/psi4/issues/1007#issuecomment-387922677,2,['safe'],['safe']
Safety,"I have been meaning to mention this for a while actually. . If we require c++11, why is there an option in setup to disable c++11 support? Also, why can CMake revert to the older standard?. with intell 13.1, I will see this during the configure step: ; `-- Buggy compiler support for C++11. Using Older Standard.` . If I edit this line in CMakeCache.txt; `CMAKE_CXX_FLAGS:STRING=-DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=gnu++98`; to `-std=c++11` before I make I can build successfully, but if I don't I will get the same errors mentioned above. . CMake should produce an error if C++11 support is not detected, fail at the configuration step, and report why to the user. I think the current behavior is very confusing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/188#issuecomment-156910025:620,detect,detected,620,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-156910025,1,['detect'],['detected']
Safety,"I have fixed the code that connects the initial, separated fragments in; optking. The CH3F case now runs fine. The code was very much in error. I; will submit the correction whenever the main psi4 trunk runs again. At the; moment, the python there seems broken. On Sun, Mar 13, 2016 at 2:52 PM, Rollin King rking@bethel.edu wrote:. > The current code detected 4 different fragments for the extended CH3F.; > Then it tried to connect them. It really should have been able to do so.; > I don't see why it didn't work, and I'm looking for a bug.; > ; > On Sun, Mar 13, 2016 at 2:00 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Certainly the flexibility of the optimizer oughtn't be reduced. In the; > > absence of fixed/frozen keywords or user supplied/edited intco (do you need; > > a keyword to signal do-read-intco instead of accepting any it finds?), it's; > > probably reasonable to assume a full optimization is desired. Maybe grep; > > '~' needs to catch a gradient.rms(), too, next to the optking-active rms; > > gradient.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/310#issuecomment-196021110.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196087369:351,detect,detected,351,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196087369,1,['detect'],['detected']
Safety,"I have installed the latest Psi4 using anaconda:; `conda create -n p4env psi4 python=3.6 -c psi4/label/dev -c psi4`; Then; `source activate p4env`; But even a simple calculation like this one:; ```; molecule PCl5 {; 0 1; P -0.001250 0.001863 -0.000253; Cl -0.017313 2.126472 -0.026384; Cl -0.005958 -2.126884 0.029666; Cl 0.991147 -0.031176 -1.764481; Cl -2.029231 -0.007514 0.039738; Cl 1.062458 0.037458 1.721684; }; set basis def2-tzvp. optimize(""b3lyp""); ```; Is crashing with this error message:; ```; 			-----------------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3 4 5 6; 	 2 : 1; 	 3 : 1; 	 4 : 1; 	 5 : 1; 	 6 : 1. 	---Fragment 1 Geometry and Gradient---; 	 P -0.0023608120 0.0035185828 -0.0004777490; 	 CL -0.0327154829 4.0184477322 -0.0498581826; 	 CL -0.0112576427 -4.0192302534 0.0560609672; 	 CL 1.8729977331 -0.0589160789 -3.3343855050; 	 CL -3.8346895047 -0.0142013792 0.0750942888; 	 CL 2.0077559933 0.0707833845 3.2535115991; 	 0.0005829612 0.0007979689 -0.0000766467; 	 -0.0000438567 -0.0088149216 0.0011960655; 	 -0.0004768815 0.0083220457 -0.0009627395; 	 -0.0039049377 -0.0010136595 0.0075335979; 	 0.0080187099 -0.0002965760 -0.0001586710; 	 -0.0042975334 0.0010502310 -0.0074582594. 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.015348	 2.124830; 	 R(1,3) = 4.023156	 2.128962; 	 R(1,4) = 3.825678	 2.024461; 	 R(1,5) = 3.833115	 2.028397; 	 R(1,6) = 3.825381	 2.024305; 	 L(2,1,3) = 3.131665	 179.431194; 	 l(2,1,3) = 3.141593	 180.000000; 	 B(2,1,4) = 1.580103	 90.533252; 	 B(2,1,5) = 1.568103	 89.845687; 	 B(2,1,6) = 1.567648	 89.819597; 	 B(3,1,4) = 1.567809	 89.828837; 	 B(3,1,5) = 1.563686",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265:737,Detect,Detected,737,https://psicode.org,https://github.com/psi4/psi4/issues/1265,1,['Detect'],['Detected']
Safety,"I have made almost all PRs for easy/trivial code changes, which is ~80% of overall. For further progress, the easiest way is to use *Boost* library for:; - User/system time in `fnocc`, `libciomr`, and `libqt`; - File operations in `libfilesystem`; - Stacktrace printing in `libpsi4utils`. Actually, I'm a bit surprised that *Psi4* is not yet depended on *Boost*. What is *Psi4* policy on the new dependencies?. So there are two options:; 1. Use *Boost* for these cross-platform functionalities.; 2. Make a conditional compilation, so *Boost* dependency is only *Windows*. This will increase code complexity, but will avoid the new dependency on *Linux*.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-403818314:617,avoid,avoid,617,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-403818314,1,['avoid'],['avoid']
Safety,"I have no chance to run our input right now. But I can predict that it is due to the misusage of freeze-core true option. Due to that option DFOCC expects some frozen core orbitals but there is not any in reality. If you delete the freeze- core true option, then it will work. @wardence",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/893#issuecomment-358038326:55,predict,predict,55,https://psicode.org,https://github.com/psi4/psi4/issues/893#issuecomment-358038326,1,['predict'],['predict']
Safety,"I have seen something about mkl and Windows and 2018/2019 compatibility recently but of course can't find it now. I don't recall it as alarming, so if this PR has worked in practice, LGTM. Has @raimis definitely lifted the ""Don't merge"" directive (too many slack messages flying around)? Avoiding checkmark until confirmed so we're not merge-happy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1408#issuecomment-451223973:288,Avoid,Avoiding,288,https://psicode.org,https://github.com/psi4/psi4/pull/1408#issuecomment-451223973,1,['Avoid'],['Avoiding']
Safety,"I haven't encountered this behavior myself, but it does sound faulty. Since there's the binary as fallback and more and more pieces are using c++11, I don't think we're avoiding it anymore. @robertodr was talking about the feasibility of using some advanced cmake features to handle this problem more logically (https://cmake.org/cmake/help/v3.1/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.html). They will require bumping our required cmake version, but, for developers, that's not so bad.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/188#issuecomment-157058625:169,avoid,avoiding,169,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-157058625,1,['avoid'],['avoiding']
Safety,"I haven't seen any articles advocating the new workflow, but will let you know if I stumble upon them. I just skimmed the link you sent, and it looks like it raises some good points. My motivation for pushing the PR-based workflow is to make it much easier to validate (via Travis) contributions. By finding issues at the PR stage, we can avoid problems entering the codebase; pushing the new CC transform code as a PR would have prevented that simple missing ""return"" statement from affecting any users, for example. That turned out to be a non-issue, but it serves as a nice example of how apparently good code can still introduce problems that can be difficult to hunt down without our new workflow. The PR mechanism just serves to utilize the contributor's fork as a staging area for validation, which takes a lot of responsibility off the shoulders of the maintainer that clicks that ""accept"" button. A very nice side effect of all of this, is that is brings us in line with most projects on GH, and lowers the barrier to getting contributions from outside the usual suspects.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/254#issuecomment-187310350:339,avoid,avoid,339,https://psicode.org,https://github.com/psi4/psi4/pull/254#issuecomment-187310350,1,['avoid'],['avoid']
Safety,I installed Psi4 1.4a2.dev78 on Ubuntu-20.04.1 using conda installer but it crashes when I use it with [poltype](https://pren.github.io/poltype/README_INSTALL.html) tool. Do you know how I can fix the below error?; **Error:**; ```; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F14B1B2C10F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F14B7334980 Unknown Unknown Unknown; libc-2.27.so 00007F14B6F6FFB7 gsignal Unknown Unknown; libc-2.27.so 00007F14B6F71921 abort Unknown Unknown; core.cpython-37m- 00007F14B40E13D7 Unknown Unknown Unknown; core.cpython-37m- 00007F14B26DC86D Unknown Unknown Unknown; core.cpython-37m- 00007F14B26F56B1 Unknown Unknown Unknown; core.cpython-37m- 00007F14B271593A Unknown Unknown Unknown; python3.7 000055CE517D7914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843EBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE517D7107 _PyFunction_FastC Unknown Unknown; python3.7 000055CE5183F4B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518AA29D PyRun_StringFlags Unknown Unknown; python3.7 000055CE5184EEB4 Unknown Unknown Unknown; python3.7 000055CE517D7789 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843795 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518A9331 PyRun_FileExFlags Unknown Unknown; python3.7 000055CE518A,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2084:252,Abort,Abort,252,https://psicode.org,https://github.com/psi4/psi4/issues/2084,2,"['Abort', 'abort']","['Abort', 'abort']"
Safety,"I installed anaconda and psi4 independently. does the code below help?. ```; (base) C:\Users\erikc>where conda; C:\Users\erikc\anaconda3\Library\bin\conda.bat; C:\Users\erikc\anaconda3\Scripts\conda.exe; C:\Users\erikc\psi4conda\condabin\conda.bat; C:\Users\erikc\psi4conda\Scripts\conda.exe. (base) C:\Users\erikc>where python; C:\Users\erikc\anaconda3\python.exe. (base) C:\Users\erikc>where psi4; C:\Users\erikc\psi4conda\Scripts\psi4.exe. (base) C:\Users\erikc>conda create -n psi4env psi4 -c psi4/label/dev; Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: -; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError:. (base) C:\Users\erikc>; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875226101:856,abort,abort,856,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875226101,1,['abort'],['abort']
Safety,I just fixed the issue with xrange and the frozen MOs. Will go over some of @dgasmith's comments soon. I just realized I could access the spaces from ciwfn instead of mcscf_obj. I'll remove the python bindings that I added since they seem redundant now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-304475473:239,redund,redundant,239,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304475473,1,['redund'],['redundant']
Safety,"I just tried to recompile from scratch as well, and got the same error:. Scanning dependencies of target versioned_code; [ 98%] Building CXX object; src/bin/psi4/CMakeFiles/versioned_code.dir/version.cc.o; [ 98%] Building CXX object; src/bin/psi4/CMakeFiles/versioned_code.dir/python.cc.o; /home/seba/psi4public/src/bin/psi4/python.cc(764): error: identifier; ""PSI_VERSION"" is undefined; return PSI_VERSION;; ^. /home/seba/psi4public/src/bin/psi4/python.cc(1217): warning #1011: missing; return statement at end of non-void function ""py_psi_get_normalmodes""; }; ^. compilation aborted for /home/seba/psi4public/src/bin/psi4/python.cc (code; 2); make[2]: **\* [src/bin/psi4/CMakeFiles/versioned_code.dir/python.cc.o] Error; 2; make[1]: **\* [src/bin/psi4/CMakeFiles/versioned_code.dir/all] Error 2; make: **\* [all] Error 2. 2015-05-26 10:52 GMT+02:00 wpoely86 notifications@github.com:. > The gitversion.h does #undef PSI_VERSION which makes the file; > src/bin/psi4/python.cc fail to build as it needs a PSI_VERSION.; > ; > What is the idea here? Why no PSI_VERSION?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/100. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/100#issuecomment-105456704:577,abort,aborted,577,https://psicode.org,https://github.com/psi4/psi4/issues/100#issuecomment-105456704,1,['abort'],['aborted']
Safety,"I know how to fix this myself, but let's pretend I'm a stupid Mac user that has Xcode and, by the grace of god, managed to install gfortran without losing a limb. Don't I deserve for CMake to throw me a bone and auto-detect the fast system BLAS/LAPACK?. I am surprised that CMake doesn't do this already btw. Seems dirt-simple for them. Cheers,. Jeff. Jeffs-MacBook-Pro:build jhammond$ cmake ..; -- The C compiler identification is Clang 4.2.0; -- The CXX compiler identification is Clang 4.2.0; -- Check for working C compiler: /usr/bin/clang; -- Check for working C compiler: /usr/bin/clang -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- The Fortran compiler identification is GNU; -- Check for working Fortran compiler: /usr/local/bin/gfortran; -- Check for working Fortran compiler: /usr/local/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /usr/local/bin/gfortran supports Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenM",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36:217,detect,detect,217,https://psicode.org,https://github.com/psi4/psi4/issues/36,1,['detect'],['detect']
Safety,"I know next to nothing about nbody, I just did a quick keyword search to see if there is anything optking could set and didn't find anything. I'll also confess to not entirely following the thread so this could be completely unhelpful. optking gave up all non schema communication so in order for us to ""easily"" set `return_total_data` it would either need to be:. 1. A keyword we / the user can set in an `AtomicInput`; 2. An optional parameter in `psi4.run_qcschema()` - optking would likely force the user to use the `optking -> psi4` path instead of the `optking -> qcengine -> psi4` path to make sure this gets set correctly. Otherwise optking would either need to:; 1. go back to making gradient calls directly - at least if needed; 2. Make the user go through `psi4.optimize()` where `gradient(..., bsse_type=[args])` might get called explicitly - I don't know what is envisioned for this. I would hope a user would figure out that the energy is several orders of magnitude off, but regardless of the solution, the optimizer could certainly do a sanity check of the energy after the first step. I don't think an IE is ever going to be large enough to be mistaken for the total electronic energy. Optking could check the magnitude of the energy, direct the user to the correct way of performing the optimization and quit so as not to waste computer time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-870050704:1053,sanity check,sanity check,1053,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-870050704,1,['sanity check'],['sanity check']
Safety,"I leave most of the environment variable stuff for PSI4 in the hands of conda. I have a modified/compiled version of PSI4 on just one of my machines, but PSI4 crashes on all of them for one electron properties. I saw the crash while I was running a testing script, so I know that it printed correct results for HF, PBE0, gradient, and PBE0+point-charges calculations. The only test of mine that failed involved recovering charges from a QM calculation. ```; [input file]. set_num_threads(8); memory 256 mb; set reference rhf; set basis 6-31G*; set guess sad; set scf_type df. psi4_io.set_specific_path(32,'./'); psi4_io.set_specific_retention(32,True); psi4_io.set_specific_path(180,'./'); psi4_io.set_specific_retention(180,True). molecule LICHM_0 {; 0 1; O 0.87273600000000 0.00000000000000 -1.2467539999999; H 0.28827300000000 0.00000000000000 -2.0108530000000; H 0.28827300000000 0.00000000000000 -0.4826550000000; symmetry c1; no_reorient; no_com; }. Chrgfield = QMMM(); Chrgfield.extern.addCharge(-1.3062266666666,-0.6489658001839,0.00000001660701,1.10730418839000); Chrgfield.extern.addCharge(0.35180666666666,-0.7534241883900,-0.0000000536004,1.26252019981607); Chrgfield.extern.addCharge(0.86636000000000,-0.7788030060160,0.13229430272998,1.13268305579077); Chrgfield.extern.addCharge(-1.3062266666666,-0.9086401998160,-0.0000000166070,1.15806181160999); Chrgfield.extern.addCharge(0.10176666666666,-0.8041818116099,0.00000005360047,1.00284580018392); Chrgfield.extern.addCharge(0.86636000000000,-0.7788029939839,-0.1322943027299,1.13268294420922); Chrgfield.extern.addCharge(0.51284666666666,-0.7965191998160,0.76409898339298,1.73166981160999); Chrgfield.extern.addCharge(-1.7440911751517,-0.6778443974775,0.64528811991560,1.64918444879139); Chrgfield.extern.addCharge(0.85696271562354,-0.6894742127334,0.82228626070531,1.58968679653742); Chrgfield.extern.addCharge(0.51284666666666,-0.5368448001839,0.76409901660701,1.68091218839000); Chrgfield.extern.addCharge(-0.5989622639259,-0.65551960",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182660528:411,recover,recovering,411,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528,1,['recover'],['recovering']
Safety,I made a change that should have no effect except poking the CI. I want to check that it now pulls v7 from c-f and then fails the cmake detection b/c it wants v6.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3231#issuecomment-2408284190:136,detect,detection,136,https://psicode.org,https://github.com/psi4/psi4/pull/3231#issuecomment-2408284190,1,['detect'],['detection']
Safety,"I ran ```conda create -n <p4env> psi4 -c psi4/label/dev -c conda-forge``` and it worked. makes sense since rdkit uses conda-forge as well. I then ran ```psi4 --test``` and here are the results. does it matter some were skipped/ failed?. ```; (psi4env) C:\Users\erikc>psi4 --test; =========================================================================== test session starts ===========================================================================; platform win32 -- Python 3.8.10, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- C:\Users\erikc\psi4conda\envs\psi4env\python.exe; cachedir: .pytest_cache; rootdir: C:\Users\erikc; collected 3356 items / 3301 deselected / 55 selected. psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enable tests.) [ 1%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker1 PASSED [ 3%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker2 PASSED [ 5%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED (Not detecting module mrcc. Install package if necessary to enable tests.) [ 7%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to enable t...) [ 9%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:773,detect,detecting,773,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['detect'],['detecting']
Safety,"I really like the way this turned out, thanks for the example. It looks like we should probably go back and look into the timing print outs a bit. For example:. ```; | | DIISManager::extrapolate: 0.00u 0.00s 0.000530w 10 calls; | | | DIISManager::extrapolate: bMatrix setup: 0.00u 0.00s 0.000085w 10 calls; ```. Since `bMatrix setup` is only called with `extrapolate` we can safely shorten this text so that we do not skew the columns. This can be done in later passes however. Did the threading issue get resolved?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/743#issuecomment-312718181:375,safe,safely,375,https://psicode.org,https://github.com/psi4/psi4/pull/743#issuecomment-312718181,1,['safe'],['safely']
Safety,"I rebased the PR. In addition to eliminating the redundant argument, I did some `const` marking.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2525#issuecomment-1087975547:49,redund,redundant,49,https://psicode.org,https://github.com/psi4/psi4/pull/2525#issuecomment-1087975547,1,['redund'],['redundant']
Safety,"I recently found an issue when using DETCI to compute roots of LiCN with CIS/6-31G*, which may have uncovered some deeper problems. the main issue: the lowest-energy solution as predicted by GAMESS (and my own code, which diagonalizes the Hamiltonian by simply calling `np.linalg.eigh`) is completely skipped by Psi4, despite the following roots being the same. GAMESS predicts the following first six excited state energies (the RHF energy matching to 6 decimals):; ```; GAMESS LiCN/6-31G*; CONVERGED STATE 1 ENERGY= -99.5348374214; CONVERGED STATE 2 ENERGY= -99.5315000308; CONVERGED STATE 3 ENERGY= -99.5315000308; CONVERGED STATE 4 ENERGY= -99.5258078193; CONVERGED STATE 5 ENERGY= -99.5258078193; CONVERGED STATE 6 ENERGY= -99.5095744807; ```; while Psi4 predicts:; ```; Psi4 LiCN/6-31G* (symmetry c1, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.5315015582624; CI ROOT 2 TOTAL ENERGY:-99.53150155297872; CI ROOT 3 TOTAL ENERGY:-99.52581092386518; CI ROOT 4 TOTAL ENERGY:-99.52581092379563; CI ROOT 5 TOTAL ENERGY:-99.5096013650753; CI ROOT 6 TOTAL ENERGY:-99.48378441050741; ````; this result doesn't change with or without frozen core, but the results are fine with STO-3G, as well as water with 6-31G*. the results also match GAMESS if I perturb the linear geometry of LiCN, as suggested by @psi-rking , which suggests maybe an issue with finding roots of whatever symmetry the first excited state is; however, adding more roots (or running with/without symmetry) doesn't resolve the issue. in fact, running in `c2v` produces different energies, but they don't match GAMESS or the `symmetry c1` case:; ```; Psi4 LiCN/6-31G* (symmetry c2v, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.52581092382692; CI ROOT 2 TOTAL ENERGY:-99.50960136455492; CI ROOT 3 TOTAL ENERGY:-99.47046293582866; CI ROOT 4 TOTAL ENERGY:-99.43820506440449; CI ROOT 5 TOTAL ENERGY:-99.39012366739456; CI ROOT 6 TOTAL ENERGY:-99.37979350854745; ```; maybe it's a preconditioner issue? the Davidson seems",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3083:178,predict,predicted,178,https://psicode.org,https://github.com/psi4/psi4/issues/3083,3,['predict'],"['predicted', 'predicts']"
Safety,"I recently updated my copy of psi4, and I'm now having plugin issues. I added ""PSI_API"" where appropriate, and my plugins compile, but I get missing symbol errors for the JK object constructor:. Attention! This SCF may be density-fitted.; dyld: lazy symbol binding failed: Symbol not found: __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; Referenced from: /Users/deprince/edeprince3/deprince-group/plugins/does_jk_work/does_jk_work.so; Expected in: flat namespace. dyld: Symbol not found: __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; Referenced from: /Users/deprince/edeprince3/deprince-group/plugins/does_jk_work/does_jk_work.so; Expected in: flat namespace. Abort trap: 6. This error is for a clean plugin that only calls the constructor for PKJK:. extern ""C"" PSI_API; SharedWavefunction does_jk_work(SharedWavefunction ref_wfn, Options& options); {; int print = options.get_int(""PRINT"");. /* Your code goes here */. std::shared_ptr<PKJK> jk (new PKJK(ref_wfn->basisset(),options));. // Typically you would build a new wavefunction and populate it with data; return ref_wfn;; }",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/971:699,Abort,Abort,699,https://psicode.org,https://github.com/psi4/psi4/issues/971,1,['Abort'],['Abort']
Safety,"I remove these two channels. But after running; `conda create --override-channels -n p4env psi4 python=3.9 -c psi4 -c defaults`. It remains the same...; ```. Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: | ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; python=3.9; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; psi4 -> mkl-service[version='>=2.3.0,<3.0a0'] -> python[version='>=3.10,<3.11.0a0|>=3.7|>=3.6|>=3.5|>=3.6.0|>=3.6,<3.7']The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2390#issuecomment-1005448113:502,abort,abort,502,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1005448113,1,['abort'],['abort']
Safety,"I see a lot of changes have been happening recently with the OpenMP detection (#1031) but it's currently broken for me. For the combination of gcc 7.3.0, cmake 3.11.2, and MKL 2018.3.222 (and also with a 2017 version of MKL), I get the following output from cmake:. ```; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; -- Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE) ; -- ; Properties for TARGET OpenMP::OpenMP_CXX:; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_OPTIONS = ""$<$<COMPILE_LANGUAGE:CXX>:-fopenmp>""; OpenMP::OpenMP_CXX.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_LINK_LIBRARIES = ""/usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so""; Properties for TARGET tgt::MathOpenMP:; tgt::MathOpenMP.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_LINK_LIBRARIES = ""MathOpenMP_LIBRARIES-NOTFOUND;OpenMP::OpenMP_CXX""; Properties for TARGET blas:; blas.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; blas.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; blas.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; blas.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapk:; lapk.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; lapk.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapk.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041:68,detect,detection,68,https://psicode.org,https://github.com/psi4/psi4/issues/1041,1,['detect'],['detection']
Safety,"I see memory usage significantly above `psi4.set_memory()` limit. I do see the note in the documentation that memory usage might be _slightly_ higher, but if I even request within 20% of a node's total memory (requesting 300 out of ~376 GB), I risk crashing the entire node. Even now, running with `psi4.set_memory(""200 GB"")`, I see persistent VIRT usage of 259 GB and RES 256 GB. I know that determining the _actual_ amount of [memory consumed by a process is tricky](https://stackoverflow.com/questions/131303/how-to-measure-actual-memory-usage-of-an-application-or-process), but this is important to me to prevent the scheduler from killing my jobs. After some troubleshooting, I am requesting 300 GB from the scheduler, but 200 GB from psi4, and end up with ~260 GB used. Is this expected? . Relatedly, but separate, is there a way to estimate what the scratch file size may be? I was planning to use node-local storage until I found out my scratch files are 1.5+ TB. Any rule of thumb way of estimating this ahead of time (number of atoms × level of theory × some magic thing?)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1985:244,risk,risk,244,https://psicode.org,https://github.com/psi4/psi4/issues/1985,1,['risk'],['risk']
Safety,"I see the same issue with Psi4 installed on Ubuntu 16.04.1 LTS, compiled with gcc 5.4.0. It is also using ATLAS for BLAS/LAPACK, and my build is a debug build. The following test cases fail:; 77 - cdomp2-2 (Failed); 125 - dfmp2-grad2 (Failed); 127 - dfmp2-grad4 (Failed); 129 - dfomp2-2 (Failed); 131 - dfomp2-4 (Failed); 133 - dfomp2-grad2 (Failed). I'll update as I switch to another BLAS/LAPACK.; Other test cases fail but they might be related to different problems:; 188 - mints9 (Failed); 268 - pywrap-checkrun-rhf (Failed); 269 - pywrap-checkrun-rohf (Failed); 270 - pywrap-checkrun-uhf (Failed); 314 - fsapt1 (Timeout); 321 - python-energy (Failed); 322 - python-curve (Failed); 323 - python-pubchem (Failed); 324 - json-energy (Failed); 325 - json-gradient (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391#issuecomment-277545780:618,Timeout,Timeout,618,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-277545780,1,['Timeout'],['Timeout']
Safety,"I started in on this last night. The scheme for generating a Makefile from from a locally compiled psi4 exe can stay as it is, I think. Though we should make it so that it can be generated from an installed copy alone. Key missing component of that is that the main `$psi4-clone-dir/includes/*h` header files don't get installed at the moment. The `$psi4-clone-dir/src/*/*/*.h` files do. Do you think the lot should go behind a namespace like `$psi4-install-dir/includes/psi4/psifiles.h` (or `psi`)? Boost headers may also need to be installed. The other part is to make it so that people can check out plugins from the conda exe. I suppose the proper way to do this would be to have plugins under CMake control so that it would go off and detect their compiler/math situation. But instead I was thinking of sticking with Makefile and forcing the build environment– just setting it up so that generated plugins are ready to be compiled with conda gcc and math libs. The below is a start. ```; # Flags that were used to compile Psi4.; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug # set by $PREFIX; CXX = ${MCONDA}/bin/g++; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. How does that seem for a plan? @jturney, if you'd like to work on this, that'd be great. Or if you want me to do the conda parts, I'd be glad to do so.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172235413:740,detect,detect,740,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172235413,1,['detect'],['detect']
Safety,"I still get an error entering 'conda create -n p4env python=3.8 psi4 -c psi4/label/dev' into anaconda prompt. does my computer being a windows have anything to do with this failed installation?. `(base) C:\Users\erikc>conda create -n p4env python=3.8 psi4 -c psi4/label/dev; WARNING: A directory already exists at the target location 'C:\Users\erikc\anaconda3\envs\p4env'; but it is not a conda environment.; Continue creating environment (y/[n])? y. Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: -; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> msgpack-python -> python[version='>=2.7,<2.8.0a0|>=3.6,<3.7.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0|>=3.7,<3.8.0a0|>=3.5,<3.6.0a0|>=3.6|>=3.5|>=3.6.0']; python=3.8; psi4 -> python=3.8`. I would appreciate any help to get psi4 up and running. thanks",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1979#issuecomment-874806341:794,abort,abort,794,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-874806341,1,['abort'],['abort']
Safety,"I strongly recommend not doing that as you can get wrong answers and/or lose all threading capacity. . To get around the mkl-on-nodes problem, I advise installing the psi4-dev conda package that provides all of psi4's dependencies, incl. numpy and mkl, then building against that. ```; cd {top-level-psi4-dir}; conda create -n p4dev35 python=3.5 psi4-dev -c psi4/label/dev -c psi4; conda activate p4dev35; `psi4-path-advisor --intel`; # cmake configures; cd objdir && make -j`getconf _NPROCESSORS_ONLN`; make install; ```; Is there any reason the psi4 conda package itself isn't suitable? If size is an issue, then mkl is the problem, and it doesn't do to just fix mkl for psi4 b/c other pieces (numpy, chemps2) use it, too. I'm working on an openblas build. If you're resolved on statically linking mkl, short of probing the math detection, I'd consult the mkl-link-advisor and pass the resulting advice to psi4 cmake via example (G.) of http://psicode.org/psi4manual/master/build_planning.html#cmake-lapack . EDIT: `conda install` --> `conda create` on 2nd line of snippet",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386422281:831,detect,detection,831,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386422281,1,['detect'],['detection']
Safety,"I think ""symmetry tolerant"" is an odd description to apply to a method that; takes a symmetrical input and produces an asymmetrical output (e.g., the; DF-SCF gradient generating asymmetrical noise in the 9th decimal). If; numerical approximation is introducing the asymmetry, isn't the; symmetrization, if done evenly, likely to improve the accuracy of the; result, besides avoiding the risk of collateral damage? I appreciate; symmetrizing other types of objects may not be as simple. On Thu, Mar 3, 2016 at 2:47 PM, Justin Turney notifications@github.com; wrote:. > Yeah, the one in molecule used to be like the one in deriv when I; > originally wrote it 5 years ago. Then @psi-rking; > https://github.com/psi-rking expanded on it to assume non-standard; > orientation. A centralized one sounds good since I just found another on in; > matrix.cc.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/298#issuecomment-191955685.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/298#issuecomment-191991936:374,avoid,avoiding,374,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191991936,2,"['avoid', 'risk']","['avoiding', 'risk']"
Safety,"I think an auto-update is a good idea, but will need some sanity checks. Thinking back a decade, I think the original motivation for not auto updating was to accommodate the following:; ```; molecule h2 {; H; H 1 R; }. h2.R = 0.7; ```; There were some problems caused by attempting to update in the absence of all variables, but they should be easy to overcome with the appropriate checks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/765#issuecomment-316152578:58,sanity check,sanity checks,58,https://psicode.org,https://github.com/psi4/psi4/issues/765#issuecomment-316152578,1,['sanity check'],['sanity checks']
Safety,"I think downgrade OS before trying to solve Boost problems so as to avoid wasting more time on something that's nearly gone. Need a ""Kill the Boost!"" graphic a la Disney's ""Beauty and the Beast.""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235151809:68,avoid,avoid,68,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235151809,1,['avoid'],['avoid']
Safety,"I think for a locally compiled psi4 you also have to remove the install dir, if one exists. Susi Lehtola; Sent from my phone so excuse my brevity. On 14 Feb 2019, at 3.40, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. TL;DR If conda psi4 is acting up, update libint, too: conda update libint -c psi4/label/dev. If locally compiled psi4 is acting up, trigger a partial recompile: cd objdir && rm -rf external/upstream/libint/ && make. We've been planning for a while to distribute conda psi4 with libint compiled at MAX_AM_ERI 8, not 6. I have rebuilt the libint package and now the v1.3rc1 will be the first psi4 package with extended AM. Unfortunately, both libint of different AM are not hot-swappable and AM not detectable at runtime. That is, a built psi4 is perfectly happy to link (in the ldd sense) to a libint.so that is inconsistent with fixed data dimensions in psi4 libmints, and libmints can't even throw an error for enlightenment. I could throw additional constraints on the psi4 pkg to make sure it picked the right libint build, but that would be misusing the tools a bit, would constrain things in future, and would only solve a third of the problem. I believe you can handle this transition manually with a couple commands. which libints are out there?. conda list. # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:751,detect,detectable,751,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773,1,['detect'],['detectable']
Safety,I think it is safer to replace `size_t` by `long int` because in some cases `int` may overflow. I haven't looked at the specific cases in this PR though.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1200#issuecomment-418175615:14,safe,safer,14,https://psicode.org,https://github.com/psi4/psi4/pull/1200#issuecomment-418175615,1,['safe'],['safer']
Safety,"I think it would be great if we team up on this. Math detection issue is an issue in almost every code I know and if we find a good solution, we make many people happy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537#issuecomment-264420312:54,detect,detection,54,https://psicode.org,https://github.com/psi4/psi4/issues/537#issuecomment-264420312,1,['detect'],['detection']
Safety,"I think it's slightly safer as these are evaluated left to right. It shouldn't be a problem, but good practice to be consistent throughout the whole code base to cast on the left.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1617#issuecomment-489083065:22,safe,safer,22,https://psicode.org,https://github.com/psi4/psi4/pull/1617#issuecomment-489083065,1,['safe'],['safer']
Safety,"I think present changes are okay. I missed FC case when I first wrote it, and I did not pay attention to it too much. I did not stuck to binary units. We may safely change 1024 to 1000 to make it canonical MB. @hokru @dgasmith",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1244#issuecomment-423211466:158,safe,safely,158,https://psicode.org,https://github.com/psi4/psi4/pull/1244#issuecomment-423211466,1,['safe'],['safely']
Safety,I think something's wrong with the new 1.3.0 pandas pkg minted a few hours ago. Avoiding it fixes the problem for adcc. May be simplest to add three lines to this PR: https://github.com/psi4/psi4/pull/2255/files . First line fixes the problem. Others a general update and debug line.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2251#issuecomment-883636314:80,Avoid,Avoiding,80,https://psicode.org,https://github.com/psi4/psi4/pull/2251#issuecomment-883636314,1,['Avoid'],['Avoiding']
Safety,"I think that I know where the linking against the Python library comes from. Usually when using CMake to build software, I am using the ccmake GUI and use the toggle option to show all available variables (as I usually also add compiler flags etc.). I noticed that cmake detected the correct Python interpreter (2.7.12), but it also had a variable for the Python library, which was pointing to /usr/lib64/libpython2.6.so (system Python that was installed with the operating system). In order to avoid mixing between different Python versions, I have set the CMake variable to the 2.7.12 version of the library. Maybe CMake picked it up this way and added it to the libraries that are linked. Thank you for pointing me to the tests in the samples directory. Best regards",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-275138618:271,detect,detected,271,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275138618,2,"['avoid', 'detect']","['avoid', 'detected']"
Safety,"I think that renaming is perhaps the safest solution; without namespacing these kinds of macros it's possible to run into a situation where the two codes have the same macro name that returns a different result, which would cause chaos. If you just want to get rid of the warnings (given that we know that L2 and Psi4 both have the same meaning of `INT_CART`) we could also just ensure that the L2 headers are included before Psi4 defines the macros; the `#if !defined(INT_CART)` will ensure we don't redefine the macro.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2413#issuecomment-1021327038:37,safe,safest,37,https://psicode.org,https://github.com/psi4/psi4/pull/2413#issuecomment-1021327038,1,['safe'],['safest']
Safety,"I think the desire to change the name was to reflect that it can be used for other general-purpose (_i.e._ not only evaluated at nuclei) ESP routines, such as grid properties. IIRC, those integrals are just the regular potential ints, modified to allow arbitrary centers to be provided. At one point in time they were strictly Cartesian AO only, to avoid multiple transformations (contraction should be performed with backtransformed D matrices in that case), but I'm not certain that's true anymore.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/878#issuecomment-351194994:349,avoid,avoid,349,https://psicode.org,https://github.com/psi4/psi4/pull/878#issuecomment-351194994,1,['avoid'],['avoid']
Safety,"I think the main issue is that `detci` is somehow relying on the data in `Wavefunction`, but it's not checking whether its configuration is valid. There is actually a preceding error message ; ```; (set_ras_parms): detecting 1 electrons in RAS III for irrep 0.; Some parts of DETCI assume all elec in I and II; ```; but this really should crash the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1693#issuecomment-520836143:215,detect,detecting,215,https://psicode.org,https://github.com/psi4/psi4/issues/1693#issuecomment-520836143,1,['detect'],['detecting']
Safety,"I think there's more variations and potential collisions, even within one user's environment, than can really be predicted and caught. In the inversion branch, we've started catching the gcc <4.9 error signature and printing a this-is-probably-what's-wrong message. Expanding that error catching and printing the customized path to the `link.txt` file is probably the best bet. [This](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/scripts/setenv.py) is a runtime env diagnosis script I wrote once. It didn't catch on, but it could be expanded for rpath.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252942976:113,predict,predicted,113,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252942976,1,['predict'],['predicted']
Safety,I think this would be great to do and probably doable with a bit of help from someone who has experience with Windows builds. I would (hazard) to guess the total sum of hours the Psi team has touched MSVC can be counted on a single hand.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-381701562:135,hazard,hazard,135,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-381701562,1,['hazard'],['hazard']
Safety,"I think you're correct, but I don't see that from the output of `git diff 772caf9bad7aaddc27265c8c5349be3d85f4db98 input.dat`, which reads as. ```; -scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True, der_type=1); +scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True, dertype=1); compare_values(wfn_dz.frequencies().get(0), 1809.2345729, 2, ""SCF/cc-pVDZ Frequency 1"") #TEST; compare_values(wfn_dz.frequencies().get(1), 3923.1569958, 2, ""SCF/cc-pVDZ Frequency 2"") #TEST; compare_values(wfn_dz.frequencies().get(2), 4020.1821381, 2, ""SCF/cc-pVDZ Frequency 3"") #TEST; +#; +# These lines use the analytic frequency algorithm instead, but the angular momentum is too high for; +# the Travis tests. Uncomment the next four lines if you want to test analytic frequencies and have; +# a version of psi4 compiled with sufficiently high angular momentum.; +#; +##scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True); +##compare_values(wfn_dz.frequencies().get(0), 1809.279, 2, ""SCF/cc-pVDZ Frequency 1"") #TEST; +##compare_values(wfn_dz.frequencies().get(1), 3923.138, 2, ""SCF/cc-pVDZ Frequency 2"") #TEST; +##compare_values(wfn_dz.frequencies().get(2), 4020.128, 2, ""SCF/cc-pVDZ Frequency 3"") #TEST; ```. It looks like the only (non-comment line) change was the switch from `der_type` to the correct `dertype` keyword. We only had finite difference Hessians before, so the `der_type` keyword was irrelevant. I had to correct it to avoid getting analytic Hessians to run. It doesn't look like the reference values have been changed, and in both the old and new versions the frequencies should come from finite differences.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235107538:1424,avoid,avoid,1424,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235107538,1,['avoid'],['avoid']
Safety,"I thought it might be useful to share the failed tests of psi4 (using commit e4070d0024742579a445) on our systems. We have 4 failed tests:. ```; The following tests FAILED:; 223 - opt10 (Timeout); 240 - pubchem1 (Failed); 241 - pubchem2 (Failed); 255 - pywrap-opt-sowreap (Failed); 264 - sapt4 (Failed); ```. The `pubchem` is probably just the firewall blocking stuff. Several times I've seen things like:. ```; 253: Unable to read the PSI4 Python folder - check the PSIDATADIR environmental variable; 253: Current value of PSIDATADIR is /user/scratch/gent/vsc403/vsc40307/EB/swalot/software/PSI/4.0b6-20160201-intel-2016a-mt-Python-2.7.11/share/psi4; ```. Where the value of `PSIDATADIR` is the install path instead of the build path. I think `pywrap-opt-sowreap` fails because of this. For the `sapt4` test:. ```; 264/305 Testing: sapt4; 264/305 Test: sapt4; Command: ""/apps/gent/CO7/haswell-ib/software/Python/2.7.11-intel-2016a/bin/python"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/runtest.py"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/sapt4/input.dat"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/testresults.log"" ""false"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d"" ""false"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/sapt4/output.dat"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/bin/psi4""; Directory: /dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/sapt4; ""sapt4"" start time: Feb 15 13:13 CET; Output:; ----------------------------------------------------------; Traceback (most recent call last):; File ""<string>"", line 65, in <module>; File ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/lib/pytho",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253:187,Timeout,Timeout,187,https://psicode.org,https://github.com/psi4/psi4/issues/253,1,['Timeout'],['Timeout']
Safety,"I tried this, but then it is back to complaining about intel-linux being redefined in project-config.jam. This is really weird since project-config.jam has a conditional that is apparently supposed to avoid this, but it does not work for some reason. So, I solved that by adding a command to boost/CMakeLists.txt that modifies project-config.jam with sed to eliminate the redefinition of intel-linux. So I am closing this issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/196#issuecomment-170054358:201,avoid,avoid,201,https://psicode.org,https://github.com/psi4/psi4/issues/196#issuecomment-170054358,1,['avoid'],['avoid']
Safety,"I use psi4 v1.7 to perform gradient calculations under the WB97M-D3BJ/DEF2-TZVPPD level. Most structures work fine, but I get the following error in some structures without a clear error message. ```; ==> Integral Setup <==. PSIO_ERROR: unit = 97, errval = 12; forrtl: error (76): Abort trap signal; Image PC Routine Line Source; libgdma.so 00007F6F7C68B10F for__signal_handl Unknown Unknown; libpthread-2.28.s 00007F6F9C906B20 Unknown Unknown Unknown; libc-2.28.so 00007F6F9BDDC37F gsignal Unknown Unknown; libc-2.28.so 00007F6F9BDC6DB5 abort Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B535A Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B53C5 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B5658 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B5A129 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B69438 _ZN3psi4PSIO2rwEm Unknown Unknown; core.cpython-310- 00007F6F88B6B963 _ZN3psi4PSIO5writ Unknown Unknown; core.cpython-310- 00007F6F88B566E9 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6DFBF4 Unknown Unknown Unknown; libpthread-2.28.s 00007F6F9C8FC14A Unknown Unknown Unknown; libc-2.28.so 00007F6F9BEA1DC3 clone Unknown Unknown; /var/spool/slurm/slurmd/job83930/slurm_script: line 27: 2245656 Aborted (core dumped); ```. I used conda to install psi4 in a new environment.; ```; psi4 1.7+6ce35a5 py310h769327c_1 psi4; ```. Below is the full log, which includes the geometry:. <details>. ```. Memory set to 7.451 GiB by Python driver.; Threads set to 4 by Python driver. Scratch directory: /scratch/njzjz/83930/; gradient() will perform analytic gradient computation. *** tstart() called on aerosol-020; *** at Fri May 26 20:10:38 2023. => Loading Basis Set <=. Name: DEF2-TZVPPD; Role: ORBITAL; Keyword: BASIS; atoms 1-33 entry C line 144 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 34-89 entry H line 14 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 90-101 entry N line ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:281,Abort,Abort,281,https://psicode.org,https://github.com/psi4/psi4/issues/2970,2,"['Abort', 'abort']","['Abort', 'abort']"
Safety,"I usually find their packages to be of excellent quality. Which is your bug report? I remember a lightning talk, I think, at a recent SciPy about efforts to bring openblas up to snuff. Apparently even all their internal tests (or maybe it was numpy's tests) weren't passing for a long time. I agree that runtime processor detection is a build dimension to which conda has not expanded. That's why psi uses Intel compilers to add some multiarch optimizations. But why should cpu detection affect the numerical results?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-387070709:322,detect,detection,322,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-387070709,2,['detect'],['detection']
Safety,"I was running the basis set diff-er (with mods) on these and got the summary below (black: unchanged to 8 decimals, yellow: changed, blue: new). So changes are fairly obscure except for 2zapa carbon.; <img width=""923"" alt=""Screen Shot 2021-07-23 at 10 19 12 AM"" src=""https://user-images.githubusercontent.com/2314730/126795680-fbf3104c-55f7-4b65-ac9c-18ae05c5f6b6.png"">; Magnitudes of changes seen in the next printouts. I did look into one of them (0.3945 <-- 0.39945 in 5zapa Li), and it tracked with psi's being the version 0 on BSE and the PR's being the version 1. So it's probably safe to assume this is all an upgrade. I'm with Jonathon on wanting to see what's changing.; <img width=""980"" alt=""Screen Shot 2021-07-23 at 10 17 10 AM"" src=""https://user-images.githubusercontent.com/2314730/126795684-17df1224-f2d7-4402-944e-ffed9edd4325.png"">; <img width=""1211"" alt=""Screen Shot 2021-07-23 at 10 16 48 AM"" src=""https://user-images.githubusercontent.com/2314730/126795688-24e6245e-05c9-4079-a44b-4f9bdddbb282.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2254#issuecomment-885679289:587,safe,safe,587,https://psicode.org,https://github.com/psi4/psi4/pull/2254#issuecomment-885679289,1,['safe'],['safe']
Safety,"I was trying to run a Gaussian-2 energy calculation for hydrogen disulfide, which appears in the original G2 test set: http://scitation.aip.org/content/aip/journal/jcp/94/11/10.1063/1.460205. The job terminated after calculating the MP4(SDTQ) total energy, with message:. RuntimeError: sanity check failed! Gaussian94BasisSetParser::parser: Unable to find the basis set for S in /opt/science/psi/psi4/share/psi/basis/6-311g_2df_p_.gbs. When I examine the 6-311g_2df_p_.gbs file, I see that it only has entries for H, He, Li, Be, B, C, N, O, F, Ne, K, Ca. According to the comment at the top of the file it's supposed to have been merged from 6-311G*\* and 6-311G on the EMSL Basis Set Exchange. I double checked on the BSE and these basis sets also have entries for Na, Mg, Al, Si, P, S, Cl, Ar, Ga, Ge, As, Se, Br, Kr, I, as expected.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/58:286,sanity check,sanity check,286,https://psicode.org,https://github.com/psi4/psi4/issues/58,1,['sanity check'],['sanity check']
Safety,"I went through a few interpretations of your sentence before responding as if you meant ""libxc-4.4 provides list A of functionals, so if psi detects 4.4 it will enable list A and any more functionals derivable from A. libxc-4.5 provides list A+B of functionals, so if psi detects 4.5 it will additionally enable list B."" So libxc-4.4 and 4.5 (numbers made up, of course) are the ""two upstream"". It's a nice vision and likely do-able. But I think we're still in the slog toward going from 0 to 1 libxc-?.? that's directly useable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451256090:141,detect,detects,141,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451256090,2,['detect'],['detects']
Safety,"I went to the link and typed ""which psi4"" in my terminal and got a return synonymous with the path being correct, I believe (so it said the code for the path should be redundant): [If you installed the Psi4conda distribution or installed the PSI4 conda package into the main environment of an Anaconda or Miniconda distribution and added that to your [PATH](https://psicode.org/psi4manual/master/external.html#envvar-PATH), as prompted, then which psi4 likely yields condadist/bin/psi4 and the PATH setting lines below are redundant.] . which psi4; /home/emkal/psi4conda/bin/psi4. Additionally, trying the two commands suggested also had errors in syntax I believe? I also tried psi4 --psiapi which gave me the path and pythonpath; I tried copying the output in substitution of the ""PYTHONPATH"" but it didn't make a difference. [1] export PYTHONPATH <conda-env-prefix-with-psi4>/lib/python3.10/site-packages/; File ""/tmp/ipykernel_10582/3886179417.py"", line 1; export PYTHONPATH <conda-env-prefix-with-psi4>/lib/python3.10/site-packages/; ^; SyntaxError: invalid syntax. [2] sys.path.append(<same>); File ""/tmp/ipykernel_10582/3391378744.py"", line 1; sys.path.append(<same>); ^; SyntaxError: invalid syntax",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3188#issuecomment-2195298996:168,redund,redundant,168,https://psicode.org,https://github.com/psi4/psi4/issues/3188#issuecomment-2195298996,2,['redund'],['redundant']
Safety,"I wondered how the pre-#1289 driver handled core cleaning when `optimize` called for a `hessian`. I discovered the handling was bugged. The following input file crashes when I try to run it on my control version of Psi, 287272b. The initial Hessian is fine because `GUESS` hasn't yet been set to `READ`. (I assume that happens somewhere in OPTKING.) After the first step, `GUESS` is set to read, causing the seventh displacement for the hessian to crash with `ValidationError: Cannot compute projection of different symmetries.` I had been under the impression that https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1454-L1455 existed precisely to avoid such things, so maybe those lines do something else?. ```; molecule h2o { ; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; points 3; geom_maxiter 7; full_hess_every 1 ; }. optimize('scf', dertype = 0); ```. EDIT: The conditions are more general than originally reported. Any findif hessian with `GUESS` set to `READ` will trigger the bug. The hessians computed by `full_hess_every` are just one particular instance.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1296:662,avoid,avoid,662,https://psicode.org,https://github.com/psi4/psi4/issues/1296,1,['avoid'],['avoid']
Safety,"I'd also vote for catching and aborting with a descriptive error, as opposed to temporarily unsetting and carrying on. If the method is part-FC part-all electron, then FC shouldn't be touched in the input.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1530#issuecomment-462905555:31,abort,aborting,31,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-462905555,1,['abort'],['aborting']
Safety,"I'd hazard we need something like ; ``` } else if (options_.get_str(""RELATIVISTIC"") == ""X2C"") {; outfile->Printf("" OEINTS: Using relativistic (X2C) overlap, kinetic, and potential integrals.\n"");. if (!rel_basisset_) {; throw PSIEXCEPTION(""OEINTS: X2C requested, but relativistic basis was not set."");; } ; X2CInt x2cint;; SharedMatrix so_overlap_x2c = so_overlap();; SharedMatrix so_kinetic_x2c = so_kinetic();; SharedMatrix so_potential_x2c = so_potential();; x2cint.compute(basisset_, rel_basisset_, so_overlap_x2c, so_kinetic_x2c, so_potential_x2c);. potential_mat->add(so_potential_x2c);; } ; ```; about [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/mintshelper.cc#L1338) but that's not a literal fix. @fevangelista, is that on the right track?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1758#issuecomment-558010826:4,hazard,hazard,4,https://psicode.org,https://github.com/psi4/psi4/issues/1758#issuecomment-558010826,1,['hazard'],['hazard']
Safety,"I'd just like to point out that the `""stage""` keyword can be set to anything (not only `""deltan""`), and it's used only to name the stage within the printing script. Perhaps prepending `""CBS {GRAND_NEED[dc]['d_stage'].upper()} TOTAL ENERGY""` might be safer to avoid possible clashing / overwriting of existing energies by the user?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2034#issuecomment-803274548:250,safe,safer,250,https://psicode.org,https://github.com/psi4/psi4/pull/2034#issuecomment-803274548,2,"['avoid', 'safe']","['avoid', 'safer']"
Safety,"I'd like to a) have the structure for adding new methods b) have a few basic methods. So slightly more polished dynamic_damping and trailing_convergence methods, and possibly a method for detecting oscillations? I think that the real blockbusters will be automatic Davidson following and instability detection, however those rely on the generalized davidson solver. P.S. I've also been playing around with inter-reference castups, which seem to be an effective way to get a quick guess for ROHF cases with up to moderate spin contamination (i.e. spin contamination metric of 1.0 or less). Not quite sure how or if that should be incorporated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1135#issuecomment-414476404:188,detect,detecting,188,https://psicode.org,https://github.com/psi4/psi4/pull/1135#issuecomment-414476404,2,['detect'],"['detecting', 'detection']"
Safety,"I'd like to run some calculations with modified nuclear attraction potentials that are expressible as user-defined ECPs, but I don't want the potential to replace any core electrons. I ran a test calculation for an argon atom using the aug-cc-pVDZ basis set and a custom ECP defined in a .gbs file as follows,. ```; AR 0 ; AR-ECP 0 0 ; spherical potential ; 1 ; 1 3.0 18.0 ; ```. Then I print out the ECP integrals produced by `mints.ao_ecp()` and I get a matrix with only zeros. However, when I change the ECP specification to replace 2 core electrons,. ```; AR 0 ; AR-ECP 0 2 ; spherical potential; 1; 1 3.0 18.0; ```. I now get (presumably) the actual ECP integrals, not a zero matrix. Interestingly, these ECP integrals are exactly the same for [He] core (2 electrons) and [Ne] core (10 electrons), but they are zeroed out for no core. Is there an unnecessary sanity check somewhere that zeroes out ECP integrals (or skips their calculation) if the number of electrons replaced by ECP is zero? If so, may I request dropping this check? The capability to compute zero-electron ECPs might be useful for dispersion-corrected atom-centered potentials (DCACPs) of Roethlisberger, DiLabio, ... and for computing nuclear integrals with a regularized Coulomb potential. P.S. I have never tested this thing prior to the move to LibECPInt.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2651:864,sanity check,sanity check,864,https://psicode.org,https://github.com/psi4/psi4/issues/2651,1,['sanity check'],['sanity check']
Safety,"I'd like to team up on this, but Psi4 is trying to get back into the science business from having been in the infrastructure business for much of the past year, so our rewriting energies are depleted. On the monolithic vs. modular, on the whole I agree with preferring the latter, but I'm thinking that math detection is also going to have to be installed alongside packages so system dependencies can be detected from installed projects, and a single alternate file like [FindPythonLibsNew](https://github.com/pybind/pybind11/blob/master/tools/FindPythonLibsNew.cmake) (originally from numpy, i think) is more palatable than installing half-a-dozen+ files. So I'm guessing that on the core math, we'll probably keep applying bandaids but will be glad to serve as a test bed in developing needed specs and solutions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537#issuecomment-264468397:308,detect,detection,308,https://psicode.org,https://github.com/psi4/psi4/issues/537#issuecomment-264468397,2,['detect'],"['detected', 'detection']"
Safety,"I'd prefer to keep the blurb simple, and if at all possible, separate tests from docs. Why not go with something like:; ```; @loriab : ; Your PR is modifying Psi4's documentation. To make your life easier, we've built ; the updated docs for you. You can preview your changes online at [netlify/...](), ; or locally by downloading [this zip archive](). Please incorporate any further changes by adding commits to this PR.; ```. The samples issue is more complex. I'd avoid trying to teach folks how to use git in an automated blurb. ```; @loriab:; Your PR is modifying Psi4's test suite. To keep the `samples` suite in sync with; `tests`, we have created an automated commit [checksum]() to your PR branch. Please review, merge, or otherwise address the changes proposed in the automated commit ; into your PR before merging the PR into Psi4's `master`. Feel free to ask for help in ; the PR if you have any questions.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2364#issuecomment-981706469:466,avoid,avoid,466,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-981706469,1,['avoid'],['avoid']
Safety,"I'll look into this. There aren't many people who might know here, which (sadly) cuts the detective work short.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/953#issuecomment-381466482:90,detect,detective,90,https://psicode.org,https://github.com/psi4/psi4/pull/953#issuecomment-381466482,1,['detect'],['detective']
Safety,"I'll make the remaining `cepa0` changes after #1850 comes in. It seems prudent to avoid _two_ PRs standardizing things in `occ`, `dfocc`, and `fnocc` at once. The issue can then close.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1872#issuecomment-618326982:82,avoid,avoid,82,https://psicode.org,https://github.com/psi4/psi4/issues/1872#issuecomment-618326982,1,['avoid'],['avoid']
Safety,"I'm fine defaulting it to `OFF`, to be honest! Probably safer that way, in regards to unforeseen errors/issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2018359606:56,safe,safer,56,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2018359606,1,['safe'],['safer']
Safety,I'm getting `Abort trap: 6` instead. OPTKING expecting a dihedral to print would certainly explain why #1921 reports that moving to Cartesians fixes this. I think there's a good chance your diagnosis is right.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1924#issuecomment-641913005:13,Abort,Abort,13,https://psicode.org,https://github.com/psi4/psi4/issues/1924#issuecomment-641913005,1,['Abort'],['Abort']
Safety,"I'm going a bit of topic. I tried to understand how the unit conventions were handled in PSI4 and I'd like to share the things I ran into. I'd suggest to keep it simple and use atomic units everywhere by default. It would be very helpful when any deviation from such a basic rule is made explicit. To keep it simple, the usage of non-atomic units can further limited to reading inputs or writing output files. At the moment, this does not seem to be the case, which is confusing. Some examples:. - The point that confused me in this issue: changing the unit to Angstrom in the molecule section also affects units in the QMMM charges. The latter is an implicit unit convention. I'm glad this is being fixed. If you want to support Angstrom from QMMM charges, add an explicit option for it. Something along the following lines could already be a simple solution:; ```python; embedding_charges = [; [1.0, array([0.0, 0.0, 2.0])*angstrom],; ]; ```. - In `case1/psi4.out`, the positions of the QMMM charges are printed in Angstrom while the preceding header mentions a.u. Also here, the unit convention is implicit, easily leading to confusion. - When looking e.g. at libmints, there seem to be unit conversions buried deep into the code, e.g. related to this issue: https://github.com/psi4/psi4/blob/bf127d90c4b40f2ab6471bd6de4f312c9a149b1d/psi4/src/psi4/libmints/extern.cc#L306-L323; That is just asking for trouble. The only good reason not to use atomic units is to interface with human beings or certain data containers following other conventions. I would suggest to avoid dragging unit conventions all the way into computational parts of the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625654314:1568,avoid,avoid,1568,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625654314,1,['avoid'],['avoid']
Safety,"I'm going over DFOCC now. It may not help, but certainly won't hurt. The reduced dependencies will improve parallelization, which may not help on Travis but will locally. The redundant files list is super useful, @dgasmith. We should certainly make sure that any functions contained therein are either tested (DFOCC, PSIMRCC, CC*, etc.) or removed (libqt, libciomr).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525#issuecomment-262127128:175,redund,redundant,175,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262127128,1,['redund'],['redundant']
Safety,"I'm not convinced it adds much to the cmake output (I've added a few more lines higher up and added LAZ to the message line you wanted me to add to prove to myself it was doing something!):. Output from: cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/usr/local/psi4; ```; -- Math lib search order is MKL;OPENBLAS;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl; -- Found BLAS: MKL (/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so); -- LAPACK will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl; -- Found LAPACK: MKL (/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so); -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; -- Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE) ; -- ; Properties for TARGET tgt::MathOpenMP:; tgt::MathOpenMP.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_LINK_LIBRARIES = ""MathOpenMP_LIBRARIES-NOTFOUND;OpenMP::OpenMP_CXX"". -- ; Properties for TARGET OpenMP::OpenMP_CXX:; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_OPTIONS = ""$<$<COMPILE_LANGUAGE:CXX>:-fopenmp>""; OpenMP::OpenMP_CXX.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_LINK_LIBRARIES = ""/usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so""; Properties for TARGET tgt::MathOpenMP:; tgt::MathOpenMP.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516:908,Detect,Detecting,908,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516,1,['Detect'],['Detecting']
Safety,"I'm not sure what the problem is but this works fine, I'm happy to say :). set optking {. frozen_dihedral = ("". 5 1 2 6. 4 1 2 6. 3 1 2 6. ""). }. #optimize(""hf/3-21G""). import optking. set basis 3-21g. optking.optimize_psi4('hf'). On Fri, Jan 15, 2021 at 6:42 PM Lori A. Burns <notifications@github.com>; wrote:. > Can be fixed with a bigger basis like cc-pvdz. The gradient is fine, so I; > think the trouble is in predicting the next geom step, so may be of; > interest to @psi-rking <https://github.com/psi-rking>; >; > molecule {; > 0 1; > C -0.167039 -0.712374 -0.022325; > O 0.119573 0.677072 0.056530; > H -0.453842 -0.989160 -1.036819; > H -0.997038 -0.962046 0.638968; > H 0.691232 -1.312038 0.284396; > H 0.775814 0.817745 0.757350; > }; >; > set optking {; > frozen_dihedral = (""; > 5 1 2 6; > 4 1 2 6; > 3 1 2 6; > ""); > }; > #set {; > # geom_maxiter 2; > # g_convergence GAU_LOOSE; > #}; > #memory 6GB; > #set_num_threads(6); > #psi4_io.set_default_path(""/home/phy/Desktop/projects/2021/amoeba/test/poltype/scratch/Psi4-methanol""); > #for _ in range(1):; > # try:; > # optimize('hf/3-21G'); > # break; > # except OptimizationConvergenceError:; > # break; > # else:; > # try:; > # set opt_coordinates cartesian; > # optimize('hf/3-21G'); > # break; > # except OptimizationConvergenceError:; > # pass; > #clean(); >; > optimize(""hf/3-21G"") # segfaults; > #optimize(""hf/cc-pvdz"") # 4 iter; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/2084#issuecomment-761275679>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AA4C4TBAEFTYTU5HYJQMMSDS2DOHPANCNFSM4WETR7OA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2084#issuecomment-761373278:416,predict,predicting,416,https://psicode.org,https://github.com/psi4/psi4/issues/2084#issuecomment-761373278,1,['predict'],['predicting']
Safety,"I'm posting this for discussion before I start coding anything. I was hoping to have some more details on prefactors, but I've both fallen ill and been given a shift in priorities, so I'm posting what I have in the interests of not wasting more time. I'm hoping to have more to say on the prefactor problem when I've recovered. @kcpearce's plans for MP2 hessians are related, but not the part of the project that I'll be focusing on. ## Motivation; Several different groups of Psi developers are dissatisfied with Psi's current technology for correlated derivatives.; * At Emory, @fevangelista has recently implemented gradients for DSRG-PT2 via a standalone code interfaced to Psi. Getting those working required consulting three(!) other experienced Psi developers and borrowing code from a fourth because the assumptions of the `libmints/libtrans` machinery are undocumented and confusing.; * At University of Georgia, the DCT code currently has to go through several contortions to be compatible with the gradient code. It has to [rewrite part of libtrans for RHF gradients](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_sort_mo_tpdm.cc) because the developer could not figure out what to send libtrans otherwise. It has to [convert LibDPD buffers into LibIWL](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L4815) buffers so `libtrans` can [convert those back to LibDPD buffers](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/integraltransform_sort_mo_tpdm.cc), but sorted differently. It also has to [re-index](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L3839) its own 1PDM and energy-weighted density matrix, and merge [density matrix blocks into a single density matrix](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L3789). These tasks shouldn't be necessary.; * @edeprince3 has also [rewritten parts of libtrans](https://github.com/edeprince3/v2rdm_casscf/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:317,recover,recovered,317,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['recover'],['recovered']
Safety,"I'm pretty sure those files are present only because you did an internal build of L2. That is, the files weren't provided by the Psi4 project, except as a build detail; they were provided by the Libint project. Placing them behind a namespace would hinder the easy equivalence of L2-detected-from-prebuilt-external and L2-internal-build. Also, if you have an external L2 package and it's the default-ordering v2.7.2 you mentioned yesterday, I think psi could get confused between them at runtime. Am I mis-analyzing this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2681#issuecomment-1213362219:283,detect,detected-from-prebuilt-external,283,https://psicode.org,https://github.com/psi4/psi4/issues/2681#issuecomment-1213362219,1,['detect'],['detected-from-prebuilt-external']
Safety,I'm trying 1.0rc on a system with 128 GB of RAM. I've put `memory 90 gb` in the input file (meaning 70% of the memory) and started a calculation. What I see is that the memory usage indeed doesn't go above 70% but lots of swap is being used. This is not what I want: how do I avoid PSI of using more memory and starting swapping?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/424:276,avoid,avoid,276,https://psicode.org,https://github.com/psi4/psi4/issues/424,1,['avoid'],['avoid']
Safety,"I'm trying to compile your branch, to test on my machine, but keep hitting an incompatibility related to a `toupper` macro. Have you ever seen this before?. ```; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/p_fprintf.cc:30:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/parallel.h:40:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/process.h:38:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/liboptions/liboptions.h:43:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libpsi4util/exception.h:33:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/sstream:174:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/ostream:138:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/ios:216:; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/__locale:466:15: error: C++ requires a type; specifier for all declarations; char_type toupper(char_type __c) const; ^; /Users/andysim/miniconda/include/python2.7/pyport.h:731:29: note: expanded from macro 'toupper'; #define toupper(c) towupper(btowc(c)); ```. Both the HomeBrew and Conda versions of Python seem to have this issue. I just did a simple `cmake -DCMAKE_BUILD_TYPE=Debug ..` to configure, and it found the appropriate Python libs (I also removed the HomeBrew Python completely, to force Conda to be used.). I can see what the problem is, but I have no idea why it's occuring now, _i.e._, which flags we used before to avoid the problem. Any ideas?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235109795:1751,avoid,avoid,1751,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235109795,1,['avoid'],['avoid']
Safety,"I'm using `mp.set_start_method('spawn', force=True)` which seemed long-term safe (cf [this Python discussion](https://discuss.python.org/t/switching-default-multiprocessing-context-to-spawn-on-posix-as-well/21868)), although perhaps `forkserver` would be just as safe. I had to do some refactoring elsewhere to get this to work but it ultimately worked out, so this isn't blocking me. Still, it would be nice not to have to worry about this behavior - not sure what in Psi4 breaks with `fork`, or if it's easily fixable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3189#issuecomment-2211335778:76,safe,safe,76,https://psicode.org,https://github.com/psi4/psi4/issues/3189#issuecomment-2211335778,2,['safe'],['safe']
Safety,"I've had similar problems (location of scratch files) on HPC systems, but; have found Psi4's current machinery adequate for working with them.; Ultimately I am going to suggest a veto of this pull. I'm particularly worried because I have never used an HPC that uses those; variables. I've used 5 or 6 different machines and the variable has always; been $SCRATCH (or some variation of it) so I don't think the proposed; default conventions are wide spread. Second based on community sentiment,; I think we should avoid C++11 for the time being as it seems at least some; of our users are not ready for the switch (for the record I am the current; primary user of C++11 in the Psi4 source and am actively phasing it out to; get us back to C98). I'm also under the impression that reading; environment variables is typically done in Python for Psi4 and I think that; is where such things should be done long term anyways. Personally for this problem the solutions on the Psi4 webpage,; http://sirius.chem.vt.edu/psi4manual/4.0b5/external.html, have worked great; for me. In particular setting this in your .psi4rc file is a convenient; way to accomplish this on a per machine basis. I haven't actually rejected the pull so other developers feel free to veto; my veto if I missed something (particularly @lorilab who I suspect is the; pro on these sorts of environment things). Ryan. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 8:21 AM, ""wpoely86"" notifications@github.com wrote:. > On some systems, the default temp location should not be /tmp; > but it is set by either $TMPDIR, $TEMP or $TMP (commenly done on HPC; > systems, where the temp location may be somthing special, a ssd for; > example).; > This patch first checks those 3 environment variables; > and uses its value when set. It falls back to /tmp when; > nothing is set.; > ; > ## std::getenv needs C++11 to be thread safe.; > ; > You can view, comment on, or merge this pull request online at:;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105036059:513,avoid,avoid,513,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105036059,1,['avoid'],['avoid']
Safety,"I've tweaked the https://github.com/MolSSI/QCEngine/pull/393/files PR slightly, and I think it's ready for merge. Here, I've added a few tests (b97-3c, r2scan2-3c, and r2scan2-d4) and tried them with several combinations of old/new gcp, old/new dftd3, and 3.4/3.5 dftd4, so I'm semi-confident they run when they ought and give helpful errors when they can't. The tests I added cover energy and gradient, but they're purely internal -- no reference values from a separate implementation. What further tests are wanted?. The labels/selectors for pytest should be in good shape (that is, tests will skip if wrong gcp/d3/d4 detected). CTest selectors aren't in good shape, so if you get helpful ""can't run"" errors, that's expected; wrong values aren't expected.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842#issuecomment-1672766348:620,detect,detected,620,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1672766348,1,['detect'],['detected']
Safety,"I've written a patch to allow for a custom frozen policy that is a bit clunky but safer than `num_frozen_docc` (because it applies per-atom rules, so works properly for cases like SAPT, MBIS_VOLUME_RATIOS, etc) -- once I can be sure this builds in vanilla psi4 (trying now) I will re-run my test jobs and submit the patch. . Still not sure what to do about `scf::HF::compute_fcpi` because I'm still a newbie to the code base (and this patch does NOT fix that issue).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1208404402:82,safe,safer,82,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1208404402,1,['safe'],['safer']
Safety,"IIRC a common problem with alkali and alkaline elements is that the core levels can lie higher up in energy than the valence electrons in other species. Defining the core levels via e.g. population analysis ([Rassolov et al, Chem. Phys. Lett. 350, 573 (2001)](https://doi.org/10.1016/S0009-2614(01)01345-8) can be used to avoid this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2012#issuecomment-702870857:322,avoid,avoid,322,https://psicode.org,https://github.com/psi4/psi4/issues/2012#issuecomment-702870857,1,['avoid'],['avoid']
Safety,"Ideally there should be a test-case attached sooner rather than later. I think a simple-but-intuitive way to do this would be to add a keyword named something like `irc_n_steps` which tells OPTKING to `return OptReturnSuccess` after a given number of converged IRC points. Then you could do something like `set irc_n_steps 10` in your test case to avoid passing through the minimum, after which the steps may become unpredictable. I could help with that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-351224954:348,avoid,avoid,348,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-351224954,1,['avoid'],['avoid']
Safety,"If I build psi4 and then run make distclean, I do not get the initial tarball content again, as the script doc/sphinxman/document_tests.pl overwrites samples/SUMMARY and some samples with new content. This makes Debian source package building fail after a build:. dpkg-source: info: local changes detected, the modified files are:; psi4.0b5/samples/SUMMARY; psi4.0b5/samples/dcft1/input.dat; psi4.0b5/samples/dcft4/input.dat; psi4.0b5/samples/dcft5/input.dat; psi4.0b5/samples/dcft6/input.dat; psi4.0b5/samples/pywrap-alias/input.dat. I think it would be best if (i) the samples are written to the builddir, or (ii) the samples are not shipped in the tarball in the first place, assuming all of samples/ is being autogenerated during doc-creation/installation anyway.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/14:297,detect,detected,297,https://psicode.org,https://github.com/psi4/psi4/issues/14,1,['detect'],['detected']
Safety,"If a user sets the symmetry explicitly and then attempts to perform a finite difference calculation, Psi raises `Fatal Error: User specified point group is not a subgroup of the highest detected point group.` This problem does not occur if the user does not explicitly provide the symmetry. The problem also occurs if `reset_point_group` is used. Example input below. I don't know enough about Psi's symmetry and molecule tech to tell if this is a problem that needs to be fixed findif side or molecule side. If this needs to be fixed findif side, I'll take it for obvious reasons. If not, then if this isn't fixed by the time findif is done, I'll take this anyways. I've had a vendetta against this bug since November. ```; molecule h2o {; symmetry c2v; O; H 1 0.9894093; H 1 0.9894093 2 100.02688; }. set {; basis sto-3g; d_convergence 11; scf_type pk; }. frequencies('scf', dertype=1, return_wfn=True); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1052:186,detect,detected,186,https://psicode.org,https://github.com/psi4/psi4/issues/1052,1,['detect'],['detected']
Safety,"If a user wants to make a potential energy curve or surface, it is very easy to generate nonsense when using cartesian coordinates. Using nocom and no_reorient fixes this, so maybe the driver should be setting these options if it detects such a case. ``` python; molecule beh2 {; Be 0.0 0.0 z; H 0.0 1.0 0.0; H 0.0 -1.0 0.0; }; molecule beh2_nocom {; Be 0.0 0.0 z; H 0.0 1.0 0.0; H 0.0 -1.0 0.0; nocom; no_reorient; }; activate(beh2); set basis sto-3g; set guess sad; for i in range (1,41):; z = i*0.1; beh2.z = z; e = energy('scf'); print z,e; set guess read; print ''. activate(beh2_nocom); set basis sto-3g; set guess sad; for i in range (1,41):; z = i*0.1; beh2_nocom.z = z; e = energy('scf'); print z,e; set guess read; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/59:230,detect,detects,230,https://psicode.org,https://github.com/psi4/psi4/issues/59,1,['detect'],['detects']
Safety,"If it solves this **and** library detection problems, then let's go for it. I notice that in [3.6](https://cmake.org/cmake/help/v3.7/release/3.6.html) they added support for compiler features also for Intel compilers, but maybe that's not as interesting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281110156:34,detect,detection,34,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281110156,1,['detect'],['detection']
Safety,"If it's just the installing-untested-prog aspect, I _think_ that which exe to run can be reset through the testing macros. So possibly, could register tests in both modes, staged and installed exe's. The risk of everything breaking in the install file rearrangement was deemed larger (and worth testing in its own right) than the trouble of installing, finding some tests broken, deleting the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235914479:204,risk,risk,204,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235914479,1,['risk'],['risk']
Safety,If so shall we push forward for this small change to avoid conflicts with #2775 that would occur if we changed everything to not return base class?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2795#issuecomment-1334709386:53,avoid,avoid,53,https://psicode.org,https://github.com/psi4/psi4/pull/2795#issuecomment-1334709386,1,['avoid'],['avoid']
Safety,"If the `--disable-addons` is your only change, then this is a good clue. What that flag does is still build against the necessities from conda (e.g., python, mkl, libint, libxc, gau2grid; the latter three are all safe C-only libraries) but not build any optional addons from conda (e.g., chemps2, pcmsolver, ambit, gdma, dkh). These optional addons can have their own deps (e.g., hdf5) and more languages (C++ and Fortran). So if not building against those solved your problem, then there's something fishy about one of those packages.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-406672389:213,safe,safe,213,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-406672389,1,['safe'],['safe']
Safety,"If this is only affecting CC wfn's then a full deep copy could be avoided. Instead, just deep copy the density in `ccdensity` before overwriting with the correlated density. . Note that the signature `psi::ccdensity::ccdensity(std::shared_ptr<Wavefunction> ref_wfn,...)` is misleading because at this point that function is passed the `psi::ccenergy::CCEnergyWavefunction`. That should work for a short term fix, however I agree that we have to come up with a better way to cache the SCF wavefunction quantities long term.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1478#issuecomment-454830318:66,avoid,avoided,66,https://psicode.org,https://github.com/psi4/psi4/issues/1478#issuecomment-454830318,1,['avoid'],['avoided']
Safety,"If we expand this issue to best practices, then a few lessons from #736 ; * Add as many headers as you like during development, but before making the PR, explicitly check if they're needed, and if so, move to source, not convenience header to minimize build impact.; * Avoid including any `py::` in `<top-lvl>/psi4/src/psi4` for the sake of build time. Instead, extend class (can't use private member data) in accompanying `<top-lvl>/psi4/src/export_<cls>.cc`. If you feel you need a `py::` in `<top-lvl>/psi4/src/psi4`, contact the core-devs to see if a work-around can be devised.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/752#issuecomment-312340409:269,Avoid,Avoid,269,https://psicode.org,https://github.com/psi4/psi4/issues/752#issuecomment-312340409,1,['Avoid'],['Avoid']
Safety,"If you want to try the new compilers version, create a new environment `conda create -n psi4 python=3.6 -c psi4/label/agg` (only things from psi4 channel in `conda list` should be psi4, libint, libxc). Should be safe to install jupyter in the same env. Strongly suggest jupyter (and numpy) from defaults (where they're well into the process of rebuilding everything with the new compilers), not conda-forge (where they're considering how to use them). I've been getting psi4 to build this way for less than a day, so it's very much a trial package. If that doesn't work (and I won't be able to test it myself until Monday), no, there's nothing actionable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-345422371:212,safe,safe,212,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345422371,1,['safe'],['safe']
Safety,"If you would, please. Sanity checks never hurt. Anything that's doubled in `select_ccsd()`. Can remove https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L721-L722 and https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L743-L744 along with the detci docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/966#issuecomment-381811539:22,Sanity check,Sanity checks,22,https://psicode.org,https://github.com/psi4/psi4/pull/966#issuecomment-381811539,1,['Sanity check'],['Sanity checks']
Safety,"Im actually getting the errors after make -j\`..\`. The output of make -j... is ; [make errors.txt](https://github.com/psi4/psi4/files/1159909/make.errors.txt). And the output of cmake is. ```; pc0108717:psi4 edq$ sudo cmake -H. -Bobjdir -DPYTHON_EXECUTABLE=/opt/local/bin/python -DPYTHON_LIBRARY=/opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib -DPYTHON_INCLUDE_DIR=/opt/local/Library/Frameworks/Python.framework/Versions/3.6/include/python3.6m; -- The C compiler identification is AppleClang 8.0.0.8000042; -- The CXX compiler identification is AppleClang 8.0.0.8000042; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, App",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:868,Detect,Detecting,868,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,4,['Detect'],['Detecting']
