quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Performance,"The test that is currently failing is a test in `gcp/pbeh3c/`. This is due to an optking side issue where the `CustomHelper` class being used by optking is not accepting a `psi4.core.Molecule` the type checking was looking for `qcdb.Molecule`. As a backup optking defaulted to psi4's active molecule. This is the call.; `E = optimize('pbeh3c/def2-msvp', molecule=unopethene)`. optking takes the molecule here in the driver and uses a default fallback instead: ; ` opt_object = optking.opt_helper.CustomHelper(molecule, params=optimizer_params)`. The type check will get changed in optking to include `core.Molecule`. An alternative question this raises for me is whether the active_molecule should get updated at some point in the optimization. Updating the active molecule patches the issue but is that desired?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1259849511:325,optimiz,optimize,325,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1259849511,2,['optimiz'],"['optimization', 'optimize']"
Performance,"The two bottlenecks that you have identified are the computation of the ESP at the tesserae and then computing the contribution of the resulting charges back to the Fock matrix. Both terms use the exact same one-electron potential integrals, which are not very efficient in the current version and are computed in serial. The serial performance issue is addressed in #592, but we can probably do even more improvement of the OS recursions to speed up these one electron ints, whose cost is negligible in regular QM calcs. Unlike explicit water QM/MM runs, we can't really do much by way of screening here I don't think, but I haven't pursued that. A simple OpenMP parallelization will go a long we here, however. I'm also looking into how to implement ddCosmo as a backend; although PCMSolver is not the bottleneck here, it'd be really helpful to have analytic gradients with implicit solvent.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1280#issuecomment-438810742:8,bottleneck,bottlenecks,8,https://psicode.org,https://github.com/psi4/psi4/issues/1280#issuecomment-438810742,6,"['bottleneck', 'perform']","['bottleneck', 'bottlenecks', 'performance']"
Performance,"The unfortunate answer is Psi4's support for atoms past krypton (perhaps a bit optimistic) is very limited. In short this stems from our inability to handle effective core potentials. We are currently discussing how to better address this for the next major release of Psi4, which is likely a long ways away; however, in the meantime I think what you want to do is not possible with Psi4. My recommendation is to consider the Q-Chem package, which is also capable of performing SAPT (energy decomposition) and does have support for atoms past krypton.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/76#issuecomment-78986839:467,perform,performing,467,https://psicode.org,https://github.com/psi4/psi4/issues/76#issuecomment-78986839,1,['perform'],['performing']
Performance,"Then may I also suggest turning off the cache entirely? It was a good idea in theory, but it leads to memory fragmentation and eventually calculations crash due to allocation errors. It's possible that this problem is manifested in the crash you're observing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1246009485:40,cache,cache,40,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1246009485,1,['cache'],['cache']
Performance,"There's a rebuild of all the psi4 packages up (build `_2`) including `osx_arm64`. * **Please test `osx_arm64`**. These are build by cross-compile and in a direction that can't be emulated, so they have _never been run_. ; * You can run the full test suite through pytest. Point it at `pytest $CONDA_PREFIX/lib/python*/site-packages/psi4/tests/`. Especially test threaded (but be aware of #2941 expected failures (also cc44, but that's behaving correctly to fail)).; * Be aware that c-f encourages packages to be built against a generic blas/lapack, so the user can select the blas implementation at runtime. (directions at https://conda-forge.org/docs/maintainer/knowledge_base.html#switching-blas-implementation); * Usual archs `linux-64`, `osx-64`, `win-64` _don't_ do as encouraged above and instead link directly to MKL since we didn't want to switch expectations and performance that drastically. But Intel MKL isn't available for `osx-arm64` (quelle suprise). So I did the generic blas/lapack setup for this arch. You can choose `libblas=*=*openblas` or `libblas=*=*accelerate` for this arch. I'd be curious to hear about both. You'll get openblas if you don't specify.; * I've tested openblas on linux-64, and as long as you choose the openmp openblas variant, not the pthreads one, it works correctly (only the openmp variant is available for `osx-arm64`, so all's well). Timings were ~5% slower over MKL, so operable and perfectly respectable. I didn't test the SAPT jobs that iirc were the trouble with openblas before.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1529304015:872,perform,performance,872,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1529304015,1,['perform'],['performance']
Performance,"There's another problem: using the standard Python search, I get the error; ```; -- Found HDF5: /usr/lib64/libhdf5.so;... (found version 1.12.1); -- Performing Test HAS_FLTO; -- Performing Test HAS_FLTO - Success; -- Found pybind11: /usr/include (found version 2.11.1); -- Found CheMPS2: /usr/lib64/libchemps2.so.3 (found version 1.8.9); -- Found gau2grid: /usr/lib64/libgg.so.1 (found version 1.3.1); CMake Error at cmake/FindPythonModule.cmake:82 (if):; if given arguments:; ""STREQUAL"" ""True""; Unknown arguments specified; Call Stack (most recent call first):; external/upstream/qcelemental/CMakeLists.txt:3 (find_python_module); -- Configuring incomplete, errors occurred!; RPM build errors:; error: Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Child return code was: 1; ```; and sure enough ; ```; external/upstream/qcelemental/CMakeLists.txt: include(FindPythonModule); external/downstream/snsmp2/CMakeLists.txt: include(FindPythonModule); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491:149,Perform,Performing,149,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491,2,['Perform'],['Performing']
Performance,"There's some `xrange` that py3 wants converted to `range`. They don't look to be over big lists, so shouldn't hurt py2 performance. Py2 problem is . ```. Transforming MOs to the semicanonical basis; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/proc.py"", line 4340, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 409, in mcscf_solver; build_semicanonical_mos(ciwfn); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 91, in build_semicanonical_mos; Cnew = core.Matrix.doublet(ciwfn.Ca(), U, False, False); RuntimeError: ; Fatal Error: Matrix::doublet: Dimension mismatch; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-304462078:119,perform,performance,119,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304462078,1,['perform'],['performance']
Performance,These are the lowest eigenvalues of the electronic Hessian showing you that you are not in a minimum. ; You can either search for a SCF guess that works or run it as a UHF calculation and use the `follow` keyword. Compiling on mac is fine but multi-threading might not work well. I also use a mac. You might want do this: http://psicode.org/psi4manual/master/conda.html?highlight=advisor#how-to-use-conda-to-compile-psi4-faster-and-easier; The `psi4-dev` package can be installed to your existing psi4 dev version from psi4/label/dev. It installs compilers and needed libraries.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1878#issuecomment-623964793:243,multi-thread,multi-threading,243,https://psicode.org,https://github.com/psi4/psi4/issues/1878#issuecomment-623964793,1,['multi-thread'],['multi-threading']
Performance,"They will be when pyvib2 branch PR goes in. . Sent from my iPhone. > On Mar 19, 2018, at 6:10 AM, Raimondas Galvelis <notifications@github.com> wrote:; > ; > Optimize and compute vibrational frequencies of a molecule:; > ; > # test.py; > import psi4; > ; > print(psi4.__version__); > ; > psi4.geometry('H -0.4 0 0\nH 0.4 0 0'); > psi4.opt('HF/3-21G'); > _, wfn = psi4.freq('HF/3-21G', return_wfn=True); > ; > print(wfn.hessian().to_array()); > print(wfn.frequencies().to_array()); > print(wfn.normalmodes()); > The hessian matrix and frequencies are in Wafefucntion object, as expected, but the normal mode vectors are missing, i.e. wfn.normalmodes() return None.; > ; > $ python test.py ; > 1.2a1.dev781; > ; > ... skipped ...; > ; > [[ 4.13907957e-01 -1.38565530e-17 -9.84797134e-18 -4.13907957e-01; > 1.38565530e-17 9.84797134e-18]; > [-1.38565530e-17 -7.17030485e-05 5.29623161e-18 1.38565530e-17; > 7.17030485e-05 -5.29623161e-18]; > [-9.84797134e-18 5.29623161e-18 -7.17030485e-05 9.84797134e-18; > -5.29623161e-18 7.17030485e-05]; > [-4.13907957e-01 1.38565530e-17 9.84797134e-18 4.13907957e-01; > -1.38565530e-17 -9.84797134e-18]; > [ 1.38565530e-17 7.17030485e-05 -5.29623161e-18 -1.38565530e-17; > -7.17030485e-05 5.29623161e-18]; > [ 9.84797134e-18 -5.29623161e-18 7.17030485e-05 -9.84797134e-18; > 5.29623161e-18 -7.17030485e-05]]; > [4658.84858151]; > None; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/940#issuecomment-374186796:158,Optimiz,Optimize,158,https://psicode.org,https://github.com/psi4/psi4/issues/940#issuecomment-374186796,1,['Optimiz'],['Optimize']
Performance,"This PR solves one clear lack-of-threading problem with MKL. But we've had hints of a more elusive one where threading-or-not depends on MKL library load order. Be on the looking for this. To check both threads issues, I've checked in a timings script (originally Daniel's) [here](https://raw.githubusercontent.com/loriab/psi4/b381e6c0865f3e47986044a409e4c7e7b1f21757/tests/python/threading/input.py) to compare p4 vs np threading and n1 vs nmax threading.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615#issuecomment-279194347:149,load,load,149,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-279194347,2,['load'],['load']
Performance,"This advice is fine. Try `opt_coordinates = 'cartesian'` (which worked for me); But I just tried with the psi4 on my macbook 1.4rc3.dev3, and the optimization ran perfectly smoothly. Also, there is a confusingly named but powerful keyword `dynamic_level = 1`. This will cause alternative optimization algorithm to run if the first one fails.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2208#issuecomment-868809362:146,optimiz,optimization,146,https://psicode.org,https://github.com/psi4/psi4/issues/2208#issuecomment-868809362,2,['optimiz'],['optimization']
Performance,"This also needs to be marked ""bug fix"". Without this PR, `full_hess_every` is broken for fc-MP2 optimizations because `dertype` isn't propagating correctly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1551#issuecomment-466447944:96,optimiz,optimizations,96,https://psicode.org,https://github.com/psi4/psi4/pull/1551#issuecomment-466447944,1,['optimiz'],['optimizations']
Performance,"This erratic behavior is caused by several problems in the optimizer (one of which being the maximum step size getting needlessly scaled down). However, I believe I've solved all the problems and can now generate a nice, smooth torsional potential curve in C2 symmetry. I'll push the fix soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-202110158:59,optimiz,optimizer,59,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-202110158,1,['optimiz'],['optimizer']
Performance,"This has another annoying consequence, noted on a [forum topic](http://forum.psicode.org/t/problems-with-geometry-convergence-in-dihedral-scan/1808). When attempting the basis guess, it will attempt to read previous orbitals but not find them. The following appears in the output file.; ```; Warning! Guess was READ without Ca set, switching to CORE! ; This option should have been configured at the driver level.; ```; The use of core may be a very terrible choice indeed, which caused the issues in the forum topic. Here's a simplified example:; ```; molecule phenol {; 0 1; H 0.0000000000 0.9803530335 -0.8498671785; O 0.0000000000 0.6988545188 0.0536419016; O 0.0000000000 -0.6988545188 0.0536419016; H 0.0000000000 -0.9803530335 -0.8498671785; }. set {; basis cc-pvdz; }. set scf {; basis_guess true; maxiter 300 ; fail_on_maxiter false; }. dihedrals = [i for i in range(0,185, 5)] ; PES = []. for phi in dihedrals:; my_string = ""1 2 3 4 "" + str(phi); set optking geom_maxiter = 250 ; set opking opt_coordinates = cartesian; set optking fixed_dihedral = $my_string; print(phi); try:; E = optimize('scf'); print(E); PES.append((phi, E)) ; except SCFConvergenceError:; continue ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1492#issuecomment-639150732:1093,optimiz,optimize,1093,https://psicode.org,https://github.com/psi4/psi4/issues/1492#issuecomment-639150732,2,['optimiz'],['optimize']
Performance,This is a known issue with the Intel compiler and gcc 5+ header files. Even the latest Intel version 16.0.1 is affected. NERSC advises loading in gcc 4.9.x series. References:; [Intel Forum](https://software.intel.com/en-us/forums/intel-c-compiler/topic/565143); [Intel Fourm](https://software.intel.com/en-us/forums/intel-c-compiler/topic/591174); [NERSC](https://www.nersc.gov/users/software/compilers/intel-fortran-c-and-c/intel-bug-reports/intel-c-compiler-error-stl-iterator-base-types-h/),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262#issuecomment-185230186:135,load,loading,135,https://psicode.org,https://github.com/psi4/psi4/issues/262#issuecomment-185230186,1,['load'],['loading']
Performance,"This is an actual representative of the failed (large) optimizations that I; constantly get forwarded to me! :) I don't choose them. Do we not have a; way to leave test cases, even 'longertests' in there without them; interfering in the normal course?. The purpose of this tests is that it has challenging quasi-linear angles in; it. I have no objection to reducing the calculation. Perhaps removing the; polarization functions would be enough?. -Rollin. ## . Dr. Rollin A. King; Professor and Chair of Chemistry; Bethel University; rking@bethel.edu. On Mon, Feb 15, 2016 at 8:04 AM, Daniel Smith notifications@github.com; wrote:. > Ah yes, this is no longer a used test cases in wavefunction_pass.; > @psi-rking is it possible to reduce the basis set to something fairly quick?; > ; > Daniel Smith; > malorian@me.com; > ; > > On Feb 15, 2016, at 9:01 AM, Justin Turney notifications@github.com; > > wrote:; > > ; > > opt10 is too big for a test case: 15 atoms, C1 symmetry, 322 basis; > > functions, requests 32 GB of memory, and performing a transition state; > > geometry optimization with an initial Hessian by finite difference of; > > gradients. The calculation timed out on the 13 of 79 gradient displacements; > > of the initial Hessian. The only thing that does help is that it's a DF-MP2; > > calculation.; > > ; > > —; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4/issues/253#issuecomment-184219439>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-184220315.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184227998:55,optimiz,optimizations,55,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184227998,3,"['optimiz', 'perform']","['optimization', 'optimizations', 'performing']"
Performance,This is error after updating to PSi4 278:; error while loading shared libraries: libifport.so.5: cannot open shared object file: No such file or directory. But I think it can be overcome by adding intel lib into PATH. Thank you Loriab.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/154#issuecomment-126179884:55,load,loading,55,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126179884,1,['load'],['loading']
Performance,"This is fantastic! I really like the design; kudos for coming up with such a clean scheme. I know that these functions will not even be close to becoming a bottleneck but it would be nice to have the `for X in A.keys()` replaced with `for X in A:`. Unless I'm mistaken (likely) the latter is faster, and more Pythonic (this could well have changed with Py3's change to the `keys()` method). I think the shorter version is also easier to read.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922#issuecomment-375711730:156,bottleneck,bottleneck,156,https://psicode.org,https://github.com/psi4/psi4/pull/922#issuecomment-375711730,1,['bottleneck'],['bottleneck']
Performance,"This is great! Could we also get `-O0` into the flags for Debug builds? I think it adds `-g` currently, but allows the compiler to use its default optimization (usually `-O2`), which often trips up debuggers. We can also just defer that for a different time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2159#issuecomment-822602935:147,optimiz,optimization,147,https://psicode.org,https://github.com/psi4/psi4/pull/2159#issuecomment-822602935,1,['optimiz'],['optimization']
Performance,"This is just about as far as this PR is going to go. Fully removing memory_manager would require a way to store how much memory has been ""spent."" Keeping track of that without globals requires a wavefunction. Once the wavefunction is in place to track memory, the MemoryManager can be removed from psimrcc without much hassle. Two issues before potentially merging this:; 1. I want to do some profiling to make sure that none of my pointer -> std::vector replacements hit performance. `.data()` and passing const refs is enough, according to my very preliminary tests, but I'll do some more in-depth ones once I figure out how to use VTune.; 2. Do we want this as a 1.4 target? We really don't need more PR dependencies before 1.4, given that the 1.4 paper is already published, but 1.4 is still not release-ready. If we don't, then let's hold off on the merge until after 1.4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1901#issuecomment-634141409:472,perform,performance,472,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-634141409,1,['perform'],['performance']
Performance,"This is pure conjecture on my part, but I would assume that the bandwidth is limited by physical partitioning on the M1 Pro/Max. The CPU cluster probably does not have ""enough wires"" going to the memory controller to transfer 400 GB/s, so I would think fusing off a couple of cores in the GPU would not affect the CPU BW. Not sure about the Pro, if they just copy-pasted the CPU part, there is a chance the CPU could use all of the BW on that,. Edit: The undocumented math instructions I mentioned previously, are not executed by the CPU core, but separate SIMD coprocessors, which are technically not part of the CPU core, even though some caches are shared. But given how the big.LITTLE cores all share the ~1/2 BW limit, I doubt using those coprocessors would make much of a difference.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-956493258:641,cache,caches,641,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956493258,2,['cache'],['caches']
Performance,This is the first time I've seen the timings. Really impressive stuff; performance boosts on NUMA arch is a really big deal.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-381154469:71,perform,performance,71,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-381154469,1,['perform'],['performance']
Performance,"This is the output I get from running the same system directly through libecpint's main API (with normalised contraction coefficients in the orbital basis). All the results seem to agree with the output you have labelled as `native'. This suggests to me that something is going wrong when the libecpint containers are being created, but I'm struggling to see what exactly it is. It might be worth comparing what your ECP object for argon looks like with one created by libecpint by loading from file. [output.txt](https://github.com/psi4/psi4/files/6173525/output.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-803052000:482,load,loading,482,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-803052000,1,['load'],['loading']
Performance,"This issue has a bit more to it than just removing the line Andy mentioned. The computation dies due to `'psi4.core.variable: Requested variable BRUECKNER CONVERGED was not set!\n'`, rather than the fact that convergence failed. Is there a standard way to represent a convergence error, C-side? `dct` and LMP2 in `cc` throw `ConvergenceError`, failure during an orbital-optimized `occ` computation gets you a generic `PSIEXCEPTION`, and I haven't checked other things.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1864#issuecomment-628803661:370,optimiz,optimized,370,https://psicode.org,https://github.com/psi4/psi4/issues/1864#issuecomment-628803661,1,['optimiz'],['optimized']
Performance,"This issue was fixed by #882. While there is still some non-determinism when the optimizer gets to a minimum, it does not have a common cause with the behavior reported here. It may also be fixed when optking is brought Python-side. For reference, the output I generated demonstrating non-determinism at the mimum was using the test case created in #882, without the early exit condition. If this issue needs to be raised again, it would be a separate issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-352229920:81,optimiz,optimizer,81,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-352229920,1,['optimiz'],['optimizer']
Performance,"This issue was originally about issues with converging an SCF, and now I'm not sure what it's about. I need you to re-focus the issue. Are you saying that for the same geometry, Psi is giving different energies/gradients depending on which optimization run it was part of?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-957955746:240,optimiz,optimization,240,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957955746,1,['optimiz'],['optimization']
Performance,"This looks like a mismatch in the tolerance used to figure out the point group and the tolerance being used within the optimizer. For the HOOH case, adding `symmetry c2` to the molecule specification should be a simple workaround. Also, you can use `SCF_Energy = psi4.get_variable('CURRENT ENERGY')` to avoid running an extra energy calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-201451437:119,optimiz,optimizer,119,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-201451437,2,['optimiz'],['optimizer']
Performance,"This might be an ""issue"" with the new guess. Can you try a `guess core` or `gwh`?. Issue in this case is in quotes as this may be something odd where the guess pushes this unstable optimization to a poor value.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1692#issuecomment-518465242:181,optimiz,optimization,181,https://psicode.org,https://github.com/psi4/psi4/issues/1692#issuecomment-518465242,1,['optimiz'],['optimization']
Performance,"This sounds good, especially as it would seem to enable custom basis sets (e.g., dz on C1, tz on C2, atz on H, user-supplied mybasis on remainder) to be condensed into one name/entity (though could it be re-issued after a new molecule's defined?). What type of info do you think should be cached: atom/basisname or atom/extract_of_gbs_file or atom/BasisSet object (py translation of libmints object)? . Simply adding a member fn to basisset in libmints that returns T/F for a given library basis name and element name is seemingly the easiest way of addressing the issue (though doesn't cover case where C1 and C2 perhaps have different library bases). Having a full BasisSet and BasisParser python classes is the other end of the code-to-add scale. But then, we could have a Molecule respond with its full set of default fitting basis mix, all py-side. (And I could write GENBAS entries w/o libmints.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/46#issuecomment-37953151:289,cache,cached,289,https://psicode.org,https://github.com/psi4/psi4/issues/46#issuecomment-37953151,1,['cache'],['cached']
Performance,"This sounds like in the same class as too many roots for basis. They tend to segfault (example below) so should certainly be handled better. ```; molecule water {; 0 1; O; H 1 1.07; H 1 1.07 2 109.5; symmetry cs; }. set basis sto-3g; set roots_per_irrep [8, 8]. G, wfn = gradient('eom-ccsd', return_wfn=True); ans = wfn.energy(); ```. The user has issued two contradictory requests -- basis set and nroots. And part of the trouble is that psi only knows they're contradictory well into the calculation (e.g., post-GS-CCSD). That complicates issuing a prompt and specific error. I agree that Susi's preferred behavior is most likely what the user wants -- keep the basis set contract and violate the nroots request. A few paths:. 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover. Likely most of this should be moved to an issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885:1122,throughput,throughput,1122,https://psicode.org,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885,1,['throughput'],['throughput']
Performance,"This won't be a comprehensive reply, just a getting-started one. In the beginning, there were lots o' blockers:; * no mkl; * no c++11; * no intel compiler capability for multiarch packages; * psi4 has dependencies that aren't quite vanilla upstream; * psi4 likes to provide addons from projects that aren't released cleanly; * psi4 users have grown accustomed to `-c psi4` and `-c psi4/label/dev`; * we like packages to be least restrictive so that devs can use conda like a package manager and build with their own tooling. That said, many of those blockers have receded, and Windows psi4 is, in fact, c-f -based.; * mkl is in for several years; * c-f gcc is plenty ahead of where psi needs it; * intel is becoming more integral and _maybe_ we could still user multiarch instead of the uniform c-f flag set; * gau2grid and libxc dependencies are now good wrt upstream and are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:956,optimiz,optimization,956,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624,1,['optimiz'],['optimization']
Performance,"This would be **really** nice to get in Psi4. I don't think there is any free quantum chemistry program that can do geometry optimizations with ECPs. I think in principle PySCF can compute gradients, but it doesn't have a geometry optimizer; I just tried out pyberny and geometric and neither worked with modern Python :hankey:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-866421643:125,optimiz,optimizations,125,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-866421643,2,['optimiz'],"['optimizations', 'optimizer']"
Performance,"To confirm this explicitly:; * With the changes to method names, the energy docstring needs to be updated, as does the occ/dfocc manual page, which needed to be updated anyways. That is shifting to your responsibility in a future, but pre-1.4 PR.; * In another future PR of yours, QCDB will handle all spin-component quantities. At that time, we'll save singles contributions and spin components to `variables_`. For now, it's enough to remove the spin component globals in preparation for that and as part of the war on globals. We're losing many spin-component-related Psivars in the interim, but this is an acceptable loss. Also, will the future migration of spin-component treatment to QCDB mean `occ` no longer prints spin-component quantities? You implied that it would (""Going that far would necessitate rewriting the occ printing""). If so, then the correct solution to [the spin-redundancy problem](https://github.com/psi4/psi4/pull/1789#discussion_r373811576) is to eliminate the spin-component variables from `occ`. At that time, `occ`'s only use for spin-component scaled quantities is if spin scaling is being used in orbital optimization, which shouldn't require those variables anyways. We might as well get rid of them now, since the repeat typing will be gone before long.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-581142412:1138,optimiz,optimization,1138,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581142412,1,['optimiz'],['optimization']
Performance,"To expand on my request for changes a little more, the wording is problematic since the problem I believe you are getting at has nothing to do with the file being in cache, it has to do with the file-entry existing on disk. . Yes if the quantity is held in cache, the data is accessible right away, but if it is not held in cache you may still be modifying a non-zero quantity depending on how you manipulate the buffer later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267205350:166,cache,cache,166,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267205350,3,['cache'],['cache']
Performance,"To solve:; - find a system that becomes a car wreck while optimizing frozen coords and w/o `no_reorient` & `no_com`. (probably intermolecular optimization). see tests opt-[6789] for frozen opt examples.; - check that opt healed w/`no_reorient` & `no_com`; - around here (https://github.com/psi4/psi4/blob/master/lib/python/driver.py#L1193), test if any of those freeze options were set `psi4.get_option('OPTKING', 'FREEZE<fill in>')` and if so, add. ``` python; molecule.fix_orientation(True); molecule.fix_com(True) ; molecule.update_geometry(); ```; - check all working",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/179#issuecomment-174013642:58,optimiz,optimizing,58,https://psicode.org,https://github.com/psi4/psi4/issues/179#issuecomment-174013642,2,['optimiz'],"['optimization', 'optimizing']"
Performance,"Update, MVS error is coming from occupation guess. Ref on the left. ```; -------------------------------------------------------				 -------------------------------------------------------. ==> Integral Setup <==								 ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==						 ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes							 J tasked: Yes; K tasked: No							 K tasked: No; wK tasked: No							 wK tasked: No; OpenMP threads: 1							 OpenMP threads: 1; Integrals threads: 1							 Integrals threads: 1; Memory (MB): 375							 Memory (MB): 375; Algorithm: Core							 Algorithm: Core; Integral Cache: NONE							 Integral Cache: NONE; Schwarz Cutoff: 1E-12							 Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12							 Fitting Condition: 1E-12. => Auxiliary Basis Set <=								 => Auxiliary Basis Set <=. Basis Set: (6-31G AUX)								 Basis Set: (6-31G AUX); Blend: CC-PVDZ-JKFIT								 Blend: CC-PVDZ-JKFIT; Number of shells: 42								 Number of shells: 42; Number of basis function: 131							 Number of basis function: 131; Number of Cartesian functions: 131							 Number of Cartesian functions: 131; Spherical Harmonics?: false								 Spherical Harmonics?: false; Max angular momentum: 3								 Max angular momentum: 3. Minimum eigenvalue in the overlap matrix is 6.8158211762E-02.				 Minimum eigenvalue in the overlap matrix is 6.8158211762E-02.; Using Symmetric Orthogonalization.							 Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.		 SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==									 ==> Iterations <==. Total Energy Delta E RMS |[F,P]|			 Total Energy Delta E RMS |[F,P]|. @DF-UKS iter 0: -71.60680989524471 -7.16068e+01 1.41427e-01 		 |	 @DF-UKS iter 0: -71.93847658446015 -7.19385e+01 1.43012e-01 ; @DF-UKS iter 1: -75.52774517284402 -3.92094e+00 8.33781e-02 		 |	 Occupation by irrep:; @DF-UKS iter 2: -75.47183403287708 5.59111e-02 8.91",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802#issuecomment-383210085:627,Cache,Cache,627,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383210085,2,['Cache'],['Cache']
Performance,"Update: This performance issue was fixed by #2413, which upgraded libint2 from 2.6.0 to 2.7.1. For completeness, here are the timings on the above test case:. | Cores | Psi4 OS<br/>Wall Time (s) | Psi4 OS<br/>Parallel Speedup | Libint 2.6.0<br/>Wall Time (s) | Libint 2.6.0<br/>Parallel Speedup | Libint 2.7.1<br/>Wall Time (s) | Libint 2.7.1<br/>Parallel Speedup |; | :--- | :--- | :--- | :--- | :--- | :--- | :--- |; | 1 | 191.7 | --- | 105.3 | --- | 99.4 | --- |; | 2 | 96.1 | x2.00 | 72.6 | x1.45 | 49.9 | x1.99 |; | 4 | 48.4 | x3.96 | 71.5 | x1.47 | 25.2 | x3.94 |; | 8 | 24.3 | x7.88 | 74.5 | x1.41 | 13.0 | x7.66 |; | 18 | 11.5 | x16.62 | 72.8 | x1.45 | 6.4 | x15.45 |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2491#issuecomment-1077047578:13,perform,performance,13,https://psicode.org,https://github.com/psi4/psi4/issues/2491#issuecomment-1077047578,1,['perform'],['performance']
Performance,"Upgrade your version of Psi4. If you want TD-DFT, I suggest you use the [nightly build here](https://psicode.org/installs/v132/). TD-DFT calculations are being added in version 1.4. You can see a guide on how to perform TD-DFT [here](https://www.youtube.com/watch?v=MmG-g3SEFbk).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2071#issuecomment-748970773:212,perform,perform,212,https://psicode.org,https://github.com/psi4/psi4/issues/2071#issuecomment-748970773,2,['perform'],['perform']
Performance,"Very true, @bozkaya, and we've done that. We'd really like to be able to run _any_ molecule through a code, though. If the code absolutely can't handle the case, an error is the way to go. But preferably, if the code's contribution is `0.` or unit matrix or anything predictable, I'd really appreciate it if that trivial return could be programmed in. This would greatly help high-throughput calcs or in @wardence's case, multi-stage single calcs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/893#issuecomment-358041068:381,throughput,throughput,381,https://psicode.org,https://github.com/psi4/psi4/issues/893#issuecomment-358041068,1,['throughput'],['throughput']
Performance,"Was just discussing this with Lori. The underlying primitive functional; were implemented according to the excellent notes at the density functional; repository:. http://www.cse.scitech.ac.uk/ccg/dft/xc-b3lyp.pdf (contains the definition; for vwn3rpa); http://www.cse.scitech.ac.uk/ccg/dft/c-vwn5.pdf; http://www.cse.scitech.ac.uk/ccg/dft/c-vwn5rpa.pdf. We also refer to the VWN paper (; http://www.nrcresearchpress.com/doi/pdf/10.1139/p80-159). In VWN, any; functional with ""RPA"" means that the parameters of their Pade interpolation; formula across r_s are fit to RPA computations, any functional without; means that the same parameters are fit to the QMC data of Ceperley and; Alder. For RPA/non-RPA, VWN perform one Pade fit across r_s for; ferromagnetic limit (EcP), one for the paramagnetic limit (EcF). The RPA; fit is given in the middle of page 1207 in the left column (parameter c =; EcP4 = 42.7198), while the QMC fit is given in Table I on page 1207; (parameter c = EcP4 = 12.9352). The remaining question of the paper is the issue of interpolation across; spin polarization z. This is where VWN 1-5 are defined - they have; different spin-interpolation formulae, and all give the same results for; closed-shell systems. That B3LYP and B3LYP5 differ for closed-shell systems means that the; notation has been bastardized. Clearly B3LYP uses the RPA parameters while; B3LYP5 uses the QMC parameters. But then the question of which VWN is to be; used is less clear. The one currently used in PSI4 comes from the density; functional repository above, which is actually VWN1 with the RPA; parameters. Lori has generously agreed to provide some reference data from other codes; for open-shell systems so we can double-check the choice of VWN for; spin-polarized cases. We'll get this fully cleared up as soon as those; numbers come in. Best,. -Rob. On Tue, Apr 12, 2016 at 8:13 PM, Lori A. Burns notifications@github.com; wrote:. > @robparrish https://github.com/robparrish, any warnings or gui",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/339#issuecomment-209236558:708,perform,perform,708,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-209236558,2,['perform'],['perform']
Performance,"We can certainly shift some of the logic over to Python. It will be a good idea to perhaps construct a mapping of atoms to basis sets that are included in the standard Psi4 basis set library. . The current way that libmints determines if a basis set exists for an atom is to parse the entire basis set file (e.g. cc-pvdz.gbs) for the atom entry. In thinking about this, what libmints does is actually really bad since every time the basis set is loaded in the hard drive is nailed. If basis sets do not use a lot of memory maybe we should keep a global cache for the life of a calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/46#issuecomment-37943521:446,load,loaded,446,https://psicode.org,https://github.com/psi4/psi4/issues/46#issuecomment-37943521,2,"['cache', 'load']","['cache', 'loaded']"
Performance,"We discuss this in the ""geometry optimization"" [page of the documentation](https://psicode.org/psi4manual/master/optking.html). Please check the documentation before filing issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2604#issuecomment-1152921733:33,optimiz,optimization,33,https://psicode.org,https://github.com/psi4/psi4/issues/2604#issuecomment-1152921733,1,['optimiz'],['optimization']
Performance,"We have a clear policy (at least for what was originally added) of using optimized contractions from EMSL. From [Kirk Peterson's website](http://tyr0.chem.wsu.edu/~kipeters/basis.html), we don't have that option, so we get what he supplies. Not sure what to do about it, unless implement a fn to re-optimize contractions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-307878490:73,optimiz,optimized,73,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307878490,4,['optimiz'],"['optimize', 'optimized']"
Performance,"We need _many_ more details. * What version of Psi4 are you using?; * When you say ""gradient for the point charges,"" do you mean derivative of the energy with respect to nuclear displacements i.e. geometry changes? This is needed for geometry optimizations and frequencies.; * What electronic structure method are you using? Is this some SCF?; * When you say ""failed to find"" do you mean that the gradient was the same with and without the point charges, or just that you can't find a section in the gradient breakdown labeled ""external potentials"" or ""point charges"".; * How are you creating the point charges? A simple input file that displays the problem would be helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2244#issuecomment-879071662:243,optimiz,optimizations,243,https://psicode.org,https://github.com/psi4/psi4/issues/2244#issuecomment-879071662,2,['optimiz'],['optimizations']
Performance,"We used to use files like file11 for subsequent parsing for; finite-difference computations and for analysis of optimization; trajectories. Now we can so easily return the trajectory through python,; this doesn't seem necessary. I presume someone has an eye on what WebMO; parses, or else we do what we want and let WebMO accommodate it. On Mon, Jul 30, 2018 at 12:41 PM, Jonathon Misiewicz <; notifications@github.com> wrote:. > *@JonathonMisiewicz* commented on this pull request.; > ------------------------------; >; > In psi4/driver/driver_findif.py; > <https://github.com/psi4/psi4/pull/1024#discussion_r206260812>:; >; > > + Parameters; > + ----------; > + mol : qcdb.molecule or psi4.core.Molecule; > + The molecule to compute the gradient of.; > + E : list of floats; > + A list of energies of the molecule at displaced geometries.; > +; > + Returns; > + -------; > + gradient : psi4.core.Matrix; > + The gradient in Cartesians, as a matrix with dimensions; > + number-of-atoms by 3. """"""; > +; > + # NOTE: Yes, this returns psi4.core.Matrix, not an ndarray.; > + # Due to GradientWriter, the function internally needs the gradient as a psi4.core.Matrix.; > + # TODO: Move GradientWriter py-side, as well? This function would simplify nicely.; >; > Another picky question: We currently write multiple gradients to the same; > file. See fd-gradient test for an example. Keep this behavior or scrap it?; > My vote would be to have one gradient for one file, but there may be some; > use case I'm not seeing.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/1024#discussion_r206260812>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTGtFQb77YTjJUaUeJbULz7OyWJ5mks5uL0VVgaJpZM4UFStn>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1024#issuecomment-408957866:112,optimiz,optimization,112,https://psicode.org,https://github.com/psi4/psi4/pull/1024#issuecomment-408957866,2,['optimiz'],['optimization']
Performance,We're also struggling with performance issues here in developing methods to predict tautomer ratios and pKas. Parallelization would be super helpful!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1280#issuecomment-439131012:27,perform,performance,27,https://psicode.org,https://github.com/psi4/psi4/issues/1280#issuecomment-439131012,1,['perform'],['performance']
Performance,"Well in that case: ; So far everything is going smoothly on my end, but I did notice a couple of inconsistencies in detecting python/complier versions and incorrectly using a different library. On one of our clusters using the module system I have loaded gcc-5.2.0 and Anaconda with python 2.7.10. (these modules define envars $ANACONDA_LIB and $GCC_LIB, which I will refer to below. They also modify the $LD_LIBRARY_PATH variable when they are loaded.) . If I set the python executable and don't do anything to `CMAKE_PREFIX_PATH` the executable is set up correctly but the `PYTHON_INCLUDE_DIR` and `PYTHON_LIBRARY` find the ones that live in the system paths `/usr/lib/python2.6.so` and `/usr/include/python2.6` which causes problems in the linking step with undefined references to some python stuff. . Also if I set the C/CXX compiler, but again don't do anything to the `CMAKE_PREFIX_PATH` I can build + link fine, but at runtime I will get errors like this:. ```; /usr/lib64/libstdc++.so.6: version ``GLIBCXX_X.X.XX' not found ; ```. Which seems to be that cmake is linking to the libstdc++ version for the system gcc which is 4.7.2, instead of the correct library version for the compiler I am using. . If I add `-DCMAKE_PREFIX_PATH=$GCC_LIB:$ANACONDA_LIB` to my cmake command it will fix both issues are corrected. The python library is detected as `$ANACONDA_LIB/python2.7.so` and I don't have any problems with linking. And there is no errors at runtime either. In both cases cmake seems to detect the versions correctly since it has the correct executable. . So when it comes time to document the new build system for users, it may be prudent to mention they should either use the `CMAKE_PREFIX_PATH` argument, or check that cmake has detected the correct library paths for the python/compiler they actually meant to use if they are working in a environment where multiple python/compilers installed. Most clusters will have some way of swapping these out with a system default installed gl",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249621149:248,load,loaded,248,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249621149,2,['load'],['loaded']
Performance,"Well, @dgasmith, it's not even really crashing due to the PSIO errors...the job continues to run after failing to write the binary optimization data, and finally fails after exceeding the number of allotted optimization iterations. But, it's the manner in which that happens which is the issue: the optimizer is failing to take steps after the first failure of PSIO, I expect because it can't read the optimization data from binary file. Below is a brief overview of the structure within the job. - Take some number of good optimization steps, with structure:; 1) SCF; - Compute SCF wavefunction & gradient; 2) OPTKING; - Read optimization data from binary file ; - Take optimization step; - Write optimization data to binary file; - Sets geometry for next step; - First error step:; 1) SCF wfn & grad computed successfully; 2) OPTKING; - Read data & take step successfully; - PSIO error when attempting to write data to binary file; - Sets geometry for next step; - All subsequent steps (until `geom_maxiter` reached):; 1) SCF wfn, grad computed successfully; 2) OPTKING; - Second PSIO error occurs; - **No optimization step taken**; - Geometry for next step is set to the same as in first error step. So, once the first PSIO error occurs, there's no progress made by the optimizer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/789#issuecomment-325800423:131,optimiz,optimization,131,https://psicode.org,https://github.com/psi4/psi4/issues/789#issuecomment-325800423,10,['optimiz'],"['optimization', 'optimizer']"
Performance,"Well, I was really hoping to keep the build matrix fairly simple to prevent build # explosions. What if we do the following:; - clang 3.5, 3.7 (release); - gcc 4.8, 5.2 (release); - gcc 5.2 (debug). I don think building intermediate compiler releases is as important and we manage to stay at the 5 concurrent build number.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182887045:298,concurren,concurrent,298,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182887045,2,['concurren'],['concurrent']
Performance,"Well, there is a progress. I have set the filename and force_restart keywords. This results in:. <pre>; **************************; * *; * CCENERGY *; * *; **************************; Nuclear Rep. energy (chkpt) = 327.121621300020024; SCF energy (chkpt) = -1150.463735394306923; Reference energy (file100) = -1150.463735394307605; Input parameters:; -----------------; Wave function = CC3; Reference wfn = RHF; Memory (Mbytes) = 8192.0; Maxiter = 50; R_Convergence = 1.0e-07; E_Convergence = 1.0e-06; Restart = Yes; DIIS = Yes; AO Basis = NONE; ABCD = NEW; Cache Level = 2; Cache Type = LOW; Print Level = 5; Num. of threads = 8; # Amps to Print = 10; Print MP2 Amps? = No; Analyze T2 Amps = No; Print Pair Ener = No; Local CC = No; T3 Ws incore = No; SCS-MP2 = False; SCSN-MP2 = False; SCS-CCSD = False; Using old T1 amplitudes.; Solving CC Amplitude Equations; ------------------------------; Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; ---- --------------------- --------- ---------- ---------- ---------- --------; 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; </pre>. So it seems to reuse the old T1 amplitudes, but still goes to solving the equations anyway - I was rather expecting it to skip this step - as this is the most time consuming part and there is nothing changed in the system since the crash. Bartek",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/27#issuecomment-29878672:557,Cache,Cache,557,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29878672,2,['Cache'],['Cache']
Performance,"What I meant was that that may be just fine. If what's being cached is `$HOME/miniconda/bin` and `$HOME/miniconda/packages`, then you've preserved all the heavy stuff (mkl w/i the packages dir). A new `conda create -n p4dev` that goes into `$HOME/miniconda/envs/p4dev` is trivial compared to downloading all the packages. I'd prefer the env to be re-solved each time, so I'm not advocating caching p4dev env.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1398#issuecomment-444523572:61,cache,cached,61,https://psicode.org,https://github.com/psi4/psi4/pull/1398#issuecomment-444523572,1,['cache'],['cached']
Performance,"What was the solution to this? We probably do want to save the optimized orbitals to the wfn. Did you have to turn that off, Ugur?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/127#issuecomment-121957186:63,optimiz,optimized,63,https://psicode.org,https://github.com/psi4/psi4/issues/127#issuecomment-121957186,1,['optimiz'],['optimized']
Performance,"When I've only made changes to the optimizer, I always do a 'ctest -L opt'. So, yes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/328#issuecomment-202667624:35,optimiz,optimizer,35,https://psicode.org,https://github.com/psi4/psi4/pull/328#issuecomment-202667624,1,['optimiz'],['optimizer']
Performance,"When you say that the memory usage doesn't go above 70%, what do you mean precisely, and how is it measured? `vmstat -S M` during a run may help us see the breakdown of memory usage a bit. I think the concern is that when using large files, the OS will try to keep (parts of) the files in memory for faster access later. Then these pages may get swapped (or just having them in memory causes other things to get swapped). I'm not sure if/why the kernel would choose to swap rather than free some memory from the page cache (cached data is already on a disk...), but I'm far from a kernel memory expert. Last note: Psi4 is mostly written in C++, and therefore can't always use `posix_fadvise`, since there's no (standard) way to get a `FILE*` or file descriptor from an `std::fstream`. Others can comment about how memory management in psi4 works, but I think it is pretty rudimentary and doesn't interact with the OS at all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/424#issuecomment-228791186:517,cache,cache,517,https://psicode.org,https://github.com/psi4/psi4/issues/424#issuecomment-228791186,2,['cache'],"['cache', 'cached']"
Performance,Where can I find the plugin cache?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271928177:28,cache,cache,28,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271928177,1,['cache'],['cache']
Performance,"Whew, I'd be alarmed if the hint variable wasn't doing its job. The cmake isn't set up to use $MKLROOT (I might have tried but that mkl and iomp5 aren't in the same place in a typical intel installation, as you noted). The complication is that this has to work even for `ExternalProject`s or across different computers and the purpose of TargetLAPACK is to provide a single entity to hand to subprojects without duplicating all the math detection machinery and all the cmake and envvars that influence it. I'm not sure current reworking is optimized, but I can live with one cmake hint var. The iomp5 detection works with GNU in conda b/c all the libs are gathered together so the second `find_library()` w/o `NO_DEFAULT_PATH` catches it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396753319:540,optimiz,optimized,540,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396753319,1,['optimiz'],['optimized']
Performance,"While I appreciate that tests are now passing, I still request changes.; * Comments that refer to methods that no longer exist need to be removed.; * The comment on dfhelper's release_AO is vague. What does it mean to ""release AO""? Are you clearing memory used to store some AO-basis quantity?; * Naming a method ""release_AO"" that does not actually release AO is confusing. You need to change this.; * The title of this PR is misleading. This PR is not just optimizing I/O. This PR is _changing the values that Psi gives for SAPT(DFT)_ due to the options edits. Are these edits supposed to be part of the PR or not? That's going to determine how the rest of this review process goes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1106499269:458,optimiz,optimizing,458,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1106499269,2,['optimiz'],['optimizing']
Performance,"While it's worth asking @psi-rking to confirm, this looks like a standard issue that's going to get the standard response:; Set `opt_coordinates` to `both` or `cartesian`. The new optimizer will be smart enough so that you won't need to do any manual key setting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2208#issuecomment-868798412:180,optimiz,optimizer,180,https://psicode.org,https://github.com/psi4/psi4/issues/2208#issuecomment-868798412,1,['optimiz'],['optimizer']
Performance,"While trying to optimize the geometry for conformers of the ligand in the 2vx0 pdb structure I am also running into memory issues. Our cluster is running with cgroups and I ask for 10GB, but tell psi4 to use only 8gb. In that case most of the calculations fail >374 out of 500 conformers. To make it work I have to ask for 20GB and use only 4GB in psi4. The strange thing is these 500 runs have the same number of atoms and the same basis set, just different atomic positions. But some fail during the first SCF, some complete a few optimization cycles and a few complete. I have seen this behavior with the wB97x and the B3LYP functionals.; I have seen this with the conda installed 1.3rc2 and with a hand compiled version of 1.3rc2.; I have attached my input file and one of the smallest failed output files. I hope this helps pinning this down.; Thanks for working on Psi4, I love it!. [singlePsi4_rec290_pid12029.log](https://github.com/psi4/psi4/files/2911797/singlePsi4_rec290_pid12029.log); [singlePsi4_rec290_pid12029.txt](https://github.com/psi4/psi4/files/2911798/singlePsi4_rec290_pid12029.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1532#issuecomment-467980525:16,optimiz,optimize,16,https://psicode.org,https://github.com/psi4/psi4/issues/1532#issuecomment-467980525,2,['optimiz'],"['optimization', 'optimize']"
Performance,"With early CMake I had the impression that it didn't collect compilers and flags from ""standard"" envvars (it doesn't say it will before 3.12 https://cmake.org/cmake/help/v3.12/variable/CMAKE_LANG_FLAGS.html), so I wasn't concerned with the Conda flag set. Also, all the psi4's native build knobs get appended to `CMAKE_CXX_FLAGS`, so many of the conda ones are superseded. For actual psi conda package builds, any gnu flags not recognized by the Intel compiler will also be discarded. I can see how there might be modest performance concerns with some of the conda flags like `FORTIFY_SOURCE=2`, but I'm not sure they're worth the trouble of resisting. If you've found otherwise, I'd be interested to hear. It's assuring to learn that Fedora also imposes some of those flags.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2416#issuecomment-1026023875:521,perform,performance,521,https://psicode.org,https://github.com/psi4/psi4/issues/2416#issuecomment-1026023875,2,['perform'],['performance']
Performance,Would it make sense to add a `qc_module adcc` in this case?; Then a new `select_adc` in proc.py could manage both the (old) `run_adc` and `run_adcc`. . Though having an optional/external `qc_module` is unprecedented I think. --. Isn't the `mints.mo_eri` routine becoming quickly a bottleneck?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547800055:281,bottleneck,bottleneck,281,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547800055,1,['bottleneck'],['bottleneck']
Performance,"Would it make sense to add the SNS-MP2 plugin to any of the psi4 conda packages concurrent with this, to make it easier to access for users? (I'm not sure if that's standard practice for ""endorsed plugins"" or not.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/850#issuecomment-344706017:80,concurren,concurrent,80,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-344706017,1,['concurren'],['concurrent']
Performance,"Would you mind teaching me if I have this right because I don't actually know and this is how far I got, I still can't seem to get intensities out. . ```python. import psi4; import textwrap; import numpy as np. psi4.core.set_num_threads(8); psi4.set_memory('30000mb'). psi4.set_options({; 'scf_type': 'df',; 'g_convergence': 'gau_tight',; 'reference': 'rhf',; 'freeze_core': 'true',; }). psi4.core.set_output_file('water.out', False). def run_calculation(molecule):; ; universe = psi4.geometry(molecule); universe.update_geometry(); mass = np.asarray([16.01, 1.0, 1.0]); geometry = np.asarray(universe.geometry()); irrep_labels = universe.irrep_labels(); dipole_derivatives = None; project_translation = True; project_rotation = True; symbols = [universe.symbol(at) for at in range(universe.natom())]; theory = 'mp2/aug-cc-pvdz'; ; energy, wave_function = psi4.optimize(; 'hf/6-31g*',; return_wfn = 'yes',; molecule=universe; ). hessian, wave_function_2 = psi4.hessian(; theory,; ref_gradient=wave_function.gradient(),; return_wfn= True; ). basisset = wave_function_2.basisset(). wave_function_2.hessian().print_out(). vibinfo, vibtext = psi4.driver.qcdb.vib.harmonic_analysis(; np.array(hessian),; geometry,; mass,; basisset,; irrep_labels,; dipole_derivatives,; project_translation,; project_rotation; ). print(vibtext); print(psi4.driver.qcdb.vib.print_vibs(vibinfo, shortlong=True, normco='q', atom_lbl=symbols)). if __name__ == '__main__':. water_zmatrix = '''\; O; H 1 0.9894093; H 1 0.9894093 2 100.02688; '''; run_calculation(textwrap.dedent(water_zmatrix)). ```. The output from the script for water is:. ```python. Vibration 7 8 9 ; Freq [cm^-1] 1563.0797 4068.4404 4208.3554 ; Irrep ; Reduced mass [u] 1.0740 1.0365 1.0684 ; Force const [mDyne/A] 1.5461 10.1080 11.1487 ; Turning point v=0 [a0] 0.2678 0.1690 0.1636 ; RMS dev v=0 [a0 u^1/2] 0.1962 0.1216 0.1196 ; Char temp [K] 2248.9237 5853.5800 6054.8864 ; --------------------------------------------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2698#issuecomment-1226632650:861,optimiz,optimize,861,https://psicode.org,https://github.com/psi4/psi4/issues/2698#issuecomment-1226632650,1,['optimiz'],['optimize']
Performance,"Yay!. Ok, back to IntelCache.cmake. `set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu- --sysroot=/home/termo/miniconda3/envs/p4dev35/x86_64-conda_cos6-linux-gnu/sysroot"" CACHE STRING """")`. Do a line like the above for each of C, CXX, Fortran.; Clear away `objdir/`; Try the `psi4-path-advisor --intel` again",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386739654:222,CACHE,CACHE,222,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386739654,1,['CACHE'],['CACHE']
Performance,"Yea, scratching my head over that one too. I was knee deep in `lsof` loads and thought we should check the simple things. The other weird thing is you can export either MKL or OMP threads and it fixes the error. I wonder what the precedence for`mkl/omp_set_num_threads/environ` is. It could help track down who is setting what.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311756543:69,load,loads,69,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311756543,2,['load'],['loads']
Performance,"Yeah sylabs would definitely work but only allows for storing .sif images. We could consider only offering `docker` containers and having `apptainer` users pull from `dockerhub`. See https://apptainer.org/docs/user/main/docker_and_oci.html#docker-hub. I know Jet loves using docker dev containers and I'm guessing others on the dev team do too. . As an explicit example from apptainers docs: ; pull tensorflow and run with the host's amd gpu libraries loaded into the container. MPI is essentially the same.; ```; $ apptainer pull docker://rocm/tensorflow:latest; $ apptainer run --rocm tensorflow_latest.sif; ```. As described in the link I referenced there are a few peculiarities that we would have to work through so that our docker containers will run properly with `apptainer`. Off the top of my head the two main things would be:. * making sure nothing is being installed in `/root` or `/home` by default (easy); * making sure that a writable filesystem is being mounted (The user would ultimately need to ensure that a scratch directory is available or that they're running from a directory/volume with disk space available). If we wanted, it might be nice to convert the docker containers explicitly to apptainer format and upload to sylabs? A new user at a super-computing institute probably wouldn't check dockerhub. For building apptainer containers, I normally start by pulling base images from dockerhub to work with. I haven't tried pulling and running docker containers directly though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2951#issuecomment-1536683682:452,load,loaded,452,https://psicode.org,https://github.com/psi4/psi4/issues/2951#issuecomment-1536683682,1,['load'],['loaded']
Performance,"Yeah, for larger / more diffuse basis functions, it's often hard to converge w/ incremental fock. I've already mentioned this in the [docs](https://psicode.org/psi4manual/master/scf.html#cosx-exchange). In general, incremental fock gets you only a very small speedup with COSX. This is because the last SCF iteration (performed on a large grid) is much more expensive than the other iterations (performed on a small grid), and the last iteration can't be done with a difference density matrix. For this reason, I generally set the `COSX_INCFOCK` option to `FALSE` when I use the JK algorithm, and I had meant to make this the default behavior.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1215622859:318,perform,performed,318,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1215622859,2,['perform'],['performed']
Performance,"Yeah, it seems like the simple REST interface doesn't require a queue for simple tasks; substructure searches and conformer stuff seems to generate a ticket, as before. I learned all I know from scanning the document linked above, so I'm far from an expert. I did a little testing with both Python versions and it _seems_ to be ok.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/507#issuecomment-258979667:64,queue,queue,64,https://psicode.org,https://github.com/psi4/psi4/pull/507#issuecomment-258979667,2,['queue'],['queue']
Performance,"Yeah, it's perfectly fine to split things up into multiple PRs. One sensible order I can come up with is:. 1. Edit the incremental Fock in the derived `DirectJK` class so that it is efficient and maintainable (no SCF iteration counts associated with the object, minimal number of matrices cached on the object, etc.) [some other PR]; 2. Move this improved incremental Fock to the parent `JK` class. [this PR]. In a previous comment, I suggested doing away with the cached `J`/`K`/`wK`/`dJ`/`dK`/`dwK` matrices by changing the behavior of the `JK` object so that the buffers aren't cleared between SCF iterations. If you find that difficult to do, I think an acceptable compromise would be to retain those cached matrices, but initialize them in the SCF driver (rather than make them a property of the JK object).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1231764838:289,cache,cached,289,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1231764838,6,['cache'],['cached']
Performance,"Yeah, that ""fc not implemented for oo"" message is of module scope. That's not unreasonable for a module author to write, but it is harder to interpret b/c of the known connection btwn occ/dfocc. And reasonably impossible for an outsider who sees psi as a cohesive entity to interpret. Some mention in the docs would be nice. But the scalable way forward as I see it is to add ae/fc to managed methods like https://github.com/psi4/psi4/pull/1850/files#diff-dbf22cd80d16f6d8ef8250145a6d91bfR153 and to expand explicit testing for NYI https://github.com/psi4/psi4/pull/1850/files#diff-ac285870f28f146a56a93bd3592ff776R154. That way, a user who doesn't specify a module will get a ""can't do"" at the driver level and module authors can stay module-local in their messaging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863#issuecomment-612132054:333,scalab,scalable,333,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-612132054,1,['scalab'],['scalable']
Performance,"Yeah, this is just too big a problem for DETCI's poor CISD capabilities. I answered this in the forums. Basically, if you optimize the code to do full CI very efficiently, you can wind up with an algorithm that creates intermediate data that is small enough to work fine for full CI, but blows up for CISD and makes the code run out of memory. And indeed, that's how I wrote the code, because we didn't care about CISD when we wrote it. I'm pretty sure the molecule reported here is big enough to run into this problem. I issued a PR to update the documentation to warn users away from DETCI CISD unless it's a tiny molecule (with a small basis).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1685#issuecomment-515615749:122,optimiz,optimize,122,https://psicode.org,https://github.com/psi4/psi4/issues/1685#issuecomment-515615749,1,['optimiz'],['optimize']
Performance,"Yep I agree. Thank you for linking this issue to the optking repo as well and bringing to our attention. I'm trying to look at more github issues for optking since you all have put so much effort into nicely labeling everything for us - still looking at this one. Any more discussion on the actual torsion issue will likely be at psi-rking/optking#63 or in slack once I've actually done some poking around. I'll make sure to reference the eventual fix here. The quick fix for running the optimization is to use Cartesian coordinates. For debugging purposes I'll just be running HF, good to know that guess=read is not currently supported - thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2213#issuecomment-870974855:488,optimiz,optimization,488,https://psicode.org,https://github.com/psi4/psi4/issues/2213#issuecomment-870974855,1,['optimiz'],['optimization']
Performance,"Yes, I started by copying Ugur's Tensor code. His code/syntax with these constructions is easily understandable. But then I also had to make changes in what seems quite fundamental code pieces to psi4 (libciomr) about block matrices and arrays.; With my limited C++ understanding I was forced to make sometimes copies with `_float` added:; https://github.com/psi4/psi4/pull/1261/files#diff-4345139288e2ce7d0f6fea4a51fb2ea1R140; which perhaps can be solved smarter as well. In these single-precision algorithms one will need some mixing of doubles with floats as it is best for the accuracy-performance compromise to selectively change the precision for only specific terms. Not sure if this is entirely solvable without cloning some blocks of physics code.; But not needing to clone his entire tensor class would be good!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1261#issuecomment-424609821:590,perform,performance,590,https://psicode.org,https://github.com/psi4/psi4/pull/1261#issuecomment-424609821,1,['perform'],['performance']
Performance,"Yes, I think the original idea of ""quicktests"" was that the developer could; quickly tell whether or not Psi4 was plausibly working correctly (so, a few; tests of major functionality, rather than the idea that all tests that are; quick would go here). Eventually we crammed in quite a few small tests; here because people started getting lazy and only ever ran quicktests, so; coverage started to become a more major issue. If we are now running most; of the tests nightly, this is less of an issue than it was, so the coverage; could be scaled back. With regard to Daniel's suggested breakdown, we might try that but with; different names that might be even clearer:; - mintests - Minimal checking of psi; small number of tests, all of which; are short; - shorttests - Best coverage possible in a 20 minute envelope; - normaltests - Tests that would run automatically each night (could also; be nightlytests); - longtests - Any extra-long tests that were useful in debugging or; performance evaluation, but that are too long to reasonably run every night; (my understanding is that's what we mean now by this label). On Mon, Nov 21, 2016 at 12:44 PM, Daniel Smith notifications@github.com; wrote:. > I may not be impartial, but I like the CMake colors a lot. LGTM; > ; > We have been tossing around the idea of moving tests around to make a bit; > more sense.; > - quicktests - Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp; > only; > - normaltests - Best coverage possible in a 20 minute envelope. (10; > minutes on 2-thread travis); > - longtests - Anything that runs in 15 minutes; > - no modifier - All psi tests; > ; > Obviously not in this PR, but something to ponder.; > ; > @robertodr https://github.com/robertodr I found the colors on; > Stackoverflow, so I would say yes :); > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262012104, or mute;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/524#issuecomment-262017312:980,perform,performance,980,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262017312,2,['perform'],['performance']
Performance,"Yes, I think this is sound. Cache the miniconda, cache the packages, don't cache the environment or the environment solution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1536#issuecomment-464392694:28,Cache,Cache,28,https://psicode.org,https://github.com/psi4/psi4/pull/1536#issuecomment-464392694,3,"['Cache', 'cache']","['Cache', 'cache']"
Performance,"Yes, I think you're both right. the numpy_helpers `np.load` is serializing ordinary floats for Matrix/Vector, so np machinery, not pickle, used. Then the python_helpers `np.load` is forming the custom Matrix/Vector objects themselves, so they do need pickle True, and >=16.3 need it explicitly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1607#issuecomment-485810151:54,load,load,54,https://psicode.org,https://github.com/psi4/psi4/pull/1607#issuecomment-485810151,2,['load'],['load']
Performance,"Yes, I wrote the original version of `libpsio`, and this I/O structure was an important part of its use for many years. Indeed, it was intended to replicate some of the key performance features of an earlier I/O library (long since removed) contained within the old `libciomr` that have infrastructure for about four different types of I/O. However, at some point in the development of Psi4, someone wrote the new, much more complicated code for building the file paths, they broke this capability. Chesterton's fence strikes again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2725#issuecomment-1257288803:173,perform,performance,173,https://psicode.org,https://github.com/psi4/psi4/issues/2725#issuecomment-1257288803,1,['perform'],['performance']
Performance,"Yes, `print_out()`s vastly outnumber `printf`s or `print()`s, but there are still a few, with options errors (""Did you mean ...?"") and optimization reports being the most likely encountered. They were left because they were thought helpful for non-background runs and there weren't downsides. Looks like you've found one. (I guess I always redirect with background & disown.) The optimization printing should go away with the switch to pyoptking and the ddd driver. Sounds like considering a purge of other direct printing then would be good, too. Good to leave this open. Thanks for the report.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1983#issuecomment-676629074:135,optimiz,optimization,135,https://psicode.org,https://github.com/psi4/psi4/issues/1983#issuecomment-676629074,2,['optimiz'],['optimization']
Performance,"Yes, please post your `conda list`. The yaml load isn't in psi4 itself, so I'm guessing that the dask compatible with py37 uses the plain load syntax but pyyaml 6 is in your env that uses the new syntax. py37-based packages may not be getting built anymore. I'd use py38 or py39 or add `pyyaml<6` to your env to force a solve with the plain load syntax.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2510#issuecomment-1080993168:45,load,load,45,https://psicode.org,https://github.com/psi4/psi4/issues/2510#issuecomment-1080993168,3,['load'],['load']
Performance,"Yes, that's what I was expecting -- 50% cached and fits ~10gb should fit in memory. Further problem?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1819#issuecomment-593637795:40,cache,cached,40,https://psicode.org,https://github.com/psi4/psi4/issues/1819#issuecomment-593637795,1,['cache'],['cached']
Performance,"Yes, the 1 electron integral routines are getting a very significant rewrite after that pull request is in; they will use libint2, and will be screened for overlap. The original 1e integral code was really written with the standard core hamiltonian in mind, where performance is never an issue. Parallelization of that rewritten code should be relatively easy. I haven't quite decided the best order to reconcile the changes to the integral engine with #1946 yet, but we'll get that merged as soon as we can. Thanks for posting this issue so that we can all coordinate - hopefully everything will be much easier when all of the old integral code is ripped out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2007#issuecomment-692972528:264,perform,performance,264,https://psicode.org,https://github.com/psi4/psi4/issues/2007#issuecomment-692972528,1,['perform'],['performance']
Performance,"Yes, the move to c-f-based is still planned (indeed, one of our build machines just quit, so it has special urgency). #2791 was as far as I got this cycle. It was needed to use more c-f packages instead of psi-specialized ones, and because those are the most popular non-required deps. Are there particular packages you'd need besides required, optimization, and dispersion? Or is simply a c-f-based psi4 package that solves your primary goal?. Many of the deps are compiled or psi is using a slight fork or need windows work. do you have specialties? :-). Roughly, my plan is to start compiling psi4 locally with c-f conditions and the very basic deps and post them to a `psi4/label/cf` channel. Libint2 must still pull from psi4 channel for the forseeable future. Glad to talk strategy, esp. after 12 Dec.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621#issuecomment-1336507776:345,optimiz,optimization,345,https://psicode.org,https://github.com/psi4/psi4/issues/2621#issuecomment-1336507776,2,['optimiz'],['optimization']
Performance,"You can fix the `MKL FATAL ERROR` by `LD_PRELOAD=/path/to/libmkl_rt.so psi4`. Yes, #563 or a near relative will fix that properly w/o the preload. When you run the `bin/psi4` ""executable"", it hunts down its `lib/psi4/__init__.py` to load psi4 as a python module. I wouldn't have expected it to be confused by a symlink, but I suppose it's possible. I'll have to try it out. Glad the python detection seems to be working consistently now. Your CMake logs look good (the unnerving ""detached HEAD"" is just because we pin to tags or commits for dependencies). The odd python3.4 detection in the pybind11 CMake config is to be expected, since none of the environment was passed over to pybind11 because it doesn't matter at that stage. On the now-healed compilation, I was just warned today (@bennybp) that CMake _does_ search your install (not stage, install) dir for dependencies, so perhaps your hunch was right.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273738266:233,load,load,233,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273738266,1,['load'],['load']
Performance,"You mean @avcopan should adjust the compare_values test for opt7 to the last-optimized-irc-point from the last structure, similar to what was done for opt-irc-1 & -2, @dgasmith? I think I agree.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-190761069:77,optimiz,optimized-irc-point,77,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-190761069,1,['optimiz'],['optimized-irc-point']
Performance,"Your system has got us confused as to why GCC isn't picked up (at all, hence the `-- Found base compiler version `) much less incorrectly, as everything you've printed looks ideal. 1. Make _sure_ you're deleting `objdir/` btwn cmake attempts; 2. Make _sure_ you're `conda activate p4dev35` (sure looks like you are); 3. `printenv`, please; 4. See the commented out `#set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """")` in the file you just `cat`-ed? Paste the full path it has to the trio of `set(CMAKE_*_FLAGS ...` above and try again.; 5. Try a simple compile.; ```; >>>icpc -gnu-prefix=x86_64-conda_cos6-linux-gnu- hello.cc -o hello && ./hello; Hello, World!; GCC: 7.2.0; Intel: 1800; ```. hello.cc; ```; #include <iostream>; using namespace std;. int main() ; {; cout << ""Hello, World!"" << endl;; cout << ""GCC: "" << __GNUC__ << ""."" << __GNUC_MINOR__ << ""."" << __GNUC_PATCHLEVEL__ << endl;; #ifdef __INTEL_COMPILER; cout << ""Intel: "" << __INTEL_COMPILER << endl;; #endif. return 0;; }; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386634031:470,CACHE,CACHE,470,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386634031,1,['CACHE'],['CACHE']
Performance,"[Easybuild](https://hpcugent.github.io/easybuild/) is not an alternative to CMake or autoconf. The idea is to have an easy way to make reproducible builds and modules. Everything in the stack should also be optimally build, meaning utilizing the hardware to its full extend (for example, if AVX2 or infiniband is available, we will use it). Easybuild will take care of all dependencies. It will avoid using the OS installed (old) versions of software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after building a compiler (GCC/intel/...) from scratch. We also patch out any problem. Psi4 for example hard codes it's build path for the generation of new plugins. This is not desirable on a HPC system. Some software is also not adjusted to be build by anything other than GCC. We make it work with intel too. Some software doesn't even have a real build system other than a list of makefiles that usually don't work out of the box. We fix that so the build is reproducible. . It's primarily meant for HPC sites. If somebody adds support for a piece of software, other people can reuse it with one command. I use it to build Psi4 in production. If you're developing, Easybuild is useful for building all up to date versions of dependencies. On our systems, if I run: module load PSI, I get a psi4 (a git version from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for example GCC-5.1, it takes one command. Adding a GCC subproject to Psi sounds like a bad idea. Building GCC is not a trivial task.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105224328:1285,load,load,1285,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105224328,1,['load'],['load']
Performance,"[Spin-component scaling](https://pubs.acs.org/doi/pdf/10.1021/jp105647c) (eq. 5, 8, 9) and [spin-opposite-scaling](https://aip.scitation.org/doi/10.1063/1.2718952) (eq. 1, 5) seem to be defined such that the scaling _should_ be included in the Lagrangian and thus the orbital optimization. I can't speak to what behavior was intended when `occ` was coded.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1751#issuecomment-551931052:276,optimiz,optimization,276,https://psicode.org,https://github.com/psi4/psi4/issues/1751#issuecomment-551931052,1,['optimiz'],['optimization']
Performance,"[This](https://github.com/psi4/psi4/files/866534/torsion.pdf) is the sort of geometry I get, which is very reasonable looking. If you compare the 'good' and 'bad' geometries, is the different in the orientation of the methyl hydrogens? If so, it's likely that your starting guess has them oriented with steric clashes, but the barrier to rotation is too high for the optimizer to be able to overcome.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/647#issuecomment-288899587:367,optimiz,optimizer,367,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-288899587,1,['optimiz'],['optimizer']
Performance,"]>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::scf::HF>), std::shared_ptr<psi::Matrix> (*)(std::shared_ptr<psi::scf::HF>), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, pybind11::arg const&, char const (&) [61])::{lambda(pybind11::detail::function_call&)#1}::_FUN(pybind11::detail::function_call&) () at /usr/include/pybind11/pybind11.h:224. #19 0x00007f21a8441138 in pybind11::cpp_function::dispatcher (self=0x7f2185ffe790, args_in=0x7f21476cd000, ; kwargs_in=0x0) at /usr/include/pybind11/pybind11.h:946; #20 0x000056022a991401 in cfunction_call (func=0x7f2186005210, args=0x7f21476cd000, kwargs=0x0); at /usr/local/src/conda/python-3.12.5/Objects/methodobject.c:537; #21 0x000056022a97109b in _PyObject_MakeTpCall (tstate=0x56022ae03058 <_PyRuntime+459704>, ; callable=0x7f2186005210, args=<optimized out>, nargs=1, keywords=0x0); at /usr/local/src/conda/python-3.12.5/Objects/call.c:240; #22 0x000056022a877f65 in _PyEval_EvalFrameDefault (tstate=<optimized out>, frame=0x7f21b9ea9af0, ; throwflag=<optimized out>) at Python/bytecodes.c:2714; #23 0x000056022aa2bece in PyEval_EvalCode (co=co@entry=0x56025a2e86d0, globals=globals@entry=0x7f21abff9900, ; locals=locals@entry=0x7f21abff9900) at /usr/local/src/conda/python-3.12.5/Python/ceval.c:578; #24 0x000056022aa50d9a in run_eval_code_obj (tstate=tstate@entry=0x56022ae03058 <_PyRuntime+459704>, ; co=co@entry=0x56025a2e86d0, globals=globals@entry=0x7f21abff9900, locals=locals@entry=0x7f21abff9900); at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:1722; --Type <RET> for more, q to quit, c to continue without paging--; #25 0x000056022aa4bf4b in run_mod (mod=mod@entry=0x56025a306440, ; filename=filename@entry=0x56022ad98b00 <_PyRuntime+24160>, globals=globals@entry=0x7f21abff9900, ; locals=locals@entry=0x7f21abff9900, flags=flags@entry=0x7ffc67b366b8, arena=arena@entry=0x7f215015b370); at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:1743; #26 0x000056022aa3ccb2 in PyRun_StringFla",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969:5304,optimiz,optimized,5304,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969,2,['optimiz'],['optimized']
Performance,"_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #303 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fac0e0fe470, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #304 PyImport_ImportModuleLevelObject (name=0x7fac0e0fe470, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #305 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #306 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #307 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fac0e0f68c0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #308 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fac0e0f68c0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #309 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0ae880, callargs=0x7fac0e0f68c0, func=0x7fac0e3989a0, trace_info=0x7fff1128b870, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #310 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e32fc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #311 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e32fc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #312 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:64874,optimiz,optimized,64874,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"`; Name: DEF2-TZVP; Role: ORBITAL; Keyword: BASIS; atoms 1-2, 5-7, 10 entry C line 123 file /apps/psi4conda/share/psi4/basis/def2-tzvp.gbs; atoms 3-4, 8-9, 11-13 entry O line 189 file /apps/psi4conda/share/psi4/basis/def2-tzvp.gbs; atoms 14-21 entry H line 15 file /apps/psi4conda/share/psi4/basis/def2-tzvp.gbs. Reading orbitals from file /tmp/citric_acid_B3LYP-D3_def2-tzvp_psi4_geom_opt.py.dimer_0_0.23437.180.npy, no projection. ==> Integral Setup <==. DFHelper Memory: AOs need 1.457 GiB; user supplied 24.990 GiB. Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 20; Memory [MiB]: 25589; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 19.8770; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (DEF2-TZVP AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 373; Number of basis functions: 1133; Number of Cartesian functions: 1345; Spherical Harmonics?: true; Max angular momentum: 4. Cached 100.0% of DFT collocation blocks in 2.950 [GiB]. Minimum eigenvalue in the overlap matrix is 1.9770003531E-04.; Reciprocal condition number of the overlap matrix is 2.3108928958E-05.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Orbitals guess was supplied from a previous computation. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 451 451 50 50 50 0; -------------------------------------------------------; Total 451 451 50 50 50 0; -------------------------------------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -756.64880960182893 -7.56649e+02 4.38886e-03; @DF-RKS iter 1: -756.47890146930581 1.69908e-01 5.20818e-03 DIIS; @DF-RKS iter 2: -697.36076163484927 5.91181e+01 1.70568e-02 DIIS; @DF-RKS iter 3: -757.82971261323712 -6.04690e+01 5.09847e-03 DIIS; @DF-RKS iter 4: -757.19091118720712 6.38801e-01 4.14460e",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-952880914:4101,Cache,Cached,4101,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-952880914,1,['Cache'],['Cached']
Performance,```; (p4dev35) termo@Ubuntu16:/media/BIGdisk/psi4$ /home/termo/miniconda3/envs/p4dev35/bin/cmake -H. -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsCache.cmake -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsMKLCache.cmake -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake -Bobjdir; loading initial cache file /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsCache.cmake; loading initial cache file /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsMKLCache.cmake; loading initial cache file /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; -- The C compiler identification is Intel 18.0.2.20180210; -- The CXX compiler identification is Intel 18.0.2.20180210; -- Check for working C compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icc; -- Check for working C compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icpc; -- Check for working CXX compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- The Fortran compiler identification is Intel 18.0.2.20180210; -- Check for working Fortran compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort; -- Check for working Fortran compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /home/termo/intel/compilers_and_libraries_2018.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883:344,load,loading,344,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883,6,"['cache', 'load']","['cache', 'loading']"
Performance,"```; >>> grep -ir simint_VECTOR .; ./CMakeCache.txt:SIMINT_VECTOR:STRING=sse; ./external/upstream/simint/CMakeFiles/simint_external.dir/build.make:	cd /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external-build && /Users/loriab/linux/miniconda3/envs/p4dev36/bin/cmake -DCMAKE_INSTALL_PREFIX=/usr/local/psi4 -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_INCLUDEDIR=include -DBUILD_SHARED_LIBS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DSIMINT_STANDALONE=OFF -DENABLE_TESTS=OFF -DSIMINT_VECTOR=sse -DSIMINT_MAXAM=6 -C/Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/tmp/simint_external-cache-Release.cmake ""-GUnix Makefiles"" /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external; ./external/upstream/simint/simint_external-prefix/src/simint_external-build/CMakeCache.txt:SIMINT_VECTOR:STRING=sse; ./external/upstream/simint/simint_external-prefix/src/simint_external-build/simintConfig.cmake:set(simint_VECTOR sse); ./external/upstream/simint/simint_external-prefix/tmp/simint_external-cfgcmd.txt:cmd='/Users/loriab/linux/miniconda3/envs/p4dev36/bin/cmake;-DCMAKE_INSTALL_PREFIX=/usr/local/psi4;-DCMAKE_BUILD_TYPE=Release;-DCMAKE_C_COMPILER=/usr/bin/clang;-DCMAKE_CXX_COMPILER=/usr/bin/clang++;-DCMAKE_INSTALL_LIBDIR=lib;-DCMAKE_INSTALL_INCLUDEDIR=include;-DBUILD_SHARED_LIBS=OFF;-DCMAKE_POSITION_INDEPENDENT_CODE=ON;-DSIMINT_STANDALONE=OFF;-DENABLE_TESTS=OFF;-DSIMINT_VECTOR=sse;-DSIMINT_MAXAM=6;-C/Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/tmp/simint_external-cache-$<CONFIG>.cmake;-GUnix Makefiles;/Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external'; ./stage/usr/local/psi4/share/cmake/simint/simintConfig.cmake:set(simint_VECTOR sse); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-356840364:2634,cache,cache,2634,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-356840364,1,['cache'],['cache']
Performance,"```CFLAGS=""${CF}"" FFLAGS=""-frecursive""```; LOL. The Fortran code is compiled without any optimizations? :laughing:. And no, OpenMP is not enabled. ```USE_THREAD=1``` is the pthreads version. The OpenMP version would have ```USE_THREAD=1 USE_OPENMP=1```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-387075271:89,optimiz,optimizations,89,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-387075271,1,['optimiz'],['optimizations']
Performance,"```psi4 --version``` prints correct version. ```qcengine info``` fails:; ```; $ qcengine info psi4; Traceback (most recent call last):; File ""/usr/local/bin/qcengine"", line 33, in <module>; sys.exit(load_entry_point('qcengine==0.26.0', 'console_scripts', 'qcengine')()); File ""/usr/local/bin/qcengine"", line 25, in importlib_load_entry_point; return next(matches).load(); File ""/usr/local/lib/python3.9/importlib/metadata.py"", line 86, in load; module = import_module(match.group('module')); File ""/usr/local/lib/python3.9/importlib/__init__.py"", line 127, in import_module; return _bootstrap._gcd_import(name[level:], package, level); File ""<frozen importlib._bootstrap>"", line 1030, in _gcd_import; File ""<frozen importlib._bootstrap>"", line 1007, in _find_and_load; File ""<frozen importlib._bootstrap>"", line 972, in _find_and_load_unlocked; File ""<frozen importlib._bootstrap>"", line 228, in _call_with_frames_removed; File ""<frozen importlib._bootstrap>"", line 1030, in _gcd_import; File ""<frozen importlib._bootstrap>"", line 1007, in _find_and_load; File ""<frozen importlib._bootstrap>"", line 986, in _find_and_load_unlocked; File ""<frozen importlib._bootstrap>"", line 680, in _load_unlocked; File ""<frozen importlib._bootstrap_external>"", line 850, in exec_module; File ""<frozen importlib._bootstrap>"", line 228, in _call_with_frames_removed; File ""/usr/local/lib/python3.9/site-packages/qcengine/__init__.py"", line 5, in <module>; from . import config, exceptions; File ""/usr/local/lib/python3.9/site-packages/qcengine/config.py"", line 340, in <module>; _load_defaults(); File ""/usr/local/lib/python3.9/site-packages/qcengine/config.py"", line 173, in _load_defaults; test_paths = [os.getcwd(), os.path.join(os.path.expanduser(""~""), "".qcarchive"")]; FileNotFoundError: [Errno 2] No such file or directory; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2830#issuecomment-1343732561:364,load,load,364,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343732561,2,['load'],['load']
Performance,"`delta` is the cutoff that any basis extents (the bounds of a basis function) are considered zero. BlockOPoints automatically figures out which basis functions do not contribute to the to a given points. You quickly find gaussians are incredibly local in nature. A good example, consider two atoms 5,000 Bohr apart (non-interacting). If I want to compute the a density on a grid of a single atom only the basis functions at that atom make a difference. . The following tutorial may be useful: https://github.com/psi4/psi4numpy/blob/master/Tutorials/04_Density_Functional_Theory/4b_LDA_kernel.ipynb. Note you can grab the ""active"" block of PHI like so:; ```; npoints = blockopoints.npoints(); lpos = np.array(blockopoints.functions_local_to_global()). phi = np.array(funcsbasis_values()[""PHI""])[:npoints, :lpos.shape[0]]; ```. The grid code is packed to optimal for performance and as such becomes somewhat opaque. I think I have improved readability over time, but I very much welcome suggestions and pull requests :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1051#issuecomment-399608499:865,perform,performance,865,https://psicode.org,https://github.com/psi4/psi4/issues/1051#issuecomment-399608499,1,['perform'],['performance']
Performance,"`dfocc` was better off. `dfocc` doesn't have problems 1, 2, or 4. Not sure about 5 because I'm rusty on converting DF integrals to conventional, but if it did have that problem, it would show up in the gradients. 3 is a problem in `dfocc`. I can deal with it if you'd like, but I assumed nobody would use that algorithm for orbital optimization, and it wasn't worth adding to the #1390 nightmare. Good catch on the comment. I'll update that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1829#issuecomment-594647283:332,optimiz,optimization,332,https://psicode.org,https://github.com/psi4/psi4/pull/1829#issuecomment-594647283,1,['optimiz'],['optimization']
Performance,`max_iter` is always a hard limit in all of Psi4/optimizers/conjugate gradients/etc codes. It seems that this is a high level user expectation that should be obeyed.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1335#issuecomment-436754712:49,optimiz,optimizers,49,https://psicode.org,https://github.com/psi4/psi4/pull/1335#issuecomment-436754712,1,['optimiz'],['optimizers']
Performance,"`opt10` is too big for a test case: 15 atoms, C1 symmetry, 322 basis functions, requests 32 GB of memory, and performing a transition state geometry optimization with an initial Hessian by finite difference of gradients. The calculation timed out on the 13 of 79 gradient displacements of the initial Hessian. The only thing that does help is that it's a DF-MP2 calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184219439:110,perform,performing,110,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184219439,2,"['optimiz', 'perform']","['optimization', 'performing']"
Performance,"a/python-3.10.14/Include/internal/pycore_ceval.h:46; #30 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #31 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #32 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; --Type <RET> for more, q to quit, c to continue without paging--; #33 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #34 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286660, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #35 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8697300, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #36 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8697300, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #37 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #38 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #39 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:12054,optimiz,optimized,12054,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"abd84ecdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #21 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabd84ecdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #22 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112862e0, locals=locals@entry=0x7fabd7bced00, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #23 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd78907c0, globals=globals@entry=0x7fabd7bced00, locals=locals@entry=0x7fabd7bced00); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #24 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd7bced00, globals=0x7fabd7bced00, source=0x7fabd78907c0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #25 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #26 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd7888dd8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #27 0x000055ff90677205 in do_call_core (kwdict=0x7fabd7bce4c0, callargs=0x7fabd7888dc0, func=0x7fac0e398e00, trace_info=0x7fff112864b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #28 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8949cf0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #29 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8949cf0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #30 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:10244,optimiz,optimized,10244,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"abd8903a70, f=0x7fabdcdb7a00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #186 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabdcdb7a00, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #187 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabdcdb7a00, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #188 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112894b0, locals=locals@entry=0x7fabd8903bc0, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #189 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8a87940, globals=globals@entry=0x7fabd8903bc0, locals=locals@entry=0x7fabd8903bc0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #190 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd8903bc0, globals=0x7fabd8903bc0, source=0x7fabd8a87940); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #191 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #192 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd8a8a4d8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #193 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8903b00, callargs=0x7fabd8a8a4c0, func=0x7fac0e398e00, trace_info=0x7fff11289680, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #194 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95d41d50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; --Type <RET> for more, q to quit, c to continue without paging--; #195 0x000055ff90681a2c in _PyEval_EvalFrame (thr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:42248,optimiz,optimized,42248,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"abd8928580, f=0x7fac0e074610, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #260 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e074610, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #261 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e074610, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #262 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128aae0, locals=locals@entry=0x7fabdcd7a300, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #263 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8a86550, globals=globals@entry=0x7fabdcd7a300, locals=locals@entry=0x7fabdcd7a300); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #264 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabdcd7a300, globals=0x7fabdcd7a300, source=0x7fabd8a86550); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #265 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #266 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e0e6fd8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #267 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8902480, callargs=0x7fac0e0e6fc0, func=0x7fac0e398e00, trace_info=0x7fff1128acb0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #268 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8fa8550, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #269 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8fa8550, tstate=0x55ff9515e050) at /usr/local/s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:56572,optimiz,optimized,56572,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"abd8fa9cf0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #67 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8fa9cf0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #68 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112870b0, locals=locals@entry=0x7fabd8887400, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #69 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd88826b0, globals=globals@entry=0x7fabd8887400, locals=locals@entry=0x7fabd8887400); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #70 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd8887400, globals=0x7fabd8887400, source=0x7fabd88826b0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #71 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #72 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd88851d8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #73 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8887300, callargs=0x7fabd88851c0, func=0x7fac0e398e00, trace_info=0x7fff11287280, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #74 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c49700, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #75 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c49700, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #76 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:19198,optimiz,optimized,19198,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ac0e136530, f=0x7fac0e16ec00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #372 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16ec00, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #373 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16ec00, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #374 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128cd30, locals=locals@entry=0x7fac0e071580, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #375 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fac0e06f7e0, globals=globals@entry=0x7fac0e071580, locals=locals@entry=0x7fac0e071580); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #376 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e071580, globals=0x7fac0e071580, source=0x7fac0e06f7e0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #377 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #378 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e041e18, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #379 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e071540, callargs=0x7fac0e041e00, func=0x7fac0e398e00, trace_info=0x7fff1128cf00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #380 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16a3b0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #381 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16a3b0, tstate=0x55ff9515e050) at /usr/local/s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:78361,optimiz,optimized,78361,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ac0e308030, f=0x7fac0e1fccc0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #326 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e1fccc0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #327 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e1fccc0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #328 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128bf60, locals=locals@entry=0x7fac0e072700, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #329 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fac0e1b7050, globals=globals@entry=0x7fac0e072700, locals=locals@entry=0x7fac0e072700); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #330 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e072700, globals=0x7fac0e072700, source=0x7fac0e1b7050); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; --Type <RET> for more, q to quit, c to continue without paging--; #331 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #332 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e1a1898, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #333 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0728c0, callargs=0x7fac0e1a1880, func=0x7fac0e398e00, trace_info=0x7fff1128c130, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #334 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16bb50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #335 0x000055ff90681a2c in _PyEval_EvalFrame (thr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:69361,optimiz,optimized,69361,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"achines; * a package built after switching the ENABLE_XHOST from `/arch:AVX2` to `/arch:AVX` seemed to work for all; * even before #2377, that flag wasn't active: https://dev.azure.com/psi4/psi4/_build/results?buildId=3455&view=logs&j=f31c9f97-4411-58e7-49ac-fc73f645e6b6&t=37c784ef-3eed-5b43-b403-e5baa44c3c05&l=32; ```; 2021-11-28T04:42:21.6163025Z -- The CXX compiler identification is Clang 13.0.0 with MSVC-like command-line; 2021-11-28T04:42:25.0744510Z -- Check for working C compiler: C:/Program Files/LLVM/bin/clang-cl.exe - skipped; 2021-11-28T04:42:25.4493255Z -- Check for working CXX compiler: C:/Program Files/LLVM/bin/clang-cl.exe - skipped; 2021-11-28T04:42:26.3103349Z -- Setting option ENABLE_XHOST: ON; 2021-11-28T04:42:26.6553541Z -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```; * this PR at first commit that adds `/arch:AVX` to CMAKE_CXX_FLAGS generates a bunch of the below; ```; 2021-12-16T22:33:46.0792776Z -- Build files have been written to: D:/a/1/b/build/psi4-core-prefix/src/psi4-core-build; 2021-12-16T22:33:46.0793909Z [6/9] Performing build step for 'psi4-core'; 2021-12-16T22:33:50.7743244Z [1/1263] Building CXX object src\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_row_zero.cc.obj; 2021-12-16T22:33:50.8074886Z clang-cl: warning: argument unused during compilation: '/arch:AVX' [-Wunused-command-line-argument]; 2021-12-16T22:33:50.8077002Z [2/1263] Building CXX object src\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_row_wrt.cc.obj; 2021-12-16T22:33:50.8080336Z clang-cl: warning: argument unused during compilation: '/arch:AVX' [-Wunused-command-line-argument]; 2021-12-16T22:33:50.8416165Z [3/1263] Building CXX object src\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_row_init.cc.obj; ```. So perhaps the original #2292 fix was a dud, and we've just gotten lucky about being built on older AVX nodes where march=native does the trick. (We may have been helped for this by using an old build env that they're about to retire.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2384#issuecomment-997024098:1258,Perform,Performing,1258,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-997024098,1,['Perform'],['Performing']
Performance,adding temporary timers in psipcm.cc could help identifying the bottleneck.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1280#issuecomment-438242744:64,bottleneck,bottleneck,64,https://psicode.org,https://github.com/psi4/psi4/issues/1280#issuecomment-438242744,1,['bottleneck'],['bottleneck']
Performance,"adient; > **kwargs); > File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 183, in _process_displacement; > derivative, wfn = derivfunc(method, return_wfn=True, molecule=clone, **kwargs); > File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 556, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/home/username/miniconda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2018, in run_scf; > dfmp2_wfn.compute_energy(); >; > RuntimeError:; > Fatal Error: There are no occupied orbitals with beta spin.; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/dfmp2/mp2.cc on line: 196; > The most recent 5 function calls were:; >; >; >; >; > Printing out the relevant lines from the Psithon --> Python processed input file:; > core.set_global_option(""DFT_SPHERICAL_POINTS"", 434); > core.set_global_option(""DFT_RADIAL_POINTS"", 85); > core.set_global_option(""REFERENCE"", ""uhf""); > set_memory(100000000000); > try:; > --> optimize('pwpb95-d3bj'); > except SCFConvergenceError as e:; > unconverged_scf_wfn = e.wfn; > unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); > core.set_global_option(""GUESS"", ""read""); > optimize('pwpb95-d3bj'); >; > Psi4 stopped on: Friday, 21 August 2020 04:21PM; > Psi4 wall time for execution: 0:00:04.47; >; > *** Psi4 encountered an error. Buy a developer more coffee!; > *** Resources and help at github.com/psi4/psi4.; >; > As I am fairly new to quantum chemistry, I do not really know how to; > interpret this error.; >; > Any pointers are appreciated.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1995>, or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5SWSSKR4VM2JNJYNU3SC2AEXANCNFSM4QNFCNKQ>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879:3952,optimiz,optimize,3952,https://psicode.org,https://github.com/psi4/psi4/issues/1995#issuecomment-682586879,2,['optimiz'],['optimize']
Performance,"aging--; #33 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #34 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286660, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #35 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8697300, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #36 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8697300, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #37 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #38 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #39 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #40 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #41 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286810, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #42 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8890fc0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #43 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8890fc0, tstate=0x55ff9515e050) at /usr/local/src/conda/pyt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:12810,optimiz,optimized,12810,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"al/src/conda/python-3.10.14/Python/ceval.c:6018; #140 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95dcd100, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #141 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x55ff95dcd100, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #142 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112886e0, locals=locals@entry=0x7fac0e0f83c0, args=args@entry=0x0, argcount=argcount@entry=0, ; --Type <RET> for more, q to quit, c to continue without paging--; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #143 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8882550, globals=globals@entry=0x7fac0e0f83c0, locals=locals@entry=0x7fac0e0f83c0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #144 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e0f83c0, globals=0x7fac0e0f83c0, source=0x7fabd8882550); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #145 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #146 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e0d4c58, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #147 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8938500, callargs=0x7fac0e0d4c40, func=0x7fac0e398e00, trace_info=0x7fff112888b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #148 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95e324c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #149 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95e324c0, tstate=0x55ff9515e050) at /usr/local/s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:33314,optimiz,optimized,33314,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"all.c:305; #234 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8e6c550, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #235 0x000055ff90677205 in do_call_core (kwdict=0x7fabd89038c0, callargs=0x7fabd8e6c550, func=0x7fac0e3989a0, trace_info=0x7fff1128a240, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #236 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b81240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #237 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b81240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #238 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #239 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #240 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #241 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #242 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a3f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #243 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2ca240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #244 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2ca240, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:51668,optimiz,optimized,51668,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"all.c:305; #308 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fac0e0f68c0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #309 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0ae880, callargs=0x7fac0e0f68c0, func=0x7fac0e3989a0, trace_info=0x7fff1128b870, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #310 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e32fc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #311 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e32fc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #312 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #313 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #314 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #315 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #316 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ba20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #317 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c6db10, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #318 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c6db10, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:65992,optimiz,optimized,65992,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"als=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #218 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #219 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #220 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #221 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289d40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #222 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4288610, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #223 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4288610, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #224 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #225 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #226 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11289e70, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #227 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:48521,optimiz,optimized,48521,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"als=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #246 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #247 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #248 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #249 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a5a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #250 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4df3880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #251 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4df3880, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #252 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #253 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #254 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128a6d0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #255 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:53845,optimiz,optimized,53845,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"alue<double const&>, double (_)()> (rc=..., f=<optimized out>) ; > > at /usr/include/boost/python/detail/invoke.hpp:75 ; > > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223 ; > > #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (_)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38 ; > > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0 ; > > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const () ; > > from /usr/lib/libboost_python3.so.1.54.0 ; > > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...) ; > > at /usr/include/boost/python/detail/translate_exception.hpp:48 ; > > #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&> > (f=..., a=<synthetic pointer>, this=<optimized out>) at /usr/include/boost/bind/bind.hpp:382 ; > > #15 operator()<boost::python::detail::exception_handler, boost::function0<void> > (a2=..., a1=..., this=<optimized out>) ; > > at /usr/include/boost/bind/bind_template.hpp:102 ; > > #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, b",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:3398,optimiz,optimized,3398,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,2,['optimiz'],['optimized']
Performance,"alueError(""No scan!""); Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want to build another [Engine](https://github.com/leeping/geom",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:2528,optimiz,optimize,2528,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792,1,['optimiz'],['optimize']
Performance,"am getting conflicts when I try to install the yml file to a fresh env (see below). Is there an easier work around than this? I was able to pip install torsiondrive, but I get an error message relating to geometric? uninstalling and reinstalling geometric does not solve this. ```; FailedOperation(error=ComputeError(error_type='unknown', error_message='TorsionDrive error at 100:\ngeomeTRIC run_json error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\run_json.py"", line 269, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\compute.py"", line 105, in compute\n output_data = executor.co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:1150,optimiz,optimize,1150,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020,1,['optimiz'],['optimize']
Performance,"ames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #354 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c640, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #355 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #356 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #357 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; --Type <RET> for more, q to quit, c to continue without paging--; #358 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #359 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #360 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #361 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c7f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #362 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e1d18a0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #363 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e1d18a0, tstate=0x55f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:74860,optimiz,optimized,74860,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,are all the test plugins building ok upon first compilation? What does your (staged or installed) [plugin cache](https://github.com/psi4/psi4/blob/master/psi4/psi4PluginCache.cmake.in) look like?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271921477:106,cache,cache,106,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271921477,1,['cache'],['cache']
Performance,"ate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11286d30) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #62 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #63 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd784bdb0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #64 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd8887530, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fabd887f290, level=1); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #65 0x000055ff9067536b in import_name (level=0x7fac0e3000f0, fromlist=0x7fabd887f290, name=0x7fabd8887530, f=0x7fabd8fa9cf0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #66 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8fa9cf0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #67 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8fa9cf0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #68 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112870b0, locals=locals@entry=0x7fabd8887400, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #69 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd88826b0, globals=globals@entry=0x7fabd8887400, locals=locals@entry=0x7fabd8887400); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #70 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd8887400, globals=0x7fabd8887400, source=0x7fabd88826b0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #71 builtin_exec (module=<optimized out>, args=<optimized ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:18206,optimiz,optimized,18206,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"ather related to PSI4 than dmrg. Just look at; > the example you provided for water molecule :; > ; > Number of atoms: 3; > Number of AO shells: 9; > Number of SO shells: 7; > Number of primitives: 22; > Number of atomic orbitals: 13; > Number of basis functions: 13; > ; > Number of irreps: 4; > Integral cutoff 0.00e+00; > Number of functions per irrep: [ 7 0 4 2 ]; > ; > OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; > stored in file 35.; > ; > Computing two-electron integrals...done; > Computed 1270 non-zero two-electron integrals.; > Stored in file 33.; > ; > Calling plugin fcidump.so.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 1; > Transforming the one-electron integrals and constructing Fock matrices; > Starting first half-transformation.; > Sorting half-transformed integrals.; > First half integral transformation complete.; > Starting second half-transformation.; > Two-electron integral transformation complete.; > Created the file H2O.631G.FCIDUMP; > ; > As you see a full 2- electron integral calculation is performed for ALL; > basis functions (13) and stored, just BEFORE fcidump starts with dumping !!!; > I would like to circumvent this heavy calculation for the case of larger; > molecules.; > ; > Any way i try your advice but may i know at which line of fcidump.cc i; > have to copy and paste; > 781-811 and 814-858 lines of dmrgscf.cc ?; > ; > Furthermore may i know what is the x matrix : ""Number of variables in the; > x-matrix = 1032""; > and what is nbuckets in : "" SO Ints (nn|nn) nbuckets = 78""; > ; > ALL THE BEST; > LUCA; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/98#issuecomment-105341330. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105429617:2049,perform,performed,2049,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105429617,2,['perform'],['performed']
Performance,"atures - done; -- Checking whether CXX compiler has -isysroot; -- Checking whether CXX compiler has -isysroot - yes; -- Checking whether CXX compiler supports OSX deployment target flag; -- Checking whether CXX compiler supports OSX deployment target flag - yes; -- Check for working CXX compiler: /usr/local/bin/g++-8; -- Check for working CXX compiler: /usr/local/bin/g++-8 -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option ENABLE_MSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 14; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Setting (unspecified) op",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:4217,Perform,Performing,4217,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308,1,['Perform'],['Performing']
Performance,"base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128d780) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #414 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #415 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fac0e1341f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #416 PyImport_ImportModuleLevelObject (name=name@entry=0x7fac0e1341f0, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x55ff908c17e0 <_Py_NoneStruct>, level=0); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #417 0x000055ff9067536b in import_name (level=0x7fac0e3000d0, fromlist=0x55ff908c17e0 <_Py_NoneStruct>, name=0x7fac0e1341f0, f=0x7fac0e329a40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #418 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e329a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #419 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e329a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #420 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128db00, locals=locals@entry=0x7fac0e241bc0, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #421 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fac0e2b80e0, globals=globals@entry=0x7fac0e241bc0, locals=locals@entry=0x7fac0e241bc0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #422 0x000055ff9074512a in run_eval_code_obj (tstate=tstate@entry=0x55ff9515e050, co=co@entry=0x7fac0e2b80e0, globals=globals@entry=0x7fac0e241bc0, locals=locals@entry=0x7fac0e241bc0); at /usr/local/src/conda/python-3.10.14/Python/pythonrun.c:1291; #423 0x00005",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:86578,optimiz,optimized,86578,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"bd8a583d0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; --Type <RET> for more, q to quit, c to continue without paging--; #115 0x000055ff90677205 in do_call_core (kwdict=0x7fabd88870c0, callargs=0x7fabd8a583d0, func=0x7fac0e3989a0, trace_info=0x7fff11287e40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #116 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95de00f0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #117 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95de00f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #118 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #119 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #120 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #121 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #122 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287ff0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #123 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95ddd860, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #124 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95ddd860, tstate=0x55ff9515e050) at /usr/local/src/cond",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:28410,optimiz,optimized,28410,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"build constructors by following instructions https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md. * edit tag and hash; * clear package cache; * `python run.py`; * check for noarch (BAD); * upload to vergil. generate the download site; * create new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md mind the edition string `v13rc2` for this and future filenames; * copy and edit new https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; * enter `scripts/` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; * run the `install-generator.py` in place. it will dump new files into `data/installs/` _subdirs_. be sure to `git add` them.; * installer page is ready. if wanted, edit the desination of the `Download` nav button https://github.com/psi4/psicode-hugo-website/blob/master/config.toml#L35; * pays to test; * installer on Mac and Linux; * that download button and `curl` downloading register on the download counters on vergil",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-464912733:179,cache,cache,179,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-464912733,2,['cache'],['cache']
Performance,"c.optimize.ParseConstraints(M, constraints_string); > ; > ; > # Set up the internal coordinate system; > coordsys = input_opts.get('coordsys', 'tric'); > CoordSysDict = {; > 'cart': (geometric.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],op",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:2733,optimiz,optimizer,2733,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275,1,['optimiz'],['optimizer']
Performance,"careful with SCAN though.I don't know how Q-chem implemented this functional, but the Turbomole implementation requires quite a hefty increase in radial grid points to get gradients usable for optimizations. Angular grid is unproblematic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/962#issuecomment-382385597:193,optimiz,optimizations,193,https://psicode.org,https://github.com/psi4/psi4/issues/962#issuecomment-382385597,2,['optimiz'],['optimizations']
Performance,"ci'); ```. ```; @ROHF iter 32: -342.84910912994206 -1.13687e-13 7.97882e-15 DIIS; @ROHF iter 33: -342.84910912994206 0.00000e+00 5.47136e-15 DIIS; ```. ```; Psi4 symmetry group was found to be <cs>.; wfn_irrep = 1; wfn_multp = 2; numOrbitals = [ 47 , 9 ]; R(O)HF DOCC = [ 28 , 4 ]; R(O)HF SOCC = [ 0 , 1 ]; frozen_docc = [ 9 , 0 ]; active = [ 38 , 9 ]; virtual = [ 0 , 0 ]; nElectrons = 65; nEl. active = 47; ###########################################################; ### ###; ### DMRG-SCF ###; ### ###; ### CheMPS2 by Sebastian Wouters ###; ### https://github.com/SebWouters/CheMPS2 ###; ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; ### ###; ###########################################################. Number of variables in the x-matrix = 342; CheMPS2 output is temporarily written to the file susi2.out.chemps2 and will be copied here.; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 1; Transforming the one-electron integrals and constructing Fock matrices; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete.; CheMPS2 output is temporarily written to the file susi2.out.chemps2 and will be copied here.; EdmistonRuedenberg::Optimize : Cost function at start = 11.6978759080747; Cost function at stop = 39.88912832949; Gradient norm = 1.14176119927824e-09 after 14 iterations.; EdmistonRuedenberg::FiedlerExchange : Cost function at start = 855.317140538854; EdmistonRuedenberg::FiedlerExchange : Cost function at end = 13.7691914991716; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete.; Rotated the active space to localized orbitals, sorted according to the exchange matrix.; CheMPS2 output is temporarily written to the file ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/464#issuecomment-244580097:2877,Optimiz,Optimize,2877,https://psicode.org,https://github.com/psi4/psi4/issues/464#issuecomment-244580097,1,['Optimiz'],['Optimize']
Performance,compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2153,Perform,Performing,2153,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,"count=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #189 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8a87940, globals=globals@entry=0x7fabd8903bc0, locals=locals@entry=0x7fabd8903bc0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #190 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd8903bc0, globals=0x7fabd8903bc0, source=0x7fabd8a87940); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #191 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #192 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd8a8a4d8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #193 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8903b00, callargs=0x7fabd8a8a4c0, func=0x7fac0e398e00, trace_info=0x7fff11289680, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #194 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95d41d50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; --Type <RET> for more, q to quit, c to continue without paging--; #195 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95d41d50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #196 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #197 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #198 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<opti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:42925,optimiz,optimized,42925,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"count=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #263 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8a86550, globals=globals@entry=0x7fabdcd7a300, locals=locals@entry=0x7fabdcd7a300); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #264 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabdcd7a300, globals=0x7fabdcd7a300, source=0x7fabd8a86550); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #265 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #266 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e0e6fd8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #267 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8902480, callargs=0x7fac0e0e6fc0, func=0x7fac0e398e00, trace_info=0x7fff1128acb0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #268 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8fa8550, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #269 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8fa8550, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #270 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #271 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #272 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510, tstate=0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:57249,optimiz,optimized,57249,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"count=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #375 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fac0e06f7e0, globals=globals@entry=0x7fac0e071580, locals=locals@entry=0x7fac0e071580); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #376 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e071580, globals=0x7fac0e071580, source=0x7fac0e06f7e0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #377 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #378 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e041e18, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #379 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e071540, callargs=0x7fac0e041e00, func=0x7fac0e398e00, trace_info=0x7fff1128cf00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #380 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16a3b0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #381 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16a3b0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #382 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #383 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #384 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510, tstate=0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:79038,optimiz,optimized,79038,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ct.c:543; #233 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fabd8e6c550, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #234 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8e6c550, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #235 0x000055ff90677205 in do_call_core (kwdict=0x7fabd89038c0, callargs=0x7fabd8e6c550, func=0x7fac0e3989a0, trace_info=0x7fff1128a240, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #236 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b81240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #237 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b81240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #238 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #239 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #240 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #241 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #242 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a3f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #243 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2ca240, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:51431,optimiz,optimized,51431,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct.c:543; #307 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fac0e0f68c0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #308 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fac0e0f68c0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #309 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0ae880, callargs=0x7fac0e0f68c0, func=0x7fac0e3989a0, trace_info=0x7fff1128b870, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #310 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e32fc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #311 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e32fc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #312 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #313 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #314 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #315 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #316 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ba20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #317 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c6db10, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:65755,optimiz,optimized,65755,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct.h:99; #11 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #12 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286030, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #13 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff96063c70, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #14 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff96063c70, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #15 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fabd8177800, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #16 _PyFunction_Vectorcall (func=0x7fabd81777f0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #17 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd84ecf40, callable=0x7fabd81777f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #18 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd84ecf40, callable=0x7fabd81777f0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #19 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112861e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #20 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd84ecdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #21 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabd84ecdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/pyt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:8482,optimiz,optimized,8482,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0 ; > > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const () ; > > from /usr/lib/libboost_python3.so.1.54.0 ; > > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...) ; > > at /usr/include/boost/python/detail/translate_exception.hpp:48 ; > > #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&> > (f=..., a=<synthetic pointer>, this=<optimized out>) at /usr/include/boost/bind/bind.hpp:382 ; > > #15 operator()<boost::python::detail::exception_handler, boost::function0<void> > (a2=..., a1=..., this=<optimized out>) ; > > at /usr/include/boost/bind/bind_template.hpp:102 ; > > #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132 ; > > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0 ; > > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084 ; > > #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optim",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:4005,optimiz,optimized,4005,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,2,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #199 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #200 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289830, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #201 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c373d0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #202 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c373d0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #203 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #204 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #205 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #206 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #207 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112899e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #208 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6cdd0, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:44770,optimiz,optimized,44770,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #315 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #316 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ba20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #317 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c6db10, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #318 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c6db10, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #319 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3634a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #320 _PyFunction_Vectorcall (func=0x7fac0e363490, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #321 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=3, args=0x7fff1128bb50, callable=0x7fac0e363490, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #322 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363490, vargs=0x7fff1128bbe0) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #323 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9a80 <PyId__handle_fromlist.13>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #324 0x000055ff905b230b in PyImport_ImportModuleLevelObject (name=name@entry=0x7fac0e308030, globals=<optimized",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:67092,optimiz,optimized,67092,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #121 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #122 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287ff0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #123 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95ddd860, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #124 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95ddd860, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #125 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #126 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #127 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #128 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #129 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112881a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #130 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b83040, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:29510,optimiz,optimized,29510,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #213 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #214 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289b90, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #215 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #216 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #217 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #218 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #219 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #220 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #221 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289d40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #222 _PyEval_EvalFram",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:47444,optimiz,optimized,47444,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #174 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #175 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288f70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #176 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891a240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #177 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd891a240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #178 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #179 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #180 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff112890a0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #181 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11289130) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #182 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #183 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd8928940, tstate=0x55ff9515e050) at /usr/local/src",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:39847,optimiz,optimized,39847,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #100 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #101 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287940, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #102 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32020, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #103 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b32020, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #104 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #105 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #106 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11287a70, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #107 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11287b00) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #108 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #109 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd887f0f0, tstate=0x55ff9515e050) at /usr/local/src",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:25523,optimiz,optimized,25523,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #287 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #288 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b1c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #289 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2ae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #290 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2ae40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #291 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #292 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #293 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #294 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #295 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b370, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #296 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2b040, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:61768,optimiz,optimized,61768,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #294 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #295 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b370, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #296 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2b040, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #297 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2b040, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #298 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #299 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #300 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128b4a0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #301 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128b530) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #302 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #303 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fac0e0fe470, tstate=0x55ff9515e050) at /usr/local/src",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:63105,optimiz,optimized,63105,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #153 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #154 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288a60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #155 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c4a880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #156 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c4a880, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #157 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #158 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #159 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #160 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #161 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288c10, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #162 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6f680, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:35770,optimiz,optimized,35770,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #206 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #207 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112899e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #208 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6cdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #209 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6cdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #210 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #211 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #212 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #213 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #214 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289b90, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #215 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918a40, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:46107,optimiz,optimized,46107,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #160 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #161 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288c10, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #162 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6f680, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #163 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6f680, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #164 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #165 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #166 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #167 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #168 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288dc0, tstate=<optimized out>); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #169 _PyEval_EvalFram",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:37107,optimiz,optimized,37107,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #280 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #281 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b010, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #282 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4289b60, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #283 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4289b60, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #284 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #285 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #286 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #287 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #288 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b1c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #289 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2ae40, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:60431,optimiz,optimized,60431,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #128 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #129 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112881a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #130 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b83040, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #131 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b83040, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #132 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #133 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #134 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff112882d0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #135 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11288360) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #136 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #137 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd884ea30, tstate=0x55ff9515e050) at /usr/local/src",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:30847,optimiz,optimized,30847,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #346 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #347 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c490, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #348 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e074420, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #349 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e074420, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #350 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #351 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #352 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #353 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #354 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c640, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #355 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb840, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:73220,optimiz,optimized,73220,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #360 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #361 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c7f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #362 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e1d18a0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #363 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e1d18a0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #364 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #365 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #366 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128c920, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #367 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128c9b0) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #368 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #369 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fac0e079f30, tstate=0x55ff9515e050) at /usr/local/src",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:75960,optimiz,optimized,75960,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #241 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #242 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a3f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #243 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2ca240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #244 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2ca240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #245 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #246 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #247 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #248 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #249 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a5a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #250 _PyEval_EvalFram",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:52768,optimiz,optimized,52768,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #406 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #407 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d5c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #408 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #409 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cae40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #410 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #411 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; --Type <RET> for more, q to quit, c to continue without paging--; #412 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128d6f0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #413 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128d780) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #414 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #415 0x000055ff905b2187 in import_find_and_load ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:84894,optimiz,optimized,84894,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #399 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #400 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d410, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #401 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #402 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #403 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #404 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #405 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #406 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #407 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d5c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #408 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cae40, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:83557,optimiz,optimized,83557,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #353 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #354 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c640, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #355 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #356 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #357 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; --Type <RET> for more, q to quit, c to continue without paging--; #358 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #359 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #360 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #361 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c7f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #362 _PyEval_EvalFram",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:74557,optimiz,optimized,74557,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #392 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #393 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d260, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #394 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3bf870, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #395 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3bf870, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #396 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #397 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #398 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #399 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #400 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d410, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #401 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb240, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:82220,optimiz,optimized,82220,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ct_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #339 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #340 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c2e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #341 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3c5000, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #342 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3c5000, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #343 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #344 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #345 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #346 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #347 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c490, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #348 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e074420, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:71883,optimiz,optimized,71883,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ction (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286030, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #13 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff96063c70, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #14 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff96063c70, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #15 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fabd8177800, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #16 _PyFunction_Vectorcall (func=0x7fabd81777f0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #17 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd84ecf40, callable=0x7fabd81777f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #18 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd84ecf40, callable=0x7fabd81777f0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #19 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112861e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #20 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd84ecdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #21 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabd84ecdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #22 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112862e0, locals=locals@entry=0x7fabd7bced00, args=args@entry=0x0, argcount=a",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:8681,optimiz,optimized,8681,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ction (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286660, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #35 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8697300, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #36 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8697300, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #37 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #38 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #39 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #40 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #41 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286810, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #42 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8890fc0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #43 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8890fc0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #44 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:13009,optimiz,optimized,13009,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ction (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286810, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #42 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8890fc0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #43 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8890fc0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #44 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #45 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #46 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #47 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #48 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112869c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #49 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd88a0a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #50 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd88a0a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #51 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:14339,optimiz,optimized,14339,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ction (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112869c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #49 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd88a0a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #50 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd88a0a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #51 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #52 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #53 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #54 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #55 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286b70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #56 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32d40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #57 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b32d40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #58 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:15669,optimiz,optimized,15669,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ction (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287430, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #81 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6eae0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #82 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6eae0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #83 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #84 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #85 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #86 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; --Type <RET> for more, q to quit, c to continue without paging--; #87 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112875e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #88 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b7c840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #89 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b7c840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #90 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:21897,optimiz,optimized,21897,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ction (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112875e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #88 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b7c840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #89 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b7c840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #90 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #91 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #92 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #93 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #94 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287790, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #95 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918c40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #96 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918c40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #97 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:23293,optimiz,optimized,23293,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ction (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287790, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #95 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918c40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #96 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918c40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #97 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #98 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #99 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #100 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #101 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287940, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #102 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32020, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #103 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b32020, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #104 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050);",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:24623,optimiz,optimized,24623,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ctrons = 4; Nalpha = 2; Nbeta = 2. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: AUG-CC-PVTZ; Number of shells: 14; Number of basis function: 46; Number of Cartesian functions: 55; Spherical Harmonics?: true; Max angular momentum: 3. ==> Pre-Iterations <==. ---. ```; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; ```. ---. ```; Ag 11 11 0 0 0 0; B1g 3 3 0 0 0 0; B2g 3 3 0 0 0 0; B3g 3 3 0 0 0 0; Au 2 2 0 0 0 0; B1u 8 8 0 0 0 0; B2u 8 8 0 0 0 0; B3u 8 8 0 0 0 0; ```. ---. ```; Total 46 46 2 2 2 0; ```. ---. Starting with a DF guess... OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. ```; J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 12; Integrals threads: 12; Memory (MB): 34332; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12; ```. => Auxiliary Basis Set <=. Basis Set:; Number of shells: 30; Number of basis function: 104; Number of Cartesian functions: 131; Spherical Harmonics?: true; Max angular momentum: 4. Minimum eigenvalue in the overlap matrix is 2.5053959051E-02.; Using Symmetric Orthogonalization.; SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. ```; Total Energy Delta E RMS |[F,P]|; ```. @DF-RHF iter 1: -23.49398571874617 -2.34940e+01 7.47577e-02; @DF-RHF iter 2: -24.22630554723446 -7.32320e-01 7.13952e-03 DIIS; @DF-RHF iter 3: -24.23662538410707 -1.03198e-02 7.21912e-04 DIIS; @DF-RHF iter 4: -24.23681435257776 -1.88968e-04 6.97945e-05 DIIS; @DF-RHF iter 5: -24.23681649173431 -2.13916e-06 2.93127e-06 DIIS; @DF-RHF iter 6: -24.23681649645996 -4.72565e-09 1.53123e-07 DIIS; @DF-RHF iter 7: -24.23681649646912 -9.16245e-12 1.38238e-09 DIIS. DF guess converged. ==> Integral Setup <==. MINTS: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170152270:4296,Cache,Cache,4296,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270,1,['Cache'],['Cache']
Performance,"cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > > > const&), std::shared_ptr<psi::SuperFunctional> (*)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::optional<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, double, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > > > const&), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, pybind11::arg const&, pybind11::arg const&, pybind11::arg_v const&, char const (&) [43])::{lambda(pybind11::detail::function_call&)#1}::operator()(pybind11::detail::function_call&) const (__closure=<optimized out>, call=...) at /home/susi/.conda/envs/p4env/include/pybind11/pybind11.h:297; #6 0x00007fac0b7a3925 in pybind11::cpp_function::dispatcher (self=<optimized out>, args_in=0x7fabd7888e00, kwargs_in=0x0) at /home/susi/.conda/envs/p4env/include/pybind11/pybind11.h:987; #7 0x000055ff906815a6 in cfunction_call (func=0x7fac0e0cdb20, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; --Type <RET> for more, q to quit, c to continue without paging--; #8 0x000055ff9067aa6b in _PyObject_MakeTpCall (tstate=0x55ff9515e050, callable=callable@entry=0x7fac0e0cdb20, args=args@entry=0x55ff96063ea0, nargs=2, keywords=keywords@entry=0x0); at /usr/local/src/conda/python-3.10.14/Objects/call.c:215; #9 0x000055ff906769d6 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=<optimized out>, callable=0x7fac0e0cdb20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:112; #10 _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20, tstate=<optimized out>); at /usr/local/src/conda/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:6464,optimiz,optimized,6464,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,d I wanted to see if that would redirect. It does not re-direct but none of the CSS elements associated with the manual are being loaded properly. I see the manual appearing as plain HTML. The same thing happens if I navigate to the manual from the psicode.org homepage. The console in chrome and safari are showing 404 errors for js and css:. http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/doctools.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/underscore.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of 404 (Not Found); index.html:368 Uncaught ReferenceError: $ is not defined; http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210015028:1240,load,load,1240,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028,1,['load'],['load']
Performance,"d distribute with Psi4, much; like we do Boost?. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 25, 2015 8:22 AM, ""wpoely86"" notifications@github.com wrote:. > Easybuild https://hpcugent.github.io/easybuild/ is not an alternative; > to CMake or autoconf. The idea is to have an easy way to make reproducible; > builds and modules. Everything in the stack should also be optimally build,; > meaning utilizing the hardware to its full extend (for example, if AVX2 or; > infiniband is available, we will use it). Easybuild will take care of all; > dependencies. It will avoid using the OS installed (old) versions of; > software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after; > building a compiler (GCC/intel/...) from scratch. We also patch out any; > problem. Psi4 for example hard codes it's build path for the generation of; > new plugins. This is not desirable on a HPC system. Some software is also; > not adjusted to be build by anything other than GCC. We make it work with; > intel too. Some software doesn't even have a real build system other than a; > list of makefiles that usually don't work out of the box. We fix that so; > the build is reproducible .; > ; > It's primarily meant for HPC sites. If somebody adds support for a piece; > of software, other people can reuse it with one command. I use it to build; > Psi4 in production. If you're developing, Easybuild is useful for building; > all up to date versions of dependencies.; > ; > On our systems, if I run: module load PSI, I get a psi4 (a git version; > from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and; > mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for; > example GCC-5.1, it takes one command.; > ; > Adding a GCC subproject to Psi sounds like a bad idea. Building GCC is not; > a trivial task.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/97#issuecomment-105224328.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105251086:1800,load,load,1800,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105251086,1,['load'],['load']
Performance,"d on the flag situation. Points:. * we were getting reports at the forum that the Win conda package (built during the Azure CI) wasn't working for some machines; * a package built after switching the ENABLE_XHOST from `/arch:AVX2` to `/arch:AVX` seemed to work for all; * even before #2377, that flag wasn't active: https://dev.azure.com/psi4/psi4/_build/results?buildId=3455&view=logs&j=f31c9f97-4411-58e7-49ac-fc73f645e6b6&t=37c784ef-3eed-5b43-b403-e5baa44c3c05&l=32; ```; 2021-11-28T04:42:21.6163025Z -- The CXX compiler identification is Clang 13.0.0 with MSVC-like command-line; 2021-11-28T04:42:25.0744510Z -- Check for working C compiler: C:/Program Files/LLVM/bin/clang-cl.exe - skipped; 2021-11-28T04:42:25.4493255Z -- Check for working CXX compiler: C:/Program Files/LLVM/bin/clang-cl.exe - skipped; 2021-11-28T04:42:26.3103349Z -- Setting option ENABLE_XHOST: ON; 2021-11-28T04:42:26.6553541Z -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```; * this PR at first commit that adds `/arch:AVX` to CMAKE_CXX_FLAGS generates a bunch of the below; ```; 2021-12-16T22:33:46.0792776Z -- Build files have been written to: D:/a/1/b/build/psi4-core-prefix/src/psi4-core-build; 2021-12-16T22:33:46.0793909Z [6/9] Performing build step for 'psi4-core'; 2021-12-16T22:33:50.7743244Z [1/1263] Building CXX object src\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_row_zero.cc.obj; 2021-12-16T22:33:50.8074886Z clang-cl: warning: argument unused during compilation: '/arch:AVX' [-Wunused-command-line-argument]; 2021-12-16T22:33:50.8077002Z [2/1263] Building CXX object src\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_row_wrt.cc.obj; 2021-12-16T22:33:50.8080336Z clang-cl: warning: argument unused during compilation: '/arch:AVX' [-Wunused-command-line-argument]; 2021-12-16T22:33:50.8416165Z [3/1263] Building CXX object src\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_row_init.cc.obj; ```. So perhaps the original #2292 fix was a dud, and we've just gotten lucky about bein",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2384#issuecomment-997024098:925,Perform,Performing,925,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-997024098,1,['Perform'],['Performing']
Performance,"d out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #276 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c483c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; --Type <RET> for more, q to quit, c to continue without paging--; #277 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #278 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #279 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #280 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #281 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b010, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #282 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4289b60, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #283 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4289b60, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #284 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #285 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:59735,optimiz,optimized,59735,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"d out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #356 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #357 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; --Type <RET> for more, q to quit, c to continue without paging--; #358 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #359 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #360 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #361 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c7f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #362 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e1d18a0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #363 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e1d18a0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #364 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #365 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:75264,optimiz,optimized,75264,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"d out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #381 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16a3b0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #382 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #383 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #384 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510, tstate=0x55ff9515e050); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #385 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #386 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d0b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #387 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16dc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #388 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16dc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #389 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #390 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:80187,optimiz,optimized,80187,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"d out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; --Type <RET> for more, q to quit, c to continue without paging--; #195 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95d41d50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #196 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #197 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #198 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #199 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #200 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289830, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #201 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c373d0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #202 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c373d0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #203 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #204 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:44074,optimiz,optimized,44074,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #119 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #120 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #121 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #122 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287ff0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #123 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95ddd860, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #124 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95ddd860, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #125 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #126 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #127 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #128 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e363",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:29184,optimiz,optimized,29184,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #151 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #152 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #153 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #154 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288a60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #155 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c4a880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #156 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c4a880, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #157 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #158 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #159 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #160 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:35444,optimiz,optimized,35444,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #197 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #198 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #199 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #200 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289830, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #201 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c373d0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #202 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c373d0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #203 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #204 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #205 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #206 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:44444,optimiz,optimized,44444,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #239 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #240 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #241 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #242 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a3f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #243 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2ca240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #244 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2ca240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #245 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #246 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #247 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #248 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e363",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:52442,optimiz,optimized,52442,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #271 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #272 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #273 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #274 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ae60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #275 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c483c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #276 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c483c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; --Type <RET> for more, q to quit, c to continue without paging--; #277 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #278 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #279 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #280 PyObject_Vectorcall (kwnames=0x0,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:58702,optimiz,optimized,58702,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #313 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #314 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #315 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #316 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ba20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #317 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c6db10, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #318 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c6db10, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #319 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3634a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #320 _PyFunction_Vectorcall (func=0x7fac0e363490, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #321 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=3, args=0x7fff1128bb50, callable=0x7fac0e363490, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #322 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363490, vargs=0x7fff1128",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:66766,optimiz,optimized,66766,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #337 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #338 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #339 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #340 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c2e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #341 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3c5000, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #342 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3c5000, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #343 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #344 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #345 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #346 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:71557,optimiz,optimized,71557,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #211 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #212 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #213 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #214 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289b90, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #215 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #216 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #217 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #218 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #219 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #220 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e363",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:47118,optimiz,optimized,47118,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #285 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #286 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #287 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #288 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b1c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #289 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2ae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #290 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2ae40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #291 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #292 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #293 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #294 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e363",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:61442,optimiz,optimized,61442,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #351 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #352 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #353 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #354 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c640, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #355 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #356 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #357 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; --Type <RET> for more, q to quit, c to continue without paging--; #358 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #359 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #360 PyObject_Vectorcall (kwnames=0x0,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:74231,optimiz,optimized,74231,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #397 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #398 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #399 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #400 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d410, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #401 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #402 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #403 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #404 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #405 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #406 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e363",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:83231,optimiz,optimized,83231,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #126 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #127 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #128 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #129 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112881a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #130 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b83040, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #131 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b83040, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #132 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #133 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #134 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff112882d0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #135 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:30521,optimiz,optimized,30521,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #172 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #173 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #174 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #175 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288f70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #176 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891a240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #177 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd891a240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #178 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #179 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #180 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff112890a0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #181 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:39521,optimiz,optimized,39521,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #292 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #293 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #294 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #295 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b370, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #296 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2b040, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #297 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2b040, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #298 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #299 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #300 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128b4a0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #301 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:62779,optimiz,optimized,62779,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #404 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #405 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #406 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #407 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d5c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #408 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #409 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cae40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #410 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #411 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; --Type <RET> for more, q to quit, c to continue without paging--; #412 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128d6f0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #413 object_vacall (tstate=tstate@entry=0x55ff9515e0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:84568,optimiz,optimized,84568,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #158 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #159 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #160 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #161 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288c10, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #162 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6f680, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #163 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6f680, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #164 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #165 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #166 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #167 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e362",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:36781,optimiz,optimized,36781,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #204 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #205 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #206 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #207 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112899e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #208 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6cdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #209 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6cdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #210 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #211 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #212 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #213 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e362",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:45781,optimiz,optimized,45781,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #278 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #279 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #280 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #281 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b010, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #282 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4289b60, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #283 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4289b60, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #284 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #285 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #286 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #287 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e362",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:60105,optimiz,optimized,60105,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #344 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #345 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #346 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #347 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c490, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #348 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e074420, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #349 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e074420, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #350 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #351 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #352 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #353 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e362",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:72894,optimiz,optimized,72894,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"d out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #390 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #391 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #392 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #393 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d260, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #394 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3bf870, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #395 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3bf870, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #396 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #397 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #398 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #399 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e362",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:81894,optimiz,optimized,81894,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,d properly. I see the manual appearing as plain HTML. The same thing happens if I navigate to the manual from the psicode.org homepage. The console in chrome and safari are showing 404 errors for js and css:. http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/doctools.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/underscore.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of 404 (Not Found); index.html:368 Uncaught ReferenceError: $ is not defined; http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/psi4.css F,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210015028:1375,load,load,1375,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028,1,['load'],['load']
Performance,"d that github is also being intercepted. I could imagine; how our DNS might have been hijacked, etc., but not how the github link; could have been... David. On Thu, Apr 14, 2016 at 11:54 AM, Andrew James notifications@github.com; wrote:. > I am also being re-directed from search engines. The top site shows; > psicode.org but will redirect if I click on it. Typing psicode.org into a; > browser will bring me to the correct page, but I am noticing that the; > “manual” link is not working properly.; > ; > I have that bookmarked and I wanted to see if that would redirect. It does; > not re-direct but none of the CSS elements associated with the manual are; > being loaded properly. I see the manual appearing as plain HTML. The same; > thing happens if I navigate to the manual from the psicode.org homepage.; > ; > The console in chrome and safari are showing 404 errors for js and css:; > ; > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210017774:1143,load,load,1143,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774,1,['load'],['load']
Performance,"d.; ...; [ 50%] No patch step for 'pybind11_external'; [ 53%] No update step for 'pybind11_external'; [ 57%] Performing configure step for 'pybind11_external'; -- The CXX compiler identification is GNU 7.3.0; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:1474,Perform,Performing,1474,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966,2,['Perform'],['Performing']
Performance,"d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); > at Python/ceval.c:3433; > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); > at Python/ceval.c:4378; > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720; > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433; > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433; > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@en",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:5756,optimiz,optimized,5756,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,4,['optimiz'],['optimized']
Performance,"db7a00, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #187 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabdcdb7a00, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #188 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112894b0, locals=locals@entry=0x7fabd8903bc0, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #189 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8a87940, globals=globals@entry=0x7fabd8903bc0, locals=locals@entry=0x7fabd8903bc0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #190 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd8903bc0, globals=0x7fabd8903bc0, source=0x7fabd8a87940); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #191 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #192 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd8a8a4d8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #193 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8903b00, callargs=0x7fabd8a8a4c0, func=0x7fac0e398e00, trace_info=0x7fff11289680, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #194 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95d41d50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; --Type <RET> for more, q to quit, c to continue without paging--; #195 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95d41d50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #196 _PyEval_Vector (kwnames=<optimized out>, argcount=",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:42428,optimiz,optimized,42428,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"e ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1362, in scf_helper; > e_scf = scf_wfn.compute_energy(); > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 93, in scf_compute_energy; > raise e; > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; > self.iterations(); > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 358, in scf_iterate; > raise ConvergenceError(""""""SCF iterations"""""", self.iteration_); >; > ConvergenceError: Could not converge SCF iterations in 4 iterations.; >; > Psi4 stopped on: Wednesday, 08 August 2018 05:42PM; > Psi4 wall time for execution: 0:00:01.01; >; > *** Psi4 encountered an error. Buy a developer more coffee!; > *** Resources and help at github.com/psi4/psi4.; >; > It looks like die_if_not_converged; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsi4util/process.cc#L105-L113>; > toggled print-error-msg/die+traceback previously for SCF and DETCI, with; > defaulting toward print-error-msg. I think it's better to default toward; > die (which this PR now does) and ppl can catch the error if they want; > print-error-msg.; >; > For a long time we had geometry optimizations exit smoothly even if failed; > for iterations exceeded. That caused some problems (I think @dsirianni; > <https://github.com/dsirianni> hit them), so we switched toward the; > die+traceback. Now SCF will behave like optimizations.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/1130#issuecomment-411567479>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdvbzSmwMSXIINgOIb089mSzOfCS1ks5uO2AMgaJpZM4V0pOZ>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1130#issuecomment-411580303:2432,optimiz,optimizations,2432,https://psicode.org,https://github.com/psi4/psi4/pull/1130#issuecomment-411580303,2,['optimiz'],['optimizations']
Performance,"e buffer holds the information necessary to get that data, *when it is explicitly told to*. . I am sorry for not being clear, but this stuff is very easy to get lost in. I meant that trying to access tensor elements directly after calling `buf4_init`. Getting back to the subject of this PR: . 1. Lets leave the comments in `file4_init` alone, since the `buf4/file2_init` functions are the ones being used externally, `file4_init`s are usually only found w/in DPD itself as far as I know.. ; 2. In `buf4_init()` and `file2_init()` We can put note/warning separate from the description of `label`, something to the tune of ; > Make sure that you use the correct `label` and `inputfile` if you *intend* to read from or write to an existing quantity on disk. If you *intend* to populate a new quantity on disk, ensure that the `label` is not already used in `inputfile`. PSIO::tocprint(int filenum) can be used to display the current list of labels in use in the outputfile. . BTW: That last hint is particularly useful for debugging I/O related errors. Also, If you intend … better than it will be loaded… since it indicates this may or may not be done, and it does **not** happen now. . The case where an tensor is held in core via the cache system does not need to be mentioned since it does not change any of this behavior. To go on to your question about the inputfile, label relationship. The file is one of those defined in [psifiles.h](https://github.com/psi4/psi4/blob/master/psi4/include/psi4/psifiles.h), and these macros provide an easy way to know which number file a quantity belongs in. Thinking of the file as a dictionary is not so far from reality, and will serve for the purpose of explaining. The label is going to be used to lookup the offset into the file (number of bytes from the beginning) where some numbers (the elements of the tensor) are found. If writing it will replace these, if reading they used in any operations involving the buffer we are using to manage all of this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267512911:2050,load,loaded,2050,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267512911,4,"['cache', 'load']","['cache', 'loaded']"
Performance,"e server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/doctools.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/underscore.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of 404 (Not Found); index.html:368 Uncaught ReferenceError: $ is not defined; http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); Is anyone else seeing this problem? Possibly related?. —AJ. On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (notifications@github.com) wrote:. I'm not observing any of this behavior, so just to clarify: doe",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210015028:1665,load,load,1665,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028,1,['load'],['load']
Performance,"e-15 2.48440e-16 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 4.440892099E-16; @S^2 Expected: 0.000000000E+00; @S^2 Observed: 4.440892099E-16; @S Expected: 0.000000000E+00; @S Observed: 0.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.903583 . Alpha Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Beta Occupied: . 1A -0.903583 . Beta Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Final Occupation by Irrep:; A ; DOCC [ 1 ]; SOCC [ 0 ]. @DF-UHF Final Energy: -2.83568850042064. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -3.8642104942204210; Two-Electron Energy = 1.0285219937997820; Total Energy = -2.8356885004206389. UHF NO Occupations:; HONO-0 : 1 A 2.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000. Computation Completed. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SCF //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: JUN-CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 46 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/jun-cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.481692970000 4.002603254130. Running in c1 symmetry. Rotational constants: A = ************ B = 0.95920 C = 0.95920 [cm^-1]; Rotational constants: A = ************ B = 28755.98304 C = 28755.98304 [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplic",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:5355,Load,Loading,5355,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,1,['Load'],['Loading']
Performance,"e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #164 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #165 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #166 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #167 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #168 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288dc0, tstate=<optimized out>); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #169 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891aa40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #170 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd891aa40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #171 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #172 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #173 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:37921,optimiz,optimized,37921,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #22 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112862e0, locals=locals@entry=0x7fabd7bced00, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #23 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd78907c0, globals=globals@entry=0x7fabd7bced00, locals=locals@entry=0x7fabd7bced00); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #24 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd7bced00, globals=0x7fabd7bced00, source=0x7fabd78907c0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #25 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #26 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd7888dd8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #27 0x000055ff90677205 in do_call_core (kwdict=0x7fabd7bce4c0, callargs=0x7fabd7888dc0, func=0x7fac0e398e00, trace_info=0x7fff112864b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #28 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8949cf0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #29 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8949cf0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #30 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #31 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<opti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:10486,optimiz,optimized,10486,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #68 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112870b0, locals=locals@entry=0x7fabd8887400, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #69 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd88826b0, globals=globals@entry=0x7fabd8887400, locals=locals@entry=0x7fabd8887400); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #70 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd8887400, globals=0x7fabd8887400, source=0x7fabd88826b0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #71 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #72 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd88851d8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #73 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8887300, callargs=0x7fabd88851c0, func=0x7fac0e398e00, trace_info=0x7fff11287280, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #74 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c49700, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #75 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c49700, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #76 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #77 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<opti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:19440,optimiz,optimized,19440,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"e470, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #305 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #306 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #307 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fac0e0f68c0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #308 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fac0e0f68c0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #309 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0ae880, callargs=0x7fac0e0f68c0, func=0x7fac0e3989a0, trace_info=0x7fff1128b870, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #310 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e32fc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #311 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e32fc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #312 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #313 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #314 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510, tstate=0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:65313,optimiz,optimized,65313,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"e=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #146 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e0d4c58, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #147 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8938500, callargs=0x7fac0e0d4c40, func=0x7fac0e398e00, trace_info=0x7fff112888b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #148 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95e324c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #149 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95e324c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #150 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #151 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #152 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #153 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #154 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288a60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #155 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c4a880, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:34433,optimiz,optimized,34433,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"e=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #266 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e0e6fd8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #267 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8902480, callargs=0x7fac0e0e6fc0, func=0x7fac0e398e00, trace_info=0x7fff1128acb0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #268 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8fa8550, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #269 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8fa8550, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #270 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #271 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #272 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #273 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #274 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ae60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #275 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c483c0, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:57691,optimiz,optimized,57691,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"e=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #332 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e1a1898, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #333 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0728c0, callargs=0x7fac0e1a1880, func=0x7fac0e398e00, trace_info=0x7fff1128c130, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #334 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16bb50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #335 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16bb50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #336 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #337 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #338 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #339 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #340 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c2e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #341 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3c5000, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:70546,optimiz,optimized,70546,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"e=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #378 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e041e18, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #379 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e071540, callargs=0x7fac0e041e00, func=0x7fac0e398e00, trace_info=0x7fff1128cf00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #380 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16a3b0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #381 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16a3b0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #382 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #383 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #384 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510, tstate=0x55ff9515e050); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #385 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #386 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d0b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #387 _PyEval_EvalFram",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:79480,optimiz,optimized,79480,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ector_impl_data> = {_M_start = 0x55555a4eab60,; _M_finish = 0x55555a4eadb0, _M_end_of_storage = 0x55555a4eadb0}, <No data fields>}}, <No data fields>}; occ_off = {<std::_Vector_base<int, std::allocator<int> >> = {; _M_impl = {<std::allocator<int>> = {<__gnu_cxx::new_allocator<int>> = {<No data fields>}, <No data fields>}, <std::_Vector_base<int, std::allocator<int> >::_Vector_impl_data> = {_M_start = 0x5555565de240,; _M_finish = 0x5555565de244, _M_end_of_storage = 0x5555565de244}, <No data fields>}}, <No data fields>}; vir_off = {<std::_Vector_base<int, std::allocator<int> >> = {; _M_impl = {<std::allocator<int>> = {<__gnu_cxx::new_allocator<int>> = {<No data fields>}, <No data fields>}, <std::_Vector_base<int, std::allocator<int> >::_Vector_impl_data> = {_M_start = 0x555556e9c820,; _M_finish = 0x555556e9c824, _M_end_of_storage = 0x555556e9c824}, <No data fields>}}, <No data fields>}; transspaces = {<std::_Vector_base<std::shared_ptr<psi::MOSpace>, std::allocator<std::shared_ptr<psi::MOSpace> > >> = {; _M_impl = {<std::allocator<std::shared_ptr<psi::MOSpace> >> = {<__gnu_cxx::new_allocator<std::shared_ptr<psi::MOSpace> >> = {<No data fields>}, <No data fields>}, <std::_Vector_base<std::shared_ptr<psi::MOSpace>, std::allocator<std::shared_ptr<psi::MOSpace> > >::_Vector_impl_data> = {_M_start = 0x555556f30e70, _M_finish = 0x555556f30e90, _M_end_of_storage = 0x555556f30e90}, <No data fields>}}, <No data fields>}; ints = 0x55555bfe4090; presort_predone = false; efzc = 0; spaces = {<std::_Vector_base<psi::DPDMOSpace, std::allocator<psi::DPDMOSpace> >> = {; _M_impl = {<std::allocator<psi::DPDMOSpace>> = {<__gnu_cxx::new_allocator<psi::DPDMOSpace>> = {<No data fields>}, <No data fields>}, <std::_Vector_base<psi::DPDMOSpace, std::allocator<psi::DPDMOSpace> >::_Vector_impl_data> = {_M_start = 0x555556910470, _M_finish = 0x555556910520, _M_end_of_storage = 0x555556910520}, <No data fields>}}, <No data fields>}; cachefiles = 0x555556ef4190; cachelist = 0x55555c01bc90; eref = 1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277:29500,cache,cachefiles,29500,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277,2,['cache'],"['cachefiles', 'cachelist']"
Performance,"ed out>) at Python/ceval.c:4161 ; > > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084 ; > > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433 ; > > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0) ; > > at Python/ceval.c:771 ; > > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; > > locals=locals@entry=0x7ffff7ed07a0, flags=flags@entry=0x0, arena=arena@entry=0x28ca640) at Python/pythonrun.c:1981 ; > > #35 0x00007ffff5168335 in PyRun_StringFlags (str=<optimized out>, start=257, globals=0x7ffff7ed07a0, locals=0x7ffff7ed07a0, flags=0x0) ; > > at Python/pythonrun.c:1914 ; > > #36 0x00007ffff66a3f45 in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) () ; > > from /usr/lib/libboost_python3.so.1.54.0 ; > > #37 0x00000000006fcad7 in psi::Python::run (this=<optimized out>, input=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/python.cc:1446 ; > > #38 0x000000000069a8ae in main (argc=2, argv=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/psi4.cc:111 ; > > Any suggestions on what I could do to track this down further? I looked in ccenergy/pair_energies.cc and there was nothing immediately obvious. ; > > ; > > Thanks! ; > > ; > >  ; > > Reply to this email directly or view it on GitHub. ; > > ; > > ; > > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:7711,optimiz,optimized,7711,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,8,['optimiz'],['optimized']
Performance,"een... David. On Thu, Apr 14, 2016 at 11:54 AM, Andrew James notifications@github.com; wrote:. > I am also being re-directed from search engines. The top site shows; > psicode.org but will redirect if I click on it. Typing psicode.org into a; > browser will bring me to the correct page, but I am noticing that the; > “manual” link is not working properly.; > ; > I have that bookmarked and I wanted to see if that would redirect. It does; > not re-direct but none of the CSS elements associated with the manual are; > being loaded properly. I see the manual appearing as plain HTML. The same; > thing happens if I navigate to the manual from the psicode.org homepage.; > ; > The console in chrome and safari are showing 404 errors for js and css:; > ; > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210017774:1286,load,load,1286,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774,1,['load'],['load']
Performance,"eference rhf; > set e_convergence 1e-12; > set d_convergence 1e-12; > set ints_tolerance 0.0; > ; > optimize('b3lyp'); > ; > When you run the geometry optimization in the /tmp folder, the geometry of; > the SCF doesn't get updated:; > ; > First SCF:; > ; > Geometry (in Bohr), charge = 0, multiplicity = 1:; > ; > Center X Y Z; > ; > ---; > ; > ```; > C -0.000000000000 1.855000000000 0.000000000000; > C 0.000000000000 -1.855000000000 0.000000000000; > C 1.606477124020 0.927500000000 0.000000000000; > C 1.606477124020 -0.927500000000 0.000000000000; > C -1.606477124020 0.927500000000 0.000000000000; > C -1.606477124020 -0.927500000000 0.000000000000; > H -0.000000000000 3.289000000000 0.000000000000; > H 0.000000000000 -3.289000000000 0.000000000000; > H 2.848357553047 1.644500000000 0.000000000000; > H 2.848357553047 -1.644500000000 0.000000000000; > H -2.848357553047 1.644500000000 0.000000000000; > H -2.848357553047 -1.644500000000 0.000000000000; > ```; > ; > At the end of optking:; > ; > ```; > Writing optimization data to binary file.; > Structure for next step:; > Cartesian Geometry (in Angstrom); > C -0.0000000000 0.9816237969 0.0000000000; > C 0.0000000000 -0.9816237969 0.0000000000; > C 0.8501111451 0.4908118984 0.0000000000; > C 0.8501111451 -0.4908118984 0.0000000000; > C -0.8501111451 0.4908118984 0.0000000000; > C -0.8501111451 -0.4908118984 0.0000000000; > H -0.0000000000 1.7404639720 0.0000000000; > H 0.0000000000 -1.7404639720 -0.0000000000; > H 1.5072860141 0.8702319860 0.0000000000; > H 1.5072860141 -0.8702319860 0.0000000000; > H -1.5072860141 0.8702319860 0.0000000000; > H -1.5072860141 -0.8702319860 0.0000000000; > ```; > ; > The new SCF:; > ; > Geometry (in Bohr), charge = 0, multiplicity = 1:; > ; > Center X Y Z; > ; > ---; > ; > ```; > C -0.000000000000 1.855000000000 0.000000000000; > C 0.000000000000 -1.855000000000 0.000000000000; > C 1.606477124020 0.927500000000 0.000000000000; > C 1.606477124020 -0.927500000000 0.000000000000; > C -1.60647",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/66#issuecomment-73061426:1800,optimiz,optimization,1800,https://psicode.org,https://github.com/psi4/psi4/issues/66#issuecomment-73061426,1,['optimiz'],['optimization']
Performance,"em– they affect you.; 2. To build Psi4 you now will need to do something along the lines of (in the top-level of the cloned source code):; ; ``` .sh; cmake -H. -Bbuild ; cd build && make; make install; ```; - In the configure step (the first line) there are a large number of CMake variables you can set to fine tune the build. See the top-level `CMakeLists.txt` for the more common ones. For example to change the C++ compiler add: `-DCMAKE_CXX_COMPILER=/path/to/compiler` after `-Bbuild`; - Anything not part of Psi4 proper is now in external and is expected to have its own build files. Paths where CMake should look for dependencies should now be passed to these external projects via `CMAKE_PREFIX_PATH`. ; - Installing is now a thing for Psi4. In theory you can run Psi4 from the build directory, but you'll quickly find it annoying (I'll leave it to you to learn why). Tests should still work from the build directory and can be performed from there before installing. They should be performed using `ctest` as normal. ; 3. Within the next week anyone who compiles Psi4 regularly (as opposed to just using the Conda package) should clone this branch and try it out. Please do it sooner rather than later because of the following points.; 4. Once this PR is merged, git operations on forks and clones of the current master repo will likely cease to work without a ton of effort. This is because of the size and amount of changes in this PR. Instead of fighting to rebase on top of it, there are two options:; 1. If you have some small changes you want to make in the near future [fork my fork](https://github.com/ryanmrichard/psi4), add your changes, submit a PR to me; 2. Wait until after my PR is merged into Psi4's master repo, make a fresh fork, and manually copy/paste any files you are working on into that fresh fork; 5. Since the history is getting messed up anyways, there are plans to rip Boost out after merging this PR. We don't really need Boost anymore, it adds to our compile tim",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236723542:1460,perform,performed,1460,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236723542,2,['perform'],['performed']
Performance,"enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: AUG-PCSEG-0; Blend: AUG-PCSEG-0; Number of shells: 37; Number of basis function: 73; Number of Cartesian functions: 76; Spherical Harmonics?: true; Max angular momentum: 2. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 73 73 0 0 0 0; -------------------------------------------------------; Total 73 73 17 17 17 0; -------------------------------------------------------. ==> Integral Setup <==. Using in-core PK algorithm.; Calculation information:; Number of atoms: 5; Number of AO shells: 37; Number of primitives: 64; Number of atomic orbitals: 76; Number of basis functions: 73. Integral cutoff 1.00e-12; Number of threads: 1. Performing in-core PK; Using 7298102 doubles for integral storage.; We computed 235045 shell quartets total.; Whereas there are 247456 unique shell quartets.; ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory (MB): 375; Schwarz Cutoff: 1E-12. OpenMP threads: 1; Minimum eigenvalue in the overlap matrix is 1.5687182609E-03.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter 0: -802.88132998346850 -8.02881e+02 1.33370e-02 ; @RHF iter 1: -787.60962084475932 1.52717e+01 5.31297e-03 ; @RHF iter 2: -784.61065630353232 2.99896e+00 2.74010e-02 DIIS; @RHF iter 3: -787.81386527066320 -3.20321e+00 1.99984e-03 DIIS; @RHF iter 4: -787.84423605872018 -3.03708e-02 3.17913e-04 DIIS; @RHF iter 5: -787.84661751791953 -2.38146e-03 1.61048e-04 DIIS; @RHF iter 6: -787.84753550465541 -9.17987e-04 8.58328e-05 DIIS; @RHF iter 7: -787.84773333581302 -1.97831e-04 4.22806e-05 DIIS; @R",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339418202:4027,Perform,Performing,4027,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202,1,['Perform'],['Performing']
Performance,"eqing/intel/oneapi/mkl/latest/lib/intel64:$LD_LIBRARY_PATH""; export EIGEN3_ROOT=""/home/yuyeqing/software/eigen3/include""; ```. cmake output the result log like this:. ```; -- Building using CMake 3.26.4 Generator Unix Makefiles; -- Setting option BUILD_SHARED_LIBS: OFF; -- Setting option CMAKE_BUILD_TYPE: Release; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting option ENABLE_OPENMP: ON; -- Setting option ENABLE_AUTO_BLAS: ON; -- Setting option ENABLE_AUTO_LAPACK: ON; -- Setting option ENABLE_PLUGIN_TESTING: OFF; -- Setting option ENABLE_CYTHONIZE: OFF; -- Setting option ENABLE_CODE_COVERAGE: OFF; -- Setting option ENABLE_BOUNDS_CHECK: OFF; -- Setting option ENABLE_ASAN: OFF; -- Setting option ENABLE_TSAN: OFF; -- Setting option ENABLE_UBSAN: OFF; -- Setting option ENABLE_MSAN: OFF; -- Setting option MAX_AM_ERI: 5; -- Setting option FC_SYMBOL: 2; -- Setting option BUILD_FPIC: ON; -- Setting option CMAKE_INSTALL_LIBDIR: lib; -- Setting option PYMOD_INSTALL_LIBDIR: /; -- Setting option psi4_INSTALL_CMAKEDIR: share/cmake/psi4; -- Setting option TargetLAPACK_INSTALL_CMAKEDIR: share/cmake/TargetLAPACK; -- Setting option TargetHDF5_INSTALL_CMAKEDIR: share/cmake/TargetHDF5; -- Setting option ENABLE_GENERIC: OFF; -- Setting option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting option psi4_CXX_STANDARD: 17; -- Setting option psi4_CXX_STANDARD_Libint2: 17; -- Setting option SIMINT_VECTOR: avx; -- Setting option SPHINX_THEME: sphinx_psi_theme; -- Setting option SPHINXMAN_STRICT: OFF; -- Setting option BUILD_Libint2_GENERATOR: OFF; -- Setting option psi4_SHGAUSS_ORDERING: gaussian; -- Psi4 install: /mnt/f/psi4/build_linux/install; -- Found Python 3.10: /home/yuyeqing/software/miniconda3/envs/psi/bin/python3.10 (found version 3.10.11); -- Psi4 staging: /mnt/f/psi4/build_linux/stage; -- CMAKE_CXX_FLAGS: -march=native; -- Could NOT find iomp5 -- con",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:819,Perform,Performing,819,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119,2,['Perform'],['Performing']
Performance,"er of Cartesian functions: 260; > Spherical Harmonics?: true; > Max angular momentum: 2; > ; > ## ==> Pre-Iterations <==; > ; > Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; > ; > ---; > ; > A 246 246 0 0 0 0; > ; > ---; > ; > Total 246 246 47 47 47 0; > ; > ---; > ; > Starting with a DF guess...; > ; > OEINTS: Wrapper to libmints.; > by Justin Turney; > ; > Calculation information:; > Number of atoms: 24; > Number of AO shells: 114; > Number of SO shells: 114; > Number of primitives: 358; > Number of atomic orbitals: 260; > Number of basis functions: 246; > ; > Number of irreps: 1; > Number of functions per irrep: [ 246 ]; > ; > Overlap, kinetic, potential, dipole, and quadrupole integrals; > stored in file 35.; > ; > ==> Integral Setup <==; > ; > ==> DFJK: Density-Fitted J/K Matrices <==; > ; > J tasked: Yes; > K tasked: Yes; > wK tasked: No; > OpenMP threads: 1; > Integrals threads: 1; > Memory (MB): 3576; > Algorithm: Core; > Integral Cache: NONE; > Schwarz Cutoff: 1E-12; > Fitting Condition: 1E-12; > ; > => Auxiliary Basis Set <=; > ; > Basis Set: CC-PVDZ-JKFIT; > Number of shells: 426; > Number of basis function: 1210; > Number of Cartesian functions: 1384; > Spherical Harmonics?: true; > Max angular momentum: 3; > ; > Minimum eigenvalue in the overlap matrix is 5.4113217503E-05.; > Using Symmetric Orthogonalization.; > SCF Guess: Core (One-Electron) Hamiltonian.; > ; > ==> Iterations <==; > ; > ```; > Total Energy Delta E RMS |[F,P]|; > ```; > ; > @DF-RHF iter 1: -408.79982050385229 -4.08800e+02 3.62257e-02; > @DF-RHF iter 2: -355.09647973844881 5.37033e+01 4.41837e-02 DIIS; > @DF-RHF iter 3: -503.82195227805050 -1.48725e+02 2.30091e-02 DIIS; > @DF-RHF iter 4: -521.88187925493912 -1.80599e+01 1.74498e-02 DIIS; > @DF-RHF iter 5: -531.29208626043282 -9.41021e+00 8.08186e-03 DIIS; > @DF-RHF iter 6: -532.44139862133784 -1.14931e+00 8.76099e-03 DIIS; > @DF-RHF iter 7: -535.74682106965861 -3.30542e+00 2.34149e-03 DIIS; > @DF-RHF iter 8: -535.91483788818550 -1.68017e-01 1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61#issuecomment-58650322:7347,Cache,Cache,7347,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322,1,['Cache'],['Cache']
Performance,erforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLA,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5160,Perform,Performing,5160,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,1,['Perform'],['Performing']
Performance,erforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3190,Perform,Performing,3190,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,erforming Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX fl,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5119,Perform,Performing,5119,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,1,['Perform'],['Performing']
Performance,erforming Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missin,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3149,Perform,Performing,3149,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,"erver responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/underscore.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of 404 (Not Found); index.html:368 Uncaught ReferenceError: $ is not defined; http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); Is anyone else seeing this problem? Possibly related?. —AJ. On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (notifications@github.com) wrote:. I'm not observing any of this behavior, so just to clarify: does anyone; actually get this ""redirection"" when you enter ""psicode.org"" on your URL; bar? Or do you just get this when you search for PSI4 on; Google/Yahoo/Bing? NB: When I put ""PSI4"" in those search engines, I get; only our correct site for the first page of hits (except for th",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210015028:1948,load,load,1948,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028,1,['load'],['load']
Performance,"es to be from a tightly converged/optimized calc, then loosen the comparison check to accommodate the default/existing conv crit (https://psicode.org/psi4manual/master/add_tests.html#test-contents). Tests checking opt status at a certain cycle exempt of course. That's the principle, but do feel free to change as you see fit --- the reference values (agreed, preferred thing to change if the ref is the culprit) or the comparison crit (if it's the optimizer behavior that's the instigator). > Explanation:; I've expanded the number of tests I'm running since I started cleaning up core.cc. In the opt specific tests the convergence is usually tight enough that the nuclear repulsion energies match the reference values just fine for both optimizers. There are some tests like cc1-3 that are failing due to being just above threshold. atol = 0.001 the difference is ~ 0.0017. These tests are using the default qchem convergence criteria ~ 3e-4 max_force. Both optimizers finish well below the criteria and geometries match to 1e-4 Angstroms and 0.001 degrees. Geometries are the same. There are around 5 or 6 tests failing like this. Thanks for the explanation. I'd view reference NRE values as less venerable. For one thing, only those that caused trouble were even updated when physical constants changed, iirc. > Would y'all like this PR to include updated output.ref files for the tests or would a separate test updating PR be better? I don't see anything in the"" adding tests documentation"" about reference log files. I can include those as well if desired. It will just greatly increase the number of lines changed in this PR. Separate, please. Like updating `samples/`, better to keep the not-for-visual-inspection changes aside. Update: I see Jonathon thinks differently. Including is ok with me, now that GH allows files to be folded up rather than scrolled through. Is `.log` where all the optking detailed output goes now? I guess we ought to start collecting them. `output.log`, perhaps. B",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262549464:1470,optimiz,optimizers,1470,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262549464,2,['optimiz'],['optimizers']
Performance,"es. The top site shows; > psicode.org but will redirect if I click on it. Typing psicode.org into a; > browser will bring me to the correct page, but I am noticing that the; > “manual” link is not working properly.; > ; > I have that bookmarked and I wanted to see if that would redirect. It does; > not re-direct but none of the CSS elements associated with the manual are; > being loaded properly. I see the manual appearing as plain HTML. The same; > thing happens if I navigate to the manual from the psicode.org homepage.; > ; > The console in chrome and safari are showing 404 errors for js and css:; > ; > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resourc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210017774:1428,load,load,1428,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774,1,['load'],['load']
Performance,"etail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132; > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0; > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084; > #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283; > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086; > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); > at Python/ceval.c:3433; > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); > at Python/ceval.c:4378; > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:4615,optimiz,optimized,4615,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,2,['optimiz'],['optimized']
Performance,"evel'; (whatever its final name or design) is that a user could easily elect the; degree to which the optimizer should try different things to reach; convergence. On Tue, Nov 6, 2018 at 4:47 PM Lori A. Burns <notifications@github.com>; wrote:. > PRs psi-rking/optking#24 <https://github.com/psi-rking/optking/pull/24>; > and #1335 <https://github.com/psi4/psi4/pull/1335> are a pair. Together,; > they get most optimizations working for Psi. In particular have working:; >; > - ordinary, opt-is-full job optimizations; > - collecting all the psivars so psi can read them in. basically,; > collecting enough to generate a skeleton (mol, basis, psivars) that can be; > passed back from psi4.optimize(..., return_wfn=True); > - inlining optking's logging output into the psi4 output file; > - resetting psi4's options on either side of the; > optking.run_json_dict() call. The trouble was that the psi4-s imported; > by optking were clearing and setting options (as is proper for indep json; > runs) such that the calling psi4 didn't have its original options in; > globals upon optking termination; > - starting to catch optking errors (str in json) and re-raising them; > as psi4 errors.; >; > Yes, that AlgError vs OptError for exceeding geom_maxiter really stumped; > me for a while b/c I only got the final error (""dynamic level exceeded""); > and I thought it was behaving differently btwn direct optking and psi4; > initiated runs. To me it seems clear that if geom_maxiter is exceeded, then; > optimizer quits directly (though perhaps that's clearer when geom_maxiter=2; > than =200).; >; > @psi-rking <https://github.com/psi-rking> @AlexHeide; > <https://github.com/AlexHeide>; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/1335#issuecomment-436437450>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTHzCC2j_z9TFbx5ofRV3X4D0BTSDks5ushF5gaJpZM4YQL0t>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1335#issuecomment-436668061:1778,optimiz,optimizer,1778,https://psicode.org,https://github.com/psi4/psi4/pull/1335#issuecomment-436668061,2,['optimiz'],['optimizer']
Performance,"extern1 test fails for me (Arch Linux, gcc (GCC) 6.3.1, native BLAS/LAPACK):; ```; Output:; ----------------------------------------------------------; Performing finite difference calculations; 19 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19; Finite difference (3-pt.) vs. analytic gradient to 10^-5..........PASSED; Finite difference energy..........................................PASSED; Analytic energy...................................................PASSED; Exit Status: infile ( -6 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.12 sec; ----------------------------------------------------------; Test Failed.; ""extern1"" end time: Jan 30 20:51 CET; ""extern1"" time elapsed: 00:00:29; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276186318:152,Perform,Performing,152,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276186318,1,['Perform'],['Performing']
Performance,"f 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resource: the server responded with a status of 404 (Not Found); > index.html:368 Uncaught ReferenceError: $ is not defined; > http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > Is anyone else seeing this problem? Possibly related?; > ; > —AJ; > ; > On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (; > notifications@github.com) wrote:; > ; > I'm not obse",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210017774:2162,load,load,2162,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774,1,['load'],['load']
Performance,"f84a0fdd000 rw-p 01631000 fd:02 203799116 /home/psilocaluser/miniconda3/envs/p4dev36/lib/libmkl_intel_thread.so; 7f84a0fe3000-7f84a103a000 rw-p 01a8b000 fd:02 203799116 /home/psilocaluser/miniconda3/envs/p4dev36/lib/libmkl_intel_thread.so; 7f84a103a000-7f84a1810000 r-xp 00000000 fd:02 203799115 /home/psilocaluser/miniconda3/envs/p4dev36/lib/libmkl_intel_lp64.so; 7f84a1810000-7f84a1a10000 ---p 007d6000 fd:02 203799115 /home/psilocaluser/miniconda3/envs/p4dev36/lib/libmkl_intel_lp64.so; 7f84a1a10000-7f84a1a11000 r--p 007d6000 fd:02 203799115 /home/psilocaluser/miniconda3/envs/p4dev36/lib/libmkl_intel_lp64.so; 7f84a1a11000-7f84a1a22000 rw-p 007d7000 fd:02 203799115 /home/psilocaluser/miniconda3/envs/p4dev36/lib/libmkl_intel_lp64.so; 7f84a1a27000-7f84a1a5c000 rw-p 008ff000 fd:02 203799115 /home/psilocaluser/miniconda3/envs/p4dev36/lib/libmkl_intel_lp64.so; ```. * Case B, the MKL RT; * NumPy from intel channel linked to mkl_rt.so; * Psi4 linked to MKL runtime dynamically; * Result: Both n before p and p before n thread, and both load the same libraries. ```; (idp3) objdir-idp3-4: >>> ldd stage/usr/local/psi4/lib/psi4/core.so | grep mkl; 	libmkl_rt.so => /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_rt.so (0x00007f3db8ab8000). (idp3) >>> ldd ~/miniconda3/envs/idp3/lib/python3.5/site-packages/numpy/core/multiarray.cpython-35m-x86_64-linux-gnu.so | grep mkl; 	libmkl_rt.so => /home/psilocaluser/miniconda3/envs/idp3/lib/python3.5/site-packages/numpy/core/../../../../libmkl_rt.so (0x00007fa3164df000). (idp3) >>> head -13 thread.py ; import os; import time. # none for psithon. # good psiapi; import numpy as np; import psi4. # bad psiapi; #import psi4; #import numpy as np. (idp3) >>> PYTHONPATH=/home/psilocaluser/gits/hrw-lab/objdir-idp3-4/stage/usr/local/psi4/lib python thread.py ; Threads set to 1 by Python driver.; Time for threads 1, size 200: Psi4: 0.000581 NumPy: 0.000603; Time for threads 1, size 500: Psi4: 0.008048 NumPy: 0.008170; Time for threads 1, size 2000: Psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/755#issuecomment-313016394:7640,load,load,7640,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-313016394,1,['load'],['load']
Performance,"f9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #83 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #84 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #85 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #86 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; --Type <RET> for more, q to quit, c to continue without paging--; #87 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112875e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #88 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b7c840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #89 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b7c840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #90 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #91 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #92 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:22338,optimiz,optimized,22338,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"f=0x7fabd8949cf0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #29 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8949cf0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #30 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #31 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #32 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; --Type <RET> for more, q to quit, c to continue without paging--; #33 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #34 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286660, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #35 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8697300, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #36 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8697300, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #37 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #38 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized o",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:11882,optimiz,optimized,11882,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"f=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #112 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #113 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fabd8a583d0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #114 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8a583d0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; --Type <RET> for more, q to quit, c to continue without paging--; #115 0x000055ff90677205 in do_call_core (kwdict=0x7fabd88870c0, callargs=0x7fabd8a583d0, func=0x7fac0e3989a0, trace_info=0x7fff11287e40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #116 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95de00f0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #117 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95de00f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #118 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #119 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #120 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #121 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:27847,optimiz,optimized,27847,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"fabd891abf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #167 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #168 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288dc0, tstate=<optimized out>); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #169 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891aa40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #170 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd891aa40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #171 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #172 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #173 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #174 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #175 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288f70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #176 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891a240, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:38510,optimiz,optimized,38510,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"fabe42887a0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #220 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #221 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289d40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #222 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4288610, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #223 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4288610, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #224 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #225 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #226 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11289e70, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #227 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11289f00) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #228 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #229 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd8928710, tstate=0x55ff9515e050) at /usr/local/src",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:48847,optimiz,optimized,48847,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"fabe4df3a10, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #248 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #249 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a5a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #250 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4df3880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #251 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4df3880, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #252 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #253 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #254 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128a6d0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #255 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128a760) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #256 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #257 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd89285d0, tstate=0x55ff9515e050) at /usr/local/src",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:54171,optimiz,optimized,54171,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"fac0e16ddc8, callable=0x7fac0e361510, tstate=0x55ff9515e050); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #385 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #386 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d0b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #387 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16dc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #388 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16dc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #389 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #390 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #391 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #392 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #393 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d260, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #394 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3bf870, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:80883,optimiz,optimized,80883,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ference value is the way to go but I want to have some record of asking before I start slightly changing reference values. > Secondarily, should the reference values be updated in general at some point so that users don't stumble across an instance where the value is slightly off and wonder why?. General guidance to for ref values to be from a tightly converged/optimized calc, then loosen the comparison check to accommodate the default/existing conv crit (https://psicode.org/psi4manual/master/add_tests.html#test-contents). Tests checking opt status at a certain cycle exempt of course. That's the principle, but do feel free to change as you see fit --- the reference values (agreed, preferred thing to change if the ref is the culprit) or the comparison crit (if it's the optimizer behavior that's the instigator). > Explanation:; I've expanded the number of tests I'm running since I started cleaning up core.cc. In the opt specific tests the convergence is usually tight enough that the nuclear repulsion energies match the reference values just fine for both optimizers. There are some tests like cc1-3 that are failing due to being just above threshold. atol = 0.001 the difference is ~ 0.0017. These tests are using the default qchem convergence criteria ~ 3e-4 max_force. Both optimizers finish well below the criteria and geometries match to 1e-4 Angstroms and 0.001 degrees. Geometries are the same. There are around 5 or 6 tests failing like this. Thanks for the explanation. I'd view reference NRE values as less venerable. For one thing, only those that caused trouble were even updated when physical constants changed, iirc. > Would y'all like this PR to include updated output.ref files for the tests or would a separate test updating PR be better? I don't see anything in the"" adding tests documentation"" about reference log files. I can include those as well if desired. It will just greatly increase the number of lines changed in this PR. Separate, please. Like updating `samp",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262549464:1249,optimiz,optimizers,1249,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262549464,2,['optimiz'],['optimizers']
Performance,"fff1128d6f0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #413 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128d780) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #414 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #415 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fac0e1341f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #416 PyImport_ImportModuleLevelObject (name=name@entry=0x7fac0e1341f0, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x55ff908c17e0 <_Py_NoneStruct>, level=0); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #417 0x000055ff9067536b in import_name (level=0x7fac0e3000d0, fromlist=0x55ff908c17e0 <_Py_NoneStruct>, name=0x7fac0e1341f0, f=0x7fac0e329a40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #418 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e329a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #419 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e329a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #420 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128db00, locals=locals@entry=0x7fac0e241bc0, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #421 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fac0e2b80e0, globals=globals@entry=0x7fac0e241bc0, locals=locals@entry=0x7fac0e241bc0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #422 0x000055ff9074512a in run_eval_code_obj (tstate=tstate@entry=0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:86462,optimiz,optimized,86462,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"first 2 questions:; Can try - this was my first psi4 optimization. 3:; ""exception"" related definitively to ""new linear angles"": . ```; Energy change for the previous step:; Projected : -0.0009583389; Actual : -0.0004424593. Performing BFGS update.; Previous computed or guess Hessian on step 1.; Steps to be used in Hessian update: 24 23; Taking RFO optimization step.; Going to follow RFO solution 1.; Using RFO vector 1.; Norm of target step-size 0.47532; Projected energy change by RFO approximation: -0.0041167176; Newly linear bends that need to be incoporated into the internal coordinates: 1 3 11; 2 9 13; The INTCO_EXCEPTion handler:; New linear angles; Dynamic level is 0.; exc.g_really_quit() is 0.; New linear angles; ```. There are 1825 geometries in the output.dat file (it is about 22mb in size).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153#issuecomment-124906121:53,optimiz,optimization,53,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-124906121,3,"['Perform', 'optimiz']","['Performing', 'optimization']"
Performance,"fixed_dihedral is at least allowing the calculation to run, but it appears as soon as the next optimization cycle starts the following error code pops up ""Process finished with exit code -1073741819 (0xC0000005)"". wondering if the scratch data is the cause? ""Scratch directory: C:\Users\vike\AppData\Local\Temp/"". Is there a way to specify the scratch directory?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1485964679:95,optimiz,optimization,95,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1485964679,1,['optimiz'],['optimization']
Performance,forming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTE,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2941,Perform,Performing,2941,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,forming Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2900,Perform,Performing,2900,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,"g noise in nearly all Psi4 gradients, and I have not taken; the time to follow up on it. It puzzles me, because we never saw stuff; like this in Psi3... those gradients were already symmetric and did not; need a ""symmetrize"" function to be called.... The only part of Psi that; I've checked that seems immune to this problem is Daniel Crawford's CC; gradients, which are perfectly symmetric. On Wed, Jan 30, 2019 at 10:40 AM Jonathon Misiewicz <; notifications@github.com> wrote:. > Discovered while remedying test cases where reference numbers needed to be; > changed due to my upcoming #1143; > <https://github.com/psi4/psi4/issues/1143> fix. DFOCC gradients are not; > symmetrized. If you'd like an example, just look in the reference output; > files; > <https://github.com/psi4/psi4/blob/master/tests/dfomp3-grad2/output.ref#L603-L604>!; > Symmetry of the overlap gradient is broken in the seventh decimal place.; > The other terms have some errors, but much smaller. That the overlap; > gradient is most afflicted is unsurprising, since the overlap integrals are; > contracted against one of the many ""generalized Fock matrices"". This one; > depends on the 1RDM and 2RDM, which are not currently symmetrized.; >; > I'm hoping to include this in 1.3 with the #1143; > <https://github.com/psi4/psi4/issues/1143> fix, since this bug could lead; > to optimizations failing, as we saw with DFMP2 two weeks ago (#1483; > <https://github.com/psi4/psi4/pull/1483>). Because individual terms are; > printed, the individual terms need to be symmetrized, and it may take me; > some time to find where the symmetrize calls need to be placed. If it; > takes too long, I'm fine with delaying to 1.4.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1504>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdjLHuk3Pa0yVJNLncI2ChdXedn-Rks5vIbzcgaJpZM4aad4X>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1504#issuecomment-458993782:1440,optimiz,optimizations,1440,https://psicode.org,https://github.com/psi4/psi4/issues/1504#issuecomment-458993782,1,['optimiz'],['optimizations']
Performance,"g things there unless absolutely necessary for my research. > Unfortunately, open-shell Brueckner or OO coupled cluster does not seem to be a common feature in QC programs, so I am trying to survey which programs have open-shell capable OO methods. Also, a performant OMP2 or OMP2.5 implementation could potentially be useful for us, even if it does not directly solve the lack of an RBCCD(T) implementation. I don't know if your Robosurfer can use this, but depending on your orbital-optimized method, once you have the energy, the gradient is free. All the orbital-optimized methods in Psi have this property. > o_O No, in fact I would have completely missed that! I checked the method table [here](http://www.psicode.org/psi4manual/master/notes_c.html#alternate-implementations) and thought Psi4 cannot do BCCD(T) at all. Perhaps BCCD and BCCD(T) could be added as methods to that docpage?. That page is for methods that _multiple modules_ support, so you can straighten out which module you want given your specific use for a method. That said, is there a place in the manual where we list all the methods we have? I genuinely don't think so. We should add it, if there isn't one. If you want to see all the energy keywords that Psi recognizes, you can find it in the code [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc_table.py#L41). I'd be remiss if I didn't point out that the `dct` module _also_ has some orbital optimized methods. The best one is the default upon entering `energy(dct)`, ODC-12. Use of the others is not recommended for _any_ purpose other than benchmarking. We also have density-fitting for ODC-12. I'll warn you that there is some slight error in the DF gradients, on the order of E-5. That is _also_ on my to-fix list, but given some other papers I need to write, I don't expect to get to that until Winter 2020. The other potential dealbreaker is that method _also_ lacks frozen core support, DF or not. Fixing that is a Spring 2021 target.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863#issuecomment-612018450:1736,optimiz,optimized,1736,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-612018450,1,['optimiz'],['optimized']
Performance,"g<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > > > const&), std::shared_ptr<psi::SuperFunctional>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::optional<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, double, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > > > const&, pybind11::name, pybind11::scope, pybind11::sibling, pybind11::arg, pybind11::arg, pybind11::arg_v, char [43]>(std::shared_ptr<psi::SuperFunctional> (*&)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::optional<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, double, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > > > const&), std::shared_ptr<psi::SuperFunctional> (*)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::optional<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, double, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > > > const&), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, pybind11::arg const&, pybind11::arg const&, pybind11::arg_v const&, char const (&) [43])::{lambda(pybind11::detail::function_call&)#1}::operator()(pybind11::detail::function_call&) const (__closure=<optimized out>, call=.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:6306,optimiz,optimized,6306,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"g=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633 ; > > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084 ; > > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0) ; > > at Python/ceval.c:4378 ; > > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720 ; > > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433 ; > > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161 ; > > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084 ; > > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433 ; > > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0) ; > > at Python/ceval.c:771 ; > > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; > > locals=locals@entry=0x7ffff7ed07a0, flags=flags@entry=0x0, arena=arena@entry=0x28ca640) at Python/pythonrun.c:1981 ; > > #35",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:6655,optimiz,optimized,6655,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,2,['optimiz'],['optimized']
Performance,"ge from OMP:; ```; OMP: Error #15: Initializing libiomp5.so, but found libiomp5.so already initialized.; OMP: Hint: This means that multiple copies of the OpenMP runtime have been linked into the program. That is dangerous, since it can degrade performance or cause incorrect results. The best thing to do is to ensure that only a single OpenMP runtime is linked into the process, e.g. by avoiding static linking of the OpenMP runtime in any library. As an unsafe, unsupported, undocumented workaround you can set the environment variable KMP_DUPLICATE_LIB_OK=TRUE to allow the program to continue to execute, but that may cause crashes or silently produce incorrect results. For more information, please see http://www.intel.com/software/products/support/.; Aborted (core dumped); ```; To force running psi4, I follow OMP error message's suggestion (`export KMP_DUPLICATE_LIB_OK=TRUE`), but dft-custom-gga does not work (failed due to the same reason - not converged ). From my several trials, this problem seems not to be related to OMP libraries. Regardless of using either `gomp` or `iomp`, dft-custom-gga test fails under single thread. In other words, whenever multi-thread is used for calculations, it gives good SCF convergence within few iterations, which seems similar with the issue #994 @hokru reported. I thought it might be problem of incompatibilities between GCC compiler and Intel OMP libraries. Like @loriab setting, I changed to use icpc intel compiler (v 18.0.3), instead of gcc (v5.4.0). Re-built '<objdir>' by cmake. Then, opened '<objdir>/psi4-core-prefix/src/psi4-core-build/src/CMakeFiles/core.dir/link.txt' and added '/opt/intel/lib/intel64' (basically intel 64bit libraries) to set library folder path.; Then, Intel Compiler + Intel OMP libraries works even single thread calculation for dft-custom-gga test. Anyway, I am not sure why only dft-custom-gga test failed under single thread, so the way to change compiler could relieve the issue. I thank you for all your help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809:1473,multi-thread,multi-thread,1473,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809,2,['multi-thread'],['multi-thread']
Performance,"ger effort fails, it's still a small value add. > I am happy to get the ball rolling, but I do need some direction on which package(s) would be good starting point(s) and maybe in which order. Thanks for the help, @mattwthompson. I think CheMPS2 might be a good one to start with.; * source is LTS; * it's been a psi4 add-on since pre-1.0, so expected to be around; * C++, so some challenge, but not Fortran; * requires LAPACK and probably needs different build config for MKL (all psi4 needs) and OpenBLAS; * does have a python interface, pychemps2, that psi4 packages for completeness but doesn't itself use. the psi4 recipe is set up to produce one C++ library package and n * Py python module packages pinned to the C++ pkg, but at least for gau2grid, I failed to get c-f's system to not produce n * Py C++ library packages, so the multiple-output form of the psi4 recipe may not be suitable for c-f. If after looking at the table, you see lower-hanging fruit that you'd like to try, feel free. I'll note that gcp/dftd3/dftd4 are all sort of the same case. Historically (and what you'll see in the psi4 recipes repo), I took the venerable Fortran tarballs, added CMake and built them with Intel. The Grimme group, notably @awvwgk has been rewriting some of the older code (with tests!) and setting up meson builds of the new packages on c-f. Lately, he's been adding CMake as an alternate buildsys, which is friendlier (in my view) to MKL and Mac/Win. I just tried a `conda create -n d3test python=3.9 simple-dftd3 dftd4-python gcp-correction blas=*=mkl -c conda-forge` on Mac and it solved correctly and didn't bring anything objectionable (openblas or gomp). If that's the case for Linux, too, (to which I don't have access today) I tentatively think psi4 can use those packages directly from c-f for Mac/Linux, and the psi4 recipes can be abandoned. (Caveats: Windows, adapting qcengine for any miniscule changes in interface btwn venerable and rewritten versions, performance from multiarch?)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791:2239,perform,performance,2239,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791,2,['perform'],['performance']
Performance,"globals@entry=0x7fac0e241bc0, locals=locals@entry=0x7fac0e241bc0); at /usr/local/src/conda/python-3.10.14/Python/pythonrun.c:1291; #423 0x000055ff90740523 in run_mod (mod=mod@entry=0x55ff952b55d8, filename=filename@entry=0x7fac0e29b2d0, globals=globals@entry=0x7fac0e241bc0, locals=locals@entry=0x7fac0e241bc0, ; flags=flags@entry=0x7fff1128dce8, arena=arena@entry=0x7fac0e303b90) at /usr/local/src/conda/python-3.10.14/Python/pythonrun.c:1312; #424 0x000055ff905d76f5 in pyrun_file (fp=fp@entry=0x55ff95162c40, filename=filename@entry=0x7fac0e29b2d0, start=start@entry=257, globals=globals@entry=0x7fac0e241bc0, ; locals=locals@entry=0x7fac0e241bc0, closeit=closeit@entry=1, flags=0x7fff1128dce8) at /usr/local/src/conda/python-3.10.14/Python/pythonrun.c:1208; #425 0x000055ff9073a9fe in _PyRun_SimpleFileObject (fp=0x55ff95162c40, filename=0x7fac0e29b2d0, closeit=1, flags=0x7fff1128dce8); at /usr/local/src/conda/python-3.10.14/Python/pythonrun.c:456; #426 0x000055ff9073a594 in _PyRun_AnyFileObject (fp=0x55ff95162c40, filename=filename@entry=0x7fac0e29b2d0, closeit=closeit@entry=1, flags=flags@entry=0x7fff1128dce8); at /usr/local/src/conda/python-3.10.14/Python/pythonrun.c:90; #427 0x000055ff9073778b in pymain_run_file_obj (skip_source_first_line=0, filename=0x7fac0e29b2d0, program_name=0x7fac0e299d10) at /usr/local/src/conda/python-3.10.14/Modules/main.c:357; #428 pymain_run_file (config=0x55ff95142180) at /usr/local/src/conda/python-3.10.14/Modules/main.c:376; #429 pymain_run_python (exitcode=0x7fff1128dce4) at /usr/local/src/conda/python-3.10.14/Modules/main.c:591; #430 Py_RunMain () at /usr/local/src/conda/python-3.10.14/Modules/main.c:670; #431 0x000055ff907081f7 in Py_BytesMain (argc=<optimized out>, argv=<optimized out>) at /usr/local/src/conda/python-3.10.14/Modules/main.c:1090; #432 0x00007fac1bfc1088 in __libc_start_call_main () from /lib64/libc.so.6; #433 0x00007fac1bfc114b in __libc_start_main_impl () from /lib64/libc.so.6; #434 0x000055ff907080f1 in _start (); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:89168,optimiz,optimized,89168,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"gradient('mp2', molecule=mol); > compare_values(norm_nre_start, mol.nuclear_repulsion_energy(), 3, 'start nre'); > compare_values(norm_e_start, get_variable('CURRENT ENERGY'), 5, 'start ene'); > compare_values(norm_rmsg_start, g0.rms(), 4, 'start rms grad'); > compare_matrices(norm_g_start, g0, 3, 'start grad'); > ; > def test_zero_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); > compare_values(e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene'); > compare_matrices(zerograd, g, 3, 'opt ZERO grad'); > ; > def test_odd_start(mol):; > g0 = gradient('mp2', molecule=mol); > compare_values(odd_nre_start, mol.nuclear_repulsion_energy(), 1, 'start nre'); > compare_values(odd_e_start, get_variable('CURRENT ENERGY'), 3, 'start ene'); > compare_values(odd_rmsg_start, g0.rms(), 4, 'start rms grad'); > compare_matrices(odd_g_start, g0, 3, 'start grad'); > ; > def test_badodd_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(odd_nre_opt, mol.nuclear_repulsion_energy(), 2, 'opt nre nogood'); > compare_values(odd_e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene nogood'); > compare_values(odd_rmsg_opt, g.rms(), 4, 'opt grad nogood'); > ; > test_norm_start(normz); > test_zero_grad(normz); > ; > # And behold, the initial gradient matches Q-Chem, the optimization; > ; > # progresses nicely, the RMS Force column goes to zero, and the gradient; > ; > # at the end is zero.; > ; > # start nre.........................................................PASSED; > ; > # start ene.........................................................PASSED; > ; > # start rms grad....................................................PASSED; > ; > # start grad........................................................PASSED; > ; > #Optimizer: Optimization complete!; > ; > # opt nre.........................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-195966638:3884,optimiz,optimize,3884,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638,1,['optimiz'],['optimize']
Performance,"gsf=2, args=0x7fff1128b4a0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #301 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128b530) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #302 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #303 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fac0e0fe470, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #304 PyImport_ImportModuleLevelObject (name=0x7fac0e0fe470, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #305 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #306 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #307 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fac0e0f68c0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #308 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fac0e0f68c0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #309 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0ae880, callargs=0x7fac0e0f68c0, func=0x7fac0e3989a0, trace_info=0x7fff1128b870, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #310 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e32fc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:64521,optimiz,optimized,64521,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"gstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.481692970000 4.002603254130. Running in c1 symmetry. Rotational constants: A = ************ B = 0.95920 C = 0.95920 [cm^-1]; Rotational constants: A = ************ B = 28755.98304 C = 28755.98304 [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 2; Nalpha = 1; Nbeta = 1. ==> Algorithm <==. SCF Algorithm Type is MEM_DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: JUN-CC-PVDZ; Blend: JUN-CC-PVDZ; Number of shells: 6; Number of basis function: 10; Number of Cartesian functions: 10; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (JUN-CC-PVDZ AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry HE line 39 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/def2-qzvpp-jkfit.gbs . Computing basis projection from 3-21G to JUN-CC-PVDZ. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 0 0 0 0; -------------------------------------------------------; Total 10 10 1 1 1 0; -------------------------------------------------------. ==> Integral Setup <==. DFHelper Memory: AOs need 0.000 GiB; user supplied 0.366 GiB. Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Memory [MiB]: 375; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 0.0000; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (JUN-CC-PVDZ AUX); Blend: DEF2-QZVPP-JKFIT; Number of shells: 18; Num",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:6843,Load,Loading,6843,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,1,['Load'],['Loading']
Performance,"handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132; > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0; > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084; > #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283; > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086; > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); > at Python/ceval.c:3433; > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); > at Python/ceval.c:4378; > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720; > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:4856,optimiz,optimized,4856,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,2,['optimiz'],['optimized']
Performance,"has the advantage that the; CC numbering will work well for CIS, TDDFT, etc. So that we can easily loop over things, I favor any lists of energies or; dipoles as also including the ground state (state 0). So, we can have. CI/CC ROOT 0 ENERGY [or whatever it's called, I forget]; CI/CC ROOT 1 ENERGY; etc. as well as. CI/CC ROOT 0 DIPOLE x; CI/CC ROOT 1 DIPOLE x. Including ROOT 0 in the lists above will remove unnecessary annoying logic; when looping over roots for processing/printing output. For CI use cases,; we will always want to loop over all roots including ROOT 0. For the ground state only, we can also duplicate the ROOT 0 information; into variable names without the ""ROOT n"" designation, which is what people; will want to grab if they just want g.s. info. CI/CC DIPOLE x. (Actually, strictly speaking, the root number that should go here should; probably be FOLLOW_ROOT, which defaults to ROOT1 (now should be ->; ROOT0)... FOLLOW_ROOT is supposed to allow you to optimize an excited state; instead of the ground state in an MCSCF or geometry opt). The CI code has always assumed numbering starts with 1 in the user; interface, so any input options regarding roots will need to have -1 added; (except the total number of roots, obviously). Best,; David. On Fri, Nov 11, 2016 at 10:27 PM, Andy Simmonett notifications@github.com; wrote:. > This is great; I really like that you've addressed the inconsistency; > between CI and CC, which I didn't notice before. The scheme in your last; > message looks good to me. I think that numbering the first excited state 1,; > and the second 2, _etc._ makes the most sense, for obvious reasons. Zero; > basing the excited states would lead to an off-by-one error in the cardinal; > and ordinal notation. LGTM.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/506#issuecomment-260098726, or mute; > the thread; > https://github.com",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-260126337:2059,optimiz,optimize,2059,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260126337,1,['optimiz'],['optimize']
Performance,"hat we should:; - allow the `roos-ano-[dt]z` basis sets into CBS as well; - are the `pcseg-[0-4]` basis sets (double- to six-zeta, I believe) the segmented versions of `pc-X` bases? There might be an argument in letting those in as well, based on the Neese paper. I don't suppose we can handle the generally contracted ANO's in Psi4? They're not included in our basis set library anyway. In terms of coefficients, I probably don't understand exactly what's going on, but:; - for `corl_xtpl_helgaker_2` we use a hard-coded `beta = 3`, which is the physically correct exponent, but for extrapolation between from `[DT]` basis sets the value of `2.46` seems more appropriate. There is currently no way to supply a custom value; - for `scf_xtpl_helgaker_2` (both of these should really be called `scf_xtpl_halkier_[2,3]`): we use the exponential form which seems to perform a lot better than the power form according to Halkier et al. The `alpha=1.63` seems to be a general parameter here, however a zeta-based `alpha` seems to perform better (as it is fitted). The interface to supply `alpha` is in the function, but doesn't seem to be plugged into the CBS machinery; - the ""power form"" for SCF extrapolation is not implemented in Psi4, but the coefficent `alpha` seems to be very system and basis and zeta dependent, as shown by both Halkier et al. and Neese and Valeev. @loriab My suggestions for myself for this PR, in addition to allowing the two basis set classes above, would be:; - [ ] add power form for SCF extrapolation (eg. `scf_xtpl_power_2`) with user-supplied `alpha`, a sane default is `alpha=3.54` from Halkier et al.; - [ ] add ability to supply custom `beta` for `corl_xtpl_helgaker_2` for better performance with [DT]'s; - [ ] wire up `scf_xtpl_helgaker_2` parameter `alpha` and the other two from above with the rest of the CBS machinery, perhaps using `scf_alpha` and `corl_beta` parameters to `cbs()`. The `cc-pVXZ-PP` issue can certainly wait. The user can combine their own basis ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/963#issuecomment-381392778:1093,perform,perform,1093,https://psicode.org,https://github.com/psi4/psi4/pull/963#issuecomment-381392778,1,['perform'],['perform']
Performance,"hat your background is, so I'm going to write this explanation at a level accessible for a first-year graduate student, though it will still be dense. Many matrices in electronic structure theory are indexed by two orbitals. Each orbital will change in a different way under symmetry operations of the molecule (like rotation, reflection), and we call each classification an irreducible representation (irrep). Now, our matrices further have the property that A_mn = 0 unless the symmetries of m and n are somehow related. Our matrix then only needs to store ""blocks"" where for all orbitals m of irreducible representation h, the only non-zero elements of A are A_mn where n is an orbital of irreducible representation i. Because we use this block structure, it isn't enough to make sure that the total dimensions of the matrix agree (what your code does). We need the dimensions of each symmetry block to agree on the three points mentioned in the original issue. This validation should be performed for each irreducible representation. For reference, the code that Susi linked does the following:; ```; for each irreducible representation of the first index of A, Ha:; 	Hb is the irreducible representation of the first index of the B block that can multiply with the A block; Hc is the irreducible representation of the first index of the new matrix (if we're multiplying by A, this is just Ha, otherwise this is the irreducible representation of the second index for the block with first index Ha); 	m is the number of orbitals with the irreducible representation for the first index in this block of the new matrix; 	n is the number of orbitals with the irreducible representation for the second index in this block of the new matrix; 	k is the number of orbitals with the irreducible representation for the second index in this block of A, which is also the number of orbitals with the irreducible representation for the first index in this block of B; 	lda is the number of columns of matrix A;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2729#issuecomment-1260925688:1005,perform,performed,1005,https://psicode.org,https://github.com/psi4/psi4/pull/2729#issuecomment-1260925688,2,['perform'],['performed']
Performance,"hich can be installed;; └─ python 3.9.7 would require; └─ openssl >=1.1.1l,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.10 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.10']. pkgs/main/linux-64 Using cache; pkgs/main/noarch Using cache; pkgs/r/linux-64 Using cache; pkgs/r/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change; Could not solve for environment specs; The following packages are incompatible; └─ psi4 is installable with the potential options; ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ └─ pychemps2 >=1.7.1 with the potential options; │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ └─ blas 1.0 mkl, which can be installed;; │ ├─ pychemps2 1.7.1 would require; │ │ └─ chemps2 1.7.1 , which requires; │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.8.3 would require; │ └─ chemps2 1.8.3 , which requires; │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ └─ python 2.7* with the potential options; │ ├─ python [2.7.13|2.7.14] would require; │ │ └─ openssl 1.0.* , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2n,<1.0.3a , which can be installed;; │",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:7142,cache,cache,7142,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966,4,['cache'],['cache']
Performance,"ho2tau2=0x0, v4rhosigma3=0x0, v4rhosigma2lapl=0x0, v4rhosigma2tau=0x0, v4rhosigmalapl2=0x0, v4rhosigmalapltau=0x0, ; > v4rhosigmatau2=0x0, v4rholapl3=0x0, v4rholapl2tau=0x0, v4rholapltau2=0x0, v4rhotau3=0x0, v4sigma4=0x0, v4sigma3lapl=0x0, v4sigma3tau=0x0, v4sigma2lapl2=0x0, v4sigma2lapltau=0x0, v4sigma2tau2=0x0, v4sigmalapl3=0x0, v4sigmalapl2tau=0x0, v4sigmalapltau2=0x0, v4sigmatau3=0x0, v4lapl4=0x0, v4lapl3tau=0x0, v4lapl2tau2=0x0, v4lapltau3=0x0, ; > v4tau4=0x0) at /psi/gits/libxc/src/mix_func.c:119; > #5 0x00007fffecf71998 in xc_gga (func=0x555556ca7500, np=255, rho=0x555556e575c0, sigma=0x555556ccda80, zk=0x555556771300, vrho=0x55555e164460, vsigma=0x555556c12720, v2rho2=0x0, v2rhosigma=0x0, v2sigma2=0x0, v3rho3=0x0, v3rho2sigma=0x0, v3rhosigma2=0x0, v3sigma3=0x0, v4rho4=0x0, v4rho3sigma=0x0, v4rho2sigma2=0x0, v4rhosigma3=0x0, v4sigma4=0x0); > at /psi/gits/libxc/src/gga.c:126; > #6 0x00007fffecf71b16 in xc_gga_exc_vxc (p=<optimized out>, np=<optimized out>, rho=<optimized out>, sigma=<optimized out>, zk=<optimized out>, vrho=<optimized out>, vsigma=0x555556c12720) at /psi/gits/libxc/src/gga.c:160; > #7 0x00007fffef1a9541 in psi::LibXCFunctional::compute_functional (this=0x896d, in=..., out=..., npoints=-1, deriv=1) at /psi/gits/hrw-demo/psi4/src/psi4/libfunctional/LibXCfunctional.cc:549; > #8 0x00007fffef1b899f in psi::SuperFunctional::compute_functional (this=0x896d, vals=..., npoints=6) at /psi/gits/hrw-demo/psi4/src/psi4/libfunctional/superfunctional.cc:633; > #9 0x00007fffef1737ba in psi::RV::compute_V (this=0x896d, ret=<error reading variable: Cannot access memory at address 0x896d>) at /psi/gits/hrw-demo/psi4/src/psi4/libfock/v.cc:1350; > #10 0x00007fffef7752c3 in psi::scf::RHF::form_V (this=0x896d) at /psi/gits/hrw-demo/psi4/src/psi4/libscf_solver/rhf.cc:180; > #11 0x00007fffef77451b in psi::scf::RHF::form_G (this=0x896d) at /psi/gits/hrw-demo/psi4/src/psi4/libscf_solver/rhf.cc:185; > ```; > ; > Please let me know when is a good point to try Psi4+Libxc 5.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754743798:2651,optimiz,optimized,2651,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754743798,6,['optimiz'],['optimized']
Performance,"hon-3.10.14/Include/internal/pycore_ceval.h:46; #357 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; --Type <RET> for more, q to quit, c to continue without paging--; #358 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #359 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #360 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #361 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c7f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #362 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e1d18a0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #363 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e1d18a0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #364 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #365 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #366 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128c920, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/lo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:75437,optimiz,optimized,75437,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"hon-3.10.14/Include/internal/pycore_ceval.h:46; #382 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #383 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #384 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510, tstate=0x55ff9515e050); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #385 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #386 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d0b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #387 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16dc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #388 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16dc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #389 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #390 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #391 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630, tstate=0x55ff9515e05",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:80360,optimiz,optimized,80360,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"hon-3.10.14/Include/internal/pycore_ceval.h:46; --Type <RET> for more, q to quit, c to continue without paging--; #277 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #278 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #279 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #280 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4289ce0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #281 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b010, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #282 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4289b60, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #283 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4289b60, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #284 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #285 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #286 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0, tstate=0x55ff9515e05",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:59908,optimiz,optimized,59908,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"i::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>); > at /usr/include/boost/python/detail/invoke.hpp:75; > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223; > #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (_)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38; > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0; > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); > from /usr/lib/libboost_python3.so.1.54.0; > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); > at /usr/include/boost/python/detail/translate_exception.hpp:48; > #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&> > (f=..., a=<syntheti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:2404,optimiz,optimized,2404,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,6,['optimiz'],['optimized']
Performance,"ic.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ```; > ; > You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py). This is super helpful, thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:3205,optimiz,optimizer,3205,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275,16,['optimiz'],"['optimize', 'optimizer']"
Performance,ict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2820,Perform,Performing,2820,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,"ies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0) ; > > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99 ; > > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307 ; > > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171 ; > > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429 ; > > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>) ; > > at /usr/include/boost/python/detail/invoke.hpp:75 ; > > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223 ; > > #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (_)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38 ; > > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0 ; > > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const () ; > > from /usr/lib/libboost_python3.so.1.54.0 ; > > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...) ; > > at /usr/include/boost/python/detail/translate_exception.hpp:48 ; > > #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:2843,optimiz,optimized,2843,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,6,['optimiz'],['optimized']
Performance,"il.set_options`. Returns; -------; Dict[str, Any]; Dictionary where keys are keyword names, either plain for those to be; set globally or mangled ""module__keyword"" for those to be set locally,; and values are keyword values. """"""; flat_options = {}; has_changed_snapshot = {module: core.options_to_python(module) for module in _modules}. for opt in core.get_global_option_list():; handled_locally = False; ghoc = core.has_global_option_changed(opt); opt_snapshot = {k: v[opt] for k, v in has_changed_snapshot.items() if opt in v}; for module, (lhoc, ohoc) in opt_snapshot.items():; if ohoc:; if lhoc:; key = module + '__' + opt; val = core.get_local_option(module, opt); else:; key = opt; val = core.get_global_option(opt); handled_locally = True; flat_options[key] = val. if ghoc and not handled_locally:; # some options are globals section (not level) so not in any module; flat_options[opt] = core.get_global_option(opt). # The normal machinery to forward plugin options to Psi goes through 'plugin_load'.; # Forte doesn't use this. Pending a larger options rewrite (move to a Python dictionary?),; # we need the following dirty hack. try:; import forte # Needed for Forte options to run.; except ImportError:; pass; else:; # Initialization tasks with Psi options; psi_options = core.get_options(); current_module = psi_options.get_current_module(); # Get the current Forte options from Forte; forte_options = forte.ForteOptions(); forte.register_forte_options(forte_options); psi_options.set_current_module(""FORTE""); try:; forte_options.get_options_from_psi4(psi_options); except RuntimeError:; # If we're in this case, Forte hasn't pushed its options to Psi.; pass; else:; # Load changed Forte options into `flat_options`; for name, metadata in forte_options.dict().items():; if metadata[""value""] != metadata[""default_value""]:; flat_options[f""forte__{name.lower()}""] = metadata[""value""]; finally:; # Restore current module; psi_options.set_current_module(current_module); return flat_options; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3010#issuecomment-1631488686:2150,Load,Load,2150,https://psicode.org,https://github.com/psi4/psi4/issues/3010#issuecomment-1631488686,1,['Load'],['Load']
Performance,"im/anaconda3/include"" ../configure --enable-eri=2 --enable-eri3=2 --enable-eri2=2 --with-eri-max-am=5 --with-eri2-max-am=6 --with-eri3-max-am=6 --with-shgauss-ordering=gaussian --prefix=/u/andysim/programming/libint/installdir3 --enable-eri2-pure-sh --enable-eri3-pure-sh`. 3. `make install` (this will take a *very* long time). 4. `make export` - this will generate a tarball that can be used to build a version for Psi4 called `libint-2.7.0-beta.1.tgz`. 5. Untar that tarball somewhere else and modify the file `include/libint2_params.h` to read; ```; #ifndef LIBINT2_MAX_AM_default; # define LIBINT2_MAX_AM_default 4; #endif. #ifndef LIBINT2_MAX_AM_default1; # define LIBINT2_MAX_AM_default1 LIBINT2_MAX_AM_default; #endif. #ifndef LIBINT2_MAX_AM_default2; # define LIBINT2_MAX_AM_default2 LIBINT2_MAX_AM_default; #endif; ```; from line 81 onwards. 6. Make a `build` subdir and from there `cmake .. -DCMAKE_INSTALL_PREFIX=/u/andysim/programming/libint/installdir_2.6 -DLIBINT2_SHGAUSS_ORDERING=gaussian -DCMAKE_CXX_FLAGS=""-fPIC""` The fPIC flag is needed, or you'll get some nasty link errors. 7. Now you can build Psi4. Yay! `cmake .. -DCMAKE_BUILD_TYPE=Debug -DLibint2_DIR=/u/andysim/programming/libint/installdir_2.6/lib/cmake/libint2 -DLibint_DIR=/u/andysim/programming/libint1/installdir/share/cmake/Libint -DCMAKE_CXX_FLAGS=""-g -O0 -gxx-name=/v/apps/gcc/5.4.0/bin/g++ $CXXFLAGS""` The libint1 should be the hacked version with the `Libint_t` changed to `Libint1_t`. Also I strongly recommend adding the `-O0` flag to the compiler flags, because our CMake debug build doesn't do this (we should change that) and the code takes a _very_ long time to compile with optimization. A lot of this will be streamlined in the not so distant future, and much of the complication will be eased when we nuke libint1. Until then, the above command should be sufficient to get you up and running with a development build. Please try it out - I'd love to have some help with getting the derivatives working :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-537945417:2200,optimiz,optimization,2200,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-537945417,1,['optimiz'],['optimization']
Performance,"imized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38 ; > > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0 ; > > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const () ; > > from /usr/lib/libboost_python3.so.1.54.0 ; > > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...) ; > > at /usr/include/boost/python/detail/translate_exception.hpp:48 ; > > #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&> > (f=..., a=<synthetic pointer>, this=<optimized out>) at /usr/include/boost/bind/bind.hpp:382 ; > > #15 operator()<boost::python::detail::exception_handler, boost::function0<void> > (a2=..., a1=..., this=<optimized out>) ; > > at /usr/include/boost/bind/bind_template.hpp:102 ; > > #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132 ; > > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0 ; > > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=a",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:3838,optimiz,optimized,3838,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,2,['optimiz'],['optimized']
Performance,"import_find_and_load (abs_name=0x7fac0e0fe470, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #304 PyImport_ImportModuleLevelObject (name=0x7fac0e0fe470, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #305 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #306 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #307 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fac0e0f68c0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #308 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fac0e0f68c0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #309 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0ae880, callargs=0x7fac0e0f68c0, func=0x7fac0e3989a0, trace_info=0x7fff1128b870, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #310 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e32fc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #311 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e32fc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #312 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #313 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:65093,optimiz,optimized,65093,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Checking whether CXX compiler has -isysroot; -- Checking whether CXX compiler has -isysroot - yes; -- Checking whether CXX compiler supports OSX deployment target flag; -- Checking whether CXX compiler supports OSX deployment target flag - yes; -- Check for working CXX compiler: /usr/local/bin/g++-8; -- Check for working CXX compiler: /usr/local/bin/g++-8 -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option ENABLE_MSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 14; -- Setti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:4146,Perform,Performing,4146,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308,1,['Perform'],['Performing']
Performance,ing module mdi. Install package if necessary to enable tests.) [ 76%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py::test_spacious_option PASSED [ 78%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 80%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 83%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 85%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 87%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [ 89%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py::test_psi4_basic PASSED [ 90%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py::test_psi4_cc XFAIL (no AtomicInput optimization) [ 92%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py::test_psi4_cas PASSED [ 94%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py::test_psi4_dfmp2 PASSED [ 96%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py::test_psi4_sapt PASSED [ 98%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py::test_psi4_scfproperty PASSED [100%]. ============================================================================ warnings summary =============================================================================; psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:599: 3 warnings; psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:701: 3 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py: 2700 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py: 1773 warnings; psi4conda/envs/psi4env/lib/site-packages/p,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:8158,optimiz,optimization,8158,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['optimiz'],['optimization']
Performance,"ing>"", line 30, in <module>; File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 2008, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1362, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 93, in scf_compute_energy; raise e; File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; self.iterations(); File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 358, in scf_iterate; raise ConvergenceError(""""""SCF iterations"""""", self.iteration_). ConvergenceError: Could not converge SCF iterations in 4 iterations. Psi4 stopped on: Wednesday, 08 August 2018 05:42PM; Psi4 wall time for execution: 0:00:01.01. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. It looks like [`die_if_not_converged`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsi4util/process.cc#L105-L113) toggled print-error-msg/die+traceback previously for SCF and DETCI, with defaulting toward print-error-msg. I think it's better to default toward die (which this PR now does) and ppl can catch the error if they want print-error-msg. For a long time we had geometry optimizations exit smoothly even if failed for iterations exceeded. That caused some problems (I think @dsirianni hit them), so we switched toward the die+traceback. Now SCF will behave like optimizations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1130#issuecomment-411567479:2116,optimiz,optimizations,2116,https://psicode.org,https://github.com/psi4/psi4/pull/1130#issuecomment-411567479,2,['optimiz'],['optimizations']
Performance,"inter>, trace_info=0x7fff112861e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #20 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd84ecdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #21 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabd84ecdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #22 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112862e0, locals=locals@entry=0x7fabd7bced00, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #23 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd78907c0, globals=globals@entry=0x7fabd7bced00, locals=locals@entry=0x7fabd7bced00); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #24 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd7bced00, globals=0x7fabd7bced00, source=0x7fabd78907c0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #25 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #26 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd7888dd8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #27 0x000055ff90677205 in do_call_core (kwdict=0x7fabd7bce4c0, callargs=0x7fabd7888dc0, func=0x7fac0e398e00, trace_info=0x7fff112864b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #28 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8949cf0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #29 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8949cf0, tstate=0x55ff9515e050) at /usr/local/src/con",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:10065,optimiz,optimized,10065,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ions of `pc-X` bases? There might be an argument in letting those in as well, based on the Neese paper. I don't suppose we can handle the generally contracted ANO's in Psi4? They're not included in our basis set library anyway. In terms of coefficients, I probably don't understand exactly what's going on, but:; - for `corl_xtpl_helgaker_2` we use a hard-coded `beta = 3`, which is the physically correct exponent, but for extrapolation between from `[DT]` basis sets the value of `2.46` seems more appropriate. There is currently no way to supply a custom value; - for `scf_xtpl_helgaker_2` (both of these should really be called `scf_xtpl_halkier_[2,3]`): we use the exponential form which seems to perform a lot better than the power form according to Halkier et al. The `alpha=1.63` seems to be a general parameter here, however a zeta-based `alpha` seems to perform better (as it is fitted). The interface to supply `alpha` is in the function, but doesn't seem to be plugged into the CBS machinery; - the ""power form"" for SCF extrapolation is not implemented in Psi4, but the coefficent `alpha` seems to be very system and basis and zeta dependent, as shown by both Halkier et al. and Neese and Valeev. @loriab My suggestions for myself for this PR, in addition to allowing the two basis set classes above, would be:; - [ ] add power form for SCF extrapolation (eg. `scf_xtpl_power_2`) with user-supplied `alpha`, a sane default is `alpha=3.54` from Halkier et al.; - [ ] add ability to supply custom `beta` for `corl_xtpl_helgaker_2` for better performance with [DT]'s; - [ ] wire up `scf_xtpl_helgaker_2` parameter `alpha` and the other two from above with the rest of the CBS machinery, perhaps using `scf_alpha` and `corl_beta` parameters to `cbs()`. The `cc-pVXZ-PP` issue can certainly wait. The user can combine their own basis sets into user-supplied `.gbs`'s (which is what I was doing for my systems anyway) and the CBS function will happily use them, as long as they match the regex.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/963#issuecomment-381392778:1781,perform,performance,1781,https://psicode.org,https://github.com/psi4/psi4/pull/963#issuecomment-381392778,1,['perform'],['performance']
Performance,"is is more than we started with.; - [x] 1. `-DECONTRACT` handled c-side was fine as an initial hack. but I'd rather implement that function py-side so as to hand back the full basis set dictionary, just so they're treated like everything else. also, right now, this decontracts _everything_, that is orbital/fitting alike unless you explicitly specify them all.; - [x] 2. also, rename rel_basis. only proximity to other dkh/relativisitc keywords indicates that that's what it means.; - [x] 3. show how to build your own _named_ basis for orbital or fitting roles a la mints9; - [x] 4. prove that a `basis mybas {...}` -defined basis can work for a `db()` calc, that is, the basis isn't anonymous and can be reapplied to multiple molcules. fitting, too.; - [x] 5. see if any of the times moldules call pyconstruct_aux if they want to forcibly apply the puream of the orbital to the aux basis. i think scf does this but nowhere else.; - [x] 6. the python side of pyconstruct generates a nice compact summary of where basis functions are loaded from (like below). this would be very handle to print in output once per basis. problem is modules read basis sets over and over. so either that needs curtailing or pass a printornot flag to pyconstruct. ```; => Loading Basis Set <=. Role: BASIS; Keyword: BASIS; Name: CC-PVDZ; atoms 1 entry C line 130 file /Users/loriab/linux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; atoms 2 entry O line 190 file /Users/loriab/linux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; atoms 3-4 entry H line 20 file /Users/loriab/linux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; ```; - [x] 7. soon after all the new basis stuff went in Nov 2014, Jet added another layer in qcdb pyconstruct to make CABS basis sets work. unfortunately, this broke one of the key principles/advantages of the new scheme. not that i remember exactly what that principle was, though it was probably that the basis could be re-constituted by `basis mybas {...}` mybas name; - [x] 8. fix the 5-zeta and 6-z",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/43#issuecomment-189541354:1473,load,loaded,1473,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-189541354,1,['load'],['loaded']
Performance,"ized out>, args=0x7fabd8a583d0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #114 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8a583d0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; --Type <RET> for more, q to quit, c to continue without paging--; #115 0x000055ff90677205 in do_call_core (kwdict=0x7fabd88870c0, callargs=0x7fabd8a583d0, func=0x7fac0e3989a0, trace_info=0x7fff11287e40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #116 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95de00f0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #117 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95de00f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #118 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #119 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #120 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #121 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #122 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287ff0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #123 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95ddd860, throwflag=<opt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:28173,optimiz,optimized,28173,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"jects are used throughout the codebase via calls to `JK::compute()`. In SCF, many calls to `JK::compute()` are made interspersed with updates to the object's orbitals. `JK::compute()` does a [few things](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/jk.cc#L550): performs sanity checks, creates densities from the orbitals, zeroes out the object's `J`/`K`/`wK` matrices, and finally calls the virtual function `compute_JK()`, which is where each child class implements some algorithm to fill `J`/`K`/`wK`. Now consider incremental Fock construction. Instead of recomputing `J`/`K`/`wK` each SCF iteration, the previous iteration's `J`/`K`/`wK` are added to a `J`/`K`/`wK` computed with the difference in densities between the current and previous iterations. As [implemented in the `DirectJK` class](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/jk.h#L724-L734), this accomplished by storing the entire `J`/`K`/`wK` matrices of the previous iteration, computing the difference density update to `J`/`K`/`wK`, adding the two together, and storing in the `JK` objects `J`/`K`/`wK` matrices. This requires a lot of [convoluted bookkeeping](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/DirectJK.cc#L138-L217). Future JK classes that would want to do incremental Fock build would have to duplicate a lot of code, too. Instead, a much simpler approach would be this: The call to `JK::compute()` doesn't zero out the `J`/`K`/`wK` matrices. Instead, the child JK class can choose to zero out their `J`/`K`/`wK` matrices (if performing a normal Fock build) or leave them as-is from the previous iteration and add to them (if performing an incremental Fock build). This way no previous iterations' `J`/`K`/`wK` matrices have to be saved, and the logic in `compute_JK` becomes much simpler. . > Is `early_screening_` for this ""semi-numerical exchange,"" or something else? How close is this other PR to completion. Yes, this is used in semi-numerical exchange.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2529#issuecomment-1089141879:2172,perform,performing,2172,https://psicode.org,https://github.com/psi4/psi4/pull/2529#issuecomment-1089141879,4,['perform'],['performing']
Performance,"k behind the scene by running the 3 SCF and handling all relevant files. If you want to feed orbitals into the SCF, you need to do all of that directly in the input file. That is not really pretty, and right now we are changing some things in Psi4 infrastructure, which means the same input file might need tweaking in future versions. Below is an example with the molecule you had above. The symmetry c1, no_reorient and no_com options _must_ be there, I also assumed you had the orbital files at hand already. molecule dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561; symmetry c1; no_reorient; no_com; }. set {; basis jun-cc-pvdz; scf_type df; e_convergence 10; guess read; }. dimer = psi4.get_active_molecule(); psi4.IO.set_default_namespace('dimer'); psi4.set_local_option('SCF', 'SAPT', '2-dimer'); psi4.set_global_option('DF_INTS_IO', 'SAVE'). energy('scf',restart_file='./psi.15065.dimer.180'). psi4.set_global_option('DF_INTS_IO', 'LOAD'). monomerA = dimer.extract_subsets(1, 2); psi4.IO.change_file_namespace(97, 'dimer', 'monomerA'); psi4.IO.set_default_namespace('monomerA'); psi4.set_local_option('SCF', 'SAPT', '2-monomer_A'). energy('scf',restart_file='./psi.15065.monomerA.180'). monomerB = dimer.extract_subsets(2, 1); psi4.IO.change_file_namespace(97, 'monomerA', 'monomerB'); psi4.IO.set_default_namespace('monomerB'); psi4.set_local_option('SCF', 'SAPT', '2-monomer_B'). energy('scf',restart_file='./psi.15065.monomerB.180'). psi4.IO.change_file_namespace(p4const.PSIF_SAPT_MONOMERA, 'monomerA', 'dimer'); psi4.IO.change_file_namespace(p4const.PSIF_SAPT_MONOMERB, 'monomerB', 'dimer'). activate(dimer); psi4.IO.set_default_namespace('dimer'); psi4.set_local_option('SAPT', 'E_CONVERGENCE', 10e-10); psi4.set_local_option('SAPT', 'D_CONVERGENCE', 10e-10); psi4.set_local_option('SAPT', 'SAPT_LEVEL', 'SAPT0'). psi4.sapt()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/51#issuecomment-180678000:1152,LOAD,LOAD,1152,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-180678000,1,['LOAD'],['LOAD']
Performance,"kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at Python/ceval.c:3930; #15 0x00007ffff7a02f1e in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f9e660, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8, args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=0, defs=0x0,; defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3959; #16 0x00007ffff7a02f4b in PyEval_EvalCode (co=co@entry=0x7ffff7f9e660, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8) at Python/ceval.c:524; #17 0x00007ffff7a369e2 in run_mod (arena=0x7ffff7fc42d0, flags=0x7fffffffcf50, locals=0x7ffff7ecd1f8, globals=0x7ffff7ecd1f8, filename=0x7fffeffc0870, mod=0x6440f0) at Python/pythonrun.c:1035; #18 PyRun_FileExFlags (fp=fp@entry=0x67eb60, filename_str=filename_str@entry=0x7ffff7f89110 ""simple.2.py"", start=start@entry=257, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8, closeit=closeit@entry=1,; flags=0x7fffffffcf50) at Python/pythonrun.c:988; #19 0x00007ffff7a36b55 in PyRun_SimpleFileExFlags (fp=fp@entry=0x67eb60, filename=<optimized out>, closeit=closeit@entry=1, flags=flags@entry=0x7fffffffcf50) at Python/pythonrun.c:429; #20 0x00007ffff7a36ff3 in PyRun_AnyFileExFlags (fp=fp@entry=0x67eb60, filename=<optimized out>, closeit=closeit@entry=1, flags=flags@entry=0x7fffffffcf50) at Python/pythonrun.c:84; #21 0x00007ffff7a58d27 in pymain_run_file (p_cf=0x7fffffffcf50, filename=0x603520 L""simple.2.py"", fp=0x67eb60) at Modules/main.c:427; #22 pymain_run_filename (cf=0x7fffffffcf50, pymain=0x7fffffffd030) at Modules/main.c:1627; #23 pymain_run_python (pymain=0x7fffffffd030) at Modules/main.c:2877; #24 pymain_main (pymain=pymain@entry=0x7fffffffd030) at Modules/main.c:3038; #25 0x00007ffff7a58fab in _Py_UnixMain (argc=<optimized out>, argv=<optimized out>) at Modules/main.c:3073; #26 0x00007ffff6978505 in __libc_start_main () from /lib64/libc.so.6; #27 0x00000000004008ce in _start (); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878:5646,optimiz,optimized,5646,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878,8,['optimiz'],['optimized']
Performance,"l (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283; > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086; > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); > at Python/ceval.c:3433; > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); > at Python/ceval.c:4378; > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720; > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433; > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > args=args@entry=0x0,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:5438,optimiz,optimized,5438,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,6,['optimiz'],['optimized']
Performance,lain HTML. The same; > thing happens if I navigate to the manual from the psicode.org homepage.; > ; > The console in chrome and safari are showing 404 errors for js and css:; > ; > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/doctools.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/underscore.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resource: the server responded with a status of 404 (Not Found); > index.html:368 Uncaught ReferenceError: $ is not defined; > http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/ps,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210017774:1859,load,load,1859,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774,1,['load'],['load']
Performance,"lations on the N and F atoms result in segmentation faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file:; > ; > molecule f { ; > f 0.00 0.00 0.00; > }; > set basis cc-pVTZ; > set scf reference uhf ; > energy('ccsd'); > (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault).; > ; > Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem.; > ; > Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc.; > ; > Full backtrace from gdb:; > ; > (gdb) where; > #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6; > #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134; > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630); > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50; > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>); > at /usr/include/boost/python/detail/invoke.hpp:75; > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223; > #9 boost::python::ob",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:1219,optimiz,optimized,1219,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,2,['optimiz'],['optimized']
Performance,"lobals=globals@entry=0x7fabd7bced00, locals=locals@entry=0x7fabd7bced00); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #24 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd7bced00, globals=0x7fabd7bced00, source=0x7fabd78907c0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #25 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #26 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd7888dd8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #27 0x000055ff90677205 in do_call_core (kwdict=0x7fabd7bce4c0, callargs=0x7fabd7888dc0, func=0x7fac0e398e00, trace_info=0x7fff112864b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #28 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8949cf0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #29 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8949cf0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #30 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #31 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #32 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; --Type <RET> for more, q to quit, c to continue without paging--; #33 PyObject_Vectorcall (kwnames=0x0, narg",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:10854,optimiz,optimized,10854,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"lobals=globals@entry=0x7fabd8887400, locals=locals@entry=0x7fabd8887400); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #70 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd8887400, globals=0x7fabd8887400, source=0x7fabd88826b0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #71 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #72 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd88851d8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #73 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8887300, callargs=0x7fabd88851c0, func=0x7fac0e398e00, trace_info=0x7fff11287280, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #74 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c49700, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #75 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c49700, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #76 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #77 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #78 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #79 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510) ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:19808,optimiz,optimized,19808,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"ls=globals@entry=0x7fabd8903bc0, locals=locals@entry=0x7fabd8903bc0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #190 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd8903bc0, globals=0x7fabd8903bc0, source=0x7fabd8a87940); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #191 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #192 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd8a8a4d8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #193 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8903b00, callargs=0x7fabd8a8a4c0, func=0x7fac0e398e00, trace_info=0x7fff11289680, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #194 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95d41d50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; --Type <RET> for more, q to quit, c to continue without paging--; #195 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95d41d50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #196 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #197 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #198 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c37558, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #199 PyObject_Vectorcall (kwnames=0x0,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:43041,optimiz,optimized,43041,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"ls=globals@entry=0x7fabdcd7a300, locals=locals@entry=0x7fabdcd7a300); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #264 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabdcd7a300, globals=0x7fabdcd7a300, source=0x7fabd8a86550); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #265 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #266 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e0e6fd8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #267 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8902480, callargs=0x7fac0e0e6fc0, func=0x7fac0e398e00, trace_info=0x7fff1128acb0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #268 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8fa8550, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #269 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8fa8550, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #270 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #271 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #272 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #273 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:57365,optimiz,optimized,57365,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"ls=globals@entry=0x7fac0e071580, locals=locals@entry=0x7fac0e071580); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #376 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e071580, globals=0x7fac0e071580, source=0x7fac0e06f7e0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #377 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #378 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e041e18, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #379 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e071540, callargs=0x7fac0e041e00, func=0x7fac0e398e00, trace_info=0x7fff1128cf00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #380 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16a3b0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #381 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16a3b0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #382 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #383 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #384 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510, tstate=0x55ff9515e050); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #385 PyObject_Vectorcall (kwnames=0x0,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:79154,optimiz,optimized,79154,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"ls=globals@entry=0x7fac0e0f83c0, locals=locals@entry=0x7fac0e0f83c0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #144 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e0f83c0, globals=0x7fac0e0f83c0, source=0x7fabd8882550); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #145 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #146 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e0d4c58, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #147 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8938500, callargs=0x7fac0e0d4c40, func=0x7fac0e398e00, trace_info=0x7fff112888b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #148 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95e324c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #149 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95e324c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #150 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #151 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #152 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #153 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:34107,optimiz,optimized,34107,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"lse; 401: Max angular momentum: 1; 401: ; 401: => Loading Basis Set <=; 401: ; 401: Name: (6-31G AUX); 401: Role: JKFIT; 401: Keyword: DF_BASIS_SCF; 401: atoms 1 entry O line 221 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/cc-pvdz-jkfit.gbs ; 401: atoms 2-3 entry H line 51 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/cc-pvdz-jkfit.gbs ; 401: ; 401: ==> Pre-Iterations <==; 401: ; 401: -------------------------------------------------------; 401: Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; 401: -------------------------------------------------------; 401: A1 7 7 0 0 0 0; 401: A2 0 0 0 0 0 0; 401: B1 2 2 0 0 0 0; 401: B2 4 4 0 0 0 0; 401: -------------------------------------------------------; 401: Total 13 13 5 5 5 0; 401: -------------------------------------------------------; 401: ; 401: ==> Integral Setup <==; 401: ; 401: ==> DiskDFJK: Density-Fitted J/K Matrices <==; 401: ; 401: J tasked: Yes; 401: K tasked: Yes; 401: wK tasked: No; 401: OpenMP threads: 1; 401: Integrals threads: 1; 401: Memory (MB): 375; 401: Algorithm: Core; 401: Integral Cache: NONE; 401: Schwarz Cutoff: 1E-12; 401: Fitting Condition: 1E-12; 401: ; 401: => Auxiliary Basis Set <=; 401: ; 401: Basis Set: (6-31G AUX); 401: Blend: CC-PVDZ-JKFIT; 401: Number of shells: 42; 401: Number of basis function: 131; 401: Number of Cartesian functions: 131; 401: Spherical Harmonics?: false; 401: Max angular momentum: 3; 401: ; 401: Minimum eigenvalue in the overlap matrix is 7.3923847722E-02.; 401: Using Symmetric Orthogonalization.; 401: ; 401: SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.; 401: ; 401: ==> Iterations <==; 401: ; 401: Total Energy Delta E RMS |[F,P]|; 401: ; 401: @DF-RHF iter 0: -75.81834558928526 -7.58183e+01 1.82810e-01 ; 401: @DF-RHF iter 1: -75.95433899771382 -1.35993e-01 2.85222e-02 ; 401: @DF-RHF iter 2: -75.97384127453083 -1.95023e-02 1.55795e-02 DIIS; 401: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174:4564,Cache,Cache,4564,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174,1,['Cache'],['Cache']
Performance,"m, a fluoromethane that looks pretty good to the eye; > ; > # zmat version, normz; > ; > molecule normz {; > C; > H 1 1.2; > H 1 1.2 2 104; > H 1 1.2 2 105 3 120; > F 1 1.3 2 106 4 121; > }; > ; > # reference start NRE, E, G; > ; > norm_nre_start = 37.6824945882 # Q-Chem; > norm_e_start = -139.5307182946 # Q-Chem; > norm_g_start = psi4.Matrix(5, 3) # Q-Chem; > contents = [ # have to swap x & y, and -x; > [ -0.07990533, -0.00642920, -0.00348020, 0.04874047, 0.04107426],; > [ -0.04900557, -0.00240633, 0.05677652, -0.03006882, 0.02470420],; > [ -0.06715450, 0.05113530, -0.00508959, -0.00643364, 0.02754243]]; > norm_g_start.set(zip(*contents)); > norm_rmsg_start = 0.041309 # Q-Chem; > ; > # Full Analytical Gradient of MP2 Energy (in au.); > ; > # 1 2 3 4 5; > ; > # 1 -0.04900557 -0.00240633 0.05677652 -0.03006882 0.02470420; > ; > # 2 0.07990533 0.00642920 0.00348020 -0.04874047 -0.04107426; > ; > # 3 -0.06715450 0.05113530 -0.00508959 -0.00643364 0.02754243; > ; > # reference optimized NRE, E (G should be 0); > ; > nre_opt = 37.5276022922 # Q-Chem; > e_opt = -139.5573922 # Q-Chem; > #norm_g_opt # Q-Chem; > ; > # Full Analytical Gradient of MP2 Energy (in au.); > ; > # 1 2 3 4 5; > ; > # 1 0.00000025 -0.00000001 -0.00000021 -0.00000007 0.00000005; > ; > # 2 0.00000010 0.00000008 0.00000000 0.00000001 -0.00000020; > ; > # 3 0.00000038 -0.00000005 -0.00000006 -0.00000023 -0.00000003; > ; > def test_norm_start(mol):; > g0 = gradient('mp2', molecule=mol); > compare_values(norm_nre_start, mol.nuclear_repulsion_energy(), 3, 'start nre'); > compare_values(norm_e_start, get_variable('CURRENT ENERGY'), 5, 'start ene'); > compare_values(norm_rmsg_start, g0.rms(), 4, 'start rms grad'); > compare_matrices(norm_g_start, g0, 3, 'start grad'); > ; > def test_zero_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); > compare_values(e_opt, get_variable('CURRE",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-195966638:2396,optimiz,optimized,2396,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638,1,['optimiz'],['optimized']
Performance,"master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of 404 (Not Found); index.html:368 Uncaught ReferenceError: $ is not defined; http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); Is anyone else seeing this problem? Possibly related?. —AJ. On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (notifications@github.com) wrote:. I'm not observing any of this behavior, so just to clarify: does anyone; actually get this ""redirection"" when you enter ""psicode.org"" on your URL; bar? Or do you just get this when you search for PSI4 on; Google/Yahoo/Bing? NB: When I put ""PSI4"" in those search engines, I get; only our correct site for the first page of hits (except for the Wikipedia; page on ""Psi4 Aurigae""). And yes, we have control of the domain via; godaddy.com. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Thu, Apr 14, 2016 at 11:33 AM, Ben Pritchard notifications@github.com; wrote:. > Also confirming here, also on yahoo/bing. Can someone make sure we still; > have control of the domain name? Whois is still showing it registered to; > David Sherrill, and it still shows it going to godaddy, but it won't hurt; > to make sure; > ; > —; > You are re",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210015028:2420,load,load,2420,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028,1,['load'],['load']
Performance,"mentation_2018/en/debugger//gdb-igfx/info/; CC=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-cc; XDG_RUNTIME_DIR=/run/user/1000; READELF=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-readelf; GCC_AR=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-gcc-ar; OBJDUMP=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-objdump; LESSCLOSE=/usr/bin/lesspipe %s %s; GPROF=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-gprof; FFLAGS=-fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe; GXX=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-g++; I_MPI_ROOT=/home/termo/intel/compilers_and_libraries_2018.2.199/linux/mpi; _=/usr/bin/printenv; ```. cat /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; ```; # psi4DepsIntelCache.cmake; # ------------------------; #; # This module sets some likely variable values to initialize the CMake; # cache for dependencies to build your Psi4 source.; # Note that this uses user-provided (non-conda) tools.; #; # See ``psi4-path-advisor`` (or cmake command below) for use.; #; # >>> /home/termo/miniconda3/envs/p4dev35/bin/cmake \; # -H. \; # -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake \; # -Bobjdir; #. set(CMAKE_C_COMPILER ""icc"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""icpc"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER ""ifort"" CACHE STRING """"). set(CMAKE_C_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_Fortran_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"). #set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448:10066,cache,cache,10066,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448,1,['cache'],['cache']
Performance,"metric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want to build another [Engine](https://github.com/leeping/geomeTRIC/blob/master/geometric/engine.py).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:2928,optimiz,optimizer,2928,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792,16,['optimiz'],"['optimize', 'optimizer']"
Performance,"mized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #321 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=3, args=0x7fff1128bb50, callable=0x7fac0e363490, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #322 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363490, vargs=0x7fff1128bbe0) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #323 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9a80 <PyId__handle_fromlist.13>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #324 0x000055ff905b230b in PyImport_ImportModuleLevelObject (name=name@entry=0x7fac0e308030, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fac0e1aede0, ; level=1) at /usr/local/src/conda/python-3.10.14/Python/import.c:1694; #325 0x000055ff9067536b in import_name (level=0x7fac0e3000f0, fromlist=0x7fac0e1aede0, name=0x7fac0e308030, f=0x7fac0e1fccc0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #326 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e1fccc0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #327 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e1fccc0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #328 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128bf60, locals=locals@entry=0x7fac0e072700, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #329 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fac0e1b7050, globals=globals@entry=0x7fac0e072700, locals=locals@entry=0x7fac0e072700); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #330 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, local",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:68428,optimiz,optimized,68428,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"mized out>, args=<optimized out>, locals=0x0, con=0x7fabd8177800, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #16 _PyFunction_Vectorcall (func=0x7fabd81777f0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #17 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd84ecf40, callable=0x7fabd81777f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #18 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd84ecf40, callable=0x7fabd81777f0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #19 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112861e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #20 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd84ecdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #21 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabd84ecdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #22 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112862e0, locals=locals@entry=0x7fabd7bced00, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #23 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd78907c0, globals=globals@entry=0x7fabd7bced00, locals=locals@entry=0x7fabd7bced00); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #24 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd7bced00, globals=0x7fabd7bced00, source=0x7fabd78907c0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #25 builtin_exec (module=<optimized out>, args=<optimized ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:9252,optimiz,optimized,9252,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"mized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #77 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #78 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #79 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #80 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287430, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #81 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6eae0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #82 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6eae0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #83 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #84 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #85 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #86 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630) ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:21138,optimiz,optimized,21138,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"mized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #45 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #46 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #47 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #48 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112869c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #49 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd88a0a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #50 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd88a0a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #51 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #52 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #53 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #54 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0) ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:14910,optimiz,optimized,14910,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"mized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #91 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #92 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #93 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #94 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287790, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #95 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918c40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #96 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918c40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #97 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #98 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #99 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #100 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:23864,optimiz,optimized,23864,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"mized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #52 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #53 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #54 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #55 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286b70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #56 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32d40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #57 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b32d40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #58 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #59 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #60 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11286ca0, callable=0x7fac0e363370, tstate=0x55ff9515e050); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #61 object_vacall (tstate=tstate@entry=0x55ff9515e050, b",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:16240,optimiz,optimized,16240,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"mized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #38 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #39 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #40 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #41 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286810, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #42 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8890fc0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #43 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8890fc0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #44 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #45 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #46 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #47 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0) ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:13580,optimiz,optimized,13580,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"my 2 cents on this:; The geometry you posted looks broken to me (too long 'bonds'). I'd guess the optimizer had some troubles displacing the geometry correctly.; Often it is enough to set `opt_coordinates both`, which mixes cartesian and redundant coordinates.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-953037136:98,optimiz,optimizer,98,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953037136,1,['optimiz'],['optimizer']
Performance,"n constraints_dict:; raise ValueError(""No scan!""); Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want to build another [Engine](htt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:2506,optimiz,optimizer,2506,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792,1,['optimiz'],['optimizer']
Performance,"n faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file: ; > > ; > > molecule f { ; > > f 0.00 0.00 0.00 ; > > } ; > > set basis cc-pVTZ ; > > set scf reference uhf ; > > energy('ccsd') ; > > (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault). ; > > ; > > Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem. ; > > ; > > Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc. ; > > ; > > Full backtrace from gdb: ; > > ; > > (gdb) where ; > > #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6 ; > > #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134 ; > > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630) ; > > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50 ; > > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0) ; > > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99 ; > > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307 ; > > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171 ; > > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429 ; > > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>) ; > > at /usr/include/boost/python/detail/invoke.hpp:75 ; > > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:1628,optimiz,optimized,1628,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,2,['optimiz'],['optimized']
Performance,"n-3.10.14/Objects/call.c:734; #108 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #109 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd887f0f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #110 PyImport_ImportModuleLevelObject (name=0x7fabd887f0f0, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #111 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #112 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #113 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fabd8a583d0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #114 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8a583d0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; --Type <RET> for more, q to quit, c to continue without paging--; #115 0x000055ff90677205 in do_call_core (kwdict=0x7fabd88870c0, callargs=0x7fabd8a583d0, func=0x7fac0e3989a0, trace_info=0x7fff11287e40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #116 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95de00f0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #117 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95de00f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #118 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:27226,optimiz,optimized,27226,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"n-3.10.14/Objects/call.c:734; #228 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #229 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd8928710, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #230 PyImport_ImportModuleLevelObject (name=0x7fabd8928710, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #231 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #232 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #233 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fabd8e6c550, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #234 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8e6c550, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #235 0x000055ff90677205 in do_call_core (kwdict=0x7fabd89038c0, callargs=0x7fabd8e6c550, func=0x7fac0e3989a0, trace_info=0x7fff1128a240, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #236 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b81240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #237 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b81240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #238 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:50550,optimiz,optimized,50550,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"n/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option PSI4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.3"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so (found suitable version ""2.7.3"", minimum required is ""2"") ; -- Suitable pybind11 could not be located, building one instead.; -- Suitable libint could not be located, building one instead.; -- Suitable libefp could not be located, building one instead.; -- Try OpenMP C flag = [-qope",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261733153:1175,Perform,Performing,1175,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153,2,['Perform'],['Performing']
Performance,"n::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132 ; > > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0 ; > > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084 ; > > #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283 ; > > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086 ; > > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0) ; > > at Python/ceval.c:3433 ; > > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633 ; > > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084 ; > > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0) ; > > at Python/ceval.c:4378 ; > > #27 PyEval_EvalFrameEx (f=",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:5099,optimiz,optimized,5099,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,2,['optimiz'],['optimized']
Performance,"na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283 ; > > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086 ; > > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0) ; > > at Python/ceval.c:3433 ; > > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633 ; > > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084 ; > > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0) ; > > at Python/ceval.c:4378 ; > > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720 ; > > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433 ; > > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161 ; > > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084 ; > > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:5942,optimiz,optimized,5942,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,6,['optimiz'],['optimized']
Performance,"nalysis to disk in a "".vibrec"" file; ​; # molecule h2odim {; # O -1.551007 -0.114520 0.000000; # H -1.934259 0.762503 0.000000; # H -0.599677 0.040712 0.000000; # --; # 0 1; # O 1.350625 0.111469 0.000000; # H 1.680398 -0.373741 -0.758561; # H 1.680398 -0.373741 0.758561; # units angstrom; # }; ​; # set basis sto-3g; # set e_convergence 9; # set g_convergence gau_verytight; ​; # optimize('mp2', molecule=h2odim); ​; ​; # e, wfn = freq('mp2', molecule=h2odim, return_wfn=True); ​; # set hessian_write on; # vibanal_wfn(wfn, molecule=h2odim); ​; # # A. print all the vib-related info from original `e, wfn = freq()` call; # for k, v in wfn.frequency_analysis.items():; # print(v); ​; # # B. `set hessian_write on` above wrote all the vib- & thermo-related info from last analysis.; # # now, print all the vib- & thermo-related info from that file; # with open(core.get_writer_file_prefix(h2odim.name()) + "".vibrec"") as handle:; # import json; # jsondata = json.load(handle); # jsondata = {k: (v if k in ['molecule', 'hessian'] else json.loads(v)) for k, v in jsondata.items()}; ​; # for k, v in jsondata.items():; # print(k, v); ​; ​; # In[ ]:; ​; ​; import json; with open(""freq_demo.h2odim.6436.vibrec"") as fp:; vibs = json.load(fp); ​; ​; # In[ ]:; ​; ​; # See all the vibrational analysis contents; vibs; ​; ​; # In[ ]:; ​; ​; vibs; vibs[""molecule""][""elez""]; nat = len(vibs[""molecule""][""elez""]); ndof = nat * 3; vibs[""molecule""][""geom""]; ​; ​; # In[ ]:; ​; ​; # load Cartesian normal modes matrix into numpy and reshape it; import numpy as np; import qcelemental as qcel; from qcelemental import Datum; datum_x = json.loads(vibs[""x""])[""data""]; len(datum_x); datum_x = np.array(datum_x).reshape((ndof, ndof)).T.round(2); datum_x; ​; ​; # In[ ]:; ​; ​; # form ugly XYZ file strings for each mode where; # * first col is atomic symbol,; # * cols 2-4 are geometry in Ang,; # * and 5-7 are displacement; # * note that XYZ file strings are in list `xyzs` that is 1-indexed; geom = np.array(vibs[""molec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131:1658,load,load,1658,https://psicode.org,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131,1,['load'],['load']
Performance,"nda/python-3.10.14/Objects/call.c:824; #109 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd887f0f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #110 PyImport_ImportModuleLevelObject (name=0x7fabd887f0f0, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #111 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #112 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #113 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fabd8a583d0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #114 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8a583d0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; --Type <RET> for more, q to quit, c to continue without paging--; #115 0x000055ff90677205 in do_call_core (kwdict=0x7fabd88870c0, callargs=0x7fabd8a583d0, func=0x7fac0e3989a0, trace_info=0x7fff11287e40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #116 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95de00f0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #117 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95de00f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #118 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #119 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nar",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:27445,optimiz,optimized,27445,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"nda/python-3.10.14/Objects/call.c:824; #229 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd8928710, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #230 PyImport_ImportModuleLevelObject (name=0x7fabd8928710, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #231 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #232 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #233 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fabd8e6c550, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #234 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8e6c550, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #235 0x000055ff90677205 in do_call_core (kwdict=0x7fabd89038c0, callargs=0x7fabd8e6c550, func=0x7fac0e3989a0, trace_info=0x7fff1128a240, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #236 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b81240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #237 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b81240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #238 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #239 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:50769,optimiz,optimized,50769,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ne; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so ; -- Using pybind11: /usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/include (version 2.0.0 for Py2.7.12 and -std=c++11) ; -- Using Python 2.7: /usr/bin/python ; -- Looking for include file pthread.h ; -- Looking for include file pthread.h - found ; -- Looking for pthread_create ; -- Looking for pthread_create - found ; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; -- Disabled CheMPS2 ; -- Disabled dkh ; -- Using libefp: /usr/qc/psi4.bin/lib/libefp.a (version 1.3.0) ; -- Disabled erd ; -- Disabled gdma ; -- Using libint: /usr/qc/psi4.bin/lib/libint.a (version 1.1.6) ; -- Configuring done ; -- Generating done ; ``` . And just for completeness the pybind11 part:. ```; [ 12%] Performing download step (git clone) for 'pybind11_external'; Cloning into 'pybind11_external'...; Note: checking out 'v2.0.0'. You are in 'detached HEAD' state. You can look around, make experimental; changes and commit them, and you can discard any commits you make in this; state without impacting any branches by performing another checkout. If you want to create a new branch to retain commits you create, you may; do so (now or later) by using -b with the checkout command again. Example:. git checkout -b <new-branch-name>. HEAD is now at e33ef9c... v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273732640:2350,Perform,Performing,2350,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640,1,['Perform'],['Performing']
Performance,"ng C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Checking whether CXX compiler has -isysroot; -- Checking whether CXX compiler has -isysroot - yes; -- Checking whether CXX compiler supports OSX deployment target flag; -- Checking whether CXX compiler supports OSX deployment target flag - yes; -- Check for working CXX compiler: /usr/local/bin/g++-8; -- Check for working CXX compiler: /usr/local/bin/g++-8 -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option ENABLE_MSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:4094,Perform,Performing,4094,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308,1,['Perform'],['Performing']
Performance,"ng(psi::Options&) () from /u/en/taube/c7dpr/prefixes/psi4/1.3.2-desres03-c7/lib/psi4/core.cpython-37m-x86_64-linux-gnu.so; #3 0x00007fffdf472f9f in py_psi_optking() () from /u/en/taube/c7dpr/prefixes/psi4/1.3.2-desres03-c7/lib/psi4/core.cpython-37m-x86_64-linux-gnu.so; #4 0x00007fffdf48fe51 in void pybind11::cpp_function::initialize<int (*&)(), int, , pybind11::name, pybind11::scope, pybind11::sibling, char [58]>(int (*&)(), int (*)(), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, char const (&) [58])::{lambda(pybind11::detail::function_call&)#1}::_FUN(pybind11::detail::function_call&) () from /u/en/taube/c7dpr/prefixes/psi4/1.3.2-desres03-c7/lib/psi4/core.cpython-37m-x86_64-linux-gnu.so; #5 0x00007fffdeff6104 in pybind11::cpp_function::dispatcher(_object*, _object*, _object*) () from /u/en/taube/c7dpr/prefixes/psi4/1.3.2-desres03-c7/lib/psi4/core.cpython-37m-x86_64-linux-gnu.so; #6 0x00007ffff7919e63 in _PyMethodDef_RawFastCallKeywords (method=0x99e900, self=<optimized out>, args=0x110b5f8, nargs=0, kwnames=<optimized out>) at Objects/call.c:690; #7 0x00007ffff7919ee5 in _PyCFunction_FastCallKeywords (func=0x7fffeffd03a8, args=<optimized out>, nargs=<optimized out>, kwnames=<optimized out>) at Objects/call.c:730; #8 0x00007ffff78f2178 in call_function (kwnames=0x0, oparg=0, pp_stack=<synthetic pointer>) at Python/ceval.c:4568; #9 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3093; #10 0x00007ffff7a02dec in _PyEval_EvalCodeWithName (_co=0x7fffc6816db0, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, argcount=1, kwnames=0x7fffeffadb58, kwargs=0x7ffff7f76b70, kwcount=3, kwstep=1, defs=0x0,; defcount=0, kwdefs=0x0, closure=0x0, name=0x7ffff7fc1830, qualname=0x7ffff7fc1830) at Python/ceval.c:3930; #11 0x00007ffff7919966 in _PyFunction_FastCallKeywords (func=<optimized out>, stack=<optimized out>, nargs=<optimized out>, kwnames=<optimized out>) at Objects/call.c:433; #12 0x0000",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878:3034,optimiz,optimized,3034,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878,4,['optimiz'],['optimized']
Performance,"no numbers, i just restarted the webserver some time ago and there was something about psi4 in the forwarded email. It brakes occasionally and I am still responsible for it. I will probably test the methods once it goes to the master. the choice of the scf algorithm was purely for practical reasons of getting the best performance in ORCA and/or Turbomole, i believe. RI-J combined with exact exchange is pretty good for these methods and their target molecule size.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/630#issuecomment-283086573:320,perform,performance,320,https://psicode.org,https://github.com/psi4/psi4/pull/630#issuecomment-283086573,1,['perform'],['performance']
Performance,"normal template, with default dummy parameters and many template specializations. This solution is very verbose (often orders of magnitude more lines of code than the variadic version) and is limited to about 10-20 parameters (depending on the compiler). In fact the lack of variadic templates is why the boost tuple is limited to 10 parameters. Although 10 is often more than enough, there are reasons to need more, particularly for loop unrolling and extensive logic trees. For example I was able to replace 118 lines of logic (assigning atomic names/masses/ etc.) with about 4 thanks to variadic templates. I think the latter is far easier to read and maintain. I know I get a lot of hate about my love of variadic templates so perhaps this analogy will help: anytime you have used a Python tuple, the only true equivalent is a variadic template. Rvalue references are probably the only other feature I'd label as an essential C++11 feature. Not supporting them can lead to needing extensive code redesign or major performance hits when objects interact. With foresight, rvalue references can be simulated by unique pointers (available in Boost), but the reality is it is often hard to have such foresight. As for the other main C++11 features, standard library implementations of shared/unique pointers, the new chrono and random number generator libraries are all in Boost, a dependency I foresee us having forever. Lamdas are syntactic sugar for static functions. Strong enums are just little wrapper classes around a primitive type . Initializer lists are perhaps borderline essential, but ultimately I think are not needed when you realize that they have always existed for primitive data types, and a constructor is meant to provide essentially the same support for user created objects. The auto keyword is an abomination and should never be used [there is a big difference between you knowing what type something is and the compiler knowing what type something is; the compiler has caught m",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/85#issuecomment-97772824:2207,perform,performance,2207,https://psicode.org,https://github.com/psi4/psi4/issues/85#issuecomment-97772824,2,['perform'],['performance']
Performance,"nstraints"": {; ""set"": [; {""type"": ""distance"", ""indices"": [0, 1], ""value"": 1},; ]; },; # ""program"": ""psi4"",; ""program"": ""mopac"",; },; ""input_specification"": {; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6-d3""},; # ""model"": {""method"": ""b3lyp-d3"", ""basis"": ""sto-3g""},; },; ""initial_molecule"": mol_uc2.dict(),; }. # Set a temporary logger to capture output; log_stream = geometric.nifty.RawStreamHandler(stream=sys.stdout); #log_stream = geometric.nifty.RawStreamHandler(stream=StringIO()); logger = geometric.nifty.logger; logger.addHandler(log_stream). # Parse JSON; input_opts = geometric.run_json.parse_input_json_dict(input_data); M, engine = geometric.optimize.get_molecule_engine(**input_opts). # Handle constraints; constraints_dict = input_opts.get('constraints', {}); constraints_string = geometric.run_json.make_constraints_string(constraints_dict); Cons, CVals = None, None; if constraints_string:; if 'scan' in constraints_dict:; raise ValueError(""No scan!""); Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:1579,optimiz,optimize,1579,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792,1,['optimiz'],['optimize']
Performance,"nt (*&)(), int (*)(), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, char const (&) [58])::{lambda(pybind11::detail::function_call&)#1}::_FUN(pybind11::detail::function_call&) () from /u/en/taube/c7dpr/prefixes/psi4/1.3.2-desres03-c7/lib/psi4/core.cpython-37m-x86_64-linux-gnu.so; #5 0x00007fffdeff6104 in pybind11::cpp_function::dispatcher(_object*, _object*, _object*) () from /u/en/taube/c7dpr/prefixes/psi4/1.3.2-desres03-c7/lib/psi4/core.cpython-37m-x86_64-linux-gnu.so; #6 0x00007ffff7919e63 in _PyMethodDef_RawFastCallKeywords (method=0x99e900, self=<optimized out>, args=0x110b5f8, nargs=0, kwnames=<optimized out>) at Objects/call.c:690; #7 0x00007ffff7919ee5 in _PyCFunction_FastCallKeywords (func=0x7fffeffd03a8, args=<optimized out>, nargs=<optimized out>, kwnames=<optimized out>) at Objects/call.c:730; #8 0x00007ffff78f2178 in call_function (kwnames=0x0, oparg=0, pp_stack=<synthetic pointer>) at Python/ceval.c:4568; #9 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3093; #10 0x00007ffff7a02dec in _PyEval_EvalCodeWithName (_co=0x7fffc6816db0, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, argcount=1, kwnames=0x7fffeffadb58, kwargs=0x7ffff7f76b70, kwcount=3, kwstep=1, defs=0x0,; defcount=0, kwdefs=0x0, closure=0x0, name=0x7ffff7fc1830, qualname=0x7ffff7fc1830) at Python/ceval.c:3930; #11 0x00007ffff7919966 in _PyFunction_FastCallKeywords (func=<optimized out>, stack=<optimized out>, nargs=<optimized out>, kwnames=<optimized out>) at Objects/call.c:433; #12 0x00007ffff78f2e32 in call_function (kwnames=0x7fffeffadb40, oparg=<optimized out>, pp_stack=<synthetic pointer>) at Python/ceval.c:4616; #13 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3139; #14 0x00007ffff7a02dec in _PyEval_EvalCodeWithName (_co=_co@entry=0x7ffff7f9e660, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8, args=args@entry=0x0, argcount=a",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878:3441,optimiz,optimized,3441,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878,4,['optimiz'],['optimized']
Performance,"ntry=0x55ff96063ea0, nargs=2, keywords=keywords@entry=0x0); at /usr/local/src/conda/python-3.10.14/Objects/call.c:215; #9 0x000055ff906769d6 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=<optimized out>, callable=0x7fac0e0cdb20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:112; #10 _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:99; #11 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #12 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286030, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #13 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff96063c70, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #14 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff96063c70, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #15 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fabd8177800, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #16 _PyFunction_Vectorcall (func=0x7fabd81777f0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #17 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd84ecf40, callable=0x7fabd81777f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #18 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd84ecf40, callable=0x7fabd81777f0) ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:7922,optimiz,optimized,7922,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"ode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of 404 (Not Found); index.html:368 Uncaught ReferenceError: $ is not defined; http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); Is anyone else seeing this problem? Possibly related?. —AJ. On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (notifications@github.com) wrote:. I'm not observing any of this behavior, so just to clarify: does anyone; actually get this ""redirection"" when you enter ""psicode.org"" on your URL; bar? Or do you just get this when you search for PSI4 on; Google/Yahoo/Bing? NB: When I put ""PSI4"" in those search engines, I get; only our correct site for the first page of hits (except for the Wikipedia; page on ""Psi4 Aurigae""). And yes, we have control of the domain via; godaddy.com. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Thu, Apr 14, 2016 at 11:33 AM, Ben Pritchard notifications@github.com; wrote:. > Also confirming here, also on yahoo/bing. Can someone make sure we still; > have control of the domain name? Wh",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210015028:2286,load,load,2286,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028,1,['load'],['load']
Performance,"odim {; # O -1.551007 -0.114520 0.000000; # H -1.934259 0.762503 0.000000; # H -0.599677 0.040712 0.000000; # --; # 0 1; # O 1.350625 0.111469 0.000000; # H 1.680398 -0.373741 -0.758561; # H 1.680398 -0.373741 0.758561; # units angstrom; # }; ​; # set basis sto-3g; # set e_convergence 9; # set g_convergence gau_verytight; ​; # optimize('mp2', molecule=h2odim); ​; ​; # e, wfn = freq('mp2', molecule=h2odim, return_wfn=True); ​; # set hessian_write on; # vibanal_wfn(wfn, molecule=h2odim); ​; # # A. print all the vib-related info from original `e, wfn = freq()` call; # for k, v in wfn.frequency_analysis.items():; # print(v); ​; # # B. `set hessian_write on` above wrote all the vib- & thermo-related info from last analysis.; # # now, print all the vib- & thermo-related info from that file; # with open(core.get_writer_file_prefix(h2odim.name()) + "".vibrec"") as handle:; # import json; # jsondata = json.load(handle); # jsondata = {k: (v if k in ['molecule', 'hessian'] else json.loads(v)) for k, v in jsondata.items()}; ​; # for k, v in jsondata.items():; # print(k, v); ​; ​; # In[ ]:; ​; ​; import json; with open(""freq_demo.h2odim.6436.vibrec"") as fp:; vibs = json.load(fp); ​; ​; # In[ ]:; ​; ​; # See all the vibrational analysis contents; vibs; ​; ​; # In[ ]:; ​; ​; vibs; vibs[""molecule""][""elez""]; nat = len(vibs[""molecule""][""elez""]); ndof = nat * 3; vibs[""molecule""][""geom""]; ​; ​; # In[ ]:; ​; ​; # load Cartesian normal modes matrix into numpy and reshape it; import numpy as np; import qcelemental as qcel; from qcelemental import Datum; datum_x = json.loads(vibs[""x""])[""data""]; len(datum_x); datum_x = np.array(datum_x).reshape((ndof, ndof)).T.round(2); datum_x; ​; ​; # In[ ]:; ​; ​; # form ugly XYZ file strings for each mode where; # * first col is atomic symbol,; # * cols 2-4 are geometry in Ang,; # * and 5-7 are displacement; # * note that XYZ file strings are in list `xyzs` that is 1-indexed; geom = np.array(vibs[""molecule""][""geom""]).reshape((-1, 3)); print(geom); geom_ang",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131:1734,load,loads,1734,https://psicode.org,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131,1,['load'],['loads']
Performance,"odule=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #26 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd7888dd8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #27 0x000055ff90677205 in do_call_core (kwdict=0x7fabd7bce4c0, callargs=0x7fabd7888dc0, func=0x7fac0e398e00, trace_info=0x7fff112864b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #28 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8949cf0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #29 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8949cf0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #30 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #31 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #32 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; --Type <RET> for more, q to quit, c to continue without paging--; #33 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #34 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286660, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #35 _PyEval_EvalFrameDefa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:11178,optimiz,optimized,11178,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"odule=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #72 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fabd88851d8, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #73 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8887300, callargs=0x7fabd88851c0, func=0x7fac0e398e00, trace_info=0x7fff11287280, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #74 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c49700, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #75 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c49700, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #76 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #77 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #78 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #79 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #80 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287430, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #81 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6eae0, throwflag=<optimize",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:20132,optimiz,optimized,20132,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"oduleLevelObject (name=0x7fabd887f0f0, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #111 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #112 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #113 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fabd8a583d0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #114 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8a583d0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; --Type <RET> for more, q to quit, c to continue without paging--; #115 0x000055ff90677205 in do_call_core (kwdict=0x7fabd88870c0, callargs=0x7fabd8a583d0, func=0x7fac0e3989a0, trace_info=0x7fff11287e40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #116 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95de00f0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #117 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95de00f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #118 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #119 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #120 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:27731,optimiz,optimized,27731,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ok, @bwb314, concurrence on killing off the `libxc/` subfolder.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/880#issuecomment-369789472:13,concurren,concurrence,13,https://psicode.org,https://github.com/psi4/psi4/pull/880#issuecomment-369789472,1,['concurren'],['concurrence']
Performance,"ok, do you know of any code capable of performing eom-cc2, eom-ccsd with DF for excited states + frozen core and orbital virtual approximation for both closed and open shell molecules ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/462#issuecomment-240190955:39,perform,performing,39,https://psicode.org,https://github.com/psi4/psi4/issues/462#issuecomment-240190955,1,['perform'],['performing']
Performance,ole in chrome and safari are showing 404 errors for js and css:. http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/doctools.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/underscore.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of 404 (Not Found); index.html:368 Uncaught ReferenceError: $ is not defined; http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); Is anyone else seeing this problem? Possibly related?. —AJ. On Ap,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210015028:1519,load,load,1519,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028,1,['load'],['load']
Performance,"ompiler ABI info - done; -- Checking whether /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Enabling Fortran; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Success, Appending; -- Performing Test CMAKE_Fortran_FLAGS [-xHost] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option ENABLE_MSAN: OFF; -- Setting option MAX_AM_ERI: 6; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /home/termo/miniconda3/envs/p4dev35/bin/python (found suitable version ""3.5.5"", minimum required is ""2.7"") ; -- Found PythonLibs: /home/termo/miniconda3/envs/p4dev35/lib/libpython3.5m.so; -- Found Python 3.5: /home/termo/miniconda3/envs/p4dev35/bin/python (found version 3.5.5); -- Foun",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883:2528,Perform,Performing,2528,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883,6,['Perform'],['Performing']
Performance,"on Energy = 0.0000000000000000; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -128.7930501140547506. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: [D]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. *** tstop() called on scychon-OptiPlex-7010 at Wed Jun 13 11:12:27 2018; Module time:; user time = 0.92 seconds = 0.02 minutes; system time = 0.03 seconds = 0.00 minutes; total time = 1 seconds = 0.02 minutes; Total time:; user time = 0.92 seconds = 0.02 minutes; system time = 0.03 seconds = 0.00 minutes; total time = 1 seconds = 0.02 minutes; Ne: PBE...........................................................PASSED. *** tstart() called on scychon-OptiPlex-7010; *** at Wed Jun 13 11:12:27 2018. => Loading Basis Set <=. Name: CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry NE line 258 file /root/psi4/build/stage/share/psi4/share/psi4/basis/cc-pvdz.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RKS Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; NE 0.000000000000 0.000000000000 0.000000000000 19.992440175420. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DIRECT.; DI",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:8500,Load,Loading,8500,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['Load'],['Loading']
Performance,"on Energy = 0.0000000000000000; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -128.8948561506526289. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: [D]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. *** tstop() called on scychon-OptiPlex-7010 at Wed Jun 13 11:12:28 2018; Module time:; user time = 0.92 seconds = 0.02 minutes; system time = 0.02 seconds = 0.00 minutes; total time = 1 seconds = 0.02 minutes; Total time:; user time = 1.84 seconds = 0.03 minutes; system time = 0.05 seconds = 0.00 minutes; total time = 2 seconds = 0.03 minutes; Ne: BLYP..........................................................PASSED. *** tstart() called on scychon-OptiPlex-7010; *** at Wed Jun 13 11:12:28 2018. => Loading Basis Set <=. Name: CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry NE line 258 file /root/psi4/build/stage/share/psi4/share/psi4/basis/cc-pvdz.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RKS Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; NE 0.000000000000 0.000000000000 0.000000000000 19.992440175420. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DIRECT.; DI",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:13534,Load,Loading,13534,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['Load'],['Loading']
Performance,"on:; 1. I wrote an extensive list of changes at the top of this PR. Read them– they affect you.; 2. To build Psi4 you now will need to do something along the lines of (in the top-level of the cloned source code):; ; ``` .sh; cmake -H. -Bbuild ; cd build && make; make install; ```; - In the configure step (the first line) there are a large number of CMake variables you can set to fine tune the build. See the top-level `CMakeLists.txt` for the more common ones. For example to change the C++ compiler add: `-DCMAKE_CXX_COMPILER=/path/to/compiler` after `-Bbuild`; - Anything not part of Psi4 proper is now in external and is expected to have its own build files. Paths where CMake should look for dependencies should now be passed to these external projects via `CMAKE_PREFIX_PATH`. ; - Installing is now a thing for Psi4. In theory you can run Psi4 from the build directory, but you'll quickly find it annoying (I'll leave it to you to learn why). Tests should still work from the build directory and can be performed from there before installing. They should be performed using `ctest` as normal. ; 3. Within the next week anyone who compiles Psi4 regularly (as opposed to just using the Conda package) should clone this branch and try it out. Please do it sooner rather than later because of the following points.; 4. Once this PR is merged, git operations on forks and clones of the current master repo will likely cease to work without a ton of effort. This is because of the size and amount of changes in this PR. Instead of fighting to rebase on top of it, there are two options:; 1. If you have some small changes you want to make in the near future [fork my fork](https://github.com/ryanmrichard/psi4), add your changes, submit a PR to me; 2. Wait until after my PR is merged into Psi4's master repo, make a fresh fork, and manually copy/paste any files you are working on into that fresh fork; 5. Since the history is getting messed up anyways, there are plans to rip Boost out after merg",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236723542:1405,perform,performed,1405,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236723542,2,['perform'],['performed']
Performance,"ons@github.com wrote:. > Hello,; > One of our users hit a problem last year on our supercomputer with his; > SAPT (energy('sapt2+3-ct')) jobs. Our sysadmins flagged low cpu utilisation; > for his jobs for which we decided that 4 cpus would give him optimum; > efficiency. However, the jobs were large enough as to take > 1000 hours; > (also frowned upon by our sysadmins) so I was asked to look into whether he; > could make better parallel use of the processors. We had some teething; > problems bringing our new supercomputer on line last year so I wanted to; > rule out issues on our side and I think I have now ruled out issues with; > IO, memory and threading (that had affected other programs).; > Furthermore, during the investigations we noticed that ""top"" showed an; > almost equal alternation between one cpu and maximum cpus thus averaging; > above/below 50% use no matter how many cpus were requested. Roger Amos and; > I had a quick look at the SAPT papers and decided there wasn't anything; > intrinsic about the method that wouldn't allow it to parallel or would; > cause this behaviour (note I initially thought it might be a load imbalance; > between monomer basis and dimer basis calculations but it isn't). Also,; > subsequently we were asked to look into the performance of; > energy('fno-df-ccsd(t)') and that doesn't show this serial/parallel; > alternation.; > Do you have any thoughts on this and have suggestions for determining; > optimum number of processors (does it depend on memory?) for this sort of; > calculation?; > Thanks.; > Rika; > PS Do you need an input deck for this? Originally, the smallest case he; > had showing this behaviour took 230 hrs (seemed to be ok for his 60 hr SAPT; > job) but since then I think I have a 48 hr test case that will also display; > this behaviour. I'll need to ask the user for permission to pass it on; > first though.; > ; > —; > Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/57; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/57#issuecomment-41629946:1990,load,load,1990,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-41629946,2,"['load', 'perform']","['load', 'performance']"
Performance,"ontinue without paging--; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #143 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8882550, globals=globals@entry=0x7fac0e0f83c0, locals=locals@entry=0x7fac0e0f83c0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #144 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e0f83c0, globals=0x7fac0e0f83c0, source=0x7fabd8882550); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #145 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #146 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e0d4c58, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #147 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8938500, callargs=0x7fac0e0d4c40, func=0x7fac0e398e00, trace_info=0x7fff112888b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #148 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95e324c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #149 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95e324c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #150 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #151 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #152 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510, tstate=0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:33991,optimiz,optimized,33991,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ooked at this ~D3h Mn(NO)(CO)4 complex. It is pathologically interesting.; 1. There are no reasonable torsions defined among the bonded atoms in this molecule, as each of the 5 spokes out from the metal involve 2 ~collinear atoms.; 2. The reason that optking was trying to use torsions is that the input geometry is so crowded that the covalent radii * 1.3 formula was bonding the Mn to the atom once removed (beta?). That is, in the linear Mn-N-O, both Mn-N and Mn-O bonds were being created. So I tried covalent_connect=1.2, which results in only linear bends being defined and no torsions. This raises the question of whether we should use something beyond a linear scaling, or count on the user to provide a reasonable structure. (The clean tool in Spartan lengthened the Mn-N bond by 25%.). For the moment, I am not changing. ; 3. Using these coordinates (all stretches and bends), the first step blew up to 100 Angstroms Cartesian step. This was not due to forces, which were large but not that ridiculous.; 4. The numerical test of the B matrix passed. (a non-trivial accomplishment for this thing); 5. I figured out that the pseudoinverse of (B B^T) was blowing up, due to inversion of very small values. It is customary to invert only those eigenvalues whose magnitude is >1e-10 or so. A numerical problem was introduced when my custom linear algebra function was replaced by numpy.linalg.pinv which uses a default of 1e-14. I'm actually surprised if this threshold isn't causing problems more commonly. Anyway, I increased this to 1e-12 and added a keyword to increase it further. More testing is needed to see if we can make the default larger. This particular case needs 1e-8 and then the optimization iterates successfully downhill. The geometry is very far from equilibrium and may be changing electronic states, so I'm not pursuing its STO-3G to a minimum whatever that might be.; So I am going to commit some related things but I'm not going to attend to this particular case further.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2213#issuecomment-1583231316:1710,optimiz,optimization,1710,https://psicode.org,https://github.com/psi4/psi4/issues/2213#issuecomment-1583231316,1,['optimiz'],['optimization']
Performance,"operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38; > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0; > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); > from /usr/lib/libboost_python3.so.1.54.0; > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); > at /usr/include/boost/python/detail/translate_exception.hpp:48; > #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&> > (f=..., a=<synthetic pointer>, this=<optimized out>) at /usr/include/boost/bind/bind.hpp:382; > #15 operator()<boost::python::detail::exception_handler, boost::function0<void> > (a2=..., a1=..., this=<optimized out>); > at /usr/include/boost/bind/bind_template.hpp:102; > #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132; > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0; > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:3378,optimiz,optimized,3378,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,2,['optimiz'],['optimized']
Performance,"optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161 ; > > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084 ; > > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433 ; > > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0) ; > > at Python/ceval.c:771 ; > > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; > > locals=locals@entry=0x7ffff7ed07a0, flags=flags@entry=0x0, arena=arena@entry=0x28ca640) at Python/pythonrun.c:1981 ; > > #35 0x00007ffff5168335 in PyRun_StringFlags (str=<optimized out>, start=257, globals=0x7ffff7ed07a0, locals=0x7ffff7ed07a0, flags=0x0) ; > > at Python/pythonrun.c:1914 ; > > #36 0x00007ffff66a3f45 in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) () ; > > from /usr/lib/libboost_python3.so.1.54.0 ; > > #37 0x00000000006fcad7 in psi::Python::run (this=<optimized out>, input=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/python.cc:1446 ; > > #38 0x000000000069a8ae in main (argc=2, argv=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/psi4.cc:111 ; > > Any suggestions on what I could do to track this down further? I looked in ccenergy/pair_energies.cc and there was nothing immediately obvious. ; > > ; > > Thanks! ; > > ; > >  ; > > Reply to this email directly or view it on",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:7429,optimiz,optimized,7429,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,2,['optimiz'],['optimized']
Performance,"optimized out>, nargs=<optimized out>, kwnames=<optimized out>) at Objects/call.c:730; #8 0x00007ffff78f2178 in call_function (kwnames=0x0, oparg=0, pp_stack=<synthetic pointer>) at Python/ceval.c:4568; #9 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3093; #10 0x00007ffff7a02dec in _PyEval_EvalCodeWithName (_co=0x7fffc6816db0, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, argcount=1, kwnames=0x7fffeffadb58, kwargs=0x7ffff7f76b70, kwcount=3, kwstep=1, defs=0x0,; defcount=0, kwdefs=0x0, closure=0x0, name=0x7ffff7fc1830, qualname=0x7ffff7fc1830) at Python/ceval.c:3930; #11 0x00007ffff7919966 in _PyFunction_FastCallKeywords (func=<optimized out>, stack=<optimized out>, nargs=<optimized out>, kwnames=<optimized out>) at Objects/call.c:433; #12 0x00007ffff78f2e32 in call_function (kwnames=0x7fffeffadb40, oparg=<optimized out>, pp_stack=<synthetic pointer>) at Python/ceval.c:4616; #13 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3139; #14 0x00007ffff7a02dec in _PyEval_EvalCodeWithName (_co=_co@entry=0x7ffff7f9e660, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8, args=args@entry=0x0, argcount=argcount@entry=0, kwnames=kwnames@entry=0x0,; kwargs=0x0, kwcount=0, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at Python/ceval.c:3930; #15 0x00007ffff7a02f1e in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f9e660, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8, args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=0, defs=0x0,; defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3959; #16 0x00007ffff7a02f4b in PyEval_EvalCode (co=co@entry=0x7ffff7f9e660, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8) at Python/ceval.c:524; #17 0x00007ffff7a369e2 in run_mod (arena=0x7ffff7fc42d0, flags=0x7fffffffcf50, locals=0x7ffff7ecd1f8, globals=0x7ff",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878:4197,optimiz,optimized,4197,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878,4,['optimiz'],['optimized']
Performance,"optking was aborting prematurely. I just pushed the fix to the problem. For this case I found consecutive_backsteps = 2 [or more], as well as dynamic_level = 1 to now be helpful. (Don't use both at once as that is somewhat redundant.) Sometime I will type up some tips on problematic optimizations. But now optking will at least move you substantially closer to the minimum. Though one may always have to restart an optimization, these options will minimize the manual effort necessary.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153#issuecomment-127808983:284,optimiz,optimizations,284,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-127808983,2,['optimiz'],"['optimization', 'optimizations']"
Performance,"org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of 404 (Not Found); index.html:368 Uncaught ReferenceError: $ is not defined; http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); Is anyone else seeing this problem? Possibly related?. —AJ. On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (notifications@github.com) wrote:. I'm not observing any of this behavior, so just to clarify: does anyone; actually get this ""redirection"" when you enter ""psicode.org"" on your URL; bar? Or do you just get this when you search for PSI4 on; Google/Yahoo/Bing? NB: When I put ""PSI4"" in those search engines, I get; only our correct site for the first page of hits (except for the Wikipedia; page on ""Psi4 Aurigae""). And yes, we have control of the domain via; godaddy.com. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Thu, Apr 14, 2016 at 11:33 AM, Ben Pritchard notificat",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210015028:2148,load,load,2148,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028,1,['load'],['load']
Performance,orking C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performin,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2279,Perform,Performing,2279,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,"ort.c:1522; #230 PyImport_ImportModuleLevelObject (name=0x7fabd8928710, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #231 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #232 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #233 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fabd8e6c550, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #234 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fabd8e6c550, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #235 0x000055ff90677205 in do_call_core (kwdict=0x7fabd89038c0, callargs=0x7fabd8e6c550, func=0x7fac0e3989a0, trace_info=0x7fff1128a240, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #236 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b81240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #237 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b81240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #238 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #239 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #240 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510, tstate=0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:50989,optimiz,optimized,50989,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ory Comput. in press (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 09:00PM. Process ID: 25797; PSIDATADIR: /usr/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; -1 1; Sc -1.7965316343 1.5540711104 0.6577410753; Li -3.8411511549 1.3293390591 3.1887862983; Li 0.7306020220 3.4504713202 1.4667051175; Li -0.7149951920 -1.4193774032 -0.1334886497; Li -3.3605940408 2.8558659134 -1.8910238414; }. set basis aug-pcseg-0; set reference rhf; set ci_maxiter 100; set scf_type pk; set nat_orbs true. scf_e, scf_wfn = energy('scf', return_wfn = True); ci_e, ci_wfn = energy('cisd', ref_wfn = scf_wfn, return_wfn = True); --------------------------------------------------------------------------. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:37 2017. => Loading Basis Set <=. Name: AUG-PCSEG-0; Role: ORBITAL; Keyword: BASIS; atoms 1 entry SC line 478 file /usr/share/psi4/basis/aug-pcseg-0.gbs ; atoms 2-5 entry LI line 30 file /usr/share/psi4/basis/aug-pcseg-0.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = -1, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; SC 0.000001136523 -0.000001388204 -0.000001405076 44.955911909000; LI -2.044618384077 -0.224733439504 2.531043817924 7.016004548000; LI 2.527134792823 1.896398821596 0.808962637124 7.016004548000; LI 1.081537578823 -2.973449901804 -0.791231130076 7.016004548000; LI -1.564061269977 1.301793414796 -2.548766321776 7.016004548000. Running in c1 symmetry",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339418202:1744,Load,Loading,1744,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202,1,['Load'],['Loading']
Performance,"ory and basis set are consistent. . I have been playing around with both `frequency()` and `hessian()`. I chose the hessian last night because of this:. https://psicode.org/psi4manual/master/api/psi4.driver.qcdb.vib.harmonic_analysis.html#psi4.driver.qcdb.vib.harmonic_analysis. https://psicode.org/psi4manual/master/freq.html. Where the harmonic analysis is documented showing the IR intensities. The first parameter was a hessian matrix so I went back to go look at how to produce that. Maybe I went down a different rabbit hole. . https://github.com/psi4/psi4/blob/821134f62396ba27f9bcb8fbfa93ea2c370b7616/tests/pytests/test_vibanalysis.py. Line 17-40 I kind of copied your guys test to get the code running. I was actually confused with dipole derivatives and how to produce them and pass them in appropriately. . Ah okay! the frequency has it built in and I can see it. I got confused on the docs. . ```python; theory = 'hf/6-31g*'; ; energy, wave_function = psi4.optimize(; theory,; return_wfn = 'yes',; molecule=universe; ). frequencies = psi4.frequencies(; theory,; ref_gradient=wave_function.gradient(),; molecule=universe. ); ```. Ouput:. ```python; Freq [cm^-1] 1557.5017 4053.2831 4197.9898 ; Irrep A1 A1 B2 ; Reduced mass [u] 1.0830 1.0449 1.0829 ; Force const [mDyne/A] 1.5478 10.1143 11.2435 ; Turning point v=0 [a0] 0.2672 0.1686 0.1627 ; RMS dev v=0 [a0 u^1/2] 0.1966 0.1219 0.1198 ; IR activ [km/mol] 92.6794 13.8599 85.5429 ; Char temp [K] 2240.8982 5831.7720 6039.9727 ; ----------------------------------------------------------------------------------; 1 O 0.00 -0.00 -0.07 0.00 -0.00 0.05 0.00 -0.07 -0.00 ; 2 H -0.00 0.43 0.56 0.00 0.59 -0.39 0.00 0.56 -0.43 ; 3 H 0.00 -0.43 0.56 0.00 -0.59 -0.39 0.00 0.56 0.43 ; ```. So I want to make sure I understand this correctly, the IR active means it is my epsilon in beer-lambert's law and all I would need to do to get absorbance is times it by the path length of my cell, and the concentration of my sample. And then calculate tr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2698#issuecomment-1227099808:1213,optimiz,optimize,1213,https://psicode.org,https://github.com/psi4/psi4/issues/2698#issuecomment-1227099808,1,['optimiz'],['optimize']
Performance,"otifications@github.com wrote:; > ; > That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; > so this test case could be added to one of the other test categories, like; > longtests, in principle.; > ; > That said, the quicker the test runs (while testing the desired feature); > the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; > loosening the convergence criteria.; > ; > David; > ; > On Monday, February 15, 2016, Daniel Smith notifications@github.com wrote:; > ; > > The current cap for ctest is 25 minutes on a single core. Is there any; > > reason not to do this on a tiny basis like 6-31G or 3-21G?; > > ; > > This is just if you want the test case to be run routinely, there is; > > nothing wrong with having extra long test cases that are only run if; > > specifically requested.; > > ; > > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > > ; > > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > > ; > > > -Rollin; > > > ; > > > ## ; > > > ; > > > Dr. Rollin A. King; > > > Professor and Chair of Chemistry; > > > Bethel University; > > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > > ; > > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > wrote:; > > > ; > > > > I just removed opt10 from all ctest labels. Its still present, but will; > > > > not run unless you specifically request it.; > > > > ; > > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > > ; > > > > > On Feb 15, 2016, at 9:27 AM, Justin Turney <notifications@github.com; > > > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > > > wrote:; > > > > > ; > > > > > Yeah, we should have that mechanism t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184433294:1206,optimiz,optimization,1206,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184433294,1,['optimiz'],['optimization']
Performance,"otifications@github.com; wrote:. > That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; > so this test case could be added to one of the other test categories, like; > longtests, in principle.; > ; > That said, the quicker the test runs (while testing the desired feature); > the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; > loosening the convergence criteria.; > ; > David; > ; > On Monday, February 15, 2016, Daniel Smith notifications@github.com; > wrote:; > ; > > The current cap for ctest is 25 minutes on a single core. Is there any; > > reason not to do this on a tiny basis like 6-31G or 3-21G?; > > ; > > This is just if you want the test case to be run routinely, there is; > > nothing wrong with having extra long test cases that are only run if; > > specifically requested.; > > ; > > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > > ; > > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores); > > > with; > > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > > ; > > > -Rollin; > > > ; > > > ## ; > > > ; > > > Dr. Rollin A. King; > > > Professor and Chair of Chemistry; > > > Bethel University; > > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > > ; > > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <; > > > notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > wrote:; > > > ; > > > > I just removed opt10 from all ctest labels. Its still present, but; > > > > will; > > > > not run unless you specifically request it.; > > > > ; > > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > > ; > > > > > On Feb 15, 2016, at 9:27 AM, Justin Turney <; > > > > > notifications@github.com; > > > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > > > wrote:; > > > > > ; > > > > > Y",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184432870:1179,optimiz,optimization,1179,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184432870,1,['optimiz'],['optimization']
Performance,"pendencies are, where his include directories are, whether they need to be used just to compile <module> or whether they need to be used by a consuming project, what compile definitions should be carried along. If all that gets packaged up in a target, then the consuming project need only `target_link_libraries(<tgt> <module>)` and not worry about the other stuff. * CMake tries to be too smart. The items that get put into `target_link_libraries()`, it (pretty reasonably) treats according to the rules of linking libraries and makes bold to rearrange them. Only problem is that when we put linker directives (start-group, as-needed, etc.) and especially when they get repeated in the grand final linking, CMake optimizes them away. So `-la -Wl,--whole-archive -lb, -Wl,--no-whole-archive -lc -Wl,--whole-archive -ld -Wl,--no-whole-archive` merrily becomes `-la -lb, -lc -Wl,--whole-archive -ld -Wl,--no-whole-archive` which is Bad Indeed. However, CMake promises (somewhere) to keep target link libraries properties intact and not to optimize across them. * I think https://github.com/eruffaldi/cmakego/blob/master/cmakego.cmake is a rather nice pattern, and I've emulated it a bit in the external/common/TargetLAPACK. * Targets make all the external projects we link to in psi4 look fairly clean. Below are all the CMakeLists.txt interactions. ```; >>> grep -r '::' psi4/ | grep CMakeList; psi4/CMakeLists.txt: get_property(_loc TARGET CheMPS2::chemps2 PROPERTY LOCATION); psi4/CMakeLists.txt: get_property(_loc TARGET dkh::dkh PROPERTY LOCATION); psi4/CMakeLists.txt:get_property(_loc TARGET libefp::efp PROPERTY LOCATION); psi4/CMakeLists.txt: get_property(_loc TARGET erd::erd PROPERTY LOCATION); psi4/CMakeLists.txt: get_property(_loc TARGET gdma::gdma PROPERTY LOCATION); psi4/CMakeLists.txt:get_property(_loc TARGET libint::int PROPERTY LOCATION); psi4/CMakeLists.txt: #get_property(_loc TARGET PCMSolver::PCMSolver PROPERTY LOCATION); psi4/src/CMakeLists.txt:if(TARGET dkh::dkh); psi4/src/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276178223:1967,optimiz,optimize,1967,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276178223,2,['optimiz'],['optimize']
Performance,pis4--version returns:. /psi4/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.1.1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/936#issuecomment-373024315:87,load,loaded,87,https://psicode.org,https://github.com/psi4/psi4/issues/936#issuecomment-373024315,1,['load'],['loaded']
Performance,"plain won't load the basis file. I think some extra checks get turned on during the conda build. Hence [this knowledge](http://psicode.org/psi4manual/master/manage_git.html#how-to-locate-non-ascii-characters-in-the-codebase). Agree that it'd be nice to allow non-ascii. And probably much easier now that we're py3-only. I just haven't investigated the codecs stuff. ```; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1543347940767/work/build/stage/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 859, in construct; names[index] = parser.load_file(fullfilename); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1543347940767/work/build/stage/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsbasissetparser.py"", line 78, in load_file; contents = infile.readlines(); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1543347940767/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.6/encodings/ascii.py"", line 26, in decode; return codecs.ascii_decode(input, self.errors)[0]. UnicodeDecodeError: 'ascii' codec can't decode byte 0xce in position 169: ordinal not in range(128); Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 3.43 sec; ----------------------------------------------------------; Test Failed.; ""cbs-xtpl-energy"" end time: Nov 27 14:59 EST; ""cbs-xtpl-energy"" time elapsed: 00:00:03; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1380#issuecomment-442458119:12,load,load,12,https://psicode.org,https://github.com/psi4/psi4/pull/1380#issuecomment-442458119,1,['load'],['load']
Performance,"port logging.config; > import sys; > ; > mol_uc2 = qcel.models.Molecule.from_data(; > """"""; > O 0 0 0; > H 0 0 1; > H 0 1 0; > """"""; > ); > ; > input_data = {; > ""keywords"": {; > ""convergence_set"": ""GAU_LOOSE"",; > ""coordsys"": ""tric"",; > ""maxiter"": 25,; > ""enforce"": 0.1,; > ""constraints"": {; > ""set"": [; > {""type"": ""distance"", ""indices"": [0, 1], ""value"": 1},; > ]; > },; > # ""program"": ""psi4"",; > ""program"": ""mopac"",; > },; > ""input_specification"": {; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6-d3""},; > # ""model"": {""method"": ""b3lyp-d3"", ""basis"": ""sto-3g""},; > },; > ""initial_molecule"": mol_uc2.dict(),; > }; > ; > ; > ; > # Set a temporary logger to capture output; > log_stream = geometric.nifty.RawStreamHandler(stream=sys.stdout); > #log_stream = geometric.nifty.RawStreamHandler(stream=StringIO()); > logger = geometric.nifty.logger; > logger.addHandler(log_stream); > ; > ; > # Parse JSON; > input_opts = geometric.run_json.parse_input_json_dict(input_data); > M, engine = geometric.optimize.get_molecule_engine(**input_opts); > ; > # Handle constraints; > constraints_dict = input_opts.get('constraints', {}); > constraints_string = geometric.run_json.make_constraints_string(constraints_dict); > Cons, CVals = None, None; > if constraints_string:; > if 'scan' in constraints_dict:; > raise ValueError(""No scan!""); > Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string); > ; > ; > # Set up the internal coordinate system; > coordsys = input_opts.get('coordsys', 'tric'); > CoordSysDict = {; > 'cart': (geometric.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:1373,optimiz,optimize,1373,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275,1,['optimiz'],['optimize']
Performance,"ptimized out>) at Objects/call.c:690; #7 0x00007ffff7919ee5 in _PyCFunction_FastCallKeywords (func=0x7fffeffd03a8, args=<optimized out>, nargs=<optimized out>, kwnames=<optimized out>) at Objects/call.c:730; #8 0x00007ffff78f2178 in call_function (kwnames=0x0, oparg=0, pp_stack=<synthetic pointer>) at Python/ceval.c:4568; #9 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3093; #10 0x00007ffff7a02dec in _PyEval_EvalCodeWithName (_co=0x7fffc6816db0, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, argcount=1, kwnames=0x7fffeffadb58, kwargs=0x7ffff7f76b70, kwcount=3, kwstep=1, defs=0x0,; defcount=0, kwdefs=0x0, closure=0x0, name=0x7ffff7fc1830, qualname=0x7ffff7fc1830) at Python/ceval.c:3930; #11 0x00007ffff7919966 in _PyFunction_FastCallKeywords (func=<optimized out>, stack=<optimized out>, nargs=<optimized out>, kwnames=<optimized out>) at Objects/call.c:433; #12 0x00007ffff78f2e32 in call_function (kwnames=0x7fffeffadb40, oparg=<optimized out>, pp_stack=<synthetic pointer>) at Python/ceval.c:4616; #13 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3139; #14 0x00007ffff7a02dec in _PyEval_EvalCodeWithName (_co=_co@entry=0x7ffff7f9e660, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8, args=args@entry=0x0, argcount=argcount@entry=0, kwnames=kwnames@entry=0x0,; kwargs=0x0, kwcount=0, kwstep=2, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at Python/ceval.c:3930; #15 0x00007ffff7a02f1e in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f9e660, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8, args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=0, defs=0x0,; defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3959; #16 0x00007ffff7a02f4b in PyEval_EvalCode (co=co@entry=0x7ffff7f9e660, globals=globals@entry=0x7ffff7ecd1f8, locals=locals@entry=0x7ffff7ecd1f8) at Python/ceval.c:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878:4094,optimiz,optimized,4094,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878,2,['optimiz'],['optimized']
Performance,"ptimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #60 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11286ca0, callable=0x7fac0e363370, tstate=0x55ff9515e050); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #61 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11286d30) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #62 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #63 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd784bdb0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #64 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd8887530, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fabd887f290, level=1); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #65 0x000055ff9067536b in import_name (level=0x7fac0e3000f0, fromlist=0x7fabd887f290, name=0x7fabd8887530, f=0x7fabd8fa9cf0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #66 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8fa9cf0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #67 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8fa9cf0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #68 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112870b0, locals=locals@entry=0x7fabd8887400, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #69 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd888",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:17807,optimiz,optimized,17807,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"pybind11.h:297; #6 0x00007fac0b7a3925 in pybind11::cpp_function::dispatcher (self=<optimized out>, args_in=0x7fabd7888e00, kwargs_in=0x0) at /home/susi/.conda/envs/p4env/include/pybind11/pybind11.h:987; #7 0x000055ff906815a6 in cfunction_call (func=0x7fac0e0cdb20, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; --Type <RET> for more, q to quit, c to continue without paging--; #8 0x000055ff9067aa6b in _PyObject_MakeTpCall (tstate=0x55ff9515e050, callable=callable@entry=0x7fac0e0cdb20, args=args@entry=0x55ff96063ea0, nargs=2, keywords=keywords@entry=0x0); at /usr/local/src/conda/python-3.10.14/Objects/call.c:215; #9 0x000055ff906769d6 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=<optimized out>, callable=0x7fac0e0cdb20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:112; #10 _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:99; #11 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #12 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286030, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #13 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff96063c70, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #14 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff96063c70, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #15 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fabd8177800, tstate=0x55ff9515e050); at /usr/local/s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:7351,optimiz,optimized,7351,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"python 3.8, 3.9, & 3.10 all failing. also removed the '-rt'. `; mamba install psi4 psi4 python=3.8 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.8']. pkgs/main/linux-64 Using cache; pkgs/main/noarch Using cache; pkgs/r/linux-64 Using cache; pkgs/r/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change; Could not solve for environment specs; The following packages are incompatible; ├─ psi4 is installable with the potential options; │ ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ │ └─ pychemps2 >=1.7.1 with the potential options; │ │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:810,cache,cache,810,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966,4,['cache'],['cache']
Performance,"qc/psi4.bin/lib/libint.a (version 1.1.6) ; -- Configuring done ; -- Generating done ; ``` . And just for completeness the pybind11 part:. ```; [ 12%] Performing download step (git clone) for 'pybind11_external'; Cloning into 'pybind11_external'...; Note: checking out 'v2.0.0'. You are in 'detached HEAD' state. You can look around, make experimental; changes and commit them, and you can discard any commits you make in this; state without impacting any branches by performing another checkout. If you want to create a new branch to retain commits you create, you may; do so (now or later) by using -b with the checkout command again. Example:. git checkout -b <new-branch-name>. HEAD is now at e33ef9c... v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /usr/bin/python3.4 (found version ""3.4.5"") ; -- Found PythonLibs: /usr/lib64/libpython3.4m.so; -- pybind11 v2.0.0; -- Configuring done; -- Generating done; -- Build files have been written to: /usr/qc/psi4.git/objdir/external/upstrea",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273732640:3248,Perform,Performing,3248,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640,1,['Perform'],['Performing']
Performance,"query.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resource: the server responded with a status of 404 (Not Found); > index.html:368 Uncaught ReferenceError: $ is not defined; > http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > Is anyone else seeing this problem? Possibly related?; > ; > —AJ; > ; > On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (; > notifications@github.com) wrote:; > ; > I'm not observing any of this behavior, so just to clarify: does anyone; > actually get this ""redirection"" when you enter ""psicode.org"" on your URL; > bar? Or do you just get this when you search for PSI4 on; > Google/Yahoo/Bing? NB: When I put ""PSI4"" in those search engines, I get; > only our correct site for the first page of hits (except for the Wikipedia; > page on ""Psi4 Aurigae""). And yes, we have control of the domain via; > godaddy.com.; > ; > -TDC; > ; > ## ; > ; > Prof. T. Daniel Crawford; > crawdad@vt.edu; > ; > On Thu, Apr 14, 2016 at 11:33 AM, Ben Pritchard notifications@github.com; > wrote:; > ; > > Also confirming here, also on yaho",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210017774:2802,load,load,2802,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774,1,['load'],['load']
Performance,"raits<char>, std::allocator<char> >, bool, std::optional<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, double, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > > > const&), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, pybind11::arg const&, pybind11::arg const&, pybind11::arg_v const&, char const (&) [43])::{lambda(pybind11::detail::function_call&)#1}::operator()(pybind11::detail::function_call&) const (__closure=<optimized out>, call=...) at /home/susi/.conda/envs/p4env/include/pybind11/pybind11.h:297; #6 0x00007fac0b7a3925 in pybind11::cpp_function::dispatcher (self=<optimized out>, args_in=0x7fabd7888e00, kwargs_in=0x0) at /home/susi/.conda/envs/p4env/include/pybind11/pybind11.h:987; #7 0x000055ff906815a6 in cfunction_call (func=0x7fac0e0cdb20, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; --Type <RET> for more, q to quit, c to continue without paging--; #8 0x000055ff9067aa6b in _PyObject_MakeTpCall (tstate=0x55ff9515e050, callable=callable@entry=0x7fac0e0cdb20, args=args@entry=0x55ff96063ea0, nargs=2, keywords=keywords@entry=0x0); at /usr/local/src/conda/python-3.10.14/Objects/call.c:215; #9 0x000055ff906769d6 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=<optimized out>, callable=0x7fac0e0cdb20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:112; #10 _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:99; #11 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff96063ea0, callable=0x7fac0e0cdb20) at /usr/local/src/conda/python-3.10",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:6652,optimiz,optimized,6652,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"ray.cc:134; > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630); > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50; > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>); > at /usr/include/boost/python/detail/invoke.hpp:75; > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223; > #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (_)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38; > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0; > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); > from /usr/lib/libboost_python3.so.1.54.0; > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); > at /usr/include/boost/python/detail/translate_exception.hpp:48; > #14 operator()<bool, boost::pyth",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:2128,optimiz,optimized,2128,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,4,['optimiz'],['optimized']
Performance,"re (kwdict=0x7fabd7bce4c0, callargs=0x7fabd7888dc0, func=0x7fac0e398e00, trace_info=0x7fff112864b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #28 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8949cf0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #29 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8949cf0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #30 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #31 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #32 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; --Type <RET> for more, q to quit, c to continue without paging--; #33 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #34 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286660, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #35 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8697300, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #36 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8697300, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #37 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:11613,optimiz,optimized,11613,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"re (kwdict=0x7fabd8887300, callargs=0x7fabd88851c0, func=0x7fac0e398e00, trace_info=0x7fff11287280, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #74 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c49700, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #75 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c49700, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #76 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #77 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #78 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #79 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #80 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287430, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #81 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6eae0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #82 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6eae0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #83 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:20567,optimiz,optimized,20567,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"re_matrices(odd_g_start, g0, 3, 'start grad'); > ; > def test_badodd_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(odd_nre_opt, mol.nuclear_repulsion_energy(), 2, 'opt nre nogood'); > compare_values(odd_e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene nogood'); > compare_values(odd_rmsg_opt, g.rms(), 4, 'opt grad nogood'); > ; > test_norm_start(normz); > test_zero_grad(normz); > ; > # And behold, the initial gradient matches Q-Chem, the optimization; > ; > # progresses nicely, the RMS Force column goes to zero, and the gradient; > ; > # at the end is zero.; > ; > # start nre.........................................................PASSED; > ; > # start ene.........................................................PASSED; > ; > # start rms grad....................................................PASSED; > ; > # start grad........................................................PASSED; > ; > #Optimizer: Optimization complete!; > ; > # opt nre...........................................................PASSED; > ; > # opt ene...........................................................PASSED; > ; > # opt ZERO grad.....................................................PASSED; > ; > # --------------------------------------------------------------------------------------------------------------- ~; > ; > # Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; > ; > # --------------------------------------------------------------------------------------------------------------- ~; > ; > # 1 -139.530718293045 -139.530718293045 0.05695995 0.03625240 0.19767161 0.12159384 ~; > ; > # 2 -139.555614729326 -0.024896436281 0.02341593 0.00968824 0.06857406 0.03977721 ~; > ; > # 3 -139.556998324542 -0.001383595215 0.00950087 0.00516674 0.02878292 0.01662559 ~; > ; > # 4 -139.557349947407 -0.000351622866 0.00371412 0.00163364 0.01005622 0.00527025 ~; > ; > # 5 -139.557391640737 -0.000041693330 0.0005",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-195966638:4774,Optimiz,Optimizer,4774,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638,2,['Optimiz'],"['Optimization', 'Optimizer']"
Performance,rforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3317,Perform,Performing,3317,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,rforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3445,Perform,Performing,3445,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,11,['Perform'],['Performing']
Performance,rforming Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specif,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3276,Perform,Performing,3276,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,rid = TRUE; X_Alpha = 2.500000E-01; X_Omega = 0.000000E+00; C_LRC = FALSE; C_Hybrid = FALSE; C_Alpha = 0.000000E+00; C_Omega = 0.000000E+00. => Exchange Functionals <=. 0.7500 PBE_X; 0.2500 HF . => Correlation Functionals <=. 1.0000 PBE_C. => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = FLAT; Nuclear Scheme = TREUTLER. BS radius alpha = 1; Pruning alpha = 1; Radial Points = 75; Spherical Points = 302; Total Points = 65565; Total Blocks = 69; Max Points = 4576; Max Functions = 19. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 19 19 0 0 0 0; -------------------------------------------------------; Total 19 19 5 5 5 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 8; Integrals threads: 8; Memory (MB): 183; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12. => Auxiliary Basis Set <=. Basis Set: ; Number of shells: 42; Number of basis function: 131; Number of Cartesian functions: 131; Spherical Harmonics?: false; Max angular momentum: 3. => External Potential Field: <= . > Charges [a.u.] < . Z x y z; -1.30623 -0.64897 0.00000 1.10730; 0.35181 -0.75342 -0.00000 1.26252; 0.86636 -0.77880 0.13229 1.13268; -1.30623 -0.90864 -0.00000 1.15806; 0.10177 -0.80418 0.00000 1.00285; 0.86636 -0.77880 -0.13229 1.13268; 0.51285 -0.79652 0.76410 1.73167; -1.74409 -0.67784 0.64529 1.64918; 0.85696 -0.68947 0.82229 1.58969; 0.51285 -0.53684 0.76410 1.68091; -0.59896 -0.65552 0.88291 1.76340; 0.67348 -0.64389 0.70591 1.82290; 0.51285 -0.79652 -0.76410 1.73167; -0.59896 -0.65552 -0.88291 1.76340; 0.85696 -0.68947 -0.82229 1.58969; 0.51285 -0.53684 -0.76410 1.68091; -1.74409 -0.67784 -0.64529 1.64918; 0.67348 -0.64389 -0.70591 1.82289. Old nuclear repulsion = 9.147,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182660528:5664,Cache,Cache,5664,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528,1,['Cache'],['Cache']
Performance,rming Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3404,Perform,Performing,3404,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,"rom /u/en/taube/c7dpr/prefixes/psi4/1.3.2-desres03-c7/lib/psi4/core.cpython-37m-x86_64-linux-gnu.so; #4 0x00007fffdf48fe51 in void pybind11::cpp_function::initialize<int (*&)(), int, , pybind11::name, pybind11::scope, pybind11::sibling, char [58]>(int (*&)(), int (*)(), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, char const (&) [58])::{lambda(pybind11::detail::function_call&)#1}::_FUN(pybind11::detail::function_call&) () from /u/en/taube/c7dpr/prefixes/psi4/1.3.2-desres03-c7/lib/psi4/core.cpython-37m-x86_64-linux-gnu.so; #5 0x00007fffdeff6104 in pybind11::cpp_function::dispatcher(_object*, _object*, _object*) () from /u/en/taube/c7dpr/prefixes/psi4/1.3.2-desres03-c7/lib/psi4/core.cpython-37m-x86_64-linux-gnu.so; #6 0x00007ffff7919e63 in _PyMethodDef_RawFastCallKeywords (method=0x99e900, self=<optimized out>, args=0x110b5f8, nargs=0, kwnames=<optimized out>) at Objects/call.c:690; #7 0x00007ffff7919ee5 in _PyCFunction_FastCallKeywords (func=0x7fffeffd03a8, args=<optimized out>, nargs=<optimized out>, kwnames=<optimized out>) at Objects/call.c:730; #8 0x00007ffff78f2178 in call_function (kwnames=0x0, oparg=0, pp_stack=<synthetic pointer>) at Python/ceval.c:4568; #9 _PyEval_EvalFrameDefault (f=<optimized out>, throwflag=<optimized out>) at Python/ceval.c:3093; #10 0x00007ffff7a02dec in _PyEval_EvalCodeWithName (_co=0x7fffc6816db0, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, argcount=1, kwnames=0x7fffeffadb58, kwargs=0x7ffff7f76b70, kwcount=3, kwstep=1, defs=0x0,; defcount=0, kwdefs=0x0, closure=0x0, name=0x7ffff7fc1830, qualname=0x7ffff7fc1830) at Python/ceval.c:3930; #11 0x00007ffff7919966 in _PyFunction_FastCallKeywords (func=<optimized out>, stack=<optimized out>, nargs=<optimized out>, kwnames=<optimized out>) at Objects/call.c:433; #12 0x00007ffff78f2e32 in call_function (kwnames=0x7fffeffadb40, oparg=<optimized out>, pp_stack=<synthetic pointer>) at Python/ceval.c:4616; #13 _PyEval_EvalFrameDefault (f=<opti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878:3206,optimiz,optimized,3206,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-763858878,6,['optimiz'],['optimized']
Performance,"round is, so I'm going to write this explanation at a level accessible for a first-year graduate student, though it will still be dense.; > ; > Many matrices in electronic structure theory are indexed by two orbitals. Each orbital will change in a different way under symmetry operations of the molecule (like rotation, reflection), and we call each classification an irreducible representation (irrep). Now, our matrices further have the property that A_mn = 0 unless the symmetries of m and n are somehow related. Our matrix then only needs to store ""blocks"" where for all orbitals m of irreducible representation h, the only non-zero elements of A are A_mn where n is an orbital of irreducible representation i.; > ; > Because we use this block structure, it isn't enough to make sure that the total dimensions of the matrix agree (what your code does). We need the dimensions of each symmetry block to agree on the three points mentioned in the original issue. This validation should be performed for each irreducible representation.; > ; > For reference, the code that Susi linked does the following:; > ; > ```; > for each irreducible representation of the first index of A, Ha:; > 	Hb is the irreducible representation of the first index of the B block that can multiply with the A block; > Hc is the irreducible representation of the first index of the new matrix (if we're multiplying by A, this is just Ha, otherwise this is the irreducible representation of the second index for the block with first index Ha); > 	m is the number of orbitals with the irreducible representation for the first index in this block of the new matrix; > 	n is the number of orbitals with the irreducible representation for the second index in this block of the new matrix; > 	k is the number of orbitals with the irreducible representation for the second index in this block of A, which is also the number of orbitals with the irreducible representation for the first index in this block of B; > 	lda is the num",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2729#issuecomment-1261945010:1021,perform,performed,1021,https://psicode.org,https://github.com/psi4/psi4/pull/2729#issuecomment-1261945010,2,['perform'],['performed']
Performance,"s=0x0, nargsf=2, args=0x7fff112882d0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #135 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11288360) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #136 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #137 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd884ea30, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #138 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd887ef60, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fabd8a587f0, level=2); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #139 0x000055ff9067536b in import_name (level=0x7fac0e300110, fromlist=0x7fabd8a587f0, name=0x7fabd887ef60, f=0x55ff95dcd100, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #140 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95dcd100, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #141 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x55ff95dcd100, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #142 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112886e0, locals=locals@entry=0x7fac0e0f83c0, args=args@entry=0x0, argcount=argcount@entry=0, ; --Type <RET> for more, q to quit, c to continue without paging--; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #143 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8882550, globals=globals@entry=0x7fac0e0f83c0, locals=locals@entry=0x7fac0e0f83c0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #144 0x00",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:32315,optimiz,optimized,32315,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"s=0x0, nargsf=2, args=0x7fff112890a0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #181 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11289130) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #182 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #183 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd8928940, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #184 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd8903a70, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fabd8e6e320, level=1); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #185 0x000055ff9067536b in import_name (level=0x7fac0e3000f0, fromlist=0x7fabd8e6e320, name=0x7fabd8903a70, f=0x7fabdcdb7a00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #186 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabdcdb7a00, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #187 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabdcdb7a00, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #188 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112894b0, locals=locals@entry=0x7fabd8903bc0, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #189 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8a87940, globals=globals@entry=0x7fabd8903bc0, locals=locals@entry=0x7fabd8903bc0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #190 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, local",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:41315,optimiz,optimized,41315,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"s=0x0, nargsf=2, args=0x7fff1128a6d0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #255 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128a760) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #256 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #257 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd89285d0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #258 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd8928580, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fabe4291420, level=1); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #259 0x000055ff9067536b in import_name (level=0x7fac0e3000f0, fromlist=0x7fabe4291420, name=0x7fabd8928580, f=0x7fac0e074610, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #260 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e074610, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #261 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e074610, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #262 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128aae0, locals=locals@entry=0x7fabdcd7a300, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #263 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8a86550, globals=globals@entry=0x7fabdcd7a300, locals=locals@entry=0x7fabdcd7a300); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #264 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, local",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:55639,optimiz,optimized,55639,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"s=0x0, nargsf=2, args=0x7fff1128c920, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #367 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128c9b0) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #368 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #369 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fac0e079f30, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #370 PyImport_ImportModuleLevelObject (name=name@entry=0x7fac0e136530, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fac0e104d90, level=1); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #371 0x000055ff9067536b in import_name (level=0x7fac0e3000f0, fromlist=0x7fac0e104d90, name=0x7fac0e136530, f=0x7fac0e16ec00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #372 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16ec00, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #373 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16ec00, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #374 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128cd30, locals=locals@entry=0x7fac0e071580, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #375 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fac0e06f7e0, globals=globals@entry=0x7fac0e071580, locals=locals@entry=0x7fac0e071580); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #376 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, local",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:77428,optimiz,optimized,77428,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::scf::HF>), std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::scf::HF>, pybind11::name, pybind11::scope, pybind11::sibling, pybind11::arg, char [61]>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::scf::HF>), std::shared_ptr<psi::Matrix> (*)(std::shared_ptr<psi::scf::HF>), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, pybind11::arg const&, char const (&) [61])::{lambda(pybind11::detail::function_call&)#1}::_FUN(pybind11::detail::function_call&) () at /usr/include/pybind11/pybind11.h:224. #19 0x00007f21a8441138 in pybind11::cpp_function::dispatcher (self=0x7f2185ffe790, args_in=0x7f21476cd000, ; kwargs_in=0x0) at /usr/include/pybind11/pybind11.h:946; #20 0x000056022a991401 in cfunction_call (func=0x7f2186005210, args=0x7f21476cd000, kwargs=0x0); at /usr/local/src/conda/python-3.12.5/Objects/methodobject.c:537; #21 0x000056022a97109b in _PyObject_MakeTpCall (tstate=0x56022ae03058 <_PyRuntime+459704>, ; callable=0x7f2186005210, args=<optimized out>, nargs=1, keywords=0x0); at /usr/local/src/conda/python-3.12.5/Objects/call.c:240; #22 0x000056022a877f65 in _PyEval_EvalFrameDefault (tstate=<optimized out>, frame=0x7f21b9ea9af0, ; throwflag=<optimized out>) at Python/bytecodes.c:2714; #23 0x000056022aa2bece in PyEval_EvalCode (co=co@entry=0x56025a2e86d0, globals=globals@entry=0x7f21abff9900, ; locals=locals@entry=0x7f21abff9900) at /usr/local/src/conda/python-3.12.5/Python/ceval.c:578; #24 0x000056022aa50d9a in run_eval_code_obj (tstate=tstate@entry=0x56022ae03058 <_PyRuntime+459704>, ; co=co@entry=0x56025a2e86d0, globals=globals@entry=0x7f21abff9900, locals=locals@entry=0x7f21abff9900); at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:1722; --Type <RET> for more, q to quit, c to continue without paging--; #25 0x000056022aa4bf4b in run_mod (mod=mod@entry=0x56025a306440, ; filename=filename@entry=0x56022ad98b00 <_PyRuntime+24160>, globals=globals@entry=0x7f21abff9900, ; locals=local",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969:5146,optimiz,optimized,5146,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969,1,['optimiz'],['optimized']
Performance,"si4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to rebuild. > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1). * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. Notes. * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular momentum error on mac binary.; * simint max is AM7 both past and near future. Only libint is changing.; * Between higher AM and optimizing for multiple architectures, the new libint pkg is heavy, >120mb zipped. For psi4 CI, I'm planning to pull the old AM6 to lessen the strain on Travis. This won't help downstream projects that summon a built psi4 to test their addon.; * I haven't posted the AM8 package yet, as I want the stack to finish building, and I wanted to give you all a heads-up. I'll post to this issue when the package goes up. Will only be in -c psi4/label/dev for now, not -c psi4. —; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub<https://github.com/psi4/psi4/issues/1533>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AArOJyuo4E3GnVs6-g7y6p4rUmgxalOsks5vNL55gaJpZM4a6ozS>.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:3384,optimiz,optimizing,3384,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773,1,['optimiz'],['optimizing']
Performance,"si::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134; > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630); > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50; > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>); > at /usr/include/boost/python/detail/invoke.hpp:75; > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223; > #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (_)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38; > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0; > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); > from /usr/lib/libboost_python3.so.1.54.0; > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); > at /usr/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:2034,optimiz,optimized,2034,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,2,['optimiz'],['optimized']
Performance,"side libint, etc. and that simint is avxfma. And it is those simint headers that show up in `./psi4-core-prefix/src/psi4-core-build/src/psi4/libmints/CMakeFiles/mints.dir/CXX.includecache` and are presumably defining SIMINT_AVX and thus triggering the offending `intrinsics_avx.h` inclusion. In the end, the same trouble as with multiple pybind11's – CMake can't trump native C++ header-seeking, so one has to keep any interferences out of sight. Resolved, sorry for the wild goose chase. ```; #pragma once; #define SIMINT_SSE; ```. ```; >>> grep -ir simint_VECTOR .; ./CMakeCache.txt:SIMINT_VECTOR:STRING=sse; ./external/upstream/simint/CMakeFiles/simint_external.dir/build.make:	cd /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external-build && /Users/loriab/linux/miniconda3/envs/p4dev36/bin/cmake -DCMAKE_INSTALL_PREFIX=/usr/local/psi4 -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_INCLUDEDIR=include -DBUILD_SHARED_LIBS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DSIMINT_STANDALONE=OFF -DENABLE_TESTS=OFF -DSIMINT_VECTOR=sse -DSIMINT_MAXAM=6 -C/Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/tmp/simint_external-cache-Release.cmake ""-GUnix Makefiles"" /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external; ./external/upstream/simint/simint_external-prefix/src/simint_external-build/CMakeCache.txt:SIMINT_VECTOR:STRING=sse; ./external/upstream/simint/simint_external-prefix/src/simint_external-build/simintConfig.cmake:set(simint_VECTOR sse); ./external/upstream/simint/simint_external-prefix/tmp/simint_external-cfgcmd.txt:cmd='/Users/loriab/linux/miniconda3/envs/p4dev36/bin/cmake;-DCMAKE_INSTALL_PREFIX=/usr/local/psi4;-DCMAKE_BUILD_TYPE=Release;-DCMAKE_C_COMPILER=/usr/bin/clang;-DCMAKE_CXX_COMPILER=/usr/bin/clang++;-DCMAKE_INSTALL_LIBDIR=l",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-356840364:1653,cache,cache-Release,1653,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-356840364,1,['cache'],['cache-Release']
Performance,"so the environment is solvable on Linux:; ```conda create -n amber ambertools=20.9 python=3.7 blas=*=mkl gau2grid psi4/label/dev::libxc psi4/label/dev::psi4=1.4a2.dev1058 -c conda-forge -c defaults -c psi4/label/dev```. on Mac, I agree that `libgfortran` is the problem. it comes about b/c conda-forge pins on gfortran v4 and defaults on gfortran v3 (then there's various soversions and libgfortran versions, too). once upon a time, the pinning that was applied by run_exports was >3.0.1, but that's been narrowed to >3.0.1,<4.0.0 . there's still some old add-on packages with the former, so if I suppress the libgfortran pinning on psi4 itself (psi4=1.4a2.dev1084 for py37 at https://anaconda.org/psi4/psi4/files), then I can get an environment to solve with it and ambertools=20. of course, then the libgfortran.3.dylib is missing, but if I symlink (!) that to libgfortran.4.dylib, I can get some psi4 test cases to pass (gdma fails to load lib, while some dft is off a bit). altogether, not a satisfactory or safe fix. and libxc is both required and fortran, so I can't just build you a non-fortran psi4. so unless I think of something else, I think you just can't mix fortran dependencies when compiled against a mix of c-f and defaults pinnings. sorry.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2024#issuecomment-722811014:938,load,load,938,https://psicode.org,https://github.com/psi4/psi4/issues/2024#issuecomment-722811014,1,['load'],['load']
Performance,"sorry, yes I use PBE with def2-SV(P) - with basis_guess I can get the first 2 or 3 iterations to converge but then it also fails SCF converge. without basis_guess it fails on first iteration. and like the other example HF converges fine a full optimization.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-432221848:244,optimiz,optimization,244,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-432221848,1,['optimiz'],['optimization']
Performance,"specified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option PSI4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.3"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so (found suitable version ""2.7.3"", minimum required is ""2"") ; -- Suitable pybind11 could not be located, building one instead.; -- Suitable libint could not be located, building one instead.; -- Suitable libefp could not be located, building one instead.; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; this build won't work without GCC intervention:; https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; Call Stack (most recent call first):; CMakeLists.txt:119 (include). -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found BLAS: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/i",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261733153:2460,Perform,Performing,2460,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153,4,['Perform'],['Performing']
Performance,"sr/local/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; #! 6-31G** H2O+ Test CISD Energy Point. refnuc = 8.8046866186391 #TEST; refscf = -75.6213422266812 #TEST; refci = -75.7850671871149 #TEST; refcorr = refci - refscf #TEST. molecule h2o {; 0 1; O; H 1 1.00; H 1 1.00 2 103.1; }. set {; # reference rohf; basis 6-31G**; freeze_core true; # icore 0; }. thisenergy = energy('cisd'). #compare_values(refnuc, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST ; #compare_values(refscf, get_variable(""SCF total energy""), 7, ""SCF energy"") #TEST; #compare_values(refci, thisenergy, 7, ""CI energy"") #TEST; #compare_values(refcorr, get_variable(""CI CORRELATION ENERGY""), 7, ""CI correlation energy"") #TEST; --------------------------------------------------------------------------. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. => Loading Basis Set <=. Name: 6-31G**; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 149 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs ; atoms 2-3 entry H line 44 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.069592187390 15.994914619560; H 0.000000000000 -0.783151105291 0.552239257844 1.007825032070; H 0.000000000000 0.783151105291 0.552239257844 1.007825032070. Running in c2v symmetry. Rotational consta",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339412812:2102,Load,Loading,2102,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812,1,['Load'],['Loading']
Performance,"std::integer_sequence<unsigned long, 0ul, 1ul, 2ul>, pybind11::detail::void_type&&) && (f=<optimized out>, this=0x7fff11285af0); at /home/susi/.conda/envs/p4env/lib/gcc/x86_64-conda-linux-gnu/14.1.0/include/c++/bits/char_traits.h:350; #4 pybind11::detail::argument_loader<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::optional<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, double, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > > > const&>::call<std::shared_ptr<psi::SuperFunctional>, pybind11::detail::void_type, std::shared_ptr<psi::SuperFunctional> (*&)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::optional<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, double, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > > > const&)>(std::shared_ptr<psi::SuperFunctional> (*&)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::optional<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, double, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, double> > > > const&)) && (this=0x7fff11285af0, ; f=<optimized out>) at /home/susi/.conda/envs/p4env/include/pybind11/cast.h:1600; #5 pybind11::cpp_function::initialize<std::shared_ptr<psi::SuperFunctional> (*&)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::optional",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:3934,optimiz,optimized,3934,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,sweeeet: ; `psi4-path-advisor --intel`; ```; loading initial cache file /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsCache.cmake; loading initial cache file /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsMKLCache.cmake; loading initial cache file /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; -- The C compiler identification is Intel 18.0.2.20180210; -- The CXX compiler identification is Intel 18.0.2.20180210; -- Check for working C compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icc; -- Check for working C compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icpc; -- Check for working CXX compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- The Fortran compiler identification is Intel 18.0.2.20180210; -- Check for working Fortran compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort; -- Check for working Fortran compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Enabling Fortran; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524:45,load,loading,45,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524,6,"['cache', 'load']","['cache', 'loading']"
Performance,"sysroot; -- Checking whether CXX compiler has -isysroot - yes; -- Checking whether CXX compiler supports OSX deployment target flag; -- Checking whether CXX compiler supports OSX deployment target flag - yes; -- Check for working CXX compiler: /usr/local/bin/g++-8; -- Check for working CXX compiler: /usr/local/bin/g++-8 -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option ENABLE_MSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 14; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Setting (unspecified) option SPHINX_THEME: sphinx_psi_theme; -- Psi4 install: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:4271,Perform,Performing,4271,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308,1,['Perform'],['Performing']
Performance,"t /usr/local/src/conda/python-3.12.5/Python/bltinmodule.c:1121; #28 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>, ; kwnames=<optimized out>) at /usr/local/src/conda/python-3.12.5/Python/clinic/bltinmodule.c.h:586; #29 0x000056022a986246 in cfunction_vectorcall_FASTCALL_KEYWORDS (func=<optimized out>, args=0x7f21b9ea9078, ; nargsf=<optimized out>, kwnames=0x0) at /usr/local/src/conda/python-3.12.5/Objects/methodobject.c:438; #30 0x000056022a985fcf in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=9223372036854775809, ; args=0x7f21b9ea9078, callable=0x7f21abf9c770, tstate=0x56022ae03058 <_PyRuntime+459704>); at /usr/local/src/conda/python-3.12.5/Include/internal/pycore_call.h:92; #31 PyObject_Vectorcall (callable=0x7f21abf9c770, args=0x7f21b9ea9078, nargsf=9223372036854775809, ; kwnames=0x0) at /usr/local/src/conda/python-3.12.5/Objects/call.c:325; --Type <RET> for more, q to quit, c to continue without paging--; #32 0x000056022a877f65 in _PyEval_EvalFrameDefault (tstate=<optimized out>, frame=0x7f21b9ea9020, ; throwflag=<optimized out>) at Python/bytecodes.c:2714; #33 0x000056022aa2bece in PyEval_EvalCode (co=co@entry=0x560259e3fbd0, globals=globals@entry=0x7f21abff9900, ; locals=locals@entry=0x7f21abff9900) at /usr/local/src/conda/python-3.12.5/Python/ceval.c:578; #34 0x000056022aa50d9a in run_eval_code_obj (tstate=tstate@entry=0x56022ae03058 <_PyRuntime+459704>, ; co=co@entry=0x560259e3fbd0, globals=globals@entry=0x7f21abff9900, locals=locals@entry=0x7f21abff9900); at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:1722; #35 0x000056022aa4bf4b in run_mod (mod=mod@entry=0x560259ddd528, filename=filename@entry=0x7f21abe2c090, ; globals=globals@entry=0x7f21abff9900, locals=locals@entry=0x7f21abff9900, ; flags=flags@entry=0x7ffc67b36bd0, arena=arena@entry=0x7f21abf1bcb0); at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:1743; #36 0x000056022aa64bd0 in pyrun_file (fp=fp@entry=0x560259cb7470, filename=filename@entry=0x7",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969:7951,optimiz,optimized,7951,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969,2,['optimiz'],['optimized']
Performance,"t was read in on line 56; - **lines 64 + 65**: The memory for this irrep is freed. This is why I want to move away from talking about data at all in the comment string, `buf4_init` is not responsible for initializing the ""data"" you are talking about. That is by *design* so that operations can be performed over the tensors in chunks like I have outlined in the part above. The buffer holds the information necessary to get that data, *when it is explicitly told to*. . I am sorry for not being clear, but this stuff is very easy to get lost in. I meant that trying to access tensor elements directly after calling `buf4_init`. Getting back to the subject of this PR: . 1. Lets leave the comments in `file4_init` alone, since the `buf4/file2_init` functions are the ones being used externally, `file4_init`s are usually only found w/in DPD itself as far as I know.. ; 2. In `buf4_init()` and `file2_init()` We can put note/warning separate from the description of `label`, something to the tune of ; > Make sure that you use the correct `label` and `inputfile` if you *intend* to read from or write to an existing quantity on disk. If you *intend* to populate a new quantity on disk, ensure that the `label` is not already used in `inputfile`. PSIO::tocprint(int filenum) can be used to display the current list of labels in use in the outputfile. . BTW: That last hint is particularly useful for debugging I/O related errors. Also, If you intend … better than it will be loaded… since it indicates this may or may not be done, and it does **not** happen now. . The case where an tensor is held in core via the cache system does not need to be mentioned since it does not change any of this behavior. To go on to your question about the inputfile, label relationship. The file is one of those defined in [psifiles.h](https://github.com/psi4/psi4/blob/master/psi4/include/psi4/psifiles.h), and these macros provide an easy way to know which number file a quantity belongs in. Thinking of the file as a ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267512911:1568,tune,tune,1568,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267512911,2,['tune'],['tune']
Performance,"t.h:114; #40 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #41 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286810, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #42 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8890fc0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #43 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8890fc0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #44 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #45 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #46 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #47 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #48 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112869c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #49 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd88a0a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #50 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd88a0a40, tstate=0x55ff9515e050) at /usr/local/src/conda/pyt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:14140,optimiz,optimized,14140,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"t.h:114; #47 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd88a0bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #48 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112869c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #49 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd88a0a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #50 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd88a0a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #51 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #52 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #53 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #54 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #55 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286b70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #56 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32d40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #57 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b32d40, tstate=0x55ff9515e050) at /usr/local/src/conda/pyt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:15470,optimiz,optimized,15470,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"t.h:114; #54 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b32ed0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #55 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286b70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #56 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32d40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #57 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b32d40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #58 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #59 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #60 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11286ca0, callable=0x7fac0e363370, tstate=0x55ff9515e050); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #61 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11286d30) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #62 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #63 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd784bdb0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #64 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd8887530, globals=<optimized ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:16800,optimiz,optimized,16800,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"t.h:114; #79 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6ec68, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #80 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287430, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #81 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6eae0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #82 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6eae0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #83 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #84 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #85 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #86 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; --Type <RET> for more, q to quit, c to continue without paging--; #87 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112875e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #88 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b7c840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #89 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:21698,optimiz,optimized,21698,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"t.h:114; #93 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #94 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287790, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #95 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918c40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #96 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918c40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #97 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #98 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #99 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #100 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #101 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287940, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #102 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32020, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #103 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b32020, tstate=0x55ff9515e050) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:24424,optimiz,optimized,24424,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"t::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>); > at /usr/include/boost/python/detail/invoke.hpp:75; > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223; > #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (_)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38; > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0; > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); > from /usr/lib/libboost_python3.so.1.54.0; > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); > at /usr/include/boost/python/detail/translate_exception.hpp:48; > #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&> > (f=..., a=<synthetic pointer>, this=<optimized out>) at /usr/include/boost/bind/bind.hpp:382; > #15 operator()<boost::python::detail::exception_handler, boost::function0<void> > (a2=..., a1=..., this=<optimized out>); > at /usr/include/boost/bind/bind_template.hpp:102; > #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:2944,optimiz,optimized,2944,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,2,['optimiz'],['optimized']
Performance,"t>, Zarr<https://zarr.readthedocs.io/en/stable/>, or any other format) is more easily managed from Python, especially if we need to preserve compatibility with Windows.; * Restart capabilities. Summary of proposed changes (incomplete); cc* modules. * Create a single cc folder where all the other cc* folders will live as subfolders.; * Provide a top-level CCWavefunction class, partly modeled on the existing CIWavefunction class to overtake the whole implementation of the CC functionality.; * The class will manage MOInfo,Params, DPD as local data members. This will ensure that the lifetime of these objects is tied to a particular instance of a CC calculation.; * The class will contain the various steps in a CC calculation as methods.; * Move from tstart-tstop to the new timers timer_on-timer_off. DPD Library. * Remove use of static global machinery from DPD member functions.; * Implement proper copy/move assign/construct for the DPD object.; * Implement internal structs with proper constructors as needed.; * Replace c-style arrays/raw pointers with appropriate smart pointer/containers; * Refactor shared state (shared by multiple DPD instances, currently dpd_gbl struct) into singleton(s).; * Note: Memory tracking in its current form is not thread safe and relies on the client code properly locking calls to function that need to perform allocations with a mutex.; * Insert a layer of abstraction between DPD and psio. (slated for deprecation/replacement). For visibility: @lothian<https://github.com/lothian> @CDSherrill<https://github.com/CDSherrill> @andysim<https://github.com/andysim> @jturney<https://github.com/jturney> @fevangelista<https://github.com/fevangelista> @dgasmith<https://github.com/dgasmith>. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/psi4/psi4/issues/1247>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AC9Qdt-9Cic7AcHOMo2bMq1iF3Nyc5FZks5uc6dJgaJpZM4WyQ3->.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247#issuecomment-423216907:3072,perform,perform,3072,https://psicode.org,https://github.com/psi4/psi4/issues/1247#issuecomment-423216907,1,['perform'],['perform']
Performance,"takes in dressed xyz files. The script shows how to turn psi4's exported results into the dressed xyz files. I should write something so the format is available directly. Or this’d be a nice opportunity for a jupyter widget, which @armcdona might try. And @fevangelista has a widget for vib vector arrows that could probably be animated. ```; #!/usr/bin/env python; # coding: utf-8; ​; # In[ ]:; ​; ​; # note the capital ""D"". obtain by `conda install py3dmol -c conda-forge`; import py3Dmol; print(py3Dmol.__version__); ​; ​; # In[ ]:; ​; ​; # run an optfreq calc and write the vibrational analysis to disk in a "".vibrec"" file; ​; # molecule h2odim {; # O -1.551007 -0.114520 0.000000; # H -1.934259 0.762503 0.000000; # H -0.599677 0.040712 0.000000; # --; # 0 1; # O 1.350625 0.111469 0.000000; # H 1.680398 -0.373741 -0.758561; # H 1.680398 -0.373741 0.758561; # units angstrom; # }; ​; # set basis sto-3g; # set e_convergence 9; # set g_convergence gau_verytight; ​; # optimize('mp2', molecule=h2odim); ​; ​; # e, wfn = freq('mp2', molecule=h2odim, return_wfn=True); ​; # set hessian_write on; # vibanal_wfn(wfn, molecule=h2odim); ​; # # A. print all the vib-related info from original `e, wfn = freq()` call; # for k, v in wfn.frequency_analysis.items():; # print(v); ​; # # B. `set hessian_write on` above wrote all the vib- & thermo-related info from last analysis.; # # now, print all the vib- & thermo-related info from that file; # with open(core.get_writer_file_prefix(h2odim.name()) + "".vibrec"") as handle:; # import json; # jsondata = json.load(handle); # jsondata = {k: (v if k in ['molecule', 'hessian'] else json.loads(v)) for k, v in jsondata.items()}; ​; # for k, v in jsondata.items():; # print(k, v); ​; ​; # In[ ]:; ​; ​; import json; with open(""freq_demo.h2odim.6436.vibrec"") as fp:; vibs = json.load(fp); ​; ​; # In[ ]:; ​; ​; # See all the vibrational analysis contents; vibs; ​; ​; # In[ ]:; ​; ​; vibs; vibs[""molecule""][""elez""]; nat = len(vibs[""molecule""][""elez""]); ndof = n",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131:1078,optimiz,optimize,1078,https://psicode.org,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131,1,['optimiz'],['optimize']
Performance,"tarting gradient at new geometry, then zero grad final structure.; > ; > test_odd_start(oddz) # works; > #test_zero_grad(oddz) # should work; > test_badodd_grad(oddz) # works b/c I'm testing against the bad results; > ; > # qu-est-ce que c-est? By RMS Force the optimization looks to proceed; > ; > # nicely. But look at that final gradient with unmoveable large gradient; > ; > # components. It's not orientation, as input is zmat and it's the same with cartesian; > ; > # coordinates in a couple orientations. It's not corruption associated; > ; > # with wavefunction pass, as I've tested an older version. It's not a local; > ; > # minimum as the total gradient wouldn't be so large. It's not too distorted a; > ; > # starting structure, as q-chem and molpro converge to the real minimum promptly. It's not; > ; > # symmetry constrained, as it's c1. I'm at a loss.; > ; > # for oddz; > ; > # start; > ; > # 25.7790013416; > ; > # -139.174980786; > ; > # 0.0581560524872; > ; > # Optimizer: Optimization complete!; > ; > # opt; > ; > # 33.8382916197; > ; > # -139.301327453; > ; > # 0.0422103431176; > ; > #gradient = [; > ; > # [ -0.01135649578523, -0.02871892445843, -0.05475995417434],; > ; > # [ 0.00216387360216, 0.04113784938512, 0.07821983299617],; > ; > # [ 0.00215642675781, 0.04114952366672, 0.07824201651882],; > ; > # [ 0.00563414370780, -0.03413386327141, -0.06481576207381],; > ; > # [ 0.00140205171291, -0.01943458532669, -0.03688613326736]]; > ; > # --------------------------------------------------------------------------------------------------------------- ~; > ; > # Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; > ; > # --------------------------------------------------------------------------------------------------------------- ~; > ; > # 1 -139.174980785934 -139.174980785934 0.08977532 0.06906505 0.39164409 0.25000003 ~; > ; > # 2 -139.237253751032 -0.062272965098 0.08963832 0.05551392 0.44053120 0.25000000 ~; > ; > # 3 -139.282037341604 -0.0447",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-195966638:8592,Optimiz,Optimizer,8592,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638,2,['Optimiz'],"['Optimization', 'Optimizer']"
Performance,"tate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128b530) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #302 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #303 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fac0e0fe470, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #304 PyImport_ImportModuleLevelObject (name=0x7fac0e0fe470, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #305 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #306 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #307 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fac0e0f68c0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #308 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fac0e0f68c0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #309 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0ae880, callargs=0x7fac0e0f68c0, func=0x7fac0e3989a0, trace_info=0x7fff1128b870, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #310 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e32fc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #311 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e32fc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:64716,optimiz,optimized,64716,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"te=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #165 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #166 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #167 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #168 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288dc0, tstate=<optimized out>); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #169 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891aa40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #170 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd891aa40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #171 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #172 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #173 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #174 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e363",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:38184,optimiz,optimized,38184,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"te=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #383 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #384 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510, tstate=0x55ff9515e050); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #385 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e16ddc8, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #386 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d0b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #387 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16dc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #388 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16dc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #389 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #390 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #391 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #392 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:80557,optimiz,optimized,80557,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"te=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; --Type <RET> for more, q to quit, c to continue without paging--; #358 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #359 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #360 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e1d1a30, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #361 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c7f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #362 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e1d18a0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #363 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e1d18a0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #364 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #365 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #366 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128c920, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #367 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:75634,optimiz,optimized,75634,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"thanks. I've redirected the link from current psicode.org. Didn't realize we weren't going to get the domain transferred for a while. And Radovan Bast has sent me a loadtime analysis of the new site, so I should be able to speed that up dramatically.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1584#issuecomment-475874507:165,load,loadtime,165,https://psicode.org,https://github.com/psi4/psi4/issues/1584#issuecomment-475874507,1,['load'],['loadtime']
Performance,tializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Per,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2656,Perform,Performing,2656,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,"tibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #9 0x00007ffff568762b in psi::DPD::buf4_sort(psi::dpdbuf4*, int, psi::indices, int, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (); from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #10 0x00007ffff568fbde in psi::DPD::buf4_sort(psi::dpdbuf4*, int, psi::indices, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #11 0x00007ffff4be5fae in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #12 0x00007ffff4bcd5b3 in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #13 0x00007ffff406c5ab in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #14 0x00007ffff40e5ccb in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #15 0x00007ffff40d4b39 in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #16 0x00007ffff40c71ad in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #17 0x00007ffff40c7235 in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #18 0x00007ffff408bb20 in ?? () from /home/gytibor/p4debug/lib/psi4/core.cpython-39-x86_64-linux-gnu.so; #19 0x00005555556d68f4 in cfunction_call (func=0x7fffb13e0cc0, args=<optimized out>, kwargs=<optimized out>) at /opt/conda/conda-bld/python-split_1654083059479/work/Objects/methodobject.c:543; #20 0x000055555569047f in _PyObject_MakeTpCall (tstate=0x555555920e40, callable=0x7fffb13e0cc0, args=<optimized out>, nargs=<optimized out>, keywords=<optimized out>); at /opt/conda/conda-bld/python-split_1654083059479/work/Objects/call.c:191; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1226460109:3061,optimiz,optimized,3061,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226460109,5,['optimiz'],['optimized']
Performance,ting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2194,Perform,Performing,2194,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,"tion0<void> > (a2=..., a1=..., this=<optimized out>); > at /usr/include/boost/bind/bind_template.hpp:102; > #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132; > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0; > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084; > #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283; > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086; > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); > at Python/ceval.c:3433; > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:4480,optimiz,optimized,4480,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,6,['optimiz'],['optimized']
Performance,"torcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #134 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff112882d0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #135 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11288360) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #136 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #137 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd884ea30, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #138 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd887ef60, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fabd8a587f0, level=2); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #139 0x000055ff9067536b in import_name (level=0x7fac0e300110, fromlist=0x7fabd8a587f0, name=0x7fabd887ef60, f=0x55ff95dcd100, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #140 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95dcd100, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #141 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x55ff95dcd100, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #142 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112886e0, locals=locals@entry=0x7fac0e0f83c0, args=args@entry=0x0, argcount=argcount@entry=0, ; --Type <RET> for more, q to quit, c to continue without paging--; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:32030,optimiz,optimized,32030,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"torcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #180 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff112890a0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #181 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11289130) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #182 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #183 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd8928940, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #184 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd8903a70, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fabd8e6e320, level=1); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #185 0x000055ff9067536b in import_name (level=0x7fac0e3000f0, fromlist=0x7fabd8e6e320, name=0x7fabd8903a70, f=0x7fabdcdb7a00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #186 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabdcdb7a00, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #187 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabdcdb7a00, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #188 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112894b0, locals=locals@entry=0x7fabd8903bc0, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #189 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:41030,optimiz,optimized,41030,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"torcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #254 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128a6d0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #255 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128a760) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #256 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #257 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd89285d0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #258 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd8928580, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fabe4291420, level=1); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #259 0x000055ff9067536b in import_name (level=0x7fac0e3000f0, fromlist=0x7fabe4291420, name=0x7fabd8928580, f=0x7fac0e074610, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #260 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e074610, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #261 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e074610, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #262 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128aae0, locals=locals@entry=0x7fabdcd7a300, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #263 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:55354,optimiz,optimized,55354,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"torcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #366 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128c920, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #367 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128c9b0) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #368 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #369 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fac0e079f30, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #370 PyImport_ImportModuleLevelObject (name=name@entry=0x7fac0e136530, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fac0e104d90, level=1); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #371 0x000055ff9067536b in import_name (level=0x7fac0e3000f0, fromlist=0x7fac0e104d90, name=0x7fac0e136530, f=0x7fac0e16ec00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #372 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16ec00, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #373 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16ec00, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #374 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128cd30, locals=locals@entry=0x7fac0e071580, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #375 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:77143,optimiz,optimized,77143,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"traints_string:; if 'scan' in constraints_dict:; raise ValueError(""No scan!""); Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None). # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr. # Setup an optimizer object; params = geometric.optimize.OptParams(**input_opts); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params). # Print; IC.printConstraints(coords, thre=-1). def compute(coords, opt):; mol_dict = mol_uc2.dict(); mol_dict['geometry'] = coords. inpmodel = {; ""molecule"": mol_dict,; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6""}; }; ret = qcng.compute(inpmodel, ""mopac""); opt.E = ret.properties.return_energy; opt.gradx = ret.return_result; return ret. optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])). while True:; if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; logger.info(""Optmization convereged!""); break. optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); ```. You may want t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:2472,optimiz,optimize,2472,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792,1,['optimiz'],['optimize']
Performance,"try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'energy', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}, ...}; verbose = 1. def dftd3_driver(jobrec, verbose=1):; """"""Drive the jobrec@i (input) -> dftd3rec@i -> dftd3rec@io -> jobrec@io (returned) process. Input Fields; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec) # updates jobrec. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:183:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'energy', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}, ...}; dftd3rec = {'command': ['dftd3', 'dftd3_geometry.xyz'], 'dashlevel': 'd3bj', 'dashparams': {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}, 'dashparams_citation': False, ...}. def dftd3_harvest(jobrec, dftd3rec):; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:13899,load,loads,13899,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['load'],['loads']
Performance,"try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'gradient', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}, ...}; verbose = 1. def dftd3_driver(jobrec, verbose=1):; """"""Drive the jobrec@i (input) -> dftd3rec@i -> dftd3rec@io -> jobrec@io (returned) process. Input Fields; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec) # updates jobrec. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:183:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'gradient', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}, ...}; dftd3rec = {'command': ['dftd3', 'dftd3_geometry.xyz', '-grad'], 'dashlevel': 'd2', 'dashparams': {'alpha6': 20.0, 's6': 1.05, 'sr6': 1.1}, 'dashparams_citation': '', ...}. def dftd3_harvest(jobrec, dftd3rec):; """"",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:5064,load,loads,5064,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['load'],['loads']
Performance,"ts_dict:; > raise ValueError(""No scan!""); > Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string); > ; > ; > # Set up the internal coordinate system; > coordsys = input_opts.get('coordsys', 'tric'); > CoordSysDict = {; > 'cart': (geometric.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:2658,optimiz,optimizer,2658,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275,1,['optimiz'],['optimizer']
Performance,"tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #31 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #32 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; --Type <RET> for more, q to quit, c to continue without paging--; #33 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8697488, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #34 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11286660, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #35 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8697300, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #36 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8697300, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #37 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #38 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #39 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #40 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8891140, callable=0x7fac0e3e5630) ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:12250,optimiz,optimized,12250,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #84 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #85 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #86 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; --Type <RET> for more, q to quit, c to continue without paging--; #87 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112875e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #88 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b7c840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #89 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b7c840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #90 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #91 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #92 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #93 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0) ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:22534,optimiz,optimized,22534,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11288360) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #136 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #137 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd884ea30, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #138 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd887ef60, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fabd8a587f0, level=2); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #139 0x000055ff9067536b in import_name (level=0x7fac0e300110, fromlist=0x7fabd8a587f0, name=0x7fabd887ef60, f=0x55ff95dcd100, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #140 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95dcd100, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #141 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x55ff95dcd100, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #142 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112886e0, locals=locals@entry=0x7fac0e0f83c0, args=args@entry=0x0, argcount=argcount@entry=0, ; --Type <RET> for more, q to quit, c to continue without paging--; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #143 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8882550, globals=globals@entry=0x7fac0e0f83c0, locals=locals@entry=0x7fac0e0f83c0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #144 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e0f83c0, globals=0x7fac0e0f83c0, source=0x7fabd8882550); at /usr/local/src/conda/python-3.10.14/Python/bltinmod",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:32431,optimiz,optimized,32431,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff11289130) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #182 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #183 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd8928940, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #184 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd8903a70, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fabd8e6e320, level=1); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #185 0x000055ff9067536b in import_name (level=0x7fac0e3000f0, fromlist=0x7fabd8e6e320, name=0x7fabd8903a70, f=0x7fabdcdb7a00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #186 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabdcdb7a00, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #187 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fabdcdb7a00, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #188 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112894b0, locals=locals@entry=0x7fabd8903bc0, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #189 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8a87940, globals=globals@entry=0x7fabd8903bc0, locals=locals@entry=0x7fabd8903bc0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #190 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabd8903bc0, globals=0x7fabd8903bc0, source=0x7fabd8a87940); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #191 builtin_exec (module=<optimized out>, args=<optim",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:41431,optimiz,optimized,41431,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128a760) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #256 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #257 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fabd89285d0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #258 PyImport_ImportModuleLevelObject (name=name@entry=0x7fabd8928580, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fabe4291420, level=1); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #259 0x000055ff9067536b in import_name (level=0x7fac0e3000f0, fromlist=0x7fabe4291420, name=0x7fabd8928580, f=0x7fac0e074610, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #260 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e074610, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #261 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e074610, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #262 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128aae0, locals=locals@entry=0x7fabdcd7a300, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #263 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8a86550, globals=globals@entry=0x7fabdcd7a300, locals=locals@entry=0x7fabdcd7a300); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #264 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fabdcd7a300, globals=0x7fabdcd7a300, source=0x7fabd8a86550); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #265 builtin_exec (module=<optimized out>, args=<optim",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:55755,optimiz,optimized,55755,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128c9b0) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #368 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #369 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fac0e079f30, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #370 PyImport_ImportModuleLevelObject (name=name@entry=0x7fac0e136530, globals=<optimized out>, locals=<optimized out>, fromlist=fromlist@entry=0x7fac0e104d90, level=1); at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #371 0x000055ff9067536b in import_name (level=0x7fac0e3000f0, fromlist=0x7fac0e104d90, name=0x7fac0e136530, f=0x7fac0e16ec00, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:6018; #372 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16ec00, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:3695; #373 0x000055ff90714c60 in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16ec00, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #374 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128cd30, locals=locals@entry=0x7fac0e071580, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #375 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fac0e06f7e0, globals=globals@entry=0x7fac0e071580, locals=locals@entry=0x7fac0e071580); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #376 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e071580, globals=0x7fac0e071580, source=0x7fac0e06f7e0); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #377 builtin_exec (module=<optimized out>, args=<optim",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:77544,optimiz,optimized,77544,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"uh-oh, it's finding pedantic errors in integratorxx now `/include/integratorxx/generators/s2_factory.hpp:24:2: error: extra ‘;’ [-Wpedantic]` . this would be a fault of our appending to `CMAKE_CXX_FLAGS`, which wasn't so outrageous back in the day. thinking about it, there would be a lot more of these interferences with other projects if the CI wasn't detecting so much as pre-built. which means that developers building deps from source will likely have builds fail since force_pydantic defualts to ON and if the dep projects aren't pedantic clean. so this was probably a lucky block to the merge. I'm not sure right off if there's a quick+good solution. you could move the option to here https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L222 _after_ the externals have been added. and maybe turn the default to OFF but add it (`-D`) as ON to the azure CI. I'm going to put a needs-changes block so I remember it isn't just a spurious test fail in the merge queue. lmk if you disagree with any of my hasty conclusions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2015930547:968,queue,queue,968,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2015930547,1,['queue'],['queue']
Performance,"uild; Constructing a list of tests; Done constructing a list of tests; Updating test list for fixtures; Added 0 tests to meet fixture requirements; Checking test dependency graph...; Checking test dependency graph end; test 401; Start 401: json-schema_0_properties. 401: Test command: /shared/raimis/opt/miniconda/envs/psi4/bin/python ""/home/raimis/psi4.git/tests/runtest.py"" ""/home/raimis/psi4.git/tests/json/schema_0_properties/input.dat"" ""/home/raimis/psi4.git/linux_build/testresults.log"" ""false"" ""/home/raimis/psi4.git"" ""false"" ""/home/raimis/psi4.git/linux_build/tests/json/json-schema_0_properties/output.dat"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/bin/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/lib/""; 401: Test timeout computed to be: 1500; 401: ; 401: *** tstart() called on computer06; 401: *** at Mon Jul 9 14:44:29 2018; 401: ; 401: => Loading Basis Set <=; 401: ; 401: Name: 6-31G; 401: Role: ORBITAL; 401: Keyword: BASIS; 401: atoms 1 entry O line 117 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/6-31g.gbs ; 401: atoms 2-3 entry H line 26 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/6-31g.gbs ; 401: ; 401: ; 401: ---------------------------------------------------------; 401: SCF; 401: by Justin Turney, Rob Parrish, Andy Simmonett; 401: and Daniel Smith; 401: RHF Reference; 401: 1 Threads, 500 MiB Core; 401: ---------------------------------------------------------; 401: ; 401: ==> Geometry <==; 401: ; 401: Molecular point group: c2v; 401: Full point group: C2v; 401: ; 401: Geometry (in Bohr), charge = 0, multiplicity = 1:; 401: ; 401: Center X Y Z Mass ; 401: ------------ ----------------- ----------------- ----------------- -----------------; 401: O 0.000000000000 0.000000000000 -0.129476941194 15.99491",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174:1425,Load,Loading,1425,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174,1,['Load'],['Loading']
Performance,"ult (tstate=<optimized out>, f=0x55ff95c373d0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #202 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c373d0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #203 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #204 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #205 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #206 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6cf50, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #207 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112899e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #208 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6cdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #209 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6cdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #210 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #211 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:45411,optimiz,optimized,45411,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x55ff95ddd860, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #124 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95ddd860, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #125 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #126 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #127 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #128 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4b831d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #129 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112881a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #130 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b83040, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #131 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b83040, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #132 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #133 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:30151,optimiz,optimized,30151,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x55ff95de00f0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #117 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95de00f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #118 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #119 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #120 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #121 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #122 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287ff0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #123 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95ddd860, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #124 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95ddd860, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #125 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #126 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:28814,optimiz,optimized,28814,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x55ff95e324c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #149 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95e324c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #150 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #151 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #152 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #153 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #154 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288a60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #155 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c4a880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #156 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c4a880, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #157 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #158 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:35074,optimiz,optimized,35074,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fabd8918a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #216 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #217 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #218 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #219 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #220 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe42887a0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #221 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289d40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #222 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4288610, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #223 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4288610, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #224 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #225 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:48085,optimiz,optimized,48085,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fabd891aa40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #170 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd891aa40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #171 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #172 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #173 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #174 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891a3d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #175 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288f70, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #176 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891a240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #177 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd891a240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #178 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #179 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:39151,optimiz,optimized,39151,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fabd8c2ae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #290 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2ae40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #291 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #292 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #293 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #294 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2b1d0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #295 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b370, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #296 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2b040, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #297 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2b040, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #298 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #299 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:62409,optimiz,optimized,62409,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fabd8c4a880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #156 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c4a880, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #157 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #158 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #159 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #160 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8f6f800, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #161 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288c10, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #162 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8f6f680, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #163 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6f680, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #164 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #165 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:36411,optimiz,optimized,36411,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fabd8f6cdd0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #209 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6cdd0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #210 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #211 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #212 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #213 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918bf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #214 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11289b90, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #215 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918a40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #216 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918a40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #217 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #218 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:46748,optimiz,optimized,46748,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fabd8f6f680, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #163 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8f6f680, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #164 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #165 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #166 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #167 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd891abf0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #168 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288dc0, tstate=<optimized out>); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #169 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd891aa40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #170 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd891aa40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #171 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #172 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:37748,optimiz,optimized,37748,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fabd8fa8550, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #269 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8fa8550, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #270 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #271 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #272 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #273 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #274 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ae60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #275 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c483c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #276 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c483c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; --Type <RET> for more, q to quit, c to continue without paging--; #277 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #278 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:58332,optimiz,optimized,58332,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fabe4289b60, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #283 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4289b60, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #284 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #285 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #286 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #287 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c2aff0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #288 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128b1c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #289 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c2ae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #290 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c2ae40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #291 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #292 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:61072,optimiz,optimized,61072,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fabe4b81240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #237 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b81240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #238 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #239 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #240 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #241 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #242 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a3f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #243 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2ca240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #244 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2ca240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #245 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #246 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:52072,optimiz,optimized,52072,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fac0e074420, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #349 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e074420, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #350 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #351 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #352 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #353 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb9f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #354 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c640, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #355 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #356 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #357 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; --Type <RET> for more, q to quit, c to continue without paging--; #358 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:73861,optimiz,optimized,73861,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fac0e16bb50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #335 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16bb50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #336 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #337 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #338 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #339 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #340 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c2e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #341 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3c5000, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #342 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3c5000, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #343 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #344 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:71187,optimiz,optimized,71187,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fac0e16dc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #388 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16dc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #389 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #390 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #391 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #392 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3bf9f0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #393 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d260, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #394 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3bf870, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #395 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3bf870, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #396 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #397 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:81524,optimiz,optimized,81524,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fac0e2ca240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #244 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2ca240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #245 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #246 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #247 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #248 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabe4df3a10, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #249 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a5a0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; --Type <RET> for more, q to quit, c to continue without paging--; #250 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4df3880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #251 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4df3880, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #252 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #253 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:53409,optimiz,optimized,53409,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fac0e2cb240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #402 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #403 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #404 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #405 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #406 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cafd0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #407 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d5c0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #408 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cae40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #409 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cae40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #410 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #411 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:84198,optimiz,optimized,84198,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fac0e32fc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #311 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e32fc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #312 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #313 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #314 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #315 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #316 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ba20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #317 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c6db10, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #318 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c6db10, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #319 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3634a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #320 _PyFunction_Vectorcall (func=0x7fac0e363490, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:66396,optimiz,optimized,66396,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fac0e3bf870, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #395 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3bf870, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #396 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #397 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #398 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #399 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2cb3f0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #400 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128d410, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #401 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2cb240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #402 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2cb240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #403 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #404 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:82861,optimiz,optimized,82861,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"ult (tstate=<optimized out>, f=0x7fac0e3c5000, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #342 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3c5000, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #343 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #344 _PyFunction_Vectorcall (func=0x7fac0e3e5630, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #345 0x000055ff90671c5c in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #346 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e0745a0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #347 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c490, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #348 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e074420, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #349 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e074420, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #350 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #351 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:72524,optimiz,optimized,72524,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"unc=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); > at Python/ceval.c:4378; > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720; > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433; > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433; > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0); > at Python/ceval.c:771; > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; > locals=locals@entry=0x7ffff7ed07a0, flags=flags@entry=0x0, arena=arena@entry=0x28ca640) at Python/pythonrun.c:1981; > #35 0x00007ffff5168335 in PyR",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:6134,optimiz,optimized,6134,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,2,['optimiz'],['optimized']
Performance,und following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Perfo,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2530,Perform,Performing,2530,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,unicorn 21.2.0 py39h2804cbe_0 conda-forge; h5py 3.9.0 nompi_py39he9c2634_101 conda-forge; hdf4 4.2.15 h1a38d6a_5 conda-forge; hdf5 1.14.1 nompi_h3aba7b3_100 conda-forge; icu 72.1 he12128b_0 conda-forge; idna 3.3 pyhd8ed1ab_0 conda-forge; importlib-metadata 4.11.2 py39h2804cbe_0 conda-forge; importlib_metadata 4.11.2 hd8ed1ab_0 conda-forge; importlib_resources 5.4.0 pyhd8ed1ab_0 conda-forge; ipykernel 6.9.1 py39h32adebf_0 conda-forge; ipython 8.0.1 py39h2804cbe_2 conda-forge; ipython_genutils 0.2.0 py_1 conda-forge; ipywidgets 7.6.5 pyhd8ed1ab_0 conda-forge; itsdangerous 2.1.2 pyhd8ed1ab_0 conda-forge; jedi 0.18.1 py39h2804cbe_0 conda-forge; jinja2 3.0.3 pyhd8ed1ab_0 conda-forge; joblib 1.3.0 pyhd8ed1ab_1 conda-forge; jpeg 9e h1c322ee_1 conda-forge; jsonschema 4.4.0 pyhd8ed1ab_0 conda-forge; jupyter_client 7.1.2 pyhd8ed1ab_0 conda-forge; jupyter_core 4.9.2 py39h2804cbe_0 conda-forge; jupyterlab_pygments 0.1.2 pyh9f0ad1d_0 conda-forge; jupyterlab_widgets 1.0.2 pyhd8ed1ab_0 conda-forge; khronos-opencl-icd-loader 2022.09.30 h1a8c8d9_2 conda-forge; kiwisolver 1.4.2 py39h2c803a9_1 conda-forge; krb5 1.21.2 h92f50d5_0 conda-forge; lcms2 2.12 had6a04f_0 conda-forge; lerc 3.0 hbdafb3b_0 conda-forge; libabseil 20220623.0 cxx17_h28b99d4_6 conda-forge; libaec 1.0.6 hb7217d7_1 conda-forge; libarrow 11.0.0 h0b9b5d1_5_cpu conda-forge; libblas 3.9.0 13_osxarm64_openblas conda-forge; libbrotlicommon 1.0.9 h3422bc3_6 conda-forge; libbrotlidec 1.0.9 h3422bc3_6 conda-forge; libbrotlienc 1.0.9 h3422bc3_6 conda-forge; libcblas 3.9.0 13_osxarm64_openblas conda-forge; libcrc32c 1.1.2 hbdafb3b_0 conda-forge; libcurl 8.3.0 hc52a3a8_0 conda-forge; libcxx 15.0.7 h75e25f2_0 conda-forge; libdeflate 1.10 h3422bc3_0 conda-forge; libecpint 1.0.7 habece42_9 conda-forge; libedit 3.1.20191231 hc8eb9b7_2 conda-forge; libev 4.33 h642e427_1 conda-forge; libevent 2.1.10 h7673551_4 conda-forge; libexpat 2.5.0 hb7217d7_1 conda-forge; libffi 3.4.2 h3422bc3_5 conda-forge; libgfortran 5.0.0 12_2_0_hd922786_31 co,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306:4953,load,loader,4953,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306,2,['load'],['loader']
Performance,"up the internal coordinate system; > coordsys = input_opts.get('coordsys', 'tric'); > CoordSysDict = {; > 'cart': (geometric.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; > 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; > 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; > 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); > }; > ; > # Build internal coordinates; > CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; > IC = CoordClass(; > M,; > build=True,; > connect=connect,; > addcart=addcart,; > constraints=Cons,; > cvals=CVals[0] if CVals is not None else None); > ; > ; > ; > # Get initial coordinates in bohr; > coords = M.xyzs[0].flatten() * geometric.nifty.ang2bohr; > ; > # Setup an optimizer object; > params = geometric.optimize.OptParams(**input_opts); > optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); > ; > # Print; > IC.printConstraints(coords, thre=-1); > ; > def compute(coords, opt):; > mol_dict = mol_uc2.dict(); > mol_dict['geometry'] = coords; > ; > inpmodel = {; > ""molecule"": mol_dict,; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6""}; > }; > ret = qcng.compute(inpmodel, ""mopac""); > opt.E = ret.properties.return_energy; > opt.gradx = ret.return_result; > return ret; > ; > ; > optimizer.calcEnergyForce(); > optimizer.prepareFirstStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ; > while True:; > if optimizer.state in [geometric.optimize.OPT_STATE.CONVERGED, geometric.optimize.OPT_STATE.FAILED]:; > logger.info(""Optmization convereged!""); > break; > ; > optimizer.step(); > optimizer.calcEnergyForce(); > optimizer.evaluateStep(); > logger.info(""[AU]: e=%.5f bl=%.5f,%.5f g=%.4f"" % (; > optimizer.E, optimizer.X[0],optimizer.X[3], optimizer.gradx[0])); > ```; > ; > You may want to bu",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:2764,Optimiz,Optimizer,2764,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275,1,['Optimiz'],['Optimizer']
Performance,"upation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 6-31G**; Blend: 6-31G**; Number of shells: 12; Number of basis function: 25; Number of Cartesian functions: 25; Spherical Harmonics?: false; Max angular momentum: 2. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A1 12 12 0 0 0 0; A2 2 2 0 0 0 0; B1 4 4 0 0 0 0; B2 7 7 0 0 0 0; -------------------------------------------------------; Total 25 25 5 5 5 0; -------------------------------------------------------. ==> Integral Setup <==. Using in-core PK algorithm.; Calculation information:; Number of atoms: 3; Number of AO shells: 12; Number of primitives: 25; Number of atomic orbitals: 25; Number of basis functions: 25. Integral cutoff 1.00e-12; Number of threads: 1. Performing in-core PK; Using 105950 doubles for integral storage.; We computed 3081 shell quartets total.; Whereas there are 3081 unique shell quartets.; ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory (MB): 375; Schwarz Cutoff: 1E-12. OpenMP threads: 1; Minimum eigenvalue in the overlap matrix is 2.3361254517E-02.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter 0: -75.89338120057249 -7.58934e+01 1.07730e-01 ; @RHF iter 1: -75.98060436750765 -8.72232e-02 1.95692e-02 ; @RHF iter 2: -76.00861798186263 -2.80136e-02 1.04925e-02 DIIS; @RHF iter 3: -76.01673061204843 -8.11263e-03 1.56037e-03 DIIS; @RHF iter 4: -76.01722494225463 -4.94330e-04 5.00914e-04 DIIS; @RHF iter 5: -76.01729299826569 -6.80560e-05 1.02319e-04 DIIS; @RHF iter 6: -76.01729647642517 -3.47816e-06 1.57456e-05 DIIS; @RHF iter 7: -76.01729655361160 -7.71864e-08 2.57884e-06 DIIS; @RHF iter 8:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339412812:4409,Perform,Performing,4409,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812,1,['Perform'],['Performing']
Performance,"upation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 3-21G; Blend: 3-21G; Number of shells: 4; Number of basis function: 4; Number of Cartesian functions: 4; Spherical Harmonics?: false; Max angular momentum: 0. => Loading Basis Set <=. Name: (3-21G AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry HE line 39 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/def2-svp-jkfit.gbs . ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 4 4 0 0 0 0; -------------------------------------------------------; Total 4 4 1 1 1 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory [MiB]: 375; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (3-21G AUX); Blend: DEF2-SVP-JKFIT; Number of shells: 18; Number of basis function: 50; Number of Cartesian functions: 50; Spherical Harmonics?: false; Max angular momentum: 2. Minimum eigenvalue in the overlap matrix is 4.0357381281E-01.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter SAD: -2.83568135919461 -2.83568e+00 0.00000e+00 ; @DF-UHF iter 1: -2.83568840083719 -7.04164e-06 9.00011e-05 DIIS; @DF-UHF iter 2: -2.83568849893678 -9.80996e-08 1.09058e-05 DIIS; @DF-UHF iter 3: -2.83568850042063 -1.48385e-09 4.55093e-08 DIIS; @DF-UHF iter 4: -2.83568850042064 -1.28786e-14 1.52740e-10 DIIS; @DF-UHF iter 5: -2.83568850042064 -8.88178e-16 9.96306e-12 DIIS; @DF-UHF iter 6: -2.83568850042064 2.22045e-15 2.48440e-16 DIIS; Energy and w",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:3433,Cache,Cache,3433,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,1,['Cache'],['Cache']
Performance,"using intel-gdb I am getting a segfault at:; `0x00002aaac4d3f06e in std::local_Rb_tree_decrement (__x=0x2aaaae4b3ff0 <psi::SphericalGrid::lebedev_mapping_+8>)`. Possibly multi-threading related, since I have not seen an error for single-threaded _yet_.; edit: Also no error for a `debug` compilation yet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1366#issuecomment-441222929:170,multi-thread,multi-threading,170,https://psicode.org,https://github.com/psi4/psi4/issues/1366#issuecomment-441222929,1,['multi-thread'],['multi-threading']
Performance,"ut>, args=0x7fabd8b7c9c0, callable=0x7fac0e3e5630) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; --Type <RET> for more, q to quit, c to continue without paging--; #87 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff112875e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #88 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b7c840, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4198; #89 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b7c840, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #90 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3620f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #91 _PyFunction_Vectorcall (func=0x7fac0e3620e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #92 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #93 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8918df0, callable=0x7fac0e3620e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #94 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287790, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #95 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8918c40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #96 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8918c40, tstate=0x55ff9515e050) at /usr/local/src/conda/pyt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:23094,optimiz,optimized,23094,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,3,['optimiz'],['optimized']
Performance,"ux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; atoms 2 entry O line 190 file /Users/loriab/linux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; atoms 3-4 entry H line 20 file /Users/loriab/linux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; ```; - [x] 7. soon after all the new basis stuff went in Nov 2014, Jet added another layer in qcdb pyconstruct to make CABS basis sets work. unfortunately, this broke one of the key principles/advantages of the new scheme. not that i remember exactly what that principle was, though it was probably that the basis could be re-constituted by `basis mybas {...}` mybas name; - [x] 8. fix the 5-zeta and 6-zeta orbital defaulting to quad-zeta fitting as in noted in #144 ; - [x] 9. Switch out Pople basis fitting bases to appropriate-zeta def2-*-ri/jkfit, rather than Dunning ri/jkfit, as former has fewer element holes. (as noted in #144); - [x] 10. Create (maybe?) another layer of defaulting so that aug-cc-pvdz orbital uses aug-cc-pvdz-ri/jkfit when available (as at present), then def2-tzvp-ri/jkfit (not at present), then the ultimate default def2-qzvpp-ri/jkfit (as at present). This way don't get high AM cost on supposedly cheap orbital basis sets. (as noted in #144); - [x] 11. drop DUAL and pick up perhaps others in http://psicode.org/psi4manual/master/basissets_byfamily.html; - [x] 12. thoroughly update basisset.rst, especially examples; - [x] 13. reexamine the PSIPATH basis load ordering and make sure that there's a way to install new basissets in the conda package w/o overwriting library files; - [x] 14. the python object name (mybas in above) is the key handle by which a user-def basis can be reapplied to new molecules, but this can be anonymous (if mybas omitted definitely; and maybe if defined conventionally through ""set basis"" if all turned into functions). would be handy to have a name to print in the output file (some sort of aug-cc-pvdz+cc-pvdz+6-31g) as well as the handle by which it's retrievable. That's all I can think of for now. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/43#issuecomment-189541354:3223,load,load,3223,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-189541354,1,['load'],['load']
Performance,v nfc: 1 occ*.....................................PASSED; 	mp2 grad rhf conv nfc: 1 occ*.....................................PASSED; 	mp2 grad rhf df fc: 2 occ.........................................PASSED; 	mp2 grad rhf df fc: 2 occ.........................................PASSED; 	mp2 grad rhf df fc: 2 occ.........................................PASSED; 	mp2 grad rhf df fc: 2 dfmp2*......................................PASSED; 	mp2 grad rhf df fc: 2 dfmp2*......................................PASSED; 	mp2 grad rhf df fc: 2 dfmp2*......................................PASSED; 	mp2 grad rhf df nfc: 2 occ........................................PASSED; 	mp2 grad rhf df nfc: 2 occ........................................PASSED; 	mp2 grad rhf df nfc: 2 occ........................................PASSED; 	mp2 grad rhf df nfc: 2 dfmp2*.....................................PASSED; 	mp2 grad rhf df nfc: 2 dfmp2*.....................................PASSED; 	mp2 grad rhf df nfc: 2 dfmp2*.....................................PASSED; 	mp2 grad uhf conv nfc: 1 occ*.....................................PASSED; 	mp2 grad uhf conv nfc: 1 occ*.....................................PASSED; 	mp2 grad uhf conv nfc: 1 occ*.....................................PASSED; 	mp2 grad uhf conv nfc: 1 occ*.....................................PASSED; 	mp2 grad uhf df fc: 1 occ*........................................PASSED; 	mp2 grad uhf df fc: 1 occ*........................................PASSED; 	mp2 grad uhf df fc: 1 occ*........................................PASSED; 	mp2 grad uhf df nfc: 1 occ*.......................................PASSED; 	mp2 grad uhf df nfc: 1 occ*.......................................PASSED; 	mp2 grad uhf df nfc: 1 occ*.......................................PASSED; Performing finite difference calculations; 13 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13; 	mp2 grad rohf df nfc: findif......................................PASSED; ...; *** findif gradient passes ***; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-276218358:2682,Perform,Performing,2682,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276218358,1,['Perform'],['Performing']
Performance,"val.h:46; #142 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff112886e0, locals=locals@entry=0x7fac0e0f83c0, args=args@entry=0x0, argcount=argcount@entry=0, ; --Type <RET> for more, q to quit, c to continue without paging--; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #143 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fabd8882550, globals=globals@entry=0x7fac0e0f83c0, locals=locals@entry=0x7fac0e0f83c0); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #144 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e0f83c0, globals=0x7fac0e0f83c0, source=0x7fabd8882550); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; #145 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #146 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e0d4c58, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #147 0x000055ff90677205 in do_call_core (kwdict=0x7fabd8938500, callargs=0x7fac0e0d4c40, func=0x7fac0e398e00, trace_info=0x7fff112888b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #148 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95e324c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #149 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95e324c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #150 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #151 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:33737,optimiz,optimized,33737,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"val.h:46; #328 _PyEval_Vector (tstate=tstate@entry=0x55ff9515e050, con=con@entry=0x7fff1128bf60, locals=locals@entry=0x7fac0e072700, args=args@entry=0x0, argcount=argcount@entry=0, ; kwnames=kwnames@entry=0x0) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #329 0x000055ff90714ba7 in PyEval_EvalCode (co=co@entry=0x7fac0e1b7050, globals=globals@entry=0x7fac0e072700, locals=locals@entry=0x7fac0e072700); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:1134; #330 0x000055ff9071bdaa in builtin_exec_impl (module=<optimized out>, locals=0x7fac0e072700, globals=0x7fac0e072700, source=0x7fac0e1b7050); at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:1058; --Type <RET> for more, q to quit, c to continue without paging--; #331 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/clinic/bltinmodule.c.h:371; #332 0x000055ff90681bf3 in cfunction_vectorcall_FASTCALL (func=0x7fac0e398e00, args=0x7fac0e1a1898, nargsf=<optimized out>, kwnames=<optimized out>); at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:430; #333 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0728c0, callargs=0x7fac0e1a1880, func=0x7fac0e398e00, trace_info=0x7fff1128c130, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #334 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16bb50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #335 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16bb50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #336 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #337 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:69850,optimiz,optimized,69850,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); > compare_values(e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene'); > compare_matrices(zerograd, g, 3, 'opt ZERO grad'); > ; > def test_odd_start(mol):; > g0 = gradient('mp2', molecule=mol); > compare_values(odd_nre_start, mol.nuclear_repulsion_energy(), 1, 'start nre'); > compare_values(odd_e_start, get_variable('CURRENT ENERGY'), 3, 'start ene'); > compare_values(odd_rmsg_start, g0.rms(), 4, 'start rms grad'); > compare_matrices(odd_g_start, g0, 3, 'start grad'); > ; > def test_badodd_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(odd_nre_opt, mol.nuclear_repulsion_energy(), 2, 'opt nre nogood'); > compare_values(odd_e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene nogood'); > compare_values(odd_rmsg_opt, g.rms(), 4, 'opt grad nogood'); > ; > test_norm_start(normz); > test_zero_grad(normz); > ; > # And behold, the initial gradient matches Q-Chem, the optimization; > ; > # progresses nicely, the RMS Force column goes to zero, and the gradient; > ; > # at the end is zero.; > ; > # start nre.........................................................PASSED; > ; > # start ene.........................................................PASSED; > ; > # start rms grad....................................................PASSED; > ; > # start grad........................................................PASSED; > ; > #Optimizer: Optimization complete!; > ; > # opt nre...........................................................PASSED; > ; > # opt ene...........................................................PASSED; > ; > # opt ZERO grad.....................................................PASSED; > ; > # --------------------------------------------------------------------------------------------------------------- ~; > ; > # Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; > ; > # -------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-195966638:4316,optimiz,optimization,4316,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638,1,['optimiz'],['optimization']
Performance,variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2779,Perform,Performing,2779,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Perform'],['Performing']
Performance,"ver responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/doctools.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/underscore.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.cookie.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/jquery.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to load resource: the server responded with a status of 404 (Not Found); index.html:368 Uncaught ReferenceError: $ is not defined; http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/pygments.css Failed to load resource: the server responded with a status of 404 (Not Found); http://psicode.org/psi4manual/master/_static/psi4.css Failed to load resource: the server responded with a status of 404 (Not Found); Is anyone else seeing this problem? Possibly related?. —AJ. On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (notifications@github.com) wrote:. I'm not observing any of this behavior, so just to clarify: does anyone; actually get this ""redirection"" when you enter ""psicode.org"" on your URL; bar? Or do you just get this when you search for PSI4 on; G",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210015028:1808,load,load,1808,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210015028,1,['load'],['load']
Performance,"wdict=0x7fabd88870c0, callargs=0x7fabd8a583d0, func=0x7fac0e3989a0, trace_info=0x7fff11287e40, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #116 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95de00f0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #117 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95de00f0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #118 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #119 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #120 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #121 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95ddda10, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #122 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287ff0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #123 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95ddd860, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #124 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95ddd860, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #125 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:28610,optimiz,optimized,28610,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"wdict=0x7fabd8902480, callargs=0x7fac0e0e6fc0, func=0x7fac0e398e00, trace_info=0x7fff1128acb0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #268 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8fa8550, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #269 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8fa8550, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #270 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #271 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #272 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #273 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c48548, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #274 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ae60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #275 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c483c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #276 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c483c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; --Type <RET> for more, q to quit, c to continue without paging--; #277 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<opti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:58128,optimiz,optimized,58128,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"wdict=0x7fabd89038c0, callargs=0x7fabd8e6c550, func=0x7fac0e3989a0, trace_info=0x7fff1128a240, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #236 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabe4b81240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #237 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabe4b81240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #238 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #239 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #240 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #241 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e2ca3f0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #242 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128a3f0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #243 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e2ca240, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #244 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e2ca240, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #245 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:51868,optimiz,optimized,51868,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"wdict=0x7fabd8938500, callargs=0x7fac0e0d4c40, func=0x7fac0e398e00, trace_info=0x7fff112888b0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #148 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95e324c0, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #149 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95e324c0, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #150 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #151 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #152 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #153 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8c4aa08, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #154 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11288a60, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #155 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8c4a880, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #156 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8c4a880, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #157 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:34870,optimiz,optimized,34870,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"wdict=0x7fac0e0728c0, callargs=0x7fac0e1a1880, func=0x7fac0e398e00, trace_info=0x7fff1128c130, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #334 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e16bb50, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #335 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e16bb50, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #336 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #337 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #338 0x000055ff90676142 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #339 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fac0e3c5188, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #340 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128c2e0, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #341 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e3c5000, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4181; #342 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e3c5000, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #343 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3e5640, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:70983,optimiz,optimized,70983,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"wdict=0x7fac0e0ae880, callargs=0x7fac0e0f68c0, func=0x7fac0e3989a0, trace_info=0x7fff1128b870, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5917; #310 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fac0e32fc40, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4277; #311 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fac0e32fc40, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #312 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e361520, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #313 _PyFunction_Vectorcall (func=0x7fac0e361510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #314 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #315 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x55ff95c6dcc0, callable=0x7fac0e361510) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #316 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff1128ba20, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #317 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x55ff95c6db10, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #318 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x55ff95c6db10, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #319 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e3634a0, tstate=0x55ff9515e050)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:66192,optimiz,optimized,66192,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,1,['optimiz'],['optimized']
Performance,"well, COSX was developed for ORCA :-); Very high accuracy needs rather large grids in my experience, but that is fine. Not needed for most cases. Turbomole showed the implementation can be tuned as well. I like the method a lot, but I don't think I will have time to implement it. Maybe the existing pseudo-spectral code makes an implementation easier, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1669#issuecomment-503735519:189,tune,tuned,189,https://psicode.org,https://github.com/psi4/psi4/issues/1669#issuecomment-503735519,1,['tune'],['tuned']
Performance,"x-gnu-g++; I_MPI_ROOT=/home/termo/intel/compilers_and_libraries_2018.2.199/linux/mpi; _=/usr/bin/printenv; ```. cat /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; ```; # psi4DepsIntelCache.cmake; # ------------------------; #; # This module sets some likely variable values to initialize the CMake; # cache for dependencies to build your Psi4 source.; # Note that this uses user-provided (non-conda) tools.; #; # See ``psi4-path-advisor`` (or cmake command below) for use.; #; # >>> /home/termo/miniconda3/envs/p4dev35/bin/cmake \; # -H. \; # -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake \; # -Bobjdir; #. set(CMAKE_C_COMPILER ""icc"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""icpc"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER ""ifort"" CACHE STRING """"). set(CMAKE_C_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_Fortran_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"). #set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); ```; --> same error at same place as earlier... icpc -gnu-prefix=x86_64-conda_cos6-linux-gnu- hello.cc -o hello && ./hello; ```; In file included from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/x86_64-conda_cos6-linux-gnu/bits/os_defines.h(39),; from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/x86_64-conda_cos6-linux-gnu/bits/c++config.h(533),; from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/iostream(38),; from hello.cc(1):; /usr/include/features.h(367): catastrophic error: cannot open source file ""sys/cdefs.h""; # include <sys/cdefs.h>; ^. compilation ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448:10653,CACHE,CACHE,10653,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448,3,['CACHE'],['CACHE']
Performance,"x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #300 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff1128b4a0, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #301 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128b530) at /usr/local/src/conda/python-3.10.14/Objects/call.c:734; #302 0x000055ff9068f419 in _PyObject_CallMethodIdObjArgs (obj=0x0, name=name@entry=0x55ff908b9b00 <PyId__find_and_load.6>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:824; #303 0x000055ff905b2187 in import_find_and_load (abs_name=0x7fac0e0fe470, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Python/import.c:1522; #304 PyImport_ImportModuleLevelObject (name=0x7fac0e0fe470, globals=<optimized out>, locals=<optimized out>, fromlist=0x0, level=0); --Type <RET> for more, q to quit, c to continue without paging--; at /usr/local/src/conda/python-3.10.14/Python/import.c:1623; #305 0x000055ff9069aca8 in builtin___import__ (self=<optimized out>, args=<optimized out>, kwds=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/bltinmodule.c:272; #306 0x000055ff906815a6 in cfunction_call (func=0x7fac0e3989a0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/methodobject.c:543; #307 0x000055ff9068e067 in _PyObject_Call (kwargs=<optimized out>, args=0x7fac0e0f68c0, callable=0x7fac0e3989a0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Objects/call.c:305; #308 PyObject_Call (callable=0x7fac0e3989a0, args=0x7fac0e0f68c0, kwargs=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:317; #309 0x000055ff90677205 in do_call_core (kwdict=0x7fac0e0ae880, callargs=0x7fac0e0f68c0, func=0x7fac0e3989a0, trace_info=0x7fff1128b870, tstate=<optimiz",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:64277,optimiz,optimized,64277,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"y.cookie.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/jquery.js Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sections.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_codeprompt.js Failed; > to load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/toggle_sidebar.js Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_images/psi4banner.png Failed to; > load resource: the server responded with a status of 404 (Not Found); > index.html:368 Uncaught ReferenceError: $ is not defined; > http://psicode.org/psi4manual/master/_static/favicon-psi4.ico Failed to; > load resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/pygments.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > http://psicode.org/psi4manual/master/_static/psi4.css Failed to load; > resource: the server responded with a status of 404 (Not Found); > Is anyone else seeing this problem? Possibly related?; > ; > —AJ; > ; > On April 14, 2016 at 11:37:37 AM, T. Daniel Crawford (; > notifications@github.com) wrote:; > ; > I'm not observing any of this behavior, so just to clarify: does anyone; > actually get this ""redirection"" when you enter ""psicode.org"" on your URL; > bar? Or do you just get this when you search for PSI4 on; > Google/Yahoo/Bing? NB: When I put ""PSI4"" in those search engines, I get; > only our correct site for the first page of hits (except for the Wikipedia; > page on ""Psi4 Aurigae""). And yes, we have control of the domain via; > godaddy.com.; > ; > -TDC; > ; > ## ; > ; > Prof. T. Daniel Crawford; > crawd",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/342#issuecomment-210017774:2662,load,load,2662,https://psicode.org,https://github.com/psi4/psi4/issues/342#issuecomment-210017774,1,['load'],['load']
Performance,"y=0, kwdefs=0x0, closure=0x0) ; > > at Python/ceval.c:3433 ; > > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633 ; > > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084 ; > > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0) ; > > at Python/ceval.c:4378 ; > > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720 ; > > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433 ; > > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161 ; > > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084 ; > > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433 ; > > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0) ; > > at Python/ceval.c:771 ; > > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:6512,optimiz,optimized,6512,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,6,['optimiz'],['optimized']
Performance,"y=0x560259cb7470, filename=filename@entry=0x7f21abe2c090, ; start=start@entry=257, globals=globals@entry=0x7f21abff9900, locals=locals@entry=0x7f21abff9900, ; closeit=closeit@entry=1, flags=0x7ffc67b36bd0); at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:1643; #37 0x000056022aa6420e in _PyRun_SimpleFileObject (fp=0x560259cb7470, filename=0x7f21abe2c090, closeit=1, ; flags=0x7ffc67b36bd0) at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:433; #38 0x000056022aa63ee4 in _PyRun_AnyFileObject (fp=0x560259cb7470, filename=filename@entry=0x7f21abe2c090, ; closeit=closeit@entry=1, flags=flags@entry=0x7ffc67b36bd0); at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:78; #39 0x000056022aa5cf42 in pymain_run_file_obj (skip_source_first_line=0, filename=0x7f21abe2c090, ; program_name=0x7f21abe2c270) at /usr/local/src/conda/python-3.12.5/Modules/main.c:360; --Type <RET> for more, q to quit, c to continue without paging--; #40 pymain_run_file (config=0x56022ada5c38 <_PyRuntime+77720>); at /usr/local/src/conda/python-3.12.5/Modules/main.c:379; #41 pymain_run_python (exitcode=0x7ffc67b36ba4) at /usr/local/src/conda/python-3.12.5/Modules/main.c:633; #42 Py_RunMain () at /usr/local/src/conda/python-3.12.5/Modules/main.c:713; #43 0x000056022aa147e7 in Py_BytesMain (argc=<optimized out>, argv=<optimized out>); at /usr/local/src/conda/python-3.12.5/Modules/main.c:767; #44 0x00007f21b9bd3088 in __libc_start_call_main (main=main@entry=0x56022aa14720 <main>, argc=argc@entry=6, ; argv=argv@entry=0x7ffc67b36e38) at ../sysdeps/nptl/libc_start_call_main.h:58; #45 0x00007f21b9bd314b in __libc_start_main_impl (main=0x56022aa14720 <main>, argc=6, argv=0x7ffc67b36e38, ; init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7ffc67b36e28); at ../csu/libc-start.c:360; #46 0x000056022aa14681 in _start (); (gdb) ; ```; which corresponds to; https://github.com/psi4/psi4/blob/3484122eaaec9e185bc33581c6cdef4669f21534/psi4/src/psi4/libmints/eribase.cc#L241",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969:10178,optimiz,optimized,10178,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969,5,['optimiz'],['optimized']
Performance,"y_analysis.items():; # print(v); ​; # # B. `set hessian_write on` above wrote all the vib- & thermo-related info from last analysis.; # # now, print all the vib- & thermo-related info from that file; # with open(core.get_writer_file_prefix(h2odim.name()) + "".vibrec"") as handle:; # import json; # jsondata = json.load(handle); # jsondata = {k: (v if k in ['molecule', 'hessian'] else json.loads(v)) for k, v in jsondata.items()}; ​; # for k, v in jsondata.items():; # print(k, v); ​; ​; # In[ ]:; ​; ​; import json; with open(""freq_demo.h2odim.6436.vibrec"") as fp:; vibs = json.load(fp); ​; ​; # In[ ]:; ​; ​; # See all the vibrational analysis contents; vibs; ​; ​; # In[ ]:; ​; ​; vibs; vibs[""molecule""][""elez""]; nat = len(vibs[""molecule""][""elez""]); ndof = nat * 3; vibs[""molecule""][""geom""]; ​; ​; # In[ ]:; ​; ​; # load Cartesian normal modes matrix into numpy and reshape it; import numpy as np; import qcelemental as qcel; from qcelemental import Datum; datum_x = json.loads(vibs[""x""])[""data""]; len(datum_x); datum_x = np.array(datum_x).reshape((ndof, ndof)).T.round(2); datum_x; ​; ​; # In[ ]:; ​; ​; # form ugly XYZ file strings for each mode where; # * first col is atomic symbol,; # * cols 2-4 are geometry in Ang,; # * and 5-7 are displacement; # * note that XYZ file strings are in list `xyzs` that is 1-indexed; geom = np.array(vibs[""molecule""][""geom""]).reshape((-1, 3)); print(geom); geom_ang = geom * 0.529; ​; xyzs = [None]; for mod in range(ndof):; nmode = datum_x[mod].reshape((-1, 3)); print(nmode); smode = [str(nat), f""vib mode {mod+1}""]; for iat, (atg, atd) in enumerate(zip(geom_ang, nmode)):; atln = [*atg, *atd]; atln = "" "".join([str(at) if abs(at)>1.e-8 else ""0.0"" for at in atln]); atln = vibs[""molecule""][""elem""][iat] + "" "" + atln; smode.append(atln); smode = (""\n"".join(smode)).lstrip(); print(smode); xyzs.append(smode); ​; ​; # In[ ]:; ​; ​; # view mode number 9 (xyzs[9]); xyzview = py3Dmol.view(width=400,height=400); xyzview.addModel(xyzs[9],'xyz',{'vibrate': {'frames",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131:2319,load,loads,2319,https://psicode.org,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131,1,['load'],['loads']
Performance,"yes I want to optimize this molecule, but even:; ```; set scf_type df; set BASIS def2-SV(P); energy('pbe'); ```; fail to converge.; with ""set basis_guess True"" it will converge energy (but not in optimization after 2-3 iterations); optimize('HF') converges fine",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-432321135:14,optimiz,optimize,14,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-432321135,3,['optimiz'],"['optimization', 'optimize']"
Performance,"ython; import qcengine as qcng; import qcelemental as qcel; import geometric; import pkg_resources; import logging.config; import sys. mol_uc2 = qcel.models.Molecule.from_data(; """"""; O 0 0 0; H 0 0 1; H 0 1 0; """"""; ). input_data = {; ""keywords"": {; ""convergence_set"": ""GAU_LOOSE"",; ""coordsys"": ""tric"",; ""maxiter"": 25,; ""enforce"": 0.1,; ""constraints"": {; ""set"": [; {""type"": ""distance"", ""indices"": [0, 1], ""value"": 1},; ]; },; # ""program"": ""psi4"",; ""program"": ""mopac"",; },; ""input_specification"": {; ""driver"": ""gradient"",; ""model"": {""method"": ""pm6-d3""},; # ""model"": {""method"": ""b3lyp-d3"", ""basis"": ""sto-3g""},; },; ""initial_molecule"": mol_uc2.dict(),; }. # Set a temporary logger to capture output; log_stream = geometric.nifty.RawStreamHandler(stream=sys.stdout); #log_stream = geometric.nifty.RawStreamHandler(stream=StringIO()); logger = geometric.nifty.logger; logger.addHandler(log_stream). # Parse JSON; input_opts = geometric.run_json.parse_input_json_dict(input_data); M, engine = geometric.optimize.get_molecule_engine(**input_opts). # Handle constraints; constraints_dict = input_opts.get('constraints', {}); constraints_string = geometric.run_json.make_constraints_string(constraints_dict); Cons, CVals = None, None; if constraints_string:; if 'scan' in constraints_dict:; raise ValueError(""No scan!""); Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string). # Set up the internal coordinate system; coordsys = input_opts.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }. # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792:1240,optimiz,optimize,1240,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-587530792,1,['optimiz'],['optimize']
Performance,"ythonrun.c:1722; --Type <RET> for more, q to quit, c to continue without paging--; #25 0x000056022aa4bf4b in run_mod (mod=mod@entry=0x56025a306440, ; filename=filename@entry=0x56022ad98b00 <_PyRuntime+24160>, globals=globals@entry=0x7f21abff9900, ; locals=locals@entry=0x7f21abff9900, flags=flags@entry=0x7ffc67b366b8, arena=arena@entry=0x7f215015b370); at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:1743; #26 0x000056022aa3ccb2 in PyRun_StringFlags (; str=str@entry=0x56025a2d4098 ""\nimport psi4\nfrom psi4 import *\nfrom psi4.core import *\nfrom psi4.driver.diatomic import anharmonicity\nfrom psi4.driver.gaussian_n import *\nfrom psi4.driver.frac import ip_fitting, frac_traverse\nfrom ""..., start=start@entry=257, globals=globals@entry=0x7f21abff9900, ; locals=locals@entry=0x7f21abff9900, flags=flags@entry=0x7ffc67b366b8); at /usr/local/src/conda/python-3.12.5/Python/pythonrun.c:1618; #27 0x000056022aa47f97 in builtin_exec_impl (module=<optimized out>, closure=<optimized out>, ; locals=0x7f21abff9900, globals=0x7f21abff9900, source=0x56025a2d4070); at /usr/local/src/conda/python-3.12.5/Python/bltinmodule.c:1121; #28 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>, ; kwnames=<optimized out>) at /usr/local/src/conda/python-3.12.5/Python/clinic/bltinmodule.c.h:586; #29 0x000056022a986246 in cfunction_vectorcall_FASTCALL_KEYWORDS (func=<optimized out>, args=0x7f21b9ea9078, ; nargsf=<optimized out>, kwnames=0x0) at /usr/local/src/conda/python-3.12.5/Objects/methodobject.c:438; #30 0x000056022a985fcf in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=9223372036854775809, ; args=0x7f21b9ea9078, callable=0x7f21abf9c770, tstate=0x56022ae03058 <_PyRuntime+459704>); at /usr/local/src/conda/python-3.12.5/Include/internal/pycore_call.h:92; #31 PyObject_Vectorcall (callable=0x7f21abf9c770, args=0x7f21b9ea9078, nargsf=9223372036854775809, ; kwnames=0x0) at /usr/local/src/conda/python-3.12.5/Objects/call.c:325; --Type <RET> for more, q to qui",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969:6813,optimiz,optimized,6813,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969,2,['optimiz'],['optimized']
Performance,"zed out>, args=<optimized out>, locals=0x0, con=0x7fac0e3632f0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #98 _PyFunction_Vectorcall (func=0x7fac0e3632e0, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #99 0x000055ff90671850 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #100 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7fabd8b321b0, callable=0x7fac0e3632e0) at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:123; #101 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff11287940, tstate=<optimized out>); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5893; #102 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fabd8b32020, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.14/Python/ceval.c:4213; #103 0x000055ff90681a2c in _PyEval_EvalFrame (throwflag=0, f=0x7fabd8b32020, tstate=0x55ff9515e050) at /usr/local/src/conda/python-3.10.14/Include/internal/pycore_ceval.h:46; #104 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7fac0e363380, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Python/ceval.c:5067; #105 _PyFunction_Vectorcall (func=0x7fac0e363370, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.14/Objects/call.c:342; #106 0x000055ff90681208 in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=2, args=0x7fff11287a70, callable=0x7fac0e363370, tstate=0x55ff9515e050); at /usr/local/src/conda/python-3.10.14/Include/cpython/abstract.h:114; #107 object_vacall (tstate=tstate@entry=0x55ff9515e050, base=base@entry=0x0, callable=0x7fac0e363370, vargs=0x7fff1128",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430:25197,optimiz,optimized,25197,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326038430,2,['optimiz'],['optimized']
Performance,"ı think it should be ""Added density-fitted and Cholesky decomposed orbital-optimized MP2"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367#issuecomment-221835606:75,optimiz,optimized,75,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-221835606,1,['optimiz'],['optimized']
Safety," 840] (https://doi.org/10.1016/S0009-2614(99)00206-7). . So, I looked at this 90 degrees twisted C2H4 example, expecting the lower-energy symmetry-broken solution to give an unphysical dipole moment. What I found surprised me. The problem here is that the ""symmetric solution"" that we've been discussing is actually a symmetry-broken solution. At 90 degrees, the true symmetry of the molecule is D2d. Since this is a non-Abelian group, Psi4 (and most codes) can't run it as D2d, so it gets run in a subgroup. Here, there are 2 choices for subgroups, C2v and D2. Psi4 picks C2v, very unfortunately, and in that subgroup, it finds a wavefunction that is very symmetry broken (compared to the full symmetry D2d), and it gets a really large, totally unphysical dipole moment of 3.2 debye. . I haven't yet managed to convince Psi4 that D2 is an acceptable subgroup at the 90 degrees geometry, but if I set the torsion angle to just off of 90 degrees (say, 89.9 deg), the code correctly detects D2 symmetry, and gets a much lower energy solution of -77.87817, which is the same one Daniel and Bert are finding for their computations that turn symmetry off (difference is because of my slightly perturbed geometry). And the dipole moment is pleasantly 0.000 debye, like it's supposed to be. . So, you guys are actually finding a symmetric solution when you use C1 (which is what's supposed to happen), and it's the correct-symmetry solution, unlike the C2v solution that Psi4 is falling into at this geometry. I take some small consolation in the fact that Q-Chem also finds the same C2v solution at 90 degrees, in my quick tests (with or without symmetry turned on). I don't know of a general strategy to teach Psi4 that D2 is a better choice in this case than C2v, because both are legitimate subgroups. And I don't think the idea of running everything in C1 is necessarily a good idea either, since then one is opened up to the possibility of getting unphysical symmetry breaking solutions like in the cas",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349737355:1888,detect,detects,1888,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349737355,1,['detect'],['detects']
Safety," = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. =============================================== short test summary info ================================================; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:633: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIPPED [1] lib/python3.6/site-packages/psi4/tests/test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:21012,detect,detecting,21012,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,4,['detect'],['detecting']
Safety," Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 0.00000000000000 0.01448679231786; 2 0.00000000000000 0.00000000000000 0.00650780527423; 3 0.00000000000000 0.00000000000000 -0.01467048755060; 4 -0.00257410227128 0.00000000000000 -0.00298989706945; 5 0.00257410227128 0.00000000000000 -0.00298989706945; 6 -0.00015309842746 -0.00478900518843 -0.00008607897565; 7 -0.00015309842746 0.00478900518843 -0.00008607897565; 8 0.00015309842746 0.00478900518843 -0.00008607897565; 9 0.00015309842746 -0.00478900518843 -0.00008607897565; ```. and thse for wB97X-D:; ```; ## Total Gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 0.00000000000000 -0.02530663408790; 2 0.00000000000000 -0.00000000000000 0.06073552407916; 3 0.00000000000000 -0.00000000000000 -0.01910268412068; 4 0.00053727899697 0.00000000000000 0.00185002606365; 5 -0.00053727899697 -0.00000000000000 0.00185002606365; 6 -0.00554076664310 -0.01384288220048 -0.00500656449972; 7 -0.00554076664310 0.01384288220048 -0.00500656449972; 8 0.00554076664310 0.01384288220048 -0.00500656449972; 9 0.00554076664310 -0.01384288220048 -0.00500656449972. ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 0.00000000000000 -0.02530648968490; 2 0.00000000000000 0.00000000000000 0.06073503270434; 3 0.00000000000000 0.00000000000000 -0.01910251844802; 4 0.00053728999275 0.00000000000000 0.00185009324839; 5 -0.00053728999275 0.00000000000000 0.00185009324839; 6 -0.00554074931312 -0.01384287705163 -0.00500655276705; 7 -0.00554074931312 0.01384287705163 -0.00500655276705; 8 0.00554074931312 0.01384287705163 -0.00500655276705; 9 0.00554074931312 -0.01384287705163 -0.00500655276705; ```. I'd actually expect slightly better agreement out of a 5 point finite difference stencil, but I'm willing to say that the gradient bug was fixed and we just never removed the safety check. I know I'm asking you to go way back here, @robparrish , but is this consistent with your memory of this code development?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-351148891:3848,safe,safety,3848,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351148891,1,['safe'],['safety']
Safety, PASSED [ 95%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [100%]; ============================================================== short test summary info ===============================================================; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:170: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:329: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:628: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:798: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:909: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:925: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Ps,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:3668,detect,detecting,3668,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['detect'],['detecting']
Safety, SKIP [1] lib\psi4\tests\test_addons.py:100: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8040544Z SKIP [1] lib\psi4\tests\test_addons.py:125: Psi4 not compiled with CheMPS2. Rebuild with -DENABLE_CheMPS2; 2018-12-05T15:55:39.8041756Z SKIP [1] lib\psi4\tests\test_addons.py:173: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8042653Z SKIP [1] lib\psi4\tests\test_addons.py:333: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; 2018-12-05T15:55:39.8043475Z SKIP [1] lib\psi4\tests\test_addons.py:392: Psi4 not compiled with PCMSolver. Rebuild with -DENABLE_PCMSolver; 2018-12-05T15:55:39.8044251Z SKIP [1] lib\psi4\tests\test_addons.py:634: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; 2018-12-05T15:55:39.8045164Z SKIP [1] lib\psi4\tests\test_addons.py:643: Psi4 not compiled with simint. Rebuild with -DENABLE_simint; 2018-12-05T15:55:39.8046429Z SKIP [1] lib\psi4\tests\test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8046725Z SKIP [1] lib\psi4\tests\test_addons.py:720: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; 2018-12-05T15:55:39.8047954Z SKIP [1] lib\psi4\tests\test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; 2018-12-05T15:55:39.8048914Z SKIP [1] lib\psi4\tests\test_addons.py:810: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8050115Z SKIP [1] lib\psi4\tests\test_addons.py:838: Psi4 not compiled with dkh. Rebuild with -DENABLE_dkh; 2018-12-05T15:55:39.8051342Z SKIP [1] lib\psi4\tests\test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); 2018-12-05T15:55:39.8052689Z SKIP [1] lib\psi4\tests\test_addons.py:940: Psi4 not detecting plugin resp. Build plugin if necessary and add to envv,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647:3814,detect,detecting,3814,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647,1,['detect'],['detecting']
Safety," Test #369: dft-custom-gga ................... Passed 31.04 sec; 389/401 Test #386: python-pubchem ................... Passed 26.22 sec; 390/401 Test #366: dft-custom-dhdf .................. Passed 42.54 sec; 391/401 Test #277: opt-irc-2 ........................ Passed 128.92 sec; 392/401 Test #236: ocepa-freq1 ...................... Passed 211.47 sec; 393/401 Test #368: dft-custom-mgga .................. Passed 56.55 sec; 394/401 Test #102: dcft-grad1 ....................... Passed 432.70 sec; 395/401 Test #383: cookbook-rohf-orb-rot ............ Passed 107.12 sec; 396/401 Test #354: tu6-cp-ne2 ....................... Passed 135.55 sec; 397/401 Test #301: pywrap-checkrun-rohf ............. Passed 191.40 sec; 398/401 Test #302: pywrap-checkrun-uhf .............. Passed 214.75 sec; 399/401 Test #300: pywrap-checkrun-rhf .............. Passed 230.50 sec; 400/401 Test #370: dft-bench-ionization ............. Passed 1997.14 sec; 401/401 Test #371: dft-bench-interaction ............***Timeout 3000.02 sec. 99% tests passed, 5 tests failed out of 401. Label Time Summary:; adc = 52.87 sec*proc (2 tests); autotest = 974.60 sec*proc (25 tests); cart = 5503.53 sec*proc (123 tests); cas = 24.29 sec*proc (1 test); casscf = 80.51 sec*proc (11 tests); cbs = 1351.37 sec*proc (10 tests); cc = 3972.16 sec*proc (64 tests); cdomp2 = 26.61 sec*proc (2 tests); cepa = 116.08 sec*proc (7 tests); ci = 68.29 sec*proc (8 tests); cisd = 82.46 sec*proc (7 tests); cookbook = 107.12 sec*proc (1 test); cubeprop = 17.29 sec*proc (2 tests); dcft = 1551.98 sec*proc (13 tests); df = 720.18 sec*proc (38 tests); dfccd = 2.40 sec*proc (1 test); dfccd-grad = 6.11 sec*proc (1 test); dfccdl = 2.42 sec*proc (1 test); dfccsd = 3.17 sec*proc (1 test); dfccsd-grad = 22.59 sec*proc (1 test); dfccsd-t-grad = 19.43 sec*proc (1 test); dfccsdat = 13.82 sec*proc (1 test); dfccsdl = 3.14 sec*proc (1 test); dfccsdt = 3.87 sec*proc (1 test); dfep2 = 5.30 sec*proc (2 tests); dfmp2 = 89.76 sec*proc (11 tests); dfomp2 = 27",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:37328,Timeout,Timeout,37328,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Timeout'],['Timeout']
Safety," Yes, this seems good from reading the code, but I haven’t tried it in the real world. Sorry I didn’t get around to fixing this myself, but your solution(s) seem much better than whatever hack I would have come up with. ; > ; > Especially like the isocontour that contains XX% of the electron density PDF modification. When will that make it into the master? ; > ; > From: Daniel Smith [mailto:notifications@github.com] ; > Sent: Sunday, November 26, 2017 8:22 AM ; > To: psi4/psi4 <psi4@noreply.github.com> ; > Cc: Bell, Ian (Fed) <ian.bell@nist.gov>; Mention <mention@noreply.github.com> ; > Subject: Re: [psi4/psi4] Cube file units? (#815) ; > ; > ; > Fixed in #864<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fpull%2F864&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=ovNTIVz57LVNsjcGLTnY7x6FdVA6LrnzFfr8rODv8jM%3D&reserved=0>. @ianhbell<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fianhbell&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=BbgIavE%2BOpBG2nShMTB9WmFqu1z1Oy10YPHDlbWHK4Q%3D&reserved=0> please let us know if that works for you. Closing for now. ; > ; > — ; > You are receiving this because you were mentioned. ; > Reply to this email directly, view it on GitHub<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fissues%2F815%23issuecomment-347015726&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=6LFqXLzB8E2v9UgPYsuvVSjQh7PY0s6mhRGYe7bL3hg%3D&reserved=0>, or mute the thread<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FALaZLRBPKhKV-XYnDzyf891po65sdy-Cks5s6YH7gaJpZM4Ppvfg&data=02%7C01%7Cian.bell%40nist.gov%7Cd0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/815#issuecomment-347029051:1196,safe,safelinks,1196,https://psicode.org,https://github.com/psi4/psi4/issues/815#issuecomment-347029051,1,['safe'],['safelinks']
Safety, gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:688: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:16289,detect,detecting,16289,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety," lib\psi4\tests\test_addons.py:125: Psi4 not compiled with CheMPS2. Rebuild with -DENABLE_CheMPS2; 2018-12-05T15:55:39.8041756Z SKIP [1] lib\psi4\tests\test_addons.py:173: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8042653Z SKIP [1] lib\psi4\tests\test_addons.py:333: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; 2018-12-05T15:55:39.8043475Z SKIP [1] lib\psi4\tests\test_addons.py:392: Psi4 not compiled with PCMSolver. Rebuild with -DENABLE_PCMSolver; 2018-12-05T15:55:39.8044251Z SKIP [1] lib\psi4\tests\test_addons.py:634: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; 2018-12-05T15:55:39.8045164Z SKIP [1] lib\psi4\tests\test_addons.py:643: Psi4 not compiled with simint. Rebuild with -DENABLE_simint; 2018-12-05T15:55:39.8046429Z SKIP [1] lib\psi4\tests\test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8046725Z SKIP [1] lib\psi4\tests\test_addons.py:720: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; 2018-12-05T15:55:39.8047954Z SKIP [1] lib\psi4\tests\test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; 2018-12-05T15:55:39.8048914Z SKIP [1] lib\psi4\tests\test_addons.py:810: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8050115Z SKIP [1] lib\psi4\tests\test_addons.py:838: Psi4 not compiled with dkh. Rebuild with -DENABLE_dkh; 2018-12-05T15:55:39.8051342Z SKIP [1] lib\psi4\tests\test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); 2018-12-05T15:55:39.8052689Z SKIP [1] lib\psi4\tests\test_addons.py:940: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp); 2018-12-05T15:55:39.8053679Z ; 2018-12-05T15:55:39.8055000Z ============ 7 passed, 15 skipped, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647:3953,detect,detecting,3953,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647,1,['detect'],['detecting']
Safety," modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:702: 3 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py: 707 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py: 477 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py: 24 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py: 651 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 633 warnings; `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json; Using `psi4.json_wrapper.run_json` instead of `psi4.schema_wrapper.run_qcschema` is deprecated, and in 1.5 it will stop working. -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================= short test summary info =========================================================================; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:13: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:162: Not detecting module mrcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\en",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:11506,safe,safe,11506,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['safe'],['safe']
Safety, package if necessary to enable tests.) [ 34%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp_2 SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 36%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary to enable...) [ 38%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enable tests.) [ 40%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cct3 SKIPPED (Not detecting module cct3. Install package if necessary to enable tests.) [ 41%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psixas SKIPPED (Not detecting module psixas. Install package if necessary to enable tests.) [ 43%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_ipi_broker1 SKIPPED (Not detecting module ipi. Install package if necessary to...) [ 47%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to...) [ 49%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enabl...) [ 50%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dftd3 PASSED [ 52%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to e...) [ 54%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_pcmsolver SKIPPED (Not detecting module pcmsolve,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:4509,detect,detecting,4509,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety," segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also **confirm** that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. Chem. Phys. 121, 3463 (2004).; [5] Frank Jensen, Polarization consistent basis sets. VI. The elements He, Li, Be, B, Ne, Na, Mg, Al, Ar, J. Phys. Chem. A 111, 11198 (2007).; [6] Frank Jensen, Polarization Consistent Basis Sets. VII. The Elements K, Ca, Ga, Ge, As, Se, B; r and Kr, J. Chem. Phys. 136, 094110 (2012).; [7] Frank Jensen, Polarization Consistent Basis Sets. VIII. The Transition Metals Sc-Zn, J. Chem. Phys. 138, 014107 (2013).; [8] Teobald Kupka, Carmay Lim, Polarization-Consistent versus Correlation-Consistent Basis Sets in Predicting Molecular and Spectroscopic Properties, J. Phys. Chem. A. 111m 1927 (2007).; [9] Frank Jensen, Unifying General and Segmented Contracted Basis Sets. Segmented Polarization Consistent Basis Sets., Journal of Chemical Theory and Computation 10, 1074-1085 (2014) DOI: 10.1021/ct401026a.; [10] Frank Jensen, Segmented Contracted Basis Sets Optimized for Nuclear Magnetic Shielding, J. Chem. Theory Comp. 11, 132 (2015).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/457#issuecomment-241120477:2136,Predict,Predicting,2136,https://psicode.org,https://github.com/psi4/psi4/pull/457#issuecomment-241120477,1,['Predict'],['Predicting']
Safety," the radius of convergence of DIIS, unless the problem is fundamentally ill-behaved (which you again can solve efficiently using GDM). If the DIIS error is in the range `1e-3, ..., 1e-2`, i.e. `log error = [-3, -2]`, then the DIIS solution likely has some truth in it, but it should still be guided by the ADIIS/EDIIS solution. Then you weigh the ADIIS/EDIIS and the C2DIIS solutions by linear interpolation from full ADIIS to `1e-2`, then linear interpolation to full C2DIIS at `1e-3`. Orbital rotation methods like GDM are often also quite good at finding a local minimum. Moreover, if you have analytical orbital derivatives, you can implement an analytical, numerically accurate line search very easily. When you use an exact line search, you're less likely to get stuck on local minima compared to DIIS. For instance, the reason why I found that PP theory breaks sigma-pi symmetry in the acenes was that compared to previous work that had ""showed"" it preserves sigma-pi symmetry, the line search implemented in my code actually just went close to the symmetry preserving saddle point solution, and then recovered from it to decrease the energy quite a lot to break the sigma-pi symmetry. There's often enough of numerical noise so that your solution vector picks up some component of the symmetry breaking dimension. In DIIS you can make these problems converge by increasing the DIIS history length, but then you often see that the SCF is actually going up in energy in the later calculation. Increasing the history length from the default (I think mine is 5, 6, or 7 iterations) to something like 15-25 allows the DIIS procedure to find enough linearly independent vectors to enforce that the resulting orbitals are going to belong to an extremal point. However, these points often then turn out to be saddle points, in which you can decrease the energy slightly (or a lot more) by moving some weight from an orbital to another... Then you have the true second-order schemes, like Newton-Raphs",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568:3961,recover,recovered,3961,https://psicode.org,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568,2,['recover'],['recovered']
Safety," type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json; Using `psi4.json_wrapper.run_json` instead of `psi4.schema_wrapper.run_qcschema` is deprecated, and in 1.5 it will stop working. -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================= short test summary info =========================================================================; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:13: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:162: Not detecting module mrcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:186: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:233: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if neces",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:12549,detect,detecting,12549,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,"""api"" tests fail with the timeout error:; ```; ==================================================================================== test session starts =====================================================================================; platform freebsd13 -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0; Using --randomly-seed=3542811706; rootdir: /disk-samsung/freebsd-ports/science/psi4/work/psi4-1.7, configfile: pytest.ini; plugins: cov-2.9.0, randomly-3.12.0, timeout-2.1.0, rerunfailures-10.1, flaky-3.7.0, xdist-2.5.0, env-0.6.2, freezegun-0.4.2, mock-1.10.4, forked-1.4.0, hypothesis-6.56.2; collected 1337 items / 19 errors . =========================================================================================== ERRORS ===========================================================================================; ________________________________________________________________________ ERROR collecting tests/pytests/test_adcc.py _________________________________________________________________________; test_adcc.py:9: in <module>; from addons import using; addons.py:9: in <module>; from qcengine.testing import _programs as _programs_qcng; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:173: in <module>; ""psi4"": is_program_new_enough(""psi4"", ""1.2""),; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:62: in is_program_new_enough; candidate_version = qcng.get_program(program).get_version(); /usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py:90: in get_version; exc[""proc""].wait(timeout=30); /usr/local/lib/python3.9/subprocess.py:1189: in wait; return self._wait(timeout=timeout); /usr/local/lib/python3.9/subprocess.py:1909: in _wait; raise TimeoutExpired(self.args, timeout); E subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds; ```. I think that most tests themselves pass, but there's something wrong with the python test harness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097:26,timeout,timeout,26,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097,8,"['Timeout', 'timeout']","['TimeoutExpired', 'timeout', 'timeout-']"
Safety,"### Upgrade Guide. * `property(...)` --> `properties(...)`; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959#issuecomment-381256278:694,detect,detectability,694,https://psicode.org,https://github.com/psi4/psi4/issues/959#issuecomment-381256278,1,['detect'],['detectability']
Safety,"#2158 failed all azure - Win with a mdi failure at test time and Lin with Py detection failures at Psi configure time. So far this one is ok. It's beyond the configure, but this one is using cmake 3.19. 2158 was using cmake 3.20 which has changes to Py detection. I'm keeping an eye on both PRs, but it's hardly caused by the PR changes themselves.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2159#issuecomment-822611626:77,detect,detection,77,https://psicode.org,https://github.com/psi4/psi4/pull/2159#issuecomment-822611626,2,['detect'],['detection']
Safety,"(base) C:\Users\erikc>conda create -n p4envnew python=3.8 psi4 -c psi4/label/dev; Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: \; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; Examining @/win-64::__win==0=0: 80%|████████████████████████████████████████████████████████████████████████████▊ | 4/5 [00:00<00:00, 14.60it/s]-failed. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> msgpack-python -> python[version='>=2.7,<2.8.0a0|>=3.6,<3.7.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0|>=3.7,<3.8.0a0|>=3.5,<3.6.0a0|>=3.6|>=3.5|>=3.6.0']; psi4 -> python=3.8; python=3.8. I dont think it is the environment name",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1979#issuecomment-874814114:425,abort,abort,425,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-874814114,1,['abort'],['abort']
Safety,"* I think the old versions of routines we want to outright delete (when some cutting edge LAPACK comes out w/o those symbols, we want to be able to link to it).; * Agree that there's no way we want to get math detection involved.; * I think the new versions of routines should be added, checked that they link properly against a `DGGSVD3`-capable LAPACK, then commented out, and a note left in developers wish list to check travis periodically for reactivation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1314#issuecomment-433952171:210,detect,detection,210,https://psicode.org,https://github.com/psi4/psi4/pull/1314#issuecomment-433952171,1,['detect'],['detection']
Safety,"* Psi4 `v1.2rc3.dev1` compile pure GCC 7.2.0 w/`libgomp` for threading.; * OpenBLAS `v0.2.20-453-gf5959f2` compile pure GCC 5.2 w/`libgomp` for threading (except for line 5, which is conda 0.2.20, 9ac9557`).; * No Intel compilers or `libiomp5` available or in `ldd -v`. NumPy is still the conda nomkl NumPy, but its links to openblas are unresolved, so tests are either not hitting that submodule or it's using the below-described libopenblas loaded by psi. | openblas compilation | psiapi speedup `-n4` | psithon speedup `-n4` | ion pass `-n1` | ion pass `-n4` |; | :--- | ---: | ---: | :---: | :---: |; | `USE_THREAD=0 USE_OPENMP=0` | 1.00 | 1.54 | yes | yes |; | `USE_THREAD=1 USE_OPENMP=0` | 0.90 | warn + 0.85 | no | no |; | `USE_THREAD=1 USE_OPENMP=0 USE_SIMPLE_THREADED_LEVEL3=1` | 1.20 | warn + 1.40 | no | no |; | `USE_THREAD=1 USE_OPENMP=1` | 1.04 | 2.27 | yes | no |; | CONDA `USE_THREAD=1 USE_OPENMP=0` | ? | warn + ?| no | no |; | EDIT: `USE_THREAD=1 USE_OPENMP=1 NUM_PARALLEL=4` | 1.00 | 1.77 | yes | no |. * ""warn"": oodles of ""OpenBLAS Warning : Detect OpenMP Loop and this application may hang. Please rebuild the library with USE_OPENMP=1 option."". * full OpenBLAS compile command for row 4; ```; make CC=gcc FC=gfortran DYNAMIC_ARCH=1 BINARY=64 NO_LAPACK=0 NO_AFFINITY=1 USE_THREAD=1 USE_OPENMP=1 NUM_THREADS=128 CFLAGS=""-march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -O2 -pipe"" FFLAGS=""-fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -O2 -pipe""; ```. Unless someone sees a problem with my build configs, it's not looking too encouraging, except for wholly unthreaded. Troubling also that this contradicts @hokru's findings of good behavior for `USE_OPENMP=1` from source build.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390869229:1061,Detect,Detect,1061,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390869229,1,['Detect'],['Detect']
Safety,"* Yes, this sounds like a pybind11 update issue. Any pybind11 update requires a _full_ recompile. But it sounds like you've got that taken care of with the fresh objdir. Fortunately, now that pybind has hit 2.0, we plan to stick with that version, so these problems will be fewer.; * Very observant on the compilers detected for pybind. But it really doesn't matter because ""compilation"" and installation of pybind is just copying a dozen files into place.; * On the python detection, there's two places this could be happening, and one, like the above is irrelevant. It's the second one (in the psi4-core target) that really matters. Could you send me your analogs of the CMake output snippets below? Or send me the whole thing, but it'll have to be both the initial CMake configuration and the psi4-core configuration that runs during the course of the compilation. Psi4 and pybind11 use exactly the same Python detection scheme, so I'm surprised and would like to understand what's happening in your setup.; * As far as actually telling psi4 and cmake what Python to use w/o editing CMakeCache's, I'd recc setting one (EXE) or all of https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41 . But my impression is that you shouldn't have to. Main CMake configuration; ```; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Found Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; -- Suitable CheMPS2 could not be located, Building CheMPS2 instead.; -- Suitable dkh could not be located, Building dkh instead.; -- Found libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (found version 1.3.0); -- Found gdma: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/li",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273512333:316,detect,detected,316,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273512333,3,['detect'],"['detected', 'detection']"
Safety,"* these four mols https://github.com/MolSSI/QCEngine/blob/master/qcengine/programs/tests/standard_suite_ref.py#L12-L40; * rhf for hf & h2o. uhf/rohf for bh3p & nh2.; * cc-pvdz for hf & bh2p. aug-cc-pvdz & cfour-qz2p for h2o & nh2.; * conv, df, cd, though conv only is a fine start; * all-electron (ae) and frozen-core (fc); * lccd, olccd, lccsd all appreciated, though maybe your code doesn't cover the last; * energies and energy components of first priority, but should you have dipoles, gradients, etc., glad to collect them now. You don't have to do any of this -- I can take values from existing psi modules -- but an independent reference implementation is not to be sniffed at, and you can ensure psi will fail if it doesn't match you from here out. * either send me numbers (non-redundant; that is, corl, not corl and tot) or PR directly to qcengine (just that one standard_suite_ref.py file); * I'm only testing to 1.e-6 but refs generated with https://github.com/psi4/psi4/blob/master/tests/pytests/standard_suite_runner.py#L60-L63. I'll merge this PR",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1909#issuecomment-635391683:787,redund,redundant,787,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-635391683,1,['redund'],['redundant']
Safety,*proc (1 test); dfccsd-grad = 22.59 sec*proc (1 test); dfccsd-t-grad = 19.43 sec*proc (1 test); dfccsdat = 13.82 sec*proc (1 test); dfccsdl = 3.14 sec*proc (1 test); dfccsdt = 3.87 sec*proc (1 test); dfep2 = 5.30 sec*proc (2 tests); dfmp2 = 89.76 sec*proc (11 tests); dfomp2 = 275.42 sec*proc (7 tests); dfomp2.5 = 77.71 sec*proc (4 tests); dfomp3 = 93.16 sec*proc (4 tests); dfscf = 28.72 sec*proc (1 test); dft = 5528.80 sec*proc (26 tests); docs = 1.34 sec*proc (2 tests); ecp = 37.52 sec*proc (2 tests); fci = 6.48 sec*proc (2 tests); fcidump = 3.69 sec*proc (1 test); findif = 602.21 sec*proc (5 tests); fnocc = 58.18 sec*proc (4 tests); freq = 856.94 sec*proc (6 tests); gradient = 547.45 sec*proc (16 tests); json = 14.48 sec*proc (8 tests); longtests = 835.25 sec*proc (5 tests); mcscf = 3.12 sec*proc (3 tests); minitests = 31.52 sec*proc (3 tests); mints = 35.52 sec*proc (14 tests); misc = 272.90 sec*proc (16 tests); mp2 = 205.17 sec*proc (13 tests); nbody = 52.21 sec*proc (2 tests); numpy = 0.63 sec*proc (1 test); ocepa = 324.78 sec*proc (6 tests); omp = 326.64 sec*proc (18 tests); opt = 769.80 sec*proc (21 tests); prop = 1.60 sec*proc (1 test); properties = 84.77 sec*proc (10 tests); psi = 20501.24 sec*proc (400 tests); psi4numpy = 13.93 sec*proc (6 tests); psimrcc = 70.67 sec*proc (8 tests); python = 880.26 sec*proc (10 tests); pywrap = 1339.53 sec*proc (12 tests); quicktests = 2290.03 sec*proc (137 tests); rasci = 37.96 sec*proc (3 tests); sapt = 1420.73 sec*proc (20 tests); scf = 5859.53 sec*proc (51 tests); shorttests = 39.46 sec*proc (4 tests); smoketests = 89.98 sec*proc (11 tests); stability = 5.90 sec*proc (2 tests); tutorial = 165.22 sec*proc (6 tests); x2c = 34.46 sec*proc (3 tests). Total Test time (real) = 3000.09 sec. The following tests FAILED:; 	360 - cubeprop-esp (Failed); 	371 - dft-bench-interaction (Timeout); 	373 - pywrap-align (Failed); 	374 - pywrap-align-chiral (Failed); 	401 - json-schema_0_properties (Failed); Errors while running CTest; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:39904,Timeout,Timeout,39904,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Timeout'],['Timeout']
Safety,"- I never had the plugins working yet. I was going to do that after I had the external projects all working (still working on chemps2).; - I go back and forth on what to do with external dependencies. Fully installing them is certainly an option. On the other hand I like the idea of keeping it somewhat separate in case the user wants to later install a hand optimized version of that library,.; - We already should be able to detect them if they were compiled statically. For the libraries I wrapped we certainly can force static builds, but it may be hard for other libraries if they don't support that.; - I'll take a look at the new python based version and see if I can get it to work",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235604777:428,detect,detect,428,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235604777,1,['detect'],['detect']
Safety,"- No S^2 vs S^Inf is, in some ways, a different level theory.; - S^2/S^Inf are separate quantities; - Mixing is as safe as any other mixing in SAPT. Our current version is fine, but S^Inf should help more for charged complexes. Exch/Ind-Exch at S^Inf and Disp-Exch at S^2 is probably quite reasonable.; - Yes and no. S^Inf is limited to SAPT0 for the time being, higher levels could get quite complex. One more person to ping and can correct me: @ajmisquitta",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/921#issuecomment-366112364:115,safe,safe,115,https://psicode.org,https://github.com/psi4/psi4/pull/921#issuecomment-366112364,1,['safe'],['safe']
Safety,"- [ ] Implement potential-based small-basis guess as described in [Chem Phys Lett 531, 229 (2012)](http://dx.doi.org/10.1016/j.cplett.2012.02.012). The method avoids doing projections altogether, but the main problem is that one needs cross-basis Coulomb and exchange integrals (IJ|kl) and (Ik|Jl) where IJ are in the new, large basis and kl are in the small input basis. For DFT, the density variables would be evaluated in the small basis, and the quadrature would be done in the new basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-508700421:159,avoid,avoids,159,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-508700421,1,['avoid'],['avoids']
Safety,"- [ ] dft functionals in https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/dft/libxc_functionals.py pull all their citation metadata from libxc, thus avoiding duplicated work. Functionals that need separate X & C from libxc currently have metadata redefined in psi. Change this so that where X & C pulled separately from libxc have the same citation, this gets adopted as total citation. discussed a bit in https://github.com/psi4/psi4/pull/1597",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-485650099:165,avoid,avoiding,165,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-485650099,1,['avoid'],['avoiding']
Safety,"-- Checking whether C compiler has -isysroot; -- Checking whether C compiler has -isysroot - yes; -- Checking whether C compiler supports OSX deployment target flag; -- Checking whether C compiler supports OSX deployment target flag - yes; -- Check for working C compiler: /usr/local/bin/gcc-8; -- Check for working C compiler: /usr/local/bin/gcc-8 -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Checking whether CXX compiler has -isysroot; -- Checking whether CXX compiler has -isysroot - yes; -- Checking whether CXX compiler supports OSX deployment target flag; -- Checking whether CXX compiler supports OSX deployment target flag - yes; -- Check for working CXX compiler: /usr/local/bin/g++-8; -- Check for working CXX compiler: /usr/local/bin/g++-8 -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option ENABLE_MSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:3725,Detect,Detecting,3725,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308,1,['Detect'],['Detecting']
Safety,"-packages/psi4/tests/test_psi4_qcschema.py::test_psi4_scfproperty PASSED [100%]. ============================================================================ warnings summary =============================================================================; psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:599: 3 warnings; psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:701: 3 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py: 2700 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py: 1773 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py: 92 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py: 2330 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 2270 warnings; `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:698: 3 warnings; psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:699: 3 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py: 1414 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py: 954 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py: 48 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py: 1302 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 1266 warnings; `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When repl",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:9548,safe,safe,9548,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['safe'],['safe']
Safety,. -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsCache.cmake -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsMKLCache.cmake -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake -Bobjdir; loading initial cache file /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsCache.cmake; loading initial cache file /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsMKLCache.cmake; loading initial cache file /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; -- The C compiler identification is Intel 18.0.2.20180210; -- The CXX compiler identification is Intel 18.0.2.20180210; -- Check for working C compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icc; -- Check for working C compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icpc; -- Check for working CXX compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- The Fortran compiler identification is Intel 18.0.2.20180210; -- Check for working Fortran compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort; -- Check for working Fortran compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /home/termo/intel/compilers,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883:1005,Detect,Detecting,1005,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883,4,['Detect'],['Detecting']
Safety,. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to enable tests.) [ 32%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 34%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp_2 SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 36%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary to enable...) [ 38%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enable tests.) [ 40%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cct3 SKIPPED (Not detecting module cct3. Install package if necessary to enable tests.) [ 41%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psixas SKIPPED (Not detecting module psixas. Install package if necessary to enable tests.) [ 43%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_ipi_broker1 SKIPPED (Not detecting module ipi. Install package if necessary to...) [ 47%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to...) [ 49%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enabl...) [ 50%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:4158,detect,detecting,4158,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,".2.199/linux/mpi; _=/usr/bin/printenv; ```. cat /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; ```; # psi4DepsIntelCache.cmake; # ------------------------; #; # This module sets some likely variable values to initialize the CMake; # cache for dependencies to build your Psi4 source.; # Note that this uses user-provided (non-conda) tools.; #; # See ``psi4-path-advisor`` (or cmake command below) for use.; #; # >>> /home/termo/miniconda3/envs/p4dev35/bin/cmake \; # -H. \; # -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake \; # -Bobjdir; #. set(CMAKE_C_COMPILER ""icc"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""icpc"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER ""ifort"" CACHE STRING """"). set(CMAKE_C_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_Fortran_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"). #set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); ```; --> same error at same place as earlier... icpc -gnu-prefix=x86_64-conda_cos6-linux-gnu- hello.cc -o hello && ./hello; ```; In file included from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/x86_64-conda_cos6-linux-gnu/bits/os_defines.h(39),; from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/x86_64-conda_cos6-linux-gnu/bits/c++config.h(533),; from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/iostream(38),; from hello.cc(1):; /usr/include/features.h(367): catastrophic error: cannot open source file ""sys/cdefs.h""; # include <sys/cdefs.h>; ^. compilation aborted for hello.cc (code 4). ```; now we are getting somewhere :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448:11734,abort,aborted,11734,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448,1,['abort'],['aborted']
Safety,/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:798: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:909: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:925: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp). ================================================================== warnings summary ==================================================================; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if d,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:4576,detect,detecting,4576,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['detect'],['detecting']
Safety,"/test_psi4.py: 651 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 633 warnings; `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json; Using `psi4.json_wrapper.run_json` instead of `psi4.schema_wrapper.run_qcschema` is deprecated, and in 1.5 it will stop working. -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================= short test summary info =========================================================================; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:13: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:162: Not detecting module mrcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:186: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:233: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:12233,detect,detecting,12233,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,/test_psi4.py::test_psi4_basic PASSED [ 77%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 86%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 95%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [100%]; ============================================================== short test summary info ===============================================================; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:170: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:329: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:628: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:798: Psi4 not detecti,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:3208,detect,detecting,3208,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['detect'],['detecting']
Safety,"000.000000; 72 500000000.000000; 73 700000000.000000; 74 1000000000.000000; 75 2000000000.000000; 76 3000000000.000000; 77 4000000000.000000; 78 5000000000.000000; 79 6000000000.000000; 80 7000000000.000000; 81 10000000000.000000; 82 20000000000.000000; 83 30000000000.000000; 84 40000000000.000000; 85 50000000000.000000; 86 70000000000.000000; 87 100000000000.000000; 88 200000000000.000000; 89 300000000000.000000; 90 400000000000.000000; 91 500000000000.000000; 92 700000000000.000000; 93 1000000000000.000000; 94 2000000000000.000000; 95 3000000000000.000000; 96 4000000000000.000000; 97 5000000000000.000000; 98 7000000000000.000000; ```; [error file](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/quadratures/1_x/error.bin), 5247 doubles read into a Matrix. many zeros; ```; 0 0 0.0212800000000000; 0 1 0.0435800000000000; 0 2 0.0596000000000000; 0 3 0.0707500000000000; 0 4 0.0782500000000000; 0 5 0.0828800000000000; 0 6 0.0851600000000000; 0 7 0.0855600000000000; 0 8 0.0855600000000000; 0 9 0.0000000000000000; 0 10 0.0000000000000000; 0 11 0.0000000000000000; 0 12 0.0000000000000000; ...; ```. [This block](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/denominator.cc#L566-L595) reads those bin files. It occurs three times in denominator.cc, once for each flavor of `*LaplaceDenominator.decompose()`, so refactoring into calling a free function is perhaps in order. After the arrays are filled, both are used to make sure the system can be fit w/i the availability and accuracy of the stored quadratures, https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/denominator.cc#L196-L209. decompose happens once per SAPT calc, so perhaps ok to make text file? or alternate big-endian file? or better to detect host-endianness and read little-endian file accordingly? routine goes on to regex read a single quadrature file of <100 lines, so while this isn't time consuming compared to SAPT calc, the `.bin` files are larger than those in rest of dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451726050:3313,detect,detect,3313,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451726050,1,['detect'],['detect']
Safety,"0000000000 0.01566508504775; 3 -0.00000000000000 -0.00000000000000 -0.01592565050467; 4 -0.00087629381335 -0.00000000000000 -0.00080744525748; 5 0.00087629381335 0.00000000000000 -0.00080744525748; 6 -0.00150497205043 -0.00584776113735 -0.00140352222961; 7 -0.00150497205043 0.00584776113735 -0.00140352222961; 8 0.00150497205043 0.00584776113735 -0.00140352222961; 9 0.00150497205043 -0.00584776113735 -0.00140352222961. ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 0.00000000000000 0.00759155743061; 2 0.00000000000000 0.00000000000000 0.01575348711316; 3 0.00000000000000 0.00000000000000 -0.01604218334710; 4 -0.00080458046709 0.00000000000000 -0.00083578684600; 5 0.00080458046709 0.00000000000000 -0.00083578684600; 6 -0.00151233457098 -0.00586107718524 -0.00140782187617; 7 -0.00151233457098 0.00586107718524 -0.00140782187617; 8 0.00151233457098 0.00586107718524 -0.00140782187617; 9 0.00151233457098 -0.00586107718524 -0.00140782187617; ```; By disabling [this safety check](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/scfgrad/jk_grad.cc#L185) I can make the DF version run, which is clearly wrong:; ```; ## Total Gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 -0.00000000000000 -0.34802063969605; 2 0.00000000000000 -0.00000000000000 0.51455817020357; 3 0.00000000000000 0.00000000000000 0.04263207395510; 4 -0.03687141420968 -0.00000000000000 -0.01196133113197; 5 0.03687141420968 0.00000000000000 -0.01196133113197; 6 -0.06383887601370 -0.11505211473982 -0.04636560808797; 7 -0.06383887601370 0.11505211473982 -0.04636560808797; 8 0.06383887601370 0.11505211473982 -0.04636560808797; 9 0.06383887601370 -0.11505211473982 -0.04636560808797. ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 0.00000000000000 0.00759612379921; 2 0.00000000000000 0.00000000000000 0.01575853518631; 3 0.00000000000000 0.00000000000000 -0.01609636966124; 4 -0.00080665975793 0.00000000000000 -0.0008163383",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-351422094:1341,safe,safety,1341,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351422094,2,['safe'],['safety']
Safety,00[fa]fa fa; 0x0c068006f8d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c068006f8e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c068006f8f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c068006f900: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c068006f910: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07 ; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==10081==ABORTING; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). =================================================================; ==10025==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 282802 byte(s) in 124 object(s) allocated from:; #0 0x7f0f92dd6afc in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_malloc_linux.cc:62; #1 0x557f1794b8b3 in PyObject_Malloc (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0xe88b3). Direct leak of 2 byte(s) in 2 object(s) allocated from:; #0 0x7f0f92dd6afc in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_malloc_linux.cc:62; #1 0x557f17949fe0 in _PyObject_Alloc.isra.0 (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0xe6fe0). Indirect leak of 19819 byte(s) in 22 object(s) allocated from:; #0 0x7f0f92dd6afc in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_malloc_linux.cc:62; #1 0x557f1794b8b3 in PyObject_Malloc (/shared/raim,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756:17760,detect,detected,17760,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756,1,['detect'],['detected']
Safety,"1. I was thinking about the broader optimization literature, not just SCF instabilities. The closest analogy to this problem may be where one is trying to start an IRC path from a saddle point, so the geometry optimization literature might have some ideas.; The machine learning folks have also been thinking about saddle point avoidance. [This paper](https://proceedings.neurips.cc/paper_files/paper/2014/file/17e23e50bedc63b4095e3d8204ce063b-Paper.pdf) discusses a generalized trust region method (they call it the ""saddle-free Newton""), which may be interesting, although it is more about not converging to saddle points, rather than starting out from them. 2. I was thinking about how trust region methods adjust their step size based on the mismatch between predicted and actual change in function value. I think in sufficiently flat regions numerical issues can hamstring any optimization method. 3. I think that is subjective to some extent, for me it sounded conceptually simpler. Amount of new code required is probably comparable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1706963056:328,avoid,avoidance,328,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706963056,4,"['avoid', 'predict']","['avoidance', 'predicted']"
Safety,3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED [ 72%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 77%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 86%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 95%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [100%]; ============================================================== short test summary info ===============================================================; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:170: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:329: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:628: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build pl,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:3051,detect,detecting,3051,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['detect'],['detecting']
Safety,3: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:15781,detect,detecting,15781,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,"3N-6 = 30 SALCs. There is no symmetry to exploit, as recognized or not by libmints. Here are the 3 point formulas O(1/h^2):; For diagonal:; [f(1,0) + f(-1,0) - 2f(0,0)]/(h^2); Off-diagonal; [f(1,1)+f(-1,-1)+2f(0,0) -f(1,0) -f(-1,0) -f(0,1) -f(0,-1)]/(2h^2). So the diagonal of the Hessian costs 30*2 = 60.; The off-diagonal costs an additional (29 \* 30 / 2 = 465 entries) times 2 = 870.; If there is an error, it is in libmints symmetry detection - not findif.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/145#issuecomment-122013214:438,detect,detection,438,https://psicode.org,https://github.com/psi4/psi4/issues/145#issuecomment-122013214,1,['detect'],['detection']
Safety,"42) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:1595,safe,safe,1595,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['safe'],['safe']
Safety,6020053; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try Open,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:1194,Detect,Detecting,1194,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,4,['Detect'],['Detecting']
Safety,"682 changed files! GitHub struggled with this one. I think the risk we introduce by delaying and making merges harder is far greater than the couple of failing tests, so I'm going to say LGTM. Fantastic work to make this happen; sorry I couldn't help out. Hopefully I'll be able to help the hunt for cc14's issue soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/481#issuecomment-254349150:63,risk,risk,63,https://psicode.org,https://github.com/psi4/psi4/pull/481#issuecomment-254349150,1,['risk'],['risk']
Safety,"8843 -0.00008607897565; > 9 0.00015309842746 -0.00478900518843 -0.00008607897565; >; > and thse for wB97X-D:; >; > ## Total Gradient (Symmetry 0) ##; > Irrep: 1 Size: 9 x 3; >; > 1 2 3; >; > 1 0.00000000000000 0.00000000000000 -0.02530663408790; > 2 0.00000000000000 -0.00000000000000 0.06073552407916; > 3 0.00000000000000 -0.00000000000000 -0.01910268412068; > 4 0.00053727899697 0.00000000000000 0.00185002606365; > 5 -0.00053727899697 -0.00000000000000 0.00185002606365; > 6 -0.00554076664310 -0.01384288220048 -0.00500656449972; > 7 -0.00554076664310 0.01384288220048 -0.00500656449972; > 8 0.00554076664310 0.01384288220048 -0.00500656449972; > 9 0.00554076664310 -0.01384288220048 -0.00500656449972; >; >; >; > ## F-D gradient (Symmetry 0) ##; > Irrep: 1 Size: 9 x 3; >; > 1 2 3; >; > 1 0.00000000000000 0.00000000000000 -0.02530648968490; > 2 0.00000000000000 0.00000000000000 0.06073503270434; > 3 0.00000000000000 0.00000000000000 -0.01910251844802; > 4 0.00053728999275 0.00000000000000 0.00185009324839; > 5 -0.00053728999275 0.00000000000000 0.00185009324839; > 6 -0.00554074931312 -0.01384287705163 -0.00500655276705; > 7 -0.00554074931312 0.01384287705163 -0.00500655276705; > 8 0.00554074931312 0.01384287705163 -0.00500655276705; > 9 0.00554074931312 -0.01384287705163 -0.00500655276705; >; > I'd actually expect slightly better agreement out of a 5 point finite; > difference stencil, but I'm willing to say that the gradient bug was fixed; > and we just never removed the safety check. I know I'm asking you to go way; > back here, @robparrish <https://github.com/robparrish> , but is this; > consistent with your memory of this code development?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/867#issuecomment-351148891>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdl5lqVefV1QILD-ityM84jvv2zgUks5s_smZgaJpZM4QonpI>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-351166112:4968,safe,safety,4968,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351166112,1,['safe'],['safety']
Safety,:test_psixas SKIPPED (Not detecting module psixas. Install package if necessary to enable tests.) [ 43%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_ipi_broker1 SKIPPED (Not detecting module ipi. Install package if necessary to...) [ 47%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to...) [ 49%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enabl...) [ 50%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dftd3 PASSED [ 52%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to e...) [ 54%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_pcmsolver SKIPPED (Not detecting module pcmsolver. Install package if necessar...) [ 56%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[libint2] PASSED [ 58%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[simint] SKIPPED (Not detecting module simint. Install package if nec...) [ 60%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_json PASSED [ 61%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if ne...) [ 63%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_grimme_3c PASSED [ 65%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_d,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:5306,detect,detecting,5306,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,"; - int atom_at_position1(double*, double tol = 0.05) const;; - int atom_at_position2(Vector3&, double tol = 0.05) const;; - int atom_at_position3(const std::array<double, 3>&, const double tol = 0.05) const;; + int atom_at_position1(double*, double tol = 1.e-6) const;; + int atom_at_position2(Vector3&, double tol = 1.e-6) const;; + int atom_at_position3(const std::array<double, 3>&, const double tol = 1.e-6) const;; /// @}; ; /// Do we reinterpret coordentries during a call to update_geometry?; @@ -505,7 +505,7 @@ class PSI_API Molecule {; * Force the molecule to have the symmetry specified in pg_.; * This is to handle noise coming in from optking.; */; - void symmetrize(double tol = 0.05, bool suppress_mol_print_in_exc = false);; + void symmetrize(double tol = 1.e-6, bool suppress_mol_print_in_exc = false);; /// @}; ; /**; @@ -668,7 +668,7 @@ class PSI_API Molecule {; /// Returns the Schoenflies symbol; std::string schoenflies_symbol() const;; /// Check if current geometry fits current point group; - bool valid_atom_map(double tol = 0.05) const;; + bool valid_atom_map(double tol = 1.e-6) const;; /// Return point group name such as C3v or S8.; std::string full_point_group() const;; /// Return point group name such as Cnv or Sn.; ```. input; ```; import psi4. mol = psi4.core.Molecule.from_arrays(; elez=[2, 4, 2],; #fix_com=True,; #fix_orientation=True,; fix_symmetry='c1',; tooclose=1.e-6,; real=[True, False, True],; geom=[; 1.0, 0.0, -0.01,; 1.0, 0.0, 0.0,; 1.0, 0.0, 0.01]); activate(mol). set basis cc-pvdz #ugbs; energy('scf'). # fix_symmetry needed to avoid:; #Program received signal SIGFPE, Arithmetic exception.; #0x00007fffe1b5700e in psi::PetiteList::init (this=0x0, tol=0) at /home/psilocaluser/gits/hrw-direct/psi4/src/psi4/libmints/petitelist.cc:567; #567 lamij_[ij] = (char)(ng_ / nij);. # now ends with; #Fatal Error: SOBasis::SOBasis: shell changed; #Error occurred in file: /home/psilocaluser/gits/hrw-direct/psi4/src/psi4/libmints/sobasis.cc on line: 257; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1843#issuecomment-595893879:3469,avoid,avoid,3469,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595893879,1,['avoid'],['avoid']
Safety,; 2B2g 26.177 211129.5 47.4 0.961977 0.0000 0.0000 0.0000 0.000000E+00; 3B2g 30.589 246713.1 40.5 1.124108 0.0000 0.0000 0.0000 0.000000E+00; 4B2g 36.015 290484.5 34.4 1.323545 0.0000 0.0000 0.0000 0.000000E+00; 1B3g 19.495 157235.3 63.6 0.716417 0.0000 0.0000 0.0000 0.000000E+00; 2B3g 19.585 157966.1 63.3 0.719747 0.0000 0.0000 0.0000 0.000000E+00; 3B3g 19.612 158178.3 63.2 0.720713 0.0000 0.0000 0.0000 0.000000E+00; 4B3g 19.626 158297.8 63.2 0.721258 0.0000 0.0000 0.0000 0.000000E+00; 1 Au 28.127 226859.8 44.1 1.033649 0.0000 0.0000 0.0000 0.000000E+00; 2 Au 38.607 311383.0 32.1 1.418765 0.0000 0.0000 0.0000 0.000000E+00; 3 Au 40.680 328106.5 30.5 1.494963 0.0000 0.0000 0.0000 0.000000E+00; 4 Au 46.518 375194.6 26.7 1.709513 0.0000 0.0000 0.0000 0.000000E+00; 1B1u 13.809 111376.2 89.8 0.507467 0.3270 0.0000 0.0000 2.705606E+09; 2B1u 26.345 212486.8 47.1 0.968161 0.2787 0.0000 0.0000 8.394111E+09; 3B1u 28.418 229205.6 43.6 1.044338 0.0041 0.0000 0.0000 1.426430E+08; 4B1u 34.059 274701.9 36.4 1.251634 0.0003 0.0000 0.0000 1.670003E+07; 1B2u 13.809 111376.2 89.8 0.507467 0.3270 0.0000 0.0000 2.705606E+09; 2B2u 26.345 212486.8 47.1 0.968161 0.2787 0.0000 0.0000 8.394111E+09; 3B2u 28.418 229205.6 43.6 1.044338 0.0041 0.0000 0.0000 1.426430E+08; 4B2u 34.059 274701.9 36.4 1.251634 0.0003 0.0000 0.0000 1.670003E+07; 1B3u 12.527 101040.6 99.0 0.460375 0.3114 0.0000 0.0000 2.120269E+09; 2B3u 15.263 123102.2 81.2 0.560895 0.1514 0.0000 0.0000 1.530130E+09; 3B3u 20.039 161623.1 61.9 0.736409 0.1214 0.0000 0.0000 2.114615E+09; 4B3u 25.716 207413.4 48.2 0.945045 0.0341 0.0000 0.0000 9.774464E+08; ```. I do notice some nonsense is being printed in the `Excited State -> Excited State Transitions` section. Looks similar to what you have above:. ```; 1B1g->1B2g 0.000 0.0 86055398391528.6 0.000000 0.0000 0.0000 0.0000 0.000000E+00; ```. We should probably put something in to detect degeneracy and print something that indicates that or at least gracefully handle the conversion to nm.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/521#issuecomment-261612983:2817,detect,detect,2817,https://psicode.org,https://github.com/psi4/psi4/issues/521#issuecomment-261612983,1,['detect'],['detect']
Safety,"; 388/401 Test #374: pywrap-align-chiral ..............***Failed 1.21 sec; 389/401 Test #300: pywrap-checkrun-rhf .............. Passed 972.11 sec; 390/401 Test #289: psimrcc-pt2 ...................... Passed 1.88 sec; 391/401 Test #283: psimrcc-ccsd_t-1 ................. Passed 2.04 sec; 392/401 Test #285: psimrcc-ccsd_t-3 ................. Passed 2.10 sec; 393/401 Test #284: psimrcc-ccsd_t-2 ................. Passed 2.22 sec; 394/401 Test #290: psimrcc-sp1 ...................... Passed 3.41 sec; 395/401 Test #296: pywrap-all ....................... Passed 973.84 sec; 396/401 Test #86: cepa1 ............................ Passed 4.52 sec; 397/401 Test #391: python-vibanalysis ............... Passed 976.98 sec; 398/401 Test #360: cubeprop-esp .....................***Failed 6.53 sec; 399/401 Test #18: cbs-xtpl-func .................... Passed 1096.76 sec; 400/401 Test #370: dft-bench-ionization ............. Passed 2039.20 sec; 401/401 Test #371: dft-bench-interaction ............***Timeout 3000.03 sec. 99% tests passed, 5 tests failed out of 401. Label Time Summary:; adc = 61.70 sec*proc (2 tests); autotest = 1698.69 sec*proc (25 tests); cart = 9530.61 sec*proc (123 tests); cas = 29.65 sec*proc (1 test); casscf = 157.01 sec*proc (11 tests); cbs = 2162.96 sec*proc (10 tests); cc = 9085.75 sec*proc (64 tests); cdomp2 = 59.27 sec*proc (2 tests); cepa = 203.58 sec*proc (7 tests); ci = 83.42 sec*proc (8 tests); cisd = 109.67 sec*proc (7 tests); cookbook = 222.55 sec*proc (1 test); cubeprop = 14.38 sec*proc (2 tests); dcft = 3348.62 sec*proc (13 tests); df = 1824.24 sec*proc (38 tests); dfccd = 3.69 sec*proc (1 test); dfccd-grad = 13.83 sec*proc (1 test); dfccdl = 8.06 sec*proc (1 test); dfccsd = 4.58 sec*proc (1 test); dfccsd-grad = 43.20 sec*proc (1 test); dfccsd-t-grad = 38.87 sec*proc (1 test); dfccsdat = 20.44 sec*proc (1 test); dfccsdl = 4.62 sec*proc (1 test); dfccsdt = 10.41 sec*proc (1 test); dfep2 = 7.13 sec*proc (2 tests); dfmp2 = 121.95 sec*proc (11 tests); dfom",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:37342,Timeout,Timeout,37342,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Timeout'],['Timeout']
Safety,; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[simint] SKIPPED (Not detecting module simint. Install package if nec...) [ 60%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_json PASSED [ 61%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if ne...) [ 63%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_grimme_3c PASSED [ 65%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable ...) [ 67%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to e...) [ 69%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enabl...) [ 70%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary ...) [ 72%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enabl...) [ 74%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_mdi.py::test_mdi_water SKIPPED (Not detecting module mdi. Install package if necessary to enable tests.) [ 76%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py::test_spacious_option PASSED [ 78%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 80%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 83%]; psi4conda/envs/psi4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:6667,detect,detecting,6667,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,=========== short test summary info =========================================================================; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:13: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:162: Not detecting module mrcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:186: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:233: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:13028,detect,detecting,13028,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,=========================== short test summary info ===============================================================; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:170: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:329: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:628: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:798: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:909: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:925: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp). ================================================================== warnings summary ===========================================================,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:3827,detect,detecting,3827,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['detect'],['detecting']
Safety,"============================== warnings summary ===================================================; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:599; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:701; `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:698; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:699; `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:702; `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!; =================================== 3950 deselected, 5 warnings, 1 error in 20.79s ====================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542:5747,safe,safe,5747,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542,2,['safe'],['safe']
Safety,"================================================ test session starts ===========================================================================; platform win32 -- Python 3.8.10, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- C:\Users\erikc\psi4conda\envs\psi4env\python.exe; cachedir: .pytest_cache; rootdir: C:\Users\erikc; collected 3356 items / 3301 deselected / 55 selected. psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enable tests.) [ 1%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker1 PASSED [ 3%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker2 PASSED [ 5%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED (Not detecting module mrcc. Install package if necessary to enable tests.) [ 7%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to enable t...) [ 9%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED (Not detecting module erd. Install package if necessary to enable tests.) [ 18%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_simint SKIPPED (Not detecting module simint. Install package if necessa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:1310,detect,detecting,1310,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,"> ...Well, thanks Molpro. We have a legitimate ambiguity after all. :-). > cepa(0) stays lccsd for energy, gradient, etc. purposes. sounds good -- can avoid deprecation warnings. > Any time cepa(0) appears in an output file, we clarify what we're talking about. Explicitly saying ""Linearized CCD"" or ""Linearized CCSD"" is ideal. If we need to abbreviate, I've seen some Bartlett papers where they use LinCCD. Crawford has a good point about LCCD referring to localization. If we try to eliminate cepa(0) meaning lccd entirely, we create havoc with Bozkaya's papers. If we have a logging module, we print out a warning there too. * overall sounds good to add very specific text clarifying CCD/CCSD. I'm less concerned about linearized/local since psi has none of the latter.; * should try to keep output of cepa-0,1,2,etc. cohesive for fnocc; * I'd like to not disrupt the qcvars, presently e.g., `LCCD OPPOSITE-SPIN CORRELATION ENERGY`, `LCCSD TOTAL ENERGY`, but I'm not adamant.; * I'm less concerned about cohesiveness with UB papers. After all, once upon a time, the occ/dfocc code was ""using lccd for non-orbital-optimized and ocepa0 for orbital-optimized"". Any firm connections btwn code and paper can be cemented by pasting some DOIs. IMO, psi should try to be cohesive from the face, not from the lit perspective. > cepa is eliminated from dct. Andy put that in there years ago to facilitate comparison between Kutzelnigg's first stab at DCT and LCCD. Without getting into the theory weeds, that's not a useful comparison now, and it's going to be an even less useful comparison after I've published my next two papers. It's an awkward addition given the DCT logic. It's easiest to get rid of it and direct users to occ, dfocc, or fnocc. sounds good.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1872#issuecomment-616909231:151,avoid,avoid,151,https://psicode.org,https://github.com/psi4/psi4/issues/1872#issuecomment-616909231,1,['avoid'],['avoid']
Safety,"> ; > ; > FWIW, I cannot make the input fail with mkl2020.1 on my Ryzen (gen1) workstation.; > It has instructions till AVX2. MKL and any binaries generated by Intel compilers are almost always detecting CPU vendors based on vendor first and instruction support second. Something like this:; ```; if ( CPU_VENDOR == Intel){; if ( CPU_HAS_AVX_512 ) <call AVX-512 version of the function>; if ( CPU_HAS_AVX2 ) <call AVX2 version of the function>; ...; else <call SSE2 version of the function>; } else { //non-Intel CPU; <call SSE2 version of the function>; }; ```; So this means that unless one adds some some unofficial hacks before compiling the binaries, all AMD CPUs, regardless of their AVX support, will be running SSE2 (or similarly unoptimized) codepaths only.; This unfair CPU dispatch function can be overridden at runtime for the MKL using an unofficial debug environmental variable, but if the binary was compiled with an Intel compiler, then all parts touched by the auto-vectorizer are probably still going to execute the SSE2 (or a similarly unoptimized) path on AMD CPUs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1896#issuecomment-633666655:194,detect,detecting,194,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633666655,1,['detect'],['detecting']
Safety,"> ; > ; > my 2 cents on this: The geometry you posted looks broken to me (too long 'bonds'). I'd guess the optimizer had some troubles displacing the geometry correctly. Often it is enough to set `opt_coordinates both`, which mixes cartesian and redundant coordinates. If the fault does lie in the bonds being stretched (the first two CC bonds start off at 1.52 ang, and end up at 1.65 ang, chemistry tells us single c-c bonds are around 1.54 ang), and the first scf round does converge(it does), then wouldn't the fault end up being with the gradient calculation, since I am assuming, this is what is used to make the coordinate adjustment? I am not sure how to counter this if that is the issue. Can I damp the geometry optimization step?. I am trying with the `opt_coordinates` mixed coordinates, as well as waiting on the `guess_persist` results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-953185581:246,redund,redundant,246,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953185581,1,['redund'],['redundant']
Safety,"> > @hokru For ωB97M-V, it doesn't seem to be possible to change the ω parameter directly from the psithon interface—there's a check at; > > https://github.com/psi4/psi4/blob/d9093c75c71c2b33fbe86f32b25d138675ac22eb/psi4/src/psi4/libfunctional/LibXCfunctional.cc#L218; > > ; > > that disallows it. I want to be on the safe side and not manually change it without knowing why the limitation is put in place.; > ; > @susilehtola? It looks like this code was added as part of Psi adopting LIbXC in May 2017, so this may be as simple as ""it's perfectly legitimate to change omega here; the code needs to be modernized already."". Looks like hacky code. I'll send a patch",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1194210633:318,safe,safe,318,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1194210633,2,['safe'],['safe']
Safety,"> > Iirc, @andysim said that the old libmints solidharmonics.cc code is outdated anyways, and the Helgaker recursions are better. Feel free to comment Andy.; > ; > Both codes use regular solid harmonics with the exact same normalization (assuming that your Helgaker recursions match that code that I sent to you a while ago, Andy). The code in libmints is stuff that was taken from MPQC, but becomes painfully slow around L=9 or so. We had to reduce the default maximum L a while ago because it was dramatically slowing the Psi4 startup time. So I think that, if it turns out not to be a huge task, replacing the libmints code with smarter recursions is probably not a bad idea. Failing that, the Helgaker version is not really introducing any redundancy because the libmints version won't be able to support high enough a.m. efficiently. Since the Helgaker code is more efficient, should I do that replacement in this PR or the next? Also, does that mean we need to just move everything in libfmm to libmints? @jturney thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2665#issuecomment-1209579441:744,redund,redundancy,744,https://psicode.org,https://github.com/psi4/psi4/pull/2665#issuecomment-1209579441,1,['redund'],['redundancy']
Safety,"> > It looks like the diff is not clean: there are changes that don't appear to arise from this pull. There's also a merge conflict.; > ; > Yes, we're working on it. Much history in this branch. Ugh, just spent all night rebasing, should be ready now. I will test my code again tomorrow as a sanity check :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2187#issuecomment-854300953:292,sanity check,sanity check,292,https://psicode.org,https://github.com/psi4/psi4/pull/2187#issuecomment-854300953,1,['sanity check'],['sanity check']
Safety,> > The `Array2d` class needs to go. Happy to see even a bit of it be destroyed.; > ; > I'm not familiar with this class (or the `occ` module for that matter). What's the motivation for getting rid of it?. Redundancy. It's essentially a symmetry-less Matrix.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2679#issuecomment-1215513953:206,Redund,Redundancy,206,https://psicode.org,https://github.com/psi4/psi4/pull/2679#issuecomment-1215513953,1,['Redund'],['Redundancy']
Safety,"> > would you have any thoughts/concerns on doing the SAD guessing in `PySCF` and then doing the row/col re-ordering?; > ; > What do you need the guesses for? PySCF can also be used to run similar calculations as Psi4.; > ; > I don't know if there are differences between the basis function conventions between Psi4 and PySCF. Unfortunately, quantum chemistry programs are not interoperable. I'm trying to build a ML model that can predict the converged density matrix. To verify whether the model is of any value, I wish to plug the predictions into a quantum chemistry program. . The problem is that the dataset I'm using (`QMugs`) has used `psi4` to calculate ""groundtruth"" energies & density matrices at the DFT level. So, my ML model is learning to output density matrices with the ordering convention used by `psi4`. If I wish to plug it into a different software, like `PySCF`, I believe I'll have to do some re-ordering or transformations... Would simply re-ordering the rows/columns not work? (my understanding was that if the basis set was identical, but just that one program uses say `px py pz` vs another using `pz py px` a reordering would suffice, but I'm not exactly a quantum chemistry expert...). Similarly, I wish to compare the convergence rates of my ML model's predicted density matrices against default initial guesses, and also just look at the matrices themselves to compare how they look like (for my own understanding/analysis)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2897#issuecomment-1470128276:432,predict,predict,432,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1470128276,6,['predict'],"['predict', 'predicted', 'predictions']"
Safety,"> @JonathonMisiewicz the test in question is `dfmp2-ecp` which has been unreliable for some time, way before #1456 was merged. See #1433. I can't tell if we're disagreeing about facts or best practices. Peter added new tests of SCF energies to `dfmp2-ecp`. A few days ago, his new tests passed. Before the force-push, his tests failed. This tipped us off that _some_ other PR changed the energy to which frozen core ECP computations converge. Peter was able to reproduce the change in energies on a non-PR branch, confirming it. The first problem is that unless I missed something, there _shouldn't_ have been a PR that would change those energies. Apparently, there is one, and we don't know how many computations it afflicts. Probably just frozen core ECP, but there is a question mark on that one. Second, one of these two answers has to be wrong. I cannot believe this is a case of computations being insufficiently converged or landing on different states. If Psi is giving or was giving wrong answers, then at the absolute minimum, we have an obligation to let people know. And if this test is just meant to detect changes in energies without worrying about why, that needs to be said in the test itself.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-452670933:1114,detect,detect,1114,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-452670933,1,['detect'],['detect']
Safety,"> @hokru For ωB97M-V, it doesn't seem to be possible to change the ω parameter directly from the psithon interface—there's a check at; > ; > https://github.com/psi4/psi4/blob/d9093c75c71c2b33fbe86f32b25d138675ac22eb/psi4/src/psi4/libfunctional/LibXCfunctional.cc#L218; > that disallows it. I want to be on the safe side and not manually change it without knowing why the limitation is put in place. @susilehtola? It looks like this code was added as part of Psi adopting LIbXC in May 2017, so this may be as simple as ""it's perfectly legitimate to change omega here; the code needs to be modernized already.""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1194172697:310,safe,safe,310,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1194172697,2,['safe'],['safe']
Safety,"> A couple thoughts before a more thorough review:; > ; > Can you add some test cases to verify that this doesn't change the SCF energy? That set of test molecules from yesterday would be good, plus a few larger molecules; > ; > Could you do some timing to verify that this does in fact speed the SCF code up? A comparison of system size, density threshold, timing, and energy error would be good.; > ; > It appears that you're calculating integrals within the master loop and doing redundant work, possibly more than the original algorithm. I think you want to calculate all (NM|NM) shells outside of the loop and use those integrals within the loop. I will run a variety of tests and include that as a Google Sheets link. And your point about redundancy is good. I will get that fixed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2062#issuecomment-743354001:483,redund,redundant,483,https://psicode.org,https://github.com/psi4/psi4/pull/2062#issuecomment-743354001,2,['redund'],"['redundancy', 'redundant']"
Safety,"> AFAIK, currently the only safe way to call OpenBLAS BLAS/LAPACK routines from OMP parallel regions, is to use an OpenBLAS build compiled with USE_OPENMP=1. This is correct. OpenBLAS used to spam `stderr` (i think) with a warning everytime you call a pthreaded BLAS inside an openmp region. I was expecting to see it for my test with the ""wrong"" openblas library, but maybe psi4 redirects it. Or i accidentally used USE_OPENMP=1 for both tests..",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390199490:28,safe,safe,28,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390199490,1,['safe'],['safe']
Safety,"> After further discussion, including with Dr. Sherrill, we have decided to keep the current atom-blocking structure of LinK, since we can avoid situations ""of too-small workloads in the inner loops"" in the words of Dr. Sherrill when we run DirectJK in parallel. Changing the linK code to shell-blocking instead of atom-blocking would be outside the scope of this PR. Whether ""changing the linK code to shell-blocking instead of atom-blocking would be outside the scope of this PR"" is a definition game. Is the goal of this PR ""implement a linK derivative with atom-blocking"" or ""implement the most efficient linK derivative we can think of""? If it's the former, then it's out-of-scope, and if it's the latter, then it's in-scope. Since you are not implementing the Ochsenfeld algorithm but a derivative thereof, give me a pseudocode version of your linK derivative that tells me _exactly_ what the loops are, what's getting parallelized, whether your screening is atom-based or shell-based, and what integrals you're computing based on your screening. My chief concern is this: It looks to me like you are computing integrals that you already know are insignificant (if the shell pair was screened out, but some other shell pair on the atom pair was not) because you can parallelize more efficiently. Parallelization efficiency is not the primary metric we care about, runtime is. It isn't clear to me how giving ourselves extra work is reducing runtime. If it's more efficient to screen out irrelevant shell pairs but distribute all relevant shell pairs between two atoms to a single thread, go for it: we're not computing extra integrals in that case. But if we distribute all shell pairs between relevant atoms to a single thread... that could be a lot of extra work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-999662496:139,avoid,avoid,139,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-999662496,2,['avoid'],['avoid']
Safety,"> Also, how have you verified correctness? While I'm not familiar with these methods, ""can induce an energy difference of over 2 _hartrees_ even at conservative cutoffs"" does not seem safe. I have extensively verified the correctness of this approach, across many different molecules, basis sets, etc. I have never observed an error of ""2 Hartrees"". The worst I have ever observed is on the order of 1.0e-5 Hartrees, better than density fitting. Here is a link to my ""benzene case study"". https://docs.google.com/spreadsheets/d/1HDMZ5PV6GhnK4i68Y1t86VhauTwqMP_X2kII21GCsiY/edit?usp=sharing. I empirically discovered that the best screening threshold given an energy convergence of 1.0e-n is 1.0e-(n+3) for non-augmented basis sets and 1.0e-(n+5) for augmented basis sets. For example, for an e_convergence of 1.0e-8 in cc-pVTZ, the ideal threshold is 1.0e-11, while it is 1.0e-13 in aug-cc-pVTZ.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821189029:184,safe,safe,184,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821189029,1,['safe'],['safe']
Safety,> Are there any known methods of getting to build Numpy/Scipy from source using Accelerate to avoid the mismatch? (I think support might have been dropped altogether.). When I was looking for it recently I only found that Numpy dropped support of Accelerate some time ago because it only provided an old lapack version. This was pre-M1 as far as I know. ; Maybe it is possible to build numpy regardless of support with some manual interventions.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-956060090:94,avoid,avoid,94,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956060090,1,['avoid'],['avoid']
Safety,"> Could we catch the case where users request multiple roots and stop the program? Fewer and fewer people look at the actual output files.; > ; > I would also support the more extreme solution of just fully disabling the internal adc. Better some potential inconvenience than wrong results. 1. This is possible in principle, but I don't know _exactly_ what conditions trigger the bug, so there may be some single-root cases that also trigger it.; 2. Removing the buggy internal ADC was my original proposal on the January conference call, but @fevangelista disapproved without a deprecation period first. I was hoping to avoid an argument about ""remove vs deprecate"" as not a good use of my time, but if we're going to have the argument anyways, I'm on the remove side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2419#issuecomment-1029193405:621,avoid,avoid,621,https://psicode.org,https://github.com/psi4/psi4/pull/2419#issuecomment-1029193405,1,['avoid'],['avoid']
Safety,"> Hi @susilehtola, I've been following Libxc v5.1 https://gitlab.com/libxc/libxc/-/issues/186 with interest. When I compiled this branch (after rebase; including your fixes from the spring, thanks!) in late December against the the Libxc 5.0 branch, I got about the same Psi4 test results as recorded above -- lots of `Matrix::power: C_DSYEV failed`.; > ; > However, when I compile this branch against the new Libxc 5.1 hotfix branch, I don't even get that far. After disabling OpenMP, I get segfaults (dft-psivar):; > ; > ```; > (gdb) bt; > #0 0x00007ffff78351d7 in raise () from /lib64/libc.so.6; > #1 0x00007ffff78368c8 in abort () from /lib64/libc.so.6; > #2 0x00007ffff782e146 in __assert_fail_base () from /lib64/libc.so.6; > #3 0x00007ffff782e1f2 in __assert_fail () from /lib64/libc.so.6; > #4 0x00007fffed70db12 in xc_mix_func (func=func@entry=0x555556ca7500, np=np@entry=255, rho=rho@entry=0x555556e575c0, sigma=sigma@entry=0x555556ccda80, lapl=lapl@entry=0x0, tau=tau@entry=0x0, zk=0x555556771300, vrho=0x55555e164460, vsigma=0x555556c12720, vlapl=0x0, vtau=0x0, v2rho2=0x0, v2rhosigma=0x0, v2rholapl=0x0, v2rhotau=0x0, v2sigma2=0x0, ; > v2sigmalapl=0x0, v2sigmatau=0x0, v2lapl2=0x0, v2lapltau=0x0, v2tau2=0x0, v3rho3=0x0, v3rho2sigma=0x0, v3rho2lapl=0x0, v3rho2tau=0x0, v3rhosigma2=0x0, v3rhosigmalapl=0x0, v3rhosigmatau=0x0, v3rholapl2=0x0, v3rholapltau=0x0, v3rhotau2=0x0, v3sigma3=0x0, v3sigma2lapl=0x0, v3sigma2tau=0x0, v3sigmalapl2=0x0, v3sigmalapltau=0x0, v3sigmatau2=0x0, ; > v3lapl3=0x0, v3lapl2tau=0x0, v3lapltau2=0x0, v3tau3=0x0, v4rho4=0x0, v4rho3sigma=0x0, v4rho3lapl=0x0, v4rho3tau=0x0, v4rho2sigma2=0x0, v4rho2sigmalapl=0x0, v4rho2sigmatau=0x0, v4rho2lapl2=0x0, v4rho2lapltau=0x0, v4rho2tau2=0x0, v4rhosigma3=0x0, v4rhosigma2lapl=0x0, v4rhosigma2tau=0x0, v4rhosigmalapl2=0x0, v4rhosigmalapltau=0x0, ; > v4rhosigmatau2=0x0, v4rholapl3=0x0, v4rholapl2tau=0x0, v4rholapltau2=0x0, v4rhotau3=0x0, v4sigma4=0x0, v4sigma3lapl=0x0, v4sigma3tau=0x0, v4sigma2lapl2=0x0, v4sigma2lapltau",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754743798:626,abort,abort,626,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754743798,1,['abort'],['abort']
Safety,"> Hm, is there a requirement on the ordering used in Libint2? This may complicate packaging... Yes, there's ordering requirements at two different levels. The cartgauss_ordering has to be chosen at code-generation time, but fortunately psi4 uses `standard`. The spgauss_ordering can be selected at code-compile time, and here psi4 uses `gaussian` (not default). So for binary distribution, yes, there's going to be packaging complications. I've translated both stages of libint2 build to cmake and added in `find_package(..., COMPONENTS ...)` selectors https://github.com/evaleev/libint/pull/148/files#diff-4cfbbb105ca3b371b7251a6e37a56f74R41 so that downstream programs can avoid detecting unsuitable installations. Of course that doesn't help non-cmake downstreams much ...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-685960414:675,avoid,avoid,675,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-685960414,2,"['avoid', 'detect']","['avoid', 'detecting']"
Safety,"> I am not planning to look at this code until your other two PRs (#2155 and #2187) are closer to acceptance but am leaving some ""triage"" comments.; > ; > * Labels in the title are an eyesore, and GitHub has its own labels feature. I've added them as proper labels instead. Similarly, in future, please mark a PR as draft rather than add a ""[Work in Progress]"" text tag.; > * It isn't clear to me if there's anything in particular you want to get by submitting this PR when it's not even marked for review. Did you submit this to get feedback on the ""Do we need a new JK object?"" question?; > * I am going to ask that _in future_, you have more descriptive git commits rather than whatever words are currently on your mind. As somebody who has to debug Psi decently often, commit histories are often an invaluable clue to figuring out what the intention behind some obscure piece of code is. I'd _prefer_ if you cleaned up the commit messages for this PR, but I'm not going to insist on it. Also, I opened this PR early in order to a) Update the Psi developers on the progress of the new CFMM code, and b) To get y'all to start thinking about the future of the JK class, and potential design choices for if a user would like to run, per se DF-J + linK, CFMM-J + chain-of-spheres K, etc. Also, most of my ""non-sense"" PR messages result from the fact that I have to change branches, so I make a quick push to GH before I switch to another project, and can be safely ignored, as they don't mean anything. I will avoid doing such a thing in the future though, and add more descriptive Git messages :) However, the descriptive commit messages DO mean something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2311#issuecomment-933583054:1457,safe,safely,1457,https://psicode.org,https://github.com/psi4/psi4/pull/2311#issuecomment-933583054,4,"['avoid', 'safe']","['avoid', 'safely']"
Safety,"> I am using the latest git snapshot of the master branch. gtk. [this](https://anaconda.org/psi4/psi4-dev/files) is what I was talking about. It hides dependency tracking from many psi builders and seeds cmake configuration. I was hoping that could carry most builds until FindMPFR called by Libint2Config and I come to terms. Are you building libint2 through psi or using the libint2 conda-package or detecting other pre-built (will need to silence find_apckage(... components) in that case)? For now, I'd add `find_package(eigen)` and hack cmake_module_path as needed. And this should stay open until I get it patched correctly upstream. ```; ambit >=0.5.1,<0.6.0a0, chemps2 >=1.8.9,<1.8.10.0a0, cmake >=3.8, dkh >=1.2,<1.3.0a0, eigen, gau2grid >=2.0.3,<3.0a0, gcc_linux-64 7.*, gdma >=2.2.6,<2.2.7.0a0, gfortran_linux-64 7.*, gxx_linux-64 7.*, hdf5 >=1.10.6,<1.10.7.0a0, libint2 2.6.0 hc9558a2_9, libxc >=4.3.4,<5.0a0, mkl-devel 2019.*, mpfr, msgpack-python, networkx >=2.4, numpy >=0.12.0, pcmsolver >=1.2.1,<1.2.2.0a0, pybind11-headers >=2.5.0,<2.6.0a0, pytest, pytest-xdist, python >=3.8,<3.9.0a0, qcelemental >=0.17.0,<1.0, qcengine >=0.17.0,<1.0, simint >=0.7,<0.8.0a0; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2046#issuecomment-737400507:402,detect,detecting,402,https://psicode.org,https://github.com/psi4/psi4/issues/2046#issuecomment-737400507,1,['detect'],['detecting']
Safety,"> I finished the `lmp2_iterations` function, and I have a much better feel for how the code works now.; > ; > Zach, do you want me to keep going, or do you want to respond to what I've already flooded you with? I'd rather wait for you to catch up, to avoid having many comment chains at once. Thanks for the super thorough review. You've given me plenty to work through if you want to turn your attention to other things for a bit. I can ping you once I've responded to everything.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2093#issuecomment-908779460:251,avoid,avoid,251,https://psicode.org,https://github.com/psi4/psi4/pull/2093#issuecomment-908779460,1,['avoid'],['avoid']
Safety,"> I honestly don't recognize what you're trying to contribute. Are you proposing a course of action? Are you listing potentially relevant considerations for a more robust solution? Are you trying to say that ""algorithms that are both more robust and harder to implement exist""?. I was trying to bounce some ideas off the community, in the hope that it would ultimately lead to a better solution. To some extent that included all three of the above. I am sorry if that was frustrating, will try to clarify. In my first post:; 1. I proposed an alternative algorithm, which I guess is a course of action.; 2. I highlighted two potential problems with my alternative algorithm.; 3. I suggested that looking for existing algorithms in the literature may lead to something better than any of the proposals here, mine included. In my second post:; 1. I interpreted your response as ""SCF instability literature is unlikely to have anything better"". So I tried to clarify that I meant that the broader literature might contain useful ideas, not just SCF instability literature, but also the geometry optimization literature and possibly even the machine learning literature.; 2. I suggested a particular paper and algorithm, which claims to be able to minimize functions effectively, while avoiding saddle points. This is the ""both more robust and harder to implement"" part. The idea that I should have explicitly written out, is that if it could be implemented as an SOSCF method, it may greatly reduce the chances of getting an unstable solution in the first place, which would make having smart SCF instability following less important.; 3. I was trying to explain what thought process has lead me to believe that using the predicted/actual SCF energy may be a good idea for checking the quality of the Taylor expansion. I hope no offense was caused.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470:1281,avoid,avoiding,1281,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470,4,"['avoid', 'predict']","['avoiding', 'predicted']"
Safety,"> I kinda thought you solved all the the DFOCC convergence issues recently, at great effort. OCC convergence issues, not DFOCC convergence issues. The same trick should solve the convergence issues in DFOCC, but DFOCC is a much more difficult module to work with, so I'm avoiding fixing things there unless absolutely necessary for my research. > Unfortunately, open-shell Brueckner or OO coupled cluster does not seem to be a common feature in QC programs, so I am trying to survey which programs have open-shell capable OO methods. Also, a performant OMP2 or OMP2.5 implementation could potentially be useful for us, even if it does not directly solve the lack of an RBCCD(T) implementation. I don't know if your Robosurfer can use this, but depending on your orbital-optimized method, once you have the energy, the gradient is free. All the orbital-optimized methods in Psi have this property. > o_O No, in fact I would have completely missed that! I checked the method table [here](http://www.psicode.org/psi4manual/master/notes_c.html#alternate-implementations) and thought Psi4 cannot do BCCD(T) at all. Perhaps BCCD and BCCD(T) could be added as methods to that docpage?. That page is for methods that _multiple modules_ support, so you can straighten out which module you want given your specific use for a method. That said, is there a place in the manual where we list all the methods we have? I genuinely don't think so. We should add it, if there isn't one. If you want to see all the energy keywords that Psi recognizes, you can find it in the code [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc_table.py#L41). I'd be remiss if I didn't point out that the `dct` module _also_ has some orbital optimized methods. The best one is the default upon entering `energy(dct)`, ODC-12. Use of the others is not recommended for _any_ purpose other than benchmarking. We also have density-fitting for ODC-12. I'll warn you that there is some slight error in the DF grad",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863#issuecomment-612018450:271,avoid,avoiding,271,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-612018450,1,['avoid'],['avoiding']
Safety,"> I made all of the requested changes, barring the `iteration_` variable, which I personally believe is necessary. If you have a workaround, please let me know :).This PR should be _really_ close to being finalized. At risk of being grumpy, please don't say you made all the requested changes unless you actually have. There were many of my comments that still haven't been addressed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-937754577:219,risk,risk,219,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-937754577,1,['risk'],['risk']
Safety,"> I may be not quite following the INSIST_FIND_PACKAGE reasoning. ENABLE_PkgName=ON/OFF turns it off completely. And I would like to control bundling. I want cmake to fail when external package isn't found. I am trying to create the FreeBSD port for psi4. Package build infrastructure is all automated, and is very rigorous. So if the package is chosen to be installed externally, there is no reason to even try to download it from github. It's besides the point here, but such downloads are also a security risk, because you don't check the downloaded file's fingerprints.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343778164:508,risk,risk,508,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343778164,1,['risk'],['risk']
Safety,"> I think for a locally compiled psi4 you also have to remove the install dir, if one exists. You're right in general that cmake can find deps in the psi4 installation, which may be unexpected behavior. And it never hurts to remove the install dir. But in this case, should be safe b/c switching out the libint will be in the conda env, so the `libintConfig.cmake` will be there, too. The troublesome scenario I can think of is you have a conda env with libint and libxc, where you're only using the latter in the psi4 build. your libint is a local or cmake compile at am6. then you upgrade the pkgs in the conda env. if, in either the objdir or the install the rpath on the `core.so` isn't set so that the local is before the conda env, then even though cmake got it right, the runtime psi4 will get it wrong. of course, my imagination isn't strong enough to guess _all_ the ways this could go wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533#issuecomment-463848418:277,safe,safe,277,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463848418,1,['safe'],['safe']
Safety,"> I think in that case the output should be adapted to avoid confusion as there are warnings printed. Maybe also 'regular algorithm' can have a different name, but it's what other programs do, I suppose. Yes, there's some graphs to prove it I should dig up. Thanks for reading the printouts -- I glanced at the logic but not the warnings. Now memory and algorithm are printed with ""high-memory""/""low-memory"" labels and without efficiency judgements.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2003#issuecomment-687637537:55,avoid,avoid,55,https://psicode.org,https://github.com/psi4/psi4/pull/2003#issuecomment-687637537,1,['avoid'],['avoid']
Safety,"> I think the risk of `compute_phi` changing is minimal, so I'm not opposed to exposing it. ""Useful for grid-based approaches"" is too vague for me to be _for_ it, but I don't need to be. An example of ""grid-based approaches"" would include a psi4numpy implementation of seminumerical methods like chain-of-spheres exchange.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2210#issuecomment-877857422:14,risk,risk,14,https://psicode.org,https://github.com/psi4/psi4/pull/2210#issuecomment-877857422,1,['risk'],['risk']
Safety,"> I think the risk of `compute_phi` changing is minimal, so I'm not opposed to exposing it. ""Useful for grid-based approaches"" is too vague for me to be _for_ it, but I don't need to be. Hi Jonathon, I just made all of your suggested changes. Everything compiled and ran properly :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2210#issuecomment-877864950:14,risk,risk,14,https://psicode.org,https://github.com/psi4/psi4/pull/2210#issuecomment-877864950,1,['risk'],['risk']
Safety,"> I would strongly prefer if Psi4 retained at least some compatibility with BLAS/LAPACK implementations beyond MKL/Accelerate, like OpenBLAS which does implement extensions like daxpby. Oh, yes, I agree that Psi4 should continue to/strive to work with a range of implementations. Right now it's not bad at detection. But non-MKL doesn't get tried out too often. I'll see how OpenBLAS fares again soon when I try c-f psi4. There, the recc is to compile against netlib, then let user choose the backend at runtime. Alternately, one can hard-code MKL, etc. It's good to see that OpenBLAS with OpenMP is now an option (https://github.com/conda-forge/openblas-feedstock/blob/main/recipe/meta.yaml#L20). I think it was pthreads only a few years ago. My comment on ""works only for MKL or Accelerate"" was meant for only the daxpby check, so we're not blocking the Accelerate folks. > It is disappointing that Apple's budget does not seem to cover updating their LAPACK library with contemporary extensions. Hear, hear! And fix bugs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2895#issuecomment-1468730524:306,detect,detection,306,https://psicode.org,https://github.com/psi4/psi4/pull/2895#issuecomment-1468730524,1,['detect'],['detection']
Safety,"> I'd like some confidence that these changes really are essential preparation for work-in-progress in the CDS group that you expect to be submtited soon. Both of these changes are necessary for semi-numerical exchange, which I plan to submit in the next week or two. Because these changes touch important parts of the SCF/JK code but shouldn't change any existing behavior, I thought it would be best to submit them separately. > Can you give me an outline, or a draft PR, of how this responsibility transfer simplifies Incremeental Fock?. Sure, I'll do my best to explain. As you probably know, `JK` objects are used throughout the codebase via calls to `JK::compute()`. In SCF, many calls to `JK::compute()` are made interspersed with updates to the object's orbitals. `JK::compute()` does a [few things](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/jk.cc#L550): performs sanity checks, creates densities from the orbitals, zeroes out the object's `J`/`K`/`wK` matrices, and finally calls the virtual function `compute_JK()`, which is where each child class implements some algorithm to fill `J`/`K`/`wK`. Now consider incremental Fock construction. Instead of recomputing `J`/`K`/`wK` each SCF iteration, the previous iteration's `J`/`K`/`wK` are added to a `J`/`K`/`wK` computed with the difference in densities between the current and previous iterations. As [implemented in the `DirectJK` class](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/jk.h#L724-L734), this accomplished by storing the entire `J`/`K`/`wK` matrices of the previous iteration, computing the difference density update to `J`/`K`/`wK`, adding the two together, and storing in the `JK` objects `J`/`K`/`wK` matrices. This requires a lot of [convoluted bookkeeping](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/DirectJK.cc#L138-L217). Future JK classes that would want to do incremental Fock build would have to duplicate a lot of code, too. Instead, a much simpler approac",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2529#issuecomment-1089141879:893,sanity check,sanity checks,893,https://psicode.org,https://github.com/psi4/psi4/pull/2529#issuecomment-1089141879,2,['sanity check'],['sanity checks']
Safety,"> I'd protest against code duplication in options, but I hope to see liboptions retirement, so not worth dev time for consolidation. Yeah I don't like it either, but it looks like it already has plenty of it going on and I couldn't think of a way to avoid it... is there a way to write both unsafe and safe versions of a function without code duplication?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1477#issuecomment-498756844:250,avoid,avoid,250,https://psicode.org,https://github.com/psi4/psi4/pull/1477#issuecomment-498756844,3,"['avoid', 'safe', 'unsafe']","['avoid', 'safe', 'unsafe']"
Safety,"> I'm building Libint2 via Psi4; I wouldn't have this error otherwise ;). The hartree-fock++ test case won't happen, but the eigen3 detection can still be a problem even with pre-built because the l2 c++ interface needs it to compile p4 against. > I'm waiting on Ed to release a stable updated version of Libint2, so that I can package it in Fedora. I've seen some clues that he's waiting on this. I need to get the mpfr and eigen3 detection fixed before I can start ready-to-merge negotiations. Also, I don't know if EFV is planning the sph-ordering-as-runtime-option for the 2.7 release so that psi can use the Fedora distribution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2046#issuecomment-737442203:132,detect,detection,132,https://psicode.org,https://github.com/psi4/psi4/issues/2046#issuecomment-737442203,2,['detect'],['detection']
Safety,"> I'm fine defaulting it to `OFF`, to be honest! Probably safer that way, in regards to unforeseen errors/issues. sounds good. I think it's worth turning on in azure, if that wasn't already in your plans.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2018364039:58,safe,safer,58,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2018364039,1,['safe'],['safer']
Safety,"> I'm trying to build a ML model that can predict the converged density matrix. To verify whether the model is of any value, I wish to plug the predictions into a quantum chemistry program. Well, I've worked on initial guesses in [J. Chem. Theory Comput. 15, 1593 (2019)](https://doi.org/10.1021/acs.jctc.8b01089) and [J. Chem. Phys. 152, 144105 (2020)](https://doi.org/10.1063/5.0004046); I hope you are aware of these works, the first one being especially topical for what you want to do. If you need quantum chemistry expertise, feel free to reach out. I honestly don't know if it would just be a question of reordering px, py, and pz, or whether there are also differences in the basis functions' normalization and phase.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2897#issuecomment-1470573935:42,predict,predict,42,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1470573935,2,['predict'],"['predict', 'predictions']"
Safety,"> Ideally, the list of functionals in Psi4 would depend on the version of libxc available. Not to be snarky, but when there are two upstream libxc-s that can build and are API compatible with Psi, I can probably arrange for varying functional lists. For present, I yearn for one. (I may be misunderstanding your point.) . > And yes, it would be nice to be able to compile Psi4 without modifications against the distribution version of libint. The Fedora package supports very large angular momentum, whereas the default libint that's automatically compiled by Psi4 can't handle density fitting basis sets for transition metals... And the trouble is that Psi4 only detects via the cmake interface whereas other libint downstreams in Fedora require pkgconfig? iirc, Psi uses libint's cmake to also set some AM compile defs, not just location detection, so pkgconfig detection insufficient. Would having libint's cmake write out the pkgconfig files (as libxc now does) allow the cmake libint to work for everyone?. I agree I wouldn't ship a production distribution with the default angmom. I like 7 locally and soon I'll make conda use the 8 pkg (now optional) by default instead of the lighter 6. Only potential trouble for you is that libderiv AM = libint AM – 1. If you're going _really_ high for libint, deriv may not cooperate. -----------. I was misremembering when I wrote https://github.com/psi4/psi4/issues/1302#issuecomment-450762992 .; * cmake was why Psi v1.1 couldn't use upstream libxc 3 (so we forked 3 and added cmake).; * functional tweakers not in public API was why Psi v1.2 couldn't use libxc 4 w/o losing functionality (so we forked libxc 4.0 and added the rejected [MR 62](https://gitlab.com/libxc/libxc/merge_requests/62) plus a few merged build MRs). The same libxc ~4.0 is the current state of Psi master.; * The missing tweakers of rejected MR 62 were replaced in merged [MR 67](https://gitlab.com/libxc/libxc/merge_requests/67) but that's a different API (solved by #1101) and ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451132442:664,detect,detects,664,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451132442,3,['detect'],"['detection', 'detects']"
Safety,"> Iirc, @andysim said that the old libmints solidharmonics.cc code is outdated anyways, and the Helgaker recursions are better. Feel free to comment Andy. Both codes use regular solid harmonics with the exact same normalization (assuming that your Helgaker recursions match that code that I sent to you a while ago, Andy). The code in libmints is stuff that was taken from MPQC, but becomes painfully slow around L=9 or so. We had to reduce the default maximum L a while ago because it was dramatically slowing the Psi4 startup time. So I think that, if it turns out not to be a huge task, replacing the libmints code with smarter recursions is probably not a bad idea. Failing that, the Helgaker version is not really introducing any redundancy because the libmints version won't be able to support high enough a.m. efficiently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2665#issuecomment-1209572192:735,redund,redundancy,735,https://psicode.org,https://github.com/psi4/psi4/pull/2665#issuecomment-1209572192,1,['redund'],['redundancy']
Safety,"> Immediate questions: @davpoolechem - Is JK stable enough for this PR, or do you need a hold on this while refactoring? @jturney - Does this sound more like a new library of its own, or something that belongs in `libmints`? @andyj10224 - Can you comment on what the difference is between `libffm` and `fmm tree`?. CFMM requires two parts: Multipole operations, as well as an octree structure.; FMMTree implements the octree structure needed for CFMM, and there is a lot of code there, so I am splitting this into three parts to aid the review process and to avoid too large a PR. The `FMMTree` class will be in `libfmm` as well. For the record, this PR will not affect `libfock` or any `JK` classes. That will happen in Part 3 (when JK is more stable)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2665#issuecomment-1208368845:559,avoid,avoid,559,https://psicode.org,https://github.com/psi4/psi4/pull/2665#issuecomment-1208368845,1,['avoid'],['avoid']
Safety,"> Including the _order of magnitude_ in a corner of the plot is highly non-standard and leads to the confusion I just went through. Choose units that are of the proper order of magnitude, and include any needed decimals on the axis directly. According to your axes, you have 2 hartree error, which is utterly unacceptable. 0.2 microhartree error is much more reasonable.; > ; > What you're describing confirms that the error is small. That is different from confirming correctness. Are you able to compare the numbers to some other implementation and show agreement? Is there some rare property that the exact scheme has, which you can numerically reproduce?. Ah, the energy convergence criteria itself is 1.0e-6, and the errors are well below that number, so I strongly believe that we are safe. It may not be a good idea to compare to another implementation since every implementation has different tricks thrown in. Rather, if the energy difference is less than the e_convergence criteria, we are definitely safe. Though we could try to reproduce something like MBIS charges to check if we are safe.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821197961:791,safe,safe,791,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821197961,3,['safe'],['safe']
Safety,"> My vote is to either end or temporarily pause this PR and open a new PR just for swapping out the solid harmonics technology. Of course, @jturney's judgment overrides mine. I do think we can essentially move the methods in the `HarmonicCoefficients` class to `libmints/solidharmonics.cc`. But I agree that would be 2 PRs. In that case, having a separate `libfmm` would be useful, to avoid the clutter already present in `libmints`. Of course, waiting for @jturney's judgement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2665#issuecomment-1209843989:385,avoid,avoid,385,https://psicode.org,https://github.com/psi4/psi4/pull/2665#issuecomment-1209843989,2,['avoid'],['avoid']
Safety,"> Potentially print the symmetrized molecule and abort after that. Implementing that would require reworking the callers of `atom_at_position`, as it is a fairly low-level function that is not only called when we are trying to symmetrize. Throwing an exception in `atom_at_position` after the warning, and catching it in the symmetrization function may be feasible, other callers would not catch it and the uncaught exception would terminate execution. > But I imagine in practice the error could occur if a user tries to symmetrize a molecule with a questionably large tolerance.; This is the primary reason why I am reworking this, although I also tend to abuse QC programs with thousands of extreme geometries. A third option would be to raise an error in `atom_at_position` by default, but add an expert option to turn the error into a warning.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1064088333:49,abort,abort,49,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1064088333,1,['abort'],['abort']
Safety,"> So far I think this looks great - type safe python with a lot of testing, and a great modular design for the solvers. . All AJ's work!. > I really like the line broadening plot generation. . Thanks, it took me an embarrassingly long amount of time to check that units of measure all made sense... > If there's some kind of provenance info that can be added to the json reference data file that would be handy. I have the raw G09 input and output files, together with the notebook that extracts the data from the formatted checkpoint files. Should I include that in the `pytests` folder?. @loriab I'm seeing some funny behavior (or most likely I don't understand what the normal behavior actually is); ```; molecule {; 0 1; O 0.000000 0.695000 -0.092486; O -0.000000 -0.695000 -0.092486; H -0.388142 0.895249 0.739888; H 0.388142 -0.895249 0.739888; }. set {; tdscf_states 10; scf_type pk; }. energy('td-scf/cc-pvdz'); ```; I'd expect this to converge the wavefunction to `D_CONVERGENCE` 1e-6 and then compute the 10 states to `TDSCF_R_CONVERGENCE` 1e-4 The thresholds seems however to be 1e-8 (and 1e-6) respectively. I can't figure out where `D_CONVERGENCE` gets tightened from what stated in the [table](http://psicode.org/psi4manual/master/scf.html#convergence-and-algorithm-defaults)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-644236820:41,safe,safe,41,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644236820,1,['safe'],['safe']
Safety,"> So unless there are complications like funding agencies not allowing grant funds to be spent at arbitrary server providers, I think one can get more bulk compute for less money, compared to Amazon. Of course on-demand EC2 is very good for doing short bursts of compute, but for job marathons I don't think Amazon is all that competitive, not even with their own ARM CPUs. Fair points all, and you're right that the original claim was too strong. For the situation we're in, burstable cloud compute makes by far the most sense. I know AWS is pretty commonly used for quantum chemistry in pharma, although you're right that ""Tier 1"" hyperscalers (AWS, Google Cloud, Azure) are almost always more expensive than ""Tier 2"" cloud providers like Digital Ocean, Vultr, Linode, etc. Frankly, if you want to run years of sustained workloads, you're probably better off avoiding the cloud altogether... But the broader point stands that ARM compute seems to be cheaper than x86 compute, at least as far as I've seen across different cloud providers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3198#issuecomment-2286357658:861,avoid,avoiding,861,https://psicode.org,https://github.com/psi4/psi4/issues/3198#issuecomment-2286357658,1,['avoid'],['avoiding']
Safety,"> Tarballs downloaded from GitHub are not git repositories. We use them in FreeBSD ports.; Nothing important should be hard-wired to Git during build/tests. I agree broadly, though I'd sacrifice it to get fine-grain versioning for cross-project communication if needed :-). The way psi is set up now, if the buildsys detects that it's not a git repo, it substitutes some generic most-recent-tag info and proceeds, so that one gets a working build. When I try, it works as planned:. acquire tarball; ```; > curl -L https://github.com/psi4/psi4/tarball/master -o psi4_v17.tgz; ```; configure and build -- it detects ""no git""; ```; # configure (all req'd deps detected except optking to be build from src); > cmake --build . -j12; ...; [ 88%] Performing build step for 'psi4-core'; [ 1%] Generating version info; [ 1%] Building CXX object src/psi4/lib3index/CMakeFiles/3index.dir/dftensor.cc.o; ...; [ 2%] Building CXX object src/CMakeFiles/l2export.dir/export_mints.cc.o; Blindly (no git) accepting release version: 1.7+6ce35a5 (recorded); 1.7 {} 6ce35a5 1.7.0.0 release 1.7 <-- 1.7+6ce35a5; [ 2%] Built target update_version; [ 2%] Building CXX object src/psi4/libciomr/CMakeFiles/ciomr.dir/dsyev_ascending.cc.o; ...; ```; version computes and simple test, distributed driver tests, and dftd3 addon tests work ok; ```; > stage/bin/psi4 --psiapi # execute results; >>> stage/bin/psi4 --version; 1.7; >>> ctest -R tu1; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 426: tu1-h2o-energy; 1/1 Test #426: tu1-h2o-energy ................... Passed 1.65 sec. 100% tests passed, 0 tests failed out of 1; >>> ctest -R ddd; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 479: ddd-deriv; 1/2 Test #479: ddd-deriv ........................ Passed 13.18 sec; Start 481: ddd-function-kwargs; 2/2 Test #481: ddd-function-kwargs .............. Passed 170.20 sec. 100% tests passed, 0 tests failed out of 2; >>> ctest -R dftd3; Test project /psi/gits/tarbuild/psi4-psi4-4d94",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826:317,detect,detects,317,https://psicode.org,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826,6,['detect'],"['detected', 'detects']"
Safety,"> The action item here is to have some way to adjust the symmetrization threshold. I think updating the docs would also be a good idea. > The symmetry detection does not try to symmetrize the geometry to my knowledge.; > But there is a symmetrize function than can be explicitly called. It has been a while, but I cannot recall seeing this anywhere when I was reading the docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2463#issuecomment-1152922722:151,detect,detection,151,https://psicode.org,https://github.com/psi4/psi4/issues/2463#issuecomment-1152922722,1,['detect'],['detection']
Safety,"> The energy of H2C-C5-CH2 is computed to be -43.4074821405164926 Eh, and the energy of heptatriyne is computed to be -42.0459519798808898, leading to a predicted ∆E of -854 kcal/mol. The ""correct"" high-level value is -14.30 kcal/mol, and the authors of the wB97X-3c paper report an energy of -13.17 kcal/mol for this system. With psi4 1.9.1 from conda I get -43.40752609176465 for H2C-C5-CH2 and -42.04595200805039 for heptatriyne. My numbers are oddly different from yours, but they do show a difference of 854 kcal/mol.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221#issuecomment-2407578665:153,predict,predicted,153,https://psicode.org,https://github.com/psi4/psi4/issues/3221#issuecomment-2407578665,1,['predict'],['predicted']
Safety,"> Then in main psi4/CM, either libraries get detected or the dummy lib gets added to psi4?. Not sure this is exactly correct. If enabled (or psi4 requires it), doesn't the psi4 core always try to find the library? There is no dummy library at this point. This part somewhat confusing, but I think the entire purpose of the dummy external project INTERFACE libraries is for dependency resolution (ie build order). Then, the psi4 core always finds them itself (if needed). Note 1: If an addon isn't enabled, adding the dummy target isn't strictly required. But then you'd have to selectively add them to the dependency list, rather than always adding it. Note 2: Shouldn't the result of optional_plugin be nothing if enable_addon is false?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238060504:45,detect,detected,45,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238060504,1,['detect'],['detected']
Safety,"> There is 1 algorithmic difference I'd be concerned about, from looking at the two outputs. New optking doesn't consider the most recent step in the hessian updating procedure - cpp-optking did. I've found three pieces of logic that explicitly or implicitly prevent updating with the most recent step in all or specific cases. I'd have to ask @psi-rking if this is a bug or was changed due to some stability concern. Interesting. This does not ring a bell for me. I take the question to be ""given a hessian and the current forces (beyond the first step) should you update the hessian with those forces before using them to calculate the step?"" Can you point to the code? IDK, probably best answer is whatever works better in practice and doesn't cause problems. Actually, it's possible I did this because I learned to avoid hessian updating when displacements are very small (or the geometries are very close). Perhaps I didn't want to update hessian until I knew the step size.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262708139:819,avoid,avoid,819,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262708139,2,['avoid'],['avoid']
Safety,"> There is no upstream deprecation for this one, so comments and discussion is welcome. gtk, thanks. > I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. Quite right, I think it was for downstream C++ plugins that the full export set was intended. Python exports (relatively newfangled c. 2016) have been as-needed. > The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. Agree on the daunting. In the same category as the libqt exports are the CMake LAPACK detection and testing with other LAPACK distributions. Right now, I'm hardwiring the psi4 conda-forge recipe to MKL, but it'd be nice in future to relax that to normal usage (compile against a generic interface, then allow runtime selection of distribution) if we could do so with assurance (last time OpenBLAS was tried, we had threading oversubscription for SAPT iirc). > I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672:1138,detect,detection,1138,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672,1,['detect'],['detection']
Safety,"> This can hypothetically happen in two ways: the atoms are either extremely close, or the tolerance is set to a large value. unphysical close atoms should be acceptable as input, even if mostly of academic interest. But I imagine in practice the error could occur if a user tries to symmetrize a molecule with a questionably large tolerance.; Then the question is if we should indeed abort or still try to symmetrize hoping to get lucky?; Potentially print the symmetrized molecule and abort after that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1064071052:385,abort,abort,385,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1064071052,2,['abort'],['abort']
Safety,"> This reminds me, there _is_ a technique to avoid recomputing every `N` iterations. Namely, I think Ahlrichs(?) described a procedure where one keeps track of the change of the density matrix from the reference one by setting `D_0=0` and `D_i = D_{i-1} + max{|Duv|}` where `Duv` is the difference density matrix at iteration `i` and `D_i` tracks the changes. Instead of doing the reset every `N` iterations, one does a full rebuild when `D_i >= eps` because by then sufficient numerical error may have creeped into the calculation. Thank you for telling me about this! This is an intriguing idea overall. Essentially, instead of hard-setting a number of iterations to fully recompute the Fock matrix, one does it dynamically based on how much the density matrix has changed over time. While I don't think this PR is the right place to implement such a scheme (with 1.7 is right around the corner; and since such a scheme would break standardization of IncFock between the different integral-direct JK builds Psi4 has currently, assuming we implement it only in DFJCOSK for this PR), it could be worth investigating in the future. The potential for removing a human-set parameter (INCFOCK_FULL_FOCK_EVERY in this case) is always appealing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2816#issuecomment-1337458155:45,avoid,avoid,45,https://psicode.org,https://github.com/psi4/psi4/pull/2816#issuecomment-1337458155,1,['avoid'],['avoid']
Safety,"> Three hours and nine minutes, according to the timestamps I have for relevant events. I believe the build ran on a 32-thread (16-core) intel broadwell (with ample memory to avoid paging, for however much that helps), and the build was the only event happening on the machine at that time. (I am a little unsure, though, as it's a build-server, and I don't have any way of telling who else might've submitted a build job to the machine at that time. It was ~1AM on a Saturday, though, so probably just me). Also, the .so file generated was 925MB, if that's of any interest. Thanks for the info. It must be the Intel compiler and multiarch flags that lengthen my builds by an order of magnitude. > Should I worry at all that the tarball represents a WIP in terms of the actual integral files? Or does the trial status only regard the configuration?. I expect the integral files in that tarball to be perfectly good. I've checked my local diff again, and nothing else should be harmful. One caveat is that the integrals author generally dissuades building AM>7, so I had to defeat those checks, but I know people who have built higher than that tarball (albeit different versions of the code) without known ill effects. If you've got an `.so`, and psi4 passes a few tests, I think you're good to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2586#issuecomment-1133805493:175,avoid,avoid,175,https://psicode.org,https://github.com/psi4/psi4/issues/2586#issuecomment-1133805493,1,['avoid'],['avoid']
Safety,"> Wait, why do we want to ""turn off the incremental build once a preset level of `D_CONVERGENCE` is achieved""? Is the idea that the numerical creep is within the `D_CONVERGENCE` tolerance?. I would maybe turn it off when the final `D_CONVERGENCE` has been reached, and then do full rebuild(s) until SCF convergence has been achieved. It's been almost a decade since I worked with the equations for direct SCF; wasn't there some cutoff parameter that's used to discard ""small"" elements to the Fock matrix? This may not be accurate enough so it's always safer to do a full build at the end. Again, the point about resets is just to prevent numerical creep, which might require several more costly full rebuilds.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-940988917:552,safe,safer,552,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-940988917,1,['safe'],['safer']
Safety,"> Wow, a lot of PYTHON->Python for you to track down there. Is that syntax change a recent thing? LGTM!. I guess long, long ago, cmake's native python's detection had no notion of finding matching interpreter/library pairs. That reported its results as `PYTHON_FOUND` and friends. Hence numpy/pb11/us used the `FindPythonLibsNew` module that had mixed c++/py in mind and also reported as `PYTHON_*`. But the cmake native detection has been much revamped, reformed, and componentized, enough to [inspire pybind11 to switch over](https://github.com/pybind/pybind11/pull/2370/files). The new setup reports as `Python_*`. The long time it's taken to get cmake's new detection modules hammered out leads to the big jump to 3.15. There may still be plugin and docs build follow-up items, but I think I've caught most of the `Python`s. Main thing ppl have to do is edit their setup scripts if they're hinting the `PYTHON_EXECUTABLE`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2048#issuecomment-764963688:153,detect,detection,153,https://psicode.org,https://github.com/psi4/psi4/pull/2048#issuecomment-764963688,3,['detect'],['detection']
Safety,"> You also have `find_package(Libint ...)` that can't work because libint2 doesn't provide cmake files, and you don't provide them either. libint2 does (or at least can) provide cmake files, even with the 2.6.x releases, but it's somewhat tricky. I don't think anything besides psi4 uses them, and for psi4 they are broken/much bigger issues (see above). As I mentioned in https://github.com/evaleev/libint/issues/190#issuecomment-1003936604 libint2 (experimental Debian 2.7.1 package) gets detected fine, but there are build errors later on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2398#issuecomment-1008119932:491,detect,detected,491,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008119932,1,['detect'],['detected']
Safety,"> [psi4-test.txt](https://github.com/psi4/psi4/files/8883628/psi4-test.txt) contains the results of `psi4 --test` kindly let me know if this mean that psi4 is in functional state. Here is the `conda list` output in case it is needed. [psi4-env_conda-list.txt](https://github.com/psi4/psi4/files/8883643/psi4-env_conda-list.txt). Yes, the base Psi4 is functional. All the messages about skipped tests indicate that there are addons that Psi4 _has_ but that your Psi4 installation isn't detecting as installed. Based on your conda list, these are probably not installed, so this behavior is expected. Let us know if there are addons that you need but don't know how to get. (Examples: `dftd4` for DFT dispersion corrections, `cct3` for some exotic coupled cluster variants, `cppe` for polarizable embedding.). > Now I have some compatibility issues against python3.8 but that's with other packages I am trying to use.; > ; > Just to make sure, psi4 is no longer supported on python3.7, right?. The latest Psi4 is no longer supported on Python 3.7, correct. If you need 3.7 support, dropping down to Psi4 1.5 is technically an option.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2598#issuecomment-1152920803:485,detect,detecting,485,https://psicode.org,https://github.com/psi4/psi4/issues/2598#issuecomment-1152920803,1,['detect'],['detecting']
Safety,"> ah, was this choking in `OEProp` when you pushed an EOM wfn? or was it computing properly and just giving the redundant name? regardless, good catch. Computing properly and not giving the expected `CCSD DIPOLE`. This led to an error when I fixed a bug in AJ's code. That should be fixed in the next `cc` series PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2533#issuecomment-1089317532:112,redund,redundant,112,https://psicode.org,https://github.com/psi4/psi4/pull/2533#issuecomment-1089317532,1,['redund'],['redundant']
Safety,"> error: process exited with status -1 (cannot attach to process due to System Integrity Protection); > (lldb). Are you using the system python? I have SIP disabled but I would not be surprised if you can't attach the debugger to an executable that falls under that protection. . To disable SIP you need to reboot into recovery mode, then reboot again for it to take effect.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/491#issuecomment-258535598:319,recover,recovery,319,https://psicode.org,https://github.com/psi4/psi4/issues/491#issuecomment-258535598,1,['recover'],['recovery']
Safety,> is there any reason not to grab this variable from the incoming wavefunction?. I think that's a safe solution nowadays.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2305#issuecomment-929220194:98,safe,safe,98,https://psicode.org,https://github.com/psi4/psi4/issues/2305#issuecomment-929220194,1,['safe'],['safe']
Safety,"> the default settings we chose are not to avoid breaking tests but because tighter settings are wholly unnecessary (and often exceedingly difficult to achieve) for transition properties. > may be useful to separate the convergence criteria for the t's and lambdas, if not already done. The running plan is to rename `r_convergence` to `lambda_convergence` or somesuch within `cclambda`, with some logic to auto-set `lambda_convergence` is that is _not_ set but `r_convergence` _is_. `occ` and `dfocc` use a similar trick. For context, ""exceedingly difficult to achieve"" means [you're trying to solve ill-conditioned equations](https://github.com/psi4/psi4/issues/2519#issuecomment-1089612589). I'm expecting to be the one who picks this up, and when the time comes, I'll do a quick convergence study to double-check the sensitivity of properties to this parameter.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2520#issuecomment-1089636980:43,avoid,avoid,43,https://psicode.org,https://github.com/psi4/psi4/issues/2520#issuecomment-1089636980,1,['avoid'],['avoid']
Safety,"> tol=14 or 15, everyone?. I have the impression PSI4 always leans on the conservative side of thresholds, instead of tuning things for speed. Also, perhaps for floppy frequencies or similarly sensitive calculations one wants to be as safe as possible. Then tol=15 might be the safe choice. But..on the other hand it is DFT and the error from the quadrature itself is larger except for impractically large grids, I suppose. The often tight gradients and frequencies tests of psi4 pass with the current tolerance of 14. A dynamic adjustment of the threshold could be envisioned, but I think that would be overkill.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1581#issuecomment-498769923:235,safe,safe,235,https://psicode.org,https://github.com/psi4/psi4/pull/1581#issuecomment-498769923,2,['safe'],['safe']
Safety,"> uh-oh, it's finding pedantic errors in integratorxx now `/include/integratorxx/generators/s2_factory.hpp:24:2: error: extra ‘;’ [-Wpedantic]` . this would be a fault of our appending to `CMAKE_CXX_FLAGS`, which wasn't so outrageous back in the day.; > ; > thinking about it, there would be a lot more of these interferences with other projects if the CI wasn't detecting so much as pre-built. which means that developers building deps from source will likely have builds fail since force_pydantic defualts to ON and if the dep projects aren't pedantic clean. so this was probably a lucky block to the merge.; > ; > I'm not sure right off if there's a quick+good solution. you could move the option to here https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L222 _after_ the externals have been added. and maybe turn the default to OFF but add it (`-D`) as ON to the azure CI. I'm going to put a needs-changes block so I remember it isn't just a spurious test fail in the merge queue. lmk if you disagree with any of my hasty conclusions. Yeah, I feel like I ran into this issue previously with Einsums. It's part of why I was so concerned about this PR in the first place, and whether `FORCE_PEDANTIC` should be on by default. I can definitely toy around and see if I can get the pedantic flag to only apply to Psi-side code, like you suggested. Worst-case scenario, we just turn `FORCE_PEDANTIC` off by default?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2017950145:363,detect,detecting,363,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2017950145,1,['detect'],['detecting']
Safety,"> what about `guided`?. All that matters is that we avoid `static`, which can lead to an uneven distribution of work across threads. `guided` is about as good as `dynamic` here. `dynamic` has optimal load balancing at the cost of slightly more overhead than `guided`. The work/iteration is large for these loops, making this additional overhead is negligible. . Here's a comparison of the different schedules (wall time in seconds, large alkane on an 18 core CPU):. | Code | `static` | `guided` | `dynamic` |; |------|-----------|--------|---------|; | Numerical Integration (Loop 1) | 36.9 | 36.9 | 36.7 |; | DF Integrals (Loop 2) | 299.0 | 278.7 | 279.7 |; | PNO Transform (Loop 3) | 80.9 | 80.4 | 78.4 |; | PNO Overlap (Loop 4) | 29.8 | 29.3 | 24.4 |; | Total DLPNO-MP2 | 528.2 | 506.6 | 498.2 |. You can see that `dynamic` is possibly a hair better than `guided`, but both are better than `static`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2378#issuecomment-989020297:52,avoid,avoid,52,https://psicode.org,https://github.com/psi4/psi4/pull/2378#issuecomment-989020297,2,['avoid'],['avoid']
Safety,"@JonathonMisiewicz ; Thanks for you reply. Your comments summarized my questions very nicely. Now, I am just focusing on the CASSCF part first. ; I realized that there was a mistake in the 'docc' assignment in my previous run. The docc part should be: [3, 0, 0, 0, 0, 1, 1, 0]. I thought that I needed to exclude the restricted_docc in the docc input.; After correcting this mistake, I started calculating the potential energy curves (the lowest 6 Pi_g symmetry). However, I obtained some mysterious roots that I initially did not know what they were, but now I think these extra roots are the quintet (S=2) states that somehow show up in the calculation results, even though I asked for only the singlet (S=0) . In the figure titled as Singlet_pig, the blue dots are the singlet states and the yellow dots are what I believe the quintet states. Note that straight from the calculations, there are two states that converge to the lowest C+C dissociation limit (triplet P+triplet P). This can't happen because triplet P+triplet P dissociation channel correlates with only one singlet Pi_g state. Now, the red curves are from a calculation that explicitly calculates quintet Pi_g states. The red curves overlap well with the yellow dots (except for one curve, which I don't understand). If I took out the quintet states (by looking at the coefficients of the CI determinants), the remaining singlet potential energy curves (Pi_g +Phi_g symmetry) agree with CASSCF calculations from Molpro (provided by my collaborator; I was trying to reproduce his curves). I am wondering why do those quintet states show up in the calculation of singlet states. Similar things happen when I tried to calculate the triplet Pi_g states. More importantly, what should I do to avoid having higher multiplicity states from the calculation? Is there a keyword that I missed?. ![singlet_Pigs](https://user-images.githubusercontent.com/65833552/83825292-c1c90e00-a68d-11ea-9a30-1c0d8cdbdfe3.png)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1907#issuecomment-639202060:1756,avoid,avoid,1756,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-639202060,1,['avoid'],['avoid']
Safety,"@JonathonMisiewicz I'm not using conda at all, as described above, i started from a clean directory, cloned the source, ran cmake and make. The libint is the one that is automatically downloaded if no libint was found:; ```; -- Suitable Libint2 could not be located, Building Libint2 5-4-3-6-5-4 instead.; ```; in the cmake step and; ```; [ 10%] Performing download step (download, verify and extract) for 'libint2_external'; [ 12%] Performing download step (download, verify and extract) for 'pybind11_external'; -- Downloading...; dst='/scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/Libint2-export-5-4-3-6-5-4_mm4f12ob2.tgz'; timeout='none'; inactivity timeout='none'; -- Using src='https://github.com/loriab/libint/releases/download/v0.1/Libint2-export-5-4-3-6-5-4_mm4f12ob2.tgz'; -- Downloading...; ``` ; in the make step. @loriab Thanks for the quick reply, i will try and report back.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2572#issuecomment-1121208944:681,timeout,timeout,681,https://psicode.org,https://github.com/psi4/psi4/issues/2572#issuecomment-1121208944,2,['timeout'],['timeout']
Safety,"@JonathonMisiewicz Yeah, I realized that I was doing redundant work. I fixed this issue. Great catch, thank you for pointing that out. Please continue review :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1035839142:53,redund,redundant,53,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1035839142,1,['redund'],['redundant']
Safety,"@JonathonMisiewicz; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 238aecf08 has been issued to your PR branch; * the commit updates 96 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin jonathonmisiewicz-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin jonathonmisiewicz-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/5 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911:607,avoid,avoid,607,https://psicode.org,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911,1,['avoid'],['avoid']
Safety,"@MartinBeseda, there's a chance you don't have the same problem as the OP but just have the same error message. If you've got an existing gau2grid installation (which can only be built through cmake or setup.py (that runs cmake behind the scenes) and thus always installs `gau2gridConfig.cmake`), but psi4 or another downstream with `find_package(gau2grid CONFIG)` isn't detecting it and is printing the error in the issue, you can pass `-Dgau2grid_DIR=/path/to/dir/of/gau2gridConfig.cmake` to the downstream build to guide it. https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L62. If you're looking to compile but not package, also note that you can get all the deps pre-build from conda https://admiring-tesla-08529a.netlify.com/installs/v13/ (select ""source"").",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1588#issuecomment-482921785:371,detect,detecting,371,https://psicode.org,https://github.com/psi4/psi4/issues/1588#issuecomment-482921785,2,['detect'],['detecting']
Safety,"@PeterKraus thanks for this helpful update. This will eliminate some redundant computations, which is helpful (especially for people who just want a dimer IE). Thanks also for testing the gradients. I have one quibble with the user interface. What happens if a user tries to run an optimization but only uses bsse_type=['cp']? The monomer energies in the monomer basis sets need to be calculated so that we have total energies... trying to optimize the interaction energy only, without some special constraints in the optimizer to keep the monomers frozen (a capability we do not have automated right now), will give garbage. 99% of users will not be clever enough to realize that if they want the counterpoise-corrected geometry of a dimer, they need to include ""nocp"" in their bsse_type list. Can you solve this by forcibly adding monomers (and perhaps option ""nocp"" internally, if you want) when an optimization is requested? I would like to head off a lot of posts on the user forum about CP-corrected optimizations that went wrong :). Minor question about printing. I agree that things that are not total energies should not be printed in the total energy column. However, what are you doing if bsse_type='cp'? Leaving it blank? That might cause a problem for anyone trying to scrape the output file. Should there be something there, like ""n/a"" or something?. Also, when you do print the total energy, it's the same total energy as before your PR, right? The total energy of a dimer should be E_AB(AB) minus the Boys-Bernardi estimate of the BSSE, which is [E_A(AB) - E_A(A) + E_B(AB) - E_B(B)]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254:69,redund,redundant,69,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254,1,['redund'],['redundant']
Safety,"@TiborGY *Conda* package for *Windows* have to be built with VS 2015 (https://conda.io/docs/user-guide/tutorials/build-windows.html#microsoft-visual-studio). So I'm doing that to avoid compatibility problems and make later deployment easy. @tonigi I hacked a bit `psi::libfilesystem` to compile, but is making a lot of test to segment fault. Yes, I also found `std::experimental::filesystem` and it looks as good option.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-404166121:179,avoid,avoid,179,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-404166121,2,['avoid'],['avoid']
Safety,"@cdsgroup; Based upon a build of the documentation target (`make sphinxman` locally with Sphinx installed at CMake configuration time):; * an automated commit has been issued to your PR branch; * this updates `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin <prbranch>` to synchronize your local branch with GH; * an automated pull request has been issued to the docs website repo previewing `<objdir>/doc/sphinxman/html`; * preview docs changes at https://github.com/psi4/psi4docs/pull/2; * further action on auto pull request not required",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2148#issuecomment-814590009:320,avoid,avoid,320,https://psicode.org,https://github.com/psi4/psi4/pull/2148#issuecomment-814590009,1,['avoid'],['avoid']
Safety,"@dgasmith Uggh. And to think that DFT-SAPT is worse ... For reference, alpha is presently incorporated into the psivar name (https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/psivardefs.py#L42). The way I'd frame the question is:; * Is `S^2`/`S^inf` an _option_ that modifies the infinite-precision value of the same physical quantity (like `PK`/`DF` `HF TOTAL ENERGY`)?; * or Are `S^2`/`S^inf` terms distinctly different physical quantities computed (e.g., Ind20/Ind30 or singlet/triplet MP2 correlation energy). * Another point, is there ever safe mixing of s2/sinf?; * Can we compute Sinf terms and incorporate them into post-0 SAPT?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/921#issuecomment-366087579:553,safe,safe,553,https://psicode.org,https://github.com/psi4/psi4/pull/921#issuecomment-366087579,1,['safe'],['safe']
Safety,@dgasmith do you not have density thresholding in the dft code? It appears to be a common trick to make dft integration faster to avoid calculating zeros... I think NaNs should be sieved out in the output.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/863#issuecomment-345818205:130,avoid,avoid,130,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345818205,1,['avoid'],['avoid']
Safety,"@hokru For ωB97M-V, it doesn't seem to be possible to change the ω parameter directly from the psithon interface—there's a check at https://github.com/psi4/psi4/blob/d9093c75c71c2b33fbe86f32b25d138675ac22eb/psi4/src/psi4/libfunctional/LibXCfunctional.cc#L218 that disallows it. I want to be on the safe side and not manually change it without knowing why the limitation is put in place. . As for DFT_VV10_POSTSCF—it does make things faster by quite a bit, but when I move to nonstandard values of (b,c), it yields deviations ≥ 0.1 Hartree in energy calculations (e.g. using the above geometry with b = 0.5 and c unchanged, I go from -456.38 to -456.17 when I turn on DFT_VV10_POSTSCF).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1194156054:298,safe,safe,298,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1194156054,1,['safe'],['safe']
Safety,"@jturney Fixing this pull request has not been at the top of my priority list, for reasons you can probably guess. The metadata has been added to the ANO0 basis file. This is the only ANO basis set Psi4 has, so I didn't need to add the metadata to any other files. To be safe, I ran the entire file through a diff-checker against the EMSL file. They match. I've used my own timestamp for the metadata.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/825#issuecomment-339744853:271,safe,safe,271,https://psicode.org,https://github.com/psi4/psi4/pull/825#issuecomment-339744853,1,['safe'],['safe']
Safety,"@jturney It seems that CMake is not aware of any compiler features for the Intel compilers...; How do you handle this? Or you never tried to compile your other projects with Intel?; I found some ""custom"" extensions for the Intel compilers, but that would just move the maintenance work from the current detection system to another...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/188#issuecomment-161354287:303,detect,detection,303,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-161354287,1,['detect'],['detection']
Safety,@jturney should've written this and called it JetPACK. I'm not sure there's a more central location; the libqt library (math routines from the original 'quantum trio') is about as central a math library as we have. I agree that avoiding duplication would be very good though.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1347#issuecomment-438494932:228,avoid,avoiding,228,https://psicode.org,https://github.com/psi4/psi4/pull/1347#issuecomment-438494932,1,['avoid'],['avoiding']
Safety,"@loriab . I have rebuilt with system BLAS/LAPACK, instead of MKL. Now all tests passes:. ```; $ ctest -j 8 -E dft-bench --timeout 3600; Test project /home/raimis/psi4.git/linux_build; Start 394: python-vibanalysis; Start 162: dft-grad-lr3; Start 103: dcft-grad1; Start 178: fsapt1; Start 227: mp2-def2; Start 45: cc3; Start 110: dcft4; Start 182: isapt1; 1/411 Test #45: cc3 .............................. Passed 181.10 sec; Start 300: pywrap-all; 2/411 Test #110: dcft4 ............................ Passed 232.06 sec; Start 145: dfomp2-grad3; 3/411 Test #103: dcft-grad1 ....................... Passed 301.39 sec; Start 304: pywrap-checkrun-rhf; 4/411 Test #145: dfomp2-grad3 ..................... Passed 139.18 sec; Start 306: pywrap-checkrun-uhf; 5/411 Test #300: pywrap-all ....................... Passed 191.66 sec; Start 39: cc24; 6/411 Test #227: mp2-def2 ......................... Passed 397.60 sec; Start 40: cc25; 7/411 Test #162: dft-grad-lr3 ..................... Passed 412.33 sec; Start 38: cc23; 8/411 Test #182: isapt1 ........................... Passed 416.77 sec; Start 76: cc7; 9/411 Test #304: pywrap-checkrun-rhf .............. Passed 243.61 sec; Start 36: cc21; 10/411 Test #39: cc24 ............................. Passed 229.63 sec; Start 35: cc2; 11/411 Test #76: cc7 .............................. Passed 204.63 sec; Start 240: ocepa-freq1; 12/411 Test #40: cc25 ............................. Passed 228.58 sec; Start 41: cc26; 13/411 Test #38: cc23 ............................. Passed 232.18 sec; Start 42: cc27; 14/411 Test #306: pywrap-checkrun-uhf .............. Passed 316.81 sec; Start 111: dcft5; 15/411 Test #394: python-vibanalysis ............... Passed 760.31 sec; Start 18: cbs-xtpl-func; 16/411 Test #36: cc21 ............................. Passed 216.12 sec; Start 181: fsapt-allterms; 17/411 Test #41: cc26 ............................. Passed 181.93 sec; Start 193: fd-freq-energy-large; 18/411 Test #35: cc2 .............................. Passed 207.82 sec; St",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:122,timeout,timeout,122,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['timeout'],['timeout']
Safety,"@loriab . Reverted the elimination of `title_`. Although I still don't believe it _should_ exist, we need more density matrix standardization before I can safely eliminate it, and I can't standardize density matrices until after this PR is in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2534#issuecomment-1090483411:155,safe,safely,155,https://psicode.org,https://github.com/psi4/psi4/pull/2534#issuecomment-1090483411,1,['safe'],['safely']
Safety,"@loriab As you suggest `-DOpenMP_CXX_LIBRARY_DIRS=/path/to/iomp5/dir` with cmake (v3.11.3), I try it and my cmake does not recognize the option:; ```; CMake Warning:; Manually-specified variables were not used by the project:. OpenMP_CXX_LIBRARY_DIRS. ```; The second way to edit link.txt gives error message from OMP:; ```; OMP: Error #15: Initializing libiomp5.so, but found libiomp5.so already initialized.; OMP: Hint: This means that multiple copies of the OpenMP runtime have been linked into the program. That is dangerous, since it can degrade performance or cause incorrect results. The best thing to do is to ensure that only a single OpenMP runtime is linked into the process, e.g. by avoiding static linking of the OpenMP runtime in any library. As an unsafe, unsupported, undocumented workaround you can set the environment variable KMP_DUPLICATE_LIB_OK=TRUE to allow the program to continue to execute, but that may cause crashes or silently produce incorrect results. For more information, please see http://www.intel.com/software/products/support/.; Aborted (core dumped); ```; To force running psi4, I follow OMP error message's suggestion (`export KMP_DUPLICATE_LIB_OK=TRUE`), but dft-custom-gga does not work (failed due to the same reason - not converged ). From my several trials, this problem seems not to be related to OMP libraries. Regardless of using either `gomp` or `iomp`, dft-custom-gga test fails under single thread. In other words, whenever multi-thread is used for calculations, it gives good SCF convergence within few iterations, which seems similar with the issue #994 @hokru reported. I thought it might be problem of incompatibilities between GCC compiler and Intel OMP libraries. Like @loriab setting, I changed to use icpc intel compiler (v 18.0.3), instead of gcc (v5.4.0). Re-built '<objdir>' by cmake. Then, opened '<objdir>/psi4-core-prefix/src/psi4-core-build/src/CMakeFiles/core.dir/link.txt' and added '/opt/intel/lib/intel64' (basically intel 64bit libr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809:695,avoid,avoiding,695,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809,4,"['avoid', 'unsafe']","['avoiding', 'unsafe']"
Safety,"@loriab I think setting `CMAKE_PREFIX_PATH` can help with detecting anything usinga `find_package` call. ; Setting `CMAKE_PREFIX_PATH` has the search to prioritize the directories listed in that variable. I actually have no python detection problems if I set `-DCMAKE_PREFIX_PATH=${ANACONDA_LIB}:${ANACONDA_INC}`, but only setting one or the other means either the wrong headers or the wrong library is found instead. Just slightly less typing than setting two separate `PYTHON_…` variables. ---. Also worth mentioning: It looks like [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L110) we are only setting the major python version as a requirement, so I am not getting any cmake errors if I remove anaconda from my env, and let the system python be detected (in my case 2.6.9, which is okay I think). But in the cmake output I see a message like: . ```; — Found PythonInterp: /usr/bin/python (found version ""2.6.9); — Found PythonLibs: /usr/lib64/libpython2.6.so (found sutable version 2.6.9, minimum required is ""2""); ```. Is that going to go ahead and build if the python version is `2.(anything)`? Last I remember we needed python 2.6.9 or later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249711681:58,detect,detecting,58,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249711681,3,['detect'],"['detected', 'detecting', 'detection']"
Safety,@loriab I'm confused about the test results. The ctest returns:; ```; The following tests FAILED:; 	184 - fcidump (Failed); 	359 - dft-custom-dhdf (Failed); 	363 - dft-cation (Timeout); 	364 - dft-water-dimer (Timeout); 	384 - chemps2-caspt2-n2 (Failed); ```; where the `dft-` and `fcidump` tests failing are expected as your PR that fixes them is not yet pulled in. The `chemps2/caspt-n2` test passes when I run it manually and passed in the test log file (see attached); [testresults.log](https://github.com/psi4/psi4/files/1889030/testresults.log),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/949#issuecomment-379675367:176,Timeout,Timeout,176,https://psicode.org,https://github.com/psi4/psi4/pull/949#issuecomment-379675367,2,['Timeout'],['Timeout']
Safety,"@loriab If the threading flag you mentioned refers to `USE_OPENMP=1`, then I am reasonably sure that is essential. As far as I understand, OpenBLAS is not stateless/thread-safe when compiled to use its native threading. So if there is an OMP parallel section in Psi4, and multiple Psi4 threads call BLAS/LAPACK subrutines at the same time, AND OpenBLAS is also doing those operations in parallel, then you get undefined behaviour. This is probably not going to be reliably mitigated by setting OpenBLAS to only use 1 thread at runtime, it may still cause UB.; AFAIK, currently the only safe way to call OpenBLAS BLAS/LAPACK routines from OMP parallel regions, is to use an OpenBLAS build compiled with `USE_OPENMP=1`. This disables the native/pthreads parallelism, and uses OMP instead, this way you get thread safety and nested parallelism should also work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390192476:172,safe,safe,172,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390192476,3,['safe'],"['safe', 'safety']"
Safety,@loriab Looks like Pybind11 #1121 is clearing up. Do you have thoughts on getting this or should I tweak up gau2grid to avoid 2.2 features?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/814#issuecomment-347012820:120,avoid,avoid,120,https://psicode.org,https://github.com/psi4/psi4/pull/814#issuecomment-347012820,2,['avoid'],['avoid']
Safety,"@loriab No success, unfortunately. The option is recognized (initial cmake); ```; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Building using CMake 3.19.4 Generator Unix Makefiles; -- Setting option BUILD_SHARED_LIBS: ON <=================; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; ```; but somehow does not get passed to the libint2 build step (make):; ```; [ 73%] No update step for 'libint2_external'; [ 75%] No patch step for 'libint2_external'; [ 77%] Performing configure step for 'libint2_external'; loading initial cache file /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/tmp/libint2_external-cache-Release.cmake; -- Version: Full 2.7.1 Numeric 2.7.1; -- SO Version: Full 2:3:0 Major 2; -- The CXX compiler identification is GNU 11.2.1; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/g++-11 - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting option CMAKE_BUILD_TYPE: Release; -- Setting option REQUIRE_CXX_API: ON; -- Setting option REQUIRE_CXX_API_COMPILED: OFF; -- Setting option ENABLE_FORTRAN: OFF; -- Setting (unspecified) option ENABLE_MPFR: OFF; -- Setting option BUILD_SHARED_LIBS: OFF <==================; -- Setting (unspecified) option LIBINT2_BUILD_SHARED_AND_STATIC_LIBS: OFF; -- Setting (unspecified) option LIBINT_LOCAL_Eigen3_INSTALL: OFF; ```. The error message is exactly the same.; I wiped the build directory completely in between, so there were no leftovers that might have influenced the build process.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2572#issuecomment-1121326370:85,Detect,Detecting,85,https://psicode.org,https://github.com/psi4/psi4/issues/2572#issuecomment-1121326370,6,['Detect'],['Detecting']
Safety,"@loriab OK, cool. I am now wondering how the problem came to be in the first place. Is the conda builder automatically checking out the latest commit from PCMSolver's own GitHub repository? It might then be safer (and save you some headaches) to hook it up to a given tag or commit you know works with Psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/409#issuecomment-226419237:207,safe,safer,207,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-226419237,1,['safe'],['safer']
Safety,"@loriab Ok, after some problems getting everything to work together, and setting `which python` to the correct Python, here is what I see (still Ubuntu 16.04.1 LTS, gcc 5.4.0, Python 3.5.2):; - with ATLAS (v. 3.10.2), the following tests fail:; 77 - cdomp2-2 (Failed); 125 - dfmp2-grad2 (Failed); 127 - dfmp2-grad4 (Failed); 129 - dfomp2-2 (Failed); 131 - dfomp2-4 (Failed); 188 - mints9 (Failed); - with Intel MKL (v. 2017.0.098), I have two Failed and one Timeout:; 188:mints9 (Failed); 243:opt13 (Timeout); 329:libefp-qmefp-moldomains (Failed); - with openBLAS (v. 0.2.18), I have one Failed and one Timeout:; 188:mints9 (Failed); 243:opt13 (Timeout). All were compiled with optimization (release version). Note that ATLAS does not time out on opt13, which seems to indicate it's a bit faster than the other two, but then it fails for the cdomp2/dfomp2 tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391#issuecomment-278449042:458,Timeout,Timeout,458,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-278449042,4,['Timeout'],['Timeout']
Safety,"@loriab Shoot, nooooo. This is exactly what I was trying to avoid. After I'm done recompiling, I'll try your fix on #644.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/585#issuecomment-286619723:60,avoid,avoid,60,https://psicode.org,https://github.com/psi4/psi4/pull/585#issuecomment-286619723,1,['avoid'],['avoid']
Safety,"@loriab This issue isn't so much a problem with not understanding how to use DPD, as I am sure the author of each module was aware of what the code they wrote would do. This is more a fundamental issue with DPD and how it poorly manages shared state. In this case the entry that triggers the psio error already exists and has a smaller size than the data that is being written in its place, but there is no mechanism for gracefully avoiding that situation. . I am working on a better model that avoids a lot of these problems with shared state. I have so far worked out (on paper) how map objects to the regions where their data is stored on disk and keep everything from overwriting each other. The last piece of the puzzle is how to allow *some* shared ownership to exist, for example you would like the DCFT module or the OMP2 module to be ""aware"" if integrals have already been transformed, and then avoid doing the transformation again but because they were given an object that points to a particular location on disk, not because they looked in some predetermined location and found *something* there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288#issuecomment-435197522:432,avoid,avoiding,432,https://psicode.org,https://github.com/psi4/psi4/issues/1288#issuecomment-435197522,3,['avoid'],"['avoid', 'avoiding', 'avoids']"
Safety,"@loriab can discuss this more, but the largest issue is if NumPy and Psi4 have different OMP runtimes via BLAS. GOMP and IOMP do not play well together. So naively you would either need to use GCC as this is likely what NumPy's BLAS is linked against or build your own NumPy and link it against the same Intel BLAS you plan to use with Psi4. At this point I think we highly recommend using a conda environment or our [binaries](http://vergil.chemistry.gatech.edu/psicode-download/1.1.html). Both are ICC compiled with MKL and are optimized for multiple architectures from SSE2 (?) to AVX-512. If you really want to compile Psi4 yourself we recommend using the p4dev environment with the built in path-manager, see [here](http://www.psicode.org/psi4manual/master/conda.html#how-to-use-conda-to-compile-psi4-faster-and-easier) to help avoid these conflicts. Lots of fun intricacies to make something like Python really work with large C++ backends :). LAB EDIT: the 1.1 binaries use statically linked MKL in psi4 and are potentially susceptible to the problems mentioned. binaries after mid-July 2017 are safe (provided numpy is MKL RT)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1007#issuecomment-387872100:833,avoid,avoid,833,https://psicode.org,https://github.com/psi4/psi4/issues/1007#issuecomment-387872100,2,"['avoid', 'safe']","['avoid', 'safe']"
Safety,@loriab if I understood correctly the EXPLICIT_LIB change is to avoid having explicit libs baked into the math detection and I agree that it is good to separate these. We have also done this in other codes.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615#issuecomment-279339056:64,avoid,avoid,64,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-279339056,2,"['avoid', 'detect']","['avoid', 'detection']"
Safety,"@loriab, with the new DMRG changes, I am not able to compile this directory anymore. Hold off on merging. It seems that CheMPS2 has not updated. I get an error that it can't find chemps2/caspt2.h and when I look at the chemps2 directory, there does not exist a CASPT2 file. However, the new CheMPS2 has this include file. . Well, it looks like the new DMRG detection ran into some trouble. I forgot to remove a usr/local instance of libchemps2 that I have not used in a very long time. The cmake build would not build CheMPS2 if it found this library so I believe this was the root of my problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/405#issuecomment-225029668:357,detect,detection,357,https://psicode.org,https://github.com/psi4/psi4/pull/405#issuecomment-225029668,1,['detect'],['detection']
Safety,"@loriab. I think `-DOpenMP_LIBRARY_DIRS` is a good solution. I just think that if the detection is not going to be truly automatic (i.e. combinations such as gcc + MKL, which is a very common free combination of software, is not properly detected) it probably should be more obvious to the user that such options _have_ to be passed to CMake. With that in mind, improving the error message suggesting to use `-DOpenMP_LIBRARY_DIRS` would be awesome. And thank you for your time by the way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1118#issuecomment-410473052:86,detect,detection,86,https://psicode.org,https://github.com/psi4/psi4/issues/1118#issuecomment-410473052,2,['detect'],"['detected', 'detection']"
Safety,"@loriab: I found a small problem with this PR that I was thinking you might know best how to fix. At the 5z level for Na and Mg, Pracher (2011) mention [1] that it's _not_ the case that the cc-pwCV5Z basis is formed simply by adding the tight functions to the cc-pV5Z basis. i.e. the contractions in cc-pwCV5Z are not a strict superset of the contractions in cc-pV5Z for these elements. [1]; > To avoid near linear-dependence in the s functions at the quintuple-z level for Na and Mg, an additional four s functions are uncontracted from the Hartree–Fock set and take the place of the usual optimized tight s functions for core-valence correlation. Is there a way to handle this with the psi machinery?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-306291837:397,avoid,avoid,397,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-306291837,2,['avoid'],['avoid']
Safety,"@loriab; Based upon a build of the documentation target (`make sphinxman` locally with Sphinx installed at CMake configuration time):; * an automated commit has been issued to your PR branch; * this updates `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin <prbranch>` to synchronize your local branch with GH; * an automated pull request has been issued to the docs website repo previewing `<objdir>/doc/sphinxman/html`; * preview docs changes at https://github.com/psi4/psi4docs/pull/1; * further action on auto pull request not required",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2146#issuecomment-814506587:318,avoid,avoid,318,https://psicode.org,https://github.com/psi4/psi4/pull/2146#issuecomment-814506587,1,['avoid'],['avoid']
Safety,"@loriab; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit bc7a25bc0 has been issued to your PR branch; * the commit updates 80 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin loriab-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin loriab-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/4 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131:574,avoid,avoid,574,https://psicode.org,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131,1,['avoid'],['avoid']
Safety,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 5aa048b39 has been issued to your PR branch; * this updates 4 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin ghadocs3` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/1 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2146#issuecomment-816883319:340,avoid,avoid,340,https://psicode.org,https://github.com/psi4/psi4/pull/2146#issuecomment-816883319,1,['avoid'],['avoid']
Safety,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit b4247d841 has been issued to your PR branch; * this updates 80 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin loriab-patch-1` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/3 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574:341,avoid,avoid,341,https://psicode.org,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574,1,['avoid'],['avoid']
Safety,"@lothain commented via email and it seems to have been lost in cyberspace:. >I know that Rollin's calculation ran with both codes, but I do not believe we have confirmed that the disk space requirements of cctranssort are reasonable. I was able to run the calculations that his comment refers to, both using cctransort and using ccsort/transqt2. The disk requirements for the transformation/sorting integrals were identical, so I believe we are safe in moving ccsort/transqt2 to the attic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/527#issuecomment-262287350:445,safe,safe,445,https://psicode.org,https://github.com/psi4/psi4/pull/527#issuecomment-262287350,1,['safe'],['safe']
Safety,"@medvedev-m, /tmp is just fine when it's big enough. Often, default Linux/Unix installations have only a limited amount of space available in /tmp. The singlet B atom computation you had crash is actually very small and doesn't require much space, so I think your /tmp must have been filled by some of your earlier computations that crashed. Many quantum chemistry programs, including Psi4, leave some of their temporary files around if they crash, so you have to delete them up to avoid filling the directory. Anything in /tmp should be automatically removed by the operating system, eventually, but I don't know how often that happens --- they might not be cleaned up that quickly. NFS-attached disks are very slow and you should never use them as scratch disks in a quantum chemistry computation. Otherwise, you'll cripple the network with all the data you're sending over it, people will have trouble accessing their files, and your system administrator will be very unhappy with you. So if /tmp is a problem and if NFS-attached disks are a problem, what do you do? Anyone running serious quantum chemistry computations (beyond tiny molecules with cheap methods) normally takes special steps to set up their computer such that is has one or more large hard drives in it that can be used for the temporary files (""scratch space""). For very large computations, it is advisable to get 2-3 hard drives and stripe them together in a ""RAID0"" configuration for maximum speed. It's good to have several hundreds of gibabytes available, at least, and for really big computations it's good to have a terabyte or more. . You might be able to get by using /tmp if you keep it cleaned of any files from crashed calculations, and if you're lucky it might be big enough for some decent computations if they're not too large. Ramdisks are great if your computations are quite small so that they will fit. David",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170252262:482,avoid,avoid,482,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170252262,1,['avoid'],['avoid']
Safety,"@psi-rking, you're one of the two people I know for whom this PR will actually solve a problem. That is, with this version of the code, Psi4's math detection should properly find your ACML libraries and forward them on to CheMPS2 and libefp without you fiddling with `LAPACKBLAS_LIBRARIES` or pointing to any special upstream branches. If you have a chance, I'd like to know if this works for you. Easiest way to get the code is a fresh checkout `git clone https://github.com/loriab/psi4.git` followed by branch switch `git checkout lapack`, then build as normal, giving none to minimal math hints. Also, don't use a `CMAKE_INSTALL_PREFIX` that has an existing psi4 in it (CMake's shown itself overzealous in finding and using old pybind11's). And, if you would, add `ENABLE_CheMPS2=ON` (you'll need hdf5 somewhere) to test that AddON + ACML, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276672405:148,detect,detection,148,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276672405,1,['detect'],['detection']
Safety,"@robashaw I'm really sorry to hear that. You should focus on your health, of course, and I wish you a speedy recovery. I have been able to follow your examples very easily, so getting the library shoehorned into Psi4 is going very well so far. Even without derivatives it will be a big boost for us because of the efficiency gains from screening, so thanks for taking the time to write this and make it available. Thanks also for providing clear examples for me to follow. All the best. Andy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1340#issuecomment-439522526:109,recover,recovery,109,https://psicode.org,https://github.com/psi4/psi4/pull/1340#issuecomment-439522526,2,['recover'],['recovery']
Safety,"@ryanmrichard , so are you always adding dummy/placeholder INTERFACE libraries for all the add-ons? In externals dir, either an external proj gets built or a dummy lib gets created. Then in main psi4/CM, either libraries get detected or the dummy lib gets added to psi4?. | `addon_found` | `enable_addon` | outcome in external/addon/CM | outcome in psi4/CM optional_plugin() | net result |; | --- | --- | --- | --- | --- |; | T | T | add_lib | append libs | use prebuilt detected |; | T | F | add_lib | add_lib | use dummy interface lib |; | F | T | extproj_add | append libs | use superbuild detected |; | F | F | add_lib | add_lib | use dummy interface lib |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238059409:225,detect,detected,225,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238059409,3,['detect'],['detected']
Safety,@ryanmrichard Is this something that can be fixed with the parallel printer so that we might avoid this in the future?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/319#issuecomment-198355431:93,avoid,avoid,93,https://psicode.org,https://github.com/psi4/psi4/pull/319#issuecomment-198355431,1,['avoid'],['avoid']
Safety,"@ryanmrichard, where convenient, we may want to use cmake modules from https://github.com/coderefinery/autocmake/tree/master/modules. Though potentially nice, I don't think we want to wholesale adopt @robertodr and Co.'s autocmake project (http://autocmake.readthedocs.io/en/latest/index.html) just now because this cmake rewrite is focused on CMake linking of `ExternalProject_Add` / modularity / superbuild, which isn't autocmake's focus. In particular, I'm using their safeguards (https://github.com/coderefinery/autocmake/blob/master/modules/safeguards.cmake) since the Psi4Macros one didn't actually prevent in-source builds (`STREQUAL` vs. `==`) and even with that fixed , the extra feature of Psi4Macros creating a requested build dir (`cmake -DCMAKE_BINARY_DIR=objdir2`) ran into later cmake path errors. So, as it stands (in libint), this should guide toward `cmake -H. -Bobjdir` syntax. In general, I'll be testing thoroughly in libint, then just copying into main psi4 w/o testing, so let me know of any problems you find that travis and distelli don't. Huh, cmake automatically forces two spaces after a period in their message() printing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236387131:472,safe,safeguards,472,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236387131,4,['safe'],['safeguards']
Safety,"@salarfaji My workaround was to call `set opt_coordinates cartesian` before calling `optimize()`. It seems like something goes wrong with using internal coordinates, but Cartesian have worked for me. (You could also try different coordinate options, as `set opt_coordinates both` also avoided this crash.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1921#issuecomment-640677559:285,avoid,avoided,285,https://psicode.org,https://github.com/psi4/psi4/issues/1921#issuecomment-640677559,1,['avoid'],['avoided']
Safety,"@susilehtola After further discussion, including with Dr. Sherrill, we have decided to keep the current atom-blocking structure of LinK, since we can avoid situations ""of too-small workloads in the inner loops"" in the words of Dr. Sherrill when we run DirectJK in parallel. Changing the linK code to shell-blocking instead of atom-blocking would be outside the scope of this PR. I have also added new comments to my linK code, and explained my code in the context of the Oschenfeld paper. I will attach the LinK algorithm's pseudocode for the reviewers for reference. <img width=""669"" alt=""Linear Exchange Algorithm"" src=""https://user-images.githubusercontent.com/60559795/146979417-70931487-df27-4c59-841e-0336bba36757.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-998996631:150,avoid,avoid,150,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-998996631,1,['avoid'],['avoid']
Safety,"@susilehtola Ah, I see thank you. Is there a way to detect this in LibXC 4.0?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/863#issuecomment-345263623:52,detect,detect,52,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345263623,1,['detect'],['detect']
Safety,"@tomspur @andysim @dgasmith . I added another commit to this that largely does away with the options dict passed to `ipi_broker`. chg/mult weren't being used and should be read off the molecule anyway to avoid input clash. LOT is now a req'd option so the fn looks a lot more like `energy`. (It's returning a broker object, so I didn't work it into `energy()` itself.) Any concerns, particularly if I'm impairing its intended usage?. Also, at present any calls to `ipi_broker` with `import ipi` unavailable run just fine as ordinary psi4 calls. I was a little surprised by this compensating for user's expressed intent. Is this the wanted behavior?. If there aren't actually any wanted changes, I have another commit to make for lgtm and to remove the `@using_ipi` that aren't strictly needed, then it's rtg.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1057#issuecomment-653148607:204,avoid,avoid,204,https://psicode.org,https://github.com/psi4/psi4/pull/1057#issuecomment-653148607,1,['avoid'],['avoid']
Safety,"A couple of options: 1) use [find_executable()]( https://docs.python.org/3.5/distutils/apiref.html#module-distutils.spawn) to figure it out or 2) have CMake inject the python executable path that it detected, using something like [configure_file](https://cmake.org/cmake/help/latest/command/configure_file.html).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1709#issuecomment-526620503:199,detect,detected,199,https://psicode.org,https://github.com/psi4/psi4/pull/1709#issuecomment-526620503,1,['detect'],['detected']
Safety,"A couple thoughts before a more thorough review:. Can you add some test cases to verify that this doesn't change the SCF energy? That set of test molecules from yesterday would be good, plus a few larger molecules. Could you do some timing to verify that this does in fact speed the SCF code up? A comparison of system size, density threshold, timing, and energy error would be good. It appears that you're calculating integrals within the master loop and doing redundant work, possibly more than the original algorithm. I think you want to calculate all (NM|NM) shells outside of the loop and use those integrals within the loop.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2062#issuecomment-743352546:462,redund,redundant,462,https://psicode.org,https://github.com/psi4/psi4/pull/2062#issuecomment-743352546,1,['redund'],['redundant']
Safety,"A few notes:; 1) Why does the dispersion string need to be expanded? Not opposed just curious.; 2) Im not a fan of the transparent assumptions of what HF alpha and MP2 components should be. Would prefer if we specific them explicitly in other parts of the spec. On this note it is a bit hard to pick up something like `HYB_MGGA_X_MN15` and auto detect the need to pull parameters from the underlying function. In addition, what happens if someone does a silly operation like mixing multiple HYB functionals? We likely want to specify *something* to indicate that we should pull exchange parameters from a given functional.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/920#issuecomment-366111314:345,detect,detect,345,https://psicode.org,https://github.com/psi4/psi4/issues/920#issuecomment-366111314,1,['detect'],['detect']
Safety,"Actually, in addition to the basis set parser, there's something else wrong. Namely, removing the `L=9` functions from the basis, Psi4 crashes:; ```; $ psi4 h2.in . malloc(): corrupted top size; Aborted (core dumped); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1992#issuecomment-681077930:195,Abort,Aborted,195,https://psicode.org,https://github.com/psi4/psi4/issues/1992#issuecomment-681077930,1,['Abort'],['Aborted']
Safety,"Actually, there are more failures; ```; (gdb) bt; #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0); at pthread_kill.c:44; #1 0x00007f21b9c426d3 in __pthread_kill_internal (threadid=<optimized out>, signo=6) at pthread_kill.c:78; #2 0x00007f21b9be9c4e in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26; #3 0x00007f21b9bd1902 in __GI_abort () at abort.c:79; #4 0x00007f21862e80af in std::__glibcxx_assert_fail (file=<optimized out>, line=<optimized out>, ; function=<optimized out>, condition=<optimized out>); at ../../../../../libstdc++-v3/src/c++11/assert_fail.cc:41; #5 0x00007f21aa275614 in std::vector<double const*, libint2::detail::ext_stack_allocator<double const*, 121ul> >::operator[] (this=0x56025b76c988, __n=6) at /usr/include/c++/14/bits/stl_vector.h:1149; #6 0x00007f21aa2a709b in psi::Libint2TwoElectronInt::compute_shell_deriv1 (this=0x56025b7bb980, s1=0, s2=0, ; s3=0, s4=0) at /home/work/psi4-1.9.1/psi4/src/psi4/libmints/eribase.cc:3245; #7 0x00007f21a9f71d73 in _ZN3psi11MintsHelper11metric_gradERSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt10shared_ptrINS_6MatrixEESt4lessIS7_ESaISt4pairIKS7_SA_EEERSE_._omp_fn.0(void) (); at /home/work/psi4-1.9.1/psi4/src/psi4/libmints/mintshelper.cc:2343; #8 0x00007f219d9a89c4 in __kmp_api_GOMP_parallel_40_alias (); from /home/susi/.conda/envs/p4env/lib/libgomp.so.1; #9 0x00007f21a9f5f757 in psi::MintsHelper::metric_grad (this=0x56025ac87f20, D=..., aux_name=...); at /home/work/psi4-1.9.1/psi4/src/psi4/libmints/mintshelper.cc:2335; #10 0x00007f21a9b85c92 in psi::scfgrad::DFJKGrad::build_AB_x_terms (this=0x56025a8b4200); at /home/work/psi4-1.9.1/psi4/src/psi4/scfgrad/jk_grad.cc:862; #11 0x00007f21a9b818c2 in psi::scfgrad::DFJKGrad::compute_gradient (this=0x56025a8b4200); --Type <RET> for more, q to quit, c to continue without paging--; at /home/work/psi4-1.9.1/psi4/src/psi4/scfgrad/jk_grad.cc:257; #12 0x00007f21a9b7595c in psi::scfgrad::SCFDeriv:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969:412,abort,abort,412,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326581969,1,['abort'],['abort']
Safety,"Agreed, checking that the sys has at least as many bodies as the nbody requests would be a good sanity check. Mol.nfragments() is the fn, I think. run_sapt in proc.py does something similar.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1649#issuecomment-493675525:96,sanity check,sanity check,96,https://psicode.org,https://github.com/psi4/psi4/issues/1649#issuecomment-493675525,1,['sanity check'],['sanity check']
Safety,"Ah wonderful! Yes, `sup.set_vv10_b()` is what I was looking for. I also (finally) found [api/psi4.core.SuperFunctional](http://www.psicode.org/psi4manual/master/api/psi4.core.SuperFunctional.html); for a good overview what is accessible. DFT-NL (nl=non-local) is just like DFT-D, where the _b_ parameter of the VV10 kernel is fitted to an arbitrary functional. Ideally I would like to add an automatic detection similar to the -D dashparam in superfuncs.py to an eventual PR.; Though I am wondering if it is a good idea to piggy-back on the -D part and extent it to -NL or to make something separate. It would make sense to add the non-local dispersion to the 'empirical' dispersion. This is mostly a design choice, i suppose. Thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/870#issuecomment-348128880:402,detect,detection,402,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-348128880,1,['detect'],['detection']
Safety,"Ah yes, this is an issue. Neither of the three works as one would expect them to work: the first two don't do anything as the fctl stage is not specified, and the third one does a full extrapolation. I'm not sure what the first two cases should return - neither of those requests anything resembling a ""total energy""; ; - aborting with a warning would be in order, ; - or we can do the same as for correlated methods, where the fctl step is implied as a non-extrapolated one with highest. For the third case, this is clearly a bug which I'll work on fixing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-965333017:322,abort,aborting,322,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-965333017,2,['abort'],['aborting']
Safety,"Ah, of course. I forgot that was already in upstream. Btw, in general if anyone wants to avoid ""undefined"" version, just `git fetch upstream` to get the tags. Undefined version doesn't hurt a thing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/725#issuecomment-305321675:89,avoid,avoid,89,https://psicode.org,https://github.com/psi4/psi4/pull/725#issuecomment-305321675,1,['avoid'],['avoid']
Safety,"Ah, ok. I didn't realize that. Might be worth mentioning that somewhere to avoid confusion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2479#issuecomment-1069338336:75,avoid,avoid,75,https://psicode.org,https://github.com/psi4/psi4/pull/2479#issuecomment-1069338336,1,['avoid'],['avoid']
Safety,"Ah, yes, c-f vs. defaults is a likely cause. There are a couple ways to deal with mixing psi4 and c-f deps, but none that's simple, robust, and a one-liner. Whatever you do, `blas=*=mkl` is a must with c-f and psi. Then you can (1) maintain two channels for the two bases and mix them at the PYTHONPATH level, (2) start an env with a defaults + psi4 install, then install additional packages from c-f, (3) use an env spec file mixes a known safe combination of psi4 and c-f packages. This is admittedly aggravating for an ordinary request. It should get better soon, as I'm working on c-f packaging (there have been dependency blocks up until about a month ago). I can try to interpret any roadblocks you hit in the meantime. > reluctant to have a separate conda installation). Just to be clear, you wouldn't need a separate conda _installation_; only a separate conda _environment_.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742:441,safe,safe,441,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742,2,['safe'],['safe']
Safety,"Aha, Psi's CD algorithm is not parallelized and is probably why I was seeing CD tensor generation taking longer than the iterations in some cases. We could fix that, it would be nice to avoid an auxiliary basis. Yea, thats something to consider; however, one thing I have noted is that projecting orbitals that result from a partial Cholesky of the SAD density results in some degradation in the accuracy of the SAD guess itself. This is kind of weird, but might come from the interplay of the projection and how Cholesky weights vectors. Right now the SAD guess takes a small fraction of the SCF time (even for dimers) so I didnt see a need to look into this. Ill add this functionality back in so someone can play with it if they want.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/400#issuecomment-223759128:186,avoid,avoid,186,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-223759128,1,['avoid'],['avoid']
Safety,All but two of the files in `bin` are specific to the old configure.ac build system. The other two: `psi4-config.in` I do not think it is used and is a left over of the old plugin system and `git_list_authors.sh` was just a toy script that someone put in. The files in `bin` should be safe to remove.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/187#issuecomment-156849608:285,safe,safe,285,https://psicode.org,https://github.com/psi4/psi4/issues/187#issuecomment-156849608,1,['safe'],['safe']
Safety,All test but these pass:; ```; 368 - dft-custom-gga (Failed) (see https://github.com/psi4/psi4/issues/994); 370 - dft-bench-interaction (Timeout); 372 - pywrap-align (Failed); 373 - pywrap-align-chiral (Failed). ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/914#issuecomment-385654990:137,Timeout,Timeout,137,https://psicode.org,https://github.com/psi4/psi4/pull/914#issuecomment-385654990,1,['Timeout'],['Timeout']
Safety,"All worked well. I'll check with the student to make sure he is happy too. So this is my mindless list of commands, including the suggested correction and a few small changes to install inside the p4dev environment:. ```; wget 'https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh'; chmod +x Miniconda3-latest-Linux-x86_64.sh; ./Miniconda3-latest-Linux-x86_64.sh -b; source miniconda3/bin/activate; conda create -n p4dev psi4-dev python=3.7 -c psi4/label/dev -y; conda activate p4dev; conda install libint am8 -c psi4/label/dev -y; git clone https://github.com/psi4/psi4.git && cd psi4; `psi4-path-advisor --gcc` -DMAX_AM_ERI=8 -DENABLE_simint=OFF -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} -DPYMOD_INSTALL_LIBDIR=/python3.7/site-packages; cd objdir && make install -j`getconf _NPROCESSORS_ONLN`; ```. Few notes for the casual reader:. - The suggested option ` -DENABLE_simint=OFF` may no longer be needed at some point in the future.; - Installing in `${CONDA_PREFIX}` is only safe when you don't install the PSI4 package with conda in the same environment. Edits:; - Added activate line.; - Added -y options; - Updated to py3.7; - Install Python modules in the canonical location.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-437007249:991,safe,safe,991,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-437007249,1,['safe'],['safe']
Safety,"All, I've gone back and forth on how to do the testing. The problem is that Psi4 has paths baked in at compile time, which need to point to the install locations to work correctly at installation. Like Lori said, I originally deemed the risk of everything breaking upon installing being a real problem for Psi4. I'm now leaning more towards what @jturney said, i.e. the canonical make cycle. I'm actually tweaking it as we speak so that it works that way (and hopefully also fixing this linking error I introduced with the math detection...). I think there's a happy medium here, where we only manually set the PSIDATADIR for tests and the install runs off the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235916559:237,risk,risk,237,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235916559,2,"['detect', 'risk']","['detection', 'risk']"
Safety,"Alrighty, this one should be ready to go now. I tried to cook up a simple test using f orbitals, but they're all too costly; in the end I just added a permutation to the atom ordering in our existing cc-pVDZ water test, because this is enough to reveal the bug. The fact that we've always had a working cc-pVDZ test case shows how subtle the bug is; the affected d components in water must be zero by symmetry. I did have a distorted water in my test suite to check that case, but didn't detect problems. Oh well, live and learn I guess. This should be a trivial review, and it clearly helps to address a couple of high priority tickets, so please have at it whenever you get a chance. Sorry again for the error. Next time you see me, I'll be at a chalkboard, writing ""I will not cut and paste"", à la Bart in the Simpsons opening credits. Except, instead of writing it, I'll be cutting and pasting it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/903#issuecomment-361080182:488,detect,detect,488,https://psicode.org,https://github.com/psi4/psi4/pull/903#issuecomment-361080182,2,['detect'],['detect']
Safety,"Also, how have you verified correctness? While I'm not familiar with these methods, ""can induce an energy difference of over 2 _hartrees_ even at conservative cutoffs"" does not seem safe.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821086361:182,safe,safe,182,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821086361,1,['safe'],['safe']
Safety,"And regarding the shared state issue. I did not realize that we were looking at orbital optimized methods so the example of avoiding work by intentionally sharing state here is a bad one. but the issue is still related. . The error arises when you run the modules one after the other, because the `DCFT` module is making some assumptions, probably unintentionally about the state of various psio files. However the `OMP2` module has modified that state and the assumptions `DCFT` is making are no longer valid. In this case the assumption is that the `MO Ints (OO|OV)` entry either does not exist, or if it exists it is the correct size to hold `O,O,O,V`. This is not a case of sloppy programing by the authors of either module, it is a consequence of DPD creating global state in a difficult to predict way (due to a lack of documentation), and not providing the means to program defensively around it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288#issuecomment-435217365:124,avoid,avoiding,124,https://psicode.org,https://github.com/psi4/psi4/issues/1288#issuecomment-435217365,2,"['avoid', 'predict']","['avoiding', 'predict']"
Safety,"And, yes, the reason for using tee so extensively in my Travis scripts is twofold: a) making the output stream continuous so that we don't timeout, as @jturney said, and b) allowing us to filter extraneous output to ensure we don't print too much.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/247#issuecomment-183717105:139,timeout,timeout,139,https://psicode.org,https://github.com/psi4/psi4/pull/247#issuecomment-183717105,1,['timeout'],['timeout']
Safety,"Another, and generally safer, option is to use `nohup psi4 &` on remote machines as this will always decouple `stdout` from the job, something `disown` is not doing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1983#issuecomment-677268394:23,safe,safer,23,https://psicode.org,https://github.com/psi4/psi4/issues/1983#issuecomment-677268394,1,['safe'],['safer']
Safety,"Any chance at all that there's an old (what p4 used until maybe a month ago) pybind11 2.2.0 anywhere conceivably detectable, including in a conda env where other p4 dependencies are detected? CMake is perfectly capable of finding the pb11 you want and then C++ header detection takes over and finds the pb11 you _don't_ want. EDIT: **2.0.0**, not 2.2.0; Further EDIT: it does look like gcc7 is the highest they regularly test https://travis-ci.org/pybind/pybind11/builds/375778661?utm_source=github_status&utm_medium=notification",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1013#issuecomment-388214831:113,detect,detectable,113,https://psicode.org,https://github.com/psi4/psi4/issues/1013#issuecomment-388214831,3,['detect'],"['detectable', 'detected', 'detection']"
Safety,Apparently very easy to fall into endless recursion with MBIS volumes due to some necessary inputs also calculated by `oeprop()` and involving calls to `energy()`. You're interested in MBIS CHARGES as standalone (w/o volumes and extents) to avoid the cost of all the atomic calcs since you don't need the volume?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2272#issuecomment-896976501:241,avoid,avoid,241,https://psicode.org,https://github.com/psi4/psi4/issues/2272#issuecomment-896976501,1,['avoid'],['avoid']
Safety,"Are both solutions stable ? For UHF computations, it seems to me always; more safe to do a stability analysis. In some cases, it allowed me to; eliminate the higher energy solution as unstable. However, in other cases, both solutions are actually SCF minima... Trying; with different guesses then seems the only way to find the lowest energy; solution. 2016-01-14 2:42 GMT-05:00 Rob Parrish notifications@github.com:. > I have seen this before (for this exact system) - the SAD guess converges; > to the correct root, but Core does not. Not really much more to it than; > that.; > ; > -Rob; > ; > On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; > notifications@github.com> wrote:; > ; > > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > > gives very different energies.; > > The following input with the core guess gives a total energy of; > > -75.5488580481183476; > > ; > > memory 250 mb; > > molecule h2o {; > > symmetry c1; > > 1 2; > > O 0.0000000000 0.0000000000 -0.2249058930; > > H 1.4523499293 0.0000000000 0.8996235720; > > H -1.4523499293 0.0000000000 0.8996235720; > > units bohr; > > no_reorient; > > no_com; > > }; > > ; > > set {; > > basis cc-pVDZ; > > scf_type direct; > > guess core; > > reference uhf; > > e_convergence 7; > > d_convergence 7; > > }; > > ; > > energy_scf1 = energy('scf'); > > ; > > while this input with the SAD guess gives a total energy of; > > -75.6330881795159655; > > ; > > memory 250 mb; > > molecule h2o {; > > symmetry c1; > > 1 2; > > O 0.0000000000 0.0000000000 -0.2249058930; > > H 1.4523499293 0.0000000000 0.8996235720; > > H -1.4523499293 0.0000000000 0.8996235720; > > units bohr; > > no_reorient; > > no_com; > > }; > > ; > > set {; > > basis cc-pVDZ; > > scf_type direct; > > guess sad; > > reference uhf; > > e_convergence 7; > > d_convergence 7; > > }; > > ; > > energy_scf1 = energy('scf'); > > ; > > Of course, the initial guess has always a huge impact on the calculation,; > > but is the reported difference ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211#issuecomment-171646769:78,safe,safe,78,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171646769,1,['safe'],['safe']
Safety,Are there any known methods of getting to build Numpy/Scipy from source using Accelerate to avoid the mismatch? (I think support might have been dropped altogether.),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-955805258:92,avoid,avoid,92,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-955805258,1,['avoid'],['avoid']
Safety,"Are there any special concerns needed to prevent linear dependencies from causing problems in the EDIIS/ADIIS extrapolation, or am I safe to use linearly dependent SO basis quantities?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235#issuecomment-937770538:133,safe,safe,133,https://psicode.org,https://github.com/psi4/psi4/issues/2235#issuecomment-937770538,1,['safe'],['safe']
Safety,"Are you building Psi4 for packaging or for single-deployment use?. Psi4 does check for external packages at CMake configure time and will find any you specify with the variables in ""CMake Variables"" section in http://psicode.org/psi4manual/master/libint.html#how-to-configure-libint-for-building-psi4 and similar variables for other packages. Note that the external packages must have been built to export a CMake target (that is, `LibintConfig.cmake`). The CMake config should be reporting a colored Found or Building for each package. When Psi4 itself is packaged, it always uses externally built packages of its dependencies so that none of other packages' files get installed (except pybind11 headers, just because it's safer to keep the right version internally). For single-deployment Psi4 builds, it'll just build and install whatever's needed, as you observed, for the user's convenience. Do you think the existing scheme can work for you? I'm glad to explain it further if you need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343715845:724,safe,safer,724,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343715845,1,['safe'],['safer']
Safety,"Are you trying to use a Libint2 release? Keep in mind that Psi4 needs changes to the upstream buildsystem (these can be worked around) and changes to the default upstream build configuration (such that a built library won't work with any other open-source QC package). I'll collect some links here since it's worth having an issue open on this for packagers to consult (hence pinging @mbanck, @susilehtola). * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; - [x] transition psi4 TEI #1721; - [ ] reconcile LAB's l2 cmake (that psi uses at present) https://github.com/loriab/libint/tree/l2cmake with EFV's adaptations https://github.com/evaleev/libint/pull/205; - [ ] merge https://github.com/evaleev/libint/pull/205 and release; - [ ] expand current integrals config requirements beyond current set in notes (needed before #2388); - [ ] transition psi4 OEI #2388 ; - [ ] transition psi4 integral ordering from `gss` to `sss`; - [ ] coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. If I'm off base @yurivict and you're already using a psi-configured l2 and this is simply a detection issue, let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498:1560,detect,detection,1560,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498,2,['detect'],['detection']
Safety,"Are you using a detected pre-build pybind11? Pybind11 changes so often just now (we usually update to their HEAD once a month and need to adapt the Psi4 code) that we can't guarantee that any but the [tag](https://github.com/psi4/psi4/blob/master/external/pybind11/CMakeLists.txt#L11) works. In case you're alarmed by the fork, the alterations are just changes to the build, not to pybind.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261727164:16,detect,detected,16,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261727164,1,['detect'],['detected']
Safety,"Arrrgghhh...schoolboy error! Oops!. Now:. `cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/usr/local/psi4 -DOpenMP_CXX_LIBRARY_DIRS=/opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64_lin/`; gives:. ```; -- Math lib search order is MKL;OPENBLAS;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl; -- Found BLAS: MKL (/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so); -- LAPACK will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl; -- Found LAPACK: MKL (/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so); -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; MathOpenMP iomp5 0 ; MathOpenMP iomp5 A /opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64_lin/libiomp5.so; MathOpenMP iomp5 B /opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64_lin/libiomp5.so; MathOpenMP -Wl,--as-needed 0 ; MathOpenMP -Wl,--as-needed A _lib-NOTFOUND; MathOpenMP -Wl,--as-needed B _lib-NOTFOUND; MathOpenMP_LIBRARIES /opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64_lin/libiomp5.so;-Wl,--as-needed; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; -- Found MathOpenMP: Found MathOpenMP: /opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64_lin/libiomp5.so;-Wl,--as-needed ; -- ; Properties for TARGET tgt::MathOpenMP:; tgt::MathOpenMP.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/int",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396748980:860,Detect,Detecting,860,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396748980,1,['Detect'],['Detecting']
Safety,"At risk of encouraging procrastination, the alignment of error codes in `config.h` has been lost.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1170#issuecomment-415861364:3,risk,risk,3,https://psicode.org,https://github.com/psi4/psi4/pull/1170#issuecomment-415861364,1,['risk'],['risk']
Safety,"At the bottom of the output, after 3 steps, many of the torsions are very close to 180. Is the structure exactly planar? I'm not surprised if you are not able to converge this tightly. You could try Cartesian coordinates to avoid all these discontinuities (not just in the value of the torsion, but in its derivative too). 	 D(7,11,6,18) = -3.129372	 -179.299795; 	 D(8,6,11,10) = -3.133590	 -179.541496; 	 D(8,12,9,21) = 3.130680	 179.374777; 	 D(9,7,11,10) = 3.130802	 179.381713; 	 D(9,12,8,20) = 3.137161	 179.746078; 	 D(10,4,2,14) = -3.130400	 -179.358722",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858#issuecomment-344082701:224,avoid,avoid,224,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344082701,1,['avoid'],['avoid']
Safety,"At the moment, the only advantage would be the cleaner separation of intra- and inter- fragment motions which could result in better convergence behavior, particularly for weakly bound complexes. My plan has been to exploit this separation by doing some fancier things such as steepest descent in the inter- modes at the same time as reliable molecular methods (like RFO) for the intra- modes. Another needed feature is a better guess for the inter- modes based on Leonard-Jones potentials or molecular mechanics, etc.. But since these have not been implemented, there is perhaps limited point to using 'multi' at present. The overall motivation is that the methods that are ideal for intra- motions (redundant internals based on chemical bonding, RFO, BFGS...) do not work well for inter- motions with flat potentials.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/680#issuecomment-295755959:701,redund,redundant,701,https://psicode.org,https://github.com/psi4/psi4/issues/680#issuecomment-295755959,1,['redund'],['redundant']
Safety,"Been a while, but I think we don't have character table for non-Abelian point groups. https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/maketab.cc. Symmetry detection happens in molecule.cc, so we do have non-Abelian there, but only for reporting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1474#issuecomment-454255838:171,detect,detection,171,https://psicode.org,https://github.com/psi4/psi4/issues/1474#issuecomment-454255838,1,['detect'],['detection']
Safety,"Between plain calcs, user-specified-occ-calcs, successive calcs, calcs involving pre-SCF-cycles, wavefunction reloading, restarts, etc., getting the SCF initialization info from places in the right priority is fraught and, I fear, not defensively tested. So it'd be useful to understand the circumstances and reasoning behind the proposed changes. I'm all for more sanity checks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2488#issuecomment-1073970696:365,sanity check,sanity checks,365,https://psicode.org,https://github.com/psi4/psi4/pull/2488#issuecomment-1073970696,1,['sanity check'],['sanity checks']
Safety,"By finite-difference test, I mean ""there is some property that we can compute either by finite difference of energies or by contracting appropriately defined densities against derivative integrals,"" e.g., geometry gradients and dipoles. By checking that both routes predict the same result, we can be much more confident that the densities are correctly implemented. (I recall a sign error in the CASPT2 gradients of another package. This error went uncaught for decades because the impact on calculations was relatively small.). I don't know if this is an option for transition densities. I'm not sure if EOM-CC transition properties are defined by some variational criteria, some variational criteria but neglecting orbital relaxation, or something else altogether. EDIT: The '93 Stanton and Bartlett paper explicitly says orbital relaxation is neglected, so I imagine the finite difference test is not an option. I'm not sure if there's some other technique to validate the correctness of the transition densities, other than matching other code. I know ""matching other code"" is done in the test suite.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2541#issuecomment-1094528284:266,predict,predict,266,https://psicode.org,https://github.com/psi4/psi4/pull/2541#issuecomment-1094528284,1,['predict'],['predict']
Safety,"By the way, MKL/Intel compiler performance is actually reasonably good on recent AMD Ryzen/Epyc CPUs, the only thing that may need to be done, is to patch the binaries with [this tool](https://github.com/jimenezrick/patch-AuthenticAMD). What it does, is look for CPU detection checks, and disable the ""cripple_AMD()"" paths that MKL, and Intel compilers often tend to insert. When this is done, AMD CPUs will get to run the same, optimized/vectorized code paths that an Intel CPU would run, instead of the unoptimized/less optimized path that is intended to be run by non-Intel CPUs. This is just fine, since Ryzen CPUs are actually very happy to run code optimized for Haswell, in fact IIRC for a long time the best --march= flag to use with GCC on Ryzen has been ironically --march=haswell.; So using MKL and Intel compiled binaries are just fine on Ryzen systems, just make sure to patch the MKL and compiled binaries. PS: we are in the process of acquiring some Ryzen systems, so in a couple months I will be able to provide actual test results",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390958853:267,detect,detection,267,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390958853,1,['detect'],['detection']
Safety,"C compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icpc; -- Check for working CXX compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- The Fortran compiler identification is Intel 18.0.2.20180210; -- Check for working Fortran compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort; -- Check for working Fortran compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Enabling Fortran; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Success, Appending; -- Performing Test CMAKE_Fortran_FLAGS [-xHost] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (u",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883:1850,Detect,Detecting,1850,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883,4,['Detect'],['Detecting']
Safety,"CC DIPOLE X"")` you are really getting what you would expect should be listed as `psi4.get_variable(""EOM-CC ROOT {last_root} DIPOLE X"")`. In addition to that you can't get the ground state dipole components at all since they were overwritten in the psivars dict with subsequent calls to the `psi4.core.ccdensity->psi::ccdensity::dipole->OEprop` chain.; - see [psi::ccdensity::dipole](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L61) code and follow into [OEProp](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) to see what I mean if you didn't follow the explanation above. . I think this very confusing when you look at how the dipole components for different roots can be grabbed with `psi4.get_variable` in the [ci-property tests](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) for example. . I propose ( and volunteer to make) the following changes in order to implement the test here, and avoid confusion in the future:; - For the 0th root (only one for non EOM-CC calculations) ccdensity will behave as is. ; - For any root after that it will pass `EOM-CC ROOT {root #}` into `oe->set_title()` [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L107) so that the confusing behavior with the variables dict is no longer as strange. ; - To test the original modification that this PR introduced I will: ; 1. extend `tests/cc54` to return the wfn which should now have Da/Db set to the CCSD OPDM. Get the `CC DIPOLE/QUADRUPOLE` components from the first pass. Run OEProp again (python side) with the wfn holding the CCSD OPDM, and make sure it gives the same `DIPOLE/QUADRUPOLE` components. ; 2. extend `tests/cc49` to do the same thing as before but just to be sure that the ground-state density is the only one being put back in ref_wfn, and at the same time confirm that the other roots are not over-writing the `CC DIPOLE/QUADRUPOLE` entries in the variables dict an",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-259597050:1483,avoid,avoid,1483,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259597050,1,['avoid'],['avoid']
Safety,"CMAKE_INSTALL_LIBDIR: lib; -- Setting option PYMOD_INSTALL_LIBDIR: /; -- Setting option psi4_INSTALL_CMAKEDIR: share/cmake/psi4; -- Setting option TargetLAPACK_INSTALL_CMAKEDIR: share/cmake/TargetLAPACK; -- Setting option TargetHDF5_INSTALL_CMAKEDIR: share/cmake/TargetHDF5; -- Setting option ENABLE_GENERIC: OFF; -- Setting option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting option psi4_CXX_STANDARD: 17; -- Setting option psi4_CXX_STANDARD_Libint2: 17; -- Setting option SIMINT_VECTOR: avx; -- Setting option SPHINX_THEME: sphinx_psi_theme; -- Setting option SPHINXMAN_STRICT: OFF; -- Setting option BUILD_Libint2_GENERATOR: OFF; -- Setting option psi4_SHGAUSS_ORDERING: gaussian; -- Psi4 install: /mnt/f/psi4/build_linux/install; -- Found Python 3.10: /home/yuyeqing/software/miniconda3/envs/psi/bin/python3.10 (found version 3.10.11); -- Psi4 staging: /mnt/f/psi4/build_linux/stage; -- CMAKE_CXX_FLAGS: -march=native; -- Could NOT find iomp5 -- consider adding full directory path to OpenMP_LIBRARY_DIRS; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX, C/CXX/Fortran=GNU/GNU/; -- Found LAPACK MKL: /home/yuyeqing/intel/oneapi/mkl/latest/lib/intel64/libmkl_rt.so;...; -- Performing Test HAS_FLTO; -- Performing Test HAS_FLTO - Success; -- Found pybind11: /mnt/f/psi4/build_linux/stage/include (found version 2.10.3); -- Found gau2grid: /mnt/f/psi4/build_linux/stage/lib/libgg.a (found version 2.0.7); -- Found Eigen3: /home/yuyeqing/software/eigen3/include/eigen3 (Required is at least version ""3.0.0""); -- Boost detected. satisfied by headers bundled with Libint2 distribution; -- Libint2Config components requested: CXX_ho;eri_c2_d0_l4;eri_c2_d1_l3;eri_c2_d2_l3;eri_c3_d0_l4;eri_c3_d1_l3;eri_c3_d2_l3;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d2_l2;impure_sh;onebody_d0_l4;onebody_d1_l3;onebody_d2_l3;sss; -- Libint2Config components found: CXX_ho;C;eri_c2_d0_l2;eri_c2_d0_l3;eri_c2_d0_l4;eri_c2_d0_l5;eri_c2_d0_l6;eri_c2_d1_l2;eri_c2_d1_l3;eri_c2_d1_l4;eri_c2_d1_l5;eri_c2_d2_l2;eri_c2_d2_l3;eri_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:2525,Detect,Detecting,2525,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119,1,['Detect'],['Detecting']
Safety,"Can be fixed with a bigger basis like cc-pvdz. The gradient is fine, so I think the trouble is in predicting the next geom step, so may be of interest to @psi-rking . ```; molecule { ; 0 1; C -0.167039 -0.712374 -0.022325; O 0.119573 0.677072 0.056530; H -0.453842 -0.989160 -1.036819; H -0.997038 -0.962046 0.638968; H 0.691232 -1.312038 0.284396; H 0.775814 0.817745 0.757350; }. set optking { ; frozen_dihedral = (""; 5 1 2 6; 4 1 2 6; 3 1 2 6; ""); }; #set {; # geom_maxiter 2; # g_convergence GAU_LOOSE; #}; #memory 6GB; #set_num_threads(6); #psi4_io.set_default_path(""/home/phy/Desktop/projects/2021/amoeba/test/poltype/scratch/Psi4-methanol""); #for _ in range(1):; # try:; # optimize('hf/3-21G'); # break; # except OptimizationConvergenceError:; # break; # else:; # try:; # set opt_coordinates cartesian; # optimize('hf/3-21G'); # break; # except OptimizationConvergenceError:; # pass; #clean(). optimize(""hf/3-21G"") # segfaults; #optimize(""hf/cc-pvdz"") # 4 iter; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2084#issuecomment-761275679:98,predict,predicting,98,https://psicode.org,https://github.com/psi4/psi4/issues/2084#issuecomment-761275679,1,['predict'],['predicting']
Safety,"Code updated to use a C++ class as a wrapper to the Python interface. The result is _very _ similar to the old interface, but I was able to eliminate redundant arguments. There's more ripping out of old `libdiis` tech that I could do (`diisentry.cc` is now unused), but I'll wait to hear that the current interface looks good before gutting any more code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2369#issuecomment-986822136:150,redund,redundant,150,https://psicode.org,https://github.com/psi4/psi4/pull/2369#issuecomment-986822136,1,['redund'],['redundant']
Safety,"Completed. And Psi4 now pulls from evaleev/libint branch v1, rather than psi4/libint. The latter will be made private at some point to avoid confusion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/693#issuecomment-301566033:135,avoid,avoid,135,https://psicode.org,https://github.com/psi4/psi4/issues/693#issuecomment-301566033,1,['avoid'],['avoid']
Safety,"Conda pkgs are 0.2.20, so safe in that respect. Either I need to pay closer attn to omp flags in my p4 compilation against conda openblas or the missing threading flag in the conda openblas recipe is indeed fatal to psi. . Your dft-bench test was definitely run with -n, @hokru? Ctest runs individual tests single threaded.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390186458:26,safe,safe,26,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390186458,1,['safe'],['safe']
Safety,"Crash replicated. Almost certainly what's going on is that a fundamental library (gcc, mkl are the usual suspects) is in conflict between jupyter's `ldd` and psi4's (`envname/lib/pythonx.x/site-packages/psi4/core.so`). The usual hack is to switch around import order between psi4, numpy, matplotlib, etc, until one works. Indeed, if I install psi4 the way you listed into `p4env` and then create _another_ env into which I install jupyter (and same version of python; all from conda-forge) and then adjust the path (`sys.path.append('/path/to/p4env/lib/python3.6/site-packages/`), I can `import psi4` just fine. Next problem is that `psi4.test()` or any molecule specification just fails. This one is new to me, and 20 min hacking did not solve it. One suspicion is that regex is involved, and regex is the big reason psi4 ships with its own gcc (5.2) rather than the longstanding conda default of 4.8. But on the other hand, everything c++ is supposed to be statically linked in to avoid such troubles. So you've found a real problem, and I don't have a ready solution. The medium-term solution is to go with the new compilers that conda is rolling out (7.2). Then psi can rejoin the common gcc track of the rest of the conda ecosystem. Fortunately, I was working on that this week. Copying people who have had related problems. @dsirianni, @j3mdamas, Pascal (hit a `bad_cast` error)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-345402467:983,avoid,avoid,983,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345402467,1,['avoid'],['avoid']
Safety,"Dear Sebastian, . I really appreciate your hints and helps, but i have to say that after some days of intense testing and checking, it seems to me that unfortunately DMRG is difficult to apply on large molecules (400 atoms) unless full 2-electron integral calculation is avoided. Furthermore i observe that CHEMPS2 becomes very slow once you choose a better basis set (cc-pvtz vs cc-pvdz) . ""The cost reduction is achieved by not performing the total O(n^5) two-electron integral rotation."". How can i achieve this ? By following those hints in your previous answers ? ; I think, avoiding two-electron integral rotations is some thing which should be done in PSI4 rather than in the fcidump plugin modification. Best wishes; Luca",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105440640:271,avoid,avoided,271,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105440640,2,['avoid'],"['avoided', 'avoiding']"
Safety,"Dear Sebastian, ; Thanks a lot for the detailed answer, but the problem with the FCIDUMP file is that i have no idea; how to tell PSI4 to give the final FCIDUMP after the HF calculation for a desired active space, as i see from the test examples provided in CHEMPS2 , it gives automatically a FCIDUMP for 28 orbitals and all 14 electrons of N2 molecule, but i would like to take into account only 8 electrons in 8 orbitals, for instance. . How can i obtain a FCIDUMP for a desired active space using fcidump.cc plugin ???; You mention here : http://sebwouters.github.io/CheMPS2/inoutput.html ; ""The σ-orbitals are kept frozen at the RHF/6-31G level of theory, and the active space consists of 28 RHF/6-31G π-orbitals"" but how did you keep the sigma orbitals frozen ?. This is for example done in molpro by :; {fci,core, 18,occ, 24; dump; }; But unfortunately in molpro it performs a full 2 electron calculation for all basis functions before giving the fcidump, some thing that i would like very much to avoid. . Bests; Luca",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105182036:1004,avoid,avoid,1004,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105182036,1,['avoid'],['avoid']
Safety,"Definitely. The only roadblock was in handling all of the printing. I used `be_quiet()` and `reopen_outfile()`, which fail during testing in the windows build. Interestingly, these functions aren't used in the code elsewhere, so they seem not to be windows-safe at all. I think a workaround shouldn't be too hard, but suggestions welcome. The printing of each atomic calculation should never be that excessive (since its only unique elements/basis), so simple solution is to just print all of the atomic outputs",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2127#issuecomment-815296254:257,safe,safe,257,https://psicode.org,https://github.com/psi4/psi4/pull/2127#issuecomment-815296254,2,['safe'],['safe']
Safety,Detect non-operational functionals ahead of time.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/863#issuecomment-345265139:0,Detect,Detect,0,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345265139,1,['Detect'],['Detect']
Safety,Detect what? Libxc 4 has SCAN.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/863#issuecomment-345264267:0,Detect,Detect,0,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345264267,1,['Detect'],['Detect']
Safety,"Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /opt/local/bin/python (found suitable version ""3.6.1"", minimum required is ""2.7"") ; -- Found PythonLibs: /opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib; -- Found Python 3.6:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:1279,Detect,Detecting,1279,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,4,['Detect'],['Detecting']
Safety,"Diazonium, I believe your assessment is correct and I have little to add here unfortunately. While thread safety in the pthread code has been improved recently, OpenMP is still considered the safer option. (Though you could try a pthread build - ideally of the current ""develop"" branch that should soon become the 0.3.0 release - with USE_SIMPLE_THREADED_LEVEL3=1 which should work around at least some of the remaining bugs.) ; Please create issues for any OpenBLAS bugs you find, ideally with some standalone code that makes it easy to reproduce and track down the problem. I am anything but an expert on multithreading, but at least there are powerful debugging tools available now that simply did not exist when K.Goto wrote; the library that OpenBLAS builds upon. ; (Incidentally my own involvement with OpenBLAS came about through dft as well, though in my case it is condensed matter codes like Elk and Wien2k)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390436926:106,safe,safety,106,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390436926,4,['safe'],"['safer', 'safety']"
Safety,"Did you put the sph/cart flag at the top of the basis file? MolSSI's new library does it automatically if you select ""psi4"" format, but it has to be by hand for the old one. It at least runs for me -- output is below for a sanity check. ```; >>> head stage/share/psi4/basis/ano-rcc.gbs; cartesian. !----------------------------------------------------------------------; ! Basis Set Exchange; ! Version v0.7.0; ! https://www.basissetexchange.org; !----------------------------------------------------------------------; ! Basis set: ANO-RCC; ! Description: Full ANO-RCC basis; ! Role: orbital; ```. ```>>> cat toon.out . -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.4a1.dev99 . Git: Rev {cphfconv} bddb364 dirty. R. M. Parrish, L. A. Burns, D. G. A. Smith, A. C. Simmonett,; A. E. DePrince III, E. G. Hohenstein, U. Bozkaya, A. Yu. Sokolov,; R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). Additional Contributions by; P. Kraus, H. Kruse, M. H. Lechner, M. C. Schieber, R. A. Shaw,; A. Alenaizan, R. Galvelis, Z. L. Glick, S. Lehtola, and J. P. Misiewicz. -----------------------------------------------------------------------. Psi4 started on: Monday, 29 April 2019 11:26AM. Process ID: 25534; Host: psinet; PSIDATADIR: /home/psilocaluser/gits/hrw-quaternary/objdir37/stage/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; H; }. set {; scf_type pk; basis ano-rcc; relativistic x2c; reference uhf; }. energy('hf'). --------------------------------------------------------------------------. ***",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:223,sanity check,sanity check,223,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168,1,['sanity check'],['sanity check']
Safety,"Do we need to break down and insist that people specify the python to use; via some kind of flag? It seems that cmake picking up the wrong one is a; problem that just won't go away. And/or perhaps a little test script that; might check the settings and verify that they will work with the user's; PATH?. At the very least, we do certainly need updated documentation on the latest; iteration of the build system, if we don't have it yet. On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; wrote:. > Glad rpath behavior is making more sense, @jgonthier; > https://github.com/jgonthier . Unless all dependencies are isolated; > behind one environment (conda strategy) or each dependency is isolated in; > its own environment (a programming-using-conda strategy, but hard when; > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > path. I regularly have to edit mine to get the right HDF5 linked. As I; > don't know a winning strategy, I think we can't guarantee the built exe/lib; > will run, only that the conda ones will. This does show we need better; > notes on the matter so people can diagnose and correct.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252927823:849,predict,predict,849,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252927823,2,"['predict', 'safe']","['predict', 'safe']"
Safety,"E '<' not supported between instances of 'tuple' and 'int' (type=type_error); ================================================== warnings summary ===================================================; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:599; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:701; `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:698; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:699; `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:702; `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!; ===========================",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542:5190,safe,safe,5190,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542,2,['safe'],['safe']
Safety,"Eco failure is, quite predictably, because it breaks `v2rdm`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2619#issuecomment-1162453607:22,predict,predictably,22,https://psicode.org,https://github.com/psi4/psi4/pull/2619#issuecomment-1162453607,1,['predict'],['predictably']
Safety,"Every time this has happened, the problems have started when I've tried to push changes to the branch from my local git repo to find out that the branch has changed on github. When I pull the changes into my branch, I get conflicts, that I then try to resolve. The end result appears to be a big mess every time. Why is this happening and how can I avoid it??",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1460#issuecomment-452418446:349,avoid,avoid,349,https://psicode.org,https://github.com/psi4/psi4/pull/1460#issuecomment-452418446,1,['avoid'],['avoid']
Safety,"FOUND>; lapk.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_; ```; Maybe cmake is looking for libiomp5.so under $MKLROOT (/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl for me), when it is actually is in $MKLROOT/../compiler/lib/intel64/ (or other relevant architecture)?. It looks a lot more promising. Building now... Edit: Build failed at the same point as before during ""Performing configure step for 'psi4-core':""; ```; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; MathOpenMP iomp5 0 ; MathOpenMP iomp5 A _lib-NOTFOUND; MathOpenMP iomp5 B _lib-NOTFOUND; MathOpenMP_LIBRARIES MathOpenMP_LIBRARIES-NOTFOUND; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:99 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package); ```; It looks like OpenMP_CXX_LIBRARY_DIRS doesn't get passed",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396748980:4102,Detect,Detecting,4102,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396748980,2,['Detect'],['Detecting']
Safety,"FYI, I think this has hampered python detection for the conda build. Doing sad things like:. ```; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/bin/python (found version ""2.7.10"") ; -- Found Python: /usr/lib64/libpython2.7.so ; ```. at cmake configure time until I told the conda recipe explicitly where to get its library from:. ```; -DPYTHON_INTERPRETER=${PYTHON} \; + -DPYTHON_LIBRARY=/theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/lib/libpython2.7.so \; ```. Ugly hack but stable for now. Just be aware the Python detection still not ideal.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-134687960:38,detect,detection,38,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-134687960,2,['detect'],['detection']
Safety,"Few more notes:; - external projects currently installed in `install/externals/proj_name`. How about installing them ""on top"" of psi4 so that the external project bins go in `install/bin`, headers go in `install/include/proj_name`, etc. ?; - external projects look to be built as static libs. will want to be able to build and detect as shared libs; - py-side replacement for `psi4_main/create_new_plugin.cc` is checked in. Right now, the cmake variable substitution works equally not at all for C++ and Python versions. Will need to consider how to call in pre-Inversion period.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235532620:327,detect,detect,327,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235532620,1,['detect'],['detect']
Safety,"File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 304, in popen\n ret = {""proc"": subprocess.Popen(args, **popen_kwargs)}\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\subprocess.py"", line 858, in __init__\n self._execute_child(args, executable, preexec_fn, close_fds,\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\subprocess.py"", line 1251, in _execute_child\n args = list2cmdline(args)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\subprocess.py"", line 553, in list2cmdline\n for arg in map(os.fsdecode, seq):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\os.py"", line 818, in fsdecode\n filename = fspath(filename) # Does type-checking of `filename`.\nTypeError: expected str, bytes or os.PathLike object, not NoneType\n\n')); ```; From yml install; ```; Collecting package metadata (repodata.json): done; Solving environment: |; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; Examining python=3.9: 43%|██████████████████████████▏ | 6/14 [00:19<00:29, 3.66s/it]|Examining conflict for geometric torsiondrive matplotlib qcengine python qcelemental psi4: 57%|▌| 8/14 [00:22<00:10, \Examining conflict for geometric torsiondrive matplotlib qcengine python qcelemental gau2grid psi4: : 19it [01:02, 3.49Examining conflict for geometric torsiondrive matplotlib qcengine python qcelemental gau2grid psi4: : 20it [01:02, 3.71Examining conflict for matplotlib python: : 20it [01:07, 3.71s/it] failed -; Solving environment: /; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; Examining python=3.9: 43%|██████████████████████████▏ | 6/14 [00:20<00:30, 3.87s/it]|Examining libblas[build=*mkl]: 64%|█████████████████████████████████▍ | 9/14 [00:30<00:24, 4.99s/it]|Examining conflict for geometric torsiondrive: 43%|███████████████▍ | 6/14 [00:16<00:10, 1.28s/it]\Examining conflict for matplotlib psi4 geometric tor",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:3595,abort,abort,3595,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020,1,['abort'],['abort']
Safety,FindPythonInterp/FindPythonLibs/FindPythonLibsNew should never be called after the switch in https://github.com/psi4/psi4/issues/3020#issuecomment-1667105438 to `find_package(Python`. Can you determine what's still calling the old detection? One guess is that not just top-level/CM but top-level/psi4/CM needs the adjustment and the call has to come before pb11 detection https://github.com/psi4/psi4/blob/b0e621fc287b60010275fbe22f7e9337e855e1df/psi4/CMakeLists.txt#L60 .,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1676479960:231,detect,detection,231,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676479960,2,['detect'],['detection']
Safety,"FindPythonLibsNew should be removed from the repo -- I guess we left it as a transition. Since https://github.com/psi4/psi4/pull/2048 for v1.4, it's been replaced by the cmake native detection. Is it feasible to apply that to v1.3.2 as a patch? If a fresh edit is easier, switching `find_package(3.7 PythonLibsNew)` for `find_package(Python 3.7 EXACT COMPONENTS Interpreter Development REQUIRED)` in two places (top-level CM and psi4/CM) and replacing all `PYTHON_` with `Python_` in CM files should do most of the trick. Good news is that there's no other active distutils in master, so there should be a workaround to anything else from 1.3.2 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1667105438:183,detect,detection,183,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1667105438,1,['detect'],['detection']
Safety,"First, you've `s/PYTHON_EXECUTABLE/Python_EXECUTABLE/g cmake/FindPythonModule.cmake` already probably. maybe patch it with to get more info out of the error. ```; diff --git a/cmake/FindPythonModule.cmake b/cmake/FindPythonModule.cmake; index 2b6f93172..b2061b8a6 100644; --- a/cmake/FindPythonModule.cmake; +++ b/cmake/FindPythonModule.cmake; @@ -77,8 +77,10 @@ macro(find_python_module module); print(parse_version('${${module}_VERSION}') ${_op} parse_version('${${module}_tgtver}'))""; RESULT_VARIABLE _${module}_verenuf_status; OUTPUT_VARIABLE _${module}_verenuf; - ERROR_QUIET; + #ERROR_QUIET; OUTPUT_STRIP_TRAILING_WHITESPACE); + message(""_${module}_verenuf_status ${_${module}_verenuf_status}""); + message(""_${module}_verenuf ${_${module}_verenuf}""); if(NOT ${_${module}_verenuf_status}); if(${_${module}_verenuf} STREQUAL ""True""); set(_${module}_requested_version_found ""${Python_EXECUTABLE}""); ```. and kill off the `QUIET` in external/upstream/qcelemental/CM. ```; if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); include(FindPythonModule); find_python_module(qcelemental ATLEAST 0.24.0 QUIET); endif(); ```. But really, assuming you're detecting a qcel in path, the only part of external/upstream/qcelemental/CM that further cmake cares about is ` add_library(qcelemental_external INTERFACE) # dummy`, so you could set that and bypass the FindPythonModule.cmake entirely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1668622213:1150,detect,detecting,1150,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668622213,1,['detect'],['detecting']
Safety,For anyone else running into this. Having some packages from `-c conda-forge` and some from the main channel can lead to this issue. I had -c conda-forge set as a preferred channel and had to turn it off to resolve this issue. Create a new environment in conda and install psi4 separately to avoid relying on other packages from -c conda-forge.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2294#issuecomment-1054328789:292,avoid,avoid,292,https://psicode.org,https://github.com/psi4/psi4/issues/2294#issuecomment-1054328789,1,['avoid'],['avoid']
Safety,"For history, back when Python detection in cmake was very broken (exe and lib weren't matching pair), numpy made their own alternate find python cmake file and pybind11 used numpy's and psi4 used pybind11's. I hear cmake has totally rewritten theirs, and pybind11 is now amenable to either (https://github.com/pybind/pybind11/pull/2370, I think). So, yes, upgrade now reasonable. Note that psi, in turn, installs the python finder module so that plugins can use it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2060#issuecomment-743297163:30,detect,detection,30,https://psicode.org,https://github.com/psi4/psi4/issues/2060#issuecomment-743297163,1,['detect'],['detection']
Safety,"For methods (or methods in certain circumstances, say reference or conv/df) only available through an external add-on, do we want those opt-in? That is, certainly the external must be (1) installed and detectable. But do we also want to (2) require the user to `set qc_module=mrcc|adcc|chemps2` ? CheMPS2 has a long history of not requiring (2). ADCC has a shorter history of being the preferred backend and automatic choice, if present. I just switched MRCC syntax in #2731 to yes require (2). That was in keeping with the user opt-ing in via `energy(""mrccsd"")`. I can go either way, and I guess I'm now leaning toward not requiring (2) and adjusting MRCC accordingly. But it seems like something to discuss and settle on a consistent treatment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2737#issuecomment-1268969031:202,detect,detectable,202,https://psicode.org,https://github.com/psi4/psi4/pull/2737#issuecomment-1268969031,1,['detect'],['detectable']
Safety,"For the M11, can you try removing the whole `x_hf` subdirectory? The long range part should be just 0.572. If removing that helps, then the sanity checking function needs updating - it shouldn't allow two ""use_libxc"" parameters through.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802#issuecomment-383211336:140,sanity check,sanity checking,140,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383211336,1,['sanity check'],['sanity checking']
Safety,"Full overview of default cutoffs and generating python file can be found here: https://gist.github.com/hokru/546307545c7bf0d96de5cf867e036cae. Currently the best way forward, I think, is leaving density screening **off** by default to avoid setting too tight thresholds for certain components leading to unintuitive behaviour. ; I will update the PR accordingly unless another direction is wanted.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1860#issuecomment-616657858:235,avoid,avoid,235,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-616657858,1,['avoid'],['avoid']
Safety,"Generally psi4 is supposed to catch those and still finish gracefully, and with upcoming psi4 v1.4 one gets also more visible error messages (see PR https://github.com/psi4/psi4/pull/1862). But here psi4 is aborted which is indeed not user friendly.; I dont know the exceptions machinery well enough to say why but it happens also in the current developer version.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-760128241:207,abort,aborted,207,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-760128241,1,['abort'],['aborted']
Safety,"Git-hooks is probably a non-starter, so +1 for avoiding that. Another +1 for clang-format, I use it internally quite a bit with Google style and 4 spaces. Im kind of on the fence about this. A few notes:. Pros:; - Completely uniform style. Cons:; - We are constantly avoided errors, the `# pyflakes` and `# noqa` messages are messier than most of our python errors IMO.; - Plenty of times when we want something other than pep8 formatting (e.g. `VARH`).; - Completely uniform style (see previous point).; - If we override a single error in pyflakes, pyflakes will continue to fail for all further commits. It would become very easy just to ignore this test. Dont get me wrong, we should do periodic style cleanups. This is needed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/530#issuecomment-263272403:47,avoid,avoiding,47,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263272403,2,['avoid'],"['avoided', 'avoiding']"
Safety,"Github also complicates things regarding private/public. It doesn’t allow mixing public and private branches in a repository. And it doesn’t allow you to make private a fork of a public repo, though there does seem to be an alternative: https://help.github.com/articles/duplicating-a-repository/ https://help.github.com/articles/duplicating-a-repository/ . And in the beginning we didn’t want everyone to have to pay for storing private repositories if they wanted private forks (moot now since github offers private storage for scientists). That’s more of the history of how the current scheme came to be. I’m open to better schemes, but I think most of our problems can be solved by an automated public/private master sync when safe. Lori. > On May 3, 2015, at 12:18 PM, andysim notifications@github.com wrote:; > ; > It’s not really an SVN/CVS thing, IMHO. We were using Git for a very long time before making the public/private split and the core developers are extremely familiar with Git’s distributed nature. The old way of developing Psi was to have a private repo (which used to be CVS, then SVN, then Git/SVN, before switching completely to Git) and to only release static tarballs every now and then. Lori touched on the reason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them.; > ; > The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working toget",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/88#issuecomment-98501924:730,safe,safe,730,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98501924,1,['safe'],['safe']
Safety,"Glad rpath behavior is making more sense, @jgonthier . Unless all dependencies are isolated behind one environment (conda strategy) or each dependency is isolated in its own environment (a programming-using-conda strategy, but hard when `/usr/` involved), it can be impossible for cmake to predict a safe `rpath` path. I regularly have to edit mine to get the right HDF5 linked. As I don't know a winning strategy, I think we can't guarantee the built exe/lib will run, only that the conda ones will. This does show we need better notes on the matter so people can diagnose and correct.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252908695:290,predict,predict,290,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252908695,2,"['predict', 'safe']","['predict', 'safe']"
Safety,"Good catch. Yes, the ambit plugin wasn't even doing anything with ambit until c274b18e825bff404cd828c39fa3f840be6d9579. Please switch the check from `AMBIT_FOUND` to `ENABLE_AMBIT`, as that will catch both detect-external and build-internal ambits.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/436#issuecomment-230487517:206,detect,detect-external,206,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230487517,1,['detect'],['detect-external']
Safety,"Good detective work!. Fixing this issue wouldn't require `freeze_core $n` support, only changing the default behavior when the core level isn't the same as in the neutral species. I'll suggest this as a possible new developer issue at the conference today. _That said_, it would also be really nice to be able to set the core level for individual atoms, rather than going through the clunky and somewhat obscure `num_frozen_docc` and `frozen_docc`. We have a project in my research group that requires correlating an extra level of electrons just for neutral calcium.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1271#issuecomment-437576328:5,detect,detective,5,https://psicode.org,https://github.com/psi4/psi4/issues/1271#issuecomment-437576328,1,['detect'],['detective']
Safety,"Good detective work, @JonathonMisiewicz. @andysim, @jturney, sharing `CoordEntry`s between `atoms_` and `full_atoms_` sounds like it could cause trouble and could undermine `update_geometry` as the one-stop-shop for Molecule self-consistency. Do you anticipate problems with this sol'n?. @JonathonMisiewicz, which `reinterpret_coordentry(False)` in the driver for findif did you have in mind as necessitating this work-around?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1108#issuecomment-408879404:5,detect,detective,5,https://psicode.org,https://github.com/psi4/psi4/pull/1108#issuecomment-408879404,1,['detect'],['detective']
Safety,"Good idea, @loriab. We're OK for now, because the problems (apart from Boost detection) seem to be fixed, but I suspect this isn't the last bug we'll ever deal with...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235151364:77,detect,detection,77,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235151364,1,['detect'],['detection']
Safety,Good move fixing the `PYTHON_LIBRARY` CMake variable; mixed detection of Python interpreter/library/headers is definitely a scourge of Psi4 compilation. But I set that variable all the time and don't get an actual link to `libpython`. So I think it is just the version you're building is before we stopped linking explicitly.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-275141079:60,detect,detection,60,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275141079,1,['detect'],['detection']
Safety,"Good point -- if we had one guess vector per irrep, that should be; enough... but I'm supposing our code doesn't actually construct guess; vectors with a specified symmetry. In which case we would probably need; ~nirrep * 2 or 3 to be safer. On Tue, Aug 14, 2018 at 5:52 AM Susi Lehtola <notifications@github.com>; wrote:. > Is that enough, or should it be nirrep times a reasonable minimum number?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1125#issuecomment-412818109>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdvJZU_E0PhuDamD3Fp8FFetLUrTdks5uQp3ggaJpZM4VwqTR>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1125#issuecomment-412880582:235,safe,safer,235,https://psicode.org,https://github.com/psi4/psi4/issues/1125#issuecomment-412880582,1,['safe'],['safer']
Safety,"Good to know on the `CMAKE_PREFIX_PATH` for python detection. That should probably become the preferred way to detect Anaconda python. To have multiple items in that var, use something like `-DCMAKE_PREFIX_PATH=""${PFXE}/install-libefp-so;${PFXE}/install-libint-6-so;${PFXE}/install-pcmsolver""`, in case you hadn't already worked that out. Quite right about 2.7. At some point I stopped adapting my dictionary comprehensions for the 2.6 folks. I'm guessing it will build/link, but you'd get driver errors at runtime. Should be detecting a 2.7 minimum in cmake. One thing we want to do really soon is allow/switch to 3.5, switch to pythonlibsnew cmake module, and probably to offload python library detection to pybind11, so don't spend too much time playing around with the current python cmake, except for your own edification. Do feel free to switch that line you linked to to 2.7 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249720030:51,detect,detection,51,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249720030,4,['detect'],"['detect', 'detecting', 'detection']"
Safety,"Good to know the cause. In the cmake rewrite, psi4 and all add-ons are getting safeguards that catch attempts to build in place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/460#issuecomment-239645645:79,safe,safeguards,79,https://psicode.org,https://github.com/psi4/psi4/issues/460#issuecomment-239645645,1,['safe'],['safeguards']
Safety,"Great, glad it's working. I'll get your OpenBLAS patch added in, and it'll make its way back upstream to autocmake one day. Your `ldd` looks good. Only thing strikes me as odd is `libpython.so`. We stopped actually linking to this and now only require the interpreter, not the library. But maybe you're compiling 1.1a1 and the change happened afterward. In any case, when you update someday, don't be alarmed if that goes away. On the `#!/cluster/apps/python/2.7.12/x86_64/bin/python`, we go back and forth on whether to embed the specific compile-time version or a more generic `/usr/bin/env python2` or `usr/bin/env python3`. Advantages of the former: (a) user can be oblivious to what or if python in path at all, (b) conda does it this way. Advantages of the latter: (a) it's what Linux users expect to be happening, (b) avoids trouble of psi4 still using compile environment if you have separate compile and run-time environments. We've stuck with the former since it's friendlier to the inexperienced. Go right ahead and edit that line to a `/usr/bin/env` if it's more suited to your cluster, but I do recommend doing `python2` since the python2/3 headers are used during the build. By the way, on testing, there's `share/psi4/samples/*/test.in` files that'll print `SUCCESS`/`FAILED` to the screen and are handy for testing (or run `ctest -L quick -j4`)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-275136191:825,avoid,avoids,825,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275136191,1,['avoid'],['avoids']
Safety,"Hard to say. Psi links omp libraries based on whether it finds a library with ""mkl"" in the name. Flexiblas could cover that up and apply its own gomp here: https://gitlab.mpi-magdeburg.mpg.de/software/flexiblas-release/-/blob/master/cmake/FindMklOpenMP.cmake#L12-27 . I'm thinking Flexiblas will be most common in Fedora for now. Our conda builds mostly hard-code the blas libraries list to bypass the math detection cmake. I'd feel a little better if flexiblas was behind MKL in priority since MKL is our special case, but I don't know of any definite disruptions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2246#issuecomment-880252991:407,detect,detection,407,https://psicode.org,https://github.com/psi4/psi4/pull/2246#issuecomment-880252991,1,['detect'],['detection']
Safety,Have you been using a Windows target path for all the externals find_project() detection in stage? 3rd line in:. ```; <prefix>/ (W); <prefix>/(cmake|CMake)/ (W); <prefix>/<name>*/ (W); <prefix>/<name>*/(cmake|CMake)/ (W); <prefix>/(lib/<arch>|lib|share)/cmake/<name>*/ (U); <prefix>/(lib/<arch>|lib|share)/<name>*/ (U); <prefix>/(lib/<arch>|lib|share)/<name>*/(cmake|CMake)/ (U); <prefix>/<name>.framework/Resources/ (A); <prefix>/<name>.framework/Resources/CMake/ (A); <prefix>/<name>.framework/Versions/*/Resources/ (A); <prefix>/<name>.framework/Versions/*/Resources/CMake/ (A); <prefix>/<name>.app/Contents/Resources/ (A); <prefix>/<name>.app/Contents/Resources/CMake/ (A); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238169003:79,detect,detection,79,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238169003,1,['detect'],['detection']
Safety,"Haven't checked, but that's a redundant input, isn't it? `basis cc-pvdz` + `relativistic x2c` triggers the primary basis to decontract. That said, the answer in the docs for the x2c example is known wrong. Were you going to address that, @WDerricotte?. Let me know if I'm mistaken about any of this, as I don't run relativistic regularly. And if there's something that _should_ work, please make a test case of it so it will continue to work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/662#issuecomment-288812442:30,redund,redundant,30,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288812442,1,['redund'],['redundant']
Safety,"Here, I kind of feel like for the returned `jobrec` the dispersion energy is the correct thing for the current energy. I would hazard that this is an issue in reintegration of this energy down the line.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1470#issuecomment-455797642:127,hazard,hazard,127,https://psicode.org,https://github.com/psi4/psi4/pull/1470#issuecomment-455797642,1,['hazard'],['hazard']
Safety,"Hi @loriab,. I promise I will find a consolidation way to reduce the source code as much as possible when I find a free time to work on it. Presently, I am more focused on the implementation and adding some new features to DFOCC. Even If we suppose that there are some redundant codes in DFOCC, it is a not big problem. It may just take a few more minutes of building time and a slightly additional storage. Further, I think the relatively large body of DFOCC w.r.t. some other modules is understandable since DFOCC includes many post-HF methods (standard and OO) including energies and gradients, and most of them are implemented for RHF and UHF refs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/382#issuecomment-221381893:269,redund,redundant,269,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-221381893,1,['redund'],['redundant']
Safety,"Hi @msaitow, I don't believe we ever corresponded directly back when you were adding ADC to Psi4, but I did want to thank you on behalf of all the Psi4 developers for the longstanding functionality. I think your contribution of the ADC module was one of the first prompts to this community that we could develop software in a delocalized fashion and that the early Psi4 codebase could be understood and be a good development platform. There have been a few issues detected with ADC and a capable replacement in ADCC, so I wanted to let you know that we're removing the ADC module with #2737. The code will still be available in https://github.com/psi4/psi4attic and in any version of Psi4 through v1.6.1 . Thanks again!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1033#issuecomment-1273741984:464,detect,detected,464,https://psicode.org,https://github.com/psi4/psi4/issues/1033#issuecomment-1273741984,1,['detect'],['detected']
Safety,"Hi @susilehtola, I've been following Libxc v5.1 https://gitlab.com/libxc/libxc/-/issues/186 with interest. When I compiled this branch (after rebase; including your fixes from the spring, thanks!) in late December against the the Libxc 5.0 branch, I got about the same Psi4 test results as recorded above -- lots of `Matrix::power: C_DSYEV failed`. However, when I compile this branch against the new Libxc 5.1 hotfix branch, I don't even get that far. After disabling OpenMP, I get segfaults (dft-psivar):; ```; (gdb) bt; #0 0x00007ffff78351d7 in raise () from /lib64/libc.so.6; #1 0x00007ffff78368c8 in abort () from /lib64/libc.so.6; #2 0x00007ffff782e146 in __assert_fail_base () from /lib64/libc.so.6; #3 0x00007ffff782e1f2 in __assert_fail () from /lib64/libc.so.6; #4 0x00007fffed70db12 in xc_mix_func (func=func@entry=0x555556ca7500, np=np@entry=255, rho=rho@entry=0x555556e575c0, sigma=sigma@entry=0x555556ccda80, lapl=lapl@entry=0x0, tau=tau@entry=0x0, zk=0x555556771300, vrho=0x55555e164460, vsigma=0x555556c12720, vlapl=0x0, vtau=0x0, v2rho2=0x0, v2rhosigma=0x0, v2rholapl=0x0, v2rhotau=0x0, v2sigma2=0x0, ; v2sigmalapl=0x0, v2sigmatau=0x0, v2lapl2=0x0, v2lapltau=0x0, v2tau2=0x0, v3rho3=0x0, v3rho2sigma=0x0, v3rho2lapl=0x0, v3rho2tau=0x0, v3rhosigma2=0x0, v3rhosigmalapl=0x0, v3rhosigmatau=0x0, v3rholapl2=0x0, v3rholapltau=0x0, v3rhotau2=0x0, v3sigma3=0x0, v3sigma2lapl=0x0, v3sigma2tau=0x0, v3sigmalapl2=0x0, v3sigmalapltau=0x0, v3sigmatau2=0x0, ; v3lapl3=0x0, v3lapl2tau=0x0, v3lapltau2=0x0, v3tau3=0x0, v4rho4=0x0, v4rho3sigma=0x0, v4rho3lapl=0x0, v4rho3tau=0x0, v4rho2sigma2=0x0, v4rho2sigmalapl=0x0, v4rho2sigmatau=0x0, v4rho2lapl2=0x0, v4rho2lapltau=0x0, v4rho2tau2=0x0, v4rhosigma3=0x0, v4rhosigma2lapl=0x0, v4rhosigma2tau=0x0, v4rhosigmalapl2=0x0, v4rhosigmalapltau=0x0, ; v4rhosigmatau2=0x0, v4rholapl3=0x0, v4rholapl2tau=0x0, v4rholapltau2=0x0, v4rhotau3=0x0, v4sigma4=0x0, v4sigma3lapl=0x0, v4sigma3tau=0x0, v4sigma2lapl2=0x0, v4sigma2lapltau=0x0, v4sigma2tau2=0x0, v4sigmala",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754391084:605,abort,abort,605,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754391084,1,['abort'],['abort']
Safety,"Hi Lori,. In one of the functions, ccsd_WabefT2_cd(), I use CD factors for (ab|cd) integrals while for all the other 4-index integrals DF factors are used. In the second function, ccsd_WabefT2(), I use only DF factors for all 4-index integrals. Further, the explicit form of W_abef tensors are different for each functions. Hence, although both functions looks repeating each other, they are not in fact. At the theoretical point of view, there are significant differences between them. Hence, I prefer to keep them separate. However, it is possible to merge them. But in that case I will need if-else blocks at several places. Of course, I create common functions if I need something repeatedly. However, if I see theoretically significant difference between two functions, then I prefer separate functions. For example, instead of merged CCD and CCSD codes, I prefer to keep them separate, which looks me better organised. Alternatively, it is possible to merge all MP2, MP3, MP2.5, LCCD, and CCD into CCSD code with many if-else blocks or switch-case blocks. For each different method creating different functions appears to me more systematic and better organised. . I agree with you about avoiding repetitive codes for the sake of maintenance and build time. Presently, I am busy with CCSD(T) gradients. When I get some free time I will try to reduce repetitive codes if there are any, except for the similarities between high-order and lower-order methods, such as CCSD and MP3. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/382#issuecomment-220426701:1194,avoid,avoiding,1194,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-220426701,1,['avoid'],['avoiding']
Safety,"Hi Luca,. It might not be the most readable code, but lines 635-660 of https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc define different orbital spaces to perform transformations in. Also: If you really want to keep orbitals doubly occupied, it is better to take Coulomb and exchange contributions into account in a different way. Typically:; 1. Calculate the 1-RDM of docc orbitals in MO space (diagonal matrix with 2's and 0's).; 2. Rotate the 1-RDM to AO space with the orbital coefficients; 3. Contract the 1-RDM in AO space with the 2-electron integrals in AO space to the JK contribution of the Fock operator in the AO space; 4. Rotate the JK contribution in AO space to MO space with the orbital coefficients. This is done to avoid rotation of the 2-electron integrals from the AO space to the docc MO space. What I described above is implemented in the routines; 1. buildQmatOCC - https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L219; 2. buildJK - https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L153. If you want a FCIDUMP file for an active space, I think the easiest would be to strip off the DMRG calculation from the dmrgscf.cc plugin, and copy paste the FCIDUMP print statements from the fcidump.cc plugin. The active space CASCI/DMRGCI Hamiltonian can be found in the HamDMRG object just AFTER line 778: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L778. And the localized active space CASCI/DMRGCI Hamiltonian can be found in the HamDMRG object just AFTER line 811: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L811, if you specified ""LOC"" as the active space type. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105167250:767,avoid,avoid,767,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105167250,1,['avoid'],['avoid']
Safety,"Hi Rollin,. Yes, some tips in the manual about difficult optimizations would be helpful!. David. On Tue, Aug 4, 2015 at 9:02 PM, Rollin King notifications@github.com; wrote:. > optking was aborting prematurely. I just pushed the fix to the problem.; > For this case I found consecutive_backsteps = 2 [or more], as well as; > dynamic_level = 1 to now be helpful. (Don't use both at once as that is; > somewhat redundant.) Sometime I will type up some tips on problematic; > optimizations. But now optking will at least move you substantially closer; > to the minimum. Though one may always have to restart an optimization,; > these options will minimize the manual effort necessary.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/153#issuecomment-127808983.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153#issuecomment-128100571:189,abort,aborting,189,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-128100571,2,"['abort', 'redund']","['aborting', 'redundant']"
Safety,"Hi all, I added integral hashing to the direct JK class for separate J and K matrix builds, to avoid doing redundant, expensive ERI computations when building linK and then building J. I also reran all the C tests (all passing).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-981225085:95,avoid,avoid,95,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-981225085,2,"['avoid', 'redund']","['avoid', 'redundant']"
Safety,"Hi everyone!. It was [my forum thread](http://forum.psicode.org/t/building-with-high-am/936) that Toon linked in the first comment of this GitHub Issue. I never got a response there, so I never ended up using Psi4. Today I searched on Google to see if anything changed in the last 4.5 years, and found this page for the first time. I wonder why Toon, and then Lori, continued the discussion here rather than in that forum thread (or why no link to this page was provided there), because for that reason I didn't see this until more than 4 years later. Anyway, it looks like unresolved issues remained in May 2022. **Does anyone have a set of instructions for building with `AM=10`, that is safe for 2023 (preferably without Conda)?** I just need to calculate energies (no need for the Hessian, for example). Is it not possible to just install Psi4 with a sequence like the one below, that I use to install OpenMolcas?; ```; cmake .. ; make -j; ```; Or like the command that is used for MRCC:; ```; build.mrcc Intel -pOMP; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-1374142428:690,safe,safe,690,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-1374142428,1,['safe'],['safe']
Safety,"Hi loriab,. Sorry for asking that many questions. v1.1a1 requires GCC 4.9 or newer. Most software on our cluster is compiled with GCC 4.8.2 and I would like to avoid recompiling Python, HDF5, GSL etc. with a newer compiler version. The reason for compiling a newer version of psi4 is the the following post from Robert (SAPT bug in 1.0 rc1):. http://forum.psicode.org/t/problem-in-sapt2-3-dmp2-calculation/395. In your reply to the post you mentioned that there was a clean up of the SAPT code in july:. ""Your input worked just fine on my current Psi4. There've been a lot of changes to Psi4 since 1.0rc, and there was a clean-up of SAPT printing in July, so I recommend you update to current Psi4 which is ~700 commits ahead of where you're at. Especially since you're running SAPT. Did you build your own or do you want to try the conda binary?"". Is there are psi4 version with the new SAPT code, which builds with GCC 4.8.2 ?. Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274027886:160,avoid,avoid,160,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274027886,1,['avoid'],['avoid']
Safety,"Hi loriab,. Thank you for your reply. I already have access to GCC 5.2.0 and 6.2.0 on the cluster. I currently try to compile psi4 with GCC 5.2.0. I am currently struggling with specifying the BLAS library. I would like to use OpenBLAS 0.2.13, but somehow cmake has problems to automatically detecting it and I also don't know how I can specify the explicit path to the library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib/libopenblas.so). I already tried setting. export MATH_ROOT=/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib. and. export MATH_ROOT=/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_5.2.0. but in both cases OpenBLAS is not detected. If I disable the ENABLE_AUTO_BLAS and the ENABLE_AUTO_LAPACK settings, how can I specify the absolute path to the library ?. Thank you for your help. @andysim:; According to https://gcc.gnu.org/projects/cxx-status.html#cxx11:. ""GCC 4.8.1 was the first feature-complete implementation of the 2011 C++ standard, previously known as C++0x."". Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274478774:292,detect,detecting,292,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274478774,2,['detect'],"['detected', 'detecting']"
Safety,"Hi!; thank you, this is an interesting point and I am sure other code developers will raise the same issue. One of the main goals of TREXIO is to make it easy for different codes to exchange data. However, I understand that Psi4 may have specific needs that may not be included in the current version of TREXIO. One solution could be to use HDF5 for temporary files and store the final results with TREXIO. . But:; a better option is to fork TREXIO and extend it to fit Psi4's specific needs.; You could add your personal temporary arrays in a specific group named `psi4` for example, and link your own library with psi4. Additionally, if any modifications prove to be useful to other codes, they can be submitted as pull requests to the official library. The good thing with this strategy is that as long as you don't remove anything from the `trex.org` file, the files that you will produce will be detected as valid TREXIO files. Of course, there will be no way to access your specific data with the official library, but the files will be compatible with both the official and the custom library. @q-posev : We could think of a mechanism to generalize the possibility to extend the library for private data. Instead of reading only `trex.json`, we could let the script handle multiple json files to allow users to extend the library with custom groups. It could probably be integrated at the level of the configure script. In this way, @JonathonMisiewicz would only need to keep a JSON file in the git repo of psi4 to extend TREXIO instead of maintaining a fork of TREXIO and keeping his fork in sync with the official one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906:901,detect,detected,901,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906,1,['detect'],['detected']
Safety,"Hi~. Thanks for the responses. I create an environment and I run the command as you recommend ([link](https://psicode.org/installs/v15/)). `conda install psi4 python=3.9 -c psi4 `. But it still shows:. ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: \ ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; python=3.9; psi4 -> libxc[version='>=5.1.5,<6.0a0'] -> python[version='3.4.*|>=3.10,<3.11.0a0|>=3.6|>=3.5|>=3.7|>=3.6.0|>=3.6,<3.7|>=3.4']The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability.; ```. Is there anything wrong with my Ubuntu machine?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2390#issuecomment-1004659467:723,abort,abort,723,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1004659467,1,['abort'],['abort']
Safety,"Hmm, I wonder if some other dependency was detected in /usr such that it got baked into rpath at a high position. Depending on rpath/runpath, LD_LIBRARY_PATH may or may not trump it. Otherwise, I quite agree that you are typing sensibly and the computer is behaving not. `source activate` only works with bash– could that be the problem with that command? If you're on psi4/psi4 (CMR-KTB) and anything besides `psimrcc-fd-freq2` fails, yes, post it here. If you're on dgasmith/psi4 inversion (CMR-KTB-INV), then we're only up to 92% passing anyways.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252823348:43,detect,detected,43,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252823348,1,['detect'],['detected']
Safety,"Hmm, I'm not seeing what you describe. At least the 2.2.3 version that psi builds by default installs correctly into `<objdir>/stage/`, not `/usr/local`. One thing that's concerning is your ""Built target pybind11_tests"". I don't know where that's coming from since https://github.com/psi4/psi4/blob/master/external/upstream/pybind11/CMakeLists.txt#L22 . ```; -- Suitable pybind11 could not be located, Building pybind11 instead.; ...; [ 50%] No patch step for 'pybind11_external'; [ 53%] No update step for 'pybind11_external'; [ 57%] Performing configure step for 'pybind11_external'; -- The CXX compiler identification is GNU 7.3.0; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:885,Detect,Detecting,885,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966,4,['Detect'],['Detecting']
Safety,"Hmm, your right it might be good to doc the SuperFunctional class somewhere accessible. VV10 is automatically detected for full LibXC superfunctionals which contain VV10 parameters. However, -D and -NL and disparate enough that they likely need to be handled separately. What kind of automatic detection where you thinking about? Tagging `-V` to a functional will not work unless fit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/870#issuecomment-348223488:110,detect,detected,110,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-348223488,2,['detect'],"['detected', 'detection']"
Safety,"Hmm. I agree it is probably not worth spending a lot of time on, but for CMake noobs like me `-D SIMINT_VECTOR=...` not having any effect on its own is definitely surprising.; Looking at https://github.com/psi4/psi4/blob/ce8ce9a5e0fad4ebd2d5dee9b6d06b01047574b1/external/upstream/simint/CMakeLists.txt#L8; it appears as if there is a variable that already contains the string describing the vectorization type of the found simint binary. I have no idea how `simint_VECTOR` is (correctly) getting set to SSE, but _something_ must be somehow detecting that it is not the AVX default value set at ; https://github.com/psi4/psi4/blob/7afd2276795993fcfc7a769e5c2568d108678fc5/CMakeLists.txt#L167",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2480#issuecomment-1069404135:540,detect,detecting,540,https://psicode.org,https://github.com/psi4/psi4/issues/2480#issuecomment-1069404135,1,['detect'],['detecting']
Safety,"How about something like this:. - Perform SCF; - Check instability; - If unstable, rotate in the direction of the most unstable vector, according to some user-specified magnitude then...; - Compute the deviation of the new SCF energy from the 2nd order Taylor prediction, as well as the new SCF gradient; - If the 2nd order Taylor prediction was accurate enough (within some user-specified tolerance), and the magnitude of the gradient is within a comfortable range (another pair of parameters sadly...), then start SOSCF which should hopefully start going downhill.; - If the gradient is too low, increase the rotation magnitude, if too large decrease it. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, decrease rotation magnitude. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, **and** the gradient is too low, accept the orbital rotation, recompute the orbital Hessian at the new location (which is no longer exactly a saddle point), and repeat the entire follow process, until we find a point we can start SOSCF from. This could of course get quite expensive if a lot of Hessian recomputes are required, and relies on SOSCF not climbing back up to the saddle point, but to me it sounds easier to implement. With that said, I cannot help but feel like we are trying to reinvent a wheel. Surely, one would think that other people have already spent a lot of time thinking about the best ways to climb down from saddle points.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277:260,predict,prediction,260,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277,4,['predict'],['prediction']
Safety,"How did `TargetHDF5Config.cmake`, etc. even get into `/usr/local/` except through a Psi4 install? Or possibly libefp or CheMPS2 install? Those are just CMake target wrappings around HDF5 and LAPACK detections. If you're not wanting Psi to install those (they're mainly for info sharing w/i the Psi cmake superbuild), then libefp and chemps2 shouldn't be installing them either. Just in case it's unclear, every package gets internally installed to `<builddir>/stage/${CMAKE_PREFIX_PATH}`, which is a full-fledged psi installation. The result of user `make install` is to just bodily copy the `stage/` dir into the filesystem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/855#issuecomment-343778590:198,detect,detections,198,https://psicode.org,https://github.com/psi4/psi4/issues/855#issuecomment-343778590,1,['detect'],['detections']
Safety,"How did you get gau2grid (psi4 dependency) compiled without `mpmath`? There are ways around it, but simplest precaution is to make sure the python psi4 cmake is detecting (look in `<objdir>/CMakeCache.txt`; influence through `cmake -DPYTHON_EXECUTABLE=/full/path/to/bin/python`) and any conda-supplied psi dependencies are in the *same* conda environment and that that's active throughout cmake configure, `make`, `make install`, and runtime.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-382181608:161,detect,detecting,161,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-382181608,2,['detect'],['detecting']
Safety,"I [understand](http://stackoverflow.com/a/12665408) the GCC folks selected a limited definition of ""feature-complete"" when they wrote that sentence about 4.8. I use MKL so exclusively that I can only offer tentative advice on the Math detection. Check [this bit](https://github.com/psi4/psi4/blob/master/cmake/math/MathLibs.cmake#L18-L28) of code and make sure OpenBlas's headers are matching up. Then maybe change the libs from `blas` to `openblas` and try again with MATH_ROOT. Even if it detects properly for Psi4, you may still hit a block with math libs for libefp. Been working on solving that problem this weekend. I've no experience with the quality of OpenBLAS. But if it's not better than a system native distribution, you may prefer the binary that has high-quality math libs baked in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274524821:235,detect,detection,235,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274524821,2,['detect'],"['detection', 'detects']"
Safety,"I _was_ meaning SCS(N)-type variables, but after reading your comments, I've changed my mind again. While the number of spin-related variables on OCC's wavefunction object is _bad_, defining the same quantities multiple times throughout OCC is _worse_. That risks inconsistencies in the definitions and is another thing you need to check for when moving to qcdb. So the current plan (which is what I'll go with pending your objections) is to just use the variables already saved to OCC rather than re-computing them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-581686480:258,risk,risks,258,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581686480,1,['risk'],['risks']
Safety,"I agree that `cclambda` should honor the user's `r_convergence` choice, but the default settings we chose are not to avoid breaking tests but because tighter settings are wholly unnecessary (and often exceedingly difficult to achieve) for transition properties. The `cc55` test case just revealed the problem on certain hardware.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2520#issuecomment-1089609984:117,avoid,avoid,117,https://psicode.org,https://github.com/psi4/psi4/issues/2520#issuecomment-1089609984,1,['avoid'],['avoid']
Safety,"I agree that compatibility is nice, and will press ahead with adding the symmetry back in if that's the consensus. My hesitation to do so stems from the fact that only `OUT_OF_CORE` can use the symmetry, and it's the worst algorithm we have in JK. Symmetrizing is a lot more work than using `transform()` to transform the matrices (which doesn't seem to play nicely with mixed symmetric/c1 matrices), because the perturbations themselves must also be transformed to SALCs. None of that is hard, but it does make the response code messier; I currently check to see if the JK engine runs in C1 anyway, and avoid symmetrization for those cases.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-234099704:604,avoid,avoid,604,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-234099704,1,['avoid'],['avoid']
Safety,"I agree that option B is the best. The effect of the fix will be very minor. This can be easily tested by comparing to DCT code with conventional integrals (and we have done this in the past). Also, current version of the code should recover the exact DCT energy and gradient when using a very large auxiliary basis set.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1579#issuecomment-474901373:234,recover,recover,234,https://psicode.org,https://github.com/psi4/psi4/issues/1579#issuecomment-474901373,1,['recover'],['recover']
Safety,"I agree with all of the above, especially a sanity check on the number of points provided and the use of the minimum as a guess. One very minor correction: the ""bottom of the well"" dissociation energy `De` is the difference between the minimized energy and the dissociated products. The zero-point corrected value (which is what's really measured in experiments, because the molecule cannot reach the bottom of the well), is `D0` and comes from subtracting the `ZPVE(nu)` value reported in the dictionary from `De`. For the record, that ZPVE is `0.5 we - 0.25 wexe`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1600#issuecomment-483629512:44,sanity check,sanity check,44,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483629512,1,['sanity check'],['sanity check']
Safety,"I always get the non-sym solution with the given input, but I should not (technically) ?. Isnt the MOM procedure meant to calculate non-ground state SCF solutions? Does it avoid breaking the symmetry? The given twisted ethylene here is triplet?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349553820:172,avoid,avoid,172,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349553820,1,['avoid'],['avoid']
Safety,"I always use a fresh build directory. I found 2 cmake related issues. 1) I noticed 'pybind11_external' is build with the gcc 4.8( system default) instead of the locally installed gcc 5.4. So I added . ```; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER} ; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER} . ```. to [CMakeLists.txt](https://github.com/psi4/psi4/blob/master/external/upstream/pybind11/CMakeLists.txt) like it is done for the libint cmake file. 2) The second issue is that pybind11 auto-detects python3.4 and psi4 detected python2.7 on my workstation. I fixed it by changing the python version in the CMakeCache.txt file for pybind11 by hand, since I don't know how to tell cmake that. After rebuilding pybind11 the compilation of psi4 finishes normally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273472426:486,detect,detects,486,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273472426,2,['detect'],"['detected', 'detects']"
Safety,"I am getting `forrtl: error (76): Abort trap signal` error. Is that from that line?; It stops while printing the internal coordinate overview after printing the last angle value.; Presumably it tries to print a 4-center angle, there are 4 atoms after all, but no out-of-plane angle is found in the `intco` file. In C1 symmetry there should an out-of-plane angle coordinate.; The input works for a symmetrized Cs (planar) molecule that eliminates the out-of-plane mode. I cannot track it down further for now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1924#issuecomment-641876079:34,Abort,Abort,34,https://psicode.org,https://github.com/psi4/psi4/issues/1924#issuecomment-641876079,1,['Abort'],['Abort']
Safety,I am not really sure about all the LIBINT commands as I try to avoid dealing with the integral routines. I typically just pass a --max-am-eri=7 to my setup script so I can compile with higher angular momentum.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/180#issuecomment-139112245:63,avoid,avoid,63,https://psicode.org,https://github.com/psi4/psi4/issues/180#issuecomment-139112245,1,['avoid'],['avoid']
Safety,"I believe I know exactly what you have experienced, please correct me if I am wrong. . It is easy to come to the conclusion that buf4_init is like a constructor. Leading to the conclusion that when you pass a `dpdbuf4` to the `buf4_init` function you get a brand new instance of a class with data initialized to zero. However these are not objects in a proper OOP sense, and for that reason the when/why of data moving into `buffer->matrix` can be confusing. The comments here should have some warning that the data that *will be* pointed to by`buffer->matrix`, will only be ""blank"" if the tensor that this (`filenumber`, `label`) combination refers to does not exist. Exist here has a very broad scope since you may be referring to an entry in a file which was written by some other module, and often it is up to the programmer to know ""This quantity was written by module A, and it is safe for me to assume that it will be on disk when the code I am writing in module B will run because I made sure that module A runs before module B in the driver"". If you expect/want a tensor to be zero-ed out you should always do that explicitly when manipulating the data. This detail is easy to overlook since common operations using the `contractXXX` methods may be doing that without you realizing it. For example by setting the pre-factor on the target to zero. . There are plans in the works for a fairly major overhaul of libDPD to address various problems, one being that the interface is very cumbersome. Hopefully those efforts will make it much easier to get comfortable writing code that uses DPD.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267204006:887,safe,safe,887,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267204006,1,['safe'],['safe']
Safety,"I believe this PR fixes the bug in #976 correctly, without adverse side effects (famous last words). Does the overall charge (from the charge/multiplicity entries) affect `Z` values of the component atoms? What happens when one would - perhaps foolishly - try to do a ""frozen core"" `Li^2+` calculation?. However, I am wondering whether our approach to core freezing is perhaps a bit simplistic: a point was raised on the forums that one might want to be able to automatically detect when the valence shell is empty (eg. alkali metal cations), and then perhaps unfreeze the previous shell. Similarly, some other QM packages allow freezing up to `N-th` previous rare gas shell (the current behaviour is `N=1`).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/978#issuecomment-385869940:476,detect,detect,476,https://psicode.org,https://github.com/psi4/psi4/pull/978#issuecomment-385869940,2,['detect'],['detect']
Safety,"I bet this is an issue with mismatched `new`/`malloc` and `free`/`delete` in the legacy parts of the code. The newer code uses smart pointers to avoid this. The mismatched free and deletes can be tracked down using valgrind, which will also help to identify where the largest leaks are. Anybody who tackles this should consider replacing the various explicit allocations with smart pointers to avoid this mess. I'll take a pass through when I get chance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1532#issuecomment-463195111:145,avoid,avoid,145,https://psicode.org,https://github.com/psi4/psi4/issues/1532#issuecomment-463195111,2,['avoid'],['avoid']
Safety,"I bet you're using a broken version of OpenBLAS. Funny things are prone to happen if you call a non-OpenMP version of the library within OpenMP parallel code. This is why I don't like conda. There's no quality in the packages. Even though I filed a bug months ago, the OpenBLAS package still hasn't been compiled with runtime cpu detection.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-387067351:330,detect,detection,330,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-387067351,1,['detect'],['detection']
Safety,"I can confirm @robertodr's error. But it does away with CMake 3.3 (even though I can't see what the change was from the [release notes](https://cmake.org/cmake/help/v3.7/release/3.3.html)). I've sort of been wanting 3.3 because that detects the HDF5 version number, and I, at least, am susceptible to mixed 1.8.16 and 1.8.17 compilations, which the build system can now avoid. So shall we bump again?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281106134:233,detect,detects,233,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281106134,2,"['avoid', 'detect']","['avoid', 'detects']"
Safety,"I can confirm it on other relatively new Intel processors. Didn't try on my ancient AMD's, but I think we can safely assume it's Psi4 and not some hardware quirk.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1366#issuecomment-441168130:110,safe,safely,110,https://psicode.org,https://github.com/psi4/psi4/issues/1366#issuecomment-441168130,1,['safe'],['safely']
Safety,"I can confirm that I can now build a freshly checked-out tree without needing to edit anything. (I did have to use -DOpenMP_LIBRARY_DIRS to point at the Intel version of libiomp5.so.). I did get:. `No such TARGET ""OpenMP::OpenMP_C""` and `No such TARGET ""OpenMP::OpenMP_Fortran""`. in the cmake output but it built and (the few tests before I killed it) ran fine. As a further test, I've also tried enabling lots of other optional bits (ambit, CheMPS2, dkh, libefp, simint, gdma, PCMSolver, and snsmp2) to check whether the fortran error caused any issues with them. It looks like everything builds apart from ambit (which looks like it was only just re-enabled and so probably needs tweaking somewhere). Building ambit bails out with the same lack of MathOpenMP that I was seeing before #1053:. ```; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=C;CXX;Fortran, C/CXX/Fortran=GNU/GNU/; -- Found TargetOpenMP: 1 ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /var/tmp/build/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:108 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /var/tmp/build/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:44 (find_dependency); cmake/FindTargetLAPACK.cmake:30 (find_package); CMakeLists.txt:90 (find_package). -- Configuring incomplete, errors occurred!; See also ""/var/tmp/build/psi4/objdir/external/upstream/ambit/ambit_external-prefix/src/ambit_external-build/CMakeFiles/CMakeOutput.log"".; See also ""/var/tmp/build/psi4/objdir/external/upstream/ambit/ambit_external-prefix/src/ambit_external-build/CMakeFiles/CMakeError.log"".; external/upstream/ambit/CMakeFiles/ambit_external.dir/bu",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400326280:802,Detect,Detecting,802,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400326280,1,['Detect'],['Detecting']
Safety,"I can now finally explain why this bug is happening:; Assume you're cloning a ZMAT atom. [This line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/coordentry.h#L372) I added in #1108 enforces that if ZMAT coordinates were computed for the parent, they be computed for the clone atom. When giving a ZMAT atom coordinates in space, the reference atoms need to already have coordinates in space computed. Psi checks this, naturally enough, with`CoordEntry.computed_` (via a getter). Because of that line in #1108, `computed_` will always be set correctly for ZMAT atoms, so if you only ever use ZMAT atoms, all is well. However, there is no mechanism in place to compute coordinates for Cartesians as well, so those are listed as not computed when Psi checks `computed_`. The fix seems clear enough to me: add a `compute` call in `CartesianEntry::clone` to mirror the one in `ZMatrixEntry::clone`. Because changes in `molecule` can have wide-reaching repercussions, I'll hold off on testing the fix until @loriab is done fixing the full test suite, so I can use it to safety check this PR. And with that realization, I am quite hopeful to get this in Psi 1.3 after all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1379#issuecomment-448234589:1083,safe,safety,1083,https://psicode.org,https://github.com/psi4/psi4/pull/1379#issuecomment-448234589,2,['safe'],['safety']
Safety,I can:; ```; (psi4-pbe_xtpl) kraus@dorje:~/psi4/i2309::psi4 -n 1 input.dat ; corrupted size vs. prev_size; Aborted (core dumped); ```; [coredump.txt](https://github.com/psi4/psi4/files/7313127/coredump.txt); [bt.txt](https://github.com/psi4/psi4/files/7313137/bt.txt),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2309#issuecomment-938891510:107,Abort,Aborted,107,https://psicode.org,https://github.com/psi4/psi4/issues/2309#issuecomment-938891510,1,['Abort'],['Aborted']
Safety,"I cannot install psi4 v1.8 from conda. I get the following error. I'm on Ubuntu 22.04. Is this a known issue? Workarounds?. ```sh; ❯ conda create --name psi4-2 --channel conda-forge 'psi4==1.8' 35s  base; Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: | ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Package qcengine conflicts for:; psi4==1.8 -> qcengine[version='>=0.26.0,<0.27.0a0']; Package libint conflicts for:; psi4==1.8 -> libint=2.7.3dev1; Package _openmp_mutex conflicts for:; psi4==1.8 -> _openmp_mutex[version='*,>=4.5',build=*_llvm]; Package python_abi conflicts for:; psi4==1.8 -> python_abi[version='3.10.*|3.11.*|3.8.*|3.9.*',build='*_cp311|*_cp310|*_cp38|*_cp39']; Package libxc-c conflicts for:; psi4==1.8 -> libxc-c[version='>=6.1.0,<7.0a0',build=cpu_*]; Package qcelemental conflicts for:; psi4==1.8 -> qcelemental[version='>=0.25.1,<0.26.0a0']; Package python conflicts for:; psi4==1.8 -> python[version='>=3.10,<3.11.0a0|>=3.11,<3.12.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; Package pytest conflicts for:; psi4==1.8 -> pytest[version='>=7.0.1']; Package pyddx conflicts for:; psi4==1.8 -> pyddx[version='>=0.4.1']; Package pymdi conflicts for:; psi4==1.8 -> pymdi[version='>=1.2']; Package mkl conflicts for:; psi4==1.8 -> mkl[version='>=2022.2.1,<2023.0a0']; Package dkh conflicts for:; psi4==1.8 -> dkh[version='>=1.2,<1.3.0a0']; Package adcc conflicts for:; psi4==1.8 -> adcc[version='>=0.15.16']; Package networkx conflicts for:; psi4==1.8 -> networkx; Package numpy conflicts for:; psi4==1.8 -> numpy; Package libblas conflicts for:; psi4==1.8 -> libblas=[build=*mkl]; Package pybind11-abi conflicts for:; psi4==1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1697915972:550,abort,abort,550,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1697915972,1,['abort'],['abort']
Safety,"I compiled psi4, got coffee, and cmake decided it was time to recompile from scratch in case someone ninja edited my build. Cmake always has your back. . -Daniel Smith; Sent from my iPhone. . > On Apr 18, 2016, at 19:16, Lori A. Burns notifications@github.com wrote:; > ; > It would be valuable to developers, nightly builds, and CI testing if libint could be compiled once, then linked in as needed, like we can do for Boost. Much developer anger when CMake spontaneously decides the integrals need recompiling could be soothed! We could test molecules larger than He with density-fitted quad-zeta! The next NSF green initiative could applaud our energy savings!; > ; > Who dares to decouple libint from our build system such that it could become a detectable ExternalProject_Add CMake module? I think we need to be able to pass in MAX_AM, and it would be nice to have it build both static and shared libraries.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/355#issuecomment-211638331:750,detect,detectable,750,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-211638331,1,['detect'],['detectable']
Safety,"I compiled this PR with clang, ran `gibbs`, and still got the exact same error as Travis reports. ```; Structure for next step:; Cartesian Geometry (in Angstrom); C 0.0000000000 0.0000000000 0.0000000000; H 0.0000000000 0.8836649185 -0.6248454599; H 0.8836649185 0.0000000000 0.6248454599; H -0.8836649185 0.0000000000 0.6248454599; H 0.0000000000 -0.8836649185 -0.6248454599; ; Fatal Error: User specified point group (C2v(Z)) is not a subgroup of the highest detected point group (Cs(Z)). If this is because the symmetry increased, try to start the calculation again from the last geometry, after checking any symmetry-dependent input, such as DOCC.; ```. This problem is not specific to gcc compilers, and it looks to be a bug in finding the highest point group. I'm puzzled how the original test didn't run into this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-449682307:461,detect,detected,461,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-449682307,1,['detect'],['detected']
Safety,I consider that aspect of 3.6 very interesting. We wouldn't have to manually add `-std=c++11` and could avoid a repeated compiler warning about overwriting `-std=c++11` by ~`-std=gnuc++11` when cmake _is_ >=3.6 . But 3.6 is quite a leap just for our convenience.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281112355:104,avoid,avoid,104,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281112355,1,['avoid'],['avoid']
Safety,"I didn't find the right fedora build log yesterday, so if it's online and you want a minimal patch, I'd appreciate a link. But, if you don't mind a heavy patch, the below for external/upstream/qcelemental/CMakeLists.txt worked fine locally for me just now. That is, psi4 (master) configured, _didn't_ build qcel, and detected it fine at runtime. ```; #if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); # include(FindPythonModule); # find_python_module(qcelemental ATLEAST 0.24.0 QUIET); #endif(); #; #if(${qcelemental_FOUND}); # message(STATUS ""${Cyan}Found qcelemental${ColourReset}: ${PY_qcelemental} (found version ${qcelemental_VERSION})""); add_library(qcelemental_external INTERFACE) # dummy; #; #else(); # if(${CMAKE_INSIST_FIND_PACKAGE_qcelemental}); # message(FATAL_ERROR ""Suitable qcelemental could not be externally located as user insists""); # endif(); #; # include(ExternalProject); # message(STATUS ""Suitable qcelemental could not be located, ${Magenta}Building qcelemental${ColourReset} instead.""); #; # file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib); #; # ExternalProject_Add(qcelemental_external; # BUILD_ALWAYS 1; # URL https://github.com/MolSSI/QCElemental/archive/v0.25.1.tar.gz; # CONFIGURE_COMMAND """"; # UPDATE_COMMAND """"; # BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; # BUILD_IN_SOURCE 1; # INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; # --record=record.txt; # --single-version-externally-managed; # --install-lib=${_install_lib}); #endif(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967:317,detect,detected,317,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967,1,['detect'],['detected']
Safety,"I didn't know about the molecule member, but I vote that we go with the algorithm that assumes nothing about the orientation. We don't use symmetry unless the molecule is in the standard orientation, but I still think it's best to be safe. Especially when that safety comes without any extra computational cost. I think you're right about having a central location to handle this for gradients, hessians, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/298#issuecomment-191950504:234,safe,safe,234,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191950504,2,['safe'],"['safe', 'safety']"
Safety,I don't have access any more to large memory systems and I haven't found the time to look at more recent version of PSI4. Yet the concern remains: you want to avoid that a system starts swapping.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/424#issuecomment-274321046:159,avoid,avoid,159,https://psicode.org,https://github.com/psi4/psi4/issues/424#issuecomment-274321046,1,['avoid'],['avoid']
Safety,"I don't like the error message.; 1. ""nuclear fusion"" makes me think of the process that happens in a reactor, and ""near nuclear fusion"" is confusing. Please reword.; 2. This function should have no reference to symmetry detection tolerance. It's more abstract than that.; 3. There should be a comma between the words ""error"" and ""please.""; 4. I do not approve the ""please open an issue"" error message here. There are many possible features somebody could ask for Psi, and developer time is very limited. I read this message as promising to give ""turn error into warning"" priority for development if anybody requests. That's not a promise I want to fulfill when I'm not even convinced that ""turn error into warning"" is a good idea. I would much prefer removing that part of the error message entirely and leaving it to the user to post a feature request _without_ special encouragement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547:220,detect,detection,220,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068171547,1,['detect'],['detection']
Safety,"I had a bit of time to work on Windows build. Current status of dependencies:; - *libint*: with some hacking (https://github.com/raimis/libint/tree/win) I have manged to build it (https://ci.appveyor.com/project/raimis/libint). There are no tests, so high probability of not detected issues.; - *libxc*: with some more hacking (https://github.com/raimis/libxc/tree/win) I have to managed to build it too (https://ci.appveyor.com/project/raimis/libxc).; - *gau2grid*: it need just a few changes (https://github.com/raimis/gau2grid/tree/win) to compile (https://ci.appveyor.com/project/raimis/gau2grid). Though I have not managed to make the test to work. It seems, `ctypes` behave differently on Windows. Finally, I have reached a point to stat building *Psi4* (https://github.com/raimis/psi4/tree/win) and got stuck with MKL configuration and other `cmake` related problems (https://ci.appveyor.com/project/raimis/psi4). @loriab, for Linux builds, do you use MKL from `conda` or install it manually?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-390236786:275,detect,detected,275,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-390236786,1,['detect'],['detected']
Safety,"I had to write some code recently using the Dimension object and I was thinking that it would be useful to support initialization from a list, for example:; ```; Dimension orbs({3,0,1,1}); ```; This is particularly useful when working with Slices to avoid doing this:; ```; auto start_dim = psi::Dimension(1);; start_dim[0] = start;; ```; I think it might already be supported on the python side. Another useful thing would be to have direct access to the underlying std::vector object, or const iterators for it. That way, one could use Dimensions in loops more naturally. I was wondering, since you are modifying the class, would you be able to implement these changes as well?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2953#issuecomment-1808185903:250,avoid,avoid,250,https://psicode.org,https://github.com/psi4/psi4/pull/2953#issuecomment-1808185903,1,['avoid'],['avoid']
Safety,"I hadn't seen exactly this manifestation of the BLAS issue, but yes, it's why I was strongly advising against statically linking MKL in the other thread. . * ""MKL Trio"" := `mkl_intel_lp64` `mkl_intel_thread` `mkl_core`; * ""MKL RT"" := `libmkl_rt`; * if the Psi4 CMake can find MKL RT, that's what it'll link to for BLAS rather than MKL trio; * current NumPy from defaults conda channel links against MKL RT. (until recently, it linked against MKL Trio, which was why we sometimes advised getting numpy from the Intel conda channel, which has long linked against RT); * so it's safe to get psi4 & numpy via `conda install psi4 -c psi4/label/dev` because that'll pull numpy from defaults and psi4 from psi4 and both have the same BLAS linking. (may want to `conda update numpy` to make sure your numpy is the recent build.) can always `ldd` them to inspect.; * for the same reasons as above, it's safe to build psi4 from source against the conda `psi4-dev` package. That package provides MKL from conda and instructs psi4 cmake to use MKL RT. It also provides NumPy which (so long as recent build) uses MKL RT.; * unless you want to build NumPy yourself, the numpy you have pretty much determines how you must build or use psi4. So it's dangerous to:; * use statically linked MKL in psi4 and use NumPy with dynamically linked MKL; * use system BLAS like Apple's Accelerate with psi4 and use NumPy with dynamically linked MKL; * use MKL RT with psi4 and use NumPy with MKL trio. Since PPA probably doesn't have license to distribute MKL, it's likely that Psi4 w/MKL RT plus their NumPy is also dangerous. What are they linked against, if you can find out easily through `ldd` (have to burrow pretty deep into numpy to find a `.so`)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1007#issuecomment-387922677:576,safe,safe,576,https://psicode.org,https://github.com/psi4/psi4/issues/1007#issuecomment-387922677,2,['safe'],['safe']
Safety,"I have been meaning to mention this for a while actually. . If we require c++11, why is there an option in setup to disable c++11 support? Also, why can CMake revert to the older standard?. with intell 13.1, I will see this during the configure step: ; `-- Buggy compiler support for C++11. Using Older Standard.` . If I edit this line in CMakeCache.txt; `CMAKE_CXX_FLAGS:STRING=-DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=gnu++98`; to `-std=c++11` before I make I can build successfully, but if I don't I will get the same errors mentioned above. . CMake should produce an error if C++11 support is not detected, fail at the configuration step, and report why to the user. I think the current behavior is very confusing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/188#issuecomment-156910025:620,detect,detected,620,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-156910025,1,['detect'],['detected']
Safety,"I have fixed the code that connects the initial, separated fragments in; optking. The CH3F case now runs fine. The code was very much in error. I; will submit the correction whenever the main psi4 trunk runs again. At the; moment, the python there seems broken. On Sun, Mar 13, 2016 at 2:52 PM, Rollin King rking@bethel.edu wrote:. > The current code detected 4 different fragments for the extended CH3F.; > Then it tried to connect them. It really should have been able to do so.; > I don't see why it didn't work, and I'm looking for a bug.; > ; > On Sun, Mar 13, 2016 at 2:00 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Certainly the flexibility of the optimizer oughtn't be reduced. In the; > > absence of fixed/frozen keywords or user supplied/edited intco (do you need; > > a keyword to signal do-read-intco instead of accepting any it finds?), it's; > > probably reasonable to assume a full optimization is desired. Maybe grep; > > '~' needs to catch a gradient.rms(), too, next to the optking-active rms; > > gradient.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/310#issuecomment-196021110.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196087369:351,detect,detected,351,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196087369,1,['detect'],['detected']
Safety,"I have made almost all PRs for easy/trivial code changes, which is ~80% of overall. For further progress, the easiest way is to use *Boost* library for:; - User/system time in `fnocc`, `libciomr`, and `libqt`; - File operations in `libfilesystem`; - Stacktrace printing in `libpsi4utils`. Actually, I'm a bit surprised that *Psi4* is not yet depended on *Boost*. What is *Psi4* policy on the new dependencies?. So there are two options:; 1. Use *Boost* for these cross-platform functionalities.; 2. Make a conditional compilation, so *Boost* dependency is only *Windows*. This will increase code complexity, but will avoid the new dependency on *Linux*.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-403818314:617,avoid,avoid,617,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-403818314,1,['avoid'],['avoid']
Safety,"I have no chance to run our input right now. But I can predict that it is due to the misusage of freeze-core true option. Due to that option DFOCC expects some frozen core orbitals but there is not any in reality. If you delete the freeze- core true option, then it will work. @wardence",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/893#issuecomment-358038326:55,predict,predict,55,https://psicode.org,https://github.com/psi4/psi4/issues/893#issuecomment-358038326,1,['predict'],['predict']
Safety,"I have seen something about mkl and Windows and 2018/2019 compatibility recently but of course can't find it now. I don't recall it as alarming, so if this PR has worked in practice, LGTM. Has @raimis definitely lifted the ""Don't merge"" directive (too many slack messages flying around)? Avoiding checkmark until confirmed so we're not merge-happy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1408#issuecomment-451223973:288,Avoid,Avoiding,288,https://psicode.org,https://github.com/psi4/psi4/pull/1408#issuecomment-451223973,1,['Avoid'],['Avoiding']
Safety,"I haven't encountered this behavior myself, but it does sound faulty. Since there's the binary as fallback and more and more pieces are using c++11, I don't think we're avoiding it anymore. @robertodr was talking about the feasibility of using some advanced cmake features to handle this problem more logically (https://cmake.org/cmake/help/v3.1/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.html). They will require bumping our required cmake version, but, for developers, that's not so bad.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/188#issuecomment-157058625:169,avoid,avoiding,169,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-157058625,1,['avoid'],['avoiding']
Safety,"I haven't seen any articles advocating the new workflow, but will let you know if I stumble upon them. I just skimmed the link you sent, and it looks like it raises some good points. My motivation for pushing the PR-based workflow is to make it much easier to validate (via Travis) contributions. By finding issues at the PR stage, we can avoid problems entering the codebase; pushing the new CC transform code as a PR would have prevented that simple missing ""return"" statement from affecting any users, for example. That turned out to be a non-issue, but it serves as a nice example of how apparently good code can still introduce problems that can be difficult to hunt down without our new workflow. The PR mechanism just serves to utilize the contributor's fork as a staging area for validation, which takes a lot of responsibility off the shoulders of the maintainer that clicks that ""accept"" button. A very nice side effect of all of this, is that is brings us in line with most projects on GH, and lowers the barrier to getting contributions from outside the usual suspects.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/254#issuecomment-187310350:339,avoid,avoid,339,https://psicode.org,https://github.com/psi4/psi4/pull/254#issuecomment-187310350,2,['avoid'],['avoid']
Safety,"I installed anaconda and psi4 independently. does the code below help?. ```; (base) C:\Users\erikc>where conda; C:\Users\erikc\anaconda3\Library\bin\conda.bat; C:\Users\erikc\anaconda3\Scripts\conda.exe; C:\Users\erikc\psi4conda\condabin\conda.bat; C:\Users\erikc\psi4conda\Scripts\conda.exe. (base) C:\Users\erikc>where python; C:\Users\erikc\anaconda3\python.exe. (base) C:\Users\erikc>where psi4; C:\Users\erikc\psi4conda\Scripts\psi4.exe. (base) C:\Users\erikc>conda create -n psi4env psi4 -c psi4/label/dev; Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: -; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError:. (base) C:\Users\erikc>; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875226101:856,abort,abort,856,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875226101,1,['abort'],['abort']
Safety,I just fixed the issue with xrange and the frozen MOs. Will go over some of @dgasmith's comments soon. I just realized I could access the spaces from ciwfn instead of mcscf_obj. I'll remove the python bindings that I added since they seem redundant now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-304475473:239,redund,redundant,239,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304475473,1,['redund'],['redundant']
Safety,"I just tried to recompile from scratch as well, and got the same error:. Scanning dependencies of target versioned_code; [ 98%] Building CXX object; src/bin/psi4/CMakeFiles/versioned_code.dir/version.cc.o; [ 98%] Building CXX object; src/bin/psi4/CMakeFiles/versioned_code.dir/python.cc.o; /home/seba/psi4public/src/bin/psi4/python.cc(764): error: identifier; ""PSI_VERSION"" is undefined; return PSI_VERSION;; ^. /home/seba/psi4public/src/bin/psi4/python.cc(1217): warning #1011: missing; return statement at end of non-void function ""py_psi_get_normalmodes""; }; ^. compilation aborted for /home/seba/psi4public/src/bin/psi4/python.cc (code; 2); make[2]: **\* [src/bin/psi4/CMakeFiles/versioned_code.dir/python.cc.o] Error; 2; make[1]: **\* [src/bin/psi4/CMakeFiles/versioned_code.dir/all] Error 2; make: **\* [all] Error 2. 2015-05-26 10:52 GMT+02:00 wpoely86 notifications@github.com:. > The gitversion.h does #undef PSI_VERSION which makes the file; > src/bin/psi4/python.cc fail to build as it needs a PSI_VERSION.; > ; > What is the idea here? Why no PSI_VERSION?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/100. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/100#issuecomment-105456704:577,abort,aborted,577,https://psicode.org,https://github.com/psi4/psi4/issues/100#issuecomment-105456704,1,['abort'],['aborted']
Safety,"I know next to nothing about nbody, I just did a quick keyword search to see if there is anything optking could set and didn't find anything. I'll also confess to not entirely following the thread so this could be completely unhelpful. optking gave up all non schema communication so in order for us to ""easily"" set `return_total_data` it would either need to be:. 1. A keyword we / the user can set in an `AtomicInput`; 2. An optional parameter in `psi4.run_qcschema()` - optking would likely force the user to use the `optking -> psi4` path instead of the `optking -> qcengine -> psi4` path to make sure this gets set correctly. Otherwise optking would either need to:; 1. go back to making gradient calls directly - at least if needed; 2. Make the user go through `psi4.optimize()` where `gradient(..., bsse_type=[args])` might get called explicitly - I don't know what is envisioned for this. I would hope a user would figure out that the energy is several orders of magnitude off, but regardless of the solution, the optimizer could certainly do a sanity check of the energy after the first step. I don't think an IE is ever going to be large enough to be mistaken for the total electronic energy. Optking could check the magnitude of the energy, direct the user to the correct way of performing the optimization and quit so as not to waste computer time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-870050704:1053,sanity check,sanity check,1053,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-870050704,1,['sanity check'],['sanity check']
Safety,"I leave most of the environment variable stuff for PSI4 in the hands of conda. I have a modified/compiled version of PSI4 on just one of my machines, but PSI4 crashes on all of them for one electron properties. I saw the crash while I was running a testing script, so I know that it printed correct results for HF, PBE0, gradient, and PBE0+point-charges calculations. The only test of mine that failed involved recovering charges from a QM calculation. ```; [input file]. set_num_threads(8); memory 256 mb; set reference rhf; set basis 6-31G*; set guess sad; set scf_type df. psi4_io.set_specific_path(32,'./'); psi4_io.set_specific_retention(32,True); psi4_io.set_specific_path(180,'./'); psi4_io.set_specific_retention(180,True). molecule LICHM_0 {; 0 1; O 0.87273600000000 0.00000000000000 -1.2467539999999; H 0.28827300000000 0.00000000000000 -2.0108530000000; H 0.28827300000000 0.00000000000000 -0.4826550000000; symmetry c1; no_reorient; no_com; }. Chrgfield = QMMM(); Chrgfield.extern.addCharge(-1.3062266666666,-0.6489658001839,0.00000001660701,1.10730418839000); Chrgfield.extern.addCharge(0.35180666666666,-0.7534241883900,-0.0000000536004,1.26252019981607); Chrgfield.extern.addCharge(0.86636000000000,-0.7788030060160,0.13229430272998,1.13268305579077); Chrgfield.extern.addCharge(-1.3062266666666,-0.9086401998160,-0.0000000166070,1.15806181160999); Chrgfield.extern.addCharge(0.10176666666666,-0.8041818116099,0.00000005360047,1.00284580018392); Chrgfield.extern.addCharge(0.86636000000000,-0.7788029939839,-0.1322943027299,1.13268294420922); Chrgfield.extern.addCharge(0.51284666666666,-0.7965191998160,0.76409898339298,1.73166981160999); Chrgfield.extern.addCharge(-1.7440911751517,-0.6778443974775,0.64528811991560,1.64918444879139); Chrgfield.extern.addCharge(0.85696271562354,-0.6894742127334,0.82228626070531,1.58968679653742); Chrgfield.extern.addCharge(0.51284666666666,-0.5368448001839,0.76409901660701,1.68091218839000); Chrgfield.extern.addCharge(-0.5989622639259,-0.65551960",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182660528:411,recover,recovering,411,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528,1,['recover'],['recovering']
Safety,I made a change that should have no effect except poking the CI. I want to check that it now pulls v7 from c-f and then fails the cmake detection b/c it wants v6.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3231#issuecomment-2408284190:136,detect,detection,136,https://psicode.org,https://github.com/psi4/psi4/pull/3231#issuecomment-2408284190,1,['detect'],['detection']
Safety,"I ran ```conda create -n <p4env> psi4 -c psi4/label/dev -c conda-forge``` and it worked. makes sense since rdkit uses conda-forge as well. I then ran ```psi4 --test``` and here are the results. does it matter some were skipped/ failed?. ```; (psi4env) C:\Users\erikc>psi4 --test; =========================================================================== test session starts ===========================================================================; platform win32 -- Python 3.8.10, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- C:\Users\erikc\psi4conda\envs\psi4env\python.exe; cachedir: .pytest_cache; rootdir: C:\Users\erikc; collected 3356 items / 3301 deselected / 55 selected. psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enable tests.) [ 1%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker1 PASSED [ 3%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker2 PASSED [ 5%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED (Not detecting module mrcc. Install package if necessary to enable tests.) [ 7%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to enable t...) [ 9%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:773,detect,detecting,773,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,"I really like the way this turned out, thanks for the example. It looks like we should probably go back and look into the timing print outs a bit. For example:. ```; | | DIISManager::extrapolate: 0.00u 0.00s 0.000530w 10 calls; | | | DIISManager::extrapolate: bMatrix setup: 0.00u 0.00s 0.000085w 10 calls; ```. Since `bMatrix setup` is only called with `extrapolate` we can safely shorten this text so that we do not skew the columns. This can be done in later passes however. Did the threading issue get resolved?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/743#issuecomment-312718181:375,safe,safely,375,https://psicode.org,https://github.com/psi4/psi4/pull/743#issuecomment-312718181,1,['safe'],['safely']
Safety,"I rebased the PR. In addition to eliminating the redundant argument, I did some `const` marking.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2525#issuecomment-1087975547:49,redund,redundant,49,https://psicode.org,https://github.com/psi4/psi4/pull/2525#issuecomment-1087975547,1,['redund'],['redundant']
Safety,"I remove these two channels. But after running; `conda create --override-channels -n p4env psi4 python=3.9 -c psi4 -c defaults`. It remains the same...; ```. Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: | ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; python=3.9; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; psi4 -> mkl-service[version='>=2.3.0,<3.0a0'] -> python[version='>=3.10,<3.11.0a0|>=3.7|>=3.6|>=3.5|>=3.6.0|>=3.6,<3.7']The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2390#issuecomment-1005448113:502,abort,abort,502,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1005448113,1,['abort'],['abort']
Safety,"I see the same issue with Psi4 installed on Ubuntu 16.04.1 LTS, compiled with gcc 5.4.0. It is also using ATLAS for BLAS/LAPACK, and my build is a debug build. The following test cases fail:; 77 - cdomp2-2 (Failed); 125 - dfmp2-grad2 (Failed); 127 - dfmp2-grad4 (Failed); 129 - dfomp2-2 (Failed); 131 - dfomp2-4 (Failed); 133 - dfomp2-grad2 (Failed). I'll update as I switch to another BLAS/LAPACK.; Other test cases fail but they might be related to different problems:; 188 - mints9 (Failed); 268 - pywrap-checkrun-rhf (Failed); 269 - pywrap-checkrun-rohf (Failed); 270 - pywrap-checkrun-uhf (Failed); 314 - fsapt1 (Timeout); 321 - python-energy (Failed); 322 - python-curve (Failed); 323 - python-pubchem (Failed); 324 - json-energy (Failed); 325 - json-gradient (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391#issuecomment-277545780:618,Timeout,Timeout,618,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-277545780,1,['Timeout'],['Timeout']
Safety,"I started in on this last night. The scheme for generating a Makefile from from a locally compiled psi4 exe can stay as it is, I think. Though we should make it so that it can be generated from an installed copy alone. Key missing component of that is that the main `$psi4-clone-dir/includes/*h` header files don't get installed at the moment. The `$psi4-clone-dir/src/*/*/*.h` files do. Do you think the lot should go behind a namespace like `$psi4-install-dir/includes/psi4/psifiles.h` (or `psi`)? Boost headers may also need to be installed. The other part is to make it so that people can check out plugins from the conda exe. I suppose the proper way to do this would be to have plugins under CMake control so that it would go off and detect their compiler/math situation. But instead I was thinking of sticking with Makefile and forcing the build environment– just setting it up so that generated plugins are ready to be compiled with conda gcc and math libs. The below is a start. ```; # Flags that were used to compile Psi4.; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug # set by $PREFIX; CXX = ${MCONDA}/bin/g++; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. How does that seem for a plan? @jturney, if you'd like to work on this, that'd be great. Or if you want me to do the conda parts, I'd be glad to do so.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172235413:740,detect,detect,740,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172235413,1,['detect'],['detect']
Safety,"I still get an error entering 'conda create -n p4env python=3.8 psi4 -c psi4/label/dev' into anaconda prompt. does my computer being a windows have anything to do with this failed installation?. `(base) C:\Users\erikc>conda create -n p4env python=3.8 psi4 -c psi4/label/dev; WARNING: A directory already exists at the target location 'C:\Users\erikc\anaconda3\envs\p4env'; but it is not a conda environment.; Continue creating environment (y/[n])? y. Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: -; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> msgpack-python -> python[version='>=2.7,<2.8.0a0|>=3.6,<3.7.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0|>=3.7,<3.8.0a0|>=3.5,<3.6.0a0|>=3.6|>=3.5|>=3.6.0']; python=3.8; psi4 -> python=3.8`. I would appreciate any help to get psi4 up and running. thanks",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1979#issuecomment-874806341:794,abort,abort,794,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-874806341,1,['abort'],['abort']
Safety,"I strongly recommend not doing that as you can get wrong answers and/or lose all threading capacity. . To get around the mkl-on-nodes problem, I advise installing the psi4-dev conda package that provides all of psi4's dependencies, incl. numpy and mkl, then building against that. ```; cd {top-level-psi4-dir}; conda create -n p4dev35 python=3.5 psi4-dev -c psi4/label/dev -c psi4; conda activate p4dev35; `psi4-path-advisor --intel`; # cmake configures; cd objdir && make -j`getconf _NPROCESSORS_ONLN`; make install; ```; Is there any reason the psi4 conda package itself isn't suitable? If size is an issue, then mkl is the problem, and it doesn't do to just fix mkl for psi4 b/c other pieces (numpy, chemps2) use it, too. I'm working on an openblas build. If you're resolved on statically linking mkl, short of probing the math detection, I'd consult the mkl-link-advisor and pass the resulting advice to psi4 cmake via example (G.) of http://psicode.org/psi4manual/master/build_planning.html#cmake-lapack . EDIT: `conda install` --> `conda create` on 2nd line of snippet",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386422281:831,detect,detection,831,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386422281,1,['detect'],['detection']
Safety,"I think ""symmetry tolerant"" is an odd description to apply to a method that; takes a symmetrical input and produces an asymmetrical output (e.g., the; DF-SCF gradient generating asymmetrical noise in the 9th decimal). If; numerical approximation is introducing the asymmetry, isn't the; symmetrization, if done evenly, likely to improve the accuracy of the; result, besides avoiding the risk of collateral damage? I appreciate; symmetrizing other types of objects may not be as simple. On Thu, Mar 3, 2016 at 2:47 PM, Justin Turney notifications@github.com; wrote:. > Yeah, the one in molecule used to be like the one in deriv when I; > originally wrote it 5 years ago. Then @psi-rking; > https://github.com/psi-rking expanded on it to assume non-standard; > orientation. A centralized one sounds good since I just found another on in; > matrix.cc.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/298#issuecomment-191955685.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/298#issuecomment-191991936:374,avoid,avoiding,374,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191991936,4,"['avoid', 'risk']","['avoiding', 'risk']"
Safety,"I think an auto-update is a good idea, but will need some sanity checks. Thinking back a decade, I think the original motivation for not auto updating was to accommodate the following:; ```; molecule h2 {; H; H 1 R; }. h2.R = 0.7; ```; There were some problems caused by attempting to update in the absence of all variables, but they should be easy to overcome with the appropriate checks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/765#issuecomment-316152578:58,sanity check,sanity checks,58,https://psicode.org,https://github.com/psi4/psi4/issues/765#issuecomment-316152578,1,['sanity check'],['sanity checks']
Safety,"I think downgrade OS before trying to solve Boost problems so as to avoid wasting more time on something that's nearly gone. Need a ""Kill the Boost!"" graphic a la Disney's ""Beauty and the Beast.""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235151809:68,avoid,avoid,68,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235151809,1,['avoid'],['avoid']
Safety,"I think for a locally compiled psi4 you also have to remove the install dir, if one exists. Susi Lehtola; Sent from my phone so excuse my brevity. On 14 Feb 2019, at 3.40, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. TL;DR If conda psi4 is acting up, update libint, too: conda update libint -c psi4/label/dev. If locally compiled psi4 is acting up, trigger a partial recompile: cd objdir && rm -rf external/upstream/libint/ && make. We've been planning for a while to distribute conda psi4 with libint compiled at MAX_AM_ERI 8, not 6. I have rebuilt the libint package and now the v1.3rc1 will be the first psi4 package with extended AM. Unfortunately, both libint of different AM are not hot-swappable and AM not detectable at runtime. That is, a built psi4 is perfectly happy to link (in the ldd sense) to a libint.so that is inconsistent with fixed data dimensions in psi4 libmints, and libmints can't even throw an error for enlightenment. I could throw additional constraints on the psi4 pkg to make sure it picked the right libint build, but that would be misusing the tools a bit, would constrain things in future, and would only solve a third of the problem. I believe you can handle this transition manually with a couple commands. which libints are out there?. conda list. # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:751,detect,detectable,751,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773,1,['detect'],['detectable']
Safety,I think it is safer to replace `size_t` by `long int` because in some cases `int` may overflow. I haven't looked at the specific cases in this PR though.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1200#issuecomment-418175615:14,safe,safer,14,https://psicode.org,https://github.com/psi4/psi4/pull/1200#issuecomment-418175615,1,['safe'],['safer']
Safety,"I think it would be great if we team up on this. Math detection issue is an issue in almost every code I know and if we find a good solution, we make many people happy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537#issuecomment-264420312:54,detect,detection,54,https://psicode.org,https://github.com/psi4/psi4/issues/537#issuecomment-264420312,1,['detect'],['detection']
Safety,"I think it's slightly safer as these are evaluated left to right. It shouldn't be a problem, but good practice to be consistent throughout the whole code base to cast on the left.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1617#issuecomment-489083065:22,safe,safer,22,https://psicode.org,https://github.com/psi4/psi4/pull/1617#issuecomment-489083065,1,['safe'],['safer']
Safety,"I think present changes are okay. I missed FC case when I first wrote it, and I did not pay attention to it too much. I did not stuck to binary units. We may safely change 1024 to 1000 to make it canonical MB. @hokru @dgasmith",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1244#issuecomment-423211466:158,safe,safely,158,https://psicode.org,https://github.com/psi4/psi4/pull/1244#issuecomment-423211466,1,['safe'],['safely']
Safety,I think something's wrong with the new 1.3.0 pandas pkg minted a few hours ago. Avoiding it fixes the problem for adcc. May be simplest to add three lines to this PR: https://github.com/psi4/psi4/pull/2255/files . First line fixes the problem. Others a general update and debug line.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2251#issuecomment-883636314:80,Avoid,Avoiding,80,https://psicode.org,https://github.com/psi4/psi4/pull/2251#issuecomment-883636314,1,['Avoid'],['Avoiding']
Safety,"I think that I know where the linking against the Python library comes from. Usually when using CMake to build software, I am using the ccmake GUI and use the toggle option to show all available variables (as I usually also add compiler flags etc.). I noticed that cmake detected the correct Python interpreter (2.7.12), but it also had a variable for the Python library, which was pointing to /usr/lib64/libpython2.6.so (system Python that was installed with the operating system). In order to avoid mixing between different Python versions, I have set the CMake variable to the 2.7.12 version of the library. Maybe CMake picked it up this way and added it to the libraries that are linked. Thank you for pointing me to the tests in the samples directory. Best regards",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-275138618:271,detect,detected,271,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275138618,2,"['avoid', 'detect']","['avoid', 'detected']"
Safety,"I think that renaming is perhaps the safest solution; without namespacing these kinds of macros it's possible to run into a situation where the two codes have the same macro name that returns a different result, which would cause chaos. If you just want to get rid of the warnings (given that we know that L2 and Psi4 both have the same meaning of `INT_CART`) we could also just ensure that the L2 headers are included before Psi4 defines the macros; the `#if !defined(INT_CART)` will ensure we don't redefine the macro.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2413#issuecomment-1021327038:37,safe,safest,37,https://psicode.org,https://github.com/psi4/psi4/pull/2413#issuecomment-1021327038,1,['safe'],['safest']
Safety,"I think the desire to change the name was to reflect that it can be used for other general-purpose (_i.e._ not only evaluated at nuclei) ESP routines, such as grid properties. IIRC, those integrals are just the regular potential ints, modified to allow arbitrary centers to be provided. At one point in time they were strictly Cartesian AO only, to avoid multiple transformations (contraction should be performed with backtransformed D matrices in that case), but I'm not certain that's true anymore.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/878#issuecomment-351194994:349,avoid,avoid,349,https://psicode.org,https://github.com/psi4/psi4/pull/878#issuecomment-351194994,1,['avoid'],['avoid']
Safety,"I think the main issue is that `detci` is somehow relying on the data in `Wavefunction`, but it's not checking whether its configuration is valid. There is actually a preceding error message ; ```; (set_ras_parms): detecting 1 electrons in RAS III for irrep 0.; Some parts of DETCI assume all elec in I and II; ```; but this really should crash the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1693#issuecomment-520836143:215,detect,detecting,215,https://psicode.org,https://github.com/psi4/psi4/issues/1693#issuecomment-520836143,1,['detect'],['detecting']
Safety,"I think there's more variations and potential collisions, even within one user's environment, than can really be predicted and caught. In the inversion branch, we've started catching the gcc <4.9 error signature and printing a this-is-probably-what's-wrong message. Expanding that error catching and printing the customized path to the `link.txt` file is probably the best bet. [This](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/scripts/setenv.py) is a runtime env diagnosis script I wrote once. It didn't catch on, but it could be expanded for rpath.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252942976:113,predict,predicted,113,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252942976,1,['predict'],['predicted']
Safety,I think this would be great to do and probably doable with a bit of help from someone who has experience with Windows builds. I would (hazard) to guess the total sum of hours the Psi team has touched MSVC can be counted on a single hand.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-381701562:135,hazard,hazard,135,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-381701562,1,['hazard'],['hazard']
Safety,"I think you're correct, but I don't see that from the output of `git diff 772caf9bad7aaddc27265c8c5349be3d85f4db98 input.dat`, which reads as. ```; -scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True, der_type=1); +scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True, dertype=1); compare_values(wfn_dz.frequencies().get(0), 1809.2345729, 2, ""SCF/cc-pVDZ Frequency 1"") #TEST; compare_values(wfn_dz.frequencies().get(1), 3923.1569958, 2, ""SCF/cc-pVDZ Frequency 2"") #TEST; compare_values(wfn_dz.frequencies().get(2), 4020.1821381, 2, ""SCF/cc-pVDZ Frequency 3"") #TEST; +#; +# These lines use the analytic frequency algorithm instead, but the angular momentum is too high for; +# the Travis tests. Uncomment the next four lines if you want to test analytic frequencies and have; +# a version of psi4 compiled with sufficiently high angular momentum.; +#; +##scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True); +##compare_values(wfn_dz.frequencies().get(0), 1809.279, 2, ""SCF/cc-pVDZ Frequency 1"") #TEST; +##compare_values(wfn_dz.frequencies().get(1), 3923.138, 2, ""SCF/cc-pVDZ Frequency 2"") #TEST; +##compare_values(wfn_dz.frequencies().get(2), 4020.128, 2, ""SCF/cc-pVDZ Frequency 3"") #TEST; ```. It looks like the only (non-comment line) change was the switch from `der_type` to the correct `dertype` keyword. We only had finite difference Hessians before, so the `der_type` keyword was irrelevant. I had to correct it to avoid getting analytic Hessians to run. It doesn't look like the reference values have been changed, and in both the old and new versions the frequencies should come from finite differences.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235107538:1424,avoid,avoid,1424,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235107538,1,['avoid'],['avoid']
Safety,"I tried this, but then it is back to complaining about intel-linux being redefined in project-config.jam. This is really weird since project-config.jam has a conditional that is apparently supposed to avoid this, but it does not work for some reason. So, I solved that by adding a command to boost/CMakeLists.txt that modifies project-config.jam with sed to eliminate the redefinition of intel-linux. So I am closing this issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/196#issuecomment-170054358:201,avoid,avoid,201,https://psicode.org,https://github.com/psi4/psi4/issues/196#issuecomment-170054358,1,['avoid'],['avoid']
Safety,"I usually find their packages to be of excellent quality. Which is your bug report? I remember a lightning talk, I think, at a recent SciPy about efforts to bring openblas up to snuff. Apparently even all their internal tests (or maybe it was numpy's tests) weren't passing for a long time. I agree that runtime processor detection is a build dimension to which conda has not expanded. That's why psi uses Intel compilers to add some multiarch optimizations. But why should cpu detection affect the numerical results?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-387070709:322,detect,detection,322,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-387070709,2,['detect'],['detection']
Safety,"I was running the basis set diff-er (with mods) on these and got the summary below (black: unchanged to 8 decimals, yellow: changed, blue: new). So changes are fairly obscure except for 2zapa carbon.; <img width=""923"" alt=""Screen Shot 2021-07-23 at 10 19 12 AM"" src=""https://user-images.githubusercontent.com/2314730/126795680-fbf3104c-55f7-4b65-ac9c-18ae05c5f6b6.png"">; Magnitudes of changes seen in the next printouts. I did look into one of them (0.3945 <-- 0.39945 in 5zapa Li), and it tracked with psi's being the version 0 on BSE and the PR's being the version 1. So it's probably safe to assume this is all an upgrade. I'm with Jonathon on wanting to see what's changing.; <img width=""980"" alt=""Screen Shot 2021-07-23 at 10 17 10 AM"" src=""https://user-images.githubusercontent.com/2314730/126795684-17df1224-f2d7-4402-944e-ffed9edd4325.png"">; <img width=""1211"" alt=""Screen Shot 2021-07-23 at 10 16 48 AM"" src=""https://user-images.githubusercontent.com/2314730/126795688-24e6245e-05c9-4079-a44b-4f9bdddbb282.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2254#issuecomment-885679289:587,safe,safe,587,https://psicode.org,https://github.com/psi4/psi4/pull/2254#issuecomment-885679289,1,['safe'],['safe']
Safety,"I went through a few interpretations of your sentence before responding as if you meant ""libxc-4.4 provides list A of functionals, so if psi detects 4.4 it will enable list A and any more functionals derivable from A. libxc-4.5 provides list A+B of functionals, so if psi detects 4.5 it will additionally enable list B."" So libxc-4.4 and 4.5 (numbers made up, of course) are the ""two upstream"". It's a nice vision and likely do-able. But I think we're still in the slog toward going from 0 to 1 libxc-?.? that's directly useable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451256090:141,detect,detects,141,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451256090,2,['detect'],['detects']
Safety,"I went to the link and typed ""which psi4"" in my terminal and got a return synonymous with the path being correct, I believe (so it said the code for the path should be redundant): [If you installed the Psi4conda distribution or installed the PSI4 conda package into the main environment of an Anaconda or Miniconda distribution and added that to your [PATH](https://psicode.org/psi4manual/master/external.html#envvar-PATH), as prompted, then which psi4 likely yields condadist/bin/psi4 and the PATH setting lines below are redundant.] . which psi4; /home/emkal/psi4conda/bin/psi4. Additionally, trying the two commands suggested also had errors in syntax I believe? I also tried psi4 --psiapi which gave me the path and pythonpath; I tried copying the output in substitution of the ""PYTHONPATH"" but it didn't make a difference. [1] export PYTHONPATH <conda-env-prefix-with-psi4>/lib/python3.10/site-packages/; File ""/tmp/ipykernel_10582/3886179417.py"", line 1; export PYTHONPATH <conda-env-prefix-with-psi4>/lib/python3.10/site-packages/; ^; SyntaxError: invalid syntax. [2] sys.path.append(<same>); File ""/tmp/ipykernel_10582/3391378744.py"", line 1; sys.path.append(<same>); ^; SyntaxError: invalid syntax",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3188#issuecomment-2195298996:168,redund,redundant,168,https://psicode.org,https://github.com/psi4/psi4/issues/3188#issuecomment-2195298996,2,['redund'],['redundant']
Safety,"I'd also vote for catching and aborting with a descriptive error, as opposed to temporarily unsetting and carrying on. If the method is part-FC part-all electron, then FC shouldn't be touched in the input.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1530#issuecomment-462905555:31,abort,aborting,31,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-462905555,1,['abort'],['aborting']
Safety,"I'd hazard we need something like ; ``` } else if (options_.get_str(""RELATIVISTIC"") == ""X2C"") {; outfile->Printf("" OEINTS: Using relativistic (X2C) overlap, kinetic, and potential integrals.\n"");. if (!rel_basisset_) {; throw PSIEXCEPTION(""OEINTS: X2C requested, but relativistic basis was not set."");; } ; X2CInt x2cint;; SharedMatrix so_overlap_x2c = so_overlap();; SharedMatrix so_kinetic_x2c = so_kinetic();; SharedMatrix so_potential_x2c = so_potential();; x2cint.compute(basisset_, rel_basisset_, so_overlap_x2c, so_kinetic_x2c, so_potential_x2c);. potential_mat->add(so_potential_x2c);; } ; ```; about [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/mintshelper.cc#L1338) but that's not a literal fix. @fevangelista, is that on the right track?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1758#issuecomment-558010826:4,hazard,hazard,4,https://psicode.org,https://github.com/psi4/psi4/issues/1758#issuecomment-558010826,1,['hazard'],['hazard']
Safety,"I'd just like to point out that the `""stage""` keyword can be set to anything (not only `""deltan""`), and it's used only to name the stage within the printing script. Perhaps prepending `""CBS {GRAND_NEED[dc]['d_stage'].upper()} TOTAL ENERGY""` might be safer to avoid possible clashing / overwriting of existing energies by the user?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2034#issuecomment-803274548:250,safe,safer,250,https://psicode.org,https://github.com/psi4/psi4/pull/2034#issuecomment-803274548,2,"['avoid', 'safe']","['avoid', 'safer']"
Safety,"I'd like to a) have the structure for adding new methods b) have a few basic methods. So slightly more polished dynamic_damping and trailing_convergence methods, and possibly a method for detecting oscillations? I think that the real blockbusters will be automatic Davidson following and instability detection, however those rely on the generalized davidson solver. P.S. I've also been playing around with inter-reference castups, which seem to be an effective way to get a quick guess for ROHF cases with up to moderate spin contamination (i.e. spin contamination metric of 1.0 or less). Not quite sure how or if that should be incorporated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1135#issuecomment-414476404:188,detect,detecting,188,https://psicode.org,https://github.com/psi4/psi4/pull/1135#issuecomment-414476404,2,['detect'],"['detecting', 'detection']"
Safety,"I'd like to team up on this, but Psi4 is trying to get back into the science business from having been in the infrastructure business for much of the past year, so our rewriting energies are depleted. On the monolithic vs. modular, on the whole I agree with preferring the latter, but I'm thinking that math detection is also going to have to be installed alongside packages so system dependencies can be detected from installed projects, and a single alternate file like [FindPythonLibsNew](https://github.com/pybind/pybind11/blob/master/tools/FindPythonLibsNew.cmake) (originally from numpy, i think) is more palatable than installing half-a-dozen+ files. So I'm guessing that on the core math, we'll probably keep applying bandaids but will be glad to serve as a test bed in developing needed specs and solutions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537#issuecomment-264468397:308,detect,detection,308,https://psicode.org,https://github.com/psi4/psi4/issues/537#issuecomment-264468397,2,['detect'],"['detected', 'detection']"
Safety,"I'd prefer to keep the blurb simple, and if at all possible, separate tests from docs. Why not go with something like:; ```; @loriab : ; Your PR is modifying Psi4's documentation. To make your life easier, we've built ; the updated docs for you. You can preview your changes online at [netlify/...](), ; or locally by downloading [this zip archive](). Please incorporate any further changes by adding commits to this PR.; ```. The samples issue is more complex. I'd avoid trying to teach folks how to use git in an automated blurb. ```; @loriab:; Your PR is modifying Psi4's test suite. To keep the `samples` suite in sync with; `tests`, we have created an automated commit [checksum]() to your PR branch. Please review, merge, or otherwise address the changes proposed in the automated commit ; into your PR before merging the PR into Psi4's `master`. Feel free to ask for help in ; the PR if you have any questions.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2364#issuecomment-981706469:466,avoid,avoid,466,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-981706469,2,['avoid'],['avoid']
Safety,"I'll look into this. There aren't many people who might know here, which (sadly) cuts the detective work short.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/953#issuecomment-381466482:90,detect,detective,90,https://psicode.org,https://github.com/psi4/psi4/pull/953#issuecomment-381466482,1,['detect'],['detective']
Safety,"I'll make the remaining `cepa0` changes after #1850 comes in. It seems prudent to avoid _two_ PRs standardizing things in `occ`, `dfocc`, and `fnocc` at once. The issue can then close.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1872#issuecomment-618326982:82,avoid,avoid,82,https://psicode.org,https://github.com/psi4/psi4/issues/1872#issuecomment-618326982,1,['avoid'],['avoid']
Safety,"I'm fine defaulting it to `OFF`, to be honest! Probably safer that way, in regards to unforeseen errors/issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2018359606:56,safe,safer,56,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2018359606,1,['safe'],['safer']
Safety,I'm getting `Abort trap: 6` instead. OPTKING expecting a dihedral to print would certainly explain why #1921 reports that moving to Cartesians fixes this. I think there's a good chance your diagnosis is right.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1924#issuecomment-641913005:13,Abort,Abort,13,https://psicode.org,https://github.com/psi4/psi4/issues/1924#issuecomment-641913005,1,['Abort'],['Abort']
Safety,"I'm going a bit of topic. I tried to understand how the unit conventions were handled in PSI4 and I'd like to share the things I ran into. I'd suggest to keep it simple and use atomic units everywhere by default. It would be very helpful when any deviation from such a basic rule is made explicit. To keep it simple, the usage of non-atomic units can further limited to reading inputs or writing output files. At the moment, this does not seem to be the case, which is confusing. Some examples:. - The point that confused me in this issue: changing the unit to Angstrom in the molecule section also affects units in the QMMM charges. The latter is an implicit unit convention. I'm glad this is being fixed. If you want to support Angstrom from QMMM charges, add an explicit option for it. Something along the following lines could already be a simple solution:; ```python; embedding_charges = [; [1.0, array([0.0, 0.0, 2.0])*angstrom],; ]; ```. - In `case1/psi4.out`, the positions of the QMMM charges are printed in Angstrom while the preceding header mentions a.u. Also here, the unit convention is implicit, easily leading to confusion. - When looking e.g. at libmints, there seem to be unit conversions buried deep into the code, e.g. related to this issue: https://github.com/psi4/psi4/blob/bf127d90c4b40f2ab6471bd6de4f312c9a149b1d/psi4/src/psi4/libmints/extern.cc#L306-L323; That is just asking for trouble. The only good reason not to use atomic units is to interface with human beings or certain data containers following other conventions. I would suggest to avoid dragging unit conventions all the way into computational parts of the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625654314:1568,avoid,avoid,1568,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625654314,2,['avoid'],['avoid']
Safety,"I'm going over DFOCC now. It may not help, but certainly won't hurt. The reduced dependencies will improve parallelization, which may not help on Travis but will locally. The redundant files list is super useful, @dgasmith. We should certainly make sure that any functions contained therein are either tested (DFOCC, PSIMRCC, CC*, etc.) or removed (libqt, libciomr).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525#issuecomment-262127128:175,redund,redundant,175,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262127128,1,['redund'],['redundant']
Safety,"I'm not convinced it adds much to the cmake output (I've added a few more lines higher up and added LAZ to the message line you wanted me to add to prove to myself it was doing something!):. Output from: cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/usr/local/psi4; ```; -- Math lib search order is MKL;OPENBLAS;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl; -- Found BLAS: MKL (/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so); -- LAPACK will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl; -- Found LAPACK: MKL (/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so); -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; -- Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE) ; -- ; Properties for TARGET tgt::MathOpenMP:; tgt::MathOpenMP.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_LINK_LIBRARIES = ""MathOpenMP_LIBRARIES-NOTFOUND;OpenMP::OpenMP_CXX"". -- ; Properties for TARGET OpenMP::OpenMP_CXX:; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_OPTIONS = ""$<$<COMPILE_LANGUAGE:CXX>:-fopenmp>""; OpenMP::OpenMP_CXX.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_LINK_LIBRARIES = ""/usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so""; Properties for TARGET tgt::MathOpenMP:; tgt::MathOpenMP.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516:908,Detect,Detecting,908,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516,1,['Detect'],['Detecting']
Safety,"I'm not sure what the problem is but this works fine, I'm happy to say :). set optking {. frozen_dihedral = ("". 5 1 2 6. 4 1 2 6. 3 1 2 6. ""). }. #optimize(""hf/3-21G""). import optking. set basis 3-21g. optking.optimize_psi4('hf'). On Fri, Jan 15, 2021 at 6:42 PM Lori A. Burns <notifications@github.com>; wrote:. > Can be fixed with a bigger basis like cc-pvdz. The gradient is fine, so I; > think the trouble is in predicting the next geom step, so may be of; > interest to @psi-rking <https://github.com/psi-rking>; >; > molecule {; > 0 1; > C -0.167039 -0.712374 -0.022325; > O 0.119573 0.677072 0.056530; > H -0.453842 -0.989160 -1.036819; > H -0.997038 -0.962046 0.638968; > H 0.691232 -1.312038 0.284396; > H 0.775814 0.817745 0.757350; > }; >; > set optking {; > frozen_dihedral = (""; > 5 1 2 6; > 4 1 2 6; > 3 1 2 6; > ""); > }; > #set {; > # geom_maxiter 2; > # g_convergence GAU_LOOSE; > #}; > #memory 6GB; > #set_num_threads(6); > #psi4_io.set_default_path(""/home/phy/Desktop/projects/2021/amoeba/test/poltype/scratch/Psi4-methanol""); > #for _ in range(1):; > # try:; > # optimize('hf/3-21G'); > # break; > # except OptimizationConvergenceError:; > # break; > # else:; > # try:; > # set opt_coordinates cartesian; > # optimize('hf/3-21G'); > # break; > # except OptimizationConvergenceError:; > # pass; > #clean(); >; > optimize(""hf/3-21G"") # segfaults; > #optimize(""hf/cc-pvdz"") # 4 iter; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/2084#issuecomment-761275679>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AA4C4TBAEFTYTU5HYJQMMSDS2DOHPANCNFSM4WETR7OA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2084#issuecomment-761373278:416,predict,predicting,416,https://psicode.org,https://github.com/psi4/psi4/issues/2084#issuecomment-761373278,1,['predict'],['predicting']
Safety,"I'm pretty sure those files are present only because you did an internal build of L2. That is, the files weren't provided by the Psi4 project, except as a build detail; they were provided by the Libint project. Placing them behind a namespace would hinder the easy equivalence of L2-detected-from-prebuilt-external and L2-internal-build. Also, if you have an external L2 package and it's the default-ordering v2.7.2 you mentioned yesterday, I think psi could get confused between them at runtime. Am I mis-analyzing this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2681#issuecomment-1213362219:283,detect,detected-from-prebuilt-external,283,https://psicode.org,https://github.com/psi4/psi4/issues/2681#issuecomment-1213362219,1,['detect'],['detected-from-prebuilt-external']
Safety,"I'm trying to compile your branch, to test on my machine, but keep hitting an incompatibility related to a `toupper` macro. Have you ever seen this before?. ```; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/p_fprintf.cc:30:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/parallel.h:40:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/process.h:38:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/liboptions/liboptions.h:43:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libpsi4util/exception.h:33:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/sstream:174:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/ostream:138:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/ios:216:; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/__locale:466:15: error: C++ requires a type; specifier for all declarations; char_type toupper(char_type __c) const; ^; /Users/andysim/miniconda/include/python2.7/pyport.h:731:29: note: expanded from macro 'toupper'; #define toupper(c) towupper(btowc(c)); ```. Both the HomeBrew and Conda versions of Python seem to have this issue. I just did a simple `cmake -DCMAKE_BUILD_TYPE=Debug ..` to configure, and it found the appropriate Python libs (I also removed the HomeBrew Python completely, to force Conda to be used.). I can see what the problem is, but I have no idea why it's occuring now, _i.e._, which flags we used before to avoid the problem. Any ideas?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235109795:1751,avoid,avoid,1751,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235109795,2,['avoid'],['avoid']
Safety,"I'm using `mp.set_start_method('spawn', force=True)` which seemed long-term safe (cf [this Python discussion](https://discuss.python.org/t/switching-default-multiprocessing-context-to-spawn-on-posix-as-well/21868)), although perhaps `forkserver` would be just as safe. I had to do some refactoring elsewhere to get this to work but it ultimately worked out, so this isn't blocking me. Still, it would be nice not to have to worry about this behavior - not sure what in Psi4 breaks with `fork`, or if it's easily fixable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3189#issuecomment-2211335778:76,safe,safe,76,https://psicode.org,https://github.com/psi4/psi4/issues/3189#issuecomment-2211335778,2,['safe'],['safe']
Safety,"I've had similar problems (location of scratch files) on HPC systems, but; have found Psi4's current machinery adequate for working with them.; Ultimately I am going to suggest a veto of this pull. I'm particularly worried because I have never used an HPC that uses those; variables. I've used 5 or 6 different machines and the variable has always; been $SCRATCH (or some variation of it) so I don't think the proposed; default conventions are wide spread. Second based on community sentiment,; I think we should avoid C++11 for the time being as it seems at least some; of our users are not ready for the switch (for the record I am the current; primary user of C++11 in the Psi4 source and am actively phasing it out to; get us back to C98). I'm also under the impression that reading; environment variables is typically done in Python for Psi4 and I think that; is where such things should be done long term anyways. Personally for this problem the solutions on the Psi4 webpage,; http://sirius.chem.vt.edu/psi4manual/4.0b5/external.html, have worked great; for me. In particular setting this in your .psi4rc file is a convenient; way to accomplish this on a per machine basis. I haven't actually rejected the pull so other developers feel free to veto; my veto if I missed something (particularly @lorilab who I suspect is the; pro on these sorts of environment things). Ryan. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 8:21 AM, ""wpoely86"" notifications@github.com wrote:. > On some systems, the default temp location should not be /tmp; > but it is set by either $TMPDIR, $TEMP or $TMP (commenly done on HPC; > systems, where the temp location may be somthing special, a ssd for; > example).; > This patch first checks those 3 environment variables; > and uses its value when set. It falls back to /tmp when; > nothing is set.; > ; > ## std::getenv needs C++11 to be thread safe.; > ; > You can view, comment on, or merge this pull request online at:;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105036059:513,avoid,avoid,513,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105036059,1,['avoid'],['avoid']
Safety,"I've tweaked the https://github.com/MolSSI/QCEngine/pull/393/files PR slightly, and I think it's ready for merge. Here, I've added a few tests (b97-3c, r2scan2-3c, and r2scan2-d4) and tried them with several combinations of old/new gcp, old/new dftd3, and 3.4/3.5 dftd4, so I'm semi-confident they run when they ought and give helpful errors when they can't. The tests I added cover energy and gradient, but they're purely internal -- no reference values from a separate implementation. What further tests are wanted?. The labels/selectors for pytest should be in good shape (that is, tests will skip if wrong gcp/d3/d4 detected). CTest selectors aren't in good shape, so if you get helpful ""can't run"" errors, that's expected; wrong values aren't expected.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842#issuecomment-1672766348:620,detect,detected,620,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1672766348,1,['detect'],['detected']
Safety,"I've written a patch to allow for a custom frozen policy that is a bit clunky but safer than `num_frozen_docc` (because it applies per-atom rules, so works properly for cases like SAPT, MBIS_VOLUME_RATIOS, etc) -- once I can be sure this builds in vanilla psi4 (trying now) I will re-run my test jobs and submit the patch. . Still not sure what to do about `scf::HF::compute_fcpi` because I'm still a newbie to the code base (and this patch does NOT fix that issue).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1208404402:82,safe,safer,82,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1208404402,1,['safe'],['safer']
Safety,"IIRC a common problem with alkali and alkaline elements is that the core levels can lie higher up in energy than the valence electrons in other species. Defining the core levels via e.g. population analysis ([Rassolov et al, Chem. Phys. Lett. 350, 573 (2001)](https://doi.org/10.1016/S0009-2614(01)01345-8) can be used to avoid this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2012#issuecomment-702870857:322,avoid,avoid,322,https://psicode.org,https://github.com/psi4/psi4/issues/2012#issuecomment-702870857,1,['avoid'],['avoid']
Safety,"Ideally there should be a test-case attached sooner rather than later. I think a simple-but-intuitive way to do this would be to add a keyword named something like `irc_n_steps` which tells OPTKING to `return OptReturnSuccess` after a given number of converged IRC points. Then you could do something like `set irc_n_steps 10` in your test case to avoid passing through the minimum, after which the steps may become unpredictable. I could help with that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-351224954:348,avoid,avoid,348,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-351224954,2,['avoid'],['avoid']
Safety,"If it solves this **and** library detection problems, then let's go for it. I notice that in [3.6](https://cmake.org/cmake/help/v3.7/release/3.6.html) they added support for compiler features also for Intel compilers, but maybe that's not as interesting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281110156:34,detect,detection,34,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281110156,1,['detect'],['detection']
Safety,"If it's just the installing-untested-prog aspect, I _think_ that which exe to run can be reset through the testing macros. So possibly, could register tests in both modes, staged and installed exe's. The risk of everything breaking in the install file rearrangement was deemed larger (and worth testing in its own right) than the trouble of installing, finding some tests broken, deleting the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235914479:204,risk,risk,204,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235914479,1,['risk'],['risk']
Safety,If so shall we push forward for this small change to avoid conflicts with #2775 that would occur if we changed everything to not return base class?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2795#issuecomment-1334709386:53,avoid,avoid,53,https://psicode.org,https://github.com/psi4/psi4/pull/2795#issuecomment-1334709386,1,['avoid'],['avoid']
Safety,"If the `--disable-addons` is your only change, then this is a good clue. What that flag does is still build against the necessities from conda (e.g., python, mkl, libint, libxc, gau2grid; the latter three are all safe C-only libraries) but not build any optional addons from conda (e.g., chemps2, pcmsolver, ambit, gdma, dkh). These optional addons can have their own deps (e.g., hdf5) and more languages (C++ and Fortran). So if not building against those solved your problem, then there's something fishy about one of those packages.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-406672389:213,safe,safe,213,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-406672389,1,['safe'],['safe']
Safety,"If this is only affecting CC wfn's then a full deep copy could be avoided. Instead, just deep copy the density in `ccdensity` before overwriting with the correlated density. . Note that the signature `psi::ccdensity::ccdensity(std::shared_ptr<Wavefunction> ref_wfn,...)` is misleading because at this point that function is passed the `psi::ccenergy::CCEnergyWavefunction`. That should work for a short term fix, however I agree that we have to come up with a better way to cache the SCF wavefunction quantities long term.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1478#issuecomment-454830318:66,avoid,avoided,66,https://psicode.org,https://github.com/psi4/psi4/issues/1478#issuecomment-454830318,1,['avoid'],['avoided']
Safety,"If we expand this issue to best practices, then a few lessons from #736 ; * Add as many headers as you like during development, but before making the PR, explicitly check if they're needed, and if so, move to source, not convenience header to minimize build impact.; * Avoid including any `py::` in `<top-lvl>/psi4/src/psi4` for the sake of build time. Instead, extend class (can't use private member data) in accompanying `<top-lvl>/psi4/src/export_<cls>.cc`. If you feel you need a `py::` in `<top-lvl>/psi4/src/psi4`, contact the core-devs to see if a work-around can be devised.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/752#issuecomment-312340409:269,Avoid,Avoid,269,https://psicode.org,https://github.com/psi4/psi4/issues/752#issuecomment-312340409,1,['Avoid'],['Avoid']
Safety,"If you want to try the new compilers version, create a new environment `conda create -n psi4 python=3.6 -c psi4/label/agg` (only things from psi4 channel in `conda list` should be psi4, libint, libxc). Should be safe to install jupyter in the same env. Strongly suggest jupyter (and numpy) from defaults (where they're well into the process of rebuilding everything with the new compilers), not conda-forge (where they're considering how to use them). I've been getting psi4 to build this way for less than a day, so it's very much a trial package. If that doesn't work (and I won't be able to test it myself until Monday), no, there's nothing actionable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-345422371:212,safe,safe,212,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345422371,1,['safe'],['safe']
Safety,"If you would, please. Sanity checks never hurt. Anything that's doubled in `select_ccsd()`. Can remove https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L721-L722 and https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L743-L744 along with the detci docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/966#issuecomment-381811539:22,Sanity check,Sanity checks,22,https://psicode.org,https://github.com/psi4/psi4/pull/966#issuecomment-381811539,1,['Sanity check'],['Sanity checks']
Safety,"Im actually getting the errors after make -j\`..\`. The output of make -j... is ; [make errors.txt](https://github.com/psi4/psi4/files/1159909/make.errors.txt). And the output of cmake is. ```; pc0108717:psi4 edq$ sudo cmake -H. -Bobjdir -DPYTHON_EXECUTABLE=/opt/local/bin/python -DPYTHON_LIBRARY=/opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib -DPYTHON_INCLUDE_DIR=/opt/local/Library/Frameworks/Python.framework/Versions/3.6/include/python3.6m; -- The C compiler identification is AppleClang 8.0.0.8000042; -- The CXX compiler identification is AppleClang 8.0.0.8000042; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, App",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:868,Detect,Detecting,868,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,4,['Detect'],['Detecting']
Safety,"In my view, the most important variables that get set in OCC are the `[SAME-SPIN|OPPOSITE-SPIN|SINGLES] [|O][MP2|MP3|MP2.5|LCCD] CORRELATION ENERGY`] ones both now and in future because all others can be constructed from these. yes, I think in future the main printing from OCC could be moved py-side, especially for quantities like SCS that OCC does nothing further with internally. I broadly plan that OCC would set the above variables and any totals that it likes, that OCC would print c-side the main energies that it's dealing with, then in proc.py, the return variables get sent to qcdb to be composed into `SCS(N)-MP2 TOTAL ENERGY` and anything else for which input pieces are present. the key thing about qcdb qcvar composition is that it also checks to make sure the SCS(N) built from components equals any SCS(N) passed in whole so ensures that OCC and qcdb are using the same definitions. I don't want to delete OCC's definitions before this check is active. So that plus leaving Ugur's printing mostly undisrupted is why I figured this could be put off. > If so, then the correct solution to the spin-redundancy problem is to eliminate the spin-component variables from occ. Are you meaning SCS(N) or SAME-/OPPOSITE-SPIN variables?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-581627355:1113,redund,redundancy,1113,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581627355,1,['redund'],['redundancy']
Safety,"In response to @loriab 's call for issues, I'm going to bump this thread. Moving forward to a massively parallel program something has to be done about the way we handle files. You have to remember, as Psi4 stands, each MPI process spawns its own files. For massively parallel runs this is too much. In my experience most supercomputer have network mounted disk and the `psi.<pID>.clean` files alone are hammering it. I've gotten lucky in that I have access to a supercomputer that has disk on each node, so I've been able to generate data, but long term I don't think we want to limit ourselves to supercomputers with local disk. I think we need a whole new way of handling files, in particular I'd like to see:; - Less files. Things should only be written to disk in the event of checkpointing or because the value simply does not fit in memory.; - Virtual files. The reality is the previous bullet is probably going to be difficult to obtain in practice, which is where support for so-called virtual files comes in. Basically our file manager would decide whether your file is going to disk or memory and then do the above for you, but as far as your code is concerned you're reading from an actual file. Thus you get to be agnostic to the details.; - Different numbering/naming scheme. PID is not a great naming scheme as the possibility of a naming conflict is pretty great (see my last update to this thread).; - The MPI standard also covers disk I/O we should adhere to that...; - Exceptional error messages/detection. There are a bajillion reasons why file I/O can't occur.; - Compression. I don't think we compress our files at all, do we?. For the record HDF5 supports virtual files, parallel I/O through MPI, and compression. Seeing whether it meets our file needs overall is on my todo list, but if someone else wants to take a stab at it in the meantime go for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/81#issuecomment-119230390:1515,detect,detection,1515,https://psicode.org,https://github.com/psi4/psi4/issues/81#issuecomment-119230390,2,['detect'],['detection']
Safety,"In terms of geometry, it is still a likely conformation. Right? This would mean that the atoms in the CH and the carbon and one hydrogen of the CH3 are in the same plane. Is there anything in Psi4 that can't handle near-180 dihedrals and can I avoid this by slightly changing the the intial coordinates of the atoms?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020#issuecomment-712230398:244,avoid,avoid,244,https://psicode.org,https://github.com/psi4/psi4/issues/2020#issuecomment-712230398,1,['avoid'],['avoid']
Safety,Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:688: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:708: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_mdi.py:11: Not detecting,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:16458,detect,detecting,16458,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,"Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:688: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:708: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_mdi.py:11: Not detecting module mdi. Install package if necessary to enable tests.; ========================================== 21 passed, 33 skipped, 3301 deselected, 1 xfailed, 16657 warnings in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:16633,detect,detecting,16633,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,"Is the ""it"" you're trying the original input file you posted, or the one that Lori posted?. Your input file may or may not demonstrate the problem. Noise in the energy single points leads to noise in the computed gradient leads to noise in the optimization step leads to noise in whether or not you get a problematic geometry. Lori's input file should reproduce the bug 100% of the time. I've been exploring Psi's symmetry handling for an unrelated issue, and it looks like Psi's symmetry detection assumes the symmetry operations can be oriented along the x-, y-, z- axes. I'm not surprised to see problems with symmetry detection if you don't let Psi center-of-mass-adjust the molecule. The symmetry elements would need to be translated in space.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-442804174:489,detect,detection,489,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-442804174,2,['detect'],['detection']
Safety,"It could just be that the optimization in GCC5 introduces some instability that doesn't always show up. I'd still crank it through valgrind if I were you, just to be safe. If we see this consistently, we may have to just reduce the optimization level for that file, to see if that fixes things.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182597595:166,safe,safe,166,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182597595,1,['safe'],['safe']
Safety,"It does not necessarily always cause an abort of the python process.; My test fails during libmints writing out integrals at the end of an SCF and gives a normal error message. (`cc11` test with cc-pVQZ basis set in a 50MiB RAMDISK). ```; [...]. !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 12 (error writing to file) !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 131 !; ! The most recent 5 function calls were: !; ! !; !----------------------------------------------------------------------------------!. Psi4 stopped on: Sunday, 06 November 2022 04:44PM; [...]; ```. I would suggest to merge and see how it behaves for our users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426:40,abort,abort,40,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426,1,['abort'],['abort']
Safety,"It doesn't really bother me that it takes 2-6 hours for Travis CI to build the 15 types, nor do I think it's hindering anything. I would actually like to see additional types added (specifically Mac, but I think there were other issues with that). It should be noted that we can merge pull requests in before Travis CI has completed testing. Travis CI is there as a safety net.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182562754:366,safe,safety,366,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182562754,1,['safe'],['safety']
Safety,"It is perhaps noteworthy that certain other codes converge this case even; with a core guess. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Thu, Jan 14, 2016 at 8:38 AM, jgonthier notifications@github.com wrote:. > Are both solutions stable ? For UHF computations, it seems to me always; > more safe to do a stability analysis. In some cases, it allowed me to; > eliminate the higher energy solution as unstable.; > ; > However, in other cases, both solutions are actually SCF minima... Trying; > with different guesses then seems the only way to find the lowest energy; > solution.; > ; > 2016-01-14 2:42 GMT-05:00 Rob Parrish notifications@github.com:; > ; > > I have seen this before (for this exact system) - the SAD guess converges; > > to the correct root, but Core does not. Not really much more to it than; > > that.; > > ; > > -Rob; > > ; > > On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; > > notifications@github.com> wrote:; > > ; > > > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > > > gives very different energies.; > > > The following input with the core guess gives a total energy of; > > > -75.5488580481183476; > > > ; > > > memory 250 mb; > > > molecule h2o {; > > > symmetry c1; > > > 1 2; > > > O 0.0000000000 0.0000000000 -0.2249058930; > > > H 1.4523499293 0.0000000000 0.8996235720; > > > H -1.4523499293 0.0000000000 0.8996235720; > > > units bohr; > > > no_reorient; > > > no_com; > > > }; > > > ; > > > set {; > > > basis cc-pVDZ; > > > scf_type direct; > > > guess core; > > > reference uhf; > > > e_convergence 7; > > > d_convergence 7; > > > }; > > > ; > > > energy_scf1 = energy('scf'); > > > ; > > > while this input with the SAD guess gives a total energy of; > > > -75.6330881795159655; > > > ; > > > memory 250 mb; > > > molecule h2o {; > > > symmetry c1; > > > 1 2; > > > O 0.0000000000 0.0000000000 -0.2249058930; > > > H 1.4523499293 0.0000000000 0.8996235720; > > > H -1.4523499293 0.0000000000 0.8996235720; > > > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211#issuecomment-171648923:305,safe,safe,305,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171648923,1,['safe'],['safe']
Safety,"It is the molecule's job to make sure that its member data are; internally consistent. In the scenario you painted, the pg should be; recomputed every time you change the molecule, or it should be computed; on the fly. Either way it will remain consistent with the actual state; of the molecule. Not copying member data in a copy operation is counter intuitive and; should be avoided. Honestly, I don't think I have ever seen a scenario; in which it makes sense. On Thu, 2016-03-03 at 06:53 -0800, David Sherrill wrote:. > Right, unless you wanted to do a CP correction, so you copied the; > dimer; > molecule, then in the copy you turned some atoms from ""real"" atoms to; > ""ghost"" atoms.; > ; > Don't know if we ever do / would do that, just speculating about why; > someone would have come up with the idea that copying pg is bad.; > ; > On Thu, Mar 3, 2016 at 9:48 AM, Ryan Richard; > notifications@github.com; > wrote:; > ; > > Not copying pg seems somewhat silly because if you are making a copy; > > there; > > should be no way that the copy doesn't have the same symmetry, even; > > factoring in ghost atoms, since both molecules have the same ghost; > > atoms.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/pull/299#issuecomment-191796461.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/299#issuecomment-191801305:376,avoid,avoided,376,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-191801305,2,['avoid'],['avoided']
Safety,It looks good so far as I can predict.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/272#issuecomment-187462125:30,predict,predict,30,https://psicode.org,https://github.com/psi4/psi4/pull/272#issuecomment-187462125,1,['predict'],['predict']
Safety,"It looks like `setup --accelerate` sets accelerate and turns off auto detecting blas/lapack. From all reports, accelerate is what is detected automatically with a plain installation. I guess the only use for the flag is when on a Mac there are multiple blas/lapack installations findable, and you want to quickly force the framework. I don't know any such complicated Macs in the connection, except perhaps this one at VaTech that inspired the flag. So how about (i) reclosing the issue, since accelerate is auto-detected, (ii) leave the `--accelerate` flag in setup for a while since it's doing no harm, (iii) stop actually passing that flag to setup on Macs and check the `otool -L`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36#issuecomment-122294961:70,detect,detecting,70,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-122294961,3,['detect'],"['detected', 'detecting']"
Safety,It looks like one of the three test configurations failed due to a timeout. The other two passed fine. I think this is ready for review.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/721#issuecomment-304529137:67,timeout,timeout,67,https://psicode.org,https://github.com/psi4/psi4/pull/721#issuecomment-304529137,1,['timeout'],['timeout']
Safety,"It seems like in a couple of cases we go from an optimized contraction to one that is not. For example, here a s-gaussian with exponent 0.0230700 was added to the core orbital. However, this function is redundant because it is already included in the basis. This introduces a slight performance penalty when computing integrals. Do we have a policy for contraction optimization?. ```; -Na 0 ; -S 11 1.00; - 31700.0000000 0.458878D-03 ; - 4755.0000000 0.355070D-02 ; - 1082.0000000 0.182618D-01 ; - 306.4000000 0.716650D-01 ; - 99.5300000 0.212346D+00 ; - 35.4200000 0.416203D+00 ; - 13.3000000 0.373020D+00 ; - 4.3920000 0.625054D-01 ; - 1.6760000 -0.624532D-02 ; - 0.5889000 0.243374D-02 ; - 0.0564000 -0.442381D-03 ; ```. ```; +Na 0; +S 12 1.00; + 31700.0000000 4.5887800e-04; + 4755.0000000 3.5507000e-03; + 1082.0000000 1.8261800e-02; + 306.4000000 7.1665000e-02; + 99.5300000 2.1234600e-01; + 35.4200000 4.1620300e-01; + 13.3000000 3.7302000e-01; + 4.3920000 6.2505400e-02; + 1.6760000 -6.2453200e-03; + 0.5889000 2.4337400e-03; + 0.0564000 -4.4238100e-04; + 0.0230700 2.4192400e-04. S 1 1.00; - 0.0230700 1.0000000 ; + 0.0230700 1.0000000e+00; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-307875382:203,redund,redundant,203,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307875382,1,['redund'],['redundant']
Safety,"It still works for the `-xHost` `-march=native` case, so I would say it passes your test (haven't tried though!) I was asking myself the same about `CACHE`, but I think it's never set in cache, so we should be safe.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/845#issuecomment-343303520:210,safe,safe,210,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343303520,1,['safe'],['safe']
Safety,"It's a feature not a bug?. Symmetric molecules are supposed to have symmetric wavefunctions (because; the Hamiltonian commutes with the symmetry operators). Certainly, the; exact wavefunction does has the full point group symmetry. Occasionally,; approximate QM methods can have lower-energy non-symmetric solutions.; Anytime the wavefunction has a lower symmetry than the molecule, this is; usually considered a bad thing and is often called ""artifactual (spatial); symmetry breaking."" Wes Allen and Daniel Crawford have some excellent; papers on this topic (I've made a couple contributions, also). In most applications, generally the high symmetry wavefunction is the one; that is actually desired, although it depends on the situation whether the; symmetric or non-symmetric solutions will give better predictions of; molecular properties. C2H4 is not a classic ""symmetry breaking molecule"" to my knowledge, so I'm; surprised that there is a symmetry-breaking solution to the SCF equations. On Tue, Dec 5, 2017 at 3:11 PM, Daniel Smith <notifications@github.com>; wrote:. > I believe we have had this problem in the past. Take a symmetric molecule; > who's optimal wavefunction should contain less symmetry:; >; > import numpy as np; >; > mol = psi4.geometry("""""" 0 1C 0.0 0.0 0.673055C 0.0 0.0 -0.673055H 0.0 0.934981 1.246807H 0.0 -0.934981 1.246807H 0.934981 0.0 -1.246807H -0.934981 0.0 -1.246807symmetry c1""""""); > # Set reference and guess.; > psi4.set_options({; > ""reference"": ""rhf"",; > ""guess"": ""sad"",; > ""basis"": ""DZP"",; > ""soscf"": ""true"",# ""sad_frac_occ"": ""true""; > }); >; > energy = energy('scf')if np.allclose(energy, -77.87781349420317):; > print(""Found non-symmetric minima! Success!"")elif np.allclose(energy, -77.84789770426966):; > print(""Found symmetric minima... failure."")else:; > print(""You found something... wrong.""); >; > The -77.847 result should be found when the molecule is constrained to; > symmetry. However, without that constraint there is a lower SCF result to; > be",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349464469:806,predict,predictions,806,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349464469,1,['predict'],['predictions']
Safety,"It's not immediately clear to me why no_com and no_reorient are required to get energies right in this case. Shouldn't the energy be invariant to the choice of coordinate system?. ## -Daniel . Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On May 19, 2014, at 10:01 AM, Eugene DePrince notifications@github.com wrote:. > If a user wants to make a potential energy curve or surface, it is very easy to generate nonsense when using cartesian coordinates. Using nocom and no_reorient fixes this, so maybe the driver should be setting these options if it detects such a case.; > ; > molecule beh2 {; > Be 0.0 0.0 z; > H 0.0 1.0 0.0; > H 0.0 -1.0 0.0; > }; > molecule beh2_nocom {; > Be 0.0 0.0 z; > H 0.0 1.0 0.0; > H 0.0 -1.0 0.0; > nocom; > no_reorient; > }; > activate(beh2); > set basis sto-3g; > set guess sad; > for i in range (1,41):; > z = i*0.1; > beh2.z = z; > e = energy('scf'); > print z,e; > set guess read; > print ''; > ; > activate(beh2_nocom); > set basis sto-3g; > set guess sad; > for i in range (1,41):; > z = i*0.1; > beh2_nocom.z = z; > e = energy('scf'); > print z,e; > set guess read; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/59#issuecomment-43508954:560,detect,detects,560,https://psicode.org,https://github.com/psi4/psi4/issues/59#issuecomment-43508954,2,['detect'],['detects']
Safety,"It's not necessary to use the conda `gcc`– just that makes for a predictable `Makefile`. I'll investigate `nc-config`. It always helps to know use cases, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172279516:65,predict,predictable,65,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172279516,1,['predict'],['predictable']
Safety,"Jerome, Have you played around with CUHF at all for the stability analysis?. I know that this method avoids spin contamination.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211#issuecomment-171704058:101,avoid,avoids,101,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171704058,1,['avoid'],['avoids']
Safety,"Just a followup on the fnocc2 error. I had passed in the `dertype=1` flag to reduce AM requirements; that flag got lost in your merge of my PR. I think the current solution is better; we now use analytic frequencies in that test case because the AM requirements have been reduced since I fixed the erroneous AM check in libmints. The clang-3.8 failure is caused by two things: 1) the Boost detection fails and 2) building Boost fails because of [this bug](https://bugzilla.redhat.com/show_bug.cgi?id=1120995), which was fixed in clang 3.4. For some crazy reason, Travis is providing 3.4 even though we specifically request 3.8. I noticed that some of the tests do get version 3.8, so I'm not sure it's a problem with out YML but will poke around a little. This will all go away (and our build time will drop) when the Boost detection works with Travis again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235144008:390,detect,detection,390,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235144008,2,['detect'],['detection']
Safety,"Just a little update: unless jturney has an opposition, I think we can safely delete the error message. I'm now trying to clean up the synchronization issues. I found the problem with cubeprop, and I'm working on the errors in the sapt tests, which seem to be even more subtle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596#issuecomment-278105814:71,safe,safely,71,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-278105814,1,['safe'],['safely']
Safety,"Just to clarify, is the long-term plan to use Bohr for external charges irrespective of the molecule units? I'd rather have both specified in the same units to avoid confusion and to make input creation easy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625550371:160,avoid,avoid,160,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625550371,1,['avoid'],['avoid']
Safety,"Lemme guess: Psi4 is using ATLAS inside OpenMP regions, but ATLAS is not compiled thread-safe?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1461#issuecomment-455813118:89,safe,safe,89,https://psicode.org,https://github.com/psi4/psi4/issues/1461#issuecomment-455813118,1,['safe'],['safe']
Safety,"Lengthy version very interesting. It slightly pains me that options specification isn't consistent through all of psi4, but having options specification not consistent for pcmsolver across all host programs would be more painful to the dedicated pcmsolver user. Is the `pcm {...}` to `pcmsolver.inp` safe for multiple invocations in one psi4 input (I remember labeling temp dirs with random numbers for dftd3)?. I like the multiple input strategies scheme. Would someday you approve of an additional strategy 1.75 where pcm options are specified in psi4 format (e.g., `set pcm_cavity_probe_radius 2`, then the whole pcm collection be written to `pcmsolver.inp`? That way, could be friendly to the dedicated pcmsolver user and the dedicated psi4 user?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/212#issuecomment-171677827:300,safe,safe,300,https://psicode.org,https://github.com/psi4/psi4/pull/212#issuecomment-171677827,1,['safe'],['safe']
Safety,Lets pull this in and see how it effects PR's. I wonder if we should knocked out Clang 3.9 at the same time as it seems to timeout more than anything else at the moment.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/595#issuecomment-276187772:123,timeout,timeout,123,https://psicode.org,https://github.com/psi4/psi4/pull/595#issuecomment-276187772,1,['timeout'],['timeout']
Safety,"Likely the snag is that ""Classic"" Python detection where pb11 calls PythonLibsNew is getting triggered instead of ""New FindPython"" mode. https://pybind11.readthedocs.io/en/stable/cmake/index.html#new-findpython-mode Maybe in addition to `find_package(Python)` to `find_package(pybind11)`, you can set `PYBIND11_FINDPYTHON` to `ON`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1676489557:41,detect,detection,41,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676489557,1,['detect'],['detection']
Safety,"Look at iteration 1: we're seeing a change in the iteration energy of over a mH due to this integral screening. This strongly suggests a bona fide bug. If you have additional systems that fail, this seems like a bug that is going to afflict a _lot_ of our users. I highly suggest we fast-track this for investigation but I would rather avoid being the one to debug this directly. (I'm trying to get into paper-writing mode.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2114#issuecomment-779483755:336,avoid,avoid,336,https://psicode.org,https://github.com/psi4/psi4/issues/2114#issuecomment-779483755,1,['avoid'],['avoid']
Safety,Looks good to me from the CMake/math point of view. The foreach [here](https://github.com/psi4/psi4/pull/591/commits/242c33255741ca6783ce13d4143ed7096ef79766) looks a bit overkill. Will it be possible for me to take these changes over to Autocmake? The grand plan there is to split up the math detection monolith into individual modules. I am asking this because this now becomes GPL code and Autocmake is BSD. Advantage of taking it to Autocmake would be more testing exposure to other codes.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276088154:294,detect,detection,294,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276088154,1,['detect'],['detection']
Safety,"Looks like everything is on track to finish with a single exception: `EXTERN`. This keyword is used to supply QM/MM charges through the `ExternalPotential` object to a variety of internal programs. Currently the `EXTERN` keyword is a PythonObject which is then cast to a `ExternalPotential` object in the C++ layer. When pushing pybind11 out of the layers I had deleted the ability to add Python objects to the options object (apparently I grepped in too deep of a folder). I think the following are solutions:. - Add the PythonObjects back to the `options` object. This will unwind most of the work in this PR as pybind11 will go back into basically every Psi file and add ~10 minutes to the compile.; - Add a new class to the options object that takes `void*`'s and then cast as is currently done. This is about as safe as currently done as there is currently no typechecking on the PyObject cast.; - Bind Python objects to the Options object Python-side and then insert these objects into the class members in the driver layer. I object a bit to the first as I really think we need to keep pybind11 out of Psi except in the `export` layer. The second and third are about the same to me. Although in the last one we gain all the C++ type checking at the cost of a few more lines in the driver. . One more thing to think about: I pulled out the `__getitem__` functionality for the Matrix and Vector objects. We can add this back fairly trivially, but should we add it back through the `get` and `set` attributes or through the NumPy interface? Going through the NumPy interface will allow all of the slicing routines to work; however, this gets a little awkward for irreped objects. Hence, the `np` and `nph` accessors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/736#issuecomment-307629750:817,safe,safe,817,https://psicode.org,https://github.com/psi4/psi4/pull/736#issuecomment-307629750,1,['safe'],['safe']
Safety,Looks like we are still hitting timeouts occasionally.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/573#issuecomment-272873624:32,timeout,timeouts,32,https://psicode.org,https://github.com/psi4/psi4/pull/573#issuecomment-272873624,1,['timeout'],['timeouts']
Safety,"Lori, could you comment on the long-term fate of the new `potentials_` field and the pre-existing `external_pot_` field, as well as other possible use cases for `potentials_`? The impression I get is that this is still a hack to avoid giving F/I-SAPT a wavefunction, rather than something that makes sense for wavefunctions _in general_. I'm open to being wrong, but if I'm right, I request some very heavy warnings about how this field is for internal Psi use only, is to-be-deprecated, and how anybody doing anything other than F/I-SAPT should stick to `external_pot_`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2131#issuecomment-801954271:229,avoid,avoid,229,https://psicode.org,https://github.com/psi4/psi4/pull/2131#issuecomment-801954271,1,['avoid'],['avoid']
Safety,"Lori, if you have time, could you please describe briefly what the main reasons were for switching to targets as the mechanism to link to external libraries? What becomes easier? Are there known pitfalls/gotchas? I think targets look more robust than a string which could be (accidentally) modified on the way. In the initial math detection implementation we wanted to be close to how CMake finds libraries. Later I went a bit off course to make it easier for CMake-unaware colleagues to extend the detection. Now I feel I want to go back to more modular and CMake-like but I want to do it ""right"" this time so I would love to learn the advantages of using targets for this. Maybe you have a document you can point me to.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276161205:331,detect,detection,331,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276161205,4,['detect'],['detection']
Safety,"Moving the finite-difference code into Python seems like a good idea. I'm sure it could be much cleaner. For geometry optimization purposes, one only ever really needs cartesian Hessian -> internal coordinate Hessian. This capability is in the C++ and also now in the Python optking - including the gradient.derivative B term (with the derivative-B matrix elements computed analytically). I think that the challenge I ran into (long ago) in the referenced commented-out code in generating a cartesian Hessian using a finite-difference derivative B matrix for this term was in the Sayvetz/Eckart conditions. The rotations/translations are projected out (now by cdsalc) for the original, undisplaced geometry - but then will not be exactly so at the displaced geometries. I don't recall if my motivation for using finite-difference derivative-B elements at the time was for reduced computational expense, because the analytic derivative-B elements were not yet coded, or to try to avoid discontinuity problems in the derivative formulas. The f-d option might be a good capability to have; I'm not sure offhand if it is worth doing. On the coordinate transformation of course Wesley Allen is the guru.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884#issuecomment-352449546:979,avoid,avoid,979,https://psicode.org,https://github.com/psi4/psi4/issues/884#issuecomment-352449546,1,['avoid'],['avoid']
Safety,"My bad, @loriab. I just re-read the libint manual and found this sentence `Macro LIBINT MAX AM specifies the maximum angular momentum + 1 of basis functions for which electron repulsion integrals can be computed.` The `+1` is a little counterintuitive and it was my neglect of it that caused me to change the sanity checks. Your revert of my change is correct; sorry to waste your time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-241057256:309,sanity check,sanity checks,309,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241057256,1,['sanity check'],['sanity checks']
Safety,"My first point was that Molden hasn't been using `[5D]` anymore for some time when writing Molden files (since 2004). It might be a good idea to follow it to avoid ambiguities. My second point is that software that follows Molden format specification (I am developing one such code) will likely see a conflict in `[5D]` and `[7F]`. Molden does not use these two flags together when writing Molden files and it never did. Even though it attempts to silently interpret their combination in some way, `[7F]` was introduced in the same version (4.1) when `[5D]` was abandoned. You are right about the interchanged words in the third point. Thank you for consideration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2612#issuecomment-1159347342:158,avoid,avoid,158,https://psicode.org,https://github.com/psi4/psi4/issues/2612#issuecomment-1159347342,1,['avoid'],['avoid']
Safety,"My one line of code worked, so this is ready for review. I'm still debating whether it's worth adding a test, given the timeout problems we've started to see and how hard it would be to trigger the bug this test would catch. The test question is the only holdup I see from being ready to merge.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1379#issuecomment-448456482:120,timeout,timeout,120,https://psicode.org,https://github.com/psi4/psi4/pull/1379#issuecomment-448456482,1,['timeout'],['timeout']
Safety,"New SCF algorithms are _far_ outside the scope of this PR, which is limited to ""slightly more polished dynamic_damping and trailing_convergence methods, and possibly a method for detecting oscillations"". Better to leave new algorithm discussion to #888, or maybe even a new issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1135#issuecomment-468656686:179,detect,detecting,179,https://psicode.org,https://github.com/psi4/psi4/pull/1135#issuecomment-468656686,1,['detect'],['detecting']
Safety,"No problem, @andysim, I'm glad my practical tests and your docs readings are in agreement. Do you or @jturney happen to know the ""restrict"" status of libint?; - grepping the code, there's no trace of `restrict`; - it's written in C so restrict should be handled automatically (I think); - except the generated files are `.cc`, so CMake builds them as `CXX`, where imposing restrict would need detection of the proper compiler flag; - if libint _is_ written under the restrict contract, we need to either; - change the `.cc` to `.c` so CMake builds them as C and handles restrict internally; - add CXX restrict detection to CMake (psi4 already has it, so just needs transferring)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-241076197:393,detect,detection,393,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241076197,2,['detect'],['detection']
Safety,"No, I haven't. And my next goals for stability analysis are more for RHF; and ROHF, since it's what most people use... But even these, I don't know; when I'll have time for it... 2016-01-14 12:00 GMT-05:00 Kevin Hannon notifications@github.com:. > Jerome, Have you played around with CUHF at all for the stability analysis?; > ; > I know that this method avoids spin contamination.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/211#issuecomment-171704058.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211#issuecomment-171749071:355,avoid,avoids,355,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171749071,1,['avoid'],['avoids']
Safety,"No, I'm still getting `pywrap` timeouts on Windows. Any ideas? I can't debug this readily.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1991#issuecomment-683761996:31,timeout,timeouts,31,https://psicode.org,https://github.com/psi4/psi4/pull/1991#issuecomment-683761996,1,['timeout'],['timeouts']
Safety,"No, no, no go ahead! This is fine with me. > On Aug 24, 2018, at 2:50 PM, Lori A. Burns <notifications@github.com> wrote:; > ; > Right, this is purely a formatting pass (see #1144 <https://github.com/psi4/psi4/issues/1144>) according to the clang-format file <https://github.com/psi4/psi4/blob/master/.clang-format>. If you'd like to do it yourself to avoid disrupting authorship, just clang-format -i *.h *.cc in the fnocc directory.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/pull/1158#issuecomment-415849759>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGmjUCo2oya6rFRslki6b4bZ21Fdjks5uUEsPgaJpZM4WL0dE>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1158#issuecomment-415850082:352,avoid,avoid,352,https://psicode.org,https://github.com/psi4/psi4/pull/1158#issuecomment-415850082,1,['avoid'],['avoid']
Safety,"No, we haven't taken over maintainership of libint-1 from Valeev. There's a bit of history at the README of https://github.com/psi4/libint . We'll probably mirror any bugfixes that Valeev implements. The new external repo is based on libint as extracted from Psi4, not on https://github.com/evaleev/libint/releases/tag/release-1-1-6 . I did a grand diff at one point, and there were very many little changes; so many that I did not examine them further, yet they were mostly line tweaks, not insertions/deletions. That's actually interesting that you've been using Valeev's libint-1 with Psi4, and it's presumably been working just fine. I don't think any of the Psi4 development people have tried that in years. The main purpose of the psi4/libint repo has been to get libint built with CMake and to get it switched over to exporting CMake targets through `libintConfig.cmake` rather than detecting the installation through `Findlibint.cmake`. In that, we may have broken your ability to use your upstream libint-1.1.5 package, as the Psi4 build system expects to link to a `libint::int` target. If there are things we can do to make your life easier in not dealing with two libint-1's, let us know. Our external repo does respect `GNUInstallDirs`. . Psi4 will probably switch over to libint-2 when we get the time. But once again, we'll want a CMake build and exported targets. Hopefully, we'll be able to contribute those changes upstream to evaleev/libint, as we have with other projects (e.g., CheMPS2).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/474#issuecomment-249616760:890,detect,detecting,890,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249616760,1,['detect'],['detecting']
Safety,Not tagged PSI_API and not exported means there's no risk of breaking downstream.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2348#issuecomment-964161630:53,risk,risk,53,https://psicode.org,https://github.com/psi4/psi4/pull/2348#issuecomment-964161630,1,['risk'],['risk']
Safety,"Not that I'm aware of. There are three reasons somebody might be tempted to use a manual `compute_gradient` call.; 1. _Method developer reason_. You are a plugin developer and don't know you can edit `proc_table` to tell `gradient` how to run for your new method. Not a good reason because you actually can.; 2. _Method developer reason_. You are writing a gradient method and want your gradient function to enter the C-code to do your energy, return to the driver, then re-enter the C-code to do your gradient. This is the best reason I've come up with, and while I'm sympathetic, I just don't think it's worth the danger of exposing this function to completely general Python use. The gradient machinery should only ever be called after your energy computation finishes.; 3. _User reason_. You want to run some additional commands between your energy and your gradient computation. I just can't imagine a use case for this _other than_ bypassing some sanity check. There isn't a case where separating the calls saves times. Even if there were, shoving intermediates onto a `wfn` only works for SCF (not sure about general DFT functionals). Even MP2 gradient theory needs intermediates too large to store on the `wfn`. The best I've come up with is that you're doing SCF, serialize the wavefunction for later analysis, and then decide you want a gradient after that later analysis. But even in that case, the serialized wavefunction has the converged orbitals, so just use `gradient`. I would expect minor computational overhead for the energy step. (I suppose there is the cost of re-building the TEI?). Since this would affect Forte and heads off a possible bug in relativistic computations, it's probably worth asking @fevangelista for input on this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2223#issuecomment-870536209:953,sanity check,sanity check,953,https://psicode.org,https://github.com/psi4/psi4/issues/2223#issuecomment-870536209,1,['sanity check'],['sanity check']
Safety,OK I ran the same 495 minimizations with B3LYP and here is the summary:; ```; wB97X: Success: 0 Failed: 495; B3LYP: Success: 224 Failed: 271; ```; The error messages are similar between b3lyp and wb97x. Mostly: ; ```; slurmstepd: error: Detected 1 oom-kill event(s) in step 4420716.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler.; ```; with a few:; ```; Bus error (core dumped) psi4; ```; and ; ```; Fatal Error: PSIO Error; ```. I am running these requesting 10GB from slurm and asking psi4 to use 8GB.; I also used sacct to query the memory usage for one failed example each:; wB97x:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4420706.bat+ OUT_OF_ME+ nc130 1 2 OUT_OF_ME+ 10Gn 10314128K 225460K 00:16:07 00:32:14 0:1+ 04/04/19 09:42:32 04/04/19 09:58:39 batch; ```. B3LYP:; ```; JobID State NodeLi NN Parti NCPU State ReqMe MaxRSS MaxVMSize Elapsed CPUTime Exit Start End JobName; ------------ ---------- ------ -- ----- ---- ---------- ----- --------- --------- ---------- ---------- ---- ------------------- ------------------- ----------------------------------------; 4494794.bat+ OUT_OF_ME+ nc153 1 2 OUT_OF_ME+ 10Gn 8825012K 225600K 00:02:07 00:04:14 0:1+ 04/09/19 09:43:57 04/09/19 09:46:04 batch; ```; Both exceed the 8GB psi4 is supposed to use but wB97x does this to a higher level. As mentioned the failures occur at different points in time:; - ```==> Integral Setup <==```; - Before the first SCF itteration of the first geomety optimization step completes; - ``` ==> DFJKGrad: Density-Fitted SCF Gradients <==```; - I also repeated one of the failed B3LYP. The initial time around it did not print the first SCF cycle of the first geometry optimization; The second time around it fa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677:237,Detect,Detected,237,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481479677,1,['Detect'],['Detected']
Safety,"OK, agreed, B3LYP is defined with VWN1RPA, B3LYP5 is with VWN5. I think this is good to go. One thing that might avoid unnecessary clarification in future is to rename PSI4's VWN3\* to VWN1*. Thanks to everyone for all your efforts in this one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/339#issuecomment-210083202:113,avoid,avoid,113,https://psicode.org,https://github.com/psi4/psi4/pull/339#issuecomment-210083202,1,['avoid'],['avoid']
Safety,"Observations:; * RMcG found that psi4 Mac conda pkg (linked to native Accelerate) and numpy conda pkg (linked to in-env MKL) was fragile wrt psi4/numpy import ordering; * DGAS found that psi4 built from source (linked to native Accelerate but managing its own RPATH) and numpy conda pkg (linked to in-env MKL) was steady wrt psi4/numpy import ordering; * LAB found that psi4 built from source on Linux (linked to in-env OpenBlas) and numpy conda pkg (linked to in-env MKL) was fragile wrt numpy operation w/i psi4. Conclusions:; * Linking to multiple math libs in the same conda env is risky (perhaps more so on Mac than Linux); * Best solution for Mac is to just link Psi4 to MKL, not Accelerate if installing psi4 into same env as numpy (which, for ease of use and distribution, we want to do); * Requires mix and match of default-channel MKL and intel-channel mkl-include (for `mkl.h`) to get full py27/py35/py36 stack; * In practice, rolling this out along with `sse4.1` ""Illegal Instruction 4"" fix for old Mac hardware, so expect solutions in the coming week, rather than the coming day.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-312305798:586,risk,risky,586,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-312305798,1,['risk'],['risky']
Safety,"Oh I meant project up atom by atom. This is just like doing the sad guess; in the big basis.; On Jun 4, 2016 10:40, ""Daniel Smith"" notifications@github.com wrote:. > Aha, Psi's CD algorithm is not parallelized and is probably why I was; > seeing CD tensor generation taking longer than the iterations in some; > cases. We could fix that, it would be nice to avoid an auxiliary basis.; > ; > Yea, thats something to consider; however, one thing I have noted is that; > projecting orbitals that result from a partial Cholesky of the SAD density; > results in some degradation in the accuracy of the SAD guess itself. This; > is kind of weird, but might come from the interplay of the projection and; > how Cholesky weights vectors. Right now the SAD guess takes a small; > fraction of the SCF time (even for dimers) so I didnt see a need to look; > into this. Ill add this functionality back in so someone can play with it; > if they want.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/400#issuecomment-223759128, or mute; > the thread; > https://github.com/notifications/unsubscribe/ACizP-uzAbBMjA_-PXb1rOPqHc6uBk6Dks5qIY5ZgaJpZM4It9wO; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/400#issuecomment-223774180:358,avoid,avoid,358,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-223774180,1,['avoid'],['avoid']
Safety,"Oh dear, I see your PR has become contaminated by non-you commits. This probably happened because you rebased to pull in changes from upstream, tried to push, GH told you that's not a fast-forward so you probably want to pull, you pulled, then pushed. Hence current state. In this instance, that was bad advice from git. From step 9 or the `git push -f origin fastci` text of http://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow, what you really want to do in this case is *force push without pulling*. Because you're the only one using that branch on your fork, this is quite safe, and no one will chase you with pitchforks :-). Don't feel bad about about doing this wrong. Most everyone in the psi connection has done this (I did it three times in succession). Next step is to heal your branch. Don't do anything more on that branch locally. Check out master and update it to upstream. Check out a new branch, then apply the commits that are yours. Test and then force push back to GH to the branch that GH knows to be associated with this PR. ```; git checkout master; git pull --rebase upstream master; git checkout -b new_sinf; git cherry-pick b2b49f6; git cherry-pick 147f5b2; ...; # I'm applying the commits you authored in order, just reading the hashes from this webpage above; # it's possible but unlikely that you'll have to resolve conflicts; ...; git cherry-pick 502d234; # build and test; git push origin new_sinf:e2_exch_disp_sinf -f # force added in edit 15 May 2019; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490#issuecomment-457765390:601,safe,safe,601,https://psicode.org,https://github.com/psi4/psi4/pull/1490#issuecomment-457765390,1,['safe'],['safe']
Safety,"Oh wow, I haven't experienced this error before. It detected the xz- and yz- mirror plane and nothing else. It should probably gracefully report the issue and then find a point group that best matches it. Even though you told Psi4 to use C1 symmetry it still attempts to detect the highest point group for reporting purposes. I'll see what I can do to fix this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-380139496:52,detect,detected,52,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-380139496,2,['detect'],"['detect', 'detected']"
Safety,"Ok, @amjames, I'm glad to hear that it's behaving according to my expectations. I wonder if setting `CMAKE_PREFIX_PATH` is still an alternate solution. The thing is, CMake detects GCC libraries implicitly, so it's hard to `rpath` them. . Ugg, python detection. That issue remains, I presume. That's interesting that `CMAKE_PREFIX_PATH` will help python detection; I had never tried that. I agree, there should be some advice to just set all three python variables, if you're going to set any. And an example for anaconda python. You're welcome to add such to [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41), but try to stay compact. Otherwise, I'll add something later. A lot of these python detection problems should be eliminated by The Inversion, because we won't be _embedding_ python, just _linking_, so python can use its own `python-config` tech to load its library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249699749:172,detect,detects,172,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249699749,4,['detect'],"['detection', 'detects']"
Safety,"Ok, @bennybp and @ryanmrichard, take a look at https://github.com/loriab/psi4/commit/ea33ace7bcfcf7aff42f07a1399ae022508ca757, please. Sorry it's not so clean as I'd like, but our server's going down soon. **What it does**; - when libgdma is dynamic and; - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` and `gdma_DIR` unspecified, builds externalproject downloaded from www.github.com/loriab/gdma and detects it and links it properly (no real change from your setup besides origin of code from user perspective); - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` points to a pre-built installation, detects that and links to it properly; - The gdmaConfig exports all the usual suspect CMake variables (library, libraries, include_dir, include_dirs) (see below) but also; - manages requesting static shared, e.g., `find_package(gmda CONFIG REQUIRED COMPONENTS shared)`; - manages version requests; - exports a target `gdma::gdma` that has all its location, includes, `-DUSING_gdma` compiler definition, properties attached.; - so, after `find_package(gdma CONFIG REQUIRED)`, you don't have to add a library or use the usual suspects. Instead, just attach as needed (though I still think the second one should be simpler); - `target_link_libraries(psi4_exe PUBLIC gdma::gdma)`; - `target_compile_definitions(gdma_interface PRIVATE $<TARGET_PROPERTY:gdma::gdma,INTERFACE_COMPILE_DEFINITIONS>)`. ```; gdma_FOUND : 1; gdma_VERSION : 2.2.06; gdma_INCLUDE_DIRS : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_INCLUDE_DIR : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_LIBRARIES : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; gdma_LIBRARY : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/sta",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:399,detect,detects,399,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,4,['detect'],['detects']
Safety,"Ok, good to know-- I'll probably just avoid using addons altogether when doing dev stuff, then. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/871#issuecomment-347991366:38,avoid,avoid,38,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347991366,1,['avoid'],['avoid']
Safety,"Ok, good. Now that psi4 is up-to-date with cb3 and defaults libraries, it's possible to install it into the base env (that was a bad idea when psi4 was distributing gcc52 alongside), but there's still enough turbulence among the big channels that own env is a safer bet. Btw, if your base env is longstanding and contains `gcc-5-mp`, that's a non-modern-psi artifact that can be gotten rid of.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1036#issuecomment-395781344:260,safe,safer,260,https://psicode.org,https://github.com/psi4/psi4/issues/1036#issuecomment-395781344,1,['safe'],['safer']
Safety,"Ok, hopefully the latest commit has made Psi4 safe for Accelerate again. I wasn't able to recreate the missing symbol error on Linux, but I think these workarounds will suffice. I at least got the CMake to find the MKL fns and then not find them under a different name.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2895#issuecomment-1520885541:46,safe,safe,46,https://psicode.org,https://github.com/psi4/psi4/pull/2895#issuecomment-1520885541,1,['safe'],['safe']
Safety,"Ok, sounds safe to leave the `boost::python` out for the time being and go ahead and merge this PR to get the python so `psi4.so` working again. @bennybp, you'll have noticed that I didn't do the initialize and finalize changes possibly necessary for your linux so `libpsi4.so` since I couldn't test the built product. Whenever you like, add a `libpsi4so` target to build your version. Even if the python so and the linux so are identical, I think they'll have different names and install locations (site-packages and lib, respectively), so they'll need different targets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/268#issuecomment-187021220:11,safe,safe,11,https://psicode.org,https://github.com/psi4/psi4/pull/268#issuecomment-187021220,1,['safe'],['safe']
Safety,"Ok, the memory makes sense if confusing. 37.25 GiB supplied, 0.75 SCF safety factor so 28 GiB passed to SCF. The collection took 8 GiB so 20 GiB given to JK (all extra is fed there). Still a bit confused why Disk is used though and why #1667 is needed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1666#issuecomment-503715161:70,safe,safety,70,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503715161,1,['safe'],['safety']
Safety,"Okay all my questions have been answered, so pending reviews this is ready to merge. I added the cost property to the vibanalysis test and applied the fix in `qcdb/molecule.py` to avoid the ""No atoms detected, returning"" lines printing. Since the test runs in 10s I left it in quicktests. Last question to answer, does this close out #714 or should that issue stay open after merge?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/966#issuecomment-382039560:180,avoid,avoid,180,https://psicode.org,https://github.com/psi4/psi4/pull/966#issuecomment-382039560,2,"['avoid', 'detect']","['avoid', 'detected']"
Safety,"Okay, I see. I tried again, installing the proper chemps2 from the conda environment, and using gcc/g++ instead of Intel.; Believe it or not, it did work. And the first few tests are ok. Side note: while testing I noticed that HDF5 detection in CMake fails if 1) HDF5 is installed on the system AND 2) I use conda to install chemps2, which installs hdf5 in conda as well. Should I open a new issue about that ? Or is it too specific a case for being worth the time ?. Thanks for all your input, @loriab and @susilehtola",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288573307:232,detect,detection,232,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288573307,1,['detect'],['detection']
Safety,"Okay, here are some other considerations that must be accounted for when constructing the correct DFJK object:. 1. PackedDFJK if do_wK_ else SymmDFJK; 2. SymmDFJK if SymmDFJK->AO_core() else PackedDFJK. Note that the above two will require knowledge of `do_wK_` and `doubles_` **in the JK constructor**. 3. PackedDFJK if procedure relies intrinsically on old DFJK else SymmDFJK. (3.) might be tricky. `DFJK` used `df_ints_io_` to prepare, save, and load the 3-center integrals. Some procedures in Psi4 intrinsically rely on being able to load files produced by DFJK. So not only will we need avoid using SymmDFJK in those procedures, but we might also need to do so in preemptive procedures (such as SCF) so that the files can be properly prepared for use later on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-382594587:592,avoid,avoid,592,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-382594587,1,['avoid'],['avoid']
Safety,"On ""No atoms detected"", it's harmless but annoying. There's a couple PRs that'll fix it, but it wouldn't hurt to do it soon from a light PR like this one. https://psi4.slack.com/archives/C7W34BLQ7/p1521914834000079",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/966#issuecomment-382011515:13,detect,detected,13,https://psicode.org,https://github.com/psi4/psi4/pull/966#issuecomment-382011515,1,['detect'],['detected']
Safety,"On the `clean` issue, I don't see a change in behavior from your PR. The below (on master) also requires the intervening `clean()` to avoid a PSIO error. Maybe the rules of how much the user should need to call clean need rethinking, but at least they are steady (one used to have to call it after practically everything). ```; molecule ne2 {; 0 1; Ne 0 0 0; --; 0 1; Ne 2 0 0; }. set basis cc-pvdz; sapt_global = energy(""sapt2+(3)"", molecule=ne2). clean() # PSIO error without this line. # these two calls are equivalent; #cbs_string = energy(""mp2/6-311++G** + D:ccsd/6-311+G""); cbs_string = energy(cbs, corl_wfn='mp2', corl_basis='6-311++G**', delta_wfn='ccsd', delta_basis='6-311+G'); compare_values(-257.50097969, cbs_string, 5, 'cbs'); ```. On the caspt2, runs fine for me, too. If you want to see the error try [looking in the testing log file](http://psicode.org/psi4manual/master/build_planning.html#faq-testsoutput). But it's certainly outside the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/949#issuecomment-379830469:134,avoid,avoid,134,https://psicode.org,https://github.com/psi4/psi4/pull/949#issuecomment-379830469,1,['avoid'],['avoid']
Safety,"One RFO step is taken and MOLECULE::validate_angles() detects no ""new"" lin bends on Frag 1 but one ""new"" one in Frag 2: L/l(18,25,26)) (that are already there!). These get added through the INTCO_EXCEPTion handler and a rebuild of internal coordinates is triggered. MOLECULE::add_intrafragment_simples_by_connectivity() calls FRAG::add_simples_by_connectivity() for each fragment(), and then FRAG::add_bend_by_connectivity(). The latter function loops through opt::INTCO_EXCEPT::linear_angles[], adding any new lin bends that are not currently defined for that fragment. On the first pass through, it detects 57 int coords in each fragment; on the second, Frag 1 has 59 (the two extra linear bends...) and Frag 2 has 57. The problem is that opt::INTCO_EXCEPT::linear_angles[] is indexed for the whole molecule, whereas FRAG is indexed just for that fragment, i.e. atom_offsets are used whenever int coords are printed, etc. The linear bend to be added as an exception, L/l(18,25,26), does not exist in Frag 1 (it only has 13 atoms!) so gets added to it. When the int coords are printed out, a seg fault results when an attempt is made to calculate a value using coordinates off the end of the Frag arrays. I'm not sure of the easiest solution here: INTCO_EXCEPT only has molecule-based rather than fragment-based indexing. It could have a fragment index added to it and then use fragment-based indexing for the new lin bends. I think this would also need each FRAG object to contain it's fragment index and/or an atom_offset to the first atom within it. A more involved solution might have an INTCO_EXCEPT per fragment so that it's all a bit more in the spirit of object orientation. I'm a little puzzled as to why it detected a new linear bend in Frag 2 (one that was already there!) but not in Frag 1, i.e. whether it found it but ignored it had distorted far enough away from being linear, in which case, surely it should have deleted it and replaced it with a normal bend! I'll keep on digging...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/680#issuecomment-296160675:2080,detect,detected,2080,https://psicode.org,https://github.com/psi4/psi4/issues/680#issuecomment-296160675,1,['detect'],['detected']
Safety,"Ooh, and builds can take more than an hour. Hopefully we'll be seeing fewer timeouts.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1368#issuecomment-441378062:76,timeout,timeouts,76,https://psicode.org,https://github.com/psi4/psi4/pull/1368#issuecomment-441378062,1,['timeout'],['timeouts']
Safety,"OpenBLAS has seen quite a few bugfixes in the last couple months, especially thread safety related. I would recommend pulling the latest trunk version from github, and then compiling it with GCC, and `USE_THREAD=1 USE_OPENMP=1 and DYNAMIC_ARCH = 1` in Makefile.rule. The DYNAMIC_ARCH is optional, it enables runtime CPU arch detection. ; This could rule out both bugs in older versions of OpenBLAS and the chance that the Intel compilers are messing up OpenBLAS.; IIRC OpenBLAS is rarely used/tested with Intel compilers, since most people who have Intel compilers end up using MKL instead. PS: The comment in Makefile.rule of OpenBLAS even includes a vague remark about Intel and other non-GNU compilers being non-recommended.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-387102336:84,safe,safety,84,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-387102336,2,"['detect', 'safe']","['detection', 'safety']"
Safety,"Opportunity to avoid Libxc5 surprises ourselves and help Libxc out by testing their new parameters interface: https://gitlab.com/libxc/libxc/-/merge_requests/284 . I'll get to it later this week, but if anyone wants to play with the p4/xc connection, go for testing. Ping me on any setup issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-604007934:15,avoid,avoid,15,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-604007934,1,['avoid'],['avoid']
Safety,Outstanding detective work. I bet that was a nightmare to figure out. It's not obvious to me how Boost is related to DGEMMs; what am I overlooking?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-199094320:12,detect,detective,12,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-199094320,1,['detect'],['detective']
Safety,"PR #1289 marks the `opt-full-hess-every` test as disabled on AppVeyor. As I commented in the AppVeyor file, that test requires angular momentum 6, due to the form that second derivative skeleton integrals take. Given AppVeyor's tendency to timeout, I opted to just exclude that test, rather than compile with higher angular momentum and make the timeout problem worse.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-433666463:240,timeout,timeout,240,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-433666463,2,['timeout'],['timeout']
Safety,"Parts are arriving for an AMD server in our lab, so this may get more testing. But for now, OpenBLAS is going to go the way of Accelerate (on Mac) and just get a nice Use At Your Own Risk warning. I daresay Psi could use openblas directives better, but the stack of difficulties (wrong fctls, scaling, numpy compatibility, conda compatibility) is too high when there's a free, compatible, and working alternative in place. Glad to revisit periodically. P. S. There might be a further technical choice why the conda openblas package isn't building the Fortran/LAPACK code with optimizations (https://github.com/psi4/psi4/issues/1009#issuecomment-387075271), but an immediate technical reason is that conda gfortran 7.2.0 isn't distributing `omp_lib.[h|mod]`, so threading isn't avail.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-391015669:183,Risk,Risk,183,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-391015669,1,['Risk'],['Risk']
Safety,"Perhaps I am just an idiot, but I can't seem to import the Python bindings; into a Python script unless the library that contains them (in this case; psi4_main.so or libpsi4.so) has the same name as the boost python module; (psi4). This is why I was insisting on a a psi4.so library. Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 23, 2016 1:58 PM, ""Lori A. Burns"" notifications@github.com wrote:. > To avoid the complications forecasted by my last comment, we're going to; > update this repo to the current development head. This probably still; > breaks the items mentioned in #442 (comment); > https://github.com/psi4/psi4/pull/442#issuecomment-241027531, but I; > know Ryan's already shifted to some of my commits, so I think the trouble; > of Pulsar maybe having to tie their externalproject psi4 to e705b88; > https://github.com/psi4/psi4/commit/e705b88b562a303e1b789417ad9cfe1648251d63; > is less than the trouble if the development head gets lost or nonlinear. So; > FYI, particularly @bennybp https://github.com/bennybp .; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-241819043, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi5xifLl8M1ZtI7tKuEapnaMgrB0Qks5qizSugaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-241853765:434,avoid,avoid,434,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241853765,1,['avoid'],['avoid']
Safety,"Point of clarification, I don't think density screening will allow ""fewer; iterations"", so I suggest deleting those words from the ""Notable Features""; description. But hopefully it will lead to ""less time"" because fewer; integrals will be computed. On Fri, Dec 11, 2020 at 1:09 PM Andy Jiang <notifications@github.com> wrote:. > Description; >; > Implements density screening into the direct SCF Algorithm, no iterative; > Fock build currently, but iterative Fock build will be a future addition; >; > Reference paper:; > https://onlinelibrary.wiley.com/doi/abs/10.1002/jcc.540100111; > Notable Features; >; > - Improve the efficiency (fewer iterations, less time) of the direct; > SCF Algorithm without compromising accuracy; >; > Checklist; >; > - Passes Sanity Check for Water Molecule, will include a Google Sheets; > link as I include more tests; > - Code tested on a diverse set of molecules; >; > Status; >; > - Rough Draft Phase; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/2062; > Commit Summary; >; > - Density Screening Rough Draft; >; > File Changes; >; > - *M* psi4/src/psi4/libfock/DirectJK.cc; > <https://github.com/psi4/psi4/pull/2062/files#diff-5be42036f62111d8e1e5420b7a1e5b178b56fa9b55cbbe2453950147f868481f>; > (92); > - *M* psi4/src/psi4/libfock/jk.h; > <https://github.com/psi4/psi4/pull/2062/files#diff-47381cdba9dc8065e0f8bcf7939d6dfbf532b7f85be2f1df584dfc4dde5b3bfb>; > (3); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4/pull/2062/files#diff-85f451c75b4e468882c42e9eb347a3e4b3e58891bbfe92168329cd0b32ce6cb4>; > (4); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/2062.patch; > - https://github.com/psi4/psi4/pull/2062.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/2062>, or un",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2062#issuecomment-743345990:757,Sanity Check,Sanity Check,757,https://psicode.org,https://github.com/psi4/psi4/pull/2062#issuecomment-743345990,1,['Sanity Check'],['Sanity Check']
Safety,"Possible, but I really doubt it, as glibc mismatches aren't usually healable. Usually this is a symptom of packages depending on different versions of a library and symbols getting sometimes loaded one way and sometimes another depending on import order. Often fixable by swapping import order, but in the psi-in-jupyter case, there's simply nothing to swap. I thoroughly expected this to be fixed when I built with the newer compilers and was alarmed when it wasn't. @sergsb, would you want to try the conda env line in https://github.com/psi4/psi4/issues/862#issuecomment-347074303 ? Possibly more defaults packages have been updated to the new compilers since November and healed the problem. Only thing else I can think of is that I'm still linking libc++ statically (which it should be entirely safe to do, being the least-fundamental of the `glibc`, `libgcc_s`, `libstdc++` trio) and that's running into a symbol error with the jupyter stack.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-369640226:800,safe,safe,800,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369640226,2,['safe'],['safe']
Safety,"Psi4 is really only safe to install with a defaults base, not a c-f base, on Linux. If you added `defaults` to the channel list or `anaconda::intel-openmp`, it'd likely solve, but I think you'd get a runtime error related to symbols and/or mkl- vs openblas-based environment. It's possible to get it working through a careful install order (iirc) or to run two conda envs at once (one defaults-based with psi4 and one c-f based with others) as the ecosystem GHA does. But on the whole, Linux psi4 in c-f env is not suggested.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621#issuecomment-1164880108:20,safe,safe,20,https://psicode.org,https://github.com/psi4/psi4/issues/2621#issuecomment-1164880108,1,['safe'],['safe']
Safety,Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:329: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:628: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:798: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:909: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:925: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp). ================================================================== warnings summary ==================================================================; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/f,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:4201,detect,detecting,4201,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['detect'],['detecting']
Safety,"Psi4 source and am actively phasing it out to; get us back to C98). I'm also under the impression that reading; environment variables is typically done in Python for Psi4 and I think that; is where such things should be done long term anyways. Personally for this problem the solutions on the Psi4 webpage,; http://sirius.chem.vt.edu/psi4manual/4.0b5/external.html, have worked great; for me. In particular setting this in your .psi4rc file is a convenient; way to accomplish this on a per machine basis. I haven't actually rejected the pull so other developers feel free to veto; my veto if I missed something (particularly @lorilab who I suspect is the; pro on these sorts of environment things). Ryan. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 8:21 AM, ""wpoely86"" notifications@github.com wrote:. > On some systems, the default temp location should not be /tmp; > but it is set by either $TMPDIR, $TEMP or $TMP (commenly done on HPC; > systems, where the temp location may be somthing special, a ssd for; > example).; > This patch first checks those 3 environment variables; > and uses its value when set. It falls back to /tmp when; > nothing is set.; > ; > ## std::getenv needs C++11 to be thread safe.; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4public/pull/97; > Commit Summary; > - Use $TMPDIR for default of PSI_SCRATCH when set; > ; > File Changes; > - _M_ src/bin/psi4/psi_start.cc; > https://github.com/psi4/psi4public/pull/97/files#diff-0 (3); > - _M_ src/lib/libpsio/filemanager.cc; > https://github.com/psi4/psi4public/pull/97/files#diff-1 (16); > - _M_ src/lib/libpsio/psio.hpp; > https://github.com/psi4/psi4public/pull/97/files#diff-2 (4); > ; > Patch Links:; > - https://github.com/psi4/psi4public/pull/97.patch; > - https://github.com/psi4/psi4public/pull/97.diff; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/97.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105036059:1924,safe,safe,1924,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105036059,1,['safe'],['safe']
Safety,"Psi4 uses an branch of L2 that hasn't been merged to master and uses CMake detection, not pkgconfig detection. While the detection scheme can be overcome, several build options need to be set for Psi4 such that if you have a L2 install that works with any other QC package, it probably doesn't work with Psi4. See https://github.com/evaleev/libint/issues/190. > Could NOT find Libint2 (missing: Libint2_DIR). I'd guess this is a red herring. Unless you've built from https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L63 tarball, the Psi4 buildsys as-is won't succeed for L2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2675#issuecomment-1212521732:75,detect,detection,75,https://psicode.org,https://github.com/psi4/psi4/issues/2675#issuecomment-1212521732,3,['detect'],['detection']
Safety,"Psi4 uses the python headers, so it must be run with the same Python version that CMake detected at build time. The `__Py_ZeroStruct` strongly suggests to me that you're mixing Py2/3. You can see what Python psi was built with in your `{objdir}/CMakeCache.txt` or in the top line of built executable `{objdir}/stage/.../bin/psi4`. If you continue this thread, also report `otool -L {objdir}/stage/.../lib/psi4/core.so`, please.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316410141:88,detect,detected,88,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316410141,1,['detect'],['detected']
Safety,"Psi4 version 0.4.186 was installed using miniconda on Linux 4.4.5-200.fc22.x86_64 #1 SMP Thu Mar 10 17:54:17 UTC 2016 x86_64 x86_64. Parenthetical polarization qualifiers in Pople basis set names do not parse reliably. While 6-31G(d), 6-31G(d,p) names are accepted, more elaborately polarized basis set names fail unless [+,()] conversion to _underscore_ is already done. ""set basis **6-311G(2d,2p)**"" is in the attached example. ; Instead of seeking file **6- 311g_2d_2p_.gbs**, it aborts from the boost-python module (instead of from ./share/psi4/python/inputparser.py or similar):. > _An error has occurred. Traceback:; > <class 'Boost.Python.ArgumentError'>: Python argument types in; > psi4.set_global_option(str, str, str); > did not match C++ signature:; > set_global_option(Ss, N5boost6python4listE); > set_global_option(Ss, N5boost6python4listE, PN3psi8DataTypeE); > set_global_option(Ss, i); > set_global_option(Ss, d); > set_global_option(Ss, Ss): File ""<string>"", line 28, in <module>_. [h2o.zip](https://github.com/psi4/psi4/files/190703/h2o.zip)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/43#issuecomment-201953614:483,abort,aborts,483,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-201953614,1,['abort'],['aborts']
Safety,"Regarding Ambit, Jet did a lot of the CMakeRewrite stuff, but I don't thing the Psi4 build system has been prepped to detect it. More importantly, I think KillTheBoost has to be done for Ambit before it's worth finializing the CMake for it. **Not Working:** `Ambit`, `v2rdm_casscf` (where not working means you'd have to do some real build work to get them running)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249036194:118,detect,detect,118,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249036194,1,['detect'],['detect']
Safety,"Regarding the debian detection: since CMake decides the folder location,; CMake should also detect it:. The headers are always in /usr/include/chemps2/, but since in; https://github.com/psi4/psi4public/blob/f81842d2e9c255490d450681bc6bdeca551b81e1/src/bin/dmrg/dmrgscf.cc; they are included as ""chemps2/DMRG.h"" etc, it will always need. ```; /usr/include; ```. I suppose CMake will always look there, but it cannot hurt to append this; folder again :-). The library is in the folder. ```; /usr/${CMAKE_INSTALL_LIBDIR}; ```. where the latter part is automatically set by calling. ```; include(GNUInstallDirs); ```. in the CMakeLists.txt. Check; https://github.com/SebWouters/CheMPS2/blob/master/CMakeLists.txt#L10 and; https://github.com/SebWouters/CheMPS2/blob/master/CheMPS2/CMakeLists.txt#L21; for an example. Best wishes,; Sebastian. 2015-07-19 16:23 GMT-04:00 Lori A. Burns notifications@github.com:. > Lingering issues for finalizing CheMPS2:; > ; > -; > ; > Make sure can detect Debian installation of CheMPS2 in ""list of files""; > https://packages.debian.org/sid/libchemps2-dev; > -; > ; > make up new conda package; > -; > ; > add conda package to metapackage; > -; > ; > add chemps2.rst to interfaces in docs; > -; > ; > add chemps2 to binary; > -; > ; > review keywords; > -; > ; > add acceptance for Intel redistributable for chemps2.so; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/150. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/150#issuecomment-123019591:21,detect,detection,21,https://psicode.org,https://github.com/psi4/psi4/issues/150#issuecomment-123019591,3,['detect'],"['detect', 'detection']"
Safety,"Removed the DETCI refs from the docs table, and in select ccsd. . I also updated occ psivars. It was setting `CURRENT CORRELATION ENERGY` for `{df/cd}-ccsd(t)` but it was not setting `CCSD(T) CORRELATION ENERGY`. The test now runs through a more complete set of cross checking. Testing conv (fnocc, ccenergy) and df/cd (fnocc, occ) both with and without frozen core. . Note: The changes to occ required a rebuild, and I am noticing when doing df/cd (either occ or fnocc module) I get a message printed to `stdout`""No atoms detected, returning"". Are we aware of this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/966#issuecomment-381827387:523,detect,detected,523,https://psicode.org,https://github.com/psi4/psi4/pull/966#issuecomment-381827387,1,['detect'],['detected']
Safety,"Reproach well deserved, @jgonthier. Info has been in [CMakeLists.txt](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L71), but that admittedly is an awful error message. I've figured out how to hit it locally (conda directory structure bypasses it all), and a fix will appear soon to a PR near you. Thanks for the report. @edeustua, `-DOpenMP_LIBRARY-DIRS` probably _is_ the intended solution. The usual case where this issue appears is you're building Psi with GCC compilers and MKL LAPACK. For a usual from-intel (as opposed to from-conda) MKL installation, libraries mkl_rt and iomp5 are in different locations. With GCC+MKL, Psi needs to explicitly use iomp5 to suppress the tenacious gomp. But unless the location of iomp5 is already known to CMake through another detection sequence, it can't find the library, hence the (poor) error message you got. `OpenMP_LIBRARY_DIRS` is the intended solution. If I'm misunderstanding your circumstance, please let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1118#issuecomment-410467976:779,detect,detection,779,https://psicode.org,https://github.com/psi4/psi4/issues/1118#issuecomment-410467976,1,['detect'],['detection']
Safety,Restarted. The land of timeouts is annoying. Is the build time going back up?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-369358445:23,timeout,timeouts,23,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-369358445,1,['timeout'],['timeouts']
Safety,"Right, this is purely a formatting pass (see #1144) according to the [clang-format file](https://github.com/psi4/psi4/blob/master/.clang-format). If you'd like to do it yourself to avoid disrupting authorship, just `clang-format -i *.h *.cc` in the fnocc directory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1158#issuecomment-415849759:181,avoid,avoid,181,https://psicode.org,https://github.com/psi4/psi4/pull/1158#issuecomment-415849759,1,['avoid'],['avoid']
Safety,"Same timeout as before. `pywrap-alias` doesn't seem to enter `detci`, so I doubt that's the problem. Any other advice on diagnosing this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1991#issuecomment-683894617:5,timeout,timeout,5,https://psicode.org,https://github.com/psi4/psi4/pull/1991#issuecomment-683894617,1,['timeout'],['timeout']
Safety,"Seeing as this PR is almost four years old, it's safe to say somebody else will need to take over this PR, if we want it in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/658#issuecomment-798431091:49,safe,safe,49,https://psicode.org,https://github.com/psi4/psi4/pull/658#issuecomment-798431091,1,['safe'],['safe']
Safety,"Should be doable: in ERKALE I run an eigendecomposition of a 100x100 random matrix in sequential mode and repeat the calculation in a parallel OpenMP section. If the decompositions of the individual threads don’t match the sequential one, then LAPACK is not thread safe. Susi Lehtola; Sent from my phone so excuse my brevity. On 20 Jan 2019, at 15.03, Michael Banck <notifications@github.com<mailto:notifications@github.com>> wrote:. Couldn't you have a configure-time check for this (in case it can be broken down to a very small testcase), same as is usual in autoconf-world?. —; You are receiving this because you commented.; Reply to this email directly, view it on GitHub<https://github.com/psi4/psi4/issues/1461#issuecomment-455864865>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AArOJ2QSkRaIyanSHwFBRQyrKH2-9W1_ks5vFGkggaJpZM4ZxGFP>.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1461#issuecomment-455865306:265,safe,safe,265,https://psicode.org,https://github.com/psi4/psi4/issues/1461#issuecomment-455865306,1,['safe'],['safe']
Safety,"Show seg faults, buffer overflows, and doubly linked list errors: https://travis-ci.org/psi4/psi4/jobs/471402754. Azure Gibbs failure looks like:; ```; 2018-12-23T01:04:44.9842835Z 61/142 Test #210: gibbs ............................***Failed 33.09 sec; 2018-12-23T01:04:44.9843015Z Optimizer: Optimization complete!; 2018-12-23T01:04:44.9843106Z 	N2 Gibbs Free Energy..............................................PASSED; 2018-12-23T01:04:44.9843160Z Optimizer: Optimization complete!; 2018-12-23T01:04:44.9843216Z 	H2O Gibbs Free Energy.............................................PASSED; 2018-12-23T01:04:44.9843489Z Optimizer: Optimization complete!; 2018-12-23T01:04:44.9843563Z 	NH3 Gibbs Free Energy.............................................PASSED; 2018-12-23T01:04:44.9843609Z Traceback (most recent call last):; 2018-12-23T01:04:44.9843656Z File ""D:/a/1/b/build/stage/bin/psi4"", line 287, in <module>; 2018-12-23T01:04:44.9843903Z exec(content); 2018-12-23T01:04:44.9843947Z File ""<string>"", line 71, in <module>; 2018-12-23T01:04:44.9843996Z File ""D:\a\1\b\build\stage\lib\psi4\driver\driver.py"", line 1096, in optimize; 2018-12-23T01:04:44.9844066Z moleculeclone.update_geometry(); 2018-12-23T01:04:44.9844095Z ; 2018-12-23T01:04:44.9844134Z RuntimeError: ; 2018-12-23T01:04:44.9844201Z Fatal Error: User specified point group (C2v(Z)) is not a subgroup of the highest detected point group (Cs(Z)). If this is because the symmetry increased, try to start the calculation again from the last geometry, after checking any symmetry-dependent input, such as DOCC.; 2018-12-23T01:04:44.9844301Z Error occurred in file: D:\a\1\s\psi4\src\psi4\libmints\molecule.cc on line: 2016; 2018-12-23T01:04:44.9844337Z ; 2018-12-23T01:04:44.9844403Z Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. as shown in the logs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-449670954:1382,detect,detected,1382,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-449670954,1,['detect'],['detected']
Safety,"Since the problem is that CMake is not detecting the proper flags, this issue also affects all the other options; ```; option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization (with MSVC, it enables AVX2 instructions)"" ON; ""-xHost"" ""-march=native"" ""/arch:AVX2""); option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer""); option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2023#issuecomment-716894798:39,detect,detecting,39,https://psicode.org,https://github.com/psi4/psi4/issues/2023#issuecomment-716894798,1,['detect'],['detecting']
Safety,"So I was thinking about getting rid of `""component""` too. The difference between something like ""MP2"" and ""B2PLYP"" is that while there's a name for the SCF component of MP2 (it's HF), there's no such thing for the SCF part of B2PLYP. Also, before components were introduced, the keys in the `VARH` dict had to be valid methods, having a check against component gets around this issue. I think a much cleaner interface may be to rework how the extrapolation functions (`corl_xtpl_helgaker_2` etc.) work. Rather than passing in an energy/gradient/Hessian, we could pass in the `wfn` + the variable to extrapolate, and instead of trying to shoehorn the dft extrapolation into the existing interface, it could be neatly contained in a single extrapolation function. The only issue I see with this is that the printing of the CBS stages would have to move from `cbs()` into the extrapolation function itself. This is perhaps better discussed once DDD is in?. ------. I have made changes to the duplication detection, merging the two loops. Instead of a simple counter, it's now an array of job-indices, with the first element being the highest priority (ie the one with the matching wfn). Also, @hokru your ""requested"" syntax now works, see the added test which combines components arbitrarily. `ctest -L cbs` passes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-973871657:1001,detect,detection,1001,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-973871657,2,['detect'],['detection']
Safety,"So far I think this looks great - type safe python with a lot of testing, and a great modular design for the solvers. I really like the line broadening plot generation. If there's some kind of provenance info that can be added to the json reference data file that would be handy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-644203551:39,safe,safe,39,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644203551,1,['safe'],['safe']
Safety,"So is libint2 detecting correctly now and psi4 is compiling, or are you still having problems? If the latter, is it a clean objdir?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2879#issuecomment-1437927691:14,detect,detecting,14,https://psicode.org,https://github.com/psi4/psi4/issues/2879#issuecomment-1437927691,1,['detect'],['detecting']
Safety,"So to reiterate, you are circumventing a safety feature of Psi4 this way. The analytical gradients are very likely wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-347016473:41,safe,safety,41,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-347016473,1,['safe'],['safety']
Safety,"Somewhere I saw a question about whether psi4 in psi4conda could update. . tl;dr no, create a new environment instead, as you'll get the latest, and it's far more predictable. Technically, yes, `conda update psi4 -c psi4` should get you the latest stable release, v1.3.2 from mid-2019, or `conda update psi4 -c psi4/label/dev` should get you the latest nightly build from this week. However, practical advice is that whenever your psi4 is more than a few months old, don't update, just create a new environment, `conda create -n <env-name-of-your-choice> python=3.<python-version-of-your-choice> psi4 -c psi4/label/dev`, activate that env, and use that new psi4 instead of the (remaining, still functional) psi4 in the main environment of psi4conda. The reasons that a freshly solved environment is better is that: (1) Far upstream packages like mkl or numpy or hdf5 update over time and new psi4 may not be built against the older ones in the psi4conda env, so you don't get the newest psi. (2) To make psi4-served conda packages easy to use for both compiling and installing binary psi4, I don't pin dependencies very tightly, so the constraints of the env may not allow all the latest packages to be pulled or even a consistent set of packages. Same advice for any psi4 install, not just psi4conda.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2071#issuecomment-750716944:163,predict,predictable,163,https://psicode.org,https://github.com/psi4/psi4/issues/2071#issuecomment-750716944,1,['predict'],['predictable']
Safety,"Sorry for being late on this one - I've been doing taxes all day :( The original error comes from a negative argument to the sqrt function, which is very suspicious. It implies that the surface has strange curvature at that point, likely a) due to numerical noise or b) due to the method of choice not being able to globally describe the surface. The first of these is usually to blame - you need *very* tightly converged energies when trying to get higher order derivatives (I'd say 12 digits after the decimal, so make sure all densities / residuals of your method of choice are tightly converged). Very few methods can describe a full dissociation curve, and the very wide range of r values that you're using means that there's potential to probe some bond lengths that are problematic, which could lead to strange behavior like what was observed. I think @loriab is right - keeping the points close to the minimum is much safer. The cubic and quartic force constants that you get from the analysis are derivatives taken *at* the minimum, so points far away are not needed. Moreover, the default behavior is to weight the points in the fit by distance from the minimum, so only those nearby will contribute appreciably. I added that code to get rid of some very messy Lagrangian interpolation code that was used before. The previous code used 5 or 9 points spaced around the minimum, and similar amounts of data were successful for my testing. I think 0.05A might be ok as long as the points chosen bracket the minimum. I'd recommend some testing of this - if you take a really cheap method and try different spacings, you should see a plateau in the results w.r.t. grid spacing; too small a spacing is susceptible to roundoff error, while large spacing pushes the definition of 'finite' in finite differences, but the plateau in between defines the optimal region. When I tested on H2 (in the psithon1 test case, by the way) I found that it was quite insensitive to the grid size, but I was also u",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1600#issuecomment-483086393:926,safe,safer,926,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483086393,1,['safe'],['safer']
Safety,"Sorry for taking such a long time on this. @loriab the `input.dat` in `pcmsolver/scf` now shows how to recover files from scratch:; ```python; pid = str(os.getpid()); scratch_dir = os.path.join(core.IOManager.shared_object().get_default_path(), 'psi.' + pid + '.pcmsolver'); pcm_save = reduce(lambda l1, l2 : l1 + l2, (glob.glob(t) for t in [scratch_dir + '*/' + x for x in ['cavity.off__' + pid, 'PEDRA.OUT__' + pid, 'cavity.npz']])); filter(lambda x : shutil.copy(x, psi4.extras.get_input_directory()), pcm_save); ```; Maybe it's an interesting bit for `p4util/util.py`.; The `input.dat` for the `pcmsolver/dipole` test now uses the `perturb_h`, `perturb_with` and `perturb_dipole` parameters. Surprise, surprise, the test is **failing**. After checking the PCM set up, basis, SCF start guess and all other obvious culprits, I found out that the nuclear energy is **different** from the one in the reference file. Do you and/or @andysim and/or @dgasmith have any idea why this could be?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/665#issuecomment-291492708:103,recover,recover,103,https://psicode.org,https://github.com/psi4/psi4/pull/665#issuecomment-291492708,1,['recover'],['recover']
Safety,"Sorry, I should have read your post more carefully. I didn't notice the 3.27.7 bit. I still don't actually understand it b/c [CMP0144](https://cmake.org/cmake/help/v3.27/policy/CMP0144.html) was introduced in 3.27.0 . Maybe Fedora patched it out b/c it could be disruptive? Anyway, I guess FAE's is the safer approach in #3089",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3092#issuecomment-1836312308:303,safe,safer,303,https://psicode.org,https://github.com/psi4/psi4/issues/3092#issuecomment-1836312308,1,['safe'],['safer']
Safety,"Sorry, didn’t mean to question the need for -fopenmp to compile the openblasusing program. Just concerned about this quote. . “AFAIK, currently the only safe way to call OpenBLAS BLAS/LAPACK routines from OMP parallel regions, is to use an OpenBLAS build compiled with USE_OPENMP=1. This disables the native/pthreads parallelism, and uses OMP instead, this way you get thread safety and nested parallelism should also work.“. If that’s true and if other programs rely on openblas native threading, then the conda openblas can never be used for psi even after PR and rebuild. . Whereas if USE_OPENMP=1 only adds capabilities, there’s a plan forward.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390229801:153,safe,safe,153,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390229801,2,['safe'],"['safe', 'safety']"
Safety,"Sounds good.; A bit more info on why I'm getting a seg fault that might help...I'm not expecting a quick solution but it might help with the process in the long run. The two fragments are detected properly and internal coords determined and printed out including one lin bend in each fragment (plus their complements) (listed as L/l(3,12,13) and L/l(18,25,26)). One RFO step is taken and MOLECULE::validate_angles() detects no ""new"" lin bends on Frag 1 but one ""new"" one in Frag 2: L/l(18,25,26)) (that are already there!). These get added through the INTCO_EXCEPTion handler and a rebuild of internal coordinates is triggered. MOLECULE::add_intrafragment_simples_by_connectivity() calls FRAG::add_simples_by_connectivity() for each fragment(), and then FRAG::add_bend_by_connectivity(). The latter function loops through opt::INTCO_EXCEPT::linear_angles[], adding any new lin bends that are not currently defined for that fragment. On the first pass through, it detects 57 int coords in each fragment; on the second, Frag 1 has 59 (the two extra linear bends...) and Frag 2 has 57. The problem is that opt::INTCO_EXCEPT::linear_angles[] is indexed for the whole molecule, whereas FRAG is indexed just for that fragment, i.e. atom_offsets are used whenever int coords are printed, etc. The linear bend to be added as an exception, L/l(18,25,26), does not exist in Frag 1 (it only has 13 atoms!) so gets added to it. When the int coords are printed out, a seg fault results when an attempt is made to calculate a value using coordinates off the end of the Frag arrays. I'm not sure of the easiest solution here: INTCO_EXCEPT only has molecule-based rather than fragment-based indexing. It could have a fragment index added to it and then use fragment-based indexing for the new lin bends. I think this would also need each FRAG object to contain it's fragment index and/or an atom_offset to the first atom within it. A more involved solution might have an INTCO_EXCEPT per fragment so that it's all a b",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/680#issuecomment-296160675:188,detect,detected,188,https://psicode.org,https://github.com/psi4/psi4/issues/680#issuecomment-296160675,3,['detect'],"['detected', 'detects']"
Safety,"Sounds like some of these problems are hard to detect at compile time, but; perhaps they could be diagnosed by some simple little program that's; designed to look for these kinds of problems and prints out verbose output?. On Tue, Oct 11, 2016 at 10:24 AM, Lori A. Burns notifications@github.com; wrote:. > There's temporary build docs linked off README: ""Downloading and; > Installing"" on the main GH page.; > ; > It's not the specification of Python that's the problem– CMake detection; > and build are going just fine in these cases. CMake knows the exact,; > absolute path location to everything Psi4 or its build needs. The problem; > is conveying that info to the runtime environment. This is done by baking; > in all those absolute paths into the executable/library rpath. _But_,; > when a path (e.g., /usr/lib) has both a useful thing like libpython.so; > and a bad thing (for Psi4) like old gcc or hdf5, then CMake has no way of; > knowing that it needs to place /usr/lib into rpath _behind_ the path to; > new gcc or new hdf5. Thus, we end up with runtime path problems, solvable; > only by LD_LIBRARY_PATH or rpath adjustment and relinking.; > ; > This problem is controllable with conda, because it isolates just what; > Psi4 needs into its own namespaced path and stuffs that into rpath. For the; > general developers CMake build, there's no robust solution that I can see.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/468#issuecomment-252931820, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdh_-XGbfJiWX_fQ9cwjC-YYTBSTtks5qy5wGgaJpZM4KA_tt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252934079:47,detect,detect,47,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252934079,4,['detect'],"['detect', 'detection']"
Safety,"Sure, I put X-s on them. On the other hand it'd be good get final reviews and merges on PRs w/o holds, or avoidable holds will just accumulate.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1144#issuecomment-419255538:106,avoid,avoidable,106,https://psicode.org,https://github.com/psi4/psi4/issues/1144#issuecomment-419255538,1,['avoid'],['avoidable']
Safety,"Sure, we can always fix it later. Just looked like it would be an easy fix. > On Jul 20, 2016, at 6:11 PM, Andy Simmonett notifications@github.com wrote:; > ; > I agree that compatibility is nice, and will press ahead with adding the symmetry back in if that's the consensus. My hesitation to do so stems from the fact that only OUT_OF_CORE can use the symmetry, and it's the worst algorithm we have in JK. Symmetrizing is a lot more work than using transform() to transform the matrices (which doesn't seem to play nicely with mixed symmetric/c1 matrices), because the perturbations themselves must also be transformed to SALCs. None of that is hard, but it does make the response code messier; I currently check to see if the JK engine runs in C1 anyway, and avoid symmetrization for those cases.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub https://github.com/psi4/psi4/pull/437#issuecomment-234099704, or mute the thread https://github.com/notifications/unsubscribe-auth/ATl9UO6JWO3v3-jWQ1Ieb9uCVbAm3YUGks5qXp0VgaJpZM4JFTfJ.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-234099972:761,avoid,avoid,761,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-234099972,1,['avoid'],['avoid']
Safety,"Surprising that the low memory algorithm is faster! . I think in that case the output should be adapted to avoid confusion as there are warnings printed. Maybe also 'regular algorithm' can have a different name, but it's what other programs do, I suppose. https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/lowmemory_triples.cc#L72; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/df_ccsd.cc#L659-L661; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/ccsd.cc#L780",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2003#issuecomment-687585556:107,avoid,avoid,107,https://psicode.org,https://github.com/psi4/psi4/pull/2003#issuecomment-687585556,1,['avoid'],['avoid']
Safety,"Testing the gradients of dlDF/cc-pVDZ, I see similar differences between analytic and numerical gradients with modern Psi4 (1.2a1.dev829):. - Density fitting error <= 10^{-6}; - Differences b/t analytic & numerical as large as ~10^{-4}; - Nearly no difference between analytic gradients computed w/ standard and dense grids; numerical gradients differ by nearly 10^{-4} between dense and standard grids. For anyone interested, I've uploaded a file containing the raw gradients [here](https://github.com/psi4/psi4/files/1919924/dlDF_summary.txt) for perusal. These observations would seemingly point towards libXC kernel instabilities for meta-GGAs, instead of a more targeted problem with our M05-2X gradients in particular, exactly in line with @dgasmith's prediction.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/962#issuecomment-381998886:758,predict,prediction,758,https://psicode.org,https://github.com/psi4/psi4/issues/962#issuecomment-381998886,1,['predict'],['prediction']
Safety,"Thank you again loriab. Finally it was possible to me compile the plugin . I had some issues. After your last comment I get insecure about if I used the corrected code previously (before I tried from the link (https://github.com/loriab/psi4/commit/1b6328cdae9895ca1cabfb31656710fa8f00e30c), so I used the link you shared in the last message. I clean the directory and started again with the new code. The `make` command gave again the same error message. `grep` does not return matches in the original `.cc` file so I inspected the automatically generated `.cc` file. I noticed some differences (many of them seems to be intentionally changed) but not all of them. In essence, by comparing with the file you edited, I replaced in the new `.cc` file `wfn` with `ref_wfn`few times and add `SharedWavefunction ref_wfn` as the first argument of the function `printmo` (the name of my plugin). The final result is: http://pastebin.com/bX9jDxi5 .; I do not know if the above is because a bug of the generator of files for the plugin or just me, as I found very extraneous the changes between files, but inspecting the files I really do not find in the original `cc` file what appeared in the generated one, and I cleaned everything to avoid versions problems . The original is: http://pastebin.com/Yb4pLq6j .; Excuse because of the long message but I tried to put my grain of sand. Now I'll try the plugin :-) , thank you very much again",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-195957592:1229,avoid,avoid,1229,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195957592,1,['avoid'],['avoid']
Safety,"Thank you, I am glad to hear that the issue is known and fixed. For the future, though, I am troubled that this issue exists without warning in a build that looks safe (marked ""Stable Release""). How can I be more confident in Psi4 results? Is there a test suite including issues like SCF instability (more exhaustive than `psi4 --test`), that I could use to verify a Psi4 build before running large workflows?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2211#issuecomment-869272035:163,safe,safe,163,https://psicode.org,https://github.com/psi4/psi4/issues/2211#issuecomment-869272035,1,['safe'],['safe']
Safety,"Thank you, Zach. I'm sorry you hit the results of my loose precision choice, but thanks for investigating. I'll run a conda-build to avoid surprises.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2139#issuecomment-804319190:133,avoid,avoid,133,https://psicode.org,https://github.com/psi4/psi4/pull/2139#issuecomment-804319190,1,['avoid'],['avoid']
Safety,"Thank you. After removing the reference to sapt_dft.cc, I ran (in a directory ""psi4public/build""). > > ../configure.cmake, and got. []; ['-DCXXFLAGS=-O2']; Executing ['cmake', '/home/bingao/Work/XKjem/psi4public', '-DCXXFLAGS=-O2', '-DF77FLAGS=-O2', '-DF77SYMBOL=detect', '-DMAX_AM_ERI=5', '-DPREFIX=/usr/local/psi4']; -- A library with BLAS API found.; -- A library with LAPACK API found.; -- checking Fortran FUNCTION_ linkage: SUB_; -- checking Fortran function_ linkage: sub_; -- Lower case with underscore is used; -- Could NOT find Boost; CMake Warning at CMakeLists.txt:204 (message):; Boost not found. The pre-packaged version will be built. It looks OK, but I got the error of compiling boost:. > > make; > > Scanning dependencies of target boostlibs; > > make[2]: **\* No rule to make target `../boost/boost_1_54_0.tar.gz', needed by`boost/boost_1_54_0'. Stop.; > > make[1]: **\* [boost/CMakeFiles/boostlibs.dir/all] Error 2; > > make: **\* [all] Error 2. Do you know how to solve this problem? Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/55#issuecomment-40186517:263,detect,detect,263,https://psicode.org,https://github.com/psi4/psi4/issues/55#issuecomment-40186517,1,['detect'],['detect']
Safety,"Thanks Daniel! I looked at the changes and couldn't imagine what was; causing this. I'll follow your suggestion. Best,; Nick. On Wed, Nov 30, 2016 at 11:13 PM, Daniel Smith <notifications@github.com>; wrote:. > This is actually a PyBind11 version error. It doesn't appear that our; > CMake is detecting the discrepancy. Please blow away your objdir and; > recompile from scratch.; >; > -Daniel Smith; > Sent from my iPhone.; >; > > On Nov 30, 2016, at 23:06, nmayhall <notifications@github.com> wrote:; > >; > > After a recent git pull, psi4 failed to compile. It seems that the error; > was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi; > so all Python Exceptions raise to stdout and psi out"". If I revert to the; > commit just before this I'm able to compile.; > >; > > If it helps, I'm running Ubuntu, with gnu compilers.; > >; > > Here's the error message:; > >; > > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In; > function ‘bool py_psi_set_local_option_array(const string&, const; > string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a; > member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/; > psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool; > py_psi_set_global_option_array(const string&, pybind11::list,; > psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13:; > error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])); > { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36:; > error: expected primary-expression before ‘>’ token if; > (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374:; > recipe for target 'src/CMak",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/536#issuecomment-264074858:293,detect,detecting,293,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074858,1,['detect'],['detecting']
Safety,"Thanks a lot for you hard detective work to track this down. I'm happy to merge the PR, but I'd like to dig around and see if I can figure out why the off-diagonals appear in the first place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/678#issuecomment-292588286:26,detect,detective,26,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-292588286,1,['detect'],['detective']
Safety,"Thanks for [the PR](https://github.com/loriab/psi4/pull/8), @bozkaya. Unfortunately, it (1) contains commits from authors other than yourself, indicating that the branch isn't based off loriab:ugurfno and (2) the final commit, which should contain just your changes from this week, shows over 3k files and 1M LOC changed. This is seriously wrong and probably not worth trying to recover from. Perhaps start over with [these directions](https://github.com/psi4/psi4/pull/1390#issuecomment-444903155). Get my branch and add your changes. The commits tab in the PR to me should be one or a few commits solely by you from this week, and the LOC diffs should be in the hundreds (or low thousands if you add many tests). Psi uses ordinary git and the PR workflow, so internet resources and [our resources](http://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow) are available.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1390#issuecomment-447379000:379,recover,recover,379,https://psicode.org,https://github.com/psi4/psi4/pull/1390#issuecomment-447379000,1,['recover'],['recover']
Safety,"Thanks for answers! After disabling SIP in the recovery mode, I can debug the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/491#issuecomment-258681033:47,recover,recovery,47,https://psicode.org,https://github.com/psi4/psi4/issues/491#issuecomment-258681033,1,['recover'],['recovery']
Safety,"Thanks for handling this, Ashutosh. Libtrans is showing its age, so it's great to see it being modernized. There are many CI and CC tests that don't run on Travis, so as a sanity check it'd be great if you could run the full test suite from the build directory: `ctest -j 12` if you have 12 cores available.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/718#issuecomment-303894263:172,sanity check,sanity check,172,https://psicode.org,https://github.com/psi4/psi4/pull/718#issuecomment-303894263,1,['sanity check'],['sanity check']
Safety,"Thanks for looking into it. It looks like none of these involve `Array2d::diagonalize`, so this PR is good on that front. This PR does not touch `Matrix::diagonalize`, so those calls are safe from it. But, some `Tensor2d::diagonalize` calls would indeed fail after this PR. I think the easiest option here is to back out the removal of `Tensor2d::diagonalize` overloads for now. FYI, my plan was to _eventually_ change the function signature of `Tensor2d::diagonalize` after this PR. The `init_dim` and `cutoff` arguments have been defunct (as in no-op, unused) for ages. But that can wait until dfocc is no longer in such flux, I can excise `sq_rsp` while keeping the current interfaces.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2684#issuecomment-1500354378:187,safe,safe,187,https://psicode.org,https://github.com/psi4/psi4/pull/2684#issuecomment-1500354378,1,['safe'],['safe']
Safety,"Thanks for the bug report! I knew there was no way I got that thoroughly right. Add `message(STATUS ""Detecting MathOpenMP -- ?OpenMP=${ENABLE_OPENMP}, ?MKL=${isMKL}, CXX=${CMAKE_CXX_COMPILER_ID}"")` near the top of https://github.com/psi4/psi4/blob/master/external/common/lapack/FindMathOpenMP.cmake and also uncomment the debug printing at the end of that file. Rerun the cmake to generate a fresh objdir and start the build, but no need to let it go past compiling the first psi4 dir. Post the sections like you did above, please.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396713304:101,Detect,Detecting,101,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396713304,1,['Detect'],['Detecting']
Safety,"Thanks for the feedback, Jeff. I've had a very mixed experience with CMake, in that it's super easy to use when it does what I want, but requires way too much hacking when it doesn't. I hate having to pass -D flags into cmake directly so I wrote a configure.cmake wrapper (in the top level directory) to emulate the behavior of GNU's configure. If I run that script, from an object directory, life is good. If I run CMake directly, I get the exact same problem that you report. Strangely enough, the wrapper doesn't pass any BLAS info into CMake, so I don't understand why the BLAS detection succeeds in one instance but not in the other. I'll do some fishing and report back.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36#issuecomment-35465591:582,detect,detection,582,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-35465591,2,['detect'],['detection']
Safety,Thanks for the heads up! Ping @bast. Do you have an example for the nondeterministic behavior? Might be something that happens also to other codes using these math detection macros.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/767#issuecomment-316203705:164,detect,detection,164,https://psicode.org,https://github.com/psi4/psi4/pull/767#issuecomment-316203705,1,['detect'],['detection']
Safety,"Thanks for the input, @hokru. It sounds like you're just the kind of user that we're trying to avoid tripping up. Which `dftd3` gets executed always depends on the contents of your environment variables, i.e., `$PSIPATH:$PATH`. So a hand-compiled one can always take precedence by manipulating those. Or for the miniconda binary case where `conda install psi4` installs `dftd3` alongside, you can always promptly `conda remove dftd3` to eliminate any potential interference from the generic exe.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/383#issuecomment-220698751:95,avoid,avoid,95,https://psicode.org,https://github.com/psi4/psi4/pull/383#issuecomment-220698751,1,['avoid'],['avoid']
Safety,"Thanks for the quick response, that makes sense!. >You're interested in MBIS CHARGES as standalone (w/o volumes and extents) to avoid the cost of all the atomic calcs since you don't need the volume?. Sort of the only bit I need is the charges and volumes but not the volume ratio so not the free atom calculations added in #2127. So basically the performance before that PR my idea would be that the ratios are only calculated if something like `MBIS RATIOS` is passed which like you say would also avoid the cost of the extra calculations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2272#issuecomment-896987117:128,avoid,avoid,128,https://psicode.org,https://github.com/psi4/psi4/issues/2272#issuecomment-896987117,2,['avoid'],['avoid']
Safety,"Thanks for the report, @GregorySchwing. Is there any chance you've got qcportal or qcfractal installed? I ask because psi4 itself should be pydantic v2-tolerant (that is, psi4 imports the v1 API from v2), while qcfractal won't be until the v0.52 release. But that's in theory. In practice, I haven't tested lately with v2, and pydantic is moving quickly and is widely used, so it might be safer to pin it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1826998338:389,safe,safer,389,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1826998338,1,['safe'],['safer']
Safety,"Thanks for the report. We did some considerable infrastructure changes that show up in `0.4` (hence the tag, so it'd be easy to let people know how to avoid them if they went wrong). The nature of the errors you're getting indicates they're definitely infrastructure-related. Could you post the input file for the oeprop error?. In trying to revert, even the architecture independent files (the python driver) will be inconsistent between pre and post `0.4`. So maybe try installing a `0.3` afresh into a new conda environment. And make sure you don't have `PSIDATADIR` envvar defined anywhere, just in case you occasionally work from cloned/compiled copies.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182649776:151,avoid,avoid,151,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182649776,1,['avoid'],['avoid']
Safety,"Thanks for the response. I will try out conda install again. . In the meantime, I want to explain why I turned to #2024. ; I encounter this issue while installing just normal psi4: (this is from mamba install); ```; package libgfortran4-7.5.0-h1a10cd1_23 has constraint libgfortran 4.0.0 *_23 conflicting with libgfortran-3.0.1-0; ```. How I get to this point: ; First I used `conda install psi4 -c psi4`, but it will throw me this errors. (nothing is conflicting?) So I turned to `mamba` to help me with the conflicts. ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: -; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions; ```. This is what mamba got back to me if I installed the normal build. `mamba install psi4=1.5+e9f4d6d=py38ha809fef_0 -c psi4`. ```; package psi4-1.5+e9f4d6d-py38ha809fef_0 requires chemps2 >=1.8.10,<1.8.11.0a0, but none of the providers can be installed; ```. So then I tried to install `chemps2`, this can be installed normally. . Then I tried mamba to install psi4 again. . `mamba install psi4=1.5+e9f4d6d=py38ha809fef_0 -c psi4`. ```; package psi4-1.5+e9f4d6d-py38ha809fef_0 requires libgfortran >=3.0.1,<4.0.0.a0, but none of the providers can be installed; ```. Lastly, I tried to install libgfortran, but resulted in the above message. ; ```; package libgfortran4-7.5.0-h1a10cd1_23 has constraint libgfortran 4.0.0 *_23 conflicting with libgfortran-3.0.1-0; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2578#issuecomment-1125640496:1040,abort,abort,1040,https://psicode.org,https://github.com/psi4/psi4/issues/2578#issuecomment-1125640496,1,['abort'],['abort']
Safety,"Thanks for the thorough report and fix. The seemingly extra declaration @susilehtola pointed out confused me, too, though perhaps https://stackoverflow.com/a/17392441 is the answer. The map looks to be from the boost-to-avoid-c++11-standard era, so it could be improved (https://github.com/psi4/psi4archive/blame/1.0.x/src/lib/libfock/cubature.h#L302).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736#issuecomment-1268452077:220,avoid,avoid-c,220,https://psicode.org,https://github.com/psi4/psi4/pull/2736#issuecomment-1268452077,1,['avoid'],['avoid-c']
Safety,"Thanks for the update, @loriab, I appreciate it. At the moment, I'm running outside of `jupyter` and that is fine for now (I didn't have a chance to try installing `psi4` and `jupyter` into separate environments and then adjusting the latter's path to include `psi4` modules). . At the risk of going off topic, I have a tangentially related question. I'm trying to do a torsion scan to derive a potential energy surface and I believe that `psi4` is running really slowly, although since I don't have experience running `psi4`, I don't have a good baseline. I externally created the structures, so `psi4` is really just doing a geometry optimization with `set optking fixed_dihedral = ...` and single point energy for each file, one at a time. Without going into all the details, I'm running at a pretty low level of theory (in my opinion) of B3LYP/3-21G, and for the structures that converge, I'm seeing ~8 hours per file, after allocating 12 cores and 8 GB of memory to `psi4`. So my question is whether there is any speed or efficiency difference of calling the `psi4` executable directly from bash versus through Python / Psithon. . (As a comparative data point, I did the ""same"" calculation with Gaussian 09 on 16 cores and it completed the scan overnight. I say ""same"" because I let Gaussian do the hard work of scanning the dihedral itself, beginning from the initial coordinates instead of using separate files, and I used HF/6-31G.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-347710296:286,risk,risk,286,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-347710296,1,['risk'],['risk']
Safety,"Thanks for the update. I second what Susi said. In certain cases it is necessary to decontract the primary basis. Then the DF basis needs to be decontracted as well. We have not done extensive tests on this procedure and there is always the risk that linear dependency problems may arise, for which we do not yet have a good solution. On Oct 10, 2016, at 4:18 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. @WDerricottehttps://github.com/WDerricotte , @fevangelistahttps://github.com/fevangelista. I'm reworking the decontract functionality since that only existed c-side, but all basis sets are now built py-side. Basically, BASIS_X2C (formerly REL_BASIS) will always default to the decontracted orbital basis, if not set outright (set basis_x2c my_gigantic_uncontracted_basis). Is there ever a reason, then, to set the primary/orbital basis to a decontracted one (set basis cc-pvdz-decon)? If so, what fitting basis should a cc-pvdz-decon use: cc-pvdz-jkfit, cc-pvdz-jkfit-decon, unknown so give up? All the X2C test cases are with scf_type pk, none with DF. Thanks for any hints. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHubhttps://github.com/psi4/psi4/issues/43#issuecomment-252771310, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADgtWdzkkeobqEpzo11t0Vgbt5eRhvl-ks5qysfDgaJpZM4BpdBt. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/43#issuecomment-252802760:241,risk,risk,241,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252802760,1,['risk'],['risk']
Safety,Thanks much!. * at first read-through functional integration parts look good; * we'll want to move the running of postg over to qcengine to imitate `dftd3` more than `gcp`. this'll integrate better with the hookup-disp-to-fctls machinery to avoid `## hack ##`. sound ok?; * is https://github.com/aoterodelaroza/postg the official repository home for `postg` where development occurs? PRs considered?; * we'll probably want to switch some logic so that XDM doesn't just turn on in the background when dft_xdm parameters change without the driver's knowledge as this could lead to wrongly labeled variables.; * any objection to a `postg` conda package distributed off the `psi4` or `conda-forge` channels? I have bullets if you're not familiar. Looking forward to getting this integrated. thanks again!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1699#issuecomment-521280759:241,avoid,avoid,241,https://psicode.org,https://github.com/psi4/psi4/pull/1699#issuecomment-521280759,1,['avoid'],['avoid']
Safety,"Thanks very much, @bozkaya. Safe travels!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/893#issuecomment-358043177:28,Safe,Safe,28,https://psicode.org,https://github.com/psi4/psi4/issues/893#issuecomment-358043177,1,['Safe'],['Safe']
Safety,"Thanks! It all looks good at first look-through. I'll integrate it with Psi4's build system tonight and report back any issues. * By the way, I think if you remove the LICENSE file (naming it something else or putting the info elsewhere), GitHub will auto-detect the LGPL-3.0 license, as in [this skeleton repo](https://github.com/loriab/licensetestrepo); * Is `Libint` the official upper/lowercasing from the project? Or just the branding casing? I'm not particular, but CMake only allows one casing, so I have to ask when I notice it changing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/693#issuecomment-298452280:256,detect,detect,256,https://psicode.org,https://github.com/psi4/psi4/issues/693#issuecomment-298452280,1,['detect'],['detect']
Safety,"Thanks, I'll add that as it can ease detection. In this case it's not important as Libint2 only uses Python to process files for the Fortran interface and for some testing -- any Python will do there. https://github.com/evaleev/libint/blob/9f12ee61e1ce52420fe3020712c3584cb3e9a1b4/INSTALL.md",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2796#issuecomment-1326997805:37,detect,detection,37,https://psicode.org,https://github.com/psi4/psi4/issues/2796#issuecomment-1326997805,1,['detect'],['detection']
Safety,"Thanks, already done and up in 1223. Just need to close this one. I ended up separating it to avoid mixing formatting and work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1193#issuecomment-418909480:94,avoid,avoid,94,https://psicode.org,https://github.com/psi4/psi4/pull/1193#issuecomment-418909480,1,['avoid'],['avoid']
Safety,"Thanks. Your input looks reasonable to me. You could add `freeze_core=""true""`, if appealing, for some cost savings. TDC could diagnose more fully. In the meantime, is there any chance you're interested in trying density-fitted `gradient(""df-ccsd(t)"")` instead? https://psicode.org/psi4manual/master/occ.html#id73 That's analytic, or `gradient(""ccsd(t)"", dertype=0)` would do finite difference of the implementation you're running. Once-upon-a-time, UHF-CC(T)-gradients-are-N^8 and/or RHF-CC(T)-gradients-not-specialized-from-UHF was true. I now suspect that when I redid the capabilities tables last year that my test cases were too small to detect over-steep scaling.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2913#issuecomment-1487616511:642,detect,detect,642,https://psicode.org,https://github.com/psi4/psi4/issues/2913#issuecomment-1487616511,1,['detect'],['detect']
Safety,"That actually looks like a C++11 issue. ICC uses GCC for a lot of operations, so even with ICC you need GCC 4.9+. In your CMake compile flags you need to give ICC a link a newer GCC as follows:. ```; -DCMAKE_C_FLAGS=""../gcc5/bin/gcc""; -DCMAKE_CXX_FLAGS=""-gcc-name=../gcc5/bin/gcc -gxx-name=../gcc5/bin/g++""; ```. `cmake` should throw a warning when it detects an older GCC when using ICC. Can you please check the output when `cmake` is first called to confirm its there?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261730911:352,detect,detects,352,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261730911,1,['detect'],['detects']
Safety,"That sounds nice if I'm a sys admin of my own cluster (and hopefully; someday I will be, so I will definitely keep this in mind), but I suspect; our users who are running with these ancient compilers also won't be using; Easybuild. Or is Easybuild something we would distribute with Psi4, much; like we do Boost?. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 25, 2015 8:22 AM, ""wpoely86"" notifications@github.com wrote:. > Easybuild https://hpcugent.github.io/easybuild/ is not an alternative; > to CMake or autoconf. The idea is to have an easy way to make reproducible; > builds and modules. Everything in the stack should also be optimally build,; > meaning utilizing the hardware to its full extend (for example, if AVX2 or; > infiniband is available, we will use it). Easybuild will take care of all; > dependencies. It will avoid using the OS installed (old) versions of; > software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after; > building a compiler (GCC/intel/...) from scratch. We also patch out any; > problem. Psi4 for example hard codes it's build path for the generation of; > new plugins. This is not desirable on a HPC system. Some software is also; > not adjusted to be build by anything other than GCC. We make it work with; > intel too. Some software doesn't even have a real build system other than a; > list of makefiles that usually don't work out of the box. We fix that so; > the build is reproducible .; > ; > It's primarily meant for HPC sites. If somebody adds support for a piece; > of software, other people can reuse it with one command. I use it to build; > Psi4 in production. If you're developing, Easybuild is useful for building; > all up to date versions of dependencies.; > ; > On our systems, if I run: module load PSI, I get a psi4 (a git version; > from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and; > mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for; > example",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105251086:864,avoid,avoid,864,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105251086,1,['avoid'],['avoid']
Safety,"That's curious. Both the source and final files show up as executable to me on Linux (see below), and Mac hasn't had a problem. Are they not showing up as executable to you?. Also note that the CMake-detected python gets baked in to the psi4 shell script as a shebang (see below). This is very handy for development environments where one generally wants to avoid the system python, but maybe you need that patched?. (from builddir); ```; > ls -l stage/bin/psi4 ; -rwxr-xr-x. 1 user user 14865 Jul 30 21:21 stage/bin/psi4; > ls -l ../psi4/run_psi4.py ; -rwxrwxr-x. 1 user user 14861 Jul 30 21:14 ../psi4/run_psi4.py; > head -1 stage/bin/psi4 ; #!/psi/toolchainconda/envs/py310/bin/python; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2685#issuecomment-1215181077:200,detect,detected,200,https://psicode.org,https://github.com/psi4/psi4/issues/2685#issuecomment-1215181077,2,"['avoid', 'detect']","['avoid', 'detected']"
Safety,"That's impressive. If you're aiming for a working installation, maybe install ambit on its own and pass `-DAMBIT_DIR` to the psi4 build so psi4 detects it. Psi4 build development has moved over to #442, so I won't try to diagnose this eternal loop unless it appears in the new build scheme. Thanks for the report– I'll be on the lookout for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/460#issuecomment-238566031:144,detect,detects,144,https://psicode.org,https://github.com/psi4/psi4/issues/460#issuecomment-238566031,1,['detect'],['detects']
Safety,"The Molden documentation is unclear, but based on the code snippets you posted, your understanding of Molden's behavior is in error, and Psi is correct. 1. `rdmodd` is proof-positive that `[5D]` is used. For historical reasons, it means ""use spherical D and F functions"". This is consistent with what the Molden documentation says: ""Use the keyword [5D] on a separate line to specify the use of 'spherical' D and F functions (5 D and 7 F functions)."" While I find the meaning of the keyword unintuitive and confusing, I see nothing to support your assessment that the use of `[5D]` is _incorrect_.; 2. `rdmodd` shows that `[7F]` uses spherical f-functions but makes no statement whatsoever about the `d` functions. While the documentation says that keywords such as `[7F]` enable the use of mixed spherical and cartesians for the d and f, the documentation does not specify whether `[7F]` does this by implicitly assuming `6D` or by not changing the `D` at all, which may well be in Cartesians.; 3. Your third bullet point seem to have been miswritten. You want ""spherical or Cartesian"" and not ""Cartesian or spherical"". By specifying [5D], [7F], and [9G], Psi gives Molden the following instructions:; * Use spherical D and F shells.; * Use spherical F shells. (This is redundant but harmless, and therefore, your issue is in error.); * Use spherical G shells. I'll leave the issue open in case you point out something I've overlooked.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2612#issuecomment-1159340413:1271,redund,redundant,1271,https://psicode.org,https://github.com/psi4/psi4/issues/2612#issuecomment-1159340413,1,['redund'],['redundant']
Safety,"The `psi::PsiOutStream` class provides high-level logic that cannot be enforced via/imposed on a `std::streambuf` object and hence `std::cout` can not be redirected to it. The point of `psi::PsiOutStream` is to micro-manage Psi4's output file in all environments. This simply cannot be done if we allow access to the `std::streambuf` instance within `psi::outfile`, doing so would circumvent the entire point of the `psi::PsiOutStream` class and pave the way for very hard to detect bugs. If you want to print continuously you will have to redirect your printing via a wrapper or simply pass your printing to `psi::outfile`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77#issuecomment-83124188:476,detect,detect,476,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83124188,2,['detect'],['detect']
Safety,"The code checks the number of GPUs and throws an exception if there are none. Regarding the memory, the code in its current form requires at least as much CPU memory as the GPU has. For GP100, that is 16 GB. I’ll reduce this test case to 16 GB, but I need to think carefully how to reduce it safely to a “normal” amount. > On Jun 14, 2018, at 11:16 AM, Lori A. Burns <notifications@github.com> wrote:; > ; > @loriab commented on this pull request.; > ; > In tests/gpu_dfcc/gpu_dfcc1/input.dat <https://github.com/psi4/psi4/pull/997#discussion_r195463106>:; > ; > > @@ -0,0 +1,34 @@; > +#! cc-pvdz (H2O)2 Test DF-CCSD vs GPU-DF-CCSD; > +; > +sys.path.insert(0,'../../../.'); > +; > +import gpu_dfcc; > +; > +molecule {; > + O 0.000000000000 0.000000000000 -0.068516219310 ; > + H 0.000000000000 -0.790689573744 0.543701060724 ; > + H 0.000000000000 0.790689573744 0.543701060724 ; > +}; > +; > +memory 32000 mb; > What happens on a computer with only CPUs? Do we need to disable if hardware not detected? Only import the plugin if num_gpus>1? Or is it just harmless or non-obliging if no GPUs to work with? Clearly I've just no experience with hardware-dependent tests.; > ; > In any case, I hope memory req. can be toned down?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/pull/997#pullrequestreview-128837847>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGg6UFdaiUjSouvB5u5K8uNAWsj5mks5t8n5DgaJpZM4Tutpb>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/997#issuecomment-397334449:292,safe,safely,292,https://psicode.org,https://github.com/psi4/psi4/pull/997#issuecomment-397334449,2,"['detect', 'safe']","['detected', 'safely']"
Safety,"The convention is definitely older and may connect to other quantum chemistry codes. I believe that ACES and ACESII used the same format for the Hessian file, at least many years ago. Perhaps the source is in one of the really old codes, like the HONDO code or Pulay’s TEXAS code?. -Daniel. > On Apr 15, 2018, at 10:59 PM, Rollin King <notifications@github.com> wrote:; > ; > The tone of the documentation to which Lori alludes sounds like Justin; > Fermann to me, but the convention is probably older than the arrival of the; > Quantum Trio to the CCQC.; > ; > On Sun, Apr 15, 2018 at 9:57 PM, Jonathon Misiewicz <; > notifications@github.com> wrote:; > ; > > I'll look into this. There aren't many people who might know here, which; > > (sadly) cuts the detective work short.; > >; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub; > > <https://github.com/psi4/psi4/pull/953#issuecomment-381466482>, or mute; > > the thread; > > <https://github.com/notifications/unsubscribe-auth/ADguTL4Ay7mIKdYFXiDGj9BYRY6wVpGIks5tpAingaJpZM4TPKkE>; > > .; > >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/pull/953#issuecomment-381466773>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ACtz7aXaLZcW6C3S6H9CqrBL_msPg9mHks5tpAkrgaJpZM4TPKkE>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/953#issuecomment-381467681:756,detect,detective,756,https://psicode.org,https://github.com/psi4/psi4/pull/953#issuecomment-381467681,1,['detect'],['detective']
Safety,"The current code detected 4 different fragments for the extended CH3F.; Then it tried to connect them. It really should have been able to do so.; I don't see why it didn't work, and I'm looking for a bug. On Sun, Mar 13, 2016 at 2:00 PM, Lori A. Burns notifications@github.com; wrote:. > Certainly the flexibility of the optimizer oughtn't be reduced. In the; > absence of fixed/frozen keywords or user supplied/edited intco (do you need; > a keyword to signal do-read-intco instead of accepting any it finds?), it's; > probably reasonable to assume a full optimization is desired. Maybe grep; > '~' needs to catch a gradient.rms(), too, next to the optking-active rms; > gradient.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-196021110.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196036551:17,detect,detected,17,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196036551,1,['detect'],['detected']
Safety,"The environment that I am working on had `mpmath`, and installing `mpmath` is successful. When running `conda list`, `mpmath` shows up. How would I be able to make sure cmake is properly detecting? I have created a new environment for this installation, and only used this environment during the duration of the build.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-382185804:187,detect,detecting,187,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-382185804,1,['detect'],['detecting']
Safety,"The following should do the trick already, no?; ```; set(CMAKE_CXX_STANDARD 11); set(CMAKE_CXX_STANDARD_REQUIRED TRUE); set(CMAKE_CXX_EXTENSIONS FALSE); ```; You basically require C++11 _without_ GNU extensions from the compiler. Configuration should abort if the compiler doesn't have the relevant flag. These three lines would possibly eliminate the need for checking for compiler versions in [cmake_cxxstandard.cmake#L3-L11](https://github.com/psi4/psi4/blob/master/cmake/custom_cxxstandard.cmake#L3-L11). But, yes, I agree, is too large of a leap right now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281118096:251,abort,abort,251,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281118096,1,['abort'],['abort']
Safety,"The gdma wrapper expects an output file and/or fails to detect `stdout` correctly; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/gdma_interface/wrapper.cc#L51. A work around is to specify an output file for the python script; `psi4.core.set_output_file(""script.out"")`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1334#issuecomment-436198661:56,detect,detect,56,https://psicode.org,https://github.com/psi4/psi4/issues/1334#issuecomment-436198661,1,['detect'],['detect']
Safety,"The handling for the user should be the same as for -D3/D3BJ etc. Add it to the functional name and psi4 handles finding the correct parameters or throws an error. I haven't gone through with it, but adding another case for the multiple -D options seems OK. So in the end the NL parameters are added to the list of D parameters here:; ```; dashcoeff = {; 'nl:{; 'tpss' : {nl_b: 1.23}; }; 'D2: ...; ```; [dashparam.py]( https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/dashparam.py; ); It could be an annoying extra case to avoid actually running dftd3, but the ""dash"" detection and general infrastructure is really nice. --; regarding doc, a simple link within http://psicode.org/psi4manual/master/dft.html#advanced-functional-use-and-manipulation would probably suffice.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/870#issuecomment-348251623:532,avoid,avoid,532,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-348251623,4,"['avoid', 'detect']","['avoid', 'detection']"
Safety,"The initialization code is pretty simple, however. One could just replace the `initialize_lebedev` function by an initializer list in https://github.com/psi4/psi4/blob/ac8f87a1dd3fdda2aabc3318713d6e5ce00e2c70/psi4/src/psi4/libfock/cubature.cc#L5065; This would also avoid the need for the mutexes. . The code is hacky also elsewhere; `lebedev_error` duplicates the same information. For what it's worth, I will be developing a general C++ Becke quadrature library that would eliminate these parts of the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736#issuecomment-1268606002:266,avoid,avoid,266,https://psicode.org,https://github.com/psi4/psi4/pull/2736#issuecomment-1268606002,2,['avoid'],['avoid']
Safety,The issue seems to be skipping frozen core setup when ECP is detected here:. https://github.com/psi4/psi4/blob/a79c21681e411777451f5b474d7b652e2ba8baa2/psi4/src/psi4/libmints/basisset.cc#L190-L203,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/976#issuecomment-383729139:61,detect,detected,61,https://psicode.org,https://github.com/psi4/psi4/issues/976#issuecomment-383729139,1,['detect'],['detected']
Safety,"The large number of digits was introduced to eliminate round-off errors completely. There are a few reasons:. - When testing software that post-processes the wavefunction, it is desirable to be able to validate the numerical algorithms in such codes. For example, this can be done by checking the total number of electrons on very fine integration grids in such post-processing codes. When doing so, all other sources of errors should be eliminated to avoid confusion. We noticed that this was especially problematic before #1510 with fractionally occupied natural orbitals.; - When deriving approximate electrostatic models from a wavefunction, satisfying charge neutrality is quite important for long-range interactions. I know you can always ""fix"" this *a posteriori* (e.g. by shifting partial charges to match the net charge), but avoiding the need for a fix is still preferable, just to rule out sources of error. So why 17? The number of significant digits from a double precision number varies between 15 and 17. See https://en.wikipedia.org/wiki/Double-precision_floating-point_format (For some numbers, digits 16 and/or 17 may be insignificant, but not always.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1973#issuecomment-747650817:452,avoid,avoid,452,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-747650817,2,['avoid'],"['avoid', 'avoiding']"
Safety,"The new `bsse_type='cp'` does what `bsse_type=['cp','nocp']` used to do, calculation wise, except the `nocp` interaction energies are not reported. . To safe computer time it was useful to only calculate the dimer-basis part and get CP-corrected interaction energies directly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-519006759:153,safe,safe,153,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-519006759,1,['safe'],['safe']
Safety,"The problem appears to be that, when the wave function is labelled ""ROHF"", MRCC it expects the orbitals to be truly spin restricted (which is reasonable behavior, in general). However, for open-shell systems, ROHF-B-CC naturally yields spin-unrestricted orbitals due to the fact that the alpha and beta T1 amplitudes are distinct. (This can be avoided using less conventional open-shell B-CC formulations, but Psi4 uses the ""standard"" approach.) However, given that the UHF- and ROHF-based algorithms yield the same results in Psi4 (apart from differences associated with using frozen core), the interface to MRCC should work correctly if the user chooses `reference uhf`. No changes to either Psi4 or MRCC appear to be necessary to avoid this problem. Kirk Peterson has confirmed that this corrects the interface failure he reported earlier.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2308#issuecomment-1041031234:344,avoid,avoided,344,https://psicode.org,https://github.com/psi4/psi4/issues/2308#issuecomment-1041031234,2,['avoid'],"['avoid', 'avoided']"
Safety,"The problem came about just because, in parallel, I'm (i) learning to build Mac conda packages for the half-dozen add-ons, (ii) bumping all the add-ons to their latest tag, (iii) determining a good package set (boost, libgcc, etc.) for a full-featured psi4 Mac binary for both users and developers, and (iv) trying out some new conda packaging and distribution tools. The conda package _does_ point to a git tag (hopefully the same git tag as in psi4's externalproject), but I had bumped the conda tag to `1.1.2`, got the conda pkg working, then fixed up psi4 to work with the detected conda pkg. Unfortunately, by the time I worked through some library issues and tried to build pcmsolver internally to psi4, with the `int` fix, I had forgotten the tagging details, leading to this whole mistaken first place. :-). So yes, in future when someone informs me of a new version or bumps the externalproject tag, I'll bump the conda tags in sync.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/409#issuecomment-226555751:577,detect,detected,577,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-226555751,2,['detect'],['detected']
Safety,"The problem is [this](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/scfgrad/scf_grad.cc#L81) line of code, which does an unsafe cast from a *Wavefunction to a *HF. The first call passes in an HF object and is fine. The second call does not pass in an HF object and is not fine. I think there are two separate issues here:; 1. The SCF gradient machinery should not allow non-HF wavefunctions.; 2. We may want to consider adding a way to serialize Wavefunction subclasses. To close this issue, it suffices to satisfy (1). Item (2) should be a separate issue, IMO.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2712#issuecomment-1240798091:130,unsafe,unsafe,130,https://psicode.org,https://github.com/psi4/psi4/issues/2712#issuecomment-1240798091,1,['unsafe'],['unsafe']
Safety,"The problem is this part in the output. ```; 	Back-transformation to cartesian coordinates...; 	The INTCO_EXCEPTion handler:; 	TORS::compute_val: unable to compute torsion value; 	Dynamic level is 0.; 	exc.g_really_quit() is ; ```. The current C++ optking will be replaced with a python version: https://github.com/psi-rking/optking; You can try it out already (see instructions in the repo) unless you require the CBS driver. Otherwise you have to chose a different coordinate systems https://psicode.org/psi4manual/master/autodir_options_c/module__optking.html#opt-coordinates; `CARTESIAN` is a safe, but slowly converging, choice.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2195#issuecomment-864987485:597,safe,safe,597,https://psicode.org,https://github.com/psi4/psi4/issues/2195#issuecomment-864987485,1,['safe'],['safe']
Safety,"The quality of OpenBLAS (https://github.com/xianyi/OpenBLAS) should be fine. It is based on GotoBLAS that used to outperform ATLAS and in some cases even MKL. Kazushige Goto, the developer of GotoBLAS was then hired by Intel. . Thank you for the hint about MathLibs.cmake. Based on https://github.com/coderefinery/autocmake/blob/master/modules/math_libs.cmake (lines 127-141) I have added support for detecting OpenBLAS (with the changes it is detected even without setting MATH_ROOT). ```; [sfux@develop01 psi4]$ cat CMakeAddOpenBLAS.patch ; diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; *** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; --- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; ***************; *** 14,20 ****; if(ENABLE_64BIT_INTEGERS); set(MATH_LIB_SEARCH_ORDER MKL ACML); else(); ! set(MATH_LIB_SEARCH_ORDER MKL ESSL ATLAS ACML SYSTEM_NATIVE); endif(). if(NOT DEFINED MKL_FLAG); --- 14,20 ----; if(ENABLE_64BIT_INTEGERS); set(MATH_LIB_SEARCH_ORDER MKL ACML); else(); ! set(MATH_LIB_SEARCH_ORDER MKL OPENBLAS ESSL ATLAS ACML SYSTEM_NATIVE); endif(). if(NOT DEFINED MKL_FLAG); diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; *** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; --- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; ***************; *** 73,78 ****; --- 73,93 ----; set(ATLAS_LAPACK_LIBS atlas lapack); ; #-------------------------------------------------------------------------------; + # OPENBLAS; + ; + set(OPENBLAS_BLAS_INCLUDE_PATH_SUFFIXES); + set(OPENBLAS_LAPACK_INCLUDE_PATH_SUFFIXES); + ; + set(OPENBLAS_BLAS_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAP",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:401,detect,detecting,401,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,2,['detect'],"['detected', 'detecting']"
Safety,"The question is not whether Psi4's current machinery adequate or not. It's about the sensible default. If I put out a `$TMPDIR` variable, I expect programs to obey it. Most Unix/Linux programs will do so, it's even part of the Unix specification. There is no reason why Psi4 should do something different.; Heck, with all the recent evolutions in the Linux world (systemd), it's even mandatory. Per user containers and ditto `/tmp` are coming to the HPC world. ; I really see no reason why there should be hardcoded default for this. I also disagree with your C++11 sentiment. I think this is an excellent example why C++11 is long overdue. If something as trivial as fetching a environment variable is not guaranteed thread safe...; There are now more than enough compilers that support it: Clang since 3.4, GCC 4.8-4.9, intel 2015. The current intel 2016 beta even already does the largest part of C++14. If you are using old compilers for calculations, you're wasting computational time and money IMHO.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105040869:725,safe,safe,725,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105040869,1,['safe'],['safe']
Safety,"The symmetry detection does not try to symmetrize the geometry to my knowledge.; But there is a `symmetrize` function than can be explicitly called like this:. ```; molecule {; pubchem:fluoroethane; }; set basis cc-pVDZ; psi4.get_active_molecule().symmetrize(1e-2); # or <molecule_name>.symmetrize(1e-2) if a name was set; energy('scf'); ```. edit: Otherwise finding the point group with a lower tolerance can be done like this, I think. (Doesn't work in this case). ```; molecule {; pubchem:fluoroethane; }; set basis cc-pVDZ. mol = psi4.get_active_molecule(); tol = 1e-2; PG = mol.find_point_group(tol); print(PG.full_name()); mol.set_point_group(PG); energy('scf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2463#issuecomment-1062668003:13,detect,detection,13,https://psicode.org,https://github.com/psi4/psi4/issues/2463#issuecomment-1062668003,1,['detect'],['detection']
Safety,"The tone of the documentation to which Lori alludes sounds like Justin; Fermann to me, but the convention is probably older than the arrival of the; Quantum Trio to the CCQC. On Sun, Apr 15, 2018 at 9:57 PM, Jonathon Misiewicz <; notifications@github.com> wrote:. > I'll look into this. There aren't many people who might know here, which; > (sadly) cuts the detective work short.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/953#issuecomment-381466482>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTL4Ay7mIKdYFXiDGj9BYRY6wVpGIks5tpAingaJpZM4TPKkE>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/953#issuecomment-381466773:359,detect,detective,359,https://psicode.org,https://github.com/psi4/psi4/pull/953#issuecomment-381466773,1,['detect'],['detective']
Safety,"There have been many buildsystem updates to Libint1 since 1.2.0, and it's always an option to build it through libtool _or_ cmake. Psi4 will only detect a CMake build. Libint takes a while to compile, and I definitely agree one would wish to detect a pre-built. I've added the `.pc` file to Libint1 here (https://github.com/evaleev/libint/pull/120) so that a CMake build of Libint is detectable by both downstream CMake or libtool. Normally what packagers do when they've got a libtool-built Libint already packaged and want Psi to detect it is to patch the build so CMake sees it https://src.fedoraproject.org/rpms/psi4/blob/master/f/psi4-b167f473-fedora.patch . Yes, Libint2 is known to us. As it requires extra dependencies and isn't expected to to be faster, we won't be updating.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1589#issuecomment-480458202:146,detect,detect,146,https://psicode.org,https://github.com/psi4/psi4/issues/1589#issuecomment-480458202,4,['detect'],"['detect', 'detectable']"
Safety,"There is certainly a bug in the code where `SOCC` is assumed to be valid when `DOCC` isn't present. I'd suggest that is modified, too, to be safe: https://github.com/psi4/psi4/blob/0e9f9a53ab260b9e81b95c2355f6bd54b1c47457/psi4/src/psi4/libscf_solver/hf.cc#L178",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1370#issuecomment-443253505:141,safe,safe,141,https://psicode.org,https://github.com/psi4/psi4/issues/1370#issuecomment-443253505,1,['safe'],['safe']
Safety,"There needs to be a way to avoid pushing certain parts though, otherwise it; undermines the scooping philosophy and we might as well not even have the; private repo. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 3, 2015 10:59 AM, ""Lori A. Burns"" notifications@github.com wrote:. > Well, the branches of the hidden repo are so developers can store code; > that's vulnerable to scientific scooping. And the master of the hidden repo; > is so we can integrate without being overly concerned about breaking things; > for people outside email's reach.; > ; > That said, you're right that we don't have the synching procedure; > automated so that public is often a couple weeks behind. After the May; > round of conferences, we're going to set up a continuous integration box so; > that we can do a nightly or weekly push to public if safe.; > ; > Sent from my iPhone; > ; > > On May 3, 2015, at 10:34 AM, wpoely86 notifications@github.com wrote:; > > ; > > @loriab why do you actually work with a hidden repo? It's quite annoying; > > that all kinds of stuff is fixed/changed but not visible to us.; > > ; > > —; > > Reply to this email directly or view it on GitHub.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/88#issuecomment-98490617.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/88#issuecomment-98491250:27,avoid,avoid,27,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98491250,2,"['avoid', 'safe']","['avoid', 'safe']"
Safety,There's nothing wrong with the PR. But I confess I was using it more to avoid misplacing files than to add to Psi4.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/795#issuecomment-335235553:72,avoid,avoid,72,https://psicode.org,https://github.com/psi4/psi4/pull/795#issuecomment-335235553,1,['avoid'],['avoid']
Safety,"There's temporary build docs linked off README: ""Downloading and Installing"" on the main GH page. It's not the specification of Python that's the problem– CMake detection and build are going just fine in these cases. CMake knows the exact, absolute path location to everything Psi4 or its build needs. The problem is conveying that info to the runtime environment. This is done by baking in all those absolute paths into the executable/library rpath. _But_, when a path (e.g., `/usr/lib`) has both a useful thing like `libpython.so` and a bad thing (for Psi4) like old gcc or hdf5, then CMake has no way of knowing that it needs to place /usr/lib into rpath _behind_ the path to new gcc or new hdf5. Thus, we end up with runtime path problems, solvable only by `LD_LIBRARY_PATH` or rpath adjustment and relinking. This problem is controllable with conda, because it isolates just what Psi4 needs into its own namespaced path and stuffs that into rpath. For the general developers CMake build, there's no robust solution that I can see.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252931820:161,detect,detection,161,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252931820,1,['detect'],['detection']
Safety,"These tests are still failing with erd. Maybe I wasn't too clear before, but these are what fail when I set integral_package to erd in my psi4rc file. . 12 - cbs-xtpl-freq (Failed); 114 - dfccd-grad1 (Failed); 117 - dfccsd-grad1 (Failed); 122 - dfmp2-3 (Failed); 124 - dfmp2-grad1 (Failed); 125 - dfmp2-grad2 (Failed); 126 - dfmp2-grad3 (Failed); 127 - dfmp2-grad4 (Failed); 132 - dfomp2-grad1 (Failed); 133 - dfomp2-grad2 (Failed); 136 - dfomp3-grad1 (Failed); 137 - dfomp3-grad2 (Failed); 140 - dfomp2p5-grad1 (Failed); 141 - dfomp2p5-grad2 (Failed); 146 - dft-freq (Failed); 147 - dft-grad (Failed); 151 - dft1 (Failed); 152 - dft1-alt (Failed); 154 - dft3 (Failed); 157 - extern1 (Failed); 165 - fd-freq-energy-large (Failed); 168 - fd-gradient (Failed); 188 - mints9 (Failed); 196 - mp2-module (Failed); 229 - opt-lindep-change (Failed); 237 - opt6 (Failed); 238 - opt7 (Failed); 239 - opt8 (Failed); 240 - opt9 (Failed); 241 - opt11 (Failed); 242 - opt12 (Failed); 243 - opt13 (Timeout); 245 - opt-irc-1 (Failed); 246 - opt-irc-2 (Failed); 247 - opt_freeze_coords (Failed); 261 - pubchem1 (Failed); 268 - pywrap-checkrun-rhf (Failed); 269 - pywrap-checkrun-rohf (Failed); 270 - pywrap-checkrun-uhf (Failed); 272 - pywrap-db2 (Failed); 309 - tu3-h2o-opt (Failed); 310 - tu4-h2o-freq (Failed); 322 - cubeprop-esp (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-275696746:984,Timeout,Timeout,984,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-275696746,1,['Timeout'],['Timeout']
Safety,"These two commits (search `mo_ext`; Rob https://github.com/psi4/psi4archive/commit/a6153df40ec424e5fdc75fb037b8a3c3fd618484 and Jet https://github.com/psi4/psi4archive/commit/d337912cc48fe14aa8ae78820581fc8f0495383a) look to be the main ones in the mo_extents history. (Also Lori https://github.com/psi4/psi4archive/commit/79e09e2ed1092437bc80cabaf13acaad12686a49 from a psiworkweek but that wasn't operational.). From comment `// TODO: Print polarity <\vec x> and extents <\vec x^2> - <\vec x>^2` and [earlier print statements](https://github.com/psi4/psi4archive/commit/79e09e2ed1092437bc80cabaf13acaad12686a49#diff-2d2260d0be9213bdd2d346178da27329R518), it sounds like the dipole part was meant for polarity printing. So it should be safe to remove or move to another function rather than tagging along in the extents function.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1440#issuecomment-451495262:737,safe,safe,737,https://psicode.org,https://github.com/psi4/psi4/pull/1440#issuecomment-451495262,1,['safe'],['safe']
Safety,"They're linked b/c the Intel link-line advisor specifies them and b/c we do some manipulation of static/dynamic detection for the binary. I don't swear it's the best way, but it hasn't been causing problems. Your `/home/kruse/gcc-4.9.4/bin/gcc` is what's active at build time? I'm surprised it's not picking up that `/home/kruse/gcc-4.9.4/lib64` libraries are being used, then preserving them in `rpath`. You may want to uncomment [this](https://github.com/psi4/psi4/blob/master/psi4/src/CMakeLists.txt#L94) and its friends to see what's going on with rpath.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/657#issuecomment-287817795:112,detect,detection,112,https://psicode.org,https://github.com/psi4/psi4/issues/657#issuecomment-287817795,1,['detect'],['detection']
Safety,"This PR is a good idea, but we just use python in so many different ways that it's risky w/o having OSes to test it on. OS packagers may just need to patch in python3. Leaving PR open for guidance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1709#issuecomment-758434711:83,risk,risky,83,https://psicode.org,https://github.com/psi4/psi4/pull/1709#issuecomment-758434711,2,['risk'],['risky']
Safety,"This also seems like a good time just to point out that if anyone has plans for portions of psi4 to use mpi parallelism, we would want to avoid having the psi4 executable explicitly call mpirun or similiar like `xcfour` does. The ideal mpi setup would be for the user to use the host's `mpirun / mpiexec` executable to run the container. Then, the host mpi and container mpi either need to use the same PMI library or the user would need to bind the host's mpi libraries into the container. GPU support only requires the `--rocm` and `--nv` flags that I referenced above.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2951#issuecomment-1536697098:138,avoid,avoid,138,https://psicode.org,https://github.com/psi4/psi4/issues/2951#issuecomment-1536697098,1,['avoid'],['avoid']
Safety,"This could be tidied up and merged for v1.9, but that would constrict pydantic to only v2. From https://github.com/MolSSI/QCElemental/issues/323, releases of qcfractal are only imminently even v2-tolerant. So I think it'd be safer to postpone and update the whole qca stack together. So not targeting v1.9. Any thoughts? @mattwthompson",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3034#issuecomment-1809285602:225,safe,safer,225,https://psicode.org,https://github.com/psi4/psi4/pull/3034#issuecomment-1809285602,1,['safe'],['safer']
Safety,"This is a great upgrade in current and future use and robustness! My only suggestion is to moderate the requirement of an initial gradient before a frequency computation. I grant that the additional cost of a gradient is likely to be moderate-to-negligible (though if one were computing, e.g., only one irrep of displacements it could be significant). However, the workflow of ""opt + freq"" is so very common, that it's worth it to at least provide an easy way to avoid this extra computation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834#issuecomment-380206803:463,avoid,avoid,463,https://psicode.org,https://github.com/psi4/psi4/pull/834#issuecomment-380206803,1,['avoid'],['avoid']
Safety,"This is a subtle problem: Psi4 reorients molecules to their principal axes, and shifts the origin to the center of mass by default (mostly for symmetry detection purposes); this shift makes the input grid inconsistent with the geometry. Long term, I guess the code should apply the same shift to any grids, for consistency. Until then, the translation / rotation can be disabled as follows:; ```python; geometry= """"""; 0 1; F 0.0 0.0 0.09241; H 0.0 0.0 -0.83169; noreorient; nocom; """"""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2964#issuecomment-1548014314:152,detect,detection,152,https://psicode.org,https://github.com/psi4/psi4/issues/2964#issuecomment-1548014314,1,['detect'],['detection']
Safety,"This is actually a PyBind11 version error. It doesn't appear that our CMake is detecting the discrepancy. Please blow away your objdir and recompile from scratch. . -Daniel Smith; Sent from my iPhone. . > On Nov 30, 2016, at 23:06, nmayhall <notifications@github.com> wrote:; > ; > After a recent git pull, psi4 failed to compile. It seems that the error was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi so all Python Exceptions raise to stdout and psi out"". If I revert to the commit just before this I'm able to compile.; > ; > If it helps, I'm running Ubuntu, with gnu compilers.; > ; > Here's the error message:; > ; > /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_local_option_array(const string&, const string&, const pybind11::list&, psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36: error: expected primary-expression before ‘>’ token if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_global_option_array(const string&, pybind11::list, psi::DataType*)’: /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13: error: ‘isinstance’ is not a member of ‘py’ if (py::isinstance<py::list>(values[n])) { ^ /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36: error: expected primary-expression before ‘>’ token if (py::isinstance<py::list>(values[n])) { ^ src/CMakeFiles/core.dir/build.make:374: recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed make[5]: *** [src/CMakeFiles/core.dir/core.cc.o] Error 1 make[5]: *** Waiting for unfinished jobs.... ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed make[5]: *** [src/CMakeFiles/core.dir/export_mint",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/536#issuecomment-264074419:79,detect,detecting,79,https://psicode.org,https://github.com/psi4/psi4/issues/536#issuecomment-264074419,1,['detect'],['detecting']
Safety,"This is the output of my cmake : ; It seems to be fine. CXX=icpc CC=icc cmake .. ; -- The C compiler identification is Intel 17.0.0.20160721; -- The CXX compiler identification is Intel 17.0.0.20160721; -- Check for working C compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc; -- Check for working C compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261733153:477,Detect,Detecting,477,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153,2,['Detect'],['Detecting']
Safety,"This is... a complicated one. As far as I can tell, there are multiple issues here:. 1. Are there any other ways SAPT can detect non-SPD MO hessians? This would have caught the error with the SAP file.; 2. Why did the SAP_stability not detect an instability in the second case? If it's genuinely stable, there's not much we can do. This may be a failing in the Davidson solver.; 3. Instability following should be changed to use an exponentiation rather than Givens rotation.; 4. SAPT should detect disturbingly large delta HF energies and warn the user that the results are suspicious. The error message should also be clarified, but that's #1682.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1747#issuecomment-870076604:122,detect,detect,122,https://psicode.org,https://github.com/psi4/psi4/issues/1747#issuecomment-870076604,3,['detect'],['detect']
Safety,"This looks good to me - great work figuring this stuff out. I think the long-term plan will be to get all of the external perturbations into `MintsHelper` to avoid this kind of problem. However that's beyond the scope of this pull request. It would be nice to have a test case to prevent any regressions of this behavior: could you add a small molecule test (like the details you put on the forum post), by doing the following, please?. 1) Make a copy of an existing test folder, such as [this](https://github.com/psi4/psi4/tree/master/tests/fsapt1) and call it something like `fisapt-ext`. 2) In the CMakeLists.txt in the newly created `fisapt-ext`, edit the name `fsapt1` to read `fsapt-ext` in the two locations where it is present. 3) Modify the `input.dat` to represent a small system with a small basis set and populate the `Eref` dictionary with values from running that system with your updated, working psi4 version: these will be checked against the computed values when the test is run. 4) If the test takes less that about 30 seconds (I doubt it will, but that depends on the size of system) then please add `quicktests` to the list of labels on the third line of `CMakeLists.txt` and remove the `PROPERTIES COST 400` from the following line: this will allow the test to be run every pull request. If not, it's too expensive to run every time so it'll just be run during our nightly tests instead. 5) When you have a working test case, please run it and generate the output file as `output.ref`, so that we have something to look at if any changes break this feature in the future. 6) Add the new `fsapt-ext` test name [here](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L60) so that our testing framework knows about it. I don't think you need the README or the `fsapt-ref` folder that are in that test directory, but I'm happy to be correct by other devs who know more about SAPT than I do. Thanks again for this change - it's a very important addition.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1608#issuecomment-489109576:158,avoid,avoid,158,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-489109576,1,['avoid'],['avoid']
Safety,"This looks great! Thanks for figuring out this very tricky problem. A long time ago, @fevangelista and I figured out the machinery to map symmetry-dependent arrays like `DOCC` and `SOCC` into the appropriate subgroups. Would you mind quickly testing to see if `DOCC` can be specified in c2v symmetry with your current version? If not, we'll have to open a follow up PR to make sure this mapping is done (I think it's best left out of this PR to avoid scope creep).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1424#issuecomment-446624242:445,avoid,avoid,445,https://psicode.org,https://github.com/psi4/psi4/pull/1424#issuecomment-446624242,1,['avoid'],['avoid']
Safety,"This looks like a mismatch in the tolerance used to figure out the point group and the tolerance being used within the optimizer. For the HOOH case, adding `symmetry c2` to the molecule specification should be a simple workaround. Also, you can use `SCF_Energy = psi4.get_variable('CURRENT ENERGY')` to avoid running an extra energy calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-201451437:303,avoid,avoid,303,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-201451437,2,['avoid'],['avoid']
Safety,This pull request **fixes 1 alert** when merging 2b7850eeeb1dc8d025e15d68ea6b2349acc8cbad into 1295e778bfeb6f03d3dc594cbbfd79fe7b19f93e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-d2be110d7ae94dbcc4973fbdc5a098a0880f12e9). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-633650674:272,Redund,Redundant,272,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-633650674,1,['Redund'],['Redundant']
Safety,This pull request **fixes 1 alert** when merging 2d2c8cd002229f90176b3d930e2c28714de7e079 into c9b79fb016d8e3b09e8dd980093da576d06ce03d - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-254cf1d1e2f779ca42d4f2d520a4a6cad494a4eb). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-633934735:272,Redund,Redundant,272,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-633934735,1,['Redund'],['Redundant']
Safety,This pull request **fixes 1 alert** when merging 643451ec8104ee345521b0675147a520ee43629b into 58d3bc0ae55d3affca9c75c80126be08d610915c - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-0b919987994ea1b1be45839c560908e938a58255). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-638313947:272,Redund,Redundant,272,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-638313947,1,['Redund'],['Redundant']
Safety,This pull request **fixes 1 alert** when merging 748bae92d70cf0e19af497f556068be7c3721f34 into 1295e778bfeb6f03d3dc594cbbfd79fe7b19f93e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-5beb9c3620c1b55e8eb5ef7829a2c59d0d407612). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-632829864:272,Redund,Redundant,272,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632829864,1,['Redund'],['Redundant']
Safety,This pull request **fixes 1 alert** when merging ae77767cd65e9001c9e56fcde7c5bf4abab27e9a into ea5b5eb71ab65469629b345d78fe6e7b1a5a34fa - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-c491159b4fb95f1b6ad5ec2471c7b5a6e28e9015). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-634678153:272,Redund,Redundant,272,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-634678153,1,['Redund'],['Redundant']
Safety,This pull request **fixes 1 alert** when merging d232b91fae696c3e5ff52e092ac2bc3b19dfe35b into 741f46ea0bf7a3591988040538589eecaa8f0ab8 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a1910976e51a18d568b90d9aca9fd67f7b151905). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-641954616:272,Redund,Redundant,272,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-641954616,1,['Redund'],['Redundant']
Safety,This pull request **fixes 1 alert** when merging e82cd637a7bbb2a0ab9613f5df07b79d5fe14555 into ea5b5eb71ab65469629b345d78fe6e7b1a5a34fa - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-ce8ad6faf1c1497dbd02ae59bfe7b34ffe12cffa). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-634552573:272,Redund,Redundant,272,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-634552573,1,['Redund'],['Redundant']
Safety,This pull request **fixes 1 alert** when merging eb0938024a80785ce5a99f1491a2be2f0a5548dd into 66da0fea4b3dbab319b6b517fca0a3983256781f - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-d746dd3b769b758b7085d20f4fd85ed38912269d). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-635267517:272,Redund,Redundant,272,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-635267517,1,['Redund'],['Redundant']
Safety,This pull request **fixes 1 alert** when merging f55573bde60e561ca64f5e5aeddb5f61dd41d371 into 1295e778bfeb6f03d3dc594cbbfd79fe7b19f93e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-e3da07fa43c3dda1694d8fb758216fe82b3a6579). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-633024058:272,Redund,Redundant,272,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-633024058,1,['Redund'],['Redundant']
Safety,This pull request **fixes 1 alert** when merging f715e11e174760f3415ced1b6fff154ed5d9ce3c into 1295e778bfeb6f03d3dc594cbbfd79fe7b19f93e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-66d8003b5900a07ff0545b9c739c7ba5c7a56ea1). **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-632722306:272,Redund,Redundant,272,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632722306,1,['Redund'],['Redundant']
Safety,This pull request **fixes 3 alerts** when merging 0949406d24c3a58b269c260eef7307c4a3fa0ecb into 08b06b45b0f2efaa9d6a04e31eec04e575252e78 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-408feb738b27e0191da3dcc7821bc3329b691950). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-652931619:304,Redund,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-652931619,1,['Redund'],['Redundant']
Safety,This pull request **fixes 3 alerts** when merging 0a831d55b0279a3994e266e8be57b0c40282afdc into 08b06b45b0f2efaa9d6a04e31eec04e575252e78 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-35d47f355c035e2c7831af16a00367c164707166). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-652525590:304,Redund,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-652525590,1,['Redund'],['Redundant']
Safety,This pull request **fixes 3 alerts** when merging 26dd489b730d6192edaec19d716bd118288b2761 into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-3e243df6c568db8e3fb5c827f875da7df7629608). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-644751262:304,Redund,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644751262,1,['Redund'],['Redundant']
Safety,This pull request **fixes 3 alerts** when merging 2e4489cc2418b61564026101d6565950833492d9 into 08b06b45b0f2efaa9d6a04e31eec04e575252e78 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-0426279eb5b6e50edb1b6f56ac45cccedd202f76). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-651333350:304,Redund,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-651333350,1,['Redund'],['Redundant']
Safety,This pull request **fixes 3 alerts** when merging 319e8ae23f1af15a0e12b22aa2f3c59f4763fd28 into 26bae16efac9e3bd212a7433def625f370fb9a17 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-494b3553ec0f3442315c9d0f11847e9f40d0f7f3). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-653467444:304,Redund,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-653467444,1,['Redund'],['Redundant']
Safety,This pull request **fixes 3 alerts** when merging 59f9232b2dcdb5b83df6e799aab9781dc7400ec0 into 9a2de04698459b23e55df5f582873fcff9b9a320 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-b10a9d0172ee67a707b5e4730ed0a64843867e5a). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-645669096:304,Redund,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-645669096,1,['Redund'],['Redundant']
Safety,This pull request **fixes 3 alerts** when merging 886f6f2c3bb882a600f22d42fe55683417408405 into 5f1a24a8b6b77b0d368cd434c0584f027a28d975 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-6e817128cb8d64d1e00edc7bd75efa82e352418d). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-643662031:304,Redund,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-643662031,1,['Redund'],['Redundant']
Safety,This pull request **fixes 3 alerts** when merging 90d1421addd3d748d40a0d2ca5d603c4e00ee439 into 2b2c8bc97d85ca42187ce33555c58a1a281213ca - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-8b0108d7532de3a536fd291df05b83ed13f5e8a2). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-655675838:304,Redund,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-655675838,1,['Redund'],['Redundant']
Safety,This pull request **fixes 3 alerts** when merging a2046e3cf4e86590471f2507d714a9e713e47ffa into 1cf7468090b1e0432811ff55811a380ea9469cb3 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-10e94c75ac5916bddaeb30d709d3e42401046033). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-650202722:304,Redund,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-650202722,1,['Redund'],['Redundant']
Safety,This pull request **fixes 3 alerts** when merging b907a23b7fc19b0f53df66237412be4ffa936d38 into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-14201e7d5a09c3b6d04c364e80720d8cae55b372). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-645294586:304,Redund,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-645294586,1,['Redund'],['Redundant']
Safety,This pull request **fixes 3 alerts** when merging c04bf332addc72cf7d17f710b9ebf9046e67745d into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-cd35c8eb5ac96c8f187051a362c86e3042b4139a). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-644908614:304,Redund,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644908614,1,['Redund'],['Redundant']
Safety,This pull request **fixes 3 alerts** when merging e8a99524a098b99c215ea9c9fd0d9f2b81fd5f9b into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-485d0633a6e802d5dead0de11395e4fd055349fb). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-644301799:304,Redund,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644301799,1,['Redund'],['Redundant']
Safety,This pull request **fixes 3 alerts** when merging ebe0f4e9884c91bd725e8bcdb4b49447bb18b85f into 90403ec0e424a296679aa5533afec8b8cbd4d1af - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-010d589fd9aa17b4699886375c9ee1ac5e7ce0cd). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-653239861:304,Redund,Redundant,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-653239861,1,['Redund'],['Redundant']
Safety,This pull request **introduces 1 alert** and **fixes 1** when merging bbaeafca76f0b8f0657f63704be6c24c774151d2 into 9701d609c0aaeba5b5e905e641d79d38a8eb56f2 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-af9d090bb28f72b3456f9ecc4bacbd1194bf0e45). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-631617323:341,Redund,Redundant,341,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-631617323,1,['Redund'],['Redundant']
Safety,This pull request **introduces 1 alert** and **fixes 2** when merging 29961b2d54eba96b9cc3688900e512db98e834a6 into c05d38b04dc8500c1cd9f92e5f313bebac15e219 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-f2d58b3d379a82a33b29490be79a38a91a155f49). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison; * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-642811449:341,Redund,Redundant,341,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-642811449,1,['Redund'],['Redundant']
Safety,This pull request **introduces 1 alert** when merging 00c99bedcaa1ba87381865f428c43f1c44f7002d into 26bae16efac9e3bd212a7433def625f370fb9a17 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-5247ab5369215bab32e5264252af3c7482cf66ad). **new alerts:**. * 1 for Redundant assignment,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1942#issuecomment-653934319:275,Redund,Redundant,275,https://psicode.org,https://github.com/psi4/psi4/pull/1942#issuecomment-653934319,1,['Redund'],['Redundant']
Safety,This pull request **introduces 1 alert** when merging bbd3aa3412ea20ff2ef9d729e5d2e26409416b36 into 26bae16efac9e3bd212a7433def625f370fb9a17 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-2458a2c1817707b15be6f2e2b716336bb481d859). **new alerts:**. * 1 for Redundant assignment,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1942#issuecomment-653816223:275,Redund,Redundant,275,https://psicode.org,https://github.com/psi4/psi4/pull/1942#issuecomment-653816223,1,['Redund'],['Redundant']
Safety,This pull request **introduces 2 alerts** and **fixes 1** when merging 1b5210dbe737c9ac457492d53ff84b354cfc7f7a into 1295e778bfeb6f03d3dc594cbbfd79fe7b19f93e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-c14a24ebff769e8beefb4fd5c8030e03aa18477c). **new alerts:**. * 2 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-632603458:342,Redund,Redundant,342,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632603458,1,['Redund'],['Redundant']
Safety,This pull request **introduces 2 alerts** and **fixes 1** when merging 9b95c9a47cfe0cf8c58856d9dac9438954f03aa6 into 48958305338231540da2d23670a0b396289ac52a - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a6422872aa19929786271260d5be4c41a2b6237f). **new alerts:**. * 2 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-632142335:342,Redund,Redundant,342,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632142335,1,['Redund'],['Redundant']
Safety,"This reminds me, there *is* a technique to avoid recomputing every `N` iterations. Namely, I think Ahlrichs(?) described a procedure where one keeps track of the change of the density matrix from the reference one by setting `D_0=0` and `D_i = D_{i-1} + max{|Duv|}` where `Duv` is the difference density matrix at iteration `i` and `D_i` tracks the changes. Instead of doing the reset every `N` iterations, one does a full rebuild when `D_i >= eps` because by then sufficient numerical error may have creeped into the calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2816#issuecomment-1337111281:43,avoid,avoid,43,https://psicode.org,https://github.com/psi4/psi4/pull/2816#issuecomment-1337111281,1,['avoid'],['avoid']
Safety,"This sounds like in the same class as too many roots for basis. They tend to segfault (example below) so should certainly be handled better. ```; molecule water {; 0 1; O; H 1 1.07; H 1 1.07 2 109.5; symmetry cs; }. set basis sto-3g; set roots_per_irrep [8, 8]. G, wfn = gradient('eom-ccsd', return_wfn=True); ans = wfn.energy(); ```. The user has issued two contradictory requests -- basis set and nroots. And part of the trouble is that psi only knows they're contradictory well into the calculation (e.g., post-GS-CCSD). That complicates issuing a prompt and specific error. I agree that Susi's preferred behavior is most likely what the user wants -- keep the basis set contract and violate the nroots request. A few paths:. 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover. Likely most of this should be moved to an issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885:1275,detect,detects,1275,https://psicode.org,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885,2,"['detect', 'recover']","['detects', 'recover']"
Safety,"This usually falls in our memory overhead buffers (our safety margins of 20%). Can just assume nbf x nbf, the size is trivial enough to elide any possible space saving in general.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1660#issuecomment-500006294:55,safe,safety,55,https://psicode.org,https://github.com/psi4/psi4/issues/1660#issuecomment-500006294,1,['safe'],['safety']
Safety,"This workaround solved the problem. Many thanks for your quick reply!; Still, it seems weird to me that the default `stdout` is not detected properly...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1334#issuecomment-436212143:132,detect,detected,132,https://psicode.org,https://github.com/psi4/psi4/issues/1334#issuecomment-436212143,1,['detect'],['detected']
Safety,"This works for me on the main trunk. Haven't tested beta4. -TDC. On Jun 14, 2013, at 1:10 PM, renh notifications@github.com wrote:. > Hi all,; > ; > I am trying Psi4 4.0.0-beta4 today, but encountered a problem when parsing input and fetching corresponding basis set info. Here is a sample input file,; > ; > #=======================; > #! sample input; > memory 500 mb; > ; > molecule test {; > Li 0.000 0.000 0.000; > }; > ; > set reference uhf; > set globals = {; > scf_type direct; > basis 6-31G; > e_convergence 10; > }; > ; > this_energy = energy('scf'); > #=======================; > ; > running with Psi 4.0.0-beta4 on Linux, compiled with intel composer xe 2013 (x86-64); > ; > The error message is: ; > #=======================; > Traceback (most recent call last):; > File """", line 36, in ; > File ""/home/ren/soft/Psi4/share/psi/python/driver.py"", line 526, in energy; > procedures['energy']lowername; > File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 489, in run_scf; > scf_helper(name, **kwargs); > File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 707, in scf_helper; > e_scf = PsiMod.scf(precallback, postcallback); > RuntimeError: sanity check failed! Gaussian94BasisSetParser::parser: Unable to find the basis set for LI; > file: /home/ren/soft/psi4.0b4/src/lib/libmints/basisset_parser.cc; > line: 339; > #=======================; > ; > Is it a but or am I wrong anywhere?; > I appreciate any help and suggestions,; > Hao; > ; > —; > Reply to this email directly or view it on GitHub. ## . Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/7#issuecomment-19470461:1165,sanity check,sanity check,1165,https://psicode.org,https://github.com/psi4/psi4/issues/7#issuecomment-19470461,1,['sanity check'],['sanity check']
Safety,"Three hours and nine minutes, according to the timestamps I have for relevant events. I _believe_ the build ran on a 32-thread (16-core) intel broadwell (with ample memory to avoid paging, for however much that helps), and the build was the only event happening on the machine at that time. (I am a little unsure, though, as it's a build-server, and I don't have any way of telling who else might've submitted a build job to the machine at that time. It was ~1AM on a Saturday, though, so probably just me). Also, the .so file generated was 925MB, if that's of any interest. Should I worry at all that the tarball represents a WIP in terms of the actual integral files? Or does the trial status only regard the configuration?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2586#issuecomment-1133800433:175,avoid,avoid,175,https://psicode.org,https://github.com/psi4/psi4/issues/2586#issuecomment-1133800433,1,['avoid'],['avoid']
Safety,"To avoid bugs of this kind, is it recommended to go back to Psi4 1.3.2, or forward to 1.4rc2?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2211#issuecomment-869884912:3,avoid,avoid,3,https://psicode.org,https://github.com/psi4/psi4/issues/2211#issuecomment-869884912,1,['avoid'],['avoid']
Safety,"To avoid the complications forecasted by my last comment, we're going to update this repo to the current development head. This probably still breaks the items mentioned in https://github.com/psi4/psi4/pull/442#issuecomment-241027531, but I know Ryan's already shifted to some of my commits, so I think the trouble of Pulsar maybe having to tie their externalproject psi4 to e705b88 is less than the trouble if the development head gets lost or nonlinear. So FYI, particularly @bennybp .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-241819043:3,avoid,avoid,3,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241819043,1,['avoid'],['avoid']
Safety,"To confirm this explicitly:; * With the changes to method names, the energy docstring needs to be updated, as does the occ/dfocc manual page, which needed to be updated anyways. That is shifting to your responsibility in a future, but pre-1.4 PR.; * In another future PR of yours, QCDB will handle all spin-component quantities. At that time, we'll save singles contributions and spin components to `variables_`. For now, it's enough to remove the spin component globals in preparation for that and as part of the war on globals. We're losing many spin-component-related Psivars in the interim, but this is an acceptable loss. Also, will the future migration of spin-component treatment to QCDB mean `occ` no longer prints spin-component quantities? You implied that it would (""Going that far would necessitate rewriting the occ printing""). If so, then the correct solution to [the spin-redundancy problem](https://github.com/psi4/psi4/pull/1789#discussion_r373811576) is to eliminate the spin-component variables from `occ`. At that time, `occ`'s only use for spin-component scaled quantities is if spin scaling is being used in orbital optimization, which shouldn't require those variables anyways. We might as well get rid of them now, since the repeat typing will be gone before long.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-581142412:887,redund,redundancy,887,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581142412,1,['redund'],['redundancy']
Safety,To do the above you just need to copy [these lines.](https://github.com/fevangelista/psi4/blob/aac087f1c604787c1dd85d42bf2fcdc366ae858e/psi4/driver/procrouting/mcscf/mcscf_solver.py#L201-L210). Looking at the loops im not entirely sure that we can avoid another CI iteration/density build. . For better or worse the `SOSCF` module by and large does not handle frozen spaces. When you call `update` you can probably just set the `Cocc` and `Cvir` spaces to span the full space. The only catch is that you would need to turn off the tech that tries to save the frozen Fock and inactive Fock matrix when it is formed in other places. This would be the functions `set_AO_IFock` and `set_frozen_orbitals` and the booleans that they set. Maybe you want an option like `clean_focks` or some-such that will reset these booleans. The code will compute these quantities itself and the `Cocc` expansion to also include frozen orbitals should just work.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-304539496:248,avoid,avoid,248,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304539496,1,['avoid'],['avoid']
Safety,"To get this particular example to work I think you can look into `proc.py:run_detci` which calls the following:; ```python; ciwfn.cleanup_ci(); ciwfn.cleanup_dpd(); ```. For now, comment this out and it should work. In the future we can add this an option like `detci_dirty` or something that avoid cleanup so that the tpdm code works as expected. To avoid the segfault you can add something like this to `form_opdm`:. ```C++; if (cleaned_up_ci_) {; throw PSIEXCEPTION(""The CIWavefunction was cleaned up, please call xxx to avoid cleanup."");; }",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1812#issuecomment-586425138:293,avoid,avoid,293,https://psicode.org,https://github.com/psi4/psi4/issues/1812#issuecomment-586425138,3,['avoid'],['avoid']
Safety,"To give my 2 cents to the questions above:; - `freeze_core True` should be a best-effort solution, always freezing as much as possible, but ensuring there are valence electrons (ie. for Ca2+, [Ne] core is frozen instead of [Ar], while for Ca0, [Ar] is frozen; similarly for Ar- the whole [Ar] shell should be frozen). This one is charge aware. This option should never crash the code.; - `freeze_core N` where `N = [1,2,3...]` will always freeze the N-th previous full shell, ie for `N=1` the current behaviour in master. Validation error when no valence electrons remain, to avoid the non-helpful segfault in #1271.; - @JonathonMisiewicz's idea of per-atom frozen cores (or in my view even better: per-fragment frozen orbitals) is a good one, and I'd be keen to get that sorted, but it'd probably need changes to `molecule {}` or somewhere else.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-437594950:576,avoid,avoid,576,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-437594950,1,['avoid'],['avoid']
Safety,"To give you the status: The traditional math detection libs that we have on the Autocmake [1] side are monolithic [2] and complex - for historical reasons and I am not happy with the code because it is hard to understand and modify and combine. My plan is to split those up into independent units which can be selected by the user (the user can be a programmer in another code). This effort has started [3] but is slow. So what I want to achieve is explicit over implicit, and simple and ""stupid"" and predictable rather than complex and powerful. My plan is to have one module for MKL, one for OpenBLAS, one for ACML, etc. Instead of a clever detection code which attempts a series of math library combinations, I want to delegate the choice to the user and split the code up. Ideas and contributions are always very welcome. [1] https://github.com/coderefinery/autocmake; [2] https://github.com/coderefinery/autocmake/blob/master/modules/math_libs.cmake; [3] https://github.com/coderefinery/autocmake/tree/master/modules/math",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537#issuecomment-264418892:45,detect,detection,45,https://psicode.org,https://github.com/psi4/psi4/issues/537#issuecomment-264418892,6,"['detect', 'predict']","['detection', 'predictable']"
Safety,"Tracked this down: `IMPORT` keyword is very specific to an export CI vector in an old format that is no longer supported, what you wanted was `DFILE` here so that it will read in the old D (or ""the"" current) CIVector. The `IMPORT` option and all associated content has been removed in an upcoming patch. The `DFILE` and `OPDM` options will now work as RSP will now write out CIVectors. Not entirely what was being read in, but it wasn't a real CIVector. Now, running this conventionally we still get an energy thats reasonable, but too high by about 5mH. This is apparently caused caused by the `EVANGELISTI` Hamiltonian diagonal approximation for some reason. We usually use this over the exact diagonal to avoid spin contamination, will try to look into this some. For now simply setting `HD_AVG HD_EXACT` will solve the above problems.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/175#issuecomment-217275131:708,avoid,avoid,708,https://psicode.org,https://github.com/psi4/psi4/issues/175#issuecomment-217275131,2,['avoid'],['avoid']
Safety,"Tweaked the geometry slightly to avoid a crossing a bit ago. Appears to have worked, closing for now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/322#issuecomment-260082001:33,avoid,avoid,33,https://psicode.org,https://github.com/psi4/psi4/issues/322#issuecomment-260082001,1,['avoid'],['avoid']
Safety,"UPDATE: Above holds that Psi4 can be built against NumPy v1 _or_ v2, just be sure your runtime np is the same major version as your build-time numpy, or you'll get the ""atoms are too close"" error. _But_ I've learned a few more constraints and pitfalls since then:. * to use np v2, you must have `pybind11>=2.12` (right now the codedeps/psi4-path-advisor setup is constraining to 2.10 or 2.11 to avoid a docs issue; working on a resolution) (signature is ""atoms are too close""); * to use np v2, you must have `pint>=0.24.1` (v0.24.0 works for >=py310; v0.24.1 works for >=py39) (signature is something like sumprod not available in numpy); * to use np v2, you must have `qcelemental>=0.28.0` (fixed since last week; qcengine doesn't need changes); * on c-f, packages have ways or declaring what they're compatible with so that an env solves into a workable state. Those aren't in place at present for the numpy+pint and numpy+pybind11 combinations, so you need to check them yourself.; * even if your build env is np v2, beware of any pip installs that can surreptitiously sneak in a np v1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3184#issuecomment-2204639750:395,avoid,avoid,395,https://psicode.org,https://github.com/psi4/psi4/issues/3184#issuecomment-2204639750,2,['avoid'],['avoid']
Safety,"USING_<Pkg>` as the compiler def. so we're not tempted to conflate the roles. **What it doesn't do**; - linking not right for one of `psi4_main.a` or `psi4.so` (don't remember which) when libgdma is static. **Behavior I'm aiming for**. (a) `ENABLE_<Pkg>`: whether set to TRUE or FALSE; (b) `CMAKE_DISABLE_FIND_PACKAGE_<Pkg>`: whether set to TRUE or FALSE; (c) `<Pkg>_DIR`: whether `<pkg>Config.cmake` findable at this loc; (d) `CMAKE_PREFIX_PATH`. | (a) enabled | (b) disable find | (c) findable dir | (d) findable gen | outcome |; | --- | --- | --- | --- | --- |; | T | T | | | extproj_add, detect superbuild |; | T | F | T | | detect pre-built at <pkg>_dir |; | T | F | F | T | detect pre-built at cmake_prefix_path |; | T | F | F | F | extproj_add, detect superbuild |; | F | | | | no add-on |. **Questions**; - Since it's tricky to detangle plan from implementation, have I violated any of your superbuild principles?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; - psi4-config; - dftd3; - lib/; - libpython.so; - share/; - cmake/; - psi4/; - psi4Config.cmake; - psi4ConfigVersion.cmake; - psi4Targets.cmake; - gdma/; - gdmaConfig.cmake; ...; ```. Unfortunately, this complicates searches within `stage/` b/c `CMAKE_PREFIX_PATH` has to be hinted (`find_package(gdma CONFIG REQUIRED HINTS ${CMAKE_PREFIX_PATH}/gdma)`) and the current way I've d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:4380,detect,detection,4380,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,2,['detect'],['detection']
Safety,"Unmarking this as attached to any milestone. As noted in my previous message, this is a very difficult (and not pressing) bug to fix because we _really_ want to avoid touching wavefunction API.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1851#issuecomment-815284339:161,avoid,avoid,161,https://psicode.org,https://github.com/psi4/psi4/issues/1851#issuecomment-815284339,1,['avoid'],['avoid']
Safety,"Very true, @bozkaya, and we've done that. We'd really like to be able to run _any_ molecule through a code, though. If the code absolutely can't handle the case, an error is the way to go. But preferably, if the code's contribution is `0.` or unit matrix or anything predictable, I'd really appreciate it if that trivial return could be programmed in. This would greatly help high-throughput calcs or in @wardence's case, multi-stage single calcs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/893#issuecomment-358041068:267,predict,predictable,267,https://psicode.org,https://github.com/psi4/psi4/issues/893#issuecomment-358041068,1,['predict'],['predictable']
Safety,"We don't pull VERSION into the manual somewhere do we?. On Monday, February 22, 2016, Lori A. Burns notifications@github.com; wrote:. > It looks good so far as I can predict.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/272#issuecomment-187462125.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/272#issuecomment-187471134:166,predict,predict,166,https://psicode.org,https://github.com/psi4/psi4/pull/272#issuecomment-187471134,1,['predict'],['predict']
Safety,We had a major cmake / math-detect revamp of the code recently. Things should work more smoothly in the new version.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36#issuecomment-122119411:28,detect,detect,28,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-122119411,1,['detect'],['detect']
Safety,"We intend to avoid conda as it would make the application run slower. Do you; mean dftd3-python pkg from conda forge is the only option at the moment?; I was able to use the interface to grimme's dftd3 compiled through the source, ; however, to use the three-body becke johnson damping it is the simple dftd3 we need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2936#issuecomment-1528687755:13,avoid,avoid,13,https://psicode.org,https://github.com/psi4/psi4/issues/2936#issuecomment-1528687755,2,['avoid'],['avoid']
Safety,"We pulled it in today. A fresh pull and rebuild should have these changes for you. . -Daniel Smith; Sent from my iPhone. . > On Nov 26, 2017, at 11:35, Ian Bell <notifications@github.com> wrote:; > ; > Yes, this seems good from reading the code, but I haven’t tried it in the real world. Sorry I didn’t get around to fixing this myself, but your solution(s) seem much better than whatever hack I would have come up with. ; > ; > Especially like the isocontour that contains XX% of the electron density PDF modification. When will that make it into the master? ; > ; > From: Daniel Smith [mailto:notifications@github.com] ; > Sent: Sunday, November 26, 2017 8:22 AM ; > To: psi4/psi4 <psi4@noreply.github.com> ; > Cc: Bell, Ian (Fed) <ian.bell@nist.gov>; Mention <mention@noreply.github.com> ; > Subject: Re: [psi4/psi4] Cube file units? (#815) ; > ; > ; > Fixed in #864<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fpull%2F864&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=ovNTIVz57LVNsjcGLTnY7x6FdVA6LrnzFfr8rODv8jM%3D&reserved=0>. @ianhbell<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fianhbell&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=BbgIavE%2BOpBG2nShMTB9WmFqu1z1Oy10YPHDlbWHK4Q%3D&reserved=0> please let us know if that works for you. Closing for now. ; > ; > — ; > You are receiving this because you were mentioned. ; > Reply to this email directly, view it on GitHub<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fissues%2F815%23issuecomment-347015726&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=6LFqXLzB8E2v9UgPYsuvVSjQh7PY0s6mhRGYe7bL3hg%3D&reserved=0>, or mute the thread<https",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/815#issuecomment-347029051:883,safe,safelinks,883,https://psicode.org,https://github.com/psi4/psi4/issues/815#issuecomment-347029051,1,['safe'],['safelinks']
Safety,We were supposing it was something like that. Would it be reasonable to print results only from converged roots and then ending with coffee instead of beer? That could avoid the banks of zeros and the quick impression that all's well.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2521#issuecomment-1089623349:168,avoid,avoid,168,https://psicode.org,https://github.com/psi4/psi4/issues/2521#issuecomment-1089623349,1,['avoid'],['avoid']
Safety,"We were thinking that the build_scf_wavefunction auxiliary basissets had already been consumed (except maybe decon) and the post-scf aux ones hadn't been added to Wfn. Thought we might be safe for the very particular location that c1_deep_copy is called at present, though, very true, not in general. Hopefully BasisSet will be copyable and/or rebuildable by then. Or our thing may be all wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/737#issuecomment-312405839:188,safe,safe,188,https://psicode.org,https://github.com/psi4/psi4/pull/737#issuecomment-312405839,1,['safe'],['safe']
Safety,We're also struggling with performance issues here in developing methods to predict tautomer ratios and pKas. Parallelization would be super helpful!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1280#issuecomment-439131012:76,predict,predict,76,https://psicode.org,https://github.com/psi4/psi4/issues/1280#issuecomment-439131012,1,['predict'],['predict']
Safety,"Well in that case: ; So far everything is going smoothly on my end, but I did notice a couple of inconsistencies in detecting python/complier versions and incorrectly using a different library. On one of our clusters using the module system I have loaded gcc-5.2.0 and Anaconda with python 2.7.10. (these modules define envars $ANACONDA_LIB and $GCC_LIB, which I will refer to below. They also modify the $LD_LIBRARY_PATH variable when they are loaded.) . If I set the python executable and don't do anything to `CMAKE_PREFIX_PATH` the executable is set up correctly but the `PYTHON_INCLUDE_DIR` and `PYTHON_LIBRARY` find the ones that live in the system paths `/usr/lib/python2.6.so` and `/usr/include/python2.6` which causes problems in the linking step with undefined references to some python stuff. . Also if I set the C/CXX compiler, but again don't do anything to the `CMAKE_PREFIX_PATH` I can build + link fine, but at runtime I will get errors like this:. ```; /usr/lib64/libstdc++.so.6: version ``GLIBCXX_X.X.XX' not found ; ```. Which seems to be that cmake is linking to the libstdc++ version for the system gcc which is 4.7.2, instead of the correct library version for the compiler I am using. . If I add `-DCMAKE_PREFIX_PATH=$GCC_LIB:$ANACONDA_LIB` to my cmake command it will fix both issues are corrected. The python library is detected as `$ANACONDA_LIB/python2.7.so` and I don't have any problems with linking. And there is no errors at runtime either. In both cases cmake seems to detect the versions correctly since it has the correct executable. . So when it comes time to document the new build system for users, it may be prudent to mention they should either use the `CMAKE_PREFIX_PATH` argument, or check that cmake has detected the correct library paths for the python/compiler they actually meant to use if they are working in a environment where multiple python/compilers installed. Most clusters will have some way of swapping these out with a system default installed gl",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249621149:116,detect,detecting,116,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249621149,1,['detect'],['detecting']
Safety,"Well, good news is that the functional and the psi version are irrelevant. It's purely a particular geometry that you hit that's confusing the symmetry detection. And only when not shifted to center-of-mass. Never seen that error before, so will definitely investigate. Below is minimal example. BTW, `1.2a1.dev600` is still 300-400 commits behind master, due to my conda negligence. If I can get #946 in, I'll have a minimal _new_ conda build on the `-c psi4/label/agg` subchannel that actually uses the `-ng`/gcc72 compilers. ```; molecule MOL {; 1 1; nocom # toggle for disaster; C 0.000000000445 -0.000000002634 -0.176009819382; C 0.017055492504 1.213674219316 0.519005187104; C 0.010905297833 1.207533611621 1.904879649273; C 0.000000001371 -0.000000001015 2.595491320593; C -0.010905296809 -1.207533610178 1.904879653967; C -0.017055492743 -1.213674218642 0.519005186244; C 0.000000000685 -0.000000001418 -1.643506768663; H -0.011074063554 2.157895826255 -0.014254560550; H 0.006037200834 2.144998257605 2.447030976059; H 0.000000002397 0.000000004130 3.679031777447; H -0.006037200687 -2.144998259786 2.447030974663; H 0.011074059226 -2.157895829902 -0.014254553860; N -0.738518375832 -0.879256115198 -2.298061241871; N 0.738518376065 0.879256115454 -2.298061238276; H 0.714314308196 0.973365270982 -3.302615035270; H 1.398512102453 1.450008704958 -1.792988230964; H -1.398512105220 -1.450008704099 -1.792988237236; H -0.714314307164 -0.973365267449 -3.302615039280. }. energy = energy('B3lyp/cc-pvdz'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-379332937:152,detect,detection,152,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-379332937,1,['detect'],['detection']
Safety,"Well, it's not used there either. You can safely remove that file :wink:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/271#issuecomment-187436091:42,safe,safely,42,https://psicode.org,https://github.com/psi4/psi4/issues/271#issuecomment-187436091,1,['safe'],['safely']
Safety,"Well, the branches of the hidden repo are so developers can store code that's vulnerable to scientific scooping. And the master of the hidden repo is so we can integrate without being overly concerned about breaking things for people outside email's reach. . That said, you're right that we don't have the synching procedure automated so that public is often a couple weeks behind. After the May round of conferences, we're going to set up a continuous integration box so that we can do a nightly or weekly push to public if safe. . Sent from my iPhone. > On May 3, 2015, at 10:34 AM, wpoely86 notifications@github.com wrote:; > ; > @loriab why do you actually work with a hidden repo? It's quite annoying that all kinds of stuff is fixed/changed but not visible to us.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/88#issuecomment-98490617:525,safe,safe,525,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98490617,1,['safe'],['safe']
Safety,"When I attempt this, L2 complains that the angular momentum limit exceeded. Is this expected? I _should_ be able to fix this with a higher AM L2, but I'd rather avoid building myself, and we certainly aren't having the test suite build L2 itself.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2476#issuecomment-1213093352:161,avoid,avoid,161,https://psicode.org,https://github.com/psi4/psi4/issues/2476#issuecomment-1213093352,1,['avoid'],['avoid']
Safety,"When I passed OpenMP_CXX_LIBRARY_DIRS (correctly!) to cmake, it found libiomp5.so fine during the cmake step but then the build failed in the step configuring psi4-core where, presumably, the lapack detection cmake routines run again. At that point, OpenMP_CXX_LIBRARY_DIRS isn't set and it fails to find iomp5. I got past that point of the build by physically adding the relevant path into the HINTS list that includes ${OpenMP_CXX_LIBRARY_DIRS} in FindMathOpenMP.cmake (not exactly a portable solution but hopefully helps locate the problem). ```; $ ldd core.so ; linux-vdso.so.1 (0x00007ffc19d77000); libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x000014c592535000); libmkl_rt.so => /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64_lin/libmkl_rt.so (0x000014c591e88000); libiomp5.so => /opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64/libiomp5.so (0x000014c591aad000); libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x000014c59188f000); libstdc++.so.6 => /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x000014c59150e000); libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x000014c59117b000); libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x000014c590f63000); libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x000014c590ba9000); /lib64/ld-linux-x86-64.so.2 (0x000014c595e3e000); ```. No dependence on libgomp.so and ""make test"" has passed 408/411 tests (2 longs ones still running, and cubeprop-esp failed due to a slight difference in the ESP cubes, although I've seen that fail before).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396760271:199,detect,detection,199,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396760271,1,['detect'],['detection']
Safety,"Whew, I'd be alarmed if the hint variable wasn't doing its job. The cmake isn't set up to use $MKLROOT (I might have tried but that mkl and iomp5 aren't in the same place in a typical intel installation, as you noted). The complication is that this has to work even for `ExternalProject`s or across different computers and the purpose of TargetLAPACK is to provide a single entity to hand to subprojects without duplicating all the math detection machinery and all the cmake and envvars that influence it. I'm not sure current reworking is optimized, but I can live with one cmake hint var. The iomp5 detection works with GNU in conda b/c all the libs are gathered together so the second `find_library()` w/o `NO_DEFAULT_PATH` catches it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396753319:437,detect,detection,437,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396753319,2,['detect'],['detection']
Safety,"Whoa, fantastic! These kinds of issues are extremely tough to track down, so I also transfer 5 psicoin. ; Out of interest, is this limited to `libstdc++`, or have you observed the same with `libc++`? Great detective work",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-380106497:206,detect,detective,206,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-380106497,1,['detect'],['detective']
Safety,"Without looking at ATLAS but extrapolating from OpenBLAS, unless the LAPACK is built with cmake components (or something similar), we can't even tell at psi-build+lapack-detection -time if the LAPACK has any chance of working. In OpenBLAS, of their 3 build modes (single, pthread, omp), the most commonly found, pthread, has no chance of working with psi, but one can't tell that from the blas installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1461#issuecomment-455813717:170,detect,detection,170,https://psicode.org,https://github.com/psi4/psi4/issues/1461#issuecomment-455813717,1,['detect'],['detection']
Safety,"Wow, thanks for the very detailed report, and detective work. Feel free to make changes if you'd like have have a shot at fixing this. If not, I'm going to be reworking the basis set parsing within the next week, to avoid all the duplication between Python and C++, so I can make the appropriate changes then.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/719#issuecomment-303779960:46,detect,detective,46,https://psicode.org,https://github.com/psi4/psi4/issues/719#issuecomment-303779960,2,"['avoid', 'detect']","['avoid', 'detective']"
Safety,"X2C doesn't decontract the basis by default so it is not automatically a redundant input. I'm getting the same error when trying to run X2C with a decontracted basis with the newest PSI4, I haven't run any X2C calculations in a while and was unaware of this issue. I'll look into this, making sure @fevangelista is also aware of this also.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/662#issuecomment-288817347:73,redund,redundant,73,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288817347,1,['redund'],['redundant']
Safety,"Yay. If that was the only lib --> share I missed, I'll be pleased. . > On Feb 14, 2016, at 12:59 AM, Andy Simmonett notifications@github.com wrote:; > ; > Your suggestion fixed the problem on my machine, @loriab. Great detective work. I just pushed the update, so we'll see if that fixes it. The non-PCM thing needs to be figured out some time, but I think it can wait until the rest of the merge issues are resolved.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246#issuecomment-183827620:219,detect,detective,219,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183827620,1,['detect'],['detective']
Safety,"Yea, I see what you mean. The perl script is very comprehensive and it detects the type of calculation being run, changing the values that will be checked as needed. I am able to offer navigational/general help on this is someone volunteers B.TW. so if anyone is interested post here/slack me/ping me/send a smoke signal.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/943#issuecomment-376673025:71,detect,detects,71,https://psicode.org,https://github.com/psi4/psi4/issues/943#issuecomment-376673025,1,['detect'],['detects']
Safety,"Yeah, it's safe to remove to remove libint.h from those files. For ccsort, I'd suggest we come up with a mechanism for obtaining the max AM from libmints as it is responsible for interfacing with various integral packages.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-240425944:11,safe,safe,11,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240425944,1,['safe'],['safe']
Safety,"Yeah, the BLAS+OpenMP detection in Psi4 much predates the CMake FindBLAS, OneAPI, and Intel MKLConfig.cmake reforms. I'm not keen on any immediate changes before the upcoming release, but I agree that it's worth revisiting to see if some of the new tools streamline the build or solve more situations w/o intervention. (Though I personally don't like having environment variables influence CMake. :-) ). Btw iirc, OpenMP doesn't like to be statically linked, so you might favor `libiomp5.so`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2806#issuecomment-1329482160:22,detect,detection,22,https://psicode.org,https://github.com/psi4/psi4/issues/2806#issuecomment-1329482160,1,['detect'],['detection']
Safety,"Yep, gcc version is your problem. Note this part of the cmake output:. > CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; > Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; > this build won't work without GCC intervention:; > https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; > Call Stack (most recent call first):; > CMakeLists.txt:119 (include). Acquire a >=4.9 gcc according to that link (or any way you care to) and pass `gcc-name` and `gxx-name` to icc/icpc as Daniel and that link advised. After that, the cmake warning won't go away (which is why I couldn't make it a fatal error), but it will compile.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261733493:167,detect,detected,167,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733493,1,['detect'],['detected']
Safety,"Yes @andysim, I'm definitely responsible for the crazy path that EFPs take through psi4. Without the boost registration restrictions on the efp class and the general c-side focus, perhaps I can find a better way. I'll take on the efp and filesystem aspects of The Inversion. I agree @jturney on moving plugin-writing to python. In fact, that may get done in the CMake rewrite, just to avoid having to get things working again _twice_.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/450#issuecomment-235360382:385,avoid,avoid,385,https://psicode.org,https://github.com/psi4/psi4/issues/450#issuecomment-235360382,1,['avoid'],['avoid']
Safety,"Yes I believe you are right. I've experienced only with my own compiled from scratch, and never from conda env., also right now I am migrating to Ubuntu 18.04 and I don't think I have seen the problem with the gcc 7.3.0, compared to the gcc 5.4 in Ubuntu 16.04... I use the python/NumPy from PPA, does this mean that I should consider also to compile NumPy myself with same compiler to avoid this type of issue?? What is your experience on how to avoid it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1007#issuecomment-387852931:386,avoid,avoid,386,https://psicode.org,https://github.com/psi4/psi4/issues/1007#issuecomment-387852931,2,['avoid'],['avoid']
Safety,"Yes in most cases size_t would be better. However, we need to investigate all int variables in DFOCC whether they can have negative values or not, may be some of them are signed ints. Hence, the safest solution could be changing int to long long it. Overall, size_t is okay if we sure that we are not breaking any other part of the code, if we are not sure then long long int is a good solution. @susilehtola",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-562739051:195,safe,safest,195,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562739051,1,['safe'],['safest']
Safety,"Yes, I know but that's not what I mean. When I start the PSI calculation, the system has 122 GB of free RAM. Yet PSI causes it to start swapping (nothing else is running on it) and I want to avoid that. So, how does PSI handle the `memory` line? What does it do when opening its large files? Do you use the `POSIX_FADV_DONTNEED` flag on those files?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/424#issuecomment-228589387:191,avoid,avoid,191,https://psicode.org,https://github.com/psi4/psi4/issues/424#issuecomment-228589387,1,['avoid'],['avoid']
Safety,"Yes, I re-cloned everything. All quicktests passed on my laptop. . Well, I can't reproduce the ambit being wrongly detected.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249043838:115,detect,detected,115,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249043838,1,['detect'],['detected']
Safety,"Yes, LEOM_CCSD refers to the local-EOM-CC code we developed for testing in Psi3. Similarly, LOCAL_GHOST was a keyword for placing basis functions on a ghost atom to account for diffuse electronic states in the local-EOM-CC calculations. These capabilities were not transferred to Psi4, so these keywords may be safely removed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2467#issuecomment-1065118824:311,safe,safely,311,https://psicode.org,https://github.com/psi4/psi4/pull/2467#issuecomment-1065118824,1,['safe'],['safely']
Safety,"Yes, one of the cases where a stability analysis is detrimental is; closed-shell benzene with UHF. The closed-shell solution is unstable and; the stable UHF solution looks like a singlet hexaradical... Unfortunately I; believe this is related to the intrinsic spin contamination in UHF. There; are specific methods that can constrain or project UHF solutions to; alleviate this problem.; ROHF also avoids spin contamination, but lacks description of spin; polarization, which may sometimes be of interest. 2016-01-14 9:43 GMT-05:00 ssh2 notifications@github.com:. > To Jerome's point, I would agree that for UHF doing stability analysis; > helps a lot. However, we have also seen cases when stability analysis; > severely breaks spin symmetry and converges on the wrong (or mixed) spin; > state instead of the lowest energy root of desired spin. So one should be; > careful about this issue.; > ; > Best wishes,; > ; > Alexander.; > ; > On Thu, Jan 14, 2016 at 9:38 AM, Alexander Sokolov <; > alexander.y.sokolov@gmail.com> wrote:; > ; > > I would add that lately we have seen a lot of problems with UHF and ROHF; > > converging on a wrong state for open-shells in Psi4. Although new; > > stability; > > analysis code helps a lot in fixing some of the problems (for UHF), for; > > many of these systems finding the lowest root is quite non-trivial and is; > > accompanied by many SCF convergence issues, as well as symmetry-breaking; > > issues (UHF). Things get a lot worse for transition metal compounds (even; > > simple ones, like Fe(CO)5). The most helpful solution is to start with; > > basis set projection from a small basis, but this strategy doesn't always; > > work. Sometimes, combining stability analysis root search and basis set; > > projection helps.; > > ; > > Indeed, other codes (particularly, MOLPRO) sometimes do better job in; > > finding lowest-energy solutions for systems of this type. Usually, after; > > investing some time, it is possible to find the necessary solution for",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211#issuecomment-171662622:398,avoid,avoids,398,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171662622,2,['avoid'],['avoids']
Safety,"Yes, sorry, we've been doing a lot of infrastructure changes lately related to that `Wavefunction` object you saw in the `make` error message, and that mointegrals plugin template had escaped updating. I don't know how familiar you are with GitHub, so I'll warn you that that commit with the fixes is in a pull request to my forked repository. Right now tests are running to check if that commit is safe to merge into this main repository. The only impact that this has on you is that `git pull`ing _this_ repository won't get that new commit at this moment. So if you want to try it out on your plugin before the commit gets merged, just edit the file by hand according to the pattern you see in the commit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-195054956:399,safe,safe,399,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195054956,1,['safe'],['safe']
Safety,"Yes, that foreach is overkill. I'll remove it if it looks like there's nothing more to add. You're welcome to take any of this back to autocmake. @robertodr's already mentioned putting together a backport. I wouldn't call this a thorough overhaul of the mkl detection, just a patch of some known deficiencies (mkl_rt, iomp5). And with all the `-Wl,`s mkl requires, I highly recommend ConfigMath/autocmake use targets, if it isn't already.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276091624:258,detect,detection,258,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276091624,1,['detect'],['detection']
Safety,"Yes, the dev version would work for your case. However, there is a small change in the DFT code (see note at the top http://psicode.org/psi4manual/master/dft.html) that is important if you are mid-project since you should not absolute energies between the versions. All mean-field methods (HF/DFT) will work with the current version but you would need to avoid double-hybrids DFT functionals since they contain an MP2 part.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995#issuecomment-682129791:355,avoid,avoid,355,https://psicode.org,https://github.com/psi4/psi4/issues/1995#issuecomment-682129791,1,['avoid'],['avoid']
Safety,"Yes, the integrals are recomputed every time a new DiskJK is built. There; is presently no way to avoid this. If you are being hamstrung by the AO; integrals, I recommend a DFJK object or perhaps a DirectJK object. Best,. -Rob. On Wed, Feb 4, 2015 at 1:59 PM, Sebastian Wouters notifications@github.com; wrote:. > Hi,; > ; > I'm using DiskJK in a plugin:; > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgci.cc#L292; > . Does it reuse the existing disk AO integrals or does it recompute them?; > In case of the latter: How do I avoid this? Is there a way to fetch the JK; > from the wavefunction object or the environment?; > ; > Thank you for your time and answer!; > Best,; > Sebastian; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/65.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/65#issuecomment-72927187:98,avoid,avoid,98,https://psicode.org,https://github.com/psi4/psi4/issues/65#issuecomment-72927187,2,['avoid'],['avoid']
Safety,"Yes, this seems good from reading the code, but I haven’t tried it in the real world. Sorry I didn’t get around to fixing this myself, but your solution(s) seem much better than whatever hack I would have come up with. Especially like the isocontour that contains XX% of the electron density PDF modification. When will that make it into the master?. From: Daniel Smith [mailto:notifications@github.com]; Sent: Sunday, November 26, 2017 8:22 AM; To: psi4/psi4 <psi4@noreply.github.com>; Cc: Bell, Ian (Fed) <ian.bell@nist.gov>; Mention <mention@noreply.github.com>; Subject: Re: [psi4/psi4] Cube file units? (#815). Fixed in #864<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fpull%2F864&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=ovNTIVz57LVNsjcGLTnY7x6FdVA6LrnzFfr8rODv8jM%3D&reserved=0>. @ianhbell<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fianhbell&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=BbgIavE%2BOpBG2nShMTB9WmFqu1z1Oy10YPHDlbWHK4Q%3D&reserved=0> please let us know if that works for you. Closing for now. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fissues%2F815%23issuecomment-347015726&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=6LFqXLzB8E2v9UgPYsuvVSjQh7PY0s6mhRGYe7bL3hg%3D&reserved=0>, or mute the thread<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FALaZLRBPKhKV-XYnDzyf891po65sdy-Cks5s6YH7gaJpZM4Ppvfg&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/815#issuecomment-347021249:643,safe,safelinks,643,https://psicode.org,https://github.com/psi4/psi4/issues/815#issuecomment-347021249,2,['safe'],['safelinks']
Safety,"Yes, we're in a bad situation wrt pybind11. We use 2.0 (c. Jan 2017) that allows the resulting python `.so` to also be used as an ordinary Linux library for symbols for our plugins. Unfortunately, at 2.0 the pybind11 installations via `setup.py` and CMake had different directory structures, with the former being more common in packaging. So most detected pybind11 2.0's would be useless to psi. On the other hand, pybind11 2.2 restricts symbol usage, so can't be used with our plugin system. But the install directory structures have been reconciled, I believe. Until we reform our symbol handling and plugin system and allow pybind11 updating, I think the current situation is best. You're welcome to delete the final offending pybind11 files; it will only break the psi4 plugin system, not psi4 itself. It would be [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L234-L237) to change. I may be not quite following the INSIST_FIND_PACKAGE reasoning. What you're after is readily achieved by `ENABLE_PkgName=ON`/`OFF` and inspecting the ""Found""/""Building"" labels of the initial CMake config. Is it because you want the CMake config to _fail_ when the desired Found/Build pattern is not achieved, rather than the run-successfully/inspect/delete/run process currently in place? I can see how in an automated workflow situation that would be preferable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343777115:348,detect,detected,348,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343777115,1,['detect'],['detected']
Safety,"Yes. As far as add-ons:. **Working:** `libint`, `libefp`, `liberd`, `dkh`, `gdma`, `CheMPS2`; **Unknown:** `GTFock`; **Not Working:** `PCMSolver` (this is in progress, but if you need it, it's within a few path hacks of working, so contact us). All of these can be compiled once and detected by the Psi4 superbuild, so possibly you need only compile libint/deriv one more time. Again, much of the build wiki is no good anymore. A mini compilation guide is at the top of the (main CMakeLists.txt)[https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L13-L102]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249025979:283,detect,detected,283,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249025979,2,['detect'],['detected']
Safety,"Yes. Though as I've fallen down on my conda-building duties, haven't personally confirmed. Should be safe to close.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-370246501:101,safe,safe,101,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-370246501,1,['safe'],['safe']
Safety,"You can fix the `MKL FATAL ERROR` by `LD_PRELOAD=/path/to/libmkl_rt.so psi4`. Yes, #563 or a near relative will fix that properly w/o the preload. When you run the `bin/psi4` ""executable"", it hunts down its `lib/psi4/__init__.py` to load psi4 as a python module. I wouldn't have expected it to be confused by a symlink, but I suppose it's possible. I'll have to try it out. Glad the python detection seems to be working consistently now. Your CMake logs look good (the unnerving ""detached HEAD"" is just because we pin to tags or commits for dependencies). The odd python3.4 detection in the pybind11 CMake config is to be expected, since none of the environment was passed over to pybind11 because it doesn't matter at that stage. On the now-healed compilation, I was just warned today (@bennybp) that CMake _does_ search your install (not stage, install) dir for dependencies, so perhaps your hunch was right.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273738266:390,detect,detection,390,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273738266,2,['detect'],['detection']
Safety,You can't set negative weights to zero since that will change the results. The real fix would be to use grids with non-negative weights. Using a product grid instead of Lebedev would be one option. For now I would just disable the grids with negative weights as in done in many other codes. Switching to the use of the asymmetric form which avoids the square roots of the weights may be an option but it might also increase memory costs by a factor of 2.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1505035691:341,avoid,avoids,341,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1505035691,1,['avoid'],['avoids']
Safety,"You may have found a memory allocation/usage bug. What kind of; computation is this?. Unfortunately we don't really have a way to estimate scratch usage at; present. It's a feature we'd like to add, but it needs to be added for; every module separately, so is a somewhat daunting task. In principle, can; be known ahead of time based on number of basis functions, number of atoms,; etc., but is different for every method (and sometimes depends on the; particular algorithm used within that method). On Mon, Aug 24, 2020 at 5:55 PM David Slochower <notifications@github.com>; wrote:. > I see memory usage significantly above psi4.set_memory() limit. I do see; > the note in the documentation that memory usage might be *slightly*; > higher, but if I even request within 20% of a node's total memory; > (requesting 300 out of ~376 GB), I risk crashing the entire node. Even now,; > running with psi4.set_memory(""200 GB""), I see persistent VIRT usage of; > 259 GB and RES 256 GB. I know that determining the *actual* amount of memory; > consumed by a process is tricky; > <https://stackoverflow.com/questions/131303/how-to-measure-actual-memory-usage-of-an-application-or-process>,; > but this is important to me to prevent the scheduler from killing my jobs.; > After some troubleshooting, I am requesting 300 GB from the scheduler, but; > 200 GB from psi4, and end up with ~260 GB used. Is this expected?; >; > Relatedly, but separate, is there a way to estimate what the scratch file; > size may be? I was planning to use node-local storage until I found out my; > scratch files are 1.5+ TB. Any rule of thumb way of estimating this ahead; > of time (number of atoms × level of theory × some magic thing?); >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1985>, or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5WFYJDHW36AZTXMGCDSCLOVDANCNFSM4QJ6TFCA>; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1985#issuecomment-679397520:837,risk,risk,837,https://psicode.org,https://github.com/psi4/psi4/issues/1985#issuecomment-679397520,1,['risk'],['risk']
Safety,"You're right. The problem is the use of `docc` and `socc`: https://github.com/psi4/psi4/blob/1ffb67bf52dcca70e357d23714c7d975f9d1356e/psi4/src/psi4/libscf_solver/hf.cc#L474. After the recent addition of the sanity check in #2488, the code crashes in the iteration where some symmetries have more beta electrons and alpha electrons.; ```; Occupations; sym 0: 1 alpha 2 beta; sym 1: 0 alpha 0 beta; sym 2: 1 alpha 0 beta; sym 3: 1 alpha 0 beta; sym 4: 0 alpha 0 beta; sym 5: 1 alpha 1 beta; sym 6: 1 alpha 1 beta; sym 7: 1 alpha 1 beta; ```; The `docc` and `socc` syntax is unable to handle this, which leads to spin flips and the wrong spin state.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2476#issuecomment-1073387869:207,sanity check,sanity check,207,https://psicode.org,https://github.com/psi4/psi4/issues/2476#issuecomment-1073387869,1,['sanity check'],['sanity check']
Safety,"You're welcome, @ryanmrichard. Sorry I was late to the party on this one. You can drive a Hummer around in first gear for the rest of your life, and you'll still have a negative carbon footprint after reducing the build time by so much. I know that Boost is going the way of the dodo, but building it is quite slow on Travis. I figured out the problem with detecting the `apt-get` version, and I think the latest changes will fix detection, allowing us to avoid building it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235348000:357,detect,detecting,357,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235348000,3,"['avoid', 'detect']","['avoid', 'detecting', 'detection']"
Safety,"Your Linux guru is correct, you will need a newer compiler. The error is; because your compiler does not support C++11. Check out:. https://github.com/psi4/psi4public/wiki/9_CXX. for our current C++ compiler requirements. You may want to just consider; downloading the precompiled binaries, see:. https://github.com/psi4/psi4public/wiki/1_Obtaining#condabinary. for more information. Hello. I was trying to build Psi4 onto a cluster and I encountered this; error:. $psisource/src/lib/libmints/oeprop.h(116): error: data member; initializer is not allowed; int max_noon_ = 3;. compilation aborted for; /work/kimt33/sources/psi4/src/lib/libmints/local.cc (code 2); make[2]: **\* [src/lib/libmints/CMakeFiles/mints.dir/local.cc.o] Error 2; make[1]: **\* [src/lib/libmints/CMakeFiles/mints.dir/all] Error 2; make: **\* [all] Error 2. I was told by my Linux guru to try different compilers and libraries in; case that the code is incompatible with my system. I was building using; Intel compilers 12.1.3, mkl 10.3.9, openmpi 1.6.2, cmake 3.3.2, python; 2.7.8, and boost 1.57.0. I'm not too sure what the error means, but maybe; this is a bug. Let me know if you'd like more information. Thanks,; David. —; Reply to this email directly or view it on GitHub; https://github.com/psi4/psi4public/issues/188.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/188#issuecomment-156789433:588,abort,aborted,588,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-156789433,1,['abort'],['aborted']
Safety,"Your fork is safe. It'll just look something like 8000 commits behind master and 8050 commits ahead and quite un-PR-able against psi4/psi4 master. Yes, consulting us when you're ready to merge will be the thing to do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-248198593:13,safe,safe,13,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-248198593,1,['safe'],['safe']
Safety,"Your suggestion fixed the problem on my machine, @loriab. Great detective work. I just pushed the update, so we'll see if that fixes it. The non-PCM thing needs to be figured out some time, but I think it can wait until the rest of the merge issues are resolved.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246#issuecomment-183827154:64,detect,detective,64,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183827154,1,['detect'],['detective']
Safety,"Your truth table appears to reflect the logic I was going for. I presume; this is the point where you now tell me my logic failed.... Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 6, 2016 10:26 PM, ""Lori A. Burns"" notifications@github.com wrote:. > @ryanmrichard https://github.com/ryanmrichard , so are you always; > adding dummy/placeholder INTERFACE libraries for all the add-ons? In; > externals dir, either an external proj gets built or a dummy lib gets; > created. Then in main psi4/CM, either libraries get detected or the dummy; > lib gets added to psi4?; > addon_found enable_addon outcome in external/addon/CM outcome in psi4/CM; > optional_plugin() net result; > T T add_lib append libs use prebuilt detected; > T F add_lib add_lib use dummy interface lib; > F T extproj_add append libs use superbuild detected; > F F add_lib add_lib use dummy interface lib; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-238059409, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRiwB-M7gO0fNgdaAfmsawm9L8FsQvks5qdUI8gaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238059613:547,detect,detected,547,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238059613,3,['detect'],['detected']
Safety,"[According to the docs](https://psicode.org/psi4manual/master/api/psi4.core.Molecule.html?highlight=symmetry#psi4.core.Molecule.find_point_group) `psi::Molecule::find_point_group` is the function that does the detection, and it can take a threshold argument, but I cannot find a keyword that would change that.; Have not looked at the source yet, but I think the threshold may be hardcoded at the moment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2463#issuecomment-1062292306:210,detect,detection,210,https://psicode.org,https://github.com/psi4/psi4/issues/2463#issuecomment-1062292306,1,['detect'],['detection']
Safety,"[Easybuild](https://hpcugent.github.io/easybuild/) is not an alternative to CMake or autoconf. The idea is to have an easy way to make reproducible builds and modules. Everything in the stack should also be optimally build, meaning utilizing the hardware to its full extend (for example, if AVX2 or infiniband is available, we will use it). Easybuild will take care of all dependencies. It will avoid using the OS installed (old) versions of software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after building a compiler (GCC/intel/...) from scratch. We also patch out any problem. Psi4 for example hard codes it's build path for the generation of new plugins. This is not desirable on a HPC system. Some software is also not adjusted to be build by anything other than GCC. We make it work with intel too. Some software doesn't even have a real build system other than a list of makefiles that usually don't work out of the box. We fix that so the build is reproducible. . It's primarily meant for HPC sites. If somebody adds support for a piece of software, other people can reuse it with one command. I use it to build Psi4 in production. If you're developing, Easybuild is useful for building all up to date versions of dependencies. On our systems, if I run: module load PSI, I get a psi4 (a git version from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for example GCC-5.1, it takes one command. Adding a GCC subproject to Psi sounds like a bad idea. Building GCC is not a trivial task.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105224328:395,avoid,avoid,395,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105224328,1,['avoid'],['avoid']
Safety,"[Here's](https://github.com/AnacondaRecipes/openblas-feedstock/blob/master/recipe/build.sh#L15-L20) the compile conditions. It looks like OpenMP is enabled. Is something missing that you see?. Also, I was running the tests single-thread to avoid trouble.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-387072294:240,avoid,avoid,240,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-387072294,1,['avoid'],['avoid']
Safety,\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:15111,detect,detecting,15111,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,\psi4\tests\test_addons.py:186: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:233: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:13508,detect,detecting,13508,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14793,detect,detecting,14793,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install pac,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14473,detect,detecting,14473,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,`Libint_MAX_AM_ERI` from https://github.com/psi4/psi4/blob/master/external/upstream/libint/CMakeLists.txt#L5 might be available. I have no confidence in my CMake scope predictions. May need to global it.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1409#issuecomment-444991892:168,predict,predictions,168,https://psicode.org,https://github.com/psi4/psi4/pull/1409#issuecomment-444991892,1,['predict'],['predictions']
Safety,"`Molecule.geometry()` is providing all Cart coords, so the Mol should be fully specified and this should be safe (at first appearances). If opt/findif don't protest and a trial period proves safe, then I'm good with it. Downside is that we make `update_geometry()` even more rare and forgettable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/765#issuecomment-316154922:108,safe,safe,108,https://psicode.org,https://github.com/psi4/psi4/issues/765#issuecomment-316154922,2,['safe'],['safe']
Safety,```; # Name Version Build Channel; abseil-cpp 20220623.0 he4e09e4_6 conda-forge; aiohttp 3.8.5 py39h0f82c59_0 conda-forge; aiosignal 1.3.1 pyhd8ed1ab_0 conda-forge; alembic 1.12.0 pyhd8ed1ab_0 conda-forge; ambertools 23.3 py39hdb62838_1 conda-forge; amberutils 21.0 pypi_0 pypi; appnope 0.1.2 py39h2804cbe_2 conda-forge; argon2-cffi 21.3.0 pyhd8ed1ab_0 conda-forge; argon2-cffi-bindings 21.2.0 py39h5161555_1 conda-forge; arpack 3.7.0 h58ebc17_2 conda-forge; arrow-cpp 11.0.0 hce30654_5_cpu conda-forge; asttokens 2.0.5 pyhd8ed1ab_0 conda-forge; astunparse 1.6.3 pyhd8ed1ab_0 conda-forge; async-timeout 4.0.3 pyhd8ed1ab_0 conda-forge; attrs 21.4.0 pyhd8ed1ab_0 conda-forge; aws-c-auth 0.6.24 he8f13b4_5 conda-forge; aws-c-cal 0.5.20 h9571af1_6 conda-forge; aws-c-common 0.8.11 h1a8c8d9_0 conda-forge; aws-c-compression 0.2.16 h7334ab6_3 conda-forge; aws-c-event-stream 0.2.18 ha663d55_6 conda-forge; aws-c-http 0.7.4 h49dec38_2 conda-forge; aws-c-io 0.13.17 h323b671_2 conda-forge; aws-c-mqtt 0.8.6 hdc0f556_6 conda-forge; aws-c-s3 0.2.4 hbb4c6b3_3 conda-forge; aws-c-sdkutils 0.1.7 h7334ab6_3 conda-forge; aws-checksums 0.1.14 h7334ab6_3 conda-forge; aws-crt-cpp 0.19.7 h6f6c549_7 conda-forge; aws-sdk-cpp 1.10.57 hbe10753_4 conda-forge; backcall 0.2.0 pyh9f0ad1d_0 conda-forge; backports 1.0 py_2 conda-forge; backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0 conda-forge; bcrypt 4.0.1 py39haff01fd_1 conda-forge; black 22.1.0 pyhd8ed1ab_0 conda-forge; bleach 4.1.0 pyhd8ed1ab_0 conda-forge; blosc 1.21.4 hc338f07_0 conda-forge; boost 1.78.0 py39h99de9ae_4 conda-forge; boost-cpp 1.78.0 h9ed8d21_3 conda-forge; brotli 1.0.9 h3422bc3_6 conda-forge; brotli-bin 1.0.9 h3422bc3_6 conda-forge; brotlipy 0.7.0 py39h5161555_1003 conda-forge; bson 0.5.9 py_0 conda-forge; bzip2 1.0.8 h3422bc3_4 conda-forge; c-ares 1.18.1 h3422bc3_0 conda-forge; c-blosc2 2.10.0 h068da5f_0 conda-forge; ca-certificates 2023.7.22 hf0a4a13_0 conda-forge; cached-property 1.5.2 hd8ed1ab_1 conda-forge; cached_property 1.5.2 pyha,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306:595,timeout,timeout,595,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306,2,['timeout'],['timeout']
Safety,```; $ ctest -j 1 -E dft-bench --timeout 3600 --output-on-failure; Test project /home/raimis/psi4.git/linux_build; Start 394: python-vibanalysis; 1/411 Test #394: python-vibanalysis ............... Passed 799.52 sec; Start 178: fsapt1; 2/411 Test #178: fsapt1 ........................... Passed 1815.94 sec; Start 182: isapt1; 3/411 Test #182: isapt1 ........................... Passed 406.26 sec; Start 18: cbs-xtpl-func; 4/411 Test #18: cbs-xtpl-func .................... Passed 407.07 sec; Start 181: fsapt-allterms; 5/411 Test #181: fsapt-allterms ................... Passed 652.29 sec; Start 193: fd-freq-energy-large; 6/411 Test #193: fd-freq-energy-large ............. Passed 433.67 sec; Start 195: fd-freq-gradient-large; 7/411 Test #195: fd-freq-gradient-large ........... Passed 248.39 sec; Start 278: opt13; 8/411 Test #278: opt13 ............................ Passed 644.29 sec; Start 25: cc13a; 9/411 Test #25: cc13a ............................ Passed 188.07 sec; Start 113: dcft7; 10/411 Test #113: dcft7 ............................ Passed 207.25 sec; Start 205: frac-traverse; 11/411 Test #205: frac-traverse .................... Passed 169.73 sec; Start 316: sapt2; 12/411 Test #316: sapt2 ............................ Passed 287.30 sec; Start 318: sapt4; 13/411 Test #318: sapt4 ............................ Passed 1746.35 sec; Start 325: scf-bz2; 14/411 Test #325: scf-bz2 .......................... Passed 117.02 sec; Start 1: adc1; 15/411 Test #1: adc1 ............................. Passed 21.02 sec; Start 2: adc2; 16/411 Test #2: adc2 ............................. Passed 38.38 sec; Start 3: casscf-fzc-sp; 17/411 Test #3: casscf-fzc-sp .................... Passed 2.85 sec; Start 4: casscf-semi; 18/411 Test #4: casscf-semi ...................... Passed 1.66 sec; Start 5: casscf-sa-sp; 19/411 Test #5: casscf-sa-sp ..................... Passed 8.72 sec; Start 6: ao-casscf-sp; 20/411 Test #6: ao-casscf-sp ..................... Passed 3.05 sec; Start 7: casscf-sp; 21/411 Test,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:33,timeout,timeout,33,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,1,['timeout'],['timeout']
Safety,```; $ ctest -j 1 -E dft-bench --timeout 3600; Test project /home/raimis/psi4.git/linux_build; Start 394: python-vibanalysis; 1/411 Test #394: python-vibanalysis ............... Passed 513.47 sec; Start 178: fsapt1; 2/411 Test #178: fsapt1 ........................... Passed 1836.71 sec; Start 182: isapt1; 3/411 Test #182: isapt1 ........................... Passed 380.51 sec; Start 18: cbs-xtpl-func; 4/411 Test #18: cbs-xtpl-func .................... Passed 319.26 sec; Start 181: fsapt-allterms; 5/411 Test #181: fsapt-allterms ................... Passed 508.84 sec; Start 193: fd-freq-energy-large; 6/411 Test #193: fd-freq-energy-large ............. Passed 415.27 sec; Start 195: fd-freq-gradient-large; 7/411 Test #195: fd-freq-gradient-large ........... Passed 234.47 sec; Start 278: opt13; 8/411 Test #278: opt13 ............................ Passed 619.81 sec; Start 25: cc13a; 9/411 Test #25: cc13a ............................ Passed 191.63 sec; Start 113: dcft7; 10/411 Test #113: dcft7 ............................ Passed 204.32 sec; Start 205: frac-traverse; 11/411 Test #205: frac-traverse .................... Passed 171.24 sec; Start 316: sapt2; 12/411 Test #316: sapt2 ............................ Passed 293.30 sec; Start 318: sapt4; 13/411 Test #318: sapt4 ............................ Passed 1738.06 sec; Start 325: scf-bz2; 14/411 Test #325: scf-bz2 .......................... Passed 101.48 sec; Start 1: adc1; 15/411 Test #1: adc1 ............................. Passed 21.21 sec; Start 2: adc2; 16/411 Test #2: adc2 ............................. Passed 34.53 sec; Start 3: casscf-fzc-sp; 17/411 Test #3: casscf-fzc-sp .................... Passed 2.66 sec; Start 4: casscf-semi; 18/411 Test #4: casscf-semi ...................... Passed 1.72 sec; Start 5: casscf-sa-sp; 19/411 Test #5: casscf-sa-sp ..................... Passed 8.18 sec; Start 6: ao-casscf-sp; 20/411 Test #6: ao-casscf-sp ..................... Passed 3.12 sec; Start 7: casscf-sp; 21/411 Test #7: casscf-sp .....,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:33,timeout,timeout,33,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4.git/linux_build; Start 245: nbody-convergence; Start 405: python-vibanalysis; Start 181: fsapt1; Start 11: cbs-delta-energy; Start 185: isapt1; Start 18: cbs-xtpl-func; Start 184: fsapt-allterms; Start 196: fd-freq-energy-large; Start 198: fd-freq-gradient-large; Start 287: opt13; Start 28: cc13b; Start 310: pywrap-all; Start 107: dcft-grad2; Start 22: cc1; Start 32: cc15; Start 45: cc28; 1/415 Test #184: fsapt-allterms ................... Passed 110.85 sec; Start 110: dcft1; 2/415 Test #287: opt13 ............................ Passed 189.62 sec; Start 79: cc8; 3/415 Test #45: cc28 ............................. Passed 206.85 sec; Start 152: dfomp3-grad2; 4/415 Test #32: cc15 ............................. Passed 210.28 sec; Start 233: mp2-module; 5/415 Test #22: cc1 .............................. Passed 218.85 sec; Start 35: cc18; 6/415 Test #28: cc13b ............................ Passed 229.19 sec; Start 312: pywrap-cbs1; 7/415 Test #110: dcft1 ............................ Passed 127.34 sec; Start 27: cc13a; 8/415 Test #107: dcft-grad2 ....................... Passed 252.96 sec; Start 116: dcft7; 9/415 Test #79: cc8 .............................. Passed 81.11 sec; Start 208: frac-traverse; 10/415 Test #185: isapt1 ........................... Passed 272.01 sec; Start 326: sapt2; 11/415 Test #35: cc18 ............................. Passed 60.66 sec; Start 328: sapt4; 12/415 Test #245: nbody-convergence ................ Passed 293.73 sec; Start 335: scf-bz2; 13/415 Test #152: dfomp3-grad2 ..................... Passed 117.47 sec; Start 251: ocepa-grad2; 14/415 Test #233: mp2-module ....................... Passed 120.91 sec; Start 68: cc49; 15/415 Test #326: sapt2 ............................ Passed 97.27 sec; Start 58: cc4; 16/415 Test #208: frac-traverse .................... Passed 108.53 sec; Start 390: cc-module; 17/415 Test #198: fd-freq-gradient-large ....",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:50,timeout,timeout,50,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 103: cubeprop-frontier; Start 112: dcft4; Start 46: cc3; Start 105: dcft-grad1; Start 36: cc2; Start 40: cc24; Start 147: dfomp2-grad3; Start 42: cc26; Start 302: pywrap-all; Start 39: cc23; Start 116: dcft8; Start 306: pywrap-checkrun-rhf; Start 37: cc21; Start 41: cc25; Start 43: cc27; Start 30: cc14; 1/413 Test #103: cubeprop-frontier ................ Passed 3.69 sec; Start 308: pywrap-checkrun-uhf; 2/413 Test #30: cc14 ............................. Passed 795.14 sec; Start 396: python-vibanalysis; 3/413 Test #43: cc27 ............................. Passed 816.39 sec; Start 77: cc7; 4/413 Test #39: cc23 ............................. Passed 918.13 sec; Start 242: ocepa-freq1; 5/413 Test #37: cc21 ............................. Passed 921.94 sec; Start 32: cc16; 6/413 Test #41: cc25 ............................. Passed 923.19 sec; Start 25: cc13; 7/413 Test #42: cc26 ............................. Passed 1051.53 sec; Start 307: pywrap-checkrun-rohf; 8/413 Test #116: dcft8 ............................ Passed 1117.15 sec; Start 157: dft-grad-lr3; 9/413 Test #40: cc24 ............................. Passed 1209.65 sec; Start 229: mp2-def2; 10/413 Test #36: cc2 .............................. Passed 1231.86 sec; Start 180: fsapt1; 11/413 Test #32: cc16 ............................. Passed 452.47 sec; Start 113: dcft5; 12/413 Test #25: cc13 ............................. Passed 471.17 sec; Start 13: cbs-xtpl-alpha; 13/413 Test #147: dfomp2-grad3 ..................... Passed 1406.19 sec; Start 29: cc13d; 14/413 Test #105: dcft-grad1 ....................... Passed 1455.46 sec; Start 184: isapt1; 15/413 Test #308: pywrap-checkrun-uhf .............. Passed 1474.71 sec; Start 11: cbs-delta-energy; 16/413 Test #306: pywrap-checkrun-rhf .............. Passed 1487.57 sec; Start 48: cc31; 17/413 Test #302: pywrap-all ....................... Passed 1522.41",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:50,timeout,timeout,50,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 111: dcft4; Start 104: dcft-grad1; Start 301: pywrap-all; Start 305: pywrap-checkrun-rhf; Start 307: pywrap-checkrun-uhf; Start 37: cc21; Start 46: cc3; Start 41: cc25; Start 39: cc23; Start 146: dfomp2-grad3; Start 77: cc7; Start 43: cc27; Start 306: pywrap-checkrun-rohf; Start 241: ocepa-freq1; Start 395: python-vibanalysis; Start 40: cc24; 1/412 Test #241: ocepa-freq1 ...................... Passed 939.44 sec; Start 42: cc26; 2/412 Test #40: cc24 ............................. Passed 990.28 sec; Start 115: dcft8; 3/412 Test #77: cc7 .............................. Passed 1076.46 sec; Start 36: cc2; 4/412 Test #43: cc27 ............................. Passed 1079.37 sec; Start 25: cc13; 5/412 Test #306: pywrap-checkrun-rohf ............. Passed 1087.82 sec; Start 156: dft-grad-lr3; 6/412 Test #39: cc23 ............................. Passed 1252.44 sec; Start 228: mp2-def2; 7/412 Test #37: cc21 ............................. Passed 1273.54 sec; Start 30: cc14; 8/412 Test #41: cc25 ............................. Passed 1338.20 sec; Start 179: fsapt1; 9/412 Test #395: python-vibanalysis ............... Passed 1362.17 sec; Start 112: dcft5; 10/412 Test #156: dft-grad-lr3 ..................... Passed 428.34 sec; Start 29: cc13d; 11/412 Test #307: pywrap-checkrun-uhf .............. Passed 1529.35 sec; Start 13: cbs-xtpl-alpha; 12/412 Test #305: pywrap-checkrun-rhf .............. Passed 1560.06 sec; Start 360: tu6-cp-ne2; 13/412 Test #146: dfomp2-grad3 ..................... Passed 1580.99 sec; Start 183: isapt1; 14/412 Test #46: cc3 .............................. Passed 1614.45 sec; Start 387: cookbook-rohf-orb-rot; 15/412 Test #301: pywrap-all ....................... Passed 1620.63 sec; Start 45: cc29; 16/412 Test #104: dcft-grad1 ....................... Passed 1653.03 sec; Start 380: cc-module; 17/412 Test #228: mp2-def2 .........................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:50,timeout,timeout,50,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 111: dcft4; Start 37: cc21; Start 104: dcft-grad1; Start 301: pywrap-all; Start 305: pywrap-checkrun-rhf; Start 307: pywrap-checkrun-uhf; Start 46: cc3; Start 41: cc25; Start 39: cc23; Start 77: cc7; Start 146: dfomp2-grad3; Start 43: cc27; Start 395: python-vibanalysis; Start 241: ocepa-freq1; Start 306: pywrap-checkrun-rohf; Start 42: cc26; 1/412 Test #42: cc26 ............................. Passed 687.16 sec; Start 115: dcft8; 2/412 Test #241: ocepa-freq1 ...................... Passed 734.19 sec; Start 40: cc24; 3/412 Test #77: cc7 .............................. Passed 831.63 sec; Start 36: cc2; 4/412 Test #43: cc27 ............................. Passed 832.91 sec; Start 156: dft-grad-lr3; 5/412 Test #306: pywrap-checkrun-rohf ............. Passed 852.37 sec; Start 25: cc13; 6/412 Test #41: cc25 ............................. Passed 1089.91 sec; Start 228: mp2-def2; 7/412 Test #37: cc21 ............................. Passed 1123.37 sec; Start 112: dcft5; 8/412 Test #39: cc23 ............................. Passed 1129.22 sec; Start 30: cc14; 9/412 Test #395: python-vibanalysis ............... Passed 1214.88 sec; Start 179: fsapt1; 10/412 Test #156: dft-grad-lr3 ..................... Passed 406.18 sec; Start 29: cc13d; 11/412 Test #146: dfomp2-grad3 ..................... Passed 1250.03 sec; Start 13: cbs-xtpl-alpha; 12/412 Test #307: pywrap-checkrun-uhf .............. Passed 1252.06 sec; Start 183: isapt1; 13/412 Test #46: cc3 .............................. Passed 1265.86 sec; Start 360: tu6-cp-ne2; 14/412 Test #305: pywrap-checkrun-rhf .............. Passed 1275.03 sec; Start 45: cc29; 15/412 Test #301: pywrap-all ....................... Passed 1314.72 sec; Start 71: cc52; 16/412 Test #115: dcft8 ............................ Passed 739.08 sec; Start 387: cookbook-rohf-orb-rot; 17/412 Test #104: dcft-grad1 ....................... Passed 14",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:50,timeout,timeout,50,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 112: dcft4; Start 46: cc3; Start 105: dcft-grad1; Start 147: dfomp2-grad3; Start 36: cc2; Start 40: cc24; Start 302: pywrap-all; Start 42: cc26; Start 306: pywrap-checkrun-rhf; Start 116: dcft8; Start 39: cc23; Start 308: pywrap-checkrun-uhf; Start 41: cc25; Start 37: cc21; Start 43: cc27; Start 30: cc14; 1/413 Test #43: cc27 ............................. Passed 417.34 sec; Start 396: python-vibanalysis; 2/413 Test #30: cc14 ............................. Passed 440.89 sec; Start 77: cc7; 3/413 Test #37: cc21 ............................. Passed 462.06 sec; Start 242: ocepa-freq1; 4/413 Test #41: cc25 ............................. Passed 464.40 sec; Start 307: pywrap-checkrun-rohf; 5/413 Test #39: cc23 ............................. Passed 467.64 sec; Start 32: cc16; 6/413 Test #116: dcft8 ............................ Passed 546.67 sec; Start 25: cc13; 7/413 Test #42: cc26 ............................. Passed 674.21 sec; Start 157: dft-grad-lr3; 8/413 Test #36: cc2 .............................. Passed 736.38 sec; Start 180: fsapt1; 9/413 Test #147: dfomp2-grad3 ..................... Passed 744.74 sec; Start 229: mp2-def2; 10/413 Test #32: cc16 ............................. Passed 318.84 sec; Start 113: dcft5; 11/413 Test #25: cc13 ............................. Passed 288.74 sec; Start 13: cbs-xtpl-alpha; 12/413 Test #308: pywrap-checkrun-uhf .............. Passed 858.01 sec; Start 29: cc13d; 13/413 Test #105: dcft-grad1 ....................... Passed 867.96 sec; Start 184: isapt1; 14/413 Test #77: cc7 .............................. Passed 433.83 sec; Start 11: cbs-delta-energy; 15/413 Test #306: pywrap-checkrun-rhf .............. Passed 876.28 sec; Start 48: cc31; 16/413 Test #40: cc24 ............................. Passed 876.40 sec; Start 114: dcft6; 17/413 Test #302: pywrap-all ....................... Passed 905.57 sec; Start 45: cc29",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:50,timeout,timeout,50,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 122: dfccdl1; Start 124: dfccsd1; Start 395: python-vibanalysis; Start 156: dft-grad-lr3; Start 104: dcft-grad1; Start 228: mp2-def2; Start 179: fsapt1; Start 111: dcft4; Start 301: pywrap-all; Start 39: cc23; Start 183: isapt1; Start 37: cc21; Start 36: cc2; Start 42: cc26; Start 46: cc3; Start 40: cc24; 1/412 Test #122: dfccdl1 .......................... Passed 6.36 sec; Start 18: cbs-xtpl-func; 2/412 Test #124: dfccsd1 .......................... Passed 10.68 sec; Start 182: fsapt-allterms; 3/412 Test #42: cc26 ............................. Passed 241.32 sec; Start 194: fd-freq-energy-large; 4/412 Test #36: cc2 .............................. Passed 267.40 sec; Start 196: fd-freq-gradient-large; 5/412 Test #40: cc24 ............................. Passed 276.21 sec; Start 279: opt13; 6/412 Test #37: cc21 ............................. Passed 307.87 sec; Start 241: ocepa-freq1; 7/412 Test #39: cc23 ............................. Passed 310.94 sec; Start 41: cc25; 8/412 Test #46: cc3 .............................. Passed 370.77 sec; Start 146: dfomp2-grad3; 9/412 Test #228: mp2-def2 ......................... Passed 429.97 sec; Start 307: pywrap-checkrun-uhf; 10/412 Test #183: isapt1 ........................... Passed 436.25 sec; Start 305: pywrap-checkrun-rhf; 11/412 Test #156: dft-grad-lr3 ..................... Passed 470.44 sec; Start 112: dcft5; 12/412 Test #104: dcft-grad1 ....................... Passed 479.75 sec; Start 374: dft-custom-mgga; 13/412 Test #111: dcft4 ............................ Passed 507.03 sec; Start 43: cc27; 14/412 Test #301: pywrap-all ....................... Passed 521.85 sec; Start 113: dcft6; 15/412 Test #41: cc25 ............................. Passed 236.96 sec; Start 321: sapt6; 16/412 Test #241: ocepa-freq1 ...................... Passed 240.27 sec; Start 77: cc7; 17/412 Test #196: fd-freq-gradient-large ......",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:50,timeout,timeout,50,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 36: cc2; Start 40: cc24; Start 46: cc3; Start 39: cc23; Start 37: cc21; Start 42: cc26; Start 41: cc25; Start 43: cc27; Start 112: dcft4; Start 105: dcft-grad1; Start 396: python-vibanalysis; Start 30: cc14; Start 147: dfomp2-grad3; Start 157: dft-grad-lr3; Start 229: mp2-def2; Start 32: cc16; 1/413 Test #229: mp2-def2 ......................... Passed 366.62 sec; Start 25: cc13; 2/413 Test #157: dft-grad-lr3 ..................... Passed 422.32 sec; Start 180: fsapt1; 3/413 Test #32: cc16 ............................. Passed 556.73 sec; Start 116: dcft8; 4/413 Test #30: cc14 ............................. Passed 752.25 sec; Start 29: cc13d; 5/413 Test #43: cc27 ............................. Passed 867.54 sec; Start 77: cc7; 6/413 Test #39: cc23 ............................. Passed 965.39 sec; Start 113: dcft5; 7/413 Test #25: cc13 ............................. Passed 598.94 sec; Start 242: ocepa-freq1; 8/413 Test #41: cc25 ............................. Passed 970.65 sec; Start 184: isapt1; 9/413 Test #37: cc21 ............................. Passed 984.02 sec; Start 45: cc29; 10/413 Test #42: cc26 ............................. Passed 997.98 sec; Start 61: cc43; 11/413 Test #29: cc13d ............................ Passed 374.09 sec; Start 13: cbs-xtpl-alpha; 12/413 Test #40: cc24 ............................. Passed 1131.64 sec; Start 59: cc41; 13/413 Test #36: cc2 .............................. Passed 1134.77 sec; Start 48: cc31; 14/413 Test #61: cc43 ............................. Passed 150.20 sec; Start 302: pywrap-all; 15/413 Test #45: cc29 ............................. Passed 198.44 sec; Start 306: pywrap-checkrun-rhf; 16/413 Test #396: python-vibanalysis ............... Passed 1286.48 sec; Start 114: dcft6; 17/413 Test #59: cc41 ............................. Passed 185.32 sec; Start 18: cbs-xtpl-func; 18/413 Test #184: isapt1 .........",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:50,timeout,timeout,50,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; Start 25: cc13a; Start 113: dcft7; Start 205: frac-traverse; Start 316: sapt2; Start 318: sapt4; Start 325: scf-bz2; Start 1: adc1; Start 2: adc2; 1/411 Test #1: adc1 ............................. Passed 23.85 sec; Start 3: casscf-fzc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 4.04 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 2.66 sec; Start 5: casscf-sa-sp; 4/411 Test #2: adc2 ............................. Passed 42.07 sec; Start 6: ao-casscf-sp; 5/411 Test #6: ao-casscf-sp ..................... Passed 4.18 sec; Start 7: casscf-sp; 6/411 Test #5: casscf-sa-sp ..................... Passed 16.65 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 2.19 sec; Start 9: castup2; 8/411 Test #9: castup2 .......................... Passed 8.79 sec; Start 10: castup3; 9/411 Test #7: casscf-sp ........................ Passed 13.45 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 5.96 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 25.52 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 63.99 sec; Start 14: cbs-xtpl-energy; 13/411 Test #325: scf-bz2 .......................... Passed 128.53 sec; Start 15: cbs-xtpl-freq; 14/411 Test #14: cbs-xtpl-energy .................. Passed 15.43 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 11.30 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 17.01 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ...............",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:50,timeout,timeout,50,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 395: python-vibanalysis; Start 179: fsapt1; Start 183: isapt1; Start 18: cbs-xtpl-func; Start 182: fsapt-allterms; Start 194: fd-freq-energy-large; Start 196: fd-freq-gradient-large; Start 279: opt13; Start 26: cc13a; Start 114: dcft7; Start 206: frac-traverse; Start 317: sapt2; Start 319: sapt4; Start 326: scf-bz2; Start 1: adc1; Start 2: adc2; 1/412 Test #1: adc1 ............................. Passed 40.38 sec; Start 3: casscf-fzc-sp; 2/412 Test #3: casscf-fzc-sp .................... Passed 7.58 sec; Start 4: casscf-semi; 3/412 Test #4: casscf-semi ...................... Passed 3.39 sec; Start 5: casscf-sa-sp; 4/412 Test #2: adc2 ............................. Passed 68.12 sec; Start 6: ao-casscf-sp; 5/412 Test #5: casscf-sa-sp ..................... Passed 17.41 sec; Start 7: casscf-sp; 6/412 Test #6: ao-casscf-sp ..................... Passed 8.11 sec; Start 8: castup1; 7/412 Test #8: castup1 .......................... Passed 3.07 sec; Start 9: castup2; 8/412 Test #7: casscf-sp ........................ Passed 14.70 sec; Start 10: castup3; 9/412 Test #9: castup2 .......................... Passed 10.03 sec; Start 11: cbs-delta-energy; 10/412 Test #10: castup3 .......................... Passed 8.30 sec; Start 12: cbs-parser; 11/412 Test #12: cbs-parser ....................... Passed 37.55 sec; Start 13: cbs-xtpl-alpha; 12/412 Test #11: cbs-delta-energy ................. Passed 64.49 sec; Start 14: cbs-xtpl-energy; 13/412 Test #14: cbs-xtpl-energy .................. Passed 15.23 sec; Start 15: cbs-xtpl-freq; 14/412 Test #15: cbs-xtpl-freq .................... Passed 9.08 sec; Start 16: cbs-xtpl-gradient; 15/412 Test #326: scf-bz2 .......................... Passed 188.03 sec; Start 17: cbs-xtpl-opt; 16/412 Test #16: cbs-xtpl-gradient ................ Passed 24.11 sec; Start 19: cbs-xtpl-nbody; 17/412 Test #19: cbs-xtpl-nbody ...............",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:50,timeout,timeout,50,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 395: python-vibanalysis; Start 41: cc25; Start 46: cc3; Start 37: cc21; Start 39: cc23; Start 104: dcft-grad1; Start 43: cc27; Start 111: dcft4; Start 156: dft-grad-lr3; Start 228: mp2-def2; Start 40: cc24; Start 36: cc2; Start 179: fsapt1; Start 301: pywrap-all; Start 146: dfomp2-grad3; Start 305: pywrap-checkrun-rhf; 1/412 Test #228: mp2-def2 ......................... Passed 422.59 sec; Start 42: cc26; 2/412 Test #156: dft-grad-lr3 ..................... Passed 456.14 sec; Start 307: pywrap-checkrun-uhf; 3/412 Test #36: cc2 .............................. Passed 642.46 sec; Start 77: cc7; 4/412 Test #40: cc24 ............................. Passed 651.87 sec; Start 241: ocepa-freq1; 5/412 Test #43: cc27 ............................. Passed 960.14 sec; Start 183: isapt1; 6/412 Test #39: cc23 ............................. Passed 1144.43 sec; Start 306: pywrap-checkrun-rohf; 7/412 Test #41: cc25 ............................. Passed 1174.58 sec; Start 25: cc13; 8/412 Test #146: dfomp2-grad3 ..................... Passed 1217.72 sec; Start 45: cc29; 9/412 Test #46: cc3 .............................. Passed 1255.05 sec; Start 29: cc13d; 10/412 Test #42: cc26 ............................. Passed 914.66 sec; Start 115: dcft8; 11/412 Test #183: isapt1 ........................... Passed 401.39 sec; Start 112: dcft5; 12/412 Test #395: python-vibanalysis ............... Passed 1424.43 sec; Start 18: cbs-xtpl-func; 13/412 Test #37: cc21 ............................. Passed 1446.40 sec; Start 182: fsapt-allterms; 14/412 Test #45: cc29 ............................. Passed 300.99 sec; Start 194: fd-freq-energy-large; 15/412 Test #104: dcft-grad1 ....................... Passed 1521.99 sec; Start 196: fd-freq-gradient-large; 16/412 Test #305: pywrap-checkrun-rhf .............. Passed 1605.76 sec; Start 279: opt13; 17/412 Test #301: pywrap-all .............",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:50,timeout,timeout,50,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 3: casscf-fzc-sp; Start 111: dcft4; Start 104: dcft-grad1; Start 301: pywrap-all; Start 46: cc3; Start 305: pywrap-checkrun-rhf; Start 307: pywrap-checkrun-uhf; Start 146: dfomp2-grad3; Start 37: cc21; Start 39: cc23; Start 41: cc25; Start 395: python-vibanalysis; Start 77: cc7; Start 43: cc27; Start 40: cc24; Start 306: pywrap-checkrun-rohf; 1/412 Test #3: casscf-fzc-sp .................... Passed 41.56 sec; Start 241: ocepa-freq1; 2/412 Test #43: cc27 ............................. Passed 853.53 sec; Start 42: cc26; 3/412 Test #77: cc7 .............................. Passed 857.39 sec; Start 36: cc2; 4/412 Test #40: cc24 ............................. Passed 881.10 sec; Start 115: dcft8; 5/412 Test #306: pywrap-checkrun-rohf ............. Passed 911.01 sec; Start 156: dft-grad-lr3; 6/412 Test #241: ocepa-freq1 ...................... Passed 872.67 sec; Start 228: mp2-def2; 7/412 Test #41: cc25 ............................. Passed 973.90 sec; Start 25: cc13; 8/412 Test #37: cc21 ............................. Passed 984.96 sec; Start 179: fsapt1; 9/412 Test #39: cc23 ............................. Passed 988.58 sec; Start 30: cc14; 10/412 Test #395: python-vibanalysis ............... Passed 1210.67 sec; Start 13: cbs-xtpl-alpha; 11/412 Test #146: dfomp2-grad3 ..................... Passed 1227.58 sec; Start 112: dcft5; 12/412 Test #46: cc3 .............................. Passed 1280.30 sec; Start 183: isapt1; 13/412 Test #228: mp2-def2 ......................... Passed 410.01 sec; Start 29: cc13d; 14/412 Test #305: pywrap-checkrun-rhf .............. Passed 1326.94 sec; Start 360: tu6-cp-ne2; 15/412 Test #307: pywrap-checkrun-uhf .............. Passed 1329.33 sec; Start 387: cookbook-rohf-orb-rot; 16/412 Test #156: dft-grad-lr3 ..................... Passed 429.40 sec; Start 45: cc29; 17/412 Test #301: pywrap-all ....................... Passed 1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:50,timeout,timeout,50,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 46: cc3; Start 112: dcft4; Start 105: dcft-grad1; Start 36: cc2; Start 40: cc24; Start 147: dfomp2-grad3; Start 42: cc26; Start 37: cc21; Start 39: cc23; Start 41: cc25; Start 43: cc27; Start 396: python-vibanalysis; Start 30: cc14; Start 116: dcft8; Start 302: pywrap-all; Start 25: cc13; 1/413 Test #25: cc13 ............................. Passed 343.48 sec; Start 77: cc7; 2/413 Test #43: cc27 ............................. Passed 564.16 sec; Start 306: pywrap-checkrun-rhf; 3/413 Test #41: cc25 ............................. Passed 634.21 sec; Start 242: ocepa-freq1; 4/413 Test #37: cc21 ............................. Passed 636.00 sec; Start 32: cc16; 5/413 Test #30: cc14 ............................. Passed 773.98 sec; Start 308: pywrap-checkrun-uhf; 6/413 Test #39: cc23 ............................. Passed 954.07 sec; Start 157: dft-grad-lr3; 7/413 Test #42: cc26 ............................. Passed 1005.92 sec; Start 229: mp2-def2; 8/413 Test #77: cc7 .............................. Passed 682.74 sec; Start 180: fsapt1; 9/413 Test #147: dfomp2-grad3 ..................... Passed 1064.72 sec; Start 113: dcft5; 10/413 Test #116: dcft8 ............................ Passed 1093.28 sec; Start 29: cc13d; 11/413 Test #32: cc16 ............................. Passed 458.97 sec; Start 307: pywrap-checkrun-rohf; 12/413 Test #40: cc24 ............................. Passed 1133.10 sec; Start 13: cbs-xtpl-alpha; 13/413 Test #36: cc2 .............................. Passed 1137.87 sec; Start 184: isapt1; 14/413 Test #105: dcft-grad1 ....................... Passed 1187.32 sec; Start 48: cc31; 15/413 Test #242: ocepa-freq1 ...................... Passed 651.24 sec; Start 45: cc29; 16/413 Test #396: python-vibanalysis ............... Passed 1355.01 sec; Start 114: dcft6; 17/413 Test #29: cc13d ............................ Passed 265.22 sec; Start 59: cc41; 18/4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:50,timeout,timeout,50,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 98: cisd-sp; Start 243: ocepa1; Start 45: cc3; Start 103: dcft-grad1; Start 110: dcft4; Start 39: cc24; Start 35: cc2; Start 40: cc25; Start 38: cc23; Start 36: cc21; Start 41: cc26; Start 394: python-vibanalysis; Start 145: dfomp2-grad3; Start 42: cc27; Start 300: pywrap-all; Start 76: cc7; 1/411 Test #98: cisd-sp .......................... Passed 12.34 sec; Start 304: pywrap-checkrun-rhf; 2/411 Test #243: ocepa1 ........................... Passed 18.70 sec; Start 306: pywrap-checkrun-uhf; 3/411 Test #42: cc27 ............................. Passed 832.70 sec; Start 29: cc14; 4/411 Test #76: cc7 .............................. Passed 833.35 sec; Start 240: ocepa-freq1; 5/411 Test #41: cc26 ............................. Passed 876.66 sec; Start 155: dft-grad-lr3; 6/411 Test #38: cc23 ............................. Passed 937.42 sec; Start 114: dcft8; 7/411 Test #36: cc21 ............................. Passed 943.79 sec; Start 227: mp2-def2; 8/411 Test #40: cc25 ............................. Passed 955.88 sec; Start 178: fsapt1; 9/411 Test #35: cc2 .............................. Passed 975.82 sec; Start 111: dcft5; 10/411 Test #39: cc24 ............................. Passed 1000.55 sec; Start 13: cbs-xtpl-alpha; 11/411 Test #155: dft-grad-lr3 ..................... Passed 395.18 sec; Start 305: pywrap-checkrun-rohf; 12/411 Test #394: python-vibanalysis ............... Passed 1285.91 sec; Start 24: cc13; 13/411 Test #227: mp2-def2 ......................... Passed 371.74 sec; Start 31: cc16; 14/411 Test #29: cc14 ............................. Passed 619.00 sec; Start 28: cc13d; 15/411 Test #145: dfomp2-grad3 ..................... Passed 1456.77 sec; Start 182: isapt1; 16/411 Test #304: pywrap-checkrun-rhf .............. Passed 1461.98 sec; Start 11: cbs-delta-energy; 17/411 Test #111: dcft5 ............................ Passed 505.16 sec; Start 4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:50,timeout,timeout,50,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; \ Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; Start 25: cc13a; Start 113: dcft7; Start 205: frac-traverse; Start 316: sapt2; Start 318: sapt4; Start 325: scf-bz2; Start 1: adc1; Start 2: adc2; 1/411 Test #1: adc1 ............................. Passed 40.70 sec; Start 3: casscf-fzc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 4.05 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 2.83 sec; Start 5: casscf-sa-sp; 4/411 Test #5: casscf-sa-sp ..................... Passed 16.78 sec; Start 6: ao-casscf-sp; 5/411 Test #2: adc2 ............................. Passed 66.82 sec; Start 7: casscf-sp; 6/411 Test #6: ao-casscf-sp ..................... Passed 9.16 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 2.71 sec; Start 9: castup2; 8/411 Test #7: casscf-sp ........................ Passed 13.94 sec; Start 10: castup3; 9/411 Test #9: castup2 .......................... Passed 7.77 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 7.44 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 25.04 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 58.74 sec; Start 14: cbs-xtpl-energy; 13/411 Test #14: cbs-xtpl-energy .................. Passed 14.17 sec; Start 15: cbs-xtpl-freq; 14/411 Test #325: scf-bz2 .......................... Passed 165.45 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 12.40 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 21.29 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt .............",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:50,timeout,timeout,50,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 16 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_3.git/build; Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; Start 25: cc13a; Start 113: dcft7; Start 205: frac-traverse; Start 316: sapt2; Start 318: sapt4; Start 325: scf-bz2; Start 1: adc1; Start 2: adc2; 1/411 Test #1: adc1 ............................. Passed 24.09 sec; Start 3: casscf-fzc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 2.52 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 3.06 sec; Start 5: casscf-sa-sp; 4/411 Test #2: adc2 ............................. Passed 41.92 sec; Start 6: ao-casscf-sp; 5/411 Test #5: casscf-sa-sp ..................... Passed 13.45 sec; Start 7: casscf-sp; 6/411 Test #6: ao-casscf-sp ..................... Passed 4.76 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 1.92 sec; Start 9: castup2; 8/411 Test #7: casscf-sp ........................ Passed 9.38 sec; Start 10: castup3; 9/411 Test #9: castup2 .......................... Passed 5.54 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 5.87 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 26.15 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 55.75 sec; Start 14: cbs-xtpl-energy; 13/411 Test #14: cbs-xtpl-energy .................. Passed 11.20 sec; Start 15: cbs-xtpl-freq; 14/411 Test #325: scf-bz2 .......................... Passed 126.40 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 6.79 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 24.78 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt .................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:50,timeout,timeout,50,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['timeout'],['timeout']
Safety,```; $ ctest -j 16 -E dft-bench --timeout 3600; Test project /home/raimis/psi4.git/linux_build; Start 83: cdomp2-1; Start 160: dft-grad-lr1; Start 394: python-vibanalysis; Start 103: dcft-grad1; Start 300: pywrap-all; Start 110: dcft4; Start 162: dft-grad-lr3; Start 45: cc3; Start 227: mp2-def2; Start 178: fsapt1; Start 304: pywrap-checkrun-rhf; Start 306: pywrap-checkrun-uhf; Start 182: isapt1; Start 145: dfomp2-grad3; Start 38: cc23; Start 39: cc24; 1/411 Test #83: cdomp2-1 ......................... Passed 11.78 sec; Start 40: cc25; 2/411 Test #160: dft-grad-lr1 ..................... Passed 17.60 sec; Start 36: cc21; 3/411 Test #227: mp2-def2 ......................... Passed 416.34 sec; Start 240: ocepa-freq1; 4/411 Test #182: isapt1 ........................... Passed 437.25 sec; Start 35: cc2; 5/411 Test #162: dft-grad-lr3 ..................... Passed 438.96 sec; Start 76: cc7; 6/411 Test #38: cc23 ............................. Passed 670.24 sec; Start 18: cbs-xtpl-func; 7/411 Test #36: cc21 ............................. Passed 681.15 sec; Start 181: fsapt-allterms; 8/411 Test #40: cc25 ............................. Passed 702.11 sec; Start 193: fd-freq-energy-large; 9/411 Test #39: cc24 ............................. Passed 728.49 sec; Start 195: fd-freq-gradient-large; 10/411 Test #195: fd-freq-gradient-large ........... Passed 286.40 sec; Start 278: opt13; 11/411 Test #145: dfomp2-grad3 ..................... Passed 1015.18 sec; Start 11: cbs-delta-energy; 12/411 Test #76: cc7 .............................. Passed 587.31 sec; Start 373: dft-custom-mgga; 13/411 Test #306: pywrap-checkrun-uhf .............. Passed 1029.41 sec; Start 320: sapt6; 14/411 Test #45: cc3 .............................. Passed 1036.97 sec; Start 111: dcft5; 15/411 Test #240: ocepa-freq1 ...................... Passed 625.43 sec; Start 41: cc26; 16/411 Test #304: pywrap-checkrun-rhf .............. Passed 1061.37 sec; Start 155: dfscf-bz2; 17/411 Test #35: cc2 .............................. P,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:34,timeout,timeout,34,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 111: dcft4; Start 104: dcft-grad1; Start 301: pywrap-all; Start 305: pywrap-checkrun-rhf; Start 46: cc3; Start 307: pywrap-checkrun-uhf; Start 37: cc21; Start 146: dfomp2-grad3; 1/412 Test #37: cc21 ............................. Passed 527.58 sec; Start 41: cc25; 2/412 Test #307: pywrap-checkrun-uhf .............. Passed 595.37 sec; Start 39: cc23; 3/412 Test #305: pywrap-checkrun-rhf .............. Passed 613.40 sec; Start 77: cc7; 4/412 Test #301: pywrap-all ....................... Passed 652.73 sec; Start 43: cc27; 5/412 Test #146: dfomp2-grad3 ..................... Passed 673.97 sec; Start 306: pywrap-checkrun-rohf; 6/412 Test #46: cc3 .............................. Passed 677.84 sec; Start 241: ocepa-freq1; 7/412 Test #104: dcft-grad1 ....................... Passed 777.43 sec; Start 40: cc24; 8/412 Test #111: dcft4 ............................ Passed 834.58 sec; Start 42: cc26; 9/412 Test #77: cc7 .............................. Passed 317.71 sec; Start 36: cc2; 10/412 Test #41: cc25 ............................. Passed 421.47 sec; Start 115: dcft8; 11/412 Test #43: cc27 ............................. Passed 327.75 sec; Start 395: python-vibanalysis; 12/412 Test #306: pywrap-checkrun-rohf ............. Passed 359.48 sec; Start 25: cc13; 13/412 Test #241: ocepa-freq1 ...................... Passed 402.21 sec; Start 30: cc14; 14/412 Test #39: cc23 ............................. Passed 487.99 sec; Start 13: cbs-xtpl-alpha; 15/412 Test #42: cc26 ............................. Passed 471.50 sec; Start 156: dft-grad-lr3; 16/412 Test #40: cc24 ............................. Passed 560.40 sec; Start 29: cc13d; 17/412 Test #115: dcft8 ............................ Passed 391.75 sec; Start 112: dcft5; 18/412 Test #25: cc13 ............................. Passed 308.71 sec; Start 228: mp2-def2; 19/412 Test #30: cc14 ............................. Passe",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:49,timeout,timeout,49,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 111: dcft4; Start 104: dcft-grad1; Start 301: pywrap-all; Start 46: cc3; Start 305: pywrap-checkrun-rhf; Start 307: pywrap-checkrun-uhf; Start 146: dfomp2-grad3; Start 37: cc21; 1/412 Test #37: cc21 ............................. Passed 444.99 sec; Start 41: cc25; 2/412 Test #307: pywrap-checkrun-uhf .............. Passed 541.32 sec; Start 39: cc23; 3/412 Test #305: pywrap-checkrun-rhf .............. Passed 559.64 sec; Start 77: cc7; 4/412 Test #301: pywrap-all ....................... Passed 576.06 sec; Start 43: cc27; 5/412 Test #146: dfomp2-grad3 ..................... Passed 577.08 sec; Start 306: pywrap-checkrun-rohf; 6/412 Test #46: cc3 .............................. Passed 585.00 sec; Start 40: cc24; 7/412 Test #104: dcft-grad1 ....................... Passed 654.89 sec; Start 395: python-vibanalysis; 8/412 Test #111: dcft4 ............................ Passed 693.10 sec; Start 241: ocepa-freq1; 9/412 Test #41: cc25 ............................. Passed 298.26 sec; Start 42: cc26; 10/412 Test #39: cc23 ............................. Passed 294.97 sec; Start 36: cc2; 11/412 Test #77: cc7 .............................. Passed 286.85 sec; Start 115: dcft8; 12/412 Test #43: cc27 ............................. Passed 281.14 sec; Start 25: cc13; 13/412 Test #306: pywrap-checkrun-rohf ............. Passed 302.83 sec; Start 156: dft-grad-lr3; 14/412 Test #40: cc24 ............................. Passed 311.20 sec; Start 30: cc14; 15/412 Test #42: cc26 ............................. Passed 239.25 sec; Start 228: mp2-def2; 16/412 Test #241: ocepa-freq1 ...................... Passed 322.81 sec; Start 13: cbs-xtpl-alpha; 17/412 Test #25: cc13 ............................. Passed 164.06 sec; Start 179: fsapt1; 18/412 Test #30: cc14 ............................. Passed 144.79 sec; Start 112: dcft5; 19/412 Test #115: dcft8 ............................ Pas",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899:49,timeout,timeout,49,https://psicode.org,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 226: mp2-1; Start 228: mp2-grad1; Start 394: python-vibanalysis; Start 300: pywrap-all; Start 103: dcft-grad1; Start 304: pywrap-checkrun-rhf; Start 306: pywrap-checkrun-uhf; Start 162: dft-grad-lr3; 1/411 Test #228: mp2-grad1 ........................ Passed 2.06 sec; Start 110: dcft4; 2/411 Test #226: mp2-1 ............................ Passed 6.34 sec; Start 40: cc25; 3/411 Test #40: cc25 ............................. Passed 153.57 sec; Start 178: fsapt1; 4/411 Test #306: pywrap-checkrun-uhf .............. Passed 204.87 sec; Start 39: cc24; 5/411 Test #304: pywrap-checkrun-rhf .............. Passed 232.62 sec; Start 45: cc3; 6/411 Test #300: pywrap-all ....................... Passed 243.53 sec; Start 38: cc23; 7/411 Test #110: dcft4 ............................ Passed 251.30 sec; Start 35: cc2; 8/411 Test #39: cc24 ............................. Passed 155.32 sec; Start 227: mp2-def2; 9/411 Test #103: dcft-grad1 ....................... Passed 361.43 sec; Start 36: cc21; 10/411 Test #38: cc23 ............................. Passed 142.28 sec; Start 305: pywrap-checkrun-rohf; 11/411 Test #35: cc2 .............................. Passed 153.53 sec; Start 41: cc26; 12/411 Test #162: dft-grad-lr3 ..................... Passed 443.69 sec; Start 182: isapt1; 13/411 Test #45: cc3 .............................. Passed 236.97 sec; Start 145: dfomp2-grad3; 14/411 Test #36: cc21 ............................. Passed 148.51 sec; Start 42: cc27; 15/411 Test #305: pywrap-checkrun-rohf ............. Passed 140.52 sec; Start 29: cc14; 16/411 Test #41: cc26 ............................. Passed 135.18 sec; Start 111: dcft5; 17/411 Test #42: cc27 ............................. Passed 101.05 sec; Start 18: cbs-xtpl-func; 18/411 Test #29: cc14 ............................. Passed 87.25 sec; Start 181: fsapt-allterms; 19/411 Test #145: dfomp2-grad3 .................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:49,timeout,timeout,49,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; 1/411 Test #195: fd-freq-gradient-large ........... Passed 297.78 sec; Start 162: dft-grad-lr3; 2/411 Test #182: isapt1 ........................... Passed 469.93 sec; Start 227: mp2-def2; 3/411 Test #18: cbs-xtpl-func .................... Passed 485.98 sec; Start 25: cc13a; 4/411 Test #193: fd-freq-energy-large ............. Passed 551.44 sec; Start 113: dcft7; 5/411 Test #181: fsapt-allterms ................... Passed 652.63 sec; Start 205: frac-traverse; 6/411 Test #394: python-vibanalysis ............... Passed 680.49 sec; Start 316: sapt2; 7/411 Test #25: cc13a ............................ Passed 254.82 sec; Start 318: sapt4; 8/411 Test #162: dft-grad-lr3 ..................... Passed 489.85 sec; Start 325: scf-bz2; 9/411 Test #113: dcft7 ............................ Passed 278.82 sec; Start 373: dft-custom-mgga; 10/411 Test #278: opt13 ............................ Passed 847.95 sec; Start 320: sapt6; 11/411 Test #205: frac-traverse .................... Passed 221.61 sec; Start 155: dfscf-bz2; 12/411 Test #227: mp2-def2 ......................... Passed 440.79 sec; Start 183: isapt2; 13/411 Test #325: scf-bz2 .......................... Passed 127.53 sec; Start 347: sapt-dft2; 14/411 Test #320: sapt6 ............................ Passed 169.47 sec; Start 112: dcft6; 15/411 Test #155: dfscf-bz2 ........................ Passed 146.26 sec; Start 97: cisd-opt-fd; 16/411 Test #373: dft-custom-mgga .................. Passed 193.16 sec; Start 281: opt-irc-2; 17/411 Test #316: sapt2 ............................ Passed 360.69 sec; Start 300: pywrap-all; 18/411 Test #347: sapt-dft2 ........................ Passed 128.97 sec; Start 161: dft-grad-lr2;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:49,timeout,timeout,49,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; 1/411 Test #195: fd-freq-gradient-large ........... Passed 340.82 sec; Start 25: cc13a; 2/411 Test #18: cbs-xtpl-func .................... Passed 486.53 sec; Start 113: dcft7; 3/411 Test #182: isapt1 ........................... Passed 538.29 sec; Start 205: frac-traverse; 4/411 Test #193: fd-freq-energy-large ............. Passed 603.47 sec; Start 316: sapt2; 5/411 Test #25: cc13a ............................ Passed 281.79 sec; Start 318: sapt4; 6/411 Test #181: fsapt-allterms ................... Passed 716.17 sec; Start 325: scf-bz2; 7/411 Test #205: frac-traverse .................... Passed 235.66 sec; Start 1: adc1; 8/411 Test #1: adc1 ............................. Passed 27.11 sec; Start 2: adc2; 9/411 Test #113: dcft7 ............................ Passed 326.30 sec; Start 3: casscf-fzc-sp; 10/411 Test #3: casscf-fzc-sp .................... Passed 13.41 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 9.02 sec; Start 5: casscf-sa-sp; 12/411 Test #325: scf-bz2 .......................... Passed 127.53 sec; Start 6: ao-casscf-sp; 13/411 Test #2: adc2 ............................. Passed 44.92 sec; Start 7: casscf-sp; 14/411 Test #6: ao-casscf-sp ..................... Passed 6.87 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 2.39 sec; Start 9: castup2; 16/411 Test #5: casscf-sa-sp ..................... Passed 19.18 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 9.54 sec; Start 11: cbs-delta-energy; 18/411 Test #10: castup3 .......................... Passed 18.56 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ......................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:49,timeout,timeout,49,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_2.git/build; Start 98: cisd-sp; Start 119: dfcasscf-sp; Start 394: python-vibanalysis; Start 45: cc3; Start 162: dft-grad-lr3; Start 227: mp2-def2; Start 178: fsapt1; Start 103: dcft-grad1; 1/411 Test #119: dfcasscf-sp ...................... Passed 4.33 sec; Start 300: pywrap-all; 2/411 Test #98: cisd-sp .......................... Passed 10.64 sec; Start 304: pywrap-checkrun-rhf; 3/411 Test #45: cc3 .............................. Passed 367.14 sec; Start 39: cc24; 4/411 Test #300: pywrap-all ....................... Passed 381.81 sec; Start 306: pywrap-checkrun-uhf; 5/411 Test #304: pywrap-checkrun-rhf .............. Passed 390.00 sec; Start 182: isapt1; 6/411 Test #227: mp2-def2 ......................... Passed 446.06 sec; Start 35: cc2; 7/411 Test #162: dft-grad-lr3 ..................... Passed 473.06 sec; Start 41: cc26; 8/411 Test #103: dcft-grad1 ....................... Passed 617.53 sec; Start 110: dcft4; 9/411 Test #39: cc24 ............................. Passed 338.53 sec; Start 40: cc25; 10/411 Test #182: isapt1 ........................... Passed 433.14 sec; Start 305: pywrap-checkrun-rohf; 11/411 Test #41: cc26 ............................. Passed 423.76 sec; Start 38: cc23; 12/411 Test #35: cc2 .............................. Passed 450.90 sec; Start 36: cc21; 13/411 Test #306: pywrap-checkrun-uhf .............. Passed 571.32 sec; Start 42: cc27; 14/411 Test #394: python-vibanalysis ............... Passed 966.42 sec; Start 76: cc7; 15/411 Test #40: cc25 ............................. Passed 480.63 sec; Start 18: cbs-xtpl-func; 16/411 Test #36: cc21 ............................. Passed 484.30 sec; Start 181: fsapt-allterms; 17/411 Test #38: cc23 ............................. Passed 495.58 sec; Start 193: fd-freq-energy-large; 18/411 Test #42: cc27 ............................. Passed 441.98 sec; Start 195: fd-freq-gradient-large; 19/411 Test #76: cc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:49,timeout,timeout,49,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_3.git/build; Start 243: ocepa1; Start 394: python-vibanalysis; Start 162: dft-grad-lr3; Start 227: mp2-def2; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; 1/411 Test #243: ocepa1 ........................... Passed 1.89 sec; Start 193: fd-freq-energy-large; 2/411 Test #227: mp2-def2 ......................... Passed 436.21 sec; Start 195: fd-freq-gradient-large; 3/411 Test #182: isapt1 ........................... Passed 472.25 sec; Start 278: opt13; 4/411 Test #162: dft-grad-lr3 ..................... Passed 488.24 sec; Start 103: dcft-grad1; 5/411 Test #193: fd-freq-energy-large ............. Passed 507.09 sec; Start 300: pywrap-all; 6/411 Test #18: cbs-xtpl-func .................... Passed 512.61 sec; Start 304: pywrap-checkrun-rhf; 7/411 Test #181: fsapt-allterms ................... Passed 628.73 sec; Start 45: cc3; 8/411 Test #195: fd-freq-gradient-large ........... Passed 291.98 sec; Start 373: dft-custom-mgga; 9/411 Test #394: python-vibanalysis ............... Passed 771.15 sec; Start 320: sapt6; 10/411 Test #304: pywrap-checkrun-rhf .............. Passed 277.81 sec; Start 306: pywrap-checkrun-uhf; 11/411 Test #300: pywrap-all ....................... Passed 288.34 sec; Start 112: dcft6; 12/411 Test #45: cc3 .............................. Passed 192.30 sec; Start 155: dfscf-bz2; 13/411 Test #103: dcft-grad1 ....................... Passed 361.67 sec; Start 183: isapt2; 14/411 Test #306: pywrap-checkrun-uhf .............. Passed 99.74 sec; Start 39: cc24; 15/411 Test #373: dft-custom-mgga .................. Passed 186.38 sec; Start 305: pywrap-checkrun-rohf; 16/411 Test #320: sapt6 ............................ Passed 165.71 sec; Start 110: dcft4; 17/411 Test #112: dcft6 ............................ Passed 164.24 sec; Start 38: cc23; 18/411 Test #155: dfscf-bz2 ........................ Passed 143.19 sec; Start 4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:49,timeout,timeout,49,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_3.git/build; Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; 1/411 Test #195: fd-freq-gradient-large ........... Passed 287.94 sec; Start 25: cc13a; 2/411 Test #182: isapt1 ........................... Passed 442.34 sec; Start 113: dcft7; 3/411 Test #193: fd-freq-energy-large ............. Passed 511.29 sec; Start 205: frac-traverse; 4/411 Test #181: fsapt-allterms ................... Passed 597.58 sec; Start 316: sapt2; 5/411 Test #205: frac-traverse .................... Passed 227.64 sec; Start 318: sapt4; 6/411 Test #278: opt13 ............................ Passed 764.00 sec; Start 325: scf-bz2; 7/411 Test #25: cc13a ............................ Passed 481.24 sec; Start 1: adc1; 8/411 Test #1: adc1 ............................. Passed 26.25 sec; Start 2: adc2; 9/411 Test #113: dcft7 ............................ Passed 392.65 sec; Start 3: casscf-fzc-sp; 10/411 Test #2: adc2 ............................. Passed 43.73 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 11.68 sec; Start 5: casscf-sa-sp; 12/411 Test #3: casscf-fzc-sp .................... Passed 19.26 sec; Start 6: ao-casscf-sp; 13/411 Test #6: ao-casscf-sp ..................... Passed 8.25 sec; Start 7: casscf-sp; 14/411 Test #5: casscf-sa-sp ..................... Passed 23.99 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 2.23 sec; Start 9: castup2; 16/411 Test #325: scf-bz2 .......................... Passed 124.34 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 13.78 sec; Start 11: cbs-delta-energy; 18/411 Test #7: casscf-sp ........................ Passed 38.07 sec; Start 12: cbs-parser; 19/411 Test #10: castup3 .....................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:49,timeout,timeout,49,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_3.git/build; Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; 1/411 Test #195: fd-freq-gradient-large ........... Passed 316.06 sec; Start 25: cc13a; 2/411 Test #182: isapt1 ........................... Passed 469.47 sec; Start 113: dcft7; 3/411 Test #193: fd-freq-energy-large ............. Passed 544.74 sec; Start 205: frac-traverse; 4/411 Test #181: fsapt-allterms ................... Passed 628.02 sec; Start 316: sapt2; 5/411 Test #25: cc13a ............................ Passed 336.73 sec; Start 318: sapt4; 6/411 Test #205: frac-traverse .................... Passed 224.53 sec; Start 325: scf-bz2; 7/411 Test #113: dcft7 ............................ Passed 351.15 sec; Start 1: adc1; 8/411 Test #278: opt13 ............................ Passed 840.66 sec; Start 2: adc2; 9/411 Test #1: adc1 ............................. Passed 25.01 sec; Start 3: casscf-fzc-sp; 10/411 Test #3: casscf-fzc-sp .................... Passed 11.82 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 4.34 sec; Start 5: casscf-sa-sp; 12/411 Test #5: casscf-sa-sp ..................... Passed 18.34 sec; Start 6: ao-casscf-sp; 13/411 Test #2: adc2 ............................. Passed 44.45 sec; Start 7: casscf-sp; 14/411 Test #6: ao-casscf-sp ..................... Passed 5.43 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 1.92 sec; Start 9: castup2; 16/411 Test #325: scf-bz2 .......................... Passed 126.98 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 14.01 sec; Start 11: cbs-delta-energy; 18/411 Test #10: castup3 .......................... Passed 15.90 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ....................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:49,timeout,timeout,49,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['timeout'],['timeout']
Safety,"```; $ ctest -j 8 -E ""dft-bench|dft-grad-disk"" --timeout 3600 --output-on-failure; Test project /home/raimis/psi4_3.git/build; Start 394: python-vibanalysis; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; 1/411 Test #195: fd-freq-gradient-large ........... Passed 323.95 sec; Start 25: cc13a; 2/411 Test #18: cbs-xtpl-func .................... Passed 528.74 sec; Start 113: dcft7; 3/411 Test #182: isapt1 ........................... Passed 536.55 sec; Start 205: frac-traverse; 4/411 Test #193: fd-freq-energy-large ............. Passed 593.28 sec; Start 316: sapt2; 5/411 Test #25: cc13a ............................ Passed 297.32 sec; Start 318: sapt4; 6/411 Test #181: fsapt-allterms ................... Passed 736.98 sec; Start 325: scf-bz2; 7/411 Test #205: frac-traverse .................... Passed 247.88 sec; Start 1: adc1; 8/411 Test #1: adc1 ............................. Passed 27.30 sec; Start 2: adc2; 9/411 Test #113: dcft7 ............................ Passed 318.32 sec; Start 3: casscf-fzc-sp; 10/411 Test #3: casscf-fzc-sp .................... Passed 6.14 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 2.45 sec; Start 5: casscf-sa-sp; 12/411 Test #2: adc2 ............................. Passed 46.87 sec; Start 6: ao-casscf-sp; 13/411 Test #394: python-vibanalysis ............... Passed 861.59 sec; Start 7: casscf-sp; 14/411 Test #6: ao-casscf-sp ..................... Passed 4.76 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 1.98 sec; Start 9: castup2; 16/411 Test #5: casscf-sa-sp ..................... Passed 10.00 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 8.90 sec; Start 11: cbs-delta-energy; 18/411 Test #325: scf-bz2 .......................... Passed 137.96 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp .....................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:49,timeout,timeout,49,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,1,['timeout'],['timeout']
Safety,"```; The following tests FAILED:; 	132 - dfmp2-ecp (Failed); 	368 - dft-bench-interaction (Timeout); 	370 - pywrap-align (Failed); 	371 - pywrap-align-chiral (Failed); ```; The 132 is not surprising, as with this patch up to `[Kr]` is frozen for Xe, without it only up to `[Ar] + 3d` from the ECP. I guess this is a question of what we want as default behaviour for `freeze_core` - always freeze up to the previous Rg (as done here and in other codes), or ignore further freezing for ECP's (as is done in `master`).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/978#issuecomment-383831824:91,Timeout,Timeout,91,https://psicode.org,https://github.com/psi4/psi4/pull/978#issuecomment-383831824,1,['Timeout'],['Timeout']
Safety,"`coldim` isn't a wavefunction attribute. It's the dimension of the columns of the orbital coefficient `Matrix` and is thus a `Matrix` attribute. Redundancy is not the problem here. The problem is that `nmopi_` is _wrong_. Why it's wrong is a deeper issue. The `common_init` code is called anytime a wavefunction is initialized, and it initializes all orbital spaces by assuming no linear dependences. This is reasonable if you can rely on the linear dependency checking code to be called later and to re-initialize orbital spaces if necessary. If you cannot (as in this case), you get this issue. My naive vote would be to move orbital space initialization out of `common_init` entirely. If you're initializing from a reference wavefunction that already has those spaces defined, there's no need to touch those. Otherwise, initialize MO spaces only once you have determined the number of MOs, i.e., after [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libscf_solver/hf.cc#L785).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2120#issuecomment-785518560:145,Redund,Redundancy,145,https://psicode.org,https://github.com/psi4/psi4/issues/2120#issuecomment-785518560,1,['Redund'],['Redundancy']
Safety,`compute_gradient` is also in use py-side for dispersion. perhaps we could cease to export the fn for general wfn and only keep export for libdisp and dfmp2. that reduces the risk of relativistic misuse to one method.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2223#issuecomment-870586927:175,risk,risk,175,https://psicode.org,https://github.com/psi4/psi4/issues/2223#issuecomment-870586927,1,['risk'],['risk']
Safety,"`phi_ao` is passed to `dx_read` as an argument. I'm pretty sure that the description of `phi_ao` is wrong; https://github.com/psi4/psi4/blob/760c5af199b6a8202b081ad18a271ee9886ee66d/psi4/src/psi4/libqt/dx_read.cc#L60. The only place where `dx_read` is used is; https://github.com/psi4/psi4/blob/760c5af199b6a8202b081ad18a271ee9886ee66d/psi4/src/psi4/libscf_solver/hf.cc#L601. The warning is; ```; -Wnonnull; Warn about passing a null pointer for arguments marked as requiring a non-null value by the ""nonnull"" function attribute. -Wnonnull is included in -Wall and -Wformat. It can be disabled with the -Wno-nonnull option.; ```; There is no null pointer issue; the code is merely unsafe since it assumes that the pointers are not null. Adding a check for null pointers and throwing an error in that case should fix this warning.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2783#issuecomment-1321068490:681,unsafe,unsafe,681,https://psicode.org,https://github.com/psi4/psi4/issues/2783#issuecomment-1321068490,1,['unsafe'],['unsafe']
Safety,"a/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json; Using `psi4.json_wrapper.run_json` instead of `psi4.schema_wrapper.run_qcschema` is deprecated, and in 1.5 it will stop working. -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================= short test summary info =========================================================================; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:13: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:162: Not detecting module mrcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:186: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:233: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package i",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:12710,detect,detecting,12710,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,addons.py::test_snsmp2 SKIPPED [ 68%]; 2018-12-05T15:54:21.2547307Z ..\lib\psi4\tests\test_addons.py::test_resp SKIPPED [ 72%]; 2018-12-05T15:54:23.0849642Z ..\lib\psi4\tests\test_psi4.py::test_psi4_basic PASSED [ 77%]; 2018-12-05T15:54:34.9658940Z ..\lib\psi4\tests\test_psi4.py::test_psi4_cc PASSED [ 81%]; 2018-12-05T15:54:39.2671697Z ..\lib\psi4\tests\test_psi4.py::test_psi4_cas PASSED [ 86%]; 2018-12-05T15:55:14.7785164Z ..\lib\psi4\tests\test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; 2018-12-05T15:55:32.0037962Z ..\lib\psi4\tests\test_psi4.py::test_psi4_sapt PASSED [ 95%]; 2018-12-05T15:55:39.8034520Z ..\lib\psi4\tests\test_psi4.py::test_psi4_scfproperty PASSED [100%]; 2018-12-05T15:55:39.8037151Z =========================== short test summary info ===========================; 2018-12-05T15:55:39.8038147Z SKIP [1] lib\psi4\tests\test_addons.py:43: Psi4 not compiled with gdma. Rebuild with -DENABLE_gdma; 2018-12-05T15:55:39.8039347Z SKIP [1] lib\psi4\tests\test_addons.py:100: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8040544Z SKIP [1] lib\psi4\tests\test_addons.py:125: Psi4 not compiled with CheMPS2. Rebuild with -DENABLE_CheMPS2; 2018-12-05T15:55:39.8041756Z SKIP [1] lib\psi4\tests\test_addons.py:173: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8042653Z SKIP [1] lib\psi4\tests\test_addons.py:333: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; 2018-12-05T15:55:39.8043475Z SKIP [1] lib\psi4\tests\test_addons.py:392: Psi4 not compiled with PCMSolver. Rebuild with -DENABLE_PCMSolver; 2018-12-05T15:55:39.8044251Z SKIP [1] lib\psi4\tests\test_addons.py:634: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; 2018-12-05T15:55:39.8045164Z SKIP [1] lib\psi4\tests\test_addons.py:643: Psi4 not compiled with simint. Rebuild with -DENABLE_simint; 2018-12-05T15:55:39.8046429Z SKIP [1] lib\psi4\tests\test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or P,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647:2867,detect,detecting,2867,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647,1,['detect'],['detecting']
Safety,age if necessary to enable tests.) [ 36%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary to enable...) [ 38%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enable tests.) [ 40%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cct3 SKIPPED (Not detecting module cct3. Install package if necessary to enable tests.) [ 41%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psixas SKIPPED (Not detecting module psixas. Install package if necessary to enable tests.) [ 43%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_ipi_broker1 SKIPPED (Not detecting module ipi. Install package if necessary to...) [ 47%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to...) [ 49%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enabl...) [ 50%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dftd3 PASSED [ 52%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to e...) [ 54%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_pcmsolver SKIPPED (Not detecting module pcmsolver. Install package if necessar...) [ 56%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[libint2] PASSED [ 58%]; psi4conda/envs/ps,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:4689,detect,detecting,4689,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,ages/psi4/tests/test_addons.py::test_mrcc SKIPPED (Not detecting module mrcc. Install package if necessary to enable tests.) [ 7%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to enable t...) [ 9%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED (Not detecting module erd. Install package if necessary to enable tests.) [ 18%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_simint SKIPPED (Not detecting module simint. Install package if necessary to enable tests.) [ 20%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 21%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED (Not detecting module cfour. Install package if necessary to enable tests.) [ 23%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary to enable...) [ 27%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:2087,detect,detecting,2087,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,aimis/psi4_2.git/build/stage/include/pybind11/pybind11.h:627; #18 0x561a734dcb93 in _PyCFunction_FastCallDict (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x10eb93). SUMMARY: AddressSanitizer: heap-buffer-overflow /home/raimis/psi4_2.git/psi4/src/psi4/libtrans/integraltransform_moinfo.cc:278 in psi::IntegralTransform::process_spaces(); Shadow bytes around the buggy address:; 0x0c068006f870: 00 00 00 fa fa fa 00 00 00 fa fa fa fd fd fd fa; 0x0c068006f880: fa fa fd fd fd fa fa fa 00 00 00 fa fa fa 00 00; 0x0c068006f890: 00 fa fa fa 00 00 00 fa fa fa 00 00 00 fa fa fa; 0x0c068006f8a0: 00 00 00 00 fa fa 00 00 00 00 fa fa 00 00 00 00; 0x0c068006f8b0: fa fa fd fd fd fd fa fa 00 00 00 00 fa fa 00 00; =>0x0c068006f8c0: 00 00 fa fa 00 00 00 00 fa fa 00 00 00[fa]fa fa; 0x0c068006f8d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c068006f8e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c068006f8f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c068006f900: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c068006f910: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07 ; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==10081==ABORTING; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). =================================================================; ==10025==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 282802 byte(s) in 124 object(s) allocated from:; #0 0x7f0f92dd6afc in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/s,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756:17573,ABORT,ABORTING,17573,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756,1,['ABORT'],['ABORTING']
Safety,"b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: conda update libint -c psi4/label/dev. After that, your conda list should say _5.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to rebuild. > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1). * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. Notes. * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular momentum error on mac binary.; * simint max is AM7 both past and near future. Only libint is changing.; * Between higher AM and optimizing for multiple architectures, the new libint pkg is heavy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:2443,detect,detectable,2443,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773,1,['detect'],['detectable']
Safety,"bling const&, char const (&) [59])::{lambda(pybind11::detail::function_call&)#3}::_FUN(pybind11::detail::function_call&) /shared/raimis/opt/miniconda/envs/psi4/include/python3.6m/pybind11/pybind11.h:132; #23 0x7fa1377e0955 in pybind11::cpp_function::dispatcher(_object*, _object*, _object*) /shared/raimis/opt/miniconda/envs/psi4/include/python3.6m/pybind11/pybind11.h:627; #24 0x7fa146d8c08c in _PyCFunction_FastCallDict Objects/methodobject.c:231. SUMMARY: AddressSanitizer: heap-buffer-overflow /home/raimis/psi4.git/psi4/src/psi4/detci/sem.cc:994 in psi::detci::CIWavefunction::sem_iter(psi::detci::CIvect&, psi::detci::stringwr**, psi::detci::stringwr**, double*, double, double, double, double, int, int, int); Shadow bytes around the buggy address:; 0x0c0480080860: fa fa fd fd fa fa fd fd fa fa fd fd fa fa fd fd; 0x0c0480080870: fa fa fd fd fa fa fd fd fa fa fd fd fa fa fd fd; 0x0c0480080880: fa fa fd fd fa fa fd fd fa fa fd fd fa fa fd fd; 0x0c0480080890: fa fa 00 00 fa fa 00 00 fa fa 00 00 fa fa 00 00; 0x0c04800808a0: fa fa 00 00 fa fa 00 00 fa fa 00 00 fa fa 00 00; =>0x0c04800808b0: fa fa fd fa fa fa 04 fa fa fa 00[fa]fa fa fd fd; 0x0c04800808c0: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fa; 0x0c04800808d0: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fa; 0x0c04800808e0: fa fa fd fd fa fa fd fa fa fa fd fa fa fa fd fa; 0x0c04800808f0: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fa; 0x0c0480080900: fa fa fd fa fa fa fd fd fa fa fd fa fa fa fd fa; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07 ; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==8917==ABORTING; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1441#issuecomment-449451218:15847,ABORT,ABORTING,15847,https://psicode.org,https://github.com/psi4/psi4/pull/1441#issuecomment-449451218,1,['ABORT'],['ABORTING']
Safety,"bly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of energy('sapt0'). This is the topic that probably needs most discussion between @konpat and @CDSherrill, particularly as sapt-dft is now involved. Agreed that split ""non-s^2"" is an unsatisfactory state of affairs. perhaps psicon?. > What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?. I think we've accumulated enough changes for another adjustment to psi's SAPT definitions -- 3 non-S^2 for S^2 terms and evening up the fit basis sets btwn Ed/Rob so that sapt0 is exactly the same from both. > Finally, the option names such as do_ind30_exch_sinf are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of electrons to exchange between A and B. Nonapproximated, Nonexpanded, and beyond-S^2 are all formally more correct names than S^infinity. I'm mostly concerned with the qcvars that need terse names. And it looks like only pure-exch vars have been given S^2 designations https://github.com/psi4/psi4/blob/3d2403c43e2cf8df699ff6e382a4ae2e3a0a5faa/psi4/driver/qcdb/psivardefs.py . So we'd need some existing vars to turn into two flavors `SAPT EXCH-IND30,R ENERGY` --> `SAPT EXCH-IND30,R(S^2) ENERGY` and `SAPT EXCH-IND30,R(!S^2) ENERGY`, perhaps? We have clean aliasing+deprecation warning capability now for qcvars. And the sinf option names I think could be safely renamed due to narrow use in the wild. Maybe `do_ind30_exch_full` or `do_ind30_exch_nons2`. Or, if ""non-s^2"" becomes the norm, the option can be `do_ind30_exch_s2` :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2314#issuecomment-938713375:2113,safe,safely,2113,https://psicode.org,https://github.com/psi4/psi4/pull/2314#issuecomment-938713375,1,['safe'],['safely']
Safety,"builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json; Using `psi4.json_wrapper.run_json` instead of `psi4.schema_wrapper.run_qcschema` is deprecated, and in 1.5 it will stop working. -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================= short test summary info =========================================================================; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:13: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:162: Not detecting module mrcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:186: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:233: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if nece",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:12391,detect,detecting,12391,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,"by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:698: 3 warnings; psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:699: 3 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py: 1414 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py: 954 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py: 48 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py: 1302 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 1266 warnings; `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:702: 3 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py: 707 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py: 477 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py: 24 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py: 651 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 633 warnings; `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any b",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:10512,safe,safe,10512,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['safe'],['safe']
Safety,"ce(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). # Dictionary to store energies; ecp = {}. # Loop over R values; for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). # Create CF molecule geometry; cf = psi4.geometry(cf_geometry.format(R)); ; # Run CASSCF calculation; try:; casscf_energy = psi4.energy('casscf'); ; # Store energies; ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; except Exception as e:; print(f""Error at R={R}: {e}""); ; # Clean up Psi4 core; psi4.core.clean(); ```; The new error message is: ; ```; Warning: iopen=0,opentype!=closed. Making iopen=1; ras_set3():Warning:Occupied electrons beyond ACTIVE orbs!; (set_ras_parms): detecting 1 alpha electrons in RAS III for irrep 3.; Some parts of DETCI assume all elec in I and II; Traceback (most recent call last):; File ""cf_casscf_pec.py"", line 50, in <module>; casscf_energy = psi4.energy('casscf'); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5466, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 49, in mcscf_solver; ciwfn = core.CIWavefunction(ref_wfn); RuntimeError:; Fatal Error: DETCI: electrons detected outside of active space. Error occurred in file: /home/conda/feedstock_root/build_artifacts/psi4_1683815705191/work/psi4/src/psi4/detci/params.cc on line: 949; The most recent 5 function calls w",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631:1753,detect,detecting,1753,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631,1,['detect'],['detecting']
Safety,"ck.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;... ```. Building then fails with:; ```; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:99 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516:3462,Detect,Detecting,3462,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396738516,10,['Detect'],['Detecting']
Safety,"cmake doesn't detect `mpmath` directly. But you can look in `<objdir>/CMakeCache.txt` `PYTHON_EXECUTABLE` to check if right python is found. Otherwise, psi doesn't actually need `mpmath` anymore, so #968 drops the requirement. I'd guess it'll be merged tomorrow, then you can update your source.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-382188857:14,detect,detect,14,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-382188857,1,['detect'],['detect']
Safety,"com/psi4/psi4/pull/1721#issuecomment-537945417), you can build a Libint2 externally with cmake or internal to psi4. 1. Get some extra dependencies `conda install boost mpfr eigen ninja`. Only header-only parts of Boost are used. Eigen is needed for the l2 c++ interface. Ninja is because l2 now makes files with weird enough names that when the get written to `Makefile`s, `make` can't process them. EFV is strongly recommending Ninja, too. . 2. Make sure a Libint1 package is **not** in your conda environment. Even if you're properly pointing to a `Libint1_t`-modified l1 via `-DLibint_DIR`, the compiler will still find those conventional Libint1 headers in `$CONDA_PREFIX`. If you have `psi4-dev` installed, `conda remove libint --force` to remove libint(1) but keep `psi4-path-advisor`. 3. In https://github.com/loriab/psi4/blob/libint2/external/upstream/libint2/CMakeLists.txt and https://github.com/loriab/psi4/blob/libint2/psi4/CMakeLists.txt, there are three `CHOOSE!` toggles between detect-prebuilt-libtool-l2 or detect-or-build-pure-cmake-l2. Comment out the one in each pair you don't need. 4. Normal cmake configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and AM down to threes or fours to test the whole procedure. I'm pretty confid",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:1066,detect,detect-prebuilt-libtool-,1066,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901,4,['detect'],"['detect-or-build-pure-cmake-', 'detect-prebuilt-libtool-']"
Safety,"conda\envs\psi16\lib\site-packages\qcelemental\tests\test_molparse_to_string.py:270: in <module>; ""subject1"": qcel.models.Molecule(; psi4conda\envs\psi16\lib\site-packages\qcelemental\models\molecule.py:294: in __init__; super().__init__(**kwargs); pydantic\main.py:341: in pydantic.main.BaseModel.__init__; ???; E pydantic.error_wrappers.ValidationError: 2 validation errors for Molecule; E connectivity -> 0; E '<' not supported between instances of 'tuple' and 'int' (type=type_error); E connectivity -> 1; E '<' not supported between instances of 'tuple' and 'int' (type=type_error); ================================================== warnings summary ===================================================; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:599; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:701; `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:698; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:699; `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:702; `np.bool` is a deprecated alias for the builtin `bool`. To sil",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542:4680,safe,safe,4680,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542,2,['safe'],['safe']
Safety,"d make a plausible case that we haven't gained an immense lot. But it is more CMake-ic and attaching properties to a target seems the OO thing to do compared to the ordered data structure of the usual suspect variables.; - Also switching from `ENABLE_<PKG>` as both the CMake user will variable and the compiler definition to `ENABLE_<Pkg>` as the CMake user will variable and `USING_<Pkg>` as the compiler def. so we're not tempted to conflate the roles. **What it doesn't do**; - linking not right for one of `psi4_main.a` or `psi4.so` (don't remember which) when libgdma is static. **Behavior I'm aiming for**. (a) `ENABLE_<Pkg>`: whether set to TRUE or FALSE; (b) `CMAKE_DISABLE_FIND_PACKAGE_<Pkg>`: whether set to TRUE or FALSE; (c) `<Pkg>_DIR`: whether `<pkg>Config.cmake` findable at this loc; (d) `CMAKE_PREFIX_PATH`. | (a) enabled | (b) disable find | (c) findable dir | (d) findable gen | outcome |; | --- | --- | --- | --- | --- |; | T | T | | | extproj_add, detect superbuild |; | T | F | T | | detect pre-built at <pkg>_dir |; | T | F | F | T | detect pre-built at cmake_prefix_path |; | T | F | F | F | extproj_add, detect superbuild |; | F | | | | no add-on |. **Questions**; - Since it's tricky to detangle plan from implementation, have I violated any of your superbuild principles?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:3993,detect,detect,3993,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,8,['detect'],['detect']
Safety,"d, no matter in which order they appear.; ```; [1/1263] C:\PROGRA~1\LLVM\bin\clang-cl.exe -TP -DUSING_LAPACK_MKL -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include\eigen3 /arch:AVX -march=native /O2 /Ob2 /DNDEBUG -MD /EHsc -Xclang -fopenmp -std:c++14 /showIncludes /Fosrc\psi4\libdpd\CMakeFiles\dpd.dir\contract222.cc.obj /Fdsrc\psi4\libdpd\CMakeFiles\dpd.dir\dpd.pdb -c -- D:\a\1\s\psi4\src\psi4\libdpd\contract222.cc; clang-cl: warning: argument unused during compilation: '/arch:AVX' [-Wunused-command-line-argument]; ```; * On to properly forcing Win to build for AVX:; * (1) recognize the compiler flavor. apparently https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_FRONTEND_VARIANT.html is the way to discriminate between clang (gnu-imitating) and clang-cl (msvc-imitating), so I've expanded the ENABLE_XHOST logic. I also switched out STREQUAL for MATCHES, @susilehtola, as it seems safer given the diversity (https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_ID.html).; * (2) part (1) alone doesn't help because hand-specified `CMAKE_CXX_FLAGS=/arch=AVX` gets _appended_ by the ENABLE_XHOST-resolved flag, so the hand-specified AVX gets clobbered by AVX2 again. the PR now turns off ENABLE_XHOST and passes AVX. The sensible command line is below.; ```; [1/1263] C:\PROGRA~1\LLVM\bin\clang-cl.exe -TP -DUSING_LAPACK_MKL -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include\eigen3 /arch:AVX /O2 /Ob2 /DNDEBUG -MD /EHsc -Xclang -fopenmp -std:c++14 /showIncludes /Fosrc\psi4\libdpd\CMakeFiles\dpd.dir\contract444.cc.obj /Fdsrc\psi4\libdpd\CMakeFiles\dpd.dir\dpd.pdb -c -- D:\a\1\s\psi4\src\psi4\libdpd\contract444.cc; ```. I should probably turn off verbose compile in general, then this PR is rtg.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2384#issuecomment-997100036:2742,safe,safer,2742,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-997100036,1,['safe'],['safer']
Safety,"da\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:688: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:708: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_mdi.py:11: Not detecting module mdi. Install package if necessary to enable tests.; ========================================== 21 passed, 33 skipped, 3301 deselected, 1 xfailed, 16657 warnings in 72.64s (0:01:12) ==========================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:16799,detect,detecting,16799,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,10,['detect'],['detecting']
Safety,"documentation (which is inside the top. level CMakeLists.txt at the moment). The relevant variables are PYTHON_EXECUTABLE, PYTHON_LIBRARY, and ; PYTHON_INCLUDE_DIR. on 10/11/2016 10:10 AM, David Sherrill wrote:. > Do we need to break down and insist that people specify the python to use; > via some kind of flag? It seems that cmake picking up the wrong one is a; > problem that just won't go away. And/or perhaps a little test script that; > might check the settings and verify that they will work with the user's; > PATH?; > ; > At the very least, we do certainly need updated documentation on the ; > latest; > iteration of the build system, if we don't have it yet.; > ; > On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Glad rpath behavior is making more sense, @jgonthier; > > https://github.com/jgonthier . Unless all dependencies are isolated; > > behind one environment (conda strategy) or each dependency is ; > > isolated in; > > its own environment (a programming-using-conda strategy, but hard when; > > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > > path. I regularly have to edit mine to get the right HDF5 linked. As I; > > don't know a winning strategy, I think we can't guarantee the built ; > > exe/lib; > > will run, only that the conda ones will. This does show we need better; > > notes on the matter so people can diagnose and correct.; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or ; > > mute; > > the thread; > > ; > > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > > .; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub ; > https://github.com/psi4/psi4/issues/468#issuecomment-252927823, or ; > mute the thread ; > h",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252929596:1179,predict,predict,1179,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252929596,2,"['predict', 'safe']","['predict', 'safe']"
Safety,dons.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enable tests.) [ 1%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker1 PASSED [ 3%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker2 PASSED [ 5%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED (Not detecting module mrcc. Install package if necessary to enable tests.) [ 7%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to enable t...) [ 9%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED (Not detecting module erd. Install package if necessary to enable tests.) [ 18%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_simint SKIPPED (Not detecting module simint. Install package if necessary to enable tests.) [ 20%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 21%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED (Not detecting module cfour. Install package if necessary to enable tests.) [ 23%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install pac,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:1744,detect,detecting,1744,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,dons_qcschema.py::test_grimme_3c PASSED [ 65%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable ...) [ 67%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to e...) [ 69%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enabl...) [ 70%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary ...) [ 72%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enabl...) [ 74%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_mdi.py::test_mdi_water SKIPPED (Not detecting module mdi. Install package if necessary to enable tests.) [ 76%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py::test_spacious_option PASSED [ 78%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 80%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 83%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 85%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 87%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [ 89%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py::test_psi4_basic PASSED [ 90%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py::test_psi4_cc XFAIL (no AtomicInput optimization) [ ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:7179,detect,detecting,7179,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,"e average citizen to quickly begin using F/I-SAPT.; > ; > Status; > - Ready to go. Looks ready to me, though there may well be further; > reST changes after viewing the docs build. @robparrish; > https://github.com/robparrish may want to look it over. We'll close; > the other PR.; > ; > ---; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4/pull/470; > Commit Summary; > - FISAPT does not need INTS_TOLERANCE 0.0 any more (bug fixed in; > LibFock previously); > - Removed extra pymol file in fsapt; > - Remove dependency on absolute path from copy_pymol scripts in fsapt; > - Short correctness test (1s) of fsapt0; > - Full example of fsapt0; > - Full example of fisapt0; > - Shorter version of tests/isapt1; > - Example of fsapt0 difference analysis; > - Hook up and clean fisapt test makefiles; > - Added a good bit of sphinx docs on FISAPT; > - update samples. docstring f/isapt tests; > - a few mods to fisapt docs that I can detect w/o seeking the built; > docs; > ; > File Changes; > - _M_ doc/sphinxman/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-0 (6); > - _A_ doc/sphinxman/source/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-1 (0); > - _A_ doc/sphinxman/source/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-2 (0); > - _M_ doc/sphinxman/source/bibliography.rst; > https://github.com/psi4/psi4/pull/470/files#diff-3 (16); > - _A_ doc/sphinxman/source/fisapt.rst; > https://github.com/psi4/psi4/pull/470/files#diff-4 (351); > - _M_ doc/sphinxman/source/methods.rst; > https://github.com/psi4/psi4/pull/470/files#diff-5 (1); > - _M_ psi4/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-6 (1); > - _M_ psi4/share/psi4/fsapt/copy_pymol.py; > https://github.com/psi4/psi4/pull/470/files#diff-7 (2); > - _M_ psi4/share/psi4/fsapt/copy_pymol2.py; > https://github.com/psi4/psi4/pull/470/files#diff-8 (2); > - _D_ psi4/share/psi4/fsapt/pymol2/VD.pymol; > https://github.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:1375,detect,detect,1375,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['detect'],['detect']
Safety,"easily. When you use an exact line search, you're less likely to get stuck on local minima compared to DIIS. For instance, the reason why I found that PP theory breaks sigma-pi symmetry in the acenes was that compared to previous work that had ""showed"" it preserves sigma-pi symmetry, the line search implemented in my code actually just went close to the symmetry preserving saddle point solution, and then recovered from it to decrease the energy quite a lot to break the sigma-pi symmetry. There's often enough of numerical noise so that your solution vector picks up some component of the symmetry breaking dimension. In DIIS you can make these problems converge by increasing the DIIS history length, but then you often see that the SCF is actually going up in energy in the later calculation. Increasing the history length from the default (I think mine is 5, 6, or 7 iterations) to something like 15-25 allows the DIIS procedure to find enough linearly independent vectors to enforce that the resulting orbitals are going to belong to an extremal point. However, these points often then turn out to be saddle points, in which you can decrease the energy slightly (or a lot more) by moving some weight from an orbital to another... Then you have the true second-order schemes, like Newton-Raphson SCF and trust region SCF. These are bound to give you a local solution, but they are 1) unreliable and 2) slow in the initial phases of the calculation. It is better to do first some ADIIS/EDIIS to get you to a reasonable solution, and only then start refining it with something fancier. Also GDM is a great solution for the initial phase of the calculation, since as you have a **guarantee** that you are taking a step down in energy. At variance, the first step in DIIS is usually up in energy, and it takes you a few steps to recover from. I'm sure there is always a use for the real second-order methods, but - when properly preconditioned - the gradient descent methods work really well, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568:5385,recover,recover,5385,https://psicode.org,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568,2,['recover'],['recover']
Safety,"ecated, and in 1.5 it will stop working. -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================= short test summary info =========================================================================; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:13: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:162: Not detecting module mrcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:186: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:233: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install packag",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:12868,detect,detecting,12868,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,ecessary to enable tests.) [ 20%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 21%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED (Not detecting module cfour. Install package if necessary to enable tests.) [ 23%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary to enable...) [ 27%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to enable tests.) [ 32%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 34%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp_2 SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 36%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary to enable...) [ 38%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enable tests.) [ 40%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cct3 SKIPPED (Not detecting module cct3. Install package if necessary to enable tests.) [ 41%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:3305,detect,detecting,3305,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,"ecified) option SPHINX_THEME: sphinx_psi_theme; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /Users/bsenjean/Documents/intelpython3/bin/python3 (found suitable version ""3.7.7"", minimum required is ""3.6"") ; -- Found PythonLibs: /Users/bsenjean/Documents/intelpython3/lib/libpython3.7m.dylib; -- Found Python 3.7: /Users/bsenjean/Documents/intelpython3/bin/python3 (found version 3.7.7); -- Psi4 staging: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage; -- Math lib search order is MKL;SYSTEM_NATIVE;OPENBLAS;ESSL;ATLAS;ACML; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found BLAS: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- LAPACK will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found LAPACK: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX, C/CXX/Fortran=GNU/GNU/; -- Found OpenMP_CXX: -fopenmp (found version ""4.5"") ; -- Found OpenMP: TRUE (found version ""4.5"") found components: CXX ; -- Found TargetOpenMP: 1 found components: CXX ; -- Found MathOpenMP: 1 ; -- Found LAPACK MKL: /opt/intel/mkl/lib/libmkl_rt.dylib;...; -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Suitable gau2grid could not be located, Building gau2grid instead.; -- Suitable Libint could not be located, Building Libint instead.; -- Found qcelemental: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcelemental (found version v0.14.0); -- Found qcengine: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcengine (found version 0.14.0); -- Suitable Libxc could not be located, Building Libxc instead.; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:6153,Detect,Detecting,6153,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308,1,['Detect'],['Detecting']
Safety,"eckout. If you want to create a new branch to retain commits you create, you may; do so (now or later) by using -b with the checkout command again. Example:. git checkout -b <new-branch-name>. HEAD is now at e33ef9c... v2.0.0 release; Submodule 'tools/clang' (https://github.com/wjakob/clang-cindex-python3) registered for path 'tools/clang'; Cloning into 'tools/clang'...; Submodule path 'tools/clang': checked out '254c7a91e3c6aa254e113197604dafb443f4d429'; [ 25%] No update step for 'pybind11_external'; [ 25%] No patch step for 'pybind11_external'; [ 31%] Performing configure step for 'pybind11_external'; -- The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /usr/bin/python3.4 (found version ""3.4.5"") ; -- Found PythonLibs: /usr/lib64/libpython3.4m.so; -- pybind11 v2.0.0; -- Configuring done; -- Generating done; -- Build files have been written to: /usr/qc/psi4.git/objdir/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build. ```. For reasons unknown to me I cannot reproduce my previous compilation error. Previously I could reproduce it even when cloning a brand new copy of psi4. Now it finishes the compilation normally.; Maybe the old psi4 installation directory interfered somehow? Just guessing at this point. However, I still cannot execute psi4. If I use a symlink to the installed binary I get a python error:; ```; import psi4; ImportErro",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273732640:3519,Detect,Detecting,3519,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640,8,['Detect'],['Detecting']
Safety,ema.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if ne...) [ 63%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_grimme_3c PASSED [ 65%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable ...) [ 67%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to e...) [ 69%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enabl...) [ 70%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary ...) [ 72%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enabl...) [ 74%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_mdi.py::test_mdi_water SKIPPED (Not detecting module mdi. Install package if necessary to enable tests.) [ 76%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py::test_spacious_option PASSED [ 78%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 80%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 83%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 85%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 87%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [ 89%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschem,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:7013,detect,detecting,7013,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,"ements (transition metals), so for now my solution is to just use `freeze_core true` for all SAPT0 calcs and go about my life. And when I thought the bad setting _just_ caused segfaults, I was fine to assume that all calculations that ran to completion were obviously OK. Now seeing that there's some shade of undefined behavior leading to memory corruption possibly going on, I'd like to understand what is going wrong so I can figure out what's likely impacted... cases where the energy is obviously and egregiously wrong (like above) are easy, but I'm worried more about subtle incorrectness. As for the general fix -- if `num_frozen_docc` is disabled for SAPT0, then it becomes impossible for a user to impose their own beliefs about frozen orbitals in tricky cases like transition metals, which seems... bad. Since it does impact the dispersion portion of the calc, it needs to be user-mutable. This setting *shouldn't* be actually impacting the HF energies, and fixing that strange interaction seems like most of the battle. I'm less sure of what to do in the MP2 case, since it does seem relevant that the user should be able to specify their own core policy as required... At the risk of further complication, would it make sense to implement either:; 1. The ability for `num_frozen_docc` to take in a tuple the same length of the number of fragments in the active `Molecule` (such that correct behavior can be inferred in cases like SAPT where both monomer and dimer calcs are run in a global context); 2. The ability to define, via a list(?), a custom policy on a per-element basis that can be fed to `freeze_core`? . Both of these would allow both for the user to handle cases like custom frozen thresholds in multi-calc situations and keep things consistent. At the same time, these are... possibly a lot of work. I'm prototyping a solution of type (2) but I'm not sure if it'll be too clunky for others to use -- assuming I haven't messed up horribly, I'll propose the patch later today.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1207254380:2391,risk,risk,2391,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1207254380,1,['risk'],['risk']
Safety,"emote. * https://github.com/psi4/psi4/releases says v1.1a1 007a9b6. ```; >>> git tag; v1.0; v1.1a1. >>> cat psi4/metadata.py ; __version__ = '1.1a1'; __version_long = '1.1a1+007a9b6'; __version_upcoming_annotated_v_tag = '1.1a2'. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-417-gcbee32b. >>> git describe --abbrev=7 --long --dirty; v1.1a1-417-gcbee32b. >>> ./psi4/versioner.py ; Defining development snapshot version: 1.1a2.dev417+cbee32b (computed); 1.1a2.dev417 {master} cbee32b 1.0.0.999 1.0 <-- 1.1a2.dev417+cbee32b. >>> git diff. ```. * Observe that current latest tag matches metadata scipt and git describe, that GH releases matches metadata script, that upcoming in metadata script matches current versioner version. * Note that current tag is ""v1.1a1"". Decide on imminent tag, say ""v1.1rc1"". * 2. **ACTION** Bump tag in code. * Edit current & prospective tag in psi4/metadata.py. Use your decided-upon tag ""v1.1rc1"" and a speculative next tag, say ""v1.1rc2"", and use 7 ""z""s for the part you can't predict. ```; >>> vi psi4/metadata.py. >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 5d87b55..6cbc05e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,6 +1,6 @@; -__version__ = '1.1a1'; -__version_long = '1.1a1+007a9b6'; -__version_upcoming_annotated_v_tag = '1.1a2'; +__version__ = '1.1rc1'; +__version_long = '1.1rc1+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.1rc2'. >>> git add psi4/metadata.py. >>> git commit -m ""v1.1rc1""; ```. * 3. **OBSERVE** Undefined version state. ```; >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-418-g6100822. >>> git describe --abbrev=7 --long --dirty; v1.1a1-418-g6100822. >>> psi4/versioner.py ; Undefining version for irreconcilable tags: 1.1a1 (computed) vs 1.1rc1 (recorded); undefined {master} 6100822 1.0.0.999 1.0 <-- undefined+6100822; ```. * Note 7-char git hash for the new commit, here ""6100822"". * 4. **ACTION** Bump tag in git. Bump git tag in code. * Use the decided-upon tag ""v1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-292102715:4194,predict,predict,4194,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715,1,['predict'],['predict']
Safety,es/psi4/tests/test_addons.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to enable t...) [ 9%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED (Not detecting module erd. Install package if necessary to enable tests.) [ 18%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_simint SKIPPED (Not detecting module simint. Install package if necessary to enable tests.) [ 20%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 21%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED (Not detecting module cfour. Install package if necessary to enable tests.) [ 23%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary to enable...) [ 27%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/ps,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:2257,detect,detecting,2257,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,est); dfccsd-grad = 43.20 sec*proc (1 test); dfccsd-t-grad = 38.87 sec*proc (1 test); dfccsdat = 20.44 sec*proc (1 test); dfccsdl = 4.62 sec*proc (1 test); dfccsdt = 10.41 sec*proc (1 test); dfep2 = 7.13 sec*proc (2 tests); dfmp2 = 121.95 sec*proc (11 tests); dfomp2 = 943.08 sec*proc (7 tests); dfomp2.5 = 233.40 sec*proc (4 tests); dfomp3 = 229.00 sec*proc (4 tests); dfscf = 28.93 sec*proc (1 test); dft = 5629.04 sec*proc (26 tests); docs = 1.78 sec*proc (2 tests); ecp = 57.50 sec*proc (2 tests); fci = 7.32 sec*proc (2 tests); fcidump = 6.32 sec*proc (1 test); findif = 698.00 sec*proc (5 tests); fnocc = 141.78 sec*proc (4 tests); freq = 1043.60 sec*proc (6 tests); gradient = 1568.40 sec*proc (16 tests); json = 19.71 sec*proc (8 tests); longtests = 933.44 sec*proc (5 tests); mcscf = 5.98 sec*proc (3 tests); minitests = 44.49 sec*proc (3 tests); mints = 40.79 sec*proc (14 tests); misc = 369.08 sec*proc (16 tests); mp2 = 283.13 sec*proc (13 tests); nbody = 73.23 sec*proc (2 tests); numpy = 1.44 sec*proc (1 test); ocepa = 739.92 sec*proc (6 tests); omp = 845.55 sec*proc (18 tests); opt = 956.86 sec*proc (21 tests); prop = 1.97 sec*proc (1 test); properties = 104.12 sec*proc (10 tests); psi = 34317.61 sec*proc (400 tests); psi4numpy = 23.83 sec*proc (6 tests); psimrcc = 87.03 sec*proc (8 tests); python = 1082.76 sec*proc (10 tests); pywrap = 3836.93 sec*proc (12 tests); quicktests = 4351.03 sec*proc (137 tests); rasci = 45.35 sec*proc (3 tests); sapt = 1501.22 sec*proc (20 tests); scf = 6069.20 sec*proc (51 tests); shorttests = 47.02 sec*proc (4 tests); smoketests = 175.49 sec*proc (11 tests); stability = 7.67 sec*proc (2 tests); tutorial = 383.76 sec*proc (6 tests); x2c = 76.86 sec*proc (3 tests). Total Test time (real) = 3000.10 sec. The following tests FAILED:; 	360 - cubeprop-esp (Failed); 	371 - dft-bench-interaction (Timeout); 	373 - pywrap-align (Failed); 	374 - pywrap-align-chiral (Failed); 	401 - json-schema_0_properties (Failed); Errors while running CTest; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:39933,Timeout,Timeout,39933,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Timeout'],['Timeout']
Safety,ests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:15279,detect,detecting,15279,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,ests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necess,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:13995,detect,detecting,13995,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,"etci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). # Create CF molecule geometry; cf = psi4.geometry(cf_geometry.format(R)); ; # Run CASSCF calculation; try:; casscf_energy = psi4.energy('casscf'); ; # Store energies; ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; except Exception as e:; print(f""Error at R={R}: {e}""); ; # Clean up Psi4 core; psi4.core.clean(); ```; The new error message is: ; ```; Warning: iopen=0,opentype!=closed. Making iopen=1; ras_set3():Warning:Occupied electrons beyond ACTIVE orbs!; (set_ras_parms): detecting 1 alpha electrons in RAS III for irrep 3.; Some parts of DETCI assume all elec in I and II; Traceback (most recent call last):; File ""cf_casscf_pec.py"", line 50, in <module>; casscf_energy = psi4.energy('casscf'); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5466, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 49, in mcscf_solver; ciwfn = core.CIWavefunction(ref_wfn); RuntimeError:; Fatal Error: DETCI: electrons detected outside of active space. Error occurred in file: /home/conda/feedstock_root/build_artifacts/psi4_1683815705191/work/psi4/src/psi4/detci/params.cc on line: 949; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); ```. Please could you go through it and see if you would find what's still wrong with it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631:2529,detect,detected,2529,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631,1,['detect'],['detected']
Safety,"ew boost is unlinked at the time I run the `setup` script I will see both the include and library paths are set to the local boost install in the cmake output. However, if homebrew boost is linked when I run `make` I will get an error in the linking step. I suspect that the directory where hombrew adds the links to boost (`/usr/local/lib`) are passed as a linker argument by cmake, either by default, or because something else is installed there. Thus, if those links are present I will get the characteristic boost 1.60.0 linking errors. Hombrew installs boost-python as a separate package so to properly remove all of the links `brew unlink boost boost-python` . Interestingly I have a similar setup on a laptop running ArchLinux 4.4.5 where boost 1.60.0 was installed globally using `pacman` and I used the conda recipie to install boost 1.59.0 in `$CONDA_ENV_PATH`. If the conda virtual environment is activated and I use the `setup` args to direct cmake to boost 1.59.0 installed there I have no problems. The correct version is always found, even if I try to `make` with the conda virtual environment deactivated the cmake paths still point to the installation I want even though those paths aren't in my environment, and the build is successful. . I don't know If I would mark this as resolved, but it is at least understood to where it is predictable. . For anyone who has run into a similar problem:. If you are using a compatible version of boost installed manually on osx and your build fails to link, even if cmake reported the compatible version of boost was detected it may have detected the desired headers, but not the correct binaries. because homebrew has installed boost 1.60.0 in `/usr/local`. Try running `brew unlink boost boost-python` and running setup/make again. . This may be related to the issue linked by @bennybp. It seems it has something to do with cmake find package on osx. I haven't seen any problems come up switching between different versions of python though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/313#issuecomment-198164795:1794,predict,predictable,1794,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-198164795,3,"['detect', 'predict']","['detected', 'predictable']"
Safety,f necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED (Not detecting module erd. Install package if necessary to enable tests.) [ 18%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_simint SKIPPED (Not detecting module simint. Install package if necessary to enable tests.) [ 20%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 21%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED (Not detecting module cfour. Install package if necessary to enable tests.) [ 23%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary to enable...) [ 27%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to enable tests.) [ 32%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED (Not detecting module resp. Install package if ne,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:2522,detect,detecting,2522,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,"fnocc::CoupledCluster::compute_energy() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x1330A20: psi::fnocc::fnocc(psi::Options&) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA5D569: py_psi_fnocc() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA8C2AD: boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (*)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator()(_object*, _object*) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4D9D: boost::python::objects::function::call(_object*, _object*) const (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4AD4: boost::detail::function::void_function_ref_invoker0<boost::python::objects::(anonymous namespace)::bind_return, void>::invoke(boost::detail::function::function_buffer&) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55CFDCC: boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== ; ==14111== HEAP SUMMARY:; ==14111== in use at exit: 22,890,520 bytes in 26,750 blocks; ==14111== total heap usage: 806,896 allocs, 780,146 frees, 145,885,736 bytes allocated; ==14111== ; ==14111== LEAK SUMMARY:; ==14111== definitely lost: 27,876 bytes in 493 blocks; ==14111== indirectly lost: 5,344 bytes in 40 blocks; ==14111== possibly lost: 13,024,793 bytes in 10,784 blocks; ==14111== still reachable: 9,832,507 bytes in 15,433 blocks; ==14111== suppressed: 0 bytes in 0 blocks; ==14111== Rerun with --leak-check=full to see details of leaked memory; ==14111== ; ==14111== For counts of detected and suppressed errors, rerun with: -v; ==14111== Use --track-origins=yes to see where uninitialised values come from; ==14111== ERROR SUMMARY: 692778 errors from 1000 contexts (suppressed: 1311 from 53); Segmentation fault (core dumped); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/121#issuecomment-123755185:2961,detect,detected,2961,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123755185,1,['detect'],['detected']
Safety,"g (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option PSI4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.3"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so (found suitable version ""2.7.3"", minimum required is ""2"") ; -- Suitable pybind11 could not be located, building one instead.; -- Suitable libint could not be located, building one instead.; -- Suitable libefp could not be located, building one instead.; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; this build won't work without GCC intervention:; https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; Call Stack (most recent call first):; CMakeLists.txt:119 (include). -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found BLAS: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_thread.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_core.so;/usr/lib64/libpthread.so;/usr/lib64/libm.so); -- LAPA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261733153:2798,detect,detected,2798,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153,1,['detect'],['detected']
Safety,"gdma1 is the test that's failing on Travis. (For once, timeout is not at fault.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-275582318:55,timeout,timeout,55,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-275582318,1,['timeout'],['timeout']
Safety,ge if necessary to enable tests.) [ 40%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cct3 SKIPPED (Not detecting module cct3. Install package if necessary to enable tests.) [ 41%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psixas SKIPPED (Not detecting module psixas. Install package if necessary to enable tests.) [ 43%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_ipi_broker1 SKIPPED (Not detecting module ipi. Install package if necessary to...) [ 47%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to...) [ 49%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enabl...) [ 50%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dftd3 PASSED [ 52%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to e...) [ 54%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_pcmsolver SKIPPED (Not detecting module pcmsolver. Install package if necessar...) [ 56%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[libint2] PASSED [ 58%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[simint] SKIPPED (Not detecting module simint. Install package if nec...) [ 60%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_json PASSED [ 61%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_v2r,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:5028,detect,detecting,5028,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,ges\psi4\tests\test_addons.py:13: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:162: Not detecting module mrcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:186: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:233: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:13191,detect,detecting,13191,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,ges\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14952,detect,detecting,14952,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,"he SCF equations. On Tue, Dec 5, 2017 at 3:11 PM, Daniel Smith <notifications@github.com>; wrote:. > I believe we have had this problem in the past. Take a symmetric molecule; > who's optimal wavefunction should contain less symmetry:; >; > import numpy as np; >; > mol = psi4.geometry("""""" 0 1C 0.0 0.0 0.673055C 0.0 0.0 -0.673055H 0.0 0.934981 1.246807H 0.0 -0.934981 1.246807H 0.934981 0.0 -1.246807H -0.934981 0.0 -1.246807symmetry c1""""""); > # Set reference and guess.; > psi4.set_options({; > ""reference"": ""rhf"",; > ""guess"": ""sad"",; > ""basis"": ""DZP"",; > ""soscf"": ""true"",# ""sad_frac_occ"": ""true""; > }); >; > energy = energy('scf')if np.allclose(energy, -77.87781349420317):; > print(""Found non-symmetric minima! Success!"")elif np.allclose(energy, -77.84789770426966):; > print(""Found symmetric minima... failure."")else:; > print(""You found something... wrong.""); >; > The -77.847 result should be found when the molecule is constrained to; > symmetry. However, without that constraint there is a lower SCF result to; > be found. The kicker is even without the symmetry restraint (computation in; > c1) we fairly consistently end up with a symmetric wavefunction. Any; > ideas on how to avoid this?; >; > Note 1: The stability analysis is showing that it is indeed finding the; > wrong answer and there are negative eigenvalues present. We should be able; > to follow these once the py-scf iterations are finished.; >; > Note 2: This is not deterministic for which result we land in (whoo!).; >; > Note 3: Moving an atom out of place by 1e-14 or so seems to ensure we find; > the correct energy. Really any noise lets the diagonalizer break out of its; > self-imposed symmetry constraints.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/875>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdlmJNWz39F1kSptiR8vFq7913CBnks5s9aN8gaJpZM4Q25IB>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349464469:2166,avoid,avoid,2166,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349464469,1,['avoid'],['avoid']
Safety,"hen will that make it into the master? ; > ; > From: Daniel Smith [mailto:notifications@github.com] ; > Sent: Sunday, November 26, 2017 8:22 AM ; > To: psi4/psi4 <psi4@noreply.github.com> ; > Cc: Bell, Ian (Fed) <ian.bell@nist.gov>; Mention <mention@noreply.github.com> ; > Subject: Re: [psi4/psi4] Cube file units? (#815) ; > ; > ; > Fixed in #864<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fpull%2F864&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=ovNTIVz57LVNsjcGLTnY7x6FdVA6LrnzFfr8rODv8jM%3D&reserved=0>. @ianhbell<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fianhbell&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=BbgIavE%2BOpBG2nShMTB9WmFqu1z1Oy10YPHDlbWHK4Q%3D&reserved=0> please let us know if that works for you. Closing for now. ; > ; > — ; > You are receiving this because you were mentioned. ; > Reply to this email directly, view it on GitHub<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fissues%2F815%23issuecomment-347015726&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=6LFqXLzB8E2v9UgPYsuvVSjQh7PY0s6mhRGYe7bL3hg%3D&reserved=0>, or mute the thread<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FALaZLRBPKhKV-XYnDzyf891po65sdy-Cks5s6YH7gaJpZM4Ppvfg&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=hmIB%2BNI%2BFucZdgbKzRI%2BuIT%2B11FYAsARSktaDW9%2B0s0%3D&reserved=0>. ; > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/815#issuecomment-347029051:1660,safe,safelinks,1660,https://psicode.org,https://github.com/psi4/psi4/issues/815#issuecomment-347029051,2,['safe'],['safelinks']
Safety,"hmm, right. Best to keep it simple and abort then, it's a corner case after all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1064093375:39,abort,abort,39,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1064093375,2,['abort'],['abort']
Safety,"hmm, you're right -- adcc 15.14 is getting installed https://github.com/psi4/psi4/actions/runs/3508758253/jobs/5877394681#step:16:956 but not detected for tests https://github.com/psi4/psi4/actions/runs/3508758253/jobs/5877394681#step:21:656",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2785#issuecomment-1322413359:142,detect,detected,142,https://psicode.org,https://github.com/psi4/psi4/pull/2785#issuecomment-1322413359,1,['detect'],['detected']
Safety,i4/tests/test_addons.py::test_cfour SKIPPED (Not detecting module cfour. Install package if necessary to enable tests.) [ 23%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary to enable...) [ 27%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to enable tests.) [ 32%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 34%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp_2 SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 36%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary to enable...) [ 38%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enable tests.) [ 40%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cct3 SKIPPED (Not detecting module cct3. Install package if necessary to enable tests.) [ 41%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psixas SKIPPED (Not detecting module psixas. Install package if necessary to enable tests.) [ 43%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_q,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:3476,detect,detecting,3476,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,i4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary to enable...) [ 27%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to enable tests.) [ 32%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 34%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp_2 SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 36%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary to enable...) [ 38%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enable tests.) [ 40%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cct3 SKIPPED (Not detecting module cct3. Install package if necessary to enable tests.) [ 41%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psixas SKIPPED (Not detecting module psixas. Install package if necessary to enable tests.) [ 43%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_ipi_broker1 SKIPPED (Not detecting module ipi. Install package if necessary to...) [ 47%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:3822,detect,detecting,3822,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,i4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if nece,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14153,detect,detecting,14153,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,i4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_json PASSED [ 61%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if ne...) [ 63%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_grimme_3c PASSED [ 65%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable ...) [ 67%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to e...) [ 69%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enabl...) [ 70%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary ...) [ 72%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enabl...) [ 74%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_mdi.py::test_mdi_water SKIPPED (Not detecting module mdi. Install package if necessary to enable tests.) [ 76%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py::test_spacious_option PASSED [ 78%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 80%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 83%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 85%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 87%]; psi,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:6846,detect,detecting,6846,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,"if I had to hazard a guess, it probably has to do with `run_cc_property` directly checking `core.OEProp.valid_methods` rather than running the `oeprop_validator` (which seems to let multipoles through).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2219#issuecomment-869256248:12,hazard,hazard,12,https://psicode.org,https://github.com/psi4/psi4/issues/2219#issuecomment-869256248,1,['hazard'],['hazard']
Safety,ile /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsMKLCache.cmake; loading initial cache file /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; -- The C compiler identification is Intel 18.0.2.20180210; -- The CXX compiler identification is Intel 18.0.2.20180210; -- Check for working C compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icc; -- Check for working C compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icpc; -- Check for working CXX compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- The Fortran compiler identification is Intel 18.0.2.20180210; -- Check for working Fortran compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort; -- Check for working Fortran compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Enabling Fortran; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883:1386,Detect,Detecting,1386,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883,8,['Detect'],['Detecting']
Safety,"inux_build/DartConfiguration.tcl; Parse Config file:/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Test project /home/raimis/psi4.git/linux_build; Constructing a list of tests; Done constructing a list of tests; Updating test list for fixtures; Added 0 tests to meet fixture requirements; Checking test dependency graph...; Checking test dependency graph end; test 360; Start 360: cubeprop-esp. 360: Test command: /shared/raimis/opt/miniconda/envs/psi4/bin/python ""/home/raimis/psi4.git/tests/runtest.py"" ""/home/raimis/psi4.git/tests/cubeprop-esp/input.dat"" ""/home/raimis/psi4.git/linux_build/testresults.log"" ""false"" ""/home/raimis/psi4.git"" ""false"" ""/home/raimis/psi4.git/linux_build/tests/cubeprop-esp/output.dat"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/bin/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/lib/""; 360: Test timeout computed to be: 1500; 360: 	Comparing Dt......................................................PASSED; 360: Traceback (most recent call last):; 360: File ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/bin/psi4"", line 264, in <module>; 360: exec(content); 360: File ""<string>"", line 37, in <module>; 360: File ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/lib/psi4/driver/p4util/util.py"", line 387, in compare_cubes; 360: raise TestComparisonError(message); 360: ; 360: TestComparisonError: 	Comparing ESP: computed cube file does not match expected cube file.; 360: Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); 1/1 Test #360: cubeprop-esp .....................***Failed 6.27 sec. 0% tests passed, 1 tests failed out of 1. Label Time Summary:; cubeprop = 6.27 sec*proc (1 test); psi = 6.27 sec*proc (1 test). Total Test time (real) = 6.33 sec. The following tests FAILED:; 	360 - cubeprop-esp (Failed); Error",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403465937:1243,timeout,timeout,1243,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403465937,1,['timeout'],['timeout']
Safety,ipi_broker1 PASSED [ 3%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker2 PASSED [ 5%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED (Not detecting module mrcc. Install package if necessary to enable tests.) [ 7%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to enable t...) [ 9%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED (Not detecting module erd. Install package if necessary to enable tests.) [ 18%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_simint SKIPPED (Not detecting module simint. Install package if necessary to enable tests.) [ 20%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 21%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED (Not detecting module cfour. Install package if necessary to enable tests.) [ 23%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:1932,detect,detecting,1932,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,"kage supports very large angular momentum, whereas the default libint that's automatically compiled by Psi4 can't handle density fitting basis sets for transition metals... And the trouble is that Psi4 only detects via the cmake interface whereas other libint downstreams in Fedora require pkgconfig? iirc, Psi uses libint's cmake to also set some AM compile defs, not just location detection, so pkgconfig detection insufficient. Would having libint's cmake write out the pkgconfig files (as libxc now does) allow the cmake libint to work for everyone?. I agree I wouldn't ship a production distribution with the default angmom. I like 7 locally and soon I'll make conda use the 8 pkg (now optional) by default instead of the lighter 6. Only potential trouble for you is that libderiv AM = libint AM – 1. If you're going _really_ high for libint, deriv may not cooperate. -----------. I was misremembering when I wrote https://github.com/psi4/psi4/issues/1302#issuecomment-450762992 .; * cmake was why Psi v1.1 couldn't use upstream libxc 3 (so we forked 3 and added cmake).; * functional tweakers not in public API was why Psi v1.2 couldn't use libxc 4 w/o losing functionality (so we forked libxc 4.0 and added the rejected [MR 62](https://gitlab.com/libxc/libxc/merge_requests/62) plus a few merged build MRs). The same libxc ~4.0 is the current state of Psi master.; * The missing tweakers of rejected MR 62 were replaced in merged [MR 67](https://gitlab.com/libxc/libxc/merge_requests/67) but that's a different API (solved by #1101) and not in a release (discussion at [MR 61](https://gitlab.com/libxc/libxc/issues/61)).; * I've prepared a 4.2.3 + !67 + windows PRs + build PRs branch described [here](https://gitlab.com/libxc/libxc/issues/61#note_128653141) that works works with Psi and doesn't have any of the Maple changes. (Indeed, if I build #1101 against libxc master, it links and runs but I see a lot of numerical problems, so avoiding the ongoing libxc work is probably a good idea.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451132442:2400,avoid,avoiding,2400,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451132442,1,['avoid'],['avoiding']
Safety,"l. I then ran ```psi4 --test``` and here are the results. does it matter some were skipped/ failed?. ```; (psi4env) C:\Users\erikc>psi4 --test; =========================================================================== test session starts ===========================================================================; platform win32 -- Python 3.8.10, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- C:\Users\erikc\psi4conda\envs\psi4env\python.exe; cachedir: .pytest_cache; rootdir: C:\Users\erikc; collected 3356 items / 3301 deselected / 55 selected. psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enable tests.) [ 1%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker1 PASSED [ 3%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker2 PASSED [ 5%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED (Not detecting module mrcc. Install package if necessary to enable tests.) [ 7%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to enable t...) [ 9%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED (Not detecting module erd. Install package if necessary",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:1139,detect,detecting,1139,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,"led with CheMPS2. Rebuild with -DENABLE_CheMPS2; 2018-12-05T15:55:39.8041756Z SKIP [1] lib\psi4\tests\test_addons.py:173: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8042653Z SKIP [1] lib\psi4\tests\test_addons.py:333: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; 2018-12-05T15:55:39.8043475Z SKIP [1] lib\psi4\tests\test_addons.py:392: Psi4 not compiled with PCMSolver. Rebuild with -DENABLE_PCMSolver; 2018-12-05T15:55:39.8044251Z SKIP [1] lib\psi4\tests\test_addons.py:634: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; 2018-12-05T15:55:39.8045164Z SKIP [1] lib\psi4\tests\test_addons.py:643: Psi4 not compiled with simint. Rebuild with -DENABLE_simint; 2018-12-05T15:55:39.8046429Z SKIP [1] lib\psi4\tests\test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8046725Z SKIP [1] lib\psi4\tests\test_addons.py:720: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; 2018-12-05T15:55:39.8047954Z SKIP [1] lib\psi4\tests\test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; 2018-12-05T15:55:39.8048914Z SKIP [1] lib\psi4\tests\test_addons.py:810: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8050115Z SKIP [1] lib\psi4\tests\test_addons.py:838: Psi4 not compiled with dkh. Rebuild with -DENABLE_dkh; 2018-12-05T15:55:39.8051342Z SKIP [1] lib\psi4\tests\test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); 2018-12-05T15:55:39.8052689Z SKIP [1] lib\psi4\tests\test_addons.py:940: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp); 2018-12-05T15:55:39.8053679Z ; 2018-12-05T15:55:39.8055000Z ============ 7 passed, 15 skipped, 21 deselected in 80.60 seconds =============; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647:4122,detect,detecting,4122,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647,4,['detect'],['detecting']
Safety,"m `git describe`; - get the branch and tag contents, including when ppl have neglected to pull tags and have none defined; - make it so when ppl download zip distributions, they're not prevented from compiling for lack of version info; - be able to reset commit increment to preserve monotonic versioning as in https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/psi4/src/bin/psi4_main/gitversion.py#L105; - make sure the version gets recomputed _every_ time, even if someone just pulls a change to `README.md` that technically changes the version; - get all that info ; - into the output file header; - to essentially ""configure_file"" the https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/psi4/psi4-config.in file so that it gets written to the bottom of it; - into place for https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/doc/sphinxman/source/conf.py.in#L58-L73 to absorb it for the docs build; - so that psi4 command-line can report version. The test is if the docs index.html, an output file, `psi4 --version`, and `psi4-config --version --githash` all return the same correct thing after a pull that doesn't technically require any recompile. I don't doubt that a better formulation than at present could be devised, and that'd be nice to have, especially pure CMake, but as the initial formulation only partially hit the first point, I just reverted back to what worked. I did have to change from the pre-CMakeRewrite version this bit (https://github.com/ryanmrichard/psi4/commit/18a41e0d01a9fa903cdce98bba52c785f81560b2) which is probably why it's compiling again upon install. Perhaps that bit could be fixed by moving the `versioned_code` object lib up to the top level?. Basically, I'm open to fixes, but versioning is a real can of worms, and I'm willing to tolerate eight extra file compiles to avoid opening it. btw, I'm storing my changes at https://github.com/loriab/psi4/commits/CMakeRewrite for the moment, since I'm breaking some things that are purportedly working.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239050499:2011,avoid,avoid,2011,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239050499,1,['avoid'],['avoid']
Safety,ma.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_ipi_broker1 SKIPPED (Not detecting module ipi. Install package if necessary to...) [ 47%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to...) [ 49%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enabl...) [ 50%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dftd3 PASSED [ 52%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to e...) [ 54%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_pcmsolver SKIPPED (Not detecting module pcmsolver. Install package if necessar...) [ 56%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[libint2] PASSED [ 58%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[simint] SKIPPED (Not detecting module simint. Install package if nec...) [ 60%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_json PASSED [ 61%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if ne...) [ 63%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_grimme_3c PASSED [ 65%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable ...) [ 67%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_snsm,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:5482,detect,detecting,5482,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,"managed to get a pair of builds (current master and this PR's branch) that do not entirely swallow the exception messages for write errors in the PK integral calculation. For me, it took building Psi4 entirely from source, with nothing from conda at all. stdout/stderr before this PR:. ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; stdout/stderr after this PR:; ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: WRITE failed. Only some of the bytes were written!; Error writing the first partial page, unit 34.; PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; The reason why there is no ""disk is full"" error message, is because `SYSTEM_WRITE` only reports a failure and sets errno if the disk is already full when it is called. As long as it can write at least one out of _however many_ bytes it does not set errno. I both cases there is no error message at all",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857:919,Abort,Aborted,919,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857,1,['Abort'],['Aborted']
Safety,"my 2 cents on this:; The geometry you posted looks broken to me (too long 'bonds'). I'd guess the optimizer had some troubles displacing the geometry correctly.; Often it is enough to set `opt_coordinates both`, which mixes cartesian and redundant coordinates.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-953037136:238,redund,redundant,238,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-953037136,1,['redund'],['redundant']
Safety,"n 3.8.10, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- C:\Users\erikc\psi4conda\envs\psi4env\python.exe; cachedir: .pytest_cache; rootdir: C:\Users\erikc; collected 3356 items / 3301 deselected / 55 selected. psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enable tests.) [ 1%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker1 PASSED [ 3%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker2 PASSED [ 5%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED (Not detecting module mrcc. Install package if necessary to enable tests.) [ 7%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to enable t...) [ 9%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED (Not detecting module erd. Install package if necessary to enable tests.) [ 18%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_simint SKIPPED (Not detecting module simint. Install package if necessary to enable tests.) [ 20%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 21%]; psi4conda/envs/psi4env/lib/site-packages/psi4/t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:1479,detect,detecting,1479,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,"n fsdecode\n filename = fspath(filename) # Does type-checking of `filename`.\nTypeError: expected str, bytes or os.PathLike object, not NoneType\n\n')); ```; From yml install; ```; Collecting package metadata (repodata.json): done; Solving environment: |; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; Examining python=3.9: 43%|██████████████████████████▏ | 6/14 [00:19<00:29, 3.66s/it]|Examining conflict for geometric torsiondrive matplotlib qcengine python qcelemental psi4: 57%|▌| 8/14 [00:22<00:10, \Examining conflict for geometric torsiondrive matplotlib qcengine python qcelemental gau2grid psi4: : 19it [01:02, 3.49Examining conflict for geometric torsiondrive matplotlib qcengine python qcelemental gau2grid psi4: : 20it [01:02, 3.71Examining conflict for matplotlib python: : 20it [01:07, 3.71s/it] failed -; Solving environment: /; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; Examining python=3.9: 43%|██████████████████████████▏ | 6/14 [00:20<00:30, 3.87s/it]|Examining libblas[build=*mkl]: 64%|█████████████████████████████████▍ | 9/14 [00:30<00:24, 4.99s/it]|Examining conflict for geometric torsiondrive: 43%|███████████████▍ | 6/14 [00:16<00:10, 1.28s/it]\Examining conflict for matplotlib psi4 geometric torsiondrive: 86%|████████████████▎ | 12/14 [00:43<00:07, 3.92s/it]|Examining conflict for matplotlib psi4 geometric: 93%|█████████████████████████████▋ | 13/14 [00:47<00:04, 4.52s/it]/Examining conflict for geometric torsiondrive matplotlib qcengine python qcelemental gau2grid psi4: : 19it [01:06, 3.74Examining conflict for geometric torsiondrive matplotlib qcengine python qcelemental gau2grid psi4: : 20it [01:06, 3.94Examining conflict for matplotlib python: : 20it [01:11, 3.94s/it] failed /. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available version",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:4245,abort,abort,4245,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020,1,['abort'],['abort']
Safety,"n/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option PSI4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.3"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so (found suitable version ""2.7.3"", minimum required is ""2"") ; -- Suitable pybind11 could not be located, building one instead.; -- Suitable libint could not be located, building one instead.; -- Suitable libefp could not be located, building one instead.; -- Try OpenMP C flag = [-qope",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261733153:829,Detect,Detecting,829,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153,2,['Detect'],['Detecting']
Safety,"nd11::is_method const&, pybind11::sibling const&, char const (&) [36])::{lambda(pybind11::detail::function_call&)#3}::_FUN(pybind11::detail::function_call) /home/raimis/opt/conda/envs/psi4/include/python3.6m/pybind11/pybind11.h:132; #19 0x7f7ba5fdbbcd in pybind11::cpp_function::dispatcher(_object*, _object*, _object*) /home/raimis/opt/conda/envs/psi4/include/python3.6m/pybind11/pybind11.h:627; #20 0x564ef0ac8743 in _PyCFunction_FastCallDict /tmp/build/80754af9/python_1546130271559/work/Objects/methodobject.c:231. SUMMARY: AddressSanitizer: heap-buffer-overflow /home/raimis/prj/psi4.git/psi4/src/psi4/libscf_solver/rohf.cc:590 in psi::scf::ROHF::Hx(std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Matrix>); Shadow bytes around the buggy address:; 0x0c06800375e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c06800375f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c0680037600: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c0680037610: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c0680037620: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; =>0x0c0680037630: fa fa 00 00 00[fa]fa fa fa fa fa fa fa fa fa fa; 0x0c0680037640: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c0680037650: fa fa fa fa fa fa 00 00 00 fa fa fa fa fa fa fa; 0x0c0680037660: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c0680037670: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c0680037680: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07 ; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==18335==ABORTING; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1489#issuecomment-456415881:21395,ABORT,ABORTING,21395,https://psicode.org,https://github.com/psi4/psi4/pull/1489#issuecomment-456415881,1,['ABORT'],['ABORTING']
Safety,"ng libint: conda update libint -c psi4/label/dev. After that, your conda list should say _5.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to rebuild. > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1). * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. Notes. * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular momentum error on mac binary.; * simint max is AM7 both past and near future. Only libint is changing.; * Between higher AM and optimizing for multiple architectures, the new libint pkg is heavy, >120mb zipped. For psi4 CI, I'm planning to pull the old AM6 to lessen the strain on Travis. This won't help downstream projects that summon a built psi4 to test their addon.; * I haven't posted the AM8 package yet, as I want the stack to finish building, and I wanted to give you all a heads-up. I'll post to this issue when the package goes up. Will only be in -c psi4/label/dev for now, not -c psi4. —; You are receiving this because you are subscribed to this thread.; Reply to this email directly, view it on GitHub<https://github.c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:2929,avoid,avoid,2929,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773,1,['avoid'],['avoid']
Safety,"ntirely from source, with nothing from conda at all. stdout/stderr before this PR:. ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; stdout/stderr after this PR:; ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: WRITE failed. Only some of the bytes were written!; Error writing the first partial page, unit 34.; PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; The reason why there is no ""disk is full"" error message, is because `SYSTEM_WRITE` only reports a failure and sets errno if the disk is already full when it is called. As long as it can write at least one out of _however many_ bytes it does not set errno. I both cases there is no error message at all in the output file. The current theory is that the `python` process gets aborted by a SIGABRT and cannot write the message to the output file. I think chasing that down is beyond the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857:1691,Abort,Aborted,1691,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857,2,"['Abort', 'abort']","['Aborted', 'aborted']"
Safety,"nually-specified variables were not used by the project:. OpenMP_CXX_LIBRARY_DIRS. ```; The second way to edit link.txt gives error message from OMP:; ```; OMP: Error #15: Initializing libiomp5.so, but found libiomp5.so already initialized.; OMP: Hint: This means that multiple copies of the OpenMP runtime have been linked into the program. That is dangerous, since it can degrade performance or cause incorrect results. The best thing to do is to ensure that only a single OpenMP runtime is linked into the process, e.g. by avoiding static linking of the OpenMP runtime in any library. As an unsafe, unsupported, undocumented workaround you can set the environment variable KMP_DUPLICATE_LIB_OK=TRUE to allow the program to continue to execute, but that may cause crashes or silently produce incorrect results. For more information, please see http://www.intel.com/software/products/support/.; Aborted (core dumped); ```; To force running psi4, I follow OMP error message's suggestion (`export KMP_DUPLICATE_LIB_OK=TRUE`), but dft-custom-gga does not work (failed due to the same reason - not converged ). From my several trials, this problem seems not to be related to OMP libraries. Regardless of using either `gomp` or `iomp`, dft-custom-gga test fails under single thread. In other words, whenever multi-thread is used for calculations, it gives good SCF convergence within few iterations, which seems similar with the issue #994 @hokru reported. I thought it might be problem of incompatibilities between GCC compiler and Intel OMP libraries. Like @loriab setting, I changed to use icpc intel compiler (v 18.0.3), instead of gcc (v5.4.0). Re-built '<objdir>' by cmake. Then, opened '<objdir>/psi4-core-prefix/src/psi4-core-build/src/CMakeFiles/core.dir/link.txt' and added '/opt/intel/lib/intel64' (basically intel 64bit libraries) to set library folder path.; Then, Intel Compiler + Intel OMP libraries works even single thread calculation for dft-custom-gga test. Anyway, I am not sure why on",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809:1065,Abort,Aborted,1065,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809,1,['Abort'],['Aborted']
Safety,odule libefp. Install package if necessary to e...) [ 54%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_pcmsolver SKIPPED (Not detecting module pcmsolver. Install package if necessar...) [ 56%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[libint2] PASSED [ 58%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[simint] SKIPPED (Not detecting module simint. Install package if nec...) [ 60%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_json PASSED [ 61%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if ne...) [ 63%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_grimme_3c PASSED [ 65%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable ...) [ 67%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to e...) [ 69%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enabl...) [ 70%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary ...) [ 72%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enabl...) [ 74%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_mdi.py::test_mdi_water SKIPPED (Not detecting module mdi. Install package if necessary to enable tests.) [ 76%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_optio,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:6320,detect,detecting,6320,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,odule pcmsolver. Install package if necessar...) [ 56%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[libint2] PASSED [ 58%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[simint] SKIPPED (Not detecting module simint. Install package if nec...) [ 60%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_json PASSED [ 61%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if ne...) [ 63%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_grimme_3c PASSED [ 65%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable ...) [ 67%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to e...) [ 69%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enabl...) [ 70%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary ...) [ 72%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enabl...) [ 74%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_mdi.py::test_mdi_water SKIPPED (Not detecting module mdi. Install package if necessary to enable tests.) [ 76%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py::test_spacious_option PASSED [ 78%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 80%]; psi4conda/envs/psi4env/lib/site-packa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:6496,detect,detecting,6496,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,"optking was aborting prematurely. I just pushed the fix to the problem. For this case I found consecutive_backsteps = 2 [or more], as well as dynamic_level = 1 to now be helpful. (Don't use both at once as that is somewhat redundant.) Sometime I will type up some tips on problematic optimizations. But now optking will at least move you substantially closer to the minimum. Though one may always have to restart an optimization, these options will minimize the manual effort necessary.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153#issuecomment-127808983:12,abort,aborting,12,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-127808983,2,"['abort', 'redund']","['aborting', 'redundant']"
Safety,"ove import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF derivative integrals (#2088) ; - Windows conda package (#2048) ; - Remove some tests for multithreading (#2094) ; - Update Numpy interface docs (#2089) ; - Python detection downstream (#2096) ; - Save OCC densities to Wavefunction (#2072) ; - Make library SHARED and Py linking MODULE in pybind11 (2104) ; - Remove some OCC code (#2107) ; - Refactor EFP routines (#2111) ; - Pybind11 to v2.6.2 (#2118) ; - Windows package to anaconda.org (#2123) ; - Update v2rdm, qcelemental to 0.19 (#2128) ; - Address linker warning for OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:3855,detect,detection,3855,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['detect'],['detection']
Safety,p2. Install package if necessary to enable tests.) [ 32%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 34%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp_2 SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 36%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary to enable...) [ 38%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enable tests.) [ 40%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cct3 SKIPPED (Not detecting module cct3. Install package if necessary to enable tests.) [ 41%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psixas SKIPPED (Not detecting module psixas. Install package if necessary to enable tests.) [ 43%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_ipi_broker1 SKIPPED (Not detecting module ipi. Install package if necessary to...) [ 47%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to...) [ 49%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enabl...) [ 50%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dftd3 PASSED [ 52%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_libefp SKIPPED (Not detecting module libe,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:4329,detect,detecting,4329,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,p2d. Install package if necessary to enabl...) [ 50%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dftd3 PASSED [ 52%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to e...) [ 54%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_pcmsolver SKIPPED (Not detecting module pcmsolver. Install package if necessar...) [ 56%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[libint2] PASSED [ 58%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[simint] SKIPPED (Not detecting module simint. Install package if nec...) [ 60%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_json PASSED [ 61%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if ne...) [ 63%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_grimme_3c PASSED [ 65%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable ...) [ 67%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to e...) [ 69%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enabl...) [ 70%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary ...) [ 72%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_cppe SKIPPED (Not detecting module cppe. Install pac,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:6049,detect,detecting,6049,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,package if necessary to enable...) [ 38%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enable tests.) [ 40%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cct3 SKIPPED (Not detecting module cct3. Install package if necessary to enable tests.) [ 41%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psixas SKIPPED (Not detecting module psixas. Install package if necessary to enable tests.) [ 43%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_ipi_broker1 SKIPPED (Not detecting module ipi. Install package if necessary to...) [ 47%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to...) [ 49%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enabl...) [ 50%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dftd3 PASSED [ 52%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to e...) [ 54%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_pcmsolver SKIPPED (Not detecting module pcmsolver. Install package if necessar...) [ 56%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[libint2] PASSED [ 58%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[simint] SKIPPED (Not detecting module simint. Install package if nec...) [ 60%]; psi4conda/envs/ps,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:4858,detect,detecting,4858,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,"plugins on windows could be pursued, but they're not in demand. presently failing on OpenMP detection in plugin cmake configuration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2099#issuecomment-773626229:92,detect,detection,92,https://psicode.org,https://github.com/psi4/psi4/pull/2099#issuecomment-773626229,1,['detect'],['detection']
Safety,"s that are not; supporting C++11 at the moment, usually because they dont want to shell out; for Intel15. So this isn't just limited to personal clusters. In 10 years; I suspect this will all be a moot point, but now it's quite pressing. In another thread I had asked for other developer feedback on the C++11; issue and so far have received no on record feedback (posts to github).; Off record, I've been told similar sentiments to what I posted above, C++11; is nice, but don't want to push away users. It would be nice if other; developers would comment so we can have a discussion on the issue as I do; think it is important to have all developers on the same page for this. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 1:22 PM, ""wpoely86"" notifications@github.com wrote:. > The question is not whether Psi4's current machinery adequate or not. It's; > about the sensible default. If I put out a $TMPDIR variable, I expect; > programs to obey it. Most Unix/Linux programs will do so, it's even part of; > the Unix specification. There is no reason why Psi4 should do something; > different.; > Heck, with all the recent evolutions in the Linux world (systemd), it's; > even mandatory. Per user containers and ditto /tmp are coming to the HPC; > world.; > I really see no reason why there should be hardcoded default for this.; > ; > I also disagree with your C++11 sentiment. I think this is an excellent; > example why C++11 is long overdue. If something as trivial as fetching a; > environment variable is not guaranteed thread safe...; > There are now more than enough compilers that support it: Clang since 3.4,; > GCC 4.8-4.9, intel 2015. The current intel 2016 beta even already does the; > largest part of C++14. If you are using old compilers for calculations,; > you're wasting computational time and money IMHO.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/97#issuecomment-105040869.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105055171:2295,safe,safe,2295,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105055171,2,['safe'],['safe']
Safety,s.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcsche,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:15611,detect,detecting,15611,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,s/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to enable tests.) [ 32%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 34%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp_2 SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 36%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary to enable...) [ 38%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enable tests.) [ 40%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cct3 SKIPPED (Not detecting module cct3. Install package if necessary to enable tests.) [ 41%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psixas SKIPPED (Not detecting module psixas. Install package if necessary to enable tests.) [ 43%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_ipi_broker1 SKIPPED (Not detecting module ipi. Install package if necessary to...) [ 47%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to...) [ 49%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_ad,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:3989,detect,detecting,3989,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,"s?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; - psi4-config; - dftd3; - lib/; - libpython.so; - share/; - cmake/; - psi4/; - psi4Config.cmake; - psi4ConfigVersion.cmake; - psi4Targets.cmake; - gdma/; - gdmaConfig.cmake; ...; ```. Unfortunately, this complicates searches within `stage/` b/c `CMAKE_PREFIX_PATH` has to be hinted (`find_package(gdma CONFIG REQUIRED HINTS ${CMAKE_PREFIX_PATH}/gdma)`) and the current way I've done can't be robust (think ;-lists). I can understand your wanting to separate out extproj() installations as not-quite-up-to-snuff, but the extra hinting level is annoying, so how about keeping `externals/` (controlled by a keyword maybe; `INSTALL_EXTPROJ_SEPARATE`) and dropping the extra namespacing level. So a default installation looks like below. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - bin/; - chemps2; - lib/; - libchemps2.a; - libgdma.a; - libint.a; - libderiv.a; - libdkh.a; - share/; - cmake/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That way, can have `externals/` in `CMAKE_PREFIX_PATH` and all the configs can be detected. In the `INSTALL_EXTPROJ_SEPARATE`, `externals/` is missing and the external/bin-s join the main bin, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:6205,detect,detected,6205,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,2,['detect'],['detected']
Safety,s\psi4\tests\test_addons.py:162: Not detecting module mrcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:186: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:233: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package i,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:13348,detect,detecting,13348,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,"save one-electron ints in wfn so that (1) not writing to disk, thus freeing SCF from disk and thread-safety issues, and (2) better carry around external potentials btwn modules.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-473124434:101,safe,safety,101,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-473124434,1,['safe'],['safety']
Safety,"shared_ptr<psi::Wavefunction>), pybind11::name const&, pybind11::scope const&, pybind11::sibling const&, char const (&) [59])::{lambda(pybind11::detail::function_call&)#3}::_FUN(pybind11::detail::function_call&) /shared/raimis/opt/miniconda/envs/psi4/include/python3.6m/pybind11/pybind11.h:132; #22 0x7fb0da7c0ae5 in pybind11::cpp_function::dispatcher(_object*, _object*, _object*) /shared/raimis/opt/miniconda/envs/psi4/include/python3.6m/pybind11/pybind11.h:627; #23 0x7fb0e963f08c in _PyCFunction_FastCallDict Objects/methodobject.c:231. SUMMARY: AddressSanitizer: heap-buffer-overflow /home/raimis/psi4.git/psi4/src/psi4/libtrans/integraltransform_sort_so_tei.cc:209 in psi::IntegralTransform::presort_so_tei(); Shadow bytes around the buggy address:; 0x0c3080047fa0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c3080047fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c3080047fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c3080047fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c3080047fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; =>0x0c3080047ff0: 00 00 00 00[fa]fa fa fa fa fa fa fa fa fa fa fa; 0x0c3080048000: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c3080048010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c3080048020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c3080048030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c3080048040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07 ; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==16127==ABORTING; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1469#issuecomment-452722861:15795,ABORT,ABORTING,15795,https://psicode.org,https://github.com/psi4/psi4/pull/1469#issuecomment-452722861,1,['ABORT'],['ABORTING']
Safety,si4 not compiled with libefp. Rebuild with -DENABLE_libefp; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:628: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:798: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:909: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:925: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp). ================================================================== warnings summary ==================================================================; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom ==,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:4355,detect,detecting,4355,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['detect'],['detecting']
Safety,si4.py::test_psi4_cc PASSED [ 81%]; 2018-12-05T15:54:39.2671697Z ..\lib\psi4\tests\test_psi4.py::test_psi4_cas PASSED [ 86%]; 2018-12-05T15:55:14.7785164Z ..\lib\psi4\tests\test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; 2018-12-05T15:55:32.0037962Z ..\lib\psi4\tests\test_psi4.py::test_psi4_sapt PASSED [ 95%]; 2018-12-05T15:55:39.8034520Z ..\lib\psi4\tests\test_psi4.py::test_psi4_scfproperty PASSED [100%]; 2018-12-05T15:55:39.8037151Z =========================== short test summary info ===========================; 2018-12-05T15:55:39.8038147Z SKIP [1] lib\psi4\tests\test_addons.py:43: Psi4 not compiled with gdma. Rebuild with -DENABLE_gdma; 2018-12-05T15:55:39.8039347Z SKIP [1] lib\psi4\tests\test_addons.py:100: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8040544Z SKIP [1] lib\psi4\tests\test_addons.py:125: Psi4 not compiled with CheMPS2. Rebuild with -DENABLE_CheMPS2; 2018-12-05T15:55:39.8041756Z SKIP [1] lib\psi4\tests\test_addons.py:173: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8042653Z SKIP [1] lib\psi4\tests\test_addons.py:333: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; 2018-12-05T15:55:39.8043475Z SKIP [1] lib\psi4\tests\test_addons.py:392: Psi4 not compiled with PCMSolver. Rebuild with -DENABLE_PCMSolver; 2018-12-05T15:55:39.8044251Z SKIP [1] lib\psi4\tests\test_addons.py:634: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; 2018-12-05T15:55:39.8045164Z SKIP [1] lib\psi4\tests\test_addons.py:643: Psi4 not compiled with simint. Rebuild with -DENABLE_simint; 2018-12-05T15:55:39.8046429Z SKIP [1] lib\psi4\tests\test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8046725Z SKIP [1] lib\psi4\tests\test_addons.py:720: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; 2018-12-05T15:55:39.8047954Z SKIP [1] lib\psi4\tests\test_addons.py:773: Psi4 not detecting plugin g,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647:3140,detect,detecting,3140,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647,1,['detect'],['detecting']
Safety,si4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED (Not detecting module erd. Install package if necessary to enable tests.) [ 18%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_simint SKIPPED (Not detecting module simint. Install package if necessary to enable tests.) [ 20%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 21%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED (Not detecting module cfour. Install package if necessary to enable tests.) [ 23%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary to enable...) [ 27%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to enable tests.) [ 32%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 34%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp_2 SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 36%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if n,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:2869,detect,detecting,2869,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,si4/tests/test_addons.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary to enable...) [ 27%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to enable tests.) [ 32%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 34%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp_2 SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 36%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary to enable...) [ 38%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enable tests.) [ 40%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cct3 SKIPPED (Not detecting module cct3. Install package if necessary to enable tests.) [ 41%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psixas SKIPPED (Not detecting module psixas. Install package if necessary to enable tests.) [ 43%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addon,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:3647,detect,detecting,3647,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,si4\tests\test_addons.py:233: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:13667,detect,detecting,13667,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,si4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to...) [ 49%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enabl...) [ 50%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dftd3 PASSED [ 52%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to e...) [ 54%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_pcmsolver SKIPPED (Not detecting module pcmsolver. Install package if necessar...) [ 56%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[libint2] PASSED [ 58%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[simint] SKIPPED (Not detecting module simint. Install package if nec...) [ 60%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_json PASSED [ 61%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if ne...) [ 63%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_grimme_3c PASSED [ 65%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable ...) [ 67%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to e...) [ 69%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enabl...) [ 70%]; psi4conda/envs/psi4env/lib/site,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:5779,detect,detecting,5779,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,"so the environment is solvable on Linux:; ```conda create -n amber ambertools=20.9 python=3.7 blas=*=mkl gau2grid psi4/label/dev::libxc psi4/label/dev::psi4=1.4a2.dev1058 -c conda-forge -c defaults -c psi4/label/dev```. on Mac, I agree that `libgfortran` is the problem. it comes about b/c conda-forge pins on gfortran v4 and defaults on gfortran v3 (then there's various soversions and libgfortran versions, too). once upon a time, the pinning that was applied by run_exports was >3.0.1, but that's been narrowed to >3.0.1,<4.0.0 . there's still some old add-on packages with the former, so if I suppress the libgfortran pinning on psi4 itself (psi4=1.4a2.dev1084 for py37 at https://anaconda.org/psi4/psi4/files), then I can get an environment to solve with it and ambertools=20. of course, then the libgfortran.3.dylib is missing, but if I symlink (!) that to libgfortran.4.dylib, I can get some psi4 test cases to pass (gdma fails to load lib, while some dft is off a bit). altogether, not a satisfactory or safe fix. and libxc is both required and fortran, so I can't just build you a non-fortran psi4. so unless I think of something else, I think you just can't mix fortran dependencies when compiled against a mix of c-f and defaults pinnings. sorry.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2024#issuecomment-722811014:1012,safe,safe,1012,https://psicode.org,https://github.com/psi4/psi4/issues/2024#issuecomment-722811014,1,['safe'],['safe']
Safety,"specified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so; -- Found Python 2.7: /usr/bin/python; -- Found libefp: /usr/qc/psi4.bin/lib/libefp.a (found version 1.3.0); -- Found libint: /usr/qc/psi4.bin/lib/libint.a (found version 1.1.6); -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED. ```. psi4-core cmake:; ```; - The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so ; -- Using pybind11: /usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/include (version 2.0.0 for Py2.7.12 and -std=c++11) ; -- Using Python 2.7: /usr/bin/python ; -- Looking for include file pthread.h ; -- Looking for include file pthread.h - found ; -- Looking for pthread_create ; -- Looking for pthread_create - found ; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; -- Disabled CheMPS2 ; -- Disabled dkh ; -- Using libefp: /usr/qc/psi4.bin/lib/libefp.a (version 1.3.0) ; -- Disabled erd ; -- Disabled gdma ; -- Using libint: /usr/qc/psi4.bin/lib/libint.a (version 1.1.6) ; -- Configuring ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273732640:1046,Detect,Detecting,1046,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640,8,['Detect'],['Detecting']
Safety,"sphinx_psi_theme; -- Setting option SPHINXMAN_STRICT: OFF; -- Setting option BUILD_Libint2_GENERATOR: OFF; -- Setting option psi4_SHGAUSS_ORDERING: gaussian; -- Psi4 install: /mnt/f/psi4/build_linux/install; -- Found Python 3.10: /home/yuyeqing/software/miniconda3/envs/psi/bin/python3.10 (found version 3.10.11); -- Psi4 staging: /mnt/f/psi4/build_linux/stage; -- CMAKE_CXX_FLAGS: -march=native; -- Could NOT find iomp5 -- consider adding full directory path to OpenMP_LIBRARY_DIRS; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX, C/CXX/Fortran=GNU/GNU/; -- Found LAPACK MKL: /home/yuyeqing/intel/oneapi/mkl/latest/lib/intel64/libmkl_rt.so;...; -- Performing Test HAS_FLTO; -- Performing Test HAS_FLTO - Success; -- Found pybind11: /mnt/f/psi4/build_linux/stage/include (found version 2.10.3); -- Found gau2grid: /mnt/f/psi4/build_linux/stage/lib/libgg.a (found version 2.0.7); -- Found Eigen3: /home/yuyeqing/software/eigen3/include/eigen3 (Required is at least version ""3.0.0""); -- Boost detected. satisfied by headers bundled with Libint2 distribution; -- Libint2Config components requested: CXX_ho;eri_c2_d0_l4;eri_c2_d1_l3;eri_c2_d2_l3;eri_c3_d0_l4;eri_c3_d1_l3;eri_c3_d2_l3;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d2_l2;impure_sh;onebody_d0_l4;onebody_d1_l3;onebody_d2_l3;sss; -- Libint2Config components found: CXX_ho;C;eri_c2_d0_l2;eri_c2_d0_l3;eri_c2_d0_l4;eri_c2_d0_l5;eri_c2_d0_l6;eri_c2_d1_l2;eri_c2_d1_l3;eri_c2_d1_l4;eri_c2_d1_l5;eri_c2_d2_l2;eri_c2_d2_l3;eri_c2_d2_l4;eri_c3_d0_l2;eri_c3_d0_l3;eri_c3_d0_l4;eri_c3_d0_l5;eri_c3_d0_l6;eri_c3_d1_l2;eri_c3_d1_l3;eri_c3_d1_l4;eri_c3_d1_l5;eri_c3_d2_l2;eri_c3_d2_l3;eri_c3_d2_l4;eri_c4_d0_l2;eri_c4_d0_l3;eri_c4_d0_l4;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d1_l3;eri_c4_d1_l4;eri_c4_d2_l2;eri_c4_d2_l3;g12_d0_l2;g12_d0_l3;g12_d0_l4;g12_d1_l2;g12_d1_l3;g12_d1_l4;impure_sh;onebody_d0_l2;onebody_d0_l3;onebody_d0_l4;onebody_d0_l5;onebody_d0_l6;onebody_d1_l2;onebody_d1_l3;onebody_d1_l4;onebody_d1_l5;onebody_d2_l2;onebody_d2_l3;onebody_d2_l4;s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:3041,detect,detected,3041,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119,1,['detect'],['detected']
Safety,ssary to enable tests.) [ 18%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_simint SKIPPED (Not detecting module simint. Install package if necessary to enable tests.) [ 20%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 21%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED (Not detecting module cfour. Install package if necessary to enable tests.) [ 23%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary to enable...) [ 27%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to enable tests.) [ 32%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 34%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp_2 SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 36%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary to enable...) [ 38%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enable tests.) [ 40%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:3135,detect,detecting,3135,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,"st libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: conda update libint -c psi4/label/dev. After that, your conda list should say _5.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to rebuild. > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1). * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. Notes. * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular momentum error on mac binary.; * simint max is AM7 both past and near future. Only libint is changing.; * Between higher AM and optimizing for multiple architectures, the new libint pkg is heavy, >120mb zipped. For psi4 CI, I'm planning to pull the old AM6 to lessen the strain on Travis. This won't help downstream projects that summon a built psi4 to test their addon.; * I haven't posted the AM8 package yet, as I want the ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:2661,detect,detect,2661,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773,1,['detect'],['detect']
Safety,st_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:15445,detect,detecting,15445,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,"stead.; -- Found libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (found version 1.3.0); -- Found gdma: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libgdma.so (found version 2.2.06); -- Found libint: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libint.so (found version 1.1.6); -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Found GCC 5.2.0; ```; Then you change into your objdir and pybind11 and other dependencies compile. Finally you get to:; ```; Scanning dependencies of target psi4-core; ...; -- The CXX compiler identification is Intel 16.0.3.20160415; -- Check for working CXX compiler: /theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icpc; -- Check for working CXX compiler: /theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Using pybind11: /theoryfs2/ds/cdsgroup/psi4-compile/hrw-dgasfork3/objdir1/stage/usr/local/psi4/include (version 2.0.0 for Py3.5.2 and -std=c++11); -- Using Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; ...; -- Using CheMPS2: /theoryfs2/ds/cdsgroup/psi4-compile/hrw-dgasfork3/objdir1/stage/usr/local/psi4/lib/libchemps2.so.2 (version 1.8.3); -- Using dkh: /theoryfs2/ds/cdsgroup/psi4-compile/hrw-dgasfork3/objdir1/stage/usr/local/psi4/lib/libdkh.so (version 1.2); -- Using libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (version 1.3.0); -- Using Libxc: /theoryfs2/ds/cdsgroup/psi4-compile/hrw-dgasfork3/objdir1/stage/usr/local/psi4/lib/libxc.so (version 3.0.0); -- Disabled erd; -- Us",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273512333:2722,Detect,Detecting,2722,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273512333,2,['Detect'],['Detecting']
Safety,"structure of `qcdb.molparse` (or `qcel.molparse`) which now handles Molecule I/O; ```; def from_arrays(**arrays):; validate_and_type ...; construct_molrec_dictionary ...; return molrec. def from_string(str):; parse ...; return from_arrays(**arrays). def from_schema(schema_dict):; process ...; return from_arrays(**arrays). def to_string(molrec, dtype):; format_by_dtype ...; return str. def to_schema(molrec, dtype):; depending_on_schema_flavor_dtype_rearrange_and_remove_fields ...; return dict; ```. then proper objects like `qcdb.Molecule` and `psi4.core.Molecule` can hook in through; ```; class Molecule():; def to_dict(self):; convert_object_structure_into_molrec ...; return molrec. @classmethod; def from_dict(cls, molrec):; construct_object_from_molrec_contents ...; return mol. @staticmethod; def from_string(str):; molrec = molparse.from_string(str); return Molecule.from_dict(molrec). def to_string(self, dtype):; return molparse.to_string(self.to_dict(), dtype=dtype). @staticmethod; def from_arrays(**arrays):; molrec = molparse.from_arrays(**arrays); return Molecule.from_dict(molrec). def to_schema(self, dtype):; return molparse.to_schema(self.to_dict(), dtype=dtype); ```. The above is more detailed than you need, but it's about time I wrote it down. By external function, I just meant one that returns your findif dictionary. If you want to keep arrays as numpy structures, then can have a flag that does or does not call `unnp` (or similar) and things that are destined for a JSON file (like a `to_schema()` call) can be sure to use `to_dict(np_out=False)` while internal calls can do `to_dict(np_out=True)`. I suggest it merely as a way to avoid lots of `np.array(inp)` and `to_list`s. And keep in mind that the above structure is necessary b/c the ""molrec"" psi4 internal repr dict isn't quite the same as the QCSchema dict, so some translation necessary. Possibly you can avoid that complication. This answer is more background than specifics. Glad to talk the latter instead.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1289#issuecomment-429944965:1696,avoid,avoid,1696,https://psicode.org,https://github.com/psi4/psi4/pull/1289#issuecomment-429944965,2,['avoid'],['avoid']
Safety,sts\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if neces,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:13833,detect,detecting,13833,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,sweeeet: ; `psi4-path-advisor --intel`; ```; loading initial cache file /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsCache.cmake; loading initial cache file /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsMKLCache.cmake; loading initial cache file /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; -- The C compiler identification is Intel 18.0.2.20180210; -- The CXX compiler identification is Intel 18.0.2.20180210; -- Check for working C compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icc; -- Check for working C compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icpc; -- Check for working CXX compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- The Fortran compiler identification is Intel 18.0.2.20180210; -- Check for working Fortran compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort; -- Check for working Fortran compiler: /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /home/termo/intel/compilers_and_libraries_2018.2.199/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Enabling Fortran; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524:706,Detect,Detecting,706,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524,4,['Detect'],['Detecting']
Safety,"t (&) [65])::{lambda(pybind11::detail::function_call&)#3}::_FUN(pybind11::detail::function_call&) /shared/raimis/opt/miniconda/envs/psi4/include/python3.6m/pybind11/pybind11.h:132; #24 0x7f70032fcbc5 in pybind11::cpp_function::dispatcher(_object*, _object*, _object*) /shared/raimis/opt/miniconda/envs/psi4/include/python3.6m/pybind11/pybind11.h:627; #25 0x557a4165f743 in _PyCFunction_FastCallDict /tmp/build/80754af9/python_1546130271559/work/Objects/methodobject.c:231. SUMMARY: AddressSanitizer: heap-buffer-overflow /opt/conda/conda-bld/compilers_linux-64_1534514838838/work/.build/x86_64-conda_cos6-linux-gnu/src/gcc/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:720 in __interceptor_memmove; Shadow bytes around the buggy address:; 0x0c04800fc760: fa fa fa fa fa fa fd fa fa fa fd fa fa fa fa fa; 0x0c04800fc770: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fd fa; 0x0c04800fc780: fa fa fd fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c04800fc790: fa fa fa fa fa fa fd fa fa fa fd fa fa fa fa fa; 0x0c04800fc7a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fd fa; =>0x0c04800fc7b0: fa fa fd fa fa fa 00[fa]fa fa fd fa fa fa fa fa; 0x0c04800fc7c0: fa fa fa fa fa fa fd fa fa fa fd fa fa fa fa fa; 0x0c04800fc7d0: fa fa fa fa fa fa fa fa fa fa 00 fa fa fa fd fa; 0x0c04800fc7e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c04800fc7f0: fa fa 00 fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c04800fc800: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07 ; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==1078==ABORTING; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1521#issuecomment-460637418:21378,ABORT,ABORTING,21378,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-460637418,1,['ABORT'],['ABORTING']
Safety,"t a dangling sym link or anything like that).; `$ cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/usr/local/psi4 -DOpenMP_CXX_LIBRARY_DIRS=opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64_lin/`; gives:; ```. -- Math lib search order is MKL;OPENBLAS;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl; -- Found BLAS: MKL (/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so); -- LAPACK will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl; -- Found LAPACK: MKL (/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so); -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; MathOpenMP iomp5 0 ; MathOpenMP iomp5 A _lib-NOTFOUND; MathOpenMP iomp5 B _lib-NOTFOUND; MathOpenMP_LIBRARIES MathOpenMP_LIBRARIES-NOTFOUND; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; -- Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE) ; -- ; Properties for TARGET tgt::MathOpenMP:; tgt::MathOpenMP.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; tgt::MathOpenMP.INTERFACE_LINK_LIBRARIES = ""MathOpenMP_LIBRARIES-NOTFOUND;OpenMP::OpenMP_CXX"". -- ; Properties for TARGET OpenMP::OpenMP_CXX:; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_COMPILE_OPTIONS = ""$<$<COMPILE_LANGUAGE:CXX>:-fopenmp>""; OpenMP::OpenMP_CXX.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; OpenMP::OpenMP_CXX.INTERFACE_LINK_LIBRARIES = ""/usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so""; Properties for TARGET tgt::MathOpenMP:; tgt::MathOpenM",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396744575:1415,Detect,Detecting,1415,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396744575,1,['Detect'],['Detecting']
Safety,"t set on the remote machine; (probably didn't re-source ~/.bashrc after installing psi4. However, it; should be writing to local disks. I can see psi...clean files in the local; directory, are those scratch files?. No, psi.[pid].clean is a little text file that contains a list of all the; scratch files to clean up. You should look at the list of scratch files in; this psi.[pid].clean file to see where it is writing the scratch files, and; make sure that it isn't to a NFS-mounted directory. Otherwise you'll take; a huge performance hit. On Thu, Mar 1, 2018 at 11:05 AM, Lori A. Burns <notifications@github.com>; wrote:. > Possible, but I really doubt it, as glibc mismatches aren't usually; > healable. Usually this is a symptom of packages depending on different; > versions of a library and symbols getting sometimes loaded one way and; > sometimes another depending on import order. Often fixable by swapping; > import order, but in the psi-in-jupyter case, there's simply nothing to; > swap.; >; > I thoroughly expected this to be fixed when I built with the newer; > compilers and was alarmed when it wasn't. @sergsb; > <https://github.com/sergsb>, would you want to try the conda env line in #862; > (comment) <https://github.com/psi4/psi4/issues/862#issuecomment-347074303>; > ? Possibly more defaults packages have been updated to the new compilers; > since November and healed the problem.; >; > Only thing else I can think of is that I'm still linking libc++ statically; > (which it should be entirely safe to do, being the least-fundamental of the; > glibc, libgcc_s, libstdc++ trio) and that's running into a symbol error; > with the jupyter stack.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/862#issuecomment-369640226>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdr3o6Z-YaJeCQ901ywG8eMHjO8c5ks5taBxDgaJpZM4Qhais>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-369646381:1633,safe,safe,1633,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369646381,2,['safe'],['safe']
Safety,"t&, char const (&) [47])::{lambda(pybind11::detail::function_call&)#3}::_FUN(pybind11::detail::function_call&) /home/raimis/opt/conda/envs/psi4/include/python3.6m/pybind11/pybind11.h:132; #9 0x7f356be2bb8d in pybind11::cpp_function::dispatcher(_object*, _object*, _object*) /home/raimis/opt/conda/envs/psi4/include/python3.6m/pybind11/pybind11.h:627; #10 0x556f522e2743 in _PyCFunction_FastCallDict /tmp/build/80754af9/python_1546130271559/work/Objects/methodobject.c:231. SUMMARY: AddressSanitizer: heap-buffer-overflow /opt/conda/conda-bld/compilers_linux-64_1534514838838/work/.build/x86_64-conda_cos6-linux-gnu/src/gcc/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1036 in __interceptor_write; Shadow bytes around the buggy address:; 0x0c068005b3a0: fa fa fa fa fa fa fa fa fa fa fd fd fd fd fa fa; 0x0c068005b3b0: fd fd fd fd fa fa fd fd fd fd fa fa fa fa fa fa; 0x0c068005b3c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fd fd; 0x0c068005b3d0: fd fd fa fa 00 00 00 fa fa fa fa fa fa fa fa fa; 0x0c068005b3e0: fd fd fd fd fa fa 00 00 00 fa fa fa fa fa fa fa; =>0x0c068005b3f0: fa fa fa fa fa fa fa fa 00 00 00[fa]fa fa 00 00; 0x0c068005b400: 00 fa fa fa 00 00 00 fa fa fa 00 00 00 fa fa fa; 0x0c068005b410: 00 00 00 fa fa fa 00 00 00 fa fa fa fa fa fa fa; 0x0c068005b420: fa fa fd fd fd fd fa fa fd fd fd fa fa fa fa fa; 0x0c068005b430: fa fa fa fa fa fa fa fa fa fa fd fd fd fd fa fa; 0x0c068005b440: fa fa fa fa fa fa 00 00 00 fa fa fa 00 00 00 fa; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07 ; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==10585==ABORTING; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1476#issuecomment-454165133:11767,ABORT,ABORTING,11767,https://psicode.org,https://github.com/psi4/psi4/pull/1476#issuecomment-454165133,1,['ABORT'],['ABORTING']
Safety,"t>, Zarr<https://zarr.readthedocs.io/en/stable/>, or any other format) is more easily managed from Python, especially if we need to preserve compatibility with Windows.; * Restart capabilities. Summary of proposed changes (incomplete); cc* modules. * Create a single cc folder where all the other cc* folders will live as subfolders.; * Provide a top-level CCWavefunction class, partly modeled on the existing CIWavefunction class to overtake the whole implementation of the CC functionality.; * The class will manage MOInfo,Params, DPD as local data members. This will ensure that the lifetime of these objects is tied to a particular instance of a CC calculation.; * The class will contain the various steps in a CC calculation as methods.; * Move from tstart-tstop to the new timers timer_on-timer_off. DPD Library. * Remove use of static global machinery from DPD member functions.; * Implement proper copy/move assign/construct for the DPD object.; * Implement internal structs with proper constructors as needed.; * Replace c-style arrays/raw pointers with appropriate smart pointer/containers; * Refactor shared state (shared by multiple DPD instances, currently dpd_gbl struct) into singleton(s).; * Note: Memory tracking in its current form is not thread safe and relies on the client code properly locking calls to function that need to perform allocations with a mutex.; * Insert a layer of abstraction between DPD and psio. (slated for deprecation/replacement). For visibility: @lothian<https://github.com/lothian> @CDSherrill<https://github.com/CDSherrill> @andysim<https://github.com/andysim> @jturney<https://github.com/jturney> @fevangelista<https://github.com/fevangelista> @dgasmith<https://github.com/dgasmith>. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/psi4/psi4/issues/1247>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AC9Qdt-9Cic7AcHOMo2bMq1iF3Nyc5FZks5uc6dJgaJpZM4WyQ3->.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247#issuecomment-423216907:2989,safe,safe,2989,https://psicode.org,https://github.com/psi4/psi4/issues/1247#issuecomment-423216907,1,['safe'],['safe']
Safety,tecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschem,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:15948,detect,detecting,15948,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED (Not detecting module erd. Install package if necessary to enable tests.) [ 18%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_simint SKIPPED (Not detecting module simint. Install package if necessary to enable tests.) [ 20%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 21%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED (Not detecting module cfour. Install package if necessary to enable tests.) [ 23%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary to enable...) [ 27%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to enable tests.) [ 32%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 34%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp_2 SKIPPED (Not detecting module resp. Install package if necessary,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:2700,detect,detecting,2700,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package i,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14314,detect,detecting,14314,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. I,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14632,detect,detecting,14632,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,"that case: ; So far everything is going smoothly on my end, but I did notice a couple of inconsistencies in detecting python/complier versions and incorrectly using a different library. On one of our clusters using the module system I have loaded gcc-5.2.0 and Anaconda with python 2.7.10. (these modules define envars $ANACONDA_LIB and $GCC_LIB, which I will refer to below. They also modify the $LD_LIBRARY_PATH variable when they are loaded.) . If I set the python executable and don't do anything to `CMAKE_PREFIX_PATH` the executable is set up correctly but the `PYTHON_INCLUDE_DIR` and `PYTHON_LIBRARY` find the ones that live in the system paths `/usr/lib/python2.6.so` and `/usr/include/python2.6` which causes problems in the linking step with undefined references to some python stuff. . Also if I set the C/CXX compiler, but again don't do anything to the `CMAKE_PREFIX_PATH` I can build + link fine, but at runtime I will get errors like this:. ```; /usr/lib64/libstdc++.so.6: version ``GLIBCXX_X.X.XX' not found ; ```. Which seems to be that cmake is linking to the libstdc++ version for the system gcc which is 4.7.2, instead of the correct library version for the compiler I am using. . If I add `-DCMAKE_PREFIX_PATH=$GCC_LIB:$ANACONDA_LIB` to my cmake command it will fix both issues are corrected. The python library is detected as `$ANACONDA_LIB/python2.7.so` and I don't have any problems with linking. And there is no errors at runtime either. In both cases cmake seems to detect the versions correctly since it has the correct executable. . So when it comes time to document the new build system for users, it may be prudent to mention they should either use the `CMAKE_PREFIX_PATH` argument, or check that cmake has detected the correct library paths for the python/compiler they actually meant to use if they are working in a environment where multiple python/compilers installed. Most clusters will have some way of swapping these out with a system default installed globally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249621149:1345,detect,detected,1345,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249621149,3,['detect'],"['detect', 'detected']"
Safety,ts/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:170: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:329: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:628: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:798: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:909: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:925: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp). ================================================================== warnings summary ==================================================================; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:4016,detect,detecting,4016,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['detect'],['detecting']
Safety,"ub.com wrote:; > ; > Dear Pis4 developers.; > ; > I've got in issue when link psi4 binary:; > ; > /usr/local/lib/libpython2.7.a(posixmodule.o): In function `posix_tmpnam':; > /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7515: warning: the use of`tmpnam_r' is dangerous, better use `mkstemp'; > /usr/local/lib/libpython2.7.a(posixmodule.o): In function`posix_tempnam':; > /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7462: warning: the use of `tempnam' is dangerous, better use`mkstemp'; > /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `boost::python::converter::(anonymous namespace)::slot_rvalue_from_python<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, boost::python::; > builtin_converters.cpp:(.text+0x1286): undefined reference to`PyUnicodeUCS4_AsWideChar'; > /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `encode_string_unaryfunc':; > builtin_converters.cpp:(.text+0x455): undefined reference to`PyUnicodeUCS4_FromEncodedObject'; > collect2: error: ld returned 1 exit status; > make[2]: **\* [bin/psi4] Ошибка 1; > make[1]: **\* [src/bin/psi4/CMakeFiles/psi4.dir/all] Ошибка 2; > make: **\* [all] Ошибка 2; > I'm running on Ubuntu 14.04 with cmake installed from ppa:george-edison55/cmake-3.x; > ; > Since the default version available in 14.04 is boost-1.54, used to compile boost_1_57_0.tar.bz2 that included in distro.; > http://packages.ubuntu.com/trusty/libboost-all-dev; > ; > My python interpreter support UCS-4.; > ; > python -c ""import sys; print(sys.maxunicode)""; > returns 1114111; > ; > python3 -c ""import sys; print(sys.maxunicode)""; > returns 1114111; > ; > Could you clarify my issue or can I compile Psi4 without puthon support to avoid this issue?; > in particular, I only need to generate MOLDEN file from SCF calculations.; > ; > With respect, Vladimir.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/94#issuecomment-100760375:2349,avoid,avoid,2349,https://psicode.org,https://github.com/psi4/psi4/issues/94#issuecomment-100760375,1,['avoid'],['avoid']
Safety,"uble with intel 16.0.3 on my mac. I have not been able to compile PSI4 with intel. . Here is what appears if I do, icpc -v. ```; icpc version 16.0.3 (gcc version 4.9.0 compatibility) ; ```. I got a bunch of errors in dcft/dcft_df_tensor.cc about how the compiler can't recognize "">>"", so I changed all instances of "">>"" to ""> >"". This seems to work, but I get another error in detci/ciwave.h. . ```; In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: namespace ""std"" has no member ""tuple""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: expected a "">""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(414): error: expected a "")""; std::vector<std::tuple<int, int> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: namespace ""std"" has no member ""tuple""; std::vector<std::tuple<int, int, double> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: expected a "">""; std::vector<std::tuple<int, int, double> > states_vec);; ^. In file included from /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc(49):; /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/ciwave.h(434): error: expected a "")""; std::vector<std::tuple<int, int, double> > states_vec);; ^. compilation aborted for /Users/kevinhannon/Programs/psi4/psi4src/src/bin/detci/params.cc (code 2); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/444#issuecomment-232825635:1929,abort,aborted,1929,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232825635,1,['abort'],['aborted']
Safety,"uh-oh, it's finding pedantic errors in integratorxx now `/include/integratorxx/generators/s2_factory.hpp:24:2: error: extra ‘;’ [-Wpedantic]` . this would be a fault of our appending to `CMAKE_CXX_FLAGS`, which wasn't so outrageous back in the day. thinking about it, there would be a lot more of these interferences with other projects if the CI wasn't detecting so much as pre-built. which means that developers building deps from source will likely have builds fail since force_pydantic defualts to ON and if the dep projects aren't pedantic clean. so this was probably a lucky block to the merge. I'm not sure right off if there's a quick+good solution. you could move the option to here https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L222 _after_ the externals have been added. and maybe turn the default to OFF but add it (`-D`) as ON to the azure CI. I'm going to put a needs-changes block so I remember it isn't just a spurious test fail in the merge queue. lmk if you disagree with any of my hasty conclusions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2015930547:354,detect,detecting,354,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2015930547,1,['detect'],['detecting']
Safety,"uild; Constructing a list of tests; Done constructing a list of tests; Updating test list for fixtures; Added 0 tests to meet fixture requirements; Checking test dependency graph...; Checking test dependency graph end; test 401; Start 401: json-schema_0_properties. 401: Test command: /shared/raimis/opt/miniconda/envs/psi4/bin/python ""/home/raimis/psi4.git/tests/runtest.py"" ""/home/raimis/psi4.git/tests/json/schema_0_properties/input.dat"" ""/home/raimis/psi4.git/linux_build/testresults.log"" ""false"" ""/home/raimis/psi4.git"" ""false"" ""/home/raimis/psi4.git/linux_build/tests/json/json-schema_0_properties/output.dat"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/bin/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/lib/""; 401: Test timeout computed to be: 1500; 401: ; 401: *** tstart() called on computer06; 401: *** at Mon Jul 9 14:44:29 2018; 401: ; 401: => Loading Basis Set <=; 401: ; 401: Name: 6-31G; 401: Role: ORBITAL; 401: Keyword: BASIS; 401: atoms 1 entry O line 117 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/6-31g.gbs ; 401: atoms 2-3 entry H line 26 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/6-31g.gbs ; 401: ; 401: ; 401: ---------------------------------------------------------; 401: SCF; 401: by Justin Turney, Rob Parrish, Andy Simmonett; 401: and Daniel Smith; 401: RHF Reference; 401: 1 Threads, 500 MiB Core; 401: ---------------------------------------------------------; 401: ; 401: ==> Geometry <==; 401: ; 401: Molecular point group: c2v; 401: Full point group: C2v; 401: ; 401: Geometry (in Bohr), charge = 0, multiplicity = 1:; 401: ; 401: Center X Y Z Mass ; 401: ------------ ----------------- ----------------- ----------------- -----------------; 401: O 0.000000000000 0.000000000000 -0.129476941194 15.99491",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174:1296,timeout,timeout,1296,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174,1,['timeout'],['timeout']
Safety,ule psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:16117,detect,detecting,16117,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['detect'],['detecting']
Safety,upcoming changes:. - [x] formatting request; - [x] modifying tests; - [x] NL_DISPERSION_PARAMETERS name; - [x] partially avoiding EmpiricalDispersion,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/914#issuecomment-385183176:121,avoid,avoiding,121,https://psicode.org,https://github.com/psi4/psi4/pull/914#issuecomment-385183176,1,['avoid'],['avoiding']
Safety,"xing this myself, but your solution(s) seem much better than whatever hack I would have come up with. Especially like the isocontour that contains XX% of the electron density PDF modification. When will that make it into the master?. From: Daniel Smith [mailto:notifications@github.com]; Sent: Sunday, November 26, 2017 8:22 AM; To: psi4/psi4 <psi4@noreply.github.com>; Cc: Bell, Ian (Fed) <ian.bell@nist.gov>; Mention <mention@noreply.github.com>; Subject: Re: [psi4/psi4] Cube file units? (#815). Fixed in #864<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fpull%2F864&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=ovNTIVz57LVNsjcGLTnY7x6FdVA6LrnzFfr8rODv8jM%3D&reserved=0>. @ianhbell<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fianhbell&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=BbgIavE%2BOpBG2nShMTB9WmFqu1z1Oy10YPHDlbWHK4Q%3D&reserved=0> please let us know if that works for you. Closing for now. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fissues%2F815%23issuecomment-347015726&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=6LFqXLzB8E2v9UgPYsuvVSjQh7PY0s6mhRGYe7bL3hg%3D&reserved=0>, or mute the thread<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FALaZLRBPKhKV-XYnDzyf891po65sdy-Cks5s6YH7gaJpZM4Ppvfg&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=hmIB%2BNI%2BFucZdgbKzRI%2BuIT%2B11FYAsARSktaDW9%2B0s0%3D&reserved=0>.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/815#issuecomment-347021249:1406,safe,safelinks,1406,https://psicode.org,https://github.com/psi4/psi4/issues/815#issuecomment-347021249,2,['safe'],['safelinks']
Safety,"y makefiles written by cmake.; You don't need to use it in your code, it always works. > You need to build psi4 with the env variable DESTDIR=/tmp/path-to-onstall-psi4-to.; /tmp/path-to-onstall-psi4-to should end up with usr and under it there should be the usual bin, share, etc. Got it, `CMAKE_INSTALL_PREFIX` and envvar `DESTDIR` can work together to produce a working installation (and ugly extra files).; ```; > cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/usr; > cd objdir && cmake --build .; > make DESTDIR=/psi/gits/testinstall4 install; -- Installing: /psi/gits/testinstall4/usr//bin/psi4; ...; > /psi/gits/testinstall4/usr/bin/psi4 ../tests/tu1-h2o-energy/input.dat ; SCF energy............................................................................PASSED; ```. > DESTDIR is a GNU standard. It is totally separate from CMAKE_INSTALL_PREFIX. Yes, I see [here](https://www.gnu.org/prep/standards/html_node/DESTDIR.html) how it's a GNU recommendation that we're only half complying with (full installation plus aforementioned ugly extra files). > Can you just remove the internal stage directory and make it install like all other cmake based projects?. Not really. The internal stage directory was a compromise so that developers could continue to never have to type `make install` and was a prerequisite to them approving the transition from GNUMake to CMake at all. Since then, the stage/ has proven convenient and robust to support fairly transparent mixing of externally detected and internally build dependencies that makes having lots of dependencies (as opposed to monolithic software) tolerable to the users and developers. I'd be glad to seek or try any tweaks to the build system that remedy this install issue, but on the whole, the internal stage solves a lot and breaks a little. What I'm not quite following is how this issue is blocking you. I'm glad to have finally understood and reproduced the issue, but it sounds like an extra `rm -rf` or two gets the desired behavior?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325775604:1558,detect,detected,1558,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325775604,1,['detect'],['detected']
Safety,"ybind11::name const&, pybind11::scope const&, pybind11::sibling const&, char const (&) [95])::{lambda(pybind11::detail::function_call&)#3}::_FUN(pybind11::detail::function_call&) /home/raimis/opt/conda/envs/psi4/include/python3.6m/pybind11/pybind11.h:132; #10 0x7fdb45716bcd in pybind11::cpp_function::dispatcher(_object*, _object*, _object*) /home/raimis/opt/conda/envs/psi4/include/python3.6m/pybind11/pybind11.h:627; #11 0x55e06162b743 in _PyCFunction_FastCallDict /tmp/build/80754af9/python_1546130271559/work/Objects/methodobject.c:231. SUMMARY: AddressSanitizer: heap-buffer-overflow /home/raimis/prj/psi4.git/psi4/src/psi4/libtrans/integraltransform_moinfo.cc:210 in psi::IntegralTransform::process_spaces(); Shadow bytes around the buggy address:; 0x0c0e8001b930: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c0e8001b940: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c0e8001b950: fa fa fa fa fa fa fa fa fa fa fa fa fa fa 00 00; 0x0c0e8001b960: 00 00 00 00 00 00 00 00 fa fa fa fa fd fd fd fd; 0x0c0e8001b970: fd fd fd fd fd fa fa fa fa fa 00 00 00 00 00 00; =>0x0c0e8001b980: 00 00 00 00[fa]fa fa fa fa fa fa fa fa fa fa fa; 0x0c0e8001b990: fa fa fa fa fa fa fd fd fd fd fd fd fd fd fd fd; 0x0c0e8001b9a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c0e8001b9b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c0e8001b9c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c0e8001b9d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07 ; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==17351==ABORTING; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1488#issuecomment-456410401:12532,ABORT,ABORTING,12532,https://psicode.org,https://github.com/psi4/psi4/pull/1488#issuecomment-456410401,1,['ABORT'],['ABORTING']
Security," OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); -option(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_UBSAN"" Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_MSAN"" Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF); # These options are relevant to pasture; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); @@ -114,6 +110,14 @@ option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); +option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=address -fno-omit-frame-pointer""); +option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); +option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=undefined -fno-omit-frame-pointer""); +option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); diff --git a/cmake/custom_sanitize.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/845#issuecomment-343290538:1698,sanitiz,sanitizer,1698,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538,8,['sanitiz'],['sanitizer']
Security," i<nirrep_; ++i) {; rowspi_[i] = cp->rowspi_[i];; colspi_[i] = cp->colspi_[i];; }; alloc();; }; ```. …; }. From looking at your code the matrix Ca does not use symmetry,. ```; SharedMatrix Ca = SharedMatrix(new Matrix(""Alpha MO Coefficients"", nso_, nmo_));; ```. but the one you request from the environment does because the calculation uses symmetry:. SharedMatrix moA = Process::environment.wavefunction()->Ca();. This is only speculative, but it could be easily tested. Maybe we should reconsider restricting Matrix::copy so that we eliminate the option to make copies between objects that do not have the same dimension. After all, if we are going to reallocate the memory we might as well just create a copy of the matrix with clone(). Francesco. On Jul 16, 2015, at 5:24 PM, Ugur Bozkaya <notifications@github.com<mailto:notifications@github.com>> wrote:. I am also very surprised how the saving MOs procedure yields wrong gradients. I do not read back the MOs from wfn during gradients. That code in the save_mo_to_wfn() function, which is on the line 328 of manager.cchttp://manager.cc. If I call save_mo_to_wfn() before gradients, then gradient code gives the wrong answer. Anyone can confirm me. It is really quite odd. Jet wrote that he will take a look it. Not sure whether he has the time or not. @jturneyhttps://github.com/jturney. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/127#issuecomment-122103421. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/127#issuecomment-122116756:2169,confidential,confidential,2169,https://psicode.org,https://github.com/psi4/psi4/issues/127#issuecomment-122116756,1,['confidential'],['confidential']
Security," running CTest; ```. ##### Recc. TODO. * In main CM, change erd warning to ` message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, gradients will be caught and halted, but LRC DFT, ESP, and perhaps other types not tested and identified will give *wrong* answers. Consider this your warning."")`. * In `psi4/driver/driver.py`, apply patch below. ```; --- a/psi4/driver/driver.py; +++ b/psi4/driver/driver.py; @@ -82,6 +82,9 @@ def _find_derivative_type(ptype, method_name, user_dertype):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype; ; + if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; + raise ValidationError(""INTEGRAL_PACKAGE ERD does not play nicely with gradients, so stopping.""); +; # Summary validation; if (dertype == 2) and (method_name in procedures['hessian']):; pass; ```. * Running this yield the following list (30% failure rate).; ```; The following tests FAILED:; 	 12 - cbs-xtpl-freq (Failed); 	 13 - cbs-xtpl-gradient (Failed); 	 14 - cbs-xtpl-opt (Failed); 	 16 - cbs-xtpl-wrapper (Failed); 	 17 - cc1 (Failed); 	 21 - cc13 (Failed); 	 22 - cc13a (Failed); 	 23 - cc14 (Failed); 	 30 - cc21 (Failed); 	 32 - cc23 (Failed); 	 33 - cc24 (Failed); 	 34 - cc25 (Failed); 	 35 - cc26 (Failed); 	 36 - cc27 (Failed); 	 39 - cc3 (Failed); 	 78 - cepa0-grad1 (Failed); 	 79 - cepa0-grad2 (Failed); 	 95 - dcft-grad1 (Failed); 	 96 - dcft-grad2 (Failed); 	 97 - dcft-grad3 (Failed); 	 98 - dcft-grad4 (Failed); 	103 - dcft5 (Failed); 	114 - dfccd-grad1 (Failed); 	117 - dfccsd-grad1 (Failed); 	122 - dfmp2-3 (Failed); 	124 - dfmp2-grad1 (Failed); 	125 - dfmp2-grad2 (Failed); 	126 - dfmp2-grad3 (Failed); 	127 - dfmp2-grad4 (Failed); 	132 - dfomp2-grad1 (Failed); 	133 - dfomp2-grad2 (Failed); 	136 - dfomp3-grad1 (Failed);",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-276884648:1872,validat,validation,1872,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648,1,['validat'],['validation']
Security,"### Conda changes since v1.1; * MKL linked dynamically through free Anaconda-provided `mkl_rt.so` rather than statically linked. This saves size (since NumPy also uses `mkl_rt`) and eliminates incorrect results and threading damping associated with multiple programs accessing BLAS/LAPACK from multiple sources (#748, #755).; * Psi4 no longer installs a non-standard gcc5.2 alongside Psi4 on Linux (or gcc feature on Mac). This was necessary when conda's default 4.8.5 was too low for Psi4's c++11 requirements, but since conda's default has leaped to 7.2.0, we use default again. Note that only libraries (e.g., `libstdc++`) are installed alongside Psi4 now, not compilers (e.g., `g++`).; * (generic, not psi4, conda) `conda activate env` works multishell, not just on `bash`. Since conda 4.4 c. Dec 2017",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959#issuecomment-386708662:267,access,accessing,267,https://psicode.org,https://github.com/psi4/psi4/issues/959#issuecomment-386708662,1,['access'],['accessing']
Security,"### Storing data on `Wavefunction` instances. #### Choices (dipole gradient used as example). - (a) store in dedicated slot, `wfn.dipole_gradient_`. access through `wfn.dipole_gradient()`; - (b) store in `wfn.arrays_`. access through `wfn.variable('CURRENT DIPOLE GRADIENT')` or `wfn.variable('MTD DIPOLE GRADIENT')`; - (c) do (b) but also accessible through `wfn.dipole_gradient()` which just performs `wfn.arrays_` lookup; - (d) store in both `wfn.dipole_gradient_` and `wfn.arrays_` (memory-independent copies). access through `wfn.dipole_gradient()` (former) or `wfn.variable('CURRENT DIPOLE GRADIENT')` (latter) or `wfn.variable('MTD DIPOLE GRADIENT')` (latter). #### Present; - E/G/H are (d) and both, either, or neither may be set or consistent. even for energies, these haven’t been thoroughly rolled out past SCF.; - non-E/G/H are (b). #### Future; - E/G/H; - first (v1.4) work on getting data set in both places (reserved slot (e.g., `energy_`) and map (i.e., `variables_`)); - next cycle (v.1.5) do (c); - next next cycle (v1.6) do (b); - non-E/G/H, do (c)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/883#issuecomment-449694968:149,access,access,149,https://psicode.org,https://github.com/psi4/psi4/issues/883#issuecomment-449694968,4,['access'],"['access', 'accessible']"
Security,"### conda stage (cont.). * build the stack in the usual `***` configuration on L & M. should be (`psi4`, `psi4-rt`, `psi4-dev`) * python_versions for L & M. Also single `psi4-docs` from L.; * Poodle emits with `--label dev` so upload there to the subchannel directly. may need to clear out space.; * Go through each active conda package off https://anaconda.org/psi4/repo, find the most recent build set (L/M, active py versions) that psi/psi-rt/psi-dev is using and _add_ (not replace) the `main` label. this makes a `conda install psi4 -c psi4` get everything psi4 needs. for the moment `conda install psi4 -c psi4/label/dev` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. may help to check versions and build versions against ltrtver in conda_build_config.yaml. this step takes a while. ### constructor stage. * move into constructor_cutter_unified. there's a rEADME there. ; * edit pythons if necessary; * edit release/hash/ltrtver of cookiecutter.json .; * for non-rc's channel_tag should be empty string; * leave git set to a `rc` since that has more details; * copy cookiecutter.json to cookiecutter.json-vXXX; * cookiecutter/{{.../construct.yaml rarely needs editing; * do clear out .constructor so that everyting downloaded afresh; * clean out build/; * python run.py check for an py_ bad noarch pkgs; * if fetching times out, may have to run run.py several times. clear out build/ in between. it's the fetching that takes a long time, not constucting; * in the end, should have several constructors; ```; >>> lh build/psi4conda-1.3-py3.*/*64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluse",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372:944,hash,hash,944,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372,2,['hash'],['hash']
Security,"##### Summary. With a couple changes, as below, I think this can be ready to go. ##### Testing Setup. * in `~/.psi4rc`: `psi4.set_global_option(""INTEGRAL_PACKAGE"", ""ERD"")`; * in `psi4/driver/driver.py`: the catch from the section below, only with `sys.exit(0)` to force smooth exit from test, rather than the ValidationError; * Under these conditions, only the below fail from full tests. Ignoring the can't-find-exe, the known-failures, and the sow/reap, the ailing test cases involved either LRC functionals or ESP.; ```; The following tests FAILED:; 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	188 - mints9 (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	322 - cubeprop-esp (Failed); 	333 - dftd3-version (Failed); 	341 - mrcc-ccsdt (Failed); 	342 - mrcc-ccsd_t_ (Failed); 	343 - mrcc-ccsdt_q_ (Failed); 	344 - mrcc-optfreq (Failed); Errors while running CTest; ```. ##### Recc. TODO. * In main CM, change erd warning to ` message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, gradients will be caught and halted, but LRC DFT, ESP, and perhaps other types not tested and identified will give *wrong* answers. Consider this your warning."")`. * In `psi4/driver/driver.py`, apply patch below. ```; --- a/psi4/driver/driver.py; +++ b/psi4/driver/driver.py; @@ -82,6 +82,9 @@ def _find_derivative_type(ptype, method_name, user_dertype):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype; ; + if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; + raise ValidationError(""INTEGRAL_PACKAGE ERD does not play nicely with gradients, so stopping.""); +; # Summary validation; if (dertype == 2) and (method_name in procedures['hessian']):; pass; ```. * Running this yield the following list (30",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-276884648:309,Validat,ValidationError,309,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648,1,['Validat'],['ValidationError']
Security,(1) `lenv` is already sanitized: https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3715; (2) `subprocess` call seems to follow the same pattern already: https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3749-L3769,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1132#issuecomment-412529684:22,sanitiz,sanitized,22,https://psicode.org,https://github.com/psi4/psi4/issues/1132#issuecomment-412529684,1,['sanitiz'],['sanitized']
Security,"**kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; > scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; > superfunc, disp_type = dft_funcs.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; > ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); >; > ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; >; > - DLDF+D09/cc-pVDZ: *GRADIENTS FAILED*; >; > Segmentation fault: 11; >; > - Both disk_DF and mem_DF gradients yield above segfault, no; > message in outfile or message printed to stdout; > - PBE/cc-pVDZ: Passed; > - wPBE/cc-pVDZ: *FAILED*; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:4376,Validat,ValidationError,4376,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['Validat'],['ValidationError']
Security,"**kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; > scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; > superfunc, disp_type = dft_funcs.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; > ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); >; > ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; >; > 5. SAPT0/cc-pVDZ (energies only; water dimer): Passed!; > 6. FNOCC; > - QCISD(T)/cc-pVDZ: *ENERGY FAILED*; >; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 4052, in run_fnocc; > fnocc_wfn = core.fnocc(ref_wfn); >; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /Users/dasirianni/Gits/psi4/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:6520,Validat,ValidationError,6520,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['Validat'],['ValidationError']
Security,", v4rhosigma2tau=0x0, v4rhosigmalapl2=0x0, v4rhosigmalapltau=0x0, ; v4rhosigmatau2=0x0, v4rholapl3=0x0, v4rholapl2tau=0x0, v4rholapltau2=0x0, v4rhotau3=0x0, v4sigma4=0x0, v4sigma3lapl=0x0, v4sigma3tau=0x0, v4sigma2lapl2=0x0, v4sigma2lapltau=0x0, v4sigma2tau2=0x0, v4sigmalapl3=0x0, v4sigmalapl2tau=0x0, v4sigmalapltau2=0x0, v4sigmatau3=0x0, v4lapl4=0x0, v4lapl3tau=0x0, v4lapl2tau2=0x0, v4lapltau3=0x0, ; v4tau4=0x0) at /psi/gits/libxc/src/mix_func.c:119; #5 0x00007fffecf71998 in xc_gga (func=0x555556ca7500, np=255, rho=0x555556e575c0, sigma=0x555556ccda80, zk=0x555556771300, vrho=0x55555e164460, vsigma=0x555556c12720, v2rho2=0x0, v2rhosigma=0x0, v2sigma2=0x0, v3rho3=0x0, v3rho2sigma=0x0, v3rhosigma2=0x0, v3sigma3=0x0, v4rho4=0x0, v4rho3sigma=0x0, v4rho2sigma2=0x0, v4rhosigma3=0x0, v4sigma4=0x0); at /psi/gits/libxc/src/gga.c:126; #6 0x00007fffecf71b16 in xc_gga_exc_vxc (p=<optimized out>, np=<optimized out>, rho=<optimized out>, sigma=<optimized out>, zk=<optimized out>, vrho=<optimized out>, vsigma=0x555556c12720) at /psi/gits/libxc/src/gga.c:160; #7 0x00007fffef1a9541 in psi::LibXCFunctional::compute_functional (this=0x896d, in=..., out=..., npoints=-1, deriv=1) at /psi/gits/hrw-demo/psi4/src/psi4/libfunctional/LibXCfunctional.cc:549; #8 0x00007fffef1b899f in psi::SuperFunctional::compute_functional (this=0x896d, vals=..., npoints=6) at /psi/gits/hrw-demo/psi4/src/psi4/libfunctional/superfunctional.cc:633; #9 0x00007fffef1737ba in psi::RV::compute_V (this=0x896d, ret=<error reading variable: Cannot access memory at address 0x896d>) at /psi/gits/hrw-demo/psi4/src/psi4/libfock/v.cc:1350; #10 0x00007fffef7752c3 in psi::scf::RHF::form_V (this=0x896d) at /psi/gits/hrw-demo/psi4/src/psi4/libscf_solver/rhf.cc:180; #11 0x00007fffef77451b in psi::scf::RHF::form_G (this=0x896d) at /psi/gits/hrw-demo/psi4/src/psi4/libscf_solver/rhf.cc:185; ```. Please let me know when is a good point to try Psi4+Libxc 5.1 again and if your Libxc 6 PR needs adding atop this (surely not?), thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754391084:3250,access,access,3250,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754391084,1,['access'],['access']
Security,"- [ ] `-D(abc)` work needs to continue, see https://github.com/psi4/psi4/pull/1151#issuecomment-417101476 and below; - [ ] add named per-parameter access to DFT functionals now that we can get names from libxc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-433542414:147,access,access,147,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-433542414,1,['access'],['access']
Security,".0a0|>=14.1,<15|>=14.2,<15|>=9,<10.0a0']; qcelemental -> numpy[version='>=1.12.0'] -> vc[version='10.*|14.*|9.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15|>=9,<10.0a0']; psi4 -> gau2grid -> vc[version='14.*|9.*|>=14,<15.0a0|>=14.1,<15|>=14.1,<15.0a0|>=14.2,<15|>=14.2,<15.0a0']; torsiondrive -> numpy[version='>=1.11,<2.0a0'] -> vc[version='10.*|14.*|9.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15']; geometric -> numpy[version='>=1.18,<2.0a0'] -> vc[version='10.*|14.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15|9.*|>=9,<10.0a0']; python=3.9 -> vc[version='>=14.1,<15|>=14.1,<15.0a0']; blas[build=*mkl] -> mkl -> vc[version='>=14.1,<15.0a0']; matplotlib -> vc[version='14.*|>=14.1,<15.0a0|9.*']. Package ca-certificates conflicts for:; qcengine -> python -> ca-certificates; matplotlib -> python[version='>=2.7,<2.8.0a0'] -> ca-certificates; geometric -> python -> ca-certificates; qcelemental -> python -> ca-certificates; python=3.9 -> openssl[version='>=3.0.7,<4.0a0'] -> ca-certificates. Package funcsigs conflicts for:; qcelemental -> pint -> funcsigs; psi4 -> pytest -> funcsigs[version='>=1.0']. Package typing-extensions conflicts for:; qcengine -> pydantic[version='>=1.8.2'] -> typing-extensions[version='>=3.7.4.3|>=4.1.0|>=4.2.0']; qcelemental -> pydantic[version='>=1.8.2'] -> typing-extensions[version='>=3.7.4.3|>=4.1.0|>=4.2.0']; matplotlib -> kiwisolver -> typing-extensions. Package qcelemental conflicts for:; psi4 -> qcelemental[version='0.25.0.*|0.25.1.*']; psi4 -> optking -> qcelemental[version='>=0.12.0|>=0.21.0|>=0.24.0,<0.26.0|>=0.24.0|>=0.23.0|>=0.7.0|>=0.6.0|>=0.4.2|>=0.3.3|>=0.3.*|>=0.2.6|>=0.2.2|>=0.2.1']; qcelemental; qcengine -> qcelemental[version='>=0.12.0|>=0.23.0|>=0.24.0|>=0.24.0,<0.26.0|>=0.7.0|>=0.6.0|>=0.4.2|>=0.3.3|>=0.3.*|>=0.2.6|>=0.2.2|>=0.2.1']. Package m2w64-gcc-libs conflicts for:; psi4 -> dftd3-python -> m2w64-gcc-libs; blas[build=*mkl] -> m2w64-gcc-libs. Package numpy-base conflicts for:; psi4 -> numpy -> numpy-base[versi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:8353,certificate,certificates,8353,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020,1,['certificate'],['certificates']
Security,".8238651Z def reraise(tp, value, tb=None):; 2018-12-06T18:15:06.8238835Z try:; 2018-12-06T18:15:06.8239065Z if value is None:; 2018-12-06T18:15:06.8239312Z value = tp(); 2018-12-06T18:15:06.8239526Z if value.__traceback__ is not tb:; 2018-12-06T18:15:06.8239861Z raise value.with_traceback(tb); 2018-12-06T18:15:06.8240255Z > raise value; 2018-12-06T18:15:06.8240643Z ; 2018-12-06T18:15:06.8240921Z C:\tools\miniconda3\lib\site-packages\six.py:693: ; 2018-12-06T18:15:06.8241733Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; 2018-12-06T18:15:06.8242195Z C:\tools\miniconda3\lib\site-packages\six.py:693: in reraise; 2018-12-06T18:15:06.8242519Z raise value; 2018-12-06T18:15:06.8243257Z C:\tools\miniconda3\lib\site-packages\six.py:693: in reraise; 2018-12-06T18:15:06.8243569Z raise value; 2018-12-06T18:15:06.8244186Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; 2018-12-06T18:15:06.8244400Z ; 2018-12-06T18:15:06.8244638Z def tear_down():; 2018-12-06T18:15:06.8245076Z import os; 2018-12-06T18:15:06.8245339Z import glob; 2018-12-06T18:15:06.8245555Z import psi4; 2018-12-06T18:15:06.8245794Z psi4.core.close_outfile(); 2018-12-06T18:15:06.8246104Z patterns = ['cavity.*', 'grid*', 'pytest_output.*h5',; 2018-12-06T18:15:06.8246380Z 'pytest_output.dat',; 2018-12-06T18:15:06.8246851Z '*pcmsolver.inp', 'PEDRA.OUT*', 'timer.dat']; 2018-12-06T18:15:06.8247099Z pytest_scratches = []; 2018-12-06T18:15:06.8247318Z for pat in patterns:; 2018-12-06T18:15:06.8247695Z pytest_scratches.extend(glob.glob(pat)); 2018-12-06T18:15:06.8247928Z for fl in pytest_scratches:; 2018-12-06T18:15:06.8248147Z > os.unlink(fl); 2018-12-06T18:15:06.8249031Z E PermissionError: [WinError 32] The process cannot access the file because it is being used by another process: 'pytest_output.dat'; 2018-12-06T18:15:06.8249336Z ; 2018-12-06T18:15:06.8249582Z ..\lib\psi4\tests\conftest.py:28: PermissionError; ```; So for now, they will run on core only!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-445000007:2340,access,access,2340,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-445000007,1,['access'],['access']
Security,".py. >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 5d87b55..6cbc05e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,6 +1,6 @@; -__version__ = '1.1a1'; -__version_long = '1.1a1+007a9b6'; -__version_upcoming_annotated_v_tag = '1.1a2'; +__version__ = '1.1rc1'; +__version_long = '1.1rc1+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.1rc2'. >>> git add psi4/metadata.py. >>> git commit -m ""v1.1rc1""; ```. * 3. **OBSERVE** Undefined version state. ```; >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-418-g6100822. >>> git describe --abbrev=7 --long --dirty; v1.1a1-418-g6100822. >>> psi4/versioner.py ; Undefining version for irreconcilable tags: 1.1a1 (computed) vs 1.1rc1 (recorded); undefined {master} 6100822 1.0.0.999 1.0 <-- undefined+6100822; ```. * Note 7-char git hash for the new commit, here ""6100822"". * 4. **ACTION** Bump tag in git. Bump git tag in code. * Use the decided-upon tag ""v1.1rc1"" and the observed hash ""6100822"" to mint a new *annotated* tag, minding that ""v""s are present here. * Use the observed hash to edit psi4/metadata.py and commit immediately. ```; >>> git tag -a v1.1rc1 6100822 -m ""v1.1rc1"". >>> vi psi4/metadata.py ; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 6cbc05e..fdc202e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,5 +1,5 @@; __version__ = '1.1rc1'; -__version_long = '1.1rc1+zzzzzzz'; +__version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> psi4/versioner.py ; Amazing, this can't actually happen that git hash stored at git commit.; >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.1rc1""; ```. * 5. **OBSERVE** Current versioning state. * Nothing to make note of, this is just a snapshot. ```; >>> psi4/versioner.py ; Defining development snapshot version: 1.1rc2.dev1+4e0596e (computed); 1.1rc2.dev1 {master} 4e0596e 1.0.0.999 1.0 <-- 1.1rc2.dev1+4e0596e. >>> git describe --abbrev=7 --long --always HEAD; v1.1r",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-292102715:5199,hash,hash,5199,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715,1,['hash'],['hash']
Security,"/CVS thing, IMHO. We were using Git for a very long time before making the public/private split and the core developers are extremely familiar with Git’s distributed nature. The old way of developing Psi was to have a private repo (which used to be CVS, then SVN, then Git/SVN, before switching completely to Git) and to only release static tarballs every now and then. Lori touched on the reason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them. The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date. These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, then we’re always open to suggestions. Andy. > On May 3, 2015, at 11:50 AM, Ryan Richard notifications@github.com wrote:; > ; > I think the short answer may be that a lot of the developers are still used; > to version control models like SVN or CVS.; > ; > Honestly I think you have the right idea though, with git there really; > isn't a need for two repositories for an open source code so long as we; > adopt the accompanying philosophy. It's now a matter of getting everyone; > on board.; > ; > Sent from my Android (without spellcheck). Plea",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/88#issuecomment-98498738:1027,access,access,1027,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98498738,1,['access'],['access']
Security,08 __init__.py; -rw-r--r--. 1 psilocaluser psilocaluser 1144 Nov 1 16:14 metadata.py; drwxrwxr-x. 2 psilocaluser psilocaluser 4096 Nov 1 16:14 __pycache__; drwxrwxr-x. 2 psilocaluser psilocaluser 4096 Nov 1 15:20 tests; ```; ```; (py311cf_L1) psilocaluser@bash:psinet:/psi/gits/hrw-v132/objdir_py311cf_L1: (1.3.x) stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat ; 	SCF energy........................................................PASSED; ```. Full conda env is this:. ```; (py311cf_L1) psilocaluser@bash:psinet:/psi/gits/hrw-v132/objdir_py311cf_L1: (1.3.x) conda list; # packages in environment at /psi/toolchainconda/envs/py311cf_L1:; #; # Name Version Build Channel; _libgcc_mutex 0.1 conda_forge conda-forge; _openmp_mutex 4.5 2_kmp_llvm conda-forge; binutils_impl_linux-64 2.39 h6ceecb4_0 conda-forge; binutils_linux-64 2.39 h5fc0e48_11 conda-forge; blas 2.116 mkl conda-forge; blas-devel 3.9.0 16_linux64_mkl conda-forge; bzip2 1.0.8 h7f98852_4 conda-forge; c-ares 1.18.1 h7f98852_0 conda-forge; ca-certificates 2022.9.24 ha878542_0 conda-forge; cmake 3.24.2 h5432695_0 conda-forge; deepdiff 6.2.1 pyhd8ed1ab_0 conda-forge; expat 2.5.0 h27087fc_0 conda-forge; gcc_impl_linux-64 12.2.0 hcc96c02_19 conda-forge; gcc_linux-64 12.2.0 h4798a0e_11 conda-forge; gxx_impl_linux-64 12.2.0 hcc96c02_19 conda-forge; gxx_linux-64 12.2.0 hb41e900_11 conda-forge; kernel-headers_linux-64 2.6.32 he073ed8_15 conda-forge; keyutils 1.6.1 h166bdaf_0 conda-forge; krb5 1.19.3 h08a2579_0 conda-forge; ld_impl_linux-64 2.39 hc81fddc_0 conda-forge; libblas 3.9.0 16_linux64_mkl conda-forge; libcblas 3.9.0 16_linux64_mkl conda-forge; libcurl 7.86.0 h2283fc2_0 conda-forge; libedit 3.1.20191231 he28a2e2_2 conda-forge; libev 4.33 h516909a_1 conda-forge; libffi 3.4.2 h7f98852_5 conda-forge; libgcc-devel_linux-64 12.2.0 h3b97bd3_19 conda-forge; libgcc-ng 12.2.0 h65d4601_19 conda-forge; libgfortran-ng 12.2.0 h69a702a_19 conda-forge; libgfortran5 12.2.0 h337968e_19 conda-forge; libgomp 12.2.0 h65d4601_19 conda-forge,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2656#issuecomment-1299103719:2418,certificate,certificates,2418,https://psicode.org,https://github.com/psi4/psi4/issues/2656#issuecomment-1299103719,1,['certificate'],['certificates']
Security,"1-alt (Failed); 	154 - dft3 (Failed); 	188 - mints9 (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	322 - cubeprop-esp (Failed); 	333 - dftd3-version (Failed); 	341 - mrcc-ccsdt (Failed); 	342 - mrcc-ccsd_t_ (Failed); 	343 - mrcc-ccsdt_q_ (Failed); 	344 - mrcc-optfreq (Failed); Errors while running CTest; ```. ##### Recc. TODO. * In main CM, change erd warning to ` message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, gradients will be caught and halted, but LRC DFT, ESP, and perhaps other types not tested and identified will give *wrong* answers. Consider this your warning."")`. * In `psi4/driver/driver.py`, apply patch below. ```; --- a/psi4/driver/driver.py; +++ b/psi4/driver/driver.py; @@ -82,6 +82,9 @@ def _find_derivative_type(ptype, method_name, user_dertype):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype; ; + if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; + raise ValidationError(""INTEGRAL_PACKAGE ERD does not play nicely with gradients, so stopping.""); +; # Summary validation; if (dertype == 2) and (method_name in procedures['hessian']):; pass; ```. * Running this yield the following list (30% failure rate).; ```; The following tests FAILED:; 	 12 - cbs-xtpl-freq (Failed); 	 13 - cbs-xtpl-gradient (Failed); 	 14 - cbs-xtpl-opt (Failed); 	 16 - cbs-xtpl-wrapper (Failed); 	 17 - cc1 (Failed); 	 21 - cc13 (Failed); 	 22 - cc13a (Failed); 	 23 - cc14 (Failed); 	 30 - cc21 (Failed); 	 32 - cc23 (Failed); 	 33 - cc24 (Failed); 	 34 - cc25 (Failed); 	 35 - cc26 (Failed); 	 36 - cc27 (Failed); 	 39 - cc3 (Failed); 	 78 - cepa0-grad1 (Failed); 	 79 - cepa0-grad2 (Failed); 	 95 - dcft-grad1 (Failed); 	 96 - dcft-grad2 (Failed); 	 97 - dcft-grad3 (Failed); 	 98 - dcft-grad4 (F",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-276884648:1570,Validat,ValidationError,1570,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648,1,['Validat'],['ValidationError']
Security,"1. The key phrase here is _would give us_. The capabilities aren't there yet. This is GauXC. I know this was a feature they desired, but I don't know how close it is to being complete. My guess is that things are, as always, not going as optimistically as they would like.; 2. Psi4 1.9.1 should not raise this error. You're saying that the input; ```; import psi4; psi4.set_options({'reference': 'uhf', 'stability_analysis': 'check', 'basis_guess': 'true'}); mol = psi4.geometry(""""""; symmetry c1; 0 3; O; """""");; psi4.energy('PBE/6-31G', molecule=mol); ```; gave you `psi4.driver.p4util.exceptions.ValidationError: Stability analysis not yet supported for XC functionals.`? Can you double-check and post the output file?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3236#issuecomment-2444511042:597,Validat,ValidationError,597,https://psicode.org,https://github.com/psi4/psi4/issues/3236#issuecomment-2444511042,1,['Validat'],['ValidationError']
Security,"1.) Thank you, I read it from a graduate student thesis I remember summarizing it with different levels of basis sets and theories but definitely needed some validation on that front. . 2.) Awesome I will give it a shot and check it out, let you know if I run into any problems. . 3.) `mode=(continuous|sow|reap))` ah I think I got confused on the parameter meant. I thought it was a way to single out individual modes. . This is great and moves me a long! Thank you!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2698#issuecomment-1226074577:158,validat,validation,158,https://psicode.org,https://github.com/psi4/psi4/issues/2698#issuecomment-1226074577,1,['validat'],['validation']
Security,"5d87b55..6cbc05e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,6 +1,6 @@; -__version__ = '1.1a1'; -__version_long = '1.1a1+007a9b6'; -__version_upcoming_annotated_v_tag = '1.1a2'; +__version__ = '1.1rc1'; +__version_long = '1.1rc1+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.1rc2'. >>> git add psi4/metadata.py. >>> git commit -m ""v1.1rc1""; ```. * 3. **OBSERVE** Undefined version state. ```; >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-418-g6100822. >>> git describe --abbrev=7 --long --dirty; v1.1a1-418-g6100822. >>> psi4/versioner.py ; Undefining version for irreconcilable tags: 1.1a1 (computed) vs 1.1rc1 (recorded); undefined {master} 6100822 1.0.0.999 1.0 <-- undefined+6100822; ```. * Note 7-char git hash for the new commit, here ""6100822"". * 4. **ACTION** Bump tag in git. Bump git tag in code. * Use the decided-upon tag ""v1.1rc1"" and the observed hash ""6100822"" to mint a new *annotated* tag, minding that ""v""s are present here. * Use the observed hash to edit psi4/metadata.py and commit immediately. ```; >>> git tag -a v1.1rc1 6100822 -m ""v1.1rc1"". >>> vi psi4/metadata.py ; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 6cbc05e..fdc202e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,5 +1,5 @@; __version__ = '1.1rc1'; -__version_long = '1.1rc1+zzzzzzz'; +__version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> psi4/versioner.py ; Amazing, this can't actually happen that git hash stored at git commit.; >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.1rc1""; ```. * 5. **OBSERVE** Current versioning state. * Nothing to make note of, this is just a snapshot. ```; >>> psi4/versioner.py ; Defining development snapshot version: 1.1rc2.dev1+4e0596e (computed); 1.1rc2.dev1 {master} 4e0596e 1.0.0.999 1.0 <-- 1.1rc2.dev1+4e0596e. >>> git describe --abbrev=7 --long --always HEAD; v1.1rc1-1-g4e0596e. >>> git describe --abbrev=7 --long --dirty; v1.1rc1-1-g4e0596",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-292102715:5300,hash,hash,5300,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715,1,['hash'],['hash']
Security,"6\lib\site-packages\psi4\tests\test_qcel_molparse_to_string.py:7: in <module>; from qcelemental.tests import test_molparse_to_string; <frozen importlib._bootstrap>:991: in _find_and_load; ???; <frozen importlib._bootstrap>:975: in _find_and_load_unlocked; ???; <frozen importlib._bootstrap>:671: in _load_unlocked; ???; psi4conda\envs\psi16\lib\site-packages\_pytest\assertion\rewrite.py:168: in exec_module; exec(co, module.__dict__); psi4conda\envs\psi16\lib\site-packages\qcelemental\tests\test_molparse_to_string.py:270: in <module>; ""subject1"": qcel.models.Molecule(; psi4conda\envs\psi16\lib\site-packages\qcelemental\models\molecule.py:294: in __init__; super().__init__(**kwargs); pydantic\main.py:341: in pydantic.main.BaseModel.__init__; ???; E pydantic.error_wrappers.ValidationError: 2 validation errors for Molecule; E connectivity -> 0; E '<' not supported between instances of 'tuple' and 'int' (type=type_error); E connectivity -> 1; E '<' not supported between instances of 'tuple' and 'int' (type=type_error); ================================================== warnings summary ===================================================; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:599; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:701; `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:698; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:699; `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542:3997,Validat,ValidationError,3997,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542,3,"['Validat', 'validat']","['ValidationError', 'validation']"
Security,82c59_0 conda-forge; aiosignal 1.3.1 pyhd8ed1ab_0 conda-forge; alembic 1.12.0 pyhd8ed1ab_0 conda-forge; ambertools 23.3 py39hdb62838_1 conda-forge; amberutils 21.0 pypi_0 pypi; appnope 0.1.2 py39h2804cbe_2 conda-forge; argon2-cffi 21.3.0 pyhd8ed1ab_0 conda-forge; argon2-cffi-bindings 21.2.0 py39h5161555_1 conda-forge; arpack 3.7.0 h58ebc17_2 conda-forge; arrow-cpp 11.0.0 hce30654_5_cpu conda-forge; asttokens 2.0.5 pyhd8ed1ab_0 conda-forge; astunparse 1.6.3 pyhd8ed1ab_0 conda-forge; async-timeout 4.0.3 pyhd8ed1ab_0 conda-forge; attrs 21.4.0 pyhd8ed1ab_0 conda-forge; aws-c-auth 0.6.24 he8f13b4_5 conda-forge; aws-c-cal 0.5.20 h9571af1_6 conda-forge; aws-c-common 0.8.11 h1a8c8d9_0 conda-forge; aws-c-compression 0.2.16 h7334ab6_3 conda-forge; aws-c-event-stream 0.2.18 ha663d55_6 conda-forge; aws-c-http 0.7.4 h49dec38_2 conda-forge; aws-c-io 0.13.17 h323b671_2 conda-forge; aws-c-mqtt 0.8.6 hdc0f556_6 conda-forge; aws-c-s3 0.2.4 hbb4c6b3_3 conda-forge; aws-c-sdkutils 0.1.7 h7334ab6_3 conda-forge; aws-checksums 0.1.14 h7334ab6_3 conda-forge; aws-crt-cpp 0.19.7 h6f6c549_7 conda-forge; aws-sdk-cpp 1.10.57 hbe10753_4 conda-forge; backcall 0.2.0 pyh9f0ad1d_0 conda-forge; backports 1.0 py_2 conda-forge; backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0 conda-forge; bcrypt 4.0.1 py39haff01fd_1 conda-forge; black 22.1.0 pyhd8ed1ab_0 conda-forge; bleach 4.1.0 pyhd8ed1ab_0 conda-forge; blosc 1.21.4 hc338f07_0 conda-forge; boost 1.78.0 py39h99de9ae_4 conda-forge; boost-cpp 1.78.0 h9ed8d21_3 conda-forge; brotli 1.0.9 h3422bc3_6 conda-forge; brotli-bin 1.0.9 h3422bc3_6 conda-forge; brotlipy 0.7.0 py39h5161555_1003 conda-forge; bson 0.5.9 py_0 conda-forge; bzip2 1.0.8 h3422bc3_4 conda-forge; c-ares 1.18.1 h3422bc3_0 conda-forge; c-blosc2 2.10.0 h068da5f_0 conda-forge; ca-certificates 2023.7.22 hf0a4a13_0 conda-forge; cached-property 1.5.2 hd8ed1ab_1 conda-forge; cached_property 1.5.2 pyha770c72_1 conda-forge; cachetools 5.3.0 pyhd8ed1ab_0 conda-forge; cairo 1.16.0 h1e71087_1016 conda-for,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306:1111,checksum,checksums,1111,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306,2,['checksum'],['checksums']
Security,"; 	341 - mrcc-ccsdt (Failed); 	342 - mrcc-ccsd_t_ (Failed); 	343 - mrcc-ccsdt_q_ (Failed); 	344 - mrcc-optfreq (Failed); Errors while running CTest; ```. ##### Recc. TODO. * In main CM, change erd warning to ` message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, gradients will be caught and halted, but LRC DFT, ESP, and perhaps other types not tested and identified will give *wrong* answers. Consider this your warning."")`. * In `psi4/driver/driver.py`, apply patch below. ```; --- a/psi4/driver/driver.py; +++ b/psi4/driver/driver.py; @@ -82,6 +82,9 @@ def _find_derivative_type(ptype, method_name, user_dertype):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype; ; + if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; + raise ValidationError(""INTEGRAL_PACKAGE ERD does not play nicely with gradients, so stopping.""); +; # Summary validation; if (dertype == 2) and (method_name in procedures['hessian']):; pass; ```. * Running this yield the following list (30% failure rate).; ```; The following tests FAILED:; 	 12 - cbs-xtpl-freq (Failed); 	 13 - cbs-xtpl-gradient (Failed); 	 14 - cbs-xtpl-opt (Failed); 	 16 - cbs-xtpl-wrapper (Failed); 	 17 - cc1 (Failed); 	 21 - cc13 (Failed); 	 22 - cc13a (Failed); 	 23 - cc14 (Failed); 	 30 - cc21 (Failed); 	 32 - cc23 (Failed); 	 33 - cc24 (Failed); 	 34 - cc25 (Failed); 	 35 - cc26 (Failed); 	 36 - cc27 (Failed); 	 39 - cc3 (Failed); 	 78 - cepa0-grad1 (Failed); 	 79 - cepa0-grad2 (Failed); 	 95 - dcft-grad1 (Failed); 	 96 - dcft-grad2 (Failed); 	 97 - dcft-grad3 (Failed); 	 98 - dcft-grad4 (Failed); 	103 - dcft5 (Failed); 	114 - dfccd-grad1 (Failed); 	117 - dfccsd-grad1 (Failed); 	122 - dfmp2-3 (Failed); 	124 - dfmp2-grad1 (Failed); 	125 - dfmp2-grad2 (Failed); 	126 - dfmp2-g",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-276884648:1768,Validat,ValidationError,1768,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648,1,['Validat'],['ValidationError']
Security,"; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.1 (#1896) ; - LGTM (#1905, #2038) ; - MP2/MP3 test suite (#1850, #1971) ; - Standardize CEPA and LCCD (#1909) ; - LCCD test suite (#1913, #1937) ; - Extensive improvements to DFGrad (#1915, #1923, #1953, #1974, #2049, #2079) ; - Expose cube-generating functions to python (#1917) ; - Fix cppe interface (#1922) ; - Move import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF deriv",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:2593,Expose,Expose,2593,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['Expose'],['Expose']
Security,"='9.*|>=14,<15.0a0|>=14.2,<15']; qcengine -> psutil -> vc[version='10.*|14.*|9.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15|>=9,<10.0a0']; qcelemental -> numpy[version='>=1.12.0'] -> vc[version='10.*|14.*|9.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15|>=9,<10.0a0']; psi4 -> gau2grid -> vc[version='14.*|9.*|>=14,<15.0a0|>=14.1,<15|>=14.1,<15.0a0|>=14.2,<15|>=14.2,<15.0a0']; torsiondrive -> numpy[version='>=1.11,<2.0a0'] -> vc[version='10.*|14.*|9.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15']; geometric -> numpy[version='>=1.18,<2.0a0'] -> vc[version='10.*|14.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15|9.*|>=9,<10.0a0']; python=3.9 -> vc[version='>=14.1,<15|>=14.1,<15.0a0']; blas[build=*mkl] -> mkl -> vc[version='>=14.1,<15.0a0']; matplotlib -> vc[version='14.*|>=14.1,<15.0a0|9.*']. Package ca-certificates conflicts for:; qcengine -> python -> ca-certificates; matplotlib -> python[version='>=2.7,<2.8.0a0'] -> ca-certificates; geometric -> python -> ca-certificates; qcelemental -> python -> ca-certificates; python=3.9 -> openssl[version='>=3.0.7,<4.0a0'] -> ca-certificates. Package funcsigs conflicts for:; qcelemental -> pint -> funcsigs; psi4 -> pytest -> funcsigs[version='>=1.0']. Package typing-extensions conflicts for:; qcengine -> pydantic[version='>=1.8.2'] -> typing-extensions[version='>=3.7.4.3|>=4.1.0|>=4.2.0']; qcelemental -> pydantic[version='>=1.8.2'] -> typing-extensions[version='>=3.7.4.3|>=4.1.0|>=4.2.0']; matplotlib -> kiwisolver -> typing-extensions. Package qcelemental conflicts for:; psi4 -> qcelemental[version='0.25.0.*|0.25.1.*']; psi4 -> optking -> qcelemental[version='>=0.12.0|>=0.21.0|>=0.24.0,<0.26.0|>=0.24.0|>=0.23.0|>=0.7.0|>=0.6.0|>=0.4.2|>=0.3.3|>=0.3.*|>=0.2.6|>=0.2.2|>=0.2.1']; qcelemental; qcengine -> qcelemental[version='>=0.12.0|>=0.23.0|>=0.24.0|>=0.24.0,<0.26.0|>=0.7.0|>=0.6.0|>=0.4.2|>=0.3.3|>=0.3.*|>=0.2.6|>=0.2.2|>=0.2.1']. Package m2w64-gcc-libs conflicts for:; psi4 -> dftd3-python -> m2w64-gcc-libs; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:8203,certificate,certificates,8203,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020,3,['certificate'],['certificates']
Security,"> 1. Libxc: This line https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfunctional/LibXCfunctional.cc#L38 > includes libxc/xc.h when libxc installs include/xc.h. Yes, I've been pushing for namespaced headers (point 2 of https://gitlab.com/libxc/libxc/issues/61). If we really must, Psi can do non-namespaced libxc, but haven't gotten much response either way from upstream. > 2. Libxc project doesn't install .cmake files that you rely on. Only cmake build installs .cmake files and cmake build is broken:; https://gitlab.com/libxc/libxc/issues/66; https://gitlab.com/libxc/libxc/issues/67; https://gitlab.com/libxc/libxc/issues/68. I've fixed the latter two of these in https://gitlab.com/libxc/libxc/merge_requests/113. Not sure what to do about the first -- I really wish they would namespace their headers. The greater Libxc problem is that even if the above two points were cleaned up, there is no upstream Libxc release that has ever worked with Psi4. The Libxc3 series didn't have cmake. Early Libxc4 changed the interface so that some features we needed weren't accessible. Current Libxc4 master has those features, but they're not available in a release. When the questions of https://gitlab.com/libxc/libxc/issues/61 are resolved, https://github.com/psi4/psi4/pull/1101 is ready. > Libint: Similarly to Libxc, Libint has problems in its cmake build and it can't be used evaleev/libint#111 evaleev/libint#112. Thanks for pinging me on these. I don't watch that repo.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-433085737:1078,access,accessible,1078,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-433085737,1,['access'],['accessible']
Security,"> ; > ; > I am still completely lost when I try to read `_validate_cbs_inputs`.; > ; > What I understand is that the user provides the energy call with metadata information in the form of either a structured dictionary or a string using special CBS syntax that is then converted into a structured dictionary. There's actually a third option - a legacy subset of keywords, such as `scf_wfn`, `corl_scheme`, etc. I agree, it's a mess, and someone should do something about it. . Basically, if it's a `method/basis` string, that gets parsed into a metadata dictionary in: ; https://github.com/psi4/psi4/blob/72dabe0a889b2026a27a70481c79a2e93164f1dc/psi4/driver/driver_cbs.py#L2513 . If the user passes in a set of `**kwargs`, those get parsed into a metadata dictionary in: ; https://github.com/psi4/psi4/blob/72dabe0a889b2026a27a70481c79a2e93164f1dc/psi4/driver/driver_cbs.py#L1486. Finally, if the user passes in `cbs_metadata` as an argument, this does not get parsed. Note that all three of those have to be ""validated""... > ; > What transformations are applied to that structured dictionary by the time it enters that input function, where is the specification for the input dictionary, and where is the specification for the output dictionary? I know that the input dictionaries are allowed to have a ""treatment"" field, but the output dictionaries are not, so they need to have different specifications. The only specification I see is in the ""Combined interface"" section of the `cbs` docstring. So we have a missing specification. So the user-facing portion (which is the only real spec) is defined in the ""combined interface"". The internal ""validated"" dictionary is in my view perfectly well documented here:; https://github.com/psi4/psi4/blob/72dabe0a889b2026a27a70481c79a2e93164f1dc/psi4/driver/driver_cbs.py#L1346-L1365 . I question whether the validated dictionary needs further specification, as it's not user facing. Note that the validator function is under-prefixed, so having a docstring",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-963235373:1010,validat,validated,1010,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-963235373,2,['validat'],['validated']
Security,"> ; > ; > Thanks for trying out psi4! If you're on windows, your conda install line is just right. If you're on linux or mac, you don't actually need the `-c conda-forge`, though it's harmless. Since you're installing from conda, the `psi4 --psiapi` is unnecessary --- activating the environment suffices.; > ; > I don't have much personal experience with tab help in jupyter, but `help(psi4.set_memory)` returns a sensible docstring for me in interactive python. What you describe does sound with `AttributeError` does sound wrong. If the in-jupyter help is giving you trouble, searching the generated API (https://psicode.org/psi4manual/master/psi4api.html) may work better. If you're new, perhaps check out the tutorials at https://psicode.org/psi4manual/master/index_tutorials.html . Thanks for replying! When I try the `help(psi4.set_memory` it says that there's no `set_memory` attribute. The cell with the `import psi4` runs ok, but it seems it cant access any attribute.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2329#issuecomment-947961590:957,access,access,957,https://psicode.org,https://github.com/psi4/psi4/issues/2329#issuecomment-947961590,1,['access'],['access']
Security,"> @tomspur Have you gotten a chance to look at my last comments or begun work on any of those changes? @robertodr and myself are prepared to complete the work needed to get this feature working as it would be a great step forward for improving the api of the CC codes. I had ineed a look into your comments and tried to understand the infrastructure around the global dpd... Unfortunately, It would be quite difficult for me to properly fix the above comments fully... > We could submit PRs to your working branch if you are able to merge, you could give us access to push directly to this branch, or a third option if you don't plan on working on this any further we could open a new PR (retaining the commits you have already authored of course) to complete the feature.; > ; > Please let us know how you would prefer we proceed, thanks!. I added you two directly access to push to my repository at tomspur/psi4release, so feel free to add anything you like there. Please let me know, how else I could help to move this feature forward.; I just rebased my branch against the current master and hope this helps to get this included",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1061#issuecomment-423988930:558,access,access,558,https://psicode.org,https://github.com/psi4/psi4/pull/1061#issuecomment-423988930,2,['access'],['access']
Security,"> After coding this all up, I'm inclined to remove the last access call. I'd definitely retain the access call with the symmetry of the transition. How about `TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 TRANSITION` to make the distinction to the ""legacy"" version more clear?. Even though `adcc` does not support point group symmetry, ping @mfherbst for another opinion on excited states 😄",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2462#issuecomment-1060884379:60,access,access,60,https://psicode.org,https://github.com/psi4/psi4/pull/2462#issuecomment-1060884379,4,['access'],['access']
Security,"> I can validate that pinning libint2 fixes this on our Cloud platform as well, I'll close this case.; Thanks again for addressing this so quickly!. Glad it's fixed. The Libint2 migration was bound to cause problems, so I'm glad you reported it. We started pinning psi4 conda packages to specific Libint2 builds earlier this year, so hopefully smoother future migrations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2593#issuecomment-1146376321:8,validat,validate,8,https://psicode.org,https://github.com/psi4/psi4/issues/2593#issuecomment-1146376321,1,['validat'],['validate']
Security,> I don't know how you can check the fingerprint for a repo. Probably not for github. Github downloads are fundamentally insecure as implemented by cmake. Documentation says that hash can be set for URL downloads though.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-344327124:179,hash,hash,179,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-344327124,1,['hash'],['hash']
Security,"> I don't know the DFT infrastructure at all, so can you give me a big picture overview of what this PR is doing? I know that DFT relies on numerical integration, and I know that a block contains numerical integration points, but I don't know what a block is used for. Instead of making a loop over all grid points that calculates basis function values and XC contributions one by one , the points are grouped together into blocks for efficiency reasons.; Currently there is no connection between a single grid point and the atom it originally belongs to. One block of points can even contain grid points from multiple atoms. This connection is lost immediately after the grid is constructed. Adding it back is a bit awkward and e.g. `remove_distant_points(extents_->maxR());` needs to be rewritten with the new data structure. This feature is needed for algorithms or methods that look at contributions from atoms when looping over the grid points. Right now, those new things are not needed, and thus not used anywhere, but they will be used for COSX and ddCOSMO. So you might want to access for a given atom all blocks of grid points, where a block has only grid points from that atom. This is what `atomic_blocks` provides. However that leads to a double-loop (see examples) and possibly worse parallelization. For a simple loop over all block, like what is used now, you want to know the atom to which the current block belongs (-> `parent_atom`) to collect values by atom. Two options the developers can chose from. This is part 1 to get it the basics out faster and allow COSX and ddCOSMO development to continue. cubature.cc still needs a big cleanup, but that has to wait.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2336#issuecomment-952307104:1087,access,access,1087,https://psicode.org,https://github.com/psi4/psi4/pull/2336#issuecomment-952307104,2,['access'],['access']
Security,"> I don't know what your background is, so I'm going to write this explanation at a level accessible for a first-year graduate student, though it will still be dense.; > ; > Many matrices in electronic structure theory are indexed by two orbitals. Each orbital will change in a different way under symmetry operations of the molecule (like rotation, reflection), and we call each classification an irreducible representation (irrep). Now, our matrices further have the property that A_mn = 0 unless the symmetries of m and n are somehow related. Our matrix then only needs to store ""blocks"" where for all orbitals m of irreducible representation h, the only non-zero elements of A are A_mn where n is an orbital of irreducible representation i.; > ; > Because we use this block structure, it isn't enough to make sure that the total dimensions of the matrix agree (what your code does). We need the dimensions of each symmetry block to agree on the three points mentioned in the original issue. This validation should be performed for each irreducible representation.; > ; > For reference, the code that Susi linked does the following:; > ; > ```; > for each irreducible representation of the first index of A, Ha:; > 	Hb is the irreducible representation of the first index of the B block that can multiply with the A block; > Hc is the irreducible representation of the first index of the new matrix (if we're multiplying by A, this is just Ha, otherwise this is the irreducible representation of the second index for the block with first index Ha); > 	m is the number of orbitals with the irreducible representation for the first index in this block of the new matrix; > 	n is the number of orbitals with the irreducible representation for the second index in this block of the new matrix; > 	k is the number of orbitals with the irreducible representation for the second index in this block of A, which is also the number of orbitals with the irreducible representation for the first index in this",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2729#issuecomment-1261945010:90,access,accessible,90,https://psicode.org,https://github.com/psi4/psi4/pull/2729#issuecomment-1261945010,2,['access'],['accessible']
Security,"> I may be not quite following the INSIST_FIND_PACKAGE reasoning. ENABLE_PkgName=ON/OFF turns it off completely. And I would like to control bundling. I want cmake to fail when external package isn't found. I am trying to create the FreeBSD port for psi4. Package build infrastructure is all automated, and is very rigorous. So if the package is chosen to be installed externally, there is no reason to even try to download it from github. It's besides the point here, but such downloads are also a security risk, because you don't check the downloaded file's fingerprints.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343778164:499,secur,security,499,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343778164,1,['secur'],['security']
Security,"> I'm fine with the PR as is. If you tidy up the BIND and TAGL dictionaries as Jonathon suggested above, even better. did the part with `TAGL`, not sure about `BIND` since assigned values should be unique per each entry. I would prefer to keep it in a declarative fashion, instead of cooking up some scary bind values array accessed by index.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2154#issuecomment-882792295:324,access,accessed,324,https://psicode.org,https://github.com/psi4/psi4/pull/2154#issuecomment-882792295,1,['access'],['accessed']
Security,"> I'm running through tests now to see if just... removing this entirely breaks anything. Short of `print_details` being accessible through some print settings, it doesn't appear that any of this is even exposed on the python side anyway?. Haha yes spaghetti code!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736#issuecomment-1268651045:121,access,accessible,121,https://psicode.org,https://github.com/psi4/psi4/pull/2736#issuecomment-1268651045,2,"['access', 'expose']","['accessible', 'exposed']"
Security,"> Independent of the options issues -- should something be patched/changed such that if the user/a program/etc passes a nonsense `num_frozen_docc`, the program gives a sensible error rather than segfaulting?. Yes. Lori's comment was ""trick you can use to prevent accidentally stumbling into this again,"" not a fix. `scf::HF::compute_fcpi` probably needs a validation check...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1193180818:356,validat,validation,356,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1193180818,1,['validat'],['validation']
Security,"> Is DSWAP deprecated upstream or is there another reason to prune it? I think part of the plan with the libqt exports was to provide a full blas/lapack interface, even if not everything got used by psi internally. That was before `np.linalg` and Eigen were around/prominent, so perhaps it's not so vital, but it's nice for downstream to know if psi is exporting the full set or as-needed.; > ; > fwiw, I've no strong opinion on `Matrix::swap_rows` and `Matrix::swap_columns`. There is no upstream deprecation for this one, so comments and discussion is welcome. I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698:602,expose,expose,602,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698,1,['expose'],['expose']
Security,"> LGTM, awesome python side testing!; > ; > Do we have a plan to add this keyword to globals so that Psi4 users can start accessing this screening?. Would adding a global, user-specified boolean (something like `CSAM_SCREENING`, default false) be the best way to do this? It could be accessed by the JK object, much like `INTS_TOLERANCE` already is",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1499#issuecomment-497102724:122,access,accessing,122,https://psicode.org,https://github.com/psi4/psi4/pull/1499#issuecomment-497102724,2,['access'],"['accessed', 'accessing']"
Security,"> Might as well. Do I make a PR to the attic repo, or is there some other procedure?. feel free to commit directly. lmk if you don't have write access -- it isn't much in demand.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2348#issuecomment-964408575:144,access,access,144,https://psicode.org,https://github.com/psi4/psi4/pull/2348#issuecomment-964408575,1,['access'],['access']
Security,"> Note that the SAD guess in Psi4 is not the best one possible, as it is not symmetry aware. Such a SAD guess is available in PySCF, and it is also directly accessible from Python.; > ; > I have planned to rectify the situation in Psi4 in the future, but I have some other projects to finish before that. thanks for this very useful pointer! I will then give `PySCF` a try. however, my main concern with `PySCF` is, after getting the SAD Guess from it, I have to reorder the rows and columns of the density matrix, so that it aligns with the ordering in `psi4` ? I believe these 2 programs do not have the same ordering (but I'm not certain). I need to do this as most of my workflow is centred in `psi4`, and a large amount of calculations of density matrices have already been done with `psi4`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2897#issuecomment-1467597056:157,access,accessible,157,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1467597056,1,['access'],['accessible']
Security,"> Of course, to run those tests one also needs to add the new kernels to the range-separated Fock builds and the libxc interface. I believe that is outside the scope of this PR, is there any way I can test for numerical correctness? (Possibly expose the functions to python and call a numpy function)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2386#issuecomment-997950016:243,expose,expose,243,https://psicode.org,https://github.com/psi4/psi4/pull/2386#issuecomment-997950016,1,['expose'],['expose']
Security,"> Ok, two different levels here:. First off, thank you very much for sharing some details on all of this!; ; > * v2rdm (and potentially other plugins or codes that link to psi4 (not that I know any in the latter case)) are using `ERISeive` c-side. They can do so b/c it's `PSI_API`d so the symbols are exposed in `psi4/core.*so`. These should be deprecated by `PSI_DEPRECATED`. If the plugin owner is compiling his plugin but never psi4 itself, he might still miss the notice, but at least we're giving such a fair chance. That make sense. I recently blanket-deprecated the `ERISieve` class with (the equivalent of) `PSI_DEPRECATED`. The issue I saw, was that using both `PSI_API` and `PSI_DEPRECATED` for the same class caused the compiler to complain, although using their textual equivalents seem to work fine. Hopefully, that settles the deprecation C-side. > * anyone could be using `ERISeive` py-side if it's exported by pb11. (And this has nothing to do with whether it's `PSI_API`d.) I think the way to deprecate those is to wrap the fns like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L1480-L1495. Also very good to know! This will be my next focus, then, since I don't have any wrapper functions for the ERISieve Python-side functions right now. I think I will switch this to a draft PR in the meantime, since it seems some more needs to be done on my end.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2935#issuecomment-1527992795:302,expose,exposed,302,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527992795,1,['expose'],['exposed']
Security,"> One thing that puzzles me right now is how to figure out center(s) involved in the MO indices in epsilon_a(). Core orbitals are delocalized between identical nuclei. To figure out which nuclei a core orbital corresponds to, you would have to have a suitable metric. This could be the square norm of the MO coefficient of predefined core functions. A more accessible way would be to first localize the orbitals, so that you get rid of the mixing between nuclei, and then it would be straightforward to calculate e.g. <r^2>. If you are asking how to do this by hand in a small system, and not in a general case, then that's pretty straightforward. Just look at the orbital coefficients. If you're using a contracted basis set, the contracted functions should be good approximations to the core orbitals. Thus, you should see a coefficient close to 1 in absolute value for the core function in the corresponding core orbital, if you only have one heavy atom. If you have more, then the amplitude will be divided among the nuclei.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311#issuecomment-436718038:357,access,accessible,357,https://psicode.org,https://github.com/psi4/psi4/issues/1311#issuecomment-436718038,1,['access'],['accessible']
Security,"> Per the last Psi4 call, I'd like to challenge you to think about how much of libcfmm could be factored out of Psi4. Many other codes might be interested in this functionality, too, if it can be made accessible through a simple API. I like your idea, but I think that is something to think about in the future because the rest of `libfmm` is currently entangled with Psi functionalities (like `IntegralFactory`).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2665#issuecomment-1208511310:201,access,accessible,201,https://psicode.org,https://github.com/psi4/psi4/pull/2665#issuecomment-1208511310,2,['access'],['accessible']
Security,"> Stupid question: what is actually the difference to the earlier code? It appears you have rewritten some of the Obara-Saika recursion routines..? Where do the speedups come from?. I did not rewrite any recursion routines (just removed `ObaraSaikaTwoCenterEFPRecursion`, which became obsolete since my recent PR #1657). However, the overhead of having to call `mints.electric_field` several hundred times in a row for each site is eliminated by the new implementation, since the coordinates are directly ""injected"" into the collection of the integrals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1671#issuecomment-505110154:506,inject,injected,506,https://psicode.org,https://github.com/psi4/psi4/pull/1671#issuecomment-505110154,1,['inject'],['injected']
Security,"> Thanks for switching the base from `1.3.x` to `master`. Unfortunately, it didn't go as cleanly as we need. The thing to do is on your clone, make sure you have `origin` and `upstream` remotes at `git remote -v`. Then checkout the upstream master branch, check that its hash matches the upstream psi4 master (that is, the hash next to ""Latest commit"" right off the https://github.com/psi4/psi4/ page). Then checkout a new branch, e.g., `git checkout -b libpsioexport`. Then apply your one commit, `git cherry-pick 9788333289e4c48d57a9bf7e453fb8855fbc8ae9`. Then push that new branch to the branch associated with this PR. It will have to be force-pushed b/c overwriting history, `git push origin libpsioexport:psi4-dev --force`. Then this PR should have only one commit in it, yours, and be with respect to the development, master branch. Done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1821#issuecomment-592557057:271,hash,hash,271,https://psicode.org,https://github.com/psi4/psi4/pull/1821#issuecomment-592557057,2,['hash'],['hash']
Security,"> Thanks for taking this on Andy! It will be very useful to have IBOs outside of the FSAPT code.; > ; > I imagine a lot of psi4 users will want to export and visualize local orbitals. For this reason, we definitely want the IBOLocalizer exposed py-side as well, same as the other two localizers. See `export_mints.cc`; > ; > Something else we should think about (other devs please chime in) is how the various derived `Localizer` classes can be modified to have as similar method signatures as possible. The `BoysLocalizer` and `PMLocalizer` have a `void`-type `localize()` function and accessors `L()` and `U()`. The `IBOLocalizer` class has no accessors and instead returns a map of info from the `localize` function. I'm not sure which of these designs I prefer, but I think the three derived classes should at least be consistent.; > ; > Lastly, I noticed that there aren't really any tests or docs on the various localizers (except for class autodocs). It would be super nice if we could get one or both of those. Hey Zach and all, I just updated the code to conform to the convention of the other localizers. I split the old multi-argument `localize` function in `IBOLocalizer` into the `localize` and `update_fock` methods inherited from the Localizer base class.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2385#issuecomment-1013779467:237,expose,exposed,237,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-1013779467,3,"['access', 'expose']","['accessors', 'exposed']"
Security,"> The BoysLocalizer and PMLocalizer have a void-type localize() function and accessors L() and U(). The IBOLocalizer class has no accessors and instead returns a map of info from the localize function. I'm not sure which of these designs I prefer, but I think the three derived classes should at least be consistent. Agree. Consistency is crucial and within the PR scope. I think the accessors design is more common in psi4 but other than that I have no strong opinion on either choice.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2385#issuecomment-998184973:77,access,accessors,77,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-998184973,3,['access'],['accessors']
Security,"> The below line still does an assert within the threaded code. I don't think that hurts any, just pointing out it's still there in case you wanted to remove it. It's already constrained, so I think it's harmless and can remain as a hint for refactoring. My guess is that that file would be helped by separate validation and work steps as many of the functions have defensive checks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2082#issuecomment-764697017:310,validat,validation,310,https://psicode.org,https://github.com/psi4/psi4/pull/2082#issuecomment-764697017,1,['validat'],['validation']
Security,"> The internal ""validated"" dictionary is in my view perfectly well documented here:; > ; > https://github.com/psi4/psi4/blob/72dabe0a889b2026a27a70481c79a2e93164f1dc/psi4/driver/driver_cbs.py#L1346-L1365. So, just to be clear, that applies for every stage in the entire dict? I thought that only applied to DFT stages because you mentioned it in Sec. 2a). > > Furthermore, if that function is only responsible for validating (like the name says), then why is it returning a completely new dictionary that isn't following the same specification? I suspect the function name is incorrect and the docstring is incomplete.; > ; > This is because of `""method/basis""` and `**kwargs` pathways, which have to be lined up somewhere. I thought rather than splitting the validation logic into the separate functions above, it's simpler to interpret both of these branches as an incomplete `cbs_metadata` which then needs to be validated anyway. Then I stand by my comment that the function name and docstring are incomplete in the current version. Neither mentions that the dict needs to be completed (and needs to lose at least one field).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-963289886:16,validat,validated,16,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-963289886,8,['validat'],"['validated', 'validating', 'validation']"
Security,"> The other files are split based on the components. I guess we could in theory split the complete XC functionals exposed by libxc into the other categories, but this way they are all kept together and can be updated easier. So I guess if you want a hybrid, you have to check two files (as opposed to several), which is not that terrible. Yes, and hybrid metas one might look for in three files. Without merging all into one file, I agree the present organization is reasonable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-764396454:114,expose,exposed,114,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-764396454,1,['expose'],['exposed']
Security,"> There is no upstream deprecation for this one, so comments and discussion is welcome. gtk, thanks. > I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. Quite right, I think it was for downstream C++ plugins that the full export set was intended. Python exports (relatively newfangled c. 2016) have been as-needed. > The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. Agree on the daunting. In the same category as the libqt exports are the CMake LAPACK detection and testing with other LAPACK distributions. Right now, I'm hardwiring the psi4 conda-forge recipe to MKL, but it'd be nice in future to relax that to normal usage (compile against a generic interface, then allow runtime selection of distribution) if we could do so with assurance (last time OpenBLAS was tried, we had threading oversubscription for SAPT iirc). > I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672:142,expose,expose,142,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672,1,['expose'],['expose']
Security,"> This looks great! Access to the amplitudes of cclambda would be great as well :). Is this solved, can we obtain amplitudes from cclambda as well?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1344#issuecomment-1744631107:20,Access,Access,20,https://psicode.org,https://github.com/psi4/psi4/pull/1344#issuecomment-1744631107,1,['Access'],['Access']
Security,"> Two comments about lines that weren't changed:; > ; > [psi4/psi4/driver/driver_cbs.py](https://github.com/psi4/psi4/blob/a658c8e50e6d5d7bde2b8058b33e78f98f800db3/psi4/driver/driver_cbs.py#L1910-L1912); > ; > Lines 1910 to 1912 in [a658c8e](/psi4/psi4/commit/a658c8e50e6d5d7bde2b8058b33e78f98f800db3); > # Drop out for props and freqs ; > if ptype in [""properties"", ""frequency""]: ; > raise ValidationError(""%s: Cannot extrapolate or delta correct %s yet."" % (ptype.title(), ptype)) ; > ; > We shouldn't be dropping out for frequencies anymore. Fair point. I changed the raw 'frequency' function too, to be a true wrapper around 'hessian', that code is just a left-over. Changed. > [psi4/psi4/driver/driver_cbs.py](https://github.com/psi4/psi4/blob/a658c8e50e6d5d7bde2b8058b33e78f98f800db3/psi4/driver/driver_cbs.py#L1940-L1944); > ; > Lines 1940 to 1944 in [a658c8e](/psi4/psi4/commit/a658c8e50e6d5d7bde2b8058b33e78f98f800db3); > if len(method_list) > 1: ; > cbs_kwargs['delta_wfn'] = method_list[1] ; > cbs_kwargs['delta_basis'] = basis_list[1] ; > if 'delta_scheme' in kwargs: ; > cbs_kwargs['delta_scheme'] = kwargs['delta_scheme'] ; > ; > It would be good to put a comment here explicitly saying that `_parse_cbs_gufunc_string` should enforce that `len(method_list)` can only be 1 or 2. The logic confused me for a few minutes, on first read. I'll edit the docs. The idea is that one usually only specifies one ""delta correction"" in a string, ie:; ```; mp2/cc-pv[tq]z+D:ccsd(t)/cc-pvtz; ```; as opposed to trying to do two delta corrections in a ""method/basis"" syntax (which is not supported):; ```; hf/cc-pv[q5]z+D:mp2/cc-pv[tq]z+D2:ccsd(t)/cc-pvtz; ```; Folks that want to pile on the deltas can use the old interface (with scf, corl, delta and delta2 stages) or the cbs_metadata interface, which doesn't have a limit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1235#issuecomment-426364793:391,Validat,ValidationError,391,https://psicode.org,https://github.com/psi4/psi4/pull/1235#issuecomment-426364793,1,['Validat'],['ValidationError']
Security,> What is the other possible error during Psi-internal adcc build? 😬. Something libtensor related that I have not investigated further:; ```; copying adcc/visualisation/Spectrum.py -> build/lib.linux-x86_64-3.10/adcc/visualisation; running build_ext; building 'libadcc' extension; creating build/temp.linux-x86_64-3.10; creating build/temp.linux-x86_64-3.10/libadcc; creating build/temp.linux-x86_64-3.10/libadcc/MoSpaces; creating build/temp.linux-x86_64-3.10/libadcc/TensorImpl; creating build/temp.linux-x86_64-3.10/libadcc/guess; creating build/temp.linux-x86_64-3.10/libadcc/pyiface; x86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/include/python3.10 -c libadcc/AdcMemory.cc -o build/temp.linux-x86_64-3.10/libadcc/AdcMemory.o -Wall -Wextra -Werror -O3 -isystem /home/tgy/.local/include; libadcc/AdcMemory.cc:26:10: fatal error: libtensor/core/allocator.h: No such file or directory; 26 | #include <libtensor/core/allocator.h>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~; compilation terminated.; error: command '/usr/bin/x86_64-linux-gnu-gcc' failed with exit code 1; make[2]: *** [external/downstream/adcc/CMakeFiles/adcc_external.dir/build.make:86: external/downstream/adcc/adcc_external-prefix/src/adcc_external-stamp/adcc_external-build] Error 1; make[1]: *** [CMakeFiles/Makefile2:11798: external/downstream/adcc/CMakeFiles/adcc_external.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs....; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2785#issuecomment-1322477930:726,secur,security,726,https://psicode.org,https://github.com/psi4/psi4/pull/2785#issuecomment-1322477930,2,['secur'],['security']
Security,> Which version of numpy do you use. I use the 1.20.3. same.; ```; conda list; # packages in environment at /home/psilocaluser/toolchainconda/envs/py39b:; #; # Name Version Build Channel; _libgcc_mutex 0.1 main ; _openmp_mutex 4.5 1_gnu ; apipkg 1.5 py39h06a4308_0 ; appdirs 1.4.4 py_0 ; argon2-cffi 20.1.0 py39h27cfd23_1 ; async_generator 1.10 pyhd3eb1b0_0 ; attrs 20.3.0 pyhd3eb1b0_0 ; backcall 0.2.0 pyhd3eb1b0_0 ; binutils_impl_linux-64 2.33.1 he6710b0_7 ; binutils_linux-64 2.33.1 h9595d00_15 ; black 21.4b2 pyhd8ed1ab_0 conda-forge; blas 1.0 mkl ; bleach 3.3.0 pyhd3eb1b0_0 ; boost 1.73.0 py39h06a4308_11 ; bzip2 1.0.8 h7b6447c_0 ; ca-certificates 2021.7.5 h06a4308_1 ; certifi 2021.5.30 py39h06a4308_0 ; cffi 1.14.5 py39h261ae71_0 ; click 7.1.2 pyhd3eb1b0_0 ; cmake 3.19.6 h973ab73_0 ; dataclasses 0.8 pyhc8e2a94_1 conda-forge; dbus 1.13.18 hb2f20db_0 ; decorator 4.4.2 pyhd3eb1b0_0 ; defusedxml 0.7.1 pyhd3eb1b0_0 ; dftd3 3.2.1 h84218bc_2 psi4/label/dev; dftd4 v3.3.0 py39h1d74c00_0 psi4/label/dev; dkh 1.2 h173d85e_2 psi4/label/dev; eigen 3.3.7 hfd86e86_0 ; entrypoints 0.3 py39h06a4308_0 ; execnet 1.8.0 pyhd3eb1b0_0 ; expat 2.2.10 he6710b0_2 ; fontconfig 2.13.1 h6c09931_0 ; freetype 2.10.4 h5ab3b9f_0 ; gau2grid 2.0.7 hd18ef5c_0 psi4/label/dev; gcc_impl_linux-64 7.3.0 habb00fd_1 ; gcc_linux-64 7.3.0 h553295d_15 ; gcp 2.0.2 he991be0_2 psi4/label/dev; gdma 2.2.6 h0e1e685_6 psi4/label/dev; geometric 0.9.7.2 py_0 conda-forge; gfortran_impl_linux-64 7.3.0 hdf63c60_1 ; gfortran_linux-64 7.3.0 h553295d_15 ; glib 2.68.2 h36276a3_0 ; gmp 6.2.1 h2531618_2 ; gst-plugins-base 1.14.0 h8213a91_2 ; gstreamer 1.14.0 h28cd5cc_2 ; gxx_impl_linux-64 7.3.0 hdf63c60_1 ; gxx_linux-64 7.3.0 h553295d_15 ; hdf5 1.10.6 hb1b8bf9_0 ; icu 58.2 he6710b0_3 ; importlib-metadata 3.7.3 py39h06a4308_1 ; importlib_metadata 3.7.3 hd3eb1b0_1 ; importlib_resources 5.1.2 py39h06a4308_1 ; iniconfig 1.1.1 pyhd3eb1b0_0 ; intel-openmp 2021.3.0 h06a4308_3350 ; ipykernel 5.3.4 py39hb070fc8_0 ; ipython 7.22.0 py39hb070fc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2281#issuecomment-902415127:641,certificate,certificates,641,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902415127,1,['certificate'],['certificates']
Security,"> error: process exited with status -1 (cannot attach to process due to System Integrity Protection); > (lldb). Are you using the system python? I have SIP disabled but I would not be surprised if you can't attach the debugger to an executable that falls under that protection. . To disable SIP you need to reboot into recovery mode, then reboot again for it to take effect.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/491#issuecomment-258535598:79,Integrity,Integrity,79,https://psicode.org,https://github.com/psi4/psi4/issues/491#issuecomment-258535598,1,['Integrity'],['Integrity']
Security,"> please post `conda list`, `psi4 --version`, and a full input file. If it's just the pairwise analysis, there was [dftd3/simple-dftd3#35](https://github.com/dftd3/simple-dftd3/issues/35) . I'd have to see your versions to gauge susceptibility. packages in environment at /home/gang/psi4conda:; #; # Name Version Build Channel; _libgcc_mutex 0.1 main ; _openmp_mutex 5.1 1_gnu ; ambit 0.6 py39h53dec33_2 psi4; attrs 22.1.0 py39h06a4308_0 ; blas 1.0 mkl ; brotlipy 0.7.0 py39h27cfd23_1003 ; ca-certificates 2022.10.11 h06a4308_0 ; certifi 2022.9.24 py39h06a4308_0 ; cffi 1.15.1 py39h5eee18b_3 ; charset-normalizer 2.0.4 pyhd3eb1b0_0 ; chemps2 1.8.11 hbe8a562_0 psi4; conda 22.11.1 py39h06a4308_4 ; conda-package-handling 1.9.0 py39h5eee18b_1 ; cryptography 38.0.1 py39h9ce1e76_0 ; dftd3 3.2.1 h84218bc_2 psi4; dftd4 v3.3.0 py39h758d17c_2 psi4; dkh 1.2 h173d85e_2 psi4; flit-core 3.6.0 pyhd3eb1b0_0 ; fockci 0.2.0 pyh681c21d_0 psi4; gau2grid 2.0.7 hd18ef5c_0 psi4; gcp 2.0.2 he991be0_2 psi4; gdma 2.2.6 h0e1e685_6 psi4; hdf5 1.10.6 hb1b8bf9_0 ; idna 3.4 py39h06a4308_0 ; importlib-metadata 4.11.3 py39h06a4308_0 ; importlib_metadata 4.11.3 hd3eb1b0_0 ; importlib_resources 5.2.0 pyhd3eb1b0_1 ; iniconfig 1.1.1 pyhd3eb1b0_0 ; intel-openmp 2021.4.0 h06a4308_3561 ; ld_impl_linux-64 2.38 h1181459_1 ; libecpint 1.0.7 hfebba4c_0 psi4; libefp 1.5.0 h117b10a_4 psi4; libffi 3.4.2 h6a678d5_6 ; libgcc-ng 11.2.0 h1234567_1 ; libgfortran-ng 7.5.0 ha8ba4b0_17 ; libgfortran4 7.5.0 ha8ba4b0_17 ; libgomp 11.2.0 h1234567_1 ; libint2 2.7.1 h2fe1556_15 psi4; libstdcxx-ng 11.2.0 h1234567_1 ; libxc 5.2.3 hfebba4c_0 psi4; mkl 2021.4.0 h06a4308_640 ; mkl-service 2.4.0 py39h7f8727e_0 ; mkl_fft 1.3.1 py39hd3c417c_0 ; mkl_random 1.2.2 py39h51133e4_0 ; mp2d 1.1.0 hfd86e86_0 psi4; msgpack-python 1.0.3 py39hd09550d_0 ; ncurses 6.3 h5eee18b_3 ; networkx 2.8.4 py39h06a4308_0 ; numpy 1.20.0 pypi_0 pypi; openssl 1.1.1s h7f8727e_0 ; optking 0.2.1 pyhbc12335_1 psi4; packaging 21.3 pyhd3eb1b0_0 ; pcmsolver 1.2.1.1 py39h92d4a",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2914#issuecomment-1489094028:493,certificate,certificates,493,https://psicode.org,https://github.com/psi4/psi4/issues/2914#issuecomment-1489094028,2,['certificate'],['certificates']
Security,">>> git describe --abbrev=7 --long --dirty; v1.1a1-418-g6100822. >>> psi4/versioner.py ; Undefining version for irreconcilable tags: 1.1a1 (computed) vs 1.1rc1 (recorded); undefined {master} 6100822 1.0.0.999 1.0 <-- undefined+6100822; ```. * Note 7-char git hash for the new commit, here ""6100822"". * 4. **ACTION** Bump tag in git. Bump git tag in code. * Use the decided-upon tag ""v1.1rc1"" and the observed hash ""6100822"" to mint a new *annotated* tag, minding that ""v""s are present here. * Use the observed hash to edit psi4/metadata.py and commit immediately. ```; >>> git tag -a v1.1rc1 6100822 -m ""v1.1rc1"". >>> vi psi4/metadata.py ; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 6cbc05e..fdc202e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,5 +1,5 @@; __version__ = '1.1rc1'; -__version_long = '1.1rc1+zzzzzzz'; +__version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> psi4/versioner.py ; Amazing, this can't actually happen that git hash stored at git commit.; >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.1rc1""; ```. * 5. **OBSERVE** Current versioning state. * Nothing to make note of, this is just a snapshot. ```; >>> psi4/versioner.py ; Defining development snapshot version: 1.1rc2.dev1+4e0596e (computed); 1.1rc2.dev1 {master} 4e0596e 1.0.0.999 1.0 <-- 1.1rc2.dev1+4e0596e. >>> git describe --abbrev=7 --long --always HEAD; v1.1rc1-1-g4e0596e. >>> git describe --abbrev=7 --long --dirty; v1.1rc1-1-g4e0596e. >>> git tag; v1.0; v1.1a1; v1.1rc1. >>> cat psi4/metadata.py ; __version__ = '1.1rc1'; __version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> cat metadata.out.py | head -8; __version__ = '1.1rc2.dev1'; __version_branch_name = 'master'; __version_cmake = '1.0.0.999'; __version_is_clean = 'True'; __version_last_release = '1.0'; __version_long = '1.1rc2.dev1+4e0596e'; __version_prerelease = 'False'; __version_release = 'False'. >>> git log --oneline; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-292102715:5802,hash,hash,5802,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715,1,['hash'],['hash']
Security,">It would be nice for the users to have a memory estimate and check at some point.; Unless adcc does the checking itself. I agree, but so far we do not have this feature in adcc and we don't check. If you run low on memory adcc will more or less just fail. It's a little tricky to estimate that beforehand in adcc due to the lazy import and computational nature of adcc, importing things only as needed. I could be very crude and come up with something rough for the workflows exposed to psi4, but I'd rather think about this more properly and do it at a later point, unless you think it's a major blocker.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-553307162:477,expose,exposed,477,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-553307162,1,['expose'],['exposed']
Security,"@CDSherrill I was under the impression that psio was going to be completely removed, but if the plan is to replace the internals and keep psio around as the abstraction layer then there is no need for DPD to implement one. However we do need DPD to insulate its user. Since the DPD instances rely on files being open/closed externally any other code using any DPD instance that does not properly ensure files are managed will leave all DPD instances in an invalid state. This is especially important for exposing amplitude access py side since in theory those accessor methods could be called at any point after a handle to the ccwfn is obtained. I guess what I really meant by that point wasn't that something needs to go in between DPD <-> PSIO, rather that DPD shouldn't be passing responsibility over management of an implementation detail on to it's users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247#issuecomment-423279853:523,access,access,523,https://psicode.org,https://github.com/psi4/psi4/issues/1247#issuecomment-423279853,2,['access'],"['access', 'accessor']"
Security,"@amjames You can probably get around the constness of the `Da` attribute. Or easier, if slightly annoying, you can use the Wavefunction `set_array(""OPDM"", opdm_)` function which will set the Matrix which can then be accessed Python side through `get_array(""OPDM"")` and then use numpy functions to to set it back to Da. ``` python; opdm = ...; ref_wfn = ..; for h in range(nirrep):; ref_wfn.Da().nph[h][:] = opdm.nph[h][:]; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-258902901:216,access,accessed,216,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-258902901,1,['access'],['accessed']
Security,"@amjames, to my knowledge there is not yet a detailed plan about I/O ... your comments gave me an excuse to bring up the topic prior to our next developers' meeting. What you're saying about DPD makes sense to me... the users of DPD shouldn't have to worry about opening/closing files themselves, DPD should handle these details for them. I didn't realize or remember that it didn't already handle this. ________________________________; From: Andrew James <notifications@github.com>; Sent: Thursday, September 20, 2018 2:07:40 PM; To: psi4/psi4; Cc: Sherrill, David; Mention; Subject: Re: [psi4/psi4] Coupled Cluster Rewrite (#1247). @CDSherrill<https://github.com/CDSherrill> I was under the impression that psio was going to be completely removed, but if the plan is to replace the internals and keep psio around as the abstraction layer then there is no need for DPD to implement one. However we do need DPD to insulate its user. Since the DPD instances rely on files being open/closed externally any other code using any DPD instance that does not properly ensure files are managed will leave all DPD instances in an invalid state. This is especially important for exposing amplitude access py side since in theory those accessor methods could be called at any point after a handle to the ccwfn is obtained. I guess what I really meant by that point wasn't that something needs to go in between DPD <-> PSIO, rather that DPD shouldn't be passing responsibility over management of an implementation detail on to it's users. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/psi4/psi4/issues/1247#issuecomment-423279853>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AC9QdoFCG1HVF9-VktlmDeetttgktmX6ks5uc9lsgaJpZM4WyQ3->.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247#issuecomment-423305918:1189,access,access,1189,https://psicode.org,https://github.com/psi4/psi4/issues/1247#issuecomment-423305918,2,['access'],"['access', 'accessor']"
Security,@andysim Try now. I can understand where they are coming from on the security side. There are not too many layers between log printing and security tokens. Very powerful tool however.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/449#issuecomment-235131408:69,secur,security,69,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235131408,2,['secur'],['security']
Security,@bozkaya What is the commit hash for the version of Psi4 that you have?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/491#issuecomment-258466734:28,hash,hash,28,https://psicode.org,https://github.com/psi4/psi4/issues/491#issuecomment-258466734,1,['hash'],['hash']
Security,"@bozkaya, I've just rebased and force-pushed to remove a conflict, so this branch should be good to go for whenever you care to proceed. Let me know if you have any problems accessing it. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1390#issuecomment-443764684:174,access,accessing,174,https://psicode.org,https://github.com/psi4/psi4/pull/1390#issuecomment-443764684,1,['access'],['accessing']
Security,"@dgasmith ; - I don't understand what difference the PID makes in terms of a read command; ~~~~.py; set{; READ ""some_file_with_no_PID.input""; READ ""some_file_generated_from_process.1234""; }; #later...; file2open=options.get_str(""READ""); f=open(file2open,'r'); ~~~~; - I think the key point is that any solution has to be accessible both in C++ and in Python thus wrapped one way or the other in Pybind11. I personally think the common API for streams in C++ makes it easier, but it makes no difference if it's written in Python just as long as all calls go through it. ; - If the Python libraries you speak of are outside of Psi4 then in an ideal world they would allow you to specify the file they are going to write to. If they don't provide such services, Psi4 needs to intervene or ensure that the library isn't called under MPI. If these libraries aren't providing core features then it is unlikely that they will interfere with MPI operation and they can be ignored.; - I'm currently running the test suite to ensure my changes to `get_writer_file_prefix` didn't break anything. It now appends the PID to the string it was going to return anyways. Once it passes I'll make a new PR for that change and submit it. @loriab ensuring only one MPI process writes is probably a loosing battle unless you rework the infrastructure to be more like Pulsar. People likely bypass you. It think the best bet is to keep the files unique and to do it with a function like `get_writer_file_prefix` or a similar class/library. For the situation you highlighted I think `get_writer_file_prefix` will suffice. I think `get_writer_file_prefix` will work in practice as long as everyone uses it. Moving towards HPC applications I think files really should only be used for long term storage or when something doesn't fit in RAM, not for interfacing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/548#issuecomment-266893399:321,access,accessible,321,https://psicode.org,https://github.com/psi4/psi4/issues/548#issuecomment-266893399,1,['access'],['accessible']
Security,@dgasmith I have fixed VMFC gradients and added three long tests to validate the computation of nbody gradients.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1042#issuecomment-433243666:68,validat,validate,68,https://psicode.org,https://github.com/psi4/psi4/pull/1042#issuecomment-433243666,1,['validat'],['validate']
Security,"@dgasmith I just gave you access. Sorry, I was on vacation for the last two weeks without laptop access.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/520#issuecomment-264890664:26,access,access,26,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-264890664,2,['access'],['access']
Security,@dgasmith I think right now returning the dimer SCF wavefunction is fine. It gives the user easy access to it in case more computations are required. If there are other requests from users/developers in the future we could consider it.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/259#issuecomment-184963064:97,access,access,97,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-184963064,1,['access'],['access']
Security,@dgasmith Just that I understand correctly. You suggest to:; - Develop a standalone `psi42adcc` python plugin for Psi4 with `adcc` as a dependency in the `setup.py`. In this all the mapping psi4 <-> adcc happens.; - Inside its `__init__.py` inject a `run_adcc_adc` method under unique method keys such as `adcc-adc(2)` into the proc mapping.; - Expose calculation results via the `wfn` using dynamic attributes. That sounds very doable for the first pass :),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547902896:241,inject,inject,241,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547902896,2,"['Expose', 'inject']","['Expose', 'inject']"
Security,"@dgasmith Would you prefer I sub out all `core.set_variable(...)` with `wfn.set_variable(...)` or just ensure that all variables set are also bound to the wavefunction? I've was about to commit the latter as I've just got that working properly, but I'm not sure how important it is to keep access to the psivars w/ `P::e`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/952#issuecomment-380454214:290,access,access,290,https://psicode.org,https://github.com/psi4/psi4/pull/952#issuecomment-380454214,1,['access'],['access']
Security,"@dgasmith, is just the Ne test enough? I don't have ORCA, but I have access to G09.D01 (SOGGA, SOGGA11-X, M06-L, MN12-L) and a colleague of mine has G16 (MN15, MN15-L and PBE0-DH), that should be good enough.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/904#issuecomment-362349573:69,access,access,69,https://psicode.org,https://github.com/psi4/psi4/pull/904#issuecomment-362349573,1,['access'],['access']
Security,"@dgasmith, it works with `LLVM` (#1264) and the sanitizers cannot find anything. I think, this is a `MSVC` bug or something similar.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1238#issuecomment-425941121:48,sanitiz,sanitizers,48,https://psicode.org,https://github.com/psi4/psi4/pull/1238#issuecomment-425941121,1,['sanitiz'],['sanitizers']
Security,"@edeprince3, if you had already pushed those enum fixes to the v2rdm/master, then sorry for my message – having them publicly accessible was all I wanted. Though if that's the complete fix, it's nice to have the 0.6 tag anyways. @robertodr, thanks for moving the import. Hopefully that clears everything up. I don't recognize that symbol error you posted, but things like that usually come from multiple lapack. I have encountered a `undefined symbol: for_realloc_lhs` issue with v2rdm that comes about from too old MKL (e.g., 2016) having got into the compile/link chain.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-355376217:126,access,accessible,126,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355376217,2,['access'],['accessible']
Security,@fevangelista psi4/psi4@c8b3767e76e4e76c54dec2004b961025fac1afa6 hopefully fixes your troubles. @loriab I do not unfortunately know what's the procedure for the private/public sync (I might not even be authorized to do it),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-171104138:202,authoriz,authorized,202,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171104138,1,['authoriz'],['authorized']
Security,"@j3mdamas, just an update, don't close this issue. The saga of input parsing for a 2-language program that works with several QC programs ranging from monolithic to flexible (users can actually access the stage between the language handover in psi) that pcmsolver contends with continues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-356771661:194,access,access,194,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356771661,1,['access'],['access']
Security,@kannon92 Can you give me access to your repository so I can clean up the last few details?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/520#issuecomment-264881934:26,access,access,26,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-264881934,1,['access'],['access']
Security,"@lazaroid , I saw the forum post, and it's extremely helpful. My suspicion is that this is being caused by the injection of an optimisation that uses an instruction only available on the offending processors. I'm fine with rounding the result but, just for my own edification, I'd like to experiment with some `#pragma optimize` blocks to see if my suspicion is correct. This should be a fairly simple test, now that you've done all of the hard work of figuring out exactly what's wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/678#issuecomment-292635303:111,inject,injection,111,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-292635303,2,['inject'],['injection']
Security,"@loriab . Yes, *MSVC* is not very sophisticated in this matter. For our distributed computing project, we will just build a separate *Psi4* for each instruction set (SSE2, AVX, AXV2). For a public distribution, I don't know a better solution. Ideally, it could be rebuild with the Intel compiler, but I don't access to it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411690608:309,access,access,309,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411690608,1,['access'],['access']
Security,"@loriab I can confirm that I have your version working with a5Z on Bridges. I suspect your branch is in a state of flux, but I'll point out that I had to do a few tweaks to get it to work. For example I had to make `psi4_main.a` a shared library so that I could access the Python bindings (and change it's name to `psi4.so`, otherwise Python claims it doesn't have an `__init__` function because Boost defines it for a module called psi4). There were a few places where the old libint and libderiv targets were still being used, which led to link errors like `no -lderiv` and `no -lint`. Also the `psi4config` file needs updated to reflect these changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-241027531:262,access,access,262,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241027531,1,['access'],['access']
Security,"@loriab I did. I guess you don't encounter the error because you are not using `$PSIPATH`, see http://www.psicode.org/psi4manual/master/external.html#envvar-PSIPATH. (I'm using this to reproduce the situation of a user who wants to use a custom basis set file on a system-wide PSI4 installation to which he/she does not have write access.) It seems that basis set files in `$PSIPATH` are somehow handled differently. These are my corresponding files:. ```; head $PSIPATH/ano-rcc.gbs; cartesian. !----------------------------------------------------------------------; ! Basis Set Exchange; ! Version v0.7.0; ! https://www.basissetexchange.org; !----------------------------------------------------------------------; ! Basis set: ANO-RCC; ! Description: Full ANO-RCC basis; ! Role: orbital; ```. ```. -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.4a1.dev101 . Git: Rev {master} 302cd1d dirty. R. M. Parrish, L. A. Burns, D. G. A. Smith, A. C. Simmonett,; A. E. DePrince III, E. G. Hohenstein, U. Bozkaya, A. Yu. Sokolov,; R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). Additional Contributions by; P. Kraus, H. Kruse, M. H. Lechner, M. C. Schieber, R. A. Shaw,; A. Alenaizan, R. Galvelis, Z. L. Glick, S. Lehtola, and J. P. Misiewicz. -----------------------------------------------------------------------. Psi4 started on: Monday, 29 April 2019 07:36PM. Process ID: 6146; Host: molmod00.ugent.be; PSIDATADIR: /home/toon/miniconda3/envs/p4dev/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; H;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807:331,access,access,331,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807,1,['access'],['access']
Security,@loriab somewhere between difficult and impossible due to the remote access policy here :(,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-405016692:69,access,access,69,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-405016692,1,['access'],['access']
Security,"@matt-chan Regarding the note in the documentation, I think it would be best to leave the comments on the arguments alone, and in the general description of file4/file2 init we can add a line to the end. . `Note: if label is found in the TOC for FILENUM the data in that file-entry read in/overwritten by subsequent functions using this buffer. If label is not found in the TOC for FILENUM . If @lothian is fine with that, and you think it would help, I think that is enough to help people out. I wouldn't want to confuse the issue further by putting notes about files in `buf4_init`, or suggesting that the cache system is somehow involved. Regarding your question: First, could you show me where that contradiction is in CCENERGY?; Second, to clarify the file-number, label combination is enough to specify the quantity you want to retrieve, with the important caveat that you (the programmer) also know *everything* that has been done with that file-entry up to the point where your code is using it. Which may include the file it lives in being having been wiped clean (if it was a temporary file, for example). Also a side note:; > … which data is returned by buf4_init and friends .. I will reiterate that `buf4_init()` does not return any data. It may be if the quantity is stored in cache, and after you `buf4_init()` you can access the data in `dpdbuf4->matrix` but that is not something you can rely on since setting `cachelevel = 0` in the input file would mean code relying on something staying in cache will break. You need to have calls to the appropriate matrix initialization/reading functions as well. This is not obvious at first glance at libdpd since the commonly used `contractXYZ` and other similar functions are doing a lot on the inside inside.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267239879:1334,access,access,1334,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267239879,1,['access'],['access']
Security,"@medvedev-m, /tmp is just fine when it's big enough. Often, default Linux/Unix installations have only a limited amount of space available in /tmp. The singlet B atom computation you had crash is actually very small and doesn't require much space, so I think your /tmp must have been filled by some of your earlier computations that crashed. Many quantum chemistry programs, including Psi4, leave some of their temporary files around if they crash, so you have to delete them up to avoid filling the directory. Anything in /tmp should be automatically removed by the operating system, eventually, but I don't know how often that happens --- they might not be cleaned up that quickly. NFS-attached disks are very slow and you should never use them as scratch disks in a quantum chemistry computation. Otherwise, you'll cripple the network with all the data you're sending over it, people will have trouble accessing their files, and your system administrator will be very unhappy with you. So if /tmp is a problem and if NFS-attached disks are a problem, what do you do? Anyone running serious quantum chemistry computations (beyond tiny molecules with cheap methods) normally takes special steps to set up their computer such that is has one or more large hard drives in it that can be used for the temporary files (""scratch space""). For very large computations, it is advisable to get 2-3 hard drives and stripe them together in a ""RAID0"" configuration for maximum speed. It's good to have several hundreds of gibabytes available, at least, and for really big computations it's good to have a terabyte or more. . You might be able to get by using /tmp if you keep it cleaned of any files from crashed calculations, and if you're lucky it might be big enough for some decent computations if they're not too large. Ramdisks are great if your computations are quite small so that they will fit. David",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170252262:905,access,accessing,905,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170252262,1,['access'],['accessing']
Security,"@mzott When you use the python side molden driver passing `density_a` or `density_b`it will generate molden files for the natural orbitals, the occupancies of the NOs will be determined at the same time as the natural orbitals are computed (via diagonalization of the provided density matrices). When densitites aren't provided the molden driver is going to generate a file with the canonical molecular orbitals and take the occupations from the `occupation_a/b` functions. In both cases the same method you mention in write.cc is used to write the data to file. The method and the class it belongs to are exposed python side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/699#issuecomment-300684695:606,expose,exposed,606,https://psicode.org,https://github.com/psi4/psi4/pull/699#issuecomment-300684695,1,['expose'],['exposed']
Security,"@raimis Yes, either the `pytest` command you show or `make pytest` will do. Right now you're only running the smoke pytests (which admittedly for a long time were all there were) https://github.com/psi4/psi4/blob/master/psi4/extras.py#L158 . It'd be good to run them all. I probably ought to make a `psi4 --fulltests` for yet another mode of access. If you'd prefer that, I can do that quickly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-444546373:342,access,access,342,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-444546373,1,['access'],['access']
Security,"@tomspur Have you gotten a chance to look at my last comments or begun work on any of those changes? @robertodr and myself are prepared to complete the work needed to get this feature working as it would be a great step forward for improving the api of the CC codes. . We could submit PRs to your working branch if you are able to merge, you could give us access to push directly to this branch, or a third option if you don't plan on working on this any further we could open a new PR (retaining the commits you have already authored of course) to complete the feature. . Please let us know how you would prefer we proceed, thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1061#issuecomment-422007222:356,access,access,356,https://psicode.org,https://github.com/psi4/psi4/pull/1061#issuecomment-422007222,1,['access'],['access']
Security,"@tzyii, good to know. but I'll need `conda list`, `ldd --version`, `which conda python psi4`, `cat /proc/cpuinfo | grep flags`, OS info, and `ldd -v CONDA_PREFIX/lib/pyth.../site-packages/psi4/core.so` to have any real hope of diagnosing. Or login access.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-405825074:248,access,access,248,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-405825074,1,['access'],['access']
Security,"@wadejong, the trick is that some of our codes can't handle symmetry, so; frequently users ask for C1 even though they really don't mean it, due to; parts of the code being C1 only (although maybe some recent code I added; fixes this?). Most of these users will want the symmetric solution because; it tends to be more free of unphysical values for properties like; vibrational frequencies. The situation is analogous to running a closed shell molecule with UHF. It; will always give the RHF solution, not a UHF solution, unless the user; intervenes and deliberately breaks the alpha / beta symmetry that is; naturally there. Some programs have special keywords to do this. Or do; you automatically mix alpha and beta in NWChem when a user asks for UHF on; a closed shell molecule?. On Dec 5, 2017 7:52 PM, ""Bert de Jong"" <notifications@github.com> wrote:. Communicating with Daniel, the challenge is that the solver somehow was; sticking to a symmetry solution inherent in the molecule, this while a no; symmetry solution was requested. I would expect a symmetry broken solution; if I tell the calculation to assume a symmetry lower than possible; (assuming there is a lower energy solution in the symmetry broken case). > On Dec 5, 2017, at 4:46 PM, Lori A. Burns <notifications@github.com>; wrote:; >; > FYI, @wadejong. Are you more concerned with accessing the symmetry-broken; sol'n (perhaps through geometry tweaks or stability analysis) or with it; being the default sol'n?; >; > —; > You are receiving this because you were mentioned. > Reply to this email directly, view it on GitHub, or mute the thread.; >. —; You are receiving this because you commented. Reply to this email directly, view it on GitHub; <https://github.com/psi4/psi4/issues/875#issuecomment-349492637>, or mute; the thread; <https://github.com/notifications/unsubscribe-auth/AC9Qdkqkvy84OvbrJRm6E6z73AM6ZWBXks5s9eU_gaJpZM4Q25IB>; .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349516046:1351,access,accessing,1351,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349516046,1,['access'],['accessing']
Security,"@wpoely86 Please do a fresh full, the opt10 and sapt4 failures should be resolved. For pubchem you can try running the following python script:. ``` python; from urllib2 import urlopen; print urlopen('http://pubchem.ncbi.nlm.nih.gov/pug/pug.cgi', """").read(); ```. If you can access your server you should see some xml containing the following line:; `<PCT-Status-Message_messages_E>Status: input-error.`. If you bounce off your firewall you will likely see something along the lines of `URLError: <urlopen error [Errno 11004] getaddrinfo failed>`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-185192172:275,access,access,275,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-185192172,2,"['access', 'firewall']","['access', 'firewall']"
Security,"@zachglick Nice job! Are you still working on this? How difficult would it be to wire it up with the Python interface, to expose PNOs and integrals in Python?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2093#issuecomment-863471591:122,expose,expose,122,https://psicode.org,https://github.com/psi4/psi4/pull/2093#issuecomment-863471591,1,['expose'],['expose']
Security,"A couple of options: 1) use [find_executable()]( https://docs.python.org/3.5/distutils/apiref.html#module-distutils.spawn) to figure it out or 2) have CMake inject the python executable path that it detected, using something like [configure_file](https://cmake.org/cmake/help/latest/command/configure_file.html).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1709#issuecomment-526620503:157,inject,inject,157,https://psicode.org,https://github.com/psi4/psi4/pull/1709#issuecomment-526620503,1,['inject'],['inject']
Security,"Aaah, great work! If it's fortran direct access, rather than DPD, that should hopefully be easy to cure with some `close` statements in the plugin 🤞",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2009#issuecomment-696742600:41,access,access,41,https://psicode.org,https://github.com/psi4/psi4/issues/2009#issuecomment-696742600,1,['access'],['access']
Security,"Actually, as defined above, the M11 dictionary should raise a validation error, see section 2b of `check_consistency()`...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802#issuecomment-383216051:62,validat,validation,62,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383216051,1,['validat'],['validation']
Security,"Add a new method in `share/python/procedures/proc_table.py:172` that links to a function in `share/python/procedures/proc_table.py:1710` (line number approximate) that should mimic `run_scf_gradient` right above that line. Make sure to raise a Validation error for non-RHF and DFT references for now. The Hessian should then run assuming some untested code works as expected. For frequencies: when we use finite difference Hessians its easy to assign different frequencies to different symmetries, without that it becomes much more difficult. You can guess which frequency applies to which frequency, but you cannot be certain in some cases. @loriab Do you remember the conclusion of this? I think we might have to insert our new thermo module for this. @bwb314 Hows the NumPy thermo module coming?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-230648867:244,Validat,Validation,244,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230648867,1,['Validat'],['Validation']
Security,"After #953 and py-side molecule parsing, this magnesium returns `ValidationError: First line must be Cartesian or single atom.`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/731#issuecomment-410339120:65,Validat,ValidationError,65,https://psicode.org,https://github.com/psi4/psi4/issues/731#issuecomment-410339120,1,['Validat'],['ValidationError']
Security,"After the changes in #2254, the input fails with; ```. psi4.driver.qcdb.exceptions.ValidationError: Gaussian94BasisSetParser::parse: Unable to match an exponent with one contraction: line 4: 1 3.386500000000E+01 2.549380000000E-02. Printing out the relevant lines from the Psithon --> Python processed input file:; """"""; return basstrings; qcdb.libmintsbasisset.basishorde['ANONYMOUSF8B47625'] = basisspec_psi4_yo__anonymousf8b47625; core.set_global_option(""BASIS"", ""anonymousf8b47625""); core.set_global_option(""STABILITY_ANALYSIS"", ""check""); --> energy('scf'). !----------------------------------------------------------------------------------!; ! !; ! Gaussian94BasisSetParser::parse: Unable to match an exponent with one !; ! contraction: line 4: 1 3.386500000000E+01 2.549380000000E-02 !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2253#issuecomment-882953081:83,Validat,ValidationError,83,https://psicode.org,https://github.com/psi4/psi4/issues/2253#issuecomment-882953081,1,['Validat'],['ValidationError']
Security,"Ah wonderful! Yes, `sup.set_vv10_b()` is what I was looking for. I also (finally) found [api/psi4.core.SuperFunctional](http://www.psicode.org/psi4manual/master/api/psi4.core.SuperFunctional.html); for a good overview what is accessible. DFT-NL (nl=non-local) is just like DFT-D, where the _b_ parameter of the VV10 kernel is fitted to an arbitrary functional. Ideally I would like to add an automatic detection similar to the -D dashparam in superfuncs.py to an eventual PR.; Though I am wondering if it is a good idea to piggy-back on the -D part and extent it to -NL or to make something separate. It would make sense to add the non-local dispersion to the 'empirical' dispersion. This is mostly a design choice, i suppose. Thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/870#issuecomment-348128880:226,access,accessible,226,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-348128880,1,['access'],['accessible']
Security,"Ah, NumPy issue. Needs a rebuild after Psi4 1.3.2 release since NumPy fixed a security bug and broke quite a few downstream repos. You can try downgraded NumPy by one patch version.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-492354867:78,secur,security,78,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-492354867,1,['secur'],['security']
Security,"Aha, that makes perfect sense -- none of the Psi4 developers have access to BrianQC anymore. Lmk if the fix in #3186 isn't what you were suggesting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3185#issuecomment-2179692899:66,access,access,66,https://psicode.org,https://github.com/psi4/psi4/issues/3185#issuecomment-2179692899,1,['access'],['access']
Security,"All comments addressed. Unfortunately, I need to filter out renamed methods before any checks of the derivative type, since that raises a validation error if the method is invalid. Hence I need to catch the error in multiple branches of `gradient`. Isn't recursive driver wonderful?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1719#issuecomment-534816591:138,validat,validation,138,https://psicode.org,https://github.com/psi4/psi4/pull/1719#issuecomment-534816591,1,['validat'],['validation']
Security,"All right, I believe all outstanding issues up to this point have been resolved! As of recent, all checks and queries based on GauXC's AM (e.g., L2 cross-validation) are now conducted at runtime instead of compile-time, GauXC GPU memory allocation is user-controllable, and the build system is set up to propogate `CMAKE_CUDA_ARCHITECTURES` to GauXC in a reasonable fashion. Current issues in CI seem to revolve around problems with finding a suitable `basis_set_exchange` package to use for configuration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150#issuecomment-2105124429:154,validat,validation,154,https://psicode.org,https://github.com/psi4/psi4/pull/3150#issuecomment-2105124429,1,['validat'],['validation']
Security,"Also, regarding cache types, LOW is only the default for `ccenergy`, because it's the only code for which I built statistics on how frequently specific data were accessed. Otherwise, LRU is used for all other CC codes. The docs are misleading on this point.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1246019734:162,access,accessed,162,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1246019734,1,['access'],['accessed']
Security,"Also; ```; mol = psi4.core.Molecule.from_arrays([0, 0, -0.01, 0, 0, 0.01], elez=[2,2]); activate(mol); set basis ugbs; energy('scf'); ```; fails with; ```; qcelemental.exceptions.ValidationError: Following atoms are too close: [(0, 1, 0.0)]; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1843#issuecomment-595613132:179,Validat,ValidationError,179,https://psicode.org,https://github.com/psi4/psi4/pull/1843#issuecomment-595613132,1,['Validat'],['ValidationError']
Security,"As a note to everyone working on this, please push and pull to this branch. Let me know if you do not have access and give us a heads up before rebasing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349#issuecomment-437981646:107,access,access,107,https://psicode.org,https://github.com/psi4/psi4/pull/1349#issuecomment-437981646,1,['access'],['access']
Security,"As a note: not all CC tests are tested through Perl. Actually looking at the output has caught a few bugs so far, although it does require someone intimately familiar with the tests to do so. I would be happy if we could get eyes on every test, but if it doesn’t happen its not a big deal. > On Apr 3, 2016, at 8:59 PM, Andy Simmonett notifications@github.com wrote:; > ; > Sorry for the delay. The DCFT tests look good to me. I think we can also check of the CC tests; if I remember correctly, those tests are actually validated by comparing the output to the reference using a separate Perl script. If the tests run successfully, it means that the output is present and correct, or Perl wouldn't be able to parse it.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/pull/315#issuecomment-205091286",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315#issuecomment-205094545:520,validat,validated,520,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205094545,1,['validat'],['validated']
Security,"At the moment there is no publicly accessible MPI routines in Psi4 (they are coming soon) so using MPI is superfluous. Boost MPI will be a requirement in the future when MPI is selected. That being said, it should have automatically compiled for you when the remainder of Boost was compiled. I would simply recommend removing the `--mpi` flag and recompiling (I strongly suggest blowing away your build directory).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201#issuecomment-169689686:35,access,accessible,35,https://psicode.org,https://github.com/psi4/psi4/issues/201#issuecomment-169689686,2,['access'],['accessible']
Security,Because I wanted to access certain variants I did some work towards this on a local branch.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1835#issuecomment-815586442:20,access,access,20,https://psicode.org,https://github.com/psi4/psi4/issues/1835#issuecomment-815586442,1,['access'],['access']
Security,"Building from ToT in conda at home, I can confirm that `initialize_lebedev` in fact is never called... it's optimized straight out of the code! (I couldn't find anywhere where it got called, so I am not surprised). ```; (base) liz@Gaston:~/Development/psi4/objdir/stage/tests$ nm ../lib/psi4/core.cpython-38-x86_64-linux-gnu.so | grep lebedev; 00000000020dbe80 b _ZN3psi13SphericalGrid16lebedev_mapping_E; ```. Doing the same breakpoint tests using the line-numbers in ToT cubature.cc, I can also see that `initialize_lebedev` is never called, and `lebedev_mapping_` ends up with no entries in it when it's first accessed. Will work on a patch now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735#issuecomment-1267804371:613,access,accessed,613,https://psicode.org,https://github.com/psi4/psi4/issues/2735#issuecomment-1267804371,1,['access'],['accessed']
Security,"By finite-difference test, I mean ""there is some property that we can compute either by finite difference of energies or by contracting appropriately defined densities against derivative integrals,"" e.g., geometry gradients and dipoles. By checking that both routes predict the same result, we can be much more confident that the densities are correctly implemented. (I recall a sign error in the CASPT2 gradients of another package. This error went uncaught for decades because the impact on calculations was relatively small.). I don't know if this is an option for transition densities. I'm not sure if EOM-CC transition properties are defined by some variational criteria, some variational criteria but neglecting orbital relaxation, or something else altogether. EDIT: The '93 Stanton and Bartlett paper explicitly says orbital relaxation is neglected, so I imagine the finite difference test is not an option. I'm not sure if there's some other technique to validate the correctness of the transition densities, other than matching other code. I know ""matching other code"" is done in the test suite.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2541#issuecomment-1094528284:964,validat,validate,964,https://psicode.org,https://github.com/psi4/psi4/pull/2541#issuecomment-1094528284,1,['validat'],['validate']
Security,"By the way, @ajmisquitta, I noticed you have a fork of psi4 from last summer. In October we re-wrote our git history to reduce the repository size by 90%. This makes pre-history-rewrite and post-history-rewrite repositories unreconcilable. If this is the source you are compiling from and you want to continue with psi4 1.0 era code, stick with your repository. Likewise if you have local development associated with your psi4 fork. Otherwise, I strongly recommend deleting your repository and re-forking. This will give you access to 1.1 era code and can interact with the main psi4/psi4 repo. (It will cut off access to building 1.0.) There's some significant build changes with 1.1, but a lot of [good features](https://github.com/psi4/psi4/issues/485), too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/626#issuecomment-281235825:525,access,access,525,https://psicode.org,https://github.com/psi4/psi4/issues/626#issuecomment-281235825,2,['access'],['access']
Security,"By the way, C++ folks, @bennybp , @jturney , @ryanmrichard , what/how strong are your feelings towards installing headers behind namespaces?. Consider an external project that (1) have only one or two public headers, (2) aren't likely to be conflicting header names (e.g., `efp.h`, `pcmsolver.h`, `PCMInput.h`), and (3) don't already install behind project directory like `include/libefp/` and `include/PCMSolver/`. Do you feel strongly enough about namespaces to forcibly insert a project directory (possibly with a CMake option so that headers installed default way _or_ Psi4 way)?. In cases where there is a project directory under includes, do you favor (1) `-I/path/to/outer/install/includes` and `#include <project/project_header.h>` or (2) `-I/path/to/inner/install/includes/project` and `#include <project_header.h>`?. I think I favor not injecting a project library when the header structure is simple and option (1) on the second question.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239211359:847,inject,injecting,847,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239211359,2,['inject'],['injecting']
Security,"By the way, I've managed to modify the checker to also run the code style validation on Python using YAPF. [Here is an example](https://github.com/PCMSolver/danger-python-example/pull/1) I'll integrate that too as soon as the modifications to the checker make it upstream.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/809#issuecomment-334001557:74,validat,validation,74,https://psicode.org,https://github.com/psi4/psi4/pull/809#issuecomment-334001557,1,['validat'],['validation']
Security,"CSD(T)/cc-pVDZ: **memDF FAILED** (diskDF passed all); ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3907, in run_fnodfcc; set_cholesky_from('CC_TYPE'); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3897, in set_cholesky_from; raise ValidationError("" FNOCC requires SCF_TYPE = DISK_DF""); ; ValidationError: FNOCC requires SCF_TYPE = DISK_DF; ```; 7. DFOCC (OMP2/cc-pVDZ): **memDF FAILED** (diskDF passed all); ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 40, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 227, in select_omp2; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1558, in run_dfocc; type_val = set_cholesky_from('MP2_TYPE'); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/pro",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:8044,Validat,ValidationError,8044,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,2,['Validat'],['ValidationError']
Security,"Can the average github user create a handful of private projects and then; invite certain collaborators to have access? If so, then I think this; would suffice as a replacement for the centralized private repo. David. On Fri, Oct 28, 2016 at 3:36 PM, jgonthier notifications@github.com wrote:. > @loriab https://github.com/loriab: Killing it off is fine with me. My; > only concern was the ability to work on a private project, but Github; > allows us to create our own private copy of the repository (through; > duplication, I believe). So if that's right, there is no reason to get; > through the hassle of maintaining private for everyone.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/468#issuecomment-257009273, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdld-VE3iH81lv7sYM5MwAR5wk2oWks5q4k6lgaJpZM4KA_tt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-257019349:112,access,access,112,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-257019349,1,['access'],['access']
Security,"Can you grant me write access to your fork of PCMSolver?; 1. I already use the OpenMP Autocmake module, just not its latest version, which I will update.; 2. Testing for Python 3 support will be easier starting from your current version than the mess I currently have on my development branch... :disappointed: . The Travis and Distelli builds are not building PCMSolver, neither are they running the `pcmsolver` tests in Psi4. Am I missing something here?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/599#issuecomment-276601209:23,access,access,23,https://psicode.org,https://github.com/psi4/psi4/pull/599#issuecomment-276601209,1,['access'],['access']
Security,"Changing the nuclear charge is the easiest thing to do. But it makes me; nervous because now the nuclear charge is not really the nuclear charge,; and others who are not ""in the know"" could fail to take account of this; when accessing the nuclear charge. On Apr 19, 2017 8:58 PM, ""fevangelista"" <notifications@github.com> wrote:. > @andysim <https://github.com/andysim>: I am super excited about this; > code! I was wondering if you could answer a few questions so that I can; > start to think about how to write the interface with forte. How do you; > handle the reduced number of electrons? Do you redefine the atomic charge; > (Z) or just subtract the number of core electrons? Is this info available; > from Wavefunction? Let us know if we can be of any help!; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/681#issuecomment-295521147>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QducGsSjAdZ3Wa5g8-sa46HZa75tbks5rxq3MgaJpZM4NCEGk>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/681#issuecomment-295524802:225,access,accessing,225,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295524802,1,['access'],['accessing']
Security,"Classes are hidden by default because when we expose a class as `PSI_API`, changing that class affects plugin developers, so we need to add warnings before we actually make the changes. And that takes time. So we can expose a class if it's useful, but we're not going to expose a class by default. Could you elaborate on what your usecase is for this particular class? Before exposing the class, I'd like to make sure you really do need this class instead of something else in the `libmints` machinery. I believe that some pieces moved around during our recent upgrade to libint2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2239#issuecomment-876569214:46,expose,expose,46,https://psicode.org,https://github.com/psi4/psi4/issues/2239#issuecomment-876569214,3,['expose'],['expose']
Security,"Closed by 649401c066ca7a871ba623a9ee3b9909c85ee730 . This is an incomplete fix because it catches only psi4 headers. Properly, psi4 dependency and add-on headers (e.g., Boost and Ambit) when built internally through `ExternalProject_Add` should also be installed alongside to be accessed by plugins. But that problem will be resolved in @ryanmrichard's revamped build system, and since, in the meantime, (1) conda binary plugins _can_ access all needed headers (since I have more control there) and (2) now compile+install plugins can at least access basis headers, I'm closing this out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/410#issuecomment-227006245:279,access,accessed,279,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-227006245,3,['access'],"['access', 'accessed']"
Security,"Communicating with Daniel, the challenge is that the solver somehow was sticking to a symmetry solution inherent in the molecule, this while a no symmetry solution was requested. I would expect a symmetry broken solution if I tell the calculation to assume a symmetry lower than possible (assuming there is a lower energy solution in the symmetry broken case). > On Dec 5, 2017, at 4:46 PM, Lori A. Burns <notifications@github.com> wrote:; > ; > FYI, @wadejong. Are you more concerned with accessing the symmetry-broken sol'n (perhaps through geometry tweaks or stability analysis) or with it being the default sol'n?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349492637:490,access,accessing,490,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349492637,1,['access'],['accessing']
Security,"Correct, I need to symmetrize individual intermediates in the gradient expression that get printed. Now that you mention it, I think moving more of the driver portion of DFOCC Py-side is the way to go. All I'd need to move is `dfgrad.cc` into `proc.py:run_dfocc_gradient`. `proc.py:run_dfocc_gradient` has access to the input molecule, so it can `symmetrize_gradient` correctly. Does this sound good? It may need to be its own PR, separate from the 1143 fix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1504#issuecomment-459074235:306,access,access,306,https://psicode.org,https://github.com/psi4/psi4/issues/1504#issuecomment-459074235,1,['access'],['access']
Security,"Couldn't see anything obviously wrong on first pass through. I wonder if the EXTERN stuff is best handled by having a C++ class that's exposed using pybind11, so that it can be constructed py-side but easily stored in wfn. That way we wouldn't be passing a py object around. This is really great stuff - some long overdue cleanup and standardization in here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/736#issuecomment-309296744:135,expose,exposed,135,https://psicode.org,https://github.com/psi4/psi4/pull/736#issuecomment-309296744,1,['expose'],['exposed']
Security,"DF FAILED* (diskDF passed all); >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 43, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3907, in run_fnodfcc; > set_cholesky_from('CC_TYPE'); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3897, in set_cholesky_from; > raise ValidationError("" FNOCC requires SCF_TYPE = DISK_DF""); >; > ValidationError: FNOCC requires SCF_TYPE = DISK_DF; >; > 7. DFOCC (OMP2/cc-pVDZ): *memDF FAILED* (diskDF passed all); >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 40, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 227, in select_omp2; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1558, in run_dfocc; > type_val = set_cholesky_from('MP2_TYPE'); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:8629,Validat,ValidationError,8629,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,2,['Validat'],['ValidationError']
Security,"Default on a Mac, 2.7.3 I guess. Francesco. On Aug 18, 2015, at 5:59 PM, Justin Turney <notifications@github.com<mailto:notifications@github.com>> wrote:. Hmmm, which version of Python are you using?. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/169#issuecomment-132368503. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/169#issuecomment-132368809:444,confidential,confidential,444,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-132368809,1,['confidential'],['confidential']
Security,"Do you happen to have access to v5 ORCA, @annulen? My orca is quite old -- v3.6. If you could generate ref values for this system perhaps https://github.com/psi4/psi4/blob/master/psi4/share/psi4/databases/S22.py#L695-L708 (monoA, monoB, dimer), that'd be a great help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2850#issuecomment-1831287726:22,access,access,22,https://psicode.org,https://github.com/psi4/psi4/issues/2850#issuecomment-1831287726,1,['access'],['access']
Security,"Do you happen to know if there's a lit citation for extrapolating the def2 basis sets or if they need a different extrapolation formula? I know Orca does def2 extrapolations; I've just never looked up how or what procedure they use. I'd defer the -PP fallbacks from this PR. That means changing the basis set compositing which is a huge pain. I'm hoping the MolSSI basisset project can be API-accessed to cover this (very sensible) case. Hand-pieced, other program, or `energy(cbs, ...)` call with calculator spot-checks will do fine for tests. If def2's need their own extrapolation formula, tests should probably check that those default correctly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/963#issuecomment-381265832:393,access,accessed,393,https://psicode.org,https://github.com/psi4/psi4/pull/963#issuecomment-381265832,1,['access'],['accessed']
Security,"Do you want me to fix it up, or do you want to give it a try? The below should do the trick. ```; # on master; git checkout -b moldennormco; # last commit should be ""Fix typo in doc and specify non-mass-weighted/normalized normal modes""; git pull --rebase upstream master; # last commit should be ""Fix typo ..."" and ; # first non-you commit should be ""Merge pull request #641 "" with hash 0c08 ; # (from https://github.com/psi4/psi4/commits/master); git push origin moldennormco:master; # fails because you're trying to rewrite published history; git push -f origin moldennormco:master; # success; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/644#issuecomment-286614076:383,hash,hash,383,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286614076,1,['hash'],['hash']
Security,"ED* (diskDF passed all); >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 40, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 227, in select_omp2; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1558, in run_dfocc; > type_val = set_cholesky_from('MP2_TYPE'); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1540, in set_cholesky_from; > raise ValidationError("" DFOCC requires SCF_TYPE = DISK_DF""); >; > ValidationError: DFOCC requires SCF_TYPE = DISK_DF; >; > 8. CI; > - CISD/cc-pVDZ: *ALL FAILED*; >; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 28, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 952, in select_cisd; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 4156, in run_cepa; > fnocc_wfn = core.fn",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:9746,Validat,ValidationError,9746,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,2,['Validat'],['ValidationError']
Security,Even c-side Mol manipulation has very little (no?) need to access `CoordEntry`/`CoordValue` directly. I'd leave them hidden unless a need arises.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1400#issuecomment-444528303:59,access,access,59,https://psicode.org,https://github.com/psi4/psi4/pull/1400#issuecomment-444528303,1,['access'],['access']
Security,"Eventually, I would need it in the AO basis. If it is possible to access all information (contractions, etc.) of the basis set and the matrix elements, I should be able to extract the required data, which would be great. I would already be happy to try this with the unrelaxed dm, to get things working, and then switch to the relaxed on, once it is available.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-260369576:66,access,access,66,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260369576,1,['access'],['access']
Security,"Exactly so, @hadim. psi4 has a c-f-compatible release, so that's on the `main` feedstock branch and accessible with `-c conda-forge`. _But_ psi4 still needs a unreleased libint branch, so that's packaged from the `dev` feedstock branch, so altogether, it's `conda install psi4 -c conda-forge/label/libint_dev -c conda-forge`. The long-term reference for the current channel path is https://psicode.org/installs/latest/ with selections (any os)-conda-(any py)-stable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1548171382:100,access,accessible,100,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1548171382,1,['access'],['accessible']
Security,"FWIW the default compiler flags in Fedora 35 x86_64 are; ```; -O2 -flto=auto -ffat-lto-objects -fexceptions -g -grecord-gcc-switches -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -fstack-protector-strong -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection; ```; which also includes the `-fstack-protector-strong` and `-D_FORTIFY_SOURCE=2` flags. These flags were made default in 2019, see https://fedoraproject.org/wiki/Changes/HardenedCompiler for the rationale.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2416#issuecomment-1025977577:160,secur,security,160,https://psicode.org,https://github.com/psi4/psi4/issues/2416#issuecomment-1025977577,1,['secur'],['security']
Security,"FYI Reviewers: the `tdscf_excitations` driver code [here](https://github.com/psi4/psi4/pull/1349/files#diff-341c62f24f732e5bdaaef3c16b0fa970R281) is not intended to be complete. I did some work on it before I realized that there were problems preventing a complete implementation. Some kwargs only accept one value, and are not fully validated which is something that can be added once the module is feature complete. I left it in so curious users had an entry point to experiment with and future work on the module can improve it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349#issuecomment-454810480:334,validat,validated,334,https://psicode.org,https://github.com/psi4/psi4/pull/1349#issuecomment-454810480,1,['validat'],['validated']
Security,"FYI, @susilehtola the site has been unreachable for me all afternoon and still is. Just letting you know in case it's a misconfigured firewall or something similar.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1688#issuecomment-515613120:134,firewall,firewall,134,https://psicode.org,https://github.com/psi4/psi4/pull/1688#issuecomment-515613120,1,['firewall'],['firewall']
Security,"FYI, @wadejong. Are you more concerned with accessing the symmetry-broken sol'n (perhaps through geometry tweaks or stability analysis) or with it being the default sol'n?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349491583:44,access,accessing,44,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349491583,1,['access'],['accessing']
Security,"For the most part, we let CMake figure out `-lm`. We'll try to catch the clang warnings in a cleanup pass. If there's anything you'd like to submit a PR for, please do so. The dev community doesn't have a FreeBSD machine accessible. Thanks for packaging!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/853#issuecomment-381031400:221,access,accessible,221,https://psicode.org,https://github.com/psi4/psi4/issues/853#issuecomment-381031400,1,['access'],['accessible']
Security,"Gibbs and scf-guess work on clang but not gcc?!. Gibbs fails due to; ```; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 69, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/lib/psi4/driver/driver.py"", line 1026, in optimize; """"""input, such as DOCC, is correct."""""" % (current_sym, initial_sym)). ValidationError: Point group changed! (cs <-- c2v) You should restart using the last geometry in the output, after carefully making sure all symmetry-dependent input, such as DOCC, is correct.; ```; Fixing by setting c2v symmetry. scf-guess fails due to; ```; TestComparisonError: 	UHF energy, SAD guess (a.u.): computed value (-99.3839116) does not match (-99.5312257) to 6 digits.; ```; Fixing by setting right occupations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-449589237:414,Validat,ValidationError,414,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-449589237,1,['Validat'],['ValidationError']
Security,"Great and thanks!. Francesco. On Jul 17, 2015, at 11:04 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. Yes, if you look at the source of http://psicode.org/psi4manual/master/_sources/tutorial.txt , there's statements like .. literalinclude:: /../../../../samples/tu6-cp-ne2/input.dat that directly include sample files in the documentation. It can also be trimmed like so:. .. literalinclude:: /../../../../lib/python/p4const/physconst.py; :lines: 25-. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/149#issuecomment-122477178. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/149#issuecomment-122478325:735,confidential,confidential,735,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122478325,1,['confidential'],['confidential']
Security,"Hello Francesco.; I don't quite understand you. The only matrix determine orbital coefficients is [MO] section data of the MOLDEN file and different determinants have only different occupation numbers of there orbitals.; I only sort MO orbitals by energy if required before feed it into CASINO. I will upload MOLDEN outputs for CASSCF and ROHF cases approximately in 2 hours when I will have access to the server. But you can also create these files easily from my inputs or you talk about some other matrices. Best, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-331875695:392,access,access,392,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331875695,1,['access'],['access']
Security,Here is the `conda list`:; ```; (p4env) [henrique@dhcppc3 ~] $ conda list; # packages in environment at /home/henrique/bin/anaconda3/envs/p4env:; #; # Name Version Build Channel; ambit 0.2 he865b90_0 psi4/label/dev; atomicwrites 1.2.1 py36_0 ; attrs 18.2.0 py36h28b3542_0 ; blas 1.0 mkl ; ca-certificates 2018.03.07 0 ; certifi 2018.8.24 py36_1 ; chemps2 1.8.7 h8c3debe_2 psi4/label/dev; decorator 4.3.0 py36_0 ; deepdiff 3.3.0 py36_1 psi4/label/dev; dkh 1.2 h173d85e_2 psi4/label/dev; gau2grid 1.2.0 h035aef0_0 psi4/label/dev; gdma 2.2.6 h0e1e685_6 psi4/label/dev; hdf5 1.10.2 hba1933b_1 ; intel-openmp 2019.0 118 ; jsonpickle 0.9.6 py36_0 psi4/label/dev; libedit 3.1.20170329 h6b74fdf_2 ; libffi 3.2.1 hd88cf55_4 ; libgcc-ng 8.2.0 hdf63c60_1 ; libgfortran-ng 7.3.0 hdf63c60_0 ; libint 1.2.1 h87b9b30_4 psi4/label/dev; libstdcxx-ng 8.2.0 hdf63c60_1 ; libxc 4.0.2 h14c3975_1 psi4/label/dev; mkl 2019.0 118 ; mkl_fft 1.0.4 py36h4414c95_1 ; mkl_random 1.0.1 py36h4414c95_1 ; more-itertools 4.3.0 py36_0 ; ncurses 6.1 hf484d3e_0 ; networkx 2.1 py36_0 ; numpy 1.15.1 py36h1d66e8a_0 ; numpy-base 1.15.1 py36h81de0dd_0 ; openssl 1.0.2p h14c3975_0 ; pcmsolver 1.2.1 py36h8733eb9_0 psi4/label/dev; pip 10.0.1 py36_0 ; pluggy 0.7.1 py36h28b3542_0 ; psi4 1.3a1.dev470+d6effa8 py36hc72e644_0 psi4/label/dev; py 1.6.0 py36_0 ; pytest 3.8.0 py36_0 ; python 3.6.6 hc3d631a_0 ; readline 7.0 h7b6447c_5 ; setuptools 40.2.0 py36_0 ; simint 0.7 h642920c_1 psi4/label/dev; six 1.11.0 py36_1 ; sqlite 3.24.0 h84994c4_0 ; tk 8.6.8 hbc83047_0 ; wheel 0.31.1 py36_0 ; xz 5.2.4 h14c3975_4 ; zlib 1.2.11 ha838bed_2 ; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902379:292,certificate,certificates,292,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902379,1,['certificate'],['certificates']
Security,"Hi @JonathonMisiewicz . > Can TREXIO be extended to support other C++ types, such as complex or double?. `double` type is fully supported (it is the default for floats or can be explicitly accessed by using the `_64` suffix in the API). In fact, we fully support 32- and 64-bit integers and floats as well as strings and arrays of strings. The `complex` type is supported implicitly, namely the real and imaginary parts can be written in two independent calls to the TREXIO API. > If a section has no data, e.g., Psi doesn't use a cell or periodic boundary calculations, I assume that consumes no memory?. Exactly, it is up to the user to decide which data to store. > Is there a way for us to store an intermediate with an arbitrary name? For example, let's say that we have a coupled cluster code that needs to store on disk not only the T2 amplitudes but an amplitude called W. Can we do that?. I think you would need to modify a format for that, only items listed in the `trex.org` (`trex.json`) can be written since the source code of the library is auto-generated from the format specification. @scemama please correct me if I am wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1387505470:189,access,accessed,189,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1387505470,1,['access'],['accessed']
Security,"Hi @loriab, I was just wondering if there are any updates on this issue please? I'm not sure how easy it would be to revert to behaviour before PR #2127? - at this point we had fully functioning access to both MBIS charges and atomic volumes. The calculation of the free atom volumes does not seem like a key feature to me (they can be easily tabulated). Thanks for your help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2272#issuecomment-925810175:195,access,access,195,https://psicode.org,https://github.com/psi4/psi4/issues/2272#issuecomment-925810175,1,['access'],['access']
Security,"Hi @mkrompiec, thanks! I'm still working on local correlation methods in Psi4. This pull request is effectively done, and is only waiting on the official Psi4 1.4 release to be merged. I expect that to happen relatively soon, but I'm not sure of the exact timeline. . Once this pull request is merged in, it would be straightforward to expose PNOs and integrals to the Python layer. By the way, if you're interested in regular (non-DLPNO) two-electron integrals, those are easily accessible through the `MintsHelper` class, [as is done here.](https://github.com/psi4/psi4numpy/blob/1233d1af2d168f91065e4f7dbb1a96e02b95b6e1/Tutorials/01_Psi4NumPy-Basics/1e_mints-helper.ipynb)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2093#issuecomment-863548414:336,expose,expose,336,https://psicode.org,https://github.com/psi4/psi4/pull/2093#issuecomment-863548414,2,"['access', 'expose']","['accessible', 'expose']"
Security,"Hi Jerome,; It was mostly a difficulty in getting the DFT orbital-Hessian vector code accessible in the right places. I had planned on improving that section so it could do mixed input Wavefunctions (RKS, UHF, ROHF, etc). Probably will not get around to it now. . It's also a neat experiment in mixing of high and low level languages in relation to the readability of code. . -Daniel Smith; Sent from my iPhone. . > On May 10, 2017, at 15:34, jgonthier <notifications@github.com> wrote:; > ; > Very impressive work... I'm happy SAPT(DFT) is done. I don't have time to check the details of the equations but I'm confident you did it right. I didn't see any problems after a quick overview of the SAPT code, at least.; > ; > Is there a specific reason why you chose to rewrite the SAPT JK energy terms (electrostatic, exchange, induction) in Python instead of having a new function call on the C++ side like you did for dispersion ?; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/698#issuecomment-300648648:86,access,accessible,86,https://psicode.org,https://github.com/psi4/psi4/pull/698#issuecomment-300648648,1,['access'],['accessible']
Security,"Hi Lori,. Thank you very much for your help. I have updated my tensor class. Further, I have added delte-MP2 corrections to the energy of the method, hence it is saved to PsiVar now. I think, you may add it public repo now. However, when try to make a push I got the following error:. remote: Permission to loriab/psi4.git denied to bozkaya.; fatal: unable to access 'https://github.com/loriab/psi4.git/': The requested URL returned error: 403. As I understand you should allow me to push my changes. Let me know if we need anything else. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1390#issuecomment-446552988:360,access,access,360,https://psicode.org,https://github.com/psi4/psi4/pull/1390#issuecomment-446552988,1,['access'],['access']
Security,"Hi all, I added integral hashing to the direct JK class for separate J and K matrix builds, to avoid doing redundant, expensive ERI computations when building linK and then building J. I also reran all the C tests (all passing).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-981225085:25,hash,hashing,25,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-981225085,1,['hash'],['hashing']
Security,"Hi loriab,. Thank you for your reply. I already have access to GCC 5.2.0 and 6.2.0 on the cluster. I currently try to compile psi4 with GCC 5.2.0. I am currently struggling with specifying the BLAS library. I would like to use OpenBLAS 0.2.13, but somehow cmake has problems to automatically detecting it and I also don't know how I can specify the explicit path to the library (/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib/libopenblas.so). I already tried setting. export MATH_ROOT=/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib. and. export MATH_ROOT=/cluster/apps/openblas/0.2.13_seq/x86_64/gcc_5.2.0. but in both cases OpenBLAS is not detected. If I disable the ENABLE_AUTO_BLAS and the ENABLE_AUTO_LAPACK settings, how can I specify the absolute path to the library ?. Thank you for your help. @andysim:; According to https://gcc.gnu.org/projects/cxx-status.html#cxx11:. ""GCC 4.8.1 was the first feature-complete implementation of the 2011 C++ standard, previously known as C++0x."". Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274478774:53,access,access,53,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274478774,1,['access'],['access']
Security,"Hi!; thank you, this is an interesting point and I am sure other code developers will raise the same issue. One of the main goals of TREXIO is to make it easy for different codes to exchange data. However, I understand that Psi4 may have specific needs that may not be included in the current version of TREXIO. One solution could be to use HDF5 for temporary files and store the final results with TREXIO. . But:; a better option is to fork TREXIO and extend it to fit Psi4's specific needs.; You could add your personal temporary arrays in a specific group named `psi4` for example, and link your own library with psi4. Additionally, if any modifications prove to be useful to other codes, they can be submitted as pull requests to the official library. The good thing with this strategy is that as long as you don't remove anything from the `trex.org` file, the files that you will produce will be detected as valid TREXIO files. Of course, there will be no way to access your specific data with the official library, but the files will be compatible with both the official and the custom library. @q-posev : We could think of a mechanism to generalize the possibility to extend the library for private data. Instead of reading only `trex.json`, we could let the script handle multiple json files to allow users to extend the library with custom groups. It could probably be integrated at the level of the configure script. In this way, @JonathonMisiewicz would only need to keep a JSON file in the git repo of psi4 to extend TREXIO instead of maintaining a fork of TREXIO and keeping his fork in sync with the official one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906:968,access,access,968,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906,1,['access'],['access']
Security,"Hi,; Sorry about the accidental break of features. I can fix this next week but for now trajectory information can be accessed like this. `E, history = psi4.optimize('hf/6-31G', molecule=h2o_suboptimal, return_history=True)`. This is what history looks like; ```; history = {; 'energy': [step.E for step in opt_object.history.steps],; 'gradient': [step.cart_grad for step in opt_object.history.steps],; 'coordinates': [step.geom for step in opt_object.history.steps],; }; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3074#issuecomment-1806363687:118,access,accessed,118,https://psicode.org,https://github.com/psi4/psi4/issues/3074#issuecomment-1806363687,1,['access'],['accessed']
Security,"Hmm, I'm not getting that but do see. ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/readqcsk.py"", line 19, in <module>; qcschema.validate(data=json.loads(handle.read()), schema_type=""output"") #args.schema_type); File ""/home/psilocaluser/gits/QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/psilocaluser/toolchainconda/envs/py39b/lib/python3.9/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'string'. Failed validating 'type' in schema['properties']['id']:; {'description': 'The optional ID for the computation.',; 'title': 'Id',; 'type': 'string'}. On instance['id']:; None; ```. Looks like more slight discrepancies btwn qcel `AtomicResult` and the hand-coded qcschema module. I thought I had reconciled those, but they may be waiting at https://github.com/MolSSI/QCSchema/pull/77/files .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2242#issuecomment-877837769:157,validat,validate,157,https://psicode.org,https://github.com/psi4/psi4/issues/2242#issuecomment-877837769,8,"['Validat', 'validat']","['ValidationError', 'validate', 'validating', 'validators']"
Security,"Hmm, well thats interesting. Would you mind running the boroxine test case with the DF-MP2 module and post the result? Best way to access this module is to simply request 'energy('MP2')`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/408#issuecomment-225929051:131,access,access,131,https://psicode.org,https://github.com/psi4/psi4/issues/408#issuecomment-225929051,2,['access'],['access']
Security,"Hmm, your right it might be good to doc the SuperFunctional class somewhere accessible. VV10 is automatically detected for full LibXC superfunctionals which contain VV10 parameters. However, -D and -NL and disparate enough that they likely need to be handled separately. What kind of automatic detection where you thinking about? Tagging `-V` to a functional will not work unless fit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/870#issuecomment-348223488:76,access,accessible,76,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-348223488,1,['access'],['accessible']
Security,"Hmm... can anybody give a bit of input into how I can access the Density Matrix (Da) at the basis function level (I have tried to do it like in the add_orbital() function), or if I can calculate the electron density from the orbital matrix (Ca)?. for the second option I guess I have to do something along this code in points.cc:; ```; // Rho_a = 2.0 * D_xy phi_xa phi_ya; C_DGEMM('N', 'N', npoints, nlocal, nlocal, 2.0, phip[0], coll_funcs, D2p[0], nglobal, 0.0, Tp[0], nglobal);; for (int P = 0; P < npoints; P++) {; rhoap[P] = C_DDOT(nlocal, phip[P], 1, Tp[P], 1);; }; ```. Regards",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311#issuecomment-433740725:54,access,access,54,https://psicode.org,https://github.com/psi4/psi4/issues/1311#issuecomment-433740725,1,['access'],['access']
Security,"I agree, it'd be nice to catch those and warn ppl off from that feature of GBS format. In the existing logic https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsbasissetparser.py#L183-L184 is already catching only `<element symbol(s)> 0` through the zero near the end of https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsbasissetparser.py#L115. This would be a general (to all files read), not specific, catch, but if you change that `0` in [the regex](; https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsbasissetparser.py#L115) to `\d+` then add the below after https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsbasissetparser.py#L184, does that catch and provide better guidance?. ```; gbsint = int(atom_array.match(line).group(2)); if gbsint != 0:; raise ValidationError(""""""Gaussian94BasisSetParser::parse: Unsupported basis to atom by number assignment. Use ""assign"" statements as in https://github.com/psi4/psi4/blob/master/tests/mints2/input.dat : line %d: %s"""""" % (lineno, line)); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1270#issuecomment-455333178:820,Validat,ValidationError,820,https://psicode.org,https://github.com/psi4/psi4/issues/1270#issuecomment-455333178,1,['Validat'],['ValidationError']
Security,"I am actually performing these calculations on Google Colab. (It is for a future workshop.) You can access a Colab notebook exemplifying the error [here](https://colab.research.google.com/drive/1uTsmVcFJY5xArRbo4sQ0RGgPiT406xdM?usp=sharing). Additionally, here is the output from `conda list`. . ```; # packages in environment at /usr/local:; #; # Name Version Build Channel; _libgcc_mutex 0.1 conda_forge conda-forge; _openmp_mutex 4.5 1_gnu conda-forge; alsa-lib 1.2.3 h516909a_0 conda-forge; ambit 0.5.1 hbe8a562_1 psi4; argon2-cffi 21.3.0 pyhd8ed1ab_0 conda-forge; argon2-cffi-bindings 21.2.0 py37h5e8e339_1 conda-forge; attrs 21.4.0 pyhd3eb1b0_0 ; backcall 0.2.0 pyh9f0ad1d_0 conda-forge; backports 1.0 py_2 conda-forge; backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0 conda-forge; beautifulsoup4 4.10.0 pyha770c72_0 conda-forge; blas 1.0 mkl ; bleach 4.1.0 pyhd8ed1ab_0 conda-forge; boost 1.74.0 py37h6dcda5c_3 conda-forge; boost-cpp 1.74.0 h312852a_4 conda-forge; bottleneck 1.3.4 py37hce1f21e_0 ; brotli 1.0.9 he6710b0_2 ; brotlipy 0.7.0 py37h5e8e339_1001 conda-forge; bzip2 1.0.8 h7f98852_4 conda-forge; c-ares 1.17.1 h7f98852_1 conda-forge; ca-certificates 2021.10.8 ha878542_0 conda-forge; cairo 1.16.0 hf32fb01_1 ; certifi 2021.10.8 py37h89c1867_1 conda-forge; cffi 1.15.0 py37h036bc23_0 conda-forge; chardet 4.0.0 py37h89c1867_1 conda-forge; chemps2 1.8.10 hbe8a562_0 psi4; conda 4.12.0 py37h89c1867_0 conda-forge; conda-package-handling 1.7.2 py37hb5d75c8_0 conda-forge; cryptography 3.4.5 py37h5d9358c_1 conda-forge; cudatoolkit 11.1.1 h6406543_8 conda-forge; cycler 0.11.0 pyhd3eb1b0_0 ; dbus 1.13.6 h5008d03_3 conda-forge; debtcollector 2.5.0 pyhd8ed1ab_0 conda-forge; debugpy 1.5.1 py37hcd2ae1e_0 conda-forge; decorator 5.1.1 pyhd3eb1b0_0 ; defusedxml 0.7.1 pyhd8ed1ab_0 conda-forge; dftd3 3.2.1 h84218bc_2 psi4; dkh 1.2 h173d85e_2 psi4; entrypoints 0.4 pyhd8ed1ab_0 conda-forge; expat 2.4.7 h27087fc_0 conda-forge; flit-core 3.7.1 pyhd8ed1ab_0 conda-forge; fontconfig 2.13.1 h6c099",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2510#issuecomment-1081031693:100,access,access,100,https://psicode.org,https://github.com/psi4/psi4/issues/2510#issuecomment-1081031693,1,['access'],['access']
Security,"I am fine with all three access calls, and I agree with Max regarding the clarification of the third one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2462#issuecomment-1061067997:25,access,access,25,https://psicode.org,https://github.com/psi4/psi4/pull/2462#issuecomment-1061067997,1,['access'],['access']
Security,"I can help better if I know your goal. The `ENABLE_GENERIC=ON` for BLAS/LAPACK was added to facilitate static linking of MKL libraries for binary packaging and distribution, both to minimize file size and make sure the binary had high-quality math libraries w/o needing an Intel license. Since then, we've learned that there can be bad reactions between psi4-w/-mkl-statically-linked and other software (namely numpy) that also accesses the same symbols. (#748 and #755 for gory details.) So we've dropped static linking for BLAS. It helps that conda distributes MKL now, too. So, I'm glad to help if that hasn't warned you off.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386411503:428,access,accesses,428,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386411503,2,['access'],['accesses']
Security,"I cannot reproduce this one. I pulled your branch and rebased it to master (which has not introduced any changes to the moinfo code) and it ran cleanly with address and memory sanitizers on my mac. I modified your changes to read:; ```c++; if (ref_wfn.frzcpi().n() != nirreps_ref) exit(42);; std::cout << ""DIMENSIONS "" << ref_wfn.frzcpi().n() << "" "" << nirreps_ref << std::endl;; ```; and it gave the following output:; ```; (base) QuickSilver:~/programming/psi4/obj_asserts (fix_nirreps) > DYLD_INSERT_LIBRARIES=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/10.0.0/lib/darwin/libclang_rt.asan_osx_dynamic.dylib psi4; Performing finite difference calculations; 5 displacements needed ... 1 2 3 4 5; 8 displacements needed.; 1DIMENSIONS 4 4; 2DIMENSIONS 4 4; 3DIMENSIONS 4 4; 4DIMENSIONS 4 4; 5DIMENSIONS 4 4; 6DIMENSIONS 4 4; 7DIMENSIONS 4 4; 8; ```; I tried the psimrcc-fd-freq1 test also and it runs just fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1521#issuecomment-462363479:176,sanitiz,sanitizers,176,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-462363479,1,['sanitiz'],['sanitizers']
Security,I don't have access any more to large memory systems and I haven't found the time to look at more recent version of PSI4. Yet the concern remains: you want to avoid that a system starts swapping.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/424#issuecomment-274321046:13,access,access,13,https://psicode.org,https://github.com/psi4/psi4/issues/424#issuecomment-274321046,1,['access'],['access']
Security,"I don't have access to G*, so can't easily verify. Is the difference due to Psi4's use of density fitting by default?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/937#issuecomment-376533125:13,access,access,13,https://psicode.org,https://github.com/psi4/psi4/pull/937#issuecomment-376533125,1,['access'],['access']
Security,"I don't have access to check right now, but I don't think `intrinsics_avx.h` should ever be included for SSE builds.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-356792009:13,access,access,13,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-356792009,1,['access'],['access']
Security,I don't know how to access this to show you. It stopped working around 11 am today,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3109#issuecomment-1856788141:20,access,access,20,https://psicode.org,https://github.com/psi4/psi4/issues/3109#issuecomment-1856788141,1,['access'],['access']
Security,"I don't know what your background is, so I'm going to write this explanation at a level accessible for a first-year graduate student, though it will still be dense. Many matrices in electronic structure theory are indexed by two orbitals. Each orbital will change in a different way under symmetry operations of the molecule (like rotation, reflection), and we call each classification an irreducible representation (irrep). Now, our matrices further have the property that A_mn = 0 unless the symmetries of m and n are somehow related. Our matrix then only needs to store ""blocks"" where for all orbitals m of irreducible representation h, the only non-zero elements of A are A_mn where n is an orbital of irreducible representation i. Because we use this block structure, it isn't enough to make sure that the total dimensions of the matrix agree (what your code does). We need the dimensions of each symmetry block to agree on the three points mentioned in the original issue. This validation should be performed for each irreducible representation. For reference, the code that Susi linked does the following:; ```; for each irreducible representation of the first index of A, Ha:; 	Hb is the irreducible representation of the first index of the B block that can multiply with the A block; Hc is the irreducible representation of the first index of the new matrix (if we're multiplying by A, this is just Ha, otherwise this is the irreducible representation of the second index for the block with first index Ha); 	m is the number of orbitals with the irreducible representation for the first index in this block of the new matrix; 	n is the number of orbitals with the irreducible representation for the second index in this block of the new matrix; 	k is the number of orbitals with the irreducible representation for the second index in this block of A, which is also the number of orbitals with the irreducible representation for the first index in this block of B; 	lda is the number of column",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2729#issuecomment-1260925688:88,access,accessible,88,https://psicode.org,https://github.com/psi4/psi4/pull/2729#issuecomment-1260925688,2,['access'],['accessible']
Security,"I dont have access to that paper at the moment, but a few notes for you:; - If you need to tweak functionals (@susilehtola this is a good example) please checkout [this](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/dft_funcs/hyb_superfuncs.py#L230) example. - For VV10 you can specify it via the python interface:; ```python; def build_myvv10_superfunctional(name, npoints, deriv, restricted):; sup = core.SuperFunctional.blank(); sup.set_name('HF+VV10'); sup.set_x_alpha(1.0). # Set VV10 parameters. If these are changed we assume you want VV10.; sup.vv10_b(...); sup.vv10_c(...). return sup. func_call = energy('SCF', dft_functional= build_myvv10_superfunctional); ```. The DFT code is likely the most class/inheritance/convoluted C++ code we have besides perhaps integrals. So probably not a great place to start in :). . - Post-SCF only VV10 is a good idea and just a matter of code logic. We need a flag somewhere that computes [this](https://github.com/psi4/psi4/blob/f03a896a2d70eac47137cf471dda4805e483586d/psi4/src/psi4/libfock/v.cc#L213) at the end of a SCF computation. The SCF iterations are in a bit of a state of flux due to the python porting; however, this should be pretty easy once merged as we have access to that Py-side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/870#issuecomment-347998008:12,access,access,12,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-347998008,2,['access'],['access']
Security,"I had to write some code recently using the Dimension object and I was thinking that it would be useful to support initialization from a list, for example:; ```; Dimension orbs({3,0,1,1}); ```; This is particularly useful when working with Slices to avoid doing this:; ```; auto start_dim = psi::Dimension(1);; start_dim[0] = start;; ```; I think it might already be supported on the python side. Another useful thing would be to have direct access to the underlying std::vector object, or const iterators for it. That way, one could use Dimensions in loops more naturally. I was wondering, since you are modifying the class, would you be able to implement these changes as well?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2953#issuecomment-1808185903:442,access,access,442,https://psicode.org,https://github.com/psi4/psi4/pull/2953#issuecomment-1808185903,1,['access'],['access']
Security,"I haven't seen any articles advocating the new workflow, but will let you know if I stumble upon them. I just skimmed the link you sent, and it looks like it raises some good points. My motivation for pushing the PR-based workflow is to make it much easier to validate (via Travis) contributions. By finding issues at the PR stage, we can avoid problems entering the codebase; pushing the new CC transform code as a PR would have prevented that simple missing ""return"" statement from affecting any users, for example. That turned out to be a non-issue, but it serves as a nice example of how apparently good code can still introduce problems that can be difficult to hunt down without our new workflow. The PR mechanism just serves to utilize the contributor's fork as a staging area for validation, which takes a lot of responsibility off the shoulders of the maintainer that clicks that ""accept"" button. A very nice side effect of all of this, is that is brings us in line with most projects on GH, and lowers the barrier to getting contributions from outside the usual suspects.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/254#issuecomment-187310350:260,validat,validate,260,https://psicode.org,https://github.com/psi4/psi4/pull/254#issuecomment-187310350,4,['validat'],"['validate', 'validation']"
Security,I just fixed the issue with xrange and the frozen MOs. Will go over some of @dgasmith's comments soon. I just realized I could access the spaces from ciwfn instead of mcscf_obj. I'll remove the python bindings that I added since they seem redundant now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-304475473:127,access,access,127,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304475473,1,['access'],['access']
Security,"I may need some help building a new Windows L2 library with the extra OEI hessians; the VM that I had set up is no longer available after the IT folks kindly sent a security patch that bricked my laptop. I should be able to get Parallels running again if needed, but would appreciate help from anyone with a Windows machine. The failure in ADCC is something I see locally too; I get `ImportError: /u/andysim/anaconda3/envs/psi4dev/lib//python3.9/site-packages/../.././libmkl_sequential.so.1: undefined symbol: mkl_lapack_xzlaswp_i4`, so it looks like some kind of Conda dependency problem. If I try and build ADCC instead, I get problems finding `libtensorlight`, which I have installed via Conda. Any clues about this are welcome, before I head down the rabbithole.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2388#issuecomment-1004856298:165,secur,security,165,https://psicode.org,https://github.com/psi4/psi4/pull/2388#issuecomment-1004856298,1,['secur'],['security']
Security,"I need to update the test for cc5, which is currently failing even though; it's not run automagically. It seems that the reference output was; overwritten by an output from a failed calculation. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Sun, Apr 3, 2016 at 9:10 PM, Daniel Smith notifications@github.com; wrote:. > As a note: not all CC tests are tested through Perl. Actually looking at; > the output has caught a few bugs so far, although it does require someone; > intimately familiar with the tests to do so.; > ; > I would be happy if we could get eyes on every test, but if it doesn’t; > happen its not a big deal.; > ; > > On Apr 3, 2016, at 8:59 PM, Andy Simmonett notifications@github.com; > > wrote:; > > ; > > Sorry for the delay. The DCFT tests look good to me. I think we can also; > > check of the CC tests; if I remember correctly, those tests are actually; > > validated by comparing the output to the reference using a separate Perl; > > script. If the tests run successfully, it means that the output is present; > > and correct, or Perl wouldn't be able to parse it.; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4/pull/315#issuecomment-205091286>; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/315#issuecomment-205094545",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315#issuecomment-205097386:891,validat,validated,891,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205097386,1,['validat'],['validated']
